

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 14 19:58:29 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  001FBC                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _tempSecond
   102  001FBC  FF                 	db	255
   103                           
   104                           ;initializer for _wrap
   105  001FBD  01                 	db	1
   106                           
   107                           	psect	idataBANK0
   108  001AA6                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _color
   112  001AA6  F800               	dw	63488
   113  001AA8  F800               	dw	63488
   114  001AAA  F800               	dw	63488
   115  001AAC  001F               	dw	31
   116  001AAE  001F               	dw	31
   117  001AB0  07E0               	dw	2016
   118  001AB2  001F               	dw	31
   119  001AB4  001F               	dw	31
   120  001AB6  F81F               	dw	63519
   121  001AB8  0000               	dw	0
   122  001ABA  0000               	dw	0
   123  001ABC  0000               	dw	0
   124  001ABE  0000               	dw	0
   125  001AC0  0000               	dw	0
   126  001AC2  0000               	dw	0
   127  001AC4  0000               	dw	0
   128  001AC6  0000               	dw	0
   129  001AC8  0000               	dw	0
   130  001ACA  0000               	dw	0
   131  001ACC  0000               	dw	0
   132  001ACE  0000               	dw	0
   133                           
   134                           ;initializer for _array1
   135  001AD0  A2                 	db	162
   136  001AD1  62                 	db	98
   137  001AD2  E2                 	db	226
   138  001AD3  22                 	db	34
   139  001AD4  02                 	db	2
   140  001AD5  C2                 	db	194
   141  001AD6  E0                 	db	224
   142  001AD7  A8                 	db	168
   143  001AD8  90                 	db	144
   144  001AD9  68                 	db	104
   145  001ADA  98                 	db	152
   146  001ADB  B0                 	db	176
   147  001ADC  30                 	db	48
   148  001ADD  18                 	db	24
   149  001ADE  7A                 	db	122
   150  001ADF  10                 	db	16
   151  001AE0  38                 	db	56
   152  001AE1  5A                 	db	90
   153  001AE2  42                 	db	66
   154  001AE3  4A                 	db	74
   155  001AE4  52                 	db	82
   156                           
   157                           ;initializer for _Timing_Txt
   158  001AE5  53                 	db	83
   159  001AE6  50                 	db	80
   160  001AE7  32                 	db	50
   161  001AE8  34                 	db	52
   162  001AE9  2F                 	db	47
   163  001AEA  33                 	db	51
   164  001AEB  2F                 	db	47
   165  001AEC  30                 	db	48
   166  001AED  31                 	db	49
   167  001AEE  00                 	db	0
   168                           
   169                           	psect	idataBANK1
   170  00182E                     __pidataBANK1:
   171                           	opt stack 0
   172                           
   173                           ;initializer for _txt1
   174  00182E  43                 	db	67
   175  00182F  48                 	db	72
   176  001830  2D                 	db	45
   177  001831  00                 	db	0
   178  001832  43                 	db	67
   179  001833  48                 	db	72
   180  001834  00                 	db	0
   181  001835  00                 	db	0
   182  001836  43                 	db	67
   183  001837  48                 	db	72
   184  001838  2B                 	db	43
   185  001839  00                 	db	0
   186  00183A  42                 	db	66
   187  00183B  57                 	db	87
   188  00183C  44                 	db	68
   189  00183D  00                 	db	0
   190  00183E  46                 	db	70
   191  00183F  57                 	db	87
   192  001840  44                 	db	68
   193  001841  00                 	db	0
   194  001842  50                 	db	80
   195  001843  4C                 	db	76
   196  001844  59                 	db	89
   197  001845  00                 	db	0
   198  001846  56                 	db	86
   199  001847  4C                 	db	76
   200  001848  2D                 	db	45
   201  001849  00                 	db	0
   202  00184A  56                 	db	86
   203  00184B  4C                 	db	76
   204  00184C  2B                 	db	43
   205  00184D  00                 	db	0
   206  00184E  45                 	db	69
   207  00184F  51                 	db	81
   208  001850  20                 	db	32
   209  001851  00                 	db	0
   210  001852  20                 	db	32
   211  001853  30                 	db	48
   212  001854  20                 	db	32
   213  001855  00                 	db	0
   214  001856  31                 	db	49
   215  001857  30                 	db	48
   216  001858  30                 	db	48
   217  001859  00                 	db	0
   218  00185A  32                 	db	50
   219  00185B  30                 	db	48
   220  00185C  30                 	db	48
   221  00185D  00                 	db	0
   222  00185E  20                 	db	32
   223  00185F  31                 	db	49
   224  001860  20                 	db	32
   225  001861  00                 	db	0
   226  001862  20                 	db	32
   227  001863  32                 	db	50
   228  001864  20                 	db	32
   229  001865  00                 	db	0
   230  001866  20                 	db	32
   231  001867  33                 	db	51
   232  001868  20                 	db	32
   233  001869  00                 	db	0
   234  00186A  20                 	db	32
   235  00186B  34                 	db	52
   236  00186C  20                 	db	32
   237  00186D  00                 	db	0
   238  00186E  20                 	db	32
   239  00186F  35                 	db	53
   240  001870  20                 	db	32
   241  001871  00                 	db	0
   242  001872  20                 	db	32
   243  001873  36                 	db	54
   244  001874  20                 	db	32
   245  001875  00                 	db	0
   246  001876  20                 	db	32
   247  001877  37                 	db	55
   248  001878  20                 	db	32
   249  001879  00                 	db	0
   250  00187A  20                 	db	32
   251  00187B  38                 	db	56
   252  00187C  20                 	db	32
   253  00187D  00                 	db	0
   254  00187E  20                 	db	32
   255  00187F  39                 	db	57
   256  001880  20                 	db	32
   257  001881  00                 	db	0
   258                           
   259                           	psect	mediumconst
   260  00FD72                     __pmediumconst:
   261                           	opt stack 0
   262  00FD72  00                 	db	0
   263  00FD73                     _font:
   264                           	opt stack 0
   265  00FD73  00                 	db	0
   266  00FD74  00                 	db	0
   267  00FD75  00                 	db	0
   268  00FD76  00                 	db	0
   269  00FD77  00                 	db	0
   270  00FD78  00                 	db	0
   271  00FD79  00                 	db	0
   272  00FD7A  5F                 	db	95
   273  00FD7B  00                 	db	0
   274  00FD7C  00                 	db	0
   275  00FD7D  00                 	db	0
   276  00FD7E  07                 	db	7
   277  00FD7F  00                 	db	0
   278  00FD80  07                 	db	7
   279  00FD81  00                 	db	0
   280  00FD82  14                 	db	20
   281  00FD83  7F                 	db	127
   282  00FD84  14                 	db	20
   283  00FD85  7F                 	db	127
   284  00FD86  14                 	db	20
   285  00FD87  24                 	db	36
   286  00FD88  2A                 	db	42
   287  00FD89  7F                 	db	127
   288  00FD8A  2A                 	db	42
   289  00FD8B  12                 	db	18
   290  00FD8C  23                 	db	35
   291  00FD8D  13                 	db	19
   292  00FD8E  08                 	db	8
   293  00FD8F  64                 	db	100
   294  00FD90  62                 	db	98
   295  00FD91  36                 	db	54
   296  00FD92  49                 	db	73
   297  00FD93  56                 	db	86
   298  00FD94  20                 	db	32
   299  00FD95  50                 	db	80
   300  00FD96  00                 	db	0
   301  00FD97  08                 	db	8
   302  00FD98  07                 	db	7
   303  00FD99  03                 	db	3
   304  00FD9A  00                 	db	0
   305  00FD9B  00                 	db	0
   306  00FD9C  1C                 	db	28
   307  00FD9D  22                 	db	34
   308  00FD9E  41                 	db	65
   309  00FD9F  00                 	db	0
   310  00FDA0  00                 	db	0
   311  00FDA1  41                 	db	65
   312  00FDA2  22                 	db	34
   313  00FDA3  1C                 	db	28
   314  00FDA4  00                 	db	0
   315  00FDA5  2A                 	db	42
   316  00FDA6  1C                 	db	28
   317  00FDA7  7F                 	db	127
   318  00FDA8  1C                 	db	28
   319  00FDA9  2A                 	db	42
   320  00FDAA  08                 	db	8
   321  00FDAB  08                 	db	8
   322  00FDAC  3E                 	db	62
   323  00FDAD  08                 	db	8
   324  00FDAE  08                 	db	8
   325  00FDAF  00                 	db	0
   326  00FDB0  80                 	db	128
   327  00FDB1  70                 	db	112
   328  00FDB2  30                 	db	48
   329  00FDB3  00                 	db	0
   330  00FDB4  08                 	db	8
   331  00FDB5  08                 	db	8
   332  00FDB6  08                 	db	8
   333  00FDB7  08                 	db	8
   334  00FDB8  08                 	db	8
   335  00FDB9  00                 	db	0
   336  00FDBA  00                 	db	0
   337  00FDBB  60                 	db	96
   338  00FDBC  60                 	db	96
   339  00FDBD  00                 	db	0
   340  00FDBE  20                 	db	32
   341  00FDBF  10                 	db	16
   342  00FDC0  08                 	db	8
   343  00FDC1  04                 	db	4
   344  00FDC2  02                 	db	2
   345  00FDC3  3E                 	db	62
   346  00FDC4  51                 	db	81
   347  00FDC5  49                 	db	73
   348  00FDC6  45                 	db	69
   349  00FDC7  3E                 	db	62
   350  00FDC8  00                 	db	0
   351  00FDC9  42                 	db	66
   352  00FDCA  7F                 	db	127
   353  00FDCB  40                 	db	64
   354  00FDCC  00                 	db	0
   355  00FDCD  72                 	db	114
   356  00FDCE  49                 	db	73
   357  00FDCF  49                 	db	73
   358  00FDD0  49                 	db	73
   359  00FDD1  46                 	db	70
   360  00FDD2  21                 	db	33
   361  00FDD3  41                 	db	65
   362  00FDD4  49                 	db	73
   363  00FDD5  4D                 	db	77
   364  00FDD6  33                 	db	51
   365  00FDD7  18                 	db	24
   366  00FDD8  14                 	db	20
   367  00FDD9  12                 	db	18
   368  00FDDA  7F                 	db	127
   369  00FDDB  10                 	db	16
   370  00FDDC  27                 	db	39
   371  00FDDD  45                 	db	69
   372  00FDDE  45                 	db	69
   373  00FDDF  45                 	db	69
   374  00FDE0  39                 	db	57
   375  00FDE1  3C                 	db	60
   376  00FDE2  4A                 	db	74
   377  00FDE3  49                 	db	73
   378  00FDE4  49                 	db	73
   379  00FDE5  31                 	db	49
   380  00FDE6  41                 	db	65
   381  00FDE7  21                 	db	33
   382  00FDE8  11                 	db	17
   383  00FDE9  09                 	db	9
   384  00FDEA  07                 	db	7
   385  00FDEB  36                 	db	54
   386  00FDEC  49                 	db	73
   387  00FDED  49                 	db	73
   388  00FDEE  49                 	db	73
   389  00FDEF  36                 	db	54
   390  00FDF0  46                 	db	70
   391  00FDF1  49                 	db	73
   392  00FDF2  49                 	db	73
   393  00FDF3  29                 	db	41
   394  00FDF4  1E                 	db	30
   395  00FDF5  00                 	db	0
   396  00FDF6  00                 	db	0
   397  00FDF7  14                 	db	20
   398  00FDF8  00                 	db	0
   399  00FDF9  00                 	db	0
   400  00FDFA  00                 	db	0
   401  00FDFB  40                 	db	64
   402  00FDFC  34                 	db	52
   403  00FDFD  00                 	db	0
   404  00FDFE  00                 	db	0
   405  00FDFF  00                 	db	0
   406  00FE00  08                 	db	8
   407  00FE01  14                 	db	20
   408  00FE02  22                 	db	34
   409  00FE03  41                 	db	65
   410  00FE04  14                 	db	20
   411  00FE05  14                 	db	20
   412  00FE06  14                 	db	20
   413  00FE07  14                 	db	20
   414  00FE08  14                 	db	20
   415  00FE09  00                 	db	0
   416  00FE0A  41                 	db	65
   417  00FE0B  22                 	db	34
   418  00FE0C  14                 	db	20
   419  00FE0D  08                 	db	8
   420  00FE0E  02                 	db	2
   421  00FE0F  01                 	db	1
   422  00FE10  59                 	db	89
   423  00FE11  09                 	db	9
   424  00FE12  06                 	db	6
   425  00FE13  3E                 	db	62
   426  00FE14  41                 	db	65
   427  00FE15  5D                 	db	93
   428  00FE16  59                 	db	89
   429  00FE17  4E                 	db	78
   430  00FE18  7C                 	db	124
   431  00FE19  12                 	db	18
   432  00FE1A  11                 	db	17
   433  00FE1B  12                 	db	18
   434  00FE1C  7C                 	db	124
   435  00FE1D  7F                 	db	127
   436  00FE1E  49                 	db	73
   437  00FE1F  49                 	db	73
   438  00FE20  49                 	db	73
   439  00FE21  36                 	db	54
   440  00FE22  3E                 	db	62
   441  00FE23  41                 	db	65
   442  00FE24  41                 	db	65
   443  00FE25  41                 	db	65
   444  00FE26  22                 	db	34
   445  00FE27  7F                 	db	127
   446  00FE28  41                 	db	65
   447  00FE29  41                 	db	65
   448  00FE2A  41                 	db	65
   449  00FE2B  3E                 	db	62
   450  00FE2C  7F                 	db	127
   451  00FE2D  49                 	db	73
   452  00FE2E  49                 	db	73
   453  00FE2F  49                 	db	73
   454  00FE30  41                 	db	65
   455  00FE31  7F                 	db	127
   456  00FE32  09                 	db	9
   457  00FE33  09                 	db	9
   458  00FE34  09                 	db	9
   459  00FE35  01                 	db	1
   460  00FE36  3E                 	db	62
   461  00FE37  41                 	db	65
   462  00FE38  41                 	db	65
   463  00FE39  51                 	db	81
   464  00FE3A  73                 	db	115
   465  00FE3B  7F                 	db	127
   466  00FE3C  08                 	db	8
   467  00FE3D  08                 	db	8
   468  00FE3E  08                 	db	8
   469  00FE3F  7F                 	db	127
   470  00FE40  00                 	db	0
   471  00FE41  41                 	db	65
   472  00FE42  7F                 	db	127
   473  00FE43  41                 	db	65
   474  00FE44  00                 	db	0
   475  00FE45  20                 	db	32
   476  00FE46  40                 	db	64
   477  00FE47  41                 	db	65
   478  00FE48  3F                 	db	63
   479  00FE49  01                 	db	1
   480  00FE4A  7F                 	db	127
   481  00FE4B  08                 	db	8
   482  00FE4C  14                 	db	20
   483  00FE4D  22                 	db	34
   484  00FE4E  41                 	db	65
   485  00FE4F  7F                 	db	127
   486  00FE50  40                 	db	64
   487  00FE51  40                 	db	64
   488  00FE52  40                 	db	64
   489  00FE53  40                 	db	64
   490  00FE54  7F                 	db	127
   491  00FE55  02                 	db	2
   492  00FE56  1C                 	db	28
   493  00FE57  02                 	db	2
   494  00FE58  7F                 	db	127
   495  00FE59  7F                 	db	127
   496  00FE5A  04                 	db	4
   497  00FE5B  08                 	db	8
   498  00FE5C  10                 	db	16
   499  00FE5D  7F                 	db	127
   500  00FE5E  3E                 	db	62
   501  00FE5F  41                 	db	65
   502  00FE60  41                 	db	65
   503  00FE61  41                 	db	65
   504  00FE62  3E                 	db	62
   505  00FE63  7F                 	db	127
   506  00FE64  09                 	db	9
   507  00FE65  09                 	db	9
   508  00FE66  09                 	db	9
   509  00FE67  06                 	db	6
   510  00FE68  3E                 	db	62
   511  00FE69  41                 	db	65
   512  00FE6A  51                 	db	81
   513  00FE6B  21                 	db	33
   514  00FE6C  5E                 	db	94
   515  00FE6D  7F                 	db	127
   516  00FE6E  09                 	db	9
   517  00FE6F  19                 	db	25
   518  00FE70  29                 	db	41
   519  00FE71  46                 	db	70
   520  00FE72                     __end_of_font:
   521                           	opt stack 0
   522  00FE72                     _font2:
   523                           	opt stack 0
   524  00FE72  26                 	db	38
   525  00FE73  49                 	db	73
   526  00FE74  49                 	db	73
   527  00FE75  49                 	db	73
   528  00FE76  32                 	db	50
   529  00FE77  03                 	db	3
   530  00FE78  01                 	db	1
   531  00FE79  7F                 	db	127
   532  00FE7A  01                 	db	1
   533  00FE7B  03                 	db	3
   534  00FE7C  3F                 	db	63
   535  00FE7D  40                 	db	64
   536  00FE7E  40                 	db	64
   537  00FE7F  40                 	db	64
   538  00FE80  3F                 	db	63
   539  00FE81  1F                 	db	31
   540  00FE82  20                 	db	32
   541  00FE83  40                 	db	64
   542  00FE84  20                 	db	32
   543  00FE85  1F                 	db	31
   544  00FE86  3F                 	db	63
   545  00FE87  40                 	db	64
   546  00FE88  38                 	db	56
   547  00FE89  40                 	db	64
   548  00FE8A  3F                 	db	63
   549  00FE8B  63                 	db	99
   550  00FE8C  14                 	db	20
   551  00FE8D  08                 	db	8
   552  00FE8E  14                 	db	20
   553  00FE8F  63                 	db	99
   554  00FE90  03                 	db	3
   555  00FE91  04                 	db	4
   556  00FE92  78                 	db	120
   557  00FE93  04                 	db	4
   558  00FE94  03                 	db	3
   559  00FE95  61                 	db	97
   560  00FE96  59                 	db	89
   561  00FE97  49                 	db	73
   562  00FE98  4D                 	db	77
   563  00FE99  43                 	db	67
   564  00FE9A  00                 	db	0
   565  00FE9B  7F                 	db	127
   566  00FE9C  41                 	db	65
   567  00FE9D  41                 	db	65
   568  00FE9E  41                 	db	65
   569  00FE9F  02                 	db	2
   570  00FEA0  04                 	db	4
   571  00FEA1  08                 	db	8
   572  00FEA2  10                 	db	16
   573  00FEA3  20                 	db	32
   574  00FEA4  00                 	db	0
   575  00FEA5  41                 	db	65
   576  00FEA6  41                 	db	65
   577  00FEA7  41                 	db	65
   578  00FEA8  7F                 	db	127
   579  00FEA9  04                 	db	4
   580  00FEAA  02                 	db	2
   581  00FEAB  01                 	db	1
   582  00FEAC  02                 	db	2
   583  00FEAD  04                 	db	4
   584  00FEAE  40                 	db	64
   585  00FEAF  40                 	db	64
   586  00FEB0  40                 	db	64
   587  00FEB1  40                 	db	64
   588  00FEB2  40                 	db	64
   589  00FEB3  00                 	db	0
   590  00FEB4  03                 	db	3
   591  00FEB5  07                 	db	7
   592  00FEB6  08                 	db	8
   593  00FEB7  00                 	db	0
   594  00FEB8  20                 	db	32
   595  00FEB9  54                 	db	84
   596  00FEBA  54                 	db	84
   597  00FEBB  78                 	db	120
   598  00FEBC  40                 	db	64
   599  00FEBD  7F                 	db	127
   600  00FEBE  28                 	db	40
   601  00FEBF  44                 	db	68
   602  00FEC0  44                 	db	68
   603  00FEC1  38                 	db	56
   604  00FEC2  38                 	db	56
   605  00FEC3  44                 	db	68
   606  00FEC4  44                 	db	68
   607  00FEC5  44                 	db	68
   608  00FEC6  28                 	db	40
   609  00FEC7  38                 	db	56
   610  00FEC8  44                 	db	68
   611  00FEC9  44                 	db	68
   612  00FECA  28                 	db	40
   613  00FECB  7F                 	db	127
   614  00FECC  38                 	db	56
   615  00FECD  54                 	db	84
   616  00FECE  54                 	db	84
   617  00FECF  54                 	db	84
   618  00FED0  18                 	db	24
   619  00FED1  00                 	db	0
   620  00FED2  08                 	db	8
   621  00FED3  7E                 	db	126
   622  00FED4  09                 	db	9
   623  00FED5  02                 	db	2
   624  00FED6  18                 	db	24
   625  00FED7  A4                 	db	164
   626  00FED8  A4                 	db	164
   627  00FED9  9C                 	db	156
   628  00FEDA  78                 	db	120
   629  00FEDB  7F                 	db	127
   630  00FEDC  08                 	db	8
   631  00FEDD  04                 	db	4
   632  00FEDE  04                 	db	4
   633  00FEDF  78                 	db	120
   634  00FEE0  00                 	db	0
   635  00FEE1  44                 	db	68
   636  00FEE2  7D                 	db	125
   637  00FEE3  40                 	db	64
   638  00FEE4  00                 	db	0
   639  00FEE5  20                 	db	32
   640  00FEE6  40                 	db	64
   641  00FEE7  40                 	db	64
   642  00FEE8  3D                 	db	61
   643  00FEE9  00                 	db	0
   644  00FEEA  7F                 	db	127
   645  00FEEB  10                 	db	16
   646  00FEEC  28                 	db	40
   647  00FEED  44                 	db	68
   648  00FEEE  00                 	db	0
   649  00FEEF  00                 	db	0
   650  00FEF0  41                 	db	65
   651  00FEF1  7F                 	db	127
   652  00FEF2  40                 	db	64
   653  00FEF3  00                 	db	0
   654  00FEF4  7C                 	db	124
   655  00FEF5  04                 	db	4
   656  00FEF6  78                 	db	120
   657  00FEF7  04                 	db	4
   658  00FEF8  78                 	db	120
   659  00FEF9  7C                 	db	124
   660  00FEFA  08                 	db	8
   661  00FEFB  04                 	db	4
   662  00FEFC  04                 	db	4
   663  00FEFD  78                 	db	120
   664  00FEFE  38                 	db	56
   665  00FEFF  44                 	db	68
   666  00FF00  44                 	db	68
   667  00FF01  44                 	db	68
   668  00FF02  38                 	db	56
   669  00FF03  FC                 	db	252
   670  00FF04  18                 	db	24
   671  00FF05  24                 	db	36
   672  00FF06  24                 	db	36
   673  00FF07  18                 	db	24
   674  00FF08  18                 	db	24
   675  00FF09  24                 	db	36
   676  00FF0A  24                 	db	36
   677  00FF0B  18                 	db	24
   678  00FF0C  FC                 	db	252
   679  00FF0D  7C                 	db	124
   680  00FF0E  08                 	db	8
   681  00FF0F  04                 	db	4
   682  00FF10  04                 	db	4
   683  00FF11  08                 	db	8
   684  00FF12  48                 	db	72
   685  00FF13  54                 	db	84
   686  00FF14  54                 	db	84
   687  00FF15  54                 	db	84
   688  00FF16  24                 	db	36
   689  00FF17  04                 	db	4
   690  00FF18  04                 	db	4
   691  00FF19  3F                 	db	63
   692  00FF1A  44                 	db	68
   693  00FF1B  24                 	db	36
   694  00FF1C  3C                 	db	60
   695  00FF1D  40                 	db	64
   696  00FF1E  40                 	db	64
   697  00FF1F  20                 	db	32
   698  00FF20  7C                 	db	124
   699  00FF21  1C                 	db	28
   700  00FF22  20                 	db	32
   701  00FF23  40                 	db	64
   702  00FF24  20                 	db	32
   703  00FF25  1C                 	db	28
   704  00FF26  3C                 	db	60
   705  00FF27  40                 	db	64
   706  00FF28  30                 	db	48
   707  00FF29  40                 	db	64
   708  00FF2A  3C                 	db	60
   709  00FF2B  44                 	db	68
   710  00FF2C  28                 	db	40
   711  00FF2D  10                 	db	16
   712  00FF2E  28                 	db	40
   713  00FF2F  44                 	db	68
   714  00FF30  4C                 	db	76
   715  00FF31  90                 	db	144
   716  00FF32  90                 	db	144
   717  00FF33  90                 	db	144
   718  00FF34  7C                 	db	124
   719  00FF35  44                 	db	68
   720  00FF36  64                 	db	100
   721  00FF37  54                 	db	84
   722  00FF38  4C                 	db	76
   723  00FF39  44                 	db	68
   724  00FF3A  00                 	db	0
   725  00FF3B  08                 	db	8
   726  00FF3C  36                 	db	54
   727  00FF3D  41                 	db	65
   728  00FF3E  00                 	db	0
   729  00FF3F  00                 	db	0
   730  00FF40  00                 	db	0
   731  00FF41  77                 	db	119
   732  00FF42  00                 	db	0
   733  00FF43  00                 	db	0
   734  00FF44  00                 	db	0
   735  00FF45  41                 	db	65
   736  00FF46  36                 	db	54
   737  00FF47  08                 	db	8
   738  00FF48  00                 	db	0
   739  00FF49  02                 	db	2
   740  00FF4A  01                 	db	1
   741  00FF4B  02                 	db	2
   742  00FF4C  04                 	db	4
   743  00FF4D  02                 	db	2
   744  00FF4E                     __end_of_font2:
   745                           	opt stack 0
   746  00FF4E                     _dpowers:
   747                           	opt stack 0
   748  00FF4E  0001               	dw	1
   749  00FF50  000A               	dw	10
   750  00FF52  0064               	dw	100
   751  00FF54  03E8               	dw	1000
   752  00FF56  2710               	dw	10000
   753  00FF58                     __end_of_dpowers:
   754                           	opt stack 0
   755  00FF58                     _hexpowers:
   756                           	opt stack 0
   757  00FF58  0001               	dw	1
   758  00FF5A  0010               	dw	16
   759  00FF5C  0100               	dw	256
   760  00FF5E  1000               	dw	4096
   761  00FF60                     __end_of_hexpowers:
   762                           	opt stack 0
   763  0000                     _ADCON0	set	4034
   764  0000                     _ADCON0bits	set	4034
   765  0000                     _ADCON1	set	4033
   766  0000                     _ADCON2	set	4032
   767  0000                     _ADRESH	set	4036
   768  0000                     _ADRESL	set	4035
   769  0000                     _CCP1CON	set	4029
   770  0000                     _CCP2CON	set	4026
   771  0000                     _CCPR1L	set	4030
   772  0000                     _CCPR2L	set	4027
   773  0000                     _INTCON2bits	set	4081
   774  0000                     _INTCON3bits	set	4080
   775  0000                     _INTCONbits	set	4082
   776  0000                     _OSCCON	set	4051
   777  0000                     _PIE1bits	set	3997
   778  0000                     _PIR1bits	set	3998
   779  0000                     _PIR2bits	set	4001
   780  0000                     _PORTA	set	3968
   781  0000                     _PORTBbits	set	3969
   782  0000                     _PORTCbits	set	3970
   783  0000                     _PORTD	set	3971
   784  0000                     _PORTDbits	set	3971
   785  0000                     _PORTE	set	3972
   786  0000                     _PR2	set	4043
   787  0000                     _RCSTA	set	4011
   788  0000                     _RCSTAbits	set	4011
   789  0000                     _SPBRG	set	4015
   790  0000                     _SPBRGH	set	4016
   791  0000                     _SSPBUF	set	4041
   792  0000                     _SSPCON1	set	4038
   793  0000                     _SSPSTAT	set	4039
   794  0000                     _SSPSTATbits	set	4039
   795  0000                     _T0CON	set	4053
   796  0000                     _T0CONbits	set	4053
   797  0000                     _T1CON	set	4045
   798  0000                     _T1CONbits	set	4045
   799  0000                     _T2CON	set	4042
   800  0000                     _T3CON	set	4017
   801  0000                     _T3CONbits	set	4017
   802  0000                     _TMR0H	set	4055
   803  0000                     _TMR0L	set	4054
   804  0000                     _TMR1H	set	4047
   805  0000                     _TMR1L	set	4046
   806  0000                     _TMR3L	set	4018
   807  0000                     _TRISA	set	3986
   808  0000                     _TRISB	set	3987
   809  0000                     _TRISBbits	set	3987
   810  0000                     _TRISC	set	3988
   811  0000                     _TRISCbits	set	3988
   812  0000                     _TRISD	set	3989
   813  0000                     _TRISE	set	3990
   814  0000                     _TXREG	set	4013
   815  0000                     _TXSTA	set	4012
   816  0000                     _TXSTAbits	set	4012
   817  0000                     _TRMT	set	32097
   818  0000                     _nRBPU	set	32655
   819  00FF60                     STR_3:
   820  00FF60  20                 	db	32
   821  00FF61  54                 	db	84	;'T'
   822  00FF62  65                 	db	101	;'e'
   823  00FF63  6D                 	db	109	;'m'
   824  00FF64  70                 	db	112	;'p'
   825  00FF65  65                 	db	101	;'e'
   826  00FF66  72                 	db	114	;'r'
   827  00FF67  61                 	db	97	;'a'
   828  00FF68  74                 	db	116	;'t'
   829  00FF69  75                 	db	117	;'u'
   830  00FF6A  72                 	db	114	;'r'
   831  00FF6B  65                 	db	101	;'e'
   832  00FF6C  20                 	db	32
   833  00FF6D  3D                 	db	61	;'='
   834  00FF6E  20                 	db	32
   835  00FF6F  25                 	db	37
   836  00FF70  64                 	db	100	;'d'
   837  00FF71  20                 	db	32
   838  00FF72  64                 	db	100	;'d'
   839  00FF73  65                 	db	101	;'e'
   840  00FF74  67                 	db	103	;'g'
   841  00FF75  72                 	db	114	;'r'
   842  00FF76  65                 	db	101	;'e'
   843  00FF77  65                 	db	101	;'e'
   844  00FF78  73                 	db	115	;'s'
   845  00FF79  43                 	db	67	;'C'
   846  00FF7A  20                 	db	32
   847  00FF7B  3D                 	db	61	;'='
   848  00FF7C  20                 	db	32
   849  00FF7D  25                 	db	37
   850  00FF7E  64                 	db	100	;'d'
   851  00FF7F  20                 	db	32
   852  00FF80  64                 	db	100	;'d'
   853  00FF81  65                 	db	101	;'e'
   854  00FF82  67                 	db	103	;'g'
   855  00FF83  72                 	db	114	;'r'
   856  00FF84  65                 	db	101	;'e'
   857  00FF85  65                 	db	101	;'e'
   858  00FF86  73                 	db	115	;'s'
   859  00FF87  46                 	db	70	;'F'
   860  00FF88  0D                 	db	13
   861  00FF89  0A                 	db	10
   862  00FF8A  00                 	db	0
   863  00FF8B                     STR_2:
   864  00FF8B  25                 	db	37
   865  00FF8C  30                 	db	48	;'0'
   866  00FF8D  32                 	db	50	;'2'
   867  00FF8E  78                 	db	120	;'x'
   868  00FF8F  3A                 	db	58	;':'
   869  00FF90  25                 	db	37
   870  00FF91  30                 	db	48	;'0'
   871  00FF92  32                 	db	50	;'2'
   872  00FF93  78                 	db	120	;'x'
   873  00FF94  3A                 	db	58	;':'
   874  00FF95  25                 	db	37
   875  00FF96  30                 	db	48	;'0'
   876  00FF97  32                 	db	50	;'2'
   877  00FF98  78                 	db	120	;'x'
   878  00FF99  20                 	db	32
   879  00FF9A  25                 	db	37
   880  00FF9B  30                 	db	48	;'0'
   881  00FF9C  32                 	db	50	;'2'
   882  00FF9D  78                 	db	120	;'x'
   883  00FF9E  2F                 	db	47
   884  00FF9F  25                 	db	37
   885  00FFA0  30                 	db	48	;'0'
   886  00FFA1  32                 	db	50	;'2'
   887  00FFA2  78                 	db	120	;'x'
   888  00FFA3  2F                 	db	47
   889  00FFA4  25                 	db	37
   890  00FFA5  30                 	db	48	;'0'
   891  00FFA6  32                 	db	50	;'2'
   892  00FFA7  78                 	db	120	;'x'
   893  00FFA8  00                 	db	0
   894  00FFA9                     STR_6:
   895  00FFA9  4B                 	db	75	;'K'
   896  00FFAA  65                 	db	101	;'e'
   897  00FFAB  79                 	db	121	;'y'
   898  00FFAC  20                 	db	32
   899  00FFAD  4C                 	db	76	;'L'
   900  00FFAE  6F                 	db	111	;'o'
   901  00FFAF  63                 	db	99	;'c'
   902  00FFB0  61                 	db	97	;'a'
   903  00FFB1  74                 	db	116	;'t'
   904  00FFB2  69                 	db	105	;'i'
   905  00FFB3  6F                 	db	111	;'o'
   906  00FFB4  6E                 	db	110	;'n'
   907  00FFB5  20                 	db	32
   908  00FFB6  3D                 	db	61	;'='
   909  00FFB7  20                 	db	32
   910  00FFB8  25                 	db	37
   911  00FFB9  64                 	db	100	;'d'
   912  00FFBA  20                 	db	32
   913  00FFBB  0D                 	db	13
   914  00FFBC  0A                 	db	10
   915  00FFBD  0A                 	db	10
   916  00FFBE  00                 	db	0
   917  00FFBF                     STR_5:
   918  00FFBF  4E                 	db	78	;'N'
   919  00FFC0  45                 	db	69	;'E'
   920  00FFC1  43                 	db	67	;'C'
   921  00FFC2  5F                 	db	95	;'_'
   922  00FFC3  42                 	db	66	;'B'
   923  00FFC4  75                 	db	117	;'u'
   924  00FFC5  74                 	db	116	;'t'
   925  00FFC6  74                 	db	116	;'t'
   926  00FFC7  6F                 	db	111	;'o'
   927  00FFC8  6E                 	db	110	;'n'
   928  00FFC9  20                 	db	32
   929  00FFCA  3D                 	db	61	;'='
   930  00FFCB  20                 	db	32
   931  00FFCC  25                 	db	37
   932  00FFCD  78                 	db	120	;'x'
   933  00FFCE  20                 	db	32
   934  00FFCF  0D                 	db	13
   935  00FFD0  0A                 	db	10
   936  00FFD1  00                 	db	0
   937  00FFD2                     STR_4:
   938  00FFD2  52                 	db	82	;'R'
   939  00FFD3  50                 	db	80	;'P'
   940  00FFD4  4D                 	db	77	;'M'
   941  00FFD5  20                 	db	32
   942  00FFD6  3D                 	db	61	;'='
   943  00FFD7  20                 	db	32
   944  00FFD8  25                 	db	37
   945  00FFD9  64                 	db	100	;'d'
   946  00FFDA  20                 	db	32
   947  00FFDB  64                 	db	100	;'d'
   948  00FFDC  63                 	db	99	;'c'
   949  00FFDD  20                 	db	32
   950  00FFDE  3D                 	db	61	;'='
   951  00FFDF  20                 	db	32
   952  00FFE0  25                 	db	37
   953  00FFE1  64                 	db	100	;'d'
   954  00FFE2  0D                 	db	13
   955  00FFE3  0A                 	db	10
   956  00FFE4  00                 	db	0
   957  00FFE5                     STR_7:
   958  00FFE5  30                 	db	48	;'0'
   959  00FFE6  31                 	db	49	;'1'
   960  00FFE7  32                 	db	50	;'2'
   961  00FFE8  33                 	db	51	;'3'
   962  00FFE9  34                 	db	52	;'4'
   963  00FFEA  35                 	db	53	;'5'
   964  00FFEB  36                 	db	54	;'6'
   965  00FFEC  37                 	db	55	;'7'
   966  00FFED  38                 	db	56	;'8'
   967  00FFEE  39                 	db	57	;'9'
   968  00FFEF  61                 	db	97	;'a'
   969  00FFF0  62                 	db	98	;'b'
   970  00FFF1  63                 	db	99	;'c'
   971  00FFF2  64                 	db	100	;'d'
   972  00FFF3  65                 	db	101	;'e'
   973  00FFF4  66                 	db	102	;'f'
   974  00FFF5  00                 	db	0
   975  00FFF6                     STR_1:
   976  00FFF6  4C                 	db	76	;'L'
   977  00FFF7  41                 	db	65	;'A'
   978  00FFF8  42                 	db	66	;'B'
   979  00FFF9  20                 	db	32
   980  00FFFA  31                 	db	49	;'1'
   981  00FFFB  31                 	db	49	;'1'
   982  00FFFC  20                 	db	32
   983  00FFFD  00                 	db	0
   984                           
   985                           ; #config settings
   986  00FFFE  00                 	db	0	; dummy byte at the end
   987  0000                     
   988                           	psect	cinit
   989  00161E                     __pcinit:
   990                           	opt stack 0
   991  00161E                     start_initialization:
   992                           	opt stack 0
   993  00161E                     __initialization:
   994                           	opt stack 0
   995                           
   996                           ; Clear objects allocated to BANK0 (31 bytes)
   997  00161E  EE00  F0C9         	lfsr	0,__pbssBANK0
   998  001622  0E1F               	movlw	31
   999  001624                     clear_0:
  1000  001624  6AEE               	clrf	postinc0,c
  1001  001626  06E8               	decf	wreg,f,c
  1002  001628  E1FD               	bnz	clear_0
  1003                           
  1004                           ; Clear objects allocated to COMRAM (42 bytes)
  1005  00162A  EE00  F044         	lfsr	0,__pbssCOMRAM
  1006  00162E  0E2A               	movlw	42
  1007  001630                     clear_1:
  1008  001630  6AEE               	clrf	postinc0,c
  1009  001632  06E8               	decf	wreg,f,c
  1010  001634  E1FD               	bnz	clear_1
  1011                           
  1012                           ; Initialize objects allocated to BANK1 (84 bytes)
  1013                           ; load TBLPTR registers with __pidataBANK1
  1014  001636  0E2E               	movlw	low __pidataBANK1
  1015  001638  6EF6               	movwf	tblptrl,c
  1016  00163A  0E18               	movlw	high __pidataBANK1
  1017  00163C  6EF7               	movwf	tblptrh,c
  1018  00163E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1019  001640  6EF8               	movwf	tblptru,c
  1020  001642  EE01  F000         	lfsr	0,__pdataBANK1
  1021  001646  EE10 F054          	lfsr	1,84
  1022  00164A                     copy_data0:
  1023  00164A  0009               	tblrd		*+
  1024  00164C  CFF5 FFEE          	movff	tablat,postinc0
  1025  001650  50E5               	movf	postdec1,w,c
  1026  001652  50E1               	movf	fsr1l,w,c
  1027  001654  E1FA               	bnz	copy_data0
  1028                           
  1029                           ; Initialize objects allocated to BANK0 (73 bytes)
  1030                           ; load TBLPTR registers with __pidataBANK0
  1031  001656  0EA6               	movlw	low __pidataBANK0
  1032  001658  6EF6               	movwf	tblptrl,c
  1033  00165A  0E1A               	movlw	high __pidataBANK0
  1034  00165C  6EF7               	movwf	tblptrh,c
  1035  00165E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1036  001660  6EF8               	movwf	tblptru,c
  1037  001662  EE00  F080         	lfsr	0,__pdataBANK0
  1038  001666  EE10 F049          	lfsr	1,73
  1039  00166A                     copy_data1:
  1040  00166A  0009               	tblrd		*+
  1041  00166C  CFF5 FFEE          	movff	tablat,postinc0
  1042  001670  50E5               	movf	postdec1,w,c
  1043  001672  50E1               	movf	fsr1l,w,c
  1044  001674  E1FA               	bnz	copy_data1
  1045                           
  1046                           ; Initialize objects allocated to COMRAM (2 bytes)
  1047                           ; load TBLPTR registers with __pidataCOMRAM
  1048  001676  0EBC               	movlw	low __pidataCOMRAM
  1049  001678  6EF6               	movwf	tblptrl,c
  1050  00167A  0E1F               	movlw	high __pidataCOMRAM
  1051  00167C  6EF7               	movwf	tblptrh,c
  1052  00167E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1053  001680  6EF8               	movwf	tblptru,c
  1054  001682  0009               	tblrd		*+	;fetch initializer
  1055  001684  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1056  001688  0009               	tblrd		*+	;fetch initializer
  1057  00168A  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
  1058  00168E                     end_of_initialization:
  1059                           	opt stack 0
  1060  00168E                     __end_of__initialization:
  1061                           	opt stack 0
  1062  00168E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1063  001690  6EF8               	movwf	tblptru,c
  1064  001692  0100               	movlb	0
  1065  001694  EFBB  F001         	goto	_main	;jump to C main() function
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           postdec1	equ	0xFE5
  1073                           fsr1l	equ	0xFE1
  1074                           
  1075                           	psect	bssCOMRAM
  1076  000044                     __pbssCOMRAM:
  1077                           	opt stack 0
  1078  000044                     _Nec_code:
  1079                           	opt stack 0
  1080  000044                     	ds	4
  1081  000048                     _Nec_OK:
  1082                           	opt stack 0
  1083  000048                     	ds	2
  1084  00004A                     _Time_Elapsed:
  1085                           	opt stack 0
  1086  00004A                     	ds	2
  1087  00004C                     _nbr:
  1088                           	opt stack 0
  1089  00004C                     	ds	2
  1090  00004E                     _rpm:
  1091                           	opt stack 0
  1092  00004E                     	ds	2
  1093  000050                     _txt:
  1094                           	opt stack 0
  1095  000050                     	ds	2
  1096  000052                     _FAN:
  1097                           	opt stack 0
  1098  000052                     	ds	1
  1099  000053                     _Nec_Button:
  1100                           	opt stack 0
  1101  000053                     	ds	1
  1102  000054                     _Nec_State:
  1103                           	opt stack 0
  1104  000054                     	ds	1
  1105  000055                     __tft_type:
  1106                           	opt stack 0
  1107  000055                     	ds	1
  1108  000056                     _alarm_date:
  1109                           	opt stack 0
  1110  000056                     	ds	1
  1111  000057                     _alarm_hour:
  1112                           	opt stack 0
  1113  000057                     	ds	1
  1114  000058                     _alarm_minute:
  1115                           	opt stack 0
  1116  000058                     	ds	1
  1117  000059                     _alarm_second:
  1118                           	opt stack 0
  1119  000059                     	ds	1
  1120  00005A                     _bit_count:
  1121                           	opt stack 0
  1122  00005A                     	ds	1
  1123  00005B                     _colstart:
  1124                           	opt stack 0
  1125  00005B                     	ds	1
  1126  00005C                     _day:
  1127                           	opt stack 0
  1128  00005C                     	ds	1
  1129  00005D                     _dow:
  1130                           	opt stack 0
  1131  00005D                     	ds	1
  1132  00005E                     _duty_cycle:
  1133                           	opt stack 0
  1134  00005E                     	ds	1
  1135  00005F                     _hour:
  1136                           	opt stack 0
  1137  00005F                     	ds	1
  1138  000060                     _minute:
  1139                           	opt stack 0
  1140  000060                     	ds	1
  1141  000061                     _month:
  1142                           	opt stack 0
  1143  000061                     	ds	1
  1144  000062                     _rowstart:
  1145                           	opt stack 0
  1146  000062                     	ds	1
  1147  000063                     _second:
  1148                           	opt stack 0
  1149  000063                     	ds	1
  1150  000064                     _setup_alarm_hour:
  1151                           	opt stack 0
  1152  000064                     	ds	1
  1153  000065                     _setup_alarm_minute:
  1154                           	opt stack 0
  1155  000065                     	ds	1
  1156  000066                     _setup_alarm_second:
  1157                           	opt stack 0
  1158  000066                     	ds	1
  1159  000067                     _setup_day:
  1160                           	opt stack 0
  1161  000067                     	ds	1
  1162  000068                     _setup_hour:
  1163                           	opt stack 0
  1164  000068                     	ds	1
  1165  000069                     _setup_minute:
  1166                           	opt stack 0
  1167  000069                     	ds	1
  1168  00006A                     _setup_month:
  1169                           	opt stack 0
  1170  00006A                     	ds	1
  1171  00006B                     _setup_second:
  1172                           	opt stack 0
  1173  00006B                     	ds	1
  1174  00006C                     _setup_year:
  1175                           	opt stack 0
  1176  00006C                     	ds	1
  1177  00006D                     _year:
  1178                           	opt stack 0
  1179  00006D                     	ds	1
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           postinc0	equ	0xFEE
  1185                           wreg	equ	0xFE8
  1186                           postdec1	equ	0xFE5
  1187                           fsr1l	equ	0xFE1
  1188                           
  1189                           	psect	dataCOMRAM
  1190  00006E                     __pdataCOMRAM:
  1191                           	opt stack 0
  1192  00006E                     _tempSecond:
  1193                           	opt stack 0
  1194  00006E                     	ds	1
  1195  00006F                     _wrap:
  1196                           	opt stack 0
  1197  00006F                     	ds	1
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           fsr1l	equ	0xFE1
  1206                           
  1207                           	psect	bssBANK0
  1208  0000C9                     __pbssBANK0:
  1209                           	opt stack 0
  1210  0000C9                     _buffer:
  1211                           	opt stack 0
  1212  0000C9                     	ds	31
  1213                           tblptru	equ	0xFF8
  1214                           tblptrh	equ	0xFF7
  1215                           tblptrl	equ	0xFF6
  1216                           tablat	equ	0xFF5
  1217                           postinc0	equ	0xFEE
  1218                           wreg	equ	0xFE8
  1219                           postdec1	equ	0xFE5
  1220                           fsr1l	equ	0xFE1
  1221                           
  1222                           	psect	dataBANK0
  1223  000080                     __pdataBANK0:
  1224                           	opt stack 0
  1225  000080                     _color:
  1226                           	opt stack 0
  1227  000080                     	ds	42
  1228  0000AA                     _array1:
  1229                           	opt stack 0
  1230  0000AA                     	ds	21
  1231  0000BF                     _Timing_Txt:
  1232                           	opt stack 0
  1233  0000BF                     	ds	10
  1234                           tblptru	equ	0xFF8
  1235                           tblptrh	equ	0xFF7
  1236                           tblptrl	equ	0xFF6
  1237                           tablat	equ	0xFF5
  1238                           postinc0	equ	0xFEE
  1239                           wreg	equ	0xFE8
  1240                           postdec1	equ	0xFE5
  1241                           fsr1l	equ	0xFE1
  1242                           
  1243                           	psect	dataBANK1
  1244  000100                     __pdataBANK1:
  1245                           	opt stack 0
  1246  000100                     _txt1:
  1247                           	opt stack 0
  1248  000100                     	ds	84
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           postdec1	equ	0xFE5
  1256                           fsr1l	equ	0xFE1
  1257                           
  1258                           	psect	cstackBANK0
  1259  0000E8                     __pcstackBANK0:
  1260                           	opt stack 0
  1261  0000E8                     drawtext@x:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x0
  1265  0000E8                     	ds	1
  1266  0000E9                     drawtext@textsize:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x1
  1270  0000E9                     	ds	2
  1271  0000EB                     drawtext@i:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x3
  1275  0000EB                     	ds	2
  1276  0000ED                     drawtext@cursor_y:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x5
  1280  0000ED                     	ds	1
  1281  0000EE                     drawtext@cursor_x:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x6
  1285  0000EE                     	ds	1
  1286  0000EF                     
  1287                           ; 0 bytes @ 0x7
  1288  0000EF                     	ds	1
  1289  0000F0                     main@tempF:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x8
  1293  0000F0                     	ds	1
  1294  0000F1                     main@tempC:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x9
  1298  0000F1                     	ds	1
  1299  0000F2                     main@found:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0xA
  1303  0000F2                     	ds	1
  1304  0000F3                     main@i:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0xB
  1308  0000F3                     	ds	1
  1309                           tblptru	equ	0xFF8
  1310                           tblptrh	equ	0xFF7
  1311                           tblptrl	equ	0xFF6
  1312                           tablat	equ	0xFF5
  1313                           postinc0	equ	0xFEE
  1314                           wreg	equ	0xFE8
  1315                           postdec1	equ	0xFE5
  1316                           fsr1l	equ	0xFE1
  1317                           
  1318                           	psect	cstackCOMRAM
  1319  000001                     __pcstackCOMRAM:
  1320                           	opt stack 0
  1321  000001                     ??_INTx_isr:
  1322  000001                     
  1323                           ; 1 bytes @ 0x0
  1324  000001                     	ds	2
  1325  000003                     ??_chkisr:
  1326                           
  1327                           ; 0 bytes @ 0x2
  1328  000003                     	ds	14
  1329  000011                     ??_isdigit:
  1330  000011                     ?_strlen:
  1331                           	opt stack 0
  1332  000011                     ?___wmul:
  1333                           	opt stack 0
  1334  000011                     ?___awdiv:
  1335                           	opt stack 0
  1336  000011                     ?___lwdiv:
  1337                           	opt stack 0
  1338  000011                     ?___ftpack:
  1339                           	opt stack 0
  1340  000011                     ?___fttol:
  1341                           	opt stack 0
  1342  000011                     I2C_Read@ack:
  1343                           	opt stack 0
  1344  000011                     I2C_Write@outByte:
  1345                           	opt stack 0
  1346  000011                     spiwrite@x:
  1347                           	opt stack 0
  1348  000011                     putch@c:
  1349                           	opt stack 0
  1350  000011                     OpenUSART@spbrg:
  1351                           	opt stack 0
  1352  000011                     ___wmul@multiplier:
  1353                           	opt stack 0
  1354  000011                     ___awdiv@dividend:
  1355                           	opt stack 0
  1356  000011                     ___lwdiv@dividend:
  1357                           	opt stack 0
  1358  000011                     strcpy@to:
  1359                           	opt stack 0
  1360  000011                     strlen@s:
  1361                           	opt stack 0
  1362  000011                     ___ftpack@arg:
  1363                           	opt stack 0
  1364  000011                     ___fttol@f1:
  1365                           	opt stack 0
  1366  000011                     I2C_Init@c:
  1367                           	opt stack 0
  1368                           
  1369                           ; 4 bytes @ 0x10
  1370  000011                     	ds	1
  1371  000012                     I2C_Read@n:
  1372                           	opt stack 0
  1373  000012                     I2C_Write@n:
  1374                           	opt stack 0
  1375  000012                     spiwrite@spidata:
  1376                           	opt stack 0
  1377  000012                     _isdigit$2330:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x11
  1381  000012                     	ds	1
  1382  000013                     ??_strlen:
  1383  000013                     DS3231_Setup_Time@Device:
  1384                           	opt stack 0
  1385  000013                     I2C_Read@inByte:
  1386                           	opt stack 0
  1387  000013                     I2C_Write_Cmd_Only@Cmd:
  1388                           	opt stack 0
  1389  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1390                           	opt stack 0
  1391  000013                     write_command@cmd_:
  1392                           	opt stack 0
  1393  000013                     write_data@data_:
  1394                           	opt stack 0
  1395  000013                     OpenUSART@config:
  1396                           	opt stack 0
  1397  000013                     isdigit@c:
  1398                           	opt stack 0
  1399  000013                     ___wmul@multiplicand:
  1400                           	opt stack 0
  1401  000013                     ___awdiv@divisor:
  1402                           	opt stack 0
  1403  000013                     ___lwdiv@divisor:
  1404                           	opt stack 0
  1405  000013                     strcpy@from:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x12
  1409  000013                     	ds	1
  1410  000014                     DS1621_Read_Temp@Cmd:
  1411                           	opt stack 0
  1412  000014                     DS3231_Read_Time@Address:
  1413                           	opt stack 0
  1414  000014                     DS3231_Setup_Time@Address:
  1415                           	opt stack 0
  1416  000014                     I2C_Write_Cmd_Only@Device:
  1417                           	opt stack 0
  1418  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1419                           	opt stack 0
  1420  000014                     setAddrWindow@y0:
  1421                           	opt stack 0
  1422  000014                     ___ftpack@exp:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x13
  1426  000014                     	ds	1
  1427  000015                     ??___fttol:
  1428  000015                     DS1621_Read_Temp@Data_Ret:
  1429                           	opt stack 0
  1430  000015                     DS3231_Read_Time@Device:
  1431                           	opt stack 0
  1432  000015                     I2C_Write_Cmd_Write_Data@Device:
  1433                           	opt stack 0
  1434  000015                     setAddrWindow@x1:
  1435                           	opt stack 0
  1436  000015                     ___awdiv@counter:
  1437                           	opt stack 0
  1438  000015                     ___ftpack@sign:
  1439                           	opt stack 0
  1440  000015                     ___lwdiv@counter:
  1441                           	opt stack 0
  1442  000015                     ___wmul@product:
  1443                           	opt stack 0
  1444  000015                     strcpy@cp:
  1445                           	opt stack 0
  1446  000015                     strlen@cp:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x14
  1450  000015                     	ds	1
  1451  000016                     ??___ftpack:
  1452  000016                     DS1621_Read_Temp@Device:
  1453                           	opt stack 0
  1454  000016                     DS1621_Init@Device:
  1455                           	opt stack 0
  1456  000016                     setAddrWindow@y1:
  1457                           	opt stack 0
  1458  000016                     ___awdiv@sign:
  1459                           	opt stack 0
  1460  000016                     ___lwdiv@quotient:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x15
  1464  000016                     	ds	1
  1465  000017                     setAddrWindow@x0:
  1466                           	opt stack 0
  1467  000017                     delay_ms@ms:
  1468                           	opt stack 0
  1469  000017                     ___awdiv@quotient:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x16
  1473  000017                     	ds	1
  1474  000018                     ?___lwmod:
  1475                           	opt stack 0
  1476  000018                     drawPixel@y:
  1477                           	opt stack 0
  1478  000018                     drawFastVLine@y:
  1479                           	opt stack 0
  1480  000018                     fillRectangle@y:
  1481                           	opt stack 0
  1482  000018                     ___lwmod@dividend:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x17
  1486  000018                     	ds	1
  1487  000019                     ??_delay_ms:
  1488  000019                     ?_get_RPM:
  1489                           	opt stack 0
  1490  000019                     ?___lbtoft:
  1491                           	opt stack 0
  1492  000019                     drawFastVLine@h:
  1493                           	opt stack 0
  1494  000019                     fillRectangle@w:
  1495                           	opt stack 0
  1496  000019                     drawPixel@color:
  1497                           	opt stack 0
  1498  000019                     Set_DC_RGB@duty_cycle:
  1499                           	opt stack 0
  1500  000019                     Set_RPM_RGB@rpm:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x18
  1504  000019                     	ds	1
  1505  00001A                     fillRectangle@h:
  1506                           	opt stack 0
  1507  00001A                     ___fttol@sign1:
  1508                           	opt stack 0
  1509  00001A                     drawFastVLine@color:
  1510                           	opt stack 0
  1511  00001A                     ___lwmod@divisor:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x19
  1515  00001A                     	ds	1
  1516  00001B                     ??_Set_DC_RGB:
  1517  00001B                     drawPixel@x:
  1518                           	opt stack 0
  1519  00001B                     delay_ms@count:
  1520                           	opt stack 0
  1521  00001B                     fillRectangle@color:
  1522                           	opt stack 0
  1523  00001B                     get_RPM@RPS:
  1524                           	opt stack 0
  1525  00001B                     Set_RPM_RGB@range:
  1526                           	opt stack 0
  1527  00001B                     ___fttol@lval:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x1A
  1531  00001B                     	ds	1
  1532  00001C                     ??_drawFastVLine:
  1533  00001C                     ___lbtoft@c:
  1534                           	opt stack 0
  1535  00001C                     ___lwmod@counter:
  1536                           	opt stack 0
  1537  00001C                     drawCircle@x0:
  1538                           	opt stack 0
  1539  00001C                     Set_DC_RGB@range:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x1B
  1543  00001C                     	ds	1
  1544  00001D                     ??_fillRectangle:
  1545  00001D                     ?_printf:
  1546                           	opt stack 0
  1547  00001D                     ?___ftmul:
  1548                           	opt stack 0
  1549  00001D                     printf@f:
  1550                           	opt stack 0
  1551  00001D                     ___ftmul@f1:
  1552                           	opt stack 0
  1553                           
  1554                           ; 3 bytes @ 0x1C
  1555  00001D                     	ds	1
  1556  00001E                     drawCircle@y0:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x1D
  1560  00001E                     	ds	1
  1561  00001F                     ___fttol@exp1:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x1E
  1565  00001F                     	ds	1
  1566  000020                     drawFastVLine@hi:
  1567                           	opt stack 0
  1568  000020                     drawCircle@r:
  1569                           	opt stack 0
  1570  000020                     ___ftmul@f2:
  1571                           	opt stack 0
  1572                           
  1573                           ; 3 bytes @ 0x1F
  1574  000020                     	ds	1
  1575  000021                     drawFastVLine@lo:
  1576                           	opt stack 0
  1577  000021                     fillRectangle@hi:
  1578                           	opt stack 0
  1579                           
  1580                           ; 1 bytes @ 0x20
  1581  000021                     	ds	1
  1582  000022                     drawFastVLine@x:
  1583                           	opt stack 0
  1584  000022                     fillRectangle@lo:
  1585                           	opt stack 0
  1586  000022                     drawCircle@color:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x21
  1590  000022                     	ds	1
  1591  000023                     ??___ftmul:
  1592  000023                     fillRect@y:
  1593                           	opt stack 0
  1594  000023                     fillRectangle@x:
  1595                           	opt stack 0
  1596  000023                     fillCircleHelper@x0:
  1597                           	opt stack 0
  1598                           
  1599                           ; 2 bytes @ 0x22
  1600  000023                     	ds	1
  1601  000024                     ??_drawCircle:
  1602  000024                     fillRect@w:
  1603                           	opt stack 0
  1604  000024                     fillScreen@color:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x23
  1608  000024                     	ds	1
  1609  000025                     fillRect@h:
  1610                           	opt stack 0
  1611  000025                     fillCircleHelper@y0:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x24
  1615  000025                     	ds	1
  1616  000026                     ___ftmul@exp:
  1617                           	opt stack 0
  1618  000026                     fillRect@color:
  1619                           	opt stack 0
  1620  000026                     drawCircle@ddF_x:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x25
  1624  000026                     	ds	1
  1625  000027                     fillCircleHelper@r:
  1626                           	opt stack 0
  1627  000027                     ___ftmul@f3_as_product:
  1628                           	opt stack 0
  1629                           
  1630                           ; 3 bytes @ 0x26
  1631  000027                     	ds	1
  1632  000028                     ??_fillRect:
  1633  000028                     drawCircle@ddF_y:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x27
  1637  000028                     	ds	1
  1638  000029                     fillCircleHelper@cornername:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x28
  1642  000029                     	ds	1
  1643  00002A                     ___ftmul@cntr:
  1644                           	opt stack 0
  1645  00002A                     drawCircle@f:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x29
  1649  00002A                     	ds	1
  1650  00002B                     ??_printf:
  1651  00002B                     fillRect@x:
  1652                           	opt stack 0
  1653  00002B                     ___ftmul@sign:
  1654                           	opt stack 0
  1655  00002B                     fillCircleHelper@delta:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x2A
  1659  00002B                     	ds	1
  1660  00002C                     ?___ftdiv:
  1661                           	opt stack 0
  1662  00002C                     fillRect@i:
  1663                           	opt stack 0
  1664  00002C                     drawCircle@x:
  1665                           	opt stack 0
  1666  00002C                     ___ftdiv@f1:
  1667                           	opt stack 0
  1668                           
  1669                           ; 3 bytes @ 0x2B
  1670  00002C                     	ds	1
  1671  00002D                     fillCircleHelper@color:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x2C
  1675  00002D                     	ds	1
  1676  00002E                     drawChar@y:
  1677                           	opt stack 0
  1678  00002E                     drawCircle@y:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x2D
  1682  00002E                     	ds	1
  1683  00002F                     ??_fillCircleHelper:
  1684  00002F                     drawChar@c:
  1685                           	opt stack 0
  1686  00002F                     printf@idx:
  1687                           	opt stack 0
  1688  00002F                     ___ftdiv@f2:
  1689                           	opt stack 0
  1690                           
  1691                           ; 3 bytes @ 0x2E
  1692  00002F                     	ds	1
  1693  000030                     drawChar@color:
  1694                           	opt stack 0
  1695  000030                     printf@ap:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x2F
  1699  000030                     	ds	1
  1700  000031                     fillCircleHelper@ddF_x:
  1701                           	opt stack 0
  1702                           
  1703                           ; 2 bytes @ 0x30
  1704  000031                     	ds	1
  1705  000032                     ??___ftdiv:
  1706  000032                     printf@prec:
  1707                           	opt stack 0
  1708  000032                     drawChar@bg:
  1709                           	opt stack 0
  1710                           
  1711                           ; 2 bytes @ 0x31
  1712  000032                     	ds	1
  1713  000033                     fillCircleHelper@ddF_y:
  1714                           	opt stack 0
  1715  000033                     printf@val:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x32
  1719  000033                     	ds	1
  1720  000034                     drawChar@size:
  1721                           	opt stack 0
  1722                           
  1723                           ; 1 bytes @ 0x33
  1724  000034                     	ds	1
  1725  000035                     drawChar@line:
  1726                           	opt stack 0
  1727  000035                     printf@flag:
  1728                           	opt stack 0
  1729  000035                     ___ftdiv@cntr:
  1730                           	opt stack 0
  1731  000035                     fillCircleHelper@f:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x34
  1735  000035                     	ds	1
  1736  000036                     drawChar@x:
  1737                           	opt stack 0
  1738  000036                     printf@width:
  1739                           	opt stack 0
  1740  000036                     ___ftdiv@f3:
  1741                           	opt stack 0
  1742                           
  1743                           ; 3 bytes @ 0x35
  1744  000036                     	ds	1
  1745  000037                     drawChar@j:
  1746                           	opt stack 0
  1747  000037                     fillCircleHelper@x:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x36
  1751  000037                     	ds	1
  1752  000038                     drawChar@i:
  1753                           	opt stack 0
  1754  000038                     printf@c:
  1755                           	opt stack 0
  1756                           
  1757                           ; 1 bytes @ 0x37
  1758  000038                     	ds	1
  1759  000039                     drawtext@y:
  1760                           	opt stack 0
  1761  000039                     ___ftdiv@exp:
  1762                           	opt stack 0
  1763  000039                     fillCircleHelper@y:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x38
  1767  000039                     	ds	1
  1768  00003A                     ___ftdiv@sign:
  1769                           	opt stack 0
  1770  00003A                     drawtext@_text:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x39
  1774  00003A                     	ds	1
  1775  00003B                     ??_do_update_pwm:
  1776  00003B                     fillCircle@x0:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x3A
  1780  00003B                     	ds	1
  1781  00003C                     drawtext@color:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x3B
  1785  00003C                     	ds	1
  1786  00003D                     fillCircle@y0:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x3C
  1790  00003D                     	ds	1
  1791  00003E                     drawtext@bg:
  1792                           	opt stack 0
  1793  00003E                     do_update_pwm@dc_f:
  1794                           	opt stack 0
  1795                           
  1796                           ; 3 bytes @ 0x3D
  1797  00003E                     	ds	1
  1798  00003F                     fillCircle@r:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x3E
  1802  00003F                     	ds	1
  1803  000040                     drawtext@size:
  1804                           	opt stack 0
  1805                           
  1806                           ; 1 bytes @ 0x3F
  1807  000040                     	ds	1
  1808  000041                     ??_drawtext:
  1809  000041                     do_update_pwm@duty_cycle:
  1810                           	opt stack 0
  1811  000041                     fillCircle@color:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x40
  1815  000041                     	ds	1
  1816  000042                     do_update_pwm@dc_I:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x41
  1820  000042                     	ds	1
  1821  000043                     
  1822                           ; 0 bytes @ 0x42
  1823  000043                     	ds	1
  1824  000044                     tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           postdec1	equ	0xFE5
  1831                           fsr1l	equ	0xFE1
  1832                           
  1833                           ; 0 bytes @ 0x43
  1834 ;;
  1835 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1836 ;;
  1837 ;; *************** function _main *****************
  1838 ;; Defined at:
  1839 ;;		line 53 in file "lab_12_main.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  i               1   11[BANK0 ] unsigned char 
  1844 ;;  tempC           1    9[BANK0 ] unsigned char 
  1845 ;;  tempF           1    8[BANK0 ] unsigned char 
  1846 ;;  found           1   10[BANK0 ] unsigned char 
  1847 ;; Return value:  Size  Location     Type
  1848 ;;		None               void
  1849 ;; Registers used:
  1850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;Total ram usage:        5 bytes
  1861 ;; Hardware stack levels required when called:   11
  1862 ;; This function calls:
  1863 ;;		_Activate_Buzzer
  1864 ;;		_DS1621_Init
  1865 ;;		_DS1621_Read_Temp
  1866 ;;		_DS3231_Read_Time
  1867 ;;		_DS3231_Setup_Time
  1868 ;;		_Deactivate_Buzzer
  1869 ;;		_Decrease_Speed
  1870 ;;		_Enable_INT_Interrupt
  1871 ;;		_I2C_Init
  1872 ;;		_Increase_Speed
  1873 ;;		_Init_Interrupt
  1874 ;;		_Init_UART
  1875 ;;		_Initialize_LCD_Screen
  1876 ;;		_Set_DC_RGB
  1877 ;;		_Set_RPM_RGB
  1878 ;;		_Toggle_Fan
  1879 ;;		_Wait_One_Sec
  1880 ;;		___awdiv
  1881 ;;		_do_update_pwm
  1882 ;;		_drawCircle
  1883 ;;		_drawtext
  1884 ;;		_fillCircle
  1885 ;;		_get_RPM
  1886 ;;		_printf
  1887 ;; This function is called by:
  1888 ;;		Startup code after reset
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text0
  1893  000376                     __ptext0:
  1894                           	opt stack 0
  1895  000376                     _main:
  1896                           	opt stack 20
  1897                           
  1898                           ;lab_12_main.c: 55: Init_UART();
  1899                           
  1900                           ;incstack = 0
  1901  000376  EC47  F00F         	call	_Init_UART	;wreg free
  1902                           
  1903                           ;lab_12_main.c: 56: OSCCON = 0x70;
  1904  00037A  0E70               	movlw	112
  1905  00037C  6ED3               	movwf	4051,c	;volatile
  1906                           
  1907                           ;lab_12_main.c: 57: nRBPU = 0;
  1908  00037E  9EF1               	bcf	intcon2,7,c	;volatile
  1909                           
  1910                           ;lab_12_main.c: 58: TRISB = 0x07;
  1911  000380  0E07               	movlw	7
  1912  000382  6E93               	movwf	3987,c	;volatile
  1913                           
  1914                           ;lab_12_main.c: 59: TRISC = 0x01;
  1915  000384  0E01               	movlw	1
  1916  000386  6E94               	movwf	3988,c	;volatile
  1917                           
  1918                           ;lab_12_main.c: 60: TRISD = 0x00;
  1919  000388  0E00               	movlw	0
  1920  00038A  6E95               	movwf	3989,c	;volatile
  1921                           
  1922                           ;lab_12_main.c: 61: ADCON1 = 0x0F;
  1923  00038C  0E0F               	movlw	15
  1924  00038E  6EC1               	movwf	4033,c	;volatile
  1925                           
  1926                           ;lab_12_main.c: 62: TRISA = 0x00;
  1927  000390  0E00               	movlw	0
  1928  000392  6E92               	movwf	3986,c	;volatile
  1929                           
  1930                           ;lab_12_main.c: 63: TRISE = 0x00;
  1931  000394  0E00               	movlw	0
  1932  000396  6E96               	movwf	3990,c	;volatile
  1933                           
  1934                           ;lab_12_main.c: 65: Initialize_LCD_Screen();
  1935  000398  ECEA  F009         	call	_Initialize_LCD_Screen	;wreg free
  1936                           
  1937                           ;lab_12_main.c: 66: T3CON = 0x03;
  1938  00039C  0E03               	movlw	3
  1939  00039E  6EB1               	movwf	4017,c	;volatile
  1940                           
  1941                           ;lab_12_main.c: 67: I2C_Init(100000);
  1942  0003A0  0EA0               	movlw	160
  1943  0003A2  6E11               	movwf	I2C_Init@c,c
  1944  0003A4  0E86               	movlw	134
  1945  0003A6  6E12               	movwf	I2C_Init@c+1,c
  1946  0003A8  0E01               	movlw	1
  1947  0003AA  6E13               	movwf	I2C_Init@c+2,c
  1948  0003AC  0E00               	movlw	0
  1949  0003AE  6E14               	movwf	I2C_Init@c+3,c
  1950  0003B0  ECB7  F00F         	call	_I2C_Init	;wreg free
  1951                           
  1952                           ;lab_12_main.c: 68: DS1621_Init();
  1953  0003B4  ECE5  F00E         	call	_DS1621_Init	;wreg free
  1954                           
  1955                           ;lab_12_main.c: 69: Init_Interrupt();
  1956  0003B8  EC1C  F00F         	call	_Init_Interrupt	;wreg free
  1957                           
  1958                           ;lab_12_main.c: 70: Deactivate_Buzzer();
  1959  0003BC  ECCB  F00F         	call	_Deactivate_Buzzer	;wreg free
  1960                           
  1961                           ;lab_12_main.c: 71: Nec_code = 0x0;
  1962  0003C0  0E00               	movlw	0
  1963  0003C2  6E44               	movwf	_Nec_code,c
  1964  0003C4  0E00               	movlw	0
  1965  0003C6  6E45               	movwf	_Nec_code+1,c
  1966  0003C8  0E00               	movlw	0
  1967  0003CA  6E46               	movwf	_Nec_code+2,c
  1968  0003CC  0E00               	movlw	0
  1969  0003CE  6E47               	movwf	_Nec_code+3,c
  1970                           
  1971                           ;lab_12_main.c: 72: char found;
  1972                           ;lab_12_main.c: 73: PORTDbits.RD1 = 1;
  1973  0003D0  8283               	bsf	3971,1,c	;volatile
  1974                           
  1975                           ;lab_12_main.c: 74: FAN = 1;
  1976  0003D2  0E01               	movlw	1
  1977  0003D4  6E52               	movwf	_FAN,c
  1978                           
  1979                           ;lab_12_main.c: 75: PORTDbits.RD2 = 1;
  1980  0003D6  8483               	bsf	3971,2,c	;volatile
  1981                           
  1982                           ;lab_12_main.c: 76: duty_cycle = 50;
  1983  0003D8  0E32               	movlw	50
  1984  0003DA  6E5E               	movwf	_duty_cycle,c
  1985                           
  1986                           ;lab_12_main.c: 77: do_update_pwm(duty_cycle);
  1987  0003DC  505E               	movf	_duty_cycle,w,c
  1988  0003DE  EC8F  F009         	call	_do_update_pwm
  1989  0003E2  D000               	goto	l6557
  1990  0003E4                     l6557:
  1991                           
  1992                           ;lab_12_main.c: 79: {
  1993                           ;lab_12_main.c: 80: DS3231_Read_Time();
  1994  0003E4  ECB7  F00B         	call	_DS3231_Read_Time	;wreg free
  1995                           
  1996                           ;lab_12_main.c: 81: if(tempSecond != second)
  1997  0003E8  5063               	movf	_second,w,c
  1998  0003EA  186E               	xorwf	_tempSecond,w,c
  1999  0003EC  B4D8               	btfsc	status,2,c
  2000  0003EE  D05A               	goto	l6575
  2001                           
  2002                           ;lab_12_main.c: 82: {
  2003                           ;lab_12_main.c: 83: tempSecond = second;
  2004  0003F0  C063  F06E         	movff	_second,_tempSecond
  2005                           
  2006                           ;lab_12_main.c: 84: char tempC = DS1621_Read_Temp();
  2007  0003F4  EC18  F00E         	call	_DS1621_Read_Temp	;wreg free
  2008  0003F8  0100               	movlb	0	; () banked
  2009  0003FA  6FF1               	movwf	main@tempC& (0+255),b
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;lab_12_main.c: 85: char tempF = (tempC * 9 / 5) + 32;
  2013  0003FC  0100               	movlb	0	; () banked
  2014  0003FE  51F1               	movf	main@tempC& (0+255),w,b
  2015  000400  0D09               	mullw	9
  2016  000402  CFF3 F011          	movff	prodl,___awdiv@dividend
  2017  000406  CFF4 F012          	movff	prodh,___awdiv@dividend+1
  2018  00040A  0E00               	movlw	0
  2019  00040C  6E14               	movwf	___awdiv@divisor+1,c
  2020  00040E  0E05               	movlw	5
  2021  000410  6E13               	movwf	___awdiv@divisor,c
  2022  000412  EC42  F00A         	call	___awdiv	;wreg free
  2023  000416  5011               	movf	?___awdiv,w,c
  2024  000418  0F20               	addlw	32
  2025  00041A  0100               	movlb	0	; () banked
  2026  00041C  6FF0               	movwf	main@tempF& (0+255),b
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;lab_12_main.c: 86: rpm = get_RPM();
  2030  00041E  EC9C  F00D         	call	_get_RPM	;wreg free
  2031  000422  C019  F04E         	movff	?_get_RPM,_rpm
  2032  000426  C01A  F04F         	movff	?_get_RPM+1,_rpm+1
  2033                           
  2034                           ;lab_12_main.c: 87: Set_DC_RGB(duty_cycle);
  2035  00042A  C05E  F019         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2036  00042E  6A1A               	clrf	Set_DC_RGB@duty_cycle+1,c
  2037  000430  EC09  F00D         	call	_Set_DC_RGB	;wreg free
  2038                           
  2039                           ;lab_12_main.c: 88: Set_RPM_RGB(rpm);
  2040  000434  C04E  F019         	movff	_rpm,Set_RPM_RGB@rpm
  2041  000438  C04F  F01A         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2042  00043C  EC6A  F00C         	call	_Set_RPM_RGB	;wreg free
  2043                           
  2044                           ;lab_12_main.c: 89: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day
      +                          ,year);
  2045  000440  0E8B               	movlw	low STR_2
  2046  000442  6E1D               	movwf	printf@f,c
  2047  000444  0EFF               	movlw	high STR_2
  2048  000446  6E1E               	movwf	printf@f+1,c
  2049  000448  C05F  F01F         	movff	_hour,?_printf+2
  2050  00044C  6A20               	clrf	?_printf+3,c
  2051  00044E  C060  F021         	movff	_minute,?_printf+4
  2052  000452  6A22               	clrf	?_printf+5,c
  2053  000454  C063  F023         	movff	_second,?_printf+6
  2054  000458  6A24               	clrf	?_printf+7,c
  2055  00045A  C061  F025         	movff	_month,?_printf+8
  2056  00045E  6A26               	clrf	?_printf+9,c
  2057  000460  C05C  F027         	movff	_day,?_printf+10
  2058  000464  6A28               	clrf	?_printf+11,c
  2059  000466  C06D  F029         	movff	_year,?_printf+12
  2060  00046A  6A2A               	clrf	?_printf+13,c
  2061  00046C  EC0E  F000         	call	_printf	;wreg free
  2062                           
  2063                           ;lab_12_main.c: 90: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF
      +                          );
  2064  000470  0E60               	movlw	low STR_3
  2065  000472  6E1D               	movwf	printf@f,c
  2066  000474  0EFF               	movlw	high STR_3
  2067  000476  6E1E               	movwf	printf@f+1,c
  2068  000478  C0F1  F01F         	movff	main@tempC,?_printf+2
  2069  00047C  6A20               	clrf	?_printf+3,c
  2070  00047E  C0F0  F021         	movff	main@tempF,?_printf+4
  2071  000482  6A22               	clrf	?_printf+5,c
  2072  000484  EC0E  F000         	call	_printf	;wreg free
  2073                           
  2074                           ;lab_12_main.c: 91: printf ("RPM = %d dc = %d\r\n", rpm, duty_cycle);
  2075  000488  0ED2               	movlw	low STR_4
  2076  00048A  6E1D               	movwf	printf@f,c
  2077  00048C  0EFF               	movlw	high STR_4
  2078  00048E  6E1E               	movwf	printf@f+1,c
  2079  000490  C04E  F01F         	movff	_rpm,?_printf+2
  2080  000494  C04F  F020         	movff	_rpm+1,?_printf+3
  2081  000498  C05E  F021         	movff	_duty_cycle,?_printf+4
  2082  00049C  6A22               	clrf	?_printf+5,c
  2083  00049E  EC0E  F000         	call	_printf	;wreg free
  2084  0004A2  D000               	goto	l6575
  2085  0004A4                     l6575:
  2086                           
  2087                           ;lab_12_main.c: 92: }
  2088                           ;lab_12_main.c: 93: if (Nec_OK == 1)
  2089  0004A4  0448               	decf	_Nec_OK,w,c
  2090  0004A6  1049               	iorwf	_Nec_OK+1,w,c
  2091  0004A8  A4D8               	btfss	status,2,c
  2092  0004AA  D79C               	goto	l6557
  2093                           
  2094                           ;lab_12_main.c: 94: {
  2095                           ;lab_12_main.c: 95: Nec_OK = 0;
  2096  0004AC  0E00               	movlw	0
  2097  0004AE  6E49               	movwf	_Nec_OK+1,c
  2098  0004B0  0E00               	movlw	0
  2099  0004B2  6E48               	movwf	_Nec_OK,c
  2100                           
  2101                           ;lab_12_main.c: 96: Enable_INT_Interrupt();
  2102  0004B4  ECDB  F00F         	call	_Enable_INT_Interrupt	;wreg free
  2103                           
  2104                           ;lab_12_main.c: 97: if (Nec_Button == 0x90)
  2105  0004B8  0E90               	movlw	144
  2106  0004BA  1853               	xorwf	_Nec_Button,w,c
  2107  0004BC  A4D8               	btfss	status,2,c
  2108  0004BE  D003               	goto	l6585
  2109                           
  2110                           ;lab_12_main.c: 98: DS3231_Setup_Time();
  2111  0004C0  EC84  F00B         	call	_DS3231_Setup_Time	;wreg free
  2112  0004C4  D000               	goto	l6585
  2113  0004C6                     l6585:
  2114                           
  2115                           ;lab_12_main.c: 99: if (Nec_Button == 0xc2)
  2116  0004C6  0EC2               	movlw	194
  2117  0004C8  1853               	xorwf	_Nec_Button,w,c
  2118  0004CA  A4D8               	btfss	status,2,c
  2119  0004CC  D003               	goto	l6589
  2120                           
  2121                           ;lab_12_main.c: 100: Toggle_Fan();
  2122  0004CE  EC33  F00F         	call	_Toggle_Fan	;wreg free
  2123  0004D2  D000               	goto	l6589
  2124  0004D4                     l6589:
  2125                           
  2126                           ;lab_12_main.c: 101: if (Nec_Button == 0xe0)
  2127  0004D4  0EE0               	movlw	224
  2128  0004D6  1853               	xorwf	_Nec_Button,w,c
  2129  0004D8  A4D8               	btfss	status,2,c
  2130  0004DA  D003               	goto	l6593
  2131                           
  2132                           ;lab_12_main.c: 102: Decrease_Speed();
  2133  0004DC  ECC4  F00E         	call	_Decrease_Speed	;wreg free
  2134  0004E0  D000               	goto	l6593
  2135  0004E2                     l6593:
  2136                           
  2137                           ;lab_12_main.c: 103: if (Nec_Button == 0xa8)
  2138  0004E2  0EA8               	movlw	168
  2139  0004E4  1853               	xorwf	_Nec_Button,w,c
  2140  0004E6  A4D8               	btfss	status,2,c
  2141  0004E8  D003               	goto	l6597
  2142                           
  2143                           ;lab_12_main.c: 104: Increase_Speed();
  2144  0004EA  ECA1  F00E         	call	_Increase_Speed	;wreg free
  2145  0004EE  D000               	goto	l6597
  2146  0004F0                     l6597:
  2147                           
  2148                           ;lab_12_main.c: 106: if (FAN == 1)
  2149  0004F0  0452               	decf	_FAN,w,c
  2150  0004F2  A4D8               	btfss	status,2,c
  2151  0004F4  D002               	goto	l686
  2152                           
  2153                           ;lab_12_main.c: 107: PORTDbits.RD2 = 1;
  2154  0004F6  8483               	bsf	3971,2,c	;volatile
  2155  0004F8  D002               	goto	l6601
  2156  0004FA                     l686:
  2157                           
  2158                           ;lab_12_main.c: 108: else
  2159                           ;lab_12_main.c: 109: PORTDbits.RD2 = 0;
  2160  0004FA  9483               	bcf	3971,2,c	;volatile
  2161  0004FC  D000               	goto	l6601
  2162  0004FE                     l6601:
  2163                           
  2164                           ;lab_12_main.c: 110: printf ("NEC_Button = %x \r\n", Nec_Button);
  2165  0004FE  0EBF               	movlw	low STR_5
  2166  000500  6E1D               	movwf	printf@f,c
  2167  000502  0EFF               	movlw	high STR_5
  2168  000504  6E1E               	movwf	printf@f+1,c
  2169  000506  C053  F01F         	movff	_Nec_Button,?_printf+2
  2170  00050A  6A20               	clrf	?_printf+3,c
  2171  00050C  EC0E  F000         	call	_printf	;wreg free
  2172                           
  2173                           ;lab_12_main.c: 112: found = 0xff;
  2174  000510  0100               	movlb	0	; () banked
  2175  000512  69F2               	setf	main@found& (0+255),b
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;lab_12_main.c: 115: for (char i=0; i<21; i++)
  2179  000514  0E00               	movlw	0
  2180  000516  0100               	movlb	0	; () banked
  2181  000518  6FF3               	movwf	main@i& (0+255),b
  2182  00051A                     l6607:
  2183                           
  2184                           ; BSR set to: 0
  2185  00051A  0E14               	movlw	20
  2186  00051C  0100               	movlb	0	; () banked
  2187  00051E  65F3               	cpfsgt	main@i& (0+255),b
  2188  000520  D001               	goto	l6611
  2189                           
  2190                           ; BSR set to: 0
  2191  000522  D013               	goto	l6619
  2192  000524                     l6611:
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;lab_12_main.c: 116: {
  2196                           ;lab_12_main.c: 117: if (Nec_Button == array1[i])
  2197  000524  0100               	movlb	0	; () banked
  2198  000526  51F3               	movf	main@i& (0+255),w,b
  2199  000528  0D01               	mullw	1
  2200  00052A  0EAA               	movlw	low _array1
  2201  00052C  24F3               	addwf	prodl,w,c
  2202  00052E  6ED9               	movwf	fsr2l,c
  2203  000530  0E00               	movlw	high _array1
  2204  000532  20F4               	addwfc	prodh,w,c
  2205  000534  6EDA               	movwf	fsr2h,c
  2206  000536  5053               	movf	_Nec_Button,w,c
  2207  000538  18DE               	xorwf	postinc2,w,c
  2208  00053A  A4D8               	btfss	status,2,c
  2209  00053C  D003               	goto	l6615
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;lab_12_main.c: 118: {
  2213                           ;lab_12_main.c: 119: found = i;
  2214  00053E  C0F3  F0F2         	movff	main@i,main@found
  2215  000542  D000               	goto	l6615
  2216  000544                     l6615:
  2217                           
  2218                           ; BSR set to: 0
  2219  000544  0100               	movlb	0	; () banked
  2220  000546  2BF3               	incf	main@i& (0+255),f,b
  2221  000548  D7E8               	goto	l6607
  2222  00054A                     l6619:
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;lab_12_main.c: 121: }
  2226                           ;lab_12_main.c: 122: }
  2227                           ;lab_12_main.c: 124: if (found != 0xff)
  2228  00054A  0100               	movlb	0	; () banked
  2229  00054C  29F2               	incf	main@found& (0+255),w,b
  2230  00054E  B4D8               	btfsc	status,2,c
  2231  000550  D749               	goto	l6557
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;lab_12_main.c: 125: {
  2235                           ;lab_12_main.c: 126: printf ("Key Location = %d \r\n\n", found);
  2236  000552  0EA9               	movlw	low STR_6
  2237  000554  6E1D               	movwf	printf@f,c
  2238  000556  0EFF               	movlw	high STR_6
  2239  000558  6E1E               	movwf	printf@f+1,c
  2240  00055A  C0F2  F01F         	movff	main@found,?_printf+2
  2241  00055E  6A20               	clrf	?_printf+3,c
  2242  000560  EC0E  F000         	call	_printf	;wreg free
  2243                           
  2244                           ;lab_12_main.c: 127: fillCircle(60, 80, 20, color[found]);
  2245  000564  0E00               	movlw	0
  2246  000566  6E3C               	movwf	fillCircle@x0+1,c
  2247  000568  0E3C               	movlw	60
  2248  00056A  6E3B               	movwf	fillCircle@x0,c
  2249  00056C  0E00               	movlw	0
  2250  00056E  6E3E               	movwf	fillCircle@y0+1,c
  2251  000570  0E50               	movlw	80
  2252  000572  6E3D               	movwf	fillCircle@y0,c
  2253  000574  0E00               	movlw	0
  2254  000576  6E40               	movwf	fillCircle@r+1,c
  2255  000578  0E14               	movlw	20
  2256  00057A  6E3F               	movwf	fillCircle@r,c
  2257  00057C  0100               	movlb	0	; () banked
  2258  00057E  51F2               	movf	main@found& (0+255),w,b
  2259  000580  0D02               	mullw	2
  2260  000582  0E80               	movlw	low _color
  2261  000584  24F3               	addwf	prodl,w,c
  2262  000586  6ED9               	movwf	fsr2l,c
  2263  000588  0E00               	movlw	high _color
  2264  00058A  20F4               	addwfc	prodh,w,c
  2265  00058C  6EDA               	movwf	fsr2h,c
  2266  00058E  CFDE F041          	movff	postinc2,fillCircle@color
  2267  000592  CFDD F042          	movff	postdec2,fillCircle@color+1
  2268  000596  EC41  F00C         	call	_fillCircle	;wreg free
  2269                           
  2270                           ;lab_12_main.c: 128: drawCircle(60, 80, 20, 0xFFFF);
  2271  00059A  0E00               	movlw	0
  2272  00059C  6E1D               	movwf	drawCircle@x0+1,c
  2273  00059E  0E3C               	movlw	60
  2274  0005A0  6E1C               	movwf	drawCircle@x0,c
  2275  0005A2  0E00               	movlw	0
  2276  0005A4  6E1F               	movwf	drawCircle@y0+1,c
  2277  0005A6  0E50               	movlw	80
  2278  0005A8  6E1E               	movwf	drawCircle@y0,c
  2279  0005AA  0E00               	movlw	0
  2280  0005AC  6E21               	movwf	drawCircle@r+1,c
  2281  0005AE  0E14               	movlw	20
  2282  0005B0  6E20               	movwf	drawCircle@r,c
  2283  0005B2  0EFF               	movlw	255
  2284  0005B4  6E23               	movwf	drawCircle@color+1,c
  2285  0005B6  6822               	setf	drawCircle@color,c
  2286  0005B8  EC03  F003         	call	_drawCircle	;wreg free
  2287                           
  2288                           ;lab_12_main.c: 129: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  2289  0005BC  0E4D               	movlw	77
  2290  0005BE  6E39               	movwf	drawtext@y,c
  2291  0005C0  0100               	movlb	0	; () banked
  2292  0005C2  51F2               	movf	main@found& (0+255),w,b
  2293  0005C4  0D04               	mullw	4
  2294  0005C6  0E00               	movlw	low _txt1
  2295  0005C8  24F3               	addwf	prodl,w,c
  2296  0005CA  6E3A               	movwf	drawtext@_text,c
  2297  0005CC  0E01               	movlw	high _txt1
  2298  0005CE  20F4               	addwfc	prodh,w,c
  2299  0005D0  6E3B               	movwf	drawtext@_text+1,c
  2300  0005D2  0EFF               	movlw	255
  2301  0005D4  6E3D               	movwf	drawtext@color+1,c
  2302  0005D6  683C               	setf	drawtext@color,c
  2303  0005D8  0E00               	movlw	0
  2304  0005DA  6E3F               	movwf	drawtext@bg+1,c
  2305  0005DC  0E00               	movlw	0
  2306  0005DE  6E3E               	movwf	drawtext@bg,c
  2307  0005E0  0E01               	movlw	1
  2308  0005E2  6E40               	movwf	drawtext@size,c
  2309  0005E4  0E34               	movlw	52
  2310  0005E6  EC60  F006         	call	_drawtext
  2311                           
  2312                           ;lab_12_main.c: 136: PORTDbits.RD3 = 1;
  2313  0005EA  8683               	bsf	3971,3,c	;volatile
  2314                           
  2315                           ;lab_12_main.c: 137: Activate_Buzzer();
  2316  0005EC  EC63  F00F         	call	_Activate_Buzzer	;wreg free
  2317                           
  2318                           ;lab_12_main.c: 138: Wait_One_Sec();
  2319  0005F0  ECBC  F00F         	call	_Wait_One_Sec	;wreg free
  2320                           
  2321                           ;lab_12_main.c: 139: Deactivate_Buzzer();
  2322  0005F4  ECCB  F00F         	call	_Deactivate_Buzzer	;wreg free
  2323                           
  2324                           ;lab_12_main.c: 140: do_update_pwm(duty_cycle);
  2325  0005F8  505E               	movf	_duty_cycle,w,c
  2326  0005FA  EC8F  F009         	call	_do_update_pwm
  2327                           
  2328                           ;lab_12_main.c: 141: PORTDbits.RD3 = 0;
  2329  0005FE  9683               	bcf	3971,3,c	;volatile
  2330  000600  D6F1               	goto	l6557
  2331  000602  EF0C  F000         	goto	start
  2332  000606                     __end_of_main:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           tblptrh	equ	0xFF7
  2336                           tblptrl	equ	0xFF6
  2337                           tablat	equ	0xFF5
  2338                           prodh	equ	0xFF4
  2339                           prodl	equ	0xFF3
  2340                           intcon2	equ	0xFF1
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           postdec1	equ	0xFE5
  2344                           fsr1l	equ	0xFE1
  2345                           postinc2	equ	0xFDE
  2346                           postdec2	equ	0xFDD
  2347                           fsr2h	equ	0xFDA
  2348                           fsr2l	equ	0xFD9
  2349                           status	equ	0xFD8
  2350                           
  2351 ;; *************** function _printf *****************
  2352 ;; Defined at:
  2353 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2356 ;;		 -> STR_6(22), STR_5(19), STR_4(19), STR_3(43), 
  2357 ;;		 -> STR_2(30), 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  idx             1   46[COMRAM] unsigned char 
  2360 ;;  tmpval          4    0        struct .
  2361 ;;  cp              3    0        PTR const unsigned char 
  2362 ;;  width           2   53[COMRAM] int 
  2363 ;;  val             2   50[COMRAM] unsigned int 
  2364 ;;  ap              2   47[COMRAM] PTR void [1]
  2365 ;;		 -> ?_printf(2), 
  2366 ;;  len             2    0        unsigned int 
  2367 ;;  c               1   55[COMRAM] char 
  2368 ;;  flag            1   52[COMRAM] unsigned char 
  2369 ;;  prec            1   49[COMRAM] char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  2   28[COMRAM] int 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2379 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;Total ram usage:       28 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    4
  2386 ;; This function calls:
  2387 ;;		___lwdiv
  2388 ;;		___lwmod
  2389 ;;		___wmul
  2390 ;;		_isdigit
  2391 ;;		_putch
  2392 ;; This function is called by:
  2393 ;;		_main
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text1
  2398  00001C                     __ptext1:
  2399                           	opt stack 0
  2400  00001C                     _printf:
  2401                           	opt stack 26
  2402                           
  2403                           ;doprnt.c: 466: va_list ap;
  2404                           ;doprnt.c: 499: signed char c;
  2405                           ;doprnt.c: 501: int width;
  2406                           ;doprnt.c: 506: signed char prec;
  2407                           ;doprnt.c: 508: unsigned char flag;
  2408                           ;doprnt.c: 523: union {
  2409                           ;doprnt.c: 524: unsigned long vd;
  2410                           ;doprnt.c: 525: double integ;
  2411                           ;doprnt.c: 526: } tmpval;
  2412                           ;doprnt.c: 528: unsigned int val;
  2413                           ;doprnt.c: 529: unsigned len;
  2414                           ;doprnt.c: 530: const char * cp;
  2415                           ;doprnt.c: 533: *ap = __va_start();
  2416                           
  2417                           ;incstack = 0
  2418  00001C  0E1F               	movlw	low (?_printf+2)
  2419  00001E  6E30               	movwf	printf@ap,c
  2420  000020  0E00               	movlw	high (?_printf+2)
  2421  000022  6E31               	movwf	printf@ap+1,c
  2422                           
  2423                           ;doprnt.c: 536: while(c = *f++) {
  2424  000024  D199               	goto	l6185
  2425  000026                     l6059:
  2426                           
  2427                           ;doprnt.c: 538: if(c != '%')
  2428  000026  0E25               	movlw	37
  2429  000028  1838               	xorwf	printf@c,w,c
  2430  00002A  B4D8               	btfsc	status,2,c
  2431  00002C  D004               	goto	l6063
  2432                           
  2433                           ;doprnt.c: 540: {
  2434                           ;doprnt.c: 541: (putch(c) );
  2435  00002E  5038               	movf	printf@c,w,c
  2436  000030  EC9F  F00F         	call	_putch
  2437                           
  2438                           ;doprnt.c: 542: continue;
  2439  000034  D191               	goto	l6185
  2440  000036                     l6063:
  2441                           
  2442                           ;doprnt.c: 543: }
  2443                           ;doprnt.c: 546: width = 0;
  2444  000036  0E00               	movlw	0
  2445  000038  6E37               	movwf	printf@width+1,c
  2446  00003A  0E00               	movlw	0
  2447  00003C  6E36               	movwf	printf@width,c
  2448                           
  2449                           ;doprnt.c: 548: flag = 0;
  2450  00003E  0E00               	movlw	0
  2451  000040  6E35               	movwf	printf@flag,c
  2452                           
  2453                           ;doprnt.c: 551: switch(*f) {
  2454                           
  2455                           ;doprnt.c: 550: for(;;) {
  2456  000042  D005               	goto	l6069
  2457  000044                     l6065:
  2458                           
  2459                           ;doprnt.c: 580: flag |= 0x04;
  2460  000044  8435               	bsf	printf@flag,2,c
  2461                           
  2462                           ;doprnt.c: 581: f++;
  2463  000046  4A1D               	infsnz	printf@f,f,c
  2464  000048  2A1E               	incf	printf@f+1,f,c
  2465                           
  2466                           ;doprnt.c: 582: continue;
  2467  00004A  D001               	goto	l6069
  2468                           
  2469                           ;doprnt.c: 584: }
  2470  00004C  D00B               	goto	l6071
  2471  00004E                     l6069:
  2472  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  2473  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  2474  000056                     	if	0	;tblptru may be non-zero
  2475  000056                     	endif
  2476  000056                     	if	0	;tblptru may be non-zero
  2477  000056                     	endif
  2478  000056  0008               	tblrd		*
  2479  000058  50F5               	movf	tablat,w,c
  2480                           
  2481                           ; Switch size 1, requested type "space"
  2482                           ; Number of cases is 1, Range of values is 48 to 48
  2483                           ; switch strategies available:
  2484                           ; Name         Instructions Cycles
  2485                           ; simple_byte            4     3 (average)
  2486                           ;	Chosen strategy is simple_byte
  2487  00005A  0A30               	xorlw	48	; case 48
  2488  00005C  B4D8               	btfsc	status,2,c
  2489  00005E  D7F2               	goto	l6065
  2490                           
  2491                           ;doprnt.c: 585: break;
  2492  000060  D001               	goto	l6071
  2493                           
  2494                           ;doprnt.c: 586: }
  2495  000062  D7F5               	goto	l6069
  2496  000064                     l6071:
  2497                           
  2498                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2499  000064  C01D  FFF6         	movff	printf@f,tblptrl
  2500  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  2501  00006C                     	if	0	;tblptru may be non-zero
  2502  00006C                     	endif
  2503  00006C                     	if	0	;tblptru may be non-zero
  2504  00006C                     	endif
  2505  00006C  0008               	tblrd		*
  2506  00006E  50F5               	movf	tablat,w,c
  2507  000070  ECB3  F00E         	call	_isdigit
  2508  000074  A0D8               	btfss	status,0,c
  2509  000076  D03B               	goto	l6087
  2510                           
  2511                           ;doprnt.c: 598: width = 0;
  2512  000078  0E00               	movlw	0
  2513  00007A  6E37               	movwf	printf@width+1,c
  2514  00007C  0E00               	movlw	0
  2515  00007E  6E36               	movwf	printf@width,c
  2516  000080  D000               	goto	l6075
  2517  000082                     l6075:
  2518                           
  2519                           ;doprnt.c: 600: width *= 10;
  2520  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  2521  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2522  00008A  0E00               	movlw	0
  2523  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2524  00008E  0E0A               	movlw	10
  2525  000090  6E13               	movwf	___wmul@multiplicand,c
  2526  000092  EC7A  F00E         	call	___wmul	;wreg free
  2527  000096  C011  F036         	movff	?___wmul,printf@width
  2528  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  2529                           
  2530                           ;doprnt.c: 601: width += *f++ - '0';
  2531  00009E  0ED0               	movlw	208
  2532  0000A0  6E2B               	movwf	??_printf& (0+255),c
  2533  0000A2  0EFF               	movlw	255
  2534  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  2535  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  2536  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2537  0000AE                     	if	0	;tblptru may be non-zero
  2538  0000AE                     	endif
  2539  0000AE                     	if	0	;tblptru may be non-zero
  2540  0000AE                     	endif
  2541  0000AE  0008               	tblrd		*
  2542  0000B0  50F5               	movf	tablat,w,c
  2543  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  2544  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  2545  0000B6  502B               	movf	??_printf,w,c
  2546  0000B8  262D               	addwf	??_printf+2,f,c
  2547  0000BA  502C               	movf	??_printf+1,w,c
  2548  0000BC  222E               	addwfc	??_printf+3,f,c
  2549  0000BE  502D               	movf	??_printf+2,w,c
  2550  0000C0  2636               	addwf	printf@width,f,c
  2551  0000C2  502E               	movf	??_printf+3,w,c
  2552  0000C4  2237               	addwfc	printf@width+1,f,c
  2553  0000C6  4A1D               	infsnz	printf@f,f,c
  2554  0000C8  2A1E               	incf	printf@f+1,f,c
  2555                           
  2556                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2557  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  2558  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2559  0000D2                     	if	0	;tblptru may be non-zero
  2560  0000D2                     	endif
  2561  0000D2                     	if	0	;tblptru may be non-zero
  2562  0000D2                     	endif
  2563  0000D2  0008               	tblrd		*
  2564  0000D4  50F5               	movf	tablat,w,c
  2565  0000D6  ECB3  F00E         	call	_isdigit
  2566  0000DA  A0D8               	btfss	status,0,c
  2567  0000DC  D008               	goto	l6087
  2568  0000DE  D7D1               	goto	l6075
  2569                           
  2570                           ;doprnt.c: 608: }
  2571                           ;doprnt.c: 635: switch(c = *f++) {
  2572  0000E0  D006               	goto	l6087
  2573                           
  2574                           ;doprnt.c: 638: goto alldone;
  2575                           
  2576                           ;doprnt.c: 637: case 0:
  2577  0000E2  D148               	goto	l831
  2578                           
  2579                           ;doprnt.c: 698: case 'i':
  2580                           ;doprnt.c: 699: break;
  2581                           
  2582                           ;doprnt.c: 697: case 'd':
  2583  0000E4  D01B               	goto	l794
  2584  0000E6                     l6083:
  2585                           
  2586                           ;doprnt.c: 721: flag |= 0x80;
  2587  0000E6  8E35               	bsf	printf@flag,7,c
  2588                           
  2589                           ;doprnt.c: 723: break;
  2590  0000E8  D019               	goto	l794
  2591                           
  2592                           ;doprnt.c: 813: continue;
  2593                           
  2594                           ;doprnt.c: 802: default:
  2595  0000EA  D136               	goto	l6185
  2596                           
  2597                           ;doprnt.c: 822: }
  2598  0000EC  D017               	goto	l794
  2599  0000EE                     l6087:
  2600  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2601  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2602  0000F6  4A1D               	infsnz	printf@f,f,c
  2603  0000F8  2A1E               	incf	printf@f+1,f,c
  2604  0000FA                     	if	0	;tblptru may be non-zero
  2605  0000FA                     	endif
  2606  0000FA                     	if	0	;tblptru may be non-zero
  2607  0000FA                     	endif
  2608  0000FA  0008               	tblrd		*
  2609  0000FC  CFF5 F038          	movff	tablat,printf@c
  2610  000100  5038               	movf	printf@c,w,c
  2611                           
  2612                           ; Switch size 1, requested type "space"
  2613                           ; Number of cases is 4, Range of values is 0 to 120
  2614                           ; switch strategies available:
  2615                           ; Name         Instructions Cycles
  2616                           ; simple_byte           13     7 (average)
  2617                           ;	Chosen strategy is simple_byte
  2618  000102  0A00               	xorlw	0	; case 0
  2619  000104  B4D8               	btfsc	status,2,c
  2620  000106  D136               	goto	l831
  2621  000108  0A64               	xorlw	100	; case 100
  2622  00010A  B4D8               	btfsc	status,2,c
  2623  00010C  D007               	goto	l794
  2624  00010E  0A0D               	xorlw	13	; case 105
  2625  000110  B4D8               	btfsc	status,2,c
  2626  000112  D004               	goto	l794
  2627  000114  0A11               	xorlw	17	; case 120
  2628  000116  B4D8               	btfsc	status,2,c
  2629  000118  D7E6               	goto	l6083
  2630  00011A  D11E               	goto	l6185
  2631  00011C                     l794:
  2632                           
  2633                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2634  00011C  BE35               	btfsc	printf@flag,7,c
  2635  00011E  D015               	goto	l6099
  2636                           
  2637                           ;doprnt.c: 1253: {
  2638                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2639  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2640  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2641  000128  CFDE F033          	movff	postinc2,printf@val
  2642  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2643  000130  0E02               	movlw	2
  2644  000132  2630               	addwf	printf@ap,f,c
  2645  000134  0E00               	movlw	0
  2646  000136  2231               	addwfc	printf@ap+1,f,c
  2647                           
  2648                           ;doprnt.c: 1261: if((int)val < 0) {
  2649  000138  AE34               	btfss	printf@val+1,7,c
  2650  00013A  D04E               	goto	l6133
  2651                           
  2652                           ;doprnt.c: 1262: flag |= 0x03;
  2653  00013C  0E03               	movlw	3
  2654  00013E  1235               	iorwf	printf@flag,f,c
  2655                           
  2656                           ;doprnt.c: 1263: val = -val;
  2657  000140  6C33               	negf	printf@val,c
  2658  000142  1E34               	comf	printf@val+1,f,c
  2659  000144  B0D8               	btfsc	status,0,c
  2660  000146  2A34               	incf	printf@val+1,f,c
  2661                           
  2662                           ;doprnt.c: 1264: }
  2663                           ;doprnt.c: 1266: }
  2664  000148  D047               	goto	l6133
  2665  00014A                     l6099:
  2666                           
  2667                           ;doprnt.c: 1268: else
  2668                           ;doprnt.c: 1273: {
  2669                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2670  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2671  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2672  000152  CFDE F033          	movff	postinc2,printf@val
  2673  000156  CFDD F034          	movff	postdec2,printf@val+1
  2674  00015A  0E02               	movlw	2
  2675  00015C  2630               	addwf	printf@ap,f,c
  2676  00015E  0E00               	movlw	0
  2677  000160  2231               	addwfc	printf@ap+1,f,c
  2678                           
  2679                           ;doprnt.c: 1287: }
  2680                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2681  000162  D03A               	goto	l6133
  2682  000164                     l6103:
  2683                           
  2684                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2685  000164  0E01               	movlw	1
  2686  000166  6E38               	movwf	printf@c,c
  2687  000168                     l6105:
  2688  000168  0E05               	movlw	5
  2689  00016A  1838               	xorwf	printf@c,w,c
  2690  00016C  B4D8               	btfsc	status,2,c
  2691  00016E  D03D               	goto	l6135
  2692  000170  D001               	goto	l6109
  2693  000172  D03B               	goto	l6135
  2694  000174                     l6109:
  2695                           
  2696                           ;doprnt.c: 1306: if(val < dpowers[c])
  2697  000174  5038               	movf	printf@c,w,c
  2698  000176  0D02               	mullw	2
  2699  000178  0E4E               	movlw	low _dpowers
  2700  00017A  24F3               	addwf	prodl,w,c
  2701  00017C  6EF6               	movwf	tblptrl,c
  2702  00017E  0EFF               	movlw	high _dpowers
  2703  000180  20F4               	addwfc	prodh,w,c
  2704  000182  6EF7               	movwf	tblptrh,c
  2705  000184                     	if	0	;There are less than 3 active tblptr bytes
  2706  000184                     	endif
  2707  000184  0009               	tblrd		*+
  2708  000186  50F5               	movf	tablat,w,c
  2709  000188  5C33               	subwf	printf@val,w,c
  2710  00018A  0009               	tblrd		*+
  2711  00018C  50F5               	movf	tablat,w,c
  2712  00018E  5834               	subwfb	printf@val+1,w,c
  2713  000190  A0D8               	btfss	status,0,c
  2714  000192  D02B               	goto	l6135
  2715  000194  D001               	goto	l6113
  2716                           
  2717                           ;doprnt.c: 1307: break;
  2718  000196  D029               	goto	l6135
  2719  000198                     l6113:
  2720  000198  2A38               	incf	printf@c,f,c
  2721  00019A  D7E6               	goto	l6105
  2722                           
  2723                           ;doprnt.c: 1309: break;
  2724  00019C  D026               	goto	l6135
  2725  00019E                     l6117:
  2726                           
  2727                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2728  00019E  0E01               	movlw	1
  2729  0001A0  6E38               	movwf	printf@c,c
  2730  0001A2                     l6119:
  2731  0001A2  0E04               	movlw	4
  2732  0001A4  1838               	xorwf	printf@c,w,c
  2733  0001A6  B4D8               	btfsc	status,2,c
  2734  0001A8  D020               	goto	l6135
  2735  0001AA  D001               	goto	l6123
  2736  0001AC  D01E               	goto	l6135
  2737  0001AE                     l6123:
  2738                           
  2739                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2740  0001AE  5038               	movf	printf@c,w,c
  2741  0001B0  0D02               	mullw	2
  2742  0001B2  0E58               	movlw	low _hexpowers
  2743  0001B4  24F3               	addwf	prodl,w,c
  2744  0001B6  6EF6               	movwf	tblptrl,c
  2745  0001B8  0EFF               	movlw	high _hexpowers
  2746  0001BA  20F4               	addwfc	prodh,w,c
  2747  0001BC  6EF7               	movwf	tblptrh,c
  2748  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2749  0001BE                     	endif
  2750  0001BE  0009               	tblrd		*+
  2751  0001C0  50F5               	movf	tablat,w,c
  2752  0001C2  5C33               	subwf	printf@val,w,c
  2753  0001C4  0009               	tblrd		*+
  2754  0001C6  50F5               	movf	tablat,w,c
  2755  0001C8  5834               	subwfb	printf@val+1,w,c
  2756  0001CA  A0D8               	btfss	status,0,c
  2757  0001CC  D00E               	goto	l6135
  2758  0001CE  D001               	goto	l6127
  2759                           
  2760                           ;doprnt.c: 1318: break;
  2761  0001D0  D00C               	goto	l6135
  2762  0001D2                     l6127:
  2763  0001D2  2A38               	incf	printf@c,f,c
  2764  0001D4  D7E6               	goto	l6119
  2765                           
  2766                           ;doprnt.c: 1336: }
  2767                           
  2768                           ;doprnt.c: 1320: break;
  2769  0001D6  D009               	goto	l6135
  2770  0001D8                     l6133:
  2771  0001D8  5035               	movf	printf@flag,w,c
  2772  0001DA  0B80               	andlw	128
  2773                           
  2774                           ; Switch size 1, requested type "space"
  2775                           ; Number of cases is 2, Range of values is 0 to 128
  2776                           ; switch strategies available:
  2777                           ; Name         Instructions Cycles
  2778                           ; simple_byte            7     4 (average)
  2779                           ;	Chosen strategy is simple_byte
  2780  0001DC  0A00               	xorlw	0	; case 0
  2781  0001DE  B4D8               	btfsc	status,2,c
  2782  0001E0  D7C1               	goto	l6103
  2783  0001E2  0A80               	xorlw	128	; case 128
  2784  0001E4  B4D8               	btfsc	status,2,c
  2785  0001E6  D7DB               	goto	l6117
  2786  0001E8  D000               	goto	l6135
  2787  0001EA                     l6135:
  2788                           
  2789                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2790  0001EA  5036               	movf	printf@width,w,c
  2791  0001EC  1037               	iorwf	printf@width+1,w,c
  2792  0001EE  B4D8               	btfsc	status,2,c
  2793  0001F0  D00A               	goto	l6141
  2794  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2795  0001F6  0E03               	movlw	3
  2796  0001F8  162B               	andwf	??_printf,f,c
  2797  0001FA  B4D8               	btfsc	status,2,c
  2798  0001FC  D004               	goto	l6141
  2799                           
  2800                           ;doprnt.c: 1346: width--;
  2801  0001FE  0636               	decf	printf@width,f,c
  2802  000200  A0D8               	btfss	status,0,c
  2803  000202  0637               	decf	printf@width+1,f,c
  2804  000204  D000               	goto	l6141
  2805  000206                     l6141:
  2806                           
  2807                           ;doprnt.c: 1381: if(width > c)
  2808  000206  0E80               	movlw	128
  2809  000208  BE38               	btfsc	printf@c,7,c
  2810  00020A  0E7F               	movlw	127
  2811  00020C  6E2B               	movwf	??_printf& (0+255),c
  2812  00020E  5036               	movf	printf@width,w,c
  2813  000210  5C38               	subwf	printf@c,w,c
  2814  000212  5037               	movf	printf@width+1,w,c
  2815  000214  0A80               	xorlw	128
  2816  000216  582B               	subwfb	??_printf& (0+255),w,c
  2817  000218  B0D8               	btfsc	status,0,c
  2818  00021A  D007               	goto	l6145
  2819                           
  2820                           ;doprnt.c: 1382: width -= c;
  2821  00021C  5038               	movf	printf@c,w,c
  2822  00021E  5E36               	subwf	printf@width,f,c
  2823  000220  0E00               	movlw	0
  2824  000222  BE38               	btfsc	printf@c,7,c
  2825  000224  0EFF               	movlw	255
  2826  000226  5A37               	subwfb	printf@width+1,f,c
  2827  000228  D005               	goto	l6147
  2828  00022A                     l6145:
  2829                           
  2830                           ;doprnt.c: 1383: else
  2831                           ;doprnt.c: 1384: width = 0;
  2832  00022A  0E00               	movlw	0
  2833  00022C  6E37               	movwf	printf@width+1,c
  2834  00022E  0E00               	movlw	0
  2835  000230  6E36               	movwf	printf@width,c
  2836  000232  D000               	goto	l6147
  2837  000234                     l6147:
  2838                           
  2839                           ;doprnt.c: 1387: if(flag & 0x04) {
  2840  000234  A435               	btfss	printf@flag,2,c
  2841  000236  D01A               	goto	l6159
  2842                           
  2843                           ;doprnt.c: 1392: if(flag & 0x03)
  2844  000238  C035  F02B         	movff	printf@flag,??_printf
  2845  00023C  0E03               	movlw	3
  2846  00023E  162B               	andwf	??_printf,f,c
  2847  000240  B4D8               	btfsc	status,2,c
  2848  000242  D004               	goto	l6153
  2849                           
  2850                           ;doprnt.c: 1393: (putch('-') );
  2851  000244  0E2D               	movlw	45
  2852  000246  EC9F  F00F         	call	_putch
  2853  00024A  D000               	goto	l6153
  2854  00024C                     l6153:
  2855                           
  2856                           ;doprnt.c: 1415: if(width)
  2857  00024C  5036               	movf	printf@width,w,c
  2858  00024E  1037               	iorwf	printf@width+1,w,c
  2859  000250  B4D8               	btfsc	status,2,c
  2860  000252  D026               	goto	l6169
  2861  000254                     l6155:
  2862                           
  2863                           ;doprnt.c: 1417: (putch('0') );
  2864  000254  0E30               	movlw	48
  2865  000256  EC9F  F00F         	call	_putch
  2866                           
  2867                           ;doprnt.c: 1418: while(--width);
  2868  00025A  0636               	decf	printf@width,f,c
  2869  00025C  A0D8               	btfss	status,0,c
  2870  00025E  0637               	decf	printf@width+1,f,c
  2871  000260  5036               	movf	printf@width,w,c
  2872  000262  1037               	iorwf	printf@width+1,w,c
  2873  000264  B4D8               	btfsc	status,2,c
  2874  000266  D01C               	goto	l6169
  2875  000268  D7F5               	goto	l6155
  2876                           
  2877                           ;doprnt.c: 1420: } else
  2878  00026A  D01A               	goto	l6169
  2879  00026C                     l6159:
  2880                           
  2881                           ;doprnt.c: 1422: {
  2882                           ;doprnt.c: 1424: if(width
  2883                           ;doprnt.c: 1428: )
  2884  00026C  5036               	movf	printf@width,w,c
  2885  00026E  1037               	iorwf	printf@width+1,w,c
  2886  000270  B4D8               	btfsc	status,2,c
  2887  000272  D00C               	goto	l6165
  2888  000274                     l6161:
  2889                           
  2890                           ;doprnt.c: 1430: (putch(' ') );
  2891  000274  0E20               	movlw	32
  2892  000276  EC9F  F00F         	call	_putch
  2893                           
  2894                           ;doprnt.c: 1431: while(--width);
  2895  00027A  0636               	decf	printf@width,f,c
  2896  00027C  A0D8               	btfss	status,0,c
  2897  00027E  0637               	decf	printf@width+1,f,c
  2898  000280  5036               	movf	printf@width,w,c
  2899  000282  1037               	iorwf	printf@width+1,w,c
  2900  000284  B4D8               	btfsc	status,2,c
  2901  000286  D002               	goto	l6165
  2902  000288  D7F5               	goto	l6161
  2903  00028A  D000               	goto	l6165
  2904  00028C                     l6165:
  2905                           
  2906                           ;doprnt.c: 1438: if(flag & 0x03)
  2907  00028C  C035  F02B         	movff	printf@flag,??_printf
  2908  000290  0E03               	movlw	3
  2909  000292  162B               	andwf	??_printf,f,c
  2910  000294  B4D8               	btfsc	status,2,c
  2911  000296  D004               	goto	l6169
  2912                           
  2913                           ;doprnt.c: 1439: (putch('-') );
  2914  000298  0E2D               	movlw	45
  2915  00029A  EC9F  F00F         	call	_putch
  2916  00029E  D000               	goto	l6169
  2917  0002A0                     l6169:
  2918                           
  2919                           ;doprnt.c: 1469: }
  2920                           ;doprnt.c: 1472: prec = c;
  2921  0002A0  C038  F032         	movff	printf@c,printf@prec
  2922                           
  2923                           ;doprnt.c: 1474: while(prec--) {
  2924  0002A4  D053               	goto	l6183
  2925                           
  2926                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2927  0002A6  D045               	goto	l6179
  2928  0002A8                     l6171:
  2929                           
  2930                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2931  0002A8  5032               	movf	printf@prec,w,c
  2932  0002AA  0D02               	mullw	2
  2933  0002AC  0E4E               	movlw	low _dpowers
  2934  0002AE  24F3               	addwf	prodl,w,c
  2935  0002B0  6EF6               	movwf	tblptrl,c
  2936  0002B2  0EFF               	movlw	high _dpowers
  2937  0002B4  20F4               	addwfc	prodh,w,c
  2938  0002B6  6EF7               	movwf	tblptrh,c
  2939  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2940  0002B8                     	endif
  2941  0002B8  0009               	tblrd		*+
  2942  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2943  0002BE  000A               	tblrd		*-
  2944  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2945  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  2946  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2947  0002CC  ECE9  F00B         	call	___lwdiv	;wreg free
  2948  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2949  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2950  0002D8  0E00               	movlw	0
  2951  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  2952  0002DC  0E0A               	movlw	10
  2953  0002DE  6E1A               	movwf	___lwmod@divisor,c
  2954  0002E0  ECE3  F00C         	call	___lwmod	;wreg free
  2955  0002E4  5018               	movf	?___lwmod,w,c
  2956  0002E6  0F30               	addlw	48
  2957  0002E8  6E38               	movwf	printf@c,c
  2958                           
  2959                           ;doprnt.c: 1491: break;
  2960  0002EA  D02C               	goto	l6181
  2961  0002EC                     l6173:
  2962                           
  2963                           ;doprnt.c: 1499: {
  2964                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2965  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2966  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2967  0002F4  5032               	movf	printf@prec,w,c
  2968  0002F6  0D02               	mullw	2
  2969  0002F8  0E58               	movlw	low _hexpowers
  2970  0002FA  24F3               	addwf	prodl,w,c
  2971  0002FC  6EF6               	movwf	tblptrl,c
  2972  0002FE  0EFF               	movlw	high _hexpowers
  2973  000300  20F4               	addwfc	prodh,w,c
  2974  000302  6EF7               	movwf	tblptrh,c
  2975  000304                     	if	0	;There are less than 3 active tblptr bytes
  2976  000304                     	endif
  2977  000304  0009               	tblrd		*+
  2978  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2979  00030A  000A               	tblrd		*-
  2980  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2981  000310  ECE9  F00B         	call	___lwdiv	;wreg free
  2982  000314  5011               	movf	?___lwdiv,w,c
  2983  000316  0B0F               	andlw	15
  2984  000318  6E2F               	movwf	printf@idx,c
  2985                           
  2986                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2987  00031A  502F               	movf	printf@idx,w,c
  2988  00031C  0D01               	mullw	1
  2989  00031E  0EE5               	movlw	low STR_7
  2990  000320  24F3               	addwf	prodl,w,c
  2991  000322  6EF6               	movwf	tblptrl,c
  2992  000324  0EFF               	movlw	high STR_7
  2993  000326  20F4               	addwfc	prodh,w,c
  2994  000328  6EF7               	movwf	tblptrh,c
  2995  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2996  00032A                     	endif
  2997  00032A  0008               	tblrd		*
  2998  00032C  CFF5 F038          	movff	tablat,printf@c
  2999                           
  3000                           ;doprnt.c: 1523: }
  3001                           
  3002                           ;doprnt.c: 1508: }
  3003                           ;doprnt.c: 1510: break;
  3004  000330  D009               	goto	l6181
  3005  000332                     l6179:
  3006  000332  5035               	movf	printf@flag,w,c
  3007  000334  0B80               	andlw	128
  3008                           
  3009                           ; Switch size 1, requested type "space"
  3010                           ; Number of cases is 2, Range of values is 0 to 128
  3011                           ; switch strategies available:
  3012                           ; Name         Instructions Cycles
  3013                           ; simple_byte            7     4 (average)
  3014                           ;	Chosen strategy is simple_byte
  3015  000336  0A00               	xorlw	0	; case 0
  3016  000338  B4D8               	btfsc	status,2,c
  3017  00033A  D7B6               	goto	l6171
  3018  00033C  0A80               	xorlw	128	; case 128
  3019  00033E  B4D8               	btfsc	status,2,c
  3020  000340  D7D5               	goto	l6173
  3021  000342  D000               	goto	l6181
  3022  000344                     l6181:
  3023                           
  3024                           ;doprnt.c: 1524: (putch(c) );
  3025  000344  5038               	movf	printf@c,w,c
  3026  000346  EC9F  F00F         	call	_putch
  3027  00034A  D000               	goto	l6183
  3028  00034C                     l6183:
  3029  00034C  0632               	decf	printf@prec,f,c
  3030  00034E  2832               	incf	printf@prec,w,c
  3031  000350  B4D8               	btfsc	status,2,c
  3032  000352  D002               	goto	l6185
  3033  000354  D7EE               	goto	l6179
  3034  000356  D000               	goto	l6185
  3035  000358                     l6185:
  3036  000358  C01D  FFF6         	movff	printf@f,tblptrl
  3037  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  3038  000360  4A1D               	infsnz	printf@f,f,c
  3039  000362  2A1E               	incf	printf@f+1,f,c
  3040  000364                     	if	0	;tblptru may be non-zero
  3041  000364                     	endif
  3042  000364                     	if	0	;tblptru may be non-zero
  3043  000364                     	endif
  3044  000364  0008               	tblrd		*
  3045  000366  CFF5 F038          	movff	tablat,printf@c
  3046  00036A  5038               	movf	printf@c,w,c
  3047  00036C  B4D8               	btfsc	status,2,c
  3048  00036E  D002               	goto	l831
  3049  000370  D65A               	goto	l6059
  3050  000372  D000               	goto	l831
  3051  000374                     l831:
  3052  000374  0012               	return		;funcret
  3053  000376                     __end_of_printf:
  3054                           	opt stack 0
  3055                           tblptru	equ	0xFF8
  3056                           tblptrh	equ	0xFF7
  3057                           tblptrl	equ	0xFF6
  3058                           tablat	equ	0xFF5
  3059                           prodh	equ	0xFF4
  3060                           prodl	equ	0xFF3
  3061                           intcon2	equ	0xFF1
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           postdec1	equ	0xFE5
  3065                           fsr1l	equ	0xFE1
  3066                           postinc2	equ	0xFDE
  3067                           postdec2	equ	0xFDD
  3068                           fsr2h	equ	0xFDA
  3069                           fsr2l	equ	0xFD9
  3070                           status	equ	0xFD8
  3071                           
  3072 ;; *************** function _putch *****************
  3073 ;; Defined at:
  3074 ;;		line 32 in file "utils.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;  c               1    wreg     unsigned char 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  c               1   16[COMRAM] unsigned char 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;		None               void
  3081 ;; Registers used:
  3082 ;;		wreg
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;Total ram usage:        1 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    3
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_printf
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text2
  3103  001F3E                     __ptext2:
  3104                           	opt stack 0
  3105  001F3E                     _putch:
  3106                           	opt stack 26
  3107                           
  3108                           ;incstack = 0
  3109                           ;putch@c stored from wreg
  3110  001F3E  6E11               	movwf	putch@c,c
  3111                           
  3112                           ;utils.c: 34: while (!TRMT);
  3113  001F40  D000               	goto	l488
  3114  001F42                     l488:
  3115  001F42  A2AC               	btfss	4012,1,c	;volatile
  3116  001F44  D7FE               	goto	l488
  3117                           
  3118                           ;utils.c: 35: TXREG = c;
  3119  001F46  C011  FFAD         	movff	putch@c,4013	;volatile
  3120  001F4A  0012               	return		;funcret
  3121  001F4C                     __end_of_putch:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon2	equ	0xFF1
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postdec1	equ	0xFE5
  3133                           fsr1l	equ	0xFE1
  3134                           postinc2	equ	0xFDE
  3135                           postdec2	equ	0xFDD
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _isdigit *****************
  3141 ;; Defined at:
  3142 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  c               1    wreg     unsigned char 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  c               1   18[COMRAM] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;		None               void
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;Total ram usage:        3 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    3
  3163 ;; This function calls:
  3164 ;;		Nothing
  3165 ;; This function is called by:
  3166 ;;		_printf
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text3
  3171  001D66                     __ptext3:
  3172                           	opt stack 0
  3173  001D66                     _isdigit:
  3174                           	opt stack 26
  3175                           
  3176                           ;incstack = 0
  3177                           ;isdigit@c stored from wreg
  3178  001D66  6E13               	movwf	isdigit@c,c
  3179  001D68  0E00               	movlw	0
  3180  001D6A  6E12               	movwf	_isdigit$2330,c
  3181  001D6C  0E3A               	movlw	58
  3182  001D6E  6013               	cpfslt	isdigit@c,c
  3183  001D70  D006               	goto	l5753
  3184  001D72  0E2F               	movlw	47
  3185  001D74  6413               	cpfsgt	isdigit@c,c
  3186  001D76  D003               	goto	l5753
  3187  001D78  0E01               	movlw	1
  3188  001D7A  6E12               	movwf	_isdigit$2330,c
  3189  001D7C  D000               	goto	l5753
  3190  001D7E                     l5753:
  3191  001D7E  C012  F011         	movff	_isdigit$2330,??_isdigit
  3192  001D82  3011               	rrcf	??_isdigit,w,c
  3193  001D84  D000               	goto	l1298
  3194  001D86                     l1298:
  3195  001D86  0012               	return		;funcret
  3196  001D88                     __end_of_isdigit:
  3197                           	opt stack 0
  3198                           tblptru	equ	0xFF8
  3199                           tblptrh	equ	0xFF7
  3200                           tblptrl	equ	0xFF6
  3201                           tablat	equ	0xFF5
  3202                           prodh	equ	0xFF4
  3203                           prodl	equ	0xFF3
  3204                           intcon2	equ	0xFF1
  3205                           postinc0	equ	0xFEE
  3206                           wreg	equ	0xFE8
  3207                           postdec1	equ	0xFE5
  3208                           fsr1l	equ	0xFE1
  3209                           postinc2	equ	0xFDE
  3210                           postdec2	equ	0xFDD
  3211                           fsr2h	equ	0xFDA
  3212                           fsr2l	equ	0xFD9
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function ___lwmod *****************
  3216 ;; Defined at:
  3217 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  dividend        2   23[COMRAM] unsigned int 
  3220 ;;  divisor         2   25[COMRAM] unsigned int 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  counter         1   27[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  2   23[COMRAM] unsigned int 
  3225 ;; Registers used:
  3226 ;;		wreg, status,2, status,0
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;Total ram usage:        5 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    3
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_printf
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text4
  3247  0019C6                     __ptext4:
  3248                           	opt stack 0
  3249  0019C6                     ___lwmod:
  3250                           	opt stack 26
  3251                           
  3252                           ;incstack = 0
  3253  0019C6  501A               	movf	___lwmod@divisor,w,c
  3254  0019C8  101B               	iorwf	___lwmod@divisor+1,w,c
  3255  0019CA  B4D8               	btfsc	status,2,c
  3256  0019CC  D01D               	goto	l1400
  3257  0019CE  0E01               	movlw	1
  3258  0019D0  6E1C               	movwf	___lwmod@counter,c
  3259  0019D2  D005               	goto	l5829
  3260  0019D4                     l5827:
  3261  0019D4  90D8               	bcf	status,0,c
  3262  0019D6  361A               	rlcf	___lwmod@divisor,f,c
  3263  0019D8  361B               	rlcf	___lwmod@divisor+1,f,c
  3264  0019DA  2A1C               	incf	___lwmod@counter,f,c
  3265  0019DC  D000               	goto	l5829
  3266  0019DE                     l5829:
  3267  0019DE  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3268  0019E0  D002               	goto	l5831
  3269  0019E2  D7F8               	goto	l5827
  3270  0019E4  D000               	goto	l5831
  3271  0019E6                     l5831:
  3272  0019E6  501A               	movf	___lwmod@divisor,w,c
  3273  0019E8  5C18               	subwf	___lwmod@dividend,w,c
  3274  0019EA  501B               	movf	___lwmod@divisor+1,w,c
  3275  0019EC  5819               	subwfb	___lwmod@dividend+1,w,c
  3276  0019EE  A0D8               	btfss	status,0,c
  3277  0019F0  D005               	goto	l5835
  3278  0019F2  501A               	movf	___lwmod@divisor,w,c
  3279  0019F4  5E18               	subwf	___lwmod@dividend,f,c
  3280  0019F6  501B               	movf	___lwmod@divisor+1,w,c
  3281  0019F8  5A19               	subwfb	___lwmod@dividend+1,f,c
  3282  0019FA  D000               	goto	l5835
  3283  0019FC                     l5835:
  3284  0019FC  90D8               	bcf	status,0,c
  3285  0019FE  321B               	rrcf	___lwmod@divisor+1,f,c
  3286  001A00  321A               	rrcf	___lwmod@divisor,f,c
  3287  001A02  2E1C               	decfsz	___lwmod@counter,f,c
  3288  001A04  D7F0               	goto	l5831
  3289  001A06  D000               	goto	l1400
  3290  001A08                     l1400:
  3291  001A08  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3292  001A0C  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3293  001A10  0012               	return		;funcret
  3294  001A12                     __end_of___lwmod:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           prodh	equ	0xFF4
  3301                           prodl	equ	0xFF3
  3302                           intcon2	equ	0xFF1
  3303                           postinc0	equ	0xFEE
  3304                           wreg	equ	0xFE8
  3305                           postdec1	equ	0xFE5
  3306                           fsr1l	equ	0xFE1
  3307                           postinc2	equ	0xFDE
  3308                           postdec2	equ	0xFDD
  3309                           fsr2h	equ	0xFDA
  3310                           fsr2l	equ	0xFD9
  3311                           status	equ	0xFD8
  3312                           
  3313 ;; *************** function ___lwdiv *****************
  3314 ;; Defined at:
  3315 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  dividend        2   16[COMRAM] unsigned int 
  3318 ;;  divisor         2   18[COMRAM] unsigned int 
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  quotient        2   21[COMRAM] unsigned int 
  3321 ;;  counter         1   20[COMRAM] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  2   16[COMRAM] unsigned int 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;Total ram usage:        7 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    3
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_printf
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text5
  3346  0017D2                     __ptext5:
  3347                           	opt stack 0
  3348  0017D2                     ___lwdiv:
  3349                           	opt stack 26
  3350                           
  3351                           ;incstack = 0
  3352  0017D2  0E00               	movlw	0
  3353  0017D4  6E17               	movwf	___lwdiv@quotient+1,c
  3354  0017D6  0E00               	movlw	0
  3355  0017D8  6E16               	movwf	___lwdiv@quotient,c
  3356  0017DA  5013               	movf	___lwdiv@divisor,w,c
  3357  0017DC  1014               	iorwf	___lwdiv@divisor+1,w,c
  3358  0017DE  B4D8               	btfsc	status,2,c
  3359  0017E0  D021               	goto	l1390
  3360  0017E2  0E01               	movlw	1
  3361  0017E4  6E15               	movwf	___lwdiv@counter,c
  3362  0017E6  D005               	goto	l5809
  3363  0017E8                     l5807:
  3364  0017E8  90D8               	bcf	status,0,c
  3365  0017EA  3613               	rlcf	___lwdiv@divisor,f,c
  3366  0017EC  3614               	rlcf	___lwdiv@divisor+1,f,c
  3367  0017EE  2A15               	incf	___lwdiv@counter,f,c
  3368  0017F0  D000               	goto	l5809
  3369  0017F2                     l5809:
  3370  0017F2  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3371  0017F4  D002               	goto	l5811
  3372  0017F6  D7F8               	goto	l5807
  3373  0017F8  D000               	goto	l5811
  3374  0017FA                     l5811:
  3375  0017FA  90D8               	bcf	status,0,c
  3376  0017FC  3616               	rlcf	___lwdiv@quotient,f,c
  3377  0017FE  3617               	rlcf	___lwdiv@quotient+1,f,c
  3378  001800  5013               	movf	___lwdiv@divisor,w,c
  3379  001802  5C11               	subwf	___lwdiv@dividend,w,c
  3380  001804  5014               	movf	___lwdiv@divisor+1,w,c
  3381  001806  5812               	subwfb	___lwdiv@dividend+1,w,c
  3382  001808  A0D8               	btfss	status,0,c
  3383  00180A  D006               	goto	l5819
  3384  00180C  5013               	movf	___lwdiv@divisor,w,c
  3385  00180E  5E11               	subwf	___lwdiv@dividend,f,c
  3386  001810  5014               	movf	___lwdiv@divisor+1,w,c
  3387  001812  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3388  001814  8016               	bsf	___lwdiv@quotient,0,c
  3389  001816  D000               	goto	l5819
  3390  001818                     l5819:
  3391  001818  90D8               	bcf	status,0,c
  3392  00181A  3214               	rrcf	___lwdiv@divisor+1,f,c
  3393  00181C  3213               	rrcf	___lwdiv@divisor,f,c
  3394  00181E  2E15               	decfsz	___lwdiv@counter,f,c
  3395  001820  D7EC               	goto	l5811
  3396  001822  D000               	goto	l1390
  3397  001824                     l1390:
  3398  001824  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3399  001828  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3400  00182C  0012               	return		;funcret
  3401  00182E                     __end_of___lwdiv:
  3402                           	opt stack 0
  3403                           tblptru	equ	0xFF8
  3404                           tblptrh	equ	0xFF7
  3405                           tblptrl	equ	0xFF6
  3406                           tablat	equ	0xFF5
  3407                           prodh	equ	0xFF4
  3408                           prodl	equ	0xFF3
  3409                           intcon2	equ	0xFF1
  3410                           postinc0	equ	0xFEE
  3411                           wreg	equ	0xFE8
  3412                           postdec1	equ	0xFE5
  3413                           fsr1l	equ	0xFE1
  3414                           postinc2	equ	0xFDE
  3415                           postdec2	equ	0xFDD
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _get_RPM *****************
  3421 ;; Defined at:
  3422 ;;		line 11 in file "Fan_Support.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  RPS             2   26[COMRAM] int 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  2   24[COMRAM] int 
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:        4 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    4
  3443 ;; This function calls:
  3444 ;;		___awdiv
  3445 ;;		___wmul
  3446 ;; This function is called by:
  3447 ;;		_main
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text6
  3452  001B38                     __ptext6:
  3453                           	opt stack 0
  3454  001B38                     _get_RPM:
  3455                           	opt stack 26
  3456                           
  3457                           ;Fan_Support.c: 13: int RPS = TMR3L / 2;
  3458                           
  3459                           ;incstack = 0
  3460  001B38  CFB2 F011          	movff	4018,___awdiv@dividend	;volatile
  3461  001B3C  6A12               	clrf	___awdiv@dividend+1,c
  3462  001B3E  0E00               	movlw	0
  3463  001B40  6E14               	movwf	___awdiv@divisor+1,c
  3464  001B42  0E02               	movlw	2
  3465  001B44  6E13               	movwf	___awdiv@divisor,c
  3466  001B46  EC42  F00A         	call	___awdiv	;wreg free
  3467  001B4A  C011  F01B         	movff	?___awdiv,get_RPM@RPS
  3468  001B4E  C012  F01C         	movff	?___awdiv+1,get_RPM@RPS+1
  3469                           
  3470                           ;Fan_Support.c: 15: TMR3L = 0;
  3471  001B52  0E00               	movlw	0
  3472  001B54  6EB2               	movwf	4018,c	;volatile
  3473                           
  3474                           ;Fan_Support.c: 16: return (RPS * 60);
  3475  001B56  C01B  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3476  001B5A  C01C  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3477  001B5E  0E00               	movlw	0
  3478  001B60  6E14               	movwf	___wmul@multiplicand+1,c
  3479  001B62  0E3C               	movlw	60
  3480  001B64  6E13               	movwf	___wmul@multiplicand,c
  3481  001B66  EC7A  F00E         	call	___wmul	;wreg free
  3482  001B6A  C011  F019         	movff	?___wmul,?_get_RPM
  3483  001B6E  C012  F01A         	movff	?___wmul+1,?_get_RPM+1
  3484  001B72  D000               	goto	l725
  3485  001B74                     l725:
  3486  001B74  0012               	return		;funcret
  3487  001B76                     __end_of_get_RPM:
  3488                           	opt stack 0
  3489                           tblptru	equ	0xFF8
  3490                           tblptrh	equ	0xFF7
  3491                           tblptrl	equ	0xFF6
  3492                           tablat	equ	0xFF5
  3493                           prodh	equ	0xFF4
  3494                           prodl	equ	0xFF3
  3495                           intcon2	equ	0xFF1
  3496                           postinc0	equ	0xFEE
  3497                           wreg	equ	0xFE8
  3498                           postdec1	equ	0xFE5
  3499                           fsr1l	equ	0xFE1
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _fillCircle *****************
  3507 ;; Defined at:
  3508 ;;		line 561 in file "ST7735_TFT.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  x0              2   58[COMRAM] int 
  3511 ;;  y0              2   60[COMRAM] int 
  3512 ;;  r               2   62[COMRAM] int 
  3513 ;;  color           2   64[COMRAM] unsigned int 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;		None
  3516 ;; Return value:  Size  Location     Type
  3517 ;;		None               void
  3518 ;; Registers used:
  3519 ;;		wreg, status,2, status,0, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3525 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;Total ram usage:        8 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    8
  3532 ;; This function calls:
  3533 ;;		_drawFastVLine
  3534 ;;		_fillCircleHelper
  3535 ;; This function is called by:
  3536 ;;		_main
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text7
  3541  001882                     __ptext7:
  3542                           	opt stack 0
  3543  001882                     _fillCircle:
  3544                           	opt stack 22
  3545                           
  3546                           ;ST7735_TFT.c: 563: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3547                           
  3548                           ;incstack = 0
  3549  001882  503F               	movf	fillCircle@r,w,c
  3550  001884  0800               	sublw	0
  3551  001886  243D               	addwf	fillCircle@y0,w,c
  3552  001888  6E18               	movwf	drawFastVLine@y,c
  3553  00188A  80D8               	bsf	status,0,c
  3554  00188C  343F               	rlcf	fillCircle@r,w,c
  3555  00188E  6E19               	movwf	drawFastVLine@h,c
  3556  001890  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3557  001894  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3558  001898  503B               	movf	fillCircle@x0,w,c
  3559  00189A  EC8D  F00A         	call	_drawFastVLine
  3560                           
  3561                           ;ST7735_TFT.c: 564: fillCircleHelper(x0, y0, r, 3, 0, color);
  3562  00189E  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3563  0018A2  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3564  0018A6  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3565  0018AA  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3566  0018AE  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3567  0018B2  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3568  0018B6  0E00               	movlw	0
  3569  0018B8  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3570  0018BA  0E03               	movlw	3
  3571  0018BC  6E29               	movwf	fillCircleHelper@cornername,c
  3572  0018BE  0E00               	movlw	0
  3573  0018C0  6E2C               	movwf	fillCircleHelper@delta+1,c
  3574  0018C2  0E00               	movlw	0
  3575  0018C4  6E2B               	movwf	fillCircleHelper@delta,c
  3576  0018C6  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3577  0018CA  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3578  0018CE  EC3C  F005         	call	_fillCircleHelper	;wreg free
  3579  0018D2  0012               	return		;funcret
  3580  0018D4                     __end_of_fillCircle:
  3581                           	opt stack 0
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon2	equ	0xFF1
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           postdec1	equ	0xFE5
  3592                           fsr1l	equ	0xFE1
  3593                           postinc2	equ	0xFDE
  3594                           postdec2	equ	0xFDD
  3595                           fsr2h	equ	0xFDA
  3596                           fsr2l	equ	0xFD9
  3597                           status	equ	0xFD8
  3598                           
  3599 ;; *************** function _fillCircleHelper *****************
  3600 ;; Defined at:
  3601 ;;		line 536 in file "ST7735_TFT.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;  x0              2   34[COMRAM] int 
  3604 ;;  y0              2   36[COMRAM] int 
  3605 ;;  r               2   38[COMRAM] int 
  3606 ;;  cornername      2   40[COMRAM] unsigned int 
  3607 ;;  delta           2   42[COMRAM] int 
  3608 ;;  color           2   44[COMRAM] unsigned int 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  y               2   56[COMRAM] int 
  3611 ;;  x               2   54[COMRAM] int 
  3612 ;;  f               2   52[COMRAM] int 
  3613 ;;  ddF_y           2   50[COMRAM] int 
  3614 ;;  ddF_x           2   48[COMRAM] int 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;		None               void
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3624 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;Total ram usage:       24 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    7
  3631 ;; This function calls:
  3632 ;;		_drawFastVLine
  3633 ;; This function is called by:
  3634 ;;		_fillCircle
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text8
  3639  000A78                     __ptext8:
  3640                           	opt stack 0
  3641  000A78                     _fillCircleHelper:
  3642                           	opt stack 22
  3643                           
  3644                           ;ST7735_TFT.c: 538: signed int f, ddF_x, ddF_y, x, y;
  3645                           ;ST7735_TFT.c: 539: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3646                           
  3647                           ;incstack = 0
  3648  000A78  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3649  000A7C  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3650  000A80  1E2F               	comf	??_fillCircleHelper,f,c
  3651  000A82  1E30               	comf	??_fillCircleHelper+1,f,c
  3652  000A84  4A2F               	infsnz	??_fillCircleHelper,f,c
  3653  000A86  2A30               	incf	??_fillCircleHelper+1,f,c
  3654  000A88  0E01               	movlw	1
  3655  000A8A  242F               	addwf	??_fillCircleHelper,w,c
  3656  000A8C  6E35               	movwf	fillCircleHelper@f,c
  3657  000A8E  0E00               	movlw	0
  3658  000A90  2030               	addwfc	??_fillCircleHelper+1,w,c
  3659  000A92  6E36               	movwf	fillCircleHelper@f+1,c
  3660  000A94  0E00               	movlw	0
  3661  000A96  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3662  000A98  0E01               	movlw	1
  3663  000A9A  6E31               	movwf	fillCircleHelper@ddF_x,c
  3664  000A9C  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3665  000AA0  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3666  000AA4  90D8               	bcf	status,0,c
  3667  000AA6  362F               	rlcf	??_fillCircleHelper,f,c
  3668  000AA8  3630               	rlcf	??_fillCircleHelper+1,f,c
  3669  000AAA  1E2F               	comf	??_fillCircleHelper,f,c
  3670  000AAC  1E30               	comf	??_fillCircleHelper+1,f,c
  3671  000AAE  4A2F               	infsnz	??_fillCircleHelper,f,c
  3672  000AB0  2A30               	incf	??_fillCircleHelper+1,f,c
  3673  000AB2  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3674  000AB6  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3675  000ABA  0E00               	movlw	0
  3676  000ABC  6E38               	movwf	fillCircleHelper@x+1,c
  3677  000ABE  0E00               	movlw	0
  3678  000AC0  6E37               	movwf	fillCircleHelper@x,c
  3679  000AC2  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3680  000AC6  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3681                           
  3682                           ;ST7735_TFT.c: 540: while (x<y) {
  3683  000ACA  D067               	goto	l5673
  3684  000ACC                     l5653:
  3685                           
  3686                           ;ST7735_TFT.c: 541: if (f >= 0) {
  3687  000ACC  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3688  000ACE  D00B               	goto	l399
  3689                           
  3690                           ;ST7735_TFT.c: 542: y--;
  3691  000AD0  0639               	decf	fillCircleHelper@y,f,c
  3692  000AD2  A0D8               	btfss	status,0,c
  3693  000AD4  063A               	decf	fillCircleHelper@y+1,f,c
  3694                           
  3695                           ;ST7735_TFT.c: 543: ddF_y += 2;
  3696  000AD6  0E02               	movlw	2
  3697  000AD8  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3698  000ADA  0E00               	movlw	0
  3699  000ADC  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3700                           
  3701                           ;ST7735_TFT.c: 544: f += ddF_y;
  3702  000ADE  5033               	movf	fillCircleHelper@ddF_y,w,c
  3703  000AE0  2635               	addwf	fillCircleHelper@f,f,c
  3704  000AE2  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3705  000AE4  2236               	addwfc	fillCircleHelper@f+1,f,c
  3706  000AE6                     l399:
  3707                           
  3708                           ;ST7735_TFT.c: 545: }
  3709                           ;ST7735_TFT.c: 546: x++;
  3710  000AE6  4A37               	infsnz	fillCircleHelper@x,f,c
  3711  000AE8  2A38               	incf	fillCircleHelper@x+1,f,c
  3712                           
  3713                           ;ST7735_TFT.c: 547: ddF_x += 2;
  3714  000AEA  0E02               	movlw	2
  3715  000AEC  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3716  000AEE  0E00               	movlw	0
  3717  000AF0  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3718                           
  3719                           ;ST7735_TFT.c: 548: f += ddF_x;
  3720  000AF2  5031               	movf	fillCircleHelper@ddF_x,w,c
  3721  000AF4  2635               	addwf	fillCircleHelper@f,f,c
  3722  000AF6  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3723  000AF8  2236               	addwfc	fillCircleHelper@f+1,f,c
  3724                           
  3725                           ;ST7735_TFT.c: 550: if (cornername & 0x1) {
  3726  000AFA  A029               	btfss	fillCircleHelper@cornername,0,c
  3727  000AFC  D025               	goto	l5669
  3728                           
  3729                           ;ST7735_TFT.c: 551: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3730  000AFE  5039               	movf	fillCircleHelper@y,w,c
  3731  000B00  0800               	sublw	0
  3732  000B02  2425               	addwf	fillCircleHelper@y0,w,c
  3733  000B04  6E18               	movwf	drawFastVLine@y,c
  3734  000B06  5039               	movf	fillCircleHelper@y,w,c
  3735  000B08  2439               	addwf	fillCircleHelper@y,w,c
  3736  000B0A  242B               	addwf	fillCircleHelper@delta,w,c
  3737  000B0C  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3738  000B0E  282F               	incf	??_fillCircleHelper,w,c
  3739  000B10  6E19               	movwf	drawFastVLine@h,c
  3740  000B12  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3741  000B16  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3742  000B1A  5023               	movf	fillCircleHelper@x0,w,c
  3743  000B1C  2437               	addwf	fillCircleHelper@x,w,c
  3744  000B1E  EC8D  F00A         	call	_drawFastVLine
  3745                           
  3746                           ;ST7735_TFT.c: 552: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3747  000B22  5037               	movf	fillCircleHelper@x,w,c
  3748  000B24  0800               	sublw	0
  3749  000B26  2425               	addwf	fillCircleHelper@y0,w,c
  3750  000B28  6E18               	movwf	drawFastVLine@y,c
  3751  000B2A  5037               	movf	fillCircleHelper@x,w,c
  3752  000B2C  2437               	addwf	fillCircleHelper@x,w,c
  3753  000B2E  242B               	addwf	fillCircleHelper@delta,w,c
  3754  000B30  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3755  000B32  282F               	incf	??_fillCircleHelper,w,c
  3756  000B34  6E19               	movwf	drawFastVLine@h,c
  3757  000B36  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3758  000B3A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3759  000B3E  5023               	movf	fillCircleHelper@x0,w,c
  3760  000B40  2439               	addwf	fillCircleHelper@y,w,c
  3761  000B42  EC8D  F00A         	call	_drawFastVLine
  3762  000B46  D000               	goto	l5669
  3763  000B48                     l5669:
  3764                           
  3765                           ;ST7735_TFT.c: 553: }
  3766                           ;ST7735_TFT.c: 554: if (cornername & 0x2) {
  3767  000B48  A229               	btfss	fillCircleHelper@cornername,1,c
  3768  000B4A  D027               	goto	l5673
  3769                           
  3770                           ;ST7735_TFT.c: 555: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3771  000B4C  5039               	movf	fillCircleHelper@y,w,c
  3772  000B4E  0800               	sublw	0
  3773  000B50  2425               	addwf	fillCircleHelper@y0,w,c
  3774  000B52  6E18               	movwf	drawFastVLine@y,c
  3775  000B54  5039               	movf	fillCircleHelper@y,w,c
  3776  000B56  2439               	addwf	fillCircleHelper@y,w,c
  3777  000B58  242B               	addwf	fillCircleHelper@delta,w,c
  3778  000B5A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3779  000B5C  282F               	incf	??_fillCircleHelper,w,c
  3780  000B5E  6E19               	movwf	drawFastVLine@h,c
  3781  000B60  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3782  000B64  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3783  000B68  5037               	movf	fillCircleHelper@x,w,c
  3784  000B6A  0800               	sublw	0
  3785  000B6C  2423               	addwf	fillCircleHelper@x0,w,c
  3786  000B6E  EC8D  F00A         	call	_drawFastVLine
  3787                           
  3788                           ;ST7735_TFT.c: 556: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3789  000B72  5037               	movf	fillCircleHelper@x,w,c
  3790  000B74  0800               	sublw	0
  3791  000B76  2425               	addwf	fillCircleHelper@y0,w,c
  3792  000B78  6E18               	movwf	drawFastVLine@y,c
  3793  000B7A  5037               	movf	fillCircleHelper@x,w,c
  3794  000B7C  2437               	addwf	fillCircleHelper@x,w,c
  3795  000B7E  242B               	addwf	fillCircleHelper@delta,w,c
  3796  000B80  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3797  000B82  282F               	incf	??_fillCircleHelper,w,c
  3798  000B84  6E19               	movwf	drawFastVLine@h,c
  3799  000B86  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3800  000B8A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3801  000B8E  5039               	movf	fillCircleHelper@y,w,c
  3802  000B90  0800               	sublw	0
  3803  000B92  2423               	addwf	fillCircleHelper@x0,w,c
  3804  000B94  EC8D  F00A         	call	_drawFastVLine
  3805  000B98  D000               	goto	l5673
  3806  000B9A                     l5673:
  3807  000B9A  5039               	movf	fillCircleHelper@y,w,c
  3808  000B9C  5C37               	subwf	fillCircleHelper@x,w,c
  3809  000B9E  5038               	movf	fillCircleHelper@x+1,w,c
  3810  000BA0  0A80               	xorlw	128
  3811  000BA2  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3812  000BA4  503A               	movf	fillCircleHelper@y+1,w,c
  3813  000BA6  0A80               	xorlw	128
  3814  000BA8  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3815  000BAA  A0D8               	btfss	status,0,c
  3816  000BAC  D78F               	goto	l5653
  3817  000BAE  0012               	return		;funcret
  3818  000BB0                     __end_of_fillCircleHelper:
  3819                           	opt stack 0
  3820                           tblptru	equ	0xFF8
  3821                           tblptrh	equ	0xFF7
  3822                           tblptrl	equ	0xFF6
  3823                           tablat	equ	0xFF5
  3824                           prodh	equ	0xFF4
  3825                           prodl	equ	0xFF3
  3826                           intcon2	equ	0xFF1
  3827                           postinc0	equ	0xFEE
  3828                           wreg	equ	0xFE8
  3829                           postdec1	equ	0xFE5
  3830                           fsr1l	equ	0xFE1
  3831                           postinc2	equ	0xFDE
  3832                           postdec2	equ	0xFDD
  3833                           fsr2h	equ	0xFDA
  3834                           fsr2l	equ	0xFD9
  3835                           status	equ	0xFD8
  3836                           
  3837 ;; *************** function _drawCircle *****************
  3838 ;; Defined at:
  3839 ;;		line 475 in file "ST7735_TFT.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  x0              2   27[COMRAM] int 
  3842 ;;  y0              2   29[COMRAM] int 
  3843 ;;  r               2   31[COMRAM] int 
  3844 ;;  color           2   33[COMRAM] unsigned int 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  y               2   45[COMRAM] int 
  3847 ;;  x               2   43[COMRAM] int 
  3848 ;;  f               2   41[COMRAM] int 
  3849 ;;  ddF_y           2   39[COMRAM] int 
  3850 ;;  ddF_x           2   37[COMRAM] int 
  3851 ;; Return value:  Size  Location     Type
  3852 ;;		None               void
  3853 ;; Registers used:
  3854 ;;		wreg, status,2, status,0, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3860 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;Total ram usage:       20 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    7
  3867 ;; This function calls:
  3868 ;;		_drawPixel
  3869 ;; This function is called by:
  3870 ;;		_main
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text9
  3875  000606                     __ptext9:
  3876                           	opt stack 0
  3877  000606                     _drawCircle:
  3878                           	opt stack 23
  3879                           
  3880                           ;ST7735_TFT.c: 477: signed int f, ddF_x, ddF_y, x, y;
  3881                           ;ST7735_TFT.c: 478: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3882                           
  3883                           ;incstack = 0
  3884  000606  C020  F024         	movff	drawCircle@r,??_drawCircle
  3885  00060A  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3886  00060E  1E24               	comf	??_drawCircle,f,c
  3887  000610  1E25               	comf	??_drawCircle+1,f,c
  3888  000612  4A24               	infsnz	??_drawCircle,f,c
  3889  000614  2A25               	incf	??_drawCircle+1,f,c
  3890  000616  0E01               	movlw	1
  3891  000618  2424               	addwf	??_drawCircle,w,c
  3892  00061A  6E2A               	movwf	drawCircle@f,c
  3893  00061C  0E00               	movlw	0
  3894  00061E  2025               	addwfc	??_drawCircle+1,w,c
  3895  000620  6E2B               	movwf	drawCircle@f+1,c
  3896  000622  0E00               	movlw	0
  3897  000624  6E27               	movwf	drawCircle@ddF_x+1,c
  3898  000626  0E01               	movlw	1
  3899  000628  6E26               	movwf	drawCircle@ddF_x,c
  3900  00062A  C020  F024         	movff	drawCircle@r,??_drawCircle
  3901  00062E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3902  000632  90D8               	bcf	status,0,c
  3903  000634  3624               	rlcf	??_drawCircle,f,c
  3904  000636  3625               	rlcf	??_drawCircle+1,f,c
  3905  000638  1E24               	comf	??_drawCircle,f,c
  3906  00063A  1E25               	comf	??_drawCircle+1,f,c
  3907  00063C  4A24               	infsnz	??_drawCircle,f,c
  3908  00063E  2A25               	incf	??_drawCircle+1,f,c
  3909  000640  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3910  000644  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3911  000648  0E00               	movlw	0
  3912  00064A  6E2D               	movwf	drawCircle@x+1,c
  3913  00064C  0E00               	movlw	0
  3914  00064E  6E2C               	movwf	drawCircle@x,c
  3915  000650  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3916  000654  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3917                           
  3918                           ;ST7735_TFT.c: 479: drawPixel(x0 , y0 + r, color);
  3919  000658  501E               	movf	drawCircle@y0,w,c
  3920  00065A  2420               	addwf	drawCircle@r,w,c
  3921  00065C  6E18               	movwf	drawPixel@y,c
  3922  00065E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3923  000662  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3924  000666  501C               	movf	drawCircle@x0,w,c
  3925  000668  EC4D  F00E         	call	_drawPixel
  3926                           
  3927                           ;ST7735_TFT.c: 480: drawPixel(x0 , y0 - r, color);
  3928  00066C  5020               	movf	drawCircle@r,w,c
  3929  00066E  0800               	sublw	0
  3930  000670  241E               	addwf	drawCircle@y0,w,c
  3931  000672  6E18               	movwf	drawPixel@y,c
  3932  000674  C022  F019         	movff	drawCircle@color,drawPixel@color
  3933  000678  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3934  00067C  501C               	movf	drawCircle@x0,w,c
  3935  00067E  EC4D  F00E         	call	_drawPixel
  3936                           
  3937                           ;ST7735_TFT.c: 481: drawPixel(x0+r, y0 , color);
  3938  000682  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3939  000686  C022  F019         	movff	drawCircle@color,drawPixel@color
  3940  00068A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3941  00068E  501C               	movf	drawCircle@x0,w,c
  3942  000690  2420               	addwf	drawCircle@r,w,c
  3943  000692  EC4D  F00E         	call	_drawPixel
  3944                           
  3945                           ;ST7735_TFT.c: 482: drawPixel(x0-r, y0 , color);
  3946  000696  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3947  00069A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3948  00069E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3949  0006A2  5020               	movf	drawCircle@r,w,c
  3950  0006A4  0800               	sublw	0
  3951  0006A6  241C               	addwf	drawCircle@x0,w,c
  3952  0006A8  EC4D  F00E         	call	_drawPixel
  3953                           
  3954                           ;ST7735_TFT.c: 483: while (x < y) {
  3955  0006AC  D078               	goto	l5999
  3956  0006AE                     l5971:
  3957                           
  3958                           ;ST7735_TFT.c: 484: if (f >= 0) {
  3959  0006AE  BE2B               	btfsc	drawCircle@f+1,7,c
  3960  0006B0  D00B               	goto	l381
  3961                           
  3962                           ;ST7735_TFT.c: 485: y--;
  3963  0006B2  062E               	decf	drawCircle@y,f,c
  3964  0006B4  A0D8               	btfss	status,0,c
  3965  0006B6  062F               	decf	drawCircle@y+1,f,c
  3966                           
  3967                           ;ST7735_TFT.c: 486: ddF_y += 2;
  3968  0006B8  0E02               	movlw	2
  3969  0006BA  2628               	addwf	drawCircle@ddF_y,f,c
  3970  0006BC  0E00               	movlw	0
  3971  0006BE  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3972                           
  3973                           ;ST7735_TFT.c: 487: f += ddF_y;
  3974  0006C0  5028               	movf	drawCircle@ddF_y,w,c
  3975  0006C2  262A               	addwf	drawCircle@f,f,c
  3976  0006C4  5029               	movf	drawCircle@ddF_y+1,w,c
  3977  0006C6  222B               	addwfc	drawCircle@f+1,f,c
  3978  0006C8                     l381:
  3979                           
  3980                           ;ST7735_TFT.c: 488: }
  3981                           ;ST7735_TFT.c: 489: x++;
  3982  0006C8  4A2C               	infsnz	drawCircle@x,f,c
  3983  0006CA  2A2D               	incf	drawCircle@x+1,f,c
  3984                           
  3985                           ;ST7735_TFT.c: 490: ddF_x += 2;
  3986  0006CC  0E02               	movlw	2
  3987  0006CE  2626               	addwf	drawCircle@ddF_x,f,c
  3988  0006D0  0E00               	movlw	0
  3989  0006D2  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3990                           
  3991                           ;ST7735_TFT.c: 491: f += ddF_x;
  3992  0006D4  5026               	movf	drawCircle@ddF_x,w,c
  3993  0006D6  262A               	addwf	drawCircle@f,f,c
  3994  0006D8  5027               	movf	drawCircle@ddF_x+1,w,c
  3995  0006DA  222B               	addwfc	drawCircle@f+1,f,c
  3996                           
  3997                           ;ST7735_TFT.c: 492: drawPixel(x0 + x, y0 + y, color);
  3998  0006DC  501E               	movf	drawCircle@y0,w,c
  3999  0006DE  242E               	addwf	drawCircle@y,w,c
  4000  0006E0  6E18               	movwf	drawPixel@y,c
  4001  0006E2  C022  F019         	movff	drawCircle@color,drawPixel@color
  4002  0006E6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4003  0006EA  501C               	movf	drawCircle@x0,w,c
  4004  0006EC  242C               	addwf	drawCircle@x,w,c
  4005  0006EE  EC4D  F00E         	call	_drawPixel
  4006                           
  4007                           ;ST7735_TFT.c: 493: drawPixel(x0 - x, y0 + y, color);
  4008  0006F2  501E               	movf	drawCircle@y0,w,c
  4009  0006F4  242E               	addwf	drawCircle@y,w,c
  4010  0006F6  6E18               	movwf	drawPixel@y,c
  4011  0006F8  C022  F019         	movff	drawCircle@color,drawPixel@color
  4012  0006FC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4013  000700  502C               	movf	drawCircle@x,w,c
  4014  000702  0800               	sublw	0
  4015  000704  241C               	addwf	drawCircle@x0,w,c
  4016  000706  EC4D  F00E         	call	_drawPixel
  4017                           
  4018                           ;ST7735_TFT.c: 494: drawPixel(x0 + x, y0 - y, color);
  4019  00070A  502E               	movf	drawCircle@y,w,c
  4020  00070C  0800               	sublw	0
  4021  00070E  241E               	addwf	drawCircle@y0,w,c
  4022  000710  6E18               	movwf	drawPixel@y,c
  4023  000712  C022  F019         	movff	drawCircle@color,drawPixel@color
  4024  000716  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4025  00071A  501C               	movf	drawCircle@x0,w,c
  4026  00071C  242C               	addwf	drawCircle@x,w,c
  4027  00071E  EC4D  F00E         	call	_drawPixel
  4028                           
  4029                           ;ST7735_TFT.c: 495: drawPixel(x0 - x, y0 - y, color);
  4030  000722  502E               	movf	drawCircle@y,w,c
  4031  000724  0800               	sublw	0
  4032  000726  241E               	addwf	drawCircle@y0,w,c
  4033  000728  6E18               	movwf	drawPixel@y,c
  4034  00072A  C022  F019         	movff	drawCircle@color,drawPixel@color
  4035  00072E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4036  000732  502C               	movf	drawCircle@x,w,c
  4037  000734  0800               	sublw	0
  4038  000736  241C               	addwf	drawCircle@x0,w,c
  4039  000738  EC4D  F00E         	call	_drawPixel
  4040                           
  4041                           ;ST7735_TFT.c: 496: drawPixel(x0 + y, y0 + x, color);
  4042  00073C  501E               	movf	drawCircle@y0,w,c
  4043  00073E  242C               	addwf	drawCircle@x,w,c
  4044  000740  6E18               	movwf	drawPixel@y,c
  4045  000742  C022  F019         	movff	drawCircle@color,drawPixel@color
  4046  000746  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4047  00074A  501C               	movf	drawCircle@x0,w,c
  4048  00074C  242E               	addwf	drawCircle@y,w,c
  4049  00074E  EC4D  F00E         	call	_drawPixel
  4050                           
  4051                           ;ST7735_TFT.c: 497: drawPixel(x0 - y, y0 + x, color);
  4052  000752  501E               	movf	drawCircle@y0,w,c
  4053  000754  242C               	addwf	drawCircle@x,w,c
  4054  000756  6E18               	movwf	drawPixel@y,c
  4055  000758  C022  F019         	movff	drawCircle@color,drawPixel@color
  4056  00075C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4057  000760  502E               	movf	drawCircle@y,w,c
  4058  000762  0800               	sublw	0
  4059  000764  241C               	addwf	drawCircle@x0,w,c
  4060  000766  EC4D  F00E         	call	_drawPixel
  4061                           
  4062                           ;ST7735_TFT.c: 498: drawPixel(x0 + y, y0 - x, color);
  4063  00076A  502C               	movf	drawCircle@x,w,c
  4064  00076C  0800               	sublw	0
  4065  00076E  241E               	addwf	drawCircle@y0,w,c
  4066  000770  6E18               	movwf	drawPixel@y,c
  4067  000772  C022  F019         	movff	drawCircle@color,drawPixel@color
  4068  000776  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4069  00077A  501C               	movf	drawCircle@x0,w,c
  4070  00077C  242E               	addwf	drawCircle@y,w,c
  4071  00077E  EC4D  F00E         	call	_drawPixel
  4072                           
  4073                           ;ST7735_TFT.c: 499: drawPixel(x0 - y, y0 - x, color);
  4074  000782  502C               	movf	drawCircle@x,w,c
  4075  000784  0800               	sublw	0
  4076  000786  241E               	addwf	drawCircle@y0,w,c
  4077  000788  6E18               	movwf	drawPixel@y,c
  4078  00078A  C022  F019         	movff	drawCircle@color,drawPixel@color
  4079  00078E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4080  000792  502E               	movf	drawCircle@y,w,c
  4081  000794  0800               	sublw	0
  4082  000796  241C               	addwf	drawCircle@x0,w,c
  4083  000798  EC4D  F00E         	call	_drawPixel
  4084  00079C  D000               	goto	l5999
  4085  00079E                     l5999:
  4086  00079E  502E               	movf	drawCircle@y,w,c
  4087  0007A0  5C2C               	subwf	drawCircle@x,w,c
  4088  0007A2  502D               	movf	drawCircle@x+1,w,c
  4089  0007A4  0A80               	xorlw	128
  4090  0007A6  6E24               	movwf	??_drawCircle& (0+255),c
  4091  0007A8  502F               	movf	drawCircle@y+1,w,c
  4092  0007AA  0A80               	xorlw	128
  4093  0007AC  5824               	subwfb	??_drawCircle& (0+255),w,c
  4094  0007AE  A0D8               	btfss	status,0,c
  4095  0007B0  D77E               	goto	l5971
  4096  0007B2  0012               	return		;funcret
  4097  0007B4                     __end_of_drawCircle:
  4098                           	opt stack 0
  4099                           tblptru	equ	0xFF8
  4100                           tblptrh	equ	0xFF7
  4101                           tblptrl	equ	0xFF6
  4102                           tablat	equ	0xFF5
  4103                           prodh	equ	0xFF4
  4104                           prodl	equ	0xFF3
  4105                           intcon2	equ	0xFF1
  4106                           postinc0	equ	0xFEE
  4107                           wreg	equ	0xFE8
  4108                           postdec1	equ	0xFE5
  4109                           fsr1l	equ	0xFE1
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _Toggle_Fan *****************
  4117 ;; Defined at:
  4118 ;;		line 19 in file "Fan_Support.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;		None
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;		None               void
  4125 ;; Registers used:
  4126 ;;		wreg, status,2, status,0, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;Total ram usage:        0 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    7
  4139 ;; This function calls:
  4140 ;;		_Turn_Off_Fan
  4141 ;;		_Turn_On_Fan
  4142 ;; This function is called by:
  4143 ;;		_main
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text10
  4148  001E66                     __ptext10:
  4149                           	opt stack 0
  4150  001E66                     _Toggle_Fan:
  4151                           	opt stack 23
  4152                           
  4153                           ;Fan_Support.c: 21: if (FAN == 1)
  4154                           
  4155                           ;incstack = 0
  4156  001E66  0452               	decf	_FAN,w,c
  4157  001E68  A4D8               	btfss	status,2,c
  4158  001E6A  D003               	goto	l6191
  4159                           
  4160                           ;Fan_Support.c: 22: Turn_Off_Fan();
  4161  001E6C  ECB2  F00F         	call	_Turn_Off_Fan	;wreg free
  4162  001E70  D003               	goto	l730
  4163  001E72                     l6191:
  4164                           
  4165                           ;Fan_Support.c: 23: else
  4166                           ;Fan_Support.c: 24: Turn_On_Fan();
  4167  001E72  EC87  F00F         	call	_Turn_On_Fan	;wreg free
  4168  001E76  D000               	goto	l730
  4169  001E78                     l730:
  4170  001E78  0012               	return		;funcret
  4171  001E7A                     __end_of_Toggle_Fan:
  4172                           	opt stack 0
  4173                           tblptru	equ	0xFF8
  4174                           tblptrh	equ	0xFF7
  4175                           tblptrl	equ	0xFF6
  4176                           tablat	equ	0xFF5
  4177                           prodh	equ	0xFF4
  4178                           prodl	equ	0xFF3
  4179                           intcon2	equ	0xFF1
  4180                           postinc0	equ	0xFEE
  4181                           wreg	equ	0xFE8
  4182                           postdec1	equ	0xFE5
  4183                           fsr1l	equ	0xFE1
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190 ;; *************** function _Turn_On_Fan *****************
  4191 ;; Defined at:
  4192 ;;		line 34 in file "Fan_Support.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;		None               void
  4199 ;; Registers used:
  4200 ;;		wreg, status,2, status,0, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    6
  4213 ;; This function calls:
  4214 ;;		_do_update_pwm
  4215 ;; This function is called by:
  4216 ;;		_Toggle_Fan
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text11
  4221  001F0E                     __ptext11:
  4222                           	opt stack 0
  4223  001F0E                     _Turn_On_Fan:
  4224                           	opt stack 23
  4225                           
  4226                           ;Fan_Support.c: 36: FAN = 1;
  4227                           
  4228                           ;incstack = 0
  4229  001F0E  0E01               	movlw	1
  4230  001F10  6E52               	movwf	_FAN,c
  4231                           
  4232                           ;Fan_Support.c: 37: do_update_pwm(duty_cycle);
  4233  001F12  505E               	movf	_duty_cycle,w,c
  4234  001F14  EC8F  F009         	call	_do_update_pwm
  4235                           
  4236                           ;Fan_Support.c: 38: PORTDbits.RD1 = 1;
  4237  001F18  8283               	bsf	3971,1,c	;volatile
  4238                           
  4239                           ;Fan_Support.c: 39: PORTDbits.RD2 = 1;
  4240  001F1A  8483               	bsf	3971,2,c	;volatile
  4241  001F1C  0012               	return		;funcret
  4242  001F1E                     __end_of_Turn_On_Fan:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           prodh	equ	0xFF4
  4249                           prodl	equ	0xFF3
  4250                           intcon2	equ	0xFF1
  4251                           postinc0	equ	0xFEE
  4252                           wreg	equ	0xFE8
  4253                           postdec1	equ	0xFE5
  4254                           fsr1l	equ	0xFE1
  4255                           postinc2	equ	0xFDE
  4256                           postdec2	equ	0xFDD
  4257                           fsr2h	equ	0xFDA
  4258                           fsr2l	equ	0xFD9
  4259                           status	equ	0xFD8
  4260                           
  4261 ;; *************** function _Turn_Off_Fan *****************
  4262 ;; Defined at:
  4263 ;;		line 27 in file "Fan_Support.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;		None
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;		None
  4268 ;; Return value:  Size  Location     Type
  4269 ;;		None               void
  4270 ;; Registers used:
  4271 ;;		wreg, status,2
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;Total ram usage:        0 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    3
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_Toggle_Fan
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text12
  4292  001F64                     __ptext12:
  4293                           	opt stack 0
  4294  001F64                     _Turn_Off_Fan:
  4295                           	opt stack 26
  4296                           
  4297                           ;Fan_Support.c: 29: FAN = 0;
  4298                           
  4299                           ;incstack = 0
  4300  001F64  0E00               	movlw	0
  4301  001F66  6E52               	movwf	_FAN,c
  4302                           
  4303                           ;Fan_Support.c: 30: PORTDbits.RD1 = 0;
  4304  001F68  9283               	bcf	3971,1,c	;volatile
  4305                           
  4306                           ;Fan_Support.c: 31: PORTDbits.RD2 = 0;
  4307  001F6A  9483               	bcf	3971,2,c	;volatile
  4308  001F6C  0012               	return		;funcret
  4309  001F6E                     __end_of_Turn_Off_Fan:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           intcon2	equ	0xFF1
  4318                           postinc0	equ	0xFEE
  4319                           wreg	equ	0xFE8
  4320                           postdec1	equ	0xFE5
  4321                           fsr1l	equ	0xFE1
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _Set_RPM_RGB *****************
  4329 ;; Defined at:
  4330 ;;		line 93 in file "Fan_Support.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  rpm             2   24[COMRAM] int 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  range           2   26[COMRAM] int 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;		None               void
  4337 ;; Registers used:
  4338 ;;		wreg, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4344 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;Total ram usage:        4 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    4
  4351 ;; This function calls:
  4352 ;;		___awdiv
  4353 ;; This function is called by:
  4354 ;;		_main
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text13
  4359  0018D4                     __ptext13:
  4360                           	opt stack 0
  4361  0018D4                     _Set_RPM_RGB:
  4362                           	opt stack 26
  4363                           
  4364                           ;Fan_Support.c: 95: int range = (rpm/500)+1;
  4365                           
  4366                           ;incstack = 0
  4367  0018D4  C019  F011         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  4368  0018D8  C01A  F012         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  4369  0018DC  0E01               	movlw	1
  4370  0018DE  6E14               	movwf	___awdiv@divisor+1,c
  4371  0018E0  0EF4               	movlw	244
  4372  0018E2  6E13               	movwf	___awdiv@divisor,c
  4373  0018E4  EC42  F00A         	call	___awdiv	;wreg free
  4374  0018E8  0E01               	movlw	1
  4375  0018EA  2411               	addwf	?___awdiv,w,c
  4376  0018EC  6E1B               	movwf	Set_RPM_RGB@range,c
  4377  0018EE  0E00               	movlw	0
  4378  0018F0  2012               	addwfc	?___awdiv+1,w,c
  4379  0018F2  6E1C               	movwf	Set_RPM_RGB@range+1,c
  4380                           
  4381                           ;Fan_Support.c: 96: if (range > 7)
  4382  0018F4  BE1C               	btfsc	Set_RPM_RGB@range+1,7,c
  4383  0018F6  D00B               	goto	l6051
  4384  0018F8  501C               	movf	Set_RPM_RGB@range+1,w,c
  4385  0018FA  E104               	bnz	u4540
  4386  0018FC  0E08               	movlw	8
  4387  0018FE  5C1B               	subwf	Set_RPM_RGB@range,w,c
  4388  001900  A0D8               	btfss	status,0,c
  4389  001902  D005               	goto	l6051
  4390  001904                     u4540:
  4391                           
  4392                           ;Fan_Support.c: 97: range = 7;
  4393  001904  0E00               	movlw	0
  4394  001906  6E1C               	movwf	Set_RPM_RGB@range+1,c
  4395  001908  0E07               	movlw	7
  4396  00190A  6E1B               	movwf	Set_RPM_RGB@range,c
  4397  00190C  D000               	goto	l6051
  4398  00190E                     l6051:
  4399                           
  4400                           ;Fan_Support.c: 98: if (rpm == 0)
  4401  00190E  5019               	movf	Set_RPM_RGB@rpm,w,c
  4402  001910  101A               	iorwf	Set_RPM_RGB@rpm+1,w,c
  4403  001912  A4D8               	btfss	status,2,c
  4404  001914  D005               	goto	l6055
  4405                           
  4406                           ;Fan_Support.c: 99: range = 0;
  4407  001916  0E00               	movlw	0
  4408  001918  6E1C               	movwf	Set_RPM_RGB@range+1,c
  4409  00191A  0E00               	movlw	0
  4410  00191C  6E1B               	movwf	Set_RPM_RGB@range,c
  4411  00191E  D000               	goto	l6055
  4412  001920                     l6055:
  4413                           
  4414                           ;Fan_Support.c: 100: PORTE = range;
  4415  001920  C01B  FF84         	movff	Set_RPM_RGB@range,3972	;volatile
  4416  001924  0012               	return		;funcret
  4417  001926                     __end_of_Set_RPM_RGB:
  4418                           	opt stack 0
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon2	equ	0xFF1
  4426                           postinc0	equ	0xFEE
  4427                           wreg	equ	0xFE8
  4428                           postdec1	equ	0xFE5
  4429                           fsr1l	equ	0xFE1
  4430                           postinc2	equ	0xFDE
  4431                           postdec2	equ	0xFDD
  4432                           fsr2h	equ	0xFDA
  4433                           fsr2l	equ	0xFD9
  4434                           status	equ	0xFD8
  4435                           
  4436 ;; *************** function _Set_DC_RGB *****************
  4437 ;; Defined at:
  4438 ;;		line 84 in file "Fan_Support.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;  duty_cycle      2   24[COMRAM] int 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  range           2   27[COMRAM] int 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;		None               void
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4452 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;Total ram usage:        5 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    4
  4459 ;; This function calls:
  4460 ;;		___awdiv
  4461 ;; This function is called by:
  4462 ;;		_main
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text14
  4467  001A12                     __ptext14:
  4468                           	opt stack 0
  4469  001A12                     _Set_DC_RGB:
  4470                           	opt stack 26
  4471                           
  4472                           ;Fan_Support.c: 86: int range = duty_cycle/10;
  4473                           
  4474                           ;incstack = 0
  4475  001A12  C019  F011         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4476  001A16  C01A  F012         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4477  001A1A  0E00               	movlw	0
  4478  001A1C  6E14               	movwf	___awdiv@divisor+1,c
  4479  001A1E  0E0A               	movlw	10
  4480  001A20  6E13               	movwf	___awdiv@divisor,c
  4481  001A22  EC42  F00A         	call	___awdiv	;wreg free
  4482  001A26  C011  F01C         	movff	?___awdiv,Set_DC_RGB@range
  4483  001A2A  C012  F01D         	movff	?___awdiv+1,Set_DC_RGB@range+1
  4484                           
  4485                           ;Fan_Support.c: 87: if (range > 7)
  4486  001A2E  BE1D               	btfsc	Set_DC_RGB@range+1,7,c
  4487  001A30  D00B               	goto	l6043
  4488  001A32  501D               	movf	Set_DC_RGB@range+1,w,c
  4489  001A34  E104               	bnz	u4530
  4490  001A36  0E08               	movlw	8
  4491  001A38  5C1C               	subwf	Set_DC_RGB@range,w,c
  4492  001A3A  A0D8               	btfss	status,0,c
  4493  001A3C  D005               	goto	l6043
  4494  001A3E                     u4530:
  4495                           
  4496                           ;Fan_Support.c: 88: range = 7;
  4497  001A3E  0E00               	movlw	0
  4498  001A40  6E1D               	movwf	Set_DC_RGB@range+1,c
  4499  001A42  0E07               	movlw	7
  4500  001A44  6E1C               	movwf	Set_DC_RGB@range,c
  4501  001A46  D000               	goto	l6043
  4502  001A48                     l6043:
  4503                           
  4504                           ;Fan_Support.c: 89: PORTD = (PORTD & 0x8F) | (range<<4);
  4505  001A48  C01C  F01B         	movff	Set_DC_RGB@range,??_Set_DC_RGB
  4506  001A4C  3A1B               	swapf	??_Set_DC_RGB,f,c
  4507  001A4E  0EF0               	movlw	240
  4508  001A50  161B               	andwf	??_Set_DC_RGB,f,c
  4509  001A52  5083               	movf	3971,w,c	;volatile
  4510  001A54  0B8F               	andlw	143
  4511  001A56  101B               	iorwf	??_Set_DC_RGB,w,c
  4512  001A58  6E83               	movwf	3971,c	;volatile
  4513  001A5A  0012               	return		;funcret
  4514  001A5C                     __end_of_Set_DC_RGB:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon2	equ	0xFF1
  4523                           postinc0	equ	0xFEE
  4524                           wreg	equ	0xFE8
  4525                           postdec1	equ	0xFE5
  4526                           fsr1l	equ	0xFE1
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function ___awdiv *****************
  4534 ;; Defined at:
  4535 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  dividend        2   16[COMRAM] int 
  4538 ;;  divisor         2   18[COMRAM] int 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  quotient        2   22[COMRAM] int 
  4541 ;;  sign            1   21[COMRAM] unsigned char 
  4542 ;;  counter         1   20[COMRAM] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2   16[COMRAM] int 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;Total ram usage:        8 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    3
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_main
  4563 ;;		_get_RPM
  4564 ;;		_Set_DC_RGB
  4565 ;;		_Set_RPM_RGB
  4566 ;;		_dec_2_bcd
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           	psect	text15
  4571  001484                     __ptext15:
  4572                           	opt stack 0
  4573  001484                     ___awdiv:
  4574                           	opt stack 26
  4575                           
  4576                           ;incstack = 0
  4577  001484  0E00               	movlw	0
  4578  001486  6E16               	movwf	___awdiv@sign,c
  4579  001488  AE14               	btfss	___awdiv@divisor+1,7,c
  4580  00148A  D007               	goto	l5765
  4581  00148C  6C13               	negf	___awdiv@divisor,c
  4582  00148E  1E14               	comf	___awdiv@divisor+1,f,c
  4583  001490  B0D8               	btfsc	status,0,c
  4584  001492  2A14               	incf	___awdiv@divisor+1,f,c
  4585  001494  0E01               	movlw	1
  4586  001496  6E16               	movwf	___awdiv@sign,c
  4587  001498  D000               	goto	l5765
  4588  00149A                     l5765:
  4589  00149A  AE12               	btfss	___awdiv@dividend+1,7,c
  4590  00149C  D007               	goto	l5771
  4591  00149E  6C11               	negf	___awdiv@dividend,c
  4592  0014A0  1E12               	comf	___awdiv@dividend+1,f,c
  4593  0014A2  B0D8               	btfsc	status,0,c
  4594  0014A4  2A12               	incf	___awdiv@dividend+1,f,c
  4595  0014A6  0E01               	movlw	1
  4596  0014A8  1A16               	xorwf	___awdiv@sign,f,c
  4597  0014AA  D000               	goto	l5771
  4598  0014AC                     l5771:
  4599  0014AC  0E00               	movlw	0
  4600  0014AE  6E18               	movwf	___awdiv@quotient+1,c
  4601  0014B0  0E00               	movlw	0
  4602  0014B2  6E17               	movwf	___awdiv@quotient,c
  4603  0014B4  5013               	movf	___awdiv@divisor,w,c
  4604  0014B6  1014               	iorwf	___awdiv@divisor+1,w,c
  4605  0014B8  B4D8               	btfsc	status,2,c
  4606  0014BA  D021               	goto	l5793
  4607  0014BC  0E01               	movlw	1
  4608  0014BE  6E15               	movwf	___awdiv@counter,c
  4609  0014C0  D005               	goto	l5779
  4610  0014C2                     l5777:
  4611  0014C2  90D8               	bcf	status,0,c
  4612  0014C4  3613               	rlcf	___awdiv@divisor,f,c
  4613  0014C6  3614               	rlcf	___awdiv@divisor+1,f,c
  4614  0014C8  2A15               	incf	___awdiv@counter,f,c
  4615  0014CA  D000               	goto	l5779
  4616  0014CC                     l5779:
  4617  0014CC  BE14               	btfsc	___awdiv@divisor+1,7,c
  4618  0014CE  D002               	goto	l5781
  4619  0014D0  D7F8               	goto	l5777
  4620  0014D2  D000               	goto	l5781
  4621  0014D4                     l5781:
  4622  0014D4  90D8               	bcf	status,0,c
  4623  0014D6  3617               	rlcf	___awdiv@quotient,f,c
  4624  0014D8  3618               	rlcf	___awdiv@quotient+1,f,c
  4625  0014DA  5013               	movf	___awdiv@divisor,w,c
  4626  0014DC  5C11               	subwf	___awdiv@dividend,w,c
  4627  0014DE  5014               	movf	___awdiv@divisor+1,w,c
  4628  0014E0  5812               	subwfb	___awdiv@dividend+1,w,c
  4629  0014E2  A0D8               	btfss	status,0,c
  4630  0014E4  D006               	goto	l5789
  4631  0014E6  5013               	movf	___awdiv@divisor,w,c
  4632  0014E8  5E11               	subwf	___awdiv@dividend,f,c
  4633  0014EA  5014               	movf	___awdiv@divisor+1,w,c
  4634  0014EC  5A12               	subwfb	___awdiv@dividend+1,f,c
  4635  0014EE  8017               	bsf	___awdiv@quotient,0,c
  4636  0014F0  D000               	goto	l5789
  4637  0014F2                     l5789:
  4638  0014F2  90D8               	bcf	status,0,c
  4639  0014F4  3214               	rrcf	___awdiv@divisor+1,f,c
  4640  0014F6  3213               	rrcf	___awdiv@divisor,f,c
  4641  0014F8  2E15               	decfsz	___awdiv@counter,f,c
  4642  0014FA  D7EC               	goto	l5781
  4643  0014FC  D000               	goto	l5793
  4644  0014FE                     l5793:
  4645  0014FE  5016               	movf	___awdiv@sign,w,c
  4646  001500  B4D8               	btfsc	status,2,c
  4647  001502  D005               	goto	l5797
  4648  001504  6C17               	negf	___awdiv@quotient,c
  4649  001506  1E18               	comf	___awdiv@quotient+1,f,c
  4650  001508  B0D8               	btfsc	status,0,c
  4651  00150A  2A18               	incf	___awdiv@quotient+1,f,c
  4652  00150C  D000               	goto	l5797
  4653  00150E                     l5797:
  4654  00150E  C017  F011         	movff	___awdiv@quotient,?___awdiv
  4655  001512  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  4656  001516  D000               	goto	l1060
  4657  001518                     l1060:
  4658  001518  0012               	return		;funcret
  4659  00151A                     __end_of___awdiv:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           intcon2	equ	0xFF1
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           postdec1	equ	0xFE5
  4671                           fsr1l	equ	0xFE1
  4672                           postinc2	equ	0xFDE
  4673                           postdec2	equ	0xFDD
  4674                           fsr2h	equ	0xFDA
  4675                           fsr2l	equ	0xFD9
  4676                           status	equ	0xFD8
  4677                           
  4678 ;; *************** function _Initialize_LCD_Screen *****************
  4679 ;; Defined at:
  4680 ;;		line 22 in file "Main_Screen.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;		None
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;		None
  4685 ;; Return value:  Size  Location     Type
  4686 ;;		None               void
  4687 ;; Registers used:
  4688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;Total ram usage:        0 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; Hardware stack levels required when called:   10
  4701 ;; This function calls:
  4702 ;;		_LCD_Reset
  4703 ;;		_TFT_GreenTab_Initialize
  4704 ;;		_drawtext
  4705 ;;		_fillScreen
  4706 ;;		_strcpy
  4707 ;; This function is called by:
  4708 ;;		_main
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           	psect	text16
  4713  0013D4                     __ptext16:
  4714                           	opt stack 0
  4715  0013D4                     _Initialize_LCD_Screen:
  4716                           	opt stack 20
  4717                           
  4718                           ;Main_Screen.c: 24: LCD_Reset();
  4719                           
  4720                           ;incstack = 0
  4721  0013D4  EC51  F00F         	call	_LCD_Reset	;wreg free
  4722                           
  4723                           ;Main_Screen.c: 25: TFT_GreenTab_Initialize();
  4724  0013D8  EC65  F00E         	call	_TFT_GreenTab_Initialize	;wreg free
  4725                           
  4726                           ;Main_Screen.c: 26: fillScreen(0x0000);
  4727  0013DC  0E00               	movlw	0
  4728  0013DE  6E25               	movwf	fillScreen@color+1,c
  4729  0013E0  0E00               	movlw	0
  4730  0013E2  6E24               	movwf	fillScreen@color,c
  4731  0013E4  ECF4  F00E         	call	_fillScreen	;wreg free
  4732                           
  4733                           ;Main_Screen.c: 29: txt = buffer;
  4734  0013E8  0EC9               	movlw	low _buffer
  4735  0013EA  6E50               	movwf	_txt,c
  4736  0013EC  0E00               	movlw	high _buffer
  4737  0013EE  6E51               	movwf	_txt+1,c
  4738                           
  4739                           ;Main_Screen.c: 31: strcpy(txt, "LAB 11 ");
  4740  0013F0  C050  F011         	movff	_txt,strcpy@to
  4741  0013F4  C051  F012         	movff	_txt+1,strcpy@to+1
  4742  0013F8  0EF6               	movlw	low STR_1
  4743  0013FA  6E13               	movwf	strcpy@from,c
  4744  0013FC  0EFF               	movlw	high STR_1
  4745  0013FE  6E14               	movwf	strcpy@from+1,c
  4746  001400  EC34  F00E         	call	_strcpy	;wreg free
  4747                           
  4748                           ;Main_Screen.c: 32: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  4749  001404  0E02               	movlw	2
  4750  001406  6E39               	movwf	drawtext@y,c
  4751  001408  C050  F03A         	movff	_txt,drawtext@_text
  4752  00140C  C051  F03B         	movff	_txt+1,drawtext@_text+1
  4753  001410  0EFF               	movlw	255
  4754  001412  6E3D               	movwf	drawtext@color+1,c
  4755  001414  683C               	setf	drawtext@color,c
  4756  001416  0E00               	movlw	0
  4757  001418  6E3F               	movwf	drawtext@bg+1,c
  4758  00141A  0E00               	movlw	0
  4759  00141C  6E3E               	movwf	drawtext@bg,c
  4760  00141E  0E01               	movlw	1
  4761  001420  6E40               	movwf	drawtext@size,c
  4762  001422  0E32               	movlw	50
  4763  001424  EC60  F006         	call	_drawtext
  4764                           
  4765                           ;Main_Screen.c: 34: if (1 == 0)
  4766  001428  D005               	goto	l5947
  4767                           
  4768                           ;Main_Screen.c: 35: {
  4769                           ;Main_Screen.c: 36: Timing_Txt[0] = 'S';
  4770  00142A  0E53               	movlw	83
  4771  00142C  0100               	movlb	0	; () banked
  4772  00142E  6FBF               	movwf	_Timing_Txt& (0+255),b
  4773                           
  4774                           ;Main_Screen.c: 37: Timing_Txt[1] = 'P';
  4775  001430  0E50               	movlw	80
  4776  001432  D004               	goto	L1
  4777  001434                     l5947:
  4778                           
  4779                           ;Main_Screen.c: 39: else
  4780                           ;Main_Screen.c: 40: {
  4781                           ;Main_Screen.c: 41: Timing_Txt[0] = 'F';
  4782  001434  0E46               	movlw	70
  4783  001436  0100               	movlb	0	; () banked
  4784  001438  6FBF               	movwf	_Timing_Txt& (0+255),b
  4785                           
  4786                           ;Main_Screen.c: 42: Timing_Txt[1] = 'A';
  4787  00143A  0E41               	movlw	65
  4788  00143C                     L1:
  4789  00143C  0100               	movlb	0	; () banked
  4790  00143E  6FC0               	movwf	(_Timing_Txt+1)& (0+255),b
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;Main_Screen.c: 43: }
  4794                           ;Main_Screen.c: 44: Timing_Txt[2] = 24/10 + '0';
  4795  001440  0E32               	movlw	50
  4796  001442  0100               	movlb	0	; () banked
  4797  001444  6FC1               	movwf	(_Timing_Txt+2)& (0+255),b
  4798                           
  4799                           ;Main_Screen.c: 45: Timing_Txt[3] = 24%10 + '0';
  4800  001446  0E34               	movlw	52
  4801  001448  0100               	movlb	0	; () banked
  4802  00144A  6FC2               	movwf	(_Timing_Txt+3)& (0+255),b
  4803                           
  4804                           ;Main_Screen.c: 46: Timing_Txt[5] = 3%10 + '0';
  4805  00144C  0E33               	movlw	51
  4806  00144E  0100               	movlb	0	; () banked
  4807  001450  6FC4               	movwf	(_Timing_Txt+5)& (0+255),b
  4808                           
  4809                           ;Main_Screen.c: 47: Timing_Txt[7] = 13/10 + '0';
  4810  001452  0E31               	movlw	49
  4811  001454  0100               	movlb	0	; () banked
  4812  001456  6FC6               	movwf	(_Timing_Txt+7)& (0+255),b
  4813                           
  4814                           ;Main_Screen.c: 48: Timing_Txt[8] = 13%10 + '0';
  4815  001458  0E33               	movlw	51
  4816  00145A  0100               	movlb	0	; () banked
  4817  00145C  6FC7               	movwf	(_Timing_Txt+8)& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;Main_Screen.c: 49: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  4821  00145E  0E96               	movlw	150
  4822  001460  6E39               	movwf	drawtext@y,c
  4823  001462  0EBF               	movlw	low _Timing_Txt
  4824  001464  6E3A               	movwf	drawtext@_text,c
  4825  001466  0E00               	movlw	high _Timing_Txt
  4826  001468  6E3B               	movwf	drawtext@_text+1,c
  4827  00146A  0EFF               	movlw	255
  4828  00146C  6E3D               	movwf	drawtext@color+1,c
  4829  00146E  683C               	setf	drawtext@color,c
  4830  001470  0E00               	movlw	0
  4831  001472  6E3F               	movwf	drawtext@bg+1,c
  4832  001474  0E00               	movlw	0
  4833  001476  6E3E               	movwf	drawtext@bg,c
  4834  001478  0E01               	movlw	1
  4835  00147A  6E40               	movwf	drawtext@size,c
  4836  00147C  0E01               	movlw	1
  4837  00147E  EC60  F006         	call	_drawtext
  4838  001482  0012               	return		;funcret
  4839  001484                     __end_of_Initialize_LCD_Screen:
  4840                           	opt stack 0
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           intcon2	equ	0xFF1
  4848                           postinc0	equ	0xFEE
  4849                           wreg	equ	0xFE8
  4850                           postdec1	equ	0xFE5
  4851                           fsr1l	equ	0xFE1
  4852                           postinc2	equ	0xFDE
  4853                           postdec2	equ	0xFDD
  4854                           fsr2h	equ	0xFDA
  4855                           fsr2l	equ	0xFD9
  4856                           status	equ	0xFD8
  4857                           
  4858 ;; *************** function _strcpy *****************
  4859 ;; Defined at:
  4860 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  to              2   16[COMRAM] PTR unsigned char 
  4863 ;;		 -> NULL(0), buffer(31), 
  4864 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4865 ;;		 -> STR_1(8), 
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4868 ;;		 -> NULL(0), buffer(31), 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  2   16[COMRAM] PTR unsigned char 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        6 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    3
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		_Initialize_LCD_Screen
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text17
  4893  001C68                     __ptext17:
  4894                           	opt stack 0
  4895  001C68                     _strcpy:
  4896                           	opt stack 26
  4897                           
  4898                           ;incstack = 0
  4899  001C68  C011  F015         	movff	strcpy@to,strcpy@cp
  4900  001C6C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4901  001C70  D005               	goto	l5605
  4902  001C72                     l5603:
  4903  001C72  4A15               	infsnz	strcpy@cp,f,c
  4904  001C74  2A16               	incf	strcpy@cp+1,f,c
  4905  001C76  4A13               	infsnz	strcpy@from,f,c
  4906  001C78  2A14               	incf	strcpy@from+1,f,c
  4907  001C7A  D000               	goto	l5605
  4908  001C7C                     l5605:
  4909  001C7C  C013  FFF6         	movff	strcpy@from,tblptrl
  4910  001C80  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4911  001C84                     	if	0	;tblptru may be non-zero
  4912  001C84                     	endif
  4913  001C84                     	if	0	;tblptru may be non-zero
  4914  001C84                     	endif
  4915  001C84  C015  FFD9         	movff	strcpy@cp,fsr2l
  4916  001C88  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4917  001C8C  0008               	tblrd		*
  4918  001C8E  CFF5 FFDF          	movff	tablat,indf2
  4919  001C92  50DF               	movf	indf2,w,c
  4920  001C94  A4D8               	btfss	status,2,c
  4921  001C96  D7ED               	goto	l5603
  4922                           
  4923                           ;	Return value of _strcpy is never used
  4924  001C98  0012               	return		;funcret
  4925  001C9A                     __end_of_strcpy:
  4926                           	opt stack 0
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           prodh	equ	0xFF4
  4932                           prodl	equ	0xFF3
  4933                           intcon2	equ	0xFF1
  4934                           postinc0	equ	0xFEE
  4935                           wreg	equ	0xFE8
  4936                           postdec1	equ	0xFE5
  4937                           fsr1l	equ	0xFE1
  4938                           indf2	equ	0xFDF
  4939                           postinc2	equ	0xFDE
  4940                           postdec2	equ	0xFDD
  4941                           fsr2h	equ	0xFDA
  4942                           fsr2l	equ	0xFD9
  4943                           status	equ	0xFD8
  4944                           
  4945 ;; *************** function _fillScreen *****************
  4946 ;; Defined at:
  4947 ;;		line 566 in file "ST7735_TFT.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  color           2   35[COMRAM] unsigned int 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;		None               void
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4961 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;Total ram usage:        2 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    7
  4968 ;; This function calls:
  4969 ;;		_fillRectangle
  4970 ;; This function is called by:
  4971 ;;		_Initialize_LCD_Screen
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text18
  4976  001DE8                     __ptext18:
  4977                           	opt stack 0
  4978  001DE8                     _fillScreen:
  4979                           	opt stack 22
  4980                           
  4981                           ;ST7735_TFT.c: 568: fillRectangle(0, 0, 128, 160, color);
  4982                           
  4983                           ;incstack = 0
  4984  001DE8  0E00               	movlw	0
  4985  001DEA  6E18               	movwf	fillRectangle@y,c
  4986  001DEC  0E80               	movlw	128
  4987  001DEE  6E19               	movwf	fillRectangle@w,c
  4988  001DF0  0EA0               	movlw	160
  4989  001DF2  6E1A               	movwf	fillRectangle@h,c
  4990  001DF4  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4991  001DF8  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4992  001DFC  0E00               	movlw	0
  4993  001DFE  ECBE  F008         	call	_fillRectangle
  4994  001E02  0012               	return		;funcret
  4995  001E04                     __end_of_fillScreen:
  4996                           	opt stack 0
  4997                           tblptru	equ	0xFF8
  4998                           tblptrh	equ	0xFF7
  4999                           tblptrl	equ	0xFF6
  5000                           tablat	equ	0xFF5
  5001                           prodh	equ	0xFF4
  5002                           prodl	equ	0xFF3
  5003                           intcon2	equ	0xFF1
  5004                           postinc0	equ	0xFEE
  5005                           wreg	equ	0xFE8
  5006                           postdec1	equ	0xFE5
  5007                           fsr1l	equ	0xFE1
  5008                           indf2	equ	0xFDF
  5009                           postinc2	equ	0xFDE
  5010                           postdec2	equ	0xFDD
  5011                           fsr2h	equ	0xFDA
  5012                           fsr2l	equ	0xFD9
  5013                           status	equ	0xFD8
  5014                           
  5015 ;; *************** function _fillRectangle *****************
  5016 ;; Defined at:
  5017 ;;		line 450 in file "ST7735_TFT.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  x               1    wreg     unsigned char 
  5020 ;;  y               1   23[COMRAM] unsigned char 
  5021 ;;  w               1   24[COMRAM] unsigned char 
  5022 ;;  h               1   25[COMRAM] unsigned char 
  5023 ;;  color           2   26[COMRAM] unsigned int 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  x               1   34[COMRAM] unsigned char 
  5026 ;;  lo              1   33[COMRAM] unsigned char 
  5027 ;;  hi              1   32[COMRAM] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5037 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;Total ram usage:       12 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    6
  5044 ;; This function calls:
  5045 ;;		_setAddrWindow
  5046 ;;		_spiwrite
  5047 ;; This function is called by:
  5048 ;;		_fillScreen
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           	psect	text19
  5053  00117C                     __ptext19:
  5054                           	opt stack 0
  5055  00117C                     _fillRectangle:
  5056                           	opt stack 22
  5057                           
  5058                           ;incstack = 0
  5059                           ;fillRectangle@x stored from wreg
  5060  00117C  6E23               	movwf	fillRectangle@x,c
  5061                           
  5062                           ;ST7735_TFT.c: 452: unsigned char hi, lo;
  5063                           ;ST7735_TFT.c: 453: if((x >= 128) || (y >= 160))
  5064  00117E  0E80               	movlw	128
  5065  001180  6023               	cpfslt	fillRectangle@x,c
  5066  001182  D069               	goto	l370
  5067  001184  0E9F               	movlw	159
  5068  001186  6418               	cpfsgt	fillRectangle@y,c
  5069  001188  D001               	goto	l5463
  5070                           
  5071                           ;ST7735_TFT.c: 454: return;
  5072  00118A  D065               	goto	l370
  5073  00118C                     l5463:
  5074                           
  5075                           ;ST7735_TFT.c: 455: if((x + w - 1) >= 128)
  5076  00118C  0EFF               	movlw	255
  5077  00118E  6E1D               	movwf	??_fillRectangle& (0+255),c
  5078  001190  0EFF               	movlw	255
  5079  001192  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5080  001194  5019               	movf	fillRectangle@w,w,c
  5081  001196  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5082  00119A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5083  00119C  261F               	addwf	??_fillRectangle+2,f,c
  5084  00119E  0E00               	movlw	0
  5085  0011A0  2220               	addwfc	??_fillRectangle+3,f,c
  5086  0011A2  501D               	movf	??_fillRectangle,w,c
  5087  0011A4  261F               	addwf	??_fillRectangle+2,f,c
  5088  0011A6  501E               	movf	??_fillRectangle+1,w,c
  5089  0011A8  2220               	addwfc	??_fillRectangle+3,f,c
  5090  0011AA  BE20               	btfsc	??_fillRectangle+3,7,c
  5091  0011AC  D00A               	goto	l371
  5092  0011AE  5020               	movf	??_fillRectangle+3,w,c
  5093  0011B0  E104               	bnz	u4000
  5094  0011B2  0E80               	movlw	128
  5095  0011B4  5C1F               	subwf	??_fillRectangle+2,w,c
  5096  0011B6  A0D8               	btfss	status,0,c
  5097  0011B8  D004               	goto	l371
  5098  0011BA                     u4000:
  5099                           
  5100                           ;ST7735_TFT.c: 456: w = 128 - x;
  5101  0011BA  5023               	movf	fillRectangle@x,w,c
  5102  0011BC  0800               	sublw	0
  5103  0011BE  0F80               	addlw	128
  5104  0011C0  6E19               	movwf	fillRectangle@w,c
  5105  0011C2                     l371:
  5106                           
  5107                           ;ST7735_TFT.c: 457: if((y + h - 1) >= 160)
  5108  0011C2  0EFF               	movlw	255
  5109  0011C4  6E1D               	movwf	??_fillRectangle& (0+255),c
  5110  0011C6  0EFF               	movlw	255
  5111  0011C8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5112  0011CA  501A               	movf	fillRectangle@h,w,c
  5113  0011CC  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5114  0011D0  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5115  0011D2  261F               	addwf	??_fillRectangle+2,f,c
  5116  0011D4  0E00               	movlw	0
  5117  0011D6  2220               	addwfc	??_fillRectangle+3,f,c
  5118  0011D8  501D               	movf	??_fillRectangle,w,c
  5119  0011DA  261F               	addwf	??_fillRectangle+2,f,c
  5120  0011DC  501E               	movf	??_fillRectangle+1,w,c
  5121  0011DE  2220               	addwfc	??_fillRectangle+3,f,c
  5122  0011E0  BE20               	btfsc	??_fillRectangle+3,7,c
  5123  0011E2  D00B               	goto	l5469
  5124  0011E4  5020               	movf	??_fillRectangle+3,w,c
  5125  0011E6  E104               	bnz	u4010
  5126  0011E8  0EA0               	movlw	160
  5127  0011EA  5C1F               	subwf	??_fillRectangle+2,w,c
  5128  0011EC  A0D8               	btfss	status,0,c
  5129  0011EE  D005               	goto	l5469
  5130  0011F0                     u4010:
  5131                           
  5132                           ;ST7735_TFT.c: 458: h = 160 - y;
  5133  0011F0  5018               	movf	fillRectangle@y,w,c
  5134  0011F2  0800               	sublw	0
  5135  0011F4  0FA0               	addlw	160
  5136  0011F6  6E1A               	movwf	fillRectangle@h,c
  5137  0011F8  D000               	goto	l5469
  5138  0011FA                     l5469:
  5139                           
  5140                           ;ST7735_TFT.c: 459: setAddrWindow(x, y, x+w-1, y+h-1);
  5141  0011FA  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5142  0011FE  5023               	movf	fillRectangle@x,w,c
  5143  001200  2419               	addwf	fillRectangle@w,w,c
  5144  001202  6E1D               	movwf	??_fillRectangle& (0+255),c
  5145  001204  041D               	decf	??_fillRectangle,w,c
  5146  001206  6E15               	movwf	setAddrWindow@x1,c
  5147  001208  5018               	movf	fillRectangle@y,w,c
  5148  00120A  241A               	addwf	fillRectangle@h,w,c
  5149  00120C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5150  00120E  041E               	decf	??_fillRectangle+1,w,c
  5151  001210  6E16               	movwf	setAddrWindow@y1,c
  5152  001212  5023               	movf	fillRectangle@x,w,c
  5153  001214  ECBC  F00C         	call	_setAddrWindow
  5154                           
  5155                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  5156  001218  501C               	movf	fillRectangle@color+1,w,c
  5157  00121A  6E21               	movwf	fillRectangle@hi,c
  5158  00121C  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5159                           
  5160                           ;ST7735_TFT.c: 461: PORTDbits.RD7 = 1;
  5161  001220  8E83               	bsf	3971,7,c	;volatile
  5162                           
  5163                           ;ST7735_TFT.c: 462: PORTCbits.RC4 = 0;
  5164  001222  9882               	bcf	3970,4,c	;volatile
  5165                           
  5166                           ;ST7735_TFT.c: 464: for(y=h; y>0; y--) {
  5167  001224  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5168  001228                     l5481:
  5169  001228  5018               	movf	fillRectangle@y,w,c
  5170  00122A  B4D8               	btfsc	status,2,c
  5171  00122C  D013               	goto	l374
  5172  00122E  D001               	goto	l373
  5173  001230  D011               	goto	l374
  5174  001232                     l373:
  5175                           
  5176                           ;ST7735_TFT.c: 465: for(x = w; x > 0; x--) {
  5177  001232  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5178  001236                     l5485:
  5179  001236  5023               	movf	fillRectangle@x,w,c
  5180  001238  B4D8               	btfsc	status,2,c
  5181  00123A  D00A               	goto	l5495
  5182  00123C  D001               	goto	l5489
  5183  00123E  D008               	goto	l5495
  5184  001240                     l5489:
  5185                           
  5186                           ;ST7735_TFT.c: 466: spiwrite(hi);
  5187  001240  5021               	movf	fillRectangle@hi,w,c
  5188  001242  EC3D  F00F         	call	_spiwrite
  5189                           
  5190                           ;ST7735_TFT.c: 467: spiwrite(lo);
  5191  001246  5022               	movf	fillRectangle@lo,w,c
  5192  001248  EC3D  F00F         	call	_spiwrite
  5193  00124C  0623               	decf	fillRectangle@x,f,c
  5194  00124E  D7F3               	goto	l5485
  5195  001250                     l5495:
  5196  001250  0618               	decf	fillRectangle@y,f,c
  5197  001252  D7EA               	goto	l5481
  5198  001254                     l374:
  5199                           
  5200                           ;ST7735_TFT.c: 468: }
  5201                           ;ST7735_TFT.c: 469: }
  5202                           ;ST7735_TFT.c: 470: PORTCbits.RC4 = 1;
  5203  001254  8882               	bsf	3970,4,c	;volatile
  5204  001256                     l370:
  5205  001256  0012               	return		;funcret
  5206  001258                     __end_of_fillRectangle:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           intcon2	equ	0xFF1
  5215                           postinc0	equ	0xFEE
  5216                           wreg	equ	0xFE8
  5217                           postdec1	equ	0xFE5
  5218                           fsr1l	equ	0xFE1
  5219                           indf2	equ	0xFDF
  5220                           postinc2	equ	0xFDE
  5221                           postdec2	equ	0xFDD
  5222                           fsr2h	equ	0xFDA
  5223                           fsr2l	equ	0xFD9
  5224                           status	equ	0xFD8
  5225                           
  5226 ;; *************** function _drawtext *****************
  5227 ;; Defined at:
  5228 ;;		line 421 in file "ST7735_TFT.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  x               1    wreg     unsigned char 
  5231 ;;  y               1   56[COMRAM] unsigned char 
  5232 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5233 ;;		 -> NULL(0), txt1(84), Timing_Txt(10), buffer(31), 
  5234 ;;  color           2   59[COMRAM] unsigned int 
  5235 ;;  bg              2   61[COMRAM] unsigned int 
  5236 ;;  size            1   63[COMRAM] unsigned char 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;  x               1    0[BANK0 ] unsigned char 
  5239 ;;  i               2    3[BANK0 ] unsigned int 
  5240 ;;  textsize        2    1[BANK0 ] unsigned int 
  5241 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5242 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;		None               void
  5245 ;; Registers used:
  5246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5252 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;Total ram usage:       17 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    9
  5259 ;; This function calls:
  5260 ;;		_drawChar
  5261 ;;		_strlen
  5262 ;; This function is called by:
  5263 ;;		_Initialize_LCD_Screen
  5264 ;;		_main
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           	psect	text20
  5269  000CC0                     __ptext20:
  5270                           	opt stack 0
  5271  000CC0                     _drawtext:
  5272                           	opt stack 21
  5273                           
  5274                           ;incstack = 0
  5275                           ;drawtext@x stored from wreg
  5276  000CC0  0100               	movlb	0	; () banked
  5277  000CC2  6FE8               	movwf	drawtext@x& (0+255),b
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;ST7735_TFT.c: 423: unsigned char cursor_x, cursor_y;
  5281                           ;ST7735_TFT.c: 424: unsigned int textsize, i;
  5282                           ;ST7735_TFT.c: 425: cursor_x = x, cursor_y = y;
  5283  000CC4  C0E8  F0EE         	movff	drawtext@x,drawtext@cursor_x
  5284                           
  5285                           ; BSR set to: 0
  5286  000CC8  C039  F0ED         	movff	drawtext@y,drawtext@cursor_y
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;ST7735_TFT.c: 426: textsize = strlen(_text);
  5290  000CCC  C03A  F011         	movff	drawtext@_text,strlen@s
  5291  000CD0  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5292  000CD4  ECBB  F00D         	call	_strlen	;wreg free
  5293  000CD8  C011  F0E9         	movff	?_strlen,drawtext@textsize
  5294  000CDC  C012  F0EA         	movff	?_strlen+1,drawtext@textsize+1
  5295                           
  5296                           ;ST7735_TFT.c: 427: for(i = 0; i < textsize; i++){
  5297  000CE0  0E00               	movlw	0
  5298  000CE2  0100               	movlb	0	; () banked
  5299  000CE4  6FEC               	movwf	(drawtext@i+1)& (0+255),b
  5300  000CE6  0E00               	movlw	0
  5301  000CE8  6FEB               	movwf	drawtext@i& (0+255),b
  5302  000CEA  D064               	goto	l5641
  5303  000CEC                     l5615:
  5304                           
  5305                           ; BSR set to: 0
  5306                           ;ST7735_TFT.c: 428: if(wrap && ((cursor_x + size * 5) > 128)){
  5307  000CEC  506F               	movf	_wrap,w,c
  5308  000CEE  B4D8               	btfsc	status,2,c
  5309  000CF0  D034               	goto	l5631
  5310                           
  5311                           ; BSR set to: 0
  5312  000CF2  5040               	movf	drawtext@size,w,c
  5313  000CF4  0D05               	mullw	5
  5314  000CF6  0100               	movlb	0	; () banked
  5315  000CF8  51EE               	movf	drawtext@cursor_x& (0+255),w,b
  5316  000CFA  6E41               	movwf	??_drawtext& (0+255),c
  5317  000CFC  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5318  000CFE  50F3               	movf	prodl,w,c
  5319  000D00  2641               	addwf	??_drawtext,f,c
  5320  000D02  50F4               	movf	prodh,w,c
  5321  000D04  2242               	addwfc	??_drawtext+1,f,c
  5322  000D06  BE42               	btfsc	??_drawtext+1,7,c
  5323  000D08  D028               	goto	l5631
  5324  000D0A  5042               	movf	??_drawtext+1,w,c
  5325  000D0C  E104               	bnz	u4130
  5326  000D0E  0E81               	movlw	129
  5327  000D10  5C41               	subwf	??_drawtext,w,c
  5328  000D12  A0D8               	btfss	status,0,c
  5329  000D14  D022               	goto	l5631
  5330  000D16                     u4130:
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;ST7735_TFT.c: 429: cursor_x = 0;
  5334  000D16  0E00               	movlw	0
  5335  000D18  0100               	movlb	0	; () banked
  5336  000D1A  6FEE               	movwf	drawtext@cursor_x& (0+255),b
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;ST7735_TFT.c: 430: cursor_y = cursor_y + size * 7 + 3 ;
  5340  000D1C  5040               	movf	drawtext@size,w,c
  5341  000D1E  0D07               	mullw	7
  5342  000D20  50F3               	movf	prodl,w,c
  5343  000D22  0100               	movlb	0	; () banked
  5344  000D24  25ED               	addwf	drawtext@cursor_y& (0+255),w,b
  5345  000D26  0F03               	addlw	3
  5346  000D28  0100               	movlb	0	; () banked
  5347  000D2A  6FED               	movwf	drawtext@cursor_y& (0+255),b
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;ST7735_TFT.c: 431: if(cursor_y > 160) cursor_y = 160;
  5351  000D2C  0EA0               	movlw	160
  5352  000D2E  0100               	movlb	0	; () banked
  5353  000D30  65ED               	cpfsgt	drawtext@cursor_y& (0+255),b
  5354  000D32  D004               	goto	l5627
  5355                           
  5356                           ; BSR set to: 0
  5357  000D34  0EA0               	movlw	160
  5358  000D36  0100               	movlb	0	; () banked
  5359  000D38  6FED               	movwf	drawtext@cursor_y& (0+255),b
  5360  000D3A  D000               	goto	l5627
  5361  000D3C                     l5627:
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;ST7735_TFT.c: 432: if(_text[i] == 0x20) goto _skip; }
  5365  000D3C  0100               	movlb	0	; () banked
  5366  000D3E  51EB               	movf	drawtext@i& (0+255),w,b
  5367  000D40  243A               	addwf	drawtext@_text,w,c
  5368  000D42  6ED9               	movwf	fsr2l,c
  5369  000D44  0100               	movlb	0	; () banked
  5370  000D46  51EC               	movf	(drawtext@i+1)& (0+255),w,b
  5371  000D48  203B               	addwfc	drawtext@_text+1,w,c
  5372  000D4A  6EDA               	movwf	fsr2h,c
  5373  000D4C  0E20               	movlw	32
  5374  000D4E  18DE               	xorwf	postinc2,w,c
  5375  000D50  B4D8               	btfsc	status,2,c
  5376  000D52  D02C               	goto	l5639
  5377  000D54  D002               	goto	l5631
  5378                           
  5379                           ; BSR set to: 0
  5380  000D56  D02A               	goto	l5639
  5381                           
  5382                           ; BSR set to: 0
  5383  000D58  D000               	goto	l5631
  5384  000D5A                     l5631:
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;ST7735_TFT.c: 433: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5388  000D5A  C0ED  F02E         	movff	drawtext@cursor_y,drawChar@y
  5389  000D5E  0100               	movlb	0	; () banked
  5390  000D60  51EB               	movf	drawtext@i& (0+255),w,b
  5391  000D62  243A               	addwf	drawtext@_text,w,c
  5392  000D64  6ED9               	movwf	fsr2l,c
  5393  000D66  0100               	movlb	0	; () banked
  5394  000D68  51EC               	movf	(drawtext@i+1)& (0+255),w,b
  5395  000D6A  203B               	addwfc	drawtext@_text+1,w,c
  5396  000D6C  6EDA               	movwf	fsr2h,c
  5397  000D6E  50DF               	movf	indf2,w,c
  5398  000D70  6E2F               	movwf	drawChar@c,c
  5399  000D72  C03C  F030         	movff	drawtext@color,drawChar@color
  5400  000D76  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5401  000D7A  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5402  000D7E  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5403  000D82  C040  F034         	movff	drawtext@size,drawChar@size
  5404  000D86  0100               	movlb	0	; () banked
  5405  000D88  51EE               	movf	drawtext@cursor_x& (0+255),w,b
  5406  000D8A  EC91  F004         	call	_drawChar
  5407                           
  5408                           ;ST7735_TFT.c: 434: cursor_x = cursor_x + size * 6;
  5409  000D8E  5040               	movf	drawtext@size,w,c
  5410  000D90  0D06               	mullw	6
  5411  000D92  50F3               	movf	prodl,w,c
  5412  000D94  0100               	movlb	0	; () banked
  5413  000D96  25EE               	addwf	drawtext@cursor_x& (0+255),w,b
  5414  000D98  0100               	movlb	0	; () banked
  5415  000D9A  6FEE               	movwf	drawtext@cursor_x& (0+255),b
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;ST7735_TFT.c: 435: if(cursor_x > 128) cursor_x = 128;
  5419  000D9C  0E80               	movlw	128
  5420  000D9E  0100               	movlb	0	; () banked
  5421  000DA0  65EE               	cpfsgt	drawtext@cursor_x& (0+255),b
  5422  000DA2  D004               	goto	l5639
  5423                           
  5424                           ; BSR set to: 0
  5425  000DA4  0E80               	movlw	128
  5426  000DA6  0100               	movlb	0	; () banked
  5427  000DA8  6FEE               	movwf	drawtext@cursor_x& (0+255),b
  5428                           
  5429                           ; BSR set to: 0
  5430  000DAA  D000               	goto	l5639
  5431  000DAC                     l5639:
  5432                           
  5433                           ; BSR set to: 0
  5434  000DAC  0100               	movlb	0	; () banked
  5435  000DAE  4BEB               	infsnz	drawtext@i& (0+255),f,b
  5436  000DB0  2BEC               	incf	(drawtext@i+1)& (0+255),f,b
  5437  000DB2  D000               	goto	l5641
  5438  000DB4                     l5641:
  5439                           
  5440                           ; BSR set to: 0
  5441  000DB4  0100               	movlb	0	; () banked
  5442  000DB6  51E9               	movf	drawtext@textsize& (0+255),w,b
  5443  000DB8  0100               	movlb	0	; () banked
  5444  000DBA  5DEB               	subwf	drawtext@i& (0+255),w,b
  5445  000DBC  0100               	movlb	0	; () banked
  5446  000DBE  51EA               	movf	(drawtext@textsize+1)& (0+255),w,b
  5447  000DC0  0100               	movlb	0	; () banked
  5448  000DC2  59EC               	subwfb	(drawtext@i+1)& (0+255),w,b
  5449  000DC4  A0D8               	btfss	status,0,c
  5450  000DC6  D792               	goto	l5615
  5451                           
  5452                           ; BSR set to: 0
  5453                           
  5454                           ; BSR set to: 0
  5455  000DC8  0012               	return		;funcret
  5456  000DCA                     __end_of_drawtext:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon2	equ	0xFF1
  5465                           postinc0	equ	0xFEE
  5466                           wreg	equ	0xFE8
  5467                           postdec1	equ	0xFE5
  5468                           fsr1l	equ	0xFE1
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _strlen *****************
  5477 ;; Defined at:
  5478 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5481 ;;		 -> NULL(0), txt1(84), Timing_Txt(10), buffer(31), 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5484 ;;		 -> NULL(0), txt1(84), Timing_Txt(10), buffer(31), 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  2   16[COMRAM] unsigned int 
  5487 ;; Registers used:
  5488 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;Total ram usage:        6 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    3
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_drawtext
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text21
  5509  001B76                     __ptext21:
  5510                           	opt stack 0
  5511  001B76                     _strlen:
  5512                           	opt stack 26
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;incstack = 0
  5516  001B76  C011  F015         	movff	strlen@s,strlen@cp
  5517  001B7A  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5518  001B7E  D003               	goto	l5453
  5519  001B80                     l5451:
  5520  001B80  4A15               	infsnz	strlen@cp,f,c
  5521  001B82  2A16               	incf	strlen@cp+1,f,c
  5522  001B84  D000               	goto	l5453
  5523  001B86                     l5453:
  5524  001B86  C015  FFD9         	movff	strlen@cp,fsr2l
  5525  001B8A  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5526  001B8E  50DF               	movf	indf2,w,c
  5527  001B90  A4D8               	btfss	status,2,c
  5528  001B92  D7F6               	goto	l5451
  5529  001B94  C011  F013         	movff	strlen@s,??_strlen
  5530  001B98  C012  F014         	movff	strlen@s+1,??_strlen+1
  5531  001B9C  1E13               	comf	??_strlen,f,c
  5532  001B9E  1E14               	comf	??_strlen+1,f,c
  5533  001BA0  4A13               	infsnz	??_strlen,f,c
  5534  001BA2  2A14               	incf	??_strlen+1,f,c
  5535  001BA4  5015               	movf	strlen@cp,w,c
  5536  001BA6  2413               	addwf	??_strlen,w,c
  5537  001BA8  6E11               	movwf	?_strlen,c
  5538  001BAA  5016               	movf	strlen@cp+1,w,c
  5539  001BAC  2014               	addwfc	??_strlen+1,w,c
  5540  001BAE  6E12               	movwf	?_strlen+1,c
  5541  001BB0  D000               	goto	l1429
  5542  001BB2                     l1429:
  5543  001BB2  0012               	return		;funcret
  5544  001BB4                     __end_of_strlen:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon2	equ	0xFF1
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           postdec1	equ	0xFE5
  5556                           fsr1l	equ	0xFE1
  5557                           indf2	equ	0xFDF
  5558                           postinc2	equ	0xFDE
  5559                           postdec2	equ	0xFDD
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564 ;; *************** function _drawChar *****************
  5565 ;; Defined at:
  5566 ;;		line 394 in file "ST7735_TFT.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;  x               1    wreg     unsigned char 
  5569 ;;  y               1   45[COMRAM] unsigned char 
  5570 ;;  c               1   46[COMRAM] unsigned char 
  5571 ;;  color           2   47[COMRAM] unsigned int 
  5572 ;;  bg              2   49[COMRAM] unsigned int 
  5573 ;;  size            1   51[COMRAM] unsigned char 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  x               1   53[COMRAM] unsigned char 
  5576 ;;  line            1   52[COMRAM] unsigned char 
  5577 ;;  i               1   55[COMRAM] unsigned char 
  5578 ;;  j               1   54[COMRAM] unsigned char 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;		None               void
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5588 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;Total ram usage:       11 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    8
  5595 ;; This function calls:
  5596 ;;		___wmul
  5597 ;;		_drawPixel
  5598 ;;		_fillRect
  5599 ;; This function is called by:
  5600 ;;		_drawtext
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text22
  5605  000922                     __ptext22:
  5606                           	opt stack 0
  5607  000922                     _drawChar:
  5608                           	opt stack 21
  5609                           
  5610                           ;incstack = 0
  5611                           ;drawChar@x stored from wreg
  5612  000922  6E36               	movwf	drawChar@x,c
  5613                           
  5614                           ;ST7735_TFT.c: 396: char i, j;
  5615                           ;ST7735_TFT.c: 397: if((x >= 128) || (y >= 160))
  5616  000924  0E80               	movlw	128
  5617  000926  6036               	cpfslt	drawChar@x,c
  5618  000928  D0A6               	goto	l333
  5619  00092A  0E9F               	movlw	159
  5620  00092C  642E               	cpfsgt	drawChar@y,c
  5621  00092E  D001               	goto	l5399
  5622                           
  5623                           ;ST7735_TFT.c: 398: return;
  5624  000930  D0A2               	goto	l333
  5625  000932                     l5399:
  5626                           
  5627                           ;ST7735_TFT.c: 399: if(size < 1) size = 1;
  5628  000932  5034               	movf	drawChar@size,w,c
  5629  000934  A4D8               	btfss	status,2,c
  5630  000936  D003               	goto	l5403
  5631  000938  0E01               	movlw	1
  5632  00093A  6E34               	movwf	drawChar@size,c
  5633  00093C  D000               	goto	l5403
  5634  00093E                     l5403:
  5635                           
  5636                           ;ST7735_TFT.c: 400: if((c < ' ') || (c > '~'))
  5637  00093E  0E1F               	movlw	31
  5638  000940  642F               	cpfsgt	drawChar@c,c
  5639  000942  D004               	goto	l5407
  5640  000944  0E7E               	movlw	126
  5641  000946  642F               	cpfsgt	drawChar@c,c
  5642  000948  D003               	goto	l335
  5643  00094A  D000               	goto	l5407
  5644  00094C                     l5407:
  5645                           
  5646                           ;ST7735_TFT.c: 401: c = '?';
  5647  00094C  0E3F               	movlw	63
  5648  00094E  6E2F               	movwf	drawChar@c,c
  5649  000950                     l335:
  5650                           
  5651                           ;ST7735_TFT.c: 402: for(i=0; i<5; i++ ) {
  5652  000950  0E00               	movlw	0
  5653  000952  6E38               	movwf	drawChar@i,c
  5654  000954                     l5409:
  5655  000954  0E04               	movlw	4
  5656  000956  6438               	cpfsgt	drawChar@i,c
  5657  000958  D001               	goto	l5413
  5658  00095A  D08D               	goto	l333
  5659  00095C                     l5413:
  5660                           
  5661                           ;ST7735_TFT.c: 403: unsigned char line;
  5662                           ;ST7735_TFT.c: 404: if(c < 'S')
  5663  00095C  0E53               	movlw	83
  5664  00095E  602F               	cpfslt	drawChar@c,c
  5665  000960  D015               	goto	l5417
  5666                           
  5667                           ;ST7735_TFT.c: 405: line = font[(c - 32)*5 + i];
  5668  000962  0EE0               	movlw	224
  5669  000964  242F               	addwf	drawChar@c,w,c
  5670  000966  6E11               	movwf	___wmul@multiplier,c
  5671  000968  6A12               	clrf	___wmul@multiplier+1,c
  5672  00096A  0EFF               	movlw	255
  5673  00096C  2212               	addwfc	___wmul@multiplier+1,f,c
  5674  00096E  0E00               	movlw	0
  5675  000970  6E14               	movwf	___wmul@multiplicand+1,c
  5676  000972  0E05               	movlw	5
  5677  000974  6E13               	movwf	___wmul@multiplicand,c
  5678  000976  EC7A  F00E         	call	___wmul	;wreg free
  5679  00097A  5038               	movf	drawChar@i,w,c
  5680  00097C  2611               	addwf	?___wmul,f,c
  5681  00097E  0E00               	movlw	0
  5682  000980  2212               	addwfc	?___wmul+1,f,c
  5683  000982  0E73               	movlw	low _font
  5684  000984  2411               	addwf	?___wmul,w,c
  5685  000986  6EF6               	movwf	tblptrl,c
  5686  000988  0EFD               	movlw	high _font
  5687  00098A  D014               	goto	L2
  5688  00098C                     l5417:
  5689                           
  5690                           ;ST7735_TFT.c: 406: else
  5691                           ;ST7735_TFT.c: 407: line = font2[(c - 'S')*5 + i];
  5692  00098C  0EAD               	movlw	173
  5693  00098E  242F               	addwf	drawChar@c,w,c
  5694  000990  6E11               	movwf	___wmul@multiplier,c
  5695  000992  6A12               	clrf	___wmul@multiplier+1,c
  5696  000994  0EFF               	movlw	255
  5697  000996  2212               	addwfc	___wmul@multiplier+1,f,c
  5698  000998  0E00               	movlw	0
  5699  00099A  6E14               	movwf	___wmul@multiplicand+1,c
  5700  00099C  0E05               	movlw	5
  5701  00099E  6E13               	movwf	___wmul@multiplicand,c
  5702  0009A0  EC7A  F00E         	call	___wmul	;wreg free
  5703  0009A4  5038               	movf	drawChar@i,w,c
  5704  0009A6  2611               	addwf	?___wmul,f,c
  5705  0009A8  0E00               	movlw	0
  5706  0009AA  2212               	addwfc	?___wmul+1,f,c
  5707  0009AC  0E72               	movlw	low _font2
  5708  0009AE  2411               	addwf	?___wmul,w,c
  5709  0009B0  6EF6               	movwf	tblptrl,c
  5710  0009B2  0EFE               	movlw	high _font2
  5711  0009B4                     L2:
  5712  0009B4  2012               	addwfc	?___wmul+1,w,c
  5713  0009B6  6EF7               	movwf	tblptrh,c
  5714  0009B8                     	if	0	;There are less than 3 active tblptr bytes
  5715  0009B8                     	endif
  5716  0009B8  0008               	tblrd		*
  5717  0009BA  CFF5 F035          	movff	tablat,drawChar@line
  5718  0009BE  D000               	goto	l5419
  5719  0009C0                     l5419:
  5720                           
  5721                           ;ST7735_TFT.c: 408: for(j=0; j<7; j++, line >>= 1) {
  5722  0009C0  0E00               	movlw	0
  5723  0009C2  6E37               	movwf	drawChar@j,c
  5724  0009C4                     l5421:
  5725  0009C4  0E06               	movlw	6
  5726  0009C6  6437               	cpfsgt	drawChar@j,c
  5727  0009C8  D001               	goto	l342
  5728  0009CA  D053               	goto	l5445
  5729  0009CC                     l342:
  5730                           
  5731                           ;ST7735_TFT.c: 409: if(line & 0x01) {
  5732  0009CC  A035               	btfss	drawChar@line,0,c
  5733  0009CE  D023               	goto	l5431
  5734                           
  5735                           ;ST7735_TFT.c: 410: if(size == 1) drawPixel(x+i, y+j, color);
  5736  0009D0  0434               	decf	drawChar@size,w,c
  5737  0009D2  A4D8               	btfss	status,2,c
  5738  0009D4  D00C               	goto	l5429
  5739  0009D6  502E               	movf	drawChar@y,w,c
  5740  0009D8  2437               	addwf	drawChar@j,w,c
  5741  0009DA  6E18               	movwf	drawPixel@y,c
  5742  0009DC  C030  F019         	movff	drawChar@color,drawPixel@color
  5743  0009E0  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5744  0009E4  5036               	movf	drawChar@x,w,c
  5745  0009E6  2438               	addwf	drawChar@i,w,c
  5746  0009E8  EC4D  F00E         	call	_drawPixel
  5747  0009EC  D03E               	goto	l5439
  5748  0009EE                     l5429:
  5749                           
  5750                           ;ST7735_TFT.c: 411: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5751  0009EE  5037               	movf	drawChar@j,w,c
  5752  0009F0  0234               	mulwf	drawChar@size,c
  5753  0009F2  50F3               	movf	prodl,w,c
  5754  0009F4  242E               	addwf	drawChar@y,w,c
  5755  0009F6  6E23               	movwf	fillRect@y,c
  5756  0009F8  C034  F024         	movff	drawChar@size,fillRect@w
  5757  0009FC  C034  F025         	movff	drawChar@size,fillRect@h
  5758  000A00  C030  F026         	movff	drawChar@color,fillRect@color
  5759  000A04  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5760  000A08  5038               	movf	drawChar@i,w,c
  5761  000A0A  0234               	mulwf	drawChar@size,c
  5762  000A0C  50F3               	movf	prodl,w,c
  5763  000A0E  2436               	addwf	drawChar@x,w,c
  5764  000A10  EC2E  F00D         	call	_fillRect
  5765                           
  5766                           ;ST7735_TFT.c: 412: }
  5767  000A14  D02A               	goto	l5439
  5768  000A16                     l5431:
  5769                           
  5770                           ;ST7735_TFT.c: 413: else if(bg != color) {
  5771  000A16  5030               	movf	drawChar@color,w,c
  5772  000A18  1832               	xorwf	drawChar@bg,w,c
  5773  000A1A  E104               	bnz	u3930
  5774  000A1C  5031               	movf	drawChar@color+1,w,c
  5775  000A1E  1833               	xorwf	drawChar@bg+1,w,c
  5776  000A20  B4D8               	btfsc	status,2,c
  5777  000A22  D023               	goto	l5439
  5778  000A24                     u3930:
  5779                           
  5780                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, bg);
  5781  000A24  0434               	decf	drawChar@size,w,c
  5782  000A26  A4D8               	btfss	status,2,c
  5783  000A28  D00C               	goto	l5437
  5784  000A2A  502E               	movf	drawChar@y,w,c
  5785  000A2C  2437               	addwf	drawChar@j,w,c
  5786  000A2E  6E18               	movwf	drawPixel@y,c
  5787  000A30  C032  F019         	movff	drawChar@bg,drawPixel@color
  5788  000A34  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5789  000A38  5036               	movf	drawChar@x,w,c
  5790  000A3A  2438               	addwf	drawChar@i,w,c
  5791  000A3C  EC4D  F00E         	call	_drawPixel
  5792  000A40  D014               	goto	l5439
  5793  000A42                     l5437:
  5794                           
  5795                           ;ST7735_TFT.c: 415: else fillRect(x+i*size, y+j*size, size, size, bg);
  5796  000A42  5037               	movf	drawChar@j,w,c
  5797  000A44  0234               	mulwf	drawChar@size,c
  5798  000A46  50F3               	movf	prodl,w,c
  5799  000A48  242E               	addwf	drawChar@y,w,c
  5800  000A4A  6E23               	movwf	fillRect@y,c
  5801  000A4C  C034  F024         	movff	drawChar@size,fillRect@w
  5802  000A50  C034  F025         	movff	drawChar@size,fillRect@h
  5803  000A54  C032  F026         	movff	drawChar@bg,fillRect@color
  5804  000A58  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5805  000A5C  5038               	movf	drawChar@i,w,c
  5806  000A5E  0234               	mulwf	drawChar@size,c
  5807  000A60  50F3               	movf	prodl,w,c
  5808  000A62  2436               	addwf	drawChar@x,w,c
  5809  000A64  EC2E  F00D         	call	_fillRect
  5810  000A68  D000               	goto	l5439
  5811  000A6A                     l5439:
  5812  000A6A  2A37               	incf	drawChar@j,f,c
  5813  000A6C  90D8               	bcf	status,0,c
  5814  000A6E  3235               	rrcf	drawChar@line,f,c
  5815  000A70  D7A9               	goto	l5421
  5816  000A72                     l5445:
  5817  000A72  2A38               	incf	drawChar@i,f,c
  5818  000A74  D76F               	goto	l5409
  5819  000A76                     l333:
  5820  000A76  0012               	return		;funcret
  5821  000A78                     __end_of_drawChar:
  5822                           	opt stack 0
  5823                           tblptru	equ	0xFF8
  5824                           tblptrh	equ	0xFF7
  5825                           tblptrl	equ	0xFF6
  5826                           tablat	equ	0xFF5
  5827                           prodh	equ	0xFF4
  5828                           prodl	equ	0xFF3
  5829                           intcon2	equ	0xFF1
  5830                           postinc0	equ	0xFEE
  5831                           wreg	equ	0xFE8
  5832                           postdec1	equ	0xFE5
  5833                           fsr1l	equ	0xFE1
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function _fillRect *****************
  5842 ;; Defined at:
  5843 ;;		line 384 in file "ST7735_TFT.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  x               1    wreg     unsigned char 
  5846 ;;  y               1   34[COMRAM] unsigned char 
  5847 ;;  w               1   35[COMRAM] unsigned char 
  5848 ;;  h               1   36[COMRAM] unsigned char 
  5849 ;;  color           2   37[COMRAM] unsigned int 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  x               1   42[COMRAM] unsigned char 
  5852 ;;  i               2   43[COMRAM] int 
  5853 ;; Return value:  Size  Location     Type
  5854 ;;		None               void
  5855 ;; Registers used:
  5856 ;;		wreg, status,2, status,0, cstack
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5862 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;Total ram usage:       11 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    7
  5869 ;; This function calls:
  5870 ;;		_drawFastVLine
  5871 ;; This function is called by:
  5872 ;;		_drawChar
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text23
  5877  001A5C                     __ptext23:
  5878                           	opt stack 0
  5879  001A5C                     _fillRect:
  5880                           	opt stack 21
  5881                           
  5882                           ;incstack = 0
  5883                           ;fillRect@x stored from wreg
  5884  001A5C  6E2B               	movwf	fillRect@x,c
  5885                           
  5886                           ;ST7735_TFT.c: 386: signed int i;
  5887                           ;ST7735_TFT.c: 388: for (i = x; i < x + w; i++)
  5888  001A5E  C02B  F02C         	movff	fillRect@x,fillRect@i
  5889  001A62  6A2D               	clrf	fillRect@i+1,c
  5890  001A64  D00E               	goto	l5099
  5891  001A66                     l5095:
  5892                           
  5893                           ;ST7735_TFT.c: 389: {
  5894                           ;ST7735_TFT.c: 390: drawFastVLine(i, y, h, color);
  5895  001A66  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5896  001A6A  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5897  001A6E  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5898  001A72  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5899  001A76  502C               	movf	fillRect@i,w,c
  5900  001A78  EC8D  F00A         	call	_drawFastVLine
  5901  001A7C  4A2C               	infsnz	fillRect@i,f,c
  5902  001A7E  2A2D               	incf	fillRect@i+1,f,c
  5903  001A80  D000               	goto	l5099
  5904  001A82                     l5099:
  5905  001A82  5024               	movf	fillRect@w,w,c
  5906  001A84  C02B  F028         	movff	fillRect@x,??_fillRect
  5907  001A88  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5908  001A8A  2628               	addwf	??_fillRect,f,c
  5909  001A8C  0E00               	movlw	0
  5910  001A8E  2229               	addwfc	??_fillRect+1,f,c
  5911  001A90  5028               	movf	??_fillRect,w,c
  5912  001A92  5C2C               	subwf	fillRect@i,w,c
  5913  001A94  502D               	movf	fillRect@i+1,w,c
  5914  001A96  0A80               	xorlw	128
  5915  001A98  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5916  001A9A  5029               	movf	??_fillRect+1,w,c
  5917  001A9C  0A80               	xorlw	128
  5918  001A9E  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5919  001AA0  A0D8               	btfss	status,0,c
  5920  001AA2  D7E1               	goto	l5095
  5921  001AA4  0012               	return		;funcret
  5922  001AA6                     __end_of_fillRect:
  5923                           	opt stack 0
  5924                           tblptru	equ	0xFF8
  5925                           tblptrh	equ	0xFF7
  5926                           tblptrl	equ	0xFF6
  5927                           tablat	equ	0xFF5
  5928                           prodh	equ	0xFF4
  5929                           prodl	equ	0xFF3
  5930                           intcon2	equ	0xFF1
  5931                           postinc0	equ	0xFEE
  5932                           wreg	equ	0xFE8
  5933                           postdec1	equ	0xFE5
  5934                           fsr1l	equ	0xFE1
  5935                           indf2	equ	0xFDF
  5936                           postinc2	equ	0xFDE
  5937                           postdec2	equ	0xFDD
  5938                           fsr2h	equ	0xFDA
  5939                           fsr2l	equ	0xFD9
  5940                           status	equ	0xFD8
  5941                           
  5942 ;; *************** function _drawFastVLine *****************
  5943 ;; Defined at:
  5944 ;;		line 363 in file "ST7735_TFT.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  x               1    wreg     unsigned char 
  5947 ;;  y               1   23[COMRAM] unsigned char 
  5948 ;;  h               1   24[COMRAM] unsigned char 
  5949 ;;  color           2   25[COMRAM] unsigned int 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  x               1   33[COMRAM] unsigned char 
  5952 ;;  lo              1   32[COMRAM] unsigned char 
  5953 ;;  hi              1   31[COMRAM] unsigned char 
  5954 ;; Return value:  Size  Location     Type
  5955 ;;		None               void
  5956 ;; Registers used:
  5957 ;;		wreg, status,2, status,0, cstack
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;Total ram usage:       11 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    6
  5970 ;; This function calls:
  5971 ;;		_setAddrWindow
  5972 ;;		_spiwrite
  5973 ;; This function is called by:
  5974 ;;		_fillRect
  5975 ;;		_fillCircleHelper
  5976 ;;		_fillCircle
  5977 ;;		_drawRect
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text24
  5982  00151A                     __ptext24:
  5983                           	opt stack 0
  5984  00151A                     _drawFastVLine:
  5985                           	opt stack 22
  5986                           
  5987                           ;incstack = 0
  5988                           ;drawFastVLine@x stored from wreg
  5989  00151A  6E22               	movwf	drawFastVLine@x,c
  5990                           
  5991                           ;ST7735_TFT.c: 365: unsigned char hi, lo;
  5992                           ;ST7735_TFT.c: 366: if((x >= 128) || (y >= 160))
  5993  00151C  0E80               	movlw	128
  5994  00151E  6022               	cpfslt	drawFastVLine@x,c
  5995  001520  D03F               	goto	l317
  5996  001522  0E9F               	movlw	159
  5997  001524  6418               	cpfsgt	drawFastVLine@y,c
  5998  001526  D001               	goto	l4999
  5999                           
  6000                           ;ST7735_TFT.c: 367: return;
  6001  001528  D03B               	goto	l317
  6002  00152A                     l4999:
  6003                           
  6004                           ;ST7735_TFT.c: 368: if((y + h - 1) >= 160)
  6005  00152A  0EFF               	movlw	255
  6006  00152C  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6007  00152E  0EFF               	movlw	255
  6008  001530  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6009  001532  5019               	movf	drawFastVLine@h,w,c
  6010  001534  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6011  001538  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6012  00153A  261E               	addwf	??_drawFastVLine+2,f,c
  6013  00153C  0E00               	movlw	0
  6014  00153E  221F               	addwfc	??_drawFastVLine+3,f,c
  6015  001540  501C               	movf	??_drawFastVLine,w,c
  6016  001542  261E               	addwf	??_drawFastVLine+2,f,c
  6017  001544  501D               	movf	??_drawFastVLine+1,w,c
  6018  001546  221F               	addwfc	??_drawFastVLine+3,f,c
  6019  001548  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6020  00154A  D00B               	goto	l5003
  6021  00154C  501F               	movf	??_drawFastVLine+3,w,c
  6022  00154E  E104               	bnz	u3460
  6023  001550  0EA0               	movlw	160
  6024  001552  5C1E               	subwf	??_drawFastVLine+2,w,c
  6025  001554  A0D8               	btfss	status,0,c
  6026  001556  D005               	goto	l5003
  6027  001558                     u3460:
  6028                           
  6029                           ;ST7735_TFT.c: 369: h = 160 - y;
  6030  001558  5018               	movf	drawFastVLine@y,w,c
  6031  00155A  0800               	sublw	0
  6032  00155C  0FA0               	addlw	160
  6033  00155E  6E19               	movwf	drawFastVLine@h,c
  6034  001560  D000               	goto	l5003
  6035  001562                     l5003:
  6036                           
  6037                           ;ST7735_TFT.c: 370: hi = color >> 8; lo = color;
  6038  001562  501B               	movf	drawFastVLine@color+1,w,c
  6039  001564  6E20               	movwf	drawFastVLine@hi,c
  6040  001566  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6041                           
  6042                           ;ST7735_TFT.c: 371: setAddrWindow(x, y, x, y + h - 1);
  6043  00156A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6044  00156E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6045  001572  5018               	movf	drawFastVLine@y,w,c
  6046  001574  2419               	addwf	drawFastVLine@h,w,c
  6047  001576  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6048  001578  041C               	decf	??_drawFastVLine,w,c
  6049  00157A  6E16               	movwf	setAddrWindow@y1,c
  6050  00157C  5022               	movf	drawFastVLine@x,w,c
  6051  00157E  ECBC  F00C         	call	_setAddrWindow
  6052                           
  6053                           ;ST7735_TFT.c: 372: PORTDbits.RD7 = 1;
  6054  001582  8E83               	bsf	3971,7,c	;volatile
  6055                           
  6056                           ;ST7735_TFT.c: 373: PORTCbits.RC4 = 0;
  6057  001584  9882               	bcf	3970,4,c	;volatile
  6058                           
  6059                           ;ST7735_TFT.c: 375: while (h--) {
  6060  001586  D007               	goto	l5015
  6061  001588                     l5013:
  6062                           
  6063                           ;ST7735_TFT.c: 376: spiwrite(hi);
  6064  001588  5020               	movf	drawFastVLine@hi,w,c
  6065  00158A  EC3D  F00F         	call	_spiwrite
  6066                           
  6067                           ;ST7735_TFT.c: 377: spiwrite(lo);
  6068  00158E  5021               	movf	drawFastVLine@lo,w,c
  6069  001590  EC3D  F00F         	call	_spiwrite
  6070  001594  D000               	goto	l5015
  6071  001596                     l5015:
  6072  001596  0619               	decf	drawFastVLine@h,f,c
  6073  001598  2819               	incf	drawFastVLine@h,w,c
  6074  00159A  A4D8               	btfss	status,2,c
  6075  00159C  D7F5               	goto	l5013
  6076                           
  6077                           ;ST7735_TFT.c: 378: }
  6078                           ;ST7735_TFT.c: 379: PORTCbits.RC4 = 1;
  6079  00159E  8882               	bsf	3970,4,c	;volatile
  6080  0015A0                     l317:
  6081  0015A0  0012               	return		;funcret
  6082  0015A2                     __end_of_drawFastVLine:
  6083                           	opt stack 0
  6084                           tblptru	equ	0xFF8
  6085                           tblptrh	equ	0xFF7
  6086                           tblptrl	equ	0xFF6
  6087                           tablat	equ	0xFF5
  6088                           prodh	equ	0xFF4
  6089                           prodl	equ	0xFF3
  6090                           intcon2	equ	0xFF1
  6091                           postinc0	equ	0xFEE
  6092                           wreg	equ	0xFE8
  6093                           postdec1	equ	0xFE5
  6094                           fsr1l	equ	0xFE1
  6095                           indf2	equ	0xFDF
  6096                           postinc2	equ	0xFDE
  6097                           postdec2	equ	0xFDD
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8
  6101                           
  6102 ;; *************** function _drawPixel *****************
  6103 ;; Defined at:
  6104 ;;		line 354 in file "ST7735_TFT.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  x               1    wreg     unsigned char 
  6107 ;;  y               1   23[COMRAM] unsigned char 
  6108 ;;  color           2   24[COMRAM] unsigned int 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  x               1   26[COMRAM] unsigned char 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;		None               void
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0, cstack
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6120 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;Total ram usage:        4 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    6
  6127 ;; This function calls:
  6128 ;;		_setAddrWindow
  6129 ;;		_write_data
  6130 ;; This function is called by:
  6131 ;;		_drawChar
  6132 ;;		_drawCircle
  6133 ;;		_drawCircleHelper
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text25
  6138  001C9A                     __ptext25:
  6139                           	opt stack 0
  6140  001C9A                     _drawPixel:
  6141                           	opt stack 22
  6142                           
  6143                           ;incstack = 0
  6144                           ;drawPixel@x stored from wreg
  6145  001C9A  6E1B               	movwf	drawPixel@x,c
  6146                           
  6147                           ;ST7735_TFT.c: 356: if((x >= 128) || (y >= 160))
  6148  001C9C  0E80               	movlw	128
  6149  001C9E  601B               	cpfslt	drawPixel@x,c
  6150  001CA0  D013               	goto	l311
  6151  001CA2  0E9F               	movlw	159
  6152  001CA4  6418               	cpfsgt	drawPixel@y,c
  6153  001CA6  D001               	goto	l5087
  6154                           
  6155                           ;ST7735_TFT.c: 357: return;
  6156  001CA8  D00F               	goto	l311
  6157  001CAA                     l5087:
  6158                           
  6159                           ;ST7735_TFT.c: 358: setAddrWindow(x,y,x+1,y+1);
  6160  001CAA  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6161  001CAE  281B               	incf	drawPixel@x,w,c
  6162  001CB0  6E15               	movwf	setAddrWindow@x1,c
  6163  001CB2  2818               	incf	drawPixel@y,w,c
  6164  001CB4  6E16               	movwf	setAddrWindow@y1,c
  6165  001CB6  501B               	movf	drawPixel@x,w,c
  6166  001CB8  ECBC  F00C         	call	_setAddrWindow
  6167                           
  6168                           ;ST7735_TFT.c: 359: write_data(color >> 8);
  6169  001CBC  501A               	movf	drawPixel@color+1,w,c
  6170  001CBE  EC8F  F00F         	call	_write_data
  6171                           
  6172                           ;ST7735_TFT.c: 360: write_data(color & 0xFF);
  6173  001CC2  5019               	movf	drawPixel@color,w,c
  6174  001CC4  EC8F  F00F         	call	_write_data
  6175  001CC8                     l311:
  6176  001CC8  0012               	return		;funcret
  6177  001CCA                     __end_of_drawPixel:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           intcon2	equ	0xFF1
  6186                           postinc0	equ	0xFEE
  6187                           wreg	equ	0xFE8
  6188                           postdec1	equ	0xFE5
  6189                           fsr1l	equ	0xFE1
  6190                           indf2	equ	0xFDF
  6191                           postinc2	equ	0xFDE
  6192                           postdec2	equ	0xFDD
  6193                           fsr2h	equ	0xFDA
  6194                           fsr2l	equ	0xFD9
  6195                           status	equ	0xFD8
  6196                           
  6197 ;; *************** function _setAddrWindow *****************
  6198 ;; Defined at:
  6199 ;;		line 339 in file "ST7735_TFT.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;  x0              1    wreg     unsigned char 
  6202 ;;  y0              1   19[COMRAM] unsigned char 
  6203 ;;  x1              1   20[COMRAM] unsigned char 
  6204 ;;  y1              1   21[COMRAM] unsigned char 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  x0              1   22[COMRAM] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;		None               void
  6209 ;; Registers used:
  6210 ;;		wreg, status,2, status,0, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6216 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;Total ram usage:        4 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    5
  6223 ;; This function calls:
  6224 ;;		_write_command
  6225 ;;		_write_data
  6226 ;; This function is called by:
  6227 ;;		_drawPixel
  6228 ;;		_drawFastVLine
  6229 ;;		_fillRectangle
  6230 ;;		_drawFastHLine
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           	psect	text26
  6235  001978                     __ptext26:
  6236                           	opt stack 0
  6237  001978                     _setAddrWindow:
  6238                           	opt stack 22
  6239                           
  6240                           ;incstack = 0
  6241                           ;setAddrWindow@x0 stored from wreg
  6242  001978  6E17               	movwf	setAddrWindow@x0,c
  6243                           
  6244                           ;ST7735_TFT.c: 341: write_command(0x2A);
  6245  00197A  0E2A               	movlw	42
  6246  00197C  EC97  F00F         	call	_write_command
  6247                           
  6248                           ;ST7735_TFT.c: 342: write_data(0);
  6249  001980  0E00               	movlw	0
  6250  001982  EC8F  F00F         	call	_write_data
  6251                           
  6252                           ;ST7735_TFT.c: 343: write_data(x0 + colstart);
  6253  001986  5017               	movf	setAddrWindow@x0,w,c
  6254  001988  245B               	addwf	_colstart,w,c
  6255  00198A  EC8F  F00F         	call	_write_data
  6256                           
  6257                           ;ST7735_TFT.c: 344: write_data(0);
  6258  00198E  0E00               	movlw	0
  6259  001990  EC8F  F00F         	call	_write_data
  6260                           
  6261                           ;ST7735_TFT.c: 345: write_data(x1 + colstart);
  6262  001994  5015               	movf	setAddrWindow@x1,w,c
  6263  001996  245B               	addwf	_colstart,w,c
  6264  001998  EC8F  F00F         	call	_write_data
  6265                           
  6266                           ;ST7735_TFT.c: 346: write_command(0x2B);
  6267  00199C  0E2B               	movlw	43
  6268  00199E  EC97  F00F         	call	_write_command
  6269                           
  6270                           ;ST7735_TFT.c: 347: write_data(0);
  6271  0019A2  0E00               	movlw	0
  6272  0019A4  EC8F  F00F         	call	_write_data
  6273                           
  6274                           ;ST7735_TFT.c: 348: write_data(y0 + rowstart);
  6275  0019A8  5014               	movf	setAddrWindow@y0,w,c
  6276  0019AA  2462               	addwf	_rowstart,w,c
  6277  0019AC  EC8F  F00F         	call	_write_data
  6278                           
  6279                           ;ST7735_TFT.c: 349: write_data(0);
  6280  0019B0  0E00               	movlw	0
  6281  0019B2  EC8F  F00F         	call	_write_data
  6282                           
  6283                           ;ST7735_TFT.c: 350: write_data(y1 + rowstart);
  6284  0019B6  5016               	movf	setAddrWindow@y1,w,c
  6285  0019B8  2462               	addwf	_rowstart,w,c
  6286  0019BA  EC8F  F00F         	call	_write_data
  6287                           
  6288                           ;ST7735_TFT.c: 351: write_command(0x2C);
  6289  0019BE  0E2C               	movlw	44
  6290  0019C0  EC97  F00F         	call	_write_command
  6291  0019C4  0012               	return		;funcret
  6292  0019C6                     __end_of_setAddrWindow:
  6293                           	opt stack 0
  6294                           tblptru	equ	0xFF8
  6295                           tblptrh	equ	0xFF7
  6296                           tblptrl	equ	0xFF6
  6297                           tablat	equ	0xFF5
  6298                           prodh	equ	0xFF4
  6299                           prodl	equ	0xFF3
  6300                           intcon2	equ	0xFF1
  6301                           postinc0	equ	0xFEE
  6302                           wreg	equ	0xFE8
  6303                           postdec1	equ	0xFE5
  6304                           fsr1l	equ	0xFE1
  6305                           indf2	equ	0xFDF
  6306                           postinc2	equ	0xFDE
  6307                           postdec2	equ	0xFDD
  6308                           fsr2h	equ	0xFDA
  6309                           fsr2l	equ	0xFD9
  6310                           status	equ	0xFD8
  6311                           
  6312 ;; *************** function _TFT_GreenTab_Initialize *****************
  6313 ;; Defined at:
  6314 ;;		line 591 in file "ST7735_TFT.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;		None
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;		None
  6319 ;; Return value:  Size  Location     Type
  6320 ;;		None               void
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;Total ram usage:        0 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    6
  6335 ;; This function calls:
  6336 ;;		_Rcmd1
  6337 ;;		_Rcmd2red
  6338 ;;		_Rcmd3
  6339 ;;		_write_command
  6340 ;;		_write_data
  6341 ;; This function is called by:
  6342 ;;		_Initialize_LCD_Screen
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text27
  6347  001CCA                     __ptext27:
  6348                           	opt stack 0
  6349  001CCA                     _TFT_GreenTab_Initialize:
  6350                           	opt stack 23
  6351                           
  6352                           ;ST7735_TFT.c: 593: PORTCbits.RC4 = 1;
  6353                           
  6354                           ;incstack = 0
  6355  001CCA  8882               	bsf	3970,4,c	;volatile
  6356                           
  6357                           ;ST7735_TFT.c: 594: PORTDbits.RD7 = 0;
  6358  001CCC  9E83               	bcf	3971,7,c	;volatile
  6359                           
  6360                           ;ST7735_TFT.c: 596: SSPSTAT=0x80;
  6361  001CCE  0E80               	movlw	128
  6362  001CD0  6EC7               	movwf	4039,c	;volatile
  6363                           
  6364                           ;ST7735_TFT.c: 597: SSPCON1=0x30;
  6365  001CD2  0E30               	movlw	48
  6366  001CD4  6EC6               	movwf	4038,c	;volatile
  6367                           
  6368                           ;ST7735_TFT.c: 600: Rcmd1();
  6369  001CD6  ECD8  F005         	call	_Rcmd1	;wreg free
  6370                           
  6371                           ;ST7735_TFT.c: 601: Rcmd2red();
  6372  001CDA  ECDA  F00D         	call	_Rcmd2red	;wreg free
  6373                           
  6374                           ;ST7735_TFT.c: 602: Rcmd3();
  6375  001CDE  EC61  F007         	call	_Rcmd3	;wreg free
  6376                           
  6377                           ;ST7735_TFT.c: 603: write_command(0x36);
  6378  001CE2  0E36               	movlw	54
  6379  001CE4  EC97  F00F         	call	_write_command
  6380                           
  6381                           ;ST7735_TFT.c: 604: write_data(0xC0);
  6382  001CE8  0EC0               	movlw	192
  6383  001CEA  EC8F  F00F         	call	_write_data
  6384                           
  6385                           ;ST7735_TFT.c: 605: _tft_type = 1;
  6386  001CEE  0E01               	movlw	1
  6387  001CF0  6E55               	movwf	__tft_type,c
  6388  001CF2  0012               	return		;funcret
  6389  001CF4                     __end_of_TFT_GreenTab_Initialize:
  6390                           	opt stack 0
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon2	equ	0xFF1
  6398                           postinc0	equ	0xFEE
  6399                           wreg	equ	0xFE8
  6400                           postdec1	equ	0xFE5
  6401                           fsr1l	equ	0xFE1
  6402                           indf2	equ	0xFDF
  6403                           postinc2	equ	0xFDE
  6404                           postdec2	equ	0xFDD
  6405                           fsr2h	equ	0xFDA
  6406                           fsr2l	equ	0xFD9
  6407                           status	equ	0xFD8
  6408                           
  6409 ;; *************** function _Rcmd3 *****************
  6410 ;; Defined at:
  6411 ;;		line 285 in file "ST7735_TFT.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;		None
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;		None
  6416 ;; Return value:  Size  Location     Type
  6417 ;;		None               void
  6418 ;; Registers used:
  6419 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6420 ;; Tracked objects:
  6421 ;;		On entry : 0/0
  6422 ;;		On exit  : 0/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;Total ram usage:        0 bytes
  6430 ;; Hardware stack levels used:    1
  6431 ;; Hardware stack levels required when called:    5
  6432 ;; This function calls:
  6433 ;;		_delay_ms
  6434 ;;		_write_command
  6435 ;;		_write_data
  6436 ;; This function is called by:
  6437 ;;		_TFT_GreenTab_Initialize
  6438 ;;		_TFT_BlackTab_Initialize
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text28
  6443  000EC2                     __ptext28:
  6444                           	opt stack 0
  6445  000EC2                     _Rcmd3:
  6446                           	opt stack 23
  6447                           
  6448                           ;ST7735_TFT.c: 287: write_command(0xE0);
  6449                           
  6450                           ;incstack = 0
  6451  000EC2  0EE0               	movlw	224
  6452  000EC4  EC97  F00F         	call	_write_command
  6453                           
  6454                           ;ST7735_TFT.c: 288: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6455  000EC8  0E02               	movlw	2
  6456  000ECA  EC8F  F00F         	call	_write_data
  6457  000ECE  0E1C               	movlw	28
  6458  000ED0  EC8F  F00F         	call	_write_data
  6459  000ED4  0E07               	movlw	7
  6460  000ED6  EC8F  F00F         	call	_write_data
  6461  000EDA  0E12               	movlw	18
  6462  000EDC  EC8F  F00F         	call	_write_data
  6463                           
  6464                           ;ST7735_TFT.c: 289: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6465  000EE0  0E37               	movlw	55
  6466  000EE2  EC8F  F00F         	call	_write_data
  6467  000EE6  0E32               	movlw	50
  6468  000EE8  EC8F  F00F         	call	_write_data
  6469  000EEC  0E29               	movlw	41
  6470  000EEE  EC8F  F00F         	call	_write_data
  6471  000EF2  0E2D               	movlw	45
  6472  000EF4  EC8F  F00F         	call	_write_data
  6473                           
  6474                           ;ST7735_TFT.c: 290: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6475  000EF8  0E29               	movlw	41
  6476  000EFA  EC8F  F00F         	call	_write_data
  6477  000EFE  0E25               	movlw	37
  6478  000F00  EC8F  F00F         	call	_write_data
  6479  000F04  0E2B               	movlw	43
  6480  000F06  EC8F  F00F         	call	_write_data
  6481  000F0A  0E39               	movlw	57
  6482  000F0C  EC8F  F00F         	call	_write_data
  6483                           
  6484                           ;ST7735_TFT.c: 291: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6485  000F10  0E00               	movlw	0
  6486  000F12  EC8F  F00F         	call	_write_data
  6487  000F16  0E01               	movlw	1
  6488  000F18  EC8F  F00F         	call	_write_data
  6489  000F1C  0E03               	movlw	3
  6490  000F1E  EC8F  F00F         	call	_write_data
  6491  000F22  0E10               	movlw	16
  6492  000F24  EC8F  F00F         	call	_write_data
  6493                           
  6494                           ;ST7735_TFT.c: 292: write_command(0xE1);
  6495  000F28  0EE1               	movlw	225
  6496  000F2A  EC97  F00F         	call	_write_command
  6497                           
  6498                           ;ST7735_TFT.c: 293: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6499  000F2E  0E03               	movlw	3
  6500  000F30  EC8F  F00F         	call	_write_data
  6501  000F34  0E1D               	movlw	29
  6502  000F36  EC8F  F00F         	call	_write_data
  6503  000F3A  0E07               	movlw	7
  6504  000F3C  EC8F  F00F         	call	_write_data
  6505  000F40  0E06               	movlw	6
  6506  000F42  EC8F  F00F         	call	_write_data
  6507                           
  6508                           ;ST7735_TFT.c: 294: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6509  000F46  0E2E               	movlw	46
  6510  000F48  EC8F  F00F         	call	_write_data
  6511  000F4C  0E2C               	movlw	44
  6512  000F4E  EC8F  F00F         	call	_write_data
  6513  000F52  0E29               	movlw	41
  6514  000F54  EC8F  F00F         	call	_write_data
  6515  000F58  0E2D               	movlw	45
  6516  000F5A  EC8F  F00F         	call	_write_data
  6517                           
  6518                           ;ST7735_TFT.c: 295: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6519  000F5E  0E2E               	movlw	46
  6520  000F60  EC8F  F00F         	call	_write_data
  6521  000F64  0E2E               	movlw	46
  6522  000F66  EC8F  F00F         	call	_write_data
  6523  000F6A  0E37               	movlw	55
  6524  000F6C  EC8F  F00F         	call	_write_data
  6525  000F70  0E3F               	movlw	63
  6526  000F72  EC8F  F00F         	call	_write_data
  6527                           
  6528                           ;ST7735_TFT.c: 296: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6529  000F76  0E00               	movlw	0
  6530  000F78  EC8F  F00F         	call	_write_data
  6531  000F7C  0E00               	movlw	0
  6532  000F7E  EC8F  F00F         	call	_write_data
  6533  000F82  0E02               	movlw	2
  6534  000F84  EC8F  F00F         	call	_write_data
  6535  000F88  0E10               	movlw	16
  6536  000F8A  EC8F  F00F         	call	_write_data
  6537                           
  6538                           ;ST7735_TFT.c: 297: write_command(0x13);
  6539  000F8E  0E13               	movlw	19
  6540  000F90  EC97  F00F         	call	_write_command
  6541                           
  6542                           ;ST7735_TFT.c: 298: delay_ms(10);
  6543  000F94  0E00               	movlw	0
  6544  000F96  6E18               	movwf	delay_ms@ms+1,c
  6545  000F98  0E0A               	movlw	10
  6546  000F9A  6E17               	movwf	delay_ms@ms,c
  6547  000F9C  EC93  F00C         	call	_delay_ms	;wreg free
  6548                           
  6549                           ;ST7735_TFT.c: 299: write_command(0x29);
  6550  000FA0  0E29               	movlw	41
  6551  000FA2  EC97  F00F         	call	_write_command
  6552                           
  6553                           ;ST7735_TFT.c: 300: delay_ms(100);
  6554  000FA6  0E00               	movlw	0
  6555  000FA8  6E18               	movwf	delay_ms@ms+1,c
  6556  000FAA  0E64               	movlw	100
  6557  000FAC  6E17               	movwf	delay_ms@ms,c
  6558  000FAE  EC93  F00C         	call	_delay_ms	;wreg free
  6559  000FB2  0012               	return		;funcret
  6560  000FB4                     __end_of_Rcmd3:
  6561                           	opt stack 0
  6562                           tblptru	equ	0xFF8
  6563                           tblptrh	equ	0xFF7
  6564                           tblptrl	equ	0xFF6
  6565                           tablat	equ	0xFF5
  6566                           prodh	equ	0xFF4
  6567                           prodl	equ	0xFF3
  6568                           intcon2	equ	0xFF1
  6569                           postinc0	equ	0xFEE
  6570                           wreg	equ	0xFE8
  6571                           postdec1	equ	0xFE5
  6572                           fsr1l	equ	0xFE1
  6573                           indf2	equ	0xFDF
  6574                           postinc2	equ	0xFDE
  6575                           postdec2	equ	0xFDD
  6576                           fsr2h	equ	0xFDA
  6577                           fsr2l	equ	0xFD9
  6578                           status	equ	0xFD8
  6579                           
  6580 ;; *************** function _Rcmd2red *****************
  6581 ;; Defined at:
  6582 ;;		line 275 in file "ST7735_TFT.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;		None
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;		None
  6587 ;; Return value:  Size  Location     Type
  6588 ;;		None               void
  6589 ;; Registers used:
  6590 ;;		wreg, status,2, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;Total ram usage:        0 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    5
  6603 ;; This function calls:
  6604 ;;		_write_command
  6605 ;;		_write_data
  6606 ;; This function is called by:
  6607 ;;		_TFT_GreenTab_Initialize
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           	psect	text29
  6612  001BB4                     __ptext29:
  6613                           	opt stack 0
  6614  001BB4                     _Rcmd2red:
  6615                           	opt stack 23
  6616                           
  6617                           ;ST7735_TFT.c: 277: write_command(0x2A);
  6618                           
  6619                           ;incstack = 0
  6620  001BB4  0E2A               	movlw	42
  6621  001BB6  EC97  F00F         	call	_write_command
  6622                           
  6623                           ;ST7735_TFT.c: 278: write_data(0x00); write_data(0x00);
  6624  001BBA  0E00               	movlw	0
  6625  001BBC  EC8F  F00F         	call	_write_data
  6626  001BC0  0E00               	movlw	0
  6627  001BC2  EC8F  F00F         	call	_write_data
  6628                           
  6629                           ;ST7735_TFT.c: 279: write_data(0x00); write_data(0x7F);
  6630  001BC6  0E00               	movlw	0
  6631  001BC8  EC8F  F00F         	call	_write_data
  6632  001BCC  0E7F               	movlw	127
  6633  001BCE  EC8F  F00F         	call	_write_data
  6634                           
  6635                           ;ST7735_TFT.c: 280: write_command(0x2B);
  6636  001BD2  0E2B               	movlw	43
  6637  001BD4  EC97  F00F         	call	_write_command
  6638                           
  6639                           ;ST7735_TFT.c: 281: write_data(0x00); write_data(0x00);
  6640  001BD8  0E00               	movlw	0
  6641  001BDA  EC8F  F00F         	call	_write_data
  6642  001BDE  0E00               	movlw	0
  6643  001BE0  EC8F  F00F         	call	_write_data
  6644                           
  6645                           ;ST7735_TFT.c: 282: write_data(0x00); write_data(0x9F);
  6646  001BE4  0E00               	movlw	0
  6647  001BE6  EC8F  F00F         	call	_write_data
  6648  001BEA  0E9F               	movlw	159
  6649  001BEC  EC8F  F00F         	call	_write_data
  6650  001BF0  0012               	return		;funcret
  6651  001BF2                     __end_of_Rcmd2red:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon2	equ	0xFF1
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           postdec1	equ	0xFE5
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function _Rcmd1 *****************
  6672 ;; Defined at:
  6673 ;;		line 228 in file "ST7735_TFT.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;		None
  6678 ;; Return value:  Size  Location     Type
  6679 ;;		None               void
  6680 ;; Registers used:
  6681 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;Total ram usage:        0 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    5
  6694 ;; This function calls:
  6695 ;;		_delay_ms
  6696 ;;		_write_command
  6697 ;;		_write_data
  6698 ;; This function is called by:
  6699 ;;		_TFT_GreenTab_Initialize
  6700 ;;		_TFT_BlackTab_Initialize
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           	psect	text30
  6705  000BB0                     __ptext30:
  6706                           	opt stack 0
  6707  000BB0                     _Rcmd1:
  6708                           	opt stack 23
  6709                           
  6710                           ;ST7735_TFT.c: 230: write_command(0x01);
  6711                           
  6712                           ;incstack = 0
  6713  000BB0  0E01               	movlw	1
  6714  000BB2  EC97  F00F         	call	_write_command
  6715                           
  6716                           ;ST7735_TFT.c: 231: delay_ms(150);
  6717  000BB6  0E00               	movlw	0
  6718  000BB8  6E18               	movwf	delay_ms@ms+1,c
  6719  000BBA  0E96               	movlw	150
  6720  000BBC  6E17               	movwf	delay_ms@ms,c
  6721  000BBE  EC93  F00C         	call	_delay_ms	;wreg free
  6722                           
  6723                           ;ST7735_TFT.c: 232: write_command(0x11);
  6724  000BC2  0E11               	movlw	17
  6725  000BC4  EC97  F00F         	call	_write_command
  6726                           
  6727                           ;ST7735_TFT.c: 233: delay_ms(500);
  6728  000BC8  0E01               	movlw	1
  6729  000BCA  6E18               	movwf	delay_ms@ms+1,c
  6730  000BCC  0EF4               	movlw	244
  6731  000BCE  6E17               	movwf	delay_ms@ms,c
  6732  000BD0  EC93  F00C         	call	_delay_ms	;wreg free
  6733                           
  6734                           ;ST7735_TFT.c: 234: write_command(0xB1);
  6735  000BD4  0EB1               	movlw	177
  6736  000BD6  EC97  F00F         	call	_write_command
  6737                           
  6738                           ;ST7735_TFT.c: 235: write_data(0x01);
  6739  000BDA  0E01               	movlw	1
  6740  000BDC  EC8F  F00F         	call	_write_data
  6741                           
  6742                           ;ST7735_TFT.c: 236: write_data(0x2C);
  6743  000BE0  0E2C               	movlw	44
  6744  000BE2  EC8F  F00F         	call	_write_data
  6745                           
  6746                           ;ST7735_TFT.c: 237: write_data(0x2D);
  6747  000BE6  0E2D               	movlw	45
  6748  000BE8  EC8F  F00F         	call	_write_data
  6749                           
  6750                           ;ST7735_TFT.c: 238: write_command(0xB2);
  6751  000BEC  0EB2               	movlw	178
  6752  000BEE  EC97  F00F         	call	_write_command
  6753                           
  6754                           ;ST7735_TFT.c: 239: write_data(0x01);
  6755  000BF2  0E01               	movlw	1
  6756  000BF4  EC8F  F00F         	call	_write_data
  6757                           
  6758                           ;ST7735_TFT.c: 240: write_data(0x2C);
  6759  000BF8  0E2C               	movlw	44
  6760  000BFA  EC8F  F00F         	call	_write_data
  6761                           
  6762                           ;ST7735_TFT.c: 241: write_data(0x2D);
  6763  000BFE  0E2D               	movlw	45
  6764  000C00  EC8F  F00F         	call	_write_data
  6765                           
  6766                           ;ST7735_TFT.c: 242: write_command(0xB3);
  6767  000C04  0EB3               	movlw	179
  6768  000C06  EC97  F00F         	call	_write_command
  6769                           
  6770                           ;ST7735_TFT.c: 243: write_data(0x01);
  6771  000C0A  0E01               	movlw	1
  6772  000C0C  EC8F  F00F         	call	_write_data
  6773                           
  6774                           ;ST7735_TFT.c: 244: write_data(0x2C);
  6775  000C10  0E2C               	movlw	44
  6776  000C12  EC8F  F00F         	call	_write_data
  6777                           
  6778                           ;ST7735_TFT.c: 245: write_data(0x2D);
  6779  000C16  0E2D               	movlw	45
  6780  000C18  EC8F  F00F         	call	_write_data
  6781                           
  6782                           ;ST7735_TFT.c: 246: write_data(0x01);
  6783  000C1C  0E01               	movlw	1
  6784  000C1E  EC8F  F00F         	call	_write_data
  6785                           
  6786                           ;ST7735_TFT.c: 247: write_data(0x2C);
  6787  000C22  0E2C               	movlw	44
  6788  000C24  EC8F  F00F         	call	_write_data
  6789                           
  6790                           ;ST7735_TFT.c: 248: write_data(0x2D);
  6791  000C28  0E2D               	movlw	45
  6792  000C2A  EC8F  F00F         	call	_write_data
  6793                           
  6794                           ;ST7735_TFT.c: 249: write_command(0xB4);
  6795  000C2E  0EB4               	movlw	180
  6796  000C30  EC97  F00F         	call	_write_command
  6797                           
  6798                           ;ST7735_TFT.c: 250: write_data(0x07);
  6799  000C34  0E07               	movlw	7
  6800  000C36  EC8F  F00F         	call	_write_data
  6801                           
  6802                           ;ST7735_TFT.c: 251: write_command(0xC0);
  6803  000C3A  0EC0               	movlw	192
  6804  000C3C  EC97  F00F         	call	_write_command
  6805                           
  6806                           ;ST7735_TFT.c: 252: write_data(0xA2);
  6807  000C40  0EA2               	movlw	162
  6808  000C42  EC8F  F00F         	call	_write_data
  6809                           
  6810                           ;ST7735_TFT.c: 253: write_data(0x02);
  6811  000C46  0E02               	movlw	2
  6812  000C48  EC8F  F00F         	call	_write_data
  6813                           
  6814                           ;ST7735_TFT.c: 254: write_data(0x84);
  6815  000C4C  0E84               	movlw	132
  6816  000C4E  EC8F  F00F         	call	_write_data
  6817                           
  6818                           ;ST7735_TFT.c: 255: write_command(0xC1);
  6819  000C52  0EC1               	movlw	193
  6820  000C54  EC97  F00F         	call	_write_command
  6821                           
  6822                           ;ST7735_TFT.c: 256: write_data(0xC5);
  6823  000C58  0EC5               	movlw	197
  6824  000C5A  EC8F  F00F         	call	_write_data
  6825                           
  6826                           ;ST7735_TFT.c: 257: write_command(0xC2);
  6827  000C5E  0EC2               	movlw	194
  6828  000C60  EC97  F00F         	call	_write_command
  6829                           
  6830                           ;ST7735_TFT.c: 258: write_data(0x0A);
  6831  000C64  0E0A               	movlw	10
  6832  000C66  EC8F  F00F         	call	_write_data
  6833                           
  6834                           ;ST7735_TFT.c: 259: write_data(0x00);
  6835  000C6A  0E00               	movlw	0
  6836  000C6C  EC8F  F00F         	call	_write_data
  6837                           
  6838                           ;ST7735_TFT.c: 260: write_command(0xC3);
  6839  000C70  0EC3               	movlw	195
  6840  000C72  EC97  F00F         	call	_write_command
  6841                           
  6842                           ;ST7735_TFT.c: 261: write_data(0x8A);
  6843  000C76  0E8A               	movlw	138
  6844  000C78  EC8F  F00F         	call	_write_data
  6845                           
  6846                           ;ST7735_TFT.c: 262: write_data(0x2A);
  6847  000C7C  0E2A               	movlw	42
  6848  000C7E  EC8F  F00F         	call	_write_data
  6849                           
  6850                           ;ST7735_TFT.c: 263: write_command(0xC4);
  6851  000C82  0EC4               	movlw	196
  6852  000C84  EC97  F00F         	call	_write_command
  6853                           
  6854                           ;ST7735_TFT.c: 264: write_data(0x8A);
  6855  000C88  0E8A               	movlw	138
  6856  000C8A  EC8F  F00F         	call	_write_data
  6857                           
  6858                           ;ST7735_TFT.c: 265: write_data(0xEE);
  6859  000C8E  0EEE               	movlw	238
  6860  000C90  EC8F  F00F         	call	_write_data
  6861                           
  6862                           ;ST7735_TFT.c: 266: write_command(0xC5);
  6863  000C94  0EC5               	movlw	197
  6864  000C96  EC97  F00F         	call	_write_command
  6865                           
  6866                           ;ST7735_TFT.c: 267: write_data(0x0E);
  6867  000C9A  0E0E               	movlw	14
  6868  000C9C  EC8F  F00F         	call	_write_data
  6869                           
  6870                           ;ST7735_TFT.c: 268: write_command(0x20);
  6871  000CA0  0E20               	movlw	32
  6872  000CA2  EC97  F00F         	call	_write_command
  6873                           
  6874                           ;ST7735_TFT.c: 269: write_command(0x36);
  6875  000CA6  0E36               	movlw	54
  6876  000CA8  EC97  F00F         	call	_write_command
  6877                           
  6878                           ;ST7735_TFT.c: 270: write_data(0xC8);
  6879  000CAC  0EC8               	movlw	200
  6880  000CAE  EC8F  F00F         	call	_write_data
  6881                           
  6882                           ;ST7735_TFT.c: 271: write_command(0x3A);
  6883  000CB2  0E3A               	movlw	58
  6884  000CB4  EC97  F00F         	call	_write_command
  6885                           
  6886                           ;ST7735_TFT.c: 272: write_data(0x05);
  6887  000CB8  0E05               	movlw	5
  6888  000CBA  EC8F  F00F         	call	_write_data
  6889  000CBE  0012               	return		;funcret
  6890  000CC0                     __end_of_Rcmd1:
  6891                           	opt stack 0
  6892                           tblptru	equ	0xFF8
  6893                           tblptrh	equ	0xFF7
  6894                           tblptrl	equ	0xFF6
  6895                           tablat	equ	0xFF5
  6896                           prodh	equ	0xFF4
  6897                           prodl	equ	0xFF3
  6898                           intcon2	equ	0xFF1
  6899                           postinc0	equ	0xFEE
  6900                           wreg	equ	0xFE8
  6901                           postdec1	equ	0xFE5
  6902                           fsr1l	equ	0xFE1
  6903                           indf2	equ	0xFDF
  6904                           postinc2	equ	0xFDE
  6905                           postdec2	equ	0xFDD
  6906                           fsr2h	equ	0xFDA
  6907                           fsr2l	equ	0xFD9
  6908                           status	equ	0xFD8
  6909                           
  6910 ;; *************** function _write_data *****************
  6911 ;; Defined at:
  6912 ;;		line 156 in file "ST7735_TFT.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  data_           1    wreg     unsigned char 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  data_           1   18[COMRAM] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;		None               void
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;Total ram usage:        1 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    4
  6933 ;; This function calls:
  6934 ;;		_spiwrite
  6935 ;; This function is called by:
  6936 ;;		_Rcmd1
  6937 ;;		_Rcmd2red
  6938 ;;		_Rcmd3
  6939 ;;		_setAddrWindow
  6940 ;;		_drawPixel
  6941 ;;		_TFT_GreenTab_Initialize
  6942 ;;		_Bcmd
  6943 ;;		_setScrollDefinition
  6944 ;;		_Rcmd2green
  6945 ;;		_VerticalScroll
  6946 ;; This function uses a non-reentrant model
  6947 ;;
  6948                           
  6949                           	psect	text31
  6950  001F1E                     __ptext31:
  6951                           	opt stack 0
  6952  001F1E                     _write_data:
  6953                           	opt stack 22
  6954                           
  6955                           ;incstack = 0
  6956                           ;write_data@data_ stored from wreg
  6957  001F1E  6E13               	movwf	write_data@data_,c
  6958                           
  6959                           ;ST7735_TFT.c: 158: PORTCbits.RC4 = 0;
  6960  001F20  9882               	bcf	3970,4,c	;volatile
  6961                           
  6962                           ;ST7735_TFT.c: 159: PORTDbits.RD7 = 1;
  6963  001F22  8E83               	bsf	3971,7,c	;volatile
  6964                           
  6965                           ;ST7735_TFT.c: 160: spiwrite(data_);
  6966  001F24  5013               	movf	write_data@data_,w,c
  6967  001F26  EC3D  F00F         	call	_spiwrite
  6968                           
  6969                           ;ST7735_TFT.c: 161: PORTCbits.RC4 = 1;
  6970  001F2A  8882               	bsf	3970,4,c	;volatile
  6971  001F2C  0012               	return		;funcret
  6972  001F2E                     __end_of_write_data:
  6973                           	opt stack 0
  6974                           tblptru	equ	0xFF8
  6975                           tblptrh	equ	0xFF7
  6976                           tblptrl	equ	0xFF6
  6977                           tablat	equ	0xFF5
  6978                           prodh	equ	0xFF4
  6979                           prodl	equ	0xFF3
  6980                           intcon2	equ	0xFF1
  6981                           postinc0	equ	0xFEE
  6982                           wreg	equ	0xFE8
  6983                           postdec1	equ	0xFE5
  6984                           fsr1l	equ	0xFE1
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992 ;; *************** function _write_command *****************
  6993 ;; Defined at:
  6994 ;;		line 145 in file "ST7735_TFT.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;  cmd_            1    wreg     unsigned char 
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;  cmd_            1   18[COMRAM] unsigned char 
  6999 ;; Return value:  Size  Location     Type
  7000 ;;		None               void
  7001 ;; Registers used:
  7002 ;;		wreg, status,2, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;Total ram usage:        1 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    4
  7015 ;; This function calls:
  7016 ;;		_spiwrite
  7017 ;; This function is called by:
  7018 ;;		_Rcmd1
  7019 ;;		_Rcmd2red
  7020 ;;		_Rcmd3
  7021 ;;		_setAddrWindow
  7022 ;;		_TFT_GreenTab_Initialize
  7023 ;;		_Bcmd
  7024 ;;		_setScrollDefinition
  7025 ;;		_Rcmd2green
  7026 ;;		_VerticalScroll
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           	psect	text32
  7031  001F2E                     __ptext32:
  7032                           	opt stack 0
  7033  001F2E                     _write_command:
  7034                           	opt stack 22
  7035                           
  7036                           ;incstack = 0
  7037                           ;write_command@cmd_ stored from wreg
  7038  001F2E  6E13               	movwf	write_command@cmd_,c
  7039                           
  7040                           ;ST7735_TFT.c: 147: PORTCbits.RC4 = 0;
  7041  001F30  9882               	bcf	3970,4,c	;volatile
  7042                           
  7043                           ;ST7735_TFT.c: 149: PORTDbits.RD7 = 0;
  7044  001F32  9E83               	bcf	3971,7,c	;volatile
  7045                           
  7046                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
  7047  001F34  5013               	movf	write_command@cmd_,w,c
  7048  001F36  EC3D  F00F         	call	_spiwrite
  7049                           
  7050                           ;ST7735_TFT.c: 152: PORTCbits.RC4 = 1;
  7051  001F3A  8882               	bsf	3970,4,c	;volatile
  7052  001F3C  0012               	return		;funcret
  7053  001F3E                     __end_of_write_command:
  7054                           	opt stack 0
  7055                           tblptru	equ	0xFF8
  7056                           tblptrh	equ	0xFF7
  7057                           tblptrl	equ	0xFF6
  7058                           tablat	equ	0xFF5
  7059                           prodh	equ	0xFF4
  7060                           prodl	equ	0xFF3
  7061                           intcon2	equ	0xFF1
  7062                           postinc0	equ	0xFEE
  7063                           wreg	equ	0xFE8
  7064                           postdec1	equ	0xFE5
  7065                           fsr1l	equ	0xFE1
  7066                           indf2	equ	0xFDF
  7067                           postinc2	equ	0xFDE
  7068                           postdec2	equ	0xFDD
  7069                           fsr2h	equ	0xFDA
  7070                           fsr2l	equ	0xFD9
  7071                           status	equ	0xFD8
  7072                           
  7073 ;; *************** function _spiwrite *****************
  7074 ;; Defined at:
  7075 ;;		line 136 in file "ST7735_TFT.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  spidata         1    wreg     unsigned char 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  spidata         1   17[COMRAM] unsigned char 
  7080 ;;  x               1   16[COMRAM] unsigned char 
  7081 ;; Return value:  Size  Location     Type
  7082 ;;		None               void
  7083 ;; Registers used:
  7084 ;;		wreg
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;Total ram usage:        2 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    3
  7097 ;; This function calls:
  7098 ;;		Nothing
  7099 ;; This function is called by:
  7100 ;;		_write_command
  7101 ;;		_write_data
  7102 ;;		_drawFastVLine
  7103 ;;		_fillRectangle
  7104 ;;		_drawFastHLine
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           	psect	text33
  7109  001E7A                     __ptext33:
  7110                           	opt stack 0
  7111  001E7A                     _spiwrite:
  7112                           	opt stack 24
  7113                           
  7114                           ;incstack = 0
  7115                           ;spiwrite@spidata stored from wreg
  7116  001E7A  6E12               	movwf	spiwrite@spidata,c
  7117                           
  7118                           ;ST7735_TFT.c: 138: char x;
  7119                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
  7120  001E7C  969E               	bcf	3998,3,c	;volatile
  7121                           
  7122                           ;ST7735_TFT.c: 140: x = SSPBUF;
  7123  001E7E  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7124                           
  7125                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
  7126  001E82  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7127                           
  7128                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
  7129  001E86  D000               	goto	l267
  7130  001E88                     l267:
  7131  001E88  A0C7               	btfss	4039,0,c	;volatile
  7132  001E8A  D7FE               	goto	l267
  7133  001E8C  0012               	return		;funcret
  7134  001E8E                     __end_of_spiwrite:
  7135                           	opt stack 0
  7136                           tblptru	equ	0xFF8
  7137                           tblptrh	equ	0xFF7
  7138                           tblptrl	equ	0xFF6
  7139                           tablat	equ	0xFF5
  7140                           prodh	equ	0xFF4
  7141                           prodl	equ	0xFF3
  7142                           intcon2	equ	0xFF1
  7143                           postinc0	equ	0xFEE
  7144                           wreg	equ	0xFE8
  7145                           postdec1	equ	0xFE5
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           postinc2	equ	0xFDE
  7149                           postdec2	equ	0xFDD
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _LCD_Reset *****************
  7155 ;; Defined at:
  7156 ;;		line 164 in file "ST7735_TFT.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;		None
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;		None
  7161 ;; Return value:  Size  Location     Type
  7162 ;;		None               void
  7163 ;; Registers used:
  7164 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;Total ram usage:        0 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    5
  7177 ;; This function calls:
  7178 ;;		_delay_ms
  7179 ;; This function is called by:
  7180 ;;		_Initialize_LCD_Screen
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           	psect	text34
  7185  001EA2                     __ptext34:
  7186                           	opt stack 0
  7187  001EA2                     _LCD_Reset:
  7188                           	opt stack 24
  7189                           
  7190                           ;ST7735_TFT.c: 166: PORTDbits.RD0 = 0;
  7191                           
  7192                           ;incstack = 0
  7193  001EA2  9083               	bcf	3971,0,c	;volatile
  7194                           
  7195                           ;ST7735_TFT.c: 167: delay_ms(100);
  7196  001EA4  0E00               	movlw	0
  7197  001EA6  6E18               	movwf	delay_ms@ms+1,c
  7198  001EA8  0E64               	movlw	100
  7199  001EAA  6E17               	movwf	delay_ms@ms,c
  7200  001EAC  EC93  F00C         	call	_delay_ms	;wreg free
  7201                           
  7202                           ;ST7735_TFT.c: 168: PORTDbits.RD0 = 1;
  7203  001EB0  8083               	bsf	3971,0,c	;volatile
  7204  001EB2  0012               	return		;funcret
  7205  001EB4                     __end_of_LCD_Reset:
  7206                           	opt stack 0
  7207                           tblptru	equ	0xFF8
  7208                           tblptrh	equ	0xFF7
  7209                           tblptrl	equ	0xFF6
  7210                           tablat	equ	0xFF5
  7211                           prodh	equ	0xFF4
  7212                           prodl	equ	0xFF3
  7213                           intcon2	equ	0xFF1
  7214                           postinc0	equ	0xFEE
  7215                           wreg	equ	0xFE8
  7216                           postdec1	equ	0xFE5
  7217                           fsr1l	equ	0xFE1
  7218                           indf2	equ	0xFDF
  7219                           postinc2	equ	0xFDE
  7220                           postdec2	equ	0xFDD
  7221                           fsr2h	equ	0xFDA
  7222                           fsr2l	equ	0xFD9
  7223                           status	equ	0xFD8
  7224                           
  7225 ;; *************** function _delay_ms *****************
  7226 ;; Defined at:
  7227 ;;		line 11 in file "ST7735_TFT.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  ms              2   22[COMRAM] int 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  count           2   26[COMRAM] int 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;		None               void
  7234 ;; Registers used:
  7235 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7243 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7244 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;Total ram usage:        6 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    4
  7248 ;; This function calls:
  7249 ;;		___wmul
  7250 ;; This function is called by:
  7251 ;;		_LCD_Reset
  7252 ;;		_Rcmd1
  7253 ;;		_Rcmd3
  7254 ;;		_Bcmd
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text35
  7259  001926                     __ptext35:
  7260                           	opt stack 0
  7261  001926                     _delay_ms:
  7262                           	opt stack 23
  7263                           
  7264                           ;ST7735_TFT.c: 17: int count;
  7265                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  7266                           
  7267                           ;incstack = 0
  7268  001926  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7269  00192A  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7270  00192E  0E00               	movlw	0
  7271  001930  6E14               	movwf	___wmul@multiplicand+1,c
  7272  001932  0EFA               	movlw	250
  7273  001934  6E13               	movwf	___wmul@multiplicand,c
  7274  001936  EC7A  F00E         	call	___wmul	;wreg free
  7275  00193A  C011  F01B         	movff	?___wmul,delay_ms@count
  7276  00193E  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7277                           
  7278                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  7279  001942  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7280  001946  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7281  00194A  1E19               	comf	??_delay_ms,f,c
  7282  00194C  1E1A               	comf	??_delay_ms+1,f,c
  7283  00194E  4A19               	infsnz	??_delay_ms,f,c
  7284  001950  2A1A               	incf	??_delay_ms+1,f,c
  7285  001952  0EFF               	movlw	255
  7286  001954  2419               	addwf	??_delay_ms,w,c
  7287  001956  6E1B               	movwf	delay_ms@count,c
  7288  001958  0EFF               	movlw	255
  7289  00195A  201A               	addwfc	??_delay_ms+1,w,c
  7290  00195C  6E1C               	movwf	delay_ms@count+1,c
  7291                           
  7292                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  7293  00195E  0EB8               	movlw	184
  7294  001960  6EB1               	movwf	4017,c	;volatile
  7295                           
  7296                           ;ST7735_TFT.c: 23: TMR0L = count & 0x00ff;
  7297  001962  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  7298                           
  7299                           ;ST7735_TFT.c: 24: TMR0H = count >> 8;
  7300  001966  501C               	movf	delay_ms@count+1,w,c
  7301  001968  6ED7               	movwf	4055,c	;volatile
  7302                           
  7303                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  7304  00196A  92A1               	bcf	4001,1,c	;volatile
  7305                           
  7306                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  7307  00196C  80B1               	bsf	4017,0,c	;volatile
  7308                           
  7309                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  7310  00196E  D000               	goto	l257
  7311  001970                     l257:
  7312  001970  A2A1               	btfss	4001,1,c	;volatile
  7313  001972  D7FE               	goto	l257
  7314                           
  7315                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  7316  001974  90B1               	bcf	4017,0,c	;volatile
  7317  001976  0012               	return		;funcret
  7318  001978                     __end_of_delay_ms:
  7319                           	opt stack 0
  7320                           tblptru	equ	0xFF8
  7321                           tblptrh	equ	0xFF7
  7322                           tblptrl	equ	0xFF6
  7323                           tablat	equ	0xFF5
  7324                           prodh	equ	0xFF4
  7325                           prodl	equ	0xFF3
  7326                           intcon2	equ	0xFF1
  7327                           postinc0	equ	0xFEE
  7328                           wreg	equ	0xFE8
  7329                           postdec1	equ	0xFE5
  7330                           fsr1l	equ	0xFE1
  7331                           indf2	equ	0xFDF
  7332                           postinc2	equ	0xFDE
  7333                           postdec2	equ	0xFDD
  7334                           fsr2h	equ	0xFDA
  7335                           fsr2l	equ	0xFD9
  7336                           status	equ	0xFD8
  7337                           
  7338 ;; *************** function ___wmul *****************
  7339 ;; Defined at:
  7340 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  multiplier      2   16[COMRAM] unsigned int 
  7343 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  product         2   20[COMRAM] unsigned int 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  2   16[COMRAM] unsigned int 
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0, prodl, prodh
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7355 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;Total ram usage:        6 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    3
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_delay_ms
  7366 ;;		_drawChar
  7367 ;;		_get_RPM
  7368 ;;		_printf
  7369 ;;		_Read_Volt
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text36
  7374  001CF4                     __ptext36:
  7375                           	opt stack 0
  7376  001CF4                     ___wmul:
  7377                           	opt stack 26
  7378                           
  7379                           ;incstack = 0
  7380  001CF4  5011               	movf	___wmul@multiplier,w,c
  7381  001CF6  0213               	mulwf	___wmul@multiplicand,c
  7382  001CF8  CFF3 F015          	movff	prodl,___wmul@product
  7383  001CFC  CFF4 F016          	movff	prodh,___wmul@product+1
  7384  001D00  5011               	movf	___wmul@multiplier,w,c
  7385  001D02  0214               	mulwf	___wmul@multiplicand+1,c
  7386  001D04  50F3               	movf	prodl,w,c
  7387  001D06  2616               	addwf	___wmul@product+1,f,c
  7388  001D08  5012               	movf	___wmul@multiplier+1,w,c
  7389  001D0A  0213               	mulwf	___wmul@multiplicand,c
  7390  001D0C  50F3               	movf	prodl,w,c
  7391  001D0E  2616               	addwf	___wmul@product+1,f,c
  7392  001D10  C015  F011         	movff	___wmul@product,?___wmul
  7393  001D14  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7394  001D18  D000               	goto	l867
  7395  001D1A                     l867:
  7396  001D1A  0012               	return		;funcret
  7397  001D1C                     __end_of___wmul:
  7398                           	opt stack 0
  7399                           tblptru	equ	0xFF8
  7400                           tblptrh	equ	0xFF7
  7401                           tblptrl	equ	0xFF6
  7402                           tablat	equ	0xFF5
  7403                           prodh	equ	0xFF4
  7404                           prodl	equ	0xFF3
  7405                           intcon2	equ	0xFF1
  7406                           postinc0	equ	0xFEE
  7407                           wreg	equ	0xFE8
  7408                           postdec1	equ	0xFE5
  7409                           fsr1l	equ	0xFE1
  7410                           indf2	equ	0xFDF
  7411                           postinc2	equ	0xFDE
  7412                           postdec2	equ	0xFDD
  7413                           fsr2h	equ	0xFDA
  7414                           fsr2l	equ	0xFD9
  7415                           status	equ	0xFD8
  7416                           
  7417 ;; *************** function _Init_UART *****************
  7418 ;; Defined at:
  7419 ;;		line 24 in file "utils.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;		None
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;		None
  7424 ;; Return value:  Size  Location     Type
  7425 ;;		None               void
  7426 ;; Registers used:
  7427 ;;		wreg, status,2, cstack
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;Total ram usage:        0 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; Hardware stack levels required when called:    4
  7440 ;; This function calls:
  7441 ;;		_OpenUSART
  7442 ;; This function is called by:
  7443 ;;		_main
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text37
  7448  001E8E                     __ptext37:
  7449                           	opt stack 0
  7450  001E8E                     _Init_UART:
  7451                           	opt stack 26
  7452                           
  7453                           ;utils.c: 26: OpenUSART (0b01111111 & 0b10111111 &
  7454                           ;utils.c: 27: 0b11111110 & 0b11111101 & 0b11111111 &
  7455                           ;utils.c: 28: 0b11111111, 25);
  7456                           
  7457                           ;incstack = 0
  7458  001E8E  0E00               	movlw	0
  7459  001E90  6E12               	movwf	OpenUSART@spbrg+1,c
  7460  001E92  0E19               	movlw	25
  7461  001E94  6E11               	movwf	OpenUSART@spbrg,c
  7462  001E96  0E3C               	movlw	60
  7463  001E98  EC4C  F00B         	call	_OpenUSART
  7464                           
  7465                           ;utils.c: 29: OSCCON = 0x70;
  7466  001E9C  0E70               	movlw	112
  7467  001E9E  6ED3               	movwf	4051,c	;volatile
  7468  001EA0  0012               	return		;funcret
  7469  001EA2                     __end_of_Init_UART:
  7470                           	opt stack 0
  7471                           tblptru	equ	0xFF8
  7472                           tblptrh	equ	0xFF7
  7473                           tblptrl	equ	0xFF6
  7474                           tablat	equ	0xFF5
  7475                           prodh	equ	0xFF4
  7476                           prodl	equ	0xFF3
  7477                           intcon2	equ	0xFF1
  7478                           postinc0	equ	0xFEE
  7479                           wreg	equ	0xFE8
  7480                           postdec1	equ	0xFE5
  7481                           fsr1l	equ	0xFE1
  7482                           indf2	equ	0xFDF
  7483                           postinc2	equ	0xFDE
  7484                           postdec2	equ	0xFDD
  7485                           fsr2h	equ	0xFDA
  7486                           fsr2l	equ	0xFD9
  7487                           status	equ	0xFD8
  7488                           
  7489 ;; *************** function _OpenUSART *****************
  7490 ;; Defined at:
  7491 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;  config          1    wreg     unsigned char 
  7494 ;;  spbrg           2   16[COMRAM] unsigned int 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;  config          1   18[COMRAM] unsigned char 
  7497 ;; Return value:  Size  Location     Type
  7498 ;;		None               void
  7499 ;; Registers used:
  7500 ;;		wreg, status,2
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7506 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7507 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;Total ram usage:        3 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; Hardware stack levels required when called:    3
  7513 ;; This function calls:
  7514 ;;		Nothing
  7515 ;; This function is called by:
  7516 ;;		_Init_UART
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text38
  7521  001698                     __ptext38:
  7522                           	opt stack 0
  7523  001698                     _OpenUSART:
  7524                           	opt stack 26
  7525                           
  7526                           ;incstack = 0
  7527                           ;OpenUSART@config stored from wreg
  7528  001698  6E13               	movwf	OpenUSART@config,c
  7529  00169A  0E00               	movlw	0
  7530  00169C  6EAC               	movwf	4012,c	;volatile
  7531  00169E  0E00               	movlw	0
  7532  0016A0  6EAB               	movwf	4011,c	;volatile
  7533  0016A2  A013               	btfss	OpenUSART@config,0,c
  7534  0016A4  D002               	goto	l5681
  7535  0016A6  88AC               	bsf	4012,4,c	;volatile
  7536  0016A8  D000               	goto	l5681
  7537  0016AA                     l5681:
  7538  0016AA  A213               	btfss	OpenUSART@config,1,c
  7539  0016AC  D003               	goto	l5685
  7540  0016AE  8CAC               	bsf	4012,6,c	;volatile
  7541  0016B0  8CAB               	bsf	4011,6,c	;volatile
  7542  0016B2  D000               	goto	l5685
  7543  0016B4                     l5685:
  7544  0016B4  A413               	btfss	OpenUSART@config,2,c
  7545  0016B6  D002               	goto	l5689
  7546  0016B8  8EAC               	bsf	4012,7,c	;volatile
  7547  0016BA  D000               	goto	l5689
  7548  0016BC                     l5689:
  7549  0016BC  A613               	btfss	OpenUSART@config,3,c
  7550  0016BE  D002               	goto	l855
  7551  0016C0  88AB               	bsf	4011,4,c	;volatile
  7552  0016C2  D002               	goto	l5693
  7553  0016C4                     l855:
  7554  0016C4  8AAB               	bsf	4011,5,c	;volatile
  7555  0016C6  D000               	goto	l5693
  7556  0016C8                     l5693:
  7557  0016C8  B813               	btfsc	OpenUSART@config,4,c
  7558  0016CA  84AC               	bsf	4012,2,c	;volatile
  7559  0016CC  989E               	bcf	3998,4,c	;volatile
  7560  0016CE  AA13               	btfss	OpenUSART@config,5,c
  7561  0016D0  D002               	goto	l5701
  7562  0016D2  86AB               	bsf	4011,3,c	;volatile
  7563  0016D4  D000               	goto	l5701
  7564  0016D6                     l5701:
  7565  0016D6  AC13               	btfss	OpenUSART@config,6,c
  7566  0016D8  D002               	goto	l859
  7567  0016DA  8A9D               	bsf	3997,5,c	;volatile
  7568  0016DC  D001               	goto	l860
  7569  0016DE                     l859:
  7570  0016DE  9A9D               	bcf	3997,5,c	;volatile
  7571  0016E0                     l860:
  7572  0016E0  9A9E               	bcf	3998,5,c	;volatile
  7573  0016E2  AE13               	btfss	OpenUSART@config,7,c
  7574  0016E4  D002               	goto	l861
  7575  0016E6  889D               	bsf	3997,4,c	;volatile
  7576  0016E8  D001               	goto	l862
  7577  0016EA                     l861:
  7578  0016EA  989D               	bcf	3997,4,c	;volatile
  7579  0016EC                     l862:
  7580  0016EC  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7581  0016F0  5012               	movf	OpenUSART@spbrg+1,w,c
  7582  0016F2  6EB0               	movwf	4016,c	;volatile
  7583  0016F4  8AAC               	bsf	4012,5,c	;volatile
  7584  0016F6  8EAB               	bsf	4011,7,c	;volatile
  7585  0016F8  9C94               	bcf	3988,6,c	;volatile
  7586  0016FA  8E94               	bsf	3988,7,c	;volatile
  7587  0016FC  B8AC               	btfsc	4012,4,c	;volatile
  7588  0016FE  BEAC               	btfsc	4012,7,c	;volatile
  7589  001700  D002               	goto	l864
  7590  001702  8C94               	bsf	3988,6,c	;volatile
  7591  001704  D000               	goto	l864
  7592  001706                     l864:
  7593  001706  0012               	return		;funcret
  7594  001708                     __end_of_OpenUSART:
  7595                           	opt stack 0
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           prodh	equ	0xFF4
  7601                           prodl	equ	0xFF3
  7602                           intcon2	equ	0xFF1
  7603                           postinc0	equ	0xFEE
  7604                           wreg	equ	0xFE8
  7605                           postdec1	equ	0xFE5
  7606                           fsr1l	equ	0xFE1
  7607                           indf2	equ	0xFDF
  7608                           postinc2	equ	0xFDE
  7609                           postdec2	equ	0xFDD
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _Init_Interrupt *****************
  7615 ;; Defined at:
  7616 ;;		line 16 in file "Interrupt.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, status,2
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;Total ram usage:        0 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    3
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_main
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text39
  7645  001E38                     __ptext39:
  7646                           	opt stack 0
  7647  001E38                     _Init_Interrupt:
  7648                           	opt stack 27
  7649                           
  7650                           ;Interrupt.c: 18: INTCON3bits.INT2IF = 0;
  7651                           
  7652                           ;incstack = 0
  7653  001E38  92F0               	bcf	intcon3,1,c	;volatile
  7654                           
  7655                           ;Interrupt.c: 19: INTCON2bits.INTEDG2 = 0;
  7656  001E3A  98F1               	bcf	intcon2,4,c	;volatile
  7657                           
  7658                           ;Interrupt.c: 20: INTCON3bits.INT2IE = 1;
  7659  001E3C  88F0               	bsf	intcon3,4,c	;volatile
  7660                           
  7661                           ;Interrupt.c: 22: TMR1H = 0;
  7662  001E3E  0E00               	movlw	0
  7663  001E40  6ECF               	movwf	4047,c	;volatile
  7664                           
  7665                           ;Interrupt.c: 23: TMR1L = 0;
  7666  001E42  0E00               	movlw	0
  7667  001E44  6ECE               	movwf	4046,c	;volatile
  7668                           
  7669                           ;Interrupt.c: 24: PIR1bits.TMR1IF = 0;
  7670  001E46  909E               	bcf	3998,0,c	;volatile
  7671                           
  7672                           ;Interrupt.c: 25: PIE1bits.TMR1IE = 1;
  7673  001E48  809D               	bsf	3997,0,c	;volatile
  7674                           
  7675                           ;Interrupt.c: 26: INTCONbits.PEIE = 1;
  7676  001E4A  8CF2               	bsf	intcon,6,c	;volatile
  7677                           
  7678                           ;Interrupt.c: 27: INTCONbits.GIE = 1;
  7679  001E4C  8EF2               	bsf	intcon,7,c	;volatile
  7680  001E4E  0012               	return		;funcret
  7681  001E50                     __end_of_Init_Interrupt:
  7682                           	opt stack 0
  7683                           tblptru	equ	0xFF8
  7684                           tblptrh	equ	0xFF7
  7685                           tblptrl	equ	0xFF6
  7686                           tablat	equ	0xFF5
  7687                           prodh	equ	0xFF4
  7688                           prodl	equ	0xFF3
  7689                           intcon	equ	0xFF2
  7690                           intcon2	equ	0xFF1
  7691                           intcon3	equ	0xFF0
  7692                           postinc0	equ	0xFEE
  7693                           wreg	equ	0xFE8
  7694                           postdec1	equ	0xFE5
  7695                           fsr1l	equ	0xFE1
  7696                           indf2	equ	0xFDF
  7697                           postinc2	equ	0xFDE
  7698                           postdec2	equ	0xFDD
  7699                           fsr2h	equ	0xFDA
  7700                           fsr2l	equ	0xFD9
  7701                           status	equ	0xFD8
  7702                           
  7703 ;; *************** function _Increase_Speed *****************
  7704 ;; Defined at:
  7705 ;;		line 42 in file "Fan_Support.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;		None
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;		None
  7710 ;; Return value:  Size  Location     Type
  7711 ;;		None               void
  7712 ;; Registers used:
  7713 ;;		wreg, status,2, status,0, cstack
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;Total ram usage:        0 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    6
  7726 ;; This function calls:
  7727 ;;		_Do_Beep
  7728 ;;		_do_update_pwm
  7729 ;; This function is called by:
  7730 ;;		_main
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text40
  7735  001D42                     __ptext40:
  7736                           	opt stack 0
  7737  001D42                     _Increase_Speed:
  7738                           	opt stack 24
  7739                           
  7740                           ;Fan_Support.c: 44: if (duty_cycle == 100)
  7741                           
  7742                           ;incstack = 0
  7743  001D42  0E64               	movlw	100
  7744  001D44  185E               	xorwf	_duty_cycle,w,c
  7745  001D46  A4D8               	btfss	status,2,c
  7746  001D48  D006               	goto	l6209
  7747                           
  7748                           ;Fan_Support.c: 45: {
  7749                           ;Fan_Support.c: 46: Do_Beep();
  7750  001D4A  EC5A  F00F         	call	_Do_Beep	;wreg free
  7751                           
  7752                           ;Fan_Support.c: 47: do_update_pwm(duty_cycle);
  7753  001D4E  505E               	movf	_duty_cycle,w,c
  7754  001D50  EC8F  F009         	call	_do_update_pwm
  7755                           
  7756                           ;Fan_Support.c: 48: }
  7757  001D54  D007               	goto	l741
  7758  001D56                     l6209:
  7759                           
  7760                           ;Fan_Support.c: 49: else
  7761                           ;Fan_Support.c: 50: {
  7762                           ;Fan_Support.c: 51: duty_cycle = duty_cycle + 5;
  7763  001D56  505E               	movf	_duty_cycle,w,c
  7764  001D58  0F05               	addlw	5
  7765  001D5A  6E5E               	movwf	_duty_cycle,c
  7766                           
  7767                           ;Fan_Support.c: 52: do_update_pwm(duty_cycle);
  7768  001D5C  505E               	movf	_duty_cycle,w,c
  7769  001D5E  EC8F  F009         	call	_do_update_pwm
  7770  001D62  D000               	goto	l741
  7771  001D64                     l741:
  7772  001D64  0012               	return		;funcret
  7773  001D66                     __end_of_Increase_Speed:
  7774                           	opt stack 0
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           prodh	equ	0xFF4
  7780                           prodl	equ	0xFF3
  7781                           intcon	equ	0xFF2
  7782                           intcon2	equ	0xFF1
  7783                           intcon3	equ	0xFF0
  7784                           postinc0	equ	0xFEE
  7785                           wreg	equ	0xFE8
  7786                           postdec1	equ	0xFE5
  7787                           fsr1l	equ	0xFE1
  7788                           indf2	equ	0xFDF
  7789                           postinc2	equ	0xFDE
  7790                           postdec2	equ	0xFDD
  7791                           fsr2h	equ	0xFDA
  7792                           fsr2l	equ	0xFD9
  7793                           status	equ	0xFD8
  7794                           
  7795 ;; *************** function _I2C_Init *****************
  7796 ;; Defined at:
  7797 ;;		line 10 in file "I2C_Soft.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  c               4   16[COMRAM] unsigned long 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;		None
  7802 ;; Return value:  Size  Location     Type
  7803 ;;		None               void
  7804 ;; Registers used:
  7805 ;;		wreg, cstack
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7815 ;;Total ram usage:        4 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:    4
  7818 ;; This function calls:
  7819 ;;		_i2cHighScl
  7820 ;;		_i2cHighSda
  7821 ;; This function is called by:
  7822 ;;		_main
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           	psect	text41
  7827  001F6E                     __ptext41:
  7828                           	opt stack 0
  7829  001F6E                     _I2C_Init:
  7830                           	opt stack 26
  7831                           
  7832                           ;I2C_Soft.c: 12: i2cHighScl();
  7833                           
  7834                           ;incstack = 0
  7835  001F6E  ECA6  F00F         	call	_i2cHighScl	;wreg free
  7836                           
  7837                           ;I2C_Soft.c: 13: i2cHighSda();
  7838  001F72  ECD3  F00F         	call	_i2cHighSda	;wreg free
  7839  001F76  0012               	return		;funcret
  7840  001F78                     __end_of_I2C_Init:
  7841                           	opt stack 0
  7842                           tblptru	equ	0xFF8
  7843                           tblptrh	equ	0xFF7
  7844                           tblptrl	equ	0xFF6
  7845                           tablat	equ	0xFF5
  7846                           prodh	equ	0xFF4
  7847                           prodl	equ	0xFF3
  7848                           intcon	equ	0xFF2
  7849                           intcon2	equ	0xFF1
  7850                           intcon3	equ	0xFF0
  7851                           postinc0	equ	0xFEE
  7852                           wreg	equ	0xFE8
  7853                           postdec1	equ	0xFE5
  7854                           fsr1l	equ	0xFE1
  7855                           indf2	equ	0xFDF
  7856                           postinc2	equ	0xFDE
  7857                           postdec2	equ	0xFDD
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8
  7861                           
  7862 ;; *************** function _Enable_INT_Interrupt *****************
  7863 ;; Defined at:
  7864 ;;		line 30 in file "Interrupt.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;		None
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;		None
  7869 ;; Return value:  Size  Location     Type
  7870 ;;		None               void
  7871 ;; Registers used:
  7872 ;;		None
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;Total ram usage:        0 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    3
  7885 ;; This function calls:
  7886 ;;		Nothing
  7887 ;; This function is called by:
  7888 ;;		_main
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text42
  7893  001FB6                     __ptext42:
  7894                           	opt stack 0
  7895  001FB6                     _Enable_INT_Interrupt:
  7896                           	opt stack 27
  7897                           
  7898                           ;Interrupt.c: 32: INTCON3bits.INT2IE = 1;
  7899                           
  7900                           ;incstack = 0
  7901  001FB6  88F0               	bsf	intcon3,4,c	;volatile
  7902                           
  7903                           ;Interrupt.c: 33: INTCON2bits.INTEDG2 = 0;
  7904  001FB8  98F1               	bcf	intcon2,4,c	;volatile
  7905  001FBA  0012               	return		;funcret
  7906  001FBC                     __end_of_Enable_INT_Interrupt:
  7907                           	opt stack 0
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           intcon2	equ	0xFF1
  7916                           intcon3	equ	0xFF0
  7917                           postinc0	equ	0xFEE
  7918                           wreg	equ	0xFE8
  7919                           postdec1	equ	0xFE5
  7920                           fsr1l	equ	0xFE1
  7921                           indf2	equ	0xFDF
  7922                           postinc2	equ	0xFDE
  7923                           postdec2	equ	0xFDD
  7924                           fsr2h	equ	0xFDA
  7925                           fsr2l	equ	0xFD9
  7926                           status	equ	0xFD8
  7927                           
  7928 ;; *************** function _Decrease_Speed *****************
  7929 ;; Defined at:
  7930 ;;		line 56 in file "Fan_Support.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;		None
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;		None
  7935 ;; Return value:  Size  Location     Type
  7936 ;;		None               void
  7937 ;; Registers used:
  7938 ;;		wreg, status,2, status,0, cstack
  7939 ;; Tracked objects:
  7940 ;;		On entry : 0/0
  7941 ;;		On exit  : 0/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7948 ;;Total ram usage:        0 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; Hardware stack levels required when called:    6
  7951 ;; This function calls:
  7952 ;;		_Do_Beep
  7953 ;;		_do_update_pwm
  7954 ;; This function is called by:
  7955 ;;		_main
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text43
  7960  001D88                     __ptext43:
  7961                           	opt stack 0
  7962  001D88                     _Decrease_Speed:
  7963                           	opt stack 24
  7964                           
  7965                           ;Fan_Support.c: 58: if (duty_cycle == 0)
  7966                           
  7967                           ;incstack = 0
  7968  001D88  505E               	movf	_duty_cycle,w,c
  7969  001D8A  A4D8               	btfss	status,2,c
  7970  001D8C  D006               	goto	l6199
  7971                           
  7972                           ;Fan_Support.c: 59: {
  7973                           ;Fan_Support.c: 60: Do_Beep();
  7974  001D8E  EC5A  F00F         	call	_Do_Beep	;wreg free
  7975                           
  7976                           ;Fan_Support.c: 61: do_update_pwm(duty_cycle);
  7977  001D92  505E               	movf	_duty_cycle,w,c
  7978  001D94  EC8F  F009         	call	_do_update_pwm
  7979                           
  7980                           ;Fan_Support.c: 62: }
  7981  001D98  D007               	goto	l746
  7982  001D9A                     l6199:
  7983                           
  7984                           ;Fan_Support.c: 63: else
  7985                           ;Fan_Support.c: 64: {
  7986                           ;Fan_Support.c: 65: duty_cycle = duty_cycle - 5;
  7987  001D9A  505E               	movf	_duty_cycle,w,c
  7988  001D9C  0FFB               	addlw	251
  7989  001D9E  6E5E               	movwf	_duty_cycle,c
  7990                           
  7991                           ;Fan_Support.c: 66: do_update_pwm(duty_cycle);
  7992  001DA0  505E               	movf	_duty_cycle,w,c
  7993  001DA2  EC8F  F009         	call	_do_update_pwm
  7994  001DA6  D000               	goto	l746
  7995  001DA8                     l746:
  7996  001DA8  0012               	return		;funcret
  7997  001DAA                     __end_of_Decrease_Speed:
  7998                           	opt stack 0
  7999                           tblptru	equ	0xFF8
  8000                           tblptrh	equ	0xFF7
  8001                           tblptrl	equ	0xFF6
  8002                           tablat	equ	0xFF5
  8003                           prodh	equ	0xFF4
  8004                           prodl	equ	0xFF3
  8005                           intcon	equ	0xFF2
  8006                           intcon2	equ	0xFF1
  8007                           intcon3	equ	0xFF0
  8008                           postinc0	equ	0xFEE
  8009                           wreg	equ	0xFE8
  8010                           postdec1	equ	0xFE5
  8011                           fsr1l	equ	0xFE1
  8012                           indf2	equ	0xFDF
  8013                           postinc2	equ	0xFDE
  8014                           postdec2	equ	0xFDD
  8015                           fsr2h	equ	0xFDA
  8016                           fsr2l	equ	0xFD9
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function _do_update_pwm *****************
  8020 ;; Defined at:
  8021 ;;		line 70 in file "Fan_Support.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  duty_cycle      1    wreg     unsigned char 
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  duty_cycle      1   64[COMRAM] unsigned char 
  8026 ;;  dc_f            3   61[COMRAM] float 
  8027 ;;  dc_I            2   65[COMRAM] int 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;		None               void
  8030 ;; Registers used:
  8031 ;;		wreg, status,2, status,0, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;Total ram usage:        9 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    5
  8044 ;; This function calls:
  8045 ;;		___ftdiv
  8046 ;;		___ftmul
  8047 ;;		___fttol
  8048 ;;		___lbtoft
  8049 ;; This function is called by:
  8050 ;;		_main
  8051 ;;		_Turn_On_Fan
  8052 ;;		_Increase_Speed
  8053 ;;		_Decrease_Speed
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           	psect	text44
  8058  00131E                     __ptext44:
  8059                           	opt stack 0
  8060  00131E                     _do_update_pwm:
  8061                           	opt stack 25
  8062                           
  8063                           ;incstack = 0
  8064                           ;do_update_pwm@duty_cycle stored from wreg
  8065  00131E  6E41               	movwf	do_update_pwm@duty_cycle,c
  8066                           
  8067                           ;Fan_Support.c: 72: float dc_f;
  8068                           ;Fan_Support.c: 73: int dc_I;
  8069                           ;Fan_Support.c: 74: PR2 = 0b00000100;
  8070  001320  0E04               	movlw	4
  8071  001322  6ECB               	movwf	4043,c	;volatile
  8072                           
  8073                           ;Fan_Support.c: 75: T2CON = 0b00000111;
  8074  001324  0E07               	movlw	7
  8075  001326  6ECA               	movwf	4042,c	;volatile
  8076                           
  8077                           ;Fan_Support.c: 76: dc_f = (4.0 * duty_cycle / 20.0);
  8078  001328  0E00               	movlw	0
  8079  00132A  6E20               	movwf	___ftmul@f2,c
  8080  00132C  0E80               	movlw	128
  8081  00132E  6E21               	movwf	___ftmul@f2+1,c
  8082  001330  0E40               	movlw	64
  8083  001332  6E22               	movwf	___ftmul@f2+2,c
  8084  001334  5041               	movf	do_update_pwm@duty_cycle,w,c
  8085  001336  EC8E  F00E         	call	___lbtoft
  8086  00133A  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  8087  00133E  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  8088  001342  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  8089  001346  ECE5  F006         	call	___ftmul	;wreg free
  8090  00134A  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  8091  00134E  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  8092  001352  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  8093  001356  0E00               	movlw	0
  8094  001358  6E2F               	movwf	___ftdiv@f2,c
  8095  00135A  0EA0               	movlw	160
  8096  00135C  6E30               	movwf	___ftdiv@f2+1,c
  8097  00135E  0E41               	movlw	65
  8098  001360  6E31               	movwf	___ftdiv@f2+2,c
  8099  001362  EC4D  F008         	call	___ftdiv	;wreg free
  8100  001366  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
  8101  00136A  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  8102  00136E  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  8103                           
  8104                           ;Fan_Support.c: 78: dc_I = (int) dc_f;
  8105  001372  C03E  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  8106  001376  C03F  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  8107  00137A  C040  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  8108  00137E  ECDA  F007         	call	___fttol	;wreg free
  8109  001382  C011  F042         	movff	?___fttol,do_update_pwm@dc_I
  8110  001386  C012  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
  8111                           
  8112                           ;Fan_Support.c: 79: if (dc_I > duty_cycle) dc_I++;
  8113  00138A  5041               	movf	do_update_pwm@duty_cycle,w,c
  8114  00138C  6E3B               	movwf	??_do_update_pwm& (0+255),c
  8115  00138E  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  8116  001390  5042               	movf	do_update_pwm@dc_I,w,c
  8117  001392  5C3B               	subwf	??_do_update_pwm,w,c
  8118  001394  503C               	movf	??_do_update_pwm+1,w,c
  8119  001396  0A80               	xorlw	128
  8120  001398  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  8121  00139A  5043               	movf	do_update_pwm@dc_I+1,w,c
  8122  00139C  0A80               	xorlw	128
  8123  00139E  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  8124  0013A0  B0D8               	btfsc	status,0,c
  8125  0013A2  D003               	goto	l5517
  8126  0013A4  4A42               	infsnz	do_update_pwm@dc_I,f,c
  8127  0013A6  2A43               	incf	do_update_pwm@dc_I+1,f,c
  8128  0013A8  D000               	goto	l5517
  8129  0013AA                     l5517:
  8130                           
  8131                           ;Fan_Support.c: 80: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  8132  0013AA  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  8133  0013AE  0E03               	movlw	3
  8134  0013B0  163B               	andwf	??_do_update_pwm,f,c
  8135  0013B2  383B               	swapf	??_do_update_pwm,w,c
  8136  0013B4  0BF0               	andlw	240
  8137  0013B6  090C               	iorlw	12
  8138  0013B8  6EBD               	movwf	4029,c	;volatile
  8139                           
  8140                           ;Fan_Support.c: 81: CCPR1L = (dc_I) >> 2;
  8141  0013BA  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  8142  0013BE  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  8143  0013C2  343C               	rlcf	??_do_update_pwm+1,w,c
  8144  0013C4  323C               	rrcf	??_do_update_pwm+1,f,c
  8145  0013C6  323B               	rrcf	??_do_update_pwm,f,c
  8146  0013C8  343C               	rlcf	??_do_update_pwm+1,w,c
  8147  0013CA  323C               	rrcf	??_do_update_pwm+1,f,c
  8148  0013CC  323B               	rrcf	??_do_update_pwm,f,c
  8149  0013CE  503B               	movf	??_do_update_pwm,w,c
  8150  0013D0  6EBE               	movwf	4030,c	;volatile
  8151  0013D2  0012               	return		;funcret
  8152  0013D4                     __end_of_do_update_pwm:
  8153                           	opt stack 0
  8154                           tblptru	equ	0xFF8
  8155                           tblptrh	equ	0xFF7
  8156                           tblptrl	equ	0xFF6
  8157                           tablat	equ	0xFF5
  8158                           prodh	equ	0xFF4
  8159                           prodl	equ	0xFF3
  8160                           intcon	equ	0xFF2
  8161                           intcon2	equ	0xFF1
  8162                           intcon3	equ	0xFF0
  8163                           postinc0	equ	0xFEE
  8164                           wreg	equ	0xFE8
  8165                           postdec1	equ	0xFE5
  8166                           fsr1l	equ	0xFE1
  8167                           indf2	equ	0xFDF
  8168                           postinc2	equ	0xFDE
  8169                           postdec2	equ	0xFDD
  8170                           fsr2h	equ	0xFDA
  8171                           fsr2l	equ	0xFD9
  8172                           status	equ	0xFD8
  8173                           
  8174 ;; *************** function ___lbtoft *****************
  8175 ;; Defined at:
  8176 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  8177 ;; Parameters:    Size  Location     Type
  8178 ;;  c               1    wreg     unsigned char 
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  c               1   27[COMRAM] unsigned char 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;                  3   24[COMRAM] float 
  8183 ;; Registers used:
  8184 ;;		wreg, status,2, status,0, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8190 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;Total ram usage:        4 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    4
  8197 ;; This function calls:
  8198 ;;		___ftpack
  8199 ;; This function is called by:
  8200 ;;		_do_update_pwm
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           	psect	text45
  8205  001D1C                     __ptext45:
  8206                           	opt stack 0
  8207  001D1C                     ___lbtoft:
  8208                           	opt stack 25
  8209                           
  8210                           ;incstack = 0
  8211                           ;___lbtoft@c stored from wreg
  8212  001D1C  6E1C               	movwf	___lbtoft@c,c
  8213  001D1E  501C               	movf	___lbtoft@c,w,c
  8214  001D20  6E11               	movwf	___ftpack@arg,c
  8215  001D22  6A12               	clrf	___ftpack@arg+1,c
  8216  001D24  6A13               	clrf	___ftpack@arg+2,c
  8217  001D26  0E8E               	movlw	142
  8218  001D28  6E14               	movwf	___ftpack@exp,c
  8219  001D2A  0E00               	movlw	0
  8220  001D2C  6E15               	movwf	___ftpack@sign,c
  8221  001D2E  EC2C  F009         	call	___ftpack	;wreg free
  8222  001D32  C011  F019         	movff	?___ftpack,?___lbtoft
  8223  001D36  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  8224  001D3A  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  8225  001D3E  D000               	goto	l1324
  8226  001D40                     l1324:
  8227  001D40  0012               	return		;funcret
  8228  001D42                     __end_of___lbtoft:
  8229                           	opt stack 0
  8230                           tblptru	equ	0xFF8
  8231                           tblptrh	equ	0xFF7
  8232                           tblptrl	equ	0xFF6
  8233                           tablat	equ	0xFF5
  8234                           prodh	equ	0xFF4
  8235                           prodl	equ	0xFF3
  8236                           intcon	equ	0xFF2
  8237                           intcon2	equ	0xFF1
  8238                           intcon3	equ	0xFF0
  8239                           postinc0	equ	0xFEE
  8240                           wreg	equ	0xFE8
  8241                           postdec1	equ	0xFE5
  8242                           fsr1l	equ	0xFE1
  8243                           indf2	equ	0xFDF
  8244                           postinc2	equ	0xFDE
  8245                           postdec2	equ	0xFDD
  8246                           fsr2h	equ	0xFDA
  8247                           fsr2l	equ	0xFD9
  8248                           status	equ	0xFD8
  8249                           
  8250 ;; *************** function ___fttol *****************
  8251 ;; Defined at:
  8252 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  f1              3   16[COMRAM] float 
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;  lval            4   26[COMRAM] unsigned long 
  8257 ;;  exp1            1   30[COMRAM] unsigned char 
  8258 ;;  sign1           1   25[COMRAM] unsigned char 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  4   16[COMRAM] long 
  8261 ;; Registers used:
  8262 ;;		wreg, status,2, status,0
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/0
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8268 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8270 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8271 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8272 ;;Total ram usage:       15 bytes
  8273 ;; Hardware stack levels used:    1
  8274 ;; Hardware stack levels required when called:    3
  8275 ;; This function calls:
  8276 ;;		Nothing
  8277 ;; This function is called by:
  8278 ;;		_do_update_pwm
  8279 ;; This function uses a non-reentrant model
  8280 ;;
  8281                           
  8282                           	psect	text46
  8283  000FB4                     __ptext46:
  8284                           	opt stack 0
  8285  000FB4                     ___fttol:
  8286                           	opt stack 26
  8287                           
  8288                           ;incstack = 0
  8289  000FB4  C013  F015         	movff	___fttol@f1+2,??___fttol
  8290  000FB8  6A16               	clrf	(??___fttol+1)& (0+255),c
  8291  000FBA  6A17               	clrf	(??___fttol+2)& (0+255),c
  8292  000FBC  3412               	rlcf	___fttol@f1+1,w,c
  8293  000FBE  3615               	rlcf	??___fttol& (0+255),f,c
  8294  000FC0  E301               	bnc	u3721
  8295  000FC2  8016               	bsf	(??___fttol+1)& (0+255),0,c
  8296  000FC4                     u3721:
  8297  000FC4  5015               	movf	??___fttol,w,c
  8298  000FC6  6E1F               	movwf	___fttol@exp1,c
  8299  000FC8  501F               	movf	___fttol@exp1,w,c
  8300  000FCA  A4D8               	btfss	status,2,c
  8301  000FCC  D002               	goto	l5207
  8302  000FCE  D039               	goto	l5231
  8303  000FD0  D063               	goto	l1283
  8304  000FD2                     l5207:
  8305  000FD2  0E17               	movlw	23
  8306  000FD4  6E15               	movwf	??___fttol& (0+255),c
  8307  000FD6  C011  F016         	movff	___fttol@f1,??___fttol+1
  8308  000FDA  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  8309  000FDE  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  8310  000FE2  2815               	incf	??___fttol,w,c
  8311  000FE4  6E19               	movwf	(??___fttol+4)& (0+255),c
  8312  000FE6  D004               	goto	u3740
  8313  000FE8                     u3745:
  8314  000FE8  90D8               	bcf	status,0,c
  8315  000FEA  3218               	rrcf	??___fttol+3,f,c
  8316  000FEC  3217               	rrcf	??___fttol+2,f,c
  8317  000FEE  3216               	rrcf	??___fttol+1,f,c
  8318  000FF0                     u3740:
  8319  000FF0  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  8320  000FF2  D7FA               	goto	u3745
  8321  000FF4  5016               	movf	??___fttol+1,w,c
  8322  000FF6  6E1A               	movwf	___fttol@sign1,c
  8323  000FF8  8E12               	bsf	___fttol@f1+1,7,c
  8324  000FFA  0EFF               	movlw	255
  8325  000FFC  1611               	andwf	___fttol@f1,f,c
  8326  000FFE  0EFF               	movlw	255
  8327  001000  1612               	andwf	___fttol@f1+1,f,c
  8328  001002  0E00               	movlw	0
  8329  001004  1613               	andwf	___fttol@f1+2,f,c
  8330  001006  5011               	movf	___fttol@f1,w,c
  8331  001008  6E1B               	movwf	___fttol@lval,c
  8332  00100A  5012               	movf	___fttol@f1+1,w,c
  8333  00100C  6E1C               	movwf	___fttol@lval+1,c
  8334  00100E  5013               	movf	___fttol@f1+2,w,c
  8335  001010  6E1D               	movwf	___fttol@lval+2,c
  8336  001012  6A1E               	clrf	___fttol@lval+3,c
  8337  001014  0E8E               	movlw	142
  8338  001016  5E1F               	subwf	___fttol@exp1,f,c
  8339  001018  AE1F               	btfss	___fttol@exp1,7,c
  8340  00101A  D010               	goto	l5229
  8341  00101C  501F               	movf	___fttol@exp1,w,c
  8342  00101E  0A80               	xorlw	128
  8343  001020  0F8F               	addlw	143
  8344  001022  B0D8               	btfsc	status,0,c
  8345  001024  D003               	goto	l5225
  8346  001026  D00D               	goto	l5231
  8347  001028  D037               	goto	l1283
  8348  00102A  D000               	goto	l5225
  8349  00102C                     l5225:
  8350  00102C  90D8               	bcf	status,0,c
  8351  00102E  321E               	rrcf	___fttol@lval+3,f,c
  8352  001030  321D               	rrcf	___fttol@lval+2,f,c
  8353  001032  321C               	rrcf	___fttol@lval+1,f,c
  8354  001034  321B               	rrcf	___fttol@lval,f,c
  8355  001036  3E1F               	incfsz	___fttol@exp1,f,c
  8356  001038  D7F9               	goto	l5225
  8357  00103A  D019               	goto	l5239
  8358  00103C                     l5229:
  8359  00103C  0E17               	movlw	23
  8360  00103E  641F               	cpfsgt	___fttol@exp1,c
  8361  001040  D011               	goto	l5237
  8362  001042                     l5231:
  8363  001042  0E00               	movlw	0
  8364  001044  6E11               	movwf	?___fttol,c
  8365  001046  0E00               	movlw	0
  8366  001048  6E12               	movwf	?___fttol+1,c
  8367  00104A  0E00               	movlw	0
  8368  00104C  6E13               	movwf	?___fttol+2,c
  8369  00104E  0E00               	movlw	0
  8370  001050  6E14               	movwf	?___fttol+3,c
  8371  001052  D022               	goto	l1283
  8372  001054  D007               	goto	l5237
  8373  001056                     l5235:
  8374  001056  90D8               	bcf	status,0,c
  8375  001058  361B               	rlcf	___fttol@lval,f,c
  8376  00105A  361C               	rlcf	___fttol@lval+1,f,c
  8377  00105C  361D               	rlcf	___fttol@lval+2,f,c
  8378  00105E  361E               	rlcf	___fttol@lval+3,f,c
  8379  001060  061F               	decf	___fttol@exp1,f,c
  8380  001062  D000               	goto	l5237
  8381  001064                     l5237:
  8382  001064  501F               	movf	___fttol@exp1,w,c
  8383  001066  B4D8               	btfsc	status,2,c
  8384  001068  D002               	goto	l5239
  8385  00106A  D7F5               	goto	l5235
  8386  00106C  D000               	goto	l5239
  8387  00106E                     l5239:
  8388  00106E  501A               	movf	___fttol@sign1,w,c
  8389  001070  B4D8               	btfsc	status,2,c
  8390  001072  D009               	goto	l5243
  8391  001074  1E1E               	comf	___fttol@lval+3,f,c
  8392  001076  1E1D               	comf	___fttol@lval+2,f,c
  8393  001078  1E1C               	comf	___fttol@lval+1,f,c
  8394  00107A  6C1B               	negf	___fttol@lval,c
  8395  00107C  0E00               	movlw	0
  8396  00107E  221C               	addwfc	___fttol@lval+1,f,c
  8397  001080  221D               	addwfc	___fttol@lval+2,f,c
  8398  001082  221E               	addwfc	___fttol@lval+3,f,c
  8399  001084  D000               	goto	l5243
  8400  001086                     l5243:
  8401  001086  C01B  F011         	movff	___fttol@lval,?___fttol
  8402  00108A  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  8403  00108E  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  8404  001092  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  8405  001096  D000               	goto	l1283
  8406  001098                     l1283:
  8407  001098  0012               	return		;funcret
  8408  00109A                     __end_of___fttol:
  8409                           	opt stack 0
  8410                           tblptru	equ	0xFF8
  8411                           tblptrh	equ	0xFF7
  8412                           tblptrl	equ	0xFF6
  8413                           tablat	equ	0xFF5
  8414                           prodh	equ	0xFF4
  8415                           prodl	equ	0xFF3
  8416                           intcon	equ	0xFF2
  8417                           intcon2	equ	0xFF1
  8418                           intcon3	equ	0xFF0
  8419                           postinc0	equ	0xFEE
  8420                           wreg	equ	0xFE8
  8421                           postdec1	equ	0xFE5
  8422                           fsr1l	equ	0xFE1
  8423                           indf2	equ	0xFDF
  8424                           postinc2	equ	0xFDE
  8425                           postdec2	equ	0xFDD
  8426                           fsr2h	equ	0xFDA
  8427                           fsr2l	equ	0xFD9
  8428                           status	equ	0xFD8
  8429                           
  8430 ;; *************** function ___ftmul *****************
  8431 ;; Defined at:
  8432 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;  f1              3   28[COMRAM] float 
  8435 ;;  f2              3   31[COMRAM] float 
  8436 ;; Auto vars:     Size  Location     Type
  8437 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  8438 ;;  sign            1   42[COMRAM] unsigned char 
  8439 ;;  cntr            1   41[COMRAM] unsigned char 
  8440 ;;  exp             1   37[COMRAM] unsigned char 
  8441 ;; Return value:  Size  Location     Type
  8442 ;;                  3   28[COMRAM] float 
  8443 ;; Registers used:
  8444 ;;		wreg, status,2, status,0, cstack
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8450 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8451 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8452 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8453 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8454 ;;Total ram usage:       15 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    4
  8457 ;; This function calls:
  8458 ;;		___ftpack
  8459 ;; This function is called by:
  8460 ;;		_do_update_pwm
  8461 ;; This function uses a non-reentrant model
  8462 ;;
  8463                           
  8464                           	psect	text47
  8465  000DCA                     __ptext47:
  8466                           	opt stack 0
  8467  000DCA                     ___ftmul:
  8468                           	opt stack 25
  8469                           
  8470                           ;incstack = 0
  8471  000DCA  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  8472  000DCE  6A24               	clrf	(??___ftmul+1)& (0+255),c
  8473  000DD0  6A25               	clrf	(??___ftmul+2)& (0+255),c
  8474  000DD2  341E               	rlcf	___ftmul@f1+1,w,c
  8475  000DD4  3623               	rlcf	??___ftmul& (0+255),f,c
  8476  000DD6  E301               	bnc	u3661
  8477  000DD8  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  8478  000DDA                     u3661:
  8479  000DDA  5023               	movf	??___ftmul,w,c
  8480  000DDC  6E26               	movwf	___ftmul@exp,c
  8481  000DDE  5026               	movf	___ftmul@exp,w,c
  8482  000DE0  A4D8               	btfss	status,2,c
  8483  000DE2  D002               	goto	l5159
  8484  000DE4  D00E               	goto	l5161
  8485  000DE6  D06C               	goto	l1262
  8486  000DE8                     l5159:
  8487  000DE8  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  8488  000DEC  6A24               	clrf	(??___ftmul+1)& (0+255),c
  8489  000DEE  6A25               	clrf	(??___ftmul+2)& (0+255),c
  8490  000DF0  3421               	rlcf	___ftmul@f2+1,w,c
  8491  000DF2  3623               	rlcf	??___ftmul& (0+255),f,c
  8492  000DF4  E301               	bnc	u3681
  8493  000DF6  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  8494  000DF8                     u3681:
  8495  000DF8  5023               	movf	??___ftmul,w,c
  8496  000DFA  6E2B               	movwf	___ftmul@sign,c
  8497  000DFC  502B               	movf	___ftmul@sign,w,c
  8498  000DFE  A4D8               	btfss	status,2,c
  8499  000E00  D007               	goto	l5165
  8500  000E02                     l5161:
  8501  000E02  0E00               	movlw	0
  8502  000E04  6E1D               	movwf	?___ftmul,c
  8503  000E06  0E00               	movlw	0
  8504  000E08  6E1E               	movwf	?___ftmul+1,c
  8505  000E0A  0E00               	movlw	0
  8506  000E0C  6E1F               	movwf	?___ftmul+2,c
  8507  000E0E  D058               	goto	l1262
  8508  000E10                     l5165:
  8509  000E10  502B               	movf	___ftmul@sign,w,c
  8510  000E12  0F7B               	addlw	123
  8511  000E14  2626               	addwf	___ftmul@exp,f,c
  8512  000E16  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  8513  000E1A  5022               	movf	___ftmul@f2+2,w,c
  8514  000E1C  1A2B               	xorwf	___ftmul@sign,f,c
  8515  000E1E  0E80               	movlw	128
  8516  000E20  162B               	andwf	___ftmul@sign,f,c
  8517  000E22  8E1E               	bsf	___ftmul@f1+1,7,c
  8518  000E24  8E21               	bsf	___ftmul@f2+1,7,c
  8519  000E26  0EFF               	movlw	255
  8520  000E28  1620               	andwf	___ftmul@f2,f,c
  8521  000E2A  0EFF               	movlw	255
  8522  000E2C  1621               	andwf	___ftmul@f2+1,f,c
  8523  000E2E  0E00               	movlw	0
  8524  000E30  1622               	andwf	___ftmul@f2+2,f,c
  8525  000E32  0E00               	movlw	0
  8526  000E34  6E27               	movwf	___ftmul@f3_as_product,c
  8527  000E36  0E00               	movlw	0
  8528  000E38  6E28               	movwf	___ftmul@f3_as_product+1,c
  8529  000E3A  0E00               	movlw	0
  8530  000E3C  6E29               	movwf	___ftmul@f3_as_product+2,c
  8531  000E3E  0E07               	movlw	7
  8532  000E40  6E2A               	movwf	___ftmul@cntr,c
  8533  000E42  D000               	goto	l5179
  8534  000E44                     l5179:
  8535  000E44  A01D               	btfss	___ftmul@f1,0,c
  8536  000E46  D007               	goto	l5183
  8537  000E48  5020               	movf	___ftmul@f2,w,c
  8538  000E4A  2627               	addwf	___ftmul@f3_as_product,f,c
  8539  000E4C  5021               	movf	___ftmul@f2+1,w,c
  8540  000E4E  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  8541  000E50  5022               	movf	___ftmul@f2+2,w,c
  8542  000E52  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  8543  000E54  D000               	goto	l5183
  8544  000E56                     l5183:
  8545  000E56  90D8               	bcf	status,0,c
  8546  000E58  321F               	rrcf	___ftmul@f1+2,f,c
  8547  000E5A  321E               	rrcf	___ftmul@f1+1,f,c
  8548  000E5C  321D               	rrcf	___ftmul@f1,f,c
  8549  000E5E  90D8               	bcf	status,0,c
  8550  000E60  3620               	rlcf	___ftmul@f2,f,c
  8551  000E62  3621               	rlcf	___ftmul@f2+1,f,c
  8552  000E64  3622               	rlcf	___ftmul@f2+2,f,c
  8553  000E66  2E2A               	decfsz	___ftmul@cntr,f,c
  8554  000E68  D7ED               	goto	l5179
  8555  000E6A  D000               	goto	l5187
  8556  000E6C                     l5187:
  8557  000E6C  0E09               	movlw	9
  8558  000E6E  6E2A               	movwf	___ftmul@cntr,c
  8559  000E70  D000               	goto	l5189
  8560  000E72                     l5189:
  8561  000E72  A01D               	btfss	___ftmul@f1,0,c
  8562  000E74  D007               	goto	l5193
  8563  000E76  5020               	movf	___ftmul@f2,w,c
  8564  000E78  2627               	addwf	___ftmul@f3_as_product,f,c
  8565  000E7A  5021               	movf	___ftmul@f2+1,w,c
  8566  000E7C  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  8567  000E7E  5022               	movf	___ftmul@f2+2,w,c
  8568  000E80  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  8569  000E82  D000               	goto	l5193
  8570  000E84                     l5193:
  8571  000E84  90D8               	bcf	status,0,c
  8572  000E86  321F               	rrcf	___ftmul@f1+2,f,c
  8573  000E88  321E               	rrcf	___ftmul@f1+1,f,c
  8574  000E8A  321D               	rrcf	___ftmul@f1,f,c
  8575  000E8C  90D8               	bcf	status,0,c
  8576  000E8E  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  8577  000E90  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  8578  000E92  3227               	rrcf	___ftmul@f3_as_product,f,c
  8579  000E94  2E2A               	decfsz	___ftmul@cntr,f,c
  8580  000E96  D7ED               	goto	l5189
  8581  000E98  D000               	goto	l5197
  8582  000E9A                     l5197:
  8583  000E9A  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  8584  000E9E  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8585  000EA2  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8586  000EA6  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  8587  000EAA  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  8588  000EAE  EC2C  F009         	call	___ftpack	;wreg free
  8589  000EB2  C011  F01D         	movff	?___ftpack,?___ftmul
  8590  000EB6  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  8591  000EBA  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  8592  000EBE  D000               	goto	l1262
  8593  000EC0                     l1262:
  8594  000EC0  0012               	return		;funcret
  8595  000EC2                     __end_of___ftmul:
  8596                           	opt stack 0
  8597                           tblptru	equ	0xFF8
  8598                           tblptrh	equ	0xFF7
  8599                           tblptrl	equ	0xFF6
  8600                           tablat	equ	0xFF5
  8601                           prodh	equ	0xFF4
  8602                           prodl	equ	0xFF3
  8603                           intcon	equ	0xFF2
  8604                           intcon2	equ	0xFF1
  8605                           intcon3	equ	0xFF0
  8606                           postinc0	equ	0xFEE
  8607                           wreg	equ	0xFE8
  8608                           postdec1	equ	0xFE5
  8609                           fsr1l	equ	0xFE1
  8610                           indf2	equ	0xFDF
  8611                           postinc2	equ	0xFDE
  8612                           postdec2	equ	0xFDD
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8
  8616                           
  8617 ;; *************** function ___ftdiv *****************
  8618 ;; Defined at:
  8619 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;  f1              3   43[COMRAM] float 
  8622 ;;  f2              3   46[COMRAM] float 
  8623 ;; Auto vars:     Size  Location     Type
  8624 ;;  f3              3   53[COMRAM] float 
  8625 ;;  sign            1   57[COMRAM] unsigned char 
  8626 ;;  exp             1   56[COMRAM] unsigned char 
  8627 ;;  cntr            1   52[COMRAM] unsigned char 
  8628 ;; Return value:  Size  Location     Type
  8629 ;;                  3   43[COMRAM] float 
  8630 ;; Registers used:
  8631 ;;		wreg, status,2, status,0, cstack
  8632 ;; Tracked objects:
  8633 ;;		On entry : 0/0
  8634 ;;		On exit  : 0/0
  8635 ;;		Unchanged: 0/0
  8636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8637 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;Total ram usage:       15 bytes
  8642 ;; Hardware stack levels used:    1
  8643 ;; Hardware stack levels required when called:    4
  8644 ;; This function calls:
  8645 ;;		___ftpack
  8646 ;; This function is called by:
  8647 ;;		_do_update_pwm
  8648 ;;		_Read_Volt
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           	psect	text48
  8653  00109A                     __ptext48:
  8654                           	opt stack 0
  8655  00109A                     ___ftdiv:
  8656                           	opt stack 25
  8657                           
  8658                           ;incstack = 0
  8659  00109A  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  8660  00109E  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  8661  0010A0  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  8662  0010A2  342D               	rlcf	___ftdiv@f1+1,w,c
  8663  0010A4  3632               	rlcf	??___ftdiv& (0+255),f,c
  8664  0010A6  E301               	bnc	u3611
  8665  0010A8  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  8666  0010AA                     u3611:
  8667  0010AA  5032               	movf	??___ftdiv,w,c
  8668  0010AC  6E39               	movwf	___ftdiv@exp,c
  8669  0010AE  5039               	movf	___ftdiv@exp,w,c
  8670  0010B0  A4D8               	btfss	status,2,c
  8671  0010B2  D002               	goto	l5113
  8672  0010B4  D00E               	goto	l5115
  8673  0010B6  D061               	goto	l1247
  8674  0010B8                     l5113:
  8675  0010B8  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  8676  0010BC  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  8677  0010BE  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  8678  0010C0  3430               	rlcf	___ftdiv@f2+1,w,c
  8679  0010C2  3632               	rlcf	??___ftdiv& (0+255),f,c
  8680  0010C4  E301               	bnc	u3631
  8681  0010C6  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  8682  0010C8                     u3631:
  8683  0010C8  5032               	movf	??___ftdiv,w,c
  8684  0010CA  6E3A               	movwf	___ftdiv@sign,c
  8685  0010CC  503A               	movf	___ftdiv@sign,w,c
  8686  0010CE  A4D8               	btfss	status,2,c
  8687  0010D0  D007               	goto	l5119
  8688  0010D2                     l5115:
  8689  0010D2  0E00               	movlw	0
  8690  0010D4  6E2C               	movwf	?___ftdiv,c
  8691  0010D6  0E00               	movlw	0
  8692  0010D8  6E2D               	movwf	?___ftdiv+1,c
  8693  0010DA  0E00               	movlw	0
  8694  0010DC  6E2E               	movwf	?___ftdiv+2,c
  8695  0010DE  D04D               	goto	l1247
  8696  0010E0                     l5119:
  8697  0010E0  0E00               	movlw	0
  8698  0010E2  6E36               	movwf	___ftdiv@f3,c
  8699  0010E4  0E00               	movlw	0
  8700  0010E6  6E37               	movwf	___ftdiv@f3+1,c
  8701  0010E8  0E00               	movlw	0
  8702  0010EA  6E38               	movwf	___ftdiv@f3+2,c
  8703  0010EC  503A               	movf	___ftdiv@sign,w,c
  8704  0010EE  0F89               	addlw	137
  8705  0010F0  5E39               	subwf	___ftdiv@exp,f,c
  8706  0010F2  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  8707  0010F6  5031               	movf	___ftdiv@f2+2,w,c
  8708  0010F8  1A3A               	xorwf	___ftdiv@sign,f,c
  8709  0010FA  0E80               	movlw	128
  8710  0010FC  163A               	andwf	___ftdiv@sign,f,c
  8711  0010FE  8E2D               	bsf	___ftdiv@f1+1,7,c
  8712  001100  0EFF               	movlw	255
  8713  001102  162C               	andwf	___ftdiv@f1,f,c
  8714  001104  0EFF               	movlw	255
  8715  001106  162D               	andwf	___ftdiv@f1+1,f,c
  8716  001108  0E00               	movlw	0
  8717  00110A  162E               	andwf	___ftdiv@f1+2,f,c
  8718  00110C  8E30               	bsf	___ftdiv@f2+1,7,c
  8719  00110E  0EFF               	movlw	255
  8720  001110  162F               	andwf	___ftdiv@f2,f,c
  8721  001112  0EFF               	movlw	255
  8722  001114  1630               	andwf	___ftdiv@f2+1,f,c
  8723  001116  0E00               	movlw	0
  8724  001118  1631               	andwf	___ftdiv@f2+2,f,c
  8725  00111A  0E18               	movlw	24
  8726  00111C  6E35               	movwf	___ftdiv@cntr,c
  8727  00111E  D000               	goto	l5139
  8728  001120                     l5139:
  8729  001120  90D8               	bcf	status,0,c
  8730  001122  3636               	rlcf	___ftdiv@f3,f,c
  8731  001124  3637               	rlcf	___ftdiv@f3+1,f,c
  8732  001126  3638               	rlcf	___ftdiv@f3+2,f,c
  8733  001128  502F               	movf	___ftdiv@f2,w,c
  8734  00112A  5C2C               	subwf	___ftdiv@f1,w,c
  8735  00112C  5030               	movf	___ftdiv@f2+1,w,c
  8736  00112E  582D               	subwfb	___ftdiv@f1+1,w,c
  8737  001130  5031               	movf	___ftdiv@f2+2,w,c
  8738  001132  582E               	subwfb	___ftdiv@f1+2,w,c
  8739  001134  A0D8               	btfss	status,0,c
  8740  001136  D007               	goto	l1250
  8741  001138  502F               	movf	___ftdiv@f2,w,c
  8742  00113A  5E2C               	subwf	___ftdiv@f1,f,c
  8743  00113C  5030               	movf	___ftdiv@f2+1,w,c
  8744  00113E  5A2D               	subwfb	___ftdiv@f1+1,f,c
  8745  001140  5031               	movf	___ftdiv@f2+2,w,c
  8746  001142  5A2E               	subwfb	___ftdiv@f1+2,f,c
  8747  001144  8036               	bsf	___ftdiv@f3,0,c
  8748  001146                     l1250:
  8749  001146  90D8               	bcf	status,0,c
  8750  001148  362C               	rlcf	___ftdiv@f1,f,c
  8751  00114A  362D               	rlcf	___ftdiv@f1+1,f,c
  8752  00114C  362E               	rlcf	___ftdiv@f1+2,f,c
  8753  00114E  2E35               	decfsz	___ftdiv@cntr,f,c
  8754  001150  D7E7               	goto	l5139
  8755  001152  D000               	goto	l5149
  8756  001154                     l5149:
  8757  001154  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  8758  001158  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8759  00115C  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8760  001160  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  8761  001164  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  8762  001168  EC2C  F009         	call	___ftpack	;wreg free
  8763  00116C  C011  F02C         	movff	?___ftpack,?___ftdiv
  8764  001170  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  8765  001174  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  8766  001178  D000               	goto	l1247
  8767  00117A                     l1247:
  8768  00117A  0012               	return		;funcret
  8769  00117C                     __end_of___ftdiv:
  8770                           	opt stack 0
  8771                           tblptru	equ	0xFF8
  8772                           tblptrh	equ	0xFF7
  8773                           tblptrl	equ	0xFF6
  8774                           tablat	equ	0xFF5
  8775                           prodh	equ	0xFF4
  8776                           prodl	equ	0xFF3
  8777                           intcon	equ	0xFF2
  8778                           intcon2	equ	0xFF1
  8779                           intcon3	equ	0xFF0
  8780                           postinc0	equ	0xFEE
  8781                           wreg	equ	0xFE8
  8782                           postdec1	equ	0xFE5
  8783                           fsr1l	equ	0xFE1
  8784                           indf2	equ	0xFDF
  8785                           postinc2	equ	0xFDE
  8786                           postdec2	equ	0xFDD
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function ___ftpack *****************
  8792 ;; Defined at:
  8793 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;  arg             3   16[COMRAM] unsigned um
  8796 ;;  exp             1   19[COMRAM] unsigned char 
  8797 ;;  sign            1   20[COMRAM] unsigned char 
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;		None
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  3   16[COMRAM] float 
  8802 ;; Registers used:
  8803 ;;		wreg, status,2, status,0
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8809 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;Total ram usage:        8 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    3
  8816 ;; This function calls:
  8817 ;;		Nothing
  8818 ;; This function is called by:
  8819 ;;		___ftdiv
  8820 ;;		___ftmul
  8821 ;;		___lbtoft
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text49
  8826  001258                     __ptext49:
  8827                           	opt stack 0
  8828  001258                     ___ftpack:
  8829                           	opt stack 25
  8830                           
  8831                           ;incstack = 0
  8832  001258  5014               	movf	___ftpack@exp,w,c
  8833  00125A  B4D8               	btfsc	status,2,c
  8834  00125C  D005               	goto	l5027
  8835  00125E  5011               	movf	___ftpack@arg,w,c
  8836  001260  1012               	iorwf	___ftpack@arg+1,w,c
  8837  001262  1013               	iorwf	___ftpack@arg+2,w,c
  8838  001264  A4D8               	btfss	status,2,c
  8839  001266  D00E               	goto	l5033
  8840  001268                     l5027:
  8841  001268  0E00               	movlw	0
  8842  00126A  6E11               	movwf	?___ftpack,c
  8843  00126C  0E00               	movlw	0
  8844  00126E  6E12               	movwf	?___ftpack+1,c
  8845  001270  0E00               	movlw	0
  8846  001272  6E13               	movwf	?___ftpack+2,c
  8847  001274  D053               	goto	l1175
  8848  001276  D006               	goto	l5033
  8849  001278                     l5031:
  8850  001278  2A14               	incf	___ftpack@exp,f,c
  8851  00127A  90D8               	bcf	status,0,c
  8852  00127C  3213               	rrcf	___ftpack@arg+2,f,c
  8853  00127E  3212               	rrcf	___ftpack@arg+1,f,c
  8854  001280  3211               	rrcf	___ftpack@arg,f,c
  8855  001282  D000               	goto	l5033
  8856  001284                     l5033:
  8857  001284  0E00               	movlw	0
  8858  001286  1411               	andwf	___ftpack@arg,w,c
  8859  001288  6E16               	movwf	??___ftpack& (0+255),c
  8860  00128A  0E00               	movlw	0
  8861  00128C  1412               	andwf	___ftpack@arg+1,w,c
  8862  00128E  6E17               	movwf	(??___ftpack+1)& (0+255),c
  8863  001290  0EFE               	movlw	254
  8864  001292  1413               	andwf	___ftpack@arg+2,w,c
  8865  001294  6E18               	movwf	(??___ftpack+2)& (0+255),c
  8866  001296  5016               	movf	??___ftpack,w,c
  8867  001298  1017               	iorwf	??___ftpack+1,w,c
  8868  00129A  1018               	iorwf	??___ftpack+2,w,c
  8869  00129C  B4D8               	btfsc	status,2,c
  8870  00129E  D00E               	goto	l5039
  8871  0012A0  D7EB               	goto	l5031
  8872  0012A2  D00C               	goto	l5039
  8873  0012A4                     l5035:
  8874  0012A4  2A14               	incf	___ftpack@exp,f,c
  8875  0012A6  0E01               	movlw	1
  8876  0012A8  2611               	addwf	___ftpack@arg,f,c
  8877  0012AA  0E00               	movlw	0
  8878  0012AC  2212               	addwfc	___ftpack@arg+1,f,c
  8879  0012AE  0E00               	movlw	0
  8880  0012B0  2213               	addwfc	___ftpack@arg+2,f,c
  8881  0012B2  90D8               	bcf	status,0,c
  8882  0012B4  3213               	rrcf	___ftpack@arg+2,f,c
  8883  0012B6  3212               	rrcf	___ftpack@arg+1,f,c
  8884  0012B8  3211               	rrcf	___ftpack@arg,f,c
  8885  0012BA  D000               	goto	l5039
  8886  0012BC                     l5039:
  8887  0012BC  0E00               	movlw	0
  8888  0012BE  1411               	andwf	___ftpack@arg,w,c
  8889  0012C0  6E16               	movwf	??___ftpack& (0+255),c
  8890  0012C2  0E00               	movlw	0
  8891  0012C4  1412               	andwf	___ftpack@arg+1,w,c
  8892  0012C6  6E17               	movwf	(??___ftpack+1)& (0+255),c
  8893  0012C8  0EFF               	movlw	255
  8894  0012CA  1413               	andwf	___ftpack@arg+2,w,c
  8895  0012CC  6E18               	movwf	(??___ftpack+2)& (0+255),c
  8896  0012CE  5016               	movf	??___ftpack,w,c
  8897  0012D0  1017               	iorwf	??___ftpack+1,w,c
  8898  0012D2  1018               	iorwf	??___ftpack+2,w,c
  8899  0012D4  B4D8               	btfsc	status,2,c
  8900  0012D6  D008               	goto	l5043
  8901  0012D8  D7E5               	goto	l5035
  8902  0012DA  D006               	goto	l5043
  8903  0012DC                     l5041:
  8904  0012DC  0614               	decf	___ftpack@exp,f,c
  8905  0012DE  90D8               	bcf	status,0,c
  8906  0012E0  3611               	rlcf	___ftpack@arg,f,c
  8907  0012E2  3612               	rlcf	___ftpack@arg+1,f,c
  8908  0012E4  3613               	rlcf	___ftpack@arg+2,f,c
  8909  0012E6  D000               	goto	l5043
  8910  0012E8                     l5043:
  8911  0012E8  BE12               	btfsc	___ftpack@arg+1,7,c
  8912  0012EA  D004               	goto	l1186
  8913  0012EC  0E02               	movlw	2
  8914  0012EE  6014               	cpfslt	___ftpack@exp,c
  8915  0012F0  D7F5               	goto	l5041
  8916  0012F2  D000               	goto	l1186
  8917  0012F4                     l1186:
  8918  0012F4  B014               	btfsc	___ftpack@exp,0,c
  8919  0012F6  D002               	goto	l5049
  8920  0012F8  9E12               	bcf	___ftpack@arg+1,7,c
  8921  0012FA  D000               	goto	l5049
  8922  0012FC                     l5049:
  8923  0012FC  90D8               	bcf	status,0,c
  8924  0012FE  3214               	rrcf	___ftpack@exp,f,c
  8925  001300  5014               	movf	___ftpack@exp,w,c
  8926  001302  1213               	iorwf	___ftpack@arg+2,f,c
  8927  001304  5015               	movf	___ftpack@sign,w,c
  8928  001306  B4D8               	btfsc	status,2,c
  8929  001308  D002               	goto	l5055
  8930  00130A  8E13               	bsf	___ftpack@arg+2,7,c
  8931  00130C  D000               	goto	l5055
  8932  00130E                     l5055:
  8933  00130E  C011  F011         	movff	___ftpack@arg,?___ftpack
  8934  001312  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  8935  001316  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  8936  00131A  D000               	goto	l1175
  8937  00131C                     l1175:
  8938  00131C  0012               	return		;funcret
  8939  00131E                     __end_of___ftpack:
  8940                           	opt stack 0
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           intcon2	equ	0xFF1
  8949                           intcon3	equ	0xFF0
  8950                           postinc0	equ	0xFEE
  8951                           wreg	equ	0xFE8
  8952                           postdec1	equ	0xFE5
  8953                           fsr1l	equ	0xFE1
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           postdec2	equ	0xFDD
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           
  8961 ;; *************** function _Do_Beep *****************
  8962 ;; Defined at:
  8963 ;;		line 44 in file "utils.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;		None
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;		None
  8968 ;; Return value:  Size  Location     Type
  8969 ;;		None               void
  8970 ;; Registers used:
  8971 ;;		wreg, status,2, cstack
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;Total ram usage:        0 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:    5
  8984 ;; This function calls:
  8985 ;;		_Activate_Buzzer
  8986 ;;		_Deactivate_Buzzer
  8987 ;;		_Wait_One_Sec
  8988 ;; This function is called by:
  8989 ;;		_Increase_Speed
  8990 ;;		_Decrease_Speed
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           	psect	text50
  8995  001EB4                     __ptext50:
  8996                           	opt stack 0
  8997  001EB4                     _Do_Beep:
  8998                           	opt stack 24
  8999                           
  9000                           ;utils.c: 46: Activate_Buzzer();
  9001                           
  9002                           ;incstack = 0
  9003  001EB4  EC63  F00F         	call	_Activate_Buzzer	;wreg free
  9004                           
  9005                           ;utils.c: 47: Wait_One_Sec();
  9006  001EB8  ECBC  F00F         	call	_Wait_One_Sec	;wreg free
  9007                           
  9008                           ;utils.c: 48: Deactivate_Buzzer();
  9009  001EBC  ECCB  F00F         	call	_Deactivate_Buzzer	;wreg free
  9010                           
  9011                           ;utils.c: 49: Wait_One_Sec();
  9012  001EC0  ECBC  F00F         	call	_Wait_One_Sec	;wreg free
  9013  001EC4  0012               	return		;funcret
  9014  001EC6                     __end_of_Do_Beep:
  9015                           	opt stack 0
  9016                           tblptru	equ	0xFF8
  9017                           tblptrh	equ	0xFF7
  9018                           tblptrl	equ	0xFF6
  9019                           tablat	equ	0xFF5
  9020                           prodh	equ	0xFF4
  9021                           prodl	equ	0xFF3
  9022                           intcon	equ	0xFF2
  9023                           intcon2	equ	0xFF1
  9024                           intcon3	equ	0xFF0
  9025                           postinc0	equ	0xFEE
  9026                           wreg	equ	0xFE8
  9027                           postdec1	equ	0xFE5
  9028                           fsr1l	equ	0xFE1
  9029                           indf2	equ	0xFDF
  9030                           postinc2	equ	0xFDE
  9031                           postdec2	equ	0xFDD
  9032                           fsr2h	equ	0xFDA
  9033                           fsr2l	equ	0xFD9
  9034                           status	equ	0xFD8
  9035                           
  9036 ;; *************** function _Wait_One_Sec *****************
  9037 ;; Defined at:
  9038 ;;		line 38 in file "utils.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;		None
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;		None
  9043 ;; Return value:  Size  Location     Type
  9044 ;;		None               void
  9045 ;; Registers used:
  9046 ;;		wreg, status,2, cstack
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;Total ram usage:        0 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    4
  9059 ;; This function calls:
  9060 ;;		_Wait_Half_Second
  9061 ;; This function is called by:
  9062 ;;		_Do_Beep
  9063 ;;		_main
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text51
  9068  001F78                     __ptext51:
  9069                           	opt stack 0
  9070  001F78                     _Wait_One_Sec:
  9071                           	opt stack 26
  9072                           
  9073                           ;utils.c: 40: Wait_Half_Second();
  9074                           
  9075                           ;incstack = 0
  9076  001F78  EC02  F00F         	call	_Wait_Half_Second	;wreg free
  9077                           
  9078                           ;utils.c: 41: Wait_Half_Second();
  9079  001F7C  EC02  F00F         	call	_Wait_Half_Second	;wreg free
  9080  001F80  0012               	return		;funcret
  9081  001F82                     __end_of_Wait_One_Sec:
  9082                           	opt stack 0
  9083                           tblptru	equ	0xFF8
  9084                           tblptrh	equ	0xFF7
  9085                           tblptrl	equ	0xFF6
  9086                           tablat	equ	0xFF5
  9087                           prodh	equ	0xFF4
  9088                           prodl	equ	0xFF3
  9089                           intcon	equ	0xFF2
  9090                           intcon2	equ	0xFF1
  9091                           intcon3	equ	0xFF0
  9092                           postinc0	equ	0xFEE
  9093                           wreg	equ	0xFE8
  9094                           postdec1	equ	0xFE5
  9095                           fsr1l	equ	0xFE1
  9096                           indf2	equ	0xFDF
  9097                           postinc2	equ	0xFDE
  9098                           postdec2	equ	0xFDD
  9099                           fsr2h	equ	0xFDA
  9100                           fsr2l	equ	0xFD9
  9101                           status	equ	0xFD8
  9102                           
  9103 ;; *************** function _Wait_Half_Second *****************
  9104 ;; Defined at:
  9105 ;;		line 96 in file "utils.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;		None
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;		None
  9110 ;; Return value:  Size  Location     Type
  9111 ;;		None               void
  9112 ;; Registers used:
  9113 ;;		wreg, status,2
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;Total ram usage:        0 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    3
  9126 ;; This function calls:
  9127 ;;		Nothing
  9128 ;; This function is called by:
  9129 ;;		_Wait_One_Sec
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           	psect	text52
  9134  001E04                     __ptext52:
  9135                           	opt stack 0
  9136  001E04                     _Wait_Half_Second:
  9137                           	opt stack 26
  9138                           
  9139                           ;utils.c: 98: T0CON = 0x03;
  9140                           
  9141                           ;incstack = 0
  9142  001E04  0E03               	movlw	3
  9143  001E06  6ED5               	movwf	4053,c	;volatile
  9144                           
  9145                           ;utils.c: 99: TMR0L = 0xDB;
  9146  001E08  0EDB               	movlw	219
  9147  001E0A  6ED6               	movwf	4054,c	;volatile
  9148                           
  9149                           ;utils.c: 100: TMR0H = 0x0B;
  9150  001E0C  0E0B               	movlw	11
  9151  001E0E  6ED7               	movwf	4055,c	;volatile
  9152                           
  9153                           ;utils.c: 101: INTCONbits.TMR0IF = 0;
  9154  001E10  94F2               	bcf	intcon,2,c	;volatile
  9155                           
  9156                           ;utils.c: 102: T0CONbits.TMR0ON = 1;
  9157  001E12  8ED5               	bsf	4053,7,c	;volatile
  9158                           
  9159                           ;utils.c: 103: while (INTCONbits.TMR0IF == 0);
  9160  001E14  D000               	goto	l521
  9161  001E16                     l521:
  9162  001E16  A4F2               	btfss	intcon,2,c	;volatile
  9163  001E18  D7FE               	goto	l521
  9164                           
  9165                           ;utils.c: 104: T0CONbits.TMR0ON = 0;
  9166  001E1A  9ED5               	bcf	4053,7,c	;volatile
  9167  001E1C  0012               	return		;funcret
  9168  001E1E                     __end_of_Wait_Half_Second:
  9169                           	opt stack 0
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           prodh	equ	0xFF4
  9175                           prodl	equ	0xFF3
  9176                           intcon	equ	0xFF2
  9177                           intcon2	equ	0xFF1
  9178                           intcon3	equ	0xFF0
  9179                           postinc0	equ	0xFEE
  9180                           wreg	equ	0xFE8
  9181                           postdec1	equ	0xFE5
  9182                           fsr1l	equ	0xFE1
  9183                           indf2	equ	0xFDF
  9184                           postinc2	equ	0xFDE
  9185                           postdec2	equ	0xFDD
  9186                           fsr2h	equ	0xFDA
  9187                           fsr2l	equ	0xFD9
  9188                           status	equ	0xFD8
  9189                           
  9190 ;; *************** function _Deactivate_Buzzer *****************
  9191 ;; Defined at:
  9192 ;;		line 89 in file "utils.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;		None
  9197 ;; Return value:  Size  Location     Type
  9198 ;;		None               void
  9199 ;; Registers used:
  9200 ;;		wreg, status,2
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;Total ram usage:        0 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:    3
  9213 ;; This function calls:
  9214 ;;		Nothing
  9215 ;; This function is called by:
  9216 ;;		_Do_Beep
  9217 ;;		_main
  9218 ;; This function uses a non-reentrant model
  9219 ;;
  9220                           
  9221                           	psect	text53
  9222  001F96                     __ptext53:
  9223                           	opt stack 0
  9224  001F96                     _Deactivate_Buzzer:
  9225                           	opt stack 25
  9226                           
  9227                           ;utils.c: 91: CCP2CON = 0x0;
  9228                           
  9229                           ;incstack = 0
  9230  001F96  0E00               	movlw	0
  9231  001F98  6EBA               	movwf	4026,c	;volatile
  9232                           
  9233                           ;utils.c: 92: PORTCbits.RC1 = 0;
  9234  001F9A  9282               	bcf	3970,1,c	;volatile
  9235  001F9C  0012               	return		;funcret
  9236  001F9E                     __end_of_Deactivate_Buzzer:
  9237                           	opt stack 0
  9238                           tblptru	equ	0xFF8
  9239                           tblptrh	equ	0xFF7
  9240                           tblptrl	equ	0xFF6
  9241                           tablat	equ	0xFF5
  9242                           prodh	equ	0xFF4
  9243                           prodl	equ	0xFF3
  9244                           intcon	equ	0xFF2
  9245                           intcon2	equ	0xFF1
  9246                           intcon3	equ	0xFF0
  9247                           postinc0	equ	0xFEE
  9248                           wreg	equ	0xFE8
  9249                           postdec1	equ	0xFE5
  9250                           fsr1l	equ	0xFE1
  9251                           indf2	equ	0xFDF
  9252                           postinc2	equ	0xFDE
  9253                           postdec2	equ	0xFDD
  9254                           fsr2h	equ	0xFDA
  9255                           fsr2l	equ	0xFD9
  9256                           status	equ	0xFD8
  9257                           
  9258 ;; *************** function _Activate_Buzzer *****************
  9259 ;; Defined at:
  9260 ;;		line 66 in file "utils.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;		None
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;		None
  9265 ;; Return value:  Size  Location     Type
  9266 ;;		None               void
  9267 ;; Registers used:
  9268 ;;		wreg, status,2
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;Total ram usage:        0 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    3
  9281 ;; This function calls:
  9282 ;;		Nothing
  9283 ;; This function is called by:
  9284 ;;		_Do_Beep
  9285 ;;		_main
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           	psect	text54
  9290  001EC6                     __ptext54:
  9291                           	opt stack 0
  9292  001EC6                     _Activate_Buzzer:
  9293                           	opt stack 25
  9294                           
  9295                           ;utils.c: 68: PR2 = 0b11111001 ;
  9296                           
  9297                           ;incstack = 0
  9298  001EC6  0EF9               	movlw	249
  9299  001EC8  6ECB               	movwf	4043,c	;volatile
  9300                           
  9301                           ;utils.c: 69: T2CON = 0b00000101 ;
  9302  001ECA  0E05               	movlw	5
  9303  001ECC  6ECA               	movwf	4042,c	;volatile
  9304                           
  9305                           ;utils.c: 70: CCPR2L = 0b01001010 ;
  9306  001ECE  0E4A               	movlw	74
  9307  001ED0  6EBB               	movwf	4027,c	;volatile
  9308                           
  9309                           ;utils.c: 71: CCP2CON = 0b00111100 ;
  9310  001ED2  0E3C               	movlw	60
  9311  001ED4  6EBA               	movwf	4026,c	;volatile
  9312  001ED6  0012               	return		;funcret
  9313  001ED8                     __end_of_Activate_Buzzer:
  9314                           	opt stack 0
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           intcon	equ	0xFF2
  9322                           intcon2	equ	0xFF1
  9323                           intcon3	equ	0xFF0
  9324                           postinc0	equ	0xFEE
  9325                           wreg	equ	0xFE8
  9326                           postdec1	equ	0xFE5
  9327                           fsr1l	equ	0xFE1
  9328                           indf2	equ	0xFDF
  9329                           postinc2	equ	0xFDE
  9330                           postdec2	equ	0xFDD
  9331                           fsr2h	equ	0xFDA
  9332                           fsr2l	equ	0xFD9
  9333                           status	equ	0xFD8
  9334                           
  9335 ;; *************** function _DS3231_Setup_Time *****************
  9336 ;; Defined at:
  9337 ;;		line 79 in file "I2C_Support.c"
  9338 ;; Parameters:    Size  Location     Type
  9339 ;;		None
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;  Address         1   19[COMRAM] unsigned char 
  9342 ;;  Device          1   18[COMRAM] unsigned char 
  9343 ;; Return value:  Size  Location     Type
  9344 ;;		None               void
  9345 ;; Registers used:
  9346 ;;		wreg, status,2, status,0, cstack
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9355 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9356 ;;Total ram usage:        2 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    5
  9359 ;; This function calls:
  9360 ;;		_I2C_Start
  9361 ;;		_I2C_Stop
  9362 ;;		_I2C_Write
  9363 ;; This function is called by:
  9364 ;;		_main
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           	psect	text55
  9369  001708                     __ptext55:
  9370                           	opt stack 0
  9371  001708                     _DS3231_Setup_Time:
  9372                           	opt stack 25
  9373                           
  9374                           ;I2C_Support.c: 81: char Device = 0x68;
  9375                           
  9376                           ;incstack = 0
  9377  001708  0E68               	movlw	104
  9378  00170A  6E13               	movwf	DS3231_Setup_Time@Device,c
  9379                           
  9380                           ;I2C_Support.c: 82: char Address = 0x00;
  9381  00170C  0E00               	movlw	0
  9382  00170E  6E14               	movwf	DS3231_Setup_Time@Address,c
  9383                           
  9384                           ;I2C_Support.c: 83: second = 0x00;
  9385  001710  0E00               	movlw	0
  9386  001712  6E63               	movwf	_second,c
  9387                           
  9388                           ;I2C_Support.c: 84: minute = 0x15;
  9389  001714  0E15               	movlw	21
  9390  001716  6E60               	movwf	_minute,c
  9391                           
  9392                           ;I2C_Support.c: 85: hour = 0x7;
  9393  001718  0E07               	movlw	7
  9394  00171A  6E5F               	movwf	_hour,c
  9395                           
  9396                           ;I2C_Support.c: 86: dow = 0x04;
  9397  00171C  0E04               	movlw	4
  9398  00171E  6E5D               	movwf	_dow,c
  9399                           
  9400                           ;I2C_Support.c: 87: day = 0x07;
  9401  001720  0E07               	movlw	7
  9402  001722  6E5C               	movwf	_day,c
  9403                           
  9404                           ;I2C_Support.c: 88: month = 0x11;
  9405  001724  0E11               	movlw	17
  9406  001726  6E61               	movwf	_month,c
  9407                           
  9408                           ;I2C_Support.c: 89: year = 0x24;
  9409  001728  0E24               	movlw	36
  9410  00172A  6E6D               	movwf	_year,c
  9411                           
  9412                           ;I2C_Support.c: 90: I2C_Start();
  9413  00172C  EC7E  F00F         	call	_I2C_Start	;wreg free
  9414                           
  9415                           ;I2C_Support.c: 91: I2C_Write((Device << 1) | 0);
  9416  001730  5013               	movf	DS3231_Setup_Time@Device,w,c
  9417  001732  2413               	addwf	DS3231_Setup_Time@Device,w,c
  9418  001734  ECF9  F00D         	call	_I2C_Write
  9419                           
  9420                           ;I2C_Support.c: 92: I2C_Write(Address);
  9421  001738  5014               	movf	DS3231_Setup_Time@Address,w,c
  9422  00173A  ECF9  F00D         	call	_I2C_Write
  9423                           
  9424                           ;I2C_Support.c: 93: I2C_Write(second);
  9425  00173E  5063               	movf	_second,w,c
  9426  001740  ECF9  F00D         	call	_I2C_Write
  9427                           
  9428                           ;I2C_Support.c: 94: I2C_Write(minute);
  9429  001744  5060               	movf	_minute,w,c
  9430  001746  ECF9  F00D         	call	_I2C_Write
  9431                           
  9432                           ;I2C_Support.c: 95: I2C_Write(hour);
  9433  00174A  505F               	movf	_hour,w,c
  9434  00174C  ECF9  F00D         	call	_I2C_Write
  9435                           
  9436                           ;I2C_Support.c: 96: I2C_Write(dow);
  9437  001750  505D               	movf	_dow,w,c
  9438  001752  ECF9  F00D         	call	_I2C_Write
  9439                           
  9440                           ;I2C_Support.c: 97: I2C_Write(day);
  9441  001756  505C               	movf	_day,w,c
  9442  001758  ECF9  F00D         	call	_I2C_Write
  9443                           
  9444                           ;I2C_Support.c: 98: I2C_Write(month);
  9445  00175C  5061               	movf	_month,w,c
  9446  00175E  ECF9  F00D         	call	_I2C_Write
  9447                           
  9448                           ;I2C_Support.c: 99: I2C_Write(year);
  9449  001762  506D               	movf	_year,w,c
  9450  001764  ECF9  F00D         	call	_I2C_Write
  9451                           
  9452                           ;I2C_Support.c: 101: I2C_Stop();
  9453  001768  EC75  F00F         	call	_I2C_Stop	;wreg free
  9454  00176C  0012               	return		;funcret
  9455  00176E                     __end_of_DS3231_Setup_Time:
  9456                           	opt stack 0
  9457                           tblptru	equ	0xFF8
  9458                           tblptrh	equ	0xFF7
  9459                           tblptrl	equ	0xFF6
  9460                           tablat	equ	0xFF5
  9461                           prodh	equ	0xFF4
  9462                           prodl	equ	0xFF3
  9463                           intcon	equ	0xFF2
  9464                           intcon2	equ	0xFF1
  9465                           intcon3	equ	0xFF0
  9466                           postinc0	equ	0xFEE
  9467                           wreg	equ	0xFE8
  9468                           postdec1	equ	0xFE5
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           fsr2h	equ	0xFDA
  9474                           fsr2l	equ	0xFD9
  9475                           status	equ	0xFD8
  9476                           
  9477 ;; *************** function _DS3231_Read_Time *****************
  9478 ;; Defined at:
  9479 ;;		line 59 in file "I2C_Support.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;  Device          1   20[COMRAM] unsigned char 
  9484 ;;  Address         1   19[COMRAM] unsigned char 
  9485 ;;  Data_Ret        1    0        unsigned char 
  9486 ;; Return value:  Size  Location     Type
  9487 ;;		None               void
  9488 ;; Registers used:
  9489 ;;		wreg, status,2, status,0, cstack
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;Total ram usage:        2 bytes
  9500 ;; Hardware stack levels used:    1
  9501 ;; Hardware stack levels required when called:    6
  9502 ;; This function calls:
  9503 ;;		_I2C_ReStart
  9504 ;;		_I2C_Read
  9505 ;;		_I2C_Start
  9506 ;;		_I2C_Stop
  9507 ;;		_I2C_Write
  9508 ;; This function is called by:
  9509 ;;		_main
  9510 ;; This function uses a non-reentrant model
  9511 ;;
  9512                           
  9513                           	psect	text56
  9514  00176E                     __ptext56:
  9515                           	opt stack 0
  9516  00176E                     _DS3231_Read_Time:
  9517                           	opt stack 24
  9518                           
  9519                           ;I2C_Support.c: 61: char Device = 0x68;
  9520                           
  9521                           ;incstack = 0
  9522  00176E  0E68               	movlw	104
  9523  001770  6E15               	movwf	DS3231_Read_Time@Device,c
  9524                           
  9525                           ;I2C_Support.c: 62: char Address = 0x00;
  9526  001772  0E00               	movlw	0
  9527  001774  6E14               	movwf	DS3231_Read_Time@Address,c
  9528                           
  9529                           ;I2C_Support.c: 63: char Data_Ret;
  9530                           ;I2C_Support.c: 64: I2C_Start();
  9531  001776  EC7E  F00F         	call	_I2C_Start	;wreg free
  9532                           
  9533                           ;I2C_Support.c: 65: I2C_Write((Device << 1) | 0);
  9534  00177A  5015               	movf	DS3231_Read_Time@Device,w,c
  9535  00177C  2415               	addwf	DS3231_Read_Time@Device,w,c
  9536  00177E  ECF9  F00D         	call	_I2C_Write
  9537                           
  9538                           ;I2C_Support.c: 66: I2C_Write(Address);
  9539  001782  5014               	movf	DS3231_Read_Time@Address,w,c
  9540  001784  ECF9  F00D         	call	_I2C_Write
  9541                           
  9542                           ;I2C_Support.c: 67: I2C_ReStart();
  9543  001788  EC28  F00F         	call	_I2C_ReStart	;wreg free
  9544                           
  9545                           ;I2C_Support.c: 68: I2C_Write((Device << 1) | 1);
  9546  00178C  80D8               	bsf	status,0,c
  9547  00178E  3415               	rlcf	DS3231_Read_Time@Device,w,c
  9548  001790  ECF9  F00D         	call	_I2C_Write
  9549                           
  9550                           ;I2C_Support.c: 69: second = I2C_Read(1);
  9551  001794  0E01               	movlw	1
  9552  001796  EC78  F00D         	call	_I2C_Read
  9553  00179A  6E63               	movwf	_second,c
  9554                           
  9555                           ;I2C_Support.c: 70: minute = I2C_Read(1);
  9556  00179C  0E01               	movlw	1
  9557  00179E  EC78  F00D         	call	_I2C_Read
  9558  0017A2  6E60               	movwf	_minute,c
  9559                           
  9560                           ;I2C_Support.c: 71: hour = I2C_Read(1);
  9561  0017A4  0E01               	movlw	1
  9562  0017A6  EC78  F00D         	call	_I2C_Read
  9563  0017AA  6E5F               	movwf	_hour,c
  9564                           
  9565                           ;I2C_Support.c: 72: dow = I2C_Read(1);
  9566  0017AC  0E01               	movlw	1
  9567  0017AE  EC78  F00D         	call	_I2C_Read
  9568  0017B2  6E5D               	movwf	_dow,c
  9569                           
  9570                           ;I2C_Support.c: 73: day = I2C_Read(1);
  9571  0017B4  0E01               	movlw	1
  9572  0017B6  EC78  F00D         	call	_I2C_Read
  9573  0017BA  6E5C               	movwf	_day,c
  9574                           
  9575                           ;I2C_Support.c: 74: month = I2C_Read(1);
  9576  0017BC  0E01               	movlw	1
  9577  0017BE  EC78  F00D         	call	_I2C_Read
  9578  0017C2  6E61               	movwf	_month,c
  9579                           
  9580                           ;I2C_Support.c: 75: year = I2C_Read(0);
  9581  0017C4  0E00               	movlw	0
  9582  0017C6  EC78  F00D         	call	_I2C_Read
  9583  0017CA  6E6D               	movwf	_year,c
  9584                           
  9585                           ;I2C_Support.c: 76: I2C_Stop();
  9586  0017CC  EC75  F00F         	call	_I2C_Stop	;wreg free
  9587  0017D0  0012               	return		;funcret
  9588  0017D2                     __end_of_DS3231_Read_Time:
  9589                           	opt stack 0
  9590                           tblptru	equ	0xFF8
  9591                           tblptrh	equ	0xFF7
  9592                           tblptrl	equ	0xFF6
  9593                           tablat	equ	0xFF5
  9594                           prodh	equ	0xFF4
  9595                           prodl	equ	0xFF3
  9596                           intcon	equ	0xFF2
  9597                           intcon2	equ	0xFF1
  9598                           intcon3	equ	0xFF0
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           postdec1	equ	0xFE5
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           postdec2	equ	0xFDD
  9606                           fsr2h	equ	0xFDA
  9607                           fsr2l	equ	0xFD9
  9608                           status	equ	0xFD8
  9609                           
  9610 ;; *************** function _DS1621_Read_Temp *****************
  9611 ;; Defined at:
  9612 ;;		line 22 in file "I2C_Support.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;		None
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;  Device          1   21[COMRAM] unsigned char 
  9617 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  9618 ;;  Cmd             1   19[COMRAM] unsigned char 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      unsigned char 
  9621 ;; Registers used:
  9622 ;;		wreg, status,2, status,0, cstack
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;Total ram usage:        3 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    6
  9635 ;; This function calls:
  9636 ;;		_I2C_ReStart
  9637 ;;		_I2C_Read
  9638 ;;		_I2C_Start
  9639 ;;		_I2C_Stop
  9640 ;;		_I2C_Write
  9641 ;; This function is called by:
  9642 ;;		_main
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           	psect	text57
  9647  001C30                     __ptext57:
  9648                           	opt stack 0
  9649  001C30                     _DS1621_Read_Temp:
  9650                           	opt stack 24
  9651                           
  9652                           ;I2C_Support.c: 24: char Device = 0x48;
  9653                           
  9654                           ;incstack = 0
  9655  001C30  0E48               	movlw	72
  9656  001C32  6E16               	movwf	DS1621_Read_Temp@Device,c
  9657                           
  9658                           ;I2C_Support.c: 25: char Cmd = 0xAA;
  9659  001C34  0EAA               	movlw	170
  9660  001C36  6E14               	movwf	DS1621_Read_Temp@Cmd,c
  9661                           
  9662                           ;I2C_Support.c: 26: char Data_Ret;
  9663                           ;I2C_Support.c: 27: I2C_Start();
  9664  001C38  EC7E  F00F         	call	_I2C_Start	;wreg free
  9665                           
  9666                           ;I2C_Support.c: 28: I2C_Write((Device << 1) | 0);
  9667  001C3C  5016               	movf	DS1621_Read_Temp@Device,w,c
  9668  001C3E  2416               	addwf	DS1621_Read_Temp@Device,w,c
  9669  001C40  ECF9  F00D         	call	_I2C_Write
  9670                           
  9671                           ;I2C_Support.c: 29: I2C_Write(Cmd);
  9672  001C44  5014               	movf	DS1621_Read_Temp@Cmd,w,c
  9673  001C46  ECF9  F00D         	call	_I2C_Write
  9674                           
  9675                           ;I2C_Support.c: 30: I2C_ReStart();
  9676  001C4A  EC28  F00F         	call	_I2C_ReStart	;wreg free
  9677                           
  9678                           ;I2C_Support.c: 31: I2C_Write((Device << 1) | 1);
  9679  001C4E  80D8               	bsf	status,0,c
  9680  001C50  3416               	rlcf	DS1621_Read_Temp@Device,w,c
  9681  001C52  ECF9  F00D         	call	_I2C_Write
  9682                           
  9683                           ;I2C_Support.c: 32: Data_Ret = I2C_Read(0);
  9684  001C56  0E00               	movlw	0
  9685  001C58  EC78  F00D         	call	_I2C_Read
  9686  001C5C  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
  9687                           
  9688                           ;I2C_Support.c: 33: I2C_Stop();
  9689  001C5E  EC75  F00F         	call	_I2C_Stop	;wreg free
  9690                           
  9691                           ;I2C_Support.c: 34: return Data_Ret;
  9692  001C62  5015               	movf	DS1621_Read_Temp@Data_Ret,w,c
  9693  001C64  D000               	goto	l106
  9694  001C66                     l106:
  9695  001C66  0012               	return		;funcret
  9696  001C68                     __end_of_DS1621_Read_Temp:
  9697                           	opt stack 0
  9698                           tblptru	equ	0xFF8
  9699                           tblptrh	equ	0xFF7
  9700                           tblptrl	equ	0xFF6
  9701                           tablat	equ	0xFF5
  9702                           prodh	equ	0xFF4
  9703                           prodl	equ	0xFF3
  9704                           intcon	equ	0xFF2
  9705                           intcon2	equ	0xFF1
  9706                           intcon3	equ	0xFF0
  9707                           postinc0	equ	0xFEE
  9708                           wreg	equ	0xFE8
  9709                           postdec1	equ	0xFE5
  9710                           fsr1l	equ	0xFE1
  9711                           indf2	equ	0xFDF
  9712                           postinc2	equ	0xFDE
  9713                           postdec2	equ	0xFDD
  9714                           fsr2h	equ	0xFDA
  9715                           fsr2l	equ	0xFD9
  9716                           status	equ	0xFD8
  9717                           
  9718 ;; *************** function _I2C_Read *****************
  9719 ;; Defined at:
  9720 ;;		line 16 in file "I2C_Soft.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;  ack             1    wreg     unsigned char 
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;  ack             1   16[COMRAM] unsigned char 
  9725 ;;  inByte          1   18[COMRAM] unsigned char 
  9726 ;;  n               1   17[COMRAM] unsigned char 
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  1    wreg      unsigned char 
  9729 ;; Registers used:
  9730 ;;		wreg, status,2, status,0, cstack
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;Total ram usage:        3 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    5
  9743 ;; This function calls:
  9744 ;;		_i2cAck
  9745 ;;		_i2cHighScl
  9746 ;;		_i2cHighSda
  9747 ;;		_i2cLowScl
  9748 ;;		_i2cNack
  9749 ;; This function is called by:
  9750 ;;		_DS1621_Read_Temp
  9751 ;;		_DS3231_Read_Time
  9752 ;;		_DS1621_Read_Temp_Bad
  9753 ;;		_I2C_Write_Address_Read_One_Byte
  9754 ;;		_I2C_Write_Cmd_Read_One_Byte
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           	psect	text58
  9759  001AF0                     __ptext58:
  9760                           	opt stack 0
  9761  001AF0                     _I2C_Read:
  9762                           	opt stack 24
  9763                           
  9764                           ;incstack = 0
  9765                           ;I2C_Read@ack stored from wreg
  9766  001AF0  6E11               	movwf	I2C_Read@ack,c
  9767                           
  9768                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  9769                           ;I2C_Soft.c: 19: i2cHighSda();
  9770  001AF2  ECD3  F00F         	call	_i2cHighSda	;wreg free
  9771                           
  9772                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  9773  001AF6  0E00               	movlw	0
  9774  001AF8  6E12               	movwf	I2C_Read@n,c
  9775  001AFA                     l5533:
  9776  001AFA  0E07               	movlw	7
  9777  001AFC  6412               	cpfsgt	I2C_Read@n,c
  9778  001AFE  D001               	goto	l5537
  9779  001B00  D00F               	goto	l5551
  9780  001B02                     l5537:
  9781                           
  9782                           ;I2C_Soft.c: 21: {
  9783                           ;I2C_Soft.c: 22: i2cHighScl();
  9784  001B02  ECA6  F00F         	call	_i2cHighScl	;wreg free
  9785                           
  9786                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
  9787  001B06  AA81               	btfss	3969,5,c	;volatile
  9788  001B08  D003               	goto	l5543
  9789                           
  9790                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  9791  001B0A  80D8               	bsf	status,0,c
  9792  001B0C  3613               	rlcf	I2C_Read@inByte,f,c
  9793  001B0E  D004               	goto	l5545
  9794  001B10                     l5543:
  9795                           
  9796                           ;I2C_Soft.c: 26: else
  9797                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  9798  001B10  5013               	movf	I2C_Read@inByte,w,c
  9799  001B12  2413               	addwf	I2C_Read@inByte,w,c
  9800  001B14  6E13               	movwf	I2C_Read@inByte,c
  9801  001B16  D000               	goto	l5545
  9802  001B18                     l5545:
  9803                           
  9804                           ;I2C_Soft.c: 28: i2cLowScl();
  9805  001B18  ECCF  F00F         	call	_i2cLowScl	;wreg free
  9806  001B1C  2A12               	incf	I2C_Read@n,f,c
  9807  001B1E  D7ED               	goto	l5533
  9808  001B20                     l5551:
  9809                           
  9810                           ;I2C_Soft.c: 29: }
  9811                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  9812  001B20  5011               	movf	I2C_Read@ack,w,c
  9813  001B22  B4D8               	btfsc	status,2,c
  9814  001B24  D003               	goto	l5555
  9815  001B26  EC6C  F00F         	call	_i2cAck	;wreg free
  9816  001B2A  D003               	goto	l5557
  9817  001B2C                     l5555:
  9818                           
  9819                           ;I2C_Soft.c: 31: else i2cNack();
  9820  001B2C  ECC1  F00F         	call	_i2cNack	;wreg free
  9821  001B30  D000               	goto	l5557
  9822  001B32                     l5557:
  9823                           
  9824                           ;I2C_Soft.c: 34: return(inByte);
  9825  001B32  5013               	movf	I2C_Read@inByte,w,c
  9826  001B34  D000               	goto	l148
  9827  001B36                     l148:
  9828  001B36  0012               	return		;funcret
  9829  001B38                     __end_of_I2C_Read:
  9830                           	opt stack 0
  9831                           tblptru	equ	0xFF8
  9832                           tblptrh	equ	0xFF7
  9833                           tblptrl	equ	0xFF6
  9834                           tablat	equ	0xFF5
  9835                           prodh	equ	0xFF4
  9836                           prodl	equ	0xFF3
  9837                           intcon	equ	0xFF2
  9838                           intcon2	equ	0xFF1
  9839                           intcon3	equ	0xFF0
  9840                           postinc0	equ	0xFEE
  9841                           wreg	equ	0xFE8
  9842                           postdec1	equ	0xFE5
  9843                           fsr1l	equ	0xFE1
  9844                           indf2	equ	0xFDF
  9845                           postinc2	equ	0xFDE
  9846                           postdec2	equ	0xFDD
  9847                           fsr2h	equ	0xFDA
  9848                           fsr2l	equ	0xFD9
  9849                           status	equ	0xFD8
  9850                           
  9851 ;; *************** function _i2cNack *****************
  9852 ;; Defined at:
  9853 ;;		line 53 in file "I2C_Soft.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;		None
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;		None
  9858 ;; Return value:  Size  Location     Type
  9859 ;;		None               void
  9860 ;; Registers used:
  9861 ;;		wreg, cstack
  9862 ;; Tracked objects:
  9863 ;;		On entry : 0/0
  9864 ;;		On exit  : 0/0
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9871 ;;Total ram usage:        0 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; Hardware stack levels required when called:    4
  9874 ;; This function calls:
  9875 ;;		_i2cHighScl
  9876 ;;		_i2cLowScl
  9877 ;; This function is called by:
  9878 ;;		_I2C_Read
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text59
  9883  001F82                     __ptext59:
  9884                           	opt stack 0
  9885  001F82                     _i2cNack:
  9886                           	opt stack 24
  9887                           
  9888                           ;I2C_Soft.c: 55: i2cHighScl();
  9889                           
  9890                           ;incstack = 0
  9891  001F82  ECA6  F00F         	call	_i2cHighScl	;wreg free
  9892                           
  9893                           ;I2C_Soft.c: 56: i2cLowScl();
  9894  001F86  ECCF  F00F         	call	_i2cLowScl	;wreg free
  9895  001F8A  0012               	return		;funcret
  9896  001F8C                     __end_of_i2cNack:
  9897                           	opt stack 0
  9898                           tblptru	equ	0xFF8
  9899                           tblptrh	equ	0xFF7
  9900                           tblptrl	equ	0xFF6
  9901                           tablat	equ	0xFF5
  9902                           prodh	equ	0xFF4
  9903                           prodl	equ	0xFF3
  9904                           intcon	equ	0xFF2
  9905                           intcon2	equ	0xFF1
  9906                           intcon3	equ	0xFF0
  9907                           postinc0	equ	0xFEE
  9908                           wreg	equ	0xFE8
  9909                           postdec1	equ	0xFE5
  9910                           fsr1l	equ	0xFE1
  9911                           indf2	equ	0xFDF
  9912                           postinc2	equ	0xFDE
  9913                           postdec2	equ	0xFDD
  9914                           fsr2h	equ	0xFDA
  9915                           fsr2l	equ	0xFD9
  9916                           status	equ	0xFD8
  9917                           
  9918 ;; *************** function _i2cAck *****************
  9919 ;; Defined at:
  9920 ;;		line 59 in file "I2C_Soft.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;		None
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;		None
  9925 ;; Return value:  Size  Location     Type
  9926 ;;		None               void
  9927 ;; Registers used:
  9928 ;;		wreg, cstack
  9929 ;; Tracked objects:
  9930 ;;		On entry : 0/0
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;Total ram usage:        0 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    4
  9941 ;; This function calls:
  9942 ;;		_i2cHighScl
  9943 ;;		_i2cHighSda
  9944 ;;		_i2cLowScl
  9945 ;;		_i2cLowSda
  9946 ;; This function is called by:
  9947 ;;		_I2C_Read
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           	psect	text60
  9952  001ED8                     __ptext60:
  9953                           	opt stack 0
  9954  001ED8                     _i2cAck:
  9955                           	opt stack 24
  9956                           
  9957                           ;I2C_Soft.c: 61: i2cLowSda();
  9958                           
  9959                           ;incstack = 0
  9960  001ED8  ECC6  F00F         	call	_i2cLowSda	;wreg free
  9961                           
  9962                           ;I2C_Soft.c: 62: i2cHighScl();
  9963  001EDC  ECA6  F00F         	call	_i2cHighScl	;wreg free
  9964                           
  9965                           ;I2C_Soft.c: 63: i2cLowScl();
  9966  001EE0  ECCF  F00F         	call	_i2cLowScl	;wreg free
  9967                           
  9968                           ;I2C_Soft.c: 64: i2cHighSda();
  9969  001EE4  ECD3  F00F         	call	_i2cHighSda	;wreg free
  9970  001EE8  0012               	return		;funcret
  9971  001EEA                     __end_of_i2cAck:
  9972                           	opt stack 0
  9973                           tblptru	equ	0xFF8
  9974                           tblptrh	equ	0xFF7
  9975                           tblptrl	equ	0xFF6
  9976                           tablat	equ	0xFF5
  9977                           prodh	equ	0xFF4
  9978                           prodl	equ	0xFF3
  9979                           intcon	equ	0xFF2
  9980                           intcon2	equ	0xFF1
  9981                           intcon3	equ	0xFF0
  9982                           postinc0	equ	0xFEE
  9983                           wreg	equ	0xFE8
  9984                           postdec1	equ	0xFE5
  9985                           fsr1l	equ	0xFE1
  9986                           indf2	equ	0xFDF
  9987                           postinc2	equ	0xFDE
  9988                           postdec2	equ	0xFDD
  9989                           fsr2h	equ	0xFDA
  9990                           fsr2l	equ	0xFD9
  9991                           status	equ	0xFD8
  9992                           
  9993 ;; *************** function _I2C_ReStart *****************
  9994 ;; Defined at:
  9995 ;;		line 75 in file "I2C_Soft.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;		None
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;		None               void
 10002 ;; Registers used:
 10003 ;;		wreg, cstack
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;Total ram usage:        0 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    4
 10016 ;; This function calls:
 10017 ;;		_i2cHighScl
 10018 ;;		_i2cHighSda
 10019 ;;		_i2cLowScl
 10020 ;;		_i2cLowSda
 10021 ;; This function is called by:
 10022 ;;		_DS1621_Read_Temp
 10023 ;;		_DS3231_Read_Time
 10024 ;;		_DS1621_Read_Temp_Bad
 10025 ;;		_I2C_Write_Address_Read_One_Byte
 10026 ;;		_I2C_Write_Cmd_Read_One_Byte
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text61
 10031  001E50                     __ptext61:
 10032                           	opt stack 0
 10033  001E50                     _I2C_ReStart:
 10034                           	opt stack 25
 10035                           
 10036                           ;I2C_Soft.c: 77: i2cLowScl();
 10037                           
 10038                           ;incstack = 0
 10039  001E50  ECCF  F00F         	call	_i2cLowScl	;wreg free
 10040                           
 10041                           ;I2C_Soft.c: 78: i2cHighSda();
 10042  001E54  ECD3  F00F         	call	_i2cHighSda	;wreg free
 10043                           
 10044                           ;I2C_Soft.c: 79: i2cHighScl();
 10045  001E58  ECA6  F00F         	call	_i2cHighScl	;wreg free
 10046                           
 10047                           ;I2C_Soft.c: 80: i2cLowSda();
 10048  001E5C  ECC6  F00F         	call	_i2cLowSda	;wreg free
 10049                           
 10050                           ;I2C_Soft.c: 81: i2cLowScl();
 10051  001E60  ECCF  F00F         	call	_i2cLowScl	;wreg free
 10052  001E64  0012               	return		;funcret
 10053  001E66                     __end_of_I2C_ReStart:
 10054                           	opt stack 0
 10055                           tblptru	equ	0xFF8
 10056                           tblptrh	equ	0xFF7
 10057                           tblptrl	equ	0xFF6
 10058                           tablat	equ	0xFF5
 10059                           prodh	equ	0xFF4
 10060                           prodl	equ	0xFF3
 10061                           intcon	equ	0xFF2
 10062                           intcon2	equ	0xFF1
 10063                           intcon3	equ	0xFF0
 10064                           postinc0	equ	0xFEE
 10065                           wreg	equ	0xFE8
 10066                           postdec1	equ	0xFE5
 10067                           fsr1l	equ	0xFE1
 10068                           indf2	equ	0xFDF
 10069                           postinc2	equ	0xFDE
 10070                           postdec2	equ	0xFDD
 10071                           fsr2h	equ	0xFDA
 10072                           fsr2l	equ	0xFD9
 10073                           status	equ	0xFD8
 10074                           
 10075 ;; *************** function _DS1621_Init *****************
 10076 ;; Defined at:
 10077 ;;		line 52 in file "I2C_Support.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;  Device          1   21[COMRAM] unsigned char 
 10082 ;; Return value:  Size  Location     Type
 10083 ;;		None               void
 10084 ;; Registers used:
 10085 ;;		wreg, status,2, status,0, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;Total ram usage:        1 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    6
 10098 ;; This function calls:
 10099 ;;		_I2C_Write_Cmd_Only
 10100 ;;		_I2C_Write_Cmd_Write_Data
 10101 ;; This function is called by:
 10102 ;;		_main
 10103 ;; This function uses a non-reentrant model
 10104 ;;
 10105                           
 10106                           	psect	text62
 10107  001DCA                     __ptext62:
 10108                           	opt stack 0
 10109  001DCA                     _DS1621_Init:
 10110                           	opt stack 24
 10111                           
 10112                           ;I2C_Support.c: 54: char Device = 0x48;
 10113                           
 10114                           ;incstack = 0
 10115  001DCA  0E48               	movlw	72
 10116  001DCC  6E16               	movwf	DS1621_Init@Device,c
 10117                           
 10118                           ;I2C_Support.c: 55: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
 10119  001DCE  0EAC               	movlw	172
 10120  001DD0  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 10121  001DD2  0E02               	movlw	2
 10122  001DD4  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 10123  001DD6  5016               	movf	DS1621_Init@Device,w,c
 10124  001DD8  ECD5  F00E         	call	_I2C_Write_Cmd_Write_Data
 10125                           
 10126                           ;I2C_Support.c: 56: I2C_Write_Cmd_Only(Device, 0xEE);
 10127  001DDC  0EEE               	movlw	238
 10128  001DDE  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 10129  001DE0  5016               	movf	DS1621_Init@Device,w,c
 10130  001DE2  EC0F  F00F         	call	_I2C_Write_Cmd_Only
 10131  001DE6  0012               	return		;funcret
 10132  001DE8                     __end_of_DS1621_Init:
 10133                           	opt stack 0
 10134                           tblptru	equ	0xFF8
 10135                           tblptrh	equ	0xFF7
 10136                           tblptrl	equ	0xFF6
 10137                           tablat	equ	0xFF5
 10138                           prodh	equ	0xFF4
 10139                           prodl	equ	0xFF3
 10140                           intcon	equ	0xFF2
 10141                           intcon2	equ	0xFF1
 10142                           intcon3	equ	0xFF0
 10143                           postinc0	equ	0xFEE
 10144                           wreg	equ	0xFE8
 10145                           postdec1	equ	0xFE5
 10146                           fsr1l	equ	0xFE1
 10147                           indf2	equ	0xFDF
 10148                           postinc2	equ	0xFDE
 10149                           postdec2	equ	0xFDD
 10150                           fsr2h	equ	0xFDA
 10151                           fsr2l	equ	0xFD9
 10152                           status	equ	0xFD8
 10153                           
 10154 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 10155 ;; Defined at:
 10156 ;;		line 148 in file "I2C_Soft.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;  Device          1    wreg     unsigned char 
 10159 ;;  Cmd             1   18[COMRAM] unsigned char 
 10160 ;;  Data_Out        1   19[COMRAM] unsigned char 
 10161 ;; Auto vars:     Size  Location     Type
 10162 ;;  Device          1   20[COMRAM] unsigned char 
 10163 ;; Return value:  Size  Location     Type
 10164 ;;		None               void
 10165 ;; Registers used:
 10166 ;;		wreg, status,2, status,0, cstack
 10167 ;; Tracked objects:
 10168 ;;		On entry : 0/0
 10169 ;;		On exit  : 0/0
 10170 ;;		Unchanged: 0/0
 10171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10175 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10176 ;;Total ram usage:        3 bytes
 10177 ;; Hardware stack levels used:    1
 10178 ;; Hardware stack levels required when called:    5
 10179 ;; This function calls:
 10180 ;;		_I2C_Start
 10181 ;;		_I2C_Stop
 10182 ;;		_I2C_Write
 10183 ;; This function is called by:
 10184 ;;		_DS1621_Init
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           	psect	text63
 10189  001DAA                     __ptext63:
 10190                           	opt stack 0
 10191  001DAA                     _I2C_Write_Cmd_Write_Data:
 10192                           	opt stack 24
 10193                           
 10194                           ;incstack = 0
 10195                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 10196  001DAA  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 10197                           
 10198                           ;I2C_Soft.c: 150: I2C_Start();
 10199  001DAC  EC7E  F00F         	call	_I2C_Start	;wreg free
 10200                           
 10201                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 10202  001DB0  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 10203  001DB2  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 10204  001DB4  ECF9  F00D         	call	_I2C_Write
 10205                           
 10206                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 10207  001DB8  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 10208  001DBA  ECF9  F00D         	call	_I2C_Write
 10209                           
 10210                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 10211  001DBE  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 10212  001DC0  ECF9  F00D         	call	_I2C_Write
 10213                           
 10214                           ;I2C_Soft.c: 154: I2C_Stop();
 10215  001DC4  EC75  F00F         	call	_I2C_Stop	;wreg free
 10216  001DC8  0012               	return		;funcret
 10217  001DCA                     __end_of_I2C_Write_Cmd_Write_Data:
 10218                           	opt stack 0
 10219                           tblptru	equ	0xFF8
 10220                           tblptrh	equ	0xFF7
 10221                           tblptrl	equ	0xFF6
 10222                           tablat	equ	0xFF5
 10223                           prodh	equ	0xFF4
 10224                           prodl	equ	0xFF3
 10225                           intcon	equ	0xFF2
 10226                           intcon2	equ	0xFF1
 10227                           intcon3	equ	0xFF0
 10228                           postinc0	equ	0xFEE
 10229                           wreg	equ	0xFE8
 10230                           postdec1	equ	0xFE5
 10231                           fsr1l	equ	0xFE1
 10232                           indf2	equ	0xFDF
 10233                           postinc2	equ	0xFDE
 10234                           postdec2	equ	0xFDD
 10235                           fsr2h	equ	0xFDA
 10236                           fsr2l	equ	0xFD9
 10237                           status	equ	0xFD8
 10238                           
 10239 ;; *************** function _I2C_Write_Cmd_Only *****************
 10240 ;; Defined at:
 10241 ;;		line 140 in file "I2C_Soft.c"
 10242 ;; Parameters:    Size  Location     Type
 10243 ;;  Device          1    wreg     unsigned char 
 10244 ;;  Cmd             1   18[COMRAM] unsigned char 
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;  Device          1   19[COMRAM] unsigned char 
 10247 ;; Return value:  Size  Location     Type
 10248 ;;		None               void
 10249 ;; Registers used:
 10250 ;;		wreg, status,2, status,0, cstack
 10251 ;; Tracked objects:
 10252 ;;		On entry : 0/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10256 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;Total ram usage:        2 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; Hardware stack levels required when called:    5
 10263 ;; This function calls:
 10264 ;;		_I2C_Start
 10265 ;;		_I2C_Stop
 10266 ;;		_I2C_Write
 10267 ;; This function is called by:
 10268 ;;		_DS1621_Init
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           	psect	text64
 10273  001E1E                     __ptext64:
 10274                           	opt stack 0
 10275  001E1E                     _I2C_Write_Cmd_Only:
 10276                           	opt stack 24
 10277                           
 10278                           ;incstack = 0
 10279                           ;I2C_Write_Cmd_Only@Device stored from wreg
 10280  001E1E  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 10281                           
 10282                           ;I2C_Soft.c: 142: I2C_Start();
 10283  001E20  EC7E  F00F         	call	_I2C_Start	;wreg free
 10284                           
 10285                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 10286  001E24  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 10287  001E26  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 10288  001E28  ECF9  F00D         	call	_I2C_Write
 10289                           
 10290                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 10291  001E2C  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 10292  001E2E  ECF9  F00D         	call	_I2C_Write
 10293                           
 10294                           ;I2C_Soft.c: 145: I2C_Stop();
 10295  001E32  EC75  F00F         	call	_I2C_Stop	;wreg free
 10296  001E36  0012               	return		;funcret
 10297  001E38                     __end_of_I2C_Write_Cmd_Only:
 10298                           	opt stack 0
 10299                           tblptru	equ	0xFF8
 10300                           tblptrh	equ	0xFF7
 10301                           tblptrl	equ	0xFF6
 10302                           tablat	equ	0xFF5
 10303                           prodh	equ	0xFF4
 10304                           prodl	equ	0xFF3
 10305                           intcon	equ	0xFF2
 10306                           intcon2	equ	0xFF1
 10307                           intcon3	equ	0xFF0
 10308                           postinc0	equ	0xFEE
 10309                           wreg	equ	0xFE8
 10310                           postdec1	equ	0xFE5
 10311                           fsr1l	equ	0xFE1
 10312                           indf2	equ	0xFDF
 10313                           postinc2	equ	0xFDE
 10314                           postdec2	equ	0xFDD
 10315                           fsr2h	equ	0xFDA
 10316                           fsr2l	equ	0xFD9
 10317                           status	equ	0xFD8
 10318                           
 10319 ;; *************** function _I2C_Write *****************
 10320 ;; Defined at:
 10321 ;;		line 37 in file "I2C_Soft.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;  outByte         1    wreg     unsigned char 
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;  outByte         1   16[COMRAM] unsigned char 
 10326 ;;  n               1   17[COMRAM] unsigned char 
 10327 ;; Return value:  Size  Location     Type
 10328 ;;		None               void
 10329 ;; Registers used:
 10330 ;;		wreg, status,2, status,0, cstack
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10337 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;Total ram usage:        2 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; Hardware stack levels required when called:    4
 10343 ;; This function calls:
 10344 ;;		_i2cHighScl
 10345 ;;		_i2cHighSda
 10346 ;;		_i2cLowScl
 10347 ;;		_i2cLowSda
 10348 ;; This function is called by:
 10349 ;;		_DS1621_Read_Temp
 10350 ;;		_DS3231_Read_Time
 10351 ;;		_DS3231_Setup_Time
 10352 ;;		_I2C_Write_Cmd_Only
 10353 ;;		_I2C_Write_Cmd_Write_Data
 10354 ;;		_DS1621_Read_Temp_Bad
 10355 ;;		_I2C_Write_Address_Read_One_Byte
 10356 ;;		_I2C_Write_Address_Write_One_Byte
 10357 ;;		_I2C_Write_Cmd_Read_One_Byte
 10358 ;; This function uses a non-reentrant model
 10359 ;;
 10360                           
 10361                           	psect	text65
 10362  001BF2                     __ptext65:
 10363                           	opt stack 0
 10364  001BF2                     _I2C_Write:
 10365                           	opt stack 25
 10366                           
 10367                           ;incstack = 0
 10368                           ;I2C_Write@outByte stored from wreg
 10369  001BF2  6E11               	movwf	I2C_Write@outByte,c
 10370                           
 10371                           ;I2C_Soft.c: 39: unsigned char n;
 10372                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 10373  001BF4  0E00               	movlw	0
 10374  001BF6  6E12               	movwf	I2C_Write@n,c
 10375  001BF8                     l5261:
 10376  001BF8  0E07               	movlw	7
 10377  001BFA  6412               	cpfsgt	I2C_Write@n,c
 10378  001BFC  D001               	goto	l151
 10379  001BFE  D011               	goto	l5279
 10380  001C00                     l151:
 10381                           
 10382                           ;I2C_Soft.c: 41: {
 10383                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 10384  001C00  AE11               	btfss	I2C_Write@outByte,7,c
 10385  001C02  D003               	goto	l5267
 10386  001C04  ECD3  F00F         	call	_i2cHighSda	;wreg free
 10387  001C08  D003               	goto	l5269
 10388  001C0A                     l5267:
 10389                           
 10390                           ;I2C_Soft.c: 43: else i2cLowSda();
 10391  001C0A  ECC6  F00F         	call	_i2cLowSda	;wreg free
 10392  001C0E  D000               	goto	l5269
 10393  001C10                     l5269:
 10394                           
 10395                           ;I2C_Soft.c: 44: i2cHighScl();
 10396  001C10  ECA6  F00F         	call	_i2cHighScl	;wreg free
 10397                           
 10398                           ;I2C_Soft.c: 45: i2cLowScl();
 10399  001C14  ECCF  F00F         	call	_i2cLowScl	;wreg free
 10400                           
 10401                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 10402  001C18  5011               	movf	I2C_Write@outByte,w,c
 10403  001C1A  2411               	addwf	I2C_Write@outByte,w,c
 10404  001C1C  6E11               	movwf	I2C_Write@outByte,c
 10405  001C1E  2A12               	incf	I2C_Write@n,f,c
 10406  001C20  D7EB               	goto	l5261
 10407  001C22                     l5279:
 10408                           
 10409                           ;I2C_Soft.c: 47: }
 10410                           ;I2C_Soft.c: 48: i2cHighSda();
 10411  001C22  ECD3  F00F         	call	_i2cHighSda	;wreg free
 10412                           
 10413                           ;I2C_Soft.c: 49: i2cHighScl();
 10414  001C26  ECA6  F00F         	call	_i2cHighScl	;wreg free
 10415                           
 10416                           ;I2C_Soft.c: 50: i2cLowScl();
 10417  001C2A  ECCF  F00F         	call	_i2cLowScl	;wreg free
 10418  001C2E  0012               	return		;funcret
 10419  001C30                     __end_of_I2C_Write:
 10420                           	opt stack 0
 10421                           tblptru	equ	0xFF8
 10422                           tblptrh	equ	0xFF7
 10423                           tblptrl	equ	0xFF6
 10424                           tablat	equ	0xFF5
 10425                           prodh	equ	0xFF4
 10426                           prodl	equ	0xFF3
 10427                           intcon	equ	0xFF2
 10428                           intcon2	equ	0xFF1
 10429                           intcon3	equ	0xFF0
 10430                           postinc0	equ	0xFEE
 10431                           wreg	equ	0xFE8
 10432                           postdec1	equ	0xFE5
 10433                           fsr1l	equ	0xFE1
 10434                           indf2	equ	0xFDF
 10435                           postinc2	equ	0xFDE
 10436                           postdec2	equ	0xFDD
 10437                           fsr2h	equ	0xFDA
 10438                           fsr2l	equ	0xFD9
 10439                           status	equ	0xFD8
 10440                           
 10441 ;; *************** function _I2C_Stop *****************
 10442 ;; Defined at:
 10443 ;;		line 84 in file "I2C_Soft.c"
 10444 ;; Parameters:    Size  Location     Type
 10445 ;;		None
 10446 ;; Auto vars:     Size  Location     Type
 10447 ;;		None
 10448 ;; Return value:  Size  Location     Type
 10449 ;;		None               void
 10450 ;; Registers used:
 10451 ;;		wreg, cstack
 10452 ;; Tracked objects:
 10453 ;;		On entry : 0/0
 10454 ;;		On exit  : 0/0
 10455 ;;		Unchanged: 0/0
 10456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10461 ;;Total ram usage:        0 bytes
 10462 ;; Hardware stack levels used:    1
 10463 ;; Hardware stack levels required when called:    4
 10464 ;; This function calls:
 10465 ;;		_i2cHighScl
 10466 ;;		_i2cHighSda
 10467 ;;		_i2cLowScl
 10468 ;;		_i2cLowSda
 10469 ;; This function is called by:
 10470 ;;		_DS1621_Read_Temp
 10471 ;;		_DS3231_Read_Time
 10472 ;;		_DS3231_Setup_Time
 10473 ;;		_I2C_Write_Cmd_Only
 10474 ;;		_I2C_Write_Cmd_Write_Data
 10475 ;;		_DS1621_Read_Temp_Bad
 10476 ;;		_I2C_Write_Address_Read_One_Byte
 10477 ;;		_I2C_Write_Address_Write_One_Byte
 10478 ;;		_I2C_Write_Cmd_Read_One_Byte
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           	psect	text66
 10483  001EEA                     __ptext66:
 10484                           	opt stack 0
 10485  001EEA                     _I2C_Stop:
 10486                           	opt stack 25
 10487                           
 10488                           ;I2C_Soft.c: 86: i2cLowScl();
 10489                           
 10490                           ;incstack = 0
 10491  001EEA  ECCF  F00F         	call	_i2cLowScl	;wreg free
 10492                           
 10493                           ;I2C_Soft.c: 87: i2cLowSda();
 10494  001EEE  ECC6  F00F         	call	_i2cLowSda	;wreg free
 10495                           
 10496                           ;I2C_Soft.c: 88: i2cHighScl();
 10497  001EF2  ECA6  F00F         	call	_i2cHighScl	;wreg free
 10498                           
 10499                           ;I2C_Soft.c: 89: i2cHighSda();
 10500  001EF6  ECD3  F00F         	call	_i2cHighSda	;wreg free
 10501  001EFA  0012               	return		;funcret
 10502  001EFC                     __end_of_I2C_Stop:
 10503                           	opt stack 0
 10504                           tblptru	equ	0xFF8
 10505                           tblptrh	equ	0xFF7
 10506                           tblptrl	equ	0xFF6
 10507                           tablat	equ	0xFF5
 10508                           prodh	equ	0xFF4
 10509                           prodl	equ	0xFF3
 10510                           intcon	equ	0xFF2
 10511                           intcon2	equ	0xFF1
 10512                           intcon3	equ	0xFF0
 10513                           postinc0	equ	0xFEE
 10514                           wreg	equ	0xFE8
 10515                           postdec1	equ	0xFE5
 10516                           fsr1l	equ	0xFE1
 10517                           indf2	equ	0xFDF
 10518                           postinc2	equ	0xFDE
 10519                           postdec2	equ	0xFDD
 10520                           fsr2h	equ	0xFDA
 10521                           fsr2l	equ	0xFD9
 10522                           status	equ	0xFD8
 10523                           
 10524 ;; *************** function _I2C_Start *****************
 10525 ;; Defined at:
 10526 ;;		line 67 in file "I2C_Soft.c"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;		None
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;		None
 10531 ;; Return value:  Size  Location     Type
 10532 ;;		None               void
 10533 ;; Registers used:
 10534 ;;		wreg, cstack
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;Total ram usage:        0 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    4
 10547 ;; This function calls:
 10548 ;;		_i2cHighScl
 10549 ;;		_i2cHighSda
 10550 ;;		_i2cLowScl
 10551 ;;		_i2cLowSda
 10552 ;; This function is called by:
 10553 ;;		_DS1621_Read_Temp
 10554 ;;		_DS3231_Read_Time
 10555 ;;		_DS3231_Setup_Time
 10556 ;;		_I2C_Write_Cmd_Only
 10557 ;;		_I2C_Write_Cmd_Write_Data
 10558 ;;		_DS1621_Read_Temp_Bad
 10559 ;;		_I2C_Write_Address_Read_One_Byte
 10560 ;;		_I2C_Write_Address_Write_One_Byte
 10561 ;;		_I2C_Write_Cmd_Read_One_Byte
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           
 10565                           	psect	text67
 10566  001EFC                     __ptext67:
 10567                           	opt stack 0
 10568  001EFC                     _I2C_Start:
 10569                           	opt stack 25
 10570                           
 10571                           ;I2C_Soft.c: 69: i2cHighSda();
 10572                           
 10573                           ;incstack = 0
 10574  001EFC  ECD3  F00F         	call	_i2cHighSda	;wreg free
 10575                           
 10576                           ;I2C_Soft.c: 70: i2cHighScl();
 10577  001F00  ECA6  F00F         	call	_i2cHighScl	;wreg free
 10578                           
 10579                           ;I2C_Soft.c: 71: i2cLowSda();
 10580  001F04  ECC6  F00F         	call	_i2cLowSda	;wreg free
 10581                           
 10582                           ;I2C_Soft.c: 72: i2cLowScl();
 10583  001F08  ECCF  F00F         	call	_i2cLowScl	;wreg free
 10584  001F0C  0012               	return		;funcret
 10585  001F0E                     __end_of_I2C_Start:
 10586                           	opt stack 0
 10587                           tblptru	equ	0xFF8
 10588                           tblptrh	equ	0xFF7
 10589                           tblptrl	equ	0xFF6
 10590                           tablat	equ	0xFF5
 10591                           prodh	equ	0xFF4
 10592                           prodl	equ	0xFF3
 10593                           intcon	equ	0xFF2
 10594                           intcon2	equ	0xFF1
 10595                           intcon3	equ	0xFF0
 10596                           postinc0	equ	0xFEE
 10597                           wreg	equ	0xFE8
 10598                           postdec1	equ	0xFE5
 10599                           fsr1l	equ	0xFE1
 10600                           indf2	equ	0xFDF
 10601                           postinc2	equ	0xFDE
 10602                           postdec2	equ	0xFDD
 10603                           fsr2h	equ	0xFDA
 10604                           fsr2l	equ	0xFD9
 10605                           status	equ	0xFD8
 10606                           
 10607 ;; *************** function _i2cLowSda *****************
 10608 ;; Defined at:
 10609 ;;		line 98 in file "I2C_Soft.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;		None
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;		None
 10614 ;; Return value:  Size  Location     Type
 10615 ;;		None               void
 10616 ;; Registers used:
 10617 ;;		None
 10618 ;; Tracked objects:
 10619 ;;		On entry : 0/0
 10620 ;;		On exit  : 0/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;Total ram usage:        0 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    3
 10630 ;; This function calls:
 10631 ;;		Nothing
 10632 ;; This function is called by:
 10633 ;;		_I2C_Write
 10634 ;;		_i2cAck
 10635 ;;		_I2C_Start
 10636 ;;		_I2C_ReStart
 10637 ;;		_I2C_Stop
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           	psect	text68
 10642  001F8C                     __ptext68:
 10643                           	opt stack 0
 10644  001F8C                     _i2cLowSda:
 10645                           	opt stack 25
 10646                           
 10647                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
 10648                           
 10649                           ;incstack = 0
 10650  001F8C  9A81               	bcf	3969,5,c	;volatile
 10651                           
 10652                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
 10653  001F8E  9A93               	bcf	3987,5,c	;volatile
 10654                           
 10655                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10656  001F90  D000               	nop2		;2 cycle nop
 10657  001F92  D000               	nop2		;2 cycle nop
 10658  001F94  0012               	return		;funcret
 10659  001F96                     __end_of_i2cLowSda:
 10660                           	opt stack 0
 10661                           tblptru	equ	0xFF8
 10662                           tblptrh	equ	0xFF7
 10663                           tblptrl	equ	0xFF6
 10664                           tablat	equ	0xFF5
 10665                           prodh	equ	0xFF4
 10666                           prodl	equ	0xFF3
 10667                           intcon	equ	0xFF2
 10668                           intcon2	equ	0xFF1
 10669                           intcon3	equ	0xFF0
 10670                           postinc0	equ	0xFEE
 10671                           wreg	equ	0xFE8
 10672                           postdec1	equ	0xFE5
 10673                           fsr1l	equ	0xFE1
 10674                           indf2	equ	0xFDF
 10675                           postinc2	equ	0xFDE
 10676                           postdec2	equ	0xFDD
 10677                           fsr2h	equ	0xFDA
 10678                           fsr2l	equ	0xFD9
 10679                           status	equ	0xFD8
 10680                           
 10681 ;; *************** function _i2cLowScl *****************
 10682 ;; Defined at:
 10683 ;;		line 111 in file "I2C_Soft.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		None
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    3
 10704 ;; This function calls:
 10705 ;;		Nothing
 10706 ;; This function is called by:
 10707 ;;		_I2C_Read
 10708 ;;		_I2C_Write
 10709 ;;		_i2cNack
 10710 ;;		_i2cAck
 10711 ;;		_I2C_Start
 10712 ;;		_I2C_ReStart
 10713 ;;		_I2C_Stop
 10714 ;; This function uses a non-reentrant model
 10715 ;;
 10716                           
 10717                           	psect	text69
 10718  001F9E                     __ptext69:
 10719                           	opt stack 0
 10720  001F9E                     _i2cLowScl:
 10721                           	opt stack 25
 10722                           
 10723                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 10724                           
 10725                           ;incstack = 0
 10726  001F9E  9881               	bcf	3969,4,c	;volatile
 10727                           
 10728                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 10729  001FA0  9893               	bcf	3987,4,c	;volatile
 10730                           
 10731                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10732  001FA2  D000               	nop2		;2 cycle nop
 10733  001FA4  0012               	return		;funcret
 10734  001FA6                     __end_of_i2cLowScl:
 10735                           	opt stack 0
 10736                           tblptru	equ	0xFF8
 10737                           tblptrh	equ	0xFF7
 10738                           tblptrl	equ	0xFF6
 10739                           tablat	equ	0xFF5
 10740                           prodh	equ	0xFF4
 10741                           prodl	equ	0xFF3
 10742                           intcon	equ	0xFF2
 10743                           intcon2	equ	0xFF1
 10744                           intcon3	equ	0xFF0
 10745                           postinc0	equ	0xFEE
 10746                           wreg	equ	0xFE8
 10747                           postdec1	equ	0xFE5
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           fsr2h	equ	0xFDA
 10753                           fsr2l	equ	0xFD9
 10754                           status	equ	0xFD8
 10755                           
 10756 ;; *************** function _i2cHighSda *****************
 10757 ;; Defined at:
 10758 ;;		line 92 in file "I2C_Soft.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;		None
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;		None
 10763 ;; Return value:  Size  Location     Type
 10764 ;;		None               void
 10765 ;; Registers used:
 10766 ;;		None
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;Total ram usage:        0 bytes
 10777 ;; Hardware stack levels used:    1
 10778 ;; Hardware stack levels required when called:    3
 10779 ;; This function calls:
 10780 ;;		Nothing
 10781 ;; This function is called by:
 10782 ;;		_I2C_Init
 10783 ;;		_I2C_Read
 10784 ;;		_I2C_Write
 10785 ;;		_i2cAck
 10786 ;;		_I2C_Start
 10787 ;;		_I2C_ReStart
 10788 ;;		_I2C_Stop
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           	psect	text70
 10793  001FA6                     __ptext70:
 10794                           	opt stack 0
 10795  001FA6                     _i2cHighSda:
 10796                           	opt stack 26
 10797                           
 10798                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
 10799                           
 10800                           ;incstack = 0
 10801  001FA6  8A93               	bsf	3987,5,c	;volatile
 10802                           
 10803                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10804  001FA8  D000               	nop2		;2 cycle nop
 10805  001FAA  D000               	nop2		;2 cycle nop
 10806  001FAC  0012               	return		;funcret
 10807  001FAE                     __end_of_i2cHighSda:
 10808                           	opt stack 0
 10809                           tblptru	equ	0xFF8
 10810                           tblptrh	equ	0xFF7
 10811                           tblptrl	equ	0xFF6
 10812                           tablat	equ	0xFF5
 10813                           prodh	equ	0xFF4
 10814                           prodl	equ	0xFF3
 10815                           intcon	equ	0xFF2
 10816                           intcon2	equ	0xFF1
 10817                           intcon3	equ	0xFF0
 10818                           postinc0	equ	0xFEE
 10819                           wreg	equ	0xFE8
 10820                           postdec1	equ	0xFE5
 10821                           fsr1l	equ	0xFE1
 10822                           indf2	equ	0xFDF
 10823                           postinc2	equ	0xFDE
 10824                           postdec2	equ	0xFDD
 10825                           fsr2h	equ	0xFDA
 10826                           fsr2l	equ	0xFD9
 10827                           status	equ	0xFD8
 10828                           
 10829 ;; *************** function _i2cHighScl *****************
 10830 ;; Defined at:
 10831 ;;		line 105 in file "I2C_Soft.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;		None
 10836 ;; Return value:  Size  Location     Type
 10837 ;;		None               void
 10838 ;; Registers used:
 10839 ;;		wreg
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;Total ram usage:        0 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    3
 10852 ;; This function calls:
 10853 ;;		Nothing
 10854 ;; This function is called by:
 10855 ;;		_I2C_Init
 10856 ;;		_I2C_Read
 10857 ;;		_I2C_Write
 10858 ;;		_i2cNack
 10859 ;;		_i2cAck
 10860 ;;		_I2C_Start
 10861 ;;		_I2C_ReStart
 10862 ;;		_I2C_Stop
 10863 ;; This function uses a non-reentrant model
 10864 ;;
 10865                           
 10866                           	psect	text71
 10867  001F4C                     __ptext71:
 10868                           	opt stack 0
 10869  001F4C                     _i2cHighScl:
 10870                           	opt stack 26
 10871                           
 10872                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 10873                           
 10874                           ;incstack = 0
 10875  001F4C  8893               	bsf	3987,4,c	;volatile
 10876                           
 10877                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 10878  001F4E  0E06               	movlw	6
 10879  001F50                     u5067:
 10880  001F50  2EE8               	decfsz	wreg,f,c
 10881  001F52  D7FE               	goto	u5067
 10882  001F54  D000               	nop2		;nop
 10883  001F56  0012               	return		;funcret
 10884  001F58                     __end_of_i2cHighScl:
 10885                           	opt stack 0
 10886                           tblptru	equ	0xFF8
 10887                           tblptrh	equ	0xFF7
 10888                           tblptrl	equ	0xFF6
 10889                           tablat	equ	0xFF5
 10890                           prodh	equ	0xFF4
 10891                           prodl	equ	0xFF3
 10892                           intcon	equ	0xFF2
 10893                           intcon2	equ	0xFF1
 10894                           intcon3	equ	0xFF0
 10895                           postinc0	equ	0xFEE
 10896                           wreg	equ	0xFE8
 10897                           postdec1	equ	0xFE5
 10898                           fsr1l	equ	0xFE1
 10899                           indf2	equ	0xFDF
 10900                           postinc2	equ	0xFDE
 10901                           postdec2	equ	0xFDD
 10902                           fsr2h	equ	0xFDA
 10903                           fsr2l	equ	0xFD9
 10904                           status	equ	0xFD8
 10905                           
 10906 ;; *************** function _chkisr *****************
 10907 ;; Defined at:
 10908 ;;		line 36 in file "Interrupt.c"
 10909 ;; Parameters:    Size  Location     Type
 10910 ;;		None
 10911 ;; Auto vars:     Size  Location     Type
 10912 ;;		None
 10913 ;; Return value:  Size  Location     Type
 10914 ;;		None               void
 10915 ;; Registers used:
 10916 ;;		wreg, status,2, status,0, cstack
 10917 ;; Tracked objects:
 10918 ;;		On entry : 0/0
 10919 ;;		On exit  : 0/0
 10920 ;;		Unchanged: 0/0
 10921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10926 ;;Total ram usage:       14 bytes
 10927 ;; Hardware stack levels used:    1
 10928 ;; Hardware stack levels required when called:    2
 10929 ;; This function calls:
 10930 ;;		_INTx_isr
 10931 ;;		_TIMER1_isr
 10932 ;; This function is called by:
 10933 ;;		Interrupt level 2
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           	psect	intcode
 10938  000008                     __pintcode:
 10939                           	opt stack 0
 10940  000008                     _chkisr:
 10941                           	opt stack 20
 10942                           
 10943                           ;incstack = 0
 10944  000008  CFFA F003          	movff	pclath,??_chkisr
 10945  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 10946  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 10947  000014  EDD1  F00A         	call	int_func,f	;refresh shadow registers
 10948                           pclatu	equ	0xFFB
 10949                           pclath	equ	0xFFA
 10950                           tblptru	equ	0xFF8
 10951                           tblptrh	equ	0xFF7
 10952                           tblptrl	equ	0xFF6
 10953                           tablat	equ	0xFF5
 10954                           prodh	equ	0xFF4
 10955                           prodl	equ	0xFF3
 10956                           intcon	equ	0xFF2
 10957                           intcon2	equ	0xFF1
 10958                           intcon3	equ	0xFF0
 10959                           postinc0	equ	0xFEE
 10960                           fsr0l	equ	0xFE9
 10961                           wreg	equ	0xFE8
 10962                           postdec1	equ	0xFE5
 10963                           fsr1l	equ	0xFE1
 10964                           indf2	equ	0xFDF
 10965                           postinc2	equ	0xFDE
 10966                           postdec2	equ	0xFDD
 10967                           fsr2h	equ	0xFDA
 10968                           fsr2l	equ	0xFD9
 10969                           status	equ	0xFD8
 10970                           
 10971                           	psect	intcode_body
 10972  0015A2                     __pintcode_body:
 10973                           	opt stack 20
 10974  0015A2                     int_func:
 10975                           	opt stack 20
 10976  0015A2  0006               	pop		; remove dummy address from shadow register refresh
 10977  0015A4  CFEA F006          	movff	fsr0h,??_chkisr+3
 10978  0015A8  CFE1 F007          	movff	fsr1l,??_chkisr+4
 10979  0015AC  CFE2 F008          	movff	fsr1h,??_chkisr+5
 10980  0015B0  CFD9 F009          	movff	fsr2l,??_chkisr+6
 10981  0015B4  CFDA F00A          	movff	fsr2h,??_chkisr+7
 10982  0015B8  CFF3 F00B          	movff	prodl,??_chkisr+8
 10983  0015BC  CFF4 F00C          	movff	prodh,??_chkisr+9
 10984  0015C0  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 10985  0015C4  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 10986  0015C8  CFF8 F00F          	movff	tblptru,??_chkisr+12
 10987  0015CC  CFF5 F010          	movff	tablat,??_chkisr+13
 10988                           
 10989                           ;Interrupt.c: 38: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 10990  0015D0  A09E               	btfss	3998,0,c	;volatile
 10991  0015D2  D003               	goto	i2l2833
 10992  0015D4  ECAC  F00F         	call	_TIMER1_isr	;wreg free
 10993  0015D8  D000               	goto	i2l2833
 10994  0015DA                     i2l2833:
 10995                           
 10996                           ;Interrupt.c: 39: if (INTCON3bits.INT2IF == 1) INTx_isr();
 10997  0015DA  A2F0               	btfss	intcon3,1,c	;volatile
 10998  0015DC  D003               	goto	i2l47
 10999  0015DE  ECDA  F003         	call	_INTx_isr	;wreg free
 11000  0015E2  D000               	goto	i2l47
 11001  0015E4                     i2l47:
 11002  0015E4  C010  FFF5         	movff	??_chkisr+13,tablat
 11003  0015E8  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11004  0015EC  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11005  0015F0  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11006  0015F4  C00C  FFF4         	movff	??_chkisr+9,prodh
 11007  0015F8  C00B  FFF3         	movff	??_chkisr+8,prodl
 11008  0015FC  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11009  001600  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11010  001604  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11011  001608  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11012  00160C  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11013  001610  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11014  001614  C004  FFFB         	movff	??_chkisr+1,pclatu
 11015  001618  C003  FFFA         	movff	??_chkisr,pclath
 11016  00161C  0011               	retfie		f
 11017  00161E                     __end_of_chkisr:
 11018                           	opt stack 0
 11019                           pclatu	equ	0xFFB
 11020                           pclath	equ	0xFFA
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           intcon	equ	0xFF2
 11028                           intcon2	equ	0xFF1
 11029                           intcon3	equ	0xFF0
 11030                           postinc0	equ	0xFEE
 11031                           fsr0h	equ	0xFEA
 11032                           fsr0l	equ	0xFE9
 11033                           wreg	equ	0xFE8
 11034                           postdec1	equ	0xFE5
 11035                           fsr1h	equ	0xFE2
 11036                           fsr1l	equ	0xFE1
 11037                           indf2	equ	0xFDF
 11038                           postinc2	equ	0xFDE
 11039                           postdec2	equ	0xFDD
 11040                           fsr2h	equ	0xFDA
 11041                           fsr2l	equ	0xFD9
 11042                           status	equ	0xFD8
 11043                           
 11044 ;; *************** function _TIMER1_isr *****************
 11045 ;; Defined at:
 11046 ;;		line 42 in file "Interrupt.c"
 11047 ;; Parameters:    Size  Location     Type
 11048 ;;		None
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;		None
 11051 ;; Return value:  Size  Location     Type
 11052 ;;		None               void
 11053 ;; Registers used:
 11054 ;;		wreg, status,2
 11055 ;; Tracked objects:
 11056 ;;		On entry : 0/0
 11057 ;;		On exit  : 0/0
 11058 ;;		Unchanged: 0/0
 11059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;Total ram usage:        0 bytes
 11065 ;; Hardware stack levels used:    1
 11066 ;; This function calls:
 11067 ;;		Nothing
 11068 ;; This function is called by:
 11069 ;;		_chkisr
 11070 ;; This function uses a non-reentrant model
 11071 ;;
 11072                           
 11073                           	psect	text73
 11074  001F58                     __ptext73:
 11075                           	opt stack 0
 11076  001F58                     _TIMER1_isr:
 11077                           	opt stack 21
 11078                           
 11079                           ;Interrupt.c: 44: Nec_State = 0;
 11080                           
 11081                           ;incstack = 0
 11082  001F58  0E00               	movlw	0
 11083  001F5A  6E54               	movwf	_Nec_State,c
 11084                           
 11085                           ;Interrupt.c: 45: INTCON2bits.INTEDG2 = 0;
 11086  001F5C  98F1               	bcf	intcon2,4,c	;volatile
 11087                           
 11088                           ;Interrupt.c: 46: T1CONbits.TMR1ON = 0;
 11089  001F5E  90CD               	bcf	4045,0,c	;volatile
 11090                           
 11091                           ;Interrupt.c: 47: PIR1bits.TMR1IF = 0;
 11092  001F60  909E               	bcf	3998,0,c	;volatile
 11093  001F62  0012               	return		;funcret
 11094  001F64                     __end_of_TIMER1_isr:
 11095                           	opt stack 0
 11096                           pclatu	equ	0xFFB
 11097                           pclath	equ	0xFFA
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           intcon2	equ	0xFF1
 11106                           intcon3	equ	0xFF0
 11107                           postinc0	equ	0xFEE
 11108                           fsr0h	equ	0xFEA
 11109                           fsr0l	equ	0xFE9
 11110                           wreg	equ	0xFE8
 11111                           postdec1	equ	0xFE5
 11112                           fsr1h	equ	0xFE2
 11113                           fsr1l	equ	0xFE1
 11114                           indf2	equ	0xFDF
 11115                           postinc2	equ	0xFDE
 11116                           postdec2	equ	0xFDD
 11117                           fsr2h	equ	0xFDA
 11118                           fsr2l	equ	0xFD9
 11119                           status	equ	0xFD8
 11120                           
 11121 ;; *************** function _INTx_isr *****************
 11122 ;; Defined at:
 11123 ;;		line 56 in file "Interrupt.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;		None
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;		None
 11128 ;; Return value:  Size  Location     Type
 11129 ;;		None               void
 11130 ;; Registers used:
 11131 ;;		wreg, status,2, status,0, cstack
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11140 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11141 ;;Total ram usage:        2 bytes
 11142 ;; Hardware stack levels used:    1
 11143 ;; Hardware stack levels required when called:    1
 11144 ;; This function calls:
 11145 ;;		_Reset_Nec_State
 11146 ;; This function is called by:
 11147 ;;		_chkisr
 11148 ;; This function uses a non-reentrant model
 11149 ;;
 11150                           
 11151                           	psect	text74
 11152  0007B4                     __ptext74:
 11153                           	opt stack 0
 11154  0007B4                     _INTx_isr:
 11155                           	opt stack 20
 11156                           
 11157                           ;Interrupt.c: 58: INTCON3bits.INT2IF = 0;
 11158                           
 11159                           ;incstack = 0
 11160  0007B4  92F0               	bcf	intcon3,1,c	;volatile
 11161                           
 11162                           ;Interrupt.c: 59: if (Nec_State != 0)
 11163  0007B6  5054               	movf	_Nec_State,w,c
 11164  0007B8  B4D8               	btfsc	status,2,c
 11165  0007BA  D0A1               	goto	i2l2467
 11166                           
 11167                           ;Interrupt.c: 60: {
 11168                           ;Interrupt.c: 61: Time_Elapsed = (TMR1H << 8) | TMR1L;
 11169  0007BC  50CE               	movf	4046,w,c	;volatile
 11170  0007BE  CFCF F001          	movff	4047,??_INTx_isr	;volatile
 11171  0007C2  6A02               	clrf	(??_INTx_isr+1)& (0+255),c
 11172  0007C4  C001  F002         	movff	??_INTx_isr,??_INTx_isr+1
 11173  0007C8  6A01               	clrf	??_INTx_isr,c
 11174  0007CA  1001               	iorwf	??_INTx_isr,w,c
 11175  0007CC  6E4A               	movwf	_Time_Elapsed,c
 11176  0007CE  5002               	movf	??_INTx_isr+1,w,c
 11177  0007D0  6E4B               	movwf	_Time_Elapsed+1,c
 11178                           
 11179                           ;Interrupt.c: 62: TMR1H = 0;
 11180  0007D2  0E00               	movlw	0
 11181  0007D4  6ECF               	movwf	4047,c	;volatile
 11182                           
 11183                           ;Interrupt.c: 63: TMR1L = 0;
 11184  0007D6  0E00               	movlw	0
 11185  0007D8  6ECE               	movwf	4046,c	;volatile
 11186                           
 11187                           ;Interrupt.c: 64: }
 11188                           ;Interrupt.c: 66: switch(Nec_State)
 11189  0007DA  D091               	goto	i2l2467
 11190  0007DC                     i2l2381:
 11191                           
 11192                           ;Interrupt.c: 69: {
 11193                           ;Interrupt.c: 72: TMR1H = 0;
 11194  0007DC  0E00               	movlw	0
 11195  0007DE  6ECF               	movwf	4047,c	;volatile
 11196                           
 11197                           ;Interrupt.c: 73: TMR1L = 0;
 11198  0007E0  0E00               	movlw	0
 11199  0007E2  6ECE               	movwf	4046,c	;volatile
 11200                           
 11201                           ;Interrupt.c: 74: PIR1bits.TMR1IF = 0;
 11202  0007E4  909E               	bcf	3998,0,c	;volatile
 11203                           
 11204                           ;Interrupt.c: 75: T1CON = 0x90;
 11205  0007E6  0E90               	movlw	144
 11206  0007E8  6ECD               	movwf	4045,c	;volatile
 11207                           
 11208                           ;Interrupt.c: 76: T1CONbits.TMR1ON = 1;
 11209  0007EA  80CD               	bsf	4045,0,c	;volatile
 11210                           
 11211                           ;Interrupt.c: 77: bit_count = 0;
 11212  0007EC  0E00               	movlw	0
 11213  0007EE  6E5A               	movwf	_bit_count,c
 11214                           
 11215                           ;Interrupt.c: 78: Nec_code = 0;
 11216  0007F0  0E00               	movlw	0
 11217  0007F2  6E44               	movwf	_Nec_code,c
 11218  0007F4  0E00               	movlw	0
 11219  0007F6  6E45               	movwf	_Nec_code+1,c
 11220  0007F8  0E00               	movlw	0
 11221  0007FA  6E46               	movwf	_Nec_code+2,c
 11222  0007FC  0E00               	movlw	0
 11223  0007FE  6E47               	movwf	_Nec_code+3,c
 11224                           
 11225                           ;Interrupt.c: 79: Nec_State = 1;
 11226  000800  0E01               	movlw	1
 11227  000802  6E54               	movwf	_Nec_State,c
 11228                           
 11229                           ;Interrupt.c: 80: INTCON2bits.INTEDG2 = 1;
 11230  000804  88F1               	bsf	intcon2,4,c	;volatile
 11231                           
 11232                           ;Interrupt.c: 81: PORTA = Nec_State;
 11233  000806  C054  FF80         	movff	_Nec_State,3968	;volatile
 11234                           
 11235                           ;Interrupt.c: 83: return;
 11236  00080A  D08A               	goto	i2l59
 11237  00080C                     i2l2393:
 11238                           
 11239                           ;Interrupt.c: 87: {
 11240                           ;Interrupt.c: 90: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
 11241  00080C  0E35               	movlw	53
 11242  00080E  5C4A               	subwf	_Time_Elapsed,w,c
 11243  000810  0E21               	movlw	33
 11244  000812  584B               	subwfb	_Time_Elapsed+1,w,c
 11245  000814  A0D8               	btfss	status,0,c
 11246  000816  D009               	goto	i2l2401
 11247  000818  0E1C               	movlw	28
 11248  00081A  5C4A               	subwf	_Time_Elapsed,w,c
 11249  00081C  0E25               	movlw	37
 11250  00081E  584B               	subwfb	_Time_Elapsed+1,w,c
 11251  000820  B0D8               	btfsc	status,0,c
 11252  000822  D003               	goto	i2l2401
 11253                           
 11254                           ;Interrupt.c: 91: {
 11255                           ;Interrupt.c: 93: Nec_State = 2;
 11256  000824  0E02               	movlw	2
 11257  000826  6E54               	movwf	_Nec_State,c
 11258  000828  D027               	goto	i2l2427
 11259  00082A                     i2l2401:
 11260                           
 11261                           ;Interrupt.c: 98: else
 11262                           ;Interrupt.c: 99: {
 11263                           ;Interrupt.c: 101: Reset_Nec_State();
 11264  00082A  ECD7  F00F         	call	_Reset_Nec_State	;wreg free
 11265  00082E  D02A               	goto	i2l2431
 11266  000830  D029               	goto	i2l2431
 11267                           
 11268                           ;Interrupt.c: 105: return;
 11269                           
 11270                           ;Interrupt.c: 103: }
 11271                           ;Interrupt.c: 104: INTCON2bits.INTEDG2 = 0;
 11272  000832  D076               	goto	i2l59
 11273  000834                     i2l2407:
 11274                           
 11275                           ;Interrupt.c: 109: {
 11276                           ;Interrupt.c: 111: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
 11277  000834  0EA1               	movlw	161
 11278  000836  5C4A               	subwf	_Time_Elapsed,w,c
 11279  000838  0E0F               	movlw	15
 11280  00083A  584B               	subwfb	_Time_Elapsed+1,w,c
 11281  00083C  A0D8               	btfss	status,0,c
 11282  00083E  D009               	goto	i2l2415
 11283  000840  0E88               	movlw	136
 11284  000842  5C4A               	subwf	_Time_Elapsed,w,c
 11285  000844  0E13               	movlw	19
 11286  000846  584B               	subwfb	_Time_Elapsed+1,w,c
 11287  000848  B0D8               	btfsc	status,0,c
 11288  00084A  D003               	goto	i2l2415
 11289  00084C                     
 11290                           ;Interrupt.c: 112: {
 11291                           ;Interrupt.c: 113: Nec_State = 3;
 11292  00084C  0E03               	movlw	3
 11293  00084E  6E54               	movwf	_Nec_State,c
 11294  000850  D04E               	goto	i2l2457
 11295  000852                     i2l2415:
 11296                           
 11297                           ;Interrupt.c: 117: else
 11298                           ;Interrupt.c: 118: {
 11299                           ;Interrupt.c: 120: Reset_Nec_State();
 11300  000852  ECD7  F00F         	call	_Reset_Nec_State	;wreg free
 11301  000856  D051               	goto	i2l2461
 11302  000858  D050               	goto	i2l2461
 11303                           
 11304                           ;Interrupt.c: 124: return;
 11305                           
 11306                           ;Interrupt.c: 122: }
 11307                           ;Interrupt.c: 123: INTCON2bits.INTEDG2 = 1;
 11308  00085A  D062               	goto	i2l59
 11309  00085C                     i2l2421:
 11310                           
 11311                           ;Interrupt.c: 128: {
 11312                           ;Interrupt.c: 130: if(Time_Elapsed > 400 && Time_Elapsed < 700)
 11313  00085C  0E91               	movlw	145
 11314  00085E  5C4A               	subwf	_Time_Elapsed,w,c
 11315  000860  0E01               	movlw	1
 11316  000862  584B               	subwfb	_Time_Elapsed+1,w,c
 11317  000864  A0D8               	btfss	status,0,c
 11318  000866  D00B               	goto	i2l2429
 11319  000868  0EBC               	movlw	188
 11320  00086A  5C4A               	subwf	_Time_Elapsed,w,c
 11321  00086C  0E02               	movlw	2
 11322  00086E  584B               	subwfb	_Time_Elapsed+1,w,c
 11323  000870  B0D8               	btfsc	status,0,c
 11324  000872  D005               	goto	i2l2429
 11325                           
 11326                           ;Interrupt.c: 131: {
 11327                           ;Interrupt.c: 132: Nec_State = 4;
 11328  000874  0E04               	movlw	4
 11329  000876  D7D7               	goto	L3
 11330  000878                     i2l2427:
 11331                           
 11332                           ;Interrupt.c: 133: PORTA = Nec_State;
 11333  000878  C054  FF80         	movff	_Nec_State,3968	;volatile
 11334                           
 11335                           ;Interrupt.c: 135: }
 11336  00087C  D003               	goto	i2l2431
 11337  00087E                     i2l2429:
 11338                           
 11339                           ;Interrupt.c: 136: else
 11340                           ;Interrupt.c: 137: {
 11341                           ;Interrupt.c: 139: Reset_Nec_State();
 11342  00087E  ECD7  F00F         	call	_Reset_Nec_State	;wreg free
 11343  000882  D000               	goto	i2l2431
 11344  000884                     i2l2431:
 11345                           
 11346                           ;Interrupt.c: 141: }
 11347                           ;Interrupt.c: 142: INTCON2bits.INTEDG2 = 0;
 11348  000884  98F1               	bcf	intcon2,4,c	;volatile
 11349                           
 11350                           ;Interrupt.c: 143: return;
 11351  000886  D04C               	goto	i2l59
 11352  000888                     i2l2435:
 11353                           
 11354                           ;Interrupt.c: 147: {
 11355                           ;Interrupt.c: 149: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
 11356  000888  0E91               	movlw	145
 11357  00088A  5C4A               	subwf	_Time_Elapsed,w,c
 11358  00088C  0E01               	movlw	1
 11359  00088E  584B               	subwfb	_Time_Elapsed+1,w,c
 11360  000890  A0D8               	btfss	status,0,c
 11361  000892  D030               	goto	i2l2459
 11362  000894  0E08               	movlw	8
 11363  000896  5C4A               	subwf	_Time_Elapsed,w,c
 11364  000898  0E07               	movlw	7
 11365  00089A  584B               	subwfb	_Time_Elapsed+1,w,c
 11366  00089C  B0D8               	btfsc	status,0,c
 11367  00089E  D02A               	goto	i2l2459
 11368                           
 11369                           ;Interrupt.c: 150: {
 11370                           ;Interrupt.c: 151: Nec_code = Nec_code << 1;
 11371  0008A0  90D8               	bcf	status,0,c
 11372  0008A2  3444               	rlcf	_Nec_code,w,c
 11373  0008A4  6E44               	movwf	_Nec_code,c
 11374  0008A6  3445               	rlcf	_Nec_code+1,w,c
 11375  0008A8  6E45               	movwf	_Nec_code+1,c
 11376  0008AA  3446               	rlcf	_Nec_code+2,w,c
 11377  0008AC  6E46               	movwf	_Nec_code+2,c
 11378  0008AE  3447               	rlcf	_Nec_code+3,w,c
 11379  0008B0  6E47               	movwf	_Nec_code+3,c
 11380                           
 11381                           ;Interrupt.c: 152: if (Time_Elapsed > 1000)
 11382  0008B2  0EE9               	movlw	233
 11383  0008B4  5C4A               	subwf	_Time_Elapsed,w,c
 11384  0008B6  0E03               	movlw	3
 11385  0008B8  584B               	subwfb	_Time_Elapsed+1,w,c
 11386  0008BA  A0D8               	btfss	status,0,c
 11387  0008BC  D007               	goto	i2l2443
 11388                           
 11389                           ;Interrupt.c: 153: Nec_code++;
 11390  0008BE  0E01               	movlw	1
 11391  0008C0  2644               	addwf	_Nec_code,f,c
 11392  0008C2  0E00               	movlw	0
 11393  0008C4  2245               	addwfc	_Nec_code+1,f,c
 11394  0008C6  2246               	addwfc	_Nec_code+2,f,c
 11395  0008C8  2247               	addwfc	_Nec_code+3,f,c
 11396  0008CA  D000               	goto	i2l2443
 11397  0008CC                     i2l2443:
 11398                           
 11399                           ;Interrupt.c: 154: bit_count++;
 11400  0008CC  2A5A               	incf	_bit_count,f,c
 11401                           
 11402                           ;Interrupt.c: 155: if(bit_count > 31)
 11403  0008CE  0E1F               	movlw	31
 11404  0008D0  645A               	cpfsgt	_bit_count,c
 11405  0008D2  D7BC               	goto	L4
 11406                           
 11407                           ;Interrupt.c: 156: {
 11408                           ;Interrupt.c: 157: Nec_Button = Nec_code >> 8;
 11409  0008D4  C045  F053         	movff	_Nec_code+1,_Nec_Button
 11410                           
 11411                           ;Interrupt.c: 158: Nec_State = 0;
 11412  0008D8  0E00               	movlw	0
 11413  0008DA  6E54               	movwf	_Nec_State,c
 11414                           
 11415                           ;Interrupt.c: 159: PORTA = Nec_State;
 11416  0008DC  C054  FF80         	movff	_Nec_State,3968	;volatile
 11417                           
 11418                           ;Interrupt.c: 161: Nec_OK = 1;
 11419  0008E0  0E00               	movlw	0
 11420  0008E2  6E49               	movwf	_Nec_OK+1,c
 11421  0008E4  0E01               	movlw	1
 11422  0008E6  6E48               	movwf	_Nec_OK,c
 11423                           
 11424                           ;Interrupt.c: 163: INTCON3bits.INT2IE = 0;
 11425  0008E8  98F0               	bcf	intcon3,4,c	;volatile
 11426                           
 11427                           ;Interrupt.c: 164: }
 11428  0008EA  D007               	goto	i2l2461
 11429  0008EC  D7AF               	goto	L4
 11430  0008EE                     i2l2457:
 11431                           
 11432                           ;Interrupt.c: 168: PORTA = Nec_State;
 11433  0008EE  C054  FF80         	movff	_Nec_State,3968	;volatile
 11434                           
 11435                           ;Interrupt.c: 170: }
 11436                           ;Interrupt.c: 171: }
 11437  0008F2  D003               	goto	i2l2461
 11438  0008F4                     i2l2459:
 11439                           
 11440                           ;Interrupt.c: 173: else
 11441                           ;Interrupt.c: 174: {
 11442                           ;Interrupt.c: 176: Reset_Nec_State();
 11443  0008F4  ECD7  F00F         	call	_Reset_Nec_State	;wreg free
 11444  0008F8  D000               	goto	i2l2461
 11445  0008FA                     i2l2461:
 11446                           
 11447                           ;Interrupt.c: 178: }
 11448                           ;Interrupt.c: 179: INTCON2bits.INTEDG2 = 1;
 11449  0008FA  88F1               	bsf	intcon2,4,c	;volatile
 11450                           
 11451                           ;Interrupt.c: 181: }
 11452                           ;Interrupt.c: 182: }
 11453                           
 11454                           ;Interrupt.c: 180: return;
 11455  0008FC  D011               	goto	i2l59
 11456  0008FE                     i2l2467:
 11457  0008FE  5054               	movf	_Nec_State,w,c
 11458                           
 11459                           ; Switch size 1, requested type "space"
 11460                           ; Number of cases is 5, Range of values is 0 to 4
 11461                           ; switch strategies available:
 11462                           ; Name         Instructions Cycles
 11463                           ; simple_byte           16     9 (average)
 11464                           ;	Chosen strategy is simple_byte
 11465  000900  0A00               	xorlw	0	; case 0
 11466  000902  B4D8               	btfsc	status,2,c
 11467  000904  D76B               	goto	i2l2381
 11468  000906  0A01               	xorlw	1	; case 1
 11469  000908  B4D8               	btfsc	status,2,c
 11470  00090A  D780               	goto	i2l2393
 11471  00090C  0A03               	xorlw	3	; case 2
 11472  00090E  B4D8               	btfsc	status,2,c
 11473  000910  D791               	goto	i2l2407
 11474  000912  0A01               	xorlw	1	; case 3
 11475  000914  B4D8               	btfsc	status,2,c
 11476  000916  D7A2               	goto	i2l2421
 11477  000918  0A07               	xorlw	7	; case 4
 11478  00091A  B4D8               	btfsc	status,2,c
 11479  00091C  D7B5               	goto	i2l2435
 11480  00091E  D000               	goto	i2l59
 11481  000920                     i2l59:
 11482  000920  0012               	return		;funcret
 11483  000922                     __end_of_INTx_isr:
 11484                           	opt stack 0
 11485                           pclatu	equ	0xFFB
 11486                           pclath	equ	0xFFA
 11487                           tblptru	equ	0xFF8
 11488                           tblptrh	equ	0xFF7
 11489                           tblptrl	equ	0xFF6
 11490                           tablat	equ	0xFF5
 11491                           prodh	equ	0xFF4
 11492                           prodl	equ	0xFF3
 11493                           intcon	equ	0xFF2
 11494                           intcon2	equ	0xFF1
 11495                           intcon3	equ	0xFF0
 11496                           postinc0	equ	0xFEE
 11497                           fsr0h	equ	0xFEA
 11498                           fsr0l	equ	0xFE9
 11499                           wreg	equ	0xFE8
 11500                           postdec1	equ	0xFE5
 11501                           fsr1h	equ	0xFE2
 11502                           fsr1l	equ	0xFE1
 11503                           indf2	equ	0xFDF
 11504                           postinc2	equ	0xFDE
 11505                           postdec2	equ	0xFDD
 11506                           fsr2h	equ	0xFDA
 11507                           fsr2l	equ	0xFD9
 11508                           status	equ	0xFD8
 11509                           
 11510 ;; *************** function _Reset_Nec_State *****************
 11511 ;; Defined at:
 11512 ;;		line 50 in file "Interrupt.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;		None
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;		None
 11517 ;; Return value:  Size  Location     Type
 11518 ;;		None               void
 11519 ;; Registers used:
 11520 ;;		wreg, status,2
 11521 ;; Tracked objects:
 11522 ;;		On entry : 0/0
 11523 ;;		On exit  : 0/0
 11524 ;;		Unchanged: 0/0
 11525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;Total ram usage:        0 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; This function calls:
 11533 ;;		Nothing
 11534 ;; This function is called by:
 11535 ;;		_INTx_isr
 11536 ;; This function uses a non-reentrant model
 11537 ;;
 11538                           
 11539                           	psect	text75
 11540  001FAE                     __ptext75:
 11541                           	opt stack 0
 11542  001FAE                     _Reset_Nec_State:
 11543                           	opt stack 20
 11544                           
 11545                           ;Interrupt.c: 52: Nec_State = 0;
 11546                           
 11547                           ;incstack = 0
 11548  001FAE  0E00               	movlw	0
 11549  001FB0  6E54               	movwf	_Nec_State,c
 11550                           
 11551                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 0;
 11552  001FB2  90CD               	bcf	4045,0,c	;volatile
 11553  001FB4  0012               	return		;funcret
 11554  001FB6                     __end_of_Reset_Nec_State:
 11555                           	opt stack 0
 11556                           pclatu	equ	0xFFB
 11557                           pclath	equ	0xFFA
 11558                           tblptru	equ	0xFF8
 11559                           tblptrh	equ	0xFF7
 11560                           tblptrl	equ	0xFF6
 11561                           tablat	equ	0xFF5
 11562                           prodh	equ	0xFF4
 11563                           prodl	equ	0xFF3
 11564                           intcon	equ	0xFF2
 11565                           intcon2	equ	0xFF1
 11566                           intcon3	equ	0xFF0
 11567                           postinc0	equ	0xFEE
 11568                           fsr0h	equ	0xFEA
 11569                           fsr0l	equ	0xFE9
 11570                           wreg	equ	0xFE8
 11571                           postdec1	equ	0xFE5
 11572                           fsr1h	equ	0xFE2
 11573                           fsr1l	equ	0xFE1
 11574                           indf2	equ	0xFDF
 11575                           postinc2	equ	0xFDE
 11576                           postdec2	equ	0xFDD
 11577                           fsr2h	equ	0xFDA
 11578                           fsr2l	equ	0xFD9
 11579                           status	equ	0xFD8
 11580                           pclatu	equ	0xFFB
 11581                           pclath	equ	0xFFA
 11582                           tblptru	equ	0xFF8
 11583                           tblptrh	equ	0xFF7
 11584                           tblptrl	equ	0xFF6
 11585                           tablat	equ	0xFF5
 11586                           prodh	equ	0xFF4
 11587                           prodl	equ	0xFF3
 11588                           intcon	equ	0xFF2
 11589                           intcon2	equ	0xFF1
 11590                           intcon3	equ	0xFF0
 11591                           postinc0	equ	0xFEE
 11592                           fsr0h	equ	0xFEA
 11593                           fsr0l	equ	0xFE9
 11594                           wreg	equ	0xFE8
 11595                           postdec1	equ	0xFE5
 11596                           fsr1h	equ	0xFE2
 11597                           fsr1l	equ	0xFE1
 11598                           indf2	equ	0xFDF
 11599                           postinc2	equ	0xFDE
 11600                           postdec2	equ	0xFDD
 11601                           fsr2h	equ	0xFDA
 11602                           fsr2l	equ	0xFD9
 11603                           status	equ	0xFD8
 11604                           
 11605                           	psect	rparam
 11606  0000                     pclatu	equ	0xFFB
 11607                           pclath	equ	0xFFA
 11608                           tblptru	equ	0xFF8
 11609                           tblptrh	equ	0xFF7
 11610                           tblptrl	equ	0xFF6
 11611                           tablat	equ	0xFF5
 11612                           prodh	equ	0xFF4
 11613                           prodl	equ	0xFF3
 11614                           intcon	equ	0xFF2
 11615                           intcon2	equ	0xFF1
 11616                           intcon3	equ	0xFF0
 11617                           postinc0	equ	0xFEE
 11618                           fsr0h	equ	0xFEA
 11619                           fsr0l	equ	0xFE9
 11620                           wreg	equ	0xFE8
 11621                           postdec1	equ	0xFE5
 11622                           fsr1h	equ	0xFE2
 11623                           fsr1l	equ	0xFE1
 11624                           indf2	equ	0xFDF
 11625                           postinc2	equ	0xFDE
 11626                           postdec2	equ	0xFDD
 11627                           fsr2h	equ	0xFDA
 11628                           fsr2l	equ	0xFD9
 11629                           status	equ	0xFD8


Data Sizes:
    Strings     158
    Constant    493
    Data        159
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128     12     116
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), txt1(BANK1[84]), Timing_Txt(BANK0[10]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), txt1(BANK1[84]), Timing_Txt(BANK0[10]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_6(CODE[22]), STR_5(CODE[19]), STR_4(CODE[19]), STR_3(CODE[43]), 
		 -> STR_2(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), txt1(BANK1[84]), Timing_Txt(BANK0[10]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_do_update_pwm
    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Turn_On_Fan->_do_update_pwm
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    _Initialize_LCD_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART
    _Increase_Speed->_do_update_pwm
    _Decrease_Speed->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write

Critical Paths under _chkisr in COMRAM

    _chkisr->_INTx_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_LCD_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   94307
                                              7 BANK0      5     5      0
                    _Activate_Buzzer
                        _DS1621_Init
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                     _Decrease_Speed
               _Enable_INT_Interrupt
                           _I2C_Init
                     _Increase_Speed
                     _Init_Interrupt
                          _Init_UART
              _Initialize_LCD_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                       _Wait_One_Sec
                            ___awdiv
                      _do_update_pwm
                         _drawCircle
                           _drawtext
                         _fillCircle
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3781
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    2141
                                             24 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8164
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8164
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          4     2      2    1293
                                             24 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           5     3      2    1259
                                             24 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1095
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   21893
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     239
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12786
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0    8164
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (1) _Enable_INT_Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0    8164
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8164
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2778
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         0     0      0       0
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (2) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     3     3      0     464
                                             19 COMRAM     3     3      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (1) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (3) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INTx_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INTx_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                    _Reset_Nec_State
 ---------------------------------------------------------------------------------
 (11) _Reset_Nec_State                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Init
     _I2C_Write_Cmd_Only
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Cmd_Write_Data
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
         _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Enable_INT_Interrupt
   _I2C_Init
     _i2cHighScl
     _i2cHighSda
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
         _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Init_Interrupt
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
   _Set_RPM_RGB
     ___awdiv
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Wait_One_Sec
     _Wait_Half_Second
   ___awdiv
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _get_RPM
     ___awdiv
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INTx_isr
     _Reset_Nec_State
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C      74       5       90.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     137      34        0.0%
DATA                 0      0     137       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 14 19:58:29 2024

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                       ___awdiv@sign 0016  
             __size_of_Turn_On_Fan 0010                ___wmul@multiplicand 0013  
                              l106 1C66                                l151 1C00  
                              l311 1CC8                                l148 1B36  
                              l317 15A0                                l333 0A76  
                              l342 09CC                                l335 0950  
                              l521 1E16                                l257 1970  
                              l370 1256                                l267 1E88  
                              l371 11C2                                l373 1232  
                              l381 06C8                                l374 1254  
                              l730 1E78                                l741 1D64  
                              l725 1B74                                l399 0AE6  
                              l831 0374                                l488 1F42  
                              l746 1DA8                                l860 16E0  
                              l861 16EA                                l862 16EC  
                              l686 04FA                                l855 16C4  
                              l864 1706                                _FAN 0052  
                              l794 011C                                l859 16DE  
                              l867 1D1A                  ?_Wait_Half_Second 0001  
                              _PR2 000FCB                                _day 005C  
                _Deactivate_Buzzer 1F96               __size_of_I2C_ReStart 0016  
                              _dow 005D                                _nbr 004C  
                              _rpm 004E              __size_of_Turn_Off_Fan 000A  
                              _txt 0050                                prod 000FF3  
                              wreg 000FE8                 ??_Wait_Half_Second 0011  
               ?_Deactivate_Buzzer 0001                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 1CCA  
                     ___ftdiv@cntr 0035                       ___ftdiv@sign 003A  
                     __CFG_WDT$OFF 000000                               l1060 1518  
                   drawFastVLine@h 0019                               l1400 1A08  
                             l1250 1146                               l1324 1D40  
                             l1262 0EC0                               l1175 131C  
                             l1247 117A                               l1186 12F4  
                             l1283 1098                     drawFastVLine@x 0022  
                             l1429 1BB2                     drawFastVLine@y 0018  
                             l1390 1824                               l1298 1D86  
                             l5003 1562                               l5013 1588  
                             l5031 1278                               l5015 1596  
                             l5041 12DC                               l5033 1284  
                             l5113 10B8                               l5043 12E8  
                             l5035 12A4                               l5027 1268  
                             l5115 10D2                               l5055 130E  
                             l5039 12BC                               l5119 10E0  
                             l5231 1042                               l5207 0FD2  
                             l6103 0164                               l5049 12FC  
                             l5161 0E02                               l5225 102C  
                             l6113 0198                               l6105 0168  
                             l5139 1120                               l5243 1086  
                             l5235 1056                               l5403 093E  
                             l6043 1A48                               l6051 190E  
                             l6123 01AE                               l5261 1BF8  
                             l5149 1154                               l5165 0E10  
                             l5237 1064                               l5229 103C  
                             l5421 09C4                               l5413 095C  
                             l6141 0206                               l6117 019E  
                             l6109 0174                               l6133 01D8  
                             l5183 0E56                               l5159 0DE8  
                             l5239 106E                               l5087 1CAA  
                             l5095 1A66                               l5431 0A16  
                             l5407 094C                               l6055 1920  
                             l6127 01D2                               l6119 01A2  
                             l6135 01EA                               l6071 0064  
                             l6063 0036                               l5193 0E84  
                             l6209 1D56                               l5417 098C  
                             l5409 0954                               l6161 0274  
                             l6153 024C                               l6145 022A  
                             l6065 0044                               l5267 1C0A  
                             l5187 0E6C                               l5179 0E44  
                             l5099 1A82                               l5419 09C0  
                             l5451 1B80                               l5603 1C72  
                             l6171 02A8                               l6155 0254  
                             l6147 0234                               l6083 00E6  
                             l6075 0082                               l6059 0026  
                             l5269 1C10                               l5533 1AFA  
                             l5197 0E9A                               l5189 0E72  
                             l5517 13AA                               l5701 16D6  
                             l5437 0A42                               l5429 09EE  
                             l5445 0A72                               l5453 1B86  
                             l5605 1C7C                               l6173 02EC  
                             l6181 0344                               l6165 028C  
                             l6069 004E     I2C_Write_Cmd_Write_Data@Device 0015  
                             l5279 1C22                               l5543 1B10  
                             l5551 1B20                               l5439 0A6A  
                             l5631 0D5A                               l5615 0CEC  
                             l5463 118C                               l6191 1E72  
                             l6183 034C                               l6159 026C  
                             l6087 00EE                               l5545 1B18  
                             l5537 1B02                               l5641 0DB4  
                             l5481 1228                               l6169 02A0  
                             l6185 0358                               l6601 04FE  
                             l5555 1B2C                               l5627 0D3C  
                             l5811 17FA                               l6179 0332  
                             l6099 014A                               l6611 0524  
                             l5557 1B32                               l5485 1236  
                             l5469 11FA                               l5653 0ACC  
                             l6199 1D9A                               l5399 0932  
                             l5639 0DAC                               l5495 1250  
                             l5807 17E8                               l5831 19E6  
                             l6615 0544                               l6607 051A  
                             l5681 16AA                               l5489 1240  
                             l5673 0B9A                               l5809 17F2  
                             l5753 1D7E                               l5771 14AC  
                             l5819 1818                               l5835 19FC  
                             l5827 19D4                               l6619 054A  
                             l5693 16C8                               l5685 16B4  
                             l5781 14D4                               l5765 149A  
                             l5669 0B48                               l5829 19DE  
                             l6557 03E4                               l6575 04A4  
                             l5689 16BC                               l5777 14C2  
                             l5793 14FE                               l6593 04E2  
                             l6585 04C6                               l5947 1434  
                             l5779 14CC                               l5971 06AE  
                             l5797 150E                               l5789 14F2  
                             l6597 04F0                               l6589 04D4  
                             l4999 152A                               l5999 079E  
                             STR_1 FFF6                               STR_2 FF8B  
                             STR_3 FF60                               STR_4 FFD2  
                             STR_5 FFBF                               STR_6 FFA9  
                             STR_7 FFE5                               u4000 11BA  
                             u4010 11F0                               u4130 0D16  
                             u3611 10AA                               u3460 1558  
                             u3631 10C8                               u3721 0FC4  
                             u4530 1A3E                               u5067 1F50  
                             u3740 0FF0                               u4540 1904  
                             u3661 0DDA                               u3681 0DF8  
                             u3745 0FE8                               u3930 0A24  
                             i2l47 15E4                               i2l59 0920  
                             _TRMT 007D61                ??_Deactivate_Buzzer 0011  
                             _main 0376                               _font FD73  
                     ___ftpack@arg 0011                               _hour 005F  
                     ___ftpack@exp 0014                   __end_of_I2C_Init 1F78  
                 __end_of_I2C_Read 1B38                               _year 006D  
                             fsr0h 000FEA                               _txt1 0100  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006F                   __end_of_I2C_Stop 1EFC  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                  __end_of_Do_Beep 1EC6                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                     _Increase_Speed 1D42  
             _Enable_INT_Interrupt 1FB6                    ??_drawFastVLine 001C  
                     ___ftmul@cntr 002A                    __end_of_i2cNack 1F8C  
                     ___param_bank 000010                       ___ftmul@sign 002B  
                  _Reset_Nec_State 1FAE                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 1F64                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001          __end_of_Deactivate_Buzzer 1F9E  
                  ??_do_update_pwm 003B                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 151A                    drawCircle@ddF_x 0026  
                  drawCircle@ddF_y 0028                    __end_of___ftdiv 117C  
                  __end_of___ftmul 0EC2                              _T0CON 000FD5  
                  ___awdiv@divisor 0013                              _T1CON 000FCD  
                  __end_of___fttol 109A                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 182E  
                  __end_of___lwmod 1A12                    ___awdiv@counter 0015  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTA 000F80                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 1B76                              _Rcmd1 0BB0  
                            _Rcmd3 0EC2                              _nRBPU 007F8F  
                       _Nec_Button 0053                   __end_of_INTx_isr 0922  
                       _i2cHighSda 1FA6                         _i2cHighScl 1F4C  
                  __end_of_dpowers FF58                              _color 0080  
                            _font2 FE72              fillCircleHelper@ddF_x 0031  
            fillCircleHelper@ddF_y 0033                    __end_of_isdigit 1D88  
                            _month 0061                      ___ftpack@sign 0015  
            fillCircleHelper@delta 002B                              _putch 1F3E  
            fillCircleHelper@color 002D                              main@i 00F3  
                __end_of_I2C_Start 1F0E                  __end_of_I2C_Write 1C30  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8             __end_of_Increase_Speed 1D66  
                ?_DS1621_Read_Temp 0001              ?_Enable_INT_Interrupt 0001  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0014  
                  __initialization 161E                      ??_Set_RPM_RGB 001B  
                     __end_of_main 0606                       __end_of_font FE72  
                 __end_of_Rcmd2red 1BF2                   ??_Decrease_Speed 0044  
                           ??_main 00EF                      ___fttol@sign1 001A  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 1EB4                         _Set_DC_RGB 1A12  
        ??_TFT_GreenTab_Initialize 001D                     _Init_Interrupt 1E38  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _ADCON2 000FC0  
              DS1621_Read_Temp@Cmd 0014                             _ADRESH 000FC4  
                           _ADRESL 000FC3                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0011  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 131E  
                 __end_of___lbtoft 1D42                          ??_Do_Beep 0011  
                           i2l2401 082A                             i2l2421 085C  
                           i2l2431 0884                             i2l2415 0852  
                           i2l2407 0834                             i2l2443 08CC  
                           i2l2435 0888                             i2l2427 0878  
                           i2l2461 08FA                             i2l2429 087E  
                           i2l2381 07DC                             i2l2457 08EE  
                           i2l2393 080C                             i2l2459 08F4  
                           i2l2467 08FE                             i2l2833 15DA  
                           _OSCCON 000FD3                 __size_of_Init_UART 0014  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
          __end_of_Reset_Nec_State 1FB6                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                 __end_of_delay_ms 1978                             _Nec_OK 0048  
                           _i2cAck 1ED8                   __end_of_fillRect 1AA6  
                 __end_of_drawChar 0A78                 __size_of_OpenUSART 0070  
         __size_of_Activate_Buzzer 0012                             ___wmul 1CF4  
                        ??___awdiv 0015          __size_of_fillCircleHelper 0138  
                 __end_of_drawtext 0DCA                          ??___ftdiv 0032  
                        ??___ftmul 0023                          ??___fttol 0015  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 00AA                          ??___lwmod 001C  
                           _buffer 00C9                             clear_0 1624  
                           clear_1 1630                   ___awdiv@quotient 0017  
                           _minute 0060                             _second 0063  
          DS3231_Setup_Time@Device 0013                         _Timing_Txt 00BF  
                        ??_get_RPM 001B         __size_of_Deactivate_Buzzer 0008  
                           _printf 001C                       drawtext@size 0040  
                           _strcpy 1C68                             _strlen 1B76  
            ___ftmul@f3_as_product 0027             __end_of_Init_Interrupt 1E50  
              __end_of_Set_RPM_RGB 1926            ??_Initialize_LCD_Screen 0043  
                       _Toggle_Fan 1E66                       __pdataCOMRAM 006E  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD72                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 1DCA                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 1E8E                         __accesstop 0080  
          __end_of__initialization 168E             ??_Enable_INT_Interrupt 0011  
               _setup_alarm_minute 0065                 _setup_alarm_second 0066  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0011  
                    __end_of_Rcmd1 0CC0                      __end_of_Rcmd3 0FB4  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1AA6  
                     __pidataBANK1 182E                          ?_INTx_isr 0001  
                    __end_of_font2 FF4E                  __end_of_i2cLowSda 1F96  
                __end_of_i2cLowScl 1FA6                      __end_of_putch 1F4C  
                __end_of_Init_UART 1EA2                     drawPixel@color 0019  
                  ?_Init_Interrupt 0001             __size_of_write_command 0010  
                       ??_I2C_Init 0015                        ?_Set_DC_RGB 0019  
                       ??_I2C_Read 0011                       _alarm_minute 0058  
                     _alarm_second 0059                         ??_I2C_Stop 0011  
       fillCircleHelper@cornername 0029                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1708                            ??_putch 0011  
                       __pbssBANK0 00C9                   _setup_alarm_hour 0064  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
        __size_of_Wait_Half_Second 001A                    spiwrite@spidata 0012  
                       _alarm_date 0056                   ?_Reset_Nec_State 0001  
                       _alarm_hour 0057                      ?_Wait_One_Sec 0001  
                          ?_i2cAck 0001               Set_DC_RGB@duty_cycle 0019  
                    ??_Turn_On_Fan 0044                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                        _Set_RPM_RGB 18D4  
                       ??_INTx_isr 0001                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                        ?___ftpack 0011                          ?___lbtoft 0019  
                       _fillCircle 1882                         I2C_Write@n 0012  
                          ?_printf 001D                    Set_DC_RGB@range 001C  
                          ?_strcpy 0011                            ?_strlen 0011  
                      ?_Toggle_Fan 0001                  ??_Activate_Buzzer 0011  
                       _fillScreen 1DE8                         _drawCircle 0606  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 1258  
                          _Do_Beep 1EB4                          ?_drawtext 0039  
                _DS3231_Setup_Time 1708           _I2C_Write_Cmd_Write_Data 1DAA  
       __end_of_I2C_Write_Cmd_Only 1E38                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0016                     ??_Wait_One_Sec 0011  
                          _i2cNack 1F82                 __end_of_TIMER1_isr 1F64  
               ?_DS3231_Setup_Time 0001                      _write_command 1F2E  
                        _I2C_Start 1EFC                          _I2C_Write 1BF2  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __size_of_Set_DC_RGB 004A  
              __end_of_DS1621_Init 1DE8                  __end_of_drawPixel 1CCA  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 15A2  
                 _fillCircleHelper 0A78                            ___awdiv 1484  
                          ___ftdiv 109A                    __size_of___wmul 0028  
                          ___ftmul 0DCA                            ___fttol 0FB4  
                          ___lwdiv 17D2                            ___lwmod 19C6  
                  __size_of_chkisr 1616                          ?_spiwrite 0001  
                          __pcinit 161E                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 1B38                            __ptext0 0376  
                          __ptext1 001C                            __ptext2 1F3E  
                          __ptext3 1D66                            __ptext4 19C6  
                          __ptext5 17D2          __size_of_DS1621_Read_Temp 0038  
                          __ptext6 1B38                            __ptext7 1882  
                          __ptext8 0A78                            __ptext9 0606  
                  __size_of_printf 035A                __end_of_Turn_On_Fan 1F1E  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF60  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF4E              __end_of_do_update_pwm 13D4  
                          _isdigit 1D66                          _T3CONbits 000FB1  
                       _duty_cycle 005E                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 1E66                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 176E                   ??_Increase_Speed 0044  
                       ??_drawChar 0035                          _LCD_Reset 1EA2  
                    _setAddrWindow 1978                     __pintcode_body 15A2  
                       delay_ms@ms 0017               end_of_initialization 168E  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD72          __size_of_DS3231_Read_Time 0064  
                          int_func 15A2            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 001B                __size_of_Toggle_Fan 0014  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                   drawtext@cursor_x 00EE  
                 drawtext@cursor_y 00ED                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                 I2C_Write@outByte 0011                        ?_fillScreen 0024  
                       _setup_hour 0068                         _setup_year 006C  
                      ?_drawCircle 001C     __size_of_Initialize_LCD_Screen 00B0  
                       drawChar@bg 0032      __end_of_Initialize_LCD_Screen 1484  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00E9  
                       drawPixel@x 001B                         drawPixel@y 0018  
                 _Wait_Half_Second 1E04                        _DS1621_Init 1DCA  
                      ___ftdiv@exp 0039                        printf@width 0036  
                        _TXSTAbits 000FAC                     __end_of_i2cAck 1EEA  
                      ___ftmul@exp 0026           DS1621_Read_Temp@Data_Ret 0015  
                      _Turn_On_Fan 1F0E                   ??_Init_Interrupt 0011  
               __end_of_i2cHighSda 1FAE                 __end_of_i2cHighScl 1F58  
                   __end_of___wmul 1D1C                      delay_ms@count 001B  
                       _write_data 1F1E                      __pidataCOMRAM 1FBC  
                   __end_of_chkisr 161E           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 1E50                  __size_of_INTx_isr 016E  
                        _Nec_State 0054                         drawtext@bg 003E  
                        _i2cLowSda 1F8C                          _i2cLowScl 1F9E  
             __end_of_Wait_One_Sec 1F82                     __end_of_printf 0376  
                     ??_Set_DC_RGB 001B                     __end_of_strcpy 1C9A  
                   __end_of_strlen 1BB4                start_initialization 161E  
                        _Init_UART 1E8E         __size_of_DS3231_Setup_Time 0066  
          __size_of_Decrease_Speed 0022                    ??_write_command 0013  
                        _OpenUSART 1698                __size_of_fillCircle 0052  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE      __size_of_Enable_INT_Interrupt 0006  
                  _Activate_Buzzer 1EC6                 __end_of_Set_DC_RGB 1A5C  
                         ??___wmul 0015                       ?_Set_RPM_RGB 0019  
                    ?_Turn_Off_Fan 0001                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 002B                   _DS1621_Read_Temp 1C30  
                         ??_strcpy 0015                           ??_strlen 0013  
                     ??_Toggle_Fan 0044                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                         ?_Init_UART 0001  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00E8  
                      ??_LCD_Reset 001D                       _isdigit$2330 0012  
         __end_of_fillCircleHelper 0BB0                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 176E                           ?_i2cNack 0001  
                __size_of_drawtext 010A                   ___lwdiv@dividend 0011  
               __end_of_Toggle_Fan 1E7A                        I2C_Read@ack 0011  
                        _bit_count 005A                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 1CF4                     ??_Turn_Off_Fan 0011  
                    __pmediumconst FD72                           ?___awdiv 0011  
                         ?___ftdiv 002C           __size_of_Reset_Nec_State 0008  
                         ?___ftmul 001D                           ?___fttol 0011  
                        __tft_type 0055                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 1E1E                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 1C9A                           ?_get_RPM 0019  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                         ?_isdigit 0001                           _I2C_Init 1F6E  
                         _I2C_Read 1AF0                           _I2C_Stop 1EEA  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF58  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 1ED8                     ___wmul@product 0015  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                         _PIR2bits 000FA1                           _INTx_isr 07B4  
            __size_of_Wait_One_Sec 000A                          _setup_day 0067  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                       ??_fillCircle 0043  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
                       _ADCON0bits 000FC2           __end_of_Wait_Half_Second 1E1E  
                ___wmul@multiplier 0011                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0035  
                       printf@prec 0032                          main@found 00F2  
                        main@tempC 00F1                          main@tempF 00F0  
                      ??_Init_UART 0014                     _Decrease_Speed 1D88  
                      _INTCON2bits 000FF1                        _INTCON3bits 000FF0  
                        copy_data0 164A                          copy_data1 166A  
                        drawtext@i 00EB             __size_of_drawFastVLine 0088  
                        drawtext@x 00E8                          drawtext@y 0039  
                         _Nec_code 0044                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                   __size_of_Do_Beep 0012  
                     ?_DS1621_Init 0001                           _Rcmd2red 1BB4  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 004A                 __end_of_fillCircle 18D4  
                 __size_of_i2cNack 000A                       _Wait_One_Sec 1F78  
                         __Hrparam 0000             __size_of_do_update_pwm 00B6  
               __end_of_fillScreen 1E04                           __Lrparam 0000  
               __end_of_drawCircle 07B4                       ?_Turn_On_Fan 0001  
                 __size_of___awdiv 0096                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
             __size_of_Set_RPM_RGB 0052                           ___ftpack 1258  
                         ___lbtoft 1D1C                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 003E                  ??_Reset_Nec_State 0001  
                 __size_of_isdigit 0022                           _delay_ms 1926  
           __end_of_Decrease_Speed 1DAA                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 1E66  
                         __ptext11 1F0E                           __ptext20 0CC0  
                         __ptext12 1F64                           __ptext21 1B76  
                         __ptext13 18D4                           __ptext30 0BB0  
                         __ptext22 0922                           __ptext14 1A12  
                         __ptext31 1F1E                           __ptext23 1A5C  
                         __ptext15 1484                           __ptext40 1D42  
                         __ptext32 1F2E                           __ptext24 151A  
                         __ptext16 13D4                           __ptext41 1F6E  
                         __ptext33 1E7A                           __ptext25 1C9A  
                         __ptext17 1C68                           __ptext50 1EB4  
                         __ptext42 1FB6                           __ptext34 1EA2  
                         __ptext26 1978                           __ptext18 1DE8  
                         __ptext51 1F78                           __ptext43 1D88  
                         __ptext35 1926                           __ptext27 1CCA  
                         __ptext19 117C                           __ptext60 1ED8  
                         __ptext52 1E04                           __ptext44 131E  
                         __ptext36 1CF4                           __ptext28 0EC2  
                         __ptext61 1E50                           __ptext53 1F96  
                         __ptext45 1D1C                           __ptext37 1E8E  
                         __ptext29 1BB4                           __ptext70 1FA6  
                         __ptext62 1DCA                           __ptext54 1EC6  
                         __ptext46 0FB4                           __ptext38 1698  
                         __ptext71 1F4C                           __ptext63 1DAA  
                         __ptext55 1708                           __ptext47 0DCA  
                         __ptext39 1E38                           __ptext64 1E1E  
                         __ptext56 176E                           __ptext48 109A  
                         __ptext73 1F58                           __ptext65 1BF2  
                         __ptext57 1C30                           __ptext49 1258  
                         __ptext74 07B4                           __ptext66 1EEA  
                         __ptext58 1AF0                           __ptext75 1FAE  
                         __ptext67 1EFC                           __ptext59 1F82  
                         __ptext68 1F8C                           __ptext69 1F9E  
                         _fillRect 1A5C                           _drawChar 0922  
            _Initialize_LCD_Screen 13D4               __end_of_Turn_Off_Fan 1F6E  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 005B  
                         _drawtext 0CC0                         strcpy@from 0013  
                    _fillRectangle 117C           __end_of_DS1621_Read_Temp 1C68  
                 ?_Activate_Buzzer 0001                      __size_of_main 0290  
          __size_of_Increase_Speed 0024                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 151A  
                        printf@idx 002F                           _spiwrite 1E7A  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0062           __end_of_DS3231_Read_Time 17D2  
               fillCircleHelper@x0 0023                 fillCircleHelper@y0 0025  
     __end_of_Enable_INT_Interrupt 1FBC                         _INTCONbits 000FF2  
                    _do_update_pwm 131E                     OpenUSART@spbrg 0011  
                  ?_Decrease_Speed 0001                           isdigit@c 0013  
                ?_fillCircleHelper 0023                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
               ??_fillCircleHelper 002F                   ___lwmod@dividend 0018  
            __end_of_write_command 1F3E                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 0041                       fillCircle@x0 003B  
                     fillCircle@y0 003D                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                   Set_RPM_RGB@range 001B  
                   ?_drawFastVLine 0018                           printf@ap 0030  
                fillCircleHelper@f 0035                  fillCircleHelper@r 0027  
                fillCircleHelper@x 0037                  fillCircleHelper@y 0039  
                     ??_write_data 0013                         _TIMER1_isr 1F58  
                    fillRect@color 0026                     ?_do_update_pwm 0001  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0069                       _setup_second 006B  
          __size_of_Init_Interrupt 0018             ?_Initialize_LCD_Screen 0001  
                      fillCircle@r 003F              __end_of_setAddrWindow 19C6  
               fillRectangle@color 001B                  do_update_pwm@dc_I 0042  
                do_update_pwm@dc_f 003E                      drawChar@color 0030  
                      _setup_month 006A                     Set_RPM_RGB@rpm 0019  
               __end_of_write_data 1F2E                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
