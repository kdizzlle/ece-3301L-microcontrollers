

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 07 19:41:05 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           	psect	idataCOMRAM
    83  001AB6                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _tempSecond
    87  001AB6  FF                 	db	255
    88                           
    89                           ;initializer for _wrap
    90  001AB7  01                 	db	1
    91                           
    92                           	psect	idataBANK0
    93  00168A                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _color
    97  00168A  F800               	dw	63488
    98  00168C  F800               	dw	63488
    99  00168E  F800               	dw	63488
   100  001690  001F               	dw	31
   101  001692  001F               	dw	31
   102  001694  07E0               	dw	2016
   103  001696  001F               	dw	31
   104  001698  001F               	dw	31
   105  00169A  F81F               	dw	63519
   106  00169C  0000               	dw	0
   107  00169E  0000               	dw	0
   108  0016A0  0000               	dw	0
   109  0016A2  0000               	dw	0
   110  0016A4  0000               	dw	0
   111  0016A6  0000               	dw	0
   112  0016A8  0000               	dw	0
   113  0016AA  0000               	dw	0
   114  0016AC  0000               	dw	0
   115  0016AE  0000               	dw	0
   116  0016B0  0000               	dw	0
   117  0016B2  0000               	dw	0
   118                           
   119                           ;initializer for _array1
   120  0016B4  A2                 	db	162
   121  0016B5  62                 	db	98
   122  0016B6  E2                 	db	226
   123  0016B7  22                 	db	34
   124  0016B8  02                 	db	2
   125  0016B9  C2                 	db	194
   126  0016BA  E0                 	db	224
   127  0016BB  A8                 	db	168
   128  0016BC  90                 	db	144
   129  0016BD  68                 	db	104
   130  0016BE  98                 	db	152
   131  0016BF  B0                 	db	176
   132  0016C0  30                 	db	48
   133  0016C1  18                 	db	24
   134  0016C2  7A                 	db	122
   135  0016C3  10                 	db	16
   136  0016C4  38                 	db	56
   137  0016C5  5A                 	db	90
   138  0016C6  42                 	db	66
   139  0016C7  4A                 	db	74
   140  0016C8  52                 	db	82
   141                           
   142                           ;initializer for _Timing_Txt
   143  0016C9  53                 	db	83
   144  0016CA  50                 	db	80
   145  0016CB  32                 	db	50
   146  0016CC  34                 	db	52
   147  0016CD  2F                 	db	47
   148  0016CE  33                 	db	51
   149  0016CF  2F                 	db	47
   150  0016D0  30                 	db	48
   151  0016D1  31                 	db	49
   152  0016D2  00                 	db	0
   153                           
   154                           	psect	idataBANK1
   155  0014AE                     __pidataBANK1:
   156                           	opt stack 0
   157                           
   158                           ;initializer for _txt1
   159  0014AE  43                 	db	67
   160  0014AF  48                 	db	72
   161  0014B0  2D                 	db	45
   162  0014B1  00                 	db	0
   163  0014B2  43                 	db	67
   164  0014B3  48                 	db	72
   165  0014B4  00                 	db	0
   166  0014B5  00                 	db	0
   167  0014B6  43                 	db	67
   168  0014B7  48                 	db	72
   169  0014B8  2B                 	db	43
   170  0014B9  00                 	db	0
   171  0014BA  42                 	db	66
   172  0014BB  57                 	db	87
   173  0014BC  44                 	db	68
   174  0014BD  00                 	db	0
   175  0014BE  46                 	db	70
   176  0014BF  57                 	db	87
   177  0014C0  44                 	db	68
   178  0014C1  00                 	db	0
   179  0014C2  50                 	db	80
   180  0014C3  4C                 	db	76
   181  0014C4  59                 	db	89
   182  0014C5  00                 	db	0
   183  0014C6  56                 	db	86
   184  0014C7  4C                 	db	76
   185  0014C8  2D                 	db	45
   186  0014C9  00                 	db	0
   187  0014CA  56                 	db	86
   188  0014CB  4C                 	db	76
   189  0014CC  2B                 	db	43
   190  0014CD  00                 	db	0
   191  0014CE  45                 	db	69
   192  0014CF  51                 	db	81
   193  0014D0  20                 	db	32
   194  0014D1  00                 	db	0
   195  0014D2  20                 	db	32
   196  0014D3  30                 	db	48
   197  0014D4  20                 	db	32
   198  0014D5  00                 	db	0
   199  0014D6  31                 	db	49
   200  0014D7  30                 	db	48
   201  0014D8  30                 	db	48
   202  0014D9  00                 	db	0
   203  0014DA  32                 	db	50
   204  0014DB  30                 	db	48
   205  0014DC  30                 	db	48
   206  0014DD  00                 	db	0
   207  0014DE  20                 	db	32
   208  0014DF  31                 	db	49
   209  0014E0  20                 	db	32
   210  0014E1  00                 	db	0
   211  0014E2  20                 	db	32
   212  0014E3  32                 	db	50
   213  0014E4  20                 	db	32
   214  0014E5  00                 	db	0
   215  0014E6  20                 	db	32
   216  0014E7  33                 	db	51
   217  0014E8  20                 	db	32
   218  0014E9  00                 	db	0
   219  0014EA  20                 	db	32
   220  0014EB  34                 	db	52
   221  0014EC  20                 	db	32
   222  0014ED  00                 	db	0
   223  0014EE  20                 	db	32
   224  0014EF  35                 	db	53
   225  0014F0  20                 	db	32
   226  0014F1  00                 	db	0
   227  0014F2  20                 	db	32
   228  0014F3  36                 	db	54
   229  0014F4  20                 	db	32
   230  0014F5  00                 	db	0
   231  0014F6  20                 	db	32
   232  0014F7  37                 	db	55
   233  0014F8  20                 	db	32
   234  0014F9  00                 	db	0
   235  0014FA  20                 	db	32
   236  0014FB  38                 	db	56
   237  0014FC  20                 	db	32
   238  0014FD  00                 	db	0
   239  0014FE  20                 	db	32
   240  0014FF  39                 	db	57
   241  001500  20                 	db	32
   242  001501  00                 	db	0
   243                           
   244                           	psect	mediumconst
   245  00FD86                     __pmediumconst:
   246                           	opt stack 0
   247  00FD86  00                 	db	0
   248  00FD87                     _font:
   249                           	opt stack 0
   250  00FD87  00                 	db	0
   251  00FD88  00                 	db	0
   252  00FD89  00                 	db	0
   253  00FD8A  00                 	db	0
   254  00FD8B  00                 	db	0
   255  00FD8C  00                 	db	0
   256  00FD8D  00                 	db	0
   257  00FD8E  5F                 	db	95
   258  00FD8F  00                 	db	0
   259  00FD90  00                 	db	0
   260  00FD91  00                 	db	0
   261  00FD92  07                 	db	7
   262  00FD93  00                 	db	0
   263  00FD94  07                 	db	7
   264  00FD95  00                 	db	0
   265  00FD96  14                 	db	20
   266  00FD97  7F                 	db	127
   267  00FD98  14                 	db	20
   268  00FD99  7F                 	db	127
   269  00FD9A  14                 	db	20
   270  00FD9B  24                 	db	36
   271  00FD9C  2A                 	db	42
   272  00FD9D  7F                 	db	127
   273  00FD9E  2A                 	db	42
   274  00FD9F  12                 	db	18
   275  00FDA0  23                 	db	35
   276  00FDA1  13                 	db	19
   277  00FDA2  08                 	db	8
   278  00FDA3  64                 	db	100
   279  00FDA4  62                 	db	98
   280  00FDA5  36                 	db	54
   281  00FDA6  49                 	db	73
   282  00FDA7  56                 	db	86
   283  00FDA8  20                 	db	32
   284  00FDA9  50                 	db	80
   285  00FDAA  00                 	db	0
   286  00FDAB  08                 	db	8
   287  00FDAC  07                 	db	7
   288  00FDAD  03                 	db	3
   289  00FDAE  00                 	db	0
   290  00FDAF  00                 	db	0
   291  00FDB0  1C                 	db	28
   292  00FDB1  22                 	db	34
   293  00FDB2  41                 	db	65
   294  00FDB3  00                 	db	0
   295  00FDB4  00                 	db	0
   296  00FDB5  41                 	db	65
   297  00FDB6  22                 	db	34
   298  00FDB7  1C                 	db	28
   299  00FDB8  00                 	db	0
   300  00FDB9  2A                 	db	42
   301  00FDBA  1C                 	db	28
   302  00FDBB  7F                 	db	127
   303  00FDBC  1C                 	db	28
   304  00FDBD  2A                 	db	42
   305  00FDBE  08                 	db	8
   306  00FDBF  08                 	db	8
   307  00FDC0  3E                 	db	62
   308  00FDC1  08                 	db	8
   309  00FDC2  08                 	db	8
   310  00FDC3  00                 	db	0
   311  00FDC4  80                 	db	128
   312  00FDC5  70                 	db	112
   313  00FDC6  30                 	db	48
   314  00FDC7  00                 	db	0
   315  00FDC8  08                 	db	8
   316  00FDC9  08                 	db	8
   317  00FDCA  08                 	db	8
   318  00FDCB  08                 	db	8
   319  00FDCC  08                 	db	8
   320  00FDCD  00                 	db	0
   321  00FDCE  00                 	db	0
   322  00FDCF  60                 	db	96
   323  00FDD0  60                 	db	96
   324  00FDD1  00                 	db	0
   325  00FDD2  20                 	db	32
   326  00FDD3  10                 	db	16
   327  00FDD4  08                 	db	8
   328  00FDD5  04                 	db	4
   329  00FDD6  02                 	db	2
   330  00FDD7  3E                 	db	62
   331  00FDD8  51                 	db	81
   332  00FDD9  49                 	db	73
   333  00FDDA  45                 	db	69
   334  00FDDB  3E                 	db	62
   335  00FDDC  00                 	db	0
   336  00FDDD  42                 	db	66
   337  00FDDE  7F                 	db	127
   338  00FDDF  40                 	db	64
   339  00FDE0  00                 	db	0
   340  00FDE1  72                 	db	114
   341  00FDE2  49                 	db	73
   342  00FDE3  49                 	db	73
   343  00FDE4  49                 	db	73
   344  00FDE5  46                 	db	70
   345  00FDE6  21                 	db	33
   346  00FDE7  41                 	db	65
   347  00FDE8  49                 	db	73
   348  00FDE9  4D                 	db	77
   349  00FDEA  33                 	db	51
   350  00FDEB  18                 	db	24
   351  00FDEC  14                 	db	20
   352  00FDED  12                 	db	18
   353  00FDEE  7F                 	db	127
   354  00FDEF  10                 	db	16
   355  00FDF0  27                 	db	39
   356  00FDF1  45                 	db	69
   357  00FDF2  45                 	db	69
   358  00FDF3  45                 	db	69
   359  00FDF4  39                 	db	57
   360  00FDF5  3C                 	db	60
   361  00FDF6  4A                 	db	74
   362  00FDF7  49                 	db	73
   363  00FDF8  49                 	db	73
   364  00FDF9  31                 	db	49
   365  00FDFA  41                 	db	65
   366  00FDFB  21                 	db	33
   367  00FDFC  11                 	db	17
   368  00FDFD  09                 	db	9
   369  00FDFE  07                 	db	7
   370  00FDFF  36                 	db	54
   371  00FE00  49                 	db	73
   372  00FE01  49                 	db	73
   373  00FE02  49                 	db	73
   374  00FE03  36                 	db	54
   375  00FE04  46                 	db	70
   376  00FE05  49                 	db	73
   377  00FE06  49                 	db	73
   378  00FE07  29                 	db	41
   379  00FE08  1E                 	db	30
   380  00FE09  00                 	db	0
   381  00FE0A  00                 	db	0
   382  00FE0B  14                 	db	20
   383  00FE0C  00                 	db	0
   384  00FE0D  00                 	db	0
   385  00FE0E  00                 	db	0
   386  00FE0F  40                 	db	64
   387  00FE10  34                 	db	52
   388  00FE11  00                 	db	0
   389  00FE12  00                 	db	0
   390  00FE13  00                 	db	0
   391  00FE14  08                 	db	8
   392  00FE15  14                 	db	20
   393  00FE16  22                 	db	34
   394  00FE17  41                 	db	65
   395  00FE18  14                 	db	20
   396  00FE19  14                 	db	20
   397  00FE1A  14                 	db	20
   398  00FE1B  14                 	db	20
   399  00FE1C  14                 	db	20
   400  00FE1D  00                 	db	0
   401  00FE1E  41                 	db	65
   402  00FE1F  22                 	db	34
   403  00FE20  14                 	db	20
   404  00FE21  08                 	db	8
   405  00FE22  02                 	db	2
   406  00FE23  01                 	db	1
   407  00FE24  59                 	db	89
   408  00FE25  09                 	db	9
   409  00FE26  06                 	db	6
   410  00FE27  3E                 	db	62
   411  00FE28  41                 	db	65
   412  00FE29  5D                 	db	93
   413  00FE2A  59                 	db	89
   414  00FE2B  4E                 	db	78
   415  00FE2C  7C                 	db	124
   416  00FE2D  12                 	db	18
   417  00FE2E  11                 	db	17
   418  00FE2F  12                 	db	18
   419  00FE30  7C                 	db	124
   420  00FE31  7F                 	db	127
   421  00FE32  49                 	db	73
   422  00FE33  49                 	db	73
   423  00FE34  49                 	db	73
   424  00FE35  36                 	db	54
   425  00FE36  3E                 	db	62
   426  00FE37  41                 	db	65
   427  00FE38  41                 	db	65
   428  00FE39  41                 	db	65
   429  00FE3A  22                 	db	34
   430  00FE3B  7F                 	db	127
   431  00FE3C  41                 	db	65
   432  00FE3D  41                 	db	65
   433  00FE3E  41                 	db	65
   434  00FE3F  3E                 	db	62
   435  00FE40  7F                 	db	127
   436  00FE41  49                 	db	73
   437  00FE42  49                 	db	73
   438  00FE43  49                 	db	73
   439  00FE44  41                 	db	65
   440  00FE45  7F                 	db	127
   441  00FE46  09                 	db	9
   442  00FE47  09                 	db	9
   443  00FE48  09                 	db	9
   444  00FE49  01                 	db	1
   445  00FE4A  3E                 	db	62
   446  00FE4B  41                 	db	65
   447  00FE4C  41                 	db	65
   448  00FE4D  51                 	db	81
   449  00FE4E  73                 	db	115
   450  00FE4F  7F                 	db	127
   451  00FE50  08                 	db	8
   452  00FE51  08                 	db	8
   453  00FE52  08                 	db	8
   454  00FE53  7F                 	db	127
   455  00FE54  00                 	db	0
   456  00FE55  41                 	db	65
   457  00FE56  7F                 	db	127
   458  00FE57  41                 	db	65
   459  00FE58  00                 	db	0
   460  00FE59  20                 	db	32
   461  00FE5A  40                 	db	64
   462  00FE5B  41                 	db	65
   463  00FE5C  3F                 	db	63
   464  00FE5D  01                 	db	1
   465  00FE5E  7F                 	db	127
   466  00FE5F  08                 	db	8
   467  00FE60  14                 	db	20
   468  00FE61  22                 	db	34
   469  00FE62  41                 	db	65
   470  00FE63  7F                 	db	127
   471  00FE64  40                 	db	64
   472  00FE65  40                 	db	64
   473  00FE66  40                 	db	64
   474  00FE67  40                 	db	64
   475  00FE68  7F                 	db	127
   476  00FE69  02                 	db	2
   477  00FE6A  1C                 	db	28
   478  00FE6B  02                 	db	2
   479  00FE6C  7F                 	db	127
   480  00FE6D  7F                 	db	127
   481  00FE6E  04                 	db	4
   482  00FE6F  08                 	db	8
   483  00FE70  10                 	db	16
   484  00FE71  7F                 	db	127
   485  00FE72  3E                 	db	62
   486  00FE73  41                 	db	65
   487  00FE74  41                 	db	65
   488  00FE75  41                 	db	65
   489  00FE76  3E                 	db	62
   490  00FE77  7F                 	db	127
   491  00FE78  09                 	db	9
   492  00FE79  09                 	db	9
   493  00FE7A  09                 	db	9
   494  00FE7B  06                 	db	6
   495  00FE7C  3E                 	db	62
   496  00FE7D  41                 	db	65
   497  00FE7E  51                 	db	81
   498  00FE7F  21                 	db	33
   499  00FE80  5E                 	db	94
   500  00FE81  7F                 	db	127
   501  00FE82  09                 	db	9
   502  00FE83  19                 	db	25
   503  00FE84  29                 	db	41
   504  00FE85  46                 	db	70
   505  00FE86                     __end_of_font:
   506                           	opt stack 0
   507  00FE86                     _font2:
   508                           	opt stack 0
   509  00FE86  26                 	db	38
   510  00FE87  49                 	db	73
   511  00FE88  49                 	db	73
   512  00FE89  49                 	db	73
   513  00FE8A  32                 	db	50
   514  00FE8B  03                 	db	3
   515  00FE8C  01                 	db	1
   516  00FE8D  7F                 	db	127
   517  00FE8E  01                 	db	1
   518  00FE8F  03                 	db	3
   519  00FE90  3F                 	db	63
   520  00FE91  40                 	db	64
   521  00FE92  40                 	db	64
   522  00FE93  40                 	db	64
   523  00FE94  3F                 	db	63
   524  00FE95  1F                 	db	31
   525  00FE96  20                 	db	32
   526  00FE97  40                 	db	64
   527  00FE98  20                 	db	32
   528  00FE99  1F                 	db	31
   529  00FE9A  3F                 	db	63
   530  00FE9B  40                 	db	64
   531  00FE9C  38                 	db	56
   532  00FE9D  40                 	db	64
   533  00FE9E  3F                 	db	63
   534  00FE9F  63                 	db	99
   535  00FEA0  14                 	db	20
   536  00FEA1  08                 	db	8
   537  00FEA2  14                 	db	20
   538  00FEA3  63                 	db	99
   539  00FEA4  03                 	db	3
   540  00FEA5  04                 	db	4
   541  00FEA6  78                 	db	120
   542  00FEA7  04                 	db	4
   543  00FEA8  03                 	db	3
   544  00FEA9  61                 	db	97
   545  00FEAA  59                 	db	89
   546  00FEAB  49                 	db	73
   547  00FEAC  4D                 	db	77
   548  00FEAD  43                 	db	67
   549  00FEAE  00                 	db	0
   550  00FEAF  7F                 	db	127
   551  00FEB0  41                 	db	65
   552  00FEB1  41                 	db	65
   553  00FEB2  41                 	db	65
   554  00FEB3  02                 	db	2
   555  00FEB4  04                 	db	4
   556  00FEB5  08                 	db	8
   557  00FEB6  10                 	db	16
   558  00FEB7  20                 	db	32
   559  00FEB8  00                 	db	0
   560  00FEB9  41                 	db	65
   561  00FEBA  41                 	db	65
   562  00FEBB  41                 	db	65
   563  00FEBC  7F                 	db	127
   564  00FEBD  04                 	db	4
   565  00FEBE  02                 	db	2
   566  00FEBF  01                 	db	1
   567  00FEC0  02                 	db	2
   568  00FEC1  04                 	db	4
   569  00FEC2  40                 	db	64
   570  00FEC3  40                 	db	64
   571  00FEC4  40                 	db	64
   572  00FEC5  40                 	db	64
   573  00FEC6  40                 	db	64
   574  00FEC7  00                 	db	0
   575  00FEC8  03                 	db	3
   576  00FEC9  07                 	db	7
   577  00FECA  08                 	db	8
   578  00FECB  00                 	db	0
   579  00FECC  20                 	db	32
   580  00FECD  54                 	db	84
   581  00FECE  54                 	db	84
   582  00FECF  78                 	db	120
   583  00FED0  40                 	db	64
   584  00FED1  7F                 	db	127
   585  00FED2  28                 	db	40
   586  00FED3  44                 	db	68
   587  00FED4  44                 	db	68
   588  00FED5  38                 	db	56
   589  00FED6  38                 	db	56
   590  00FED7  44                 	db	68
   591  00FED8  44                 	db	68
   592  00FED9  44                 	db	68
   593  00FEDA  28                 	db	40
   594  00FEDB  38                 	db	56
   595  00FEDC  44                 	db	68
   596  00FEDD  44                 	db	68
   597  00FEDE  28                 	db	40
   598  00FEDF  7F                 	db	127
   599  00FEE0  38                 	db	56
   600  00FEE1  54                 	db	84
   601  00FEE2  54                 	db	84
   602  00FEE3  54                 	db	84
   603  00FEE4  18                 	db	24
   604  00FEE5  00                 	db	0
   605  00FEE6  08                 	db	8
   606  00FEE7  7E                 	db	126
   607  00FEE8  09                 	db	9
   608  00FEE9  02                 	db	2
   609  00FEEA  18                 	db	24
   610  00FEEB  A4                 	db	164
   611  00FEEC  A4                 	db	164
   612  00FEED  9C                 	db	156
   613  00FEEE  78                 	db	120
   614  00FEEF  7F                 	db	127
   615  00FEF0  08                 	db	8
   616  00FEF1  04                 	db	4
   617  00FEF2  04                 	db	4
   618  00FEF3  78                 	db	120
   619  00FEF4  00                 	db	0
   620  00FEF5  44                 	db	68
   621  00FEF6  7D                 	db	125
   622  00FEF7  40                 	db	64
   623  00FEF8  00                 	db	0
   624  00FEF9  20                 	db	32
   625  00FEFA  40                 	db	64
   626  00FEFB  40                 	db	64
   627  00FEFC  3D                 	db	61
   628  00FEFD  00                 	db	0
   629  00FEFE  7F                 	db	127
   630  00FEFF  10                 	db	16
   631  00FF00  28                 	db	40
   632  00FF01  44                 	db	68
   633  00FF02  00                 	db	0
   634  00FF03  00                 	db	0
   635  00FF04  41                 	db	65
   636  00FF05  7F                 	db	127
   637  00FF06  40                 	db	64
   638  00FF07  00                 	db	0
   639  00FF08  7C                 	db	124
   640  00FF09  04                 	db	4
   641  00FF0A  78                 	db	120
   642  00FF0B  04                 	db	4
   643  00FF0C  78                 	db	120
   644  00FF0D  7C                 	db	124
   645  00FF0E  08                 	db	8
   646  00FF0F  04                 	db	4
   647  00FF10  04                 	db	4
   648  00FF11  78                 	db	120
   649  00FF12  38                 	db	56
   650  00FF13  44                 	db	68
   651  00FF14  44                 	db	68
   652  00FF15  44                 	db	68
   653  00FF16  38                 	db	56
   654  00FF17  FC                 	db	252
   655  00FF18  18                 	db	24
   656  00FF19  24                 	db	36
   657  00FF1A  24                 	db	36
   658  00FF1B  18                 	db	24
   659  00FF1C  18                 	db	24
   660  00FF1D  24                 	db	36
   661  00FF1E  24                 	db	36
   662  00FF1F  18                 	db	24
   663  00FF20  FC                 	db	252
   664  00FF21  7C                 	db	124
   665  00FF22  08                 	db	8
   666  00FF23  04                 	db	4
   667  00FF24  04                 	db	4
   668  00FF25  08                 	db	8
   669  00FF26  48                 	db	72
   670  00FF27  54                 	db	84
   671  00FF28  54                 	db	84
   672  00FF29  54                 	db	84
   673  00FF2A  24                 	db	36
   674  00FF2B  04                 	db	4
   675  00FF2C  04                 	db	4
   676  00FF2D  3F                 	db	63
   677  00FF2E  44                 	db	68
   678  00FF2F  24                 	db	36
   679  00FF30  3C                 	db	60
   680  00FF31  40                 	db	64
   681  00FF32  40                 	db	64
   682  00FF33  20                 	db	32
   683  00FF34  7C                 	db	124
   684  00FF35  1C                 	db	28
   685  00FF36  20                 	db	32
   686  00FF37  40                 	db	64
   687  00FF38  20                 	db	32
   688  00FF39  1C                 	db	28
   689  00FF3A  3C                 	db	60
   690  00FF3B  40                 	db	64
   691  00FF3C  30                 	db	48
   692  00FF3D  40                 	db	64
   693  00FF3E  3C                 	db	60
   694  00FF3F  44                 	db	68
   695  00FF40  28                 	db	40
   696  00FF41  10                 	db	16
   697  00FF42  28                 	db	40
   698  00FF43  44                 	db	68
   699  00FF44  4C                 	db	76
   700  00FF45  90                 	db	144
   701  00FF46  90                 	db	144
   702  00FF47  90                 	db	144
   703  00FF48  7C                 	db	124
   704  00FF49  44                 	db	68
   705  00FF4A  64                 	db	100
   706  00FF4B  54                 	db	84
   707  00FF4C  4C                 	db	76
   708  00FF4D  44                 	db	68
   709  00FF4E  00                 	db	0
   710  00FF4F  08                 	db	8
   711  00FF50  36                 	db	54
   712  00FF51  41                 	db	65
   713  00FF52  00                 	db	0
   714  00FF53  00                 	db	0
   715  00FF54  00                 	db	0
   716  00FF55  77                 	db	119
   717  00FF56  00                 	db	0
   718  00FF57  00                 	db	0
   719  00FF58  00                 	db	0
   720  00FF59  41                 	db	65
   721  00FF5A  36                 	db	54
   722  00FF5B  08                 	db	8
   723  00FF5C  00                 	db	0
   724  00FF5D  02                 	db	2
   725  00FF5E  01                 	db	1
   726  00FF5F  02                 	db	2
   727  00FF60  04                 	db	4
   728  00FF61  02                 	db	2
   729  00FF62                     __end_of_font2:
   730                           	opt stack 0
   731  00FF62                     _dpowers:
   732                           	opt stack 0
   733  00FF62  0001               	dw	1
   734  00FF64  000A               	dw	10
   735  00FF66  0064               	dw	100
   736  00FF68  03E8               	dw	1000
   737  00FF6A  2710               	dw	10000
   738  00FF6C                     __end_of_dpowers:
   739                           	opt stack 0
   740  00FF6C                     _hexpowers:
   741                           	opt stack 0
   742  00FF6C  0001               	dw	1
   743  00FF6E  0010               	dw	16
   744  00FF70  0100               	dw	256
   745  00FF72  1000               	dw	4096
   746  00FF74                     __end_of_hexpowers:
   747                           	opt stack 0
   748  0000                     _ADCON0	set	4034
   749  0000                     _ADCON0bits	set	4034
   750  0000                     _ADCON1	set	4033
   751  0000                     _ADCON2	set	4032
   752  0000                     _ADRESH	set	4036
   753  0000                     _ADRESL	set	4035
   754  0000                     _CCP2CON	set	4026
   755  0000                     _CCPR2L	set	4027
   756  0000                     _INTCON2bits	set	4081
   757  0000                     _INTCON3bits	set	4080
   758  0000                     _INTCONbits	set	4082
   759  0000                     _OSCCON	set	4051
   760  0000                     _PIE1bits	set	3997
   761  0000                     _PIR1bits	set	3998
   762  0000                     _PIR2bits	set	4001
   763  0000                     _PORTA	set	3968
   764  0000                     _PORTBbits	set	3969
   765  0000                     _PORTCbits	set	3970
   766  0000                     _PORTDbits	set	3971
   767  0000                     _PORTEbits	set	3972
   768  0000                     _PR2	set	4043
   769  0000                     _RCSTA	set	4011
   770  0000                     _RCSTAbits	set	4011
   771  0000                     _SPBRG	set	4015
   772  0000                     _SPBRGH	set	4016
   773  0000                     _SSPBUF	set	4041
   774  0000                     _SSPCON1	set	4038
   775  0000                     _SSPSTAT	set	4039
   776  0000                     _SSPSTATbits	set	4039
   777  0000                     _T0CON	set	4053
   778  0000                     _T0CONbits	set	4053
   779  0000                     _T1CON	set	4045
   780  0000                     _T1CONbits	set	4045
   781  0000                     _T2CON	set	4042
   782  0000                     _T3CON	set	4017
   783  0000                     _T3CONbits	set	4017
   784  0000                     _TMR0H	set	4055
   785  0000                     _TMR0L	set	4054
   786  0000                     _TMR1H	set	4047
   787  0000                     _TMR1L	set	4046
   788  0000                     _TRISA	set	3986
   789  0000                     _TRISB	set	3987
   790  0000                     _TRISBbits	set	3987
   791  0000                     _TRISC	set	3988
   792  0000                     _TRISCbits	set	3988
   793  0000                     _TRISD	set	3989
   794  0000                     _TRISE	set	3990
   795  0000                     _TXREG	set	4013
   796  0000                     _TXSTA	set	4012
   797  0000                     _TXSTAbits	set	4012
   798  0000                     _TRMT	set	32097
   799  0000                     _nRBPU	set	32655
   800  00FF74                     STR_2:
   801  00FF74  20                 	db	32
   802  00FF75  54                 	db	84	;'T'
   803  00FF76  65                 	db	101	;'e'
   804  00FF77  6D                 	db	109	;'m'
   805  00FF78  70                 	db	112	;'p'
   806  00FF79  65                 	db	101	;'e'
   807  00FF7A  72                 	db	114	;'r'
   808  00FF7B  61                 	db	97	;'a'
   809  00FF7C  74                 	db	116	;'t'
   810  00FF7D  75                 	db	117	;'u'
   811  00FF7E  72                 	db	114	;'r'
   812  00FF7F  65                 	db	101	;'e'
   813  00FF80  20                 	db	32
   814  00FF81  3D                 	db	61	;'='
   815  00FF82  20                 	db	32
   816  00FF83  25                 	db	37
   817  00FF84  64                 	db	100	;'d'
   818  00FF85  20                 	db	32
   819  00FF86  64                 	db	100	;'d'
   820  00FF87  65                 	db	101	;'e'
   821  00FF88  67                 	db	103	;'g'
   822  00FF89  72                 	db	114	;'r'
   823  00FF8A  65                 	db	101	;'e'
   824  00FF8B  65                 	db	101	;'e'
   825  00FF8C  73                 	db	115	;'s'
   826  00FF8D  43                 	db	67	;'C'
   827  00FF8E  20                 	db	32
   828  00FF8F  3D                 	db	61	;'='
   829  00FF90  20                 	db	32
   830  00FF91  25                 	db	37
   831  00FF92  64                 	db	100	;'d'
   832  00FF93  20                 	db	32
   833  00FF94  64                 	db	100	;'d'
   834  00FF95  65                 	db	101	;'e'
   835  00FF96  67                 	db	103	;'g'
   836  00FF97  72                 	db	114	;'r'
   837  00FF98  65                 	db	101	;'e'
   838  00FF99  65                 	db	101	;'e'
   839  00FF9A  73                 	db	115	;'s'
   840  00FF9B  46                 	db	70	;'F'
   841  00FF9C  0D                 	db	13
   842  00FF9D  0A                 	db	10
   843  00FF9E  00                 	db	0
   844  00FF9F                     STR_1:
   845  00FF9F  25                 	db	37
   846  00FFA0  30                 	db	48	;'0'
   847  00FFA1  32                 	db	50	;'2'
   848  00FFA2  78                 	db	120	;'x'
   849  00FFA3  3A                 	db	58	;':'
   850  00FFA4  25                 	db	37
   851  00FFA5  30                 	db	48	;'0'
   852  00FFA6  32                 	db	50	;'2'
   853  00FFA7  78                 	db	120	;'x'
   854  00FFA8  3A                 	db	58	;':'
   855  00FFA9  25                 	db	37
   856  00FFAA  30                 	db	48	;'0'
   857  00FFAB  32                 	db	50	;'2'
   858  00FFAC  78                 	db	120	;'x'
   859  00FFAD  20                 	db	32
   860  00FFAE  25                 	db	37
   861  00FFAF  30                 	db	48	;'0'
   862  00FFB0  32                 	db	50	;'2'
   863  00FFB1  78                 	db	120	;'x'
   864  00FFB2  2F                 	db	47
   865  00FFB3  25                 	db	37
   866  00FFB4  30                 	db	48	;'0'
   867  00FFB5  32                 	db	50	;'2'
   868  00FFB6  78                 	db	120	;'x'
   869  00FFB7  2F                 	db	47
   870  00FFB8  25                 	db	37
   871  00FFB9  30                 	db	48	;'0'
   872  00FFBA  32                 	db	50	;'2'
   873  00FFBB  78                 	db	120	;'x'
   874  00FFBC  00                 	db	0
   875  00FFBD                     STR_4:
   876  00FFBD  4B                 	db	75	;'K'
   877  00FFBE  65                 	db	101	;'e'
   878  00FFBF  79                 	db	121	;'y'
   879  00FFC0  20                 	db	32
   880  00FFC1  4C                 	db	76	;'L'
   881  00FFC2  6F                 	db	111	;'o'
   882  00FFC3  63                 	db	99	;'c'
   883  00FFC4  61                 	db	97	;'a'
   884  00FFC5  74                 	db	116	;'t'
   885  00FFC6  69                 	db	105	;'i'
   886  00FFC7  6F                 	db	111	;'o'
   887  00FFC8  6E                 	db	110	;'n'
   888  00FFC9  20                 	db	32
   889  00FFCA  3D                 	db	61	;'='
   890  00FFCB  20                 	db	32
   891  00FFCC  25                 	db	37
   892  00FFCD  64                 	db	100	;'d'
   893  00FFCE  20                 	db	32
   894  00FFCF  0D                 	db	13
   895  00FFD0  0A                 	db	10
   896  00FFD1  0A                 	db	10
   897  00FFD2  00                 	db	0
   898  00FFD3                     STR_3:
   899  00FFD3  4E                 	db	78	;'N'
   900  00FFD4  45                 	db	69	;'E'
   901  00FFD5  43                 	db	67	;'C'
   902  00FFD6  5F                 	db	95	;'_'
   903  00FFD7  42                 	db	66	;'B'
   904  00FFD8  75                 	db	117	;'u'
   905  00FFD9  74                 	db	116	;'t'
   906  00FFDA  74                 	db	116	;'t'
   907  00FFDB  6F                 	db	111	;'o'
   908  00FFDC  6E                 	db	110	;'n'
   909  00FFDD  20                 	db	32
   910  00FFDE  3D                 	db	61	;'='
   911  00FFDF  20                 	db	32
   912  00FFE0  25                 	db	37
   913  00FFE1  78                 	db	120	;'x'
   914  00FFE2  20                 	db	32
   915  00FFE3  0D                 	db	13
   916  00FFE4  0A                 	db	10
   917  00FFE5  00                 	db	0
   918  00FFE6                     STR_6:
   919  00FFE6  30                 	db	48	;'0'
   920  00FFE7  31                 	db	49	;'1'
   921  00FFE8  32                 	db	50	;'2'
   922  00FFE9  33                 	db	51	;'3'
   923  00FFEA  34                 	db	52	;'4'
   924  00FFEB  35                 	db	53	;'5'
   925  00FFEC  36                 	db	54	;'6'
   926  00FFED  37                 	db	55	;'7'
   927  00FFEE  38                 	db	56	;'8'
   928  00FFEF  39                 	db	57	;'9'
   929  00FFF0  61                 	db	97	;'a'
   930  00FFF1  62                 	db	98	;'b'
   931  00FFF2  63                 	db	99	;'c'
   932  00FFF3  64                 	db	100	;'d'
   933  00FFF4  65                 	db	101	;'e'
   934  00FFF5  66                 	db	102	;'f'
   935  00FFF6  00                 	db	0
   936  00FFF7                     STR_5:
   937  00FFF7  4C                 	db	76	;'L'
   938  00FFF8  41                 	db	65	;'A'
   939  00FFF9  42                 	db	66	;'B'
   940  00FFFA  20                 	db	32
   941  00FFFB  31                 	db	49	;'1'
   942  00FFFC  31                 	db	49	;'1'
   943  00FFFD  20                 	db	32
   944  00FFFE  00                 	db	0
   945                           
   946                           ; #config settings
   947  00FFFF  00                 	db	0	; dummy byte at the end
   948  0000                     
   949                           	psect	cinit
   950  00129E                     __pcinit:
   951                           	opt stack 0
   952  00129E                     start_initialization:
   953                           	opt stack 0
   954  00129E                     __initialization:
   955                           	opt stack 0
   956                           
   957                           ; Clear objects allocated to BANK0 (31 bytes)
   958  00129E  EE00  F0C9         	lfsr	0,__pbssBANK0
   959  0012A2  0E1F               	movlw	31
   960  0012A4                     clear_0:
   961  0012A4  6AEE               	clrf	postinc0,c
   962  0012A6  06E8               	decf	wreg,f,c
   963  0012A8  E1FD               	bnz	clear_0
   964                           
   965                           ; Clear objects allocated to COMRAM (38 bytes)
   966  0012AA  EE00  F045         	lfsr	0,__pbssCOMRAM
   967  0012AE  0E26               	movlw	38
   968  0012B0                     clear_1:
   969  0012B0  6AEE               	clrf	postinc0,c
   970  0012B2  06E8               	decf	wreg,f,c
   971  0012B4  E1FD               	bnz	clear_1
   972                           
   973                           ; Initialize objects allocated to BANK1 (84 bytes)
   974                           ; load TBLPTR registers with __pidataBANK1
   975  0012B6  0EAE               	movlw	low __pidataBANK1
   976  0012B8  6EF6               	movwf	tblptrl,c
   977  0012BA  0E14               	movlw	high __pidataBANK1
   978  0012BC  6EF7               	movwf	tblptrh,c
   979  0012BE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   980  0012C0  6EF8               	movwf	tblptru,c
   981  0012C2  EE01  F000         	lfsr	0,__pdataBANK1
   982  0012C6  EE10 F054          	lfsr	1,84
   983  0012CA                     copy_data0:
   984  0012CA  0009               	tblrd		*+
   985  0012CC  CFF5 FFEE          	movff	tablat,postinc0
   986  0012D0  50E5               	movf	postdec1,w,c
   987  0012D2  50E1               	movf	fsr1l,w,c
   988  0012D4  E1FA               	bnz	copy_data0
   989                           
   990                           ; Initialize objects allocated to BANK0 (73 bytes)
   991                           ; load TBLPTR registers with __pidataBANK0
   992  0012D6  0E8A               	movlw	low __pidataBANK0
   993  0012D8  6EF6               	movwf	tblptrl,c
   994  0012DA  0E16               	movlw	high __pidataBANK0
   995  0012DC  6EF7               	movwf	tblptrh,c
   996  0012DE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   997  0012E0  6EF8               	movwf	tblptru,c
   998  0012E2  EE00  F080         	lfsr	0,__pdataBANK0
   999  0012E6  EE10 F049          	lfsr	1,73
  1000  0012EA                     copy_data1:
  1001  0012EA  0009               	tblrd		*+
  1002  0012EC  CFF5 FFEE          	movff	tablat,postinc0
  1003  0012F0  50E5               	movf	postdec1,w,c
  1004  0012F2  50E1               	movf	fsr1l,w,c
  1005  0012F4  E1FA               	bnz	copy_data1
  1006                           
  1007                           ; Initialize objects allocated to COMRAM (2 bytes)
  1008                           ; load TBLPTR registers with __pidataCOMRAM
  1009  0012F6  0EB6               	movlw	low __pidataCOMRAM
  1010  0012F8  6EF6               	movwf	tblptrl,c
  1011  0012FA  0E1A               	movlw	high __pidataCOMRAM
  1012  0012FC  6EF7               	movwf	tblptrh,c
  1013  0012FE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1014  001300  6EF8               	movwf	tblptru,c
  1015  001302  0009               	tblrd		*+	;fetch initializer
  1016  001304  CFF5 F06B          	movff	tablat,__pdataCOMRAM
  1017  001308  0009               	tblrd		*+	;fetch initializer
  1018  00130A  CFF5 F06C          	movff	tablat,__pdataCOMRAM+1
  1019  00130E                     end_of_initialization:
  1020                           	opt stack 0
  1021  00130E                     __end_of__initialization:
  1022                           	opt stack 0
  1023  00130E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1024  001310  6EF8               	movwf	tblptru,c
  1025  001312  0100               	movlb	0
  1026  001314  EFBB  F001         	goto	_main	;jump to C main() function
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           postdec1	equ	0xFE5
  1034                           fsr1l	equ	0xFE1
  1035                           
  1036                           	psect	bssCOMRAM
  1037  000045                     __pbssCOMRAM:
  1038                           	opt stack 0
  1039  000045                     _Nec_code:
  1040                           	opt stack 0
  1041  000045                     	ds	4
  1042  000049                     _Nec_OK:
  1043                           	opt stack 0
  1044  000049                     	ds	2
  1045  00004B                     _Time_Elapsed:
  1046                           	opt stack 0
  1047  00004B                     	ds	2
  1048  00004D                     _nbr:
  1049                           	opt stack 0
  1050  00004D                     	ds	2
  1051  00004F                     _txt:
  1052                           	opt stack 0
  1053  00004F                     	ds	2
  1054  000051                     _Nec_Button:
  1055                           	opt stack 0
  1056  000051                     	ds	1
  1057  000052                     _Nec_State:
  1058                           	opt stack 0
  1059  000052                     	ds	1
  1060  000053                     __tft_type:
  1061                           	opt stack 0
  1062  000053                     	ds	1
  1063  000054                     _alarm_date:
  1064                           	opt stack 0
  1065  000054                     	ds	1
  1066  000055                     _alarm_hour:
  1067                           	opt stack 0
  1068  000055                     	ds	1
  1069  000056                     _alarm_minute:
  1070                           	opt stack 0
  1071  000056                     	ds	1
  1072  000057                     _alarm_second:
  1073                           	opt stack 0
  1074  000057                     	ds	1
  1075  000058                     _bit_count:
  1076                           	opt stack 0
  1077  000058                     	ds	1
  1078  000059                     _colstart:
  1079                           	opt stack 0
  1080  000059                     	ds	1
  1081  00005A                     _day:
  1082                           	opt stack 0
  1083  00005A                     	ds	1
  1084  00005B                     _dow:
  1085                           	opt stack 0
  1086  00005B                     	ds	1
  1087  00005C                     _hour:
  1088                           	opt stack 0
  1089  00005C                     	ds	1
  1090  00005D                     _minute:
  1091                           	opt stack 0
  1092  00005D                     	ds	1
  1093  00005E                     _month:
  1094                           	opt stack 0
  1095  00005E                     	ds	1
  1096  00005F                     _rowstart:
  1097                           	opt stack 0
  1098  00005F                     	ds	1
  1099  000060                     _second:
  1100                           	opt stack 0
  1101  000060                     	ds	1
  1102  000061                     _setup_alarm_hour:
  1103                           	opt stack 0
  1104  000061                     	ds	1
  1105  000062                     _setup_alarm_minute:
  1106                           	opt stack 0
  1107  000062                     	ds	1
  1108  000063                     _setup_alarm_second:
  1109                           	opt stack 0
  1110  000063                     	ds	1
  1111  000064                     _setup_day:
  1112                           	opt stack 0
  1113  000064                     	ds	1
  1114  000065                     _setup_hour:
  1115                           	opt stack 0
  1116  000065                     	ds	1
  1117  000066                     _setup_minute:
  1118                           	opt stack 0
  1119  000066                     	ds	1
  1120  000067                     _setup_month:
  1121                           	opt stack 0
  1122  000067                     	ds	1
  1123  000068                     _setup_second:
  1124                           	opt stack 0
  1125  000068                     	ds	1
  1126  000069                     _setup_year:
  1127                           	opt stack 0
  1128  000069                     	ds	1
  1129  00006A                     _year:
  1130                           	opt stack 0
  1131  00006A                     	ds	1
  1132                           tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           
  1141                           	psect	dataCOMRAM
  1142  00006B                     __pdataCOMRAM:
  1143                           	opt stack 0
  1144  00006B                     _tempSecond:
  1145                           	opt stack 0
  1146  00006B                     	ds	1
  1147  00006C                     _wrap:
  1148                           	opt stack 0
  1149  00006C                     	ds	1
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1l	equ	0xFE1
  1158                           
  1159                           	psect	bssBANK0
  1160  0000C9                     __pbssBANK0:
  1161                           	opt stack 0
  1162  0000C9                     _buffer:
  1163                           	opt stack 0
  1164  0000C9                     	ds	31
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           postinc0	equ	0xFEE
  1170                           wreg	equ	0xFE8
  1171                           postdec1	equ	0xFE5
  1172                           fsr1l	equ	0xFE1
  1173                           
  1174                           	psect	dataBANK0
  1175  000080                     __pdataBANK0:
  1176                           	opt stack 0
  1177  000080                     _color:
  1178                           	opt stack 0
  1179  000080                     	ds	42
  1180  0000AA                     _array1:
  1181                           	opt stack 0
  1182  0000AA                     	ds	21
  1183  0000BF                     _Timing_Txt:
  1184                           	opt stack 0
  1185  0000BF                     	ds	10
  1186                           tblptru	equ	0xFF8
  1187                           tblptrh	equ	0xFF7
  1188                           tblptrl	equ	0xFF6
  1189                           tablat	equ	0xFF5
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postdec1	equ	0xFE5
  1193                           fsr1l	equ	0xFE1
  1194                           
  1195                           	psect	dataBANK1
  1196  000100                     __pdataBANK1:
  1197                           	opt stack 0
  1198  000100                     _txt1:
  1199                           	opt stack 0
  1200  000100                     	ds	84
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           postinc0	equ	0xFEE
  1206                           wreg	equ	0xFE8
  1207                           postdec1	equ	0xFE5
  1208                           fsr1l	equ	0xFE1
  1209                           
  1210                           	psect	cstackBANK0
  1211  0000E8                     __pcstackBANK0:
  1212                           	opt stack 0
  1213  0000E8                     drawtext@x:
  1214                           	opt stack 0
  1215                           
  1216                           ; 1 bytes @ 0x0
  1217  0000E8                     	ds	1
  1218  0000E9                     drawtext@textsize:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x1
  1222  0000E9                     	ds	2
  1223  0000EB                     drawtext@i:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x3
  1227  0000EB                     	ds	2
  1228  0000ED                     drawtext@cursor_y:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x5
  1232  0000ED                     	ds	1
  1233  0000EE                     drawtext@cursor_x:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x6
  1237  0000EE                     	ds	1
  1238  0000EF                     main@tempF:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0x7
  1242  0000EF                     	ds	1
  1243  0000F0                     main@tempC:
  1244                           	opt stack 0
  1245                           
  1246                           ; 1 bytes @ 0x8
  1247  0000F0                     	ds	1
  1248  0000F1                     main@i:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x9
  1252  0000F1                     	ds	1
  1253  0000F2                     main@found:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0xA
  1257  0000F2                     	ds	1
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1l	equ	0xFE1
  1266                           
  1267                           	psect	cstackCOMRAM
  1268  000001                     __pcstackCOMRAM:
  1269                           	opt stack 0
  1270  000001                     ??_INTx_isr:
  1271  000001                     
  1272                           ; 1 bytes @ 0x0
  1273  000001                     	ds	2
  1274  000003                     ??_chkisr:
  1275                           
  1276                           ; 0 bytes @ 0x2
  1277  000003                     	ds	14
  1278  000011                     ??_isdigit:
  1279  000011                     ?_strlen:
  1280                           	opt stack 0
  1281  000011                     ?___wmul:
  1282                           	opt stack 0
  1283  000011                     ?___awdiv:
  1284                           	opt stack 0
  1285  000011                     ?___lwdiv:
  1286                           	opt stack 0
  1287  000011                     I2C_Read@ack:
  1288                           	opt stack 0
  1289  000011                     I2C_Write@outByte:
  1290                           	opt stack 0
  1291  000011                     spiwrite@x:
  1292                           	opt stack 0
  1293  000011                     putch@c:
  1294                           	opt stack 0
  1295  000011                     OpenUSART@spbrg:
  1296                           	opt stack 0
  1297  000011                     ___wmul@multiplier:
  1298                           	opt stack 0
  1299  000011                     ___awdiv@dividend:
  1300                           	opt stack 0
  1301  000011                     ___lwdiv@dividend:
  1302                           	opt stack 0
  1303  000011                     strcpy@to:
  1304                           	opt stack 0
  1305  000011                     strlen@s:
  1306                           	opt stack 0
  1307  000011                     I2C_Init@c:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0x10
  1311  000011                     	ds	1
  1312  000012                     I2C_Read@n:
  1313                           	opt stack 0
  1314  000012                     I2C_Write@n:
  1315                           	opt stack 0
  1316  000012                     spiwrite@spidata:
  1317                           	opt stack 0
  1318  000012                     _isdigit$2498:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x11
  1322  000012                     	ds	1
  1323  000013                     ??_strlen:
  1324  000013                     DS3231_Setup_Time@Device:
  1325                           	opt stack 0
  1326  000013                     I2C_Read@inByte:
  1327                           	opt stack 0
  1328  000013                     I2C_Write_Cmd_Only@Cmd:
  1329                           	opt stack 0
  1330  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1331                           	opt stack 0
  1332  000013                     write_command@cmd_:
  1333                           	opt stack 0
  1334  000013                     write_data@data_:
  1335                           	opt stack 0
  1336  000013                     OpenUSART@config:
  1337                           	opt stack 0
  1338  000013                     isdigit@c:
  1339                           	opt stack 0
  1340  000013                     ___wmul@multiplicand:
  1341                           	opt stack 0
  1342  000013                     ___awdiv@divisor:
  1343                           	opt stack 0
  1344  000013                     ___lwdiv@divisor:
  1345                           	opt stack 0
  1346  000013                     strcpy@from:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x12
  1350  000013                     	ds	1
  1351  000014                     DS1621_Read_Temp@Cmd:
  1352                           	opt stack 0
  1353  000014                     DS3231_Read_Time@Address:
  1354                           	opt stack 0
  1355  000014                     DS3231_Setup_Time@Address:
  1356                           	opt stack 0
  1357  000014                     I2C_Write_Cmd_Only@Device:
  1358                           	opt stack 0
  1359  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1360                           	opt stack 0
  1361  000014                     setAddrWindow@y0:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x13
  1365  000014                     	ds	1
  1366  000015                     DS1621_Read_Temp@Data_Ret:
  1367                           	opt stack 0
  1368  000015                     DS3231_Read_Time@Device:
  1369                           	opt stack 0
  1370  000015                     I2C_Write_Cmd_Write_Data@Device:
  1371                           	opt stack 0
  1372  000015                     setAddrWindow@x1:
  1373                           	opt stack 0
  1374  000015                     ___awdiv@counter:
  1375                           	opt stack 0
  1376  000015                     ___lwdiv@counter:
  1377                           	opt stack 0
  1378  000015                     ___wmul@product:
  1379                           	opt stack 0
  1380  000015                     strcpy@cp:
  1381                           	opt stack 0
  1382  000015                     strlen@cp:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x14
  1386  000015                     	ds	1
  1387  000016                     DS1621_Read_Temp@Device:
  1388                           	opt stack 0
  1389  000016                     DS1621_Init@Device:
  1390                           	opt stack 0
  1391  000016                     setAddrWindow@y1:
  1392                           	opt stack 0
  1393  000016                     ___awdiv@sign:
  1394                           	opt stack 0
  1395  000016                     ___lwdiv@quotient:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x15
  1399  000016                     	ds	1
  1400  000017                     setAddrWindow@x0:
  1401                           	opt stack 0
  1402  000017                     delay_ms@ms:
  1403                           	opt stack 0
  1404  000017                     ___awdiv@quotient:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x16
  1408  000017                     	ds	1
  1409  000018                     ?___lwmod:
  1410                           	opt stack 0
  1411  000018                     drawPixel@y:
  1412                           	opt stack 0
  1413  000018                     drawFastVLine@y:
  1414                           	opt stack 0
  1415  000018                     fillRectangle@y:
  1416                           	opt stack 0
  1417  000018                     ___lwmod@dividend:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x17
  1421  000018                     	ds	1
  1422  000019                     ??_delay_ms:
  1423  000019                     drawFastVLine@h:
  1424                           	opt stack 0
  1425  000019                     fillRectangle@w:
  1426                           	opt stack 0
  1427  000019                     drawPixel@color:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x18
  1431  000019                     	ds	1
  1432  00001A                     fillRectangle@h:
  1433                           	opt stack 0
  1434  00001A                     drawFastVLine@color:
  1435                           	opt stack 0
  1436  00001A                     ___lwmod@divisor:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x19
  1440  00001A                     	ds	1
  1441  00001B                     drawPixel@x:
  1442                           	opt stack 0
  1443  00001B                     delay_ms@count:
  1444                           	opt stack 0
  1445  00001B                     fillRectangle@color:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x1A
  1449  00001B                     	ds	1
  1450  00001C                     ??_drawFastVLine:
  1451  00001C                     ___lwmod@counter:
  1452                           	opt stack 0
  1453  00001C                     drawCircle@x0:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0x1B
  1457  00001C                     	ds	1
  1458  00001D                     ??_fillRectangle:
  1459  00001D                     ?_printf:
  1460                           	opt stack 0
  1461  00001D                     printf@f:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x1C
  1465  00001D                     	ds	1
  1466  00001E                     drawCircle@y0:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x1D
  1470  00001E                     	ds	2
  1471  000020                     drawFastVLine@hi:
  1472                           	opt stack 0
  1473  000020                     drawCircle@r:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x1F
  1477  000020                     	ds	1
  1478  000021                     drawFastVLine@lo:
  1479                           	opt stack 0
  1480  000021                     fillRectangle@hi:
  1481                           	opt stack 0
  1482                           
  1483                           ; 1 bytes @ 0x20
  1484  000021                     	ds	1
  1485  000022                     drawFastVLine@x:
  1486                           	opt stack 0
  1487  000022                     fillRectangle@lo:
  1488                           	opt stack 0
  1489  000022                     drawCircle@color:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x21
  1493  000022                     	ds	1
  1494  000023                     fillRect@y:
  1495                           	opt stack 0
  1496  000023                     fillRectangle@x:
  1497                           	opt stack 0
  1498  000023                     fillCircleHelper@x0:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x22
  1502  000023                     	ds	1
  1503  000024                     ??_drawCircle:
  1504  000024                     fillRect@w:
  1505                           	opt stack 0
  1506  000024                     fillScreen@color:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x23
  1510  000024                     	ds	1
  1511  000025                     fillRect@h:
  1512                           	opt stack 0
  1513  000025                     fillCircleHelper@y0:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x24
  1517  000025                     	ds	1
  1518  000026                     fillRect@color:
  1519                           	opt stack 0
  1520  000026                     drawCircle@ddF_x:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x25
  1524  000026                     	ds	1
  1525  000027                     fillCircleHelper@r:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x26
  1529  000027                     	ds	1
  1530  000028                     ??_fillRect:
  1531  000028                     drawCircle@ddF_y:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x27
  1535  000028                     	ds	1
  1536  000029                     fillCircleHelper@cornername:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x28
  1540  000029                     	ds	1
  1541  00002A                     drawCircle@f:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x29
  1545  00002A                     	ds	1
  1546  00002B                     ??_printf:
  1547  00002B                     fillRect@x:
  1548                           	opt stack 0
  1549  00002B                     fillCircleHelper@delta:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x2A
  1553  00002B                     	ds	1
  1554  00002C                     fillRect@i:
  1555                           	opt stack 0
  1556  00002C                     drawCircle@x:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x2B
  1560  00002C                     	ds	1
  1561  00002D                     fillCircleHelper@color:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x2C
  1565  00002D                     	ds	1
  1566  00002E                     drawChar@y:
  1567                           	opt stack 0
  1568  00002E                     drawCircle@y:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x2D
  1572  00002E                     	ds	1
  1573  00002F                     ??_fillCircleHelper:
  1574  00002F                     drawChar@c:
  1575                           	opt stack 0
  1576  00002F                     printf@idx:
  1577                           	opt stack 0
  1578                           
  1579                           ; 1 bytes @ 0x2E
  1580  00002F                     	ds	1
  1581  000030                     drawChar@color:
  1582                           	opt stack 0
  1583  000030                     printf@ap:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x2F
  1587  000030                     	ds	1
  1588  000031                     fillCircleHelper@ddF_x:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x30
  1592  000031                     	ds	1
  1593  000032                     printf@prec:
  1594                           	opt stack 0
  1595  000032                     drawChar@bg:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x31
  1599  000032                     	ds	1
  1600  000033                     fillCircleHelper@ddF_y:
  1601                           	opt stack 0
  1602  000033                     printf@val:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x32
  1606  000033                     	ds	1
  1607  000034                     drawChar@size:
  1608                           	opt stack 0
  1609                           
  1610                           ; 1 bytes @ 0x33
  1611  000034                     	ds	1
  1612  000035                     drawChar@line:
  1613                           	opt stack 0
  1614  000035                     printf@flag:
  1615                           	opt stack 0
  1616  000035                     fillCircleHelper@f:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x34
  1620  000035                     	ds	1
  1621  000036                     drawChar@x:
  1622                           	opt stack 0
  1623  000036                     printf@width:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x35
  1627  000036                     	ds	1
  1628  000037                     drawChar@j:
  1629                           	opt stack 0
  1630  000037                     fillCircleHelper@x:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x36
  1634  000037                     	ds	1
  1635  000038                     drawChar@i:
  1636                           	opt stack 0
  1637  000038                     printf@c:
  1638                           	opt stack 0
  1639                           
  1640                           ; 1 bytes @ 0x37
  1641  000038                     	ds	1
  1642  000039                     drawtext@y:
  1643                           	opt stack 0
  1644  000039                     fillCircleHelper@y:
  1645                           	opt stack 0
  1646                           
  1647                           ; 2 bytes @ 0x38
  1648  000039                     	ds	1
  1649  00003A                     drawtext@_text:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0x39
  1653  00003A                     	ds	1
  1654  00003B                     fillCircle@x0:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x3A
  1658  00003B                     	ds	1
  1659  00003C                     drawtext@color:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0x3B
  1663  00003C                     	ds	1
  1664  00003D                     fillCircle@y0:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x3C
  1668  00003D                     	ds	1
  1669  00003E                     drawtext@bg:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x3D
  1673  00003E                     	ds	1
  1674  00003F                     fillCircle@r:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x3E
  1678  00003F                     	ds	1
  1679  000040                     drawtext@size:
  1680                           	opt stack 0
  1681                           
  1682                           ; 1 bytes @ 0x3F
  1683  000040                     	ds	1
  1684  000041                     ??_drawtext:
  1685  000041                     fillCircle@color:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0x40
  1689  000041                     	ds	2
  1690  000043                     
  1691                           ; 0 bytes @ 0x42
  1692  000043                     	ds	2
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           postinc0	equ	0xFEE
  1698                           wreg	equ	0xFE8
  1699                           postdec1	equ	0xFE5
  1700                           fsr1l	equ	0xFE1
  1701                           
  1702 ;;
  1703 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1704 ;;
  1705 ;; *************** function _main *****************
  1706 ;; Defined at:
  1707 ;;		line 50 in file "lab_11_main.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  i               1    9[BANK0 ] unsigned char 
  1712 ;;  tempC           1    8[BANK0 ] unsigned char 
  1713 ;;  tempF           1    7[BANK0 ] unsigned char 
  1714 ;;  found           1   10[BANK0 ] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;		None               void
  1717 ;; Registers used:
  1718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;Total ram usage:        6 bytes
  1729 ;; Hardware stack levels required when called:   11
  1730 ;; This function calls:
  1731 ;;		_Activate_Buzzer
  1732 ;;		_DS1621_Init
  1733 ;;		_DS1621_Read_Temp
  1734 ;;		_DS3231_Read_Time
  1735 ;;		_DS3231_Setup_Time
  1736 ;;		_Deactivate_Buzzer
  1737 ;;		_Enable_INT_Interrupt
  1738 ;;		_I2C_Init
  1739 ;;		_Init_Interrupt
  1740 ;;		_Init_UART
  1741 ;;		_Initialize_LCD_Screen
  1742 ;;		_Wait_One_Sec
  1743 ;;		___awdiv
  1744 ;;		_drawCircle
  1745 ;;		_drawtext
  1746 ;;		_fillCircle
  1747 ;;		_printf
  1748 ;; This function is called by:
  1749 ;;		Startup code after reset
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           	psect	text0
  1754  000376                     __ptext0:
  1755                           	opt stack 0
  1756  000376                     _main:
  1757                           	opt stack 20
  1758                           
  1759                           ;lab_11_main.c: 52: Init_UART();
  1760                           
  1761                           ;incstack = 0
  1762  000376  ECDA  F00C         	call	_Init_UART	;wreg free
  1763                           
  1764                           ;lab_11_main.c: 53: OSCCON = 0x70;
  1765  00037A  0E70               	movlw	112
  1766  00037C  6ED3               	movwf	4051,c	;volatile
  1767                           
  1768                           ;lab_11_main.c: 54: nRBPU = 0;
  1769  00037E  9EF1               	bcf	intcon2,7,c	;volatile
  1770                           
  1771                           ;lab_11_main.c: 55: TRISB = 0x04;
  1772  000380  0E04               	movlw	4
  1773  000382  6E93               	movwf	3987,c	;volatile
  1774                           
  1775                           ;lab_11_main.c: 56: TRISC = 0x00;
  1776  000384  0E00               	movlw	0
  1777  000386  6E94               	movwf	3988,c	;volatile
  1778                           
  1779                           ;lab_11_main.c: 57: TRISD = 0x00;
  1780  000388  0E00               	movlw	0
  1781  00038A  6E95               	movwf	3989,c	;volatile
  1782                           
  1783                           ;lab_11_main.c: 58: ADCON1 = 0x0F;
  1784  00038C  0E0F               	movlw	15
  1785  00038E  6EC1               	movwf	4033,c	;volatile
  1786                           
  1787                           ;lab_11_main.c: 59: TRISA = 0x00;
  1788  000390  0E00               	movlw	0
  1789  000392  6E92               	movwf	3986,c	;volatile
  1790                           
  1791                           ;lab_11_main.c: 60: TRISE = 0x00;
  1792  000394  0E00               	movlw	0
  1793  000396  6E96               	movwf	3990,c	;volatile
  1794                           
  1795                           ;lab_11_main.c: 62: Initialize_LCD_Screen();
  1796  000398  EC2A  F008         	call	_Initialize_LCD_Screen	;wreg free
  1797                           
  1798                           ;lab_11_main.c: 63: I2C_Init(100000);
  1799  00039C  0EA0               	movlw	160
  1800  00039E  6E11               	movwf	I2C_Init@c,c
  1801  0003A0  0E86               	movlw	134
  1802  0003A2  6E12               	movwf	I2C_Init@c+1,c
  1803  0003A4  0E01               	movlw	1
  1804  0003A6  6E13               	movwf	I2C_Init@c+2,c
  1805  0003A8  0E00               	movlw	0
  1806  0003AA  6E14               	movwf	I2C_Init@c+3,c
  1807  0003AC  EC39  F00D         	call	_I2C_Init	;wreg free
  1808                           
  1809                           ;lab_11_main.c: 64: DS1621_Init();
  1810  0003B0  EC82  F00C         	call	_DS1621_Init	;wreg free
  1811                           
  1812                           ;lab_11_main.c: 65: Init_Interrupt();
  1813  0003B4  ECB9  F00C         	call	_Init_Interrupt	;wreg free
  1814                           
  1815                           ;lab_11_main.c: 67: Nec_code = 0x0;
  1816  0003B8  0E00               	movlw	0
  1817  0003BA  6E45               	movwf	_Nec_code,c
  1818  0003BC  0E00               	movlw	0
  1819  0003BE  6E46               	movwf	_Nec_code+1,c
  1820  0003C0  0E00               	movlw	0
  1821  0003C2  6E47               	movwf	_Nec_code+2,c
  1822  0003C4  0E00               	movlw	0
  1823  0003C6  6E48               	movwf	_Nec_code+3,c
  1824  0003C8  D000               	goto	l5402
  1825  0003CA                     l5402:
  1826                           
  1827                           ;lab_11_main.c: 71: {
  1828                           ;lab_11_main.c: 72: Deactivate_Buzzer();
  1829  0003CA  EC48  F00D         	call	_Deactivate_Buzzer	;wreg free
  1830                           
  1831                           ;lab_11_main.c: 82: DS3231_Read_Time();
  1832  0003CE  ECF7  F009         	call	_DS3231_Read_Time	;wreg free
  1833                           
  1834                           ;lab_11_main.c: 83: if(tempSecond != second)
  1835  0003D2  5060               	movf	_second,w,c
  1836  0003D4  186B               	xorwf	_tempSecond,w,c
  1837  0003D6  B4D8               	btfsc	status,2,c
  1838  0003D8  D03C               	goto	l5418
  1839                           
  1840                           ;lab_11_main.c: 84: {
  1841                           ;lab_11_main.c: 85: tempSecond = second;
  1842  0003DA  C060  F06B         	movff	_second,_tempSecond
  1843                           
  1844                           ;lab_11_main.c: 86: char tempC = DS1621_Read_Temp();
  1845  0003DE  ECEB  F00B         	call	_DS1621_Read_Temp	;wreg free
  1846  0003E2  0100               	movlb	0	; () banked
  1847  0003E4  6FF0               	movwf	main@tempC& (0+255),b
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;lab_11_main.c: 87: char tempF = (tempC * 9 / 5) + 32;
  1851  0003E6  0100               	movlb	0	; () banked
  1852  0003E8  51F0               	movf	main@tempC& (0+255),w,b
  1853  0003EA  0D09               	mullw	9
  1854  0003EC  CFF3 F011          	movff	prodl,___awdiv@dividend
  1855  0003F0  CFF4 F012          	movff	prodh,___awdiv@dividend+1
  1856  0003F4  0E00               	movlw	0
  1857  0003F6  6E14               	movwf	___awdiv@divisor+1,c
  1858  0003F8  0E05               	movlw	5
  1859  0003FA  6E13               	movwf	___awdiv@divisor,c
  1860  0003FC  EC82  F008         	call	___awdiv	;wreg free
  1861  000400  5011               	movf	?___awdiv,w,c
  1862  000402  0F20               	addlw	32
  1863  000404  0100               	movlb	0	; () banked
  1864  000406  6FEF               	movwf	main@tempF& (0+255),b
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;lab_11_main.c: 88: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day
      +                          ,year);
  1868  000408  0E9F               	movlw	low STR_1
  1869  00040A  6E1D               	movwf	printf@f,c
  1870  00040C  0EFF               	movlw	high STR_1
  1871  00040E  6E1E               	movwf	printf@f+1,c
  1872  000410  C05C  F01F         	movff	_hour,?_printf+2
  1873  000414  6A20               	clrf	?_printf+3,c
  1874  000416  C05D  F021         	movff	_minute,?_printf+4
  1875  00041A  6A22               	clrf	?_printf+5,c
  1876  00041C  C060  F023         	movff	_second,?_printf+6
  1877  000420  6A24               	clrf	?_printf+7,c
  1878  000422  C05E  F025         	movff	_month,?_printf+8
  1879  000426  6A26               	clrf	?_printf+9,c
  1880  000428  C05A  F027         	movff	_day,?_printf+10
  1881  00042C  6A28               	clrf	?_printf+11,c
  1882  00042E  C06A  F029         	movff	_year,?_printf+12
  1883  000432  6A2A               	clrf	?_printf+13,c
  1884  000434  EC0E  F000         	call	_printf	;wreg free
  1885                           
  1886                           ;lab_11_main.c: 89: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF
      +                          );
  1887  000438  0E74               	movlw	low STR_2
  1888  00043A  6E1D               	movwf	printf@f,c
  1889  00043C  0EFF               	movlw	high STR_2
  1890  00043E  6E1E               	movwf	printf@f+1,c
  1891  000440  C0F0  F01F         	movff	main@tempC,?_printf+2
  1892  000444  6A20               	clrf	?_printf+3,c
  1893  000446  C0EF  F021         	movff	main@tempF,?_printf+4
  1894  00044A  6A22               	clrf	?_printf+5,c
  1895  00044C  EC0E  F000         	call	_printf	;wreg free
  1896  000450  D000               	goto	l5418
  1897  000452                     l5418:
  1898                           
  1899                           ;lab_11_main.c: 90: }
  1900                           ;lab_11_main.c: 92: if (Nec_OK == 1)
  1901  000452  0449               	decf	_Nec_OK,w,c
  1902  000454  104A               	iorwf	_Nec_OK+1,w,c
  1903  000456  A4D8               	btfss	status,2,c
  1904  000458  D7B8               	goto	l5402
  1905                           
  1906                           ;lab_11_main.c: 93: {
  1907                           ;lab_11_main.c: 95: if (Nec_Button == 0x90)
  1908  00045A  0E90               	movlw	144
  1909  00045C  1851               	xorwf	_Nec_Button,w,c
  1910  00045E  A4D8               	btfss	status,2,c
  1911  000460  D003               	goto	l5424
  1912                           
  1913                           ;lab_11_main.c: 96: DS3231_Setup_Time();
  1914  000462  ECC4  F009         	call	_DS3231_Setup_Time	;wreg free
  1915  000466  D000               	goto	l5424
  1916  000468                     l5424:
  1917                           
  1918                           ;lab_11_main.c: 98: Nec_OK = 0;
  1919  000468  0E00               	movlw	0
  1920  00046A  6E4A               	movwf	_Nec_OK+1,c
  1921  00046C  0E00               	movlw	0
  1922  00046E  6E49               	movwf	_Nec_OK,c
  1923                           
  1924                           ;lab_11_main.c: 99: Enable_INT_Interrupt();
  1925  000470  EC58  F00D         	call	_Enable_INT_Interrupt	;wreg free
  1926                           
  1927                           ;lab_11_main.c: 100: printf ("NEC_Button = %x \r\n", Nec_Button);
  1928  000474  0ED3               	movlw	low STR_3
  1929  000476  6E1D               	movwf	printf@f,c
  1930  000478  0EFF               	movlw	high STR_3
  1931  00047A  6E1E               	movwf	printf@f+1,c
  1932  00047C  C051  F01F         	movff	_Nec_Button,?_printf+2
  1933  000480  6A20               	clrf	?_printf+3,c
  1934  000482  EC0E  F000         	call	_printf	;wreg free
  1935                           
  1936                           ;lab_11_main.c: 102: found = 0xff;
  1937  000486  0100               	movlb	0	; () banked
  1938  000488  69F2               	setf	main@found& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;lab_11_main.c: 105: for (char i=0; i<21; i++)
  1942  00048A  0E00               	movlw	0
  1943  00048C  0100               	movlb	0	; () banked
  1944  00048E  6FF1               	movwf	main@i& (0+255),b
  1945  000490                     l5434:
  1946                           
  1947                           ; BSR set to: 0
  1948  000490  0E14               	movlw	20
  1949  000492  0100               	movlb	0	; () banked
  1950  000494  65F1               	cpfsgt	main@i& (0+255),b
  1951  000496  D001               	goto	l5438
  1952                           
  1953                           ; BSR set to: 0
  1954  000498  D013               	goto	l5446
  1955  00049A                     l5438:
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;lab_11_main.c: 106: {
  1959                           ;lab_11_main.c: 107: if (Nec_Button == array1[i])
  1960  00049A  0100               	movlb	0	; () banked
  1961  00049C  51F1               	movf	main@i& (0+255),w,b
  1962  00049E  0D01               	mullw	1
  1963  0004A0  0EAA               	movlw	low _array1
  1964  0004A2  24F3               	addwf	prodl,w,c
  1965  0004A4  6ED9               	movwf	fsr2l,c
  1966  0004A6  0E00               	movlw	high _array1
  1967  0004A8  20F4               	addwfc	prodh,w,c
  1968  0004AA  6EDA               	movwf	fsr2h,c
  1969  0004AC  5051               	movf	_Nec_Button,w,c
  1970  0004AE  18DE               	xorwf	postinc2,w,c
  1971  0004B0  A4D8               	btfss	status,2,c
  1972  0004B2  D003               	goto	l5442
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;lab_11_main.c: 108: {
  1976                           ;lab_11_main.c: 109: found = i;
  1977  0004B4  C0F1  F0F2         	movff	main@i,main@found
  1978  0004B8  D000               	goto	l5442
  1979  0004BA                     l5442:
  1980                           
  1981                           ; BSR set to: 0
  1982  0004BA  0100               	movlb	0	; () banked
  1983  0004BC  2BF1               	incf	main@i& (0+255),f,b
  1984  0004BE  D7E8               	goto	l5434
  1985  0004C0                     l5446:
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;lab_11_main.c: 111: }
  1989                           ;lab_11_main.c: 112: }
  1990                           ;lab_11_main.c: 114: if (found != 0xff)
  1991  0004C0  0100               	movlb	0	; () banked
  1992  0004C2  29F2               	incf	main@found& (0+255),w,b
  1993  0004C4  B4D8               	btfsc	status,2,c
  1994  0004C6  D781               	goto	l5402
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;lab_11_main.c: 115: {
  1998                           ;lab_11_main.c: 116: printf ("Key Location = %d \r\n\n", found);
  1999  0004C8  0EBD               	movlw	low STR_4
  2000  0004CA  6E1D               	movwf	printf@f,c
  2001  0004CC  0EFF               	movlw	high STR_4
  2002  0004CE  6E1E               	movwf	printf@f+1,c
  2003  0004D0  C0F2  F01F         	movff	main@found,?_printf+2
  2004  0004D4  6A20               	clrf	?_printf+3,c
  2005  0004D6  EC0E  F000         	call	_printf	;wreg free
  2006                           
  2007                           ;lab_11_main.c: 117: fillCircle(60, 80, 20, color[found]);
  2008  0004DA  0E00               	movlw	0
  2009  0004DC  6E3C               	movwf	fillCircle@x0+1,c
  2010  0004DE  0E3C               	movlw	60
  2011  0004E0  6E3B               	movwf	fillCircle@x0,c
  2012  0004E2  0E00               	movlw	0
  2013  0004E4  6E3E               	movwf	fillCircle@y0+1,c
  2014  0004E6  0E50               	movlw	80
  2015  0004E8  6E3D               	movwf	fillCircle@y0,c
  2016  0004EA  0E00               	movlw	0
  2017  0004EC  6E40               	movwf	fillCircle@r+1,c
  2018  0004EE  0E14               	movlw	20
  2019  0004F0  6E3F               	movwf	fillCircle@r,c
  2020  0004F2  0100               	movlb	0	; () banked
  2021  0004F4  51F2               	movf	main@found& (0+255),w,b
  2022  0004F6  0D02               	mullw	2
  2023  0004F8  0E80               	movlw	low _color
  2024  0004FA  24F3               	addwf	prodl,w,c
  2025  0004FC  6ED9               	movwf	fsr2l,c
  2026  0004FE  0E00               	movlw	high _color
  2027  000500  20F4               	addwfc	prodh,w,c
  2028  000502  6EDA               	movwf	fsr2h,c
  2029  000504  CFDE F041          	movff	postinc2,fillCircle@color
  2030  000508  CFDD F042          	movff	postdec2,fillCircle@color+1
  2031  00050C  EC81  F00A         	call	_fillCircle	;wreg free
  2032                           
  2033                           ;lab_11_main.c: 118: drawCircle(60, 80, 20, 0xFFFF);
  2034  000510  0E00               	movlw	0
  2035  000512  6E1D               	movwf	drawCircle@x0+1,c
  2036  000514  0E3C               	movlw	60
  2037  000516  6E1C               	movwf	drawCircle@x0,c
  2038  000518  0E00               	movlw	0
  2039  00051A  6E1F               	movwf	drawCircle@y0+1,c
  2040  00051C  0E50               	movlw	80
  2041  00051E  6E1E               	movwf	drawCircle@y0,c
  2042  000520  0E00               	movlw	0
  2043  000522  6E21               	movwf	drawCircle@r+1,c
  2044  000524  0E14               	movlw	20
  2045  000526  6E20               	movwf	drawCircle@r,c
  2046  000528  0EFF               	movlw	255
  2047  00052A  6E23               	movwf	drawCircle@color+1,c
  2048  00052C  6822               	setf	drawCircle@color,c
  2049  00052E  EC61  F003         	call	_drawCircle	;wreg free
  2050                           
  2051                           ;lab_11_main.c: 119: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  2052  000532  0E4D               	movlw	77
  2053  000534  6E39               	movwf	drawtext@y,c
  2054  000536  0100               	movlb	0	; () banked
  2055  000538  51F2               	movf	main@found& (0+255),w,b
  2056  00053A  0D04               	mullw	4
  2057  00053C  0E00               	movlw	low _txt1
  2058  00053E  24F3               	addwf	prodl,w,c
  2059  000540  6E3A               	movwf	drawtext@_text,c
  2060  000542  0E01               	movlw	high _txt1
  2061  000544  20F4               	addwfc	prodh,w,c
  2062  000546  6E3B               	movwf	drawtext@_text+1,c
  2063  000548  0EFF               	movlw	255
  2064  00054A  6E3D               	movwf	drawtext@color+1,c
  2065  00054C  683C               	setf	drawtext@color,c
  2066  00054E  0E00               	movlw	0
  2067  000550  6E3F               	movwf	drawtext@bg+1,c
  2068  000552  0E00               	movlw	0
  2069  000554  6E3E               	movwf	drawtext@bg,c
  2070  000556  0E01               	movlw	1
  2071  000558  6E40               	movwf	drawtext@size,c
  2072  00055A  0E34               	movlw	52
  2073  00055C  ECBE  F006         	call	_drawtext
  2074                           
  2075                           ;lab_11_main.c: 122: if(color[found] == 0xF800)
  2076  000560  0100               	movlb	0	; () banked
  2077  000562  51F2               	movf	main@found& (0+255),w,b
  2078  000564  0D02               	mullw	2
  2079  000566  0E80               	movlw	low _color
  2080  000568  24F3               	addwf	prodl,w,c
  2081  00056A  6ED9               	movwf	fsr2l,c
  2082  00056C  0E00               	movlw	high _color
  2083  00056E  20F4               	addwfc	prodh,w,c
  2084  000570  6EDA               	movwf	fsr2h,c
  2085  000572  50DE               	movf	postinc2,w,c
  2086  000574  E10E               	bnz	l5460
  2087  000576  0EF8               	movlw	248
  2088  000578  18DE               	xorwf	postinc2,w,c
  2089  00057A  A4D8               	btfss	status,2,c
  2090  00057C  D00A               	goto	l5460
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;lab_11_main.c: 123: {
  2094                           ;lab_11_main.c: 126: PORTDbits.RD1 = 1;
  2095  00057E  8283               	bsf	3971,1,c	;volatile
  2096                           
  2097                           ;lab_11_main.c: 127: PORTDbits.RD2 = 0;
  2098  000580  9483               	bcf	3971,2,c	;volatile
  2099                           
  2100                           ;lab_11_main.c: 128: PORTDbits.RD3 = 0;
  2101  000582  9683               	bcf	3971,3,c	;volatile
  2102                           
  2103                           ;lab_11_main.c: 130: PORTEbits.RE0 = 0;
  2104  000584  9084               	bcf	3972,0,c	;volatile
  2105                           
  2106                           ;lab_11_main.c: 131: PORTEbits.RE1 = 0;
  2107  000586  9284               	bcf	3972,1,c	;volatile
  2108                           
  2109                           ;lab_11_main.c: 132: PORTEbits.RE2 = 0;
  2110  000588  9484               	bcf	3972,2,c	;volatile
  2111                           
  2112                           ;lab_11_main.c: 134: PORTDbits.RD4 = 0;
  2113  00058A  9883               	bcf	3971,4,c	;volatile
  2114                           
  2115                           ;lab_11_main.c: 135: PORTDbits.RD5 = 0;
  2116  00058C  9A83               	bcf	3971,5,c	;volatile
  2117                           
  2118                           ;lab_11_main.c: 136: PORTDbits.RD6 = 0;
  2119  00058E  9C83               	bcf	3971,6,c	;volatile
  2120  000590  D000               	goto	l5460
  2121  000592                     l5460:
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;lab_11_main.c: 137: }
  2125                           ;lab_11_main.c: 138: if(color[found] == 0x001F)
  2126  000592  0100               	movlb	0	; () banked
  2127  000594  51F2               	movf	main@found& (0+255),w,b
  2128  000596  0D02               	mullw	2
  2129  000598  0E80               	movlw	low _color
  2130  00059A  24F3               	addwf	prodl,w,c
  2131  00059C  6ED9               	movwf	fsr2l,c
  2132  00059E  0E00               	movlw	high _color
  2133  0005A0  20F4               	addwfc	prodh,w,c
  2134  0005A2  6EDA               	movwf	fsr2h,c
  2135  0005A4  0E1F               	movlw	31
  2136  0005A6  18DE               	xorwf	postinc2,w,c
  2137  0005A8  10DE               	iorwf	postinc2,w,c
  2138  0005AA  A4D8               	btfss	status,2,c
  2139  0005AC  D01B               	goto	l5466
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;lab_11_main.c: 139: {
  2143                           ;lab_11_main.c: 140: if(found==3 || found==4)
  2144  0005AE  0E03               	movlw	3
  2145  0005B0  0100               	movlb	0	; () banked
  2146  0005B2  19F2               	xorwf	main@found& (0+255),w,b
  2147  0005B4  B4D8               	btfsc	status,2,c
  2148  0005B6  D005               	goto	l320
  2149                           
  2150                           ; BSR set to: 0
  2151  0005B8  0E04               	movlw	4
  2152  0005BA  0100               	movlb	0	; () banked
  2153  0005BC  19F2               	xorwf	main@found& (0+255),w,b
  2154  0005BE  A4D8               	btfss	status,2,c
  2155  0005C0  D007               	goto	l318
  2156  0005C2                     l320:
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;lab_11_main.c: 141: {
  2160                           ;lab_11_main.c: 144: PORTDbits.RD1 = 0;
  2161  0005C2  9283               	bcf	3971,1,c	;volatile
  2162                           
  2163                           ;lab_11_main.c: 145: PORTDbits.RD2 = 0;
  2164  0005C4  9483               	bcf	3971,2,c	;volatile
  2165                           
  2166                           ;lab_11_main.c: 146: PORTDbits.RD3 = 1;
  2167  0005C6  8683               	bsf	3971,3,c	;volatile
  2168                           
  2169                           ;lab_11_main.c: 148: PORTEbits.RE0 = 0;
  2170  0005C8  9084               	bcf	3972,0,c	;volatile
  2171                           
  2172                           ;lab_11_main.c: 149: PORTEbits.RE1 = 0;
  2173  0005CA  9284               	bcf	3972,1,c	;volatile
  2174                           
  2175                           ;lab_11_main.c: 150: PORTEbits.RE2 = 0;
  2176  0005CC  9484               	bcf	3972,2,c	;volatile
  2177  0005CE  D006               	goto	L1
  2178  0005D0                     l318:
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;lab_11_main.c: 156: else
  2182                           ;lab_11_main.c: 157: {
  2183                           ;lab_11_main.c: 160: PORTDbits.RD1 = 0;
  2184  0005D0  9283               	bcf	3971,1,c	;volatile
  2185                           
  2186                           ;lab_11_main.c: 161: PORTDbits.RD2 = 0;
  2187  0005D2  9483               	bcf	3971,2,c	;volatile
  2188                           
  2189                           ;lab_11_main.c: 162: PORTDbits.RD3 = 0;
  2190  0005D4  9683               	bcf	3971,3,c	;volatile
  2191                           
  2192                           ;lab_11_main.c: 164: PORTEbits.RE0 = 0;
  2193  0005D6  9084               	bcf	3972,0,c	;volatile
  2194                           
  2195                           ;lab_11_main.c: 165: PORTEbits.RE1 = 0;
  2196  0005D8  9284               	bcf	3972,1,c	;volatile
  2197                           
  2198                           ;lab_11_main.c: 166: PORTEbits.RE2 = 1;
  2199  0005DA  8484               	bsf	3972,2,c	;volatile
  2200  0005DC                     L1:
  2201                           
  2202                           ;lab_11_main.c: 168: PORTDbits.RD4 = 0;
  2203  0005DC  9883               	bcf	3971,4,c	;volatile
  2204                           
  2205                           ;lab_11_main.c: 169: PORTDbits.RD5 = 0;
  2206  0005DE  9A83               	bcf	3971,5,c	;volatile
  2207                           
  2208                           ;lab_11_main.c: 170: PORTDbits.RD6 = 0;
  2209  0005E0  9C83               	bcf	3971,6,c	;volatile
  2210                           
  2211                           ; BSR set to: 0
  2212  0005E2  D000               	goto	l5466
  2213  0005E4                     l5466:
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;lab_11_main.c: 171: }
  2217                           ;lab_11_main.c: 172: }
  2218                           ;lab_11_main.c: 173: if(color[found] == 0x07E0)
  2219  0005E4  0100               	movlb	0	; () banked
  2220  0005E6  51F2               	movf	main@found& (0+255),w,b
  2221  0005E8  0D02               	mullw	2
  2222  0005EA  0E80               	movlw	low _color
  2223  0005EC  24F3               	addwf	prodl,w,c
  2224  0005EE  6ED9               	movwf	fsr2l,c
  2225  0005F0  0E00               	movlw	high _color
  2226  0005F2  20F4               	addwfc	prodh,w,c
  2227  0005F4  6EDA               	movwf	fsr2h,c
  2228  0005F6  0EE0               	movlw	224
  2229  0005F8  18DE               	xorwf	postinc2,w,c
  2230  0005FA  E10E               	bnz	l5470
  2231  0005FC  0E07               	movlw	7
  2232  0005FE  18DE               	xorwf	postinc2,w,c
  2233  000600  A4D8               	btfss	status,2,c
  2234  000602  D00A               	goto	l5470
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;lab_11_main.c: 174: {
  2238                           ;lab_11_main.c: 177: PORTDbits.RD1 = 0;
  2239  000604  9283               	bcf	3971,1,c	;volatile
  2240                           
  2241                           ;lab_11_main.c: 178: PORTDbits.RD2 = 1;
  2242  000606  8483               	bsf	3971,2,c	;volatile
  2243                           
  2244                           ;lab_11_main.c: 179: PORTDbits.RD3 = 0;
  2245  000608  9683               	bcf	3971,3,c	;volatile
  2246                           
  2247                           ;lab_11_main.c: 181: PORTEbits.RE0 = 0;
  2248  00060A  9084               	bcf	3972,0,c	;volatile
  2249                           
  2250                           ;lab_11_main.c: 182: PORTEbits.RE1 = 0;
  2251  00060C  9284               	bcf	3972,1,c	;volatile
  2252                           
  2253                           ;lab_11_main.c: 183: PORTEbits.RE2 = 0;
  2254  00060E  9484               	bcf	3972,2,c	;volatile
  2255                           
  2256                           ;lab_11_main.c: 185: PORTDbits.RD4 = 0;
  2257  000610  9883               	bcf	3971,4,c	;volatile
  2258                           
  2259                           ;lab_11_main.c: 186: PORTDbits.RD5 = 0;
  2260  000612  9A83               	bcf	3971,5,c	;volatile
  2261                           
  2262                           ;lab_11_main.c: 187: PORTDbits.RD6 = 0;
  2263  000614  9C83               	bcf	3971,6,c	;volatile
  2264  000616  D000               	goto	l5470
  2265  000618                     l5470:
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;lab_11_main.c: 188: }
  2269                           ;lab_11_main.c: 189: if(color[found] == 0xF81F)
  2270  000618  0100               	movlb	0	; () banked
  2271  00061A  51F2               	movf	main@found& (0+255),w,b
  2272  00061C  0D02               	mullw	2
  2273  00061E  0E80               	movlw	low _color
  2274  000620  24F3               	addwf	prodl,w,c
  2275  000622  6ED9               	movwf	fsr2l,c
  2276  000624  0E00               	movlw	high _color
  2277  000626  20F4               	addwfc	prodh,w,c
  2278  000628  6EDA               	movwf	fsr2h,c
  2279  00062A  0E1F               	movlw	31
  2280  00062C  18DE               	xorwf	postinc2,w,c
  2281  00062E  E10E               	bnz	l5474
  2282  000630  0EF8               	movlw	248
  2283  000632  18DE               	xorwf	postinc2,w,c
  2284  000634  A4D8               	btfss	status,2,c
  2285  000636  D00A               	goto	l5474
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;lab_11_main.c: 190: {
  2289                           ;lab_11_main.c: 193: PORTDbits.RD1 = 0;
  2290  000638  9283               	bcf	3971,1,c	;volatile
  2291                           
  2292                           ;lab_11_main.c: 194: PORTDbits.RD2 = 0;
  2293  00063A  9483               	bcf	3971,2,c	;volatile
  2294                           
  2295                           ;lab_11_main.c: 195: PORTDbits.RD3 = 0;
  2296  00063C  9683               	bcf	3971,3,c	;volatile
  2297                           
  2298                           ;lab_11_main.c: 197: PORTEbits.RE0 = 1;
  2299  00063E  8084               	bsf	3972,0,c	;volatile
  2300                           
  2301                           ;lab_11_main.c: 198: PORTEbits.RE1 = 0;
  2302  000640  9284               	bcf	3972,1,c	;volatile
  2303                           
  2304                           ;lab_11_main.c: 199: PORTEbits.RE2 = 1;
  2305  000642  8484               	bsf	3972,2,c	;volatile
  2306                           
  2307                           ;lab_11_main.c: 201: PORTDbits.RD4 = 0;
  2308  000644  9883               	bcf	3971,4,c	;volatile
  2309                           
  2310                           ;lab_11_main.c: 202: PORTDbits.RD5 = 0;
  2311  000646  9A83               	bcf	3971,5,c	;volatile
  2312                           
  2313                           ;lab_11_main.c: 203: PORTDbits.RD6 = 0;
  2314  000648  9C83               	bcf	3971,6,c	;volatile
  2315  00064A  D000               	goto	l5474
  2316  00064C                     l5474:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;lab_11_main.c: 204: }
  2320                           ;lab_11_main.c: 205: if(color[found] == 0x0000)
  2321  00064C  0100               	movlb	0	; () banked
  2322  00064E  51F2               	movf	main@found& (0+255),w,b
  2323  000650  0D02               	mullw	2
  2324  000652  0E80               	movlw	low _color
  2325  000654  24F3               	addwf	prodl,w,c
  2326  000656  6ED9               	movwf	fsr2l,c
  2327  000658  0E00               	movlw	high _color
  2328  00065A  20F4               	addwfc	prodh,w,c
  2329  00065C  6EDA               	movwf	fsr2h,c
  2330  00065E  50DE               	movf	postinc2,w,c
  2331  000660  10DE               	iorwf	postinc2,w,c
  2332  000662  A4D8               	btfss	status,2,c
  2333  000664  D023               	goto	l324
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;lab_11_main.c: 206: {
  2337                           ;lab_11_main.c: 207: if (found==9 || found==10 || found==11)
  2338  000666  0E09               	movlw	9
  2339  000668  0100               	movlb	0	; () banked
  2340  00066A  19F2               	xorwf	main@found& (0+255),w,b
  2341  00066C  B4D8               	btfsc	status,2,c
  2342  00066E  D00A               	goto	l327
  2343                           
  2344                           ; BSR set to: 0
  2345  000670  0E0A               	movlw	10
  2346  000672  0100               	movlb	0	; () banked
  2347  000674  19F2               	xorwf	main@found& (0+255),w,b
  2348  000676  B4D8               	btfsc	status,2,c
  2349  000678  D005               	goto	l327
  2350                           
  2351                           ; BSR set to: 0
  2352  00067A  0E0B               	movlw	11
  2353  00067C  0100               	movlb	0	; () banked
  2354  00067E  19F2               	xorwf	main@found& (0+255),w,b
  2355  000680  A4D8               	btfss	status,2,c
  2356  000682  D00A               	goto	l325
  2357  000684                     l327:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;lab_11_main.c: 208: {
  2361                           ;lab_11_main.c: 211: PORTDbits.RD1 = 0;
  2362  000684  9283               	bcf	3971,1,c	;volatile
  2363                           
  2364                           ;lab_11_main.c: 212: PORTDbits.RD2 = 0;
  2365  000686  9483               	bcf	3971,2,c	;volatile
  2366                           
  2367                           ;lab_11_main.c: 213: PORTDbits.RD3 = 0;
  2368  000688  9683               	bcf	3971,3,c	;volatile
  2369                           
  2370                           ;lab_11_main.c: 215: PORTEbits.RE0 = 1;
  2371  00068A  8084               	bsf	3972,0,c	;volatile
  2372                           
  2373                           ;lab_11_main.c: 216: PORTEbits.RE1 = 1;
  2374  00068C  8284               	bsf	3972,1,c	;volatile
  2375                           
  2376                           ;lab_11_main.c: 217: PORTEbits.RE2 = 1;
  2377  00068E  8484               	bsf	3972,2,c	;volatile
  2378                           
  2379                           ;lab_11_main.c: 219: PORTDbits.RD4 = 0;
  2380  000690  9883               	bcf	3971,4,c	;volatile
  2381                           
  2382                           ;lab_11_main.c: 220: PORTDbits.RD5 = 0;
  2383  000692  9A83               	bcf	3971,5,c	;volatile
  2384                           
  2385                           ;lab_11_main.c: 221: PORTDbits.RD6 = 0;
  2386  000694  9C83               	bcf	3971,6,c	;volatile
  2387                           
  2388                           ;lab_11_main.c: 222: }
  2389  000696  D00A               	goto	l324
  2390  000698                     l325:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;lab_11_main.c: 223: else
  2394                           ;lab_11_main.c: 224: {
  2395                           ;lab_11_main.c: 227: PORTDbits.RD1 = 0;
  2396  000698  9283               	bcf	3971,1,c	;volatile
  2397                           
  2398                           ;lab_11_main.c: 228: PORTDbits.RD2 = 0;
  2399  00069A  9483               	bcf	3971,2,c	;volatile
  2400                           
  2401                           ;lab_11_main.c: 229: PORTDbits.RD3 = 0;
  2402  00069C  9683               	bcf	3971,3,c	;volatile
  2403                           
  2404                           ;lab_11_main.c: 231: PORTEbits.RE0 = 0;
  2405  00069E  9084               	bcf	3972,0,c	;volatile
  2406                           
  2407                           ;lab_11_main.c: 232: PORTEbits.RE1 = 0;
  2408  0006A0  9284               	bcf	3972,1,c	;volatile
  2409                           
  2410                           ;lab_11_main.c: 233: PORTEbits.RE2 = 0;
  2411  0006A2  9484               	bcf	3972,2,c	;volatile
  2412                           
  2413                           ;lab_11_main.c: 235: PORTDbits.RD4 = 1;
  2414  0006A4  8883               	bsf	3971,4,c	;volatile
  2415                           
  2416                           ;lab_11_main.c: 236: PORTDbits.RD5 = 1;
  2417  0006A6  8A83               	bsf	3971,5,c	;volatile
  2418                           
  2419                           ;lab_11_main.c: 237: PORTDbits.RD6 = 1;
  2420  0006A8  8C83               	bsf	3971,6,c	;volatile
  2421  0006AA  D000               	goto	l324
  2422  0006AC                     l324:
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;lab_11_main.c: 238: }
  2426                           ;lab_11_main.c: 239: }
  2427                           ;lab_11_main.c: 242: PORTCbits.RC0 = 1;
  2428  0006AC  8082               	bsf	3970,0,c	;volatile
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;lab_11_main.c: 243: Activate_Buzzer();
  2432  0006AE  EC08  F00D         	call	_Activate_Buzzer	;wreg free
  2433                           
  2434                           ;lab_11_main.c: 244: Wait_One_Sec();
  2435  0006B2  EC34  F00D         	call	_Wait_One_Sec	;wreg free
  2436                           
  2437                           ;lab_11_main.c: 245: Deactivate_Buzzer();
  2438  0006B6  EC48  F00D         	call	_Deactivate_Buzzer	;wreg free
  2439                           
  2440                           ;lab_11_main.c: 246: PORTCbits.RC0 = 0;
  2441  0006BA  9082               	bcf	3970,0,c	;volatile
  2442  0006BC  D686               	goto	l5402
  2443  0006BE  EF0C  F000         	goto	start
  2444  0006C2                     __end_of_main:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           tblptrh	equ	0xFF7
  2448                           tblptrl	equ	0xFF6
  2449                           tablat	equ	0xFF5
  2450                           prodh	equ	0xFF4
  2451                           prodl	equ	0xFF3
  2452                           intcon2	equ	0xFF1
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           postdec1	equ	0xFE5
  2456                           fsr1l	equ	0xFE1
  2457                           postinc2	equ	0xFDE
  2458                           postdec2	equ	0xFDD
  2459                           fsr2h	equ	0xFDA
  2460                           fsr2l	equ	0xFD9
  2461                           status	equ	0xFD8
  2462                           
  2463 ;; *************** function _printf *****************
  2464 ;; Defined at:
  2465 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2468 ;;		 -> STR_4(22), STR_3(19), STR_2(43), STR_1(30), 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  idx             1   46[COMRAM] unsigned char 
  2471 ;;  tmpval          4    0        struct .
  2472 ;;  cp              3    0        PTR const unsigned char 
  2473 ;;  width           2   53[COMRAM] int 
  2474 ;;  val             2   50[COMRAM] unsigned int 
  2475 ;;  ap              2   47[COMRAM] PTR void [1]
  2476 ;;		 -> ?_printf(2), 
  2477 ;;  len             2    0        unsigned int 
  2478 ;;  c               1   55[COMRAM] char 
  2479 ;;  flag            1   52[COMRAM] unsigned char 
  2480 ;;  prec            1   49[COMRAM] char 
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  2   28[COMRAM] int 
  2483 ;; Registers used:
  2484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2490 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;Total ram usage:       28 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    4
  2497 ;; This function calls:
  2498 ;;		___lwdiv
  2499 ;;		___lwmod
  2500 ;;		___wmul
  2501 ;;		_isdigit
  2502 ;;		_putch
  2503 ;; This function is called by:
  2504 ;;		_main
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           	psect	text1
  2509  00001C                     __ptext1:
  2510                           	opt stack 0
  2511  00001C                     _printf:
  2512                           	opt stack 26
  2513                           
  2514                           ;doprnt.c: 466: va_list ap;
  2515                           ;doprnt.c: 499: signed char c;
  2516                           ;doprnt.c: 501: int width;
  2517                           ;doprnt.c: 506: signed char prec;
  2518                           ;doprnt.c: 508: unsigned char flag;
  2519                           ;doprnt.c: 523: union {
  2520                           ;doprnt.c: 524: unsigned long vd;
  2521                           ;doprnt.c: 525: double integ;
  2522                           ;doprnt.c: 526: } tmpval;
  2523                           ;doprnt.c: 528: unsigned int val;
  2524                           ;doprnt.c: 529: unsigned len;
  2525                           ;doprnt.c: 530: const char * cp;
  2526                           ;doprnt.c: 533: *ap = __va_start();
  2527                           
  2528                           ;incstack = 0
  2529  00001C  0E1F               	movlw	low (?_printf+2)
  2530  00001E  6E30               	movwf	printf@ap,c
  2531  000020  0E00               	movlw	high (?_printf+2)
  2532  000022  6E31               	movwf	printf@ap+1,c
  2533                           
  2534                           ;doprnt.c: 536: while(c = *f++) {
  2535  000024  D199               	goto	l5198
  2536  000026                     l5072:
  2537                           
  2538                           ;doprnt.c: 538: if(c != '%')
  2539  000026  0E25               	movlw	37
  2540  000028  1838               	xorwf	printf@c,w,c
  2541  00002A  B4D8               	btfsc	status,2,c
  2542  00002C  D004               	goto	l5076
  2543                           
  2544                           ;doprnt.c: 540: {
  2545                           ;doprnt.c: 541: (putch(c) );
  2546  00002E  5038               	movf	printf@c,w,c
  2547  000030  EC21  F00D         	call	_putch
  2548                           
  2549                           ;doprnt.c: 542: continue;
  2550  000034  D191               	goto	l5198
  2551  000036                     l5076:
  2552                           
  2553                           ;doprnt.c: 543: }
  2554                           ;doprnt.c: 546: width = 0;
  2555  000036  0E00               	movlw	0
  2556  000038  6E37               	movwf	printf@width+1,c
  2557  00003A  0E00               	movlw	0
  2558  00003C  6E36               	movwf	printf@width,c
  2559                           
  2560                           ;doprnt.c: 548: flag = 0;
  2561  00003E  0E00               	movlw	0
  2562  000040  6E35               	movwf	printf@flag,c
  2563                           
  2564                           ;doprnt.c: 551: switch(*f) {
  2565                           
  2566                           ;doprnt.c: 550: for(;;) {
  2567  000042  D005               	goto	l5082
  2568  000044                     l5078:
  2569                           
  2570                           ;doprnt.c: 580: flag |= 0x04;
  2571  000044  8435               	bsf	printf@flag,2,c
  2572                           
  2573                           ;doprnt.c: 581: f++;
  2574  000046  4A1D               	infsnz	printf@f,f,c
  2575  000048  2A1E               	incf	printf@f+1,f,c
  2576                           
  2577                           ;doprnt.c: 582: continue;
  2578  00004A  D001               	goto	l5082
  2579                           
  2580                           ;doprnt.c: 584: }
  2581  00004C  D00B               	goto	l5084
  2582  00004E                     l5082:
  2583  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  2584  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  2585  000056                     	if	0	;tblptru may be non-zero
  2586  000056                     	endif
  2587  000056                     	if	0	;tblptru may be non-zero
  2588  000056                     	endif
  2589  000056  0008               	tblrd		*
  2590  000058  50F5               	movf	tablat,w,c
  2591                           
  2592                           ; Switch size 1, requested type "space"
  2593                           ; Number of cases is 1, Range of values is 48 to 48
  2594                           ; switch strategies available:
  2595                           ; Name         Instructions Cycles
  2596                           ; simple_byte            4     3 (average)
  2597                           ;	Chosen strategy is simple_byte
  2598  00005A  0A30               	xorlw	48	; case 48
  2599  00005C  B4D8               	btfsc	status,2,c
  2600  00005E  D7F2               	goto	l5078
  2601                           
  2602                           ;doprnt.c: 585: break;
  2603  000060  D001               	goto	l5084
  2604                           
  2605                           ;doprnt.c: 586: }
  2606  000062  D7F5               	goto	l5082
  2607  000064                     l5084:
  2608                           
  2609                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2610  000064  C01D  FFF6         	movff	printf@f,tblptrl
  2611  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  2612  00006C                     	if	0	;tblptru may be non-zero
  2613  00006C                     	endif
  2614  00006C                     	if	0	;tblptru may be non-zero
  2615  00006C                     	endif
  2616  00006C  0008               	tblrd		*
  2617  00006E  50F5               	movf	tablat,w,c
  2618  000070  EC61  F00C         	call	_isdigit
  2619  000074  A0D8               	btfss	status,0,c
  2620  000076  D03B               	goto	l5100
  2621                           
  2622                           ;doprnt.c: 598: width = 0;
  2623  000078  0E00               	movlw	0
  2624  00007A  6E37               	movwf	printf@width+1,c
  2625  00007C  0E00               	movlw	0
  2626  00007E  6E36               	movwf	printf@width,c
  2627  000080  D000               	goto	l5088
  2628  000082                     l5088:
  2629                           
  2630                           ;doprnt.c: 600: width *= 10;
  2631  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  2632  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2633  00008A  0E00               	movlw	0
  2634  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2635  00008E  0E0A               	movlw	10
  2636  000090  6E13               	movwf	___wmul@multiplicand,c
  2637  000092  EC4D  F00C         	call	___wmul	;wreg free
  2638  000096  C011  F036         	movff	?___wmul,printf@width
  2639  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  2640                           
  2641                           ;doprnt.c: 601: width += *f++ - '0';
  2642  00009E  0ED0               	movlw	208
  2643  0000A0  6E2B               	movwf	??_printf& (0+255),c
  2644  0000A2  0EFF               	movlw	255
  2645  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  2646  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  2647  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2648  0000AE                     	if	0	;tblptru may be non-zero
  2649  0000AE                     	endif
  2650  0000AE                     	if	0	;tblptru may be non-zero
  2651  0000AE                     	endif
  2652  0000AE  0008               	tblrd		*
  2653  0000B0  50F5               	movf	tablat,w,c
  2654  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  2655  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  2656  0000B6  502B               	movf	??_printf,w,c
  2657  0000B8  262D               	addwf	??_printf+2,f,c
  2658  0000BA  502C               	movf	??_printf+1,w,c
  2659  0000BC  222E               	addwfc	??_printf+3,f,c
  2660  0000BE  502D               	movf	??_printf+2,w,c
  2661  0000C0  2636               	addwf	printf@width,f,c
  2662  0000C2  502E               	movf	??_printf+3,w,c
  2663  0000C4  2237               	addwfc	printf@width+1,f,c
  2664  0000C6  4A1D               	infsnz	printf@f,f,c
  2665  0000C8  2A1E               	incf	printf@f+1,f,c
  2666                           
  2667                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2668  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  2669  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2670  0000D2                     	if	0	;tblptru may be non-zero
  2671  0000D2                     	endif
  2672  0000D2                     	if	0	;tblptru may be non-zero
  2673  0000D2                     	endif
  2674  0000D2  0008               	tblrd		*
  2675  0000D4  50F5               	movf	tablat,w,c
  2676  0000D6  EC61  F00C         	call	_isdigit
  2677  0000DA  A0D8               	btfss	status,0,c
  2678  0000DC  D008               	goto	l5100
  2679  0000DE  D7D1               	goto	l5088
  2680                           
  2681                           ;doprnt.c: 608: }
  2682                           ;doprnt.c: 635: switch(c = *f++) {
  2683  0000E0  D006               	goto	l5100
  2684                           
  2685                           ;doprnt.c: 638: goto alldone;
  2686                           
  2687                           ;doprnt.c: 637: case 0:
  2688  0000E2  D148               	goto	l756
  2689                           
  2690                           ;doprnt.c: 698: case 'i':
  2691                           ;doprnt.c: 699: break;
  2692                           
  2693                           ;doprnt.c: 697: case 'd':
  2694  0000E4  D01B               	goto	l719
  2695  0000E6                     l5096:
  2696                           
  2697                           ;doprnt.c: 721: flag |= 0x80;
  2698  0000E6  8E35               	bsf	printf@flag,7,c
  2699                           
  2700                           ;doprnt.c: 723: break;
  2701  0000E8  D019               	goto	l719
  2702                           
  2703                           ;doprnt.c: 813: continue;
  2704                           
  2705                           ;doprnt.c: 802: default:
  2706  0000EA  D136               	goto	l5198
  2707                           
  2708                           ;doprnt.c: 822: }
  2709  0000EC  D017               	goto	l719
  2710  0000EE                     l5100:
  2711  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2712  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2713  0000F6  4A1D               	infsnz	printf@f,f,c
  2714  0000F8  2A1E               	incf	printf@f+1,f,c
  2715  0000FA                     	if	0	;tblptru may be non-zero
  2716  0000FA                     	endif
  2717  0000FA                     	if	0	;tblptru may be non-zero
  2718  0000FA                     	endif
  2719  0000FA  0008               	tblrd		*
  2720  0000FC  CFF5 F038          	movff	tablat,printf@c
  2721  000100  5038               	movf	printf@c,w,c
  2722                           
  2723                           ; Switch size 1, requested type "space"
  2724                           ; Number of cases is 4, Range of values is 0 to 120
  2725                           ; switch strategies available:
  2726                           ; Name         Instructions Cycles
  2727                           ; simple_byte           13     7 (average)
  2728                           ;	Chosen strategy is simple_byte
  2729  000102  0A00               	xorlw	0	; case 0
  2730  000104  B4D8               	btfsc	status,2,c
  2731  000106  D136               	goto	l756
  2732  000108  0A64               	xorlw	100	; case 100
  2733  00010A  B4D8               	btfsc	status,2,c
  2734  00010C  D007               	goto	l719
  2735  00010E  0A0D               	xorlw	13	; case 105
  2736  000110  B4D8               	btfsc	status,2,c
  2737  000112  D004               	goto	l719
  2738  000114  0A11               	xorlw	17	; case 120
  2739  000116  B4D8               	btfsc	status,2,c
  2740  000118  D7E6               	goto	l5096
  2741  00011A  D11E               	goto	l5198
  2742  00011C                     l719:
  2743                           
  2744                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2745  00011C  BE35               	btfsc	printf@flag,7,c
  2746  00011E  D015               	goto	l5112
  2747                           
  2748                           ;doprnt.c: 1253: {
  2749                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2750  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2751  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2752  000128  CFDE F033          	movff	postinc2,printf@val
  2753  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2754  000130  0E02               	movlw	2
  2755  000132  2630               	addwf	printf@ap,f,c
  2756  000134  0E00               	movlw	0
  2757  000136  2231               	addwfc	printf@ap+1,f,c
  2758                           
  2759                           ;doprnt.c: 1261: if((int)val < 0) {
  2760  000138  AE34               	btfss	printf@val+1,7,c
  2761  00013A  D04E               	goto	l5146
  2762                           
  2763                           ;doprnt.c: 1262: flag |= 0x03;
  2764  00013C  0E03               	movlw	3
  2765  00013E  1235               	iorwf	printf@flag,f,c
  2766                           
  2767                           ;doprnt.c: 1263: val = -val;
  2768  000140  6C33               	negf	printf@val,c
  2769  000142  1E34               	comf	printf@val+1,f,c
  2770  000144  B0D8               	btfsc	status,0,c
  2771  000146  2A34               	incf	printf@val+1,f,c
  2772                           
  2773                           ;doprnt.c: 1264: }
  2774                           ;doprnt.c: 1266: }
  2775  000148  D047               	goto	l5146
  2776  00014A                     l5112:
  2777                           
  2778                           ;doprnt.c: 1268: else
  2779                           ;doprnt.c: 1273: {
  2780                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2781  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2782  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2783  000152  CFDE F033          	movff	postinc2,printf@val
  2784  000156  CFDD F034          	movff	postdec2,printf@val+1
  2785  00015A  0E02               	movlw	2
  2786  00015C  2630               	addwf	printf@ap,f,c
  2787  00015E  0E00               	movlw	0
  2788  000160  2231               	addwfc	printf@ap+1,f,c
  2789                           
  2790                           ;doprnt.c: 1287: }
  2791                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2792  000162  D03A               	goto	l5146
  2793  000164                     l5116:
  2794                           
  2795                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2796  000164  0E01               	movlw	1
  2797  000166  6E38               	movwf	printf@c,c
  2798  000168                     l5118:
  2799  000168  0E05               	movlw	5
  2800  00016A  1838               	xorwf	printf@c,w,c
  2801  00016C  B4D8               	btfsc	status,2,c
  2802  00016E  D03D               	goto	l5148
  2803  000170  D001               	goto	l5122
  2804  000172  D03B               	goto	l5148
  2805  000174                     l5122:
  2806                           
  2807                           ;doprnt.c: 1306: if(val < dpowers[c])
  2808  000174  5038               	movf	printf@c,w,c
  2809  000176  0D02               	mullw	2
  2810  000178  0E62               	movlw	low _dpowers
  2811  00017A  24F3               	addwf	prodl,w,c
  2812  00017C  6EF6               	movwf	tblptrl,c
  2813  00017E  0EFF               	movlw	high _dpowers
  2814  000180  20F4               	addwfc	prodh,w,c
  2815  000182  6EF7               	movwf	tblptrh,c
  2816  000184                     	if	0	;There are less than 3 active tblptr bytes
  2817  000184                     	endif
  2818  000184  0009               	tblrd		*+
  2819  000186  50F5               	movf	tablat,w,c
  2820  000188  5C33               	subwf	printf@val,w,c
  2821  00018A  0009               	tblrd		*+
  2822  00018C  50F5               	movf	tablat,w,c
  2823  00018E  5834               	subwfb	printf@val+1,w,c
  2824  000190  A0D8               	btfss	status,0,c
  2825  000192  D02B               	goto	l5148
  2826  000194  D001               	goto	l5126
  2827                           
  2828                           ;doprnt.c: 1307: break;
  2829  000196  D029               	goto	l5148
  2830  000198                     l5126:
  2831  000198  2A38               	incf	printf@c,f,c
  2832  00019A  D7E6               	goto	l5118
  2833                           
  2834                           ;doprnt.c: 1309: break;
  2835  00019C  D026               	goto	l5148
  2836  00019E                     l5130:
  2837                           
  2838                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2839  00019E  0E01               	movlw	1
  2840  0001A0  6E38               	movwf	printf@c,c
  2841  0001A2                     l5132:
  2842  0001A2  0E04               	movlw	4
  2843  0001A4  1838               	xorwf	printf@c,w,c
  2844  0001A6  B4D8               	btfsc	status,2,c
  2845  0001A8  D020               	goto	l5148
  2846  0001AA  D001               	goto	l5136
  2847  0001AC  D01E               	goto	l5148
  2848  0001AE                     l5136:
  2849                           
  2850                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2851  0001AE  5038               	movf	printf@c,w,c
  2852  0001B0  0D02               	mullw	2
  2853  0001B2  0E6C               	movlw	low _hexpowers
  2854  0001B4  24F3               	addwf	prodl,w,c
  2855  0001B6  6EF6               	movwf	tblptrl,c
  2856  0001B8  0EFF               	movlw	high _hexpowers
  2857  0001BA  20F4               	addwfc	prodh,w,c
  2858  0001BC  6EF7               	movwf	tblptrh,c
  2859  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2860  0001BE                     	endif
  2861  0001BE  0009               	tblrd		*+
  2862  0001C0  50F5               	movf	tablat,w,c
  2863  0001C2  5C33               	subwf	printf@val,w,c
  2864  0001C4  0009               	tblrd		*+
  2865  0001C6  50F5               	movf	tablat,w,c
  2866  0001C8  5834               	subwfb	printf@val+1,w,c
  2867  0001CA  A0D8               	btfss	status,0,c
  2868  0001CC  D00E               	goto	l5148
  2869  0001CE  D001               	goto	l5140
  2870                           
  2871                           ;doprnt.c: 1318: break;
  2872  0001D0  D00C               	goto	l5148
  2873  0001D2                     l5140:
  2874  0001D2  2A38               	incf	printf@c,f,c
  2875  0001D4  D7E6               	goto	l5132
  2876                           
  2877                           ;doprnt.c: 1336: }
  2878                           
  2879                           ;doprnt.c: 1320: break;
  2880  0001D6  D009               	goto	l5148
  2881  0001D8                     l5146:
  2882  0001D8  5035               	movf	printf@flag,w,c
  2883  0001DA  0B80               	andlw	128
  2884                           
  2885                           ; Switch size 1, requested type "space"
  2886                           ; Number of cases is 2, Range of values is 0 to 128
  2887                           ; switch strategies available:
  2888                           ; Name         Instructions Cycles
  2889                           ; simple_byte            7     4 (average)
  2890                           ;	Chosen strategy is simple_byte
  2891  0001DC  0A00               	xorlw	0	; case 0
  2892  0001DE  B4D8               	btfsc	status,2,c
  2893  0001E0  D7C1               	goto	l5116
  2894  0001E2  0A80               	xorlw	128	; case 128
  2895  0001E4  B4D8               	btfsc	status,2,c
  2896  0001E6  D7DB               	goto	l5130
  2897  0001E8  D000               	goto	l5148
  2898  0001EA                     l5148:
  2899                           
  2900                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2901  0001EA  5036               	movf	printf@width,w,c
  2902  0001EC  1037               	iorwf	printf@width+1,w,c
  2903  0001EE  B4D8               	btfsc	status,2,c
  2904  0001F0  D00A               	goto	l5154
  2905  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2906  0001F6  0E03               	movlw	3
  2907  0001F8  162B               	andwf	??_printf,f,c
  2908  0001FA  B4D8               	btfsc	status,2,c
  2909  0001FC  D004               	goto	l5154
  2910                           
  2911                           ;doprnt.c: 1346: width--;
  2912  0001FE  0636               	decf	printf@width,f,c
  2913  000200  A0D8               	btfss	status,0,c
  2914  000202  0637               	decf	printf@width+1,f,c
  2915  000204  D000               	goto	l5154
  2916  000206                     l5154:
  2917                           
  2918                           ;doprnt.c: 1381: if(width > c)
  2919  000206  0E80               	movlw	128
  2920  000208  BE38               	btfsc	printf@c,7,c
  2921  00020A  0E7F               	movlw	127
  2922  00020C  6E2B               	movwf	??_printf& (0+255),c
  2923  00020E  5036               	movf	printf@width,w,c
  2924  000210  5C38               	subwf	printf@c,w,c
  2925  000212  5037               	movf	printf@width+1,w,c
  2926  000214  0A80               	xorlw	128
  2927  000216  582B               	subwfb	??_printf& (0+255),w,c
  2928  000218  B0D8               	btfsc	status,0,c
  2929  00021A  D007               	goto	l5158
  2930                           
  2931                           ;doprnt.c: 1382: width -= c;
  2932  00021C  5038               	movf	printf@c,w,c
  2933  00021E  5E36               	subwf	printf@width,f,c
  2934  000220  0E00               	movlw	0
  2935  000222  BE38               	btfsc	printf@c,7,c
  2936  000224  0EFF               	movlw	255
  2937  000226  5A37               	subwfb	printf@width+1,f,c
  2938  000228  D005               	goto	l5160
  2939  00022A                     l5158:
  2940                           
  2941                           ;doprnt.c: 1383: else
  2942                           ;doprnt.c: 1384: width = 0;
  2943  00022A  0E00               	movlw	0
  2944  00022C  6E37               	movwf	printf@width+1,c
  2945  00022E  0E00               	movlw	0
  2946  000230  6E36               	movwf	printf@width,c
  2947  000232  D000               	goto	l5160
  2948  000234                     l5160:
  2949                           
  2950                           ;doprnt.c: 1387: if(flag & 0x04) {
  2951  000234  A435               	btfss	printf@flag,2,c
  2952  000236  D01A               	goto	l5172
  2953                           
  2954                           ;doprnt.c: 1392: if(flag & 0x03)
  2955  000238  C035  F02B         	movff	printf@flag,??_printf
  2956  00023C  0E03               	movlw	3
  2957  00023E  162B               	andwf	??_printf,f,c
  2958  000240  B4D8               	btfsc	status,2,c
  2959  000242  D004               	goto	l5166
  2960                           
  2961                           ;doprnt.c: 1393: (putch('-') );
  2962  000244  0E2D               	movlw	45
  2963  000246  EC21  F00D         	call	_putch
  2964  00024A  D000               	goto	l5166
  2965  00024C                     l5166:
  2966                           
  2967                           ;doprnt.c: 1415: if(width)
  2968  00024C  5036               	movf	printf@width,w,c
  2969  00024E  1037               	iorwf	printf@width+1,w,c
  2970  000250  B4D8               	btfsc	status,2,c
  2971  000252  D026               	goto	l5182
  2972  000254                     l5168:
  2973                           
  2974                           ;doprnt.c: 1417: (putch('0') );
  2975  000254  0E30               	movlw	48
  2976  000256  EC21  F00D         	call	_putch
  2977                           
  2978                           ;doprnt.c: 1418: while(--width);
  2979  00025A  0636               	decf	printf@width,f,c
  2980  00025C  A0D8               	btfss	status,0,c
  2981  00025E  0637               	decf	printf@width+1,f,c
  2982  000260  5036               	movf	printf@width,w,c
  2983  000262  1037               	iorwf	printf@width+1,w,c
  2984  000264  B4D8               	btfsc	status,2,c
  2985  000266  D01C               	goto	l5182
  2986  000268  D7F5               	goto	l5168
  2987                           
  2988                           ;doprnt.c: 1420: } else
  2989  00026A  D01A               	goto	l5182
  2990  00026C                     l5172:
  2991                           
  2992                           ;doprnt.c: 1422: {
  2993                           ;doprnt.c: 1424: if(width
  2994                           ;doprnt.c: 1428: )
  2995  00026C  5036               	movf	printf@width,w,c
  2996  00026E  1037               	iorwf	printf@width+1,w,c
  2997  000270  B4D8               	btfsc	status,2,c
  2998  000272  D00C               	goto	l5178
  2999  000274                     l5174:
  3000                           
  3001                           ;doprnt.c: 1430: (putch(' ') );
  3002  000274  0E20               	movlw	32
  3003  000276  EC21  F00D         	call	_putch
  3004                           
  3005                           ;doprnt.c: 1431: while(--width);
  3006  00027A  0636               	decf	printf@width,f,c
  3007  00027C  A0D8               	btfss	status,0,c
  3008  00027E  0637               	decf	printf@width+1,f,c
  3009  000280  5036               	movf	printf@width,w,c
  3010  000282  1037               	iorwf	printf@width+1,w,c
  3011  000284  B4D8               	btfsc	status,2,c
  3012  000286  D002               	goto	l5178
  3013  000288  D7F5               	goto	l5174
  3014  00028A  D000               	goto	l5178
  3015  00028C                     l5178:
  3016                           
  3017                           ;doprnt.c: 1438: if(flag & 0x03)
  3018  00028C  C035  F02B         	movff	printf@flag,??_printf
  3019  000290  0E03               	movlw	3
  3020  000292  162B               	andwf	??_printf,f,c
  3021  000294  B4D8               	btfsc	status,2,c
  3022  000296  D004               	goto	l5182
  3023                           
  3024                           ;doprnt.c: 1439: (putch('-') );
  3025  000298  0E2D               	movlw	45
  3026  00029A  EC21  F00D         	call	_putch
  3027  00029E  D000               	goto	l5182
  3028  0002A0                     l5182:
  3029                           
  3030                           ;doprnt.c: 1469: }
  3031                           ;doprnt.c: 1472: prec = c;
  3032  0002A0  C038  F032         	movff	printf@c,printf@prec
  3033                           
  3034                           ;doprnt.c: 1474: while(prec--) {
  3035  0002A4  D053               	goto	l5196
  3036                           
  3037                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3038  0002A6  D045               	goto	l5192
  3039  0002A8                     l5184:
  3040                           
  3041                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3042  0002A8  5032               	movf	printf@prec,w,c
  3043  0002AA  0D02               	mullw	2
  3044  0002AC  0E62               	movlw	low _dpowers
  3045  0002AE  24F3               	addwf	prodl,w,c
  3046  0002B0  6EF6               	movwf	tblptrl,c
  3047  0002B2  0EFF               	movlw	high _dpowers
  3048  0002B4  20F4               	addwfc	prodh,w,c
  3049  0002B6  6EF7               	movwf	tblptrh,c
  3050  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  3051  0002B8                     	endif
  3052  0002B8  0009               	tblrd		*+
  3053  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3054  0002BE  000A               	tblrd		*-
  3055  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3056  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  3057  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3058  0002CC  EC29  F00A         	call	___lwdiv	;wreg free
  3059  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  3060  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  3061  0002D8  0E00               	movlw	0
  3062  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  3063  0002DC  0E0A               	movlw	10
  3064  0002DE  6E1A               	movwf	___lwmod@divisor,c
  3065  0002E0  ECFA  F00A         	call	___lwmod	;wreg free
  3066  0002E4  5018               	movf	?___lwmod,w,c
  3067  0002E6  0F30               	addlw	48
  3068  0002E8  6E38               	movwf	printf@c,c
  3069                           
  3070                           ;doprnt.c: 1491: break;
  3071  0002EA  D02C               	goto	l5194
  3072  0002EC                     l5186:
  3073                           
  3074                           ;doprnt.c: 1499: {
  3075                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3076  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  3077  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3078  0002F4  5032               	movf	printf@prec,w,c
  3079  0002F6  0D02               	mullw	2
  3080  0002F8  0E6C               	movlw	low _hexpowers
  3081  0002FA  24F3               	addwf	prodl,w,c
  3082  0002FC  6EF6               	movwf	tblptrl,c
  3083  0002FE  0EFF               	movlw	high _hexpowers
  3084  000300  20F4               	addwfc	prodh,w,c
  3085  000302  6EF7               	movwf	tblptrh,c
  3086  000304                     	if	0	;There are less than 3 active tblptr bytes
  3087  000304                     	endif
  3088  000304  0009               	tblrd		*+
  3089  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3090  00030A  000A               	tblrd		*-
  3091  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3092  000310  EC29  F00A         	call	___lwdiv	;wreg free
  3093  000314  5011               	movf	?___lwdiv,w,c
  3094  000316  0B0F               	andlw	15
  3095  000318  6E2F               	movwf	printf@idx,c
  3096                           
  3097                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3098  00031A  502F               	movf	printf@idx,w,c
  3099  00031C  0D01               	mullw	1
  3100  00031E  0EE6               	movlw	low STR_6
  3101  000320  24F3               	addwf	prodl,w,c
  3102  000322  6EF6               	movwf	tblptrl,c
  3103  000324  0EFF               	movlw	high STR_6
  3104  000326  20F4               	addwfc	prodh,w,c
  3105  000328  6EF7               	movwf	tblptrh,c
  3106  00032A                     	if	0	;There are less than 3 active tblptr bytes
  3107  00032A                     	endif
  3108  00032A  0008               	tblrd		*
  3109  00032C  CFF5 F038          	movff	tablat,printf@c
  3110                           
  3111                           ;doprnt.c: 1523: }
  3112                           
  3113                           ;doprnt.c: 1508: }
  3114                           ;doprnt.c: 1510: break;
  3115  000330  D009               	goto	l5194
  3116  000332                     l5192:
  3117  000332  5035               	movf	printf@flag,w,c
  3118  000334  0B80               	andlw	128
  3119                           
  3120                           ; Switch size 1, requested type "space"
  3121                           ; Number of cases is 2, Range of values is 0 to 128
  3122                           ; switch strategies available:
  3123                           ; Name         Instructions Cycles
  3124                           ; simple_byte            7     4 (average)
  3125                           ;	Chosen strategy is simple_byte
  3126  000336  0A00               	xorlw	0	; case 0
  3127  000338  B4D8               	btfsc	status,2,c
  3128  00033A  D7B6               	goto	l5184
  3129  00033C  0A80               	xorlw	128	; case 128
  3130  00033E  B4D8               	btfsc	status,2,c
  3131  000340  D7D5               	goto	l5186
  3132  000342  D000               	goto	l5194
  3133  000344                     l5194:
  3134                           
  3135                           ;doprnt.c: 1524: (putch(c) );
  3136  000344  5038               	movf	printf@c,w,c
  3137  000346  EC21  F00D         	call	_putch
  3138  00034A  D000               	goto	l5196
  3139  00034C                     l5196:
  3140  00034C  0632               	decf	printf@prec,f,c
  3141  00034E  2832               	incf	printf@prec,w,c
  3142  000350  B4D8               	btfsc	status,2,c
  3143  000352  D002               	goto	l5198
  3144  000354  D7EE               	goto	l5192
  3145  000356  D000               	goto	l5198
  3146  000358                     l5198:
  3147  000358  C01D  FFF6         	movff	printf@f,tblptrl
  3148  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  3149  000360  4A1D               	infsnz	printf@f,f,c
  3150  000362  2A1E               	incf	printf@f+1,f,c
  3151  000364                     	if	0	;tblptru may be non-zero
  3152  000364                     	endif
  3153  000364                     	if	0	;tblptru may be non-zero
  3154  000364                     	endif
  3155  000364  0008               	tblrd		*
  3156  000366  CFF5 F038          	movff	tablat,printf@c
  3157  00036A  5038               	movf	printf@c,w,c
  3158  00036C  B4D8               	btfsc	status,2,c
  3159  00036E  D002               	goto	l756
  3160  000370  D65A               	goto	l5072
  3161  000372  D000               	goto	l756
  3162  000374                     l756:
  3163  000374  0012               	return		;funcret
  3164  000376                     __end_of_printf:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon2	equ	0xFF1
  3173                           postinc0	equ	0xFEE
  3174                           wreg	equ	0xFE8
  3175                           postdec1	equ	0xFE5
  3176                           fsr1l	equ	0xFE1
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _putch *****************
  3184 ;; Defined at:
  3185 ;;		line 32 in file "utils.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  c               1    wreg     unsigned char 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  c               1   16[COMRAM] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;Total ram usage:        1 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    3
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_printf
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text2
  3214  001A42                     __ptext2:
  3215                           	opt stack 0
  3216  001A42                     _putch:
  3217                           	opt stack 26
  3218                           
  3219                           ;incstack = 0
  3220                           ;putch@c stored from wreg
  3221  001A42  6E11               	movwf	putch@c,c
  3222                           
  3223                           ;utils.c: 34: while (!TRMT);
  3224  001A44  D000               	goto	l622
  3225  001A46                     l622:
  3226  001A46  A2AC               	btfss	4012,1,c	;volatile
  3227  001A48  D7FE               	goto	l622
  3228                           
  3229                           ;utils.c: 35: TXREG = c;
  3230  001A4A  C011  FFAD         	movff	putch@c,4013	;volatile
  3231  001A4E  0012               	return		;funcret
  3232  001A50                     __end_of_putch:
  3233                           	opt stack 0
  3234                           tblptru	equ	0xFF8
  3235                           tblptrh	equ	0xFF7
  3236                           tblptrl	equ	0xFF6
  3237                           tablat	equ	0xFF5
  3238                           prodh	equ	0xFF4
  3239                           prodl	equ	0xFF3
  3240                           intcon2	equ	0xFF1
  3241                           postinc0	equ	0xFEE
  3242                           wreg	equ	0xFE8
  3243                           postdec1	equ	0xFE5
  3244                           fsr1l	equ	0xFE1
  3245                           postinc2	equ	0xFDE
  3246                           postdec2	equ	0xFDD
  3247                           fsr2h	equ	0xFDA
  3248                           fsr2l	equ	0xFD9
  3249                           status	equ	0xFD8
  3250                           
  3251 ;; *************** function _isdigit *****************
  3252 ;; Defined at:
  3253 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  c               1    wreg     unsigned char 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  c               1   18[COMRAM] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;		None               void
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3270 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;Total ram usage:        3 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    3
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_printf
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           	psect	text3
  3282  0018C2                     __ptext3:
  3283                           	opt stack 0
  3284  0018C2                     _isdigit:
  3285                           	opt stack 26
  3286                           
  3287                           ;incstack = 0
  3288                           ;isdigit@c stored from wreg
  3289  0018C2  6E13               	movwf	isdigit@c,c
  3290  0018C4  0E00               	movlw	0
  3291  0018C6  6E12               	movwf	_isdigit$2498,c
  3292  0018C8  0E3A               	movlw	58
  3293  0018CA  6013               	cpfslt	isdigit@c,c
  3294  0018CC  D006               	goto	l4908
  3295  0018CE  0E2F               	movlw	47
  3296  0018D0  6413               	cpfsgt	isdigit@c,c
  3297  0018D2  D003               	goto	l4908
  3298  0018D4  0E01               	movlw	1
  3299  0018D6  6E12               	movwf	_isdigit$2498,c
  3300  0018D8  D000               	goto	l4908
  3301  0018DA                     l4908:
  3302  0018DA  C012  F011         	movff	_isdigit$2498,??_isdigit
  3303  0018DE  3011               	rrcf	??_isdigit,w,c
  3304  0018E0  D000               	goto	l1223
  3305  0018E2                     l1223:
  3306  0018E2  0012               	return		;funcret
  3307  0018E4                     __end_of_isdigit:
  3308                           	opt stack 0
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           prodh	equ	0xFF4
  3314                           prodl	equ	0xFF3
  3315                           intcon2	equ	0xFF1
  3316                           postinc0	equ	0xFEE
  3317                           wreg	equ	0xFE8
  3318                           postdec1	equ	0xFE5
  3319                           fsr1l	equ	0xFE1
  3320                           postinc2	equ	0xFDE
  3321                           postdec2	equ	0xFDD
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function ___lwmod *****************
  3327 ;; Defined at:
  3328 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  dividend        2   23[COMRAM] unsigned int 
  3331 ;;  divisor         2   25[COMRAM] unsigned int 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  counter         1   27[COMRAM] unsigned char 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  2   23[COMRAM] unsigned int 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3343 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;Total ram usage:        5 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    3
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_printf
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text4
  3358  0015F4                     __ptext4:
  3359                           	opt stack 0
  3360  0015F4                     ___lwmod:
  3361                           	opt stack 26
  3362                           
  3363                           ;incstack = 0
  3364  0015F4  501A               	movf	___lwmod@divisor,w,c
  3365  0015F6  101B               	iorwf	___lwmod@divisor+1,w,c
  3366  0015F8  B4D8               	btfsc	status,2,c
  3367  0015FA  D01D               	goto	l1325
  3368  0015FC  0E01               	movlw	1
  3369  0015FE  6E1C               	movwf	___lwmod@counter,c
  3370  001600  D005               	goto	l4940
  3371  001602                     l4938:
  3372  001602  90D8               	bcf	status,0,c
  3373  001604  361A               	rlcf	___lwmod@divisor,f,c
  3374  001606  361B               	rlcf	___lwmod@divisor+1,f,c
  3375  001608  2A1C               	incf	___lwmod@counter,f,c
  3376  00160A  D000               	goto	l4940
  3377  00160C                     l4940:
  3378  00160C  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3379  00160E  D002               	goto	l4942
  3380  001610  D7F8               	goto	l4938
  3381  001612  D000               	goto	l4942
  3382  001614                     l4942:
  3383  001614  501A               	movf	___lwmod@divisor,w,c
  3384  001616  5C18               	subwf	___lwmod@dividend,w,c
  3385  001618  501B               	movf	___lwmod@divisor+1,w,c
  3386  00161A  5819               	subwfb	___lwmod@dividend+1,w,c
  3387  00161C  A0D8               	btfss	status,0,c
  3388  00161E  D005               	goto	l4946
  3389  001620  501A               	movf	___lwmod@divisor,w,c
  3390  001622  5E18               	subwf	___lwmod@dividend,f,c
  3391  001624  501B               	movf	___lwmod@divisor+1,w,c
  3392  001626  5A19               	subwfb	___lwmod@dividend+1,f,c
  3393  001628  D000               	goto	l4946
  3394  00162A                     l4946:
  3395  00162A  90D8               	bcf	status,0,c
  3396  00162C  321B               	rrcf	___lwmod@divisor+1,f,c
  3397  00162E  321A               	rrcf	___lwmod@divisor,f,c
  3398  001630  2E1C               	decfsz	___lwmod@counter,f,c
  3399  001632  D7F0               	goto	l4942
  3400  001634  D000               	goto	l1325
  3401  001636                     l1325:
  3402  001636  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3403  00163A  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3404  00163E  0012               	return		;funcret
  3405  001640                     __end_of___lwmod:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           prodh	equ	0xFF4
  3412                           prodl	equ	0xFF3
  3413                           intcon2	equ	0xFF1
  3414                           postinc0	equ	0xFEE
  3415                           wreg	equ	0xFE8
  3416                           postdec1	equ	0xFE5
  3417                           fsr1l	equ	0xFE1
  3418                           postinc2	equ	0xFDE
  3419                           postdec2	equ	0xFDD
  3420                           fsr2h	equ	0xFDA
  3421                           fsr2l	equ	0xFD9
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function ___lwdiv *****************
  3425 ;; Defined at:
  3426 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  dividend        2   16[COMRAM] unsigned int 
  3429 ;;  divisor         2   18[COMRAM] unsigned int 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  quotient        2   21[COMRAM] unsigned int 
  3432 ;;  counter         1   20[COMRAM] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  2   16[COMRAM] unsigned int 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3442 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;Total ram usage:        7 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    3
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_printf
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text5
  3457  001452                     __ptext5:
  3458                           	opt stack 0
  3459  001452                     ___lwdiv:
  3460                           	opt stack 26
  3461                           
  3462                           ;incstack = 0
  3463  001452  0E00               	movlw	0
  3464  001454  6E17               	movwf	___lwdiv@quotient+1,c
  3465  001456  0E00               	movlw	0
  3466  001458  6E16               	movwf	___lwdiv@quotient,c
  3467  00145A  5013               	movf	___lwdiv@divisor,w,c
  3468  00145C  1014               	iorwf	___lwdiv@divisor+1,w,c
  3469  00145E  B4D8               	btfsc	status,2,c
  3470  001460  D021               	goto	l1315
  3471  001462  0E01               	movlw	1
  3472  001464  6E15               	movwf	___lwdiv@counter,c
  3473  001466  D005               	goto	l4920
  3474  001468                     l4918:
  3475  001468  90D8               	bcf	status,0,c
  3476  00146A  3613               	rlcf	___lwdiv@divisor,f,c
  3477  00146C  3614               	rlcf	___lwdiv@divisor+1,f,c
  3478  00146E  2A15               	incf	___lwdiv@counter,f,c
  3479  001470  D000               	goto	l4920
  3480  001472                     l4920:
  3481  001472  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3482  001474  D002               	goto	l4922
  3483  001476  D7F8               	goto	l4918
  3484  001478  D000               	goto	l4922
  3485  00147A                     l4922:
  3486  00147A  90D8               	bcf	status,0,c
  3487  00147C  3616               	rlcf	___lwdiv@quotient,f,c
  3488  00147E  3617               	rlcf	___lwdiv@quotient+1,f,c
  3489  001480  5013               	movf	___lwdiv@divisor,w,c
  3490  001482  5C11               	subwf	___lwdiv@dividend,w,c
  3491  001484  5014               	movf	___lwdiv@divisor+1,w,c
  3492  001486  5812               	subwfb	___lwdiv@dividend+1,w,c
  3493  001488  A0D8               	btfss	status,0,c
  3494  00148A  D006               	goto	l4930
  3495  00148C  5013               	movf	___lwdiv@divisor,w,c
  3496  00148E  5E11               	subwf	___lwdiv@dividend,f,c
  3497  001490  5014               	movf	___lwdiv@divisor+1,w,c
  3498  001492  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3499  001494  8016               	bsf	___lwdiv@quotient,0,c
  3500  001496  D000               	goto	l4930
  3501  001498                     l4930:
  3502  001498  90D8               	bcf	status,0,c
  3503  00149A  3214               	rrcf	___lwdiv@divisor+1,f,c
  3504  00149C  3213               	rrcf	___lwdiv@divisor,f,c
  3505  00149E  2E15               	decfsz	___lwdiv@counter,f,c
  3506  0014A0  D7EC               	goto	l4922
  3507  0014A2  D000               	goto	l1315
  3508  0014A4                     l1315:
  3509  0014A4  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3510  0014A8  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3511  0014AC  0012               	return		;funcret
  3512  0014AE                     __end_of___lwdiv:
  3513                           	opt stack 0
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           prodh	equ	0xFF4
  3519                           prodl	equ	0xFF3
  3520                           intcon2	equ	0xFF1
  3521                           postinc0	equ	0xFEE
  3522                           wreg	equ	0xFE8
  3523                           postdec1	equ	0xFE5
  3524                           fsr1l	equ	0xFE1
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           fsr2h	equ	0xFDA
  3528                           fsr2l	equ	0xFD9
  3529                           status	equ	0xFD8
  3530                           
  3531 ;; *************** function _fillCircle *****************
  3532 ;; Defined at:
  3533 ;;		line 561 in file "ST7735_TFT.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  x0              2   58[COMRAM] int 
  3536 ;;  y0              2   60[COMRAM] int 
  3537 ;;  r               2   62[COMRAM] int 
  3538 ;;  color           2   64[COMRAM] unsigned int 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;		None               void
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3550 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;Total ram usage:        8 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    8
  3557 ;; This function calls:
  3558 ;;		_drawFastVLine
  3559 ;;		_fillCircleHelper
  3560 ;; This function is called by:
  3561 ;;		_main
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text6
  3566  001502                     __ptext6:
  3567                           	opt stack 0
  3568  001502                     _fillCircle:
  3569                           	opt stack 22
  3570                           
  3571                           ;ST7735_TFT.c: 563: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3572                           
  3573                           ;incstack = 0
  3574  001502  503F               	movf	fillCircle@r,w,c
  3575  001504  0800               	sublw	0
  3576  001506  243D               	addwf	fillCircle@y0,w,c
  3577  001508  6E18               	movwf	drawFastVLine@y,c
  3578  00150A  80D8               	bsf	status,0,c
  3579  00150C  343F               	rlcf	fillCircle@r,w,c
  3580  00150E  6E19               	movwf	drawFastVLine@h,c
  3581  001510  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3582  001514  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3583  001518  503B               	movf	fillCircle@x0,w,c
  3584  00151A  ECCD  F008         	call	_drawFastVLine
  3585                           
  3586                           ;ST7735_TFT.c: 564: fillCircleHelper(x0, y0, r, 3, 0, color);
  3587  00151E  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3588  001522  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3589  001526  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3590  00152A  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3591  00152E  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3592  001532  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3593  001536  0E00               	movlw	0
  3594  001538  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3595  00153A  0E03               	movlw	3
  3596  00153C  6E29               	movwf	fillCircleHelper@cornername,c
  3597  00153E  0E00               	movlw	0
  3598  001540  6E2C               	movwf	fillCircleHelper@delta+1,c
  3599  001542  0E00               	movlw	0
  3600  001544  6E2B               	movwf	fillCircleHelper@delta,c
  3601  001546  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3602  00154A  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3603  00154E  EC9A  F005         	call	_fillCircleHelper	;wreg free
  3604  001552  0012               	return		;funcret
  3605  001554                     __end_of_fillCircle:
  3606                           	opt stack 0
  3607                           tblptru	equ	0xFF8
  3608                           tblptrh	equ	0xFF7
  3609                           tblptrl	equ	0xFF6
  3610                           tablat	equ	0xFF5
  3611                           prodh	equ	0xFF4
  3612                           prodl	equ	0xFF3
  3613                           intcon2	equ	0xFF1
  3614                           postinc0	equ	0xFEE
  3615                           wreg	equ	0xFE8
  3616                           postdec1	equ	0xFE5
  3617                           fsr1l	equ	0xFE1
  3618                           postinc2	equ	0xFDE
  3619                           postdec2	equ	0xFDD
  3620                           fsr2h	equ	0xFDA
  3621                           fsr2l	equ	0xFD9
  3622                           status	equ	0xFD8
  3623                           
  3624 ;; *************** function _fillCircleHelper *****************
  3625 ;; Defined at:
  3626 ;;		line 536 in file "ST7735_TFT.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  x0              2   34[COMRAM] int 
  3629 ;;  y0              2   36[COMRAM] int 
  3630 ;;  r               2   38[COMRAM] int 
  3631 ;;  cornername      2   40[COMRAM] unsigned int 
  3632 ;;  delta           2   42[COMRAM] int 
  3633 ;;  color           2   44[COMRAM] unsigned int 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  y               2   56[COMRAM] int 
  3636 ;;  x               2   54[COMRAM] int 
  3637 ;;  f               2   52[COMRAM] int 
  3638 ;;  ddF_y           2   50[COMRAM] int 
  3639 ;;  ddF_x           2   48[COMRAM] int 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;		None               void
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3649 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;Total ram usage:       24 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    7
  3656 ;; This function calls:
  3657 ;;		_drawFastVLine
  3658 ;; This function is called by:
  3659 ;;		_fillCircle
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           	psect	text7
  3664  000B34                     __ptext7:
  3665                           	opt stack 0
  3666  000B34                     _fillCircleHelper:
  3667                           	opt stack 22
  3668                           
  3669                           ;ST7735_TFT.c: 538: signed int f, ddF_x, ddF_y, x, y;
  3670                           ;ST7735_TFT.c: 539: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3671                           
  3672                           ;incstack = 0
  3673  000B34  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3674  000B38  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3675  000B3C  1E2F               	comf	??_fillCircleHelper,f,c
  3676  000B3E  1E30               	comf	??_fillCircleHelper+1,f,c
  3677  000B40  4A2F               	infsnz	??_fillCircleHelper,f,c
  3678  000B42  2A30               	incf	??_fillCircleHelper+1,f,c
  3679  000B44  0E01               	movlw	1
  3680  000B46  242F               	addwf	??_fillCircleHelper,w,c
  3681  000B48  6E35               	movwf	fillCircleHelper@f,c
  3682  000B4A  0E00               	movlw	0
  3683  000B4C  2030               	addwfc	??_fillCircleHelper+1,w,c
  3684  000B4E  6E36               	movwf	fillCircleHelper@f+1,c
  3685  000B50  0E00               	movlw	0
  3686  000B52  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3687  000B54  0E01               	movlw	1
  3688  000B56  6E31               	movwf	fillCircleHelper@ddF_x,c
  3689  000B58  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3690  000B5C  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3691  000B60  90D8               	bcf	status,0,c
  3692  000B62  362F               	rlcf	??_fillCircleHelper,f,c
  3693  000B64  3630               	rlcf	??_fillCircleHelper+1,f,c
  3694  000B66  1E2F               	comf	??_fillCircleHelper,f,c
  3695  000B68  1E30               	comf	??_fillCircleHelper+1,f,c
  3696  000B6A  4A2F               	infsnz	??_fillCircleHelper,f,c
  3697  000B6C  2A30               	incf	??_fillCircleHelper+1,f,c
  3698  000B6E  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3699  000B72  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3700  000B76  0E00               	movlw	0
  3701  000B78  6E38               	movwf	fillCircleHelper@x+1,c
  3702  000B7A  0E00               	movlw	0
  3703  000B7C  6E37               	movwf	fillCircleHelper@x,c
  3704  000B7E  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3705  000B82  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3706                           
  3707                           ;ST7735_TFT.c: 540: while (x<y) {
  3708  000B86  D067               	goto	l4838
  3709  000B88                     l4818:
  3710                           
  3711                           ;ST7735_TFT.c: 541: if (f >= 0) {
  3712  000B88  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3713  000B8A  D00B               	goto	l533
  3714                           
  3715                           ;ST7735_TFT.c: 542: y--;
  3716  000B8C  0639               	decf	fillCircleHelper@y,f,c
  3717  000B8E  A0D8               	btfss	status,0,c
  3718  000B90  063A               	decf	fillCircleHelper@y+1,f,c
  3719                           
  3720                           ;ST7735_TFT.c: 543: ddF_y += 2;
  3721  000B92  0E02               	movlw	2
  3722  000B94  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3723  000B96  0E00               	movlw	0
  3724  000B98  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3725                           
  3726                           ;ST7735_TFT.c: 544: f += ddF_y;
  3727  000B9A  5033               	movf	fillCircleHelper@ddF_y,w,c
  3728  000B9C  2635               	addwf	fillCircleHelper@f,f,c
  3729  000B9E  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3730  000BA0  2236               	addwfc	fillCircleHelper@f+1,f,c
  3731  000BA2                     l533:
  3732                           
  3733                           ;ST7735_TFT.c: 545: }
  3734                           ;ST7735_TFT.c: 546: x++;
  3735  000BA2  4A37               	infsnz	fillCircleHelper@x,f,c
  3736  000BA4  2A38               	incf	fillCircleHelper@x+1,f,c
  3737                           
  3738                           ;ST7735_TFT.c: 547: ddF_x += 2;
  3739  000BA6  0E02               	movlw	2
  3740  000BA8  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3741  000BAA  0E00               	movlw	0
  3742  000BAC  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3743                           
  3744                           ;ST7735_TFT.c: 548: f += ddF_x;
  3745  000BAE  5031               	movf	fillCircleHelper@ddF_x,w,c
  3746  000BB0  2635               	addwf	fillCircleHelper@f,f,c
  3747  000BB2  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3748  000BB4  2236               	addwfc	fillCircleHelper@f+1,f,c
  3749                           
  3750                           ;ST7735_TFT.c: 550: if (cornername & 0x1) {
  3751  000BB6  A029               	btfss	fillCircleHelper@cornername,0,c
  3752  000BB8  D025               	goto	l4834
  3753                           
  3754                           ;ST7735_TFT.c: 551: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3755  000BBA  5039               	movf	fillCircleHelper@y,w,c
  3756  000BBC  0800               	sublw	0
  3757  000BBE  2425               	addwf	fillCircleHelper@y0,w,c
  3758  000BC0  6E18               	movwf	drawFastVLine@y,c
  3759  000BC2  5039               	movf	fillCircleHelper@y,w,c
  3760  000BC4  2439               	addwf	fillCircleHelper@y,w,c
  3761  000BC6  242B               	addwf	fillCircleHelper@delta,w,c
  3762  000BC8  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3763  000BCA  282F               	incf	??_fillCircleHelper,w,c
  3764  000BCC  6E19               	movwf	drawFastVLine@h,c
  3765  000BCE  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3766  000BD2  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3767  000BD6  5023               	movf	fillCircleHelper@x0,w,c
  3768  000BD8  2437               	addwf	fillCircleHelper@x,w,c
  3769  000BDA  ECCD  F008         	call	_drawFastVLine
  3770                           
  3771                           ;ST7735_TFT.c: 552: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3772  000BDE  5037               	movf	fillCircleHelper@x,w,c
  3773  000BE0  0800               	sublw	0
  3774  000BE2  2425               	addwf	fillCircleHelper@y0,w,c
  3775  000BE4  6E18               	movwf	drawFastVLine@y,c
  3776  000BE6  5037               	movf	fillCircleHelper@x,w,c
  3777  000BE8  2437               	addwf	fillCircleHelper@x,w,c
  3778  000BEA  242B               	addwf	fillCircleHelper@delta,w,c
  3779  000BEC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3780  000BEE  282F               	incf	??_fillCircleHelper,w,c
  3781  000BF0  6E19               	movwf	drawFastVLine@h,c
  3782  000BF2  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3783  000BF6  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3784  000BFA  5023               	movf	fillCircleHelper@x0,w,c
  3785  000BFC  2439               	addwf	fillCircleHelper@y,w,c
  3786  000BFE  ECCD  F008         	call	_drawFastVLine
  3787  000C02  D000               	goto	l4834
  3788  000C04                     l4834:
  3789                           
  3790                           ;ST7735_TFT.c: 553: }
  3791                           ;ST7735_TFT.c: 554: if (cornername & 0x2) {
  3792  000C04  A229               	btfss	fillCircleHelper@cornername,1,c
  3793  000C06  D027               	goto	l4838
  3794                           
  3795                           ;ST7735_TFT.c: 555: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3796  000C08  5039               	movf	fillCircleHelper@y,w,c
  3797  000C0A  0800               	sublw	0
  3798  000C0C  2425               	addwf	fillCircleHelper@y0,w,c
  3799  000C0E  6E18               	movwf	drawFastVLine@y,c
  3800  000C10  5039               	movf	fillCircleHelper@y,w,c
  3801  000C12  2439               	addwf	fillCircleHelper@y,w,c
  3802  000C14  242B               	addwf	fillCircleHelper@delta,w,c
  3803  000C16  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3804  000C18  282F               	incf	??_fillCircleHelper,w,c
  3805  000C1A  6E19               	movwf	drawFastVLine@h,c
  3806  000C1C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3807  000C20  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3808  000C24  5037               	movf	fillCircleHelper@x,w,c
  3809  000C26  0800               	sublw	0
  3810  000C28  2423               	addwf	fillCircleHelper@x0,w,c
  3811  000C2A  ECCD  F008         	call	_drawFastVLine
  3812                           
  3813                           ;ST7735_TFT.c: 556: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3814  000C2E  5037               	movf	fillCircleHelper@x,w,c
  3815  000C30  0800               	sublw	0
  3816  000C32  2425               	addwf	fillCircleHelper@y0,w,c
  3817  000C34  6E18               	movwf	drawFastVLine@y,c
  3818  000C36  5037               	movf	fillCircleHelper@x,w,c
  3819  000C38  2437               	addwf	fillCircleHelper@x,w,c
  3820  000C3A  242B               	addwf	fillCircleHelper@delta,w,c
  3821  000C3C  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3822  000C3E  282F               	incf	??_fillCircleHelper,w,c
  3823  000C40  6E19               	movwf	drawFastVLine@h,c
  3824  000C42  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3825  000C46  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3826  000C4A  5039               	movf	fillCircleHelper@y,w,c
  3827  000C4C  0800               	sublw	0
  3828  000C4E  2423               	addwf	fillCircleHelper@x0,w,c
  3829  000C50  ECCD  F008         	call	_drawFastVLine
  3830  000C54  D000               	goto	l4838
  3831  000C56                     l4838:
  3832  000C56  5039               	movf	fillCircleHelper@y,w,c
  3833  000C58  5C37               	subwf	fillCircleHelper@x,w,c
  3834  000C5A  5038               	movf	fillCircleHelper@x+1,w,c
  3835  000C5C  0A80               	xorlw	128
  3836  000C5E  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3837  000C60  503A               	movf	fillCircleHelper@y+1,w,c
  3838  000C62  0A80               	xorlw	128
  3839  000C64  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3840  000C66  A0D8               	btfss	status,0,c
  3841  000C68  D78F               	goto	l4818
  3842  000C6A  0012               	return		;funcret
  3843  000C6C                     __end_of_fillCircleHelper:
  3844                           	opt stack 0
  3845                           tblptru	equ	0xFF8
  3846                           tblptrh	equ	0xFF7
  3847                           tblptrl	equ	0xFF6
  3848                           tablat	equ	0xFF5
  3849                           prodh	equ	0xFF4
  3850                           prodl	equ	0xFF3
  3851                           intcon2	equ	0xFF1
  3852                           postinc0	equ	0xFEE
  3853                           wreg	equ	0xFE8
  3854                           postdec1	equ	0xFE5
  3855                           fsr1l	equ	0xFE1
  3856                           postinc2	equ	0xFDE
  3857                           postdec2	equ	0xFDD
  3858                           fsr2h	equ	0xFDA
  3859                           fsr2l	equ	0xFD9
  3860                           status	equ	0xFD8
  3861                           
  3862 ;; *************** function _drawCircle *****************
  3863 ;; Defined at:
  3864 ;;		line 475 in file "ST7735_TFT.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;  x0              2   27[COMRAM] int 
  3867 ;;  y0              2   29[COMRAM] int 
  3868 ;;  r               2   31[COMRAM] int 
  3869 ;;  color           2   33[COMRAM] unsigned int 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  y               2   45[COMRAM] int 
  3872 ;;  x               2   43[COMRAM] int 
  3873 ;;  f               2   41[COMRAM] int 
  3874 ;;  ddF_y           2   39[COMRAM] int 
  3875 ;;  ddF_x           2   37[COMRAM] int 
  3876 ;; Return value:  Size  Location     Type
  3877 ;;		None               void
  3878 ;; Registers used:
  3879 ;;		wreg, status,2, status,0, cstack
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3885 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;Total ram usage:       20 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    7
  3892 ;; This function calls:
  3893 ;;		_drawPixel
  3894 ;; This function is called by:
  3895 ;;		_main
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text8
  3900  0006C2                     __ptext8:
  3901                           	opt stack 0
  3902  0006C2                     _drawCircle:
  3903                           	opt stack 23
  3904                           
  3905                           ;ST7735_TFT.c: 477: signed int f, ddF_x, ddF_y, x, y;
  3906                           ;ST7735_TFT.c: 478: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3907                           
  3908                           ;incstack = 0
  3909  0006C2  C020  F024         	movff	drawCircle@r,??_drawCircle
  3910  0006C6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3911  0006CA  1E24               	comf	??_drawCircle,f,c
  3912  0006CC  1E25               	comf	??_drawCircle+1,f,c
  3913  0006CE  4A24               	infsnz	??_drawCircle,f,c
  3914  0006D0  2A25               	incf	??_drawCircle+1,f,c
  3915  0006D2  0E01               	movlw	1
  3916  0006D4  2424               	addwf	??_drawCircle,w,c
  3917  0006D6  6E2A               	movwf	drawCircle@f,c
  3918  0006D8  0E00               	movlw	0
  3919  0006DA  2025               	addwfc	??_drawCircle+1,w,c
  3920  0006DC  6E2B               	movwf	drawCircle@f+1,c
  3921  0006DE  0E00               	movlw	0
  3922  0006E0  6E27               	movwf	drawCircle@ddF_x+1,c
  3923  0006E2  0E01               	movlw	1
  3924  0006E4  6E26               	movwf	drawCircle@ddF_x,c
  3925  0006E6  C020  F024         	movff	drawCircle@r,??_drawCircle
  3926  0006EA  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3927  0006EE  90D8               	bcf	status,0,c
  3928  0006F0  3624               	rlcf	??_drawCircle,f,c
  3929  0006F2  3625               	rlcf	??_drawCircle+1,f,c
  3930  0006F4  1E24               	comf	??_drawCircle,f,c
  3931  0006F6  1E25               	comf	??_drawCircle+1,f,c
  3932  0006F8  4A24               	infsnz	??_drawCircle,f,c
  3933  0006FA  2A25               	incf	??_drawCircle+1,f,c
  3934  0006FC  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3935  000700  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3936  000704  0E00               	movlw	0
  3937  000706  6E2D               	movwf	drawCircle@x+1,c
  3938  000708  0E00               	movlw	0
  3939  00070A  6E2C               	movwf	drawCircle@x,c
  3940  00070C  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3941  000710  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3942                           
  3943                           ;ST7735_TFT.c: 479: drawPixel(x0 , y0 + r, color);
  3944  000714  501E               	movf	drawCircle@y0,w,c
  3945  000716  2420               	addwf	drawCircle@r,w,c
  3946  000718  6E18               	movwf	drawPixel@y,c
  3947  00071A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3948  00071E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3949  000722  501C               	movf	drawCircle@x0,w,c
  3950  000724  EC20  F00C         	call	_drawPixel
  3951                           
  3952                           ;ST7735_TFT.c: 480: drawPixel(x0 , y0 - r, color);
  3953  000728  5020               	movf	drawCircle@r,w,c
  3954  00072A  0800               	sublw	0
  3955  00072C  241E               	addwf	drawCircle@y0,w,c
  3956  00072E  6E18               	movwf	drawPixel@y,c
  3957  000730  C022  F019         	movff	drawCircle@color,drawPixel@color
  3958  000734  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3959  000738  501C               	movf	drawCircle@x0,w,c
  3960  00073A  EC20  F00C         	call	_drawPixel
  3961                           
  3962                           ;ST7735_TFT.c: 481: drawPixel(x0+r, y0 , color);
  3963  00073E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3964  000742  C022  F019         	movff	drawCircle@color,drawPixel@color
  3965  000746  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3966  00074A  501C               	movf	drawCircle@x0,w,c
  3967  00074C  2420               	addwf	drawCircle@r,w,c
  3968  00074E  EC20  F00C         	call	_drawPixel
  3969                           
  3970                           ;ST7735_TFT.c: 482: drawPixel(x0-r, y0 , color);
  3971  000752  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3972  000756  C022  F019         	movff	drawCircle@color,drawPixel@color
  3973  00075A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3974  00075E  5020               	movf	drawCircle@r,w,c
  3975  000760  0800               	sublw	0
  3976  000762  241C               	addwf	drawCircle@x0,w,c
  3977  000764  EC20  F00C         	call	_drawPixel
  3978                           
  3979                           ;ST7735_TFT.c: 483: while (x < y) {
  3980  000768  D078               	goto	l5248
  3981  00076A                     l5220:
  3982                           
  3983                           ;ST7735_TFT.c: 484: if (f >= 0) {
  3984  00076A  BE2B               	btfsc	drawCircle@f+1,7,c
  3985  00076C  D00B               	goto	l515
  3986                           
  3987                           ;ST7735_TFT.c: 485: y--;
  3988  00076E  062E               	decf	drawCircle@y,f,c
  3989  000770  A0D8               	btfss	status,0,c
  3990  000772  062F               	decf	drawCircle@y+1,f,c
  3991                           
  3992                           ;ST7735_TFT.c: 486: ddF_y += 2;
  3993  000774  0E02               	movlw	2
  3994  000776  2628               	addwf	drawCircle@ddF_y,f,c
  3995  000778  0E00               	movlw	0
  3996  00077A  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3997                           
  3998                           ;ST7735_TFT.c: 487: f += ddF_y;
  3999  00077C  5028               	movf	drawCircle@ddF_y,w,c
  4000  00077E  262A               	addwf	drawCircle@f,f,c
  4001  000780  5029               	movf	drawCircle@ddF_y+1,w,c
  4002  000782  222B               	addwfc	drawCircle@f+1,f,c
  4003  000784                     l515:
  4004                           
  4005                           ;ST7735_TFT.c: 488: }
  4006                           ;ST7735_TFT.c: 489: x++;
  4007  000784  4A2C               	infsnz	drawCircle@x,f,c
  4008  000786  2A2D               	incf	drawCircle@x+1,f,c
  4009                           
  4010                           ;ST7735_TFT.c: 490: ddF_x += 2;
  4011  000788  0E02               	movlw	2
  4012  00078A  2626               	addwf	drawCircle@ddF_x,f,c
  4013  00078C  0E00               	movlw	0
  4014  00078E  2227               	addwfc	drawCircle@ddF_x+1,f,c
  4015                           
  4016                           ;ST7735_TFT.c: 491: f += ddF_x;
  4017  000790  5026               	movf	drawCircle@ddF_x,w,c
  4018  000792  262A               	addwf	drawCircle@f,f,c
  4019  000794  5027               	movf	drawCircle@ddF_x+1,w,c
  4020  000796  222B               	addwfc	drawCircle@f+1,f,c
  4021                           
  4022                           ;ST7735_TFT.c: 492: drawPixel(x0 + x, y0 + y, color);
  4023  000798  501E               	movf	drawCircle@y0,w,c
  4024  00079A  242E               	addwf	drawCircle@y,w,c
  4025  00079C  6E18               	movwf	drawPixel@y,c
  4026  00079E  C022  F019         	movff	drawCircle@color,drawPixel@color
  4027  0007A2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4028  0007A6  501C               	movf	drawCircle@x0,w,c
  4029  0007A8  242C               	addwf	drawCircle@x,w,c
  4030  0007AA  EC20  F00C         	call	_drawPixel
  4031                           
  4032                           ;ST7735_TFT.c: 493: drawPixel(x0 - x, y0 + y, color);
  4033  0007AE  501E               	movf	drawCircle@y0,w,c
  4034  0007B0  242E               	addwf	drawCircle@y,w,c
  4035  0007B2  6E18               	movwf	drawPixel@y,c
  4036  0007B4  C022  F019         	movff	drawCircle@color,drawPixel@color
  4037  0007B8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4038  0007BC  502C               	movf	drawCircle@x,w,c
  4039  0007BE  0800               	sublw	0
  4040  0007C0  241C               	addwf	drawCircle@x0,w,c
  4041  0007C2  EC20  F00C         	call	_drawPixel
  4042                           
  4043                           ;ST7735_TFT.c: 494: drawPixel(x0 + x, y0 - y, color);
  4044  0007C6  502E               	movf	drawCircle@y,w,c
  4045  0007C8  0800               	sublw	0
  4046  0007CA  241E               	addwf	drawCircle@y0,w,c
  4047  0007CC  6E18               	movwf	drawPixel@y,c
  4048  0007CE  C022  F019         	movff	drawCircle@color,drawPixel@color
  4049  0007D2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4050  0007D6  501C               	movf	drawCircle@x0,w,c
  4051  0007D8  242C               	addwf	drawCircle@x,w,c
  4052  0007DA  EC20  F00C         	call	_drawPixel
  4053                           
  4054                           ;ST7735_TFT.c: 495: drawPixel(x0 - x, y0 - y, color);
  4055  0007DE  502E               	movf	drawCircle@y,w,c
  4056  0007E0  0800               	sublw	0
  4057  0007E2  241E               	addwf	drawCircle@y0,w,c
  4058  0007E4  6E18               	movwf	drawPixel@y,c
  4059  0007E6  C022  F019         	movff	drawCircle@color,drawPixel@color
  4060  0007EA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4061  0007EE  502C               	movf	drawCircle@x,w,c
  4062  0007F0  0800               	sublw	0
  4063  0007F2  241C               	addwf	drawCircle@x0,w,c
  4064  0007F4  EC20  F00C         	call	_drawPixel
  4065                           
  4066                           ;ST7735_TFT.c: 496: drawPixel(x0 + y, y0 + x, color);
  4067  0007F8  501E               	movf	drawCircle@y0,w,c
  4068  0007FA  242C               	addwf	drawCircle@x,w,c
  4069  0007FC  6E18               	movwf	drawPixel@y,c
  4070  0007FE  C022  F019         	movff	drawCircle@color,drawPixel@color
  4071  000802  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4072  000806  501C               	movf	drawCircle@x0,w,c
  4073  000808  242E               	addwf	drawCircle@y,w,c
  4074  00080A  EC20  F00C         	call	_drawPixel
  4075                           
  4076                           ;ST7735_TFT.c: 497: drawPixel(x0 - y, y0 + x, color);
  4077  00080E  501E               	movf	drawCircle@y0,w,c
  4078  000810  242C               	addwf	drawCircle@x,w,c
  4079  000812  6E18               	movwf	drawPixel@y,c
  4080  000814  C022  F019         	movff	drawCircle@color,drawPixel@color
  4081  000818  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4082  00081C  502E               	movf	drawCircle@y,w,c
  4083  00081E  0800               	sublw	0
  4084  000820  241C               	addwf	drawCircle@x0,w,c
  4085  000822  EC20  F00C         	call	_drawPixel
  4086                           
  4087                           ;ST7735_TFT.c: 498: drawPixel(x0 + y, y0 - x, color);
  4088  000826  502C               	movf	drawCircle@x,w,c
  4089  000828  0800               	sublw	0
  4090  00082A  241E               	addwf	drawCircle@y0,w,c
  4091  00082C  6E18               	movwf	drawPixel@y,c
  4092  00082E  C022  F019         	movff	drawCircle@color,drawPixel@color
  4093  000832  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4094  000836  501C               	movf	drawCircle@x0,w,c
  4095  000838  242E               	addwf	drawCircle@y,w,c
  4096  00083A  EC20  F00C         	call	_drawPixel
  4097                           
  4098                           ;ST7735_TFT.c: 499: drawPixel(x0 - y, y0 - x, color);
  4099  00083E  502C               	movf	drawCircle@x,w,c
  4100  000840  0800               	sublw	0
  4101  000842  241E               	addwf	drawCircle@y0,w,c
  4102  000844  6E18               	movwf	drawPixel@y,c
  4103  000846  C022  F019         	movff	drawCircle@color,drawPixel@color
  4104  00084A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4105  00084E  502E               	movf	drawCircle@y,w,c
  4106  000850  0800               	sublw	0
  4107  000852  241C               	addwf	drawCircle@x0,w,c
  4108  000854  EC20  F00C         	call	_drawPixel
  4109  000858  D000               	goto	l5248
  4110  00085A                     l5248:
  4111  00085A  502E               	movf	drawCircle@y,w,c
  4112  00085C  5C2C               	subwf	drawCircle@x,w,c
  4113  00085E  502D               	movf	drawCircle@x+1,w,c
  4114  000860  0A80               	xorlw	128
  4115  000862  6E24               	movwf	??_drawCircle& (0+255),c
  4116  000864  502F               	movf	drawCircle@y+1,w,c
  4117  000866  0A80               	xorlw	128
  4118  000868  5824               	subwfb	??_drawCircle& (0+255),w,c
  4119  00086A  A0D8               	btfss	status,0,c
  4120  00086C  D77E               	goto	l5220
  4121  00086E  0012               	return		;funcret
  4122  000870                     __end_of_drawCircle:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon2	equ	0xFF1
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           postdec1	equ	0xFE5
  4134                           fsr1l	equ	0xFE1
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           fsr2h	equ	0xFDA
  4138                           fsr2l	equ	0xFD9
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function ___awdiv *****************
  4142 ;; Defined at:
  4143 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  dividend        2   16[COMRAM] int 
  4146 ;;  divisor         2   18[COMRAM] int 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  quotient        2   22[COMRAM] int 
  4149 ;;  sign            1   21[COMRAM] unsigned char 
  4150 ;;  counter         1   20[COMRAM] unsigned char 
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  2   16[COMRAM] int 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4160 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;Total ram usage:        8 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    3
  4167 ;; This function calls:
  4168 ;;		Nothing
  4169 ;; This function is called by:
  4170 ;;		_main
  4171 ;;		_dec_2_bcd
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text9
  4176  001104                     __ptext9:
  4177                           	opt stack 0
  4178  001104                     ___awdiv:
  4179                           	opt stack 27
  4180                           
  4181                           ;incstack = 0
  4182  001104  0E00               	movlw	0
  4183  001106  6E16               	movwf	___awdiv@sign,c
  4184  001108  AE14               	btfss	___awdiv@divisor+1,7,c
  4185  00110A  D007               	goto	l5286
  4186  00110C  6C13               	negf	___awdiv@divisor,c
  4187  00110E  1E14               	comf	___awdiv@divisor+1,f,c
  4188  001110  B0D8               	btfsc	status,0,c
  4189  001112  2A14               	incf	___awdiv@divisor+1,f,c
  4190  001114  0E01               	movlw	1
  4191  001116  6E16               	movwf	___awdiv@sign,c
  4192  001118  D000               	goto	l5286
  4193  00111A                     l5286:
  4194  00111A  AE12               	btfss	___awdiv@dividend+1,7,c
  4195  00111C  D007               	goto	l5292
  4196  00111E  6C11               	negf	___awdiv@dividend,c
  4197  001120  1E12               	comf	___awdiv@dividend+1,f,c
  4198  001122  B0D8               	btfsc	status,0,c
  4199  001124  2A12               	incf	___awdiv@dividend+1,f,c
  4200  001126  0E01               	movlw	1
  4201  001128  1A16               	xorwf	___awdiv@sign,f,c
  4202  00112A  D000               	goto	l5292
  4203  00112C                     l5292:
  4204  00112C  0E00               	movlw	0
  4205  00112E  6E18               	movwf	___awdiv@quotient+1,c
  4206  001130  0E00               	movlw	0
  4207  001132  6E17               	movwf	___awdiv@quotient,c
  4208  001134  5013               	movf	___awdiv@divisor,w,c
  4209  001136  1014               	iorwf	___awdiv@divisor+1,w,c
  4210  001138  B4D8               	btfsc	status,2,c
  4211  00113A  D021               	goto	l5314
  4212  00113C  0E01               	movlw	1
  4213  00113E  6E15               	movwf	___awdiv@counter,c
  4214  001140  D005               	goto	l5300
  4215  001142                     l5298:
  4216  001142  90D8               	bcf	status,0,c
  4217  001144  3613               	rlcf	___awdiv@divisor,f,c
  4218  001146  3614               	rlcf	___awdiv@divisor+1,f,c
  4219  001148  2A15               	incf	___awdiv@counter,f,c
  4220  00114A  D000               	goto	l5300
  4221  00114C                     l5300:
  4222  00114C  BE14               	btfsc	___awdiv@divisor+1,7,c
  4223  00114E  D002               	goto	l5302
  4224  001150  D7F8               	goto	l5298
  4225  001152  D000               	goto	l5302
  4226  001154                     l5302:
  4227  001154  90D8               	bcf	status,0,c
  4228  001156  3617               	rlcf	___awdiv@quotient,f,c
  4229  001158  3618               	rlcf	___awdiv@quotient+1,f,c
  4230  00115A  5013               	movf	___awdiv@divisor,w,c
  4231  00115C  5C11               	subwf	___awdiv@dividend,w,c
  4232  00115E  5014               	movf	___awdiv@divisor+1,w,c
  4233  001160  5812               	subwfb	___awdiv@dividend+1,w,c
  4234  001162  A0D8               	btfss	status,0,c
  4235  001164  D006               	goto	l5310
  4236  001166  5013               	movf	___awdiv@divisor,w,c
  4237  001168  5E11               	subwf	___awdiv@dividend,f,c
  4238  00116A  5014               	movf	___awdiv@divisor+1,w,c
  4239  00116C  5A12               	subwfb	___awdiv@dividend+1,f,c
  4240  00116E  8017               	bsf	___awdiv@quotient,0,c
  4241  001170  D000               	goto	l5310
  4242  001172                     l5310:
  4243  001172  90D8               	bcf	status,0,c
  4244  001174  3214               	rrcf	___awdiv@divisor+1,f,c
  4245  001176  3213               	rrcf	___awdiv@divisor,f,c
  4246  001178  2E15               	decfsz	___awdiv@counter,f,c
  4247  00117A  D7EC               	goto	l5302
  4248  00117C  D000               	goto	l5314
  4249  00117E                     l5314:
  4250  00117E  5016               	movf	___awdiv@sign,w,c
  4251  001180  B4D8               	btfsc	status,2,c
  4252  001182  D005               	goto	l5318
  4253  001184  6C17               	negf	___awdiv@quotient,c
  4254  001186  1E18               	comf	___awdiv@quotient+1,f,c
  4255  001188  B0D8               	btfsc	status,0,c
  4256  00118A  2A18               	incf	___awdiv@quotient+1,f,c
  4257  00118C  D000               	goto	l5318
  4258  00118E                     l5318:
  4259  00118E  C017  F011         	movff	___awdiv@quotient,?___awdiv
  4260  001192  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  4261  001196  D000               	goto	l985
  4262  001198                     l985:
  4263  001198  0012               	return		;funcret
  4264  00119A                     __end_of___awdiv:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon2	equ	0xFF1
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           postdec1	equ	0xFE5
  4276                           fsr1l	equ	0xFE1
  4277                           postinc2	equ	0xFDE
  4278                           postdec2	equ	0xFDD
  4279                           fsr2h	equ	0xFDA
  4280                           fsr2l	equ	0xFD9
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _Wait_One_Sec *****************
  4284 ;; Defined at:
  4285 ;;		line 38 in file "utils.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;		None               void
  4292 ;; Registers used:
  4293 ;;		wreg, status,2, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;Total ram usage:        0 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    4
  4306 ;; This function calls:
  4307 ;;		_Wait_Half_Second
  4308 ;; This function is called by:
  4309 ;;		_main
  4310 ;;		_Do_Beep
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text10
  4315  001A68                     __ptext10:
  4316                           	opt stack 0
  4317  001A68                     _Wait_One_Sec:
  4318                           	opt stack 26
  4319                           
  4320                           ;utils.c: 40: Wait_Half_Second();
  4321                           
  4322                           ;incstack = 0
  4323  001A68  EC9F  F00C         	call	_Wait_Half_Second	;wreg free
  4324                           
  4325                           ;utils.c: 41: Wait_Half_Second();
  4326  001A6C  EC9F  F00C         	call	_Wait_Half_Second	;wreg free
  4327  001A70  0012               	return		;funcret
  4328  001A72                     __end_of_Wait_One_Sec:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon2	equ	0xFF1
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           postdec1	equ	0xFE5
  4340                           fsr1l	equ	0xFE1
  4341                           postinc2	equ	0xFDE
  4342                           postdec2	equ	0xFDD
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _Wait_Half_Second *****************
  4348 ;; Defined at:
  4349 ;;		line 96 in file "utils.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;		None               void
  4356 ;; Registers used:
  4357 ;;		wreg, status,2
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;Total ram usage:        0 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    3
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_Wait_One_Sec
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text11
  4378  00193E                     __ptext11:
  4379                           	opt stack 0
  4380  00193E                     _Wait_Half_Second:
  4381                           	opt stack 26
  4382                           
  4383                           ;utils.c: 98: T0CON = 0x03;
  4384                           
  4385                           ;incstack = 0
  4386  00193E  0E03               	movlw	3
  4387  001940  6ED5               	movwf	4053,c	;volatile
  4388                           
  4389                           ;utils.c: 99: TMR0L = 0xDB;
  4390  001942  0EDB               	movlw	219
  4391  001944  6ED6               	movwf	4054,c	;volatile
  4392                           
  4393                           ;utils.c: 100: TMR0H = 0x0B;
  4394  001946  0E0B               	movlw	11
  4395  001948  6ED7               	movwf	4055,c	;volatile
  4396                           
  4397                           ;utils.c: 101: INTCONbits.TMR0IF = 0;
  4398  00194A  94F2               	bcf	intcon,2,c	;volatile
  4399                           
  4400                           ;utils.c: 102: T0CONbits.TMR0ON = 1;
  4401  00194C  8ED5               	bsf	4053,7,c	;volatile
  4402                           
  4403                           ;utils.c: 103: while (INTCONbits.TMR0IF == 0);
  4404  00194E  D000               	goto	l655
  4405  001950                     l655:
  4406  001950  A4F2               	btfss	intcon,2,c	;volatile
  4407  001952  D7FE               	goto	l655
  4408                           
  4409                           ;utils.c: 104: T0CONbits.TMR0ON = 0;
  4410  001954  9ED5               	bcf	4053,7,c	;volatile
  4411  001956  0012               	return		;funcret
  4412  001958                     __end_of_Wait_Half_Second:
  4413                           	opt stack 0
  4414                           tblptru	equ	0xFF8
  4415                           tblptrh	equ	0xFF7
  4416                           tblptrl	equ	0xFF6
  4417                           tablat	equ	0xFF5
  4418                           prodh	equ	0xFF4
  4419                           prodl	equ	0xFF3
  4420                           intcon	equ	0xFF2
  4421                           intcon2	equ	0xFF1
  4422                           postinc0	equ	0xFEE
  4423                           wreg	equ	0xFE8
  4424                           postdec1	equ	0xFE5
  4425                           fsr1l	equ	0xFE1
  4426                           postinc2	equ	0xFDE
  4427                           postdec2	equ	0xFDD
  4428                           fsr2h	equ	0xFDA
  4429                           fsr2l	equ	0xFD9
  4430                           status	equ	0xFD8
  4431                           
  4432 ;; *************** function _Initialize_LCD_Screen *****************
  4433 ;; Defined at:
  4434 ;;		line 22 in file "Main_Screen.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;		None               void
  4441 ;; Registers used:
  4442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;Total ram usage:        0 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:   10
  4455 ;; This function calls:
  4456 ;;		_LCD_Reset
  4457 ;;		_TFT_GreenTab_Initialize
  4458 ;;		_drawtext
  4459 ;;		_fillScreen
  4460 ;;		_strcpy
  4461 ;; This function is called by:
  4462 ;;		_main
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text12
  4467  001054                     __ptext12:
  4468                           	opt stack 0
  4469  001054                     _Initialize_LCD_Screen:
  4470                           	opt stack 20
  4471                           
  4472                           ;Main_Screen.c: 24: LCD_Reset();
  4473                           
  4474                           ;incstack = 0
  4475  001054  ECE4  F00C         	call	_LCD_Reset	;wreg free
  4476                           
  4477                           ;Main_Screen.c: 25: TFT_GreenTab_Initialize();
  4478  001058  EC38  F00C         	call	_TFT_GreenTab_Initialize	;wreg free
  4479                           
  4480                           ;Main_Screen.c: 26: fillScreen(0x0000);
  4481  00105C  0E00               	movlw	0
  4482  00105E  6E25               	movwf	fillScreen@color+1,c
  4483  001060  0E00               	movlw	0
  4484  001062  6E24               	movwf	fillScreen@color,c
  4485  001064  EC91  F00C         	call	_fillScreen	;wreg free
  4486                           
  4487                           ;Main_Screen.c: 29: txt = buffer;
  4488  001068  0EC9               	movlw	low _buffer
  4489  00106A  6E4F               	movwf	_txt,c
  4490  00106C  0E00               	movlw	high _buffer
  4491  00106E  6E50               	movwf	_txt+1,c
  4492                           
  4493                           ;Main_Screen.c: 31: strcpy(txt, "LAB 11 ");
  4494  001070  C04F  F011         	movff	_txt,strcpy@to
  4495  001074  C050  F012         	movff	_txt+1,strcpy@to+1
  4496  001078  0EF7               	movlw	low STR_5
  4497  00107A  6E13               	movwf	strcpy@from,c
  4498  00107C  0EFF               	movlw	high STR_5
  4499  00107E  6E14               	movwf	strcpy@from+1,c
  4500  001080  EC07  F00C         	call	_strcpy	;wreg free
  4501                           
  4502                           ;Main_Screen.c: 32: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  4503  001084  0E02               	movlw	2
  4504  001086  6E39               	movwf	drawtext@y,c
  4505  001088  C04F  F03A         	movff	_txt,drawtext@_text
  4506  00108C  C050  F03B         	movff	_txt+1,drawtext@_text+1
  4507  001090  0EFF               	movlw	255
  4508  001092  6E3D               	movwf	drawtext@color+1,c
  4509  001094  683C               	setf	drawtext@color,c
  4510  001096  0E00               	movlw	0
  4511  001098  6E3F               	movwf	drawtext@bg+1,c
  4512  00109A  0E00               	movlw	0
  4513  00109C  6E3E               	movwf	drawtext@bg,c
  4514  00109E  0E01               	movlw	1
  4515  0010A0  6E40               	movwf	drawtext@size,c
  4516  0010A2  0E32               	movlw	50
  4517  0010A4  ECBE  F006         	call	_drawtext
  4518                           
  4519                           ;Main_Screen.c: 34: if (1 == 0)
  4520  0010A8  D005               	goto	l5062
  4521                           
  4522                           ;Main_Screen.c: 35: {
  4523                           ;Main_Screen.c: 36: Timing_Txt[0] = 'S';
  4524  0010AA  0E53               	movlw	83
  4525  0010AC  0100               	movlb	0	; () banked
  4526  0010AE  6FBF               	movwf	_Timing_Txt& (0+255),b
  4527                           
  4528                           ;Main_Screen.c: 37: Timing_Txt[1] = 'P';
  4529  0010B0  0E50               	movlw	80
  4530  0010B2  D004               	goto	L2
  4531  0010B4                     l5062:
  4532                           
  4533                           ;Main_Screen.c: 39: else
  4534                           ;Main_Screen.c: 40: {
  4535                           ;Main_Screen.c: 41: Timing_Txt[0] = 'F';
  4536  0010B4  0E46               	movlw	70
  4537  0010B6  0100               	movlb	0	; () banked
  4538  0010B8  6FBF               	movwf	_Timing_Txt& (0+255),b
  4539                           
  4540                           ;Main_Screen.c: 42: Timing_Txt[1] = 'A';
  4541  0010BA  0E41               	movlw	65
  4542  0010BC                     L2:
  4543  0010BC  0100               	movlb	0	; () banked
  4544  0010BE  6FC0               	movwf	(_Timing_Txt+1)& (0+255),b
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;Main_Screen.c: 43: }
  4548                           ;Main_Screen.c: 44: Timing_Txt[2] = 24/10 + '0';
  4549  0010C0  0E32               	movlw	50
  4550  0010C2  0100               	movlb	0	; () banked
  4551  0010C4  6FC1               	movwf	(_Timing_Txt+2)& (0+255),b
  4552                           
  4553                           ;Main_Screen.c: 45: Timing_Txt[3] = 24%10 + '0';
  4554  0010C6  0E34               	movlw	52
  4555  0010C8  0100               	movlb	0	; () banked
  4556  0010CA  6FC2               	movwf	(_Timing_Txt+3)& (0+255),b
  4557                           
  4558                           ;Main_Screen.c: 46: Timing_Txt[5] = 3%10 + '0';
  4559  0010CC  0E33               	movlw	51
  4560  0010CE  0100               	movlb	0	; () banked
  4561  0010D0  6FC4               	movwf	(_Timing_Txt+5)& (0+255),b
  4562                           
  4563                           ;Main_Screen.c: 47: Timing_Txt[7] = 13/10 + '0';
  4564  0010D2  0E31               	movlw	49
  4565  0010D4  0100               	movlb	0	; () banked
  4566  0010D6  6FC6               	movwf	(_Timing_Txt+7)& (0+255),b
  4567                           
  4568                           ;Main_Screen.c: 48: Timing_Txt[8] = 13%10 + '0';
  4569  0010D8  0E33               	movlw	51
  4570  0010DA  0100               	movlb	0	; () banked
  4571  0010DC  6FC7               	movwf	(_Timing_Txt+8)& (0+255),b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;Main_Screen.c: 49: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  4575  0010DE  0E96               	movlw	150
  4576  0010E0  6E39               	movwf	drawtext@y,c
  4577  0010E2  0EBF               	movlw	low _Timing_Txt
  4578  0010E4  6E3A               	movwf	drawtext@_text,c
  4579  0010E6  0E00               	movlw	high _Timing_Txt
  4580  0010E8  6E3B               	movwf	drawtext@_text+1,c
  4581  0010EA  0EFF               	movlw	255
  4582  0010EC  6E3D               	movwf	drawtext@color+1,c
  4583  0010EE  683C               	setf	drawtext@color,c
  4584  0010F0  0E00               	movlw	0
  4585  0010F2  6E3F               	movwf	drawtext@bg+1,c
  4586  0010F4  0E00               	movlw	0
  4587  0010F6  6E3E               	movwf	drawtext@bg,c
  4588  0010F8  0E01               	movlw	1
  4589  0010FA  6E40               	movwf	drawtext@size,c
  4590  0010FC  0E01               	movlw	1
  4591  0010FE  ECBE  F006         	call	_drawtext
  4592  001102  0012               	return		;funcret
  4593  001104                     __end_of_Initialize_LCD_Screen:
  4594                           	opt stack 0
  4595                           tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           intcon2	equ	0xFF1
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           postdec1	equ	0xFE5
  4606                           fsr1l	equ	0xFE1
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _strcpy *****************
  4614 ;; Defined at:
  4615 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  to              2   16[COMRAM] PTR unsigned char 
  4618 ;;		 -> NULL(0), buffer(31), 
  4619 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4620 ;;		 -> STR_5(8), 
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4623 ;;		 -> NULL(0), buffer(31), 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  2   16[COMRAM] PTR unsigned char 
  4626 ;; Registers used:
  4627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;Total ram usage:        6 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    3
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_Initialize_LCD_Screen
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text13
  4648  00180E                     __ptext13:
  4649                           	opt stack 0
  4650  00180E                     _strcpy:
  4651                           	opt stack 26
  4652                           
  4653                           ;incstack = 0
  4654  00180E  C011  F015         	movff	strcpy@to,strcpy@cp
  4655  001812  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4656  001816  D005               	goto	l4806
  4657  001818                     l4804:
  4658  001818  4A15               	infsnz	strcpy@cp,f,c
  4659  00181A  2A16               	incf	strcpy@cp+1,f,c
  4660  00181C  4A13               	infsnz	strcpy@from,f,c
  4661  00181E  2A14               	incf	strcpy@from+1,f,c
  4662  001820  D000               	goto	l4806
  4663  001822                     l4806:
  4664  001822  C013  FFF6         	movff	strcpy@from,tblptrl
  4665  001826  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4666  00182A                     	if	0	;tblptru may be non-zero
  4667  00182A                     	endif
  4668  00182A                     	if	0	;tblptru may be non-zero
  4669  00182A                     	endif
  4670  00182A  C015  FFD9         	movff	strcpy@cp,fsr2l
  4671  00182E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4672  001832  0008               	tblrd		*
  4673  001834  CFF5 FFDF          	movff	tablat,indf2
  4674  001838  50DF               	movf	indf2,w,c
  4675  00183A  A4D8               	btfss	status,2,c
  4676  00183C  D7ED               	goto	l4804
  4677                           
  4678                           ;	Return value of _strcpy is never used
  4679  00183E  0012               	return		;funcret
  4680  001840                     __end_of_strcpy:
  4681                           	opt stack 0
  4682                           tblptru	equ	0xFF8
  4683                           tblptrh	equ	0xFF7
  4684                           tblptrl	equ	0xFF6
  4685                           tablat	equ	0xFF5
  4686                           prodh	equ	0xFF4
  4687                           prodl	equ	0xFF3
  4688                           intcon	equ	0xFF2
  4689                           intcon2	equ	0xFF1
  4690                           postinc0	equ	0xFEE
  4691                           wreg	equ	0xFE8
  4692                           postdec1	equ	0xFE5
  4693                           fsr1l	equ	0xFE1
  4694                           indf2	equ	0xFDF
  4695                           postinc2	equ	0xFDE
  4696                           postdec2	equ	0xFDD
  4697                           fsr2h	equ	0xFDA
  4698                           fsr2l	equ	0xFD9
  4699                           status	equ	0xFD8
  4700                           
  4701 ;; *************** function _fillScreen *****************
  4702 ;; Defined at:
  4703 ;;		line 566 in file "ST7735_TFT.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  color           2   35[COMRAM] unsigned int 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;		None
  4708 ;; Return value:  Size  Location     Type
  4709 ;;		None               void
  4710 ;; Registers used:
  4711 ;;		wreg, status,2, status,0, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4717 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;Total ram usage:        2 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    7
  4724 ;; This function calls:
  4725 ;;		_fillRectangle
  4726 ;; This function is called by:
  4727 ;;		_Initialize_LCD_Screen
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text14
  4732  001922                     __ptext14:
  4733                           	opt stack 0
  4734  001922                     _fillScreen:
  4735                           	opt stack 22
  4736                           
  4737                           ;ST7735_TFT.c: 568: fillRectangle(0, 0, 128, 160, color);
  4738                           
  4739                           ;incstack = 0
  4740  001922  0E00               	movlw	0
  4741  001924  6E18               	movwf	fillRectangle@y,c
  4742  001926  0E80               	movlw	128
  4743  001928  6E19               	movwf	fillRectangle@w,c
  4744  00192A  0EA0               	movlw	160
  4745  00192C  6E1A               	movwf	fillRectangle@h,c
  4746  00192E  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4747  001932  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4748  001936  0E00               	movlw	0
  4749  001938  ECBC  F007         	call	_fillRectangle
  4750  00193C  0012               	return		;funcret
  4751  00193E                     __end_of_fillScreen:
  4752                           	opt stack 0
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           prodh	equ	0xFF4
  4758                           prodl	equ	0xFF3
  4759                           intcon	equ	0xFF2
  4760                           intcon2	equ	0xFF1
  4761                           postinc0	equ	0xFEE
  4762                           wreg	equ	0xFE8
  4763                           postdec1	equ	0xFE5
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function _fillRectangle *****************
  4773 ;; Defined at:
  4774 ;;		line 450 in file "ST7735_TFT.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  x               1    wreg     unsigned char 
  4777 ;;  y               1   23[COMRAM] unsigned char 
  4778 ;;  w               1   24[COMRAM] unsigned char 
  4779 ;;  h               1   25[COMRAM] unsigned char 
  4780 ;;  color           2   26[COMRAM] unsigned int 
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;  x               1   34[COMRAM] unsigned char 
  4783 ;;  lo              1   33[COMRAM] unsigned char 
  4784 ;;  hi              1   32[COMRAM] unsigned char 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;		None               void
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4794 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;Total ram usage:       12 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    6
  4801 ;; This function calls:
  4802 ;;		_setAddrWindow
  4803 ;;		_spiwrite
  4804 ;; This function is called by:
  4805 ;;		_fillScreen
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text15
  4810  000F78                     __ptext15:
  4811                           	opt stack 0
  4812  000F78                     _fillRectangle:
  4813                           	opt stack 22
  4814                           
  4815                           ;incstack = 0
  4816                           ;fillRectangle@x stored from wreg
  4817  000F78  6E23               	movwf	fillRectangle@x,c
  4818                           
  4819                           ;ST7735_TFT.c: 452: unsigned char hi, lo;
  4820                           ;ST7735_TFT.c: 453: if((x >= 128) || (y >= 160))
  4821  000F7A  0E80               	movlw	128
  4822  000F7C  6023               	cpfslt	fillRectangle@x,c
  4823  000F7E  D069               	goto	l504
  4824  000F80  0E9F               	movlw	159
  4825  000F82  6418               	cpfsgt	fillRectangle@y,c
  4826  000F84  D001               	goto	l4650
  4827                           
  4828                           ;ST7735_TFT.c: 454: return;
  4829  000F86  D065               	goto	l504
  4830  000F88                     l4650:
  4831                           
  4832                           ;ST7735_TFT.c: 455: if((x + w - 1) >= 128)
  4833  000F88  0EFF               	movlw	255
  4834  000F8A  6E1D               	movwf	??_fillRectangle& (0+255),c
  4835  000F8C  0EFF               	movlw	255
  4836  000F8E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4837  000F90  5019               	movf	fillRectangle@w,w,c
  4838  000F92  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4839  000F96  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4840  000F98  261F               	addwf	??_fillRectangle+2,f,c
  4841  000F9A  0E00               	movlw	0
  4842  000F9C  2220               	addwfc	??_fillRectangle+3,f,c
  4843  000F9E  501D               	movf	??_fillRectangle,w,c
  4844  000FA0  261F               	addwf	??_fillRectangle+2,f,c
  4845  000FA2  501E               	movf	??_fillRectangle+1,w,c
  4846  000FA4  2220               	addwfc	??_fillRectangle+3,f,c
  4847  000FA6  BE20               	btfsc	??_fillRectangle+3,7,c
  4848  000FA8  D00A               	goto	l505
  4849  000FAA  5020               	movf	??_fillRectangle+3,w,c
  4850  000FAC  E104               	bnz	u3160
  4851  000FAE  0E80               	movlw	128
  4852  000FB0  5C1F               	subwf	??_fillRectangle+2,w,c
  4853  000FB2  A0D8               	btfss	status,0,c
  4854  000FB4  D004               	goto	l505
  4855  000FB6                     u3160:
  4856                           
  4857                           ;ST7735_TFT.c: 456: w = 128 - x;
  4858  000FB6  5023               	movf	fillRectangle@x,w,c
  4859  000FB8  0800               	sublw	0
  4860  000FBA  0F80               	addlw	128
  4861  000FBC  6E19               	movwf	fillRectangle@w,c
  4862  000FBE                     l505:
  4863                           
  4864                           ;ST7735_TFT.c: 457: if((y + h - 1) >= 160)
  4865  000FBE  0EFF               	movlw	255
  4866  000FC0  6E1D               	movwf	??_fillRectangle& (0+255),c
  4867  000FC2  0EFF               	movlw	255
  4868  000FC4  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4869  000FC6  501A               	movf	fillRectangle@h,w,c
  4870  000FC8  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4871  000FCC  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4872  000FCE  261F               	addwf	??_fillRectangle+2,f,c
  4873  000FD0  0E00               	movlw	0
  4874  000FD2  2220               	addwfc	??_fillRectangle+3,f,c
  4875  000FD4  501D               	movf	??_fillRectangle,w,c
  4876  000FD6  261F               	addwf	??_fillRectangle+2,f,c
  4877  000FD8  501E               	movf	??_fillRectangle+1,w,c
  4878  000FDA  2220               	addwfc	??_fillRectangle+3,f,c
  4879  000FDC  BE20               	btfsc	??_fillRectangle+3,7,c
  4880  000FDE  D00B               	goto	l4656
  4881  000FE0  5020               	movf	??_fillRectangle+3,w,c
  4882  000FE2  E104               	bnz	u3170
  4883  000FE4  0EA0               	movlw	160
  4884  000FE6  5C1F               	subwf	??_fillRectangle+2,w,c
  4885  000FE8  A0D8               	btfss	status,0,c
  4886  000FEA  D005               	goto	l4656
  4887  000FEC                     u3170:
  4888                           
  4889                           ;ST7735_TFT.c: 458: h = 160 - y;
  4890  000FEC  5018               	movf	fillRectangle@y,w,c
  4891  000FEE  0800               	sublw	0
  4892  000FF0  0FA0               	addlw	160
  4893  000FF2  6E1A               	movwf	fillRectangle@h,c
  4894  000FF4  D000               	goto	l4656
  4895  000FF6                     l4656:
  4896                           
  4897                           ;ST7735_TFT.c: 459: setAddrWindow(x, y, x+w-1, y+h-1);
  4898  000FF6  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4899  000FFA  5023               	movf	fillRectangle@x,w,c
  4900  000FFC  2419               	addwf	fillRectangle@w,w,c
  4901  000FFE  6E1D               	movwf	??_fillRectangle& (0+255),c
  4902  001000  041D               	decf	??_fillRectangle,w,c
  4903  001002  6E15               	movwf	setAddrWindow@x1,c
  4904  001004  5018               	movf	fillRectangle@y,w,c
  4905  001006  241A               	addwf	fillRectangle@h,w,c
  4906  001008  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4907  00100A  041E               	decf	??_fillRectangle+1,w,c
  4908  00100C  6E16               	movwf	setAddrWindow@y1,c
  4909  00100E  5023               	movf	fillRectangle@x,w,c
  4910  001010  ECD3  F00A         	call	_setAddrWindow
  4911                           
  4912                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  4913  001014  501C               	movf	fillRectangle@color+1,w,c
  4914  001016  6E21               	movwf	fillRectangle@hi,c
  4915  001018  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4916                           
  4917                           ;ST7735_TFT.c: 461: PORTCbits.RC2 = 1;
  4918  00101C  8482               	bsf	3970,2,c	;volatile
  4919                           
  4920                           ;ST7735_TFT.c: 462: PORTCbits.RC4 = 0;
  4921  00101E  9882               	bcf	3970,4,c	;volatile
  4922                           
  4923                           ;ST7735_TFT.c: 464: for(y=h; y>0; y--) {
  4924  001020  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4925  001024                     l4668:
  4926  001024  5018               	movf	fillRectangle@y,w,c
  4927  001026  B4D8               	btfsc	status,2,c
  4928  001028  D013               	goto	l508
  4929  00102A  D001               	goto	l507
  4930  00102C  D011               	goto	l508
  4931  00102E                     l507:
  4932                           
  4933                           ;ST7735_TFT.c: 465: for(x = w; x > 0; x--) {
  4934  00102E  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4935  001032                     l4672:
  4936  001032  5023               	movf	fillRectangle@x,w,c
  4937  001034  B4D8               	btfsc	status,2,c
  4938  001036  D00A               	goto	l4682
  4939  001038  D001               	goto	l4676
  4940  00103A  D008               	goto	l4682
  4941  00103C                     l4676:
  4942                           
  4943                           ;ST7735_TFT.c: 466: spiwrite(hi);
  4944  00103C  5021               	movf	fillRectangle@hi,w,c
  4945  00103E  ECD0  F00C         	call	_spiwrite
  4946                           
  4947                           ;ST7735_TFT.c: 467: spiwrite(lo);
  4948  001042  5022               	movf	fillRectangle@lo,w,c
  4949  001044  ECD0  F00C         	call	_spiwrite
  4950  001048  0623               	decf	fillRectangle@x,f,c
  4951  00104A  D7F3               	goto	l4672
  4952  00104C                     l4682:
  4953  00104C  0618               	decf	fillRectangle@y,f,c
  4954  00104E  D7EA               	goto	l4668
  4955  001050                     l508:
  4956                           
  4957                           ;ST7735_TFT.c: 468: }
  4958                           ;ST7735_TFT.c: 469: }
  4959                           ;ST7735_TFT.c: 470: PORTCbits.RC4 = 1;
  4960  001050  8882               	bsf	3970,4,c	;volatile
  4961  001052                     l504:
  4962  001052  0012               	return		;funcret
  4963  001054                     __end_of_fillRectangle:
  4964                           	opt stack 0
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           prodh	equ	0xFF4
  4970                           prodl	equ	0xFF3
  4971                           intcon	equ	0xFF2
  4972                           intcon2	equ	0xFF1
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           postdec1	equ	0xFE5
  4976                           fsr1l	equ	0xFE1
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           fsr2h	equ	0xFDA
  4981                           fsr2l	equ	0xFD9
  4982                           status	equ	0xFD8
  4983                           
  4984 ;; *************** function _drawtext *****************
  4985 ;; Defined at:
  4986 ;;		line 421 in file "ST7735_TFT.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;  x               1    wreg     unsigned char 
  4989 ;;  y               1   56[COMRAM] unsigned char 
  4990 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4991 ;;		 -> NULL(0), Timing_Txt(10), buffer(31), txt1(84), 
  4992 ;;  color           2   59[COMRAM] unsigned int 
  4993 ;;  bg              2   61[COMRAM] unsigned int 
  4994 ;;  size            1   63[COMRAM] unsigned char 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  x               1    0[BANK0 ] unsigned char 
  4997 ;;  i               2    3[BANK0 ] unsigned int 
  4998 ;;  textsize        2    1[BANK0 ] unsigned int 
  4999 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5000 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5001 ;; Return value:  Size  Location     Type
  5002 ;;		None               void
  5003 ;; Registers used:
  5004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5010 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;Total ram usage:       17 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    9
  5017 ;; This function calls:
  5018 ;;		_drawChar
  5019 ;;		_strlen
  5020 ;; This function is called by:
  5021 ;;		_main
  5022 ;;		_Initialize_LCD_Screen
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           	psect	text16
  5027  000D7C                     __ptext16:
  5028                           	opt stack 0
  5029  000D7C                     _drawtext:
  5030                           	opt stack 21
  5031                           
  5032                           ;incstack = 0
  5033                           ;drawtext@x stored from wreg
  5034  000D7C  0100               	movlb	0	; () banked
  5035  000D7E  6FE8               	movwf	drawtext@x& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;ST7735_TFT.c: 423: unsigned char cursor_x, cursor_y;
  5039                           ;ST7735_TFT.c: 424: unsigned int textsize, i;
  5040                           ;ST7735_TFT.c: 425: cursor_x = x, cursor_y = y;
  5041  000D80  C0E8  F0EE         	movff	drawtext@x,drawtext@cursor_x
  5042                           
  5043                           ; BSR set to: 0
  5044  000D84  C039  F0ED         	movff	drawtext@y,drawtext@cursor_y
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;ST7735_TFT.c: 426: textsize = strlen(_text);
  5048  000D88  C03A  F011         	movff	drawtext@_text,strlen@s
  5049  000D8C  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5050  000D90  EC8E  F00B         	call	_strlen	;wreg free
  5051  000D94  C011  F0E9         	movff	?_strlen,drawtext@textsize
  5052  000D98  C012  F0EA         	movff	?_strlen+1,drawtext@textsize+1
  5053                           
  5054                           ;ST7735_TFT.c: 427: for(i = 0; i < textsize; i++){
  5055  000D9C  0E00               	movlw	0
  5056  000D9E  0100               	movlb	0	; () banked
  5057  000DA0  6FEC               	movwf	(drawtext@i+1)& (0+255),b
  5058  000DA2  0E00               	movlw	0
  5059  000DA4  6FEB               	movwf	drawtext@i& (0+255),b
  5060  000DA6  D064               	goto	l4776
  5061  000DA8                     l4750:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;ST7735_TFT.c: 428: if(wrap && ((cursor_x + size * 5) > 128)){
  5065  000DA8  506C               	movf	_wrap,w,c
  5066  000DAA  B4D8               	btfsc	status,2,c
  5067  000DAC  D034               	goto	l4766
  5068                           
  5069                           ; BSR set to: 0
  5070  000DAE  5040               	movf	drawtext@size,w,c
  5071  000DB0  0D05               	mullw	5
  5072  000DB2  0100               	movlb	0	; () banked
  5073  000DB4  51EE               	movf	drawtext@cursor_x& (0+255),w,b
  5074  000DB6  6E41               	movwf	??_drawtext& (0+255),c
  5075  000DB8  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5076  000DBA  50F3               	movf	prodl,w,c
  5077  000DBC  2641               	addwf	??_drawtext,f,c
  5078  000DBE  50F4               	movf	prodh,w,c
  5079  000DC0  2242               	addwfc	??_drawtext+1,f,c
  5080  000DC2  BE42               	btfsc	??_drawtext+1,7,c
  5081  000DC4  D028               	goto	l4766
  5082  000DC6  5042               	movf	??_drawtext+1,w,c
  5083  000DC8  E104               	bnz	u3270
  5084  000DCA  0E81               	movlw	129
  5085  000DCC  5C41               	subwf	??_drawtext,w,c
  5086  000DCE  A0D8               	btfss	status,0,c
  5087  000DD0  D022               	goto	l4766
  5088  000DD2                     u3270:
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;ST7735_TFT.c: 429: cursor_x = 0;
  5092  000DD2  0E00               	movlw	0
  5093  000DD4  0100               	movlb	0	; () banked
  5094  000DD6  6FEE               	movwf	drawtext@cursor_x& (0+255),b
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;ST7735_TFT.c: 430: cursor_y = cursor_y + size * 7 + 3 ;
  5098  000DD8  5040               	movf	drawtext@size,w,c
  5099  000DDA  0D07               	mullw	7
  5100  000DDC  50F3               	movf	prodl,w,c
  5101  000DDE  0100               	movlb	0	; () banked
  5102  000DE0  25ED               	addwf	drawtext@cursor_y& (0+255),w,b
  5103  000DE2  0F03               	addlw	3
  5104  000DE4  0100               	movlb	0	; () banked
  5105  000DE6  6FED               	movwf	drawtext@cursor_y& (0+255),b
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;ST7735_TFT.c: 431: if(cursor_y > 160) cursor_y = 160;
  5109  000DE8  0EA0               	movlw	160
  5110  000DEA  0100               	movlb	0	; () banked
  5111  000DEC  65ED               	cpfsgt	drawtext@cursor_y& (0+255),b
  5112  000DEE  D004               	goto	l4762
  5113                           
  5114                           ; BSR set to: 0
  5115  000DF0  0EA0               	movlw	160
  5116  000DF2  0100               	movlb	0	; () banked
  5117  000DF4  6FED               	movwf	drawtext@cursor_y& (0+255),b
  5118  000DF6  D000               	goto	l4762
  5119  000DF8                     l4762:
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;ST7735_TFT.c: 432: if(_text[i] == 0x20) goto _skip; }
  5123  000DF8  0100               	movlb	0	; () banked
  5124  000DFA  51EB               	movf	drawtext@i& (0+255),w,b
  5125  000DFC  243A               	addwf	drawtext@_text,w,c
  5126  000DFE  6ED9               	movwf	fsr2l,c
  5127  000E00  0100               	movlb	0	; () banked
  5128  000E02  51EC               	movf	(drawtext@i+1)& (0+255),w,b
  5129  000E04  203B               	addwfc	drawtext@_text+1,w,c
  5130  000E06  6EDA               	movwf	fsr2h,c
  5131  000E08  0E20               	movlw	32
  5132  000E0A  18DE               	xorwf	postinc2,w,c
  5133  000E0C  B4D8               	btfsc	status,2,c
  5134  000E0E  D02C               	goto	l4774
  5135  000E10  D002               	goto	l4766
  5136                           
  5137                           ; BSR set to: 0
  5138  000E12  D02A               	goto	l4774
  5139                           
  5140                           ; BSR set to: 0
  5141  000E14  D000               	goto	l4766
  5142  000E16                     l4766:
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;ST7735_TFT.c: 433: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5146  000E16  C0ED  F02E         	movff	drawtext@cursor_y,drawChar@y
  5147  000E1A  0100               	movlb	0	; () banked
  5148  000E1C  51EB               	movf	drawtext@i& (0+255),w,b
  5149  000E1E  243A               	addwf	drawtext@_text,w,c
  5150  000E20  6ED9               	movwf	fsr2l,c
  5151  000E22  0100               	movlb	0	; () banked
  5152  000E24  51EC               	movf	(drawtext@i+1)& (0+255),w,b
  5153  000E26  203B               	addwfc	drawtext@_text+1,w,c
  5154  000E28  6EDA               	movwf	fsr2h,c
  5155  000E2A  50DF               	movf	indf2,w,c
  5156  000E2C  6E2F               	movwf	drawChar@c,c
  5157  000E2E  C03C  F030         	movff	drawtext@color,drawChar@color
  5158  000E32  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5159  000E36  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5160  000E3A  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5161  000E3E  C040  F034         	movff	drawtext@size,drawChar@size
  5162  000E42  0100               	movlb	0	; () banked
  5163  000E44  51EE               	movf	drawtext@cursor_x& (0+255),w,b
  5164  000E46  ECEF  F004         	call	_drawChar
  5165                           
  5166                           ;ST7735_TFT.c: 434: cursor_x = cursor_x + size * 6;
  5167  000E4A  5040               	movf	drawtext@size,w,c
  5168  000E4C  0D06               	mullw	6
  5169  000E4E  50F3               	movf	prodl,w,c
  5170  000E50  0100               	movlb	0	; () banked
  5171  000E52  25EE               	addwf	drawtext@cursor_x& (0+255),w,b
  5172  000E54  0100               	movlb	0	; () banked
  5173  000E56  6FEE               	movwf	drawtext@cursor_x& (0+255),b
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;ST7735_TFT.c: 435: if(cursor_x > 128) cursor_x = 128;
  5177  000E58  0E80               	movlw	128
  5178  000E5A  0100               	movlb	0	; () banked
  5179  000E5C  65EE               	cpfsgt	drawtext@cursor_x& (0+255),b
  5180  000E5E  D004               	goto	l4774
  5181                           
  5182                           ; BSR set to: 0
  5183  000E60  0E80               	movlw	128
  5184  000E62  0100               	movlb	0	; () banked
  5185  000E64  6FEE               	movwf	drawtext@cursor_x& (0+255),b
  5186                           
  5187                           ; BSR set to: 0
  5188  000E66  D000               	goto	l4774
  5189  000E68                     l4774:
  5190                           
  5191                           ; BSR set to: 0
  5192  000E68  0100               	movlb	0	; () banked
  5193  000E6A  4BEB               	infsnz	drawtext@i& (0+255),f,b
  5194  000E6C  2BEC               	incf	(drawtext@i+1)& (0+255),f,b
  5195  000E6E  D000               	goto	l4776
  5196  000E70                     l4776:
  5197                           
  5198                           ; BSR set to: 0
  5199  000E70  0100               	movlb	0	; () banked
  5200  000E72  51E9               	movf	drawtext@textsize& (0+255),w,b
  5201  000E74  0100               	movlb	0	; () banked
  5202  000E76  5DEB               	subwf	drawtext@i& (0+255),w,b
  5203  000E78  0100               	movlb	0	; () banked
  5204  000E7A  51EA               	movf	(drawtext@textsize+1)& (0+255),w,b
  5205  000E7C  0100               	movlb	0	; () banked
  5206  000E7E  59EC               	subwfb	(drawtext@i+1)& (0+255),w,b
  5207  000E80  A0D8               	btfss	status,0,c
  5208  000E82  D792               	goto	l4750
  5209                           
  5210                           ; BSR set to: 0
  5211                           
  5212                           ; BSR set to: 0
  5213  000E84  0012               	return		;funcret
  5214  000E86                     __end_of_drawtext:
  5215                           	opt stack 0
  5216                           tblptru	equ	0xFF8
  5217                           tblptrh	equ	0xFF7
  5218                           tblptrl	equ	0xFF6
  5219                           tablat	equ	0xFF5
  5220                           prodh	equ	0xFF4
  5221                           prodl	equ	0xFF3
  5222                           intcon	equ	0xFF2
  5223                           intcon2	equ	0xFF1
  5224                           postinc0	equ	0xFEE
  5225                           wreg	equ	0xFE8
  5226                           postdec1	equ	0xFE5
  5227                           fsr1l	equ	0xFE1
  5228                           indf2	equ	0xFDF
  5229                           postinc2	equ	0xFDE
  5230                           postdec2	equ	0xFDD
  5231                           fsr2h	equ	0xFDA
  5232                           fsr2l	equ	0xFD9
  5233                           status	equ	0xFD8
  5234                           
  5235 ;; *************** function _strlen *****************
  5236 ;; Defined at:
  5237 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5240 ;;		 -> NULL(0), Timing_Txt(10), buffer(31), txt1(84), 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5243 ;;		 -> NULL(0), Timing_Txt(10), buffer(31), txt1(84), 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  2   16[COMRAM] unsigned int 
  5246 ;; Registers used:
  5247 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5253 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;Total ram usage:        6 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    3
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		_drawtext
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text17
  5268  00171C                     __ptext17:
  5269                           	opt stack 0
  5270  00171C                     _strlen:
  5271                           	opt stack 26
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;incstack = 0
  5275  00171C  C011  F015         	movff	strlen@s,strlen@cp
  5276  001720  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5277  001724  D003               	goto	l4640
  5278  001726                     l4638:
  5279  001726  4A15               	infsnz	strlen@cp,f,c
  5280  001728  2A16               	incf	strlen@cp+1,f,c
  5281  00172A  D000               	goto	l4640
  5282  00172C                     l4640:
  5283  00172C  C015  FFD9         	movff	strlen@cp,fsr2l
  5284  001730  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5285  001734  50DF               	movf	indf2,w,c
  5286  001736  A4D8               	btfss	status,2,c
  5287  001738  D7F6               	goto	l4638
  5288  00173A  C011  F013         	movff	strlen@s,??_strlen
  5289  00173E  C012  F014         	movff	strlen@s+1,??_strlen+1
  5290  001742  1E13               	comf	??_strlen,f,c
  5291  001744  1E14               	comf	??_strlen+1,f,c
  5292  001746  4A13               	infsnz	??_strlen,f,c
  5293  001748  2A14               	incf	??_strlen+1,f,c
  5294  00174A  5015               	movf	strlen@cp,w,c
  5295  00174C  2413               	addwf	??_strlen,w,c
  5296  00174E  6E11               	movwf	?_strlen,c
  5297  001750  5016               	movf	strlen@cp+1,w,c
  5298  001752  2014               	addwfc	??_strlen+1,w,c
  5299  001754  6E12               	movwf	?_strlen+1,c
  5300  001756  D000               	goto	l1354
  5301  001758                     l1354:
  5302  001758  0012               	return		;funcret
  5303  00175A                     __end_of_strlen:
  5304                           	opt stack 0
  5305                           tblptru	equ	0xFF8
  5306                           tblptrh	equ	0xFF7
  5307                           tblptrl	equ	0xFF6
  5308                           tablat	equ	0xFF5
  5309                           prodh	equ	0xFF4
  5310                           prodl	equ	0xFF3
  5311                           intcon	equ	0xFF2
  5312                           intcon2	equ	0xFF1
  5313                           postinc0	equ	0xFEE
  5314                           wreg	equ	0xFE8
  5315                           postdec1	equ	0xFE5
  5316                           fsr1l	equ	0xFE1
  5317                           indf2	equ	0xFDF
  5318                           postinc2	equ	0xFDE
  5319                           postdec2	equ	0xFDD
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function _drawChar *****************
  5325 ;; Defined at:
  5326 ;;		line 394 in file "ST7735_TFT.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  x               1    wreg     unsigned char 
  5329 ;;  y               1   45[COMRAM] unsigned char 
  5330 ;;  c               1   46[COMRAM] unsigned char 
  5331 ;;  color           2   47[COMRAM] unsigned int 
  5332 ;;  bg              2   49[COMRAM] unsigned int 
  5333 ;;  size            1   51[COMRAM] unsigned char 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  x               1   53[COMRAM] unsigned char 
  5336 ;;  line            1   52[COMRAM] unsigned char 
  5337 ;;  i               1   55[COMRAM] unsigned char 
  5338 ;;  j               1   54[COMRAM] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;		None               void
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5348 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5351 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;Total ram usage:       11 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    8
  5355 ;; This function calls:
  5356 ;;		___wmul
  5357 ;;		_drawPixel
  5358 ;;		_fillRect
  5359 ;; This function is called by:
  5360 ;;		_drawtext
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text18
  5365  0009DE                     __ptext18:
  5366                           	opt stack 0
  5367  0009DE                     _drawChar:
  5368                           	opt stack 21
  5369                           
  5370                           ;incstack = 0
  5371                           ;drawChar@x stored from wreg
  5372  0009DE  6E36               	movwf	drawChar@x,c
  5373                           
  5374                           ;ST7735_TFT.c: 396: char i, j;
  5375                           ;ST7735_TFT.c: 397: if((x >= 128) || (y >= 160))
  5376  0009E0  0E80               	movlw	128
  5377  0009E2  6036               	cpfslt	drawChar@x,c
  5378  0009E4  D0A6               	goto	l467
  5379  0009E6  0E9F               	movlw	159
  5380  0009E8  642E               	cpfsgt	drawChar@y,c
  5381  0009EA  D001               	goto	l4586
  5382                           
  5383                           ;ST7735_TFT.c: 398: return;
  5384  0009EC  D0A2               	goto	l467
  5385  0009EE                     l4586:
  5386                           
  5387                           ;ST7735_TFT.c: 399: if(size < 1) size = 1;
  5388  0009EE  5034               	movf	drawChar@size,w,c
  5389  0009F0  A4D8               	btfss	status,2,c
  5390  0009F2  D003               	goto	l4590
  5391  0009F4  0E01               	movlw	1
  5392  0009F6  6E34               	movwf	drawChar@size,c
  5393  0009F8  D000               	goto	l4590
  5394  0009FA                     l4590:
  5395                           
  5396                           ;ST7735_TFT.c: 400: if((c < ' ') || (c > '~'))
  5397  0009FA  0E1F               	movlw	31
  5398  0009FC  642F               	cpfsgt	drawChar@c,c
  5399  0009FE  D004               	goto	l4594
  5400  000A00  0E7E               	movlw	126
  5401  000A02  642F               	cpfsgt	drawChar@c,c
  5402  000A04  D003               	goto	l469
  5403  000A06  D000               	goto	l4594
  5404  000A08                     l4594:
  5405                           
  5406                           ;ST7735_TFT.c: 401: c = '?';
  5407  000A08  0E3F               	movlw	63
  5408  000A0A  6E2F               	movwf	drawChar@c,c
  5409  000A0C                     l469:
  5410                           
  5411                           ;ST7735_TFT.c: 402: for(i=0; i<5; i++ ) {
  5412  000A0C  0E00               	movlw	0
  5413  000A0E  6E38               	movwf	drawChar@i,c
  5414  000A10                     l4596:
  5415  000A10  0E04               	movlw	4
  5416  000A12  6438               	cpfsgt	drawChar@i,c
  5417  000A14  D001               	goto	l4600
  5418  000A16  D08D               	goto	l467
  5419  000A18                     l4600:
  5420                           
  5421                           ;ST7735_TFT.c: 403: unsigned char line;
  5422                           ;ST7735_TFT.c: 404: if(c < 'S')
  5423  000A18  0E53               	movlw	83
  5424  000A1A  602F               	cpfslt	drawChar@c,c
  5425  000A1C  D015               	goto	l4604
  5426                           
  5427                           ;ST7735_TFT.c: 405: line = font[(c - 32)*5 + i];
  5428  000A1E  0EE0               	movlw	224
  5429  000A20  242F               	addwf	drawChar@c,w,c
  5430  000A22  6E11               	movwf	___wmul@multiplier,c
  5431  000A24  6A12               	clrf	___wmul@multiplier+1,c
  5432  000A26  0EFF               	movlw	255
  5433  000A28  2212               	addwfc	___wmul@multiplier+1,f,c
  5434  000A2A  0E00               	movlw	0
  5435  000A2C  6E14               	movwf	___wmul@multiplicand+1,c
  5436  000A2E  0E05               	movlw	5
  5437  000A30  6E13               	movwf	___wmul@multiplicand,c
  5438  000A32  EC4D  F00C         	call	___wmul	;wreg free
  5439  000A36  5038               	movf	drawChar@i,w,c
  5440  000A38  2611               	addwf	?___wmul,f,c
  5441  000A3A  0E00               	movlw	0
  5442  000A3C  2212               	addwfc	?___wmul+1,f,c
  5443  000A3E  0E87               	movlw	low _font
  5444  000A40  2411               	addwf	?___wmul,w,c
  5445  000A42  6EF6               	movwf	tblptrl,c
  5446  000A44  0EFD               	movlw	high _font
  5447  000A46  D014               	goto	L3
  5448  000A48                     l4604:
  5449                           
  5450                           ;ST7735_TFT.c: 406: else
  5451                           ;ST7735_TFT.c: 407: line = font2[(c - 'S')*5 + i];
  5452  000A48  0EAD               	movlw	173
  5453  000A4A  242F               	addwf	drawChar@c,w,c
  5454  000A4C  6E11               	movwf	___wmul@multiplier,c
  5455  000A4E  6A12               	clrf	___wmul@multiplier+1,c
  5456  000A50  0EFF               	movlw	255
  5457  000A52  2212               	addwfc	___wmul@multiplier+1,f,c
  5458  000A54  0E00               	movlw	0
  5459  000A56  6E14               	movwf	___wmul@multiplicand+1,c
  5460  000A58  0E05               	movlw	5
  5461  000A5A  6E13               	movwf	___wmul@multiplicand,c
  5462  000A5C  EC4D  F00C         	call	___wmul	;wreg free
  5463  000A60  5038               	movf	drawChar@i,w,c
  5464  000A62  2611               	addwf	?___wmul,f,c
  5465  000A64  0E00               	movlw	0
  5466  000A66  2212               	addwfc	?___wmul+1,f,c
  5467  000A68  0E86               	movlw	low _font2
  5468  000A6A  2411               	addwf	?___wmul,w,c
  5469  000A6C  6EF6               	movwf	tblptrl,c
  5470  000A6E  0EFE               	movlw	high _font2
  5471  000A70                     L3:
  5472  000A70  2012               	addwfc	?___wmul+1,w,c
  5473  000A72  6EF7               	movwf	tblptrh,c
  5474  000A74                     	if	0	;There are less than 3 active tblptr bytes
  5475  000A74                     	endif
  5476  000A74  0008               	tblrd		*
  5477  000A76  CFF5 F035          	movff	tablat,drawChar@line
  5478  000A7A  D000               	goto	l4606
  5479  000A7C                     l4606:
  5480                           
  5481                           ;ST7735_TFT.c: 408: for(j=0; j<7; j++, line >>= 1) {
  5482  000A7C  0E00               	movlw	0
  5483  000A7E  6E37               	movwf	drawChar@j,c
  5484  000A80                     l4608:
  5485  000A80  0E06               	movlw	6
  5486  000A82  6437               	cpfsgt	drawChar@j,c
  5487  000A84  D001               	goto	l476
  5488  000A86  D053               	goto	l4632
  5489  000A88                     l476:
  5490                           
  5491                           ;ST7735_TFT.c: 409: if(line & 0x01) {
  5492  000A88  A035               	btfss	drawChar@line,0,c
  5493  000A8A  D023               	goto	l4618
  5494                           
  5495                           ;ST7735_TFT.c: 410: if(size == 1) drawPixel(x+i, y+j, color);
  5496  000A8C  0434               	decf	drawChar@size,w,c
  5497  000A8E  A4D8               	btfss	status,2,c
  5498  000A90  D00C               	goto	l4616
  5499  000A92  502E               	movf	drawChar@y,w,c
  5500  000A94  2437               	addwf	drawChar@j,w,c
  5501  000A96  6E18               	movwf	drawPixel@y,c
  5502  000A98  C030  F019         	movff	drawChar@color,drawPixel@color
  5503  000A9C  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5504  000AA0  5036               	movf	drawChar@x,w,c
  5505  000AA2  2438               	addwf	drawChar@i,w,c
  5506  000AA4  EC20  F00C         	call	_drawPixel
  5507  000AA8  D03E               	goto	l4626
  5508  000AAA                     l4616:
  5509                           
  5510                           ;ST7735_TFT.c: 411: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5511  000AAA  5037               	movf	drawChar@j,w,c
  5512  000AAC  0234               	mulwf	drawChar@size,c
  5513  000AAE  50F3               	movf	prodl,w,c
  5514  000AB0  242E               	addwf	drawChar@y,w,c
  5515  000AB2  6E23               	movwf	fillRect@y,c
  5516  000AB4  C034  F024         	movff	drawChar@size,fillRect@w
  5517  000AB8  C034  F025         	movff	drawChar@size,fillRect@h
  5518  000ABC  C030  F026         	movff	drawChar@color,fillRect@color
  5519  000AC0  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5520  000AC4  5038               	movf	drawChar@i,w,c
  5521  000AC6  0234               	mulwf	drawChar@size,c
  5522  000AC8  50F3               	movf	prodl,w,c
  5523  000ACA  2436               	addwf	drawChar@x,w,c
  5524  000ACC  EC20  F00B         	call	_fillRect
  5525                           
  5526                           ;ST7735_TFT.c: 412: }
  5527  000AD0  D02A               	goto	l4626
  5528  000AD2                     l4618:
  5529                           
  5530                           ;ST7735_TFT.c: 413: else if(bg != color) {
  5531  000AD2  5030               	movf	drawChar@color,w,c
  5532  000AD4  1832               	xorwf	drawChar@bg,w,c
  5533  000AD6  E104               	bnz	u3090
  5534  000AD8  5031               	movf	drawChar@color+1,w,c
  5535  000ADA  1833               	xorwf	drawChar@bg+1,w,c
  5536  000ADC  B4D8               	btfsc	status,2,c
  5537  000ADE  D023               	goto	l4626
  5538  000AE0                     u3090:
  5539                           
  5540                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, bg);
  5541  000AE0  0434               	decf	drawChar@size,w,c
  5542  000AE2  A4D8               	btfss	status,2,c
  5543  000AE4  D00C               	goto	l4624
  5544  000AE6  502E               	movf	drawChar@y,w,c
  5545  000AE8  2437               	addwf	drawChar@j,w,c
  5546  000AEA  6E18               	movwf	drawPixel@y,c
  5547  000AEC  C032  F019         	movff	drawChar@bg,drawPixel@color
  5548  000AF0  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5549  000AF4  5036               	movf	drawChar@x,w,c
  5550  000AF6  2438               	addwf	drawChar@i,w,c
  5551  000AF8  EC20  F00C         	call	_drawPixel
  5552  000AFC  D014               	goto	l4626
  5553  000AFE                     l4624:
  5554                           
  5555                           ;ST7735_TFT.c: 415: else fillRect(x+i*size, y+j*size, size, size, bg);
  5556  000AFE  5037               	movf	drawChar@j,w,c
  5557  000B00  0234               	mulwf	drawChar@size,c
  5558  000B02  50F3               	movf	prodl,w,c
  5559  000B04  242E               	addwf	drawChar@y,w,c
  5560  000B06  6E23               	movwf	fillRect@y,c
  5561  000B08  C034  F024         	movff	drawChar@size,fillRect@w
  5562  000B0C  C034  F025         	movff	drawChar@size,fillRect@h
  5563  000B10  C032  F026         	movff	drawChar@bg,fillRect@color
  5564  000B14  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5565  000B18  5038               	movf	drawChar@i,w,c
  5566  000B1A  0234               	mulwf	drawChar@size,c
  5567  000B1C  50F3               	movf	prodl,w,c
  5568  000B1E  2436               	addwf	drawChar@x,w,c
  5569  000B20  EC20  F00B         	call	_fillRect
  5570  000B24  D000               	goto	l4626
  5571  000B26                     l4626:
  5572  000B26  2A37               	incf	drawChar@j,f,c
  5573  000B28  90D8               	bcf	status,0,c
  5574  000B2A  3235               	rrcf	drawChar@line,f,c
  5575  000B2C  D7A9               	goto	l4608
  5576  000B2E                     l4632:
  5577  000B2E  2A38               	incf	drawChar@i,f,c
  5578  000B30  D76F               	goto	l4596
  5579  000B32                     l467:
  5580  000B32  0012               	return		;funcret
  5581  000B34                     __end_of_drawChar:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           intcon2	equ	0xFF1
  5591                           postinc0	equ	0xFEE
  5592                           wreg	equ	0xFE8
  5593                           postdec1	equ	0xFE5
  5594                           fsr1l	equ	0xFE1
  5595                           indf2	equ	0xFDF
  5596                           postinc2	equ	0xFDE
  5597                           postdec2	equ	0xFDD
  5598                           fsr2h	equ	0xFDA
  5599                           fsr2l	equ	0xFD9
  5600                           status	equ	0xFD8
  5601                           
  5602 ;; *************** function _fillRect *****************
  5603 ;; Defined at:
  5604 ;;		line 384 in file "ST7735_TFT.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;  x               1    wreg     unsigned char 
  5607 ;;  y               1   34[COMRAM] unsigned char 
  5608 ;;  w               1   35[COMRAM] unsigned char 
  5609 ;;  h               1   36[COMRAM] unsigned char 
  5610 ;;  color           2   37[COMRAM] unsigned int 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  x               1   42[COMRAM] unsigned char 
  5613 ;;  i               2   43[COMRAM] int 
  5614 ;; Return value:  Size  Location     Type
  5615 ;;		None               void
  5616 ;; Registers used:
  5617 ;;		wreg, status,2, status,0, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5623 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;Total ram usage:       11 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    7
  5630 ;; This function calls:
  5631 ;;		_drawFastVLine
  5632 ;; This function is called by:
  5633 ;;		_drawChar
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text19
  5638  001640                     __ptext19:
  5639                           	opt stack 0
  5640  001640                     _fillRect:
  5641                           	opt stack 21
  5642                           
  5643                           ;incstack = 0
  5644                           ;fillRect@x stored from wreg
  5645  001640  6E2B               	movwf	fillRect@x,c
  5646                           
  5647                           ;ST7735_TFT.c: 386: signed int i;
  5648                           ;ST7735_TFT.c: 388: for (i = x; i < x + w; i++)
  5649  001642  C02B  F02C         	movff	fillRect@x,fillRect@i
  5650  001646  6A2D               	clrf	fillRect@i+1,c
  5651  001648  D00E               	goto	l4436
  5652  00164A                     l4432:
  5653                           
  5654                           ;ST7735_TFT.c: 389: {
  5655                           ;ST7735_TFT.c: 390: drawFastVLine(i, y, h, color);
  5656  00164A  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5657  00164E  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5658  001652  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5659  001656  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5660  00165A  502C               	movf	fillRect@i,w,c
  5661  00165C  ECCD  F008         	call	_drawFastVLine
  5662  001660  4A2C               	infsnz	fillRect@i,f,c
  5663  001662  2A2D               	incf	fillRect@i+1,f,c
  5664  001664  D000               	goto	l4436
  5665  001666                     l4436:
  5666  001666  5024               	movf	fillRect@w,w,c
  5667  001668  C02B  F028         	movff	fillRect@x,??_fillRect
  5668  00166C  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5669  00166E  2628               	addwf	??_fillRect,f,c
  5670  001670  0E00               	movlw	0
  5671  001672  2229               	addwfc	??_fillRect+1,f,c
  5672  001674  5028               	movf	??_fillRect,w,c
  5673  001676  5C2C               	subwf	fillRect@i,w,c
  5674  001678  502D               	movf	fillRect@i+1,w,c
  5675  00167A  0A80               	xorlw	128
  5676  00167C  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5677  00167E  5029               	movf	??_fillRect+1,w,c
  5678  001680  0A80               	xorlw	128
  5679  001682  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5680  001684  A0D8               	btfss	status,0,c
  5681  001686  D7E1               	goto	l4432
  5682  001688  0012               	return		;funcret
  5683  00168A                     __end_of_fillRect:
  5684                           	opt stack 0
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           intcon	equ	0xFF2
  5692                           intcon2	equ	0xFF1
  5693                           postinc0	equ	0xFEE
  5694                           wreg	equ	0xFE8
  5695                           postdec1	equ	0xFE5
  5696                           fsr1l	equ	0xFE1
  5697                           indf2	equ	0xFDF
  5698                           postinc2	equ	0xFDE
  5699                           postdec2	equ	0xFDD
  5700                           fsr2h	equ	0xFDA
  5701                           fsr2l	equ	0xFD9
  5702                           status	equ	0xFD8
  5703                           
  5704 ;; *************** function _drawFastVLine *****************
  5705 ;; Defined at:
  5706 ;;		line 363 in file "ST7735_TFT.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  x               1    wreg     unsigned char 
  5709 ;;  y               1   23[COMRAM] unsigned char 
  5710 ;;  h               1   24[COMRAM] unsigned char 
  5711 ;;  color           2   25[COMRAM] unsigned int 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  x               1   33[COMRAM] unsigned char 
  5714 ;;  lo              1   32[COMRAM] unsigned char 
  5715 ;;  hi              1   31[COMRAM] unsigned char 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;		None               void
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, status,0, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5725 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;Total ram usage:       11 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    6
  5732 ;; This function calls:
  5733 ;;		_setAddrWindow
  5734 ;;		_spiwrite
  5735 ;; This function is called by:
  5736 ;;		_fillRect
  5737 ;;		_fillCircleHelper
  5738 ;;		_fillCircle
  5739 ;;		_drawRect
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text20
  5744  00119A                     __ptext20:
  5745                           	opt stack 0
  5746  00119A                     _drawFastVLine:
  5747                           	opt stack 22
  5748                           
  5749                           ;incstack = 0
  5750                           ;drawFastVLine@x stored from wreg
  5751  00119A  6E22               	movwf	drawFastVLine@x,c
  5752                           
  5753                           ;ST7735_TFT.c: 365: unsigned char hi, lo;
  5754                           ;ST7735_TFT.c: 366: if((x >= 128) || (y >= 160))
  5755  00119C  0E80               	movlw	128
  5756  00119E  6022               	cpfslt	drawFastVLine@x,c
  5757  0011A0  D03F               	goto	l451
  5758  0011A2  0E9F               	movlw	159
  5759  0011A4  6418               	cpfsgt	drawFastVLine@y,c
  5760  0011A6  D001               	goto	l4372
  5761                           
  5762                           ;ST7735_TFT.c: 367: return;
  5763  0011A8  D03B               	goto	l451
  5764  0011AA                     l4372:
  5765                           
  5766                           ;ST7735_TFT.c: 368: if((y + h - 1) >= 160)
  5767  0011AA  0EFF               	movlw	255
  5768  0011AC  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5769  0011AE  0EFF               	movlw	255
  5770  0011B0  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5771  0011B2  5019               	movf	drawFastVLine@h,w,c
  5772  0011B4  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5773  0011B8  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5774  0011BA  261E               	addwf	??_drawFastVLine+2,f,c
  5775  0011BC  0E00               	movlw	0
  5776  0011BE  221F               	addwfc	??_drawFastVLine+3,f,c
  5777  0011C0  501C               	movf	??_drawFastVLine,w,c
  5778  0011C2  261E               	addwf	??_drawFastVLine+2,f,c
  5779  0011C4  501D               	movf	??_drawFastVLine+1,w,c
  5780  0011C6  221F               	addwfc	??_drawFastVLine+3,f,c
  5781  0011C8  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5782  0011CA  D00B               	goto	l4376
  5783  0011CC  501F               	movf	??_drawFastVLine+3,w,c
  5784  0011CE  E104               	bnz	u2900
  5785  0011D0  0EA0               	movlw	160
  5786  0011D2  5C1E               	subwf	??_drawFastVLine+2,w,c
  5787  0011D4  A0D8               	btfss	status,0,c
  5788  0011D6  D005               	goto	l4376
  5789  0011D8                     u2900:
  5790                           
  5791                           ;ST7735_TFT.c: 369: h = 160 - y;
  5792  0011D8  5018               	movf	drawFastVLine@y,w,c
  5793  0011DA  0800               	sublw	0
  5794  0011DC  0FA0               	addlw	160
  5795  0011DE  6E19               	movwf	drawFastVLine@h,c
  5796  0011E0  D000               	goto	l4376
  5797  0011E2                     l4376:
  5798                           
  5799                           ;ST7735_TFT.c: 370: hi = color >> 8; lo = color;
  5800  0011E2  501B               	movf	drawFastVLine@color+1,w,c
  5801  0011E4  6E20               	movwf	drawFastVLine@hi,c
  5802  0011E6  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5803                           
  5804                           ;ST7735_TFT.c: 371: setAddrWindow(x, y, x, y + h - 1);
  5805  0011EA  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5806  0011EE  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5807  0011F2  5018               	movf	drawFastVLine@y,w,c
  5808  0011F4  2419               	addwf	drawFastVLine@h,w,c
  5809  0011F6  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5810  0011F8  041C               	decf	??_drawFastVLine,w,c
  5811  0011FA  6E16               	movwf	setAddrWindow@y1,c
  5812  0011FC  5022               	movf	drawFastVLine@x,w,c
  5813  0011FE  ECD3  F00A         	call	_setAddrWindow
  5814                           
  5815                           ;ST7735_TFT.c: 372: PORTCbits.RC2 = 1;
  5816  001202  8482               	bsf	3970,2,c	;volatile
  5817                           
  5818                           ;ST7735_TFT.c: 373: PORTCbits.RC4 = 0;
  5819  001204  9882               	bcf	3970,4,c	;volatile
  5820                           
  5821                           ;ST7735_TFT.c: 375: while (h--) {
  5822  001206  D007               	goto	l4388
  5823  001208                     l4386:
  5824                           
  5825                           ;ST7735_TFT.c: 376: spiwrite(hi);
  5826  001208  5020               	movf	drawFastVLine@hi,w,c
  5827  00120A  ECD0  F00C         	call	_spiwrite
  5828                           
  5829                           ;ST7735_TFT.c: 377: spiwrite(lo);
  5830  00120E  5021               	movf	drawFastVLine@lo,w,c
  5831  001210  ECD0  F00C         	call	_spiwrite
  5832  001214  D000               	goto	l4388
  5833  001216                     l4388:
  5834  001216  0619               	decf	drawFastVLine@h,f,c
  5835  001218  2819               	incf	drawFastVLine@h,w,c
  5836  00121A  A4D8               	btfss	status,2,c
  5837  00121C  D7F5               	goto	l4386
  5838                           
  5839                           ;ST7735_TFT.c: 378: }
  5840                           ;ST7735_TFT.c: 379: PORTCbits.RC4 = 1;
  5841  00121E  8882               	bsf	3970,4,c	;volatile
  5842  001220                     l451:
  5843  001220  0012               	return		;funcret
  5844  001222                     __end_of_drawFastVLine:
  5845                           	opt stack 0
  5846                           tblptru	equ	0xFF8
  5847                           tblptrh	equ	0xFF7
  5848                           tblptrl	equ	0xFF6
  5849                           tablat	equ	0xFF5
  5850                           prodh	equ	0xFF4
  5851                           prodl	equ	0xFF3
  5852                           intcon	equ	0xFF2
  5853                           intcon2	equ	0xFF1
  5854                           postinc0	equ	0xFEE
  5855                           wreg	equ	0xFE8
  5856                           postdec1	equ	0xFE5
  5857                           fsr1l	equ	0xFE1
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function _drawPixel *****************
  5866 ;; Defined at:
  5867 ;;		line 354 in file "ST7735_TFT.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  x               1    wreg     unsigned char 
  5870 ;;  y               1   23[COMRAM] unsigned char 
  5871 ;;  color           2   24[COMRAM] unsigned int 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  x               1   26[COMRAM] unsigned char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;		None               void
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5883 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;Total ram usage:        4 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    6
  5890 ;; This function calls:
  5891 ;;		_setAddrWindow
  5892 ;;		_write_data
  5893 ;; This function is called by:
  5894 ;;		_drawChar
  5895 ;;		_drawCircle
  5896 ;;		_drawCircleHelper
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           	psect	text21
  5901  001840                     __ptext21:
  5902                           	opt stack 0
  5903  001840                     _drawPixel:
  5904                           	opt stack 22
  5905                           
  5906                           ;incstack = 0
  5907                           ;drawPixel@x stored from wreg
  5908  001840  6E1B               	movwf	drawPixel@x,c
  5909                           
  5910                           ;ST7735_TFT.c: 356: if((x >= 128) || (y >= 160))
  5911  001842  0E80               	movlw	128
  5912  001844  601B               	cpfslt	drawPixel@x,c
  5913  001846  D013               	goto	l445
  5914  001848  0E9F               	movlw	159
  5915  00184A  6418               	cpfsgt	drawPixel@y,c
  5916  00184C  D001               	goto	l4424
  5917                           
  5918                           ;ST7735_TFT.c: 357: return;
  5919  00184E  D00F               	goto	l445
  5920  001850                     l4424:
  5921                           
  5922                           ;ST7735_TFT.c: 358: setAddrWindow(x,y,x+1,y+1);
  5923  001850  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5924  001854  281B               	incf	drawPixel@x,w,c
  5925  001856  6E15               	movwf	setAddrWindow@x1,c
  5926  001858  2818               	incf	drawPixel@y,w,c
  5927  00185A  6E16               	movwf	setAddrWindow@y1,c
  5928  00185C  501B               	movf	drawPixel@x,w,c
  5929  00185E  ECD3  F00A         	call	_setAddrWindow
  5930                           
  5931                           ;ST7735_TFT.c: 359: write_data(color >> 8);
  5932  001862  501A               	movf	drawPixel@color+1,w,c
  5933  001864  EC11  F00D         	call	_write_data
  5934                           
  5935                           ;ST7735_TFT.c: 360: write_data(color & 0xFF);
  5936  001868  5019               	movf	drawPixel@color,w,c
  5937  00186A  EC11  F00D         	call	_write_data
  5938  00186E                     l445:
  5939  00186E  0012               	return		;funcret
  5940  001870                     __end_of_drawPixel:
  5941                           	opt stack 0
  5942                           tblptru	equ	0xFF8
  5943                           tblptrh	equ	0xFF7
  5944                           tblptrl	equ	0xFF6
  5945                           tablat	equ	0xFF5
  5946                           prodh	equ	0xFF4
  5947                           prodl	equ	0xFF3
  5948                           intcon	equ	0xFF2
  5949                           intcon2	equ	0xFF1
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           postdec1	equ	0xFE5
  5953                           fsr1l	equ	0xFE1
  5954                           indf2	equ	0xFDF
  5955                           postinc2	equ	0xFDE
  5956                           postdec2	equ	0xFDD
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function _setAddrWindow *****************
  5962 ;; Defined at:
  5963 ;;		line 339 in file "ST7735_TFT.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  x0              1    wreg     unsigned char 
  5966 ;;  y0              1   19[COMRAM] unsigned char 
  5967 ;;  x1              1   20[COMRAM] unsigned char 
  5968 ;;  y1              1   21[COMRAM] unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  x0              1   22[COMRAM] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;		None               void
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5980 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;Total ram usage:        4 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    5
  5987 ;; This function calls:
  5988 ;;		_write_command
  5989 ;;		_write_data
  5990 ;; This function is called by:
  5991 ;;		_drawPixel
  5992 ;;		_drawFastVLine
  5993 ;;		_fillRectangle
  5994 ;;		_drawFastHLine
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           	psect	text22
  5999  0015A6                     __ptext22:
  6000                           	opt stack 0
  6001  0015A6                     _setAddrWindow:
  6002                           	opt stack 22
  6003                           
  6004                           ;incstack = 0
  6005                           ;setAddrWindow@x0 stored from wreg
  6006  0015A6  6E17               	movwf	setAddrWindow@x0,c
  6007                           
  6008                           ;ST7735_TFT.c: 341: write_command(0x2A);
  6009  0015A8  0E2A               	movlw	42
  6010  0015AA  EC19  F00D         	call	_write_command
  6011                           
  6012                           ;ST7735_TFT.c: 342: write_data(0);
  6013  0015AE  0E00               	movlw	0
  6014  0015B0  EC11  F00D         	call	_write_data
  6015                           
  6016                           ;ST7735_TFT.c: 343: write_data(x0 + colstart);
  6017  0015B4  5017               	movf	setAddrWindow@x0,w,c
  6018  0015B6  2459               	addwf	_colstart,w,c
  6019  0015B8  EC11  F00D         	call	_write_data
  6020                           
  6021                           ;ST7735_TFT.c: 344: write_data(0);
  6022  0015BC  0E00               	movlw	0
  6023  0015BE  EC11  F00D         	call	_write_data
  6024                           
  6025                           ;ST7735_TFT.c: 345: write_data(x1 + colstart);
  6026  0015C2  5015               	movf	setAddrWindow@x1,w,c
  6027  0015C4  2459               	addwf	_colstart,w,c
  6028  0015C6  EC11  F00D         	call	_write_data
  6029                           
  6030                           ;ST7735_TFT.c: 346: write_command(0x2B);
  6031  0015CA  0E2B               	movlw	43
  6032  0015CC  EC19  F00D         	call	_write_command
  6033                           
  6034                           ;ST7735_TFT.c: 347: write_data(0);
  6035  0015D0  0E00               	movlw	0
  6036  0015D2  EC11  F00D         	call	_write_data
  6037                           
  6038                           ;ST7735_TFT.c: 348: write_data(y0 + rowstart);
  6039  0015D6  5014               	movf	setAddrWindow@y0,w,c
  6040  0015D8  245F               	addwf	_rowstart,w,c
  6041  0015DA  EC11  F00D         	call	_write_data
  6042                           
  6043                           ;ST7735_TFT.c: 349: write_data(0);
  6044  0015DE  0E00               	movlw	0
  6045  0015E0  EC11  F00D         	call	_write_data
  6046                           
  6047                           ;ST7735_TFT.c: 350: write_data(y1 + rowstart);
  6048  0015E4  5016               	movf	setAddrWindow@y1,w,c
  6049  0015E6  245F               	addwf	_rowstart,w,c
  6050  0015E8  EC11  F00D         	call	_write_data
  6051                           
  6052                           ;ST7735_TFT.c: 351: write_command(0x2C);
  6053  0015EC  0E2C               	movlw	44
  6054  0015EE  EC19  F00D         	call	_write_command
  6055  0015F2  0012               	return		;funcret
  6056  0015F4                     __end_of_setAddrWindow:
  6057                           	opt stack 0
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           intcon	equ	0xFF2
  6065                           intcon2	equ	0xFF1
  6066                           postinc0	equ	0xFEE
  6067                           wreg	equ	0xFE8
  6068                           postdec1	equ	0xFE5
  6069                           fsr1l	equ	0xFE1
  6070                           indf2	equ	0xFDF
  6071                           postinc2	equ	0xFDE
  6072                           postdec2	equ	0xFDD
  6073                           fsr2h	equ	0xFDA
  6074                           fsr2l	equ	0xFD9
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function _TFT_GreenTab_Initialize *****************
  6078 ;; Defined at:
  6079 ;;		line 591 in file "ST7735_TFT.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;		None               void
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    6
  6100 ;; This function calls:
  6101 ;;		_Rcmd1
  6102 ;;		_Rcmd2red
  6103 ;;		_Rcmd3
  6104 ;;		_write_command
  6105 ;;		_write_data
  6106 ;; This function is called by:
  6107 ;;		_Initialize_LCD_Screen
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text23
  6112  001870                     __ptext23:
  6113                           	opt stack 0
  6114  001870                     _TFT_GreenTab_Initialize:
  6115                           	opt stack 23
  6116                           
  6117                           ;ST7735_TFT.c: 593: PORTCbits.RC4 = 1;
  6118                           
  6119                           ;incstack = 0
  6120  001870  8882               	bsf	3970,4,c	;volatile
  6121                           
  6122                           ;ST7735_TFT.c: 594: PORTCbits.RC2 = 0;
  6123  001872  9482               	bcf	3970,2,c	;volatile
  6124                           
  6125                           ;ST7735_TFT.c: 596: SSPSTAT=0x80;
  6126  001874  0E80               	movlw	128
  6127  001876  6EC7               	movwf	4039,c	;volatile
  6128                           
  6129                           ;ST7735_TFT.c: 597: SSPCON1=0x30;
  6130  001878  0E30               	movlw	48
  6131  00187A  6EC6               	movwf	4038,c	;volatile
  6132                           
  6133                           ;ST7735_TFT.c: 600: Rcmd1();
  6134  00187C  EC36  F006         	call	_Rcmd1	;wreg free
  6135                           
  6136                           ;ST7735_TFT.c: 601: Rcmd2red();
  6137  001880  ECAD  F00B         	call	_Rcmd2red	;wreg free
  6138                           
  6139                           ;ST7735_TFT.c: 602: Rcmd3();
  6140  001884  EC43  F007         	call	_Rcmd3	;wreg free
  6141                           
  6142                           ;ST7735_TFT.c: 603: write_command(0x36);
  6143  001888  0E36               	movlw	54
  6144  00188A  EC19  F00D         	call	_write_command
  6145                           
  6146                           ;ST7735_TFT.c: 604: write_data(0xC0);
  6147  00188E  0EC0               	movlw	192
  6148  001890  EC11  F00D         	call	_write_data
  6149                           
  6150                           ;ST7735_TFT.c: 605: _tft_type = 1;
  6151  001894  0E01               	movlw	1
  6152  001896  6E53               	movwf	__tft_type,c
  6153  001898  0012               	return		;funcret
  6154  00189A                     __end_of_TFT_GreenTab_Initialize:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           intcon2	equ	0xFF1
  6164                           postinc0	equ	0xFEE
  6165                           wreg	equ	0xFE8
  6166                           postdec1	equ	0xFE5
  6167                           fsr1l	equ	0xFE1
  6168                           indf2	equ	0xFDF
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           fsr2h	equ	0xFDA
  6172                           fsr2l	equ	0xFD9
  6173                           status	equ	0xFD8
  6174                           
  6175 ;; *************** function _Rcmd3 *****************
  6176 ;; Defined at:
  6177 ;;		line 285 in file "ST7735_TFT.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;		None               void
  6184 ;; Registers used:
  6185 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;Total ram usage:        0 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    5
  6198 ;; This function calls:
  6199 ;;		_delay_ms
  6200 ;;		_write_command
  6201 ;;		_write_data
  6202 ;; This function is called by:
  6203 ;;		_TFT_GreenTab_Initialize
  6204 ;;		_TFT_BlackTab_Initialize
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           	psect	text24
  6209  000E86                     __ptext24:
  6210                           	opt stack 0
  6211  000E86                     _Rcmd3:
  6212                           	opt stack 23
  6213                           
  6214                           ;ST7735_TFT.c: 287: write_command(0xE0);
  6215                           
  6216                           ;incstack = 0
  6217  000E86  0EE0               	movlw	224
  6218  000E88  EC19  F00D         	call	_write_command
  6219                           
  6220                           ;ST7735_TFT.c: 288: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6221  000E8C  0E02               	movlw	2
  6222  000E8E  EC11  F00D         	call	_write_data
  6223  000E92  0E1C               	movlw	28
  6224  000E94  EC11  F00D         	call	_write_data
  6225  000E98  0E07               	movlw	7
  6226  000E9A  EC11  F00D         	call	_write_data
  6227  000E9E  0E12               	movlw	18
  6228  000EA0  EC11  F00D         	call	_write_data
  6229                           
  6230                           ;ST7735_TFT.c: 289: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6231  000EA4  0E37               	movlw	55
  6232  000EA6  EC11  F00D         	call	_write_data
  6233  000EAA  0E32               	movlw	50
  6234  000EAC  EC11  F00D         	call	_write_data
  6235  000EB0  0E29               	movlw	41
  6236  000EB2  EC11  F00D         	call	_write_data
  6237  000EB6  0E2D               	movlw	45
  6238  000EB8  EC11  F00D         	call	_write_data
  6239                           
  6240                           ;ST7735_TFT.c: 290: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6241  000EBC  0E29               	movlw	41
  6242  000EBE  EC11  F00D         	call	_write_data
  6243  000EC2  0E25               	movlw	37
  6244  000EC4  EC11  F00D         	call	_write_data
  6245  000EC8  0E2B               	movlw	43
  6246  000ECA  EC11  F00D         	call	_write_data
  6247  000ECE  0E39               	movlw	57
  6248  000ED0  EC11  F00D         	call	_write_data
  6249                           
  6250                           ;ST7735_TFT.c: 291: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6251  000ED4  0E00               	movlw	0
  6252  000ED6  EC11  F00D         	call	_write_data
  6253  000EDA  0E01               	movlw	1
  6254  000EDC  EC11  F00D         	call	_write_data
  6255  000EE0  0E03               	movlw	3
  6256  000EE2  EC11  F00D         	call	_write_data
  6257  000EE6  0E10               	movlw	16
  6258  000EE8  EC11  F00D         	call	_write_data
  6259                           
  6260                           ;ST7735_TFT.c: 292: write_command(0xE1);
  6261  000EEC  0EE1               	movlw	225
  6262  000EEE  EC19  F00D         	call	_write_command
  6263                           
  6264                           ;ST7735_TFT.c: 293: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6265  000EF2  0E03               	movlw	3
  6266  000EF4  EC11  F00D         	call	_write_data
  6267  000EF8  0E1D               	movlw	29
  6268  000EFA  EC11  F00D         	call	_write_data
  6269  000EFE  0E07               	movlw	7
  6270  000F00  EC11  F00D         	call	_write_data
  6271  000F04  0E06               	movlw	6
  6272  000F06  EC11  F00D         	call	_write_data
  6273                           
  6274                           ;ST7735_TFT.c: 294: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6275  000F0A  0E2E               	movlw	46
  6276  000F0C  EC11  F00D         	call	_write_data
  6277  000F10  0E2C               	movlw	44
  6278  000F12  EC11  F00D         	call	_write_data
  6279  000F16  0E29               	movlw	41
  6280  000F18  EC11  F00D         	call	_write_data
  6281  000F1C  0E2D               	movlw	45
  6282  000F1E  EC11  F00D         	call	_write_data
  6283                           
  6284                           ;ST7735_TFT.c: 295: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6285  000F22  0E2E               	movlw	46
  6286  000F24  EC11  F00D         	call	_write_data
  6287  000F28  0E2E               	movlw	46
  6288  000F2A  EC11  F00D         	call	_write_data
  6289  000F2E  0E37               	movlw	55
  6290  000F30  EC11  F00D         	call	_write_data
  6291  000F34  0E3F               	movlw	63
  6292  000F36  EC11  F00D         	call	_write_data
  6293                           
  6294                           ;ST7735_TFT.c: 296: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6295  000F3A  0E00               	movlw	0
  6296  000F3C  EC11  F00D         	call	_write_data
  6297  000F40  0E00               	movlw	0
  6298  000F42  EC11  F00D         	call	_write_data
  6299  000F46  0E02               	movlw	2
  6300  000F48  EC11  F00D         	call	_write_data
  6301  000F4C  0E10               	movlw	16
  6302  000F4E  EC11  F00D         	call	_write_data
  6303                           
  6304                           ;ST7735_TFT.c: 297: write_command(0x13);
  6305  000F52  0E13               	movlw	19
  6306  000F54  EC19  F00D         	call	_write_command
  6307                           
  6308                           ;ST7735_TFT.c: 298: delay_ms(10);
  6309  000F58  0E00               	movlw	0
  6310  000F5A  6E18               	movwf	delay_ms@ms+1,c
  6311  000F5C  0E0A               	movlw	10
  6312  000F5E  6E17               	movwf	delay_ms@ms,c
  6313  000F60  ECAA  F00A         	call	_delay_ms	;wreg free
  6314                           
  6315                           ;ST7735_TFT.c: 299: write_command(0x29);
  6316  000F64  0E29               	movlw	41
  6317  000F66  EC19  F00D         	call	_write_command
  6318                           
  6319                           ;ST7735_TFT.c: 300: delay_ms(100);
  6320  000F6A  0E00               	movlw	0
  6321  000F6C  6E18               	movwf	delay_ms@ms+1,c
  6322  000F6E  0E64               	movlw	100
  6323  000F70  6E17               	movwf	delay_ms@ms,c
  6324  000F72  ECAA  F00A         	call	_delay_ms	;wreg free
  6325  000F76  0012               	return		;funcret
  6326  000F78                     __end_of_Rcmd3:
  6327                           	opt stack 0
  6328                           tblptru	equ	0xFF8
  6329                           tblptrh	equ	0xFF7
  6330                           tblptrl	equ	0xFF6
  6331                           tablat	equ	0xFF5
  6332                           prodh	equ	0xFF4
  6333                           prodl	equ	0xFF3
  6334                           intcon	equ	0xFF2
  6335                           intcon2	equ	0xFF1
  6336                           postinc0	equ	0xFEE
  6337                           wreg	equ	0xFE8
  6338                           postdec1	equ	0xFE5
  6339                           fsr1l	equ	0xFE1
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           fsr2h	equ	0xFDA
  6344                           fsr2l	equ	0xFD9
  6345                           status	equ	0xFD8
  6346                           
  6347 ;; *************** function _Rcmd2red *****************
  6348 ;; Defined at:
  6349 ;;		line 275 in file "ST7735_TFT.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;		None
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;		None
  6354 ;; Return value:  Size  Location     Type
  6355 ;;		None               void
  6356 ;; Registers used:
  6357 ;;		wreg, status,2, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;Total ram usage:        0 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    5
  6370 ;; This function calls:
  6371 ;;		_write_command
  6372 ;;		_write_data
  6373 ;; This function is called by:
  6374 ;;		_TFT_GreenTab_Initialize
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           	psect	text25
  6379  00175A                     __ptext25:
  6380                           	opt stack 0
  6381  00175A                     _Rcmd2red:
  6382                           	opt stack 23
  6383                           
  6384                           ;ST7735_TFT.c: 277: write_command(0x2A);
  6385                           
  6386                           ;incstack = 0
  6387  00175A  0E2A               	movlw	42
  6388  00175C  EC19  F00D         	call	_write_command
  6389                           
  6390                           ;ST7735_TFT.c: 278: write_data(0x00); write_data(0x00);
  6391  001760  0E00               	movlw	0
  6392  001762  EC11  F00D         	call	_write_data
  6393  001766  0E00               	movlw	0
  6394  001768  EC11  F00D         	call	_write_data
  6395                           
  6396                           ;ST7735_TFT.c: 279: write_data(0x00); write_data(0x7F);
  6397  00176C  0E00               	movlw	0
  6398  00176E  EC11  F00D         	call	_write_data
  6399  001772  0E7F               	movlw	127
  6400  001774  EC11  F00D         	call	_write_data
  6401                           
  6402                           ;ST7735_TFT.c: 280: write_command(0x2B);
  6403  001778  0E2B               	movlw	43
  6404  00177A  EC19  F00D         	call	_write_command
  6405                           
  6406                           ;ST7735_TFT.c: 281: write_data(0x00); write_data(0x00);
  6407  00177E  0E00               	movlw	0
  6408  001780  EC11  F00D         	call	_write_data
  6409  001784  0E00               	movlw	0
  6410  001786  EC11  F00D         	call	_write_data
  6411                           
  6412                           ;ST7735_TFT.c: 282: write_data(0x00); write_data(0x9F);
  6413  00178A  0E00               	movlw	0
  6414  00178C  EC11  F00D         	call	_write_data
  6415  001790  0E9F               	movlw	159
  6416  001792  EC11  F00D         	call	_write_data
  6417  001796  0012               	return		;funcret
  6418  001798                     __end_of_Rcmd2red:
  6419                           	opt stack 0
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodh	equ	0xFF4
  6425                           prodl	equ	0xFF3
  6426                           intcon	equ	0xFF2
  6427                           intcon2	equ	0xFF1
  6428                           postinc0	equ	0xFEE
  6429                           wreg	equ	0xFE8
  6430                           postdec1	equ	0xFE5
  6431                           fsr1l	equ	0xFE1
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           fsr2h	equ	0xFDA
  6436                           fsr2l	equ	0xFD9
  6437                           status	equ	0xFD8
  6438                           
  6439 ;; *************** function _Rcmd1 *****************
  6440 ;; Defined at:
  6441 ;;		line 228 in file "ST7735_TFT.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;		None
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;		None
  6446 ;; Return value:  Size  Location     Type
  6447 ;;		None               void
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;Total ram usage:        0 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    5
  6462 ;; This function calls:
  6463 ;;		_delay_ms
  6464 ;;		_write_command
  6465 ;;		_write_data
  6466 ;; This function is called by:
  6467 ;;		_TFT_GreenTab_Initialize
  6468 ;;		_TFT_BlackTab_Initialize
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text26
  6473  000C6C                     __ptext26:
  6474                           	opt stack 0
  6475  000C6C                     _Rcmd1:
  6476                           	opt stack 23
  6477                           
  6478                           ;ST7735_TFT.c: 230: write_command(0x01);
  6479                           
  6480                           ;incstack = 0
  6481  000C6C  0E01               	movlw	1
  6482  000C6E  EC19  F00D         	call	_write_command
  6483                           
  6484                           ;ST7735_TFT.c: 231: delay_ms(150);
  6485  000C72  0E00               	movlw	0
  6486  000C74  6E18               	movwf	delay_ms@ms+1,c
  6487  000C76  0E96               	movlw	150
  6488  000C78  6E17               	movwf	delay_ms@ms,c
  6489  000C7A  ECAA  F00A         	call	_delay_ms	;wreg free
  6490                           
  6491                           ;ST7735_TFT.c: 232: write_command(0x11);
  6492  000C7E  0E11               	movlw	17
  6493  000C80  EC19  F00D         	call	_write_command
  6494                           
  6495                           ;ST7735_TFT.c: 233: delay_ms(500);
  6496  000C84  0E01               	movlw	1
  6497  000C86  6E18               	movwf	delay_ms@ms+1,c
  6498  000C88  0EF4               	movlw	244
  6499  000C8A  6E17               	movwf	delay_ms@ms,c
  6500  000C8C  ECAA  F00A         	call	_delay_ms	;wreg free
  6501                           
  6502                           ;ST7735_TFT.c: 234: write_command(0xB1);
  6503  000C90  0EB1               	movlw	177
  6504  000C92  EC19  F00D         	call	_write_command
  6505                           
  6506                           ;ST7735_TFT.c: 235: write_data(0x01);
  6507  000C96  0E01               	movlw	1
  6508  000C98  EC11  F00D         	call	_write_data
  6509                           
  6510                           ;ST7735_TFT.c: 236: write_data(0x2C);
  6511  000C9C  0E2C               	movlw	44
  6512  000C9E  EC11  F00D         	call	_write_data
  6513                           
  6514                           ;ST7735_TFT.c: 237: write_data(0x2D);
  6515  000CA2  0E2D               	movlw	45
  6516  000CA4  EC11  F00D         	call	_write_data
  6517                           
  6518                           ;ST7735_TFT.c: 238: write_command(0xB2);
  6519  000CA8  0EB2               	movlw	178
  6520  000CAA  EC19  F00D         	call	_write_command
  6521                           
  6522                           ;ST7735_TFT.c: 239: write_data(0x01);
  6523  000CAE  0E01               	movlw	1
  6524  000CB0  EC11  F00D         	call	_write_data
  6525                           
  6526                           ;ST7735_TFT.c: 240: write_data(0x2C);
  6527  000CB4  0E2C               	movlw	44
  6528  000CB6  EC11  F00D         	call	_write_data
  6529                           
  6530                           ;ST7735_TFT.c: 241: write_data(0x2D);
  6531  000CBA  0E2D               	movlw	45
  6532  000CBC  EC11  F00D         	call	_write_data
  6533                           
  6534                           ;ST7735_TFT.c: 242: write_command(0xB3);
  6535  000CC0  0EB3               	movlw	179
  6536  000CC2  EC19  F00D         	call	_write_command
  6537                           
  6538                           ;ST7735_TFT.c: 243: write_data(0x01);
  6539  000CC6  0E01               	movlw	1
  6540  000CC8  EC11  F00D         	call	_write_data
  6541                           
  6542                           ;ST7735_TFT.c: 244: write_data(0x2C);
  6543  000CCC  0E2C               	movlw	44
  6544  000CCE  EC11  F00D         	call	_write_data
  6545                           
  6546                           ;ST7735_TFT.c: 245: write_data(0x2D);
  6547  000CD2  0E2D               	movlw	45
  6548  000CD4  EC11  F00D         	call	_write_data
  6549                           
  6550                           ;ST7735_TFT.c: 246: write_data(0x01);
  6551  000CD8  0E01               	movlw	1
  6552  000CDA  EC11  F00D         	call	_write_data
  6553                           
  6554                           ;ST7735_TFT.c: 247: write_data(0x2C);
  6555  000CDE  0E2C               	movlw	44
  6556  000CE0  EC11  F00D         	call	_write_data
  6557                           
  6558                           ;ST7735_TFT.c: 248: write_data(0x2D);
  6559  000CE4  0E2D               	movlw	45
  6560  000CE6  EC11  F00D         	call	_write_data
  6561                           
  6562                           ;ST7735_TFT.c: 249: write_command(0xB4);
  6563  000CEA  0EB4               	movlw	180
  6564  000CEC  EC19  F00D         	call	_write_command
  6565                           
  6566                           ;ST7735_TFT.c: 250: write_data(0x07);
  6567  000CF0  0E07               	movlw	7
  6568  000CF2  EC11  F00D         	call	_write_data
  6569                           
  6570                           ;ST7735_TFT.c: 251: write_command(0xC0);
  6571  000CF6  0EC0               	movlw	192
  6572  000CF8  EC19  F00D         	call	_write_command
  6573                           
  6574                           ;ST7735_TFT.c: 252: write_data(0xA2);
  6575  000CFC  0EA2               	movlw	162
  6576  000CFE  EC11  F00D         	call	_write_data
  6577                           
  6578                           ;ST7735_TFT.c: 253: write_data(0x02);
  6579  000D02  0E02               	movlw	2
  6580  000D04  EC11  F00D         	call	_write_data
  6581                           
  6582                           ;ST7735_TFT.c: 254: write_data(0x84);
  6583  000D08  0E84               	movlw	132
  6584  000D0A  EC11  F00D         	call	_write_data
  6585                           
  6586                           ;ST7735_TFT.c: 255: write_command(0xC1);
  6587  000D0E  0EC1               	movlw	193
  6588  000D10  EC19  F00D         	call	_write_command
  6589                           
  6590                           ;ST7735_TFT.c: 256: write_data(0xC5);
  6591  000D14  0EC5               	movlw	197
  6592  000D16  EC11  F00D         	call	_write_data
  6593                           
  6594                           ;ST7735_TFT.c: 257: write_command(0xC2);
  6595  000D1A  0EC2               	movlw	194
  6596  000D1C  EC19  F00D         	call	_write_command
  6597                           
  6598                           ;ST7735_TFT.c: 258: write_data(0x0A);
  6599  000D20  0E0A               	movlw	10
  6600  000D22  EC11  F00D         	call	_write_data
  6601                           
  6602                           ;ST7735_TFT.c: 259: write_data(0x00);
  6603  000D26  0E00               	movlw	0
  6604  000D28  EC11  F00D         	call	_write_data
  6605                           
  6606                           ;ST7735_TFT.c: 260: write_command(0xC3);
  6607  000D2C  0EC3               	movlw	195
  6608  000D2E  EC19  F00D         	call	_write_command
  6609                           
  6610                           ;ST7735_TFT.c: 261: write_data(0x8A);
  6611  000D32  0E8A               	movlw	138
  6612  000D34  EC11  F00D         	call	_write_data
  6613                           
  6614                           ;ST7735_TFT.c: 262: write_data(0x2A);
  6615  000D38  0E2A               	movlw	42
  6616  000D3A  EC11  F00D         	call	_write_data
  6617                           
  6618                           ;ST7735_TFT.c: 263: write_command(0xC4);
  6619  000D3E  0EC4               	movlw	196
  6620  000D40  EC19  F00D         	call	_write_command
  6621                           
  6622                           ;ST7735_TFT.c: 264: write_data(0x8A);
  6623  000D44  0E8A               	movlw	138
  6624  000D46  EC11  F00D         	call	_write_data
  6625                           
  6626                           ;ST7735_TFT.c: 265: write_data(0xEE);
  6627  000D4A  0EEE               	movlw	238
  6628  000D4C  EC11  F00D         	call	_write_data
  6629                           
  6630                           ;ST7735_TFT.c: 266: write_command(0xC5);
  6631  000D50  0EC5               	movlw	197
  6632  000D52  EC19  F00D         	call	_write_command
  6633                           
  6634                           ;ST7735_TFT.c: 267: write_data(0x0E);
  6635  000D56  0E0E               	movlw	14
  6636  000D58  EC11  F00D         	call	_write_data
  6637                           
  6638                           ;ST7735_TFT.c: 268: write_command(0x20);
  6639  000D5C  0E20               	movlw	32
  6640  000D5E  EC19  F00D         	call	_write_command
  6641                           
  6642                           ;ST7735_TFT.c: 269: write_command(0x36);
  6643  000D62  0E36               	movlw	54
  6644  000D64  EC19  F00D         	call	_write_command
  6645                           
  6646                           ;ST7735_TFT.c: 270: write_data(0xC8);
  6647  000D68  0EC8               	movlw	200
  6648  000D6A  EC11  F00D         	call	_write_data
  6649                           
  6650                           ;ST7735_TFT.c: 271: write_command(0x3A);
  6651  000D6E  0E3A               	movlw	58
  6652  000D70  EC19  F00D         	call	_write_command
  6653                           
  6654                           ;ST7735_TFT.c: 272: write_data(0x05);
  6655  000D74  0E05               	movlw	5
  6656  000D76  EC11  F00D         	call	_write_data
  6657  000D7A  0012               	return		;funcret
  6658  000D7C                     __end_of_Rcmd1:
  6659                           	opt stack 0
  6660                           tblptru	equ	0xFF8
  6661                           tblptrh	equ	0xFF7
  6662                           tblptrl	equ	0xFF6
  6663                           tablat	equ	0xFF5
  6664                           prodh	equ	0xFF4
  6665                           prodl	equ	0xFF3
  6666                           intcon	equ	0xFF2
  6667                           intcon2	equ	0xFF1
  6668                           postinc0	equ	0xFEE
  6669                           wreg	equ	0xFE8
  6670                           postdec1	equ	0xFE5
  6671                           fsr1l	equ	0xFE1
  6672                           indf2	equ	0xFDF
  6673                           postinc2	equ	0xFDE
  6674                           postdec2	equ	0xFDD
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function _write_data *****************
  6680 ;; Defined at:
  6681 ;;		line 156 in file "ST7735_TFT.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  data_           1    wreg     unsigned char 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  data_           1   18[COMRAM] unsigned char 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;		None               void
  6688 ;; Registers used:
  6689 ;;		wreg, status,2, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;Total ram usage:        1 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    4
  6702 ;; This function calls:
  6703 ;;		_spiwrite
  6704 ;; This function is called by:
  6705 ;;		_Rcmd1
  6706 ;;		_Rcmd2red
  6707 ;;		_Rcmd3
  6708 ;;		_setAddrWindow
  6709 ;;		_drawPixel
  6710 ;;		_TFT_GreenTab_Initialize
  6711 ;;		_Bcmd
  6712 ;;		_setScrollDefinition
  6713 ;;		_Rcmd2green
  6714 ;;		_VerticalScroll
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           	psect	text27
  6719  001A22                     __ptext27:
  6720                           	opt stack 0
  6721  001A22                     _write_data:
  6722                           	opt stack 22
  6723                           
  6724                           ;incstack = 0
  6725                           ;write_data@data_ stored from wreg
  6726  001A22  6E13               	movwf	write_data@data_,c
  6727                           
  6728                           ;ST7735_TFT.c: 158: PORTCbits.RC4 = 0;
  6729  001A24  9882               	bcf	3970,4,c	;volatile
  6730                           
  6731                           ;ST7735_TFT.c: 159: PORTCbits.RC2 = 1;
  6732  001A26  8482               	bsf	3970,2,c	;volatile
  6733                           
  6734                           ;ST7735_TFT.c: 160: spiwrite(data_);
  6735  001A28  5013               	movf	write_data@data_,w,c
  6736  001A2A  ECD0  F00C         	call	_spiwrite
  6737                           
  6738                           ;ST7735_TFT.c: 161: PORTCbits.RC4 = 1;
  6739  001A2E  8882               	bsf	3970,4,c	;volatile
  6740  001A30  0012               	return		;funcret
  6741  001A32                     __end_of_write_data:
  6742                           	opt stack 0
  6743                           tblptru	equ	0xFF8
  6744                           tblptrh	equ	0xFF7
  6745                           tblptrl	equ	0xFF6
  6746                           tablat	equ	0xFF5
  6747                           prodh	equ	0xFF4
  6748                           prodl	equ	0xFF3
  6749                           intcon	equ	0xFF2
  6750                           intcon2	equ	0xFF1
  6751                           postinc0	equ	0xFEE
  6752                           wreg	equ	0xFE8
  6753                           postdec1	equ	0xFE5
  6754                           fsr1l	equ	0xFE1
  6755                           indf2	equ	0xFDF
  6756                           postinc2	equ	0xFDE
  6757                           postdec2	equ	0xFDD
  6758                           fsr2h	equ	0xFDA
  6759                           fsr2l	equ	0xFD9
  6760                           status	equ	0xFD8
  6761                           
  6762 ;; *************** function _write_command *****************
  6763 ;; Defined at:
  6764 ;;		line 145 in file "ST7735_TFT.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  cmd_            1    wreg     unsigned char 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;  cmd_            1   18[COMRAM] unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;		None               void
  6771 ;; Registers used:
  6772 ;;		wreg, status,2, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6782 ;;Total ram usage:        1 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    4
  6785 ;; This function calls:
  6786 ;;		_spiwrite
  6787 ;; This function is called by:
  6788 ;;		_Rcmd1
  6789 ;;		_Rcmd2red
  6790 ;;		_Rcmd3
  6791 ;;		_setAddrWindow
  6792 ;;		_TFT_GreenTab_Initialize
  6793 ;;		_Bcmd
  6794 ;;		_setScrollDefinition
  6795 ;;		_Rcmd2green
  6796 ;;		_VerticalScroll
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text28
  6801  001A32                     __ptext28:
  6802                           	opt stack 0
  6803  001A32                     _write_command:
  6804                           	opt stack 22
  6805                           
  6806                           ;incstack = 0
  6807                           ;write_command@cmd_ stored from wreg
  6808  001A32  6E13               	movwf	write_command@cmd_,c
  6809                           
  6810                           ;ST7735_TFT.c: 147: PORTCbits.RC4 = 0;
  6811  001A34  9882               	bcf	3970,4,c	;volatile
  6812                           
  6813                           ;ST7735_TFT.c: 149: PORTCbits.RC2 = 0;
  6814  001A36  9482               	bcf	3970,2,c	;volatile
  6815                           
  6816                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
  6817  001A38  5013               	movf	write_command@cmd_,w,c
  6818  001A3A  ECD0  F00C         	call	_spiwrite
  6819                           
  6820                           ;ST7735_TFT.c: 152: PORTCbits.RC4 = 1;
  6821  001A3E  8882               	bsf	3970,4,c	;volatile
  6822  001A40  0012               	return		;funcret
  6823  001A42                     __end_of_write_command:
  6824                           	opt stack 0
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodh	equ	0xFF4
  6830                           prodl	equ	0xFF3
  6831                           intcon	equ	0xFF2
  6832                           intcon2	equ	0xFF1
  6833                           postinc0	equ	0xFEE
  6834                           wreg	equ	0xFE8
  6835                           postdec1	equ	0xFE5
  6836                           fsr1l	equ	0xFE1
  6837                           indf2	equ	0xFDF
  6838                           postinc2	equ	0xFDE
  6839                           postdec2	equ	0xFDD
  6840                           fsr2h	equ	0xFDA
  6841                           fsr2l	equ	0xFD9
  6842                           status	equ	0xFD8
  6843                           
  6844 ;; *************** function _spiwrite *****************
  6845 ;; Defined at:
  6846 ;;		line 136 in file "ST7735_TFT.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;  spidata         1    wreg     unsigned char 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;  spidata         1   17[COMRAM] unsigned char 
  6851 ;;  x               1   16[COMRAM] unsigned char 
  6852 ;; Return value:  Size  Location     Type
  6853 ;;		None               void
  6854 ;; Registers used:
  6855 ;;		wreg
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;Total ram usage:        2 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    3
  6868 ;; This function calls:
  6869 ;;		Nothing
  6870 ;; This function is called by:
  6871 ;;		_write_command
  6872 ;;		_write_data
  6873 ;;		_drawFastVLine
  6874 ;;		_fillRectangle
  6875 ;;		_drawFastHLine
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text29
  6880  0019A0                     __ptext29:
  6881                           	opt stack 0
  6882  0019A0                     _spiwrite:
  6883                           	opt stack 24
  6884                           
  6885                           ;incstack = 0
  6886                           ;spiwrite@spidata stored from wreg
  6887  0019A0  6E12               	movwf	spiwrite@spidata,c
  6888                           
  6889                           ;ST7735_TFT.c: 138: char x;
  6890                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
  6891  0019A2  969E               	bcf	3998,3,c	;volatile
  6892                           
  6893                           ;ST7735_TFT.c: 140: x = SSPBUF;
  6894  0019A4  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6895                           
  6896                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
  6897  0019A8  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6898                           
  6899                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
  6900  0019AC  D000               	goto	l401
  6901  0019AE                     l401:
  6902  0019AE  A0C7               	btfss	4039,0,c	;volatile
  6903  0019B0  D7FE               	goto	l401
  6904  0019B2  0012               	return		;funcret
  6905  0019B4                     __end_of_spiwrite:
  6906                           	opt stack 0
  6907                           tblptru	equ	0xFF8
  6908                           tblptrh	equ	0xFF7
  6909                           tblptrl	equ	0xFF6
  6910                           tablat	equ	0xFF5
  6911                           prodh	equ	0xFF4
  6912                           prodl	equ	0xFF3
  6913                           intcon	equ	0xFF2
  6914                           intcon2	equ	0xFF1
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           postdec1	equ	0xFE5
  6918                           fsr1l	equ	0xFE1
  6919                           indf2	equ	0xFDF
  6920                           postinc2	equ	0xFDE
  6921                           postdec2	equ	0xFDD
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _LCD_Reset *****************
  6927 ;; Defined at:
  6928 ;;		line 164 in file "ST7735_TFT.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    5
  6949 ;; This function calls:
  6950 ;;		_delay_ms
  6951 ;; This function is called by:
  6952 ;;		_Initialize_LCD_Screen
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text30
  6957  0019C8                     __ptext30:
  6958                           	opt stack 0
  6959  0019C8                     _LCD_Reset:
  6960                           	opt stack 24
  6961                           
  6962                           ;ST7735_TFT.c: 166: PORTDbits.RD0 = 0;
  6963                           
  6964                           ;incstack = 0
  6965  0019C8  9083               	bcf	3971,0,c	;volatile
  6966                           
  6967                           ;ST7735_TFT.c: 167: delay_ms(100);
  6968  0019CA  0E00               	movlw	0
  6969  0019CC  6E18               	movwf	delay_ms@ms+1,c
  6970  0019CE  0E64               	movlw	100
  6971  0019D0  6E17               	movwf	delay_ms@ms,c
  6972  0019D2  ECAA  F00A         	call	_delay_ms	;wreg free
  6973                           
  6974                           ;ST7735_TFT.c: 168: PORTDbits.RD0 = 1;
  6975  0019D6  8083               	bsf	3971,0,c	;volatile
  6976  0019D8  0012               	return		;funcret
  6977  0019DA                     __end_of_LCD_Reset:
  6978                           	opt stack 0
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           intcon	equ	0xFF2
  6986                           intcon2	equ	0xFF1
  6987                           postinc0	equ	0xFEE
  6988                           wreg	equ	0xFE8
  6989                           postdec1	equ	0xFE5
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _delay_ms *****************
  6999 ;; Defined at:
  7000 ;;		line 11 in file "ST7735_TFT.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  ms              2   22[COMRAM] int 
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;  count           2   26[COMRAM] int 
  7005 ;; Return value:  Size  Location     Type
  7006 ;;		None               void
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7014 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;Total ram usage:        6 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    4
  7021 ;; This function calls:
  7022 ;;		___wmul
  7023 ;; This function is called by:
  7024 ;;		_LCD_Reset
  7025 ;;		_Rcmd1
  7026 ;;		_Rcmd3
  7027 ;;		_Bcmd
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text31
  7032  001554                     __ptext31:
  7033                           	opt stack 0
  7034  001554                     _delay_ms:
  7035                           	opt stack 23
  7036                           
  7037                           ;ST7735_TFT.c: 17: int count;
  7038                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  7039                           
  7040                           ;incstack = 0
  7041  001554  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7042  001558  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7043  00155C  0E00               	movlw	0
  7044  00155E  6E14               	movwf	___wmul@multiplicand+1,c
  7045  001560  0EFA               	movlw	250
  7046  001562  6E13               	movwf	___wmul@multiplicand,c
  7047  001564  EC4D  F00C         	call	___wmul	;wreg free
  7048  001568  C011  F01B         	movff	?___wmul,delay_ms@count
  7049  00156C  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7050                           
  7051                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  7052  001570  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7053  001574  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7054  001578  1E19               	comf	??_delay_ms,f,c
  7055  00157A  1E1A               	comf	??_delay_ms+1,f,c
  7056  00157C  4A19               	infsnz	??_delay_ms,f,c
  7057  00157E  2A1A               	incf	??_delay_ms+1,f,c
  7058  001580  0EFF               	movlw	255
  7059  001582  2419               	addwf	??_delay_ms,w,c
  7060  001584  6E1B               	movwf	delay_ms@count,c
  7061  001586  0EFF               	movlw	255
  7062  001588  201A               	addwfc	??_delay_ms+1,w,c
  7063  00158A  6E1C               	movwf	delay_ms@count+1,c
  7064                           
  7065                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  7066  00158C  0EB8               	movlw	184
  7067  00158E  6EB1               	movwf	4017,c	;volatile
  7068                           
  7069                           ;ST7735_TFT.c: 23: TMR0L = count & 0x00ff;
  7070  001590  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  7071                           
  7072                           ;ST7735_TFT.c: 24: TMR0H = count >> 8;
  7073  001594  501C               	movf	delay_ms@count+1,w,c
  7074  001596  6ED7               	movwf	4055,c	;volatile
  7075                           
  7076                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  7077  001598  92A1               	bcf	4001,1,c	;volatile
  7078                           
  7079                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  7080  00159A  80B1               	bsf	4017,0,c	;volatile
  7081                           
  7082                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  7083  00159C  D000               	goto	l391
  7084  00159E                     l391:
  7085  00159E  A2A1               	btfss	4001,1,c	;volatile
  7086  0015A0  D7FE               	goto	l391
  7087                           
  7088                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  7089  0015A2  90B1               	bcf	4017,0,c	;volatile
  7090  0015A4  0012               	return		;funcret
  7091  0015A6                     __end_of_delay_ms:
  7092                           	opt stack 0
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           intcon2	equ	0xFF1
  7101                           postinc0	equ	0xFEE
  7102                           wreg	equ	0xFE8
  7103                           postdec1	equ	0xFE5
  7104                           fsr1l	equ	0xFE1
  7105                           indf2	equ	0xFDF
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           fsr2h	equ	0xFDA
  7109                           fsr2l	equ	0xFD9
  7110                           status	equ	0xFD8
  7111                           
  7112 ;; *************** function ___wmul *****************
  7113 ;; Defined at:
  7114 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;  multiplier      2   16[COMRAM] unsigned int 
  7117 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;  product         2   20[COMRAM] unsigned int 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  2   16[COMRAM] unsigned int 
  7122 ;; Registers used:
  7123 ;;		wreg, status,2, status,0, prodl, prodh
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;Total ram usage:        6 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    3
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_delay_ms
  7140 ;;		_drawChar
  7141 ;;		_printf
  7142 ;;		_Read_Volt
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text32
  7147  00189A                     __ptext32:
  7148                           	opt stack 0
  7149  00189A                     ___wmul:
  7150                           	opt stack 26
  7151                           
  7152                           ;incstack = 0
  7153  00189A  5011               	movf	___wmul@multiplier,w,c
  7154  00189C  0213               	mulwf	___wmul@multiplicand,c
  7155  00189E  CFF3 F015          	movff	prodl,___wmul@product
  7156  0018A2  CFF4 F016          	movff	prodh,___wmul@product+1
  7157  0018A6  5011               	movf	___wmul@multiplier,w,c
  7158  0018A8  0214               	mulwf	___wmul@multiplicand+1,c
  7159  0018AA  50F3               	movf	prodl,w,c
  7160  0018AC  2616               	addwf	___wmul@product+1,f,c
  7161  0018AE  5012               	movf	___wmul@multiplier+1,w,c
  7162  0018B0  0213               	mulwf	___wmul@multiplicand,c
  7163  0018B2  50F3               	movf	prodl,w,c
  7164  0018B4  2616               	addwf	___wmul@product+1,f,c
  7165  0018B6  C015  F011         	movff	___wmul@product,?___wmul
  7166  0018BA  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7167  0018BE  D000               	goto	l792
  7168  0018C0                     l792:
  7169  0018C0  0012               	return		;funcret
  7170  0018C2                     __end_of___wmul:
  7171                           	opt stack 0
  7172                           tblptru	equ	0xFF8
  7173                           tblptrh	equ	0xFF7
  7174                           tblptrl	equ	0xFF6
  7175                           tablat	equ	0xFF5
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           intcon	equ	0xFF2
  7179                           intcon2	equ	0xFF1
  7180                           postinc0	equ	0xFEE
  7181                           wreg	equ	0xFE8
  7182                           postdec1	equ	0xFE5
  7183                           fsr1l	equ	0xFE1
  7184                           indf2	equ	0xFDF
  7185                           postinc2	equ	0xFDE
  7186                           postdec2	equ	0xFDD
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function _Init_UART *****************
  7192 ;; Defined at:
  7193 ;;		line 24 in file "utils.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;		None
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;		None               void
  7200 ;; Registers used:
  7201 ;;		wreg, status,2, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;Total ram usage:        0 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    4
  7214 ;; This function calls:
  7215 ;;		_OpenUSART
  7216 ;; This function is called by:
  7217 ;;		_main
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text33
  7222  0019B4                     __ptext33:
  7223                           	opt stack 0
  7224  0019B4                     _Init_UART:
  7225                           	opt stack 26
  7226                           
  7227                           ;utils.c: 26: OpenUSART (0b01111111 & 0b10111111 &
  7228                           ;utils.c: 27: 0b11111110 & 0b11111101 & 0b11111111 &
  7229                           ;utils.c: 28: 0b11111111, 25);
  7230                           
  7231                           ;incstack = 0
  7232  0019B4  0E00               	movlw	0
  7233  0019B6  6E12               	movwf	OpenUSART@spbrg+1,c
  7234  0019B8  0E19               	movlw	25
  7235  0019BA  6E11               	movwf	OpenUSART@spbrg,c
  7236  0019BC  0E3C               	movlw	60
  7237  0019BE  EC8C  F009         	call	_OpenUSART
  7238                           
  7239                           ;utils.c: 29: OSCCON = 0x70;
  7240  0019C2  0E70               	movlw	112
  7241  0019C4  6ED3               	movwf	4051,c	;volatile
  7242  0019C6  0012               	return		;funcret
  7243  0019C8                     __end_of_Init_UART:
  7244                           	opt stack 0
  7245                           tblptru	equ	0xFF8
  7246                           tblptrh	equ	0xFF7
  7247                           tblptrl	equ	0xFF6
  7248                           tablat	equ	0xFF5
  7249                           prodh	equ	0xFF4
  7250                           prodl	equ	0xFF3
  7251                           intcon	equ	0xFF2
  7252                           intcon2	equ	0xFF1
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           postdec1	equ	0xFE5
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function _OpenUSART *****************
  7265 ;; Defined at:
  7266 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  config          1    wreg     unsigned char 
  7269 ;;  spbrg           2   16[COMRAM] unsigned int 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  config          1   18[COMRAM] unsigned char 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;		None               void
  7274 ;; Registers used:
  7275 ;;		wreg, status,2
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7281 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;Total ram usage:        3 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    3
  7288 ;; This function calls:
  7289 ;;		Nothing
  7290 ;; This function is called by:
  7291 ;;		_Init_UART
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text34
  7296  001318                     __ptext34:
  7297                           	opt stack 0
  7298  001318                     _OpenUSART:
  7299                           	opt stack 26
  7300                           
  7301                           ;incstack = 0
  7302                           ;OpenUSART@config stored from wreg
  7303  001318  6E13               	movwf	OpenUSART@config,c
  7304  00131A  0E00               	movlw	0
  7305  00131C  6EAC               	movwf	4012,c	;volatile
  7306  00131E  0E00               	movlw	0
  7307  001320  6EAB               	movwf	4011,c	;volatile
  7308  001322  A013               	btfss	OpenUSART@config,0,c
  7309  001324  D002               	goto	l4846
  7310  001326  88AC               	bsf	4012,4,c	;volatile
  7311  001328  D000               	goto	l4846
  7312  00132A                     l4846:
  7313  00132A  A213               	btfss	OpenUSART@config,1,c
  7314  00132C  D003               	goto	l4850
  7315  00132E  8CAC               	bsf	4012,6,c	;volatile
  7316  001330  8CAB               	bsf	4011,6,c	;volatile
  7317  001332  D000               	goto	l4850
  7318  001334                     l4850:
  7319  001334  A413               	btfss	OpenUSART@config,2,c
  7320  001336  D002               	goto	l4854
  7321  001338  8EAC               	bsf	4012,7,c	;volatile
  7322  00133A  D000               	goto	l4854
  7323  00133C                     l4854:
  7324  00133C  A613               	btfss	OpenUSART@config,3,c
  7325  00133E  D002               	goto	l780
  7326  001340  88AB               	bsf	4011,4,c	;volatile
  7327  001342  D002               	goto	l4858
  7328  001344                     l780:
  7329  001344  8AAB               	bsf	4011,5,c	;volatile
  7330  001346  D000               	goto	l4858
  7331  001348                     l4858:
  7332  001348  B813               	btfsc	OpenUSART@config,4,c
  7333  00134A  84AC               	bsf	4012,2,c	;volatile
  7334  00134C  989E               	bcf	3998,4,c	;volatile
  7335  00134E  AA13               	btfss	OpenUSART@config,5,c
  7336  001350  D002               	goto	l4866
  7337  001352  86AB               	bsf	4011,3,c	;volatile
  7338  001354  D000               	goto	l4866
  7339  001356                     l4866:
  7340  001356  AC13               	btfss	OpenUSART@config,6,c
  7341  001358  D002               	goto	l784
  7342  00135A  8A9D               	bsf	3997,5,c	;volatile
  7343  00135C  D001               	goto	l785
  7344  00135E                     l784:
  7345  00135E  9A9D               	bcf	3997,5,c	;volatile
  7346  001360                     l785:
  7347  001360  9A9E               	bcf	3998,5,c	;volatile
  7348  001362  AE13               	btfss	OpenUSART@config,7,c
  7349  001364  D002               	goto	l786
  7350  001366  889D               	bsf	3997,4,c	;volatile
  7351  001368  D001               	goto	l787
  7352  00136A                     l786:
  7353  00136A  989D               	bcf	3997,4,c	;volatile
  7354  00136C                     l787:
  7355  00136C  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7356  001370  5012               	movf	OpenUSART@spbrg+1,w,c
  7357  001372  6EB0               	movwf	4016,c	;volatile
  7358  001374  8AAC               	bsf	4012,5,c	;volatile
  7359  001376  8EAB               	bsf	4011,7,c	;volatile
  7360  001378  9C94               	bcf	3988,6,c	;volatile
  7361  00137A  8E94               	bsf	3988,7,c	;volatile
  7362  00137C  B8AC               	btfsc	4012,4,c	;volatile
  7363  00137E  BEAC               	btfsc	4012,7,c	;volatile
  7364  001380  D002               	goto	l789
  7365  001382  8C94               	bsf	3988,6,c	;volatile
  7366  001384  D000               	goto	l789
  7367  001386                     l789:
  7368  001386  0012               	return		;funcret
  7369  001388                     __end_of_OpenUSART:
  7370                           	opt stack 0
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           intcon	equ	0xFF2
  7378                           intcon2	equ	0xFF1
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1l	equ	0xFE1
  7383                           indf2	equ	0xFDF
  7384                           postinc2	equ	0xFDE
  7385                           postdec2	equ	0xFDD
  7386                           fsr2h	equ	0xFDA
  7387                           fsr2l	equ	0xFD9
  7388                           status	equ	0xFD8
  7389                           
  7390 ;; *************** function _Init_Interrupt *****************
  7391 ;; Defined at:
  7392 ;;		line 16 in file "Interrupt.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;		None               void
  7399 ;; Registers used:
  7400 ;;		wreg, status,2
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;Total ram usage:        0 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    3
  7413 ;; This function calls:
  7414 ;;		Nothing
  7415 ;; This function is called by:
  7416 ;;		_main
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           	psect	text35
  7421  001972                     __ptext35:
  7422                           	opt stack 0
  7423  001972                     _Init_Interrupt:
  7424                           	opt stack 27
  7425                           
  7426                           ;Interrupt.c: 18: INTCON3bits.INT2IF = 0;
  7427                           
  7428                           ;incstack = 0
  7429  001972  92F0               	bcf	intcon3,1,c	;volatile
  7430                           
  7431                           ;Interrupt.c: 19: INTCON2bits.INTEDG2 = 0;
  7432  001974  98F1               	bcf	intcon2,4,c	;volatile
  7433                           
  7434                           ;Interrupt.c: 20: INTCON3bits.INT2IE = 1;
  7435  001976  88F0               	bsf	intcon3,4,c	;volatile
  7436                           
  7437                           ;Interrupt.c: 22: TMR1H = 0;
  7438  001978  0E00               	movlw	0
  7439  00197A  6ECF               	movwf	4047,c	;volatile
  7440                           
  7441                           ;Interrupt.c: 23: TMR1L = 0;
  7442  00197C  0E00               	movlw	0
  7443  00197E  6ECE               	movwf	4046,c	;volatile
  7444                           
  7445                           ;Interrupt.c: 24: PIR1bits.TMR1IF = 0;
  7446  001980  909E               	bcf	3998,0,c	;volatile
  7447                           
  7448                           ;Interrupt.c: 25: PIE1bits.TMR1IE = 1;
  7449  001982  809D               	bsf	3997,0,c	;volatile
  7450                           
  7451                           ;Interrupt.c: 26: INTCONbits.PEIE = 1;
  7452  001984  8CF2               	bsf	intcon,6,c	;volatile
  7453                           
  7454                           ;Interrupt.c: 27: INTCONbits.GIE = 1;
  7455  001986  8EF2               	bsf	intcon,7,c	;volatile
  7456  001988  0012               	return		;funcret
  7457  00198A                     __end_of_Init_Interrupt:
  7458                           	opt stack 0
  7459                           tblptru	equ	0xFF8
  7460                           tblptrh	equ	0xFF7
  7461                           tblptrl	equ	0xFF6
  7462                           tablat	equ	0xFF5
  7463                           prodh	equ	0xFF4
  7464                           prodl	equ	0xFF3
  7465                           intcon	equ	0xFF2
  7466                           intcon2	equ	0xFF1
  7467                           intcon3	equ	0xFF0
  7468                           postinc0	equ	0xFEE
  7469                           wreg	equ	0xFE8
  7470                           postdec1	equ	0xFE5
  7471                           fsr1l	equ	0xFE1
  7472                           indf2	equ	0xFDF
  7473                           postinc2	equ	0xFDE
  7474                           postdec2	equ	0xFDD
  7475                           fsr2h	equ	0xFDA
  7476                           fsr2l	equ	0xFD9
  7477                           status	equ	0xFD8
  7478                           
  7479 ;; *************** function _I2C_Init *****************
  7480 ;; Defined at:
  7481 ;;		line 10 in file "I2C_Soft.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  c               4   16[COMRAM] unsigned long 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;		None
  7486 ;; Return value:  Size  Location     Type
  7487 ;;		None               void
  7488 ;; Registers used:
  7489 ;;		wreg, cstack
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;Total ram usage:        4 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    4
  7502 ;; This function calls:
  7503 ;;		_i2cHighScl
  7504 ;;		_i2cHighSda
  7505 ;; This function is called by:
  7506 ;;		_main
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text36
  7511  001A72                     __ptext36:
  7512                           	opt stack 0
  7513  001A72                     _I2C_Init:
  7514                           	opt stack 26
  7515                           
  7516                           ;I2C_Soft.c: 12: i2cHighScl();
  7517                           
  7518                           ;incstack = 0
  7519  001A72  EC28  F00D         	call	_i2cHighScl	;wreg free
  7520                           
  7521                           ;I2C_Soft.c: 13: i2cHighSda();
  7522  001A76  EC50  F00D         	call	_i2cHighSda	;wreg free
  7523  001A7A  0012               	return		;funcret
  7524  001A7C                     __end_of_I2C_Init:
  7525                           	opt stack 0
  7526                           tblptru	equ	0xFF8
  7527                           tblptrh	equ	0xFF7
  7528                           tblptrl	equ	0xFF6
  7529                           tablat	equ	0xFF5
  7530                           prodh	equ	0xFF4
  7531                           prodl	equ	0xFF3
  7532                           intcon	equ	0xFF2
  7533                           intcon2	equ	0xFF1
  7534                           intcon3	equ	0xFF0
  7535                           postinc0	equ	0xFEE
  7536                           wreg	equ	0xFE8
  7537                           postdec1	equ	0xFE5
  7538                           fsr1l	equ	0xFE1
  7539                           indf2	equ	0xFDF
  7540                           postinc2	equ	0xFDE
  7541                           postdec2	equ	0xFDD
  7542                           fsr2h	equ	0xFDA
  7543                           fsr2l	equ	0xFD9
  7544                           status	equ	0xFD8
  7545                           
  7546 ;; *************** function _Enable_INT_Interrupt *****************
  7547 ;; Defined at:
  7548 ;;		line 30 in file "Interrupt.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;		None
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;		None               void
  7555 ;; Registers used:
  7556 ;;		None
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;Total ram usage:        0 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    3
  7569 ;; This function calls:
  7570 ;;		Nothing
  7571 ;; This function is called by:
  7572 ;;		_main
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text37
  7577  001AB0                     __ptext37:
  7578                           	opt stack 0
  7579  001AB0                     _Enable_INT_Interrupt:
  7580                           	opt stack 27
  7581                           
  7582                           ;Interrupt.c: 32: INTCON3bits.INT2IE = 1;
  7583                           
  7584                           ;incstack = 0
  7585  001AB0  88F0               	bsf	intcon3,4,c	;volatile
  7586                           
  7587                           ;Interrupt.c: 33: INTCON2bits.INTEDG2 = 0;
  7588  001AB2  98F1               	bcf	intcon2,4,c	;volatile
  7589  001AB4  0012               	return		;funcret
  7590  001AB6                     __end_of_Enable_INT_Interrupt:
  7591                           	opt stack 0
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           intcon	equ	0xFF2
  7599                           intcon2	equ	0xFF1
  7600                           intcon3	equ	0xFF0
  7601                           postinc0	equ	0xFEE
  7602                           wreg	equ	0xFE8
  7603                           postdec1	equ	0xFE5
  7604                           fsr1l	equ	0xFE1
  7605                           indf2	equ	0xFDF
  7606                           postinc2	equ	0xFDE
  7607                           postdec2	equ	0xFDD
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8
  7611                           
  7612 ;; *************** function _Deactivate_Buzzer *****************
  7613 ;; Defined at:
  7614 ;;		line 89 in file "utils.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;		None
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;		None
  7619 ;; Return value:  Size  Location     Type
  7620 ;;		None               void
  7621 ;; Registers used:
  7622 ;;		wreg, status,2
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;Total ram usage:        0 bytes
  7633 ;; Hardware stack levels used:    1
  7634 ;; Hardware stack levels required when called:    3
  7635 ;; This function calls:
  7636 ;;		Nothing
  7637 ;; This function is called by:
  7638 ;;		_main
  7639 ;;		_Do_Beep
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text38
  7644  001A90                     __ptext38:
  7645                           	opt stack 0
  7646  001A90                     _Deactivate_Buzzer:
  7647                           	opt stack 27
  7648                           
  7649                           ;utils.c: 91: CCP2CON = 0x0;
  7650                           
  7651                           ;incstack = 0
  7652  001A90  0E00               	movlw	0
  7653  001A92  6EBA               	movwf	4026,c	;volatile
  7654                           
  7655                           ;utils.c: 92: PORTCbits.RC1 = 0;
  7656  001A94  9282               	bcf	3970,1,c	;volatile
  7657  001A96  0012               	return		;funcret
  7658  001A98                     __end_of_Deactivate_Buzzer:
  7659                           	opt stack 0
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           intcon	equ	0xFF2
  7667                           intcon2	equ	0xFF1
  7668                           intcon3	equ	0xFF0
  7669                           postinc0	equ	0xFEE
  7670                           wreg	equ	0xFE8
  7671                           postdec1	equ	0xFE5
  7672                           fsr1l	equ	0xFE1
  7673                           indf2	equ	0xFDF
  7674                           postinc2	equ	0xFDE
  7675                           postdec2	equ	0xFDD
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function _DS3231_Setup_Time *****************
  7681 ;; Defined at:
  7682 ;;		line 79 in file "I2C_Support.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;		None
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  Address         1   19[COMRAM] unsigned char 
  7687 ;;  Device          1   18[COMRAM] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;		None               void
  7690 ;; Registers used:
  7691 ;;		wreg, status,2, status,0, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;Total ram usage:        2 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    5
  7704 ;; This function calls:
  7705 ;;		_I2C_Start
  7706 ;;		_I2C_Stop
  7707 ;;		_I2C_Write
  7708 ;; This function is called by:
  7709 ;;		_main
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text39
  7714  001388                     __ptext39:
  7715                           	opt stack 0
  7716  001388                     _DS3231_Setup_Time:
  7717                           	opt stack 25
  7718                           
  7719                           ;I2C_Support.c: 81: char Device = 0x68;
  7720                           
  7721                           ;incstack = 0
  7722  001388  0E68               	movlw	104
  7723  00138A  6E13               	movwf	DS3231_Setup_Time@Device,c
  7724                           
  7725                           ;I2C_Support.c: 82: char Address = 0x00;
  7726  00138C  0E00               	movlw	0
  7727  00138E  6E14               	movwf	DS3231_Setup_Time@Address,c
  7728                           
  7729                           ;I2C_Support.c: 83: second = 0x00;
  7730  001390  0E00               	movlw	0
  7731  001392  6E60               	movwf	_second,c
  7732                           
  7733                           ;I2C_Support.c: 84: minute = 0x15;
  7734  001394  0E15               	movlw	21
  7735  001396  6E5D               	movwf	_minute,c
  7736                           
  7737                           ;I2C_Support.c: 85: hour = 0x7;
  7738  001398  0E07               	movlw	7
  7739  00139A  6E5C               	movwf	_hour,c
  7740                           
  7741                           ;I2C_Support.c: 86: dow = 0x04;
  7742  00139C  0E04               	movlw	4
  7743  00139E  6E5B               	movwf	_dow,c
  7744                           
  7745                           ;I2C_Support.c: 87: day = 0x07;
  7746  0013A0  0E07               	movlw	7
  7747  0013A2  6E5A               	movwf	_day,c
  7748                           
  7749                           ;I2C_Support.c: 88: month = 0x11;
  7750  0013A4  0E11               	movlw	17
  7751  0013A6  6E5E               	movwf	_month,c
  7752                           
  7753                           ;I2C_Support.c: 89: year = 0x24;
  7754  0013A8  0E24               	movlw	36
  7755  0013AA  6E6A               	movwf	_year,c
  7756                           
  7757                           ;I2C_Support.c: 90: I2C_Start();
  7758  0013AC  ECFF  F00C         	call	_I2C_Start	;wreg free
  7759                           
  7760                           ;I2C_Support.c: 91: I2C_Write((Device << 1) | 0);
  7761  0013B0  5013               	movf	DS3231_Setup_Time@Device,w,c
  7762  0013B2  2413               	addwf	DS3231_Setup_Time@Device,w,c
  7763  0013B4  ECCC  F00B         	call	_I2C_Write
  7764                           
  7765                           ;I2C_Support.c: 92: I2C_Write(Address);
  7766  0013B8  5014               	movf	DS3231_Setup_Time@Address,w,c
  7767  0013BA  ECCC  F00B         	call	_I2C_Write
  7768                           
  7769                           ;I2C_Support.c: 93: I2C_Write(second);
  7770  0013BE  5060               	movf	_second,w,c
  7771  0013C0  ECCC  F00B         	call	_I2C_Write
  7772                           
  7773                           ;I2C_Support.c: 94: I2C_Write(minute);
  7774  0013C4  505D               	movf	_minute,w,c
  7775  0013C6  ECCC  F00B         	call	_I2C_Write
  7776                           
  7777                           ;I2C_Support.c: 95: I2C_Write(hour);
  7778  0013CA  505C               	movf	_hour,w,c
  7779  0013CC  ECCC  F00B         	call	_I2C_Write
  7780                           
  7781                           ;I2C_Support.c: 96: I2C_Write(dow);
  7782  0013D0  505B               	movf	_dow,w,c
  7783  0013D2  ECCC  F00B         	call	_I2C_Write
  7784                           
  7785                           ;I2C_Support.c: 97: I2C_Write(day);
  7786  0013D6  505A               	movf	_day,w,c
  7787  0013D8  ECCC  F00B         	call	_I2C_Write
  7788                           
  7789                           ;I2C_Support.c: 98: I2C_Write(month);
  7790  0013DC  505E               	movf	_month,w,c
  7791  0013DE  ECCC  F00B         	call	_I2C_Write
  7792                           
  7793                           ;I2C_Support.c: 99: I2C_Write(year);
  7794  0013E2  506A               	movf	_year,w,c
  7795  0013E4  ECCC  F00B         	call	_I2C_Write
  7796                           
  7797                           ;I2C_Support.c: 101: I2C_Stop();
  7798  0013E8  ECF6  F00C         	call	_I2C_Stop	;wreg free
  7799  0013EC  0012               	return		;funcret
  7800  0013EE                     __end_of_DS3231_Setup_Time:
  7801                           	opt stack 0
  7802                           tblptru	equ	0xFF8
  7803                           tblptrh	equ	0xFF7
  7804                           tblptrl	equ	0xFF6
  7805                           tablat	equ	0xFF5
  7806                           prodh	equ	0xFF4
  7807                           prodl	equ	0xFF3
  7808                           intcon	equ	0xFF2
  7809                           intcon2	equ	0xFF1
  7810                           intcon3	equ	0xFF0
  7811                           postinc0	equ	0xFEE
  7812                           wreg	equ	0xFE8
  7813                           postdec1	equ	0xFE5
  7814                           fsr1l	equ	0xFE1
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           fsr2h	equ	0xFDA
  7819                           fsr2l	equ	0xFD9
  7820                           status	equ	0xFD8
  7821                           
  7822 ;; *************** function _DS3231_Read_Time *****************
  7823 ;; Defined at:
  7824 ;;		line 59 in file "I2C_Support.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;		None
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;  Device          1   20[COMRAM] unsigned char 
  7829 ;;  Address         1   19[COMRAM] unsigned char 
  7830 ;;  Data_Ret        1    0        unsigned char 
  7831 ;; Return value:  Size  Location     Type
  7832 ;;		None               void
  7833 ;; Registers used:
  7834 ;;		wreg, status,2, status,0, cstack
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;Total ram usage:        2 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:    6
  7847 ;; This function calls:
  7848 ;;		_I2C_ReStart
  7849 ;;		_I2C_Read
  7850 ;;		_I2C_Start
  7851 ;;		_I2C_Stop
  7852 ;;		_I2C_Write
  7853 ;; This function is called by:
  7854 ;;		_main
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text40
  7859  0013EE                     __ptext40:
  7860                           	opt stack 0
  7861  0013EE                     _DS3231_Read_Time:
  7862                           	opt stack 24
  7863                           
  7864                           ;I2C_Support.c: 61: char Device = 0x68;
  7865                           
  7866                           ;incstack = 0
  7867  0013EE  0E68               	movlw	104
  7868  0013F0  6E15               	movwf	DS3231_Read_Time@Device,c
  7869                           
  7870                           ;I2C_Support.c: 62: char Address = 0x00;
  7871  0013F2  0E00               	movlw	0
  7872  0013F4  6E14               	movwf	DS3231_Read_Time@Address,c
  7873                           
  7874                           ;I2C_Support.c: 63: char Data_Ret;
  7875                           ;I2C_Support.c: 64: I2C_Start();
  7876  0013F6  ECFF  F00C         	call	_I2C_Start	;wreg free
  7877                           
  7878                           ;I2C_Support.c: 65: I2C_Write((Device << 1) | 0);
  7879  0013FA  5015               	movf	DS3231_Read_Time@Device,w,c
  7880  0013FC  2415               	addwf	DS3231_Read_Time@Device,w,c
  7881  0013FE  ECCC  F00B         	call	_I2C_Write
  7882                           
  7883                           ;I2C_Support.c: 66: I2C_Write(Address);
  7884  001402  5014               	movf	DS3231_Read_Time@Address,w,c
  7885  001404  ECCC  F00B         	call	_I2C_Write
  7886                           
  7887                           ;I2C_Support.c: 67: I2C_ReStart();
  7888  001408  ECC5  F00C         	call	_I2C_ReStart	;wreg free
  7889                           
  7890                           ;I2C_Support.c: 68: I2C_Write((Device << 1) | 1);
  7891  00140C  80D8               	bsf	status,0,c
  7892  00140E  3415               	rlcf	DS3231_Read_Time@Device,w,c
  7893  001410  ECCC  F00B         	call	_I2C_Write
  7894                           
  7895                           ;I2C_Support.c: 69: second = I2C_Read(1);
  7896  001414  0E01               	movlw	1
  7897  001416  EC6A  F00B         	call	_I2C_Read
  7898  00141A  6E60               	movwf	_second,c
  7899                           
  7900                           ;I2C_Support.c: 70: minute = I2C_Read(1);
  7901  00141C  0E01               	movlw	1
  7902  00141E  EC6A  F00B         	call	_I2C_Read
  7903  001422  6E5D               	movwf	_minute,c
  7904                           
  7905                           ;I2C_Support.c: 71: hour = I2C_Read(1);
  7906  001424  0E01               	movlw	1
  7907  001426  EC6A  F00B         	call	_I2C_Read
  7908  00142A  6E5C               	movwf	_hour,c
  7909                           
  7910                           ;I2C_Support.c: 72: dow = I2C_Read(1);
  7911  00142C  0E01               	movlw	1
  7912  00142E  EC6A  F00B         	call	_I2C_Read
  7913  001432  6E5B               	movwf	_dow,c
  7914                           
  7915                           ;I2C_Support.c: 73: day = I2C_Read(1);
  7916  001434  0E01               	movlw	1
  7917  001436  EC6A  F00B         	call	_I2C_Read
  7918  00143A  6E5A               	movwf	_day,c
  7919                           
  7920                           ;I2C_Support.c: 74: month = I2C_Read(1);
  7921  00143C  0E01               	movlw	1
  7922  00143E  EC6A  F00B         	call	_I2C_Read
  7923  001442  6E5E               	movwf	_month,c
  7924                           
  7925                           ;I2C_Support.c: 75: year = I2C_Read(0);
  7926  001444  0E00               	movlw	0
  7927  001446  EC6A  F00B         	call	_I2C_Read
  7928  00144A  6E6A               	movwf	_year,c
  7929                           
  7930                           ;I2C_Support.c: 76: I2C_Stop();
  7931  00144C  ECF6  F00C         	call	_I2C_Stop	;wreg free
  7932  001450  0012               	return		;funcret
  7933  001452                     __end_of_DS3231_Read_Time:
  7934                           	opt stack 0
  7935                           tblptru	equ	0xFF8
  7936                           tblptrh	equ	0xFF7
  7937                           tblptrl	equ	0xFF6
  7938                           tablat	equ	0xFF5
  7939                           prodh	equ	0xFF4
  7940                           prodl	equ	0xFF3
  7941                           intcon	equ	0xFF2
  7942                           intcon2	equ	0xFF1
  7943                           intcon3	equ	0xFF0
  7944                           postinc0	equ	0xFEE
  7945                           wreg	equ	0xFE8
  7946                           postdec1	equ	0xFE5
  7947                           fsr1l	equ	0xFE1
  7948                           indf2	equ	0xFDF
  7949                           postinc2	equ	0xFDE
  7950                           postdec2	equ	0xFDD
  7951                           fsr2h	equ	0xFDA
  7952                           fsr2l	equ	0xFD9
  7953                           status	equ	0xFD8
  7954                           
  7955 ;; *************** function _DS1621_Read_Temp *****************
  7956 ;; Defined at:
  7957 ;;		line 22 in file "I2C_Support.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;  Device          1   21[COMRAM] unsigned char 
  7962 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  7963 ;;  Cmd             1   19[COMRAM] unsigned char 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      unsigned char 
  7966 ;; Registers used:
  7967 ;;		wreg, status,2, status,0, cstack
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:        3 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    6
  7980 ;; This function calls:
  7981 ;;		_I2C_ReStart
  7982 ;;		_I2C_Read
  7983 ;;		_I2C_Start
  7984 ;;		_I2C_Stop
  7985 ;;		_I2C_Write
  7986 ;; This function is called by:
  7987 ;;		_main
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           	psect	text41
  7992  0017D6                     __ptext41:
  7993                           	opt stack 0
  7994  0017D6                     _DS1621_Read_Temp:
  7995                           	opt stack 24
  7996                           
  7997                           ;I2C_Support.c: 24: char Device = 0x48;
  7998                           
  7999                           ;incstack = 0
  8000  0017D6  0E48               	movlw	72
  8001  0017D8  6E16               	movwf	DS1621_Read_Temp@Device,c
  8002                           
  8003                           ;I2C_Support.c: 25: char Cmd = 0xAA;
  8004  0017DA  0EAA               	movlw	170
  8005  0017DC  6E14               	movwf	DS1621_Read_Temp@Cmd,c
  8006                           
  8007                           ;I2C_Support.c: 26: char Data_Ret;
  8008                           ;I2C_Support.c: 27: I2C_Start();
  8009  0017DE  ECFF  F00C         	call	_I2C_Start	;wreg free
  8010                           
  8011                           ;I2C_Support.c: 28: I2C_Write((Device << 1) | 0);
  8012  0017E2  5016               	movf	DS1621_Read_Temp@Device,w,c
  8013  0017E4  2416               	addwf	DS1621_Read_Temp@Device,w,c
  8014  0017E6  ECCC  F00B         	call	_I2C_Write
  8015                           
  8016                           ;I2C_Support.c: 29: I2C_Write(Cmd);
  8017  0017EA  5014               	movf	DS1621_Read_Temp@Cmd,w,c
  8018  0017EC  ECCC  F00B         	call	_I2C_Write
  8019                           
  8020                           ;I2C_Support.c: 30: I2C_ReStart();
  8021  0017F0  ECC5  F00C         	call	_I2C_ReStart	;wreg free
  8022                           
  8023                           ;I2C_Support.c: 31: I2C_Write((Device << 1) | 1);
  8024  0017F4  80D8               	bsf	status,0,c
  8025  0017F6  3416               	rlcf	DS1621_Read_Temp@Device,w,c
  8026  0017F8  ECCC  F00B         	call	_I2C_Write
  8027                           
  8028                           ;I2C_Support.c: 32: Data_Ret = I2C_Read(0);
  8029  0017FC  0E00               	movlw	0
  8030  0017FE  EC6A  F00B         	call	_I2C_Read
  8031  001802  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
  8032                           
  8033                           ;I2C_Support.c: 33: I2C_Stop();
  8034  001804  ECF6  F00C         	call	_I2C_Stop	;wreg free
  8035                           
  8036                           ;I2C_Support.c: 34: return Data_Ret;
  8037  001808  5015               	movf	DS1621_Read_Temp@Data_Ret,w,c
  8038  00180A  D000               	goto	l106
  8039  00180C                     l106:
  8040  00180C  0012               	return		;funcret
  8041  00180E                     __end_of_DS1621_Read_Temp:
  8042                           	opt stack 0
  8043                           tblptru	equ	0xFF8
  8044                           tblptrh	equ	0xFF7
  8045                           tblptrl	equ	0xFF6
  8046                           tablat	equ	0xFF5
  8047                           prodh	equ	0xFF4
  8048                           prodl	equ	0xFF3
  8049                           intcon	equ	0xFF2
  8050                           intcon2	equ	0xFF1
  8051                           intcon3	equ	0xFF0
  8052                           postinc0	equ	0xFEE
  8053                           wreg	equ	0xFE8
  8054                           postdec1	equ	0xFE5
  8055                           fsr1l	equ	0xFE1
  8056                           indf2	equ	0xFDF
  8057                           postinc2	equ	0xFDE
  8058                           postdec2	equ	0xFDD
  8059                           fsr2h	equ	0xFDA
  8060                           fsr2l	equ	0xFD9
  8061                           status	equ	0xFD8
  8062                           
  8063 ;; *************** function _I2C_Read *****************
  8064 ;; Defined at:
  8065 ;;		line 16 in file "I2C_Soft.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;  ack             1    wreg     unsigned char 
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;  ack             1   16[COMRAM] unsigned char 
  8070 ;;  inByte          1   18[COMRAM] unsigned char 
  8071 ;;  n               1   17[COMRAM] unsigned char 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      unsigned char 
  8074 ;; Registers used:
  8075 ;;		wreg, status,2, status,0, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;Total ram usage:        3 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    5
  8088 ;; This function calls:
  8089 ;;		_i2cAck
  8090 ;;		_i2cHighScl
  8091 ;;		_i2cHighSda
  8092 ;;		_i2cLowScl
  8093 ;;		_i2cNack
  8094 ;; This function is called by:
  8095 ;;		_DS1621_Read_Temp
  8096 ;;		_DS3231_Read_Time
  8097 ;;		_DS1621_Read_Temp_Bad
  8098 ;;		_I2C_Write_Address_Read_One_Byte
  8099 ;;		_I2C_Write_Cmd_Read_One_Byte
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           	psect	text42
  8104  0016D4                     __ptext42:
  8105                           	opt stack 0
  8106  0016D4                     _I2C_Read:
  8107                           	opt stack 24
  8108                           
  8109                           ;incstack = 0
  8110                           ;I2C_Read@ack stored from wreg
  8111  0016D4  6E11               	movwf	I2C_Read@ack,c
  8112                           
  8113                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  8114                           ;I2C_Soft.c: 19: i2cHighSda();
  8115  0016D6  EC50  F00D         	call	_i2cHighSda	;wreg free
  8116                           
  8117                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  8118  0016DA  0E00               	movlw	0
  8119  0016DC  6E12               	movwf	I2C_Read@n,c
  8120  0016DE                     l4698:
  8121  0016DE  0E07               	movlw	7
  8122  0016E0  6412               	cpfsgt	I2C_Read@n,c
  8123  0016E2  D001               	goto	l4702
  8124  0016E4  D00F               	goto	l4716
  8125  0016E6                     l4702:
  8126                           
  8127                           ;I2C_Soft.c: 21: {
  8128                           ;I2C_Soft.c: 22: i2cHighScl();
  8129  0016E6  EC28  F00D         	call	_i2cHighScl	;wreg free
  8130                           
  8131                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
  8132  0016EA  AA81               	btfss	3969,5,c	;volatile
  8133  0016EC  D003               	goto	l4708
  8134                           
  8135                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  8136  0016EE  80D8               	bsf	status,0,c
  8137  0016F0  3613               	rlcf	I2C_Read@inByte,f,c
  8138  0016F2  D004               	goto	l4710
  8139  0016F4                     l4708:
  8140                           
  8141                           ;I2C_Soft.c: 26: else
  8142                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  8143  0016F4  5013               	movf	I2C_Read@inByte,w,c
  8144  0016F6  2413               	addwf	I2C_Read@inByte,w,c
  8145  0016F8  6E13               	movwf	I2C_Read@inByte,c
  8146  0016FA  D000               	goto	l4710
  8147  0016FC                     l4710:
  8148                           
  8149                           ;I2C_Soft.c: 28: i2cLowScl();
  8150  0016FC  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8151  001700  2A12               	incf	I2C_Read@n,f,c
  8152  001702  D7ED               	goto	l4698
  8153  001704                     l4716:
  8154                           
  8155                           ;I2C_Soft.c: 29: }
  8156                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  8157  001704  5011               	movf	I2C_Read@ack,w,c
  8158  001706  B4D8               	btfsc	status,2,c
  8159  001708  D003               	goto	l4720
  8160  00170A  ECED  F00C         	call	_i2cAck	;wreg free
  8161  00170E  D003               	goto	l4722
  8162  001710                     l4720:
  8163                           
  8164                           ;I2C_Soft.c: 31: else i2cNack();
  8165  001710  EC3E  F00D         	call	_i2cNack	;wreg free
  8166  001714  D000               	goto	l4722
  8167  001716                     l4722:
  8168                           
  8169                           ;I2C_Soft.c: 34: return(inByte);
  8170  001716  5013               	movf	I2C_Read@inByte,w,c
  8171  001718  D000               	goto	l148
  8172  00171A                     l148:
  8173  00171A  0012               	return		;funcret
  8174  00171C                     __end_of_I2C_Read:
  8175                           	opt stack 0
  8176                           tblptru	equ	0xFF8
  8177                           tblptrh	equ	0xFF7
  8178                           tblptrl	equ	0xFF6
  8179                           tablat	equ	0xFF5
  8180                           prodh	equ	0xFF4
  8181                           prodl	equ	0xFF3
  8182                           intcon	equ	0xFF2
  8183                           intcon2	equ	0xFF1
  8184                           intcon3	equ	0xFF0
  8185                           postinc0	equ	0xFEE
  8186                           wreg	equ	0xFE8
  8187                           postdec1	equ	0xFE5
  8188                           fsr1l	equ	0xFE1
  8189                           indf2	equ	0xFDF
  8190                           postinc2	equ	0xFDE
  8191                           postdec2	equ	0xFDD
  8192                           fsr2h	equ	0xFDA
  8193                           fsr2l	equ	0xFD9
  8194                           status	equ	0xFD8
  8195                           
  8196 ;; *************** function _i2cNack *****************
  8197 ;; Defined at:
  8198 ;;		line 53 in file "I2C_Soft.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;		None
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;		None
  8203 ;; Return value:  Size  Location     Type
  8204 ;;		None               void
  8205 ;; Registers used:
  8206 ;;		wreg, cstack
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;Total ram usage:        0 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    4
  8219 ;; This function calls:
  8220 ;;		_i2cHighScl
  8221 ;;		_i2cLowScl
  8222 ;; This function is called by:
  8223 ;;		_I2C_Read
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text43
  8228  001A7C                     __ptext43:
  8229                           	opt stack 0
  8230  001A7C                     _i2cNack:
  8231                           	opt stack 24
  8232                           
  8233                           ;I2C_Soft.c: 55: i2cHighScl();
  8234                           
  8235                           ;incstack = 0
  8236  001A7C  EC28  F00D         	call	_i2cHighScl	;wreg free
  8237                           
  8238                           ;I2C_Soft.c: 56: i2cLowScl();
  8239  001A80  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8240  001A84  0012               	return		;funcret
  8241  001A86                     __end_of_i2cNack:
  8242                           	opt stack 0
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           intcon	equ	0xFF2
  8250                           intcon2	equ	0xFF1
  8251                           intcon3	equ	0xFF0
  8252                           postinc0	equ	0xFEE
  8253                           wreg	equ	0xFE8
  8254                           postdec1	equ	0xFE5
  8255                           fsr1l	equ	0xFE1
  8256                           indf2	equ	0xFDF
  8257                           postinc2	equ	0xFDE
  8258                           postdec2	equ	0xFDD
  8259                           fsr2h	equ	0xFDA
  8260                           fsr2l	equ	0xFD9
  8261                           status	equ	0xFD8
  8262                           
  8263 ;; *************** function _i2cAck *****************
  8264 ;; Defined at:
  8265 ;;		line 59 in file "I2C_Soft.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;		None
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;		None
  8270 ;; Return value:  Size  Location     Type
  8271 ;;		None               void
  8272 ;; Registers used:
  8273 ;;		wreg, cstack
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;Total ram usage:        0 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    4
  8286 ;; This function calls:
  8287 ;;		_i2cHighScl
  8288 ;;		_i2cHighSda
  8289 ;;		_i2cLowScl
  8290 ;;		_i2cLowSda
  8291 ;; This function is called by:
  8292 ;;		_I2C_Read
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           	psect	text44
  8297  0019DA                     __ptext44:
  8298                           	opt stack 0
  8299  0019DA                     _i2cAck:
  8300                           	opt stack 24
  8301                           
  8302                           ;I2C_Soft.c: 61: i2cLowSda();
  8303                           
  8304                           ;incstack = 0
  8305  0019DA  EC43  F00D         	call	_i2cLowSda	;wreg free
  8306                           
  8307                           ;I2C_Soft.c: 62: i2cHighScl();
  8308  0019DE  EC28  F00D         	call	_i2cHighScl	;wreg free
  8309                           
  8310                           ;I2C_Soft.c: 63: i2cLowScl();
  8311  0019E2  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8312                           
  8313                           ;I2C_Soft.c: 64: i2cHighSda();
  8314  0019E6  EC50  F00D         	call	_i2cHighSda	;wreg free
  8315  0019EA  0012               	return		;funcret
  8316  0019EC                     __end_of_i2cAck:
  8317                           	opt stack 0
  8318                           tblptru	equ	0xFF8
  8319                           tblptrh	equ	0xFF7
  8320                           tblptrl	equ	0xFF6
  8321                           tablat	equ	0xFF5
  8322                           prodh	equ	0xFF4
  8323                           prodl	equ	0xFF3
  8324                           intcon	equ	0xFF2
  8325                           intcon2	equ	0xFF1
  8326                           intcon3	equ	0xFF0
  8327                           postinc0	equ	0xFEE
  8328                           wreg	equ	0xFE8
  8329                           postdec1	equ	0xFE5
  8330                           fsr1l	equ	0xFE1
  8331                           indf2	equ	0xFDF
  8332                           postinc2	equ	0xFDE
  8333                           postdec2	equ	0xFDD
  8334                           fsr2h	equ	0xFDA
  8335                           fsr2l	equ	0xFD9
  8336                           status	equ	0xFD8
  8337                           
  8338 ;; *************** function _I2C_ReStart *****************
  8339 ;; Defined at:
  8340 ;;		line 75 in file "I2C_Soft.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;		None
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;		None
  8345 ;; Return value:  Size  Location     Type
  8346 ;;		None               void
  8347 ;; Registers used:
  8348 ;;		wreg, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;Total ram usage:        0 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    4
  8361 ;; This function calls:
  8362 ;;		_i2cHighScl
  8363 ;;		_i2cHighSda
  8364 ;;		_i2cLowScl
  8365 ;;		_i2cLowSda
  8366 ;; This function is called by:
  8367 ;;		_DS1621_Read_Temp
  8368 ;;		_DS3231_Read_Time
  8369 ;;		_DS1621_Read_Temp_Bad
  8370 ;;		_I2C_Write_Address_Read_One_Byte
  8371 ;;		_I2C_Write_Cmd_Read_One_Byte
  8372 ;; This function uses a non-reentrant model
  8373 ;;
  8374                           
  8375                           	psect	text45
  8376  00198A                     __ptext45:
  8377                           	opt stack 0
  8378  00198A                     _I2C_ReStart:
  8379                           	opt stack 25
  8380                           
  8381                           ;I2C_Soft.c: 77: i2cLowScl();
  8382                           
  8383                           ;incstack = 0
  8384  00198A  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8385                           
  8386                           ;I2C_Soft.c: 78: i2cHighSda();
  8387  00198E  EC50  F00D         	call	_i2cHighSda	;wreg free
  8388                           
  8389                           ;I2C_Soft.c: 79: i2cHighScl();
  8390  001992  EC28  F00D         	call	_i2cHighScl	;wreg free
  8391                           
  8392                           ;I2C_Soft.c: 80: i2cLowSda();
  8393  001996  EC43  F00D         	call	_i2cLowSda	;wreg free
  8394                           
  8395                           ;I2C_Soft.c: 81: i2cLowScl();
  8396  00199A  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8397  00199E  0012               	return		;funcret
  8398  0019A0                     __end_of_I2C_ReStart:
  8399                           	opt stack 0
  8400                           tblptru	equ	0xFF8
  8401                           tblptrh	equ	0xFF7
  8402                           tblptrl	equ	0xFF6
  8403                           tablat	equ	0xFF5
  8404                           prodh	equ	0xFF4
  8405                           prodl	equ	0xFF3
  8406                           intcon	equ	0xFF2
  8407                           intcon2	equ	0xFF1
  8408                           intcon3	equ	0xFF0
  8409                           postinc0	equ	0xFEE
  8410                           wreg	equ	0xFE8
  8411                           postdec1	equ	0xFE5
  8412                           fsr1l	equ	0xFE1
  8413                           indf2	equ	0xFDF
  8414                           postinc2	equ	0xFDE
  8415                           postdec2	equ	0xFDD
  8416                           fsr2h	equ	0xFDA
  8417                           fsr2l	equ	0xFD9
  8418                           status	equ	0xFD8
  8419                           
  8420 ;; *************** function _DS1621_Init *****************
  8421 ;; Defined at:
  8422 ;;		line 52 in file "I2C_Support.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;		None
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  Device          1   21[COMRAM] unsigned char 
  8427 ;; Return value:  Size  Location     Type
  8428 ;;		None               void
  8429 ;; Registers used:
  8430 ;;		wreg, status,2, status,0, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;Total ram usage:        1 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    6
  8443 ;; This function calls:
  8444 ;;		_I2C_Write_Cmd_Only
  8445 ;;		_I2C_Write_Cmd_Write_Data
  8446 ;; This function is called by:
  8447 ;;		_main
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           	psect	text46
  8452  001904                     __ptext46:
  8453                           	opt stack 0
  8454  001904                     _DS1621_Init:
  8455                           	opt stack 24
  8456                           
  8457                           ;I2C_Support.c: 54: char Device = 0x48;
  8458                           
  8459                           ;incstack = 0
  8460  001904  0E48               	movlw	72
  8461  001906  6E16               	movwf	DS1621_Init@Device,c
  8462                           
  8463                           ;I2C_Support.c: 55: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
  8464  001908  0EAC               	movlw	172
  8465  00190A  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8466  00190C  0E02               	movlw	2
  8467  00190E  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8468  001910  5016               	movf	DS1621_Init@Device,w,c
  8469  001912  EC72  F00C         	call	_I2C_Write_Cmd_Write_Data
  8470                           
  8471                           ;I2C_Support.c: 56: I2C_Write_Cmd_Only(Device, 0xEE);
  8472  001916  0EEE               	movlw	238
  8473  001918  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8474  00191A  5016               	movf	DS1621_Init@Device,w,c
  8475  00191C  ECAC  F00C         	call	_I2C_Write_Cmd_Only
  8476  001920  0012               	return		;funcret
  8477  001922                     __end_of_DS1621_Init:
  8478                           	opt stack 0
  8479                           tblptru	equ	0xFF8
  8480                           tblptrh	equ	0xFF7
  8481                           tblptrl	equ	0xFF6
  8482                           tablat	equ	0xFF5
  8483                           prodh	equ	0xFF4
  8484                           prodl	equ	0xFF3
  8485                           intcon	equ	0xFF2
  8486                           intcon2	equ	0xFF1
  8487                           intcon3	equ	0xFF0
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           postdec1	equ	0xFE5
  8491                           fsr1l	equ	0xFE1
  8492                           indf2	equ	0xFDF
  8493                           postinc2	equ	0xFDE
  8494                           postdec2	equ	0xFDD
  8495                           fsr2h	equ	0xFDA
  8496                           fsr2l	equ	0xFD9
  8497                           status	equ	0xFD8
  8498                           
  8499 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8500 ;; Defined at:
  8501 ;;		line 148 in file "I2C_Soft.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;  Device          1    wreg     unsigned char 
  8504 ;;  Cmd             1   18[COMRAM] unsigned char 
  8505 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  Device          1   20[COMRAM] unsigned char 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;		None               void
  8510 ;; Registers used:
  8511 ;;		wreg, status,2, status,0, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8517 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;Total ram usage:        3 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    5
  8524 ;; This function calls:
  8525 ;;		_I2C_Start
  8526 ;;		_I2C_Stop
  8527 ;;		_I2C_Write
  8528 ;; This function is called by:
  8529 ;;		_DS1621_Init
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text47
  8534  0018E4                     __ptext47:
  8535                           	opt stack 0
  8536  0018E4                     _I2C_Write_Cmd_Write_Data:
  8537                           	opt stack 24
  8538                           
  8539                           ;incstack = 0
  8540                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8541  0018E4  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8542                           
  8543                           ;I2C_Soft.c: 150: I2C_Start();
  8544  0018E6  ECFF  F00C         	call	_I2C_Start	;wreg free
  8545                           
  8546                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  8547  0018EA  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8548  0018EC  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8549  0018EE  ECCC  F00B         	call	_I2C_Write
  8550                           
  8551                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  8552  0018F2  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8553  0018F4  ECCC  F00B         	call	_I2C_Write
  8554                           
  8555                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  8556  0018F8  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8557  0018FA  ECCC  F00B         	call	_I2C_Write
  8558                           
  8559                           ;I2C_Soft.c: 154: I2C_Stop();
  8560  0018FE  ECF6  F00C         	call	_I2C_Stop	;wreg free
  8561  001902  0012               	return		;funcret
  8562  001904                     __end_of_I2C_Write_Cmd_Write_Data:
  8563                           	opt stack 0
  8564                           tblptru	equ	0xFF8
  8565                           tblptrh	equ	0xFF7
  8566                           tblptrl	equ	0xFF6
  8567                           tablat	equ	0xFF5
  8568                           prodh	equ	0xFF4
  8569                           prodl	equ	0xFF3
  8570                           intcon	equ	0xFF2
  8571                           intcon2	equ	0xFF1
  8572                           intcon3	equ	0xFF0
  8573                           postinc0	equ	0xFEE
  8574                           wreg	equ	0xFE8
  8575                           postdec1	equ	0xFE5
  8576                           fsr1l	equ	0xFE1
  8577                           indf2	equ	0xFDF
  8578                           postinc2	equ	0xFDE
  8579                           postdec2	equ	0xFDD
  8580                           fsr2h	equ	0xFDA
  8581                           fsr2l	equ	0xFD9
  8582                           status	equ	0xFD8
  8583                           
  8584 ;; *************** function _I2C_Write_Cmd_Only *****************
  8585 ;; Defined at:
  8586 ;;		line 140 in file "I2C_Soft.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  Device          1    wreg     unsigned char 
  8589 ;;  Cmd             1   18[COMRAM] unsigned char 
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;  Device          1   19[COMRAM] unsigned char 
  8592 ;; Return value:  Size  Location     Type
  8593 ;;		None               void
  8594 ;; Registers used:
  8595 ;;		wreg, status,2, status,0, cstack
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8601 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8604 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;Total ram usage:        2 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    5
  8608 ;; This function calls:
  8609 ;;		_I2C_Start
  8610 ;;		_I2C_Stop
  8611 ;;		_I2C_Write
  8612 ;; This function is called by:
  8613 ;;		_DS1621_Init
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           	psect	text48
  8618  001958                     __ptext48:
  8619                           	opt stack 0
  8620  001958                     _I2C_Write_Cmd_Only:
  8621                           	opt stack 24
  8622                           
  8623                           ;incstack = 0
  8624                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8625  001958  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8626                           
  8627                           ;I2C_Soft.c: 142: I2C_Start();
  8628  00195A  ECFF  F00C         	call	_I2C_Start	;wreg free
  8629                           
  8630                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  8631  00195E  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8632  001960  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8633  001962  ECCC  F00B         	call	_I2C_Write
  8634                           
  8635                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  8636  001966  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8637  001968  ECCC  F00B         	call	_I2C_Write
  8638                           
  8639                           ;I2C_Soft.c: 145: I2C_Stop();
  8640  00196C  ECF6  F00C         	call	_I2C_Stop	;wreg free
  8641  001970  0012               	return		;funcret
  8642  001972                     __end_of_I2C_Write_Cmd_Only:
  8643                           	opt stack 0
  8644                           tblptru	equ	0xFF8
  8645                           tblptrh	equ	0xFF7
  8646                           tblptrl	equ	0xFF6
  8647                           tablat	equ	0xFF5
  8648                           prodh	equ	0xFF4
  8649                           prodl	equ	0xFF3
  8650                           intcon	equ	0xFF2
  8651                           intcon2	equ	0xFF1
  8652                           intcon3	equ	0xFF0
  8653                           postinc0	equ	0xFEE
  8654                           wreg	equ	0xFE8
  8655                           postdec1	equ	0xFE5
  8656                           fsr1l	equ	0xFE1
  8657                           indf2	equ	0xFDF
  8658                           postinc2	equ	0xFDE
  8659                           postdec2	equ	0xFDD
  8660                           fsr2h	equ	0xFDA
  8661                           fsr2l	equ	0xFD9
  8662                           status	equ	0xFD8
  8663                           
  8664 ;; *************** function _I2C_Write *****************
  8665 ;; Defined at:
  8666 ;;		line 37 in file "I2C_Soft.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;  outByte         1    wreg     unsigned char 
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;  outByte         1   16[COMRAM] unsigned char 
  8671 ;;  n               1   17[COMRAM] unsigned char 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;		None               void
  8674 ;; Registers used:
  8675 ;;		wreg, status,2, status,0, cstack
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;Total ram usage:        2 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    4
  8688 ;; This function calls:
  8689 ;;		_i2cHighScl
  8690 ;;		_i2cHighSda
  8691 ;;		_i2cLowScl
  8692 ;;		_i2cLowSda
  8693 ;; This function is called by:
  8694 ;;		_DS1621_Read_Temp
  8695 ;;		_DS3231_Read_Time
  8696 ;;		_DS3231_Setup_Time
  8697 ;;		_I2C_Write_Cmd_Only
  8698 ;;		_I2C_Write_Cmd_Write_Data
  8699 ;;		_DS1621_Read_Temp_Bad
  8700 ;;		_I2C_Write_Address_Read_One_Byte
  8701 ;;		_I2C_Write_Address_Write_One_Byte
  8702 ;;		_I2C_Write_Cmd_Read_One_Byte
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           	psect	text49
  8707  001798                     __ptext49:
  8708                           	opt stack 0
  8709  001798                     _I2C_Write:
  8710                           	opt stack 25
  8711                           
  8712                           ;incstack = 0
  8713                           ;I2C_Write@outByte stored from wreg
  8714  001798  6E11               	movwf	I2C_Write@outByte,c
  8715                           
  8716                           ;I2C_Soft.c: 39: unsigned char n;
  8717                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
  8718  00179A  0E00               	movlw	0
  8719  00179C  6E12               	movwf	I2C_Write@n,c
  8720  00179E                     l4448:
  8721  00179E  0E07               	movlw	7
  8722  0017A0  6412               	cpfsgt	I2C_Write@n,c
  8723  0017A2  D001               	goto	l151
  8724  0017A4  D011               	goto	l4466
  8725  0017A6                     l151:
  8726                           
  8727                           ;I2C_Soft.c: 41: {
  8728                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
  8729  0017A6  AE11               	btfss	I2C_Write@outByte,7,c
  8730  0017A8  D003               	goto	l4454
  8731  0017AA  EC50  F00D         	call	_i2cHighSda	;wreg free
  8732  0017AE  D003               	goto	l4456
  8733  0017B0                     l4454:
  8734                           
  8735                           ;I2C_Soft.c: 43: else i2cLowSda();
  8736  0017B0  EC43  F00D         	call	_i2cLowSda	;wreg free
  8737  0017B4  D000               	goto	l4456
  8738  0017B6                     l4456:
  8739                           
  8740                           ;I2C_Soft.c: 44: i2cHighScl();
  8741  0017B6  EC28  F00D         	call	_i2cHighScl	;wreg free
  8742                           
  8743                           ;I2C_Soft.c: 45: i2cLowScl();
  8744  0017BA  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8745                           
  8746                           ;I2C_Soft.c: 46: outByte = outByte << 1;
  8747  0017BE  5011               	movf	I2C_Write@outByte,w,c
  8748  0017C0  2411               	addwf	I2C_Write@outByte,w,c
  8749  0017C2  6E11               	movwf	I2C_Write@outByte,c
  8750  0017C4  2A12               	incf	I2C_Write@n,f,c
  8751  0017C6  D7EB               	goto	l4448
  8752  0017C8                     l4466:
  8753                           
  8754                           ;I2C_Soft.c: 47: }
  8755                           ;I2C_Soft.c: 48: i2cHighSda();
  8756  0017C8  EC50  F00D         	call	_i2cHighSda	;wreg free
  8757                           
  8758                           ;I2C_Soft.c: 49: i2cHighScl();
  8759  0017CC  EC28  F00D         	call	_i2cHighScl	;wreg free
  8760                           
  8761                           ;I2C_Soft.c: 50: i2cLowScl();
  8762  0017D0  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8763  0017D4  0012               	return		;funcret
  8764  0017D6                     __end_of_I2C_Write:
  8765                           	opt stack 0
  8766                           tblptru	equ	0xFF8
  8767                           tblptrh	equ	0xFF7
  8768                           tblptrl	equ	0xFF6
  8769                           tablat	equ	0xFF5
  8770                           prodh	equ	0xFF4
  8771                           prodl	equ	0xFF3
  8772                           intcon	equ	0xFF2
  8773                           intcon2	equ	0xFF1
  8774                           intcon3	equ	0xFF0
  8775                           postinc0	equ	0xFEE
  8776                           wreg	equ	0xFE8
  8777                           postdec1	equ	0xFE5
  8778                           fsr1l	equ	0xFE1
  8779                           indf2	equ	0xFDF
  8780                           postinc2	equ	0xFDE
  8781                           postdec2	equ	0xFDD
  8782                           fsr2h	equ	0xFDA
  8783                           fsr2l	equ	0xFD9
  8784                           status	equ	0xFD8
  8785                           
  8786 ;; *************** function _I2C_Stop *****************
  8787 ;; Defined at:
  8788 ;;		line 84 in file "I2C_Soft.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;		None
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;		None
  8793 ;; Return value:  Size  Location     Type
  8794 ;;		None               void
  8795 ;; Registers used:
  8796 ;;		wreg, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;Total ram usage:        0 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    4
  8809 ;; This function calls:
  8810 ;;		_i2cHighScl
  8811 ;;		_i2cHighSda
  8812 ;;		_i2cLowScl
  8813 ;;		_i2cLowSda
  8814 ;; This function is called by:
  8815 ;;		_DS1621_Read_Temp
  8816 ;;		_DS3231_Read_Time
  8817 ;;		_DS3231_Setup_Time
  8818 ;;		_I2C_Write_Cmd_Only
  8819 ;;		_I2C_Write_Cmd_Write_Data
  8820 ;;		_DS1621_Read_Temp_Bad
  8821 ;;		_I2C_Write_Address_Read_One_Byte
  8822 ;;		_I2C_Write_Address_Write_One_Byte
  8823 ;;		_I2C_Write_Cmd_Read_One_Byte
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           	psect	text50
  8828  0019EC                     __ptext50:
  8829                           	opt stack 0
  8830  0019EC                     _I2C_Stop:
  8831                           	opt stack 25
  8832                           
  8833                           ;I2C_Soft.c: 86: i2cLowScl();
  8834                           
  8835                           ;incstack = 0
  8836  0019EC  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8837                           
  8838                           ;I2C_Soft.c: 87: i2cLowSda();
  8839  0019F0  EC43  F00D         	call	_i2cLowSda	;wreg free
  8840                           
  8841                           ;I2C_Soft.c: 88: i2cHighScl();
  8842  0019F4  EC28  F00D         	call	_i2cHighScl	;wreg free
  8843                           
  8844                           ;I2C_Soft.c: 89: i2cHighSda();
  8845  0019F8  EC50  F00D         	call	_i2cHighSda	;wreg free
  8846  0019FC  0012               	return		;funcret
  8847  0019FE                     __end_of_I2C_Stop:
  8848                           	opt stack 0
  8849                           tblptru	equ	0xFF8
  8850                           tblptrh	equ	0xFF7
  8851                           tblptrl	equ	0xFF6
  8852                           tablat	equ	0xFF5
  8853                           prodh	equ	0xFF4
  8854                           prodl	equ	0xFF3
  8855                           intcon	equ	0xFF2
  8856                           intcon2	equ	0xFF1
  8857                           intcon3	equ	0xFF0
  8858                           postinc0	equ	0xFEE
  8859                           wreg	equ	0xFE8
  8860                           postdec1	equ	0xFE5
  8861                           fsr1l	equ	0xFE1
  8862                           indf2	equ	0xFDF
  8863                           postinc2	equ	0xFDE
  8864                           postdec2	equ	0xFDD
  8865                           fsr2h	equ	0xFDA
  8866                           fsr2l	equ	0xFD9
  8867                           status	equ	0xFD8
  8868                           
  8869 ;; *************** function _I2C_Start *****************
  8870 ;; Defined at:
  8871 ;;		line 67 in file "I2C_Soft.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;		None
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;		None
  8876 ;; Return value:  Size  Location     Type
  8877 ;;		None               void
  8878 ;; Registers used:
  8879 ;;		wreg, cstack
  8880 ;; Tracked objects:
  8881 ;;		On entry : 0/0
  8882 ;;		On exit  : 0/0
  8883 ;;		Unchanged: 0/0
  8884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;Total ram usage:        0 bytes
  8890 ;; Hardware stack levels used:    1
  8891 ;; Hardware stack levels required when called:    4
  8892 ;; This function calls:
  8893 ;;		_i2cHighScl
  8894 ;;		_i2cHighSda
  8895 ;;		_i2cLowScl
  8896 ;;		_i2cLowSda
  8897 ;; This function is called by:
  8898 ;;		_DS1621_Read_Temp
  8899 ;;		_DS3231_Read_Time
  8900 ;;		_DS3231_Setup_Time
  8901 ;;		_I2C_Write_Cmd_Only
  8902 ;;		_I2C_Write_Cmd_Write_Data
  8903 ;;		_DS1621_Read_Temp_Bad
  8904 ;;		_I2C_Write_Address_Read_One_Byte
  8905 ;;		_I2C_Write_Address_Write_One_Byte
  8906 ;;		_I2C_Write_Cmd_Read_One_Byte
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           	psect	text51
  8911  0019FE                     __ptext51:
  8912                           	opt stack 0
  8913  0019FE                     _I2C_Start:
  8914                           	opt stack 25
  8915                           
  8916                           ;I2C_Soft.c: 69: i2cHighSda();
  8917                           
  8918                           ;incstack = 0
  8919  0019FE  EC50  F00D         	call	_i2cHighSda	;wreg free
  8920                           
  8921                           ;I2C_Soft.c: 70: i2cHighScl();
  8922  001A02  EC28  F00D         	call	_i2cHighScl	;wreg free
  8923                           
  8924                           ;I2C_Soft.c: 71: i2cLowSda();
  8925  001A06  EC43  F00D         	call	_i2cLowSda	;wreg free
  8926                           
  8927                           ;I2C_Soft.c: 72: i2cLowScl();
  8928  001A0A  EC4C  F00D         	call	_i2cLowScl	;wreg free
  8929  001A0E  0012               	return		;funcret
  8930  001A10                     __end_of_I2C_Start:
  8931                           	opt stack 0
  8932                           tblptru	equ	0xFF8
  8933                           tblptrh	equ	0xFF7
  8934                           tblptrl	equ	0xFF6
  8935                           tablat	equ	0xFF5
  8936                           prodh	equ	0xFF4
  8937                           prodl	equ	0xFF3
  8938                           intcon	equ	0xFF2
  8939                           intcon2	equ	0xFF1
  8940                           intcon3	equ	0xFF0
  8941                           postinc0	equ	0xFEE
  8942                           wreg	equ	0xFE8
  8943                           postdec1	equ	0xFE5
  8944                           fsr1l	equ	0xFE1
  8945                           indf2	equ	0xFDF
  8946                           postinc2	equ	0xFDE
  8947                           postdec2	equ	0xFDD
  8948                           fsr2h	equ	0xFDA
  8949                           fsr2l	equ	0xFD9
  8950                           status	equ	0xFD8
  8951                           
  8952 ;; *************** function _i2cLowSda *****************
  8953 ;; Defined at:
  8954 ;;		line 98 in file "I2C_Soft.c"
  8955 ;; Parameters:    Size  Location     Type
  8956 ;;		None
  8957 ;; Auto vars:     Size  Location     Type
  8958 ;;		None
  8959 ;; Return value:  Size  Location     Type
  8960 ;;		None               void
  8961 ;; Registers used:
  8962 ;;		None
  8963 ;; Tracked objects:
  8964 ;;		On entry : 0/0
  8965 ;;		On exit  : 0/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8972 ;;Total ram usage:        0 bytes
  8973 ;; Hardware stack levels used:    1
  8974 ;; Hardware stack levels required when called:    3
  8975 ;; This function calls:
  8976 ;;		Nothing
  8977 ;; This function is called by:
  8978 ;;		_I2C_Write
  8979 ;;		_i2cAck
  8980 ;;		_I2C_Start
  8981 ;;		_I2C_ReStart
  8982 ;;		_I2C_Stop
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           	psect	text52
  8987  001A86                     __ptext52:
  8988                           	opt stack 0
  8989  001A86                     _i2cLowSda:
  8990                           	opt stack 25
  8991                           
  8992                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
  8993                           
  8994                           ;incstack = 0
  8995  001A86  9A81               	bcf	3969,5,c	;volatile
  8996                           
  8997                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
  8998  001A88  9A93               	bcf	3987,5,c	;volatile
  8999                           
  9000                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9001  001A8A  D000               	nop2		;2 cycle nop
  9002  001A8C  D000               	nop2		;2 cycle nop
  9003  001A8E  0012               	return		;funcret
  9004  001A90                     __end_of_i2cLowSda:
  9005                           	opt stack 0
  9006                           tblptru	equ	0xFF8
  9007                           tblptrh	equ	0xFF7
  9008                           tblptrl	equ	0xFF6
  9009                           tablat	equ	0xFF5
  9010                           prodh	equ	0xFF4
  9011                           prodl	equ	0xFF3
  9012                           intcon	equ	0xFF2
  9013                           intcon2	equ	0xFF1
  9014                           intcon3	equ	0xFF0
  9015                           postinc0	equ	0xFEE
  9016                           wreg	equ	0xFE8
  9017                           postdec1	equ	0xFE5
  9018                           fsr1l	equ	0xFE1
  9019                           indf2	equ	0xFDF
  9020                           postinc2	equ	0xFDE
  9021                           postdec2	equ	0xFDD
  9022                           fsr2h	equ	0xFDA
  9023                           fsr2l	equ	0xFD9
  9024                           status	equ	0xFD8
  9025                           
  9026 ;; *************** function _i2cLowScl *****************
  9027 ;; Defined at:
  9028 ;;		line 111 in file "I2C_Soft.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;		None
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;		None
  9033 ;; Return value:  Size  Location     Type
  9034 ;;		None               void
  9035 ;; Registers used:
  9036 ;;		None
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9046 ;;Total ram usage:        0 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    3
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		_I2C_Read
  9053 ;;		_I2C_Write
  9054 ;;		_i2cNack
  9055 ;;		_i2cAck
  9056 ;;		_I2C_Start
  9057 ;;		_I2C_ReStart
  9058 ;;		_I2C_Stop
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           	psect	text53
  9063  001A98                     __ptext53:
  9064                           	opt stack 0
  9065  001A98                     _i2cLowScl:
  9066                           	opt stack 25
  9067                           
  9068                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
  9069                           
  9070                           ;incstack = 0
  9071  001A98  9881               	bcf	3969,4,c	;volatile
  9072                           
  9073                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
  9074  001A9A  9893               	bcf	3987,4,c	;volatile
  9075                           
  9076                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9077  001A9C  D000               	nop2		;2 cycle nop
  9078  001A9E  0012               	return		;funcret
  9079  001AA0                     __end_of_i2cLowScl:
  9080                           	opt stack 0
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           intcon2	equ	0xFF1
  9089                           intcon3	equ	0xFF0
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           postdec1	equ	0xFE5
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _i2cHighSda *****************
  9102 ;; Defined at:
  9103 ;;		line 92 in file "I2C_Soft.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;		None
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;		None
  9108 ;; Return value:  Size  Location     Type
  9109 ;;		None               void
  9110 ;; Registers used:
  9111 ;;		None
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;Total ram usage:        0 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:    3
  9124 ;; This function calls:
  9125 ;;		Nothing
  9126 ;; This function is called by:
  9127 ;;		_I2C_Init
  9128 ;;		_I2C_Read
  9129 ;;		_I2C_Write
  9130 ;;		_i2cAck
  9131 ;;		_I2C_Start
  9132 ;;		_I2C_ReStart
  9133 ;;		_I2C_Stop
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text54
  9138  001AA0                     __ptext54:
  9139                           	opt stack 0
  9140  001AA0                     _i2cHighSda:
  9141                           	opt stack 26
  9142                           
  9143                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
  9144                           
  9145                           ;incstack = 0
  9146  001AA0  8A93               	bsf	3987,5,c	;volatile
  9147                           
  9148                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9149  001AA2  D000               	nop2		;2 cycle nop
  9150  001AA4  D000               	nop2		;2 cycle nop
  9151  001AA6  0012               	return		;funcret
  9152  001AA8                     __end_of_i2cHighSda:
  9153                           	opt stack 0
  9154                           tblptru	equ	0xFF8
  9155                           tblptrh	equ	0xFF7
  9156                           tblptrl	equ	0xFF6
  9157                           tablat	equ	0xFF5
  9158                           prodh	equ	0xFF4
  9159                           prodl	equ	0xFF3
  9160                           intcon	equ	0xFF2
  9161                           intcon2	equ	0xFF1
  9162                           intcon3	equ	0xFF0
  9163                           postinc0	equ	0xFEE
  9164                           wreg	equ	0xFE8
  9165                           postdec1	equ	0xFE5
  9166                           fsr1l	equ	0xFE1
  9167                           indf2	equ	0xFDF
  9168                           postinc2	equ	0xFDE
  9169                           postdec2	equ	0xFDD
  9170                           fsr2h	equ	0xFDA
  9171                           fsr2l	equ	0xFD9
  9172                           status	equ	0xFD8
  9173                           
  9174 ;; *************** function _i2cHighScl *****************
  9175 ;; Defined at:
  9176 ;;		line 105 in file "I2C_Soft.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;		None
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;		None
  9181 ;; Return value:  Size  Location     Type
  9182 ;;		None               void
  9183 ;; Registers used:
  9184 ;;		wreg
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;Total ram usage:        0 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    3
  9197 ;; This function calls:
  9198 ;;		Nothing
  9199 ;; This function is called by:
  9200 ;;		_I2C_Init
  9201 ;;		_I2C_Read
  9202 ;;		_I2C_Write
  9203 ;;		_i2cNack
  9204 ;;		_i2cAck
  9205 ;;		_I2C_Start
  9206 ;;		_I2C_ReStart
  9207 ;;		_I2C_Stop
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           	psect	text55
  9212  001A50                     __ptext55:
  9213                           	opt stack 0
  9214  001A50                     _i2cHighScl:
  9215                           	opt stack 26
  9216                           
  9217                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
  9218                           
  9219                           ;incstack = 0
  9220  001A50  8893               	bsf	3987,4,c	;volatile
  9221                           
  9222                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9223  001A52  0E06               	movlw	6
  9224  001A54                     u4227:
  9225  001A54  2EE8               	decfsz	wreg,f,c
  9226  001A56  D7FE               	goto	u4227
  9227  001A58  D000               	nop2		;nop
  9228  001A5A  0012               	return		;funcret
  9229  001A5C                     __end_of_i2cHighScl:
  9230                           	opt stack 0
  9231                           tblptru	equ	0xFF8
  9232                           tblptrh	equ	0xFF7
  9233                           tblptrl	equ	0xFF6
  9234                           tablat	equ	0xFF5
  9235                           prodh	equ	0xFF4
  9236                           prodl	equ	0xFF3
  9237                           intcon	equ	0xFF2
  9238                           intcon2	equ	0xFF1
  9239                           intcon3	equ	0xFF0
  9240                           postinc0	equ	0xFEE
  9241                           wreg	equ	0xFE8
  9242                           postdec1	equ	0xFE5
  9243                           fsr1l	equ	0xFE1
  9244                           indf2	equ	0xFDF
  9245                           postinc2	equ	0xFDE
  9246                           postdec2	equ	0xFDD
  9247                           fsr2h	equ	0xFDA
  9248                           fsr2l	equ	0xFD9
  9249                           status	equ	0xFD8
  9250                           
  9251 ;; *************** function _Activate_Buzzer *****************
  9252 ;; Defined at:
  9253 ;;		line 66 in file "utils.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;		None
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;		None
  9258 ;; Return value:  Size  Location     Type
  9259 ;;		None               void
  9260 ;; Registers used:
  9261 ;;		wreg, status,2
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;Total ram usage:        0 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:    3
  9274 ;; This function calls:
  9275 ;;		Nothing
  9276 ;; This function is called by:
  9277 ;;		_main
  9278 ;;		_Do_Beep
  9279 ;; This function uses a non-reentrant model
  9280 ;;
  9281                           
  9282                           	psect	text56
  9283  001A10                     __ptext56:
  9284                           	opt stack 0
  9285  001A10                     _Activate_Buzzer:
  9286                           	opt stack 27
  9287                           
  9288                           ;utils.c: 68: PR2 = 0b11111001 ;
  9289                           
  9290                           ;incstack = 0
  9291  001A10  0EF9               	movlw	249
  9292  001A12  6ECB               	movwf	4043,c	;volatile
  9293                           
  9294                           ;utils.c: 69: T2CON = 0b00000101 ;
  9295  001A14  0E05               	movlw	5
  9296  001A16  6ECA               	movwf	4042,c	;volatile
  9297                           
  9298                           ;utils.c: 70: CCPR2L = 0b01001010 ;
  9299  001A18  0E4A               	movlw	74
  9300  001A1A  6EBB               	movwf	4027,c	;volatile
  9301                           
  9302                           ;utils.c: 71: CCP2CON = 0b00111100 ;
  9303  001A1C  0E3C               	movlw	60
  9304  001A1E  6EBA               	movwf	4026,c	;volatile
  9305  001A20  0012               	return		;funcret
  9306  001A22                     __end_of_Activate_Buzzer:
  9307                           	opt stack 0
  9308                           tblptru	equ	0xFF8
  9309                           tblptrh	equ	0xFF7
  9310                           tblptrl	equ	0xFF6
  9311                           tablat	equ	0xFF5
  9312                           prodh	equ	0xFF4
  9313                           prodl	equ	0xFF3
  9314                           intcon	equ	0xFF2
  9315                           intcon2	equ	0xFF1
  9316                           intcon3	equ	0xFF0
  9317                           postinc0	equ	0xFEE
  9318                           wreg	equ	0xFE8
  9319                           postdec1	equ	0xFE5
  9320                           fsr1l	equ	0xFE1
  9321                           indf2	equ	0xFDF
  9322                           postinc2	equ	0xFDE
  9323                           postdec2	equ	0xFDD
  9324                           fsr2h	equ	0xFDA
  9325                           fsr2l	equ	0xFD9
  9326                           status	equ	0xFD8
  9327                           
  9328 ;; *************** function _chkisr *****************
  9329 ;; Defined at:
  9330 ;;		line 36 in file "Interrupt.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;		None
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;		None
  9335 ;; Return value:  Size  Location     Type
  9336 ;;		None               void
  9337 ;; Registers used:
  9338 ;;		wreg, status,2, status,0, cstack
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;Total ram usage:       14 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    2
  9351 ;; This function calls:
  9352 ;;		_INTx_isr
  9353 ;;		_TIMER1_isr
  9354 ;; This function is called by:
  9355 ;;		Interrupt level 2
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	intcode
  9360  000008                     __pintcode:
  9361                           	opt stack 0
  9362  000008                     _chkisr:
  9363                           	opt stack 20
  9364                           
  9365                           ;incstack = 0
  9366  000008  CFFA F003          	movff	pclath,??_chkisr
  9367  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9368  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9369  000014  ED11  F009         	call	int_func,f	;refresh shadow registers
  9370                           pclatu	equ	0xFFB
  9371                           pclath	equ	0xFFA
  9372                           tblptru	equ	0xFF8
  9373                           tblptrh	equ	0xFF7
  9374                           tblptrl	equ	0xFF6
  9375                           tablat	equ	0xFF5
  9376                           prodh	equ	0xFF4
  9377                           prodl	equ	0xFF3
  9378                           intcon	equ	0xFF2
  9379                           intcon2	equ	0xFF1
  9380                           intcon3	equ	0xFF0
  9381                           postinc0	equ	0xFEE
  9382                           fsr0l	equ	0xFE9
  9383                           wreg	equ	0xFE8
  9384                           postdec1	equ	0xFE5
  9385                           fsr1l	equ	0xFE1
  9386                           indf2	equ	0xFDF
  9387                           postinc2	equ	0xFDE
  9388                           postdec2	equ	0xFDD
  9389                           fsr2h	equ	0xFDA
  9390                           fsr2l	equ	0xFD9
  9391                           status	equ	0xFD8
  9392                           
  9393                           	psect	intcode_body
  9394  001222                     __pintcode_body:
  9395                           	opt stack 20
  9396  001222                     int_func:
  9397                           	opt stack 20
  9398  001222  0006               	pop		; remove dummy address from shadow register refresh
  9399  001224  CFEA F006          	movff	fsr0h,??_chkisr+3
  9400  001228  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9401  00122C  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9402  001230  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9403  001234  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9404  001238  CFF3 F00B          	movff	prodl,??_chkisr+8
  9405  00123C  CFF4 F00C          	movff	prodh,??_chkisr+9
  9406  001240  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9407  001244  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9408  001248  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9409  00124C  CFF5 F010          	movff	tablat,??_chkisr+13
  9410                           
  9411                           ;Interrupt.c: 38: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9412  001250  A09E               	btfss	3998,0,c	;volatile
  9413  001252  D003               	goto	i2l2494
  9414  001254  EC2E  F00D         	call	_TIMER1_isr	;wreg free
  9415  001258  D000               	goto	i2l2494
  9416  00125A                     i2l2494:
  9417                           
  9418                           ;Interrupt.c: 39: if (INTCON3bits.INT2IF == 1) INTx_isr();
  9419  00125A  A2F0               	btfss	intcon3,1,c	;volatile
  9420  00125C  D003               	goto	i2l47
  9421  00125E  EC38  F004         	call	_INTx_isr	;wreg free
  9422  001262  D000               	goto	i2l47
  9423  001264                     i2l47:
  9424  001264  C010  FFF5         	movff	??_chkisr+13,tablat
  9425  001268  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9426  00126C  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9427  001270  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9428  001274  C00C  FFF4         	movff	??_chkisr+9,prodh
  9429  001278  C00B  FFF3         	movff	??_chkisr+8,prodl
  9430  00127C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9431  001280  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9432  001284  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9433  001288  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9434  00128C  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9435  001290  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9436  001294  C004  FFFB         	movff	??_chkisr+1,pclatu
  9437  001298  C003  FFFA         	movff	??_chkisr,pclath
  9438  00129C  0011               	retfie		f
  9439  00129E                     __end_of_chkisr:
  9440                           	opt stack 0
  9441                           pclatu	equ	0xFFB
  9442                           pclath	equ	0xFFA
  9443                           tblptru	equ	0xFF8
  9444                           tblptrh	equ	0xFF7
  9445                           tblptrl	equ	0xFF6
  9446                           tablat	equ	0xFF5
  9447                           prodh	equ	0xFF4
  9448                           prodl	equ	0xFF3
  9449                           intcon	equ	0xFF2
  9450                           intcon2	equ	0xFF1
  9451                           intcon3	equ	0xFF0
  9452                           postinc0	equ	0xFEE
  9453                           fsr0h	equ	0xFEA
  9454                           fsr0l	equ	0xFE9
  9455                           wreg	equ	0xFE8
  9456                           postdec1	equ	0xFE5
  9457                           fsr1h	equ	0xFE2
  9458                           fsr1l	equ	0xFE1
  9459                           indf2	equ	0xFDF
  9460                           postinc2	equ	0xFDE
  9461                           postdec2	equ	0xFDD
  9462                           fsr2h	equ	0xFDA
  9463                           fsr2l	equ	0xFD9
  9464                           status	equ	0xFD8
  9465                           
  9466 ;; *************** function _TIMER1_isr *****************
  9467 ;; Defined at:
  9468 ;;		line 42 in file "Interrupt.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;		None
  9471 ;; Auto vars:     Size  Location     Type
  9472 ;;		None
  9473 ;; Return value:  Size  Location     Type
  9474 ;;		None               void
  9475 ;; Registers used:
  9476 ;;		wreg, status,2
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;Total ram usage:        0 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; This function calls:
  9489 ;;		Nothing
  9490 ;; This function is called by:
  9491 ;;		_chkisr
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text58
  9496  001A5C                     __ptext58:
  9497                           	opt stack 0
  9498  001A5C                     _TIMER1_isr:
  9499                           	opt stack 21
  9500                           
  9501                           ;Interrupt.c: 44: Nec_State = 0;
  9502                           
  9503                           ;incstack = 0
  9504  001A5C  0E00               	movlw	0
  9505  001A5E  6E52               	movwf	_Nec_State,c
  9506                           
  9507                           ;Interrupt.c: 45: INTCON2bits.INTEDG2 = 0;
  9508  001A60  98F1               	bcf	intcon2,4,c	;volatile
  9509                           
  9510                           ;Interrupt.c: 46: T1CONbits.TMR1ON = 0;
  9511  001A62  90CD               	bcf	4045,0,c	;volatile
  9512                           
  9513                           ;Interrupt.c: 47: PIR1bits.TMR1IF = 0;
  9514  001A64  909E               	bcf	3998,0,c	;volatile
  9515  001A66  0012               	return		;funcret
  9516  001A68                     __end_of_TIMER1_isr:
  9517                           	opt stack 0
  9518                           pclatu	equ	0xFFB
  9519                           pclath	equ	0xFFA
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           intcon	equ	0xFF2
  9527                           intcon2	equ	0xFF1
  9528                           intcon3	equ	0xFF0
  9529                           postinc0	equ	0xFEE
  9530                           fsr0h	equ	0xFEA
  9531                           fsr0l	equ	0xFE9
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1h	equ	0xFE2
  9535                           fsr1l	equ	0xFE1
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function _INTx_isr *****************
  9544 ;; Defined at:
  9545 ;;		line 56 in file "Interrupt.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;		None
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;		None
  9550 ;; Return value:  Size  Location     Type
  9551 ;;		None               void
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0, cstack
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;Total ram usage:        2 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    1
  9566 ;; This function calls:
  9567 ;;		_Reset_Nec_State
  9568 ;; This function is called by:
  9569 ;;		_chkisr
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           	psect	text59
  9574  000870                     __ptext59:
  9575                           	opt stack 0
  9576  000870                     _INTx_isr:
  9577                           	opt stack 20
  9578                           
  9579                           ;Interrupt.c: 58: INTCON3bits.INT2IF = 0;
  9580                           
  9581                           ;incstack = 0
  9582  000870  92F0               	bcf	intcon3,1,c	;volatile
  9583                           
  9584                           ;Interrupt.c: 59: if (Nec_State != 0)
  9585  000872  5052               	movf	_Nec_State,w,c
  9586  000874  B4D8               	btfsc	status,2,c
  9587  000876  D0A1               	goto	i2l2130
  9588                           
  9589                           ;Interrupt.c: 60: {
  9590                           ;Interrupt.c: 61: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9591  000878  50CE               	movf	4046,w,c	;volatile
  9592  00087A  CFCF F001          	movff	4047,??_INTx_isr	;volatile
  9593  00087E  6A02               	clrf	(??_INTx_isr+1)& (0+255),c
  9594  000880  C001  F002         	movff	??_INTx_isr,??_INTx_isr+1
  9595  000884  6A01               	clrf	??_INTx_isr,c
  9596  000886  1001               	iorwf	??_INTx_isr,w,c
  9597  000888  6E4B               	movwf	_Time_Elapsed,c
  9598  00088A  5002               	movf	??_INTx_isr+1,w,c
  9599  00088C  6E4C               	movwf	_Time_Elapsed+1,c
  9600                           
  9601                           ;Interrupt.c: 62: TMR1H = 0;
  9602  00088E  0E00               	movlw	0
  9603  000890  6ECF               	movwf	4047,c	;volatile
  9604                           
  9605                           ;Interrupt.c: 63: TMR1L = 0;
  9606  000892  0E00               	movlw	0
  9607  000894  6ECE               	movwf	4046,c	;volatile
  9608                           
  9609                           ;Interrupt.c: 64: }
  9610                           ;Interrupt.c: 66: switch(Nec_State)
  9611  000896  D091               	goto	i2l2130
  9612  000898                     i2l2044:
  9613                           
  9614                           ;Interrupt.c: 69: {
  9615                           ;Interrupt.c: 72: TMR1H = 0;
  9616  000898  0E00               	movlw	0
  9617  00089A  6ECF               	movwf	4047,c	;volatile
  9618                           
  9619                           ;Interrupt.c: 73: TMR1L = 0;
  9620  00089C  0E00               	movlw	0
  9621  00089E  6ECE               	movwf	4046,c	;volatile
  9622                           
  9623                           ;Interrupt.c: 74: PIR1bits.TMR1IF = 0;
  9624  0008A0  909E               	bcf	3998,0,c	;volatile
  9625                           
  9626                           ;Interrupt.c: 75: T1CON = 0x90;
  9627  0008A2  0E90               	movlw	144
  9628  0008A4  6ECD               	movwf	4045,c	;volatile
  9629                           
  9630                           ;Interrupt.c: 76: T1CONbits.TMR1ON = 1;
  9631  0008A6  80CD               	bsf	4045,0,c	;volatile
  9632                           
  9633                           ;Interrupt.c: 77: bit_count = 0;
  9634  0008A8  0E00               	movlw	0
  9635  0008AA  6E58               	movwf	_bit_count,c
  9636                           
  9637                           ;Interrupt.c: 78: Nec_code = 0;
  9638  0008AC  0E00               	movlw	0
  9639  0008AE  6E45               	movwf	_Nec_code,c
  9640  0008B0  0E00               	movlw	0
  9641  0008B2  6E46               	movwf	_Nec_code+1,c
  9642  0008B4  0E00               	movlw	0
  9643  0008B6  6E47               	movwf	_Nec_code+2,c
  9644  0008B8  0E00               	movlw	0
  9645  0008BA  6E48               	movwf	_Nec_code+3,c
  9646                           
  9647                           ;Interrupt.c: 79: Nec_State = 1;
  9648  0008BC  0E01               	movlw	1
  9649  0008BE  6E52               	movwf	_Nec_State,c
  9650                           
  9651                           ;Interrupt.c: 80: INTCON2bits.INTEDG2 = 1;
  9652  0008C0  88F1               	bsf	intcon2,4,c	;volatile
  9653                           
  9654                           ;Interrupt.c: 81: PORTA = Nec_State;
  9655  0008C2  C052  FF80         	movff	_Nec_State,3968	;volatile
  9656                           
  9657                           ;Interrupt.c: 83: return;
  9658  0008C6  D08A               	goto	i2l59
  9659  0008C8                     i2l2056:
  9660                           
  9661                           ;Interrupt.c: 87: {
  9662                           ;Interrupt.c: 90: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
  9663  0008C8  0E35               	movlw	53
  9664  0008CA  5C4B               	subwf	_Time_Elapsed,w,c
  9665  0008CC  0E21               	movlw	33
  9666  0008CE  584C               	subwfb	_Time_Elapsed+1,w,c
  9667  0008D0  A0D8               	btfss	status,0,c
  9668  0008D2  D009               	goto	i2l2064
  9669  0008D4  0E1C               	movlw	28
  9670  0008D6  5C4B               	subwf	_Time_Elapsed,w,c
  9671  0008D8  0E25               	movlw	37
  9672  0008DA  584C               	subwfb	_Time_Elapsed+1,w,c
  9673  0008DC  B0D8               	btfsc	status,0,c
  9674  0008DE  D003               	goto	i2l2064
  9675                           
  9676                           ;Interrupt.c: 91: {
  9677                           ;Interrupt.c: 93: Nec_State = 2;
  9678  0008E0  0E02               	movlw	2
  9679  0008E2  6E52               	movwf	_Nec_State,c
  9680  0008E4  D027               	goto	i2l2090
  9681  0008E6                     i2l2064:
  9682                           
  9683                           ;Interrupt.c: 98: else
  9684                           ;Interrupt.c: 99: {
  9685                           ;Interrupt.c: 101: Reset_Nec_State();
  9686  0008E6  EC54  F00D         	call	_Reset_Nec_State	;wreg free
  9687  0008EA  D02A               	goto	i2l2094
  9688  0008EC  D029               	goto	i2l2094
  9689                           
  9690                           ;Interrupt.c: 105: return;
  9691                           
  9692                           ;Interrupt.c: 103: }
  9693                           ;Interrupt.c: 104: INTCON2bits.INTEDG2 = 0;
  9694  0008EE  D076               	goto	i2l59
  9695  0008F0                     i2l2070:
  9696                           
  9697                           ;Interrupt.c: 109: {
  9698                           ;Interrupt.c: 111: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
  9699  0008F0  0EA1               	movlw	161
  9700  0008F2  5C4B               	subwf	_Time_Elapsed,w,c
  9701  0008F4  0E0F               	movlw	15
  9702  0008F6  584C               	subwfb	_Time_Elapsed+1,w,c
  9703  0008F8  A0D8               	btfss	status,0,c
  9704  0008FA  D009               	goto	i2l2078
  9705  0008FC  0E88               	movlw	136
  9706  0008FE  5C4B               	subwf	_Time_Elapsed,w,c
  9707  000900  0E13               	movlw	19
  9708  000902  584C               	subwfb	_Time_Elapsed+1,w,c
  9709  000904  B0D8               	btfsc	status,0,c
  9710  000906  D003               	goto	i2l2078
  9711  000908                     
  9712                           ;Interrupt.c: 112: {
  9713                           ;Interrupt.c: 113: Nec_State = 3;
  9714  000908  0E03               	movlw	3
  9715  00090A  6E52               	movwf	_Nec_State,c
  9716  00090C  D04E               	goto	i2l2120
  9717  00090E                     i2l2078:
  9718                           
  9719                           ;Interrupt.c: 117: else
  9720                           ;Interrupt.c: 118: {
  9721                           ;Interrupt.c: 120: Reset_Nec_State();
  9722  00090E  EC54  F00D         	call	_Reset_Nec_State	;wreg free
  9723  000912  D051               	goto	i2l2124
  9724  000914  D050               	goto	i2l2124
  9725                           
  9726                           ;Interrupt.c: 124: return;
  9727                           
  9728                           ;Interrupt.c: 122: }
  9729                           ;Interrupt.c: 123: INTCON2bits.INTEDG2 = 1;
  9730  000916  D062               	goto	i2l59
  9731  000918                     i2l2084:
  9732                           
  9733                           ;Interrupt.c: 128: {
  9734                           ;Interrupt.c: 130: if(Time_Elapsed > 400 && Time_Elapsed < 700)
  9735  000918  0E91               	movlw	145
  9736  00091A  5C4B               	subwf	_Time_Elapsed,w,c
  9737  00091C  0E01               	movlw	1
  9738  00091E  584C               	subwfb	_Time_Elapsed+1,w,c
  9739  000920  A0D8               	btfss	status,0,c
  9740  000922  D00B               	goto	i2l2092
  9741  000924  0EBC               	movlw	188
  9742  000926  5C4B               	subwf	_Time_Elapsed,w,c
  9743  000928  0E02               	movlw	2
  9744  00092A  584C               	subwfb	_Time_Elapsed+1,w,c
  9745  00092C  B0D8               	btfsc	status,0,c
  9746  00092E  D005               	goto	i2l2092
  9747                           
  9748                           ;Interrupt.c: 131: {
  9749                           ;Interrupt.c: 132: Nec_State = 4;
  9750  000930  0E04               	movlw	4
  9751  000932  D7D7               	goto	L4
  9752  000934                     i2l2090:
  9753                           
  9754                           ;Interrupt.c: 133: PORTA = Nec_State;
  9755  000934  C052  FF80         	movff	_Nec_State,3968	;volatile
  9756                           
  9757                           ;Interrupt.c: 135: }
  9758  000938  D003               	goto	i2l2094
  9759  00093A                     i2l2092:
  9760                           
  9761                           ;Interrupt.c: 136: else
  9762                           ;Interrupt.c: 137: {
  9763                           ;Interrupt.c: 139: Reset_Nec_State();
  9764  00093A  EC54  F00D         	call	_Reset_Nec_State	;wreg free
  9765  00093E  D000               	goto	i2l2094
  9766  000940                     i2l2094:
  9767                           
  9768                           ;Interrupt.c: 141: }
  9769                           ;Interrupt.c: 142: INTCON2bits.INTEDG2 = 0;
  9770  000940  98F1               	bcf	intcon2,4,c	;volatile
  9771                           
  9772                           ;Interrupt.c: 143: return;
  9773  000942  D04C               	goto	i2l59
  9774  000944                     i2l2098:
  9775                           
  9776                           ;Interrupt.c: 147: {
  9777                           ;Interrupt.c: 149: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  9778  000944  0E91               	movlw	145
  9779  000946  5C4B               	subwf	_Time_Elapsed,w,c
  9780  000948  0E01               	movlw	1
  9781  00094A  584C               	subwfb	_Time_Elapsed+1,w,c
  9782  00094C  A0D8               	btfss	status,0,c
  9783  00094E  D030               	goto	i2l2122
  9784  000950  0E08               	movlw	8
  9785  000952  5C4B               	subwf	_Time_Elapsed,w,c
  9786  000954  0E07               	movlw	7
  9787  000956  584C               	subwfb	_Time_Elapsed+1,w,c
  9788  000958  B0D8               	btfsc	status,0,c
  9789  00095A  D02A               	goto	i2l2122
  9790                           
  9791                           ;Interrupt.c: 150: {
  9792                           ;Interrupt.c: 151: Nec_code = Nec_code << 1;
  9793  00095C  90D8               	bcf	status,0,c
  9794  00095E  3445               	rlcf	_Nec_code,w,c
  9795  000960  6E45               	movwf	_Nec_code,c
  9796  000962  3446               	rlcf	_Nec_code+1,w,c
  9797  000964  6E46               	movwf	_Nec_code+1,c
  9798  000966  3447               	rlcf	_Nec_code+2,w,c
  9799  000968  6E47               	movwf	_Nec_code+2,c
  9800  00096A  3448               	rlcf	_Nec_code+3,w,c
  9801  00096C  6E48               	movwf	_Nec_code+3,c
  9802                           
  9803                           ;Interrupt.c: 152: if (Time_Elapsed > 1000)
  9804  00096E  0EE9               	movlw	233
  9805  000970  5C4B               	subwf	_Time_Elapsed,w,c
  9806  000972  0E03               	movlw	3
  9807  000974  584C               	subwfb	_Time_Elapsed+1,w,c
  9808  000976  A0D8               	btfss	status,0,c
  9809  000978  D007               	goto	i2l2106
  9810                           
  9811                           ;Interrupt.c: 153: Nec_code++;
  9812  00097A  0E01               	movlw	1
  9813  00097C  2645               	addwf	_Nec_code,f,c
  9814  00097E  0E00               	movlw	0
  9815  000980  2246               	addwfc	_Nec_code+1,f,c
  9816  000982  2247               	addwfc	_Nec_code+2,f,c
  9817  000984  2248               	addwfc	_Nec_code+3,f,c
  9818  000986  D000               	goto	i2l2106
  9819  000988                     i2l2106:
  9820                           
  9821                           ;Interrupt.c: 154: bit_count++;
  9822  000988  2A58               	incf	_bit_count,f,c
  9823                           
  9824                           ;Interrupt.c: 155: if(bit_count > 31)
  9825  00098A  0E1F               	movlw	31
  9826  00098C  6458               	cpfsgt	_bit_count,c
  9827  00098E  D7BC               	goto	L5
  9828                           
  9829                           ;Interrupt.c: 156: {
  9830                           ;Interrupt.c: 157: Nec_Button = Nec_code >> 8;
  9831  000990  C046  F051         	movff	_Nec_code+1,_Nec_Button
  9832                           
  9833                           ;Interrupt.c: 158: Nec_State = 0;
  9834  000994  0E00               	movlw	0
  9835  000996  6E52               	movwf	_Nec_State,c
  9836                           
  9837                           ;Interrupt.c: 159: PORTA = Nec_State;
  9838  000998  C052  FF80         	movff	_Nec_State,3968	;volatile
  9839                           
  9840                           ;Interrupt.c: 161: Nec_OK = 1;
  9841  00099C  0E00               	movlw	0
  9842  00099E  6E4A               	movwf	_Nec_OK+1,c
  9843  0009A0  0E01               	movlw	1
  9844  0009A2  6E49               	movwf	_Nec_OK,c
  9845                           
  9846                           ;Interrupt.c: 163: INTCON3bits.INT2IE = 0;
  9847  0009A4  98F0               	bcf	intcon3,4,c	;volatile
  9848                           
  9849                           ;Interrupt.c: 164: }
  9850  0009A6  D007               	goto	i2l2124
  9851  0009A8  D7AF               	goto	L5
  9852  0009AA                     i2l2120:
  9853                           
  9854                           ;Interrupt.c: 168: PORTA = Nec_State;
  9855  0009AA  C052  FF80         	movff	_Nec_State,3968	;volatile
  9856                           
  9857                           ;Interrupt.c: 170: }
  9858                           ;Interrupt.c: 171: }
  9859  0009AE  D003               	goto	i2l2124
  9860  0009B0                     i2l2122:
  9861                           
  9862                           ;Interrupt.c: 173: else
  9863                           ;Interrupt.c: 174: {
  9864                           ;Interrupt.c: 176: Reset_Nec_State();
  9865  0009B0  EC54  F00D         	call	_Reset_Nec_State	;wreg free
  9866  0009B4  D000               	goto	i2l2124
  9867  0009B6                     i2l2124:
  9868                           
  9869                           ;Interrupt.c: 178: }
  9870                           ;Interrupt.c: 179: INTCON2bits.INTEDG2 = 1;
  9871  0009B6  88F1               	bsf	intcon2,4,c	;volatile
  9872                           
  9873                           ;Interrupt.c: 181: }
  9874                           ;Interrupt.c: 182: }
  9875                           
  9876                           ;Interrupt.c: 180: return;
  9877  0009B8  D011               	goto	i2l59
  9878  0009BA                     i2l2130:
  9879  0009BA  5052               	movf	_Nec_State,w,c
  9880                           
  9881                           ; Switch size 1, requested type "space"
  9882                           ; Number of cases is 5, Range of values is 0 to 4
  9883                           ; switch strategies available:
  9884                           ; Name         Instructions Cycles
  9885                           ; simple_byte           16     9 (average)
  9886                           ;	Chosen strategy is simple_byte
  9887  0009BC  0A00               	xorlw	0	; case 0
  9888  0009BE  B4D8               	btfsc	status,2,c
  9889  0009C0  D76B               	goto	i2l2044
  9890  0009C2  0A01               	xorlw	1	; case 1
  9891  0009C4  B4D8               	btfsc	status,2,c
  9892  0009C6  D780               	goto	i2l2056
  9893  0009C8  0A03               	xorlw	3	; case 2
  9894  0009CA  B4D8               	btfsc	status,2,c
  9895  0009CC  D791               	goto	i2l2070
  9896  0009CE  0A01               	xorlw	1	; case 3
  9897  0009D0  B4D8               	btfsc	status,2,c
  9898  0009D2  D7A2               	goto	i2l2084
  9899  0009D4  0A07               	xorlw	7	; case 4
  9900  0009D6  B4D8               	btfsc	status,2,c
  9901  0009D8  D7B5               	goto	i2l2098
  9902  0009DA  D000               	goto	i2l59
  9903  0009DC                     i2l59:
  9904  0009DC  0012               	return		;funcret
  9905  0009DE                     __end_of_INTx_isr:
  9906                           	opt stack 0
  9907                           pclatu	equ	0xFFB
  9908                           pclath	equ	0xFFA
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           intcon	equ	0xFF2
  9916                           intcon2	equ	0xFF1
  9917                           intcon3	equ	0xFF0
  9918                           postinc0	equ	0xFEE
  9919                           fsr0h	equ	0xFEA
  9920                           fsr0l	equ	0xFE9
  9921                           wreg	equ	0xFE8
  9922                           postdec1	equ	0xFE5
  9923                           fsr1h	equ	0xFE2
  9924                           fsr1l	equ	0xFE1
  9925                           indf2	equ	0xFDF
  9926                           postinc2	equ	0xFDE
  9927                           postdec2	equ	0xFDD
  9928                           fsr2h	equ	0xFDA
  9929                           fsr2l	equ	0xFD9
  9930                           status	equ	0xFD8
  9931                           
  9932 ;; *************** function _Reset_Nec_State *****************
  9933 ;; Defined at:
  9934 ;;		line 50 in file "Interrupt.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;		None
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;		None
  9939 ;; Return value:  Size  Location     Type
  9940 ;;		None               void
  9941 ;; Registers used:
  9942 ;;		wreg, status,2
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9952 ;;Total ram usage:        0 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; This function calls:
  9955 ;;		Nothing
  9956 ;; This function is called by:
  9957 ;;		_INTx_isr
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           	psect	text60
  9962  001AA8                     __ptext60:
  9963                           	opt stack 0
  9964  001AA8                     _Reset_Nec_State:
  9965                           	opt stack 20
  9966                           
  9967                           ;Interrupt.c: 52: Nec_State = 0;
  9968                           
  9969                           ;incstack = 0
  9970  001AA8  0E00               	movlw	0
  9971  001AAA  6E52               	movwf	_Nec_State,c
  9972                           
  9973                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 0;
  9974  001AAC  90CD               	bcf	4045,0,c	;volatile
  9975  001AAE  0012               	return		;funcret
  9976  001AB0                     __end_of_Reset_Nec_State:
  9977                           	opt stack 0
  9978                           pclatu	equ	0xFFB
  9979                           pclath	equ	0xFFA
  9980                           tblptru	equ	0xFF8
  9981                           tblptrh	equ	0xFF7
  9982                           tblptrl	equ	0xFF6
  9983                           tablat	equ	0xFF5
  9984                           prodh	equ	0xFF4
  9985                           prodl	equ	0xFF3
  9986                           intcon	equ	0xFF2
  9987                           intcon2	equ	0xFF1
  9988                           intcon3	equ	0xFF0
  9989                           postinc0	equ	0xFEE
  9990                           fsr0h	equ	0xFEA
  9991                           fsr0l	equ	0xFE9
  9992                           wreg	equ	0xFE8
  9993                           postdec1	equ	0xFE5
  9994                           fsr1h	equ	0xFE2
  9995                           fsr1l	equ	0xFE1
  9996                           indf2	equ	0xFDF
  9997                           postinc2	equ	0xFDE
  9998                           postdec2	equ	0xFDD
  9999                           fsr2h	equ	0xFDA
 10000                           fsr2l	equ	0xFD9
 10001                           status	equ	0xFD8
 10002                           pclatu	equ	0xFFB
 10003                           pclath	equ	0xFFA
 10004                           tblptru	equ	0xFF8
 10005                           tblptrh	equ	0xFF7
 10006                           tblptrl	equ	0xFF6
 10007                           tablat	equ	0xFF5
 10008                           prodh	equ	0xFF4
 10009                           prodl	equ	0xFF3
 10010                           intcon	equ	0xFF2
 10011                           intcon2	equ	0xFF1
 10012                           intcon3	equ	0xFF0
 10013                           postinc0	equ	0xFEE
 10014                           fsr0h	equ	0xFEA
 10015                           fsr0l	equ	0xFE9
 10016                           wreg	equ	0xFE8
 10017                           postdec1	equ	0xFE5
 10018                           fsr1h	equ	0xFE2
 10019                           fsr1l	equ	0xFE1
 10020                           indf2	equ	0xFDF
 10021                           postinc2	equ	0xFDE
 10022                           postdec2	equ	0xFDD
 10023                           fsr2h	equ	0xFDA
 10024                           fsr2l	equ	0xFD9
 10025                           status	equ	0xFD8
 10026                           
 10027                           	psect	rparam
 10028  0000                     pclatu	equ	0xFFB
 10029                           pclath	equ	0xFFA
 10030                           tblptru	equ	0xFF8
 10031                           tblptrh	equ	0xFF7
 10032                           tblptrl	equ	0xFF6
 10033                           tablat	equ	0xFF5
 10034                           prodh	equ	0xFF4
 10035                           prodl	equ	0xFF3
 10036                           intcon	equ	0xFF2
 10037                           intcon2	equ	0xFF1
 10038                           intcon3	equ	0xFF0
 10039                           postinc0	equ	0xFEE
 10040                           fsr0h	equ	0xFEA
 10041                           fsr0l	equ	0xFE9
 10042                           wreg	equ	0xFE8
 10043                           postdec1	equ	0xFE5
 10044                           fsr1h	equ	0xFE2
 10045                           fsr1l	equ	0xFE1
 10046                           indf2	equ	0xFDF
 10047                           postinc2	equ	0xFDE
 10048                           postdec2	equ	0xFDD
 10049                           fsr2h	equ	0xFDA
 10050                           fsr2l	equ	0xFD9
 10051                           status	equ	0xFD8


Data Sizes:
    Strings     139
    Constant    493
    Data        159
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     68     108
    BANK0           128     11     115
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), Timing_Txt(BANK0[10]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), Timing_Txt(BANK0[10]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_5(CODE[8]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_4(CODE[22]), STR_3(CODE[19]), STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), Timing_Txt(BANK0[10]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lwmod
    ___lwmod->___lwdiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_LCD_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write

Critical Paths under _chkisr in COMRAM

    _chkisr->_INTx_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_LCD_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   56033
                                             66 COMRAM     2     2      0
                                              7 BANK0      4     4      0
                    _Activate_Buzzer
                        _DS1621_Init
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
               _Enable_INT_Interrupt
                           _I2C_Init
                     _Init_Interrupt
                          _Init_UART
              _Initialize_LCD_Screen
                       _Wait_One_Sec
                            ___awdiv
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3586
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     705
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         0     0      0       0
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (2) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   21373
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     239
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12656
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (1) _Enable_INT_Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     3     3      0     464
                                             19 COMRAM     3     3      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (1) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (3) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INTx_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INTx_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                    _Reset_Nec_State
 ---------------------------------------------------------------------------------
 (11) _Reset_Nec_State                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Init
     _I2C_Write_Cmd_Only
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Cmd_Write_Data
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Enable_INT_Interrupt
   _I2C_Init
     _i2cHighScl
     _i2cHighSda
   _Init_Interrupt
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_One_Sec
     _Wait_Half_Second
   ___awdiv
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INTx_isr
     _Reset_Nec_State
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      73       5       89.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     44      6C       1       85.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     133      34        0.0%
DATA                 0      0     133       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 07 19:41:05 2024

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                       ___awdiv@sign 0016  
              ___wmul@multiplicand 0013                                l106 180C  
                              l151 17A6                                l320 05C2  
                              l401 19AE                                l148 171A  
                              l324 06AC                                l325 0698  
                              l318 05D0                                l327 0684  
                              l504 1052                                l505 0FBE  
                              l451 1220                                l507 102E  
                              l515 0784                                l508 1050  
                              l445 186E                                l533 0BA2  
                              l622 1A46                                l391 159E  
                              l467 0B32                                l476 0A88  
                              l469 0A0C                                l655 1950  
                              l719 011C                                l780 1344  
                              l756 0374                                l784 135E  
                              l792 18C0                                l785 1360  
                              l786 136A                                l787 136C  
                              l789 1386                                l985 1198  
                ?_Wait_Half_Second 0001                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 1A90  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 004D                                _txt 004F  
                              prod 000FF3                                wreg 000FE8  
               ??_Wait_Half_Second 0011                 ?_Deactivate_Buzzer 0001  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 1870                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1223 18E2  
                             l1315 14A4                               l1325 1636  
                             l1354 1758                     drawFastVLine@x 0022  
                   drawFastVLine@y 0018                               l5100 00EE  
                             l5112 014A                               l5130 019E  
                             l5122 0174                               l5300 114C  
                             l5220 076A                               l5140 01D2  
                             l5132 01A2                               l5116 0164  
                             l5062 10B4                               l5310 1172  
                             l5302 1154                               l5126 0198  
                             l5118 0168                               l4424 1850  
                             l4432 164A                               l4600 0A18  
                             l5160 0234                               l5136 01AE  
                             l5072 0026                               l5314 117E  
                             l5154 0206                               l5146 01D8  
                             l5082 004E                               l5402 03CA  
                             l4372 11AA                               l4436 1666  
                             l4604 0A48                               l5172 026C  
                             l5148 01EA                               l5084 0064  
                             l5076 0036                               l4454 17B0  
                             l4710 16FC                               l4702 16E6  
                             l4606 0A7C                               l5318 118E  
                             l5174 0274                               l5182 02A0  
                             l5166 024C                               l5158 022A  
                             l5078 0044                               l4456 17B6  
                             l4448 179E                               l4720 1710  
                             l4376 11E2                               l4624 0AFE  
                             l4616 0AAA                               l4632 0B2E  
                             l4608 0A80                               l4640 172C  
                             l5248 085A                               l5184 02A8  
                             l5192 0332                               l5168 0254  
                             l5096 00E6                               l5088 0082  
                             l5424 0468                               l4466 17C8  
                             l4722 1716                               l4386 1208  
                             l4626 0B26                               l4618 0AD2  
                             l4650 0F88                               l5186 02EC  
                             l5194 0344                               l5178 028C  
                             l5442 04BA                               l5434 0490  
                             l5418 0452                               l4708 16F4  
                             l4716 1704                               l4388 1216  
                             l4804 1818                               l5292 112C  
                             l5196 034C                               l5460 0592  
                             l4590 09FA                               l4638 1726  
                             l4750 0DA8                               l4806 1822  
                             l5286 111A                               l5198 0358  
                             l5470 0618                               l5446 04C0  
                             l5438 049A     I2C_Write_Cmd_Write_Data@Device 0015  
                             l4672 1032                               l4656 0FF6  
                             l4920 1472                               l4850 1334  
                             l4594 0A08                               l4586 09EE  
                             l4762 0DF8                               l4682 104C  
                             l5298 1142                               l4834 0C04  
                             l4818 0B88                               l4930 1498  
                             l4922 147A                               l5474 064C  
                             l5466 05E4                               l4596 0A10  
                             l4676 103C                               l4668 1024  
                             l4940 160C                               l4908 18DA  
                             l4854 133C                               l4846 132A  
                             l4774 0E68                               l4766 0E16  
                             l4838 0C56                               l4918 1468  
                             l4942 1614                               l4776 0E70  
                             l4698 16DE                               l4866 1356  
                             l4858 1348                               l4946 162A  
                             l4938 1602                               STR_1 FF9F  
                             STR_2 FF74                               STR_3 FFD3  
                             STR_4 FFBD                               STR_5 FFF7  
                             STR_6 FFE6                               u3160 0FB6  
                             u3090 0AE0                               u3170 0FEC  
                             u3270 0DD2                               u4227 1A54  
                             u2900 11D8                               i2l47 1264  
                             i2l59 09DC                               _TRMT 007D61  
              ??_Deactivate_Buzzer 0011                               _main 0376  
                             _font FD87                               _hour 005C  
                 __end_of_I2C_Init 1A7C                   __end_of_I2C_Read 171C  
                             _year 006A                               fsr0h 000FEA  
                             _txt1 0100                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006C  
                 __end_of_I2C_Stop 19FE                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A               _Enable_INT_Interrupt 1AB0  
                  ??_drawFastVLine 001C                    __end_of_i2cNack 1A86  
                     ___param_bank 000010                    _Reset_Nec_State 1AA8  
                      ?_TIMER1_isr 0001          __end_of_Deactivate_Buzzer 1A98  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 119A  
                  drawCircle@ddF_x 0026                    drawCircle@ddF_y 0028  
                            _T0CON 000FD5                    ___awdiv@divisor 0013  
                            _T1CON 000FCD                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 14AE  
                  __end_of___lwmod 1640                    ___awdiv@counter 0015  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _SPBRG 000FAF                              _PORTA 000F80  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 0C6C  
                            _Rcmd3 0E86                              _nRBPU 007F8F  
                       _Nec_Button 0051                   __end_of_INTx_isr 09DE  
                       _i2cHighSda 1AA0                         _i2cHighScl 1A50  
                  __end_of_dpowers FF6C                              _color 0080  
                            _font2 FE86              fillCircleHelper@ddF_x 0031  
            fillCircleHelper@ddF_y 0033                    __end_of_isdigit 18E4  
                            _month 005E              fillCircleHelper@delta 002B  
                            _putch 1A42              fillCircleHelper@color 002D  
                            main@i 00F1                  __end_of_I2C_Start 1A10  
                __end_of_I2C_Write 17D6                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0001              ?_Enable_INT_Interrupt 0001  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0014  
                  __initialization 129E                       __end_of_main 06C2  
                     __end_of_font FE86                   __end_of_Rcmd2red 1798  
                           ??_main 0043                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 19DA  
        ??_TFT_GreenTab_Initialize 001D                     _Init_Interrupt 1972  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _ADCON2 000FC0  
              DS1621_Read_Temp@Cmd 0014                             _ADRESH 000FC4  
                           _ADRESL 000FC3                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0011                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                           i2l2120 09AA                             i2l2106 0988  
                           i2l2122 09B0                             i2l2130 09BA  
                           i2l2124 09B6                             i2l2044 0898  
                           i2l2070 08F0                             i2l2064 08E6  
                           i2l2056 08C8                             i2l2090 0934  
                           i2l2092 093A                             i2l2084 0918  
                           i2l2094 0940                             i2l2078 090E  
                           i2l2098 0944                             i2l2494 125A  
                           _OSCCON 000FD3                 __size_of_Init_UART 0014  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
          __end_of_Reset_Nec_State 1AB0                             _SSPBUF 000FC9  
                        ??_i2cNack 0011                   __end_of_delay_ms 15A6  
                           _Nec_OK 0049                             _i2cAck 19DA  
                 __end_of_fillRect 168A                   __end_of_drawChar 0B34  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 189A                          ??___awdiv 0015  
        __size_of_fillCircleHelper 0138                   __end_of_drawtext 0E86  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 00AA                          ??___lwmod 001C  
                           _buffer 00C9                             clear_0 12A4  
                           clear_1 12B0                   ___awdiv@quotient 0017  
                           _minute 005D                             _second 0060  
          DS3231_Setup_Time@Device 0013                         _Timing_Txt 00BF  
       __size_of_Deactivate_Buzzer 0008                             _printf 001C  
                     drawtext@size 0040                             _strcpy 180E  
                           _strlen 171C             __end_of_Init_Interrupt 198A  
          ??_Initialize_LCD_Screen 0043                       __pdataCOMRAM 006B  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD86                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 1904                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 19B4                         __accesstop 0080  
          __end_of__initialization 130E             ??_Enable_INT_Interrupt 0011  
               _setup_alarm_minute 0062                 _setup_alarm_second 0063  
                    ___rparam_used 000001                      __end_of_Rcmd1 0D7C  
                    __end_of_Rcmd3 0F78                     __pcstackCOMRAM 0001  
                     __pidataBANK0 168A                       __pidataBANK1 14AE  
                        ?_INTx_isr 0001                      __end_of_font2 FF62  
                __end_of_i2cLowSda 1A90                  __end_of_i2cLowScl 1AA0  
                    __end_of_putch 1A50                  __end_of_Init_UART 19C8  
                   drawPixel@color 0019                    ?_Init_Interrupt 0001  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                       ??_I2C_Read 0011                       _alarm_minute 0056  
                     _alarm_second 0057                         ??_I2C_Stop 0011  
       fillCircleHelper@cornername 0029                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1388                            ??_putch 0011  
                       __pbssBANK0 00C9                   _setup_alarm_hour 0061  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
        __size_of_Wait_Half_Second 001A                    spiwrite@spidata 0012  
                       _alarm_date 0054                   ?_Reset_Nec_State 0001  
                       _alarm_hour 0055                      ?_Wait_One_Sec 0001  
                          ?_i2cAck 0001                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                         ??_INTx_isr 0001  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                       _fillCircle 1502                         I2C_Write@n 0012  
                          ?_printf 001D                            ?_strcpy 0011  
                          ?_strlen 0011                  ??_Activate_Buzzer 0011  
                       _fillScreen 1922                         _drawCircle 06C2  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 1054  
                        ?_drawtext 0039                  _DS3231_Setup_Time 1388  
         _I2C_Write_Cmd_Write_Data 18E4         __end_of_I2C_Write_Cmd_Only 1972  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0016  
                   ??_Wait_One_Sec 0011                            _i2cNack 1A7C  
               __end_of_TIMER1_isr 1A68                 ?_DS3231_Setup_Time 0001  
                    _write_command 1A32                          _I2C_Start 19FE  
                        _I2C_Write 1798                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 1922                  __end_of_drawPixel 1870  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1222  
                 _fillCircleHelper 0B34                            ___awdiv 1104  
                  __size_of___wmul 0028                            ___lwdiv 1452  
                          ___lwmod 15F4                    __size_of_chkisr 1296  
                        ?_spiwrite 0001                            __pcinit 129E  
                          __ramtop 1000                            __ptext0 0376  
                          __ptext1 001C                            __ptext2 1A42  
                          __ptext3 18C2                            __ptext4 15F4  
                          __ptext5 1452          __size_of_DS1621_Read_Temp 0038  
                          __ptext6 1502                            __ptext7 0B34  
                          __ptext8 06C2                            __ptext9 1104  
                  __size_of_printf 035A                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF74                          _T1CONbits 000FCD  
         DS3231_Setup_Time@Address 0014                            _dpowers FF62  
                          _isdigit 18C2                          _T3CONbits 000FB1  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 19A0  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 13EE  
                       ??_drawChar 0035                          _LCD_Reset 19C8  
                    _setAddrWindow 15A6                     __pintcode_body 1222  
                       delay_ms@ms 0017               end_of_initialization 130E  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD86          __size_of_DS3231_Read_Time 0064  
                          int_func 1222            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006B                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                   drawtext@cursor_x 00EE  
                 drawtext@cursor_y 00ED                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                        _PORTEbits 000F84                   I2C_Write@outByte 0011  
                      ?_fillScreen 0024                         _setup_hour 0065  
                       _setup_year 0069                        ?_drawCircle 001C  
   __size_of_Initialize_LCD_Screen 00B0                         drawChar@bg 0032  
    __end_of_Initialize_LCD_Screen 1104                          _TRISBbits 000F93  
                        _TRISCbits 000F94                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00E9                         drawPixel@x 001B  
                       drawPixel@y 0018                   _Wait_Half_Second 193E  
                      _DS1621_Init 1904                        printf@width 0036  
                        _TXSTAbits 000FAC                     __end_of_i2cAck 19EC  
         DS1621_Read_Temp@Data_Ret 0015                   ??_Init_Interrupt 0011  
               __end_of_i2cHighSda 1AA8                 __end_of_i2cHighScl 1A5C  
                   __end_of___wmul 18C2                      delay_ms@count 001B  
                       _write_data 1A22                      __pidataCOMRAM 1AB6  
                   __end_of_chkisr 129E           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 198A                  __size_of_INTx_isr 016E  
                        _Nec_State 0052                         drawtext@bg 003E  
                        _i2cLowSda 1A86                          _i2cLowScl 1A98  
             __end_of_Wait_One_Sec 1A72                     __end_of_printf 0376  
                   __end_of_strcpy 1840                     __end_of_strlen 175A  
              start_initialization 129E                          _Init_UART 19B4  
       __size_of_DS3231_Setup_Time 0066                    ??_write_command 0013  
                        _OpenUSART 1318                __size_of_fillCircle 0052  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE      __size_of_Enable_INT_Interrupt 0006  
                  _Activate_Buzzer 1A10                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 17D6                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0045  
       ??_I2C_Write_Cmd_Write_Data 0015                         ?_Init_UART 0001  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00E8  
                      ??_LCD_Reset 001D                       _isdigit$2498 0012  
         __end_of_fillCircleHelper 0C6C                  __size_of_delay_ms 0052  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 13EE  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                        I2C_Read@ack 0011  
                        _bit_count 0058                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 189A                      __pmediumconst FD86  
                         ?___awdiv 0011           __size_of_Reset_Nec_State 0008  
                        __tft_type 0053                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 1958                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 1840                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                           ?_isdigit 0001  
                         _I2C_Init 1A72                           _I2C_Read 16D4  
                         _I2C_Stop 19EC                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF6C                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 1A22  
                   ___wmul@product 0015               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                         _INTx_isr 0870              __size_of_Wait_One_Sec 000A  
                        _setup_day 0064                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                     ??_fillCircle 0043                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC                         _ADCON0bits 000FC2  
         __end_of_Wait_Half_Second 1958                  ___wmul@multiplier 0011  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                        main@found 00F2                          main@tempC 00F0  
                        main@tempF 00EF                        ??_Init_UART 0014  
                      _INTCON2bits 000FF1                        _INTCON3bits 000FF0  
                        copy_data0 12CA                          copy_data1 12EA  
                        drawtext@i 00EB             __size_of_drawFastVLine 0088  
                        drawtext@x 00E8                          drawtext@y 0039  
                         _Nec_code 0045                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                       ?_DS1621_Init 0001  
                         _Rcmd2red 175A                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 004B  
               __end_of_fillCircle 1554                   __size_of_i2cNack 000A  
                     _Wait_One_Sec 1A68                           __Hrparam 0000  
               __end_of_fillScreen 193E                           __Lrparam 0000  
               __end_of_drawCircle 0870                   __size_of___awdiv 0096  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                     ?_I2C_ReStart 0001                  ??_Reset_Nec_State 0001  
                 __size_of_isdigit 0022                           _delay_ms 1554  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0015  
                         __ptext10 1A68                           __ptext11 193E  
                         __ptext20 119A                           __ptext12 1054  
                         __ptext21 1840                           __ptext13 180E  
                         __ptext30 19C8                           __ptext22 15A6  
                         __ptext14 1922                           __ptext31 1554  
                         __ptext23 1870                           __ptext15 0F78  
                         __ptext40 13EE                           __ptext32 189A  
                         __ptext24 0E86                           __ptext16 0D7C  
                         __ptext41 17D6                           __ptext33 19B4  
                         __ptext25 175A                           __ptext17 171C  
                         __ptext50 19EC                           __ptext42 16D4  
                         __ptext34 1318                           __ptext26 0C6C  
                         __ptext18 09DE                           __ptext51 19FE  
                         __ptext43 1A7C                           __ptext35 1972  
                         __ptext27 1A22                           __ptext19 1640  
                         __ptext60 1AA8                           __ptext52 1A86  
                         __ptext44 19DA                           __ptext36 1A72  
                         __ptext28 1A32                           __ptext53 1A98  
                         __ptext45 198A                           __ptext37 1AB0  
                         __ptext29 19A0                           __ptext54 1AA0  
                         __ptext46 1904                           __ptext38 1A90  
                         __ptext55 1A50                           __ptext47 18E4  
                         __ptext39 1388                           __ptext56 1A10  
                         __ptext48 1958                           __ptext49 1798  
                         __ptext58 1A5C                           __ptext59 0870  
                         _fillRect 1640                           _drawChar 09DE  
            _Initialize_LCD_Screen 1054   __size_of_TFT_GreenTab_Initialize 002A  
                         _colstart 0059                           _drawtext 0D7C  
                       strcpy@from 0013                      _fillRectangle 0F78  
         __end_of_DS1621_Read_Temp 180E                   ?_Activate_Buzzer 0001  
                    __size_of_main 034C                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 119A  
                        printf@idx 002F                           _spiwrite 19A0  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 005F           __end_of_DS3231_Read_Time 1452  
               fillCircleHelper@x0 0023                 fillCircleHelper@y0 0025  
     __end_of_Enable_INT_Interrupt 1AB6                         _INTCONbits 000FF2  
                   OpenUSART@spbrg 0011                           isdigit@c 0013  
                ?_fillCircleHelper 0023                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
               ??_fillCircleHelper 002F                   ___lwmod@dividend 0018  
            __end_of_write_command 1A42                    fillScreen@color 0024  
                     fillCircle@x0 003B                       fillCircle@y0 003D  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0030  
                fillCircleHelper@f 0035                  fillCircleHelper@r 0027  
                fillCircleHelper@x 0037                  fillCircleHelper@y 0039  
                     ??_write_data 0013                         _TIMER1_isr 1A5C  
                    fillRect@color 0026                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0066  
                     _setup_second 0068            __size_of_Init_Interrupt 0018  
           ?_Initialize_LCD_Screen 0001                        fillCircle@r 003F  
            __end_of_setAddrWindow 15F4                 fillRectangle@color 001B  
                    drawChar@color 0030                        _setup_month 0067  
               __end_of_write_data 1A32                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
