

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 17 17:46:32 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	idataCOMRAM
    56  00E647                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _wrap
    60  00E647  01                 	db	1
    61                           
    62                           ;initializer for _Light_Sensor_Voltage_Txt
    63  00E648  32                 	db	50
    64  00E649  2E                 	db	46
    65  00E64A  35                 	db	53
    66  00E64B  56                 	db	86
    67  00E64C  00                 	db	0
    68                           
    69                           ;initializer for _EWLT_Count
    70  00E64D  30                 	db	48
    71  00E64E  30                 	db	48
    72  00E64F  00                 	db	0
    73                           
    74                           ;initializer for _EW_Count
    75  00E650  30                 	db	48
    76  00E651  30                 	db	48
    77  00E652  00                 	db	0
    78                           
    79                           ;initializer for _Light_Sensor_Mode_Txt
    80  00E653  2D                 	db	45
    81  00E654  44                 	db	68
    82  00E655  00                 	db	0
    83                           
    84                           ;initializer for _NSLT_Count
    85  00E656  30                 	db	48
    86  00E657  30                 	db	48
    87  00E658  00                 	db	0
    88                           
    89                           ;initializer for _NS_Count
    90  00E659  30                 	db	48
    91  00E65A  30                 	db	48
    92  00E65B  00                 	db	0
    93                           
    94                           ;initializer for _PED_EW_Count
    95  00E65C  30                 	db	48
    96  00E65D  30                 	db	48
    97  00E65E  00                 	db	0
    98                           
    99                           ;initializer for _PED_NS_Count
   100  00E65F  30                 	db	48
   101  00E660  30                 	db	48
   102  00E661  00                 	db	0
   103                           
   104                           ;initializer for _Act_Mode_Txt
   105  00E662  44                 	db	68
   106  00E663  00                 	db	0
   107                           
   108                           ;initializer for _FlashingR_Txt
   109  00E664  30                 	db	48
   110  00E665  00                 	db	0
   111                           
   112                           ;initializer for _FlashingS_Txt
   113  00E666  30                 	db	48
   114  00E667  00                 	db	0
   115                           
   116                           ;initializer for _SW_EWLT_Txt
   117  00E668  30                 	db	48
   118  00E669  00                 	db	0
   119                           
   120                           ;initializer for _SW_EWPED_Txt
   121  00E66A  30                 	db	48
   122  00E66B  00                 	db	0
   123                           
   124                           ;initializer for _SW_NSLT_Txt
   125  00E66C  30                 	db	48
   126  00E66D  00                 	db	0
   127                           
   128                           ;initializer for _SW_NSPED_Txt
   129  00E66E  30                 	db	48
   130  00E66F  00                 	db	0
   131                           
   132                           	psect	idataBANK0
   133  00E5C6                     __pidataBANK0:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _Timing_Txt
   137  00E5C6  53                 	db	83
   138  00E5C7  50                 	db	80
   139  00E5C8  32                 	db	50
   140  00E5C9  34                 	db	52
   141  00E5CA  2F                 	db	47
   142  00E5CB  31                 	db	49
   143  00E5CC  2F                 	db	47
   144  00E5CD  30                 	db	48
   145  00E5CE  31                 	db	49
   146  00E5CF  20                 	db	32
   147  00E5D0  30                 	db	48
   148  00E5D1  30                 	db	48
   149  00E5D2  30                 	db	48
   150  00E5D3  30                 	db	48
   151  00E5D4  30                 	db	48
   152  00E5D5  30                 	db	48
   153  00E5D6  20                 	db	32
   154  00E5D7  30                 	db	48
   155  00E5D8  30                 	db	48
   156  00E5D9  30                 	db	48
   157  00E5DA  30                 	db	48
   158  00E5DB  00                 	db	0
   159                           
   160                           	psect	mediumconst
   161  00FDCE                     __pmediumconst:
   162                           	opt stack 0
   163  00FDCE  00                 	db	0
   164  00FDCF                     _font:
   165                           	opt stack 0
   166  00FDCF  00                 	db	0
   167  00FDD0  00                 	db	0
   168  00FDD1  00                 	db	0
   169  00FDD2  00                 	db	0
   170  00FDD3  00                 	db	0
   171  00FDD4  00                 	db	0
   172  00FDD5  00                 	db	0
   173  00FDD6  5F                 	db	95
   174  00FDD7  00                 	db	0
   175  00FDD8  00                 	db	0
   176  00FDD9  00                 	db	0
   177  00FDDA  07                 	db	7
   178  00FDDB  00                 	db	0
   179  00FDDC  07                 	db	7
   180  00FDDD  00                 	db	0
   181  00FDDE  14                 	db	20
   182  00FDDF  7F                 	db	127
   183  00FDE0  14                 	db	20
   184  00FDE1  7F                 	db	127
   185  00FDE2  14                 	db	20
   186  00FDE3  24                 	db	36
   187  00FDE4  2A                 	db	42
   188  00FDE5  7F                 	db	127
   189  00FDE6  2A                 	db	42
   190  00FDE7  12                 	db	18
   191  00FDE8  23                 	db	35
   192  00FDE9  13                 	db	19
   193  00FDEA  08                 	db	8
   194  00FDEB  64                 	db	100
   195  00FDEC  62                 	db	98
   196  00FDED  36                 	db	54
   197  00FDEE  49                 	db	73
   198  00FDEF  56                 	db	86
   199  00FDF0  20                 	db	32
   200  00FDF1  50                 	db	80
   201  00FDF2  00                 	db	0
   202  00FDF3  08                 	db	8
   203  00FDF4  07                 	db	7
   204  00FDF5  03                 	db	3
   205  00FDF6  00                 	db	0
   206  00FDF7  00                 	db	0
   207  00FDF8  1C                 	db	28
   208  00FDF9  22                 	db	34
   209  00FDFA  41                 	db	65
   210  00FDFB  00                 	db	0
   211  00FDFC  00                 	db	0
   212  00FDFD  41                 	db	65
   213  00FDFE  22                 	db	34
   214  00FDFF  1C                 	db	28
   215  00FE00  00                 	db	0
   216  00FE01  2A                 	db	42
   217  00FE02  1C                 	db	28
   218  00FE03  7F                 	db	127
   219  00FE04  1C                 	db	28
   220  00FE05  2A                 	db	42
   221  00FE06  08                 	db	8
   222  00FE07  08                 	db	8
   223  00FE08  3E                 	db	62
   224  00FE09  08                 	db	8
   225  00FE0A  08                 	db	8
   226  00FE0B  00                 	db	0
   227  00FE0C  80                 	db	128
   228  00FE0D  70                 	db	112
   229  00FE0E  30                 	db	48
   230  00FE0F  00                 	db	0
   231  00FE10  08                 	db	8
   232  00FE11  08                 	db	8
   233  00FE12  08                 	db	8
   234  00FE13  08                 	db	8
   235  00FE14  08                 	db	8
   236  00FE15  00                 	db	0
   237  00FE16  00                 	db	0
   238  00FE17  60                 	db	96
   239  00FE18  60                 	db	96
   240  00FE19  00                 	db	0
   241  00FE1A  20                 	db	32
   242  00FE1B  10                 	db	16
   243  00FE1C  08                 	db	8
   244  00FE1D  04                 	db	4
   245  00FE1E  02                 	db	2
   246  00FE1F  3E                 	db	62
   247  00FE20  51                 	db	81
   248  00FE21  49                 	db	73
   249  00FE22  45                 	db	69
   250  00FE23  3E                 	db	62
   251  00FE24  00                 	db	0
   252  00FE25  42                 	db	66
   253  00FE26  7F                 	db	127
   254  00FE27  40                 	db	64
   255  00FE28  00                 	db	0
   256  00FE29  72                 	db	114
   257  00FE2A  49                 	db	73
   258  00FE2B  49                 	db	73
   259  00FE2C  49                 	db	73
   260  00FE2D  46                 	db	70
   261  00FE2E  21                 	db	33
   262  00FE2F  41                 	db	65
   263  00FE30  49                 	db	73
   264  00FE31  4D                 	db	77
   265  00FE32  33                 	db	51
   266  00FE33  18                 	db	24
   267  00FE34  14                 	db	20
   268  00FE35  12                 	db	18
   269  00FE36  7F                 	db	127
   270  00FE37  10                 	db	16
   271  00FE38  27                 	db	39
   272  00FE39  45                 	db	69
   273  00FE3A  45                 	db	69
   274  00FE3B  45                 	db	69
   275  00FE3C  39                 	db	57
   276  00FE3D  3C                 	db	60
   277  00FE3E  4A                 	db	74
   278  00FE3F  49                 	db	73
   279  00FE40  49                 	db	73
   280  00FE41  31                 	db	49
   281  00FE42  41                 	db	65
   282  00FE43  21                 	db	33
   283  00FE44  11                 	db	17
   284  00FE45  09                 	db	9
   285  00FE46  07                 	db	7
   286  00FE47  36                 	db	54
   287  00FE48  49                 	db	73
   288  00FE49  49                 	db	73
   289  00FE4A  49                 	db	73
   290  00FE4B  36                 	db	54
   291  00FE4C  46                 	db	70
   292  00FE4D  49                 	db	73
   293  00FE4E  49                 	db	73
   294  00FE4F  29                 	db	41
   295  00FE50  1E                 	db	30
   296  00FE51  00                 	db	0
   297  00FE52  00                 	db	0
   298  00FE53  14                 	db	20
   299  00FE54  00                 	db	0
   300  00FE55  00                 	db	0
   301  00FE56  00                 	db	0
   302  00FE57  40                 	db	64
   303  00FE58  34                 	db	52
   304  00FE59  00                 	db	0
   305  00FE5A  00                 	db	0
   306  00FE5B  00                 	db	0
   307  00FE5C  08                 	db	8
   308  00FE5D  14                 	db	20
   309  00FE5E  22                 	db	34
   310  00FE5F  41                 	db	65
   311  00FE60  14                 	db	20
   312  00FE61  14                 	db	20
   313  00FE62  14                 	db	20
   314  00FE63  14                 	db	20
   315  00FE64  14                 	db	20
   316  00FE65  00                 	db	0
   317  00FE66  41                 	db	65
   318  00FE67  22                 	db	34
   319  00FE68  14                 	db	20
   320  00FE69  08                 	db	8
   321  00FE6A  02                 	db	2
   322  00FE6B  01                 	db	1
   323  00FE6C  59                 	db	89
   324  00FE6D  09                 	db	9
   325  00FE6E  06                 	db	6
   326  00FE6F  3E                 	db	62
   327  00FE70  41                 	db	65
   328  00FE71  5D                 	db	93
   329  00FE72  59                 	db	89
   330  00FE73  4E                 	db	78
   331  00FE74  7C                 	db	124
   332  00FE75  12                 	db	18
   333  00FE76  11                 	db	17
   334  00FE77  12                 	db	18
   335  00FE78  7C                 	db	124
   336  00FE79  7F                 	db	127
   337  00FE7A  49                 	db	73
   338  00FE7B  49                 	db	73
   339  00FE7C  49                 	db	73
   340  00FE7D  36                 	db	54
   341  00FE7E  3E                 	db	62
   342  00FE7F  41                 	db	65
   343  00FE80  41                 	db	65
   344  00FE81  41                 	db	65
   345  00FE82  22                 	db	34
   346  00FE83  7F                 	db	127
   347  00FE84  41                 	db	65
   348  00FE85  41                 	db	65
   349  00FE86  41                 	db	65
   350  00FE87  3E                 	db	62
   351  00FE88  7F                 	db	127
   352  00FE89  49                 	db	73
   353  00FE8A  49                 	db	73
   354  00FE8B  49                 	db	73
   355  00FE8C  41                 	db	65
   356  00FE8D  7F                 	db	127
   357  00FE8E  09                 	db	9
   358  00FE8F  09                 	db	9
   359  00FE90  09                 	db	9
   360  00FE91  01                 	db	1
   361  00FE92  3E                 	db	62
   362  00FE93  41                 	db	65
   363  00FE94  41                 	db	65
   364  00FE95  51                 	db	81
   365  00FE96  73                 	db	115
   366  00FE97  7F                 	db	127
   367  00FE98  08                 	db	8
   368  00FE99  08                 	db	8
   369  00FE9A  08                 	db	8
   370  00FE9B  7F                 	db	127
   371  00FE9C  00                 	db	0
   372  00FE9D  41                 	db	65
   373  00FE9E  7F                 	db	127
   374  00FE9F  41                 	db	65
   375  00FEA0  00                 	db	0
   376  00FEA1  20                 	db	32
   377  00FEA2  40                 	db	64
   378  00FEA3  41                 	db	65
   379  00FEA4  3F                 	db	63
   380  00FEA5  01                 	db	1
   381  00FEA6  7F                 	db	127
   382  00FEA7  08                 	db	8
   383  00FEA8  14                 	db	20
   384  00FEA9  22                 	db	34
   385  00FEAA  41                 	db	65
   386  00FEAB  7F                 	db	127
   387  00FEAC  40                 	db	64
   388  00FEAD  40                 	db	64
   389  00FEAE  40                 	db	64
   390  00FEAF  40                 	db	64
   391  00FEB0  7F                 	db	127
   392  00FEB1  02                 	db	2
   393  00FEB2  1C                 	db	28
   394  00FEB3  02                 	db	2
   395  00FEB4  7F                 	db	127
   396  00FEB5  7F                 	db	127
   397  00FEB6  04                 	db	4
   398  00FEB7  08                 	db	8
   399  00FEB8  10                 	db	16
   400  00FEB9  7F                 	db	127
   401  00FEBA  3E                 	db	62
   402  00FEBB  41                 	db	65
   403  00FEBC  41                 	db	65
   404  00FEBD  41                 	db	65
   405  00FEBE  3E                 	db	62
   406  00FEBF  7F                 	db	127
   407  00FEC0  09                 	db	9
   408  00FEC1  09                 	db	9
   409  00FEC2  09                 	db	9
   410  00FEC3  06                 	db	6
   411  00FEC4  3E                 	db	62
   412  00FEC5  41                 	db	65
   413  00FEC6  51                 	db	81
   414  00FEC7  21                 	db	33
   415  00FEC8  5E                 	db	94
   416  00FEC9  7F                 	db	127
   417  00FECA  09                 	db	9
   418  00FECB  19                 	db	25
   419  00FECC  29                 	db	41
   420  00FECD  46                 	db	70
   421  00FECE                     __end_of_font:
   422                           	opt stack 0
   423  00FECE                     _font2:
   424                           	opt stack 0
   425  00FECE  26                 	db	38
   426  00FECF  49                 	db	73
   427  00FED0  49                 	db	73
   428  00FED1  49                 	db	73
   429  00FED2  32                 	db	50
   430  00FED3  03                 	db	3
   431  00FED4  01                 	db	1
   432  00FED5  7F                 	db	127
   433  00FED6  01                 	db	1
   434  00FED7  03                 	db	3
   435  00FED8  3F                 	db	63
   436  00FED9  40                 	db	64
   437  00FEDA  40                 	db	64
   438  00FEDB  40                 	db	64
   439  00FEDC  3F                 	db	63
   440  00FEDD  1F                 	db	31
   441  00FEDE  20                 	db	32
   442  00FEDF  40                 	db	64
   443  00FEE0  20                 	db	32
   444  00FEE1  1F                 	db	31
   445  00FEE2  3F                 	db	63
   446  00FEE3  40                 	db	64
   447  00FEE4  38                 	db	56
   448  00FEE5  40                 	db	64
   449  00FEE6  3F                 	db	63
   450  00FEE7  63                 	db	99
   451  00FEE8  14                 	db	20
   452  00FEE9  08                 	db	8
   453  00FEEA  14                 	db	20
   454  00FEEB  63                 	db	99
   455  00FEEC  03                 	db	3
   456  00FEED  04                 	db	4
   457  00FEEE  78                 	db	120
   458  00FEEF  04                 	db	4
   459  00FEF0  03                 	db	3
   460  00FEF1  61                 	db	97
   461  00FEF2  59                 	db	89
   462  00FEF3  49                 	db	73
   463  00FEF4  4D                 	db	77
   464  00FEF5  43                 	db	67
   465  00FEF6  00                 	db	0
   466  00FEF7  7F                 	db	127
   467  00FEF8  41                 	db	65
   468  00FEF9  41                 	db	65
   469  00FEFA  41                 	db	65
   470  00FEFB  02                 	db	2
   471  00FEFC  04                 	db	4
   472  00FEFD  08                 	db	8
   473  00FEFE  10                 	db	16
   474  00FEFF  20                 	db	32
   475  00FF00  00                 	db	0
   476  00FF01  41                 	db	65
   477  00FF02  41                 	db	65
   478  00FF03  41                 	db	65
   479  00FF04  7F                 	db	127
   480  00FF05  04                 	db	4
   481  00FF06  02                 	db	2
   482  00FF07  01                 	db	1
   483  00FF08  02                 	db	2
   484  00FF09  04                 	db	4
   485  00FF0A  40                 	db	64
   486  00FF0B  40                 	db	64
   487  00FF0C  40                 	db	64
   488  00FF0D  40                 	db	64
   489  00FF0E  40                 	db	64
   490  00FF0F  00                 	db	0
   491  00FF10  03                 	db	3
   492  00FF11  07                 	db	7
   493  00FF12  08                 	db	8
   494  00FF13  00                 	db	0
   495  00FF14  20                 	db	32
   496  00FF15  54                 	db	84
   497  00FF16  54                 	db	84
   498  00FF17  78                 	db	120
   499  00FF18  40                 	db	64
   500  00FF19  7F                 	db	127
   501  00FF1A  28                 	db	40
   502  00FF1B  44                 	db	68
   503  00FF1C  44                 	db	68
   504  00FF1D  38                 	db	56
   505  00FF1E  38                 	db	56
   506  00FF1F  44                 	db	68
   507  00FF20  44                 	db	68
   508  00FF21  44                 	db	68
   509  00FF22  28                 	db	40
   510  00FF23  38                 	db	56
   511  00FF24  44                 	db	68
   512  00FF25  44                 	db	68
   513  00FF26  28                 	db	40
   514  00FF27  7F                 	db	127
   515  00FF28  38                 	db	56
   516  00FF29  54                 	db	84
   517  00FF2A  54                 	db	84
   518  00FF2B  54                 	db	84
   519  00FF2C  18                 	db	24
   520  00FF2D  00                 	db	0
   521  00FF2E  08                 	db	8
   522  00FF2F  7E                 	db	126
   523  00FF30  09                 	db	9
   524  00FF31  02                 	db	2
   525  00FF32  18                 	db	24
   526  00FF33  A4                 	db	164
   527  00FF34  A4                 	db	164
   528  00FF35  9C                 	db	156
   529  00FF36  78                 	db	120
   530  00FF37  7F                 	db	127
   531  00FF38  08                 	db	8
   532  00FF39  04                 	db	4
   533  00FF3A  04                 	db	4
   534  00FF3B  78                 	db	120
   535  00FF3C  00                 	db	0
   536  00FF3D  44                 	db	68
   537  00FF3E  7D                 	db	125
   538  00FF3F  40                 	db	64
   539  00FF40  00                 	db	0
   540  00FF41  20                 	db	32
   541  00FF42  40                 	db	64
   542  00FF43  40                 	db	64
   543  00FF44  3D                 	db	61
   544  00FF45  00                 	db	0
   545  00FF46  7F                 	db	127
   546  00FF47  10                 	db	16
   547  00FF48  28                 	db	40
   548  00FF49  44                 	db	68
   549  00FF4A  00                 	db	0
   550  00FF4B  00                 	db	0
   551  00FF4C  41                 	db	65
   552  00FF4D  7F                 	db	127
   553  00FF4E  40                 	db	64
   554  00FF4F  00                 	db	0
   555  00FF50  7C                 	db	124
   556  00FF51  04                 	db	4
   557  00FF52  78                 	db	120
   558  00FF53  04                 	db	4
   559  00FF54  78                 	db	120
   560  00FF55  7C                 	db	124
   561  00FF56  08                 	db	8
   562  00FF57  04                 	db	4
   563  00FF58  04                 	db	4
   564  00FF59  78                 	db	120
   565  00FF5A  38                 	db	56
   566  00FF5B  44                 	db	68
   567  00FF5C  44                 	db	68
   568  00FF5D  44                 	db	68
   569  00FF5E  38                 	db	56
   570  00FF5F  FC                 	db	252
   571  00FF60  18                 	db	24
   572  00FF61  24                 	db	36
   573  00FF62  24                 	db	36
   574  00FF63  18                 	db	24
   575  00FF64  18                 	db	24
   576  00FF65  24                 	db	36
   577  00FF66  24                 	db	36
   578  00FF67  18                 	db	24
   579  00FF68  FC                 	db	252
   580  00FF69  7C                 	db	124
   581  00FF6A  08                 	db	8
   582  00FF6B  04                 	db	4
   583  00FF6C  04                 	db	4
   584  00FF6D  08                 	db	8
   585  00FF6E  48                 	db	72
   586  00FF6F  54                 	db	84
   587  00FF70  54                 	db	84
   588  00FF71  54                 	db	84
   589  00FF72  24                 	db	36
   590  00FF73  04                 	db	4
   591  00FF74  04                 	db	4
   592  00FF75  3F                 	db	63
   593  00FF76  44                 	db	68
   594  00FF77  24                 	db	36
   595  00FF78  3C                 	db	60
   596  00FF79  40                 	db	64
   597  00FF7A  40                 	db	64
   598  00FF7B  20                 	db	32
   599  00FF7C  7C                 	db	124
   600  00FF7D  1C                 	db	28
   601  00FF7E  20                 	db	32
   602  00FF7F  40                 	db	64
   603  00FF80  20                 	db	32
   604  00FF81  1C                 	db	28
   605  00FF82  3C                 	db	60
   606  00FF83  40                 	db	64
   607  00FF84  30                 	db	48
   608  00FF85  40                 	db	64
   609  00FF86  3C                 	db	60
   610  00FF87  44                 	db	68
   611  00FF88  28                 	db	40
   612  00FF89  10                 	db	16
   613  00FF8A  28                 	db	40
   614  00FF8B  44                 	db	68
   615  00FF8C  4C                 	db	76
   616  00FF8D  90                 	db	144
   617  00FF8E  90                 	db	144
   618  00FF8F  90                 	db	144
   619  00FF90  7C                 	db	124
   620  00FF91  44                 	db	68
   621  00FF92  64                 	db	100
   622  00FF93  54                 	db	84
   623  00FF94  4C                 	db	76
   624  00FF95  44                 	db	68
   625  00FF96  00                 	db	0
   626  00FF97  08                 	db	8
   627  00FF98  36                 	db	54
   628  00FF99  41                 	db	65
   629  00FF9A  00                 	db	0
   630  00FF9B  00                 	db	0
   631  00FF9C  00                 	db	0
   632  00FF9D  77                 	db	119
   633  00FF9E  00                 	db	0
   634  00FF9F  00                 	db	0
   635  00FFA0  00                 	db	0
   636  00FFA1  41                 	db	65
   637  00FFA2  36                 	db	54
   638  00FFA3  08                 	db	8
   639  00FFA4  00                 	db	0
   640  00FFA5  02                 	db	2
   641  00FFA6  01                 	db	1
   642  00FFA7  02                 	db	2
   643  00FFA8  04                 	db	4
   644  00FFA9  02                 	db	2
   645  00FFAA                     __end_of_font2:
   646                           	opt stack 0
   647  0000                     _ADCON0	set	4034
   648  0000                     _ADCON0bits	set	4034
   649  0000                     _ADCON1	set	4033
   650  0000                     _ADCON2	set	4032
   651  0000                     _ADRESH	set	4036
   652  0000                     _ADRESL	set	4035
   653  0000                     _CCP2CON	set	4026
   654  0000                     _CCPR2L	set	4027
   655  0000                     _INTCONbits	set	4082
   656  0000                     _OSCCON	set	4051
   657  0000                     _PIE1bits	set	3997
   658  0000                     _PIR1bits	set	3998
   659  0000                     _PIR2bits	set	4001
   660  0000                     _PORTAbits	set	3968
   661  0000                     _PORTCbits	set	3970
   662  0000                     _PORTDbits	set	3971
   663  0000                     _PR2	set	4043
   664  0000                     _RCSTA	set	4011
   665  0000                     _RCSTAbits	set	4011
   666  0000                     _SPBRG	set	4015
   667  0000                     _SPBRGH	set	4016
   668  0000                     _SSPBUF	set	4041
   669  0000                     _SSPCON1	set	4038
   670  0000                     _SSPSTAT	set	4039
   671  0000                     _SSPSTATbits	set	4039
   672  0000                     _T0CON	set	4053
   673  0000                     _T0CONbits	set	4053
   674  0000                     _T2CON	set	4042
   675  0000                     _T3CON	set	4017
   676  0000                     _T3CONbits	set	4017
   677  0000                     _TMR0H	set	4055
   678  0000                     _TMR0L	set	4054
   679  0000                     _TMR3H	set	4019
   680  0000                     _TMR3L	set	4018
   681  0000                     _TRISA	set	3986
   682  0000                     _TRISB	set	3987
   683  0000                     _TRISC	set	3988
   684  0000                     _TRISCbits	set	3988
   685  0000                     _TRISD	set	3989
   686  0000                     _TRISE	set	3990
   687  0000                     _TXREG	set	4013
   688  0000                     _TXSTA	set	4012
   689  0000                     _TXSTAbits	set	4012
   690  0000                     _TRMT	set	32097
   691  00FFAA                     STR_5:
   692  00FFAA  4E                 	db	78	;'N'
   693  00FFAB  53                 	db	83	;'S'
   694  00FFAC  50                 	db	80	;'P'
   695  00FFAD  20                 	db	32
   696  00FFAE  4E                 	db	78	;'N'
   697  00FFAF  53                 	db	83	;'S'
   698  00FFB0  4C                 	db	76	;'L'
   699  00FFB1  54                 	db	84	;'T'
   700  00FFB2  20                 	db	32
   701  00FFB3  45                 	db	69	;'E'
   702  00FFB4  57                 	db	87	;'W'
   703  00FFB5  50                 	db	80	;'P'
   704  00FFB6  20                 	db	32
   705  00FFB7  45                 	db	69	;'E'
   706  00FFB8  57                 	db	87	;'W'
   707  00FFB9  4C                 	db	76	;'L'
   708  00FFBA  54                 	db	84	;'T'
   709  00FFBB  20                 	db	32
   710  00FFBC  52                 	db	82	;'R'
   711  00FFBD  20                 	db	32
   712  00FFBE  53                 	db	83	;'S'
   713  00FFBF  00                 	db	0
   714  00FFC0                     STR_6:
   715  00FFC0  4E                 	db	78	;'N'
   716  00FFC1  4F                 	db	79	;'O'
   717  00FFC2  52                 	db	82	;'R'
   718  00FFC3  54                 	db	84	;'T'
   719  00FFC4  48                 	db	72	;'H'
   720  00FFC5  2F                 	db	47
   721  00FFC6  53                 	db	83	;'S'
   722  00FFC7  4F                 	db	79	;'O'
   723  00FFC8  55                 	db	85	;'U'
   724  00FFC9  54                 	db	84	;'T'
   725  00FFCA  48                 	db	72	;'H'
   726  00FFCB  00                 	db	0
   727  00FFCC                     STR_8:
   728  00FFCC  45                 	db	69	;'E'
   729  00FFCD  41                 	db	65	;'A'
   730  00FFCE  53                 	db	83	;'S'
   731  00FFCF  54                 	db	84	;'T'
   732  00FFD0  2F                 	db	47
   733  00FFD1  57                 	db	87	;'W'
   734  00FFD2  45                 	db	69	;'E'
   735  00FFD3  53                 	db	83	;'S'
   736  00FFD4  54                 	db	84	;'T'
   737  00FFD5  00                 	db	0
   738  00FFD6                     STR_7:
   739  00FFD6  4E                 	db	78	;'N'
   740  00FFD7  2F                 	db	47
   741  00FFD8  53                 	db	83	;'S'
   742  00FFD9  20                 	db	32
   743  00FFDA  4C                 	db	76	;'L'
   744  00FFDB  54                 	db	84	;'T'
   745  00FFDC  00                 	db	0
   746  00FFDD                     STR_9:
   747  00FFDD  45                 	db	69	;'E'
   748  00FFDE  2F                 	db	47
   749  00FFDF  57                 	db	87	;'W'
   750  00FFE0  20                 	db	32
   751  00FFE1  4C                 	db	76	;'L'
   752  00FFE2  54                 	db	84	;'T'
   753  00FFE3  00                 	db	0
   754  00FFE4                     STR_1:
   755  00FFE4  4D                 	db	77	;'M'
   756  00FFE5  6F                 	db	111	;'o'
   757  00FFE6  64                 	db	100	;'d'
   758  00FFE7  65                 	db	101	;'e'
   759  00FFE8  3A                 	db	58	;':'
   760  00FFE9  00                 	db	0
   761  00FFEA                     STR_2:
   762  00FFEA  4C                 	db	76	;'L'
   763  00FFEB  53                 	db	83	;'S'
   764  00FFEC  56                 	db	86	;'V'
   765  00FFED  3A                 	db	58	;':'
   766  00FFEE  00                 	db	0
   767  00FFEF                     STR_10:
   768  00FFEF  50                 	db	80	;'P'
   769  00FFF0  4E                 	db	78	;'N'
   770  00FFF1  53                 	db	83	;'S'
   771  00FFF2  00                 	db	0
   772  00FFF3                     STR_11:
   773  00FFF3  50                 	db	80	;'P'
   774  00FFF4  45                 	db	69	;'E'
   775  00FFF5  57                 	db	87	;'W'
   776  00FFF6  00                 	db	0
   777  00FFF7                     STR_3:
   778  00FFF7  2D                 	db	45
   779  00FFF8  44                 	db	68	;'D'
   780  00FFF9  00                 	db	0
   781  00FFFA  20                 	db	32
   782  00FFFB  00                 	db	0
   783  00FFFC                     STR_4:
   784  00FFFC  2A                 	db	42
   785  00FFFD  00                 	db	0
   786  0000                     
   787                           ; #config settings
   788  00FFFE  00                 	db	0	; dummy byte at the end
   789  0000                     
   790                           	psect	cinit
   791  00E8F0                     __pcinit:
   792                           	opt stack 0
   793  00E8F0                     start_initialization:
   794                           	opt stack 0
   795  00E8F0                     __initialization:
   796                           	opt stack 0
   797                           
   798                           ; Clear objects allocated to BANK0 (31 bytes)
   799  00E8F0  EE00  F080         	lfsr	0,__pbssBANK0
   800  00E8F4  0E1F               	movlw	31
   801  00E8F6                     clear_0:
   802  00E8F6  6AEE               	clrf	postinc0,c
   803  00E8F8  06E8               	decf	wreg,f,c
   804  00E8FA  E1FD               	bnz	clear_0
   805                           
   806                           ; Clear objects allocated to COMRAM (20 bytes)
   807  00E8FC  EE00  F063         	lfsr	0,__pbssCOMRAM
   808  00E900  0E14               	movlw	20
   809  00E902                     clear_1:
   810  00E902  6AEE               	clrf	postinc0,c
   811  00E904  06E8               	decf	wreg,f,c
   812  00E906  E1FD               	bnz	clear_1
   813                           
   814                           ; Initialize objects allocated to BANK0 (22 bytes)
   815                           ; load TBLPTR registers with __pidataBANK0
   816  00E908  0EC6               	movlw	low __pidataBANK0
   817  00E90A  6EF6               	movwf	tblptrl,c
   818  00E90C  0EE5               	movlw	high __pidataBANK0
   819  00E90E  6EF7               	movwf	tblptrh,c
   820  00E910  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   821  00E912  6EF8               	movwf	tblptru,c
   822  00E914  EE00  F09F         	lfsr	0,__pdataBANK0
   823  00E918  EE10 F016          	lfsr	1,22
   824  00E91C                     copy_data0:
   825  00E91C  0009               	tblrd		*+
   826  00E91E  CFF5 FFEE          	movff	tablat,postinc0
   827  00E922  50E5               	movf	postdec1,w,c
   828  00E924  50E1               	movf	fsr1l,w,c
   829  00E926  E1FA               	bnz	copy_data0
   830                           
   831                           ; Initialize objects allocated to COMRAM (41 bytes)
   832                           ; load TBLPTR registers with __pidataCOMRAM
   833  00E928  0E47               	movlw	low __pidataCOMRAM
   834  00E92A  6EF6               	movwf	tblptrl,c
   835  00E92C  0EE6               	movlw	high __pidataCOMRAM
   836  00E92E  6EF7               	movwf	tblptrh,c
   837  00E930  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   838  00E932  6EF8               	movwf	tblptru,c
   839  00E934  EE00  F03A         	lfsr	0,__pdataCOMRAM
   840  00E938  EE10 F029          	lfsr	1,41
   841  00E93C                     copy_data1:
   842  00E93C  0009               	tblrd		*+
   843  00E93E  CFF5 FFEE          	movff	tablat,postinc0
   844  00E942  50E5               	movf	postdec1,w,c
   845  00E944  50E1               	movf	fsr1l,w,c
   846  00E946  E1FA               	bnz	copy_data1
   847  00E948                     end_of_initialization:
   848                           	opt stack 0
   849  00E948                     __end_of__initialization:
   850                           	opt stack 0
   851  00E948  0E00               	movlw	low (__Lmediumconst shr (0+16))
   852  00E94A  6EF8               	movwf	tblptru,c
   853  00E94C  0100               	movlb	0
   854  00E94E  EF4B  F075         	goto	_main	;jump to C main() function
   855                           tblptru	equ	0xFF8
   856                           tblptrh	equ	0xFF7
   857                           tblptrl	equ	0xFF6
   858                           tablat	equ	0xFF5
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           postdec1	equ	0xFE5
   862                           fsr1l	equ	0xFE1
   863                           
   864                           	psect	bssCOMRAM
   865  000063                     __pbssCOMRAM:
   866                           	opt stack 0
   867  000063                     _volt:
   868                           	opt stack 0
   869  000063                     	ds	3
   870  000066                     _nbr:
   871                           	opt stack 0
   872  000066                     	ds	2
   873  000068                     _txt:
   874                           	opt stack 0
   875  000068                     	ds	2
   876  00006A                     _Count:
   877                           	opt stack 0
   878  00006A                     	ds	1
   879  00006B                     _Light_Sensor:
   880                           	opt stack 0
   881  00006B                     	ds	1
   882  00006C                     _MODE:
   883                           	opt stack 0
   884  00006C                     	ds	1
   885  00006D                     _PED_Count:
   886                           	opt stack 0
   887  00006D                     	ds	1
   888  00006E                     _SW_EWLT:
   889                           	opt stack 0
   890  00006E                     	ds	1
   891  00006F                     _SW_EWPED:
   892                           	opt stack 0
   893  00006F                     	ds	1
   894  000070                     _SW_NSLT:
   895                           	opt stack 0
   896  000070                     	ds	1
   897  000071                     _SW_NSPED:
   898                           	opt stack 0
   899  000071                     	ds	1
   900  000072                     __tft_type:
   901                           	opt stack 0
   902  000072                     	ds	1
   903  000073                     _colstart:
   904                           	opt stack 0
   905  000073                     	ds	1
   906  000074                     _dir:
   907                           	opt stack 0
   908  000074                     	ds	1
   909  000075                     _direction:
   910                           	opt stack 0
   911  000075                     	ds	1
   912  000076                     _rowstart:
   913                           	opt stack 0
   914  000076                     	ds	1
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postdec1	equ	0xFE5
   922                           fsr1l	equ	0xFE1
   923                           
   924                           	psect	dataCOMRAM
   925  00003A                     __pdataCOMRAM:
   926                           	opt stack 0
   927  00003A                     _wrap:
   928                           	opt stack 0
   929  00003A                     	ds	1
   930  00003B                     _Light_Sensor_Voltage_Txt:
   931                           	opt stack 0
   932  00003B                     	ds	5
   933  000040                     _EWLT_Count:
   934                           	opt stack 0
   935  000040                     	ds	3
   936  000043                     _EW_Count:
   937                           	opt stack 0
   938  000043                     	ds	3
   939  000046                     _Light_Sensor_Mode_Txt:
   940                           	opt stack 0
   941  000046                     	ds	3
   942  000049                     _NSLT_Count:
   943                           	opt stack 0
   944  000049                     	ds	3
   945  00004C                     _NS_Count:
   946                           	opt stack 0
   947  00004C                     	ds	3
   948  00004F                     _PED_EW_Count:
   949                           	opt stack 0
   950  00004F                     	ds	3
   951  000052                     _PED_NS_Count:
   952                           	opt stack 0
   953  000052                     	ds	3
   954  000055                     _Act_Mode_Txt:
   955                           	opt stack 0
   956  000055                     	ds	2
   957  000057                     _FlashingR_Txt:
   958                           	opt stack 0
   959  000057                     	ds	2
   960  000059                     _FlashingS_Txt:
   961                           	opt stack 0
   962  000059                     	ds	2
   963  00005B                     _SW_EWLT_Txt:
   964                           	opt stack 0
   965  00005B                     	ds	2
   966  00005D                     _SW_EWPED_Txt:
   967                           	opt stack 0
   968  00005D                     	ds	2
   969  00005F                     _SW_NSLT_Txt:
   970                           	opt stack 0
   971  00005F                     	ds	2
   972  000061                     _SW_NSPED_Txt:
   973                           	opt stack 0
   974  000061                     	ds	2
   975                           tblptru	equ	0xFF8
   976                           tblptrh	equ	0xFF7
   977                           tblptrl	equ	0xFF6
   978                           tablat	equ	0xFF5
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           postdec1	equ	0xFE5
   982                           fsr1l	equ	0xFE1
   983                           
   984                           	psect	bssBANK0
   985  000080                     __pbssBANK0:
   986                           	opt stack 0
   987  000080                     _buffer:
   988                           	opt stack 0
   989  000080                     	ds	31
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           
   999                           	psect	dataBANK0
  1000  00009F                     __pdataBANK0:
  1001                           	opt stack 0
  1002  00009F                     _Timing_Txt:
  1003                           	opt stack 0
  1004  00009F                     	ds	22
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           postdec1	equ	0xFE5
  1012                           fsr1l	equ	0xFE1
  1013                           
  1014                           	psect	cstackCOMRAM
  1015  000001                     __pcstackCOMRAM:
  1016                           	opt stack 0
  1017  000001                     ?_get_full_ADC:
  1018                           	opt stack 0
  1019  000001                     ?_strlen:
  1020                           	opt stack 0
  1021  000001                     ?___wmul:
  1022                           	opt stack 0
  1023  000001                     ?___ftpack:
  1024                           	opt stack 0
  1025  000001                     spiwrite@x:
  1026                           	opt stack 0
  1027  000001                     OpenUSART@spbrg:
  1028                           	opt stack 0
  1029  000001                     ___wmul@multiplier:
  1030                           	opt stack 0
  1031  000001                     strcpy@to:
  1032                           	opt stack 0
  1033  000001                     strlen@s:
  1034                           	opt stack 0
  1035  000001                     ___ftpack@arg:
  1036                           	opt stack 0
  1037  000001                     ___ftge@ff1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0x0
  1041  000001                     	ds	1
  1042  000002                     spiwrite@spidata:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x1
  1046  000002                     	ds	1
  1047  000003                     ??_get_full_ADC:
  1048  000003                     ??_strlen:
  1049  000003                     write_command@cmd_:
  1050                           	opt stack 0
  1051  000003                     write_data@data_:
  1052                           	opt stack 0
  1053  000003                     OpenUSART@config:
  1054                           	opt stack 0
  1055  000003                     ___wmul@multiplicand:
  1056                           	opt stack 0
  1057  000003                     strcpy@from:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x2
  1061  000003                     	ds	1
  1062  000004                     setAddrWindow@y0:
  1063                           	opt stack 0
  1064  000004                     ___ftpack@exp:
  1065                           	opt stack 0
  1066  000004                     ___ftge@ff2:
  1067                           	opt stack 0
  1068                           
  1069                           ; 3 bytes @ 0x3
  1070  000004                     	ds	1
  1071  000005                     setAddrWindow@x1:
  1072                           	opt stack 0
  1073  000005                     ___ftpack@sign:
  1074                           	opt stack 0
  1075  000005                     get_full_ADC@result:
  1076                           	opt stack 0
  1077  000005                     ___wmul@product:
  1078                           	opt stack 0
  1079  000005                     strcpy@cp:
  1080                           	opt stack 0
  1081  000005                     strlen@cp:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x4
  1085  000005                     	ds	1
  1086  000006                     ??___ftpack:
  1087  000006                     setAddrWindow@y1:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x5
  1091  000006                     	ds	1
  1092  000007                     ??___ftge:
  1093  000007                     setAddrWindow@x0:
  1094                           	opt stack 0
  1095  000007                     delay_ms@ms:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x6
  1099  000007                     	ds	1
  1100  000008                     drawPixel@y:
  1101                           	opt stack 0
  1102  000008                     drawFastVLine@y:
  1103                           	opt stack 0
  1104  000008                     fillRectangle@y:
  1105                           	opt stack 0
  1106  000008                     drawFastHLine@y:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x7
  1110  000008                     	ds	1
  1111  000009                     ??_delay_ms:
  1112  000009                     ?___awtoft:
  1113                           	opt stack 0
  1114  000009                     drawFastVLine@h:
  1115                           	opt stack 0
  1116  000009                     fillRectangle@w:
  1117                           	opt stack 0
  1118  000009                     drawFastHLine@w:
  1119                           	opt stack 0
  1120  000009                     drawPixel@color:
  1121                           	opt stack 0
  1122  000009                     ___awtoft@c:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x8
  1126  000009                     	ds	1
  1127  00000A                     fillRectangle@h:
  1128                           	opt stack 0
  1129  00000A                     drawFastVLine@color:
  1130                           	opt stack 0
  1131  00000A                     drawFastHLine@color:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x9
  1135  00000A                     	ds	1
  1136  00000B                     drawPixel@x:
  1137                           	opt stack 0
  1138  00000B                     delay_ms@count:
  1139                           	opt stack 0
  1140  00000B                     fillRectangle@color:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0xA
  1144  00000B                     	ds	1
  1145  00000C                     ??_drawFastVLine:
  1146  00000C                     ??_drawFastHLine:
  1147  00000C                     ___awtoft@sign:
  1148                           	opt stack 0
  1149  00000C                     drawCircle@x0:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0xB
  1153  00000C                     	ds	1
  1154  00000D                     ??_fillRectangle:
  1155  00000D                     ?___ftdiv:
  1156                           	opt stack 0
  1157  00000D                     ___ftdiv@f1:
  1158                           	opt stack 0
  1159                           
  1160                           ; 3 bytes @ 0xC
  1161  00000D                     	ds	1
  1162  00000E                     drawCircle@y0:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0xD
  1166  00000E                     	ds	2
  1167  000010                     drawFastVLine@hi:
  1168                           	opt stack 0
  1169  000010                     drawFastHLine@hi:
  1170                           	opt stack 0
  1171  000010                     drawCircle@r:
  1172                           	opt stack 0
  1173  000010                     ___ftdiv@f2:
  1174                           	opt stack 0
  1175                           
  1176                           ; 3 bytes @ 0xF
  1177  000010                     	ds	1
  1178  000011                     drawFastVLine@lo:
  1179                           	opt stack 0
  1180  000011                     fillRectangle@hi:
  1181                           	opt stack 0
  1182  000011                     drawFastHLine@lo:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x10
  1186  000011                     	ds	1
  1187  000012                     drawFastVLine@x:
  1188                           	opt stack 0
  1189  000012                     fillRectangle@lo:
  1190                           	opt stack 0
  1191  000012                     drawFastHLine@x:
  1192                           	opt stack 0
  1193  000012                     drawCircle@color:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x11
  1197  000012                     	ds	1
  1198  000013                     ??___ftdiv:
  1199  000013                     fillRect@y:
  1200                           	opt stack 0
  1201  000013                     fillRectangle@x:
  1202                           	opt stack 0
  1203  000013                     fillCircleHelper@x0:
  1204                           	opt stack 0
  1205  000013                     drawRect@x:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x12
  1209  000013                     	ds	1
  1210  000014                     ??_drawCircle:
  1211  000014                     fillRect@w:
  1212                           	opt stack 0
  1213  000014                     fillScreen@color:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x13
  1217  000014                     	ds	1
  1218  000015                     fillRect@h:
  1219                           	opt stack 0
  1220  000015                     fillCircleHelper@y0:
  1221                           	opt stack 0
  1222  000015                     drawRect@y:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x14
  1226  000015                     	ds	1
  1227  000016                     ___ftdiv@cntr:
  1228                           	opt stack 0
  1229  000016                     fillRect@color:
  1230                           	opt stack 0
  1231  000016                     drawCircle@ddF_x:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x15
  1235  000016                     	ds	1
  1236  000017                     fillCircleHelper@r:
  1237                           	opt stack 0
  1238  000017                     drawRect@w:
  1239                           	opt stack 0
  1240  000017                     ___ftdiv@f3:
  1241                           	opt stack 0
  1242                           
  1243                           ; 3 bytes @ 0x16
  1244  000017                     	ds	1
  1245  000018                     ??_fillRect:
  1246  000018                     drawCircle@ddF_y:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x17
  1250  000018                     	ds	1
  1251  000019                     fillCircleHelper@cornername:
  1252                           	opt stack 0
  1253  000019                     drawRect@h:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x18
  1257  000019                     	ds	1
  1258  00001A                     ___ftdiv@exp:
  1259                           	opt stack 0
  1260  00001A                     drawCircle@f:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x19
  1264  00001A                     	ds	1
  1265  00001B                     fillRect@x:
  1266                           	opt stack 0
  1267  00001B                     ___ftdiv@sign:
  1268                           	opt stack 0
  1269  00001B                     fillCircleHelper@delta:
  1270                           	opt stack 0
  1271  00001B                     drawRect@color:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x1A
  1275  00001B                     	ds	1
  1276  00001C                     ?_Read_Volt:
  1277                           	opt stack 0
  1278  00001C                     fillRect@i:
  1279                           	opt stack 0
  1280  00001C                     drawCircle@x:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x1B
  1284  00001C                     	ds	1
  1285  00001D                     ??_drawRect:
  1286  00001D                     fillCircleHelper@color:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x1C
  1290  00001D                     	ds	1
  1291  00001E                     drawChar@y:
  1292                           	opt stack 0
  1293  00001E                     drawCircle@y:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x1D
  1297  00001E                     	ds	1
  1298  00001F                     ??_fillCircleHelper:
  1299  00001F                     drawChar@c:
  1300                           	opt stack 0
  1301  00001F                     Read_Volt@volt:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x1E
  1305  00001F                     	ds	1
  1306  000020                     drawChar@color:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x1F
  1310  000020                     	ds	1
  1311  000021                     fillCircleHelper@ddF_x:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x20
  1315  000021                     	ds	1
  1316  000022                     drawChar@bg:
  1317                           	opt stack 0
  1318  000022                     Read_Volt@nStep:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x21
  1322  000022                     	ds	1
  1323  000023                     fillCircleHelper@ddF_y:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x22
  1327  000023                     	ds	1
  1328  000024                     drawChar@size:
  1329                           	opt stack 0
  1330  000024                     Read_Volt@ADC_Channel:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0x23
  1334  000024                     	ds	1
  1335  000025                     drawChar@line:
  1336                           	opt stack 0
  1337  000025                     fillCircleHelper@f:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x24
  1341  000025                     	ds	1
  1342  000026                     drawChar@x:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x25
  1346  000026                     	ds	1
  1347  000027                     drawChar@j:
  1348                           	opt stack 0
  1349  000027                     fillCircleHelper@x:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x26
  1353  000027                     	ds	1
  1354  000028                     drawChar@i:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x27
  1358  000028                     	ds	1
  1359  000029                     drawtext@y:
  1360                           	opt stack 0
  1361  000029                     fillCircleHelper@y:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x28
  1365  000029                     	ds	1
  1366  00002A                     drawtext@_text:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x29
  1370  00002A                     	ds	1
  1371  00002B                     fillCircle@x0:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x2A
  1375  00002B                     	ds	1
  1376  00002C                     drawtext@color:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x2B
  1380  00002C                     	ds	1
  1381  00002D                     fillCircle@y0:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x2C
  1385  00002D                     	ds	1
  1386  00002E                     drawtext@bg:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x2D
  1390  00002E                     	ds	1
  1391  00002F                     fillCircle@r:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x2E
  1395  00002F                     	ds	1
  1396  000030                     drawtext@size:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x2F
  1400  000030                     	ds	1
  1401  000031                     ??_drawtext:
  1402  000031                     fillCircle@color:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x30
  1406  000031                     	ds	2
  1407  000033                     drawtext@textsize:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x32
  1411  000033                     	ds	2
  1412  000035                     drawtext@x:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x34
  1416  000035                     	ds	1
  1417  000036                     drawtext@i:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x35
  1421  000036                     	ds	2
  1422  000038                     drawtext@cursor_y:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x37
  1426  000038                     	ds	1
  1427  000039                     drawtext@cursor_x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x38
  1431  000039                     	ds	1
  1432  00003A                     tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           postdec1	equ	0xFE5
  1439                           fsr1l	equ	0xFE1
  1440                           
  1441                           ; 0 bytes @ 0x39
  1442 ;;
  1443 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1444 ;;
  1445 ;; *************** function _main *****************
  1446 ;; Defined at:
  1447 ;;		line 43 in file "lab8.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;		None
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;		None
  1452 ;; Return value:  Size  Location     Type
  1453 ;;		None               void
  1454 ;; Registers used:
  1455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;Total ram usage:        0 bytes
  1466 ;; Hardware stack levels required when called:    8
  1467 ;; This function calls:
  1468 ;;		_Day_Mode
  1469 ;;		_Init_ADC
  1470 ;;		_Init_UART
  1471 ;;		_Initialize_LCD_Screen
  1472 ;;		_Night_Mode
  1473 ;;		_Read_Volt
  1474 ;;		___ftge
  1475 ;; This function is called by:
  1476 ;;		Startup code after reset
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text0
  1481  00EA96                     __ptext0:
  1482                           	opt stack 0
  1483  00EA96                     _main:
  1484                           	opt stack 23
  1485                           
  1486                           ;lab8.c: 45: OSCCON = 0x70;
  1487                           
  1488                           ;incstack = 0
  1489  00EA96  0E70               	movlw	112
  1490  00EA98  6ED3               	movwf	4051,c	;volatile
  1491                           
  1492                           ;lab8.c: 46: TRISA = 0x1F;
  1493  00EA9A  0E1F               	movlw	31
  1494  00EA9C  6E92               	movwf	3986,c	;volatile
  1495                           
  1496                           ;lab8.c: 47: TRISB = 0x07;
  1497  00EA9E  0E07               	movlw	7
  1498  00EAA0  6E93               	movwf	3987,c	;volatile
  1499                           
  1500                           ;lab8.c: 48: TRISC = 0x00;
  1501  00EAA2  0E00               	movlw	0
  1502  00EAA4  6E94               	movwf	3988,c	;volatile
  1503                           
  1504                           ;lab8.c: 49: TRISD = 0x00;
  1505  00EAA6  0E00               	movlw	0
  1506  00EAA8  6E95               	movwf	3989,c	;volatile
  1507                           
  1508                           ;lab8.c: 50: TRISE = 0x00;
  1509  00EAAA  0E00               	movlw	0
  1510  00EAAC  6E96               	movwf	3990,c	;volatile
  1511                           
  1512                           ;lab8.c: 51: Init_ADC();
  1513  00EAAE  ECAF  F072         	call	_Init_ADC	;wreg free
  1514                           
  1515                           ;lab8.c: 52: Init_UART();
  1516  00EAB2  ECCF  F072         	call	_Init_UART	;wreg free
  1517                           
  1518                           ;lab8.c: 54: Initialize_LCD_Screen();
  1519  00EAB6  EC29  F07B         	call	_Initialize_LCD_Screen	;wreg free
  1520                           
  1521                           ;lab8.c: 63: volt = Read_Volt(0);
  1522  00EABA  0E00               	movlw	0
  1523  00EABC  ECDC  F074         	call	_Read_Volt
  1524  00EAC0  C01C  F063         	movff	?_Read_Volt,_volt
  1525  00EAC4  C01D  F064         	movff	?_Read_Volt+1,_volt+1
  1526  00EAC8  C01E  F065         	movff	?_Read_Volt+2,_volt+2
  1527                           
  1528                           ;lab8.c: 65: Light_Sensor = volt < 2.5 ? 1:0;
  1529  00EACC  C063  F001         	movff	_volt,___ftge@ff1
  1530  00EAD0  C064  F002         	movff	_volt+1,___ftge@ff1+1
  1531  00EAD4  C065  F003         	movff	_volt+2,___ftge@ff1+2
  1532  00EAD8  0E00               	movlw	0
  1533  00EADA  6E04               	movwf	___ftge@ff2,c
  1534  00EADC  0E20               	movlw	32
  1535  00EADE  6E05               	movwf	___ftge@ff2+1,c
  1536  00EAE0  0E40               	movlw	64
  1537  00EAE2  6E06               	movwf	___ftge@ff2+2,c
  1538  00EAE4  EC0E  F076         	call	___ftge	;wreg free
  1539  00EAE8  B0D8               	btfsc	status,0,c
  1540  00EAEA  D002               	goto	u1880
  1541  00EAEC  0E01               	movlw	1
  1542  00EAEE  D001               	goto	u1890
  1543  00EAF0                     u1880:
  1544  00EAF0  0E00               	movlw	0
  1545  00EAF2                     u1890:
  1546  00EAF2  6E6B               	movwf	_Light_Sensor,c
  1547  00EAF4  D000               	goto	l3185
  1548  00EAF6                     l3185:
  1549                           
  1550                           ;lab8.c: 68: {
  1551                           ;lab8.c: 70: if (Light_Sensor == 1)
  1552  00EAF6  046B               	decf	_Light_Sensor,w,c
  1553  00EAF8  A4D8               	btfss	status,2,c
  1554  00EAFA  D003               	goto	l3189
  1555                           
  1556                           ;lab8.c: 71: {
  1557                           ;lab8.c: 72: Day_Mode();
  1558  00EAFC  ECAD  F072         	call	_Day_Mode	;wreg free
  1559                           
  1560                           ;lab8.c: 73: }
  1561  00EB00  D7FA               	goto	l3185
  1562  00EB02                     l3189:
  1563                           
  1564                           ;lab8.c: 74: else
  1565                           ;lab8.c: 75: {
  1566                           ;lab8.c: 76: Night_Mode();
  1567  00EB02  ECAE  F072         	call	_Night_Mode	;wreg free
  1568  00EB06  D7F7               	goto	l3185
  1569  00EB08  EF00  F000         	goto	start
  1570  00EB0C                     __end_of_main:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postdec1	equ	0xFE5
  1579                           fsr1l	equ	0xFE1
  1580                           status	equ	0xFD8
  1581                           
  1582 ;; *************** function ___ftge *****************
  1583 ;; Defined at:
  1584 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;  ff1             3    0[COMRAM] float 
  1587 ;;  ff2             3    3[COMRAM] float 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;		None               void
  1592 ;; Registers used:
  1593 ;;		wreg, status,2, status,0
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1599 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;Total ram usage:        9 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_main
  1609 ;;		_update_LCD_misc
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text1
  1614  00EC1C                     __ptext1:
  1615                           	opt stack 0
  1616  00EC1C                     ___ftge:
  1617                           	opt stack 30
  1618                           
  1619                           ;incstack = 0
  1620  00EC1C  AE03               	btfss	___ftge@ff1+2,7,c
  1621  00EC1E  D017               	goto	l3159
  1622  00EC20  C001  F007         	movff	___ftge@ff1,??___ftge
  1623  00EC24  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  1624  00EC28  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  1625  00EC2C  1E07               	comf	??___ftge,f,c
  1626  00EC2E  1E08               	comf	??___ftge+1,f,c
  1627  00EC30  1E09               	comf	??___ftge+2,f,c
  1628  00EC32  2A07               	incf	??___ftge,f,c
  1629  00EC34  0E00               	movlw	0
  1630  00EC36  2208               	addwfc	??___ftge+1,f,c
  1631  00EC38  2209               	addwfc	??___ftge+2,f,c
  1632  00EC3A  0E00               	movlw	0
  1633  00EC3C  2407               	addwf	??___ftge,w,c
  1634  00EC3E  6E01               	movwf	___ftge@ff1,c
  1635  00EC40  0E00               	movlw	0
  1636  00EC42  2008               	addwfc	??___ftge+1,w,c
  1637  00EC44  6E02               	movwf	___ftge@ff1+1,c
  1638  00EC46  0E80               	movlw	128
  1639  00EC48  2009               	addwfc	??___ftge+2,w,c
  1640  00EC4A  6E03               	movwf	___ftge@ff1+2,c
  1641  00EC4C  D000               	goto	l3159
  1642  00EC4E                     l3159:
  1643  00EC4E  AE06               	btfss	___ftge@ff2+2,7,c
  1644  00EC50  D017               	goto	l3163
  1645  00EC52  C004  F007         	movff	___ftge@ff2,??___ftge
  1646  00EC56  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  1647  00EC5A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  1648  00EC5E  1E07               	comf	??___ftge,f,c
  1649  00EC60  1E08               	comf	??___ftge+1,f,c
  1650  00EC62  1E09               	comf	??___ftge+2,f,c
  1651  00EC64  2A07               	incf	??___ftge,f,c
  1652  00EC66  0E00               	movlw	0
  1653  00EC68  2208               	addwfc	??___ftge+1,f,c
  1654  00EC6A  2209               	addwfc	??___ftge+2,f,c
  1655  00EC6C  0E00               	movlw	0
  1656  00EC6E  2407               	addwf	??___ftge,w,c
  1657  00EC70  6E04               	movwf	___ftge@ff2,c
  1658  00EC72  0E00               	movlw	0
  1659  00EC74  2008               	addwfc	??___ftge+1,w,c
  1660  00EC76  6E05               	movwf	___ftge@ff2+1,c
  1661  00EC78  0E80               	movlw	128
  1662  00EC7A  2009               	addwfc	??___ftge+2,w,c
  1663  00EC7C  6E06               	movwf	___ftge@ff2+2,c
  1664  00EC7E  D000               	goto	l3163
  1665  00EC80                     l3163:
  1666  00EC80  0E00               	movlw	0
  1667  00EC82  1A01               	xorwf	___ftge@ff1,f,c
  1668  00EC84  0E00               	movlw	0
  1669  00EC86  1A02               	xorwf	___ftge@ff1+1,f,c
  1670  00EC88  0E80               	movlw	128
  1671  00EC8A  1A03               	xorwf	___ftge@ff1+2,f,c
  1672  00EC8C  0E00               	movlw	0
  1673  00EC8E  1A04               	xorwf	___ftge@ff2,f,c
  1674  00EC90  0E00               	movlw	0
  1675  00EC92  1A05               	xorwf	___ftge@ff2+1,f,c
  1676  00EC94  0E80               	movlw	128
  1677  00EC96  1A06               	xorwf	___ftge@ff2+2,f,c
  1678  00EC98  5004               	movf	___ftge@ff2,w,c
  1679  00EC9A  5C01               	subwf	___ftge@ff1,w,c
  1680  00EC9C  5005               	movf	___ftge@ff2+1,w,c
  1681  00EC9E  5802               	subwfb	___ftge@ff1+1,w,c
  1682  00ECA0  5006               	movf	___ftge@ff2+2,w,c
  1683  00ECA2  5803               	subwfb	___ftge@ff1+2,w,c
  1684  00ECA4  B0D8               	btfsc	status,0,c
  1685  00ECA6  D002               	goto	l3169
  1686  00ECA8  90D8               	bcf	status,0,c
  1687  00ECAA  D002               	goto	l951
  1688  00ECAC                     l3169:
  1689  00ECAC  80D8               	bsf	status,0,c
  1690  00ECAE  D000               	goto	l951
  1691  00ECB0                     l951:
  1692  00ECB0  0012               	return		;funcret
  1693  00ECB2                     __end_of___ftge:
  1694                           	opt stack 0
  1695                           tblptru	equ	0xFF8
  1696                           tblptrh	equ	0xFF7
  1697                           tblptrl	equ	0xFF6
  1698                           tablat	equ	0xFF5
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           postdec1	equ	0xFE5
  1702                           fsr1l	equ	0xFE1
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function _Read_Volt *****************
  1706 ;; Defined at:
  1707 ;;		line 141 in file "utils.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  ADC_Channel     1    wreg     unsigned char 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  ADC_Channel     1   35[COMRAM] unsigned char 
  1712 ;;  volt            3   30[COMRAM] float 
  1713 ;;  nStep           2   33[COMRAM] int 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  3   27[COMRAM] float 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1723 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;Total ram usage:        9 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    2
  1730 ;; This function calls:
  1731 ;;		___awtoft
  1732 ;;		___ftdiv
  1733 ;;		___wmul
  1734 ;;		_get_full_ADC
  1735 ;; This function is called by:
  1736 ;;		_main
  1737 ;;		_update_LCD_misc
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text2
  1742  00E9B8                     __ptext2:
  1743                           	opt stack 0
  1744  00E9B8                     _Read_Volt:
  1745                           	opt stack 28
  1746                           
  1747                           ;incstack = 0
  1748                           ;Read_Volt@ADC_Channel stored from wreg
  1749  00E9B8  6E24               	movwf	Read_Volt@ADC_Channel,c
  1750                           
  1751                           ;utils.c: 143: ADCON0 = ADC_Channel * 4 + 1;
  1752  00E9BA  5024               	movf	Read_Volt@ADC_Channel,w,c
  1753  00E9BC  0D04               	mullw	4
  1754  00E9BE  28F3               	incf	prodl,w,c
  1755  00E9C0  6EC2               	movwf	4034,c	;volatile
  1756                           
  1757                           ;utils.c: 144: int nStep = get_full_ADC();
  1758  00E9C2  ECFC  F072         	call	_get_full_ADC	;wreg free
  1759  00E9C6  C001  F022         	movff	?_get_full_ADC,Read_Volt@nStep
  1760  00E9CA  C002  F023         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  1761                           
  1762                           ;utils.c: 145: float volt = nStep * 5 /1024.0;
  1763  00E9CE  C022  F001         	movff	Read_Volt@nStep,___wmul@multiplier
  1764  00E9D2  C023  F002         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  1765  00E9D6  0E00               	movlw	0
  1766  00E9D8  6E04               	movwf	___wmul@multiplicand+1,c
  1767  00E9DA  0E05               	movlw	5
  1768  00E9DC  6E03               	movwf	___wmul@multiplicand,c
  1769  00E9DE  EC0F  F073         	call	___wmul	;wreg free
  1770  00E9E2  C001  F009         	movff	?___wmul,___awtoft@c
  1771  00E9E6  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  1772  00E9EA  EC7E  F073         	call	___awtoft	;wreg free
  1773  00E9EE  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  1774  00E9F2  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  1775  00E9F6  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  1776  00E9FA  0E00               	movlw	0
  1777  00E9FC  6E10               	movwf	___ftdiv@f2,c
  1778  00E9FE  0E80               	movlw	128
  1779  00EA00  6E11               	movwf	___ftdiv@f2+1,c
  1780  00EA02  0E44               	movlw	68
  1781  00EA04  6E12               	movwf	___ftdiv@f2+2,c
  1782  00EA06  EC99  F077         	call	___ftdiv	;wreg free
  1783  00EA0A  C00D  F01F         	movff	?___ftdiv,Read_Volt@volt
  1784  00EA0E  C00E  F020         	movff	?___ftdiv+1,Read_Volt@volt+1
  1785  00EA12  C00F  F021         	movff	?___ftdiv+2,Read_Volt@volt+2
  1786                           
  1787                           ;utils.c: 146: return (volt);
  1788  00EA16  C01F  F01C         	movff	Read_Volt@volt,?_Read_Volt
  1789  00EA1A  C020  F01D         	movff	Read_Volt@volt+1,?_Read_Volt+1
  1790  00EA1E  C021  F01E         	movff	Read_Volt@volt+2,?_Read_Volt+2
  1791  00EA22  D000               	goto	l511
  1792  00EA24                     l511:
  1793  00EA24  0012               	return		;funcret
  1794  00EA26                     __end_of_Read_Volt:
  1795                           	opt stack 0
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           prodl	equ	0xFF3
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1l	equ	0xFE1
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function _get_full_ADC *****************
  1808 ;; Defined at:
  1809 ;;		line 149 in file "utils.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  result          2    4[COMRAM] unsigned int 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  2    0[COMRAM] unsigned int 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1823 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;Total ram usage:        6 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; This function calls:
  1830 ;;		Nothing
  1831 ;; This function is called by:
  1832 ;;		_Read_Volt
  1833 ;;		_update_LCD_misc
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text3
  1838  00E5F8                     __ptext3:
  1839                           	opt stack 0
  1840  00E5F8                     _get_full_ADC:
  1841                           	opt stack 29
  1842                           
  1843                           ;utils.c: 151: unsigned int result;
  1844                           ;utils.c: 152: ADCON0bits.GO=1;
  1845                           
  1846                           ;incstack = 0
  1847  00E5F8  82C2               	bsf	4034,1,c	;volatile
  1848                           
  1849                           ;utils.c: 153: while(ADCON0bits.DONE==1);
  1850  00E5FA  D000               	goto	l514
  1851  00E5FC                     l514:
  1852  00E5FC  B2C2               	btfsc	4034,1,c	;volatile
  1853  00E5FE  D7FE               	goto	l514
  1854                           
  1855                           ;utils.c: 154: result = (ADRESH * 0x100) + ADRESL;
  1856  00E600  50C4               	movf	4036,w,c	;volatile
  1857  00E602  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  1858  00E604  6A03               	clrf	??_get_full_ADC& (0+255),c
  1859  00E606  50C3               	movf	4035,w,c	;volatile
  1860  00E608  2403               	addwf	??_get_full_ADC,w,c
  1861  00E60A  6E05               	movwf	get_full_ADC@result,c
  1862  00E60C  0E00               	movlw	0
  1863  00E60E  2004               	addwfc	??_get_full_ADC+1,w,c
  1864  00E610  6E06               	movwf	get_full_ADC@result+1,c
  1865                           
  1866                           ;utils.c: 156: return result;
  1867  00E612  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  1868  00E616  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  1869  00E61A  D000               	goto	l517
  1870  00E61C                     l517:
  1871  00E61C  0012               	return		;funcret
  1872  00E61E                     __end_of_get_full_ADC:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           prodl	equ	0xFF3
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           postdec1	equ	0xFE5
  1882                           fsr1l	equ	0xFE1
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function ___ftdiv *****************
  1886 ;; Defined at:
  1887 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  f1              3   12[COMRAM] float 
  1890 ;;  f2              3   15[COMRAM] float 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  f3              3   22[COMRAM] float 
  1893 ;;  sign            1   26[COMRAM] unsigned char 
  1894 ;;  exp             1   25[COMRAM] unsigned char 
  1895 ;;  cntr            1   21[COMRAM] unsigned char 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  3   12[COMRAM] float 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1905 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;Total ram usage:       15 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    1
  1912 ;; This function calls:
  1913 ;;		___ftpack
  1914 ;; This function is called by:
  1915 ;;		_Read_Volt
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text4
  1920  00EF32                     __ptext4:
  1921                           	opt stack 0
  1922  00EF32                     ___ftdiv:
  1923                           	opt stack 28
  1924                           
  1925                           ;incstack = 0
  1926  00EF32  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  1927  00EF36  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  1928  00EF38  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  1929  00EF3A  340E               	rlcf	___ftdiv@f1+1,w,c
  1930  00EF3C  3613               	rlcf	??___ftdiv& (0+255),f,c
  1931  00EF3E  E301               	bnc	u1741
  1932  00EF40  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  1933  00EF42                     u1741:
  1934  00EF42  5013               	movf	??___ftdiv,w,c
  1935  00EF44  6E1A               	movwf	___ftdiv@exp,c
  1936  00EF46  501A               	movf	___ftdiv@exp,w,c
  1937  00EF48  A4D8               	btfss	status,2,c
  1938  00EF4A  D002               	goto	l2913
  1939  00EF4C  D00E               	goto	l2915
  1940  00EF4E  D061               	goto	l942
  1941  00EF50                     l2913:
  1942  00EF50  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  1943  00EF54  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  1944  00EF56  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  1945  00EF58  3411               	rlcf	___ftdiv@f2+1,w,c
  1946  00EF5A  3613               	rlcf	??___ftdiv& (0+255),f,c
  1947  00EF5C  E301               	bnc	u1761
  1948  00EF5E  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  1949  00EF60                     u1761:
  1950  00EF60  5013               	movf	??___ftdiv,w,c
  1951  00EF62  6E1B               	movwf	___ftdiv@sign,c
  1952  00EF64  501B               	movf	___ftdiv@sign,w,c
  1953  00EF66  A4D8               	btfss	status,2,c
  1954  00EF68  D007               	goto	l2919
  1955  00EF6A                     l2915:
  1956  00EF6A  0E00               	movlw	0
  1957  00EF6C  6E0D               	movwf	?___ftdiv,c
  1958  00EF6E  0E00               	movlw	0
  1959  00EF70  6E0E               	movwf	?___ftdiv+1,c
  1960  00EF72  0E00               	movlw	0
  1961  00EF74  6E0F               	movwf	?___ftdiv+2,c
  1962  00EF76  D04D               	goto	l942
  1963  00EF78                     l2919:
  1964  00EF78  0E00               	movlw	0
  1965  00EF7A  6E17               	movwf	___ftdiv@f3,c
  1966  00EF7C  0E00               	movlw	0
  1967  00EF7E  6E18               	movwf	___ftdiv@f3+1,c
  1968  00EF80  0E00               	movlw	0
  1969  00EF82  6E19               	movwf	___ftdiv@f3+2,c
  1970  00EF84  501B               	movf	___ftdiv@sign,w,c
  1971  00EF86  0F89               	addlw	137
  1972  00EF88  5E1A               	subwf	___ftdiv@exp,f,c
  1973  00EF8A  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  1974  00EF8E  5012               	movf	___ftdiv@f2+2,w,c
  1975  00EF90  1A1B               	xorwf	___ftdiv@sign,f,c
  1976  00EF92  0E80               	movlw	128
  1977  00EF94  161B               	andwf	___ftdiv@sign,f,c
  1978  00EF96  8E0E               	bsf	___ftdiv@f1+1,7,c
  1979  00EF98  0EFF               	movlw	255
  1980  00EF9A  160D               	andwf	___ftdiv@f1,f,c
  1981  00EF9C  0EFF               	movlw	255
  1982  00EF9E  160E               	andwf	___ftdiv@f1+1,f,c
  1983  00EFA0  0E00               	movlw	0
  1984  00EFA2  160F               	andwf	___ftdiv@f1+2,f,c
  1985  00EFA4  8E11               	bsf	___ftdiv@f2+1,7,c
  1986  00EFA6  0EFF               	movlw	255
  1987  00EFA8  1610               	andwf	___ftdiv@f2,f,c
  1988  00EFAA  0EFF               	movlw	255
  1989  00EFAC  1611               	andwf	___ftdiv@f2+1,f,c
  1990  00EFAE  0E00               	movlw	0
  1991  00EFB0  1612               	andwf	___ftdiv@f2+2,f,c
  1992  00EFB2  0E18               	movlw	24
  1993  00EFB4  6E16               	movwf	___ftdiv@cntr,c
  1994  00EFB6  D000               	goto	l2939
  1995  00EFB8                     l2939:
  1996  00EFB8  90D8               	bcf	status,0,c
  1997  00EFBA  3617               	rlcf	___ftdiv@f3,f,c
  1998  00EFBC  3618               	rlcf	___ftdiv@f3+1,f,c
  1999  00EFBE  3619               	rlcf	___ftdiv@f3+2,f,c
  2000  00EFC0  5010               	movf	___ftdiv@f2,w,c
  2001  00EFC2  5C0D               	subwf	___ftdiv@f1,w,c
  2002  00EFC4  5011               	movf	___ftdiv@f2+1,w,c
  2003  00EFC6  580E               	subwfb	___ftdiv@f1+1,w,c
  2004  00EFC8  5012               	movf	___ftdiv@f2+2,w,c
  2005  00EFCA  580F               	subwfb	___ftdiv@f1+2,w,c
  2006  00EFCC  A0D8               	btfss	status,0,c
  2007  00EFCE  D007               	goto	l945
  2008  00EFD0  5010               	movf	___ftdiv@f2,w,c
  2009  00EFD2  5E0D               	subwf	___ftdiv@f1,f,c
  2010  00EFD4  5011               	movf	___ftdiv@f2+1,w,c
  2011  00EFD6  5A0E               	subwfb	___ftdiv@f1+1,f,c
  2012  00EFD8  5012               	movf	___ftdiv@f2+2,w,c
  2013  00EFDA  5A0F               	subwfb	___ftdiv@f1+2,f,c
  2014  00EFDC  8017               	bsf	___ftdiv@f3,0,c
  2015  00EFDE                     l945:
  2016  00EFDE  90D8               	bcf	status,0,c
  2017  00EFE0  360D               	rlcf	___ftdiv@f1,f,c
  2018  00EFE2  360E               	rlcf	___ftdiv@f1+1,f,c
  2019  00EFE4  360F               	rlcf	___ftdiv@f1+2,f,c
  2020  00EFE6  2E16               	decfsz	___ftdiv@cntr,f,c
  2021  00EFE8  D7E7               	goto	l2939
  2022  00EFEA  D000               	goto	l2949
  2023  00EFEC                     l2949:
  2024  00EFEC  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  2025  00EFF0  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2026  00EFF4  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2027  00EFF8  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  2028  00EFFC  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  2029  00F000  EC59  F076         	call	___ftpack	;wreg free
  2030  00F004  C001  F00D         	movff	?___ftpack,?___ftdiv
  2031  00F008  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  2032  00F00C  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  2033  00F010  D000               	goto	l942
  2034  00F012                     l942:
  2035  00F012  0012               	return		;funcret
  2036  00F014                     __end_of___ftdiv:
  2037                           	opt stack 0
  2038                           tblptru	equ	0xFF8
  2039                           tblptrh	equ	0xFF7
  2040                           tblptrl	equ	0xFF6
  2041                           tablat	equ	0xFF5
  2042                           prodl	equ	0xFF3
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           postdec1	equ	0xFE5
  2046                           fsr1l	equ	0xFE1
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function ___awtoft *****************
  2050 ;; Defined at:
  2051 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  c               2    8[COMRAM] int 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  sign            1   11[COMRAM] unsigned char 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  3    8[COMRAM] float 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:        4 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    1
  2072 ;; This function calls:
  2073 ;;		___ftpack
  2074 ;; This function is called by:
  2075 ;;		_Read_Volt
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text5
  2080  00E6FC                     __ptext5:
  2081                           	opt stack 0
  2082  00E6FC                     ___awtoft:
  2083                           	opt stack 28
  2084                           
  2085                           ;incstack = 0
  2086  00E6FC  0E00               	movlw	0
  2087  00E6FE  6E0C               	movwf	___awtoft@sign,c
  2088  00E700  AE0A               	btfss	___awtoft@c+1,7,c
  2089  00E702  D007               	goto	l2961
  2090  00E704  6C09               	negf	___awtoft@c,c
  2091  00E706  1E0A               	comf	___awtoft@c+1,f,c
  2092  00E708  B0D8               	btfsc	status,0,c
  2093  00E70A  2A0A               	incf	___awtoft@c+1,f,c
  2094  00E70C  0E01               	movlw	1
  2095  00E70E  6E0C               	movwf	___awtoft@sign,c
  2096  00E710  D000               	goto	l2961
  2097  00E712                     l2961:
  2098  00E712  C009  F001         	movff	___awtoft@c,___ftpack@arg
  2099  00E716  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2100  00E71A  6A03               	clrf	___ftpack@arg+2,c
  2101  00E71C  0E8E               	movlw	142
  2102  00E71E  6E04               	movwf	___ftpack@exp,c
  2103  00E720  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  2104  00E724  EC59  F076         	call	___ftpack	;wreg free
  2105  00E728  C001  F009         	movff	?___ftpack,?___awtoft
  2106  00E72C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  2107  00E730  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  2108  00E734  D000               	goto	l780
  2109  00E736                     l780:
  2110  00E736  0012               	return		;funcret
  2111  00E738                     __end_of___awtoft:
  2112                           	opt stack 0
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           prodl	equ	0xFF3
  2118                           postinc0	equ	0xFEE
  2119                           wreg	equ	0xFE8
  2120                           postdec1	equ	0xFE5
  2121                           fsr1l	equ	0xFE1
  2122                           status	equ	0xFD8
  2123                           
  2124 ;; *************** function ___ftpack *****************
  2125 ;; Defined at:
  2126 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  arg             3    0[COMRAM] unsigned um
  2129 ;;  exp             1    3[COMRAM] unsigned char 
  2130 ;;  sign            1    4[COMRAM] unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  3    0[COMRAM] float 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, status,0
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2142 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;Total ram usage:        8 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		___awtoft
  2152 ;;		___ftdiv
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text6
  2157  00ECB2                     __ptext6:
  2158                           	opt stack 0
  2159  00ECB2                     ___ftpack:
  2160                           	opt stack 28
  2161                           
  2162                           ;incstack = 0
  2163  00ECB2  5004               	movf	___ftpack@exp,w,c
  2164  00ECB4  B4D8               	btfsc	status,2,c
  2165  00ECB6  D005               	goto	l2699
  2166  00ECB8  5001               	movf	___ftpack@arg,w,c
  2167  00ECBA  1002               	iorwf	___ftpack@arg+1,w,c
  2168  00ECBC  1003               	iorwf	___ftpack@arg+2,w,c
  2169  00ECBE  A4D8               	btfss	status,2,c
  2170  00ECC0  D00E               	goto	l2705
  2171  00ECC2                     l2699:
  2172  00ECC2  0E00               	movlw	0
  2173  00ECC4  6E01               	movwf	?___ftpack,c
  2174  00ECC6  0E00               	movlw	0
  2175  00ECC8  6E02               	movwf	?___ftpack+1,c
  2176  00ECCA  0E00               	movlw	0
  2177  00ECCC  6E03               	movwf	?___ftpack+2,c
  2178  00ECCE  D053               	goto	l870
  2179  00ECD0  D006               	goto	l2705
  2180  00ECD2                     l2703:
  2181  00ECD2  2A04               	incf	___ftpack@exp,f,c
  2182  00ECD4  90D8               	bcf	status,0,c
  2183  00ECD6  3203               	rrcf	___ftpack@arg+2,f,c
  2184  00ECD8  3202               	rrcf	___ftpack@arg+1,f,c
  2185  00ECDA  3201               	rrcf	___ftpack@arg,f,c
  2186  00ECDC  D000               	goto	l2705
  2187  00ECDE                     l2705:
  2188  00ECDE  0E00               	movlw	0
  2189  00ECE0  1401               	andwf	___ftpack@arg,w,c
  2190  00ECE2  6E06               	movwf	??___ftpack& (0+255),c
  2191  00ECE4  0E00               	movlw	0
  2192  00ECE6  1402               	andwf	___ftpack@arg+1,w,c
  2193  00ECE8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2194  00ECEA  0EFE               	movlw	254
  2195  00ECEC  1403               	andwf	___ftpack@arg+2,w,c
  2196  00ECEE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2197  00ECF0  5006               	movf	??___ftpack,w,c
  2198  00ECF2  1007               	iorwf	??___ftpack+1,w,c
  2199  00ECF4  1008               	iorwf	??___ftpack+2,w,c
  2200  00ECF6  B4D8               	btfsc	status,2,c
  2201  00ECF8  D00E               	goto	l2711
  2202  00ECFA  D7EB               	goto	l2703
  2203  00ECFC  D00C               	goto	l2711
  2204  00ECFE                     l2707:
  2205  00ECFE  2A04               	incf	___ftpack@exp,f,c
  2206  00ED00  0E01               	movlw	1
  2207  00ED02  2601               	addwf	___ftpack@arg,f,c
  2208  00ED04  0E00               	movlw	0
  2209  00ED06  2202               	addwfc	___ftpack@arg+1,f,c
  2210  00ED08  0E00               	movlw	0
  2211  00ED0A  2203               	addwfc	___ftpack@arg+2,f,c
  2212  00ED0C  90D8               	bcf	status,0,c
  2213  00ED0E  3203               	rrcf	___ftpack@arg+2,f,c
  2214  00ED10  3202               	rrcf	___ftpack@arg+1,f,c
  2215  00ED12  3201               	rrcf	___ftpack@arg,f,c
  2216  00ED14  D000               	goto	l2711
  2217  00ED16                     l2711:
  2218  00ED16  0E00               	movlw	0
  2219  00ED18  1401               	andwf	___ftpack@arg,w,c
  2220  00ED1A  6E06               	movwf	??___ftpack& (0+255),c
  2221  00ED1C  0E00               	movlw	0
  2222  00ED1E  1402               	andwf	___ftpack@arg+1,w,c
  2223  00ED20  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2224  00ED22  0EFF               	movlw	255
  2225  00ED24  1403               	andwf	___ftpack@arg+2,w,c
  2226  00ED26  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2227  00ED28  5006               	movf	??___ftpack,w,c
  2228  00ED2A  1007               	iorwf	??___ftpack+1,w,c
  2229  00ED2C  1008               	iorwf	??___ftpack+2,w,c
  2230  00ED2E  B4D8               	btfsc	status,2,c
  2231  00ED30  D008               	goto	l2715
  2232  00ED32  D7E5               	goto	l2707
  2233  00ED34  D006               	goto	l2715
  2234  00ED36                     l2713:
  2235  00ED36  0604               	decf	___ftpack@exp,f,c
  2236  00ED38  90D8               	bcf	status,0,c
  2237  00ED3A  3601               	rlcf	___ftpack@arg,f,c
  2238  00ED3C  3602               	rlcf	___ftpack@arg+1,f,c
  2239  00ED3E  3603               	rlcf	___ftpack@arg+2,f,c
  2240  00ED40  D000               	goto	l2715
  2241  00ED42                     l2715:
  2242  00ED42  BE02               	btfsc	___ftpack@arg+1,7,c
  2243  00ED44  D004               	goto	l881
  2244  00ED46  0E02               	movlw	2
  2245  00ED48  6004               	cpfslt	___ftpack@exp,c
  2246  00ED4A  D7F5               	goto	l2713
  2247  00ED4C  D000               	goto	l881
  2248  00ED4E                     l881:
  2249  00ED4E  B004               	btfsc	___ftpack@exp,0,c
  2250  00ED50  D002               	goto	l2721
  2251  00ED52  9E02               	bcf	___ftpack@arg+1,7,c
  2252  00ED54  D000               	goto	l2721
  2253  00ED56                     l2721:
  2254  00ED56  90D8               	bcf	status,0,c
  2255  00ED58  3204               	rrcf	___ftpack@exp,f,c
  2256  00ED5A  5004               	movf	___ftpack@exp,w,c
  2257  00ED5C  1203               	iorwf	___ftpack@arg+2,f,c
  2258  00ED5E  5005               	movf	___ftpack@sign,w,c
  2259  00ED60  B4D8               	btfsc	status,2,c
  2260  00ED62  D002               	goto	l2727
  2261  00ED64  8E03               	bsf	___ftpack@arg+2,7,c
  2262  00ED66  D000               	goto	l2727
  2263  00ED68                     l2727:
  2264  00ED68  C001  F001         	movff	___ftpack@arg,?___ftpack
  2265  00ED6C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  2266  00ED70  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  2267  00ED74  D000               	goto	l870
  2268  00ED76                     l870:
  2269  00ED76  0012               	return		;funcret
  2270  00ED78                     __end_of___ftpack:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodl	equ	0xFF3
  2277                           postinc0	equ	0xFEE
  2278                           wreg	equ	0xFE8
  2279                           postdec1	equ	0xFE5
  2280                           fsr1l	equ	0xFE1
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function _Night_Mode *****************
  2284 ;; Defined at:
  2285 ;;		line 113 in file "lab8.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;		None               void
  2292 ;; Registers used:
  2293 ;;		None
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;Total ram usage:        0 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_main
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text7
  2313  00E55C                     __ptext7:
  2314                           	opt stack 0
  2315  00E55C                     _Night_Mode:
  2316                           	opt stack 30
  2317                           
  2318                           ;incstack = 0
  2319  00E55C  0012               	return		;funcret
  2320  00E55E                     __end_of_Night_Mode:
  2321                           	opt stack 0
  2322                           tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           prodl	equ	0xFF3
  2327                           postinc0	equ	0xFEE
  2328                           wreg	equ	0xFE8
  2329                           postdec1	equ	0xFE5
  2330                           fsr1l	equ	0xFE1
  2331                           status	equ	0xFD8
  2332                           
  2333 ;; *************** function _Initialize_LCD_Screen *****************
  2334 ;; Defined at:
  2335 ;;		line 48 in file "Main_Screen.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;		None
  2340 ;; Return value:  Size  Location     Type
  2341 ;;		None               void
  2342 ;; Registers used:
  2343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;Total ram usage:        0 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    7
  2356 ;; This function calls:
  2357 ;;		_LCD_Reset
  2358 ;;		_TFT_GreenTab_Initialize
  2359 ;;		_drawCircle
  2360 ;;		_drawRect
  2361 ;;		_drawtext
  2362 ;;		_fillCircle
  2363 ;;		_fillScreen
  2364 ;;		_strcpy
  2365 ;; This function is called by:
  2366 ;;		_main
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text8
  2371  00F652                     __ptext8:
  2372                           	opt stack 0
  2373  00F652                     _Initialize_LCD_Screen:
  2374                           	opt stack 23
  2375                           
  2376                           ;Main_Screen.c: 50: LCD_Reset();
  2377                           
  2378                           ;incstack = 0
  2379  00F652  ECC6  F072         	call	_LCD_Reset	;wreg free
  2380                           
  2381                           ;Main_Screen.c: 51: TFT_GreenTab_Initialize();
  2382  00F656  EC38  F073         	call	_TFT_GreenTab_Initialize	;wreg free
  2383                           
  2384                           ;Main_Screen.c: 53: fillScreen(0x0000);
  2385  00F65A  0E00               	movlw	0
  2386  00F65C  6E15               	movwf	fillScreen@color+1,c
  2387  00F65E  0E00               	movlw	0
  2388  00F660  6E14               	movwf	fillScreen@color,c
  2389  00F662  ECEE  F072         	call	_fillScreen	;wreg free
  2390                           
  2391                           ;Main_Screen.c: 55: txt = buffer;
  2392  00F666  0E80               	movlw	low _buffer
  2393  00F668  6E68               	movwf	_txt,c
  2394  00F66A  0E00               	movlw	high _buffer
  2395  00F66C  6E69               	movwf	_txt+1,c
  2396                           
  2397                           ;Main_Screen.c: 57: strcpy(txt, "Mode:");
  2398  00F66E  C068  F001         	movff	_txt,strcpy@to
  2399  00F672  C069  F002         	movff	_txt+1,strcpy@to+1
  2400  00F676  0EE4               	movlw	low STR_1
  2401  00F678  6E03               	movwf	strcpy@from,c
  2402  00F67A  0EFF               	movlw	high STR_1
  2403  00F67C  6E04               	movwf	strcpy@from+1,c
  2404  00F67E  EC65  F073         	call	_strcpy	;wreg free
  2405                           
  2406                           ;Main_Screen.c: 58: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2407  00F682  0E02               	movlw	2
  2408  00F684  6E29               	movwf	drawtext@y,c
  2409  00F686  C068  F02A         	movff	_txt,drawtext@_text
  2410  00F68A  C069  F02B         	movff	_txt+1,drawtext@_text+1
  2411  00F68E  0EFF               	movlw	255
  2412  00F690  6E2D               	movwf	drawtext@color+1,c
  2413  00F692  682C               	setf	drawtext@color,c
  2414  00F694  0E00               	movlw	0
  2415  00F696  6E2F               	movwf	drawtext@bg+1,c
  2416  00F698  0E00               	movlw	0
  2417  00F69A  6E2E               	movwf	drawtext@bg,c
  2418  00F69C  0E01               	movlw	1
  2419  00F69E  6E30               	movwf	drawtext@size,c
  2420  00F6A0  0E02               	movlw	2
  2421  00F6A2  EC2A  F077         	call	_drawtext
  2422                           
  2423                           ;Main_Screen.c: 59: drawtext(35,2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2424  00F6A6  0E02               	movlw	2
  2425  00F6A8  6E29               	movwf	drawtext@y,c
  2426  00F6AA  0E55               	movlw	low _Act_Mode_Txt
  2427  00F6AC  6E2A               	movwf	drawtext@_text,c
  2428  00F6AE  0E00               	movlw	high _Act_Mode_Txt
  2429  00F6B0  6E2B               	movwf	drawtext@_text+1,c
  2430  00F6B2  0EFF               	movlw	255
  2431  00F6B4  6E2D               	movwf	drawtext@color+1,c
  2432  00F6B6  682C               	setf	drawtext@color,c
  2433  00F6B8  0E00               	movlw	0
  2434  00F6BA  6E2F               	movwf	drawtext@bg+1,c
  2435  00F6BC  0E00               	movlw	0
  2436  00F6BE  6E2E               	movwf	drawtext@bg,c
  2437  00F6C0  0E01               	movlw	1
  2438  00F6C2  6E30               	movwf	drawtext@size,c
  2439  00F6C4  0E23               	movlw	35
  2440  00F6C6  EC2A  F077         	call	_drawtext
  2441                           
  2442                           ;Main_Screen.c: 60: strcpy(txt, "LSV:");
  2443  00F6CA  C068  F001         	movff	_txt,strcpy@to
  2444  00F6CE  C069  F002         	movff	_txt+1,strcpy@to+1
  2445  00F6D2  0EEA               	movlw	low STR_2
  2446  00F6D4  6E03               	movwf	strcpy@from,c
  2447  00F6D6  0EFF               	movlw	high STR_2
  2448  00F6D8  6E04               	movwf	strcpy@from+1,c
  2449  00F6DA  EC65  F073         	call	_strcpy	;wreg free
  2450                           
  2451                           ;Main_Screen.c: 61: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  2452  00F6DE  0E02               	movlw	2
  2453  00F6E0  6E29               	movwf	drawtext@y,c
  2454  00F6E2  C068  F02A         	movff	_txt,drawtext@_text
  2455  00F6E6  C069  F02B         	movff	_txt+1,drawtext@_text+1
  2456  00F6EA  0EFF               	movlw	255
  2457  00F6EC  6E2D               	movwf	drawtext@color+1,c
  2458  00F6EE  682C               	setf	drawtext@color,c
  2459  00F6F0  0E00               	movlw	0
  2460  00F6F2  6E2F               	movwf	drawtext@bg+1,c
  2461  00F6F4  0E00               	movlw	0
  2462  00F6F6  6E2E               	movwf	drawtext@bg,c
  2463  00F6F8  0E01               	movlw	1
  2464  00F6FA  6E30               	movwf	drawtext@size,c
  2465  00F6FC  0E32               	movlw	50
  2466  00F6FE  EC2A  F077         	call	_drawtext
  2467                           
  2468                           ;Main_Screen.c: 62: drawtext(75,2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  2469  00F702  0E02               	movlw	2
  2470  00F704  6E29               	movwf	drawtext@y,c
  2471  00F706  0E3B               	movlw	low _Light_Sensor_Voltage_Txt
  2472  00F708  6E2A               	movwf	drawtext@_text,c
  2473  00F70A  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  2474  00F70C  6E2B               	movwf	drawtext@_text+1,c
  2475  00F70E  0EFF               	movlw	255
  2476  00F710  6E2D               	movwf	drawtext@color+1,c
  2477  00F712  682C               	setf	drawtext@color,c
  2478  00F714  0E00               	movlw	0
  2479  00F716  6E2F               	movwf	drawtext@bg+1,c
  2480  00F718  0E00               	movlw	0
  2481  00F71A  6E2E               	movwf	drawtext@bg,c
  2482  00F71C  0E01               	movlw	1
  2483  00F71E  6E30               	movwf	drawtext@size,c
  2484  00F720  0E4B               	movlw	75
  2485  00F722  EC2A  F077         	call	_drawtext
  2486                           
  2487                           ;Main_Screen.c: 63: strcpy(txt, "-D");
  2488  00F726  C068  F001         	movff	_txt,strcpy@to
  2489  00F72A  C069  F002         	movff	_txt+1,strcpy@to+1
  2490  00F72E  0EF7               	movlw	low STR_3
  2491  00F730  6E03               	movwf	strcpy@from,c
  2492  00F732  0EFF               	movlw	high STR_3
  2493  00F734  6E04               	movwf	strcpy@from+1,c
  2494  00F736  EC65  F073         	call	_strcpy	;wreg free
  2495                           
  2496                           ;Main_Screen.c: 64: drawtext(100,2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  2497  00F73A  0E02               	movlw	2
  2498  00F73C  6E29               	movwf	drawtext@y,c
  2499  00F73E  0E46               	movlw	low _Light_Sensor_Mode_Txt
  2500  00F740  6E2A               	movwf	drawtext@_text,c
  2501  00F742  0E00               	movlw	high _Light_Sensor_Mode_Txt
  2502  00F744  6E2B               	movwf	drawtext@_text+1,c
  2503  00F746  0EFF               	movlw	255
  2504  00F748  6E2D               	movwf	drawtext@color+1,c
  2505  00F74A  682C               	setf	drawtext@color,c
  2506  00F74C  0E00               	movlw	0
  2507  00F74E  6E2F               	movwf	drawtext@bg+1,c
  2508  00F750  0E00               	movlw	0
  2509  00F752  6E2E               	movwf	drawtext@bg,c
  2510  00F754  0E01               	movlw	1
  2511  00F756  6E30               	movwf	drawtext@size,c
  2512  00F758  0E64               	movlw	100
  2513  00F75A  EC2A  F077         	call	_drawtext
  2514                           
  2515                           ;Main_Screen.c: 67: strcpy(txt, "*");
  2516  00F75E  C068  F001         	movff	_txt,strcpy@to
  2517  00F762  C069  F002         	movff	_txt+1,strcpy@to+1
  2518  00F766  0EFC               	movlw	low STR_4
  2519  00F768  6E03               	movwf	strcpy@from,c
  2520  00F76A  0EFF               	movlw	high STR_4
  2521  00F76C  6E04               	movwf	strcpy@from+1,c
  2522  00F76E  EC65  F073         	call	_strcpy	;wreg free
  2523                           
  2524                           ;Main_Screen.c: 68: drawtext(120, 2, txt, 0xFFFF, 0x0000, 1);
  2525  00F772  0E02               	movlw	2
  2526  00F774  6E29               	movwf	drawtext@y,c
  2527  00F776  C068  F02A         	movff	_txt,drawtext@_text
  2528  00F77A  C069  F02B         	movff	_txt+1,drawtext@_text+1
  2529  00F77E  0EFF               	movlw	255
  2530  00F780  6E2D               	movwf	drawtext@color+1,c
  2531  00F782  682C               	setf	drawtext@color,c
  2532  00F784  0E00               	movlw	0
  2533  00F786  6E2F               	movwf	drawtext@bg+1,c
  2534  00F788  0E00               	movlw	0
  2535  00F78A  6E2E               	movwf	drawtext@bg,c
  2536  00F78C  0E01               	movlw	1
  2537  00F78E  6E30               	movwf	drawtext@size,c
  2538  00F790  0E78               	movlw	120
  2539  00F792  EC2A  F077         	call	_drawtext
  2540                           
  2541                           ;Main_Screen.c: 71: strcpy(txt, "NSP NSLT EWP EWLT R S");
  2542  00F796  C068  F001         	movff	_txt,strcpy@to
  2543  00F79A  C069  F002         	movff	_txt+1,strcpy@to+1
  2544  00F79E  0EAA               	movlw	low STR_5
  2545  00F7A0  6E03               	movwf	strcpy@from,c
  2546  00F7A2  0EFF               	movlw	high STR_5
  2547  00F7A4  6E04               	movwf	strcpy@from+1,c
  2548  00F7A6  EC65  F073         	call	_strcpy	;wreg free
  2549                           
  2550                           ;Main_Screen.c: 72: drawtext(1, 11, txt, 0xFFFF, 0x0000, 1);
  2551  00F7AA  0E0B               	movlw	11
  2552  00F7AC  6E29               	movwf	drawtext@y,c
  2553  00F7AE  C068  F02A         	movff	_txt,drawtext@_text
  2554  00F7B2  C069  F02B         	movff	_txt+1,drawtext@_text+1
  2555  00F7B6  0EFF               	movlw	255
  2556  00F7B8  6E2D               	movwf	drawtext@color+1,c
  2557  00F7BA  682C               	setf	drawtext@color,c
  2558  00F7BC  0E00               	movlw	0
  2559  00F7BE  6E2F               	movwf	drawtext@bg+1,c
  2560  00F7C0  0E00               	movlw	0
  2561  00F7C2  6E2E               	movwf	drawtext@bg,c
  2562  00F7C4  0E01               	movlw	1
  2563  00F7C6  6E30               	movwf	drawtext@size,c
  2564  00F7C8  0E01               	movlw	1
  2565  00F7CA  EC2A  F077         	call	_drawtext
  2566                           
  2567                           ;Main_Screen.c: 73: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2568  00F7CE  0E14               	movlw	20
  2569  00F7D0  6E29               	movwf	drawtext@y,c
  2570  00F7D2  0E61               	movlw	low _SW_NSPED_Txt
  2571  00F7D4  6E2A               	movwf	drawtext@_text,c
  2572  00F7D6  0E00               	movlw	high _SW_NSPED_Txt
  2573  00F7D8  6E2B               	movwf	drawtext@_text+1,c
  2574  00F7DA  0EFF               	movlw	255
  2575  00F7DC  6E2D               	movwf	drawtext@color+1,c
  2576  00F7DE  682C               	setf	drawtext@color,c
  2577  00F7E0  0E00               	movlw	0
  2578  00F7E2  6E2F               	movwf	drawtext@bg+1,c
  2579  00F7E4  0E00               	movlw	0
  2580  00F7E6  6E2E               	movwf	drawtext@bg,c
  2581  00F7E8  0E01               	movlw	1
  2582  00F7EA  6E30               	movwf	drawtext@size,c
  2583  00F7EC  0E08               	movlw	8
  2584  00F7EE  EC2A  F077         	call	_drawtext
  2585                           
  2586                           ;Main_Screen.c: 74: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2587  00F7F2  0E14               	movlw	20
  2588  00F7F4  6E29               	movwf	drawtext@y,c
  2589  00F7F6  0E5F               	movlw	low _SW_NSLT_Txt
  2590  00F7F8  6E2A               	movwf	drawtext@_text,c
  2591  00F7FA  0E00               	movlw	high _SW_NSLT_Txt
  2592  00F7FC  6E2B               	movwf	drawtext@_text+1,c
  2593  00F7FE  0EFF               	movlw	255
  2594  00F800  6E2D               	movwf	drawtext@color+1,c
  2595  00F802  682C               	setf	drawtext@color,c
  2596  00F804  0E00               	movlw	0
  2597  00F806  6E2F               	movwf	drawtext@bg+1,c
  2598  00F808  0E00               	movlw	0
  2599  00F80A  6E2E               	movwf	drawtext@bg,c
  2600  00F80C  0E01               	movlw	1
  2601  00F80E  6E30               	movwf	drawtext@size,c
  2602  00F810  0E23               	movlw	35
  2603  00F812  EC2A  F077         	call	_drawtext
  2604                           
  2605                           ;Main_Screen.c: 75: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2606  00F816  0E14               	movlw	20
  2607  00F818  6E29               	movwf	drawtext@y,c
  2608  00F81A  0E5D               	movlw	low _SW_EWPED_Txt
  2609  00F81C  6E2A               	movwf	drawtext@_text,c
  2610  00F81E  0E00               	movlw	high _SW_EWPED_Txt
  2611  00F820  6E2B               	movwf	drawtext@_text+1,c
  2612  00F822  0EFF               	movlw	255
  2613  00F824  6E2D               	movwf	drawtext@color+1,c
  2614  00F826  682C               	setf	drawtext@color,c
  2615  00F828  0E00               	movlw	0
  2616  00F82A  6E2F               	movwf	drawtext@bg+1,c
  2617  00F82C  0E00               	movlw	0
  2618  00F82E  6E2E               	movwf	drawtext@bg,c
  2619  00F830  0E01               	movlw	1
  2620  00F832  6E30               	movwf	drawtext@size,c
  2621  00F834  0E3C               	movlw	60
  2622  00F836  EC2A  F077         	call	_drawtext
  2623                           
  2624                           ;Main_Screen.c: 76: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2625  00F83A  0E14               	movlw	20
  2626  00F83C  6E29               	movwf	drawtext@y,c
  2627  00F83E  0E5B               	movlw	low _SW_EWLT_Txt
  2628  00F840  6E2A               	movwf	drawtext@_text,c
  2629  00F842  0E00               	movlw	high _SW_EWLT_Txt
  2630  00F844  6E2B               	movwf	drawtext@_text+1,c
  2631  00F846  0EFF               	movlw	255
  2632  00F848  6E2D               	movwf	drawtext@color+1,c
  2633  00F84A  682C               	setf	drawtext@color,c
  2634  00F84C  0E00               	movlw	0
  2635  00F84E  6E2F               	movwf	drawtext@bg+1,c
  2636  00F850  0E00               	movlw	0
  2637  00F852  6E2E               	movwf	drawtext@bg,c
  2638  00F854  0E01               	movlw	1
  2639  00F856  6E30               	movwf	drawtext@size,c
  2640  00F858  0E55               	movlw	85
  2641  00F85A  EC2A  F077         	call	_drawtext
  2642                           
  2643                           ;Main_Screen.c: 77: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2644  00F85E  0E14               	movlw	20
  2645  00F860  6E29               	movwf	drawtext@y,c
  2646  00F862  0E57               	movlw	low _FlashingR_Txt
  2647  00F864  6E2A               	movwf	drawtext@_text,c
  2648  00F866  0E00               	movlw	high _FlashingR_Txt
  2649  00F868  6E2B               	movwf	drawtext@_text+1,c
  2650  00F86A  0EFF               	movlw	255
  2651  00F86C  6E2D               	movwf	drawtext@color+1,c
  2652  00F86E  682C               	setf	drawtext@color,c
  2653  00F870  0E00               	movlw	0
  2654  00F872  6E2F               	movwf	drawtext@bg+1,c
  2655  00F874  0E00               	movlw	0
  2656  00F876  6E2E               	movwf	drawtext@bg,c
  2657  00F878  0E01               	movlw	1
  2658  00F87A  6E30               	movwf	drawtext@size,c
  2659  00F87C  0E6C               	movlw	108
  2660  00F87E  EC2A  F077         	call	_drawtext
  2661                           
  2662                           ;Main_Screen.c: 78: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2663  00F882  0E14               	movlw	20
  2664  00F884  6E29               	movwf	drawtext@y,c
  2665  00F886  0E59               	movlw	low _FlashingS_Txt
  2666  00F888  6E2A               	movwf	drawtext@_text,c
  2667  00F88A  0E00               	movlw	high _FlashingS_Txt
  2668  00F88C  6E2B               	movwf	drawtext@_text+1,c
  2669  00F88E  0EFF               	movlw	255
  2670  00F890  6E2D               	movwf	drawtext@color+1,c
  2671  00F892  682C               	setf	drawtext@color,c
  2672  00F894  0E00               	movlw	0
  2673  00F896  6E2F               	movwf	drawtext@bg+1,c
  2674  00F898  0E00               	movlw	0
  2675  00F89A  6E2E               	movwf	drawtext@bg,c
  2676  00F89C  0E01               	movlw	1
  2677  00F89E  6E30               	movwf	drawtext@size,c
  2678  00F8A0  0E77               	movlw	119
  2679  00F8A2  EC2A  F077         	call	_drawtext
  2680                           
  2681                           ;Main_Screen.c: 82: strcpy(txt, "NORTH/SOUTH");
  2682  00F8A6  C068  F001         	movff	_txt,strcpy@to
  2683  00F8AA  C069  F002         	movff	_txt+1,strcpy@to+1
  2684  00F8AE  0EC0               	movlw	low STR_6
  2685  00F8B0  6E03               	movwf	strcpy@from,c
  2686  00F8B2  0EFF               	movlw	high STR_6
  2687  00F8B4  6E04               	movwf	strcpy@from+1,c
  2688  00F8B6  EC65  F073         	call	_strcpy	;wreg free
  2689                           
  2690                           ;Main_Screen.c: 83: drawtext (30, 30 , txt, 0xFFE0, 0x0000, 1);
  2691  00F8BA  0E1E               	movlw	30
  2692  00F8BC  6E29               	movwf	drawtext@y,c
  2693  00F8BE  C068  F02A         	movff	_txt,drawtext@_text
  2694  00F8C2  C069  F02B         	movff	_txt+1,drawtext@_text+1
  2695  00F8C6  0EFF               	movlw	255
  2696  00F8C8  6E2D               	movwf	drawtext@color+1,c
  2697  00F8CA  0EE0               	movlw	224
  2698  00F8CC  6E2C               	movwf	drawtext@color,c
  2699  00F8CE  0E00               	movlw	0
  2700  00F8D0  6E2F               	movwf	drawtext@bg+1,c
  2701  00F8D2  0E00               	movlw	0
  2702  00F8D4  6E2E               	movwf	drawtext@bg,c
  2703  00F8D6  0E01               	movlw	1
  2704  00F8D8  6E30               	movwf	drawtext@size,c
  2705  00F8DA  0E1E               	movlw	30
  2706  00F8DC  EC2A  F077         	call	_drawtext
  2707                           
  2708                           ;Main_Screen.c: 84: drawRect (30, 30 + 16-8, 60, 18, 0xFFE0);
  2709  00F8E0  0E00               	movlw	0
  2710  00F8E2  6E14               	movwf	drawRect@x+1,c
  2711  00F8E4  0E1E               	movlw	30
  2712  00F8E6  6E13               	movwf	drawRect@x,c
  2713  00F8E8  0E00               	movlw	0
  2714  00F8EA  6E16               	movwf	drawRect@y+1,c
  2715  00F8EC  0E26               	movlw	38
  2716  00F8EE  6E15               	movwf	drawRect@y,c
  2717  00F8F0  0E00               	movlw	0
  2718  00F8F2  6E18               	movwf	drawRect@w+1,c
  2719  00F8F4  0E3C               	movlw	60
  2720  00F8F6  6E17               	movwf	drawRect@w,c
  2721  00F8F8  0E00               	movlw	0
  2722  00F8FA  6E1A               	movwf	drawRect@h+1,c
  2723  00F8FC  0E12               	movlw	18
  2724  00F8FE  6E19               	movwf	drawRect@h,c
  2725  00F900  0EFF               	movlw	255
  2726  00F902  6E1C               	movwf	drawRect@color+1,c
  2727  00F904  0EE0               	movlw	224
  2728  00F906  6E1B               	movwf	drawRect@color,c
  2729  00F908  ECA9  F074         	call	_drawRect	;wreg free
  2730                           
  2731                           ;Main_Screen.c: 85: drawCircle(40, 30 + 16 , 7, 0xF800);
  2732  00F90C  0E00               	movlw	0
  2733  00F90E  6E0D               	movwf	drawCircle@x0+1,c
  2734  00F910  0E28               	movlw	40
  2735  00F912  6E0C               	movwf	drawCircle@x0,c
  2736  00F914  0E00               	movlw	0
  2737  00F916  6E0F               	movwf	drawCircle@y0+1,c
  2738  00F918  0E2E               	movlw	46
  2739  00F91A  6E0E               	movwf	drawCircle@y0,c
  2740  00F91C  0E00               	movlw	0
  2741  00F91E  6E11               	movwf	drawCircle@r+1,c
  2742  00F920  0E07               	movlw	7
  2743  00F922  6E10               	movwf	drawCircle@r,c
  2744  00F924  0EF8               	movlw	248
  2745  00F926  6E13               	movwf	drawCircle@color+1,c
  2746  00F928  0E00               	movlw	0
  2747  00F92A  6E12               	movwf	drawCircle@color,c
  2748  00F92C  EC52  F07A         	call	_drawCircle	;wreg free
  2749                           
  2750                           ;Main_Screen.c: 86: drawCircle(60, 30 + 16 , 7, 0xFFE0);
  2751  00F930  0E00               	movlw	0
  2752  00F932  6E0D               	movwf	drawCircle@x0+1,c
  2753  00F934  0E3C               	movlw	60
  2754  00F936  6E0C               	movwf	drawCircle@x0,c
  2755  00F938  0E00               	movlw	0
  2756  00F93A  6E0F               	movwf	drawCircle@y0+1,c
  2757  00F93C  0E2E               	movlw	46
  2758  00F93E  6E0E               	movwf	drawCircle@y0,c
  2759  00F940  0E00               	movlw	0
  2760  00F942  6E11               	movwf	drawCircle@r+1,c
  2761  00F944  0E07               	movlw	7
  2762  00F946  6E10               	movwf	drawCircle@r,c
  2763  00F948  0EFF               	movlw	255
  2764  00F94A  6E13               	movwf	drawCircle@color+1,c
  2765  00F94C  0EE0               	movlw	224
  2766  00F94E  6E12               	movwf	drawCircle@color,c
  2767  00F950  EC52  F07A         	call	_drawCircle	;wreg free
  2768                           
  2769                           ;Main_Screen.c: 87: fillCircle(80, 30 + 16 , 7, 0x07E0);
  2770  00F954  0E00               	movlw	0
  2771  00F956  6E2C               	movwf	fillCircle@x0+1,c
  2772  00F958  0E50               	movlw	80
  2773  00F95A  6E2B               	movwf	fillCircle@x0,c
  2774  00F95C  0E00               	movlw	0
  2775  00F95E  6E2E               	movwf	fillCircle@y0+1,c
  2776  00F960  0E2E               	movlw	46
  2777  00F962  6E2D               	movwf	fillCircle@y0,c
  2778  00F964  0E00               	movlw	0
  2779  00F966  6E30               	movwf	fillCircle@r+1,c
  2780  00F968  0E07               	movlw	7
  2781  00F96A  6E2F               	movwf	fillCircle@r,c
  2782  00F96C  0E07               	movlw	7
  2783  00F96E  6E32               	movwf	fillCircle@color+1,c
  2784  00F970  0EE0               	movlw	224
  2785  00F972  6E31               	movwf	fillCircle@color,c
  2786  00F974  EC4F  F074         	call	_fillCircle	;wreg free
  2787                           
  2788                           ;Main_Screen.c: 88: drawtext (100, 30 + 10, NS_Count, 0xFFE0, 0x0000, 2);
  2789  00F978  0E28               	movlw	40
  2790  00F97A  6E29               	movwf	drawtext@y,c
  2791  00F97C  0E4C               	movlw	low _NS_Count
  2792  00F97E  6E2A               	movwf	drawtext@_text,c
  2793  00F980  0E00               	movlw	high _NS_Count
  2794  00F982  6E2B               	movwf	drawtext@_text+1,c
  2795  00F984  0EFF               	movlw	255
  2796  00F986  6E2D               	movwf	drawtext@color+1,c
  2797  00F988  0EE0               	movlw	224
  2798  00F98A  6E2C               	movwf	drawtext@color,c
  2799  00F98C  0E00               	movlw	0
  2800  00F98E  6E2F               	movwf	drawtext@bg+1,c
  2801  00F990  0E00               	movlw	0
  2802  00F992  6E2E               	movwf	drawtext@bg,c
  2803  00F994  0E02               	movlw	2
  2804  00F996  6E30               	movwf	drawtext@size,c
  2805  00F998  0E64               	movlw	100
  2806  00F99A  EC2A  F077         	call	_drawtext
  2807                           
  2808                           ;Main_Screen.c: 91: strcpy(txt, "N/S LT");
  2809  00F99E  C068  F001         	movff	_txt,strcpy@to
  2810  00F9A2  C069  F002         	movff	_txt+1,strcpy@to+1
  2811  00F9A6  0ED6               	movlw	low STR_7
  2812  00F9A8  6E03               	movwf	strcpy@from,c
  2813  00F9AA  0EFF               	movlw	high STR_7
  2814  00F9AC  6E04               	movwf	strcpy@from+1,c
  2815  00F9AE  EC65  F073         	call	_strcpy	;wreg free
  2816                           
  2817                           ;Main_Screen.c: 92: drawtext (30, 60, txt, 0xF81F, 0x0000, 1);
  2818  00F9B2  0E3C               	movlw	60
  2819  00F9B4  6E29               	movwf	drawtext@y,c
  2820  00F9B6  C068  F02A         	movff	_txt,drawtext@_text
  2821  00F9BA  C069  F02B         	movff	_txt+1,drawtext@_text+1
  2822  00F9BE  0EF8               	movlw	248
  2823  00F9C0  6E2D               	movwf	drawtext@color+1,c
  2824  00F9C2  0E1F               	movlw	31
  2825  00F9C4  6E2C               	movwf	drawtext@color,c
  2826  00F9C6  0E00               	movlw	0
  2827  00F9C8  6E2F               	movwf	drawtext@bg+1,c
  2828  00F9CA  0E00               	movlw	0
  2829  00F9CC  6E2E               	movwf	drawtext@bg,c
  2830  00F9CE  0E01               	movlw	1
  2831  00F9D0  6E30               	movwf	drawtext@size,c
  2832  00F9D2  0E1E               	movlw	30
  2833  00F9D4  EC2A  F077         	call	_drawtext
  2834                           
  2835                           ;Main_Screen.c: 93: drawRect (30, 60 + 16-8, 60, 18, 0xF81F);
  2836  00F9D8  0E00               	movlw	0
  2837  00F9DA  6E14               	movwf	drawRect@x+1,c
  2838  00F9DC  0E1E               	movlw	30
  2839  00F9DE  6E13               	movwf	drawRect@x,c
  2840  00F9E0  0E00               	movlw	0
  2841  00F9E2  6E16               	movwf	drawRect@y+1,c
  2842  00F9E4  0E44               	movlw	68
  2843  00F9E6  6E15               	movwf	drawRect@y,c
  2844  00F9E8  0E00               	movlw	0
  2845  00F9EA  6E18               	movwf	drawRect@w+1,c
  2846  00F9EC  0E3C               	movlw	60
  2847  00F9EE  6E17               	movwf	drawRect@w,c
  2848  00F9F0  0E00               	movlw	0
  2849  00F9F2  6E1A               	movwf	drawRect@h+1,c
  2850  00F9F4  0E12               	movlw	18
  2851  00F9F6  6E19               	movwf	drawRect@h,c
  2852  00F9F8  0EF8               	movlw	248
  2853  00F9FA  6E1C               	movwf	drawRect@color+1,c
  2854  00F9FC  0E1F               	movlw	31
  2855  00F9FE  6E1B               	movwf	drawRect@color,c
  2856  00FA00  ECA9  F074         	call	_drawRect	;wreg free
  2857                           
  2858                           ;Main_Screen.c: 94: fillCircle(40, 60 + 16, 7, 0xF800);
  2859  00FA04  0E00               	movlw	0
  2860  00FA06  6E2C               	movwf	fillCircle@x0+1,c
  2861  00FA08  0E28               	movlw	40
  2862  00FA0A  6E2B               	movwf	fillCircle@x0,c
  2863  00FA0C  0E00               	movlw	0
  2864  00FA0E  6E2E               	movwf	fillCircle@y0+1,c
  2865  00FA10  0E4C               	movlw	76
  2866  00FA12  6E2D               	movwf	fillCircle@y0,c
  2867  00FA14  0E00               	movlw	0
  2868  00FA16  6E30               	movwf	fillCircle@r+1,c
  2869  00FA18  0E07               	movlw	7
  2870  00FA1A  6E2F               	movwf	fillCircle@r,c
  2871  00FA1C  0EF8               	movlw	248
  2872  00FA1E  6E32               	movwf	fillCircle@color+1,c
  2873  00FA20  0E00               	movlw	0
  2874  00FA22  6E31               	movwf	fillCircle@color,c
  2875  00FA24  EC4F  F074         	call	_fillCircle	;wreg free
  2876                           
  2877                           ;Main_Screen.c: 95: drawCircle(60, 60 + 16, 7, 0xFFE0);
  2878  00FA28  0E00               	movlw	0
  2879  00FA2A  6E0D               	movwf	drawCircle@x0+1,c
  2880  00FA2C  0E3C               	movlw	60
  2881  00FA2E  6E0C               	movwf	drawCircle@x0,c
  2882  00FA30  0E00               	movlw	0
  2883  00FA32  6E0F               	movwf	drawCircle@y0+1,c
  2884  00FA34  0E4C               	movlw	76
  2885  00FA36  6E0E               	movwf	drawCircle@y0,c
  2886  00FA38  0E00               	movlw	0
  2887  00FA3A  6E11               	movwf	drawCircle@r+1,c
  2888  00FA3C  0E07               	movlw	7
  2889  00FA3E  6E10               	movwf	drawCircle@r,c
  2890  00FA40  0EFF               	movlw	255
  2891  00FA42  6E13               	movwf	drawCircle@color+1,c
  2892  00FA44  0EE0               	movlw	224
  2893  00FA46  6E12               	movwf	drawCircle@color,c
  2894  00FA48  EC52  F07A         	call	_drawCircle	;wreg free
  2895                           
  2896                           ;Main_Screen.c: 96: drawCircle(80, 60 + 16, 7, 0x07E0);
  2897  00FA4C  0E00               	movlw	0
  2898  00FA4E  6E0D               	movwf	drawCircle@x0+1,c
  2899  00FA50  0E50               	movlw	80
  2900  00FA52  6E0C               	movwf	drawCircle@x0,c
  2901  00FA54  0E00               	movlw	0
  2902  00FA56  6E0F               	movwf	drawCircle@y0+1,c
  2903  00FA58  0E4C               	movlw	76
  2904  00FA5A  6E0E               	movwf	drawCircle@y0,c
  2905  00FA5C  0E00               	movlw	0
  2906  00FA5E  6E11               	movwf	drawCircle@r+1,c
  2907  00FA60  0E07               	movlw	7
  2908  00FA62  6E10               	movwf	drawCircle@r,c
  2909  00FA64  0E07               	movlw	7
  2910  00FA66  6E13               	movwf	drawCircle@color+1,c
  2911  00FA68  0EE0               	movlw	224
  2912  00FA6A  6E12               	movwf	drawCircle@color,c
  2913  00FA6C  EC52  F07A         	call	_drawCircle	;wreg free
  2914                           
  2915                           ;Main_Screen.c: 97: drawtext (100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2916  00FA70  0E46               	movlw	70
  2917  00FA72  6E29               	movwf	drawtext@y,c
  2918  00FA74  0E49               	movlw	low _NSLT_Count
  2919  00FA76  6E2A               	movwf	drawtext@_text,c
  2920  00FA78  0E00               	movlw	high _NSLT_Count
  2921  00FA7A  6E2B               	movwf	drawtext@_text+1,c
  2922  00FA7C  0EF8               	movlw	248
  2923  00FA7E  6E2D               	movwf	drawtext@color+1,c
  2924  00FA80  0E1F               	movlw	31
  2925  00FA82  6E2C               	movwf	drawtext@color,c
  2926  00FA84  0E00               	movlw	0
  2927  00FA86  6E2F               	movwf	drawtext@bg+1,c
  2928  00FA88  0E00               	movlw	0
  2929  00FA8A  6E2E               	movwf	drawtext@bg,c
  2930  00FA8C  0E02               	movlw	2
  2931  00FA8E  6E30               	movwf	drawtext@size,c
  2932  00FA90  0E64               	movlw	100
  2933  00FA92  EC2A  F077         	call	_drawtext
  2934                           
  2935                           ;Main_Screen.c: 100: strcpy(txt, "EAST/WEST");
  2936  00FA96  C068  F001         	movff	_txt,strcpy@to
  2937  00FA9A  C069  F002         	movff	_txt+1,strcpy@to+1
  2938  00FA9E  0ECC               	movlw	low STR_8
  2939  00FAA0  6E03               	movwf	strcpy@from,c
  2940  00FAA2  0EFF               	movlw	high STR_8
  2941  00FAA4  6E04               	movwf	strcpy@from+1,c
  2942  00FAA6  EC65  F073         	call	_strcpy	;wreg free
  2943                           
  2944                           ;Main_Screen.c: 101: drawtext (30, 90, txt, 0x07FF, 0x0000, 1);
  2945  00FAAA  0E5A               	movlw	90
  2946  00FAAC  6E29               	movwf	drawtext@y,c
  2947  00FAAE  C068  F02A         	movff	_txt,drawtext@_text
  2948  00FAB2  C069  F02B         	movff	_txt+1,drawtext@_text+1
  2949  00FAB6  0E07               	movlw	7
  2950  00FAB8  6E2D               	movwf	drawtext@color+1,c
  2951  00FABA  682C               	setf	drawtext@color,c
  2952  00FABC  0E00               	movlw	0
  2953  00FABE  6E2F               	movwf	drawtext@bg+1,c
  2954  00FAC0  0E00               	movlw	0
  2955  00FAC2  6E2E               	movwf	drawtext@bg,c
  2956  00FAC4  0E01               	movlw	1
  2957  00FAC6  6E30               	movwf	drawtext@size,c
  2958  00FAC8  0E1E               	movlw	30
  2959  00FACA  EC2A  F077         	call	_drawtext
  2960                           
  2961                           ;Main_Screen.c: 102: drawRect (30, 90 + 16-8, 60, 18, 0x07FF);
  2962  00FACE  0E00               	movlw	0
  2963  00FAD0  6E14               	movwf	drawRect@x+1,c
  2964  00FAD2  0E1E               	movlw	30
  2965  00FAD4  6E13               	movwf	drawRect@x,c
  2966  00FAD6  0E00               	movlw	0
  2967  00FAD8  6E16               	movwf	drawRect@y+1,c
  2968  00FADA  0E62               	movlw	98
  2969  00FADC  6E15               	movwf	drawRect@y,c
  2970  00FADE  0E00               	movlw	0
  2971  00FAE0  6E18               	movwf	drawRect@w+1,c
  2972  00FAE2  0E3C               	movlw	60
  2973  00FAE4  6E17               	movwf	drawRect@w,c
  2974  00FAE6  0E00               	movlw	0
  2975  00FAE8  6E1A               	movwf	drawRect@h+1,c
  2976  00FAEA  0E12               	movlw	18
  2977  00FAEC  6E19               	movwf	drawRect@h,c
  2978  00FAEE  0E07               	movlw	7
  2979  00FAF0  6E1C               	movwf	drawRect@color+1,c
  2980  00FAF2  681B               	setf	drawRect@color,c
  2981  00FAF4  ECA9  F074         	call	_drawRect	;wreg free
  2982                           
  2983                           ;Main_Screen.c: 103: fillCircle(40, 90 + 16, 7, 0xF800);
  2984  00FAF8  0E00               	movlw	0
  2985  00FAFA  6E2C               	movwf	fillCircle@x0+1,c
  2986  00FAFC  0E28               	movlw	40
  2987  00FAFE  6E2B               	movwf	fillCircle@x0,c
  2988  00FB00  0E00               	movlw	0
  2989  00FB02  6E2E               	movwf	fillCircle@y0+1,c
  2990  00FB04  0E6A               	movlw	106
  2991  00FB06  6E2D               	movwf	fillCircle@y0,c
  2992  00FB08  0E00               	movlw	0
  2993  00FB0A  6E30               	movwf	fillCircle@r+1,c
  2994  00FB0C  0E07               	movlw	7
  2995  00FB0E  6E2F               	movwf	fillCircle@r,c
  2996  00FB10  0EF8               	movlw	248
  2997  00FB12  6E32               	movwf	fillCircle@color+1,c
  2998  00FB14  0E00               	movlw	0
  2999  00FB16  6E31               	movwf	fillCircle@color,c
  3000  00FB18  EC4F  F074         	call	_fillCircle	;wreg free
  3001                           
  3002                           ;Main_Screen.c: 104: drawCircle(60, 90 + 16, 7, 0xFFE0);
  3003  00FB1C  0E00               	movlw	0
  3004  00FB1E  6E0D               	movwf	drawCircle@x0+1,c
  3005  00FB20  0E3C               	movlw	60
  3006  00FB22  6E0C               	movwf	drawCircle@x0,c
  3007  00FB24  0E00               	movlw	0
  3008  00FB26  6E0F               	movwf	drawCircle@y0+1,c
  3009  00FB28  0E6A               	movlw	106
  3010  00FB2A  6E0E               	movwf	drawCircle@y0,c
  3011  00FB2C  0E00               	movlw	0
  3012  00FB2E  6E11               	movwf	drawCircle@r+1,c
  3013  00FB30  0E07               	movlw	7
  3014  00FB32  6E10               	movwf	drawCircle@r,c
  3015  00FB34  0EFF               	movlw	255
  3016  00FB36  6E13               	movwf	drawCircle@color+1,c
  3017  00FB38  0EE0               	movlw	224
  3018  00FB3A  6E12               	movwf	drawCircle@color,c
  3019  00FB3C  EC52  F07A         	call	_drawCircle	;wreg free
  3020                           
  3021                           ;Main_Screen.c: 105: drawCircle(80, 90 + 16, 7, 0x07E0);
  3022  00FB40  0E00               	movlw	0
  3023  00FB42  6E0D               	movwf	drawCircle@x0+1,c
  3024  00FB44  0E50               	movlw	80
  3025  00FB46  6E0C               	movwf	drawCircle@x0,c
  3026  00FB48  0E00               	movlw	0
  3027  00FB4A  6E0F               	movwf	drawCircle@y0+1,c
  3028  00FB4C  0E6A               	movlw	106
  3029  00FB4E  6E0E               	movwf	drawCircle@y0,c
  3030  00FB50  0E00               	movlw	0
  3031  00FB52  6E11               	movwf	drawCircle@r+1,c
  3032  00FB54  0E07               	movlw	7
  3033  00FB56  6E10               	movwf	drawCircle@r,c
  3034  00FB58  0E07               	movlw	7
  3035  00FB5A  6E13               	movwf	drawCircle@color+1,c
  3036  00FB5C  0EE0               	movlw	224
  3037  00FB5E  6E12               	movwf	drawCircle@color,c
  3038  00FB60  EC52  F07A         	call	_drawCircle	;wreg free
  3039                           
  3040                           ;Main_Screen.c: 106: drawtext (100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  3041  00FB64  0E64               	movlw	100
  3042  00FB66  6E29               	movwf	drawtext@y,c
  3043  00FB68  0E43               	movlw	low _EW_Count
  3044  00FB6A  6E2A               	movwf	drawtext@_text,c
  3045  00FB6C  0E00               	movlw	high _EW_Count
  3046  00FB6E  6E2B               	movwf	drawtext@_text+1,c
  3047  00FB70  0E07               	movlw	7
  3048  00FB72  6E2D               	movwf	drawtext@color+1,c
  3049  00FB74  682C               	setf	drawtext@color,c
  3050  00FB76  0E00               	movlw	0
  3051  00FB78  6E2F               	movwf	drawtext@bg+1,c
  3052  00FB7A  0E00               	movlw	0
  3053  00FB7C  6E2E               	movwf	drawtext@bg,c
  3054  00FB7E  0E02               	movlw	2
  3055  00FB80  6E30               	movwf	drawtext@size,c
  3056  00FB82  0E64               	movlw	100
  3057  00FB84  EC2A  F077         	call	_drawtext
  3058                           
  3059                           ;Main_Screen.c: 109: strcpy(txt, "E/W LT");
  3060  00FB88  C068  F001         	movff	_txt,strcpy@to
  3061  00FB8C  C069  F002         	movff	_txt+1,strcpy@to+1
  3062  00FB90  0EDD               	movlw	low STR_9
  3063  00FB92  6E03               	movwf	strcpy@from,c
  3064  00FB94  0EFF               	movlw	high STR_9
  3065  00FB96  6E04               	movwf	strcpy@from+1,c
  3066  00FB98  EC65  F073         	call	_strcpy	;wreg free
  3067                           
  3068                           ;Main_Screen.c: 110: drawtext (30, 120, txt, 0xFFFF, 0x0000, 1);
  3069  00FB9C  0E78               	movlw	120
  3070  00FB9E  6E29               	movwf	drawtext@y,c
  3071  00FBA0  C068  F02A         	movff	_txt,drawtext@_text
  3072  00FBA4  C069  F02B         	movff	_txt+1,drawtext@_text+1
  3073  00FBA8  0EFF               	movlw	255
  3074  00FBAA  6E2D               	movwf	drawtext@color+1,c
  3075  00FBAC  682C               	setf	drawtext@color,c
  3076  00FBAE  0E00               	movlw	0
  3077  00FBB0  6E2F               	movwf	drawtext@bg+1,c
  3078  00FBB2  0E00               	movlw	0
  3079  00FBB4  6E2E               	movwf	drawtext@bg,c
  3080  00FBB6  0E01               	movlw	1
  3081  00FBB8  6E30               	movwf	drawtext@size,c
  3082  00FBBA  0E1E               	movlw	30
  3083  00FBBC  EC2A  F077         	call	_drawtext
  3084                           
  3085                           ;Main_Screen.c: 111: drawRect (30, 120 + 16-8, 60, 18, 0xFFFF);
  3086  00FBC0  0E00               	movlw	0
  3087  00FBC2  6E14               	movwf	drawRect@x+1,c
  3088  00FBC4  0E1E               	movlw	30
  3089  00FBC6  6E13               	movwf	drawRect@x,c
  3090  00FBC8  0E00               	movlw	0
  3091  00FBCA  6E16               	movwf	drawRect@y+1,c
  3092  00FBCC  0E80               	movlw	128
  3093  00FBCE  6E15               	movwf	drawRect@y,c
  3094  00FBD0  0E00               	movlw	0
  3095  00FBD2  6E18               	movwf	drawRect@w+1,c
  3096  00FBD4  0E3C               	movlw	60
  3097  00FBD6  6E17               	movwf	drawRect@w,c
  3098  00FBD8  0E00               	movlw	0
  3099  00FBDA  6E1A               	movwf	drawRect@h+1,c
  3100  00FBDC  0E12               	movlw	18
  3101  00FBDE  6E19               	movwf	drawRect@h,c
  3102  00FBE0  0EFF               	movlw	255
  3103  00FBE2  6E1C               	movwf	drawRect@color+1,c
  3104  00FBE4  681B               	setf	drawRect@color,c
  3105  00FBE6  ECA9  F074         	call	_drawRect	;wreg free
  3106                           
  3107                           ;Main_Screen.c: 112: fillCircle(40, 120 + 16, 7, 0xF800);
  3108  00FBEA  0E00               	movlw	0
  3109  00FBEC  6E2C               	movwf	fillCircle@x0+1,c
  3110  00FBEE  0E28               	movlw	40
  3111  00FBF0  6E2B               	movwf	fillCircle@x0,c
  3112  00FBF2  0E00               	movlw	0
  3113  00FBF4  6E2E               	movwf	fillCircle@y0+1,c
  3114  00FBF6  0E88               	movlw	136
  3115  00FBF8  6E2D               	movwf	fillCircle@y0,c
  3116  00FBFA  0E00               	movlw	0
  3117  00FBFC  6E30               	movwf	fillCircle@r+1,c
  3118  00FBFE  0E07               	movlw	7
  3119  00FC00  6E2F               	movwf	fillCircle@r,c
  3120  00FC02  0EF8               	movlw	248
  3121  00FC04  6E32               	movwf	fillCircle@color+1,c
  3122  00FC06  0E00               	movlw	0
  3123  00FC08  6E31               	movwf	fillCircle@color,c
  3124  00FC0A  EC4F  F074         	call	_fillCircle	;wreg free
  3125                           
  3126                           ;Main_Screen.c: 113: drawCircle(60, 120 + 16, 7, 0xFFE0);
  3127  00FC0E  0E00               	movlw	0
  3128  00FC10  6E0D               	movwf	drawCircle@x0+1,c
  3129  00FC12  0E3C               	movlw	60
  3130  00FC14  6E0C               	movwf	drawCircle@x0,c
  3131  00FC16  0E00               	movlw	0
  3132  00FC18  6E0F               	movwf	drawCircle@y0+1,c
  3133  00FC1A  0E88               	movlw	136
  3134  00FC1C  6E0E               	movwf	drawCircle@y0,c
  3135  00FC1E  0E00               	movlw	0
  3136  00FC20  6E11               	movwf	drawCircle@r+1,c
  3137  00FC22  0E07               	movlw	7
  3138  00FC24  6E10               	movwf	drawCircle@r,c
  3139  00FC26  0EFF               	movlw	255
  3140  00FC28  6E13               	movwf	drawCircle@color+1,c
  3141  00FC2A  0EE0               	movlw	224
  3142  00FC2C  6E12               	movwf	drawCircle@color,c
  3143  00FC2E  EC52  F07A         	call	_drawCircle	;wreg free
  3144                           
  3145                           ;Main_Screen.c: 114: drawCircle(80, 120 + 16, 7, 0x07E0);
  3146  00FC32  0E00               	movlw	0
  3147  00FC34  6E0D               	movwf	drawCircle@x0+1,c
  3148  00FC36  0E50               	movlw	80
  3149  00FC38  6E0C               	movwf	drawCircle@x0,c
  3150  00FC3A  0E00               	movlw	0
  3151  00FC3C  6E0F               	movwf	drawCircle@y0+1,c
  3152  00FC3E  0E88               	movlw	136
  3153  00FC40  6E0E               	movwf	drawCircle@y0,c
  3154  00FC42  0E00               	movlw	0
  3155  00FC44  6E11               	movwf	drawCircle@r+1,c
  3156  00FC46  0E07               	movlw	7
  3157  00FC48  6E10               	movwf	drawCircle@r,c
  3158  00FC4A  0E07               	movlw	7
  3159  00FC4C  6E13               	movwf	drawCircle@color+1,c
  3160  00FC4E  0EE0               	movlw	224
  3161  00FC50  6E12               	movwf	drawCircle@color,c
  3162  00FC52  EC52  F07A         	call	_drawCircle	;wreg free
  3163                           
  3164                           ;Main_Screen.c: 115: drawtext (100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  3165  00FC56  0E82               	movlw	130
  3166  00FC58  6E29               	movwf	drawtext@y,c
  3167  00FC5A  0E40               	movlw	low _EWLT_Count
  3168  00FC5C  6E2A               	movwf	drawtext@_text,c
  3169  00FC5E  0E00               	movlw	high _EWLT_Count
  3170  00FC60  6E2B               	movwf	drawtext@_text+1,c
  3171  00FC62  0EFF               	movlw	255
  3172  00FC64  6E2D               	movwf	drawtext@color+1,c
  3173  00FC66  682C               	setf	drawtext@color,c
  3174  00FC68  0E00               	movlw	0
  3175  00FC6A  6E2F               	movwf	drawtext@bg+1,c
  3176  00FC6C  0E00               	movlw	0
  3177  00FC6E  6E2E               	movwf	drawtext@bg,c
  3178  00FC70  0E02               	movlw	2
  3179  00FC72  6E30               	movwf	drawtext@size,c
  3180  00FC74  0E64               	movlw	100
  3181  00FC76  EC2A  F077         	call	_drawtext
  3182                           
  3183                           ;Main_Screen.c: 118: strcpy(txt, "PNS");
  3184  00FC7A  C068  F001         	movff	_txt,strcpy@to
  3185  00FC7E  C069  F002         	movff	_txt+1,strcpy@to+1
  3186  00FC82  0EEF               	movlw	low STR_10
  3187  00FC84  6E03               	movwf	strcpy@from,c
  3188  00FC86  0EFF               	movlw	high STR_10
  3189  00FC88  6E04               	movwf	strcpy@from+1,c
  3190  00FC8A  EC65  F073         	call	_strcpy	;wreg free
  3191                           
  3192                           ;Main_Screen.c: 119: drawtext(3, 30, txt, 0xFFE0, 0x0000, 1);
  3193  00FC8E  0E1E               	movlw	30
  3194  00FC90  6E29               	movwf	drawtext@y,c
  3195  00FC92  C068  F02A         	movff	_txt,drawtext@_text
  3196  00FC96  C069  F02B         	movff	_txt+1,drawtext@_text+1
  3197  00FC9A  0EFF               	movlw	255
  3198  00FC9C  6E2D               	movwf	drawtext@color+1,c
  3199  00FC9E  0EE0               	movlw	224
  3200  00FCA0  6E2C               	movwf	drawtext@color,c
  3201  00FCA2  0E00               	movlw	0
  3202  00FCA4  6E2F               	movwf	drawtext@bg+1,c
  3203  00FCA6  0E00               	movlw	0
  3204  00FCA8  6E2E               	movwf	drawtext@bg,c
  3205  00FCAA  0E01               	movlw	1
  3206  00FCAC  6E30               	movwf	drawtext@size,c
  3207  00FCAE  0E03               	movlw	3
  3208  00FCB0  EC2A  F077         	call	_drawtext
  3209                           
  3210                           ;Main_Screen.c: 120: drawtext(2, 40, PED_NS_Count, 0xFFE0, 0x0000, 2);
  3211  00FCB4  0E28               	movlw	40
  3212  00FCB6  6E29               	movwf	drawtext@y,c
  3213  00FCB8  0E52               	movlw	low _PED_NS_Count
  3214  00FCBA  6E2A               	movwf	drawtext@_text,c
  3215  00FCBC  0E00               	movlw	high _PED_NS_Count
  3216  00FCBE  6E2B               	movwf	drawtext@_text+1,c
  3217  00FCC0  0EFF               	movlw	255
  3218  00FCC2  6E2D               	movwf	drawtext@color+1,c
  3219  00FCC4  0EE0               	movlw	224
  3220  00FCC6  6E2C               	movwf	drawtext@color,c
  3221  00FCC8  0E00               	movlw	0
  3222  00FCCA  6E2F               	movwf	drawtext@bg+1,c
  3223  00FCCC  0E00               	movlw	0
  3224  00FCCE  6E2E               	movwf	drawtext@bg,c
  3225  00FCD0  0E02               	movlw	2
  3226  00FCD2  6E30               	movwf	drawtext@size,c
  3227  00FCD4  0E02               	movlw	2
  3228  00FCD6  EC2A  F077         	call	_drawtext
  3229                           
  3230                           ;Main_Screen.c: 124: strcpy(txt, "PEW");
  3231  00FCDA  C068  F001         	movff	_txt,strcpy@to
  3232  00FCDE  C069  F002         	movff	_txt+1,strcpy@to+1
  3233  00FCE2  0EF3               	movlw	low STR_11
  3234  00FCE4  6E03               	movwf	strcpy@from,c
  3235  00FCE6  0EFF               	movlw	high STR_11
  3236  00FCE8  6E04               	movwf	strcpy@from+1,c
  3237  00FCEA  EC65  F073         	call	_strcpy	;wreg free
  3238                           
  3239                           ;Main_Screen.c: 125: drawtext(3, 90, txt, 0x07FF, 0x0000, 1);
  3240  00FCEE  0E5A               	movlw	90
  3241  00FCF0  6E29               	movwf	drawtext@y,c
  3242  00FCF2  C068  F02A         	movff	_txt,drawtext@_text
  3243  00FCF6  C069  F02B         	movff	_txt+1,drawtext@_text+1
  3244  00FCFA  0E07               	movlw	7
  3245  00FCFC  6E2D               	movwf	drawtext@color+1,c
  3246  00FCFE  682C               	setf	drawtext@color,c
  3247  00FD00  0E00               	movlw	0
  3248  00FD02  6E2F               	movwf	drawtext@bg+1,c
  3249  00FD04  0E00               	movlw	0
  3250  00FD06  6E2E               	movwf	drawtext@bg,c
  3251  00FD08  0E01               	movlw	1
  3252  00FD0A  6E30               	movwf	drawtext@size,c
  3253  00FD0C  0E03               	movlw	3
  3254  00FD0E  EC2A  F077         	call	_drawtext
  3255                           
  3256                           ;Main_Screen.c: 126: drawtext(2, 100, PED_EW_Count, 0x07FF, 0x0000, 2);
  3257  00FD12  0E64               	movlw	100
  3258  00FD14  6E29               	movwf	drawtext@y,c
  3259  00FD16  0E4F               	movlw	low _PED_EW_Count
  3260  00FD18  6E2A               	movwf	drawtext@_text,c
  3261  00FD1A  0E00               	movlw	high _PED_EW_Count
  3262  00FD1C  6E2B               	movwf	drawtext@_text+1,c
  3263  00FD1E  0E07               	movlw	7
  3264  00FD20  6E2D               	movwf	drawtext@color+1,c
  3265  00FD22  682C               	setf	drawtext@color,c
  3266  00FD24  0E00               	movlw	0
  3267  00FD26  6E2F               	movwf	drawtext@bg+1,c
  3268  00FD28  0E00               	movlw	0
  3269  00FD2A  6E2E               	movwf	drawtext@bg,c
  3270  00FD2C  0E02               	movlw	2
  3271  00FD2E  6E30               	movwf	drawtext@size,c
  3272  00FD30  0E02               	movlw	2
  3273  00FD32  EC2A  F077         	call	_drawtext
  3274                           
  3275                           ;Main_Screen.c: 128: if (1 == 0)
  3276  00FD36  D005               	goto	l3081
  3277                           
  3278                           ;Main_Screen.c: 129: {
  3279                           ;Main_Screen.c: 130: Timing_Txt[0] = 'S';
  3280  00FD38  0E53               	movlw	83
  3281  00FD3A  0100               	movlb	0	; () banked
  3282  00FD3C  6F9F               	movwf	_Timing_Txt& (0+255),b
  3283                           
  3284                           ;Main_Screen.c: 131: Timing_Txt[1] = 'P';
  3285  00FD3E  0E50               	movlw	80
  3286  00FD40  D004               	goto	L1
  3287  00FD42                     l3081:
  3288                           
  3289                           ;Main_Screen.c: 133: else
  3290                           ;Main_Screen.c: 134: {
  3291                           ;Main_Screen.c: 135: Timing_Txt[0] = 'F';
  3292  00FD42  0E46               	movlw	70
  3293  00FD44  0100               	movlb	0	; () banked
  3294  00FD46  6F9F               	movwf	_Timing_Txt& (0+255),b
  3295                           
  3296                           ;Main_Screen.c: 136: Timing_Txt[1] = 'S';
  3297  00FD48  0E53               	movlw	83
  3298  00FD4A                     L1:
  3299  00FD4A  0100               	movlb	0	; () banked
  3300  00FD4C  6FA0               	movwf	(_Timing_Txt+1)& (0+255),b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;Main_Screen.c: 137: }
  3304                           ;Main_Screen.c: 138: Timing_Txt[2] = 24/10 + '0';
  3305  00FD4E  0E32               	movlw	50
  3306  00FD50  0100               	movlb	0	; () banked
  3307  00FD52  6FA1               	movwf	(_Timing_Txt+2)& (0+255),b
  3308                           
  3309                           ;Main_Screen.c: 139: Timing_Txt[3] = 24%10 + '0';
  3310  00FD54  0E34               	movlw	52
  3311  00FD56  0100               	movlb	0	; () banked
  3312  00FD58  6FA2               	movwf	(_Timing_Txt+3)& (0+255),b
  3313                           
  3314                           ;Main_Screen.c: 140: Timing_Txt[5] = 3%10 + '0';
  3315  00FD5A  0E33               	movlw	51
  3316  00FD5C  0100               	movlb	0	; () banked
  3317  00FD5E  6FA4               	movwf	(_Timing_Txt+5)& (0+255),b
  3318                           
  3319                           ;Main_Screen.c: 141: Timing_Txt[7] = 13/10 + '0';
  3320  00FD60  0E31               	movlw	49
  3321  00FD62  0100               	movlb	0	; () banked
  3322  00FD64  6FA6               	movwf	(_Timing_Txt+7)& (0+255),b
  3323                           
  3324                           ;Main_Screen.c: 142: Timing_Txt[8] = 13%10 + '0';
  3325  00FD66  0E33               	movlw	51
  3326  00FD68  0100               	movlb	0	; () banked
  3327  00FD6A  6FA7               	movwf	(_Timing_Txt+8)& (0+255),b
  3328                           
  3329                           ;Main_Screen.c: 143: Timing_Txt[10] = 7 + '0';
  3330  00FD6C  0E37               	movlw	55
  3331  00FD6E  0100               	movlb	0	; () banked
  3332  00FD70  6FA9               	movwf	(_Timing_Txt+10)& (0+255),b
  3333                           
  3334                           ;Main_Screen.c: 144: Timing_Txt[11] = 5 + '0';
  3335  00FD72  0E35               	movlw	53
  3336  00FD74  0100               	movlb	0	; () banked
  3337  00FD76  6FAA               	movwf	(_Timing_Txt+11)& (0+255),b
  3338                           
  3339                           ;Main_Screen.c: 145: Timing_Txt[12] = 8 + '0';
  3340  00FD78  0E38               	movlw	56
  3341  00FD7A  0100               	movlb	0	; () banked
  3342  00FD7C  6FAB               	movwf	(_Timing_Txt+12)& (0+255),b
  3343                           
  3344                           ;Main_Screen.c: 146: Timing_Txt[13] = 5 + '0';
  3345  00FD7E  0E35               	movlw	53
  3346  00FD80  0100               	movlb	0	; () banked
  3347  00FD82  6FAC               	movwf	(_Timing_Txt+13)& (0+255),b
  3348                           
  3349                           ;Main_Screen.c: 147: Timing_Txt[14] = 6 + '0';
  3350  00FD84  0E36               	movlw	54
  3351  00FD86  0100               	movlb	0	; () banked
  3352  00FD88  6FAD               	movwf	(_Timing_Txt+14)& (0+255),b
  3353                           
  3354                           ;Main_Screen.c: 148: Timing_Txt[15] = 5 + '0';
  3355  00FD8A  0E35               	movlw	53
  3356  00FD8C  0100               	movlb	0	; () banked
  3357  00FD8E  6FAE               	movwf	(_Timing_Txt+15)& (0+255),b
  3358                           
  3359                           ;Main_Screen.c: 149: Timing_Txt[17] = 7 + '0';
  3360  00FD90  0E37               	movlw	55
  3361  00FD92  0100               	movlb	0	; () banked
  3362  00FD94  6FB0               	movwf	(_Timing_Txt+17)& (0+255),b
  3363                           
  3364                           ;Main_Screen.c: 150: Timing_Txt[18] = 5 + '0';
  3365  00FD96  0E35               	movlw	53
  3366  00FD98  0100               	movlb	0	; () banked
  3367  00FD9A  6FB1               	movwf	(_Timing_Txt+18)& (0+255),b
  3368                           
  3369                           ;Main_Screen.c: 151: Timing_Txt[19] = 7 + '0';
  3370  00FD9C  0E37               	movlw	55
  3371  00FD9E  0100               	movlb	0	; () banked
  3372  00FDA0  6FB2               	movwf	(_Timing_Txt+19)& (0+255),b
  3373                           
  3374                           ;Main_Screen.c: 152: Timing_Txt[20] = 5 + '0';
  3375  00FDA2  0E35               	movlw	53
  3376  00FDA4  0100               	movlb	0	; () banked
  3377  00FDA6  6FB3               	movwf	(_Timing_Txt+20)& (0+255),b
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;Main_Screen.c: 153: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  3381  00FDA8  0E96               	movlw	150
  3382  00FDAA  6E29               	movwf	drawtext@y,c
  3383  00FDAC  0E9F               	movlw	low _Timing_Txt
  3384  00FDAE  6E2A               	movwf	drawtext@_text,c
  3385  00FDB0  0E00               	movlw	high _Timing_Txt
  3386  00FDB2  6E2B               	movwf	drawtext@_text+1,c
  3387  00FDB4  0EFF               	movlw	255
  3388  00FDB6  6E2D               	movwf	drawtext@color+1,c
  3389  00FDB8  682C               	setf	drawtext@color,c
  3390  00FDBA  0E00               	movlw	0
  3391  00FDBC  6E2F               	movwf	drawtext@bg+1,c
  3392  00FDBE  0E00               	movlw	0
  3393  00FDC0  6E2E               	movwf	drawtext@bg,c
  3394  00FDC2  0E01               	movlw	1
  3395  00FDC4  6E30               	movwf	drawtext@size,c
  3396  00FDC6  0E01               	movlw	1
  3397  00FDC8  EC2A  F077         	call	_drawtext
  3398  00FDCC  0012               	return		;funcret
  3399  00FDCE                     __end_of_Initialize_LCD_Screen:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           prodl	equ	0xFF3
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           postdec1	equ	0xFE5
  3409                           fsr1l	equ	0xFE1
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _strcpy *****************
  3413 ;; Defined at:
  3414 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  to              2    0[COMRAM] PTR unsigned char 
  3417 ;;		 -> NULL(0), buffer(31), 
  3418 ;;  from            2    2[COMRAM] PTR const unsigned char 
  3419 ;;		 -> STR_13(2), STR_12(2), STR_11(4), STR_10(4), 
  3420 ;;		 -> STR_9(7), STR_8(10), STR_7(7), STR_6(12), 
  3421 ;;		 -> STR_5(22), STR_4(2), STR_3(3), STR_2(5), 
  3422 ;;		 -> STR_1(6), 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  cp              2    4[COMRAM] PTR unsigned char 
  3425 ;;		 -> NULL(0), buffer(31), 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  2    0[COMRAM] PTR unsigned char 
  3428 ;; Registers used:
  3429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;Total ram usage:        6 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; This function calls:
  3442 ;;		Nothing
  3443 ;; This function is called by:
  3444 ;;		_Initialize_LCD_Screen
  3445 ;;		_Draw_Star
  3446 ;;		_Erase_Star
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text9
  3451  00E6CA                     __ptext9:
  3452                           	opt stack 0
  3453  00E6CA                     _strcpy:
  3454                           	opt stack 29
  3455                           
  3456                           ;incstack = 0
  3457  00E6CA  C001  F005         	movff	strcpy@to,strcpy@cp
  3458  00E6CE  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  3459  00E6D2  D005               	goto	l2759
  3460  00E6D4                     l2757:
  3461  00E6D4  4A05               	infsnz	strcpy@cp,f,c
  3462  00E6D6  2A06               	incf	strcpy@cp+1,f,c
  3463  00E6D8  4A03               	infsnz	strcpy@from,f,c
  3464  00E6DA  2A04               	incf	strcpy@from+1,f,c
  3465  00E6DC  D000               	goto	l2759
  3466  00E6DE                     l2759:
  3467  00E6DE  C003  FFF6         	movff	strcpy@from,tblptrl
  3468  00E6E2  C004  FFF7         	movff	strcpy@from+1,tblptrh
  3469  00E6E6                     	if	0	;tblptru may be non-zero
  3470  00E6E6                     	endif
  3471  00E6E6                     	if	0	;tblptru may be non-zero
  3472  00E6E6                     	endif
  3473  00E6E6  C005  FFD9         	movff	strcpy@cp,fsr2l
  3474  00E6EA  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  3475  00E6EE  0008               	tblrd		*
  3476  00E6F0  CFF5 FFDF          	movff	tablat,indf2
  3477  00E6F4  50DF               	movf	indf2,w,c
  3478  00E6F6  A4D8               	btfss	status,2,c
  3479  00E6F8  D7ED               	goto	l2757
  3480                           
  3481                           ;	Return value of _strcpy is never used
  3482  00E6FA  0012               	return		;funcret
  3483  00E6FC                     __end_of_strcpy:
  3484                           	opt stack 0
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodl	equ	0xFF3
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           postdec1	equ	0xFE5
  3493                           fsr1l	equ	0xFE1
  3494                           indf2	equ	0xFDF
  3495                           fsr2h	equ	0xFDA
  3496                           fsr2l	equ	0xFD9
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function _fillScreen *****************
  3500 ;; Defined at:
  3501 ;;		line 570 in file "ST7735_TFT.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  color           2   19[COMRAM] unsigned int 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;		None
  3506 ;; Return value:  Size  Location     Type
  3507 ;;		None               void
  3508 ;; Registers used:
  3509 ;;		wreg, status,2, status,0, cstack
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;Total ram usage:        2 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    4
  3522 ;; This function calls:
  3523 ;;		_fillRectangle
  3524 ;; This function is called by:
  3525 ;;		_Initialize_LCD_Screen
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text10
  3530  00E5DC                     __ptext10:
  3531                           	opt stack 0
  3532  00E5DC                     _fillScreen:
  3533                           	opt stack 25
  3534                           
  3535                           ;ST7735_TFT.c: 572: fillRectangle(0, 0, 128, 160, color);
  3536                           
  3537                           ;incstack = 0
  3538  00E5DC  0E00               	movlw	0
  3539  00E5DE  6E08               	movwf	fillRectangle@y,c
  3540  00E5E0  0E80               	movlw	128
  3541  00E5E2  6E09               	movwf	fillRectangle@w,c
  3542  00E5E4  0EA0               	movlw	160
  3543  00E5E6  6E0A               	movwf	fillRectangle@h,c
  3544  00E5E8  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3545  00E5EC  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3546  00E5F0  0E00               	movlw	0
  3547  00E5F2  ECBC  F076         	call	_fillRectangle
  3548  00E5F6  0012               	return		;funcret
  3549  00E5F8                     __end_of_fillScreen:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodl	equ	0xFF3
  3556                           postinc0	equ	0xFEE
  3557                           wreg	equ	0xFE8
  3558                           postdec1	equ	0xFE5
  3559                           fsr1l	equ	0xFE1
  3560                           indf2	equ	0xFDF
  3561                           fsr2h	equ	0xFDA
  3562                           fsr2l	equ	0xFD9
  3563                           status	equ	0xFD8
  3564                           
  3565 ;; *************** function _fillRectangle *****************
  3566 ;; Defined at:
  3567 ;;		line 454 in file "ST7735_TFT.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;  x               1    wreg     unsigned char 
  3570 ;;  y               1    7[COMRAM] unsigned char 
  3571 ;;  w               1    8[COMRAM] unsigned char 
  3572 ;;  h               1    9[COMRAM] unsigned char 
  3573 ;;  color           2   10[COMRAM] unsigned int 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  x               1   18[COMRAM] unsigned char 
  3576 ;;  lo              1   17[COMRAM] unsigned char 
  3577 ;;  hi              1   16[COMRAM] unsigned char 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;		None               void
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3587 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;Total ram usage:       12 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:    3
  3594 ;; This function calls:
  3595 ;;		_setAddrWindow
  3596 ;;		_spiwrite
  3597 ;; This function is called by:
  3598 ;;		_fillScreen
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text11
  3603  00ED78                     __ptext11:
  3604                           	opt stack 0
  3605  00ED78                     _fillRectangle:
  3606                           	opt stack 25
  3607                           
  3608                           ;incstack = 0
  3609                           ;fillRectangle@x stored from wreg
  3610  00ED78  6E13               	movwf	fillRectangle@x,c
  3611                           
  3612                           ;ST7735_TFT.c: 456: unsigned char hi, lo;
  3613                           ;ST7735_TFT.c: 457: if((x >= 128) || (y >= 160))
  3614  00ED7A  0E80               	movlw	128
  3615  00ED7C  6013               	cpfslt	fillRectangle@x,c
  3616  00ED7E  D069               	goto	l330
  3617  00ED80  0E9F               	movlw	159
  3618  00ED82  6408               	cpfsgt	fillRectangle@y,c
  3619  00ED84  D001               	goto	l2605
  3620                           
  3621                           ;ST7735_TFT.c: 458: return;
  3622  00ED86  D065               	goto	l330
  3623  00ED88                     l2605:
  3624                           
  3625                           ;ST7735_TFT.c: 459: if((x + w - 1) >= 128)
  3626  00ED88  0EFF               	movlw	255
  3627  00ED8A  6E0D               	movwf	??_fillRectangle& (0+255),c
  3628  00ED8C  0EFF               	movlw	255
  3629  00ED8E  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3630  00ED90  5009               	movf	fillRectangle@w,w,c
  3631  00ED92  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3632  00ED96  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3633  00ED98  260F               	addwf	??_fillRectangle+2,f,c
  3634  00ED9A  0E00               	movlw	0
  3635  00ED9C  2210               	addwfc	??_fillRectangle+3,f,c
  3636  00ED9E  500D               	movf	??_fillRectangle,w,c
  3637  00EDA0  260F               	addwf	??_fillRectangle+2,f,c
  3638  00EDA2  500E               	movf	??_fillRectangle+1,w,c
  3639  00EDA4  2210               	addwfc	??_fillRectangle+3,f,c
  3640  00EDA6  BE10               	btfsc	??_fillRectangle+3,7,c
  3641  00EDA8  D00A               	goto	l331
  3642  00EDAA  5010               	movf	??_fillRectangle+3,w,c
  3643  00EDAC  E104               	bnz	u1320
  3644  00EDAE  0E80               	movlw	128
  3645  00EDB0  5C0F               	subwf	??_fillRectangle+2,w,c
  3646  00EDB2  A0D8               	btfss	status,0,c
  3647  00EDB4  D004               	goto	l331
  3648  00EDB6                     u1320:
  3649                           
  3650                           ;ST7735_TFT.c: 460: w = 128 - x;
  3651  00EDB6  5013               	movf	fillRectangle@x,w,c
  3652  00EDB8  0800               	sublw	0
  3653  00EDBA  0F80               	addlw	128
  3654  00EDBC  6E09               	movwf	fillRectangle@w,c
  3655  00EDBE                     l331:
  3656                           
  3657                           ;ST7735_TFT.c: 461: if((y + h - 1) >= 160)
  3658  00EDBE  0EFF               	movlw	255
  3659  00EDC0  6E0D               	movwf	??_fillRectangle& (0+255),c
  3660  00EDC2  0EFF               	movlw	255
  3661  00EDC4  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3662  00EDC6  500A               	movf	fillRectangle@h,w,c
  3663  00EDC8  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3664  00EDCC  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3665  00EDCE  260F               	addwf	??_fillRectangle+2,f,c
  3666  00EDD0  0E00               	movlw	0
  3667  00EDD2  2210               	addwfc	??_fillRectangle+3,f,c
  3668  00EDD4  500D               	movf	??_fillRectangle,w,c
  3669  00EDD6  260F               	addwf	??_fillRectangle+2,f,c
  3670  00EDD8  500E               	movf	??_fillRectangle+1,w,c
  3671  00EDDA  2210               	addwfc	??_fillRectangle+3,f,c
  3672  00EDDC  BE10               	btfsc	??_fillRectangle+3,7,c
  3673  00EDDE  D00B               	goto	l2611
  3674  00EDE0  5010               	movf	??_fillRectangle+3,w,c
  3675  00EDE2  E104               	bnz	u1330
  3676  00EDE4  0EA0               	movlw	160
  3677  00EDE6  5C0F               	subwf	??_fillRectangle+2,w,c
  3678  00EDE8  A0D8               	btfss	status,0,c
  3679  00EDEA  D005               	goto	l2611
  3680  00EDEC                     u1330:
  3681                           
  3682                           ;ST7735_TFT.c: 462: h = 160 - y;
  3683  00EDEC  5008               	movf	fillRectangle@y,w,c
  3684  00EDEE  0800               	sublw	0
  3685  00EDF0  0FA0               	addlw	160
  3686  00EDF2  6E0A               	movwf	fillRectangle@h,c
  3687  00EDF4  D000               	goto	l2611
  3688  00EDF6                     l2611:
  3689                           
  3690                           ;ST7735_TFT.c: 463: setAddrWindow(x, y, x+w-1, y+h-1);
  3691  00EDF6  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3692  00EDFA  5013               	movf	fillRectangle@x,w,c
  3693  00EDFC  2409               	addwf	fillRectangle@w,w,c
  3694  00EDFE  6E0D               	movwf	??_fillRectangle& (0+255),c
  3695  00EE00  040D               	decf	??_fillRectangle,w,c
  3696  00EE02  6E05               	movwf	setAddrWindow@x1,c
  3697  00EE04  5008               	movf	fillRectangle@y,w,c
  3698  00EE06  240A               	addwf	fillRectangle@h,w,c
  3699  00EE08  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3700  00EE0A  040E               	decf	??_fillRectangle+1,w,c
  3701  00EE0C  6E06               	movwf	setAddrWindow@y1,c
  3702  00EE0E  5013               	movf	fillRectangle@x,w,c
  3703  00EE10  ECFF  F073         	call	_setAddrWindow
  3704                           
  3705                           ;ST7735_TFT.c: 464: hi = color >> 8; lo = color;
  3706  00EE14  500C               	movf	fillRectangle@color+1,w,c
  3707  00EE16  6E11               	movwf	fillRectangle@hi,c
  3708  00EE18  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3709                           
  3710                           ;ST7735_TFT.c: 465: PORTDbits.RD2 = 1;
  3711  00EE1C  8483               	bsf	3971,2,c	;volatile
  3712                           
  3713                           ;ST7735_TFT.c: 466: PORTDbits.RD3 = 0;
  3714  00EE1E  9683               	bcf	3971,3,c	;volatile
  3715                           
  3716                           ;ST7735_TFT.c: 468: for(y=h; y>0; y--) {
  3717  00EE20  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3718  00EE24                     l2623:
  3719  00EE24  5008               	movf	fillRectangle@y,w,c
  3720  00EE26  B4D8               	btfsc	status,2,c
  3721  00EE28  D013               	goto	l334
  3722  00EE2A  D001               	goto	l333
  3723  00EE2C  D011               	goto	l334
  3724  00EE2E                     l333:
  3725                           
  3726                           ;ST7735_TFT.c: 469: for(x = w; x > 0; x--) {
  3727  00EE2E  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3728  00EE32                     l2627:
  3729  00EE32  5013               	movf	fillRectangle@x,w,c
  3730  00EE34  B4D8               	btfsc	status,2,c
  3731  00EE36  D00A               	goto	l2637
  3732  00EE38  D001               	goto	l2631
  3733  00EE3A  D008               	goto	l2637
  3734  00EE3C                     l2631:
  3735                           
  3736                           ;ST7735_TFT.c: 470: spiwrite(hi);
  3737  00EE3C  5011               	movf	fillRectangle@hi,w,c
  3738  00EE3E  ECD9  F072         	call	_spiwrite
  3739                           
  3740                           ;ST7735_TFT.c: 471: spiwrite(lo);
  3741  00EE42  5012               	movf	fillRectangle@lo,w,c
  3742  00EE44  ECD9  F072         	call	_spiwrite
  3743  00EE48  0613               	decf	fillRectangle@x,f,c
  3744  00EE4A  D7F3               	goto	l2627
  3745  00EE4C                     l2637:
  3746  00EE4C  0608               	decf	fillRectangle@y,f,c
  3747  00EE4E  D7EA               	goto	l2623
  3748  00EE50                     l334:
  3749                           
  3750                           ;ST7735_TFT.c: 472: }
  3751                           ;ST7735_TFT.c: 473: }
  3752                           ;ST7735_TFT.c: 474: PORTDbits.RD3 = 1;
  3753  00EE50  8683               	bsf	3971,3,c	;volatile
  3754  00EE52                     l330:
  3755  00EE52  0012               	return		;funcret
  3756  00EE54                     __end_of_fillRectangle:
  3757                           	opt stack 0
  3758                           tblptru	equ	0xFF8
  3759                           tblptrh	equ	0xFF7
  3760                           tblptrl	equ	0xFF6
  3761                           tablat	equ	0xFF5
  3762                           prodl	equ	0xFF3
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           postdec1	equ	0xFE5
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _fillCircle *****************
  3773 ;; Defined at:
  3774 ;;		line 565 in file "ST7735_TFT.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  x0              2   42[COMRAM] int 
  3777 ;;  y0              2   44[COMRAM] int 
  3778 ;;  r               2   46[COMRAM] int 
  3779 ;;  color           2   48[COMRAM] unsigned int 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;		None
  3782 ;; Return value:  Size  Location     Type
  3783 ;;		None               void
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3791 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;Total ram usage:        8 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    5
  3798 ;; This function calls:
  3799 ;;		_drawFastVLine
  3800 ;;		_fillCircleHelper
  3801 ;; This function is called by:
  3802 ;;		_Initialize_LCD_Screen
  3803 ;;		_update_LCD_color
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text12
  3808  00E89E                     __ptext12:
  3809                           	opt stack 0
  3810  00E89E                     _fillCircle:
  3811                           	opt stack 24
  3812                           
  3813                           ;ST7735_TFT.c: 567: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3814                           
  3815                           ;incstack = 0
  3816  00E89E  502F               	movf	fillCircle@r,w,c
  3817  00E8A0  0800               	sublw	0
  3818  00E8A2  242D               	addwf	fillCircle@y0,w,c
  3819  00E8A4  6E08               	movwf	drawFastVLine@y,c
  3820  00E8A6  80D8               	bsf	status,0,c
  3821  00E8A8  342F               	rlcf	fillCircle@r,w,c
  3822  00E8AA  6E09               	movwf	drawFastVLine@h,c
  3823  00E8AC  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  3824  00E8B0  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3825  00E8B4  502B               	movf	fillCircle@x0,w,c
  3826  00E8B6  ECCA  F075         	call	_drawFastVLine
  3827                           
  3828                           ;ST7735_TFT.c: 568: fillCircleHelper(x0, y0, r, 3, 0, color);
  3829  00E8BA  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  3830  00E8BE  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3831  00E8C2  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  3832  00E8C6  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3833  00E8CA  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  3834  00E8CE  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3835  00E8D2  0E00               	movlw	0
  3836  00E8D4  6E1A               	movwf	fillCircleHelper@cornername+1,c
  3837  00E8D6  0E03               	movlw	3
  3838  00E8D8  6E19               	movwf	fillCircleHelper@cornername,c
  3839  00E8DA  0E00               	movlw	0
  3840  00E8DC  6E1C               	movwf	fillCircleHelper@delta+1,c
  3841  00E8DE  0E00               	movlw	0
  3842  00E8E0  6E1B               	movwf	fillCircleHelper@delta,c
  3843  00E8E2  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  3844  00E8E6  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3845  00E8EA  EC0B  F079         	call	_fillCircleHelper	;wreg free
  3846  00E8EE  0012               	return		;funcret
  3847  00E8F0                     __end_of_fillCircle:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodl	equ	0xFF3
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           postdec1	equ	0xFE5
  3857                           fsr1l	equ	0xFE1
  3858                           indf2	equ	0xFDF
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _fillCircleHelper *****************
  3864 ;; Defined at:
  3865 ;;		line 540 in file "ST7735_TFT.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  x0              2   18[COMRAM] int 
  3868 ;;  y0              2   20[COMRAM] int 
  3869 ;;  r               2   22[COMRAM] int 
  3870 ;;  cornername      2   24[COMRAM] unsigned int 
  3871 ;;  delta           2   26[COMRAM] int 
  3872 ;;  color           2   28[COMRAM] unsigned int 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  y               2   40[COMRAM] int 
  3875 ;;  x               2   38[COMRAM] int 
  3876 ;;  f               2   36[COMRAM] int 
  3877 ;;  ddF_y           2   34[COMRAM] int 
  3878 ;;  ddF_x           2   32[COMRAM] int 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3888 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;Total ram usage:       24 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    4
  3895 ;; This function calls:
  3896 ;;		_drawFastVLine
  3897 ;; This function is called by:
  3898 ;;		_fillCircle
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text13
  3903  00F216                     __ptext13:
  3904                           	opt stack 0
  3905  00F216                     _fillCircleHelper:
  3906                           	opt stack 24
  3907                           
  3908                           ;ST7735_TFT.c: 542: signed int f, ddF_x, ddF_y, x, y;
  3909                           ;ST7735_TFT.c: 543: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3910                           
  3911                           ;incstack = 0
  3912  00F216  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3913  00F21A  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3914  00F21E  1E1F               	comf	??_fillCircleHelper,f,c
  3915  00F220  1E20               	comf	??_fillCircleHelper+1,f,c
  3916  00F222  4A1F               	infsnz	??_fillCircleHelper,f,c
  3917  00F224  2A20               	incf	??_fillCircleHelper+1,f,c
  3918  00F226  0E01               	movlw	1
  3919  00F228  241F               	addwf	??_fillCircleHelper,w,c
  3920  00F22A  6E25               	movwf	fillCircleHelper@f,c
  3921  00F22C  0E00               	movlw	0
  3922  00F22E  2020               	addwfc	??_fillCircleHelper+1,w,c
  3923  00F230  6E26               	movwf	fillCircleHelper@f+1,c
  3924  00F232  0E00               	movlw	0
  3925  00F234  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  3926  00F236  0E01               	movlw	1
  3927  00F238  6E21               	movwf	fillCircleHelper@ddF_x,c
  3928  00F23A  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3929  00F23E  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3930  00F242  90D8               	bcf	status,0,c
  3931  00F244  361F               	rlcf	??_fillCircleHelper,f,c
  3932  00F246  3620               	rlcf	??_fillCircleHelper+1,f,c
  3933  00F248  1E1F               	comf	??_fillCircleHelper,f,c
  3934  00F24A  1E20               	comf	??_fillCircleHelper+1,f,c
  3935  00F24C  4A1F               	infsnz	??_fillCircleHelper,f,c
  3936  00F24E  2A20               	incf	??_fillCircleHelper+1,f,c
  3937  00F250  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3938  00F254  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3939  00F258  0E00               	movlw	0
  3940  00F25A  6E28               	movwf	fillCircleHelper@x+1,c
  3941  00F25C  0E00               	movlw	0
  3942  00F25E  6E27               	movwf	fillCircleHelper@x,c
  3943  00F260  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  3944  00F264  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3945                           
  3946                           ;ST7735_TFT.c: 544: while (x<y) {
  3947  00F268  D067               	goto	l2671
  3948  00F26A                     l2651:
  3949                           
  3950                           ;ST7735_TFT.c: 545: if (f >= 0) {
  3951  00F26A  BE26               	btfsc	fillCircleHelper@f+1,7,c
  3952  00F26C  D00B               	goto	l359
  3953                           
  3954                           ;ST7735_TFT.c: 546: y--;
  3955  00F26E  0629               	decf	fillCircleHelper@y,f,c
  3956  00F270  A0D8               	btfss	status,0,c
  3957  00F272  062A               	decf	fillCircleHelper@y+1,f,c
  3958                           
  3959                           ;ST7735_TFT.c: 547: ddF_y += 2;
  3960  00F274  0E02               	movlw	2
  3961  00F276  2623               	addwf	fillCircleHelper@ddF_y,f,c
  3962  00F278  0E00               	movlw	0
  3963  00F27A  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3964                           
  3965                           ;ST7735_TFT.c: 548: f += ddF_y;
  3966  00F27C  5023               	movf	fillCircleHelper@ddF_y,w,c
  3967  00F27E  2625               	addwf	fillCircleHelper@f,f,c
  3968  00F280  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  3969  00F282  2226               	addwfc	fillCircleHelper@f+1,f,c
  3970  00F284                     l359:
  3971                           
  3972                           ;ST7735_TFT.c: 549: }
  3973                           ;ST7735_TFT.c: 550: x++;
  3974  00F284  4A27               	infsnz	fillCircleHelper@x,f,c
  3975  00F286  2A28               	incf	fillCircleHelper@x+1,f,c
  3976                           
  3977                           ;ST7735_TFT.c: 551: ddF_x += 2;
  3978  00F288  0E02               	movlw	2
  3979  00F28A  2621               	addwf	fillCircleHelper@ddF_x,f,c
  3980  00F28C  0E00               	movlw	0
  3981  00F28E  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3982                           
  3983                           ;ST7735_TFT.c: 552: f += ddF_x;
  3984  00F290  5021               	movf	fillCircleHelper@ddF_x,w,c
  3985  00F292  2625               	addwf	fillCircleHelper@f,f,c
  3986  00F294  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  3987  00F296  2226               	addwfc	fillCircleHelper@f+1,f,c
  3988                           
  3989                           ;ST7735_TFT.c: 554: if (cornername & 0x1) {
  3990  00F298  A019               	btfss	fillCircleHelper@cornername,0,c
  3991  00F29A  D025               	goto	l2667
  3992                           
  3993                           ;ST7735_TFT.c: 555: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3994  00F29C  5029               	movf	fillCircleHelper@y,w,c
  3995  00F29E  0800               	sublw	0
  3996  00F2A0  2415               	addwf	fillCircleHelper@y0,w,c
  3997  00F2A2  6E08               	movwf	drawFastVLine@y,c
  3998  00F2A4  5029               	movf	fillCircleHelper@y,w,c
  3999  00F2A6  2429               	addwf	fillCircleHelper@y,w,c
  4000  00F2A8  241B               	addwf	fillCircleHelper@delta,w,c
  4001  00F2AA  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  4002  00F2AC  281F               	incf	??_fillCircleHelper,w,c
  4003  00F2AE  6E09               	movwf	drawFastVLine@h,c
  4004  00F2B0  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  4005  00F2B4  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  4006  00F2B8  5013               	movf	fillCircleHelper@x0,w,c
  4007  00F2BA  2427               	addwf	fillCircleHelper@x,w,c
  4008  00F2BC  ECCA  F075         	call	_drawFastVLine
  4009                           
  4010                           ;ST7735_TFT.c: 556: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  4011  00F2C0  5027               	movf	fillCircleHelper@x,w,c
  4012  00F2C2  0800               	sublw	0
  4013  00F2C4  2415               	addwf	fillCircleHelper@y0,w,c
  4014  00F2C6  6E08               	movwf	drawFastVLine@y,c
  4015  00F2C8  5027               	movf	fillCircleHelper@x,w,c
  4016  00F2CA  2427               	addwf	fillCircleHelper@x,w,c
  4017  00F2CC  241B               	addwf	fillCircleHelper@delta,w,c
  4018  00F2CE  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  4019  00F2D0  281F               	incf	??_fillCircleHelper,w,c
  4020  00F2D2  6E09               	movwf	drawFastVLine@h,c
  4021  00F2D4  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  4022  00F2D8  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  4023  00F2DC  5013               	movf	fillCircleHelper@x0,w,c
  4024  00F2DE  2429               	addwf	fillCircleHelper@y,w,c
  4025  00F2E0  ECCA  F075         	call	_drawFastVLine
  4026  00F2E4  D000               	goto	l2667
  4027  00F2E6                     l2667:
  4028                           
  4029                           ;ST7735_TFT.c: 557: }
  4030                           ;ST7735_TFT.c: 558: if (cornername & 0x2) {
  4031  00F2E6  A219               	btfss	fillCircleHelper@cornername,1,c
  4032  00F2E8  D027               	goto	l2671
  4033                           
  4034                           ;ST7735_TFT.c: 559: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  4035  00F2EA  5029               	movf	fillCircleHelper@y,w,c
  4036  00F2EC  0800               	sublw	0
  4037  00F2EE  2415               	addwf	fillCircleHelper@y0,w,c
  4038  00F2F0  6E08               	movwf	drawFastVLine@y,c
  4039  00F2F2  5029               	movf	fillCircleHelper@y,w,c
  4040  00F2F4  2429               	addwf	fillCircleHelper@y,w,c
  4041  00F2F6  241B               	addwf	fillCircleHelper@delta,w,c
  4042  00F2F8  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  4043  00F2FA  281F               	incf	??_fillCircleHelper,w,c
  4044  00F2FC  6E09               	movwf	drawFastVLine@h,c
  4045  00F2FE  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  4046  00F302  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  4047  00F306  5027               	movf	fillCircleHelper@x,w,c
  4048  00F308  0800               	sublw	0
  4049  00F30A  2413               	addwf	fillCircleHelper@x0,w,c
  4050  00F30C  ECCA  F075         	call	_drawFastVLine
  4051                           
  4052                           ;ST7735_TFT.c: 560: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  4053  00F310  5027               	movf	fillCircleHelper@x,w,c
  4054  00F312  0800               	sublw	0
  4055  00F314  2415               	addwf	fillCircleHelper@y0,w,c
  4056  00F316  6E08               	movwf	drawFastVLine@y,c
  4057  00F318  5027               	movf	fillCircleHelper@x,w,c
  4058  00F31A  2427               	addwf	fillCircleHelper@x,w,c
  4059  00F31C  241B               	addwf	fillCircleHelper@delta,w,c
  4060  00F31E  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  4061  00F320  281F               	incf	??_fillCircleHelper,w,c
  4062  00F322  6E09               	movwf	drawFastVLine@h,c
  4063  00F324  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  4064  00F328  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  4065  00F32C  5029               	movf	fillCircleHelper@y,w,c
  4066  00F32E  0800               	sublw	0
  4067  00F330  2413               	addwf	fillCircleHelper@x0,w,c
  4068  00F332  ECCA  F075         	call	_drawFastVLine
  4069  00F336  D000               	goto	l2671
  4070  00F338                     l2671:
  4071  00F338  5029               	movf	fillCircleHelper@y,w,c
  4072  00F33A  5C27               	subwf	fillCircleHelper@x,w,c
  4073  00F33C  5028               	movf	fillCircleHelper@x+1,w,c
  4074  00F33E  0A80               	xorlw	128
  4075  00F340  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  4076  00F342  502A               	movf	fillCircleHelper@y+1,w,c
  4077  00F344  0A80               	xorlw	128
  4078  00F346  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  4079  00F348  A0D8               	btfss	status,0,c
  4080  00F34A  D78F               	goto	l2651
  4081  00F34C  0012               	return		;funcret
  4082  00F34E                     __end_of_fillCircleHelper:
  4083                           	opt stack 0
  4084                           tblptru	equ	0xFF8
  4085                           tblptrh	equ	0xFF7
  4086                           tblptrl	equ	0xFF6
  4087                           tablat	equ	0xFF5
  4088                           prodl	equ	0xFF3
  4089                           postinc0	equ	0xFEE
  4090                           wreg	equ	0xFE8
  4091                           postdec1	equ	0xFE5
  4092                           fsr1l	equ	0xFE1
  4093                           indf2	equ	0xFDF
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _drawtext *****************
  4099 ;; Defined at:
  4100 ;;		line 425 in file "ST7735_TFT.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  x               1    wreg     unsigned char 
  4103 ;;  y               1   40[COMRAM] unsigned char 
  4104 ;;  _text           2   41[COMRAM] PTR unsigned char 
  4105 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  4106 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  4107 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  4108 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  4109 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  4110 ;;  color           2   43[COMRAM] unsigned int 
  4111 ;;  bg              2   45[COMRAM] unsigned int 
  4112 ;;  size            1   47[COMRAM] unsigned char 
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  x               1   52[COMRAM] unsigned char 
  4115 ;;  i               2   53[COMRAM] unsigned int 
  4116 ;;  textsize        2   50[COMRAM] unsigned int 
  4117 ;;  cursor_x        1   56[COMRAM] unsigned char 
  4118 ;;  cursor_y        1   55[COMRAM] unsigned char 
  4119 ;; Return value:  Size  Location     Type
  4120 ;;		None               void
  4121 ;; Registers used:
  4122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4123 ;; Tracked objects:
  4124 ;;		On entry : 0/0
  4125 ;;		On exit  : 0/0
  4126 ;;		Unchanged: 0/0
  4127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4128 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;Total ram usage:       17 bytes
  4133 ;; Hardware stack levels used:    1
  4134 ;; Hardware stack levels required when called:    6
  4135 ;; This function calls:
  4136 ;;		_drawChar
  4137 ;;		_strlen
  4138 ;; This function is called by:
  4139 ;;		_Initialize_LCD_Screen
  4140 ;;		_update_LCD_PED_Count
  4141 ;;		_update_LCD_count
  4142 ;;		_update_LCD_misc
  4143 ;;		_Draw_Star
  4144 ;;		_Erase_Star
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text14
  4149  00EE54                     __ptext14:
  4150                           	opt stack 0
  4151  00EE54                     _drawtext:
  4152                           	opt stack 23
  4153                           
  4154                           ;incstack = 0
  4155                           ;drawtext@x stored from wreg
  4156  00EE54  6E35               	movwf	drawtext@x,c
  4157                           
  4158                           ;ST7735_TFT.c: 427: unsigned char cursor_x, cursor_y;
  4159                           ;ST7735_TFT.c: 428: unsigned int textsize, i;
  4160                           ;ST7735_TFT.c: 429: cursor_x = x, cursor_y = y;
  4161  00EE56  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  4162  00EE5A  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  4163                           
  4164                           ;ST7735_TFT.c: 430: textsize = strlen(_text);
  4165  00EE5E  C02A  F001         	movff	drawtext@_text,strlen@s
  4166  00EE62  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  4167  00EE66  ECBB  F073         	call	_strlen	;wreg free
  4168  00EE6A  C001  F033         	movff	?_strlen,drawtext@textsize
  4169  00EE6E  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  4170                           
  4171                           ;ST7735_TFT.c: 431: for(i = 0; i < textsize; i++){
  4172  00EE72  0E00               	movlw	0
  4173  00EE74  6E37               	movwf	drawtext@i+1,c
  4174  00EE76  0E00               	movlw	0
  4175  00EE78  6E36               	movwf	drawtext@i,c
  4176  00EE7A  D054               	goto	l2795
  4177  00EE7C                     l2769:
  4178                           
  4179                           ;ST7735_TFT.c: 432: if(wrap && ((cursor_x + size * 5) > 128)){
  4180  00EE7C  503A               	movf	_wrap,w,c
  4181  00EE7E  B4D8               	btfsc	status,2,c
  4182  00EE80  D02C               	goto	l2785
  4183  00EE82  5030               	movf	drawtext@size,w,c
  4184  00EE84  0D05               	mullw	5
  4185  00EE86  5039               	movf	drawtext@cursor_x,w,c
  4186  00EE88  6E31               	movwf	??_drawtext& (0+255),c
  4187  00EE8A  6A32               	clrf	(??_drawtext+1)& (0+255),c
  4188  00EE8C  50F3               	movf	prodl,w,c
  4189  00EE8E  2631               	addwf	??_drawtext,f,c
  4190  00EE90  50F4               	movf	prodh,w,c
  4191  00EE92  2232               	addwfc	??_drawtext+1,f,c
  4192  00EE94  BE32               	btfsc	??_drawtext+1,7,c
  4193  00EE96  D021               	goto	l2785
  4194  00EE98  5032               	movf	??_drawtext+1,w,c
  4195  00EE9A  E104               	bnz	u1560
  4196  00EE9C  0E81               	movlw	129
  4197  00EE9E  5C31               	subwf	??_drawtext,w,c
  4198  00EEA0  A0D8               	btfss	status,0,c
  4199  00EEA2  D01B               	goto	l2785
  4200  00EEA4                     u1560:
  4201                           
  4202                           ;ST7735_TFT.c: 433: cursor_x = 0;
  4203  00EEA4  0E00               	movlw	0
  4204  00EEA6  6E39               	movwf	drawtext@cursor_x,c
  4205                           
  4206                           ;ST7735_TFT.c: 434: cursor_y = cursor_y + size * 7 + 3 ;
  4207  00EEA8  5030               	movf	drawtext@size,w,c
  4208  00EEAA  0D07               	mullw	7
  4209  00EEAC  50F3               	movf	prodl,w,c
  4210  00EEAE  2438               	addwf	drawtext@cursor_y,w,c
  4211  00EEB0  0F03               	addlw	3
  4212  00EEB2  6E38               	movwf	drawtext@cursor_y,c
  4213                           
  4214                           ;ST7735_TFT.c: 435: if(cursor_y > 160) cursor_y = 160;
  4215  00EEB4  0EA0               	movlw	160
  4216  00EEB6  6438               	cpfsgt	drawtext@cursor_y,c
  4217  00EEB8  D003               	goto	l2781
  4218  00EEBA  0EA0               	movlw	160
  4219  00EEBC  6E38               	movwf	drawtext@cursor_y,c
  4220  00EEBE  D000               	goto	l2781
  4221  00EEC0                     l2781:
  4222                           
  4223                           ;ST7735_TFT.c: 436: if(_text[i] == 0x20) goto _skip; }
  4224  00EEC0  5036               	movf	drawtext@i,w,c
  4225  00EEC2  242A               	addwf	drawtext@_text,w,c
  4226  00EEC4  6ED9               	movwf	fsr2l,c
  4227  00EEC6  5037               	movf	drawtext@i+1,w,c
  4228  00EEC8  202B               	addwfc	drawtext@_text+1,w,c
  4229  00EECA  6EDA               	movwf	fsr2h,c
  4230  00EECC  0E20               	movlw	32
  4231  00EECE  18DE               	xorwf	postinc2,w,c
  4232  00EED0  B4D8               	btfsc	status,2,c
  4233  00EED2  D025               	goto	l2793
  4234  00EED4  D002               	goto	l2785
  4235  00EED6  D023               	goto	l2793
  4236  00EED8  D000               	goto	l2785
  4237  00EEDA                     l2785:
  4238                           
  4239                           ;ST7735_TFT.c: 437: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4240  00EEDA  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  4241  00EEDE  5036               	movf	drawtext@i,w,c
  4242  00EEE0  242A               	addwf	drawtext@_text,w,c
  4243  00EEE2  6ED9               	movwf	fsr2l,c
  4244  00EEE4  5037               	movf	drawtext@i+1,w,c
  4245  00EEE6  202B               	addwfc	drawtext@_text+1,w,c
  4246  00EEE8  6EDA               	movwf	fsr2h,c
  4247  00EEEA  50DF               	movf	indf2,w,c
  4248  00EEEC  6E1F               	movwf	drawChar@c,c
  4249  00EEEE  C02C  F020         	movff	drawtext@color,drawChar@color
  4250  00EEF2  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  4251  00EEF6  C02E  F022         	movff	drawtext@bg,drawChar@bg
  4252  00EEFA  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  4253  00EEFE  C030  F024         	movff	drawtext@size,drawChar@size
  4254  00EF02  5039               	movf	drawtext@cursor_x,w,c
  4255  00EF04  ECA7  F079         	call	_drawChar
  4256                           
  4257                           ;ST7735_TFT.c: 438: cursor_x = cursor_x + size * 6;
  4258  00EF08  5030               	movf	drawtext@size,w,c
  4259  00EF0A  0D06               	mullw	6
  4260  00EF0C  50F3               	movf	prodl,w,c
  4261  00EF0E  2439               	addwf	drawtext@cursor_x,w,c
  4262  00EF10  6E39               	movwf	drawtext@cursor_x,c
  4263                           
  4264                           ;ST7735_TFT.c: 439: if(cursor_x > 128) cursor_x = 128;
  4265  00EF12  0E80               	movlw	128
  4266  00EF14  6439               	cpfsgt	drawtext@cursor_x,c
  4267  00EF16  D003               	goto	l2793
  4268  00EF18  0E80               	movlw	128
  4269  00EF1A  6E39               	movwf	drawtext@cursor_x,c
  4270  00EF1C  D000               	goto	l2793
  4271  00EF1E                     l2793:
  4272  00EF1E  4A36               	infsnz	drawtext@i,f,c
  4273  00EF20  2A37               	incf	drawtext@i+1,f,c
  4274  00EF22  D000               	goto	l2795
  4275  00EF24                     l2795:
  4276  00EF24  5033               	movf	drawtext@textsize,w,c
  4277  00EF26  5C36               	subwf	drawtext@i,w,c
  4278  00EF28  5034               	movf	drawtext@textsize+1,w,c
  4279  00EF2A  5837               	subwfb	drawtext@i+1,w,c
  4280  00EF2C  A0D8               	btfss	status,0,c
  4281  00EF2E  D7A6               	goto	l2769
  4282  00EF30  0012               	return		;funcret
  4283  00EF32                     __end_of_drawtext:
  4284                           	opt stack 0
  4285                           tblptru	equ	0xFF8
  4286                           tblptrh	equ	0xFF7
  4287                           tblptrl	equ	0xFF6
  4288                           tablat	equ	0xFF5
  4289                           prodh	equ	0xFF4
  4290                           prodl	equ	0xFF3
  4291                           postinc0	equ	0xFEE
  4292                           wreg	equ	0xFE8
  4293                           postdec1	equ	0xFE5
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           fsr2h	equ	0xFDA
  4298                           fsr2l	equ	0xFD9
  4299                           status	equ	0xFD8
  4300                           
  4301 ;; *************** function _strlen *****************
  4302 ;; Defined at:
  4303 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  s               2    0[COMRAM] PTR const unsigned char 
  4306 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  4307 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  4308 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  4309 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  4310 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  4313 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  4314 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  4315 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  4316 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  4317 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  2    0[COMRAM] unsigned int 
  4320 ;; Registers used:
  4321 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:        6 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_drawtext
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text15
  4341  00E776                     __ptext15:
  4342                           	opt stack 0
  4343  00E776                     _strlen:
  4344                           	opt stack 28
  4345                           
  4346                           ;incstack = 0
  4347  00E776  C001  F005         	movff	strlen@s,strlen@cp
  4348  00E77A  C002  F006         	movff	strlen@s+1,strlen@cp+1
  4349  00E77E  D003               	goto	l2595
  4350  00E780                     l2593:
  4351  00E780  4A05               	infsnz	strlen@cp,f,c
  4352  00E782  2A06               	incf	strlen@cp+1,f,c
  4353  00E784  D000               	goto	l2595
  4354  00E786                     l2595:
  4355  00E786  C005  FFD9         	movff	strlen@cp,fsr2l
  4356  00E78A  C006  FFDA         	movff	strlen@cp+1,fsr2h
  4357  00E78E  50DF               	movf	indf2,w,c
  4358  00E790  A4D8               	btfss	status,2,c
  4359  00E792  D7F6               	goto	l2593
  4360  00E794  C001  F003         	movff	strlen@s,??_strlen
  4361  00E798  C002  F004         	movff	strlen@s+1,??_strlen+1
  4362  00E79C  1E03               	comf	??_strlen,f,c
  4363  00E79E  1E04               	comf	??_strlen+1,f,c
  4364  00E7A0  4A03               	infsnz	??_strlen,f,c
  4365  00E7A2  2A04               	incf	??_strlen+1,f,c
  4366  00E7A4  5005               	movf	strlen@cp,w,c
  4367  00E7A6  2403               	addwf	??_strlen,w,c
  4368  00E7A8  6E01               	movwf	?_strlen,c
  4369  00E7AA  5006               	movf	strlen@cp+1,w,c
  4370  00E7AC  2004               	addwfc	??_strlen+1,w,c
  4371  00E7AE  6E02               	movwf	?_strlen+1,c
  4372  00E7B0  D000               	goto	l1119
  4373  00E7B2                     l1119:
  4374  00E7B2  0012               	return		;funcret
  4375  00E7B4                     __end_of_strlen:
  4376                           	opt stack 0
  4377                           tblptru	equ	0xFF8
  4378                           tblptrh	equ	0xFF7
  4379                           tblptrl	equ	0xFF6
  4380                           tablat	equ	0xFF5
  4381                           prodh	equ	0xFF4
  4382                           prodl	equ	0xFF3
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           postdec1	equ	0xFE5
  4386                           fsr1l	equ	0xFE1
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           fsr2h	equ	0xFDA
  4390                           fsr2l	equ	0xFD9
  4391                           status	equ	0xFD8
  4392                           
  4393 ;; *************** function _drawChar *****************
  4394 ;; Defined at:
  4395 ;;		line 398 in file "ST7735_TFT.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  x               1    wreg     unsigned char 
  4398 ;;  y               1   29[COMRAM] unsigned char 
  4399 ;;  c               1   30[COMRAM] unsigned char 
  4400 ;;  color           2   31[COMRAM] unsigned int 
  4401 ;;  bg              2   33[COMRAM] unsigned int 
  4402 ;;  size            1   35[COMRAM] unsigned char 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  x               1   37[COMRAM] unsigned char 
  4405 ;;  line            1   36[COMRAM] unsigned char 
  4406 ;;  i               1   39[COMRAM] unsigned char 
  4407 ;;  j               1   38[COMRAM] unsigned char 
  4408 ;; Return value:  Size  Location     Type
  4409 ;;		None               void
  4410 ;; Registers used:
  4411 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4417 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;Total ram usage:       11 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    5
  4424 ;; This function calls:
  4425 ;;		___wmul
  4426 ;;		_drawPixel
  4427 ;;		_fillRect
  4428 ;; This function is called by:
  4429 ;;		_drawtext
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text16
  4434  00F34E                     __ptext16:
  4435                           	opt stack 0
  4436  00F34E                     _drawChar:
  4437                           	opt stack 23
  4438                           
  4439                           ;incstack = 0
  4440                           ;drawChar@x stored from wreg
  4441  00F34E  6E26               	movwf	drawChar@x,c
  4442                           
  4443                           ;ST7735_TFT.c: 400: char i, j;
  4444                           ;ST7735_TFT.c: 401: if((x >= 128) || (y >= 160))
  4445  00F350  0E80               	movlw	128
  4446  00F352  6026               	cpfslt	drawChar@x,c
  4447  00F354  D0A6               	goto	l293
  4448  00F356  0E9F               	movlw	159
  4449  00F358  641E               	cpfsgt	drawChar@y,c
  4450  00F35A  D001               	goto	l2541
  4451                           
  4452                           ;ST7735_TFT.c: 402: return;
  4453  00F35C  D0A2               	goto	l293
  4454  00F35E                     l2541:
  4455                           
  4456                           ;ST7735_TFT.c: 403: if(size < 1) size = 1;
  4457  00F35E  5024               	movf	drawChar@size,w,c
  4458  00F360  A4D8               	btfss	status,2,c
  4459  00F362  D003               	goto	l2545
  4460  00F364  0E01               	movlw	1
  4461  00F366  6E24               	movwf	drawChar@size,c
  4462  00F368  D000               	goto	l2545
  4463  00F36A                     l2545:
  4464                           
  4465                           ;ST7735_TFT.c: 404: if((c < ' ') || (c > '~'))
  4466  00F36A  0E1F               	movlw	31
  4467  00F36C  641F               	cpfsgt	drawChar@c,c
  4468  00F36E  D004               	goto	l2549
  4469  00F370  0E7E               	movlw	126
  4470  00F372  641F               	cpfsgt	drawChar@c,c
  4471  00F374  D003               	goto	l295
  4472  00F376  D000               	goto	l2549
  4473  00F378                     l2549:
  4474                           
  4475                           ;ST7735_TFT.c: 405: c = '?';
  4476  00F378  0E3F               	movlw	63
  4477  00F37A  6E1F               	movwf	drawChar@c,c
  4478  00F37C                     l295:
  4479                           
  4480                           ;ST7735_TFT.c: 406: for(i=0; i<5; i++ ) {
  4481  00F37C  0E00               	movlw	0
  4482  00F37E  6E28               	movwf	drawChar@i,c
  4483  00F380                     l2551:
  4484  00F380  0E04               	movlw	4
  4485  00F382  6428               	cpfsgt	drawChar@i,c
  4486  00F384  D001               	goto	l2555
  4487  00F386  D08D               	goto	l293
  4488  00F388                     l2555:
  4489                           
  4490                           ;ST7735_TFT.c: 407: unsigned char line;
  4491                           ;ST7735_TFT.c: 408: if(c < 'S')
  4492  00F388  0E53               	movlw	83
  4493  00F38A  601F               	cpfslt	drawChar@c,c
  4494  00F38C  D015               	goto	l2559
  4495                           
  4496                           ;ST7735_TFT.c: 409: line = font[(c - 32)*5 + i];
  4497  00F38E  0EE0               	movlw	224
  4498  00F390  241F               	addwf	drawChar@c,w,c
  4499  00F392  6E01               	movwf	___wmul@multiplier,c
  4500  00F394  6A02               	clrf	___wmul@multiplier+1,c
  4501  00F396  0EFF               	movlw	255
  4502  00F398  2202               	addwfc	___wmul@multiplier+1,f,c
  4503  00F39A  0E00               	movlw	0
  4504  00F39C  6E04               	movwf	___wmul@multiplicand+1,c
  4505  00F39E  0E05               	movlw	5
  4506  00F3A0  6E03               	movwf	___wmul@multiplicand,c
  4507  00F3A2  EC0F  F073         	call	___wmul	;wreg free
  4508  00F3A6  5028               	movf	drawChar@i,w,c
  4509  00F3A8  2601               	addwf	?___wmul,f,c
  4510  00F3AA  0E00               	movlw	0
  4511  00F3AC  2202               	addwfc	?___wmul+1,f,c
  4512  00F3AE  0ECF               	movlw	low _font
  4513  00F3B0  2401               	addwf	?___wmul,w,c
  4514  00F3B2  6EF6               	movwf	tblptrl,c
  4515  00F3B4  0EFD               	movlw	high _font
  4516  00F3B6  D014               	goto	L2
  4517  00F3B8                     l2559:
  4518                           
  4519                           ;ST7735_TFT.c: 410: else
  4520                           ;ST7735_TFT.c: 411: line = font2[(c - 'S')*5 + i];
  4521  00F3B8  0EAD               	movlw	173
  4522  00F3BA  241F               	addwf	drawChar@c,w,c
  4523  00F3BC  6E01               	movwf	___wmul@multiplier,c
  4524  00F3BE  6A02               	clrf	___wmul@multiplier+1,c
  4525  00F3C0  0EFF               	movlw	255
  4526  00F3C2  2202               	addwfc	___wmul@multiplier+1,f,c
  4527  00F3C4  0E00               	movlw	0
  4528  00F3C6  6E04               	movwf	___wmul@multiplicand+1,c
  4529  00F3C8  0E05               	movlw	5
  4530  00F3CA  6E03               	movwf	___wmul@multiplicand,c
  4531  00F3CC  EC0F  F073         	call	___wmul	;wreg free
  4532  00F3D0  5028               	movf	drawChar@i,w,c
  4533  00F3D2  2601               	addwf	?___wmul,f,c
  4534  00F3D4  0E00               	movlw	0
  4535  00F3D6  2202               	addwfc	?___wmul+1,f,c
  4536  00F3D8  0ECE               	movlw	low _font2
  4537  00F3DA  2401               	addwf	?___wmul,w,c
  4538  00F3DC  6EF6               	movwf	tblptrl,c
  4539  00F3DE  0EFE               	movlw	high _font2
  4540  00F3E0                     L2:
  4541  00F3E0  2002               	addwfc	?___wmul+1,w,c
  4542  00F3E2  6EF7               	movwf	tblptrh,c
  4543  00F3E4                     	if	0	;There are less than 3 active tblptr bytes
  4544  00F3E4                     	endif
  4545  00F3E4  0008               	tblrd		*
  4546  00F3E6  CFF5 F025          	movff	tablat,drawChar@line
  4547  00F3EA  D000               	goto	l2561
  4548  00F3EC                     l2561:
  4549                           
  4550                           ;ST7735_TFT.c: 412: for(j=0; j<7; j++, line >>= 1) {
  4551  00F3EC  0E00               	movlw	0
  4552  00F3EE  6E27               	movwf	drawChar@j,c
  4553  00F3F0                     l2563:
  4554  00F3F0  0E06               	movlw	6
  4555  00F3F2  6427               	cpfsgt	drawChar@j,c
  4556  00F3F4  D001               	goto	l302
  4557  00F3F6  D053               	goto	l2587
  4558  00F3F8                     l302:
  4559                           
  4560                           ;ST7735_TFT.c: 413: if(line & 0x01) {
  4561  00F3F8  A025               	btfss	drawChar@line,0,c
  4562  00F3FA  D023               	goto	l2573
  4563                           
  4564                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, color);
  4565  00F3FC  0424               	decf	drawChar@size,w,c
  4566  00F3FE  A4D8               	btfss	status,2,c
  4567  00F400  D00C               	goto	l2571
  4568  00F402  501E               	movf	drawChar@y,w,c
  4569  00F404  2427               	addwf	drawChar@j,w,c
  4570  00F406  6E08               	movwf	drawPixel@y,c
  4571  00F408  C020  F009         	movff	drawChar@color,drawPixel@color
  4572  00F40C  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  4573  00F410  5026               	movf	drawChar@x,w,c
  4574  00F412  2428               	addwf	drawChar@i,w,c
  4575  00F414  EC4D  F073         	call	_drawPixel
  4576  00F418  D03E               	goto	l2581
  4577  00F41A                     l2571:
  4578                           
  4579                           ;ST7735_TFT.c: 415: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4580  00F41A  5027               	movf	drawChar@j,w,c
  4581  00F41C  0224               	mulwf	drawChar@size,c
  4582  00F41E  50F3               	movf	prodl,w,c
  4583  00F420  241E               	addwf	drawChar@y,w,c
  4584  00F422  6E13               	movwf	fillRect@y,c
  4585  00F424  C024  F014         	movff	drawChar@size,fillRect@w
  4586  00F428  C024  F015         	movff	drawChar@size,fillRect@h
  4587  00F42C  C020  F016         	movff	drawChar@color,fillRect@color
  4588  00F430  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  4589  00F434  5028               	movf	drawChar@i,w,c
  4590  00F436  0224               	mulwf	drawChar@size,c
  4591  00F438  50F3               	movf	prodl,w,c
  4592  00F43A  2426               	addwf	drawChar@x,w,c
  4593  00F43C  ECDA  F073         	call	_fillRect
  4594                           
  4595                           ;ST7735_TFT.c: 416: }
  4596  00F440  D02A               	goto	l2581
  4597  00F442                     l2573:
  4598                           
  4599                           ;ST7735_TFT.c: 417: else if(bg != color) {
  4600  00F442  5020               	movf	drawChar@color,w,c
  4601  00F444  1822               	xorwf	drawChar@bg,w,c
  4602  00F446  E104               	bnz	u1250
  4603  00F448  5021               	movf	drawChar@color+1,w,c
  4604  00F44A  1823               	xorwf	drawChar@bg+1,w,c
  4605  00F44C  B4D8               	btfsc	status,2,c
  4606  00F44E  D023               	goto	l2581
  4607  00F450                     u1250:
  4608                           
  4609                           ;ST7735_TFT.c: 418: if(size == 1) drawPixel(x+i, y+j, bg);
  4610  00F450  0424               	decf	drawChar@size,w,c
  4611  00F452  A4D8               	btfss	status,2,c
  4612  00F454  D00C               	goto	l2579
  4613  00F456  501E               	movf	drawChar@y,w,c
  4614  00F458  2427               	addwf	drawChar@j,w,c
  4615  00F45A  6E08               	movwf	drawPixel@y,c
  4616  00F45C  C022  F009         	movff	drawChar@bg,drawPixel@color
  4617  00F460  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  4618  00F464  5026               	movf	drawChar@x,w,c
  4619  00F466  2428               	addwf	drawChar@i,w,c
  4620  00F468  EC4D  F073         	call	_drawPixel
  4621  00F46C  D014               	goto	l2581
  4622  00F46E                     l2579:
  4623                           
  4624                           ;ST7735_TFT.c: 419: else fillRect(x+i*size, y+j*size, size, size, bg);
  4625  00F46E  5027               	movf	drawChar@j,w,c
  4626  00F470  0224               	mulwf	drawChar@size,c
  4627  00F472  50F3               	movf	prodl,w,c
  4628  00F474  241E               	addwf	drawChar@y,w,c
  4629  00F476  6E13               	movwf	fillRect@y,c
  4630  00F478  C024  F014         	movff	drawChar@size,fillRect@w
  4631  00F47C  C024  F015         	movff	drawChar@size,fillRect@h
  4632  00F480  C022  F016         	movff	drawChar@bg,fillRect@color
  4633  00F484  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  4634  00F488  5028               	movf	drawChar@i,w,c
  4635  00F48A  0224               	mulwf	drawChar@size,c
  4636  00F48C  50F3               	movf	prodl,w,c
  4637  00F48E  2426               	addwf	drawChar@x,w,c
  4638  00F490  ECDA  F073         	call	_fillRect
  4639  00F494  D000               	goto	l2581
  4640  00F496                     l2581:
  4641  00F496  2A27               	incf	drawChar@j,f,c
  4642  00F498  90D8               	bcf	status,0,c
  4643  00F49A  3225               	rrcf	drawChar@line,f,c
  4644  00F49C  D7A9               	goto	l2563
  4645  00F49E                     l2587:
  4646  00F49E  2A28               	incf	drawChar@i,f,c
  4647  00F4A0  D76F               	goto	l2551
  4648  00F4A2                     l293:
  4649  00F4A2  0012               	return		;funcret
  4650  00F4A4                     __end_of_drawChar:
  4651                           	opt stack 0
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           prodh	equ	0xFF4
  4657                           prodl	equ	0xFF3
  4658                           postinc0	equ	0xFEE
  4659                           wreg	equ	0xFE8
  4660                           postdec1	equ	0xFE5
  4661                           fsr1l	equ	0xFE1
  4662                           indf2	equ	0xFDF
  4663                           postinc2	equ	0xFDE
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function _fillRect *****************
  4669 ;; Defined at:
  4670 ;;		line 388 in file "ST7735_TFT.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  x               1    wreg     unsigned char 
  4673 ;;  y               1   18[COMRAM] unsigned char 
  4674 ;;  w               1   19[COMRAM] unsigned char 
  4675 ;;  h               1   20[COMRAM] unsigned char 
  4676 ;;  color           2   21[COMRAM] unsigned int 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  x               1   26[COMRAM] unsigned char 
  4679 ;;  i               2   27[COMRAM] int 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;		None               void
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4689 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;Total ram usage:       11 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    4
  4696 ;; This function calls:
  4697 ;;		_drawFastVLine
  4698 ;; This function is called by:
  4699 ;;		_drawChar
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text17
  4704  00E7B4                     __ptext17:
  4705                           	opt stack 0
  4706  00E7B4                     _fillRect:
  4707                           	opt stack 23
  4708                           
  4709                           ;incstack = 0
  4710                           ;fillRect@x stored from wreg
  4711  00E7B4  6E1B               	movwf	fillRect@x,c
  4712                           
  4713                           ;ST7735_TFT.c: 390: signed int i;
  4714                           ;ST7735_TFT.c: 392: for (i = x; i < x + w; i++)
  4715  00E7B6  C01B  F01C         	movff	fillRect@x,fillRect@i
  4716  00E7BA  6A1D               	clrf	fillRect@i+1,c
  4717  00E7BC  D00E               	goto	l2443
  4718  00E7BE                     l2439:
  4719                           
  4720                           ;ST7735_TFT.c: 393: {
  4721                           ;ST7735_TFT.c: 394: drawFastVLine(i, y, h, color);
  4722  00E7BE  C013  F008         	movff	fillRect@y,drawFastVLine@y
  4723  00E7C2  C015  F009         	movff	fillRect@h,drawFastVLine@h
  4724  00E7C6  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  4725  00E7CA  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  4726  00E7CE  501C               	movf	fillRect@i,w,c
  4727  00E7D0  ECCA  F075         	call	_drawFastVLine
  4728  00E7D4  4A1C               	infsnz	fillRect@i,f,c
  4729  00E7D6  2A1D               	incf	fillRect@i+1,f,c
  4730  00E7D8  D000               	goto	l2443
  4731  00E7DA                     l2443:
  4732  00E7DA  5014               	movf	fillRect@w,w,c
  4733  00E7DC  C01B  F018         	movff	fillRect@x,??_fillRect
  4734  00E7E0  6A19               	clrf	(??_fillRect+1)& (0+255),c
  4735  00E7E2  2618               	addwf	??_fillRect,f,c
  4736  00E7E4  0E00               	movlw	0
  4737  00E7E6  2219               	addwfc	??_fillRect+1,f,c
  4738  00E7E8  5018               	movf	??_fillRect,w,c
  4739  00E7EA  5C1C               	subwf	fillRect@i,w,c
  4740  00E7EC  501D               	movf	fillRect@i+1,w,c
  4741  00E7EE  0A80               	xorlw	128
  4742  00E7F0  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  4743  00E7F2  5019               	movf	??_fillRect+1,w,c
  4744  00E7F4  0A80               	xorlw	128
  4745  00E7F6  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4746  00E7F8  A0D8               	btfss	status,0,c
  4747  00E7FA  D7E1               	goto	l2439
  4748  00E7FC  0012               	return		;funcret
  4749  00E7FE                     __end_of_fillRect:
  4750                           	opt stack 0
  4751                           tblptru	equ	0xFF8
  4752                           tblptrh	equ	0xFF7
  4753                           tblptrl	equ	0xFF6
  4754                           tablat	equ	0xFF5
  4755                           prodh	equ	0xFF4
  4756                           prodl	equ	0xFF3
  4757                           postinc0	equ	0xFEE
  4758                           wreg	equ	0xFE8
  4759                           postdec1	equ	0xFE5
  4760                           fsr1l	equ	0xFE1
  4761                           indf2	equ	0xFDF
  4762                           postinc2	equ	0xFDE
  4763                           fsr2h	equ	0xFDA
  4764                           fsr2l	equ	0xFD9
  4765                           status	equ	0xFD8
  4766                           
  4767 ;; *************** function _drawRect *****************
  4768 ;; Defined at:
  4769 ;;		line 636 in file "ST7735_TFT.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;  x               2   18[COMRAM] unsigned int 
  4772 ;;  y               2   20[COMRAM] unsigned int 
  4773 ;;  w               2   22[COMRAM] unsigned int 
  4774 ;;  h               2   24[COMRAM] unsigned int 
  4775 ;;  color           2   26[COMRAM] unsigned int 
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;		None
  4778 ;; Return value:  Size  Location     Type
  4779 ;;		None               void
  4780 ;; Registers used:
  4781 ;;		wreg, status,2, status,0, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4787 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;Total ram usage:       11 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    4
  4794 ;; This function calls:
  4795 ;;		_drawFastHLine
  4796 ;;		_drawFastVLine
  4797 ;; This function is called by:
  4798 ;;		_Initialize_LCD_Screen
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           	psect	text18
  4803  00E952                     __ptext18:
  4804                           	opt stack 0
  4805  00E952                     _drawRect:
  4806                           	opt stack 25
  4807                           
  4808                           ;ST7735_TFT.c: 638: drawFastHLine(x, y, w, color);
  4809                           
  4810                           ;incstack = 0
  4811  00E952  C015  F008         	movff	drawRect@y,drawFastHLine@y
  4812  00E956  C017  F009         	movff	drawRect@w,drawFastHLine@w
  4813  00E95A  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  4814  00E95E  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  4815  00E962  5013               	movf	drawRect@x,w,c
  4816  00E964  EC86  F075         	call	_drawFastHLine
  4817                           
  4818                           ;ST7735_TFT.c: 639: drawFastHLine(x, y + h - 1, w, color);
  4819  00E968  5015               	movf	drawRect@y,w,c
  4820  00E96A  2419               	addwf	drawRect@h,w,c
  4821  00E96C  6E1D               	movwf	??_drawRect& (0+255),c
  4822  00E96E  041D               	decf	??_drawRect,w,c
  4823  00E970  6E08               	movwf	drawFastHLine@y,c
  4824  00E972  C017  F009         	movff	drawRect@w,drawFastHLine@w
  4825  00E976  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  4826  00E97A  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  4827  00E97E  5013               	movf	drawRect@x,w,c
  4828  00E980  EC86  F075         	call	_drawFastHLine
  4829                           
  4830                           ;ST7735_TFT.c: 640: drawFastVLine(x, y, h, color);
  4831  00E984  C015  F008         	movff	drawRect@y,drawFastVLine@y
  4832  00E988  C019  F009         	movff	drawRect@h,drawFastVLine@h
  4833  00E98C  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  4834  00E990  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  4835  00E994  5013               	movf	drawRect@x,w,c
  4836  00E996  ECCA  F075         	call	_drawFastVLine
  4837                           
  4838                           ;ST7735_TFT.c: 641: drawFastVLine(x + w - 1, y, h, color);
  4839  00E99A  C015  F008         	movff	drawRect@y,drawFastVLine@y
  4840  00E99E  C019  F009         	movff	drawRect@h,drawFastVLine@h
  4841  00E9A2  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  4842  00E9A6  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  4843  00E9AA  5013               	movf	drawRect@x,w,c
  4844  00E9AC  2417               	addwf	drawRect@w,w,c
  4845  00E9AE  6E1D               	movwf	??_drawRect& (0+255),c
  4846  00E9B0  041D               	decf	??_drawRect,w,c
  4847  00E9B2  ECCA  F075         	call	_drawFastVLine
  4848  00E9B6  0012               	return		;funcret
  4849  00E9B8                     __end_of_drawRect:
  4850                           	opt stack 0
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           postdec1	equ	0xFE5
  4860                           fsr1l	equ	0xFE1
  4861                           indf2	equ	0xFDF
  4862                           postinc2	equ	0xFDE
  4863                           fsr2h	equ	0xFDA
  4864                           fsr2l	equ	0xFD9
  4865                           status	equ	0xFD8
  4866                           
  4867 ;; *************** function _drawFastVLine *****************
  4868 ;; Defined at:
  4869 ;;		line 367 in file "ST7735_TFT.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  x               1    wreg     unsigned char 
  4872 ;;  y               1    7[COMRAM] unsigned char 
  4873 ;;  h               1    8[COMRAM] unsigned char 
  4874 ;;  color           2    9[COMRAM] unsigned int 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  x               1   17[COMRAM] unsigned char 
  4877 ;;  lo              1   16[COMRAM] unsigned char 
  4878 ;;  hi              1   15[COMRAM] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4888 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4889 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;Total ram usage:       11 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    3
  4895 ;; This function calls:
  4896 ;;		_setAddrWindow
  4897 ;;		_spiwrite
  4898 ;; This function is called by:
  4899 ;;		_fillRect
  4900 ;;		_fillCircleHelper
  4901 ;;		_fillCircle
  4902 ;;		_drawRect
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text19
  4907  00EB94                     __ptext19:
  4908                           	opt stack 0
  4909  00EB94                     _drawFastVLine:
  4910                           	opt stack 24
  4911                           
  4912                           ;incstack = 0
  4913                           ;drawFastVLine@x stored from wreg
  4914  00EB94  6E12               	movwf	drawFastVLine@x,c
  4915                           
  4916                           ;ST7735_TFT.c: 369: unsigned char hi, lo;
  4917                           ;ST7735_TFT.c: 370: if((x >= 128) || (y >= 160))
  4918  00EB96  0E80               	movlw	128
  4919  00EB98  6012               	cpfslt	drawFastVLine@x,c
  4920  00EB9A  D03F               	goto	l277
  4921  00EB9C  0E9F               	movlw	159
  4922  00EB9E  6408               	cpfsgt	drawFastVLine@y,c
  4923  00EBA0  D001               	goto	l2389
  4924                           
  4925                           ;ST7735_TFT.c: 371: return;
  4926  00EBA2  D03B               	goto	l277
  4927  00EBA4                     l2389:
  4928                           
  4929                           ;ST7735_TFT.c: 372: if((y + h - 1) >= 160)
  4930  00EBA4  0EFF               	movlw	255
  4931  00EBA6  6E0C               	movwf	??_drawFastVLine& (0+255),c
  4932  00EBA8  0EFF               	movlw	255
  4933  00EBAA  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4934  00EBAC  5009               	movf	drawFastVLine@h,w,c
  4935  00EBAE  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4936  00EBB2  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4937  00EBB4  260E               	addwf	??_drawFastVLine+2,f,c
  4938  00EBB6  0E00               	movlw	0
  4939  00EBB8  220F               	addwfc	??_drawFastVLine+3,f,c
  4940  00EBBA  500C               	movf	??_drawFastVLine,w,c
  4941  00EBBC  260E               	addwf	??_drawFastVLine+2,f,c
  4942  00EBBE  500D               	movf	??_drawFastVLine+1,w,c
  4943  00EBC0  220F               	addwfc	??_drawFastVLine+3,f,c
  4944  00EBC2  BE0F               	btfsc	??_drawFastVLine+3,7,c
  4945  00EBC4  D00B               	goto	l2393
  4946  00EBC6  500F               	movf	??_drawFastVLine+3,w,c
  4947  00EBC8  E104               	bnz	u1090
  4948  00EBCA  0EA0               	movlw	160
  4949  00EBCC  5C0E               	subwf	??_drawFastVLine+2,w,c
  4950  00EBCE  A0D8               	btfss	status,0,c
  4951  00EBD0  D005               	goto	l2393
  4952  00EBD2                     u1090:
  4953                           
  4954                           ;ST7735_TFT.c: 373: h = 160 - y;
  4955  00EBD2  5008               	movf	drawFastVLine@y,w,c
  4956  00EBD4  0800               	sublw	0
  4957  00EBD6  0FA0               	addlw	160
  4958  00EBD8  6E09               	movwf	drawFastVLine@h,c
  4959  00EBDA  D000               	goto	l2393
  4960  00EBDC                     l2393:
  4961                           
  4962                           ;ST7735_TFT.c: 374: hi = color >> 8; lo = color;
  4963  00EBDC  500B               	movf	drawFastVLine@color+1,w,c
  4964  00EBDE  6E10               	movwf	drawFastVLine@hi,c
  4965  00EBE0  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  4966                           
  4967                           ;ST7735_TFT.c: 375: setAddrWindow(x, y, x, y + h - 1);
  4968  00EBE4  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  4969  00EBE8  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  4970  00EBEC  5008               	movf	drawFastVLine@y,w,c
  4971  00EBEE  2409               	addwf	drawFastVLine@h,w,c
  4972  00EBF0  6E0C               	movwf	??_drawFastVLine& (0+255),c
  4973  00EBF2  040C               	decf	??_drawFastVLine,w,c
  4974  00EBF4  6E06               	movwf	setAddrWindow@y1,c
  4975  00EBF6  5012               	movf	drawFastVLine@x,w,c
  4976  00EBF8  ECFF  F073         	call	_setAddrWindow
  4977                           
  4978                           ;ST7735_TFT.c: 376: PORTDbits.RD2 = 1;
  4979  00EBFC  8483               	bsf	3971,2,c	;volatile
  4980                           
  4981                           ;ST7735_TFT.c: 377: PORTDbits.RD3 = 0;
  4982  00EBFE  9683               	bcf	3971,3,c	;volatile
  4983                           
  4984                           ;ST7735_TFT.c: 379: while (h--) {
  4985  00EC00  D007               	goto	l2405
  4986  00EC02                     l2403:
  4987                           
  4988                           ;ST7735_TFT.c: 380: spiwrite(hi);
  4989  00EC02  5010               	movf	drawFastVLine@hi,w,c
  4990  00EC04  ECD9  F072         	call	_spiwrite
  4991                           
  4992                           ;ST7735_TFT.c: 381: spiwrite(lo);
  4993  00EC08  5011               	movf	drawFastVLine@lo,w,c
  4994  00EC0A  ECD9  F072         	call	_spiwrite
  4995  00EC0E  D000               	goto	l2405
  4996  00EC10                     l2405:
  4997  00EC10  0609               	decf	drawFastVLine@h,f,c
  4998  00EC12  2809               	incf	drawFastVLine@h,w,c
  4999  00EC14  A4D8               	btfss	status,2,c
  5000  00EC16  D7F5               	goto	l2403
  5001                           
  5002                           ;ST7735_TFT.c: 382: }
  5003                           ;ST7735_TFT.c: 383: PORTDbits.RD3 = 1;
  5004  00EC18  8683               	bsf	3971,3,c	;volatile
  5005  00EC1A                     l277:
  5006  00EC1A  0012               	return		;funcret
  5007  00EC1C                     __end_of_drawFastVLine:
  5008                           	opt stack 0
  5009                           tblptru	equ	0xFF8
  5010                           tblptrh	equ	0xFF7
  5011                           tblptrl	equ	0xFF6
  5012                           tablat	equ	0xFF5
  5013                           prodh	equ	0xFF4
  5014                           prodl	equ	0xFF3
  5015                           postinc0	equ	0xFEE
  5016                           wreg	equ	0xFE8
  5017                           postdec1	equ	0xFE5
  5018                           fsr1l	equ	0xFE1
  5019                           indf2	equ	0xFDF
  5020                           postinc2	equ	0xFDE
  5021                           fsr2h	equ	0xFDA
  5022                           fsr2l	equ	0xFD9
  5023                           status	equ	0xFD8
  5024                           
  5025 ;; *************** function _drawFastHLine *****************
  5026 ;; Defined at:
  5027 ;;		line 575 in file "ST7735_TFT.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  x               1    wreg     unsigned char 
  5030 ;;  y               1    7[COMRAM] unsigned char 
  5031 ;;  w               1    8[COMRAM] unsigned char 
  5032 ;;  color           2    9[COMRAM] unsigned int 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  x               1   17[COMRAM] unsigned char 
  5035 ;;  lo              1   16[COMRAM] unsigned char 
  5036 ;;  hi              1   15[COMRAM] unsigned char 
  5037 ;; Return value:  Size  Location     Type
  5038 ;;		None               void
  5039 ;; Registers used:
  5040 ;;		wreg, status,2, status,0, cstack
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5046 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;Total ram usage:       11 bytes
  5051 ;; Hardware stack levels used:    1
  5052 ;; Hardware stack levels required when called:    3
  5053 ;; This function calls:
  5054 ;;		_setAddrWindow
  5055 ;;		_spiwrite
  5056 ;; This function is called by:
  5057 ;;		_drawRect
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text20
  5062  00EB0C                     __ptext20:
  5063                           	opt stack 0
  5064  00EB0C                     _drawFastHLine:
  5065                           	opt stack 25
  5066                           
  5067                           ;incstack = 0
  5068                           ;drawFastHLine@x stored from wreg
  5069  00EB0C  6E12               	movwf	drawFastHLine@x,c
  5070                           
  5071                           ;ST7735_TFT.c: 577: unsigned char hi, lo;
  5072                           ;ST7735_TFT.c: 578: if((x >= 128) || (y >= 160))
  5073  00EB0E  0E80               	movlw	128
  5074  00EB10  6012               	cpfslt	drawFastHLine@x,c
  5075  00EB12  D03F               	goto	l375
  5076  00EB14  0E9F               	movlw	159
  5077  00EB16  6408               	cpfsgt	drawFastHLine@y,c
  5078  00EB18  D001               	goto	l2677
  5079                           
  5080                           ;ST7735_TFT.c: 579: return;
  5081  00EB1A  D03B               	goto	l375
  5082  00EB1C                     l2677:
  5083                           
  5084                           ;ST7735_TFT.c: 580: if((x + w - 1) >= 128)
  5085  00EB1C  0EFF               	movlw	255
  5086  00EB1E  6E0C               	movwf	??_drawFastHLine& (0+255),c
  5087  00EB20  0EFF               	movlw	255
  5088  00EB22  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  5089  00EB24  5009               	movf	drawFastHLine@w,w,c
  5090  00EB26  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  5091  00EB2A  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  5092  00EB2C  260E               	addwf	??_drawFastHLine+2,f,c
  5093  00EB2E  0E00               	movlw	0
  5094  00EB30  220F               	addwfc	??_drawFastHLine+3,f,c
  5095  00EB32  500C               	movf	??_drawFastHLine,w,c
  5096  00EB34  260E               	addwf	??_drawFastHLine+2,f,c
  5097  00EB36  500D               	movf	??_drawFastHLine+1,w,c
  5098  00EB38  220F               	addwfc	??_drawFastHLine+3,f,c
  5099  00EB3A  BE0F               	btfsc	??_drawFastHLine+3,7,c
  5100  00EB3C  D00B               	goto	l2681
  5101  00EB3E  500F               	movf	??_drawFastHLine+3,w,c
  5102  00EB40  E104               	bnz	u1440
  5103  00EB42  0E80               	movlw	128
  5104  00EB44  5C0E               	subwf	??_drawFastHLine+2,w,c
  5105  00EB46  A0D8               	btfss	status,0,c
  5106  00EB48  D005               	goto	l2681
  5107  00EB4A                     u1440:
  5108                           
  5109                           ;ST7735_TFT.c: 581: w = 128 - x;
  5110  00EB4A  5012               	movf	drawFastHLine@x,w,c
  5111  00EB4C  0800               	sublw	0
  5112  00EB4E  0F80               	addlw	128
  5113  00EB50  6E09               	movwf	drawFastHLine@w,c
  5114  00EB52  D000               	goto	l2681
  5115  00EB54                     l2681:
  5116                           
  5117                           ;ST7735_TFT.c: 582: hi = color >> 8; lo = color;
  5118  00EB54  500B               	movf	drawFastHLine@color+1,w,c
  5119  00EB56  6E10               	movwf	drawFastHLine@hi,c
  5120  00EB58  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  5121                           
  5122                           ;ST7735_TFT.c: 583: setAddrWindow(x, y, x + w - 1, y);
  5123  00EB5C  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  5124  00EB60  5012               	movf	drawFastHLine@x,w,c
  5125  00EB62  2409               	addwf	drawFastHLine@w,w,c
  5126  00EB64  6E0C               	movwf	??_drawFastHLine& (0+255),c
  5127  00EB66  040C               	decf	??_drawFastHLine,w,c
  5128  00EB68  6E05               	movwf	setAddrWindow@x1,c
  5129  00EB6A  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  5130  00EB6E  5012               	movf	drawFastHLine@x,w,c
  5131  00EB70  ECFF  F073         	call	_setAddrWindow
  5132                           
  5133                           ;ST7735_TFT.c: 584: PORTDbits.RD2 = 1;
  5134  00EB74  8483               	bsf	3971,2,c	;volatile
  5135                           
  5136                           ;ST7735_TFT.c: 585: PORTDbits.RD3 = 0;
  5137  00EB76  9683               	bcf	3971,3,c	;volatile
  5138                           
  5139                           ;ST7735_TFT.c: 587: while (w--) {
  5140  00EB78  D007               	goto	l2693
  5141  00EB7A                     l2691:
  5142                           
  5143                           ;ST7735_TFT.c: 588: spiwrite(hi);
  5144  00EB7A  5010               	movf	drawFastHLine@hi,w,c
  5145  00EB7C  ECD9  F072         	call	_spiwrite
  5146                           
  5147                           ;ST7735_TFT.c: 589: spiwrite(lo);
  5148  00EB80  5011               	movf	drawFastHLine@lo,w,c
  5149  00EB82  ECD9  F072         	call	_spiwrite
  5150  00EB86  D000               	goto	l2693
  5151  00EB88                     l2693:
  5152  00EB88  0609               	decf	drawFastHLine@w,f,c
  5153  00EB8A  2809               	incf	drawFastHLine@w,w,c
  5154  00EB8C  A4D8               	btfss	status,2,c
  5155  00EB8E  D7F5               	goto	l2691
  5156                           
  5157                           ;ST7735_TFT.c: 590: }
  5158                           ;ST7735_TFT.c: 591: PORTDbits.RD3 = 1;
  5159  00EB90  8683               	bsf	3971,3,c	;volatile
  5160  00EB92                     l375:
  5161  00EB92  0012               	return		;funcret
  5162  00EB94                     __end_of_drawFastHLine:
  5163                           	opt stack 0
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           postinc0	equ	0xFEE
  5171                           wreg	equ	0xFE8
  5172                           postdec1	equ	0xFE5
  5173                           fsr1l	equ	0xFE1
  5174                           indf2	equ	0xFDF
  5175                           postinc2	equ	0xFDE
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180 ;; *************** function _drawCircle *****************
  5181 ;; Defined at:
  5182 ;;		line 479 in file "ST7735_TFT.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;  x0              2   11[COMRAM] int 
  5185 ;;  y0              2   13[COMRAM] int 
  5186 ;;  r               2   15[COMRAM] int 
  5187 ;;  color           2   17[COMRAM] unsigned int 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  y               2   29[COMRAM] int 
  5190 ;;  x               2   27[COMRAM] int 
  5191 ;;  f               2   25[COMRAM] int 
  5192 ;;  ddF_y           2   23[COMRAM] int 
  5193 ;;  ddF_x           2   21[COMRAM] int 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;		None               void
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5203 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;Total ram usage:       20 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    4
  5210 ;; This function calls:
  5211 ;;		_drawPixel
  5212 ;; This function is called by:
  5213 ;;		_Initialize_LCD_Screen
  5214 ;;		_update_LCD_color
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           	psect	text21
  5219  00F4A4                     __ptext21:
  5220                           	opt stack 0
  5221  00F4A4                     _drawCircle:
  5222                           	opt stack 25
  5223                           
  5224                           ;ST7735_TFT.c: 481: signed int f, ddF_x, ddF_y, x, y;
  5225                           ;ST7735_TFT.c: 482: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  5226                           
  5227                           ;incstack = 0
  5228  00F4A4  C010  F014         	movff	drawCircle@r,??_drawCircle
  5229  00F4A8  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  5230  00F4AC  1E14               	comf	??_drawCircle,f,c
  5231  00F4AE  1E15               	comf	??_drawCircle+1,f,c
  5232  00F4B0  4A14               	infsnz	??_drawCircle,f,c
  5233  00F4B2  2A15               	incf	??_drawCircle+1,f,c
  5234  00F4B4  0E01               	movlw	1
  5235  00F4B6  2414               	addwf	??_drawCircle,w,c
  5236  00F4B8  6E1A               	movwf	drawCircle@f,c
  5237  00F4BA  0E00               	movlw	0
  5238  00F4BC  2015               	addwfc	??_drawCircle+1,w,c
  5239  00F4BE  6E1B               	movwf	drawCircle@f+1,c
  5240  00F4C0  0E00               	movlw	0
  5241  00F4C2  6E17               	movwf	drawCircle@ddF_x+1,c
  5242  00F4C4  0E01               	movlw	1
  5243  00F4C6  6E16               	movwf	drawCircle@ddF_x,c
  5244  00F4C8  C010  F014         	movff	drawCircle@r,??_drawCircle
  5245  00F4CC  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  5246  00F4D0  90D8               	bcf	status,0,c
  5247  00F4D2  3614               	rlcf	??_drawCircle,f,c
  5248  00F4D4  3615               	rlcf	??_drawCircle+1,f,c
  5249  00F4D6  1E14               	comf	??_drawCircle,f,c
  5250  00F4D8  1E15               	comf	??_drawCircle+1,f,c
  5251  00F4DA  4A14               	infsnz	??_drawCircle,f,c
  5252  00F4DC  2A15               	incf	??_drawCircle+1,f,c
  5253  00F4DE  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  5254  00F4E2  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  5255  00F4E6  0E00               	movlw	0
  5256  00F4E8  6E1D               	movwf	drawCircle@x+1,c
  5257  00F4EA  0E00               	movlw	0
  5258  00F4EC  6E1C               	movwf	drawCircle@x,c
  5259  00F4EE  C010  F01E         	movff	drawCircle@r,drawCircle@y
  5260  00F4F2  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  5261                           
  5262                           ;ST7735_TFT.c: 483: drawPixel(x0 , y0 + r, color);
  5263  00F4F6  500E               	movf	drawCircle@y0,w,c
  5264  00F4F8  2410               	addwf	drawCircle@r,w,c
  5265  00F4FA  6E08               	movwf	drawPixel@y,c
  5266  00F4FC  C012  F009         	movff	drawCircle@color,drawPixel@color
  5267  00F500  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5268  00F504  500C               	movf	drawCircle@x0,w,c
  5269  00F506  EC4D  F073         	call	_drawPixel
  5270                           
  5271                           ;ST7735_TFT.c: 484: drawPixel(x0 , y0 - r, color);
  5272  00F50A  5010               	movf	drawCircle@r,w,c
  5273  00F50C  0800               	sublw	0
  5274  00F50E  240E               	addwf	drawCircle@y0,w,c
  5275  00F510  6E08               	movwf	drawPixel@y,c
  5276  00F512  C012  F009         	movff	drawCircle@color,drawPixel@color
  5277  00F516  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5278  00F51A  500C               	movf	drawCircle@x0,w,c
  5279  00F51C  EC4D  F073         	call	_drawPixel
  5280                           
  5281                           ;ST7735_TFT.c: 485: drawPixel(x0+r, y0 , color);
  5282  00F520  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  5283  00F524  C012  F009         	movff	drawCircle@color,drawPixel@color
  5284  00F528  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5285  00F52C  500C               	movf	drawCircle@x0,w,c
  5286  00F52E  2410               	addwf	drawCircle@r,w,c
  5287  00F530  EC4D  F073         	call	_drawPixel
  5288                           
  5289                           ;ST7735_TFT.c: 486: drawPixel(x0-r, y0 , color);
  5290  00F534  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  5291  00F538  C012  F009         	movff	drawCircle@color,drawPixel@color
  5292  00F53C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5293  00F540  5010               	movf	drawCircle@r,w,c
  5294  00F542  0800               	sublw	0
  5295  00F544  240C               	addwf	drawCircle@x0,w,c
  5296  00F546  EC4D  F073         	call	_drawPixel
  5297                           
  5298                           ;ST7735_TFT.c: 487: while (x < y) {
  5299  00F54A  D078               	goto	l2845
  5300  00F54C                     l2817:
  5301                           
  5302                           ;ST7735_TFT.c: 488: if (f >= 0) {
  5303  00F54C  BE1B               	btfsc	drawCircle@f+1,7,c
  5304  00F54E  D00B               	goto	l341
  5305                           
  5306                           ;ST7735_TFT.c: 489: y--;
  5307  00F550  061E               	decf	drawCircle@y,f,c
  5308  00F552  A0D8               	btfss	status,0,c
  5309  00F554  061F               	decf	drawCircle@y+1,f,c
  5310                           
  5311                           ;ST7735_TFT.c: 490: ddF_y += 2;
  5312  00F556  0E02               	movlw	2
  5313  00F558  2618               	addwf	drawCircle@ddF_y,f,c
  5314  00F55A  0E00               	movlw	0
  5315  00F55C  2219               	addwfc	drawCircle@ddF_y+1,f,c
  5316                           
  5317                           ;ST7735_TFT.c: 491: f += ddF_y;
  5318  00F55E  5018               	movf	drawCircle@ddF_y,w,c
  5319  00F560  261A               	addwf	drawCircle@f,f,c
  5320  00F562  5019               	movf	drawCircle@ddF_y+1,w,c
  5321  00F564  221B               	addwfc	drawCircle@f+1,f,c
  5322  00F566                     l341:
  5323                           
  5324                           ;ST7735_TFT.c: 492: }
  5325                           ;ST7735_TFT.c: 493: x++;
  5326  00F566  4A1C               	infsnz	drawCircle@x,f,c
  5327  00F568  2A1D               	incf	drawCircle@x+1,f,c
  5328                           
  5329                           ;ST7735_TFT.c: 494: ddF_x += 2;
  5330  00F56A  0E02               	movlw	2
  5331  00F56C  2616               	addwf	drawCircle@ddF_x,f,c
  5332  00F56E  0E00               	movlw	0
  5333  00F570  2217               	addwfc	drawCircle@ddF_x+1,f,c
  5334                           
  5335                           ;ST7735_TFT.c: 495: f += ddF_x;
  5336  00F572  5016               	movf	drawCircle@ddF_x,w,c
  5337  00F574  261A               	addwf	drawCircle@f,f,c
  5338  00F576  5017               	movf	drawCircle@ddF_x+1,w,c
  5339  00F578  221B               	addwfc	drawCircle@f+1,f,c
  5340                           
  5341                           ;ST7735_TFT.c: 496: drawPixel(x0 + x, y0 + y, color);
  5342  00F57A  500E               	movf	drawCircle@y0,w,c
  5343  00F57C  241E               	addwf	drawCircle@y,w,c
  5344  00F57E  6E08               	movwf	drawPixel@y,c
  5345  00F580  C012  F009         	movff	drawCircle@color,drawPixel@color
  5346  00F584  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5347  00F588  500C               	movf	drawCircle@x0,w,c
  5348  00F58A  241C               	addwf	drawCircle@x,w,c
  5349  00F58C  EC4D  F073         	call	_drawPixel
  5350                           
  5351                           ;ST7735_TFT.c: 497: drawPixel(x0 - x, y0 + y, color);
  5352  00F590  500E               	movf	drawCircle@y0,w,c
  5353  00F592  241E               	addwf	drawCircle@y,w,c
  5354  00F594  6E08               	movwf	drawPixel@y,c
  5355  00F596  C012  F009         	movff	drawCircle@color,drawPixel@color
  5356  00F59A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5357  00F59E  501C               	movf	drawCircle@x,w,c
  5358  00F5A0  0800               	sublw	0
  5359  00F5A2  240C               	addwf	drawCircle@x0,w,c
  5360  00F5A4  EC4D  F073         	call	_drawPixel
  5361                           
  5362                           ;ST7735_TFT.c: 498: drawPixel(x0 + x, y0 - y, color);
  5363  00F5A8  501E               	movf	drawCircle@y,w,c
  5364  00F5AA  0800               	sublw	0
  5365  00F5AC  240E               	addwf	drawCircle@y0,w,c
  5366  00F5AE  6E08               	movwf	drawPixel@y,c
  5367  00F5B0  C012  F009         	movff	drawCircle@color,drawPixel@color
  5368  00F5B4  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5369  00F5B8  500C               	movf	drawCircle@x0,w,c
  5370  00F5BA  241C               	addwf	drawCircle@x,w,c
  5371  00F5BC  EC4D  F073         	call	_drawPixel
  5372                           
  5373                           ;ST7735_TFT.c: 499: drawPixel(x0 - x, y0 - y, color);
  5374  00F5C0  501E               	movf	drawCircle@y,w,c
  5375  00F5C2  0800               	sublw	0
  5376  00F5C4  240E               	addwf	drawCircle@y0,w,c
  5377  00F5C6  6E08               	movwf	drawPixel@y,c
  5378  00F5C8  C012  F009         	movff	drawCircle@color,drawPixel@color
  5379  00F5CC  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5380  00F5D0  501C               	movf	drawCircle@x,w,c
  5381  00F5D2  0800               	sublw	0
  5382  00F5D4  240C               	addwf	drawCircle@x0,w,c
  5383  00F5D6  EC4D  F073         	call	_drawPixel
  5384                           
  5385                           ;ST7735_TFT.c: 500: drawPixel(x0 + y, y0 + x, color);
  5386  00F5DA  500E               	movf	drawCircle@y0,w,c
  5387  00F5DC  241C               	addwf	drawCircle@x,w,c
  5388  00F5DE  6E08               	movwf	drawPixel@y,c
  5389  00F5E0  C012  F009         	movff	drawCircle@color,drawPixel@color
  5390  00F5E4  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5391  00F5E8  500C               	movf	drawCircle@x0,w,c
  5392  00F5EA  241E               	addwf	drawCircle@y,w,c
  5393  00F5EC  EC4D  F073         	call	_drawPixel
  5394                           
  5395                           ;ST7735_TFT.c: 501: drawPixel(x0 - y, y0 + x, color);
  5396  00F5F0  500E               	movf	drawCircle@y0,w,c
  5397  00F5F2  241C               	addwf	drawCircle@x,w,c
  5398  00F5F4  6E08               	movwf	drawPixel@y,c
  5399  00F5F6  C012  F009         	movff	drawCircle@color,drawPixel@color
  5400  00F5FA  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5401  00F5FE  501E               	movf	drawCircle@y,w,c
  5402  00F600  0800               	sublw	0
  5403  00F602  240C               	addwf	drawCircle@x0,w,c
  5404  00F604  EC4D  F073         	call	_drawPixel
  5405                           
  5406                           ;ST7735_TFT.c: 502: drawPixel(x0 + y, y0 - x, color);
  5407  00F608  501C               	movf	drawCircle@x,w,c
  5408  00F60A  0800               	sublw	0
  5409  00F60C  240E               	addwf	drawCircle@y0,w,c
  5410  00F60E  6E08               	movwf	drawPixel@y,c
  5411  00F610  C012  F009         	movff	drawCircle@color,drawPixel@color
  5412  00F614  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5413  00F618  500C               	movf	drawCircle@x0,w,c
  5414  00F61A  241E               	addwf	drawCircle@y,w,c
  5415  00F61C  EC4D  F073         	call	_drawPixel
  5416                           
  5417                           ;ST7735_TFT.c: 503: drawPixel(x0 - y, y0 - x, color);
  5418  00F620  501C               	movf	drawCircle@x,w,c
  5419  00F622  0800               	sublw	0
  5420  00F624  240E               	addwf	drawCircle@y0,w,c
  5421  00F626  6E08               	movwf	drawPixel@y,c
  5422  00F628  C012  F009         	movff	drawCircle@color,drawPixel@color
  5423  00F62C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  5424  00F630  501E               	movf	drawCircle@y,w,c
  5425  00F632  0800               	sublw	0
  5426  00F634  240C               	addwf	drawCircle@x0,w,c
  5427  00F636  EC4D  F073         	call	_drawPixel
  5428  00F63A  D000               	goto	l2845
  5429  00F63C                     l2845:
  5430  00F63C  501E               	movf	drawCircle@y,w,c
  5431  00F63E  5C1C               	subwf	drawCircle@x,w,c
  5432  00F640  501D               	movf	drawCircle@x+1,w,c
  5433  00F642  0A80               	xorlw	128
  5434  00F644  6E14               	movwf	??_drawCircle& (0+255),c
  5435  00F646  501F               	movf	drawCircle@y+1,w,c
  5436  00F648  0A80               	xorlw	128
  5437  00F64A  5814               	subwfb	??_drawCircle& (0+255),w,c
  5438  00F64C  A0D8               	btfss	status,0,c
  5439  00F64E  D77E               	goto	l2817
  5440  00F650  0012               	return		;funcret
  5441  00F652                     __end_of_drawCircle:
  5442                           	opt stack 0
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           prodh	equ	0xFF4
  5448                           prodl	equ	0xFF3
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           postdec1	equ	0xFE5
  5452                           fsr1l	equ	0xFE1
  5453                           indf2	equ	0xFDF
  5454                           postinc2	equ	0xFDE
  5455                           fsr2h	equ	0xFDA
  5456                           fsr2l	equ	0xFD9
  5457                           status	equ	0xFD8
  5458                           
  5459 ;; *************** function _drawPixel *****************
  5460 ;; Defined at:
  5461 ;;		line 358 in file "ST7735_TFT.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;  x               1    wreg     unsigned char 
  5464 ;;  y               1    7[COMRAM] unsigned char 
  5465 ;;  color           2    8[COMRAM] unsigned int 
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;  x               1   10[COMRAM] unsigned char 
  5468 ;; Return value:  Size  Location     Type
  5469 ;;		None               void
  5470 ;; Registers used:
  5471 ;;		wreg, status,2, status,0, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5477 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;Total ram usage:        4 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:    3
  5484 ;; This function calls:
  5485 ;;		_setAddrWindow
  5486 ;;		_write_data
  5487 ;; This function is called by:
  5488 ;;		_drawChar
  5489 ;;		_drawCircle
  5490 ;;		_drawCircleHelper
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text22
  5495  00E69A                     __ptext22:
  5496                           	opt stack 0
  5497  00E69A                     _drawPixel:
  5498                           	opt stack 24
  5499                           
  5500                           ;incstack = 0
  5501                           ;drawPixel@x stored from wreg
  5502  00E69A  6E0B               	movwf	drawPixel@x,c
  5503                           
  5504                           ;ST7735_TFT.c: 360: if((x >= 128) || (y >= 160))
  5505  00E69C  0E80               	movlw	128
  5506  00E69E  600B               	cpfslt	drawPixel@x,c
  5507  00E6A0  D013               	goto	l271
  5508  00E6A2  0E9F               	movlw	159
  5509  00E6A4  6408               	cpfsgt	drawPixel@y,c
  5510  00E6A6  D001               	goto	l2431
  5511                           
  5512                           ;ST7735_TFT.c: 361: return;
  5513  00E6A8  D00F               	goto	l271
  5514  00E6AA                     l2431:
  5515                           
  5516                           ;ST7735_TFT.c: 362: setAddrWindow(x,y,x+1,y+1);
  5517  00E6AA  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  5518  00E6AE  280B               	incf	drawPixel@x,w,c
  5519  00E6B0  6E05               	movwf	setAddrWindow@x1,c
  5520  00E6B2  2808               	incf	drawPixel@y,w,c
  5521  00E6B4  6E06               	movwf	setAddrWindow@y1,c
  5522  00E6B6  500B               	movf	drawPixel@x,w,c
  5523  00E6B8  ECFF  F073         	call	_setAddrWindow
  5524                           
  5525                           ;ST7735_TFT.c: 363: write_data(color >> 8);
  5526  00E6BC  500A               	movf	drawPixel@color+1,w,c
  5527  00E6BE  ECBE  F072         	call	_write_data
  5528                           
  5529                           ;ST7735_TFT.c: 364: write_data(color & 0xFF);
  5530  00E6C2  5009               	movf	drawPixel@color,w,c
  5531  00E6C4  ECBE  F072         	call	_write_data
  5532  00E6C8                     l271:
  5533  00E6C8  0012               	return		;funcret
  5534  00E6CA                     __end_of_drawPixel:
  5535                           	opt stack 0
  5536                           tblptru	equ	0xFF8
  5537                           tblptrh	equ	0xFF7
  5538                           tblptrl	equ	0xFF6
  5539                           tablat	equ	0xFF5
  5540                           prodh	equ	0xFF4
  5541                           prodl	equ	0xFF3
  5542                           postinc0	equ	0xFEE
  5543                           wreg	equ	0xFE8
  5544                           postdec1	equ	0xFE5
  5545                           fsr1l	equ	0xFE1
  5546                           indf2	equ	0xFDF
  5547                           postinc2	equ	0xFDE
  5548                           fsr2h	equ	0xFDA
  5549                           fsr2l	equ	0xFD9
  5550                           status	equ	0xFD8
  5551                           
  5552 ;; *************** function _setAddrWindow *****************
  5553 ;; Defined at:
  5554 ;;		line 343 in file "ST7735_TFT.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;  x0              1    wreg     unsigned char 
  5557 ;;  y0              1    3[COMRAM] unsigned char 
  5558 ;;  x1              1    4[COMRAM] unsigned char 
  5559 ;;  y1              1    5[COMRAM] unsigned char 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  x0              1    6[COMRAM] unsigned char 
  5562 ;; Return value:  Size  Location     Type
  5563 ;;		None               void
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0, cstack
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5571 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;Total ram usage:        4 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    2
  5578 ;; This function calls:
  5579 ;;		_write_command
  5580 ;;		_write_data
  5581 ;; This function is called by:
  5582 ;;		_drawPixel
  5583 ;;		_drawFastVLine
  5584 ;;		_fillRectangle
  5585 ;;		_drawFastHLine
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text23
  5590  00E7FE                     __ptext23:
  5591                           	opt stack 0
  5592  00E7FE                     _setAddrWindow:
  5593                           	opt stack 25
  5594                           
  5595                           ;incstack = 0
  5596                           ;setAddrWindow@x0 stored from wreg
  5597  00E7FE  6E07               	movwf	setAddrWindow@x0,c
  5598                           
  5599                           ;ST7735_TFT.c: 345: write_command(0x2A);
  5600  00E800  0E2A               	movlw	42
  5601  00E802  ECB6  F072         	call	_write_command
  5602                           
  5603                           ;ST7735_TFT.c: 346: write_data(0);
  5604  00E806  0E00               	movlw	0
  5605  00E808  ECBE  F072         	call	_write_data
  5606                           
  5607                           ;ST7735_TFT.c: 347: write_data(x0 + colstart);
  5608  00E80C  5007               	movf	setAddrWindow@x0,w,c
  5609  00E80E  2473               	addwf	_colstart,w,c
  5610  00E810  ECBE  F072         	call	_write_data
  5611                           
  5612                           ;ST7735_TFT.c: 348: write_data(0);
  5613  00E814  0E00               	movlw	0
  5614  00E816  ECBE  F072         	call	_write_data
  5615                           
  5616                           ;ST7735_TFT.c: 349: write_data(x1 + colstart);
  5617  00E81A  5005               	movf	setAddrWindow@x1,w,c
  5618  00E81C  2473               	addwf	_colstart,w,c
  5619  00E81E  ECBE  F072         	call	_write_data
  5620                           
  5621                           ;ST7735_TFT.c: 350: write_command(0x2B);
  5622  00E822  0E2B               	movlw	43
  5623  00E824  ECB6  F072         	call	_write_command
  5624                           
  5625                           ;ST7735_TFT.c: 351: write_data(0);
  5626  00E828  0E00               	movlw	0
  5627  00E82A  ECBE  F072         	call	_write_data
  5628                           
  5629                           ;ST7735_TFT.c: 352: write_data(y0 + rowstart);
  5630  00E82E  5004               	movf	setAddrWindow@y0,w,c
  5631  00E830  2476               	addwf	_rowstart,w,c
  5632  00E832  ECBE  F072         	call	_write_data
  5633                           
  5634                           ;ST7735_TFT.c: 353: write_data(0);
  5635  00E836  0E00               	movlw	0
  5636  00E838  ECBE  F072         	call	_write_data
  5637                           
  5638                           ;ST7735_TFT.c: 354: write_data(y1 + rowstart);
  5639  00E83C  5006               	movf	setAddrWindow@y1,w,c
  5640  00E83E  2476               	addwf	_rowstart,w,c
  5641  00E840  ECBE  F072         	call	_write_data
  5642                           
  5643                           ;ST7735_TFT.c: 355: write_command(0x2C);
  5644  00E844  0E2C               	movlw	44
  5645  00E846  ECB6  F072         	call	_write_command
  5646  00E84A  0012               	return		;funcret
  5647  00E84C                     __end_of_setAddrWindow:
  5648                           	opt stack 0
  5649                           tblptru	equ	0xFF8
  5650                           tblptrh	equ	0xFF7
  5651                           tblptrl	equ	0xFF6
  5652                           tablat	equ	0xFF5
  5653                           prodh	equ	0xFF4
  5654                           prodl	equ	0xFF3
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           postdec1	equ	0xFE5
  5658                           fsr1l	equ	0xFE1
  5659                           indf2	equ	0xFDF
  5660                           postinc2	equ	0xFDE
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _TFT_GreenTab_Initialize *****************
  5666 ;; Defined at:
  5667 ;;		line 595 in file "ST7735_TFT.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;		None
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;		None
  5672 ;; Return value:  Size  Location     Type
  5673 ;;		None               void
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;Total ram usage:        0 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    3
  5688 ;; This function calls:
  5689 ;;		_Rcmd1
  5690 ;;		_Rcmd2red
  5691 ;;		_Rcmd3
  5692 ;;		_write_command
  5693 ;;		_write_data
  5694 ;; This function is called by:
  5695 ;;		_Initialize_LCD_Screen
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           	psect	text24
  5700  00E670                     __ptext24:
  5701                           	opt stack 0
  5702  00E670                     _TFT_GreenTab_Initialize:
  5703                           	opt stack 26
  5704                           
  5705                           ;ST7735_TFT.c: 597: PORTDbits.RD3 = 1;
  5706                           
  5707                           ;incstack = 0
  5708  00E670  8683               	bsf	3971,3,c	;volatile
  5709                           
  5710                           ;ST7735_TFT.c: 598: PORTDbits.RD2 = 0;
  5711  00E672  9483               	bcf	3971,2,c	;volatile
  5712                           
  5713                           ;ST7735_TFT.c: 600: SSPSTAT=0x80;
  5714  00E674  0E80               	movlw	128
  5715  00E676  6EC7               	movwf	4039,c	;volatile
  5716                           
  5717                           ;ST7735_TFT.c: 601: SSPCON1=0x30;
  5718  00E678  0E30               	movlw	48
  5719  00E67A  6EC6               	movwf	4038,c	;volatile
  5720                           
  5721                           ;ST7735_TFT.c: 604: Rcmd1();
  5722  00E67C  EC83  F078         	call	_Rcmd1	;wreg free
  5723                           
  5724                           ;ST7735_TFT.c: 605: Rcmd2red();
  5725  00E680  EC9C  F073         	call	_Rcmd2red	;wreg free
  5726                           
  5727                           ;ST7735_TFT.c: 606: Rcmd3();
  5728  00E684  EC0A  F078         	call	_Rcmd3	;wreg free
  5729                           
  5730                           ;ST7735_TFT.c: 607: write_command(0x36);
  5731  00E688  0E36               	movlw	54
  5732  00E68A  ECB6  F072         	call	_write_command
  5733                           
  5734                           ;ST7735_TFT.c: 608: write_data(0xC0);
  5735  00E68E  0EC0               	movlw	192
  5736  00E690  ECBE  F072         	call	_write_data
  5737                           
  5738                           ;ST7735_TFT.c: 609: _tft_type = 1;
  5739  00E694  0E01               	movlw	1
  5740  00E696  6E72               	movwf	__tft_type,c
  5741  00E698  0012               	return		;funcret
  5742  00E69A                     __end_of_TFT_GreenTab_Initialize:
  5743                           	opt stack 0
  5744                           tblptru	equ	0xFF8
  5745                           tblptrh	equ	0xFF7
  5746                           tblptrl	equ	0xFF6
  5747                           tablat	equ	0xFF5
  5748                           prodh	equ	0xFF4
  5749                           prodl	equ	0xFF3
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           postdec1	equ	0xFE5
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           fsr2h	equ	0xFDA
  5757                           fsr2l	equ	0xFD9
  5758                           status	equ	0xFD8
  5759                           
  5760 ;; *************** function _Rcmd3 *****************
  5761 ;; Defined at:
  5762 ;;		line 289 in file "ST7735_TFT.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;		None
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;		None
  5767 ;; Return value:  Size  Location     Type
  5768 ;;		None               void
  5769 ;; Registers used:
  5770 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;Total ram usage:        0 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    2
  5783 ;; This function calls:
  5784 ;;		_delay_ms
  5785 ;;		_write_command
  5786 ;;		_write_data
  5787 ;; This function is called by:
  5788 ;;		_TFT_GreenTab_Initialize
  5789 ;;		_TFT_BlackTab_Initialize
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text25
  5794  00F014                     __ptext25:
  5795                           	opt stack 0
  5796  00F014                     _Rcmd3:
  5797                           	opt stack 26
  5798                           
  5799                           ;ST7735_TFT.c: 291: write_command(0xE0);
  5800                           
  5801                           ;incstack = 0
  5802  00F014  0EE0               	movlw	224
  5803  00F016  ECB6  F072         	call	_write_command
  5804                           
  5805                           ;ST7735_TFT.c: 292: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5806  00F01A  0E02               	movlw	2
  5807  00F01C  ECBE  F072         	call	_write_data
  5808  00F020  0E1C               	movlw	28
  5809  00F022  ECBE  F072         	call	_write_data
  5810  00F026  0E07               	movlw	7
  5811  00F028  ECBE  F072         	call	_write_data
  5812  00F02C  0E12               	movlw	18
  5813  00F02E  ECBE  F072         	call	_write_data
  5814                           
  5815                           ;ST7735_TFT.c: 293: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5816  00F032  0E37               	movlw	55
  5817  00F034  ECBE  F072         	call	_write_data
  5818  00F038  0E32               	movlw	50
  5819  00F03A  ECBE  F072         	call	_write_data
  5820  00F03E  0E29               	movlw	41
  5821  00F040  ECBE  F072         	call	_write_data
  5822  00F044  0E2D               	movlw	45
  5823  00F046  ECBE  F072         	call	_write_data
  5824                           
  5825                           ;ST7735_TFT.c: 294: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5826  00F04A  0E29               	movlw	41
  5827  00F04C  ECBE  F072         	call	_write_data
  5828  00F050  0E25               	movlw	37
  5829  00F052  ECBE  F072         	call	_write_data
  5830  00F056  0E2B               	movlw	43
  5831  00F058  ECBE  F072         	call	_write_data
  5832  00F05C  0E39               	movlw	57
  5833  00F05E  ECBE  F072         	call	_write_data
  5834                           
  5835                           ;ST7735_TFT.c: 295: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5836  00F062  0E00               	movlw	0
  5837  00F064  ECBE  F072         	call	_write_data
  5838  00F068  0E01               	movlw	1
  5839  00F06A  ECBE  F072         	call	_write_data
  5840  00F06E  0E03               	movlw	3
  5841  00F070  ECBE  F072         	call	_write_data
  5842  00F074  0E10               	movlw	16
  5843  00F076  ECBE  F072         	call	_write_data
  5844                           
  5845                           ;ST7735_TFT.c: 296: write_command(0xE1);
  5846  00F07A  0EE1               	movlw	225
  5847  00F07C  ECB6  F072         	call	_write_command
  5848                           
  5849                           ;ST7735_TFT.c: 297: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5850  00F080  0E03               	movlw	3
  5851  00F082  ECBE  F072         	call	_write_data
  5852  00F086  0E1D               	movlw	29
  5853  00F088  ECBE  F072         	call	_write_data
  5854  00F08C  0E07               	movlw	7
  5855  00F08E  ECBE  F072         	call	_write_data
  5856  00F092  0E06               	movlw	6
  5857  00F094  ECBE  F072         	call	_write_data
  5858                           
  5859                           ;ST7735_TFT.c: 298: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5860  00F098  0E2E               	movlw	46
  5861  00F09A  ECBE  F072         	call	_write_data
  5862  00F09E  0E2C               	movlw	44
  5863  00F0A0  ECBE  F072         	call	_write_data
  5864  00F0A4  0E29               	movlw	41
  5865  00F0A6  ECBE  F072         	call	_write_data
  5866  00F0AA  0E2D               	movlw	45
  5867  00F0AC  ECBE  F072         	call	_write_data
  5868                           
  5869                           ;ST7735_TFT.c: 299: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5870  00F0B0  0E2E               	movlw	46
  5871  00F0B2  ECBE  F072         	call	_write_data
  5872  00F0B6  0E2E               	movlw	46
  5873  00F0B8  ECBE  F072         	call	_write_data
  5874  00F0BC  0E37               	movlw	55
  5875  00F0BE  ECBE  F072         	call	_write_data
  5876  00F0C2  0E3F               	movlw	63
  5877  00F0C4  ECBE  F072         	call	_write_data
  5878                           
  5879                           ;ST7735_TFT.c: 300: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5880  00F0C8  0E00               	movlw	0
  5881  00F0CA  ECBE  F072         	call	_write_data
  5882  00F0CE  0E00               	movlw	0
  5883  00F0D0  ECBE  F072         	call	_write_data
  5884  00F0D4  0E02               	movlw	2
  5885  00F0D6  ECBE  F072         	call	_write_data
  5886  00F0DA  0E10               	movlw	16
  5887  00F0DC  ECBE  F072         	call	_write_data
  5888                           
  5889                           ;ST7735_TFT.c: 301: write_command(0x13);
  5890  00F0E0  0E13               	movlw	19
  5891  00F0E2  ECB6  F072         	call	_write_command
  5892                           
  5893                           ;ST7735_TFT.c: 302: delay_ms(10);
  5894  00F0E6  0E00               	movlw	0
  5895  00F0E8  6E08               	movwf	delay_ms@ms+1,c
  5896  00F0EA  0E0A               	movlw	10
  5897  00F0EC  6E07               	movwf	delay_ms@ms,c
  5898  00F0EE  EC26  F074         	call	_delay_ms	;wreg free
  5899                           
  5900                           ;ST7735_TFT.c: 303: write_command(0x29);
  5901  00F0F2  0E29               	movlw	41
  5902  00F0F4  ECB6  F072         	call	_write_command
  5903                           
  5904                           ;ST7735_TFT.c: 304: delay_ms(100);
  5905  00F0F8  0E00               	movlw	0
  5906  00F0FA  6E08               	movwf	delay_ms@ms+1,c
  5907  00F0FC  0E64               	movlw	100
  5908  00F0FE  6E07               	movwf	delay_ms@ms,c
  5909  00F100  EC26  F074         	call	_delay_ms	;wreg free
  5910  00F104  0012               	return		;funcret
  5911  00F106                     __end_of_Rcmd3:
  5912                           	opt stack 0
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           postinc0	equ	0xFEE
  5920                           wreg	equ	0xFE8
  5921                           postdec1	equ	0xFE5
  5922                           fsr1l	equ	0xFE1
  5923                           indf2	equ	0xFDF
  5924                           postinc2	equ	0xFDE
  5925                           fsr2h	equ	0xFDA
  5926                           fsr2l	equ	0xFD9
  5927                           status	equ	0xFD8
  5928                           
  5929 ;; *************** function _Rcmd2red *****************
  5930 ;; Defined at:
  5931 ;;		line 275 in file "ST7735_TFT.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;		None               void
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;Total ram usage:        0 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    2
  5952 ;; This function calls:
  5953 ;;		_write_command
  5954 ;;		_write_data
  5955 ;; This function is called by:
  5956 ;;		_TFT_GreenTab_Initialize
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text26
  5961  00E738                     __ptext26:
  5962                           	opt stack 0
  5963  00E738                     _Rcmd2red:
  5964                           	opt stack 26
  5965                           
  5966                           ;ST7735_TFT.c: 277: write_command(0x2A);
  5967                           
  5968                           ;incstack = 0
  5969  00E738  0E2A               	movlw	42
  5970  00E73A  ECB6  F072         	call	_write_command
  5971                           
  5972                           ;ST7735_TFT.c: 278: write_data(0x00);
  5973  00E73E  0E00               	movlw	0
  5974  00E740  ECBE  F072         	call	_write_data
  5975                           
  5976                           ;ST7735_TFT.c: 279: write_data(0x00);
  5977  00E744  0E00               	movlw	0
  5978  00E746  ECBE  F072         	call	_write_data
  5979                           
  5980                           ;ST7735_TFT.c: 280: write_data(0x00);
  5981  00E74A  0E00               	movlw	0
  5982  00E74C  ECBE  F072         	call	_write_data
  5983                           
  5984                           ;ST7735_TFT.c: 281: write_data(0x7F);
  5985  00E750  0E7F               	movlw	127
  5986  00E752  ECBE  F072         	call	_write_data
  5987                           
  5988                           ;ST7735_TFT.c: 282: write_command(0x2B);
  5989  00E756  0E2B               	movlw	43
  5990  00E758  ECB6  F072         	call	_write_command
  5991                           
  5992                           ;ST7735_TFT.c: 283: write_data(0x00);
  5993  00E75C  0E00               	movlw	0
  5994  00E75E  ECBE  F072         	call	_write_data
  5995                           
  5996                           ;ST7735_TFT.c: 284: write_data(0x00);
  5997  00E762  0E00               	movlw	0
  5998  00E764  ECBE  F072         	call	_write_data
  5999                           
  6000                           ;ST7735_TFT.c: 285: write_data(0x00);
  6001  00E768  0E00               	movlw	0
  6002  00E76A  ECBE  F072         	call	_write_data
  6003                           
  6004                           ;ST7735_TFT.c: 286: write_data(0x9F);
  6005  00E76E  0E9F               	movlw	159
  6006  00E770  ECBE  F072         	call	_write_data
  6007  00E774  0012               	return		;funcret
  6008  00E776                     __end_of_Rcmd2red:
  6009                           	opt stack 0
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           postinc0	equ	0xFEE
  6017                           wreg	equ	0xFE8
  6018                           postdec1	equ	0xFE5
  6019                           fsr1l	equ	0xFE1
  6020                           indf2	equ	0xFDF
  6021                           postinc2	equ	0xFDE
  6022                           fsr2h	equ	0xFDA
  6023                           fsr2l	equ	0xFD9
  6024                           status	equ	0xFD8
  6025                           
  6026 ;; *************** function _Rcmd1 *****************
  6027 ;; Defined at:
  6028 ;;		line 228 in file "ST7735_TFT.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;		None
  6033 ;; Return value:  Size  Location     Type
  6034 ;;		None               void
  6035 ;; Registers used:
  6036 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;Total ram usage:        0 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; Hardware stack levels required when called:    2
  6049 ;; This function calls:
  6050 ;;		_delay_ms
  6051 ;;		_write_command
  6052 ;;		_write_data
  6053 ;; This function is called by:
  6054 ;;		_TFT_GreenTab_Initialize
  6055 ;;		_TFT_BlackTab_Initialize
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           	psect	text27
  6060  00F106                     __ptext27:
  6061                           	opt stack 0
  6062  00F106                     _Rcmd1:
  6063                           	opt stack 26
  6064                           
  6065                           ;ST7735_TFT.c: 230: write_command(0x01);
  6066                           
  6067                           ;incstack = 0
  6068  00F106  0E01               	movlw	1
  6069  00F108  ECB6  F072         	call	_write_command
  6070                           
  6071                           ;ST7735_TFT.c: 231: delay_ms(150);
  6072  00F10C  0E00               	movlw	0
  6073  00F10E  6E08               	movwf	delay_ms@ms+1,c
  6074  00F110  0E96               	movlw	150
  6075  00F112  6E07               	movwf	delay_ms@ms,c
  6076  00F114  EC26  F074         	call	_delay_ms	;wreg free
  6077                           
  6078                           ;ST7735_TFT.c: 232: write_command(0x11);
  6079  00F118  0E11               	movlw	17
  6080  00F11A  ECB6  F072         	call	_write_command
  6081                           
  6082                           ;ST7735_TFT.c: 233: delay_ms(500);
  6083  00F11E  0E01               	movlw	1
  6084  00F120  6E08               	movwf	delay_ms@ms+1,c
  6085  00F122  0EF4               	movlw	244
  6086  00F124  6E07               	movwf	delay_ms@ms,c
  6087  00F126  EC26  F074         	call	_delay_ms	;wreg free
  6088                           
  6089                           ;ST7735_TFT.c: 234: write_command(0xB1);
  6090  00F12A  0EB1               	movlw	177
  6091  00F12C  ECB6  F072         	call	_write_command
  6092                           
  6093                           ;ST7735_TFT.c: 235: write_data(0x01);
  6094  00F130  0E01               	movlw	1
  6095  00F132  ECBE  F072         	call	_write_data
  6096                           
  6097                           ;ST7735_TFT.c: 236: write_data(0x2C);
  6098  00F136  0E2C               	movlw	44
  6099  00F138  ECBE  F072         	call	_write_data
  6100                           
  6101                           ;ST7735_TFT.c: 237: write_data(0x2D);
  6102  00F13C  0E2D               	movlw	45
  6103  00F13E  ECBE  F072         	call	_write_data
  6104                           
  6105                           ;ST7735_TFT.c: 238: write_command(0xB2);
  6106  00F142  0EB2               	movlw	178
  6107  00F144  ECB6  F072         	call	_write_command
  6108                           
  6109                           ;ST7735_TFT.c: 239: write_data(0x01);
  6110  00F148  0E01               	movlw	1
  6111  00F14A  ECBE  F072         	call	_write_data
  6112                           
  6113                           ;ST7735_TFT.c: 240: write_data(0x2C);
  6114  00F14E  0E2C               	movlw	44
  6115  00F150  ECBE  F072         	call	_write_data
  6116                           
  6117                           ;ST7735_TFT.c: 241: write_data(0x2D);
  6118  00F154  0E2D               	movlw	45
  6119  00F156  ECBE  F072         	call	_write_data
  6120                           
  6121                           ;ST7735_TFT.c: 242: write_command(0xB3);
  6122  00F15A  0EB3               	movlw	179
  6123  00F15C  ECB6  F072         	call	_write_command
  6124                           
  6125                           ;ST7735_TFT.c: 243: write_data(0x01);
  6126  00F160  0E01               	movlw	1
  6127  00F162  ECBE  F072         	call	_write_data
  6128                           
  6129                           ;ST7735_TFT.c: 244: write_data(0x2C);
  6130  00F166  0E2C               	movlw	44
  6131  00F168  ECBE  F072         	call	_write_data
  6132                           
  6133                           ;ST7735_TFT.c: 245: write_data(0x2D);
  6134  00F16C  0E2D               	movlw	45
  6135  00F16E  ECBE  F072         	call	_write_data
  6136                           
  6137                           ;ST7735_TFT.c: 246: write_data(0x01);
  6138  00F172  0E01               	movlw	1
  6139  00F174  ECBE  F072         	call	_write_data
  6140                           
  6141                           ;ST7735_TFT.c: 247: write_data(0x2C);
  6142  00F178  0E2C               	movlw	44
  6143  00F17A  ECBE  F072         	call	_write_data
  6144                           
  6145                           ;ST7735_TFT.c: 248: write_data(0x2D);
  6146  00F17E  0E2D               	movlw	45
  6147  00F180  ECBE  F072         	call	_write_data
  6148                           
  6149                           ;ST7735_TFT.c: 249: write_command(0xB4);
  6150  00F184  0EB4               	movlw	180
  6151  00F186  ECB6  F072         	call	_write_command
  6152                           
  6153                           ;ST7735_TFT.c: 250: write_data(0x07);
  6154  00F18A  0E07               	movlw	7
  6155  00F18C  ECBE  F072         	call	_write_data
  6156                           
  6157                           ;ST7735_TFT.c: 251: write_command(0xC0);
  6158  00F190  0EC0               	movlw	192
  6159  00F192  ECB6  F072         	call	_write_command
  6160                           
  6161                           ;ST7735_TFT.c: 252: write_data(0xA2);
  6162  00F196  0EA2               	movlw	162
  6163  00F198  ECBE  F072         	call	_write_data
  6164                           
  6165                           ;ST7735_TFT.c: 253: write_data(0x02);
  6166  00F19C  0E02               	movlw	2
  6167  00F19E  ECBE  F072         	call	_write_data
  6168                           
  6169                           ;ST7735_TFT.c: 254: write_data(0x84);
  6170  00F1A2  0E84               	movlw	132
  6171  00F1A4  ECBE  F072         	call	_write_data
  6172                           
  6173                           ;ST7735_TFT.c: 255: write_command(0xC1);
  6174  00F1A8  0EC1               	movlw	193
  6175  00F1AA  ECB6  F072         	call	_write_command
  6176                           
  6177                           ;ST7735_TFT.c: 256: write_data(0xC5);
  6178  00F1AE  0EC5               	movlw	197
  6179  00F1B0  ECBE  F072         	call	_write_data
  6180                           
  6181                           ;ST7735_TFT.c: 257: write_command(0xC2);
  6182  00F1B4  0EC2               	movlw	194
  6183  00F1B6  ECB6  F072         	call	_write_command
  6184                           
  6185                           ;ST7735_TFT.c: 258: write_data(0x0A);
  6186  00F1BA  0E0A               	movlw	10
  6187  00F1BC  ECBE  F072         	call	_write_data
  6188                           
  6189                           ;ST7735_TFT.c: 259: write_data(0x00);
  6190  00F1C0  0E00               	movlw	0
  6191  00F1C2  ECBE  F072         	call	_write_data
  6192                           
  6193                           ;ST7735_TFT.c: 260: write_command(0xC3);
  6194  00F1C6  0EC3               	movlw	195
  6195  00F1C8  ECB6  F072         	call	_write_command
  6196                           
  6197                           ;ST7735_TFT.c: 261: write_data(0x8A);
  6198  00F1CC  0E8A               	movlw	138
  6199  00F1CE  ECBE  F072         	call	_write_data
  6200                           
  6201                           ;ST7735_TFT.c: 262: write_data(0x2A);
  6202  00F1D2  0E2A               	movlw	42
  6203  00F1D4  ECBE  F072         	call	_write_data
  6204                           
  6205                           ;ST7735_TFT.c: 263: write_command(0xC4);
  6206  00F1D8  0EC4               	movlw	196
  6207  00F1DA  ECB6  F072         	call	_write_command
  6208                           
  6209                           ;ST7735_TFT.c: 264: write_data(0x8A);
  6210  00F1DE  0E8A               	movlw	138
  6211  00F1E0  ECBE  F072         	call	_write_data
  6212                           
  6213                           ;ST7735_TFT.c: 265: write_data(0xEE);
  6214  00F1E4  0EEE               	movlw	238
  6215  00F1E6  ECBE  F072         	call	_write_data
  6216                           
  6217                           ;ST7735_TFT.c: 266: write_command(0xC5);
  6218  00F1EA  0EC5               	movlw	197
  6219  00F1EC  ECB6  F072         	call	_write_command
  6220                           
  6221                           ;ST7735_TFT.c: 267: write_data(0x0E);
  6222  00F1F0  0E0E               	movlw	14
  6223  00F1F2  ECBE  F072         	call	_write_data
  6224                           
  6225                           ;ST7735_TFT.c: 268: write_command(0x20);
  6226  00F1F6  0E20               	movlw	32
  6227  00F1F8  ECB6  F072         	call	_write_command
  6228                           
  6229                           ;ST7735_TFT.c: 269: write_command(0x36);
  6230  00F1FC  0E36               	movlw	54
  6231  00F1FE  ECB6  F072         	call	_write_command
  6232                           
  6233                           ;ST7735_TFT.c: 270: write_data(0xC8);
  6234  00F202  0EC8               	movlw	200
  6235  00F204  ECBE  F072         	call	_write_data
  6236                           
  6237                           ;ST7735_TFT.c: 271: write_command(0x3A);
  6238  00F208  0E3A               	movlw	58
  6239  00F20A  ECB6  F072         	call	_write_command
  6240                           
  6241                           ;ST7735_TFT.c: 272: write_data(0x05);
  6242  00F20E  0E05               	movlw	5
  6243  00F210  ECBE  F072         	call	_write_data
  6244  00F214  0012               	return		;funcret
  6245  00F216                     __end_of_Rcmd1:
  6246                           	opt stack 0
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           prodh	equ	0xFF4
  6252                           prodl	equ	0xFF3
  6253                           postinc0	equ	0xFEE
  6254                           wreg	equ	0xFE8
  6255                           postdec1	equ	0xFE5
  6256                           fsr1l	equ	0xFE1
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           
  6263 ;; *************** function _write_data *****************
  6264 ;; Defined at:
  6265 ;;		line 156 in file "ST7735_TFT.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  data_           1    wreg     unsigned char 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  data_           1    2[COMRAM] unsigned char 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;		None               void
  6272 ;; Registers used:
  6273 ;;		wreg, status,2, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;Total ram usage:        1 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    1
  6286 ;; This function calls:
  6287 ;;		_spiwrite
  6288 ;; This function is called by:
  6289 ;;		_Rcmd1
  6290 ;;		_Rcmd2red
  6291 ;;		_Rcmd3
  6292 ;;		_setAddrWindow
  6293 ;;		_drawPixel
  6294 ;;		_TFT_GreenTab_Initialize
  6295 ;;		_Bcmd
  6296 ;;		_setScrollDefinition
  6297 ;;		_Rcmd2green
  6298 ;;		_VerticalScroll
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text28
  6303  00E57C                     __ptext28:
  6304                           	opt stack 0
  6305  00E57C                     _write_data:
  6306                           	opt stack 25
  6307                           
  6308                           ;incstack = 0
  6309                           ;write_data@data_ stored from wreg
  6310  00E57C  6E03               	movwf	write_data@data_,c
  6311                           
  6312                           ;ST7735_TFT.c: 158: PORTDbits.RD3 = 0;
  6313  00E57E  9683               	bcf	3971,3,c	;volatile
  6314                           
  6315                           ;ST7735_TFT.c: 159: PORTDbits.RD2 = 1;
  6316  00E580  8483               	bsf	3971,2,c	;volatile
  6317                           
  6318                           ;ST7735_TFT.c: 160: spiwrite(data_);
  6319  00E582  5003               	movf	write_data@data_,w,c
  6320  00E584  ECD9  F072         	call	_spiwrite
  6321                           
  6322                           ;ST7735_TFT.c: 161: PORTDbits.RD3 = 1;
  6323  00E588  8683               	bsf	3971,3,c	;volatile
  6324  00E58A  0012               	return		;funcret
  6325  00E58C                     __end_of_write_data:
  6326                           	opt stack 0
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           postinc0	equ	0xFEE
  6334                           wreg	equ	0xFE8
  6335                           postdec1	equ	0xFE5
  6336                           fsr1l	equ	0xFE1
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           fsr2h	equ	0xFDA
  6340                           fsr2l	equ	0xFD9
  6341                           status	equ	0xFD8
  6342                           
  6343 ;; *************** function _write_command *****************
  6344 ;; Defined at:
  6345 ;;		line 145 in file "ST7735_TFT.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  cmd_            1    wreg     unsigned char 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  cmd_            1    2[COMRAM] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;		None               void
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, cstack
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;Total ram usage:        1 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    1
  6366 ;; This function calls:
  6367 ;;		_spiwrite
  6368 ;; This function is called by:
  6369 ;;		_Rcmd1
  6370 ;;		_Rcmd2red
  6371 ;;		_Rcmd3
  6372 ;;		_setAddrWindow
  6373 ;;		_TFT_GreenTab_Initialize
  6374 ;;		_Bcmd
  6375 ;;		_setScrollDefinition
  6376 ;;		_Rcmd2green
  6377 ;;		_VerticalScroll
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           	psect	text29
  6382  00E56C                     __ptext29:
  6383                           	opt stack 0
  6384  00E56C                     _write_command:
  6385                           	opt stack 25
  6386                           
  6387                           ;incstack = 0
  6388                           ;write_command@cmd_ stored from wreg
  6389  00E56C  6E03               	movwf	write_command@cmd_,c
  6390                           
  6391                           ;ST7735_TFT.c: 147: PORTDbits.RD3 = 0;
  6392  00E56E  9683               	bcf	3971,3,c	;volatile
  6393                           
  6394                           ;ST7735_TFT.c: 149: PORTDbits.RD2 = 0;
  6395  00E570  9483               	bcf	3971,2,c	;volatile
  6396                           
  6397                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
  6398  00E572  5003               	movf	write_command@cmd_,w,c
  6399  00E574  ECD9  F072         	call	_spiwrite
  6400                           
  6401                           ;ST7735_TFT.c: 152: PORTDbits.RD3 = 1;
  6402  00E578  8683               	bsf	3971,3,c	;volatile
  6403  00E57A  0012               	return		;funcret
  6404  00E57C                     __end_of_write_command:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           postinc0	equ	0xFEE
  6413                           wreg	equ	0xFE8
  6414                           postdec1	equ	0xFE5
  6415                           fsr1l	equ	0xFE1
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           fsr2h	equ	0xFDA
  6419                           fsr2l	equ	0xFD9
  6420                           status	equ	0xFD8
  6421                           
  6422 ;; *************** function _spiwrite *****************
  6423 ;; Defined at:
  6424 ;;		line 136 in file "ST7735_TFT.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  spidata         1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  spidata         1    1[COMRAM] unsigned char 
  6429 ;;  x               1    0[COMRAM] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;		None               void
  6432 ;; Registers used:
  6433 ;;		wreg
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;Total ram usage:        2 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; This function calls:
  6446 ;;		Nothing
  6447 ;; This function is called by:
  6448 ;;		_write_command
  6449 ;;		_write_data
  6450 ;;		_drawFastVLine
  6451 ;;		_fillRectangle
  6452 ;;		_drawFastHLine
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text30
  6457  00E5B2                     __ptext30:
  6458                           	opt stack 0
  6459  00E5B2                     _spiwrite:
  6460                           	opt stack 27
  6461                           
  6462                           ;incstack = 0
  6463                           ;spiwrite@spidata stored from wreg
  6464  00E5B2  6E02               	movwf	spiwrite@spidata,c
  6465                           
  6466                           ;ST7735_TFT.c: 138: char x;
  6467                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
  6468  00E5B4  969E               	bcf	3998,3,c	;volatile
  6469                           
  6470                           ;ST7735_TFT.c: 140: x = SSPBUF;
  6471  00E5B6  CFC9 F001          	movff	4041,spiwrite@x	;volatile
  6472                           
  6473                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
  6474  00E5BA  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6475                           
  6476                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
  6477  00E5BE  D000               	goto	l227
  6478  00E5C0                     l227:
  6479  00E5C0  A0C7               	btfss	4039,0,c	;volatile
  6480  00E5C2  D7FE               	goto	l227
  6481  00E5C4  0012               	return		;funcret
  6482  00E5C6                     __end_of_spiwrite:
  6483                           	opt stack 0
  6484                           tblptru	equ	0xFF8
  6485                           tblptrh	equ	0xFF7
  6486                           tblptrl	equ	0xFF6
  6487                           tablat	equ	0xFF5
  6488                           prodh	equ	0xFF4
  6489                           prodl	equ	0xFF3
  6490                           postinc0	equ	0xFEE
  6491                           wreg	equ	0xFE8
  6492                           postdec1	equ	0xFE5
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           fsr2h	equ	0xFDA
  6497                           fsr2l	equ	0xFD9
  6498                           status	equ	0xFD8
  6499                           
  6500 ;; *************** function _LCD_Reset *****************
  6501 ;; Defined at:
  6502 ;;		line 164 in file "ST7735_TFT.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;		None
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;		None
  6507 ;; Return value:  Size  Location     Type
  6508 ;;		None               void
  6509 ;; Registers used:
  6510 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;Total ram usage:        0 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    2
  6523 ;; This function calls:
  6524 ;;		_delay_ms
  6525 ;; This function is called by:
  6526 ;;		_Initialize_LCD_Screen
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text31
  6531  00E58C                     __ptext31:
  6532                           	opt stack 0
  6533  00E58C                     _LCD_Reset:
  6534                           	opt stack 27
  6535                           
  6536                           ;ST7735_TFT.c: 166: PORTDbits.RD4 = 0;
  6537                           
  6538                           ;incstack = 0
  6539  00E58C  9883               	bcf	3971,4,c	;volatile
  6540                           
  6541                           ;ST7735_TFT.c: 167: delay_ms(100);
  6542  00E58E  0E00               	movlw	0
  6543  00E590  6E08               	movwf	delay_ms@ms+1,c
  6544  00E592  0E64               	movlw	100
  6545  00E594  6E07               	movwf	delay_ms@ms,c
  6546  00E596  EC26  F074         	call	_delay_ms	;wreg free
  6547                           
  6548                           ;ST7735_TFT.c: 168: PORTDbits.RD4 = 1;
  6549  00E59A  8883               	bsf	3971,4,c	;volatile
  6550  00E59C  0012               	return		;funcret
  6551  00E59E                     __end_of_LCD_Reset:
  6552                           	opt stack 0
  6553                           tblptru	equ	0xFF8
  6554                           tblptrh	equ	0xFF7
  6555                           tblptrl	equ	0xFF6
  6556                           tablat	equ	0xFF5
  6557                           prodh	equ	0xFF4
  6558                           prodl	equ	0xFF3
  6559                           postinc0	equ	0xFEE
  6560                           wreg	equ	0xFE8
  6561                           postdec1	equ	0xFE5
  6562                           fsr1l	equ	0xFE1
  6563                           indf2	equ	0xFDF
  6564                           postinc2	equ	0xFDE
  6565                           fsr2h	equ	0xFDA
  6566                           fsr2l	equ	0xFD9
  6567                           status	equ	0xFD8
  6568                           
  6569 ;; *************** function _delay_ms *****************
  6570 ;; Defined at:
  6571 ;;		line 11 in file "ST7735_TFT.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  ms              2    6[COMRAM] int 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  count           2   10[COMRAM] int 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;		None               void
  6578 ;; Registers used:
  6579 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;Total ram usage:        6 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    1
  6592 ;; This function calls:
  6593 ;;		___wmul
  6594 ;; This function is called by:
  6595 ;;		_LCD_Reset
  6596 ;;		_Rcmd1
  6597 ;;		_Rcmd3
  6598 ;;		_Bcmd
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           	psect	text32
  6603  00E84C                     __ptext32:
  6604                           	opt stack 0
  6605  00E84C                     _delay_ms:
  6606                           	opt stack 26
  6607                           
  6608                           ;ST7735_TFT.c: 17: int count;
  6609                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  6610                           
  6611                           ;incstack = 0
  6612  00E84C  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  6613  00E850  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6614  00E854  0E00               	movlw	0
  6615  00E856  6E04               	movwf	___wmul@multiplicand+1,c
  6616  00E858  0EFA               	movlw	250
  6617  00E85A  6E03               	movwf	___wmul@multiplicand,c
  6618  00E85C  EC0F  F073         	call	___wmul	;wreg free
  6619  00E860  C001  F00B         	movff	?___wmul,delay_ms@count
  6620  00E864  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  6621                           
  6622                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  6623  00E868  C00B  F009         	movff	delay_ms@count,??_delay_ms
  6624  00E86C  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  6625  00E870  1E09               	comf	??_delay_ms,f,c
  6626  00E872  1E0A               	comf	??_delay_ms+1,f,c
  6627  00E874  4A09               	infsnz	??_delay_ms,f,c
  6628  00E876  2A0A               	incf	??_delay_ms+1,f,c
  6629  00E878  0EFF               	movlw	255
  6630  00E87A  2409               	addwf	??_delay_ms,w,c
  6631  00E87C  6E0B               	movwf	delay_ms@count,c
  6632  00E87E  0EFF               	movlw	255
  6633  00E880  200A               	addwfc	??_delay_ms+1,w,c
  6634  00E882  6E0C               	movwf	delay_ms@count+1,c
  6635                           
  6636                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  6637  00E884  0EB8               	movlw	184
  6638  00E886  6EB1               	movwf	4017,c	;volatile
  6639                           
  6640                           ;ST7735_TFT.c: 23: TMR3L = count & 0x00ff;
  6641  00E888  C00B  FFB2         	movff	delay_ms@count,4018	;volatile
  6642                           
  6643                           ;ST7735_TFT.c: 24: TMR3H = count >> 8;
  6644  00E88C  500C               	movf	delay_ms@count+1,w,c
  6645  00E88E  6EB3               	movwf	4019,c	;volatile
  6646                           
  6647                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  6648  00E890  92A1               	bcf	4001,1,c	;volatile
  6649                           
  6650                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  6651  00E892  80B1               	bsf	4017,0,c	;volatile
  6652                           
  6653                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  6654  00E894  D000               	goto	l217
  6655  00E896                     l217:
  6656  00E896  A2A1               	btfss	4001,1,c	;volatile
  6657  00E898  D7FE               	goto	l217
  6658                           
  6659                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  6660  00E89A  90B1               	bcf	4017,0,c	;volatile
  6661  00E89C  0012               	return		;funcret
  6662  00E89E                     __end_of_delay_ms:
  6663                           	opt stack 0
  6664                           tblptru	equ	0xFF8
  6665                           tblptrh	equ	0xFF7
  6666                           tblptrl	equ	0xFF6
  6667                           tablat	equ	0xFF5
  6668                           prodh	equ	0xFF4
  6669                           prodl	equ	0xFF3
  6670                           postinc0	equ	0xFEE
  6671                           wreg	equ	0xFE8
  6672                           postdec1	equ	0xFE5
  6673                           fsr1l	equ	0xFE1
  6674                           indf2	equ	0xFDF
  6675                           postinc2	equ	0xFDE
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function ___wmul *****************
  6681 ;; Defined at:
  6682 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  multiplier      2    0[COMRAM] unsigned int 
  6685 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  product         2    4[COMRAM] unsigned int 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  2    0[COMRAM] unsigned int 
  6690 ;; Registers used:
  6691 ;;		wreg, status,2, status,0, prodl, prodh
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6697 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;Total ram usage:        6 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; This function calls:
  6704 ;;		Nothing
  6705 ;; This function is called by:
  6706 ;;		_delay_ms
  6707 ;;		_drawChar
  6708 ;;		_Read_Volt
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text33
  6713  00E61E                     __ptext33:
  6714                           	opt stack 0
  6715  00E61E                     ___wmul:
  6716                           	opt stack 29
  6717                           
  6718                           ;incstack = 0
  6719  00E61E  5001               	movf	___wmul@multiplier,w,c
  6720  00E620  0203               	mulwf	___wmul@multiplicand,c
  6721  00E622  CFF3 F005          	movff	prodl,___wmul@product
  6722  00E626  CFF4 F006          	movff	prodh,___wmul@product+1
  6723  00E62A  5001               	movf	___wmul@multiplier,w,c
  6724  00E62C  0204               	mulwf	___wmul@multiplicand+1,c
  6725  00E62E  50F3               	movf	prodl,w,c
  6726  00E630  2606               	addwf	___wmul@product+1,f,c
  6727  00E632  5002               	movf	___wmul@multiplier+1,w,c
  6728  00E634  0203               	mulwf	___wmul@multiplicand,c
  6729  00E636  50F3               	movf	prodl,w,c
  6730  00E638  2606               	addwf	___wmul@product+1,f,c
  6731  00E63A  C005  F001         	movff	___wmul@product,?___wmul
  6732  00E63E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6733  00E642  D000               	goto	l562
  6734  00E644                     l562:
  6735  00E644  0012               	return		;funcret
  6736  00E646                     __end_of___wmul:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodh	equ	0xFF4
  6743                           prodl	equ	0xFF3
  6744                           postinc0	equ	0xFEE
  6745                           wreg	equ	0xFE8
  6746                           postdec1	equ	0xFE5
  6747                           fsr1l	equ	0xFE1
  6748                           indf2	equ	0xFDF
  6749                           postinc2	equ	0xFDE
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _Init_UART *****************
  6755 ;; Defined at:
  6756 ;;		line 25 in file "utils.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;		None               void
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:        0 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    1
  6777 ;; This function calls:
  6778 ;;		_OpenUSART
  6779 ;; This function is called by:
  6780 ;;		_main
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text34
  6785  00E59E                     __ptext34:
  6786                           	opt stack 0
  6787  00E59E                     _Init_UART:
  6788                           	opt stack 29
  6789                           
  6790                           ;utils.c: 27: OpenUSART (0b01111111 & 0b10111111 &
  6791                           ;utils.c: 28: 0b11111110 & 0b11111101 & 0b11111111 &
  6792                           ;utils.c: 29: 0b11111111, 25);
  6793                           
  6794                           ;incstack = 0
  6795  00E59E  0E00               	movlw	0
  6796  00E5A0  6E02               	movwf	OpenUSART@spbrg+1,c
  6797  00E5A2  0E19               	movlw	25
  6798  00E5A4  6E01               	movwf	OpenUSART@spbrg,c
  6799  00E5A6  0E3C               	movlw	60
  6800  00E5A8  EC13  F075         	call	_OpenUSART
  6801                           
  6802                           ;utils.c: 30: OSCCON = 0x70;
  6803  00E5AC  0E70               	movlw	112
  6804  00E5AE  6ED3               	movwf	4051,c	;volatile
  6805  00E5B0  0012               	return		;funcret
  6806  00E5B2                     __end_of_Init_UART:
  6807                           	opt stack 0
  6808                           tblptru	equ	0xFF8
  6809                           tblptrh	equ	0xFF7
  6810                           tblptrl	equ	0xFF6
  6811                           tablat	equ	0xFF5
  6812                           prodh	equ	0xFF4
  6813                           prodl	equ	0xFF3
  6814                           postinc0	equ	0xFEE
  6815                           wreg	equ	0xFE8
  6816                           postdec1	equ	0xFE5
  6817                           fsr1l	equ	0xFE1
  6818                           indf2	equ	0xFDF
  6819                           postinc2	equ	0xFDE
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function _OpenUSART *****************
  6825 ;; Defined at:
  6826 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;  config          1    wreg     unsigned char 
  6829 ;;  spbrg           2    0[COMRAM] unsigned int 
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  config          1    2[COMRAM] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;		None               void
  6834 ;; Registers used:
  6835 ;;		wreg, status,2
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6841 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;Total ram usage:        3 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; This function calls:
  6848 ;;		Nothing
  6849 ;; This function is called by:
  6850 ;;		_Init_UART
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text35
  6855  00EA26                     __ptext35:
  6856                           	opt stack 0
  6857  00EA26                     _OpenUSART:
  6858                           	opt stack 29
  6859                           
  6860                           ;incstack = 0
  6861                           ;OpenUSART@config stored from wreg
  6862  00EA26  6E03               	movwf	OpenUSART@config,c
  6863  00EA28  0E00               	movlw	0
  6864  00EA2A  6EAC               	movwf	4012,c	;volatile
  6865  00EA2C  0E00               	movlw	0
  6866  00EA2E  6EAB               	movwf	4011,c	;volatile
  6867  00EA30  A003               	btfss	OpenUSART@config,0,c
  6868  00EA32  D002               	goto	l2863
  6869  00EA34  88AC               	bsf	4012,4,c	;volatile
  6870  00EA36  D000               	goto	l2863
  6871  00EA38                     l2863:
  6872  00EA38  A203               	btfss	OpenUSART@config,1,c
  6873  00EA3A  D003               	goto	l2867
  6874  00EA3C  8CAC               	bsf	4012,6,c	;volatile
  6875  00EA3E  8CAB               	bsf	4011,6,c	;volatile
  6876  00EA40  D000               	goto	l2867
  6877  00EA42                     l2867:
  6878  00EA42  A403               	btfss	OpenUSART@config,2,c
  6879  00EA44  D002               	goto	l2871
  6880  00EA46  8EAC               	bsf	4012,7,c	;volatile
  6881  00EA48  D000               	goto	l2871
  6882  00EA4A                     l2871:
  6883  00EA4A  A603               	btfss	OpenUSART@config,3,c
  6884  00EA4C  D002               	goto	l550
  6885  00EA4E  88AB               	bsf	4011,4,c	;volatile
  6886  00EA50  D002               	goto	l2875
  6887  00EA52                     l550:
  6888  00EA52  8AAB               	bsf	4011,5,c	;volatile
  6889  00EA54  D000               	goto	l2875
  6890  00EA56                     l2875:
  6891  00EA56  B803               	btfsc	OpenUSART@config,4,c
  6892  00EA58  84AC               	bsf	4012,2,c	;volatile
  6893  00EA5A  989E               	bcf	3998,4,c	;volatile
  6894  00EA5C  AA03               	btfss	OpenUSART@config,5,c
  6895  00EA5E  D002               	goto	l2883
  6896  00EA60  86AB               	bsf	4011,3,c	;volatile
  6897  00EA62  D000               	goto	l2883
  6898  00EA64                     l2883:
  6899  00EA64  AC03               	btfss	OpenUSART@config,6,c
  6900  00EA66  D002               	goto	l554
  6901  00EA68  8A9D               	bsf	3997,5,c	;volatile
  6902  00EA6A  D001               	goto	l555
  6903  00EA6C                     l554:
  6904  00EA6C  9A9D               	bcf	3997,5,c	;volatile
  6905  00EA6E                     l555:
  6906  00EA6E  9A9E               	bcf	3998,5,c	;volatile
  6907  00EA70  AE03               	btfss	OpenUSART@config,7,c
  6908  00EA72  D002               	goto	l556
  6909  00EA74  889D               	bsf	3997,4,c	;volatile
  6910  00EA76  D001               	goto	l557
  6911  00EA78                     l556:
  6912  00EA78  989D               	bcf	3997,4,c	;volatile
  6913  00EA7A                     l557:
  6914  00EA7A  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  6915  00EA7E  5002               	movf	OpenUSART@spbrg+1,w,c
  6916  00EA80  6EB0               	movwf	4016,c	;volatile
  6917  00EA82  8AAC               	bsf	4012,5,c	;volatile
  6918  00EA84  8EAB               	bsf	4011,7,c	;volatile
  6919  00EA86  9C94               	bcf	3988,6,c	;volatile
  6920  00EA88  8E94               	bsf	3988,7,c	;volatile
  6921  00EA8A  B8AC               	btfsc	4012,4,c	;volatile
  6922  00EA8C  BEAC               	btfsc	4012,7,c	;volatile
  6923  00EA8E  D002               	goto	l559
  6924  00EA90  8C94               	bsf	3988,6,c	;volatile
  6925  00EA92  D000               	goto	l559
  6926  00EA94                     l559:
  6927  00EA94  0012               	return		;funcret
  6928  00EA96                     __end_of_OpenUSART:
  6929                           	opt stack 0
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           postinc0	equ	0xFEE
  6937                           wreg	equ	0xFE8
  6938                           postdec1	equ	0xFE5
  6939                           fsr1l	equ	0xFE1
  6940                           indf2	equ	0xFDF
  6941                           postinc2	equ	0xFDE
  6942                           fsr2h	equ	0xFDA
  6943                           fsr2l	equ	0xFD9
  6944                           status	equ	0xFD8
  6945                           
  6946 ;; *************** function _Init_ADC *****************
  6947 ;; Defined at:
  6948 ;;		line 18 in file "utils.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;		None
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;		None
  6953 ;; Return value:  Size  Location     Type
  6954 ;;		None               void
  6955 ;; Registers used:
  6956 ;;		wreg, status,2
  6957 ;; Tracked objects:
  6958 ;;		On entry : 0/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;Total ram usage:        0 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; This function calls:
  6969 ;;		Nothing
  6970 ;; This function is called by:
  6971 ;;		_main
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           	psect	text36
  6976  00E55E                     __ptext36:
  6977                           	opt stack 0
  6978  00E55E                     _Init_ADC:
  6979                           	opt stack 30
  6980                           
  6981                           ;utils.c: 20: ADCON0 = 0x01;
  6982                           
  6983                           ;incstack = 0
  6984  00E55E  0E01               	movlw	1
  6985  00E560  6EC2               	movwf	4034,c	;volatile
  6986                           
  6987                           ;utils.c: 21: ADCON1 = 0x0E;
  6988  00E562  0E0E               	movlw	14
  6989  00E564  6EC1               	movwf	4033,c	;volatile
  6990                           
  6991                           ;utils.c: 22: ADCON2 = 0xA9;
  6992  00E566  0EA9               	movlw	169
  6993  00E568  6EC0               	movwf	4032,c	;volatile
  6994  00E56A  0012               	return		;funcret
  6995  00E56C                     __end_of_Init_ADC:
  6996                           	opt stack 0
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           postinc0	equ	0xFEE
  7004                           wreg	equ	0xFE8
  7005                           postdec1	equ	0xFE5
  7006                           fsr1l	equ	0xFE1
  7007                           indf2	equ	0xFDF
  7008                           postinc2	equ	0xFDE
  7009                           fsr2h	equ	0xFDA
  7010                           fsr2l	equ	0xFD9
  7011                           status	equ	0xFD8
  7012                           
  7013 ;; *************** function _Day_Mode *****************
  7014 ;; Defined at:
  7015 ;;		line 108 in file "lab8.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;		None
  7020 ;; Return value:  Size  Location     Type
  7021 ;;		None               void
  7022 ;; Registers used:
  7023 ;;		None
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;Total ram usage:        0 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; This function calls:
  7036 ;;		Nothing
  7037 ;; This function is called by:
  7038 ;;		_main
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text37
  7043  00E55A                     __ptext37:
  7044                           	opt stack 0
  7045  00E55A                     _Day_Mode:
  7046                           	opt stack 30
  7047                           
  7048                           ;incstack = 0
  7049  00E55A  0012               	return		;funcret
  7050  00E55C                     __end_of_Day_Mode:
  7051                           	opt stack 0
  7052                           tblptru	equ	0xFF8
  7053                           tblptrh	equ	0xFF7
  7054                           tblptrl	equ	0xFF6
  7055                           tablat	equ	0xFF5
  7056                           prodh	equ	0xFF4
  7057                           prodl	equ	0xFF3
  7058                           postinc0	equ	0xFEE
  7059                           wreg	equ	0xFE8
  7060                           postdec1	equ	0xFE5
  7061                           fsr1l	equ	0xFE1
  7062                           indf2	equ	0xFDF
  7063                           postinc2	equ	0xFDE
  7064                           fsr2h	equ	0xFDA
  7065                           fsr2l	equ	0xFD9
  7066                           status	equ	0xFD8
  7067                           tblptru	equ	0xFF8
  7068                           tblptrh	equ	0xFF7
  7069                           tblptrl	equ	0xFF6
  7070                           tablat	equ	0xFF5
  7071                           prodh	equ	0xFF4
  7072                           prodl	equ	0xFF3
  7073                           postinc0	equ	0xFEE
  7074                           wreg	equ	0xFE8
  7075                           postdec1	equ	0xFE5
  7076                           fsr1l	equ	0xFE1
  7077                           indf2	equ	0xFDF
  7078                           postinc2	equ	0xFDE
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083                           	psect	rparam
  7084  0000                     tblptru	equ	0xFF8
  7085                           tblptrh	equ	0xFF7
  7086                           tblptrl	equ	0xFF6
  7087                           tablat	equ	0xFF5
  7088                           prodh	equ	0xFF4
  7089                           prodl	equ	0xFF3
  7090                           postinc0	equ	0xFEE
  7091                           wreg	equ	0xFE8
  7092                           postdec1	equ	0xFE5
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    475
    Data        63
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     57     118
    BANK0           128      0      53
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(COMRAM[3]), PED_NS_Count(COMRAM[3]), 
		 -> EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(COMRAM[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(COMRAM[3]), PED_NS_Count(COMRAM[3]), 
		 -> EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(COMRAM[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[7]), STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[12]), 
		 -> STR_5(CODE[22]), STR_4(CODE[2]), STR_3(CODE[3]), STR_2(CODE[5]), 
		 -> STR_1(CODE[6]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(COMRAM[3]), PED_NS_Count(COMRAM[3]), 
		 -> EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(COMRAM[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Read_Volt->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Initialize_LCD_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawFastHLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52390
                           _Day_Mode
                           _Init_ADC
                          _Init_UART
              _Initialize_LCD_Screen
                         _Night_Mode
                          _Read_Volt
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Read_Volt                                            9     6      3    4542
                                             27 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2095
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    1773
                                              8 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1629
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   47227
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1453
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _fillCircle                                           8     0      8    7731
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (3) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   19274
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7    8302
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    7118
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3190
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1505
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1505
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1415
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1415
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     583
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   ___ftge

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      35       5       41.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     39      76       1       92.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB      34        0.0%
DATA                 0      0      AB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 17 17:46:32 2024

                     drawCircle@f 001A                       drawCircle@r 0010  
                     drawCircle@x 001C                       drawCircle@y 001E  
                     _SSPSTATbits 000FC7                      drawCircle@x0 000C  
                    drawCircle@y0 000E               ___wmul@multiplicand 0003  
                             l302 F3F8                               l217 E896  
                             l330 EE52                               l227 E5C0  
                             l331 EDBE                               l341 F566  
                             l333 EE2E                               l334 EE50  
                             l271 E6C8                               l511 EA24  
                             l514 E5FC                               l277 EC1A  
                             l293 F4A2                               l517 E61C  
                             l550 EA52                               l375 EB92  
                             l295 F37C                               l359 F284  
                             l554 EA6C                               l562 E644  
                             l555 EA6E                               l556 EA78  
                             l557 EA7A                               l559 EA94  
                             l780 E736                               l870 ED76  
                             l942 F012                               l951 ECB0  
                             l881 ED4E                               l945 EFDE  
                             _PR2 000FCB                               _dir 0074  
                             _nbr 0066                               _txt 0068  
                  drawFastHLine@w 0009                    drawFastHLine@x 0012  
                  drawFastHLine@y 0008                               wreg 000FE8  
                 ??_fillRectangle 000D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize E670                      ___ftdiv@cntr 0016  
                    ___ftdiv@sign 001B                      __CFG_WDT$OFF 000000  
                  drawFastVLine@h 0009                              l1119 E7B2  
                            l2403 EC02                    drawFastVLine@x 0012  
                            l2405 EC10                    drawFastVLine@y 0008  
                            l2431 E6AA                              l3081 FD42  
                            l2443 E7DA                              l2611 EDF6  
                            l3163 EC80                              l2541 F35E  
                            l2605 ED88                              l2439 E7BE  
                            l2551 F380                              l2631 EE3C  
                            l2623 EE24                              l2711 ED16  
                            l2703 ECD2                              l3159 EC4E  
                            l2393 EBDC                              l2561 F3EC  
                            l2545 F36A                              l2721 ED56  
                            l2713 ED36                              l2705 ECDE  
                            l3169 ECAC                              l3185 EAF6  
                            l2571 F41A                              l2563 F3F0  
                            l2555 F388                              l2651 F26A  
                            l2627 EE32                              l2715 ED42  
                            l2707 ECFE                              l2389 EBA4  
                            l2581 F496                              l2573 F442  
                            l2549 F378                              l2637 EE4C  
                            l3189 EB02                              l2559 F3B8  
                            l2671 F338                              l2727 ED68  
                            l2817 F54C                              l2681 EB54  
                            l2593 E780                              l2913 EF50  
                            l2691 EB7A                              l2579 F46E  
                            l2587 F49E                              l2595 E786  
                            l2667 F2E6                              l2915 EF6A  
                            l2845 F63C                              l2693 EB88  
                            l2677 EB1C                              l2781 EEC0  
                            l2757 E6D4                              l2871 EA4A  
                            l2863 EA38                              l2759 E6DE  
                            l2919 EF78                              l2793 EF1E  
                            l2785 EEDA                              l2769 EE7C  
                            l2961 E712                              l2883 EA64  
                            l2875 EA56                              l2867 EA42  
                            l2795 EF24                              l2699 ECC2  
                            l2939 EFB8                              l2949 EFEC  
                            STR_1 FFE4                              STR_2 FFEA  
                            STR_3 FFF7                              STR_4 FFFC  
                            STR_5 FFAA                              STR_6 FFC0  
                            STR_7 FFD6                              STR_8 FFCC  
                            STR_9 FFDD                              u1320 EDB6  
                            u1090 EBD2                              u1250 F450  
                            u1330 EDEC                              u1440 EB4A  
                            u1560 EEA4                              u1741 EF42  
                            u1761 EF60                              u1880 EAF0  
                            u1890 EAF2                              _MODE 006C  
                            _TRMT 007D61                              _main EA96  
                            _font FDCF                      ___ftpack@arg 0001  
                    ___ftpack@exp 0004                    ??_get_full_ADC 0003  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 003A                              _volt 0063  
                 drawFastHLine@hi 0010                   drawFastHLine@lo 0011  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0000  
                 ??_drawFastHLine 000C                   ??_drawFastVLine 000C  
                    ___param_bank 000010                      _Act_Mode_Txt 0055  
                 drawFastVLine@hi 0010                   drawFastVLine@lo 0011  
                  Read_Volt@nStep 0022                       _SW_EWLT_Txt 005B  
                           ?_main 0001                   drawCircle@ddF_x 0016  
                           STR_10 FFEF                   drawCircle@ddF_y 0018  
                           STR_11 FFF3                             STR_13 FFFA  
                 __end_of___ftdiv F014                             _T0CON 000FD5  
                           _T2CON 000FCA                             _T3CON 000FB1  
                 drawCircle@color 0012                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _TMR3H 000FB3                             _TMR3L 000FB2  
                           _SPBRG 000FAF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Count 006A                             _Rcmd1 F106  
                           _Rcmd3 F014                       _SW_NSLT_Txt 005F  
                   drawRect@color 001B                     ___awtoft@sign 000C  
                           _font2 FECE             fillCircleHelper@ddF_x 0021  
           fillCircleHelper@ddF_y 0023                     ___ftpack@sign 0005  
           fillCircleHelper@delta 001B             fillCircleHelper@color 001D  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8                  __end_of_Day_Mode E55C  
                 write_data@data_ 0003                   __initialization E8F0  
                    __end_of_main EB0C                      __end_of_font FECE  
                __end_of_Init_ADC E56C                  __end_of_Rcmd2red E776  
                      _Night_Mode E55C                            ??_main 003A  
                   __activetblptr 000002                 __end_of_LCD_Reset E59E  
                    _SW_EWPED_Txt 005D         ??_TFT_GreenTab_Initialize 000D  
                          ?_Rcmd1 0001                            ?_Rcmd3 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _CCPR2L 000FBB  
                __end_of___awtoft E738                  __end_of___ftpack ED78  
                          _OSCCON 000FD3                __size_of_Init_UART 0014  
                          _SPBRGH 000FB0                            _SSPBUF 000FC9  
                    _SW_NSPED_Txt 0061                __size_of_Read_Volt 006E  
                __end_of_delay_ms E89E                  __end_of_fillRect E7FE  
                __end_of_drawChar F4A4                  __end_of_drawRect E9B8  
              __size_of_OpenUSART 0070                            ___ftge EC1C  
                          ___wmul E61E         __size_of_fillCircleHelper 0138  
                __end_of_drawtext EF32                         ??___ftdiv 0013  
                          _buffer 0080                            clear_0 E8F6  
                          clear_1 E902                        _Timing_Txt 009F  
                    drawtext@size 0030                            _strcpy E6CA  
                          _strlen E776           ??_Initialize_LCD_Screen 003A  
            __end_of_get_full_ADC E61E                      __pdataCOMRAM 003A  
                    __mediumconst FDCE                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                __end_of_spiwrite E5C6                        __accesstop 0080  
         __end_of__initialization E948                        ___ftge@ff1 0001  
                      ___ftge@ff2 0004                     ___rparam_used 000001  
                      ___ftdiv@f1 000D                        ___ftdiv@f2 0010  
                      ___ftdiv@f3 0017                        ___awtoft@c 0009  
                   __end_of_Rcmd1 F216                     __end_of_Rcmd3 F106  
                  __pcstackCOMRAM 0001                      __pidataBANK0 E5C6  
                   __end_of_font2 FFAA                       ?_Night_Mode 0001  
               __end_of_Init_UART E5B2                    drawPixel@color 0009  
          __size_of_write_command 0010                 __end_of_Read_Volt EA26  
                       ?_Day_Mode 0001        fillCircleHelper@cornername 0019  
                         ??_Rcmd1 000D                           ??_Rcmd3 000D  
              __size_of_drawPixel 0030                 __end_of_OpenUSART EA96  
            Read_Volt@ADC_Channel 0024                        __pbssBANK0 0080  
                       ?_Init_ADC 0001                         ?_Rcmd2red 0001  
                 spiwrite@spidata 0002                           ?___ftge 0001  
                         ?___wmul 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                         ?___awtoft 0009  
                       ?___ftpack 0001                        _fillCircle E89E  
                         ?_strcpy 0001                           ?_strlen 0001  
                      _fillScreen E5DC                        _drawCircle F4A4  
                      ??_Day_Mode 0001                         ?_delay_ms 0007  
                       ?_fillRect 0013                         ?_drawChar 001E  
                         _SSPCON1 000FC6                         ?_drawRect 0013  
                         _SSPSTAT 000FC7             __end_of_fillRectangle EE54  
                       ?_drawtext 0029                           _SW_EWLT 006E  
                      ??_Init_ADC 0001                           _SW_NSLT 0070  
                      ??_Rcmd2red 0004               __size_of_Night_Mode 0002  
                   _write_command E56C                           __Hparam 0000  
                         __Lparam 0000             __end_of_drawFastHLine EB94  
               __end_of_drawPixel E6CA             __end_of_drawFastVLine EC1C  
                _fillCircleHelper F216                   __size_of___ftge 0096  
                         ___ftdiv EF32                   __size_of___wmul 0028  
           __size_of_get_full_ADC 0026                         ?_spiwrite 0001  
                         __pcinit E8F0                        ??___awtoft 000C  
                      ??___ftpack 0006                           __ramtop 1000  
                         __ptext0 EA96                           __ptext1 EC1C  
                         __ptext2 E9B8                           __ptext3 E5F8  
                         __ptext4 EF32                           __ptext5 E6FC  
                         __ptext6 ECB2                           __ptext7 E55C  
                         __ptext8 F652                           __ptext9 E6CA  
        _Light_Sensor_Voltage_Txt 003B                         _T0CONbits 000FD5  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
                       _T3CONbits 000FB1                        ??_delay_ms 0009  
                   drawtext@_text 002A                     drawtext@color 002C  
                      ??_fillRect 0018                        ??_drawChar 0025  
                       _LCD_Reset E58C                        ??_drawRect 001D  
                   _setAddrWindow E7FE                drawFastHLine@color 000A  
                      delay_ms@ms 0007              end_of_initialization E948  
                      ??_drawtext 0031                    ?_write_command 0001  
                   __Lmediumconst FDCE                         _PED_Count 006D  
                    _get_full_ADC E5F8                         _RCSTAbits 000FAB  
                         postdec1 000FE5                           postinc0 000FEE  
                         postinc2 000FDE                        ??_spiwrite 0001  
                         strlen@s 0001                   fillCircle@color 0031  
                     ?_fillCircle 002B                         _PORTAbits 000F80  
                drawtext@cursor_x 0039                  drawtext@cursor_y 0038  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                     ?_fillScreen 0014                       ?_drawCircle 000C  
  __size_of_Initialize_LCD_Screen 077C                        drawChar@bg 0022  
   __end_of_Initialize_LCD_Screen FDCE                         _TRISCbits 000F94  
                  ?_setAddrWindow 0004                        ?_LCD_Reset 0001  
                drawtext@textsize 0033                        drawPixel@x 000B  
                      drawPixel@y 0008                       ___ftdiv@exp 001A  
                       _TXSTAbits 000FAC                get_full_ADC@result 0005  
                    _Light_Sensor 006B                    __end_of___ftge ECB2  
                   Read_Volt@volt 001F                    __end_of___wmul E646  
                   delay_ms@count 000B                        _write_data E57C  
                   __pidataCOMRAM E647                      ??_Night_Mode 0001  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 002E  
                  __end_of_strcpy E6FC                    __end_of_strlen E7B4  
             start_initialization E8F0                         _Init_UART E59E  
               __size_of_Day_Mode 0002                         _Read_Volt E9B8  
                 ??_write_command 0003                         _OpenUSART EA26  
             __size_of_fillCircle 0052                  __CFG_OSC$INTIO67 000000  
               __size_of_Init_ADC 000E                __end_of_Night_Mode E55E  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                          ??___ftge 0007  
                        ??___wmul 0005                       __pdataBANK0 009F  
                 setAddrWindow@x0 0007                   setAddrWindow@x1 0005  
                 setAddrWindow@y0 0004                   setAddrWindow@y1 0006  
                        ??_strcpy 0005                          ??_strlen 0003  
                    _PED_EW_Count 004F                 __size_of___awtoft 003C  
               __size_of___ftpack 00C6                       __pbssCOMRAM 0063  
                      ?_Init_UART 0001                   ??_setAddrWindow 0007  
                    _PED_NS_Count 0052                        ?_Read_Volt 001C  
                     ??_LCD_Reset 000D          __end_of_fillCircleHelper F34E  
               __size_of_delay_ms 0052                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 0001  
               __size_of_drawRect 0066                 __size_of_drawtext 00DE  
 __end_of_TFT_GreenTab_Initialize E69A                     __pmediumconst FDCE  
                        ?___ftdiv 000D                         __tft_type 0072  
                       _direction 0075                drawFastVLine@color 000A  
                     ?_write_data 0001                         _drawPixel E69A  
               __size_of_spiwrite 0014                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                    ___wmul@product 0005  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                          _EW_Count 0043  
                       fillRect@h 0015                         fillRect@i 001C  
                       fillRect@w 0014                         fillRect@x 001B  
                       fillRect@y 0013                         drawChar@c 001F  
                       drawChar@i 0028                         drawChar@j 0027  
                    ??_fillCircle 0033                         drawChar@x 0026  
                       drawChar@y 001E                        ?_drawPixel 0008  
          __size_of_fillRectangle 00DC                          _NS_Count 004C  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 0001  
                    ??_fillScreen 0016                         drawRect@h 0019  
                       drawRect@w 0017                         drawRect@x 0013  
                       drawRect@y 0015                     _FlashingR_Txt 0057  
                   _FlashingS_Txt 0059                      ??_drawCircle 0014  
                        _SW_EWPED 006F                          _Day_Mode E55A  
                        _SW_NSPED 0071                       ??_Init_UART 0004  
                     ??_Read_Volt 001F            __size_of_drawFastHLine 0088  
           _Light_Sensor_Mode_Txt 0046                         copy_data0 E91C  
                       copy_data1 E93C                         drawtext@i 0036  
          __size_of_drawFastVLine 0088                         drawtext@x 0035  
                       drawtext@y 0029                          _Init_ADC E55E  
               write_command@cmd_ 0003                       ??_OpenUSART 0003  
                        _Rcmd2red E738               __size_of_write_data 0010  
                 OpenUSART@config 0003                __end_of_fillCircle E8F0  
                        __Hrparam 0000                __end_of_fillScreen E5F8  
                        __Lrparam 0000                __end_of_drawCircle F652  
                __size_of___ftdiv 00E2                          ___awtoft E6FC  
                        ___ftpack ECB2                          _delay_ms E84C  
                        __ptext10 E5DC                          __ptext11 ED78  
                        __ptext20 EB0C                          __ptext12 E89E  
                        __ptext21 F4A4                          __ptext13 F216  
                        __ptext30 E5B2                          __ptext22 E69A  
                        __ptext14 EE54                          __ptext31 E58C  
                        __ptext23 E7FE                          __ptext15 E776  
                        __ptext32 E84C                          __ptext24 E670  
                        __ptext16 F34E                          __ptext33 E61E  
                        __ptext25 F014                          __ptext17 E7B4  
                        __ptext34 E59E                          __ptext26 E738  
                        __ptext18 E952                          __ptext35 EA26  
                        __ptext27 F106                          __ptext19 EB94  
                        __ptext36 E55E                          __ptext28 E57C  
                        __ptext37 E55A                          __ptext29 E56C  
                        _fillRect E7B4                          _drawChar F34E  
           _Initialize_LCD_Screen F652                          _drawRect E952  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 0073  
                        _drawtext EE54                        strcpy@from 0003  
                   _fillRectangle ED78                     __size_of_main 0076  
                 fillRectangle@hi 0011                   fillRectangle@lo 0012  
                   _drawFastHLine EB0C                     _drawFastVLine EB94  
                        _spiwrite E5B2                       ??_drawPixel 000B  
                        _rowstart 0076                fillCircleHelper@x0 0013  
              fillCircleHelper@y0 0015                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0001                        _EWLT_Count 0040  
               ?_fillCircleHelper 0013                         spiwrite@x 0001  
                  ?_fillRectangle 0008                ??_fillCircleHelper 001F  
           __end_of_write_command E57C                   fillScreen@color 0014  
                    fillCircle@x0 002B                      fillCircle@y0 002D  
                  ?_drawFastHLine 0008                    fillRectangle@h 000A  
                  fillRectangle@w 0009                    fillRectangle@x 0013  
                  fillRectangle@y 0008                    ?_drawFastVLine 0008  
               fillCircleHelper@f 0025                 fillCircleHelper@r 0017  
               fillCircleHelper@x 0027                 fillCircleHelper@y 0029  
                    ??_write_data 0003                     fillRect@color 0016  
                        strcpy@cp 0005                          strlen@cp 0005  
                        strcpy@to 0001                        _NSLT_Count 0049  
          ?_Initialize_LCD_Screen 0001                       fillCircle@r 002F  
           __end_of_setAddrWindow E84C                fillRectangle@color 000B  
                   drawChar@color 0020                __end_of_write_data E58C  
                    drawChar@line 0025                     ?_get_full_ADC 0001  
                    drawChar@size 0024  
