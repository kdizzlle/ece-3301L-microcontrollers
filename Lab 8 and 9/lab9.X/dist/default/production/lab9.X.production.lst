

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 24 20:38:23 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           	psect	idataCOMRAM
    85  0028B4                     __pidataCOMRAM:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _wrap
    89  0028B4  01                 	db	1
    90                           
    91                           ;initializer for _EW_Count
    92  0028B5  30                 	db	48
    93  0028B6  30                 	db	48
    94  0028B7  00                 	db	0
    95                           
    96                           ;initializer for _Light_Sensor_Mode_Txt
    97  0028B8  2D                 	db	45
    98  0028B9  44                 	db	68
    99  0028BA  00                 	db	0
   100                           
   101                           ;initializer for _Act_Mode_Txt
   102  0028BB  44                 	db	68
   103  0028BC  00                 	db	0
   104                           
   105                           ;initializer for _FlashingR_Txt
   106  0028BD  30                 	db	48
   107  0028BE  00                 	db	0
   108                           
   109                           ;initializer for _FlashingS_Txt
   110  0028BF  30                 	db	48
   111  0028C0  00                 	db	0
   112                           
   113                           ;initializer for _SW_EWLT_Txt
   114  0028C1  30                 	db	48
   115  0028C2  00                 	db	0
   116                           
   117                           ;initializer for _SW_EWPED_Txt
   118  0028C3  30                 	db	48
   119  0028C4  00                 	db	0
   120                           
   121                           ;initializer for _SW_NSLT_Txt
   122  0028C5  30                 	db	48
   123  0028C6  00                 	db	0
   124                           
   125                           ;initializer for _SW_NSPED_Txt
   126  0028C7  30                 	db	48
   127  0028C8  00                 	db	0
   128                           
   129                           	psect	idataBANK0
   130  00278A                     __pidataBANK0:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _Timing_Txt
   134  00278A  53                 	db	83
   135  00278B  50                 	db	80
   136  00278C  32                 	db	50
   137  00278D  34                 	db	52
   138  00278E  2F                 	db	47
   139  00278F  31                 	db	49
   140  002790  2F                 	db	47
   141  002791  30                 	db	48
   142  002792  31                 	db	49
   143  002793  20                 	db	32
   144  002794  30                 	db	48
   145  002795  30                 	db	48
   146  002796  30                 	db	48
   147  002797  30                 	db	48
   148  002798  30                 	db	48
   149  002799  30                 	db	48
   150  00279A  20                 	db	32
   151  00279B  30                 	db	48
   152  00279C  30                 	db	48
   153  00279D  30                 	db	48
   154  00279E  30                 	db	48
   155  00279F  00                 	db	0
   156                           
   157                           ;initializer for _Light_Sensor_Voltage_Txt
   158  0027A0  32                 	db	50
   159  0027A1  2E                 	db	46
   160  0027A2  35                 	db	53
   161  0027A3  56                 	db	86
   162  0027A4  00                 	db	0
   163                           
   164                           ;initializer for _EWLT_Count
   165  0027A5  30                 	db	48
   166  0027A6  30                 	db	48
   167  0027A7  00                 	db	0
   168                           
   169                           ;initializer for _NSLT_Count
   170  0027A8  30                 	db	48
   171  0027A9  30                 	db	48
   172  0027AA  00                 	db	0
   173                           
   174                           ;initializer for _NS_Count
   175  0027AB  30                 	db	48
   176  0027AC  30                 	db	48
   177  0027AD  00                 	db	0
   178                           
   179                           ;initializer for _PED_EW_Count
   180  0027AE  30                 	db	48
   181  0027AF  30                 	db	48
   182  0027B0  00                 	db	0
   183                           
   184                           ;initializer for _PED_NS_Count
   185  0027B1  30                 	db	48
   186  0027B2  30                 	db	48
   187  0027B3  00                 	db	0
   188                           
   189                           	psect	mediumconst
   190  00FDCE                     __pmediumconst:
   191                           	opt stack 0
   192  00FDCE  00                 	db	0
   193  00FDCF                     _font:
   194                           	opt stack 0
   195  00FDCF  00                 	db	0
   196  00FDD0  00                 	db	0
   197  00FDD1  00                 	db	0
   198  00FDD2  00                 	db	0
   199  00FDD3  00                 	db	0
   200  00FDD4  00                 	db	0
   201  00FDD5  00                 	db	0
   202  00FDD6  5F                 	db	95
   203  00FDD7  00                 	db	0
   204  00FDD8  00                 	db	0
   205  00FDD9  00                 	db	0
   206  00FDDA  07                 	db	7
   207  00FDDB  00                 	db	0
   208  00FDDC  07                 	db	7
   209  00FDDD  00                 	db	0
   210  00FDDE  14                 	db	20
   211  00FDDF  7F                 	db	127
   212  00FDE0  14                 	db	20
   213  00FDE1  7F                 	db	127
   214  00FDE2  14                 	db	20
   215  00FDE3  24                 	db	36
   216  00FDE4  2A                 	db	42
   217  00FDE5  7F                 	db	127
   218  00FDE6  2A                 	db	42
   219  00FDE7  12                 	db	18
   220  00FDE8  23                 	db	35
   221  00FDE9  13                 	db	19
   222  00FDEA  08                 	db	8
   223  00FDEB  64                 	db	100
   224  00FDEC  62                 	db	98
   225  00FDED  36                 	db	54
   226  00FDEE  49                 	db	73
   227  00FDEF  56                 	db	86
   228  00FDF0  20                 	db	32
   229  00FDF1  50                 	db	80
   230  00FDF2  00                 	db	0
   231  00FDF3  08                 	db	8
   232  00FDF4  07                 	db	7
   233  00FDF5  03                 	db	3
   234  00FDF6  00                 	db	0
   235  00FDF7  00                 	db	0
   236  00FDF8  1C                 	db	28
   237  00FDF9  22                 	db	34
   238  00FDFA  41                 	db	65
   239  00FDFB  00                 	db	0
   240  00FDFC  00                 	db	0
   241  00FDFD  41                 	db	65
   242  00FDFE  22                 	db	34
   243  00FDFF  1C                 	db	28
   244  00FE00  00                 	db	0
   245  00FE01  2A                 	db	42
   246  00FE02  1C                 	db	28
   247  00FE03  7F                 	db	127
   248  00FE04  1C                 	db	28
   249  00FE05  2A                 	db	42
   250  00FE06  08                 	db	8
   251  00FE07  08                 	db	8
   252  00FE08  3E                 	db	62
   253  00FE09  08                 	db	8
   254  00FE0A  08                 	db	8
   255  00FE0B  00                 	db	0
   256  00FE0C  80                 	db	128
   257  00FE0D  70                 	db	112
   258  00FE0E  30                 	db	48
   259  00FE0F  00                 	db	0
   260  00FE10  08                 	db	8
   261  00FE11  08                 	db	8
   262  00FE12  08                 	db	8
   263  00FE13  08                 	db	8
   264  00FE14  08                 	db	8
   265  00FE15  00                 	db	0
   266  00FE16  00                 	db	0
   267  00FE17  60                 	db	96
   268  00FE18  60                 	db	96
   269  00FE19  00                 	db	0
   270  00FE1A  20                 	db	32
   271  00FE1B  10                 	db	16
   272  00FE1C  08                 	db	8
   273  00FE1D  04                 	db	4
   274  00FE1E  02                 	db	2
   275  00FE1F  3E                 	db	62
   276  00FE20  51                 	db	81
   277  00FE21  49                 	db	73
   278  00FE22  45                 	db	69
   279  00FE23  3E                 	db	62
   280  00FE24  00                 	db	0
   281  00FE25  42                 	db	66
   282  00FE26  7F                 	db	127
   283  00FE27  40                 	db	64
   284  00FE28  00                 	db	0
   285  00FE29  72                 	db	114
   286  00FE2A  49                 	db	73
   287  00FE2B  49                 	db	73
   288  00FE2C  49                 	db	73
   289  00FE2D  46                 	db	70
   290  00FE2E  21                 	db	33
   291  00FE2F  41                 	db	65
   292  00FE30  49                 	db	73
   293  00FE31  4D                 	db	77
   294  00FE32  33                 	db	51
   295  00FE33  18                 	db	24
   296  00FE34  14                 	db	20
   297  00FE35  12                 	db	18
   298  00FE36  7F                 	db	127
   299  00FE37  10                 	db	16
   300  00FE38  27                 	db	39
   301  00FE39  45                 	db	69
   302  00FE3A  45                 	db	69
   303  00FE3B  45                 	db	69
   304  00FE3C  39                 	db	57
   305  00FE3D  3C                 	db	60
   306  00FE3E  4A                 	db	74
   307  00FE3F  49                 	db	73
   308  00FE40  49                 	db	73
   309  00FE41  31                 	db	49
   310  00FE42  41                 	db	65
   311  00FE43  21                 	db	33
   312  00FE44  11                 	db	17
   313  00FE45  09                 	db	9
   314  00FE46  07                 	db	7
   315  00FE47  36                 	db	54
   316  00FE48  49                 	db	73
   317  00FE49  49                 	db	73
   318  00FE4A  49                 	db	73
   319  00FE4B  36                 	db	54
   320  00FE4C  46                 	db	70
   321  00FE4D  49                 	db	73
   322  00FE4E  49                 	db	73
   323  00FE4F  29                 	db	41
   324  00FE50  1E                 	db	30
   325  00FE51  00                 	db	0
   326  00FE52  00                 	db	0
   327  00FE53  14                 	db	20
   328  00FE54  00                 	db	0
   329  00FE55  00                 	db	0
   330  00FE56  00                 	db	0
   331  00FE57  40                 	db	64
   332  00FE58  34                 	db	52
   333  00FE59  00                 	db	0
   334  00FE5A  00                 	db	0
   335  00FE5B  00                 	db	0
   336  00FE5C  08                 	db	8
   337  00FE5D  14                 	db	20
   338  00FE5E  22                 	db	34
   339  00FE5F  41                 	db	65
   340  00FE60  14                 	db	20
   341  00FE61  14                 	db	20
   342  00FE62  14                 	db	20
   343  00FE63  14                 	db	20
   344  00FE64  14                 	db	20
   345  00FE65  00                 	db	0
   346  00FE66  41                 	db	65
   347  00FE67  22                 	db	34
   348  00FE68  14                 	db	20
   349  00FE69  08                 	db	8
   350  00FE6A  02                 	db	2
   351  00FE6B  01                 	db	1
   352  00FE6C  59                 	db	89
   353  00FE6D  09                 	db	9
   354  00FE6E  06                 	db	6
   355  00FE6F  3E                 	db	62
   356  00FE70  41                 	db	65
   357  00FE71  5D                 	db	93
   358  00FE72  59                 	db	89
   359  00FE73  4E                 	db	78
   360  00FE74  7C                 	db	124
   361  00FE75  12                 	db	18
   362  00FE76  11                 	db	17
   363  00FE77  12                 	db	18
   364  00FE78  7C                 	db	124
   365  00FE79  7F                 	db	127
   366  00FE7A  49                 	db	73
   367  00FE7B  49                 	db	73
   368  00FE7C  49                 	db	73
   369  00FE7D  36                 	db	54
   370  00FE7E  3E                 	db	62
   371  00FE7F  41                 	db	65
   372  00FE80  41                 	db	65
   373  00FE81  41                 	db	65
   374  00FE82  22                 	db	34
   375  00FE83  7F                 	db	127
   376  00FE84  41                 	db	65
   377  00FE85  41                 	db	65
   378  00FE86  41                 	db	65
   379  00FE87  3E                 	db	62
   380  00FE88  7F                 	db	127
   381  00FE89  49                 	db	73
   382  00FE8A  49                 	db	73
   383  00FE8B  49                 	db	73
   384  00FE8C  41                 	db	65
   385  00FE8D  7F                 	db	127
   386  00FE8E  09                 	db	9
   387  00FE8F  09                 	db	9
   388  00FE90  09                 	db	9
   389  00FE91  01                 	db	1
   390  00FE92  3E                 	db	62
   391  00FE93  41                 	db	65
   392  00FE94  41                 	db	65
   393  00FE95  51                 	db	81
   394  00FE96  73                 	db	115
   395  00FE97  7F                 	db	127
   396  00FE98  08                 	db	8
   397  00FE99  08                 	db	8
   398  00FE9A  08                 	db	8
   399  00FE9B  7F                 	db	127
   400  00FE9C  00                 	db	0
   401  00FE9D  41                 	db	65
   402  00FE9E  7F                 	db	127
   403  00FE9F  41                 	db	65
   404  00FEA0  00                 	db	0
   405  00FEA1  20                 	db	32
   406  00FEA2  40                 	db	64
   407  00FEA3  41                 	db	65
   408  00FEA4  3F                 	db	63
   409  00FEA5  01                 	db	1
   410  00FEA6  7F                 	db	127
   411  00FEA7  08                 	db	8
   412  00FEA8  14                 	db	20
   413  00FEA9  22                 	db	34
   414  00FEAA  41                 	db	65
   415  00FEAB  7F                 	db	127
   416  00FEAC  40                 	db	64
   417  00FEAD  40                 	db	64
   418  00FEAE  40                 	db	64
   419  00FEAF  40                 	db	64
   420  00FEB0  7F                 	db	127
   421  00FEB1  02                 	db	2
   422  00FEB2  1C                 	db	28
   423  00FEB3  02                 	db	2
   424  00FEB4  7F                 	db	127
   425  00FEB5  7F                 	db	127
   426  00FEB6  04                 	db	4
   427  00FEB7  08                 	db	8
   428  00FEB8  10                 	db	16
   429  00FEB9  7F                 	db	127
   430  00FEBA  3E                 	db	62
   431  00FEBB  41                 	db	65
   432  00FEBC  41                 	db	65
   433  00FEBD  41                 	db	65
   434  00FEBE  3E                 	db	62
   435  00FEBF  7F                 	db	127
   436  00FEC0  09                 	db	9
   437  00FEC1  09                 	db	9
   438  00FEC2  09                 	db	9
   439  00FEC3  06                 	db	6
   440  00FEC4  3E                 	db	62
   441  00FEC5  41                 	db	65
   442  00FEC6  51                 	db	81
   443  00FEC7  21                 	db	33
   444  00FEC8  5E                 	db	94
   445  00FEC9  7F                 	db	127
   446  00FECA  09                 	db	9
   447  00FECB  19                 	db	25
   448  00FECC  29                 	db	41
   449  00FECD  46                 	db	70
   450  00FECE                     __end_of_font:
   451                           	opt stack 0
   452  00FECE                     _font2:
   453                           	opt stack 0
   454  00FECE  26                 	db	38
   455  00FECF  49                 	db	73
   456  00FED0  49                 	db	73
   457  00FED1  49                 	db	73
   458  00FED2  32                 	db	50
   459  00FED3  03                 	db	3
   460  00FED4  01                 	db	1
   461  00FED5  7F                 	db	127
   462  00FED6  01                 	db	1
   463  00FED7  03                 	db	3
   464  00FED8  3F                 	db	63
   465  00FED9  40                 	db	64
   466  00FEDA  40                 	db	64
   467  00FEDB  40                 	db	64
   468  00FEDC  3F                 	db	63
   469  00FEDD  1F                 	db	31
   470  00FEDE  20                 	db	32
   471  00FEDF  40                 	db	64
   472  00FEE0  20                 	db	32
   473  00FEE1  1F                 	db	31
   474  00FEE2  3F                 	db	63
   475  00FEE3  40                 	db	64
   476  00FEE4  38                 	db	56
   477  00FEE5  40                 	db	64
   478  00FEE6  3F                 	db	63
   479  00FEE7  63                 	db	99
   480  00FEE8  14                 	db	20
   481  00FEE9  08                 	db	8
   482  00FEEA  14                 	db	20
   483  00FEEB  63                 	db	99
   484  00FEEC  03                 	db	3
   485  00FEED  04                 	db	4
   486  00FEEE  78                 	db	120
   487  00FEEF  04                 	db	4
   488  00FEF0  03                 	db	3
   489  00FEF1  61                 	db	97
   490  00FEF2  59                 	db	89
   491  00FEF3  49                 	db	73
   492  00FEF4  4D                 	db	77
   493  00FEF5  43                 	db	67
   494  00FEF6  00                 	db	0
   495  00FEF7  7F                 	db	127
   496  00FEF8  41                 	db	65
   497  00FEF9  41                 	db	65
   498  00FEFA  41                 	db	65
   499  00FEFB  02                 	db	2
   500  00FEFC  04                 	db	4
   501  00FEFD  08                 	db	8
   502  00FEFE  10                 	db	16
   503  00FEFF  20                 	db	32
   504  00FF00  00                 	db	0
   505  00FF01  41                 	db	65
   506  00FF02  41                 	db	65
   507  00FF03  41                 	db	65
   508  00FF04  7F                 	db	127
   509  00FF05  04                 	db	4
   510  00FF06  02                 	db	2
   511  00FF07  01                 	db	1
   512  00FF08  02                 	db	2
   513  00FF09  04                 	db	4
   514  00FF0A  40                 	db	64
   515  00FF0B  40                 	db	64
   516  00FF0C  40                 	db	64
   517  00FF0D  40                 	db	64
   518  00FF0E  40                 	db	64
   519  00FF0F  00                 	db	0
   520  00FF10  03                 	db	3
   521  00FF11  07                 	db	7
   522  00FF12  08                 	db	8
   523  00FF13  00                 	db	0
   524  00FF14  20                 	db	32
   525  00FF15  54                 	db	84
   526  00FF16  54                 	db	84
   527  00FF17  78                 	db	120
   528  00FF18  40                 	db	64
   529  00FF19  7F                 	db	127
   530  00FF1A  28                 	db	40
   531  00FF1B  44                 	db	68
   532  00FF1C  44                 	db	68
   533  00FF1D  38                 	db	56
   534  00FF1E  38                 	db	56
   535  00FF1F  44                 	db	68
   536  00FF20  44                 	db	68
   537  00FF21  44                 	db	68
   538  00FF22  28                 	db	40
   539  00FF23  38                 	db	56
   540  00FF24  44                 	db	68
   541  00FF25  44                 	db	68
   542  00FF26  28                 	db	40
   543  00FF27  7F                 	db	127
   544  00FF28  38                 	db	56
   545  00FF29  54                 	db	84
   546  00FF2A  54                 	db	84
   547  00FF2B  54                 	db	84
   548  00FF2C  18                 	db	24
   549  00FF2D  00                 	db	0
   550  00FF2E  08                 	db	8
   551  00FF2F  7E                 	db	126
   552  00FF30  09                 	db	9
   553  00FF31  02                 	db	2
   554  00FF32  18                 	db	24
   555  00FF33  A4                 	db	164
   556  00FF34  A4                 	db	164
   557  00FF35  9C                 	db	156
   558  00FF36  78                 	db	120
   559  00FF37  7F                 	db	127
   560  00FF38  08                 	db	8
   561  00FF39  04                 	db	4
   562  00FF3A  04                 	db	4
   563  00FF3B  78                 	db	120
   564  00FF3C  00                 	db	0
   565  00FF3D  44                 	db	68
   566  00FF3E  7D                 	db	125
   567  00FF3F  40                 	db	64
   568  00FF40  00                 	db	0
   569  00FF41  20                 	db	32
   570  00FF42  40                 	db	64
   571  00FF43  40                 	db	64
   572  00FF44  3D                 	db	61
   573  00FF45  00                 	db	0
   574  00FF46  7F                 	db	127
   575  00FF47  10                 	db	16
   576  00FF48  28                 	db	40
   577  00FF49  44                 	db	68
   578  00FF4A  00                 	db	0
   579  00FF4B  00                 	db	0
   580  00FF4C  41                 	db	65
   581  00FF4D  7F                 	db	127
   582  00FF4E  40                 	db	64
   583  00FF4F  00                 	db	0
   584  00FF50  7C                 	db	124
   585  00FF51  04                 	db	4
   586  00FF52  78                 	db	120
   587  00FF53  04                 	db	4
   588  00FF54  78                 	db	120
   589  00FF55  7C                 	db	124
   590  00FF56  08                 	db	8
   591  00FF57  04                 	db	4
   592  00FF58  04                 	db	4
   593  00FF59  78                 	db	120
   594  00FF5A  38                 	db	56
   595  00FF5B  44                 	db	68
   596  00FF5C  44                 	db	68
   597  00FF5D  44                 	db	68
   598  00FF5E  38                 	db	56
   599  00FF5F  FC                 	db	252
   600  00FF60  18                 	db	24
   601  00FF61  24                 	db	36
   602  00FF62  24                 	db	36
   603  00FF63  18                 	db	24
   604  00FF64  18                 	db	24
   605  00FF65  24                 	db	36
   606  00FF66  24                 	db	36
   607  00FF67  18                 	db	24
   608  00FF68  FC                 	db	252
   609  00FF69  7C                 	db	124
   610  00FF6A  08                 	db	8
   611  00FF6B  04                 	db	4
   612  00FF6C  04                 	db	4
   613  00FF6D  08                 	db	8
   614  00FF6E  48                 	db	72
   615  00FF6F  54                 	db	84
   616  00FF70  54                 	db	84
   617  00FF71  54                 	db	84
   618  00FF72  24                 	db	36
   619  00FF73  04                 	db	4
   620  00FF74  04                 	db	4
   621  00FF75  3F                 	db	63
   622  00FF76  44                 	db	68
   623  00FF77  24                 	db	36
   624  00FF78  3C                 	db	60
   625  00FF79  40                 	db	64
   626  00FF7A  40                 	db	64
   627  00FF7B  20                 	db	32
   628  00FF7C  7C                 	db	124
   629  00FF7D  1C                 	db	28
   630  00FF7E  20                 	db	32
   631  00FF7F  40                 	db	64
   632  00FF80  20                 	db	32
   633  00FF81  1C                 	db	28
   634  00FF82  3C                 	db	60
   635  00FF83  40                 	db	64
   636  00FF84  30                 	db	48
   637  00FF85  40                 	db	64
   638  00FF86  3C                 	db	60
   639  00FF87  44                 	db	68
   640  00FF88  28                 	db	40
   641  00FF89  10                 	db	16
   642  00FF8A  28                 	db	40
   643  00FF8B  44                 	db	68
   644  00FF8C  4C                 	db	76
   645  00FF8D  90                 	db	144
   646  00FF8E  90                 	db	144
   647  00FF8F  90                 	db	144
   648  00FF90  7C                 	db	124
   649  00FF91  44                 	db	68
   650  00FF92  64                 	db	100
   651  00FF93  54                 	db	84
   652  00FF94  4C                 	db	76
   653  00FF95  44                 	db	68
   654  00FF96  00                 	db	0
   655  00FF97  08                 	db	8
   656  00FF98  36                 	db	54
   657  00FF99  41                 	db	65
   658  00FF9A  00                 	db	0
   659  00FF9B  00                 	db	0
   660  00FF9C  00                 	db	0
   661  00FF9D  77                 	db	119
   662  00FF9E  00                 	db	0
   663  00FF9F  00                 	db	0
   664  00FFA0  00                 	db	0
   665  00FFA1  41                 	db	65
   666  00FFA2  36                 	db	54
   667  00FFA3  08                 	db	8
   668  00FFA4  00                 	db	0
   669  00FFA5  02                 	db	2
   670  00FFA6  01                 	db	1
   671  00FFA7  02                 	db	2
   672  00FFA8  04                 	db	4
   673  00FFA9  02                 	db	2
   674  00FFAA                     __end_of_font2:
   675                           	opt stack 0
   676  0000                     _ADCON0	set	4034
   677  0000                     _ADCON0bits	set	4034
   678  0000                     _ADCON1	set	4033
   679  0000                     _ADCON2	set	4032
   680  0000                     _ADRESH	set	4036
   681  0000                     _ADRESL	set	4035
   682  0000                     _CCP2CON	set	4026
   683  0000                     _CCPR2L	set	4027
   684  0000                     _INTCON2bits	set	4081
   685  0000                     _INTCON3bits	set	4080
   686  0000                     _INTCONbits	set	4082
   687  0000                     _OSCCON	set	4051
   688  0000                     _PIE1bits	set	3997
   689  0000                     _PIR1bits	set	3998
   690  0000                     _PIR2bits	set	4001
   691  0000                     _PORTAbits	set	3968
   692  0000                     _PORTCbits	set	3970
   693  0000                     _PORTDbits	set	3971
   694  0000                     _PORTEbits	set	3972
   695  0000                     _PR2	set	4043
   696  0000                     _RCSTA	set	4011
   697  0000                     _RCSTAbits	set	4011
   698  0000                     _SPBRG	set	4015
   699  0000                     _SPBRGH	set	4016
   700  0000                     _SSPBUF	set	4041
   701  0000                     _SSPCON1	set	4038
   702  0000                     _SSPSTAT	set	4039
   703  0000                     _SSPSTATbits	set	4039
   704  0000                     _T0CON	set	4053
   705  0000                     _T0CONbits	set	4053
   706  0000                     _T2CON	set	4042
   707  0000                     _T3CON	set	4017
   708  0000                     _T3CONbits	set	4017
   709  0000                     _TMR0H	set	4055
   710  0000                     _TMR0L	set	4054
   711  0000                     _TMR3H	set	4019
   712  0000                     _TMR3L	set	4018
   713  0000                     _TRISA	set	3986
   714  0000                     _TRISB	set	3987
   715  0000                     _TRISC	set	3988
   716  0000                     _TRISCbits	set	3988
   717  0000                     _TRISD	set	3989
   718  0000                     _TRISE	set	3990
   719  0000                     _TXREG	set	4013
   720  0000                     _TXSTA	set	4012
   721  0000                     _TXSTAbits	set	4012
   722  0000                     _RBPU	set	32655
   723  0000                     _TRMT	set	32097
   724  00FFAA                     STR_5:
   725  00FFAA  4E                 	db	78	;'N'
   726  00FFAB  53                 	db	83	;'S'
   727  00FFAC  50                 	db	80	;'P'
   728  00FFAD  20                 	db	32
   729  00FFAE  4E                 	db	78	;'N'
   730  00FFAF  53                 	db	83	;'S'
   731  00FFB0  4C                 	db	76	;'L'
   732  00FFB1  54                 	db	84	;'T'
   733  00FFB2  20                 	db	32
   734  00FFB3  45                 	db	69	;'E'
   735  00FFB4  57                 	db	87	;'W'
   736  00FFB5  50                 	db	80	;'P'
   737  00FFB6  20                 	db	32
   738  00FFB7  45                 	db	69	;'E'
   739  00FFB8  57                 	db	87	;'W'
   740  00FFB9  4C                 	db	76	;'L'
   741  00FFBA  54                 	db	84	;'T'
   742  00FFBB  20                 	db	32
   743  00FFBC  52                 	db	82	;'R'
   744  00FFBD  20                 	db	32
   745  00FFBE  53                 	db	83	;'S'
   746  00FFBF  00                 	db	0
   747  00FFC0                     STR_6:
   748  00FFC0  4E                 	db	78	;'N'
   749  00FFC1  4F                 	db	79	;'O'
   750  00FFC2  52                 	db	82	;'R'
   751  00FFC3  54                 	db	84	;'T'
   752  00FFC4  48                 	db	72	;'H'
   753  00FFC5  2F                 	db	47
   754  00FFC6  53                 	db	83	;'S'
   755  00FFC7  4F                 	db	79	;'O'
   756  00FFC8  55                 	db	85	;'U'
   757  00FFC9  54                 	db	84	;'T'
   758  00FFCA  48                 	db	72	;'H'
   759  00FFCB  00                 	db	0
   760  00FFCC                     STR_8:
   761  00FFCC  45                 	db	69	;'E'
   762  00FFCD  41                 	db	65	;'A'
   763  00FFCE  53                 	db	83	;'S'
   764  00FFCF  54                 	db	84	;'T'
   765  00FFD0  2F                 	db	47
   766  00FFD1  57                 	db	87	;'W'
   767  00FFD2  45                 	db	69	;'E'
   768  00FFD3  53                 	db	83	;'S'
   769  00FFD4  54                 	db	84	;'T'
   770  00FFD5  00                 	db	0
   771  00FFD6                     STR_7:
   772  00FFD6  4E                 	db	78	;'N'
   773  00FFD7  2F                 	db	47
   774  00FFD8  53                 	db	83	;'S'
   775  00FFD9  20                 	db	32
   776  00FFDA  4C                 	db	76	;'L'
   777  00FFDB  54                 	db	84	;'T'
   778  00FFDC  00                 	db	0
   779  00FFDD                     STR_9:
   780  00FFDD  45                 	db	69	;'E'
   781  00FFDE  2F                 	db	47
   782  00FFDF  57                 	db	87	;'W'
   783  00FFE0  20                 	db	32
   784  00FFE1  4C                 	db	76	;'L'
   785  00FFE2  54                 	db	84	;'T'
   786  00FFE3  00                 	db	0
   787  00FFE4                     STR_1:
   788  00FFE4  4D                 	db	77	;'M'
   789  00FFE5  6F                 	db	111	;'o'
   790  00FFE6  64                 	db	100	;'d'
   791  00FFE7  65                 	db	101	;'e'
   792  00FFE8  3A                 	db	58	;':'
   793  00FFE9  00                 	db	0
   794  00FFEA                     STR_2:
   795  00FFEA  4C                 	db	76	;'L'
   796  00FFEB  53                 	db	83	;'S'
   797  00FFEC  56                 	db	86	;'V'
   798  00FFED  3A                 	db	58	;':'
   799  00FFEE  00                 	db	0
   800  00FFEF                     STR_10:
   801  00FFEF  50                 	db	80	;'P'
   802  00FFF0  4E                 	db	78	;'N'
   803  00FFF1  53                 	db	83	;'S'
   804  00FFF2  00                 	db	0
   805  00FFF3                     STR_11:
   806  00FFF3  50                 	db	80	;'P'
   807  00FFF4  45                 	db	69	;'E'
   808  00FFF5  57                 	db	87	;'W'
   809  00FFF6  00                 	db	0
   810  00FFF7                     STR_3:
   811  00FFF7  2D                 	db	45
   812  00FFF8  44                 	db	68	;'D'
   813  00FFF9  00                 	db	0
   814  00FFFA                     STR_13:
   815  00FFFA  20                 	db	32
   816  00FFFB  00                 	db	0
   817  00FFFC                     STR_4:
   818  00FFFC  2A                 	db	42
   819  00FFFD  00                 	db	0
   820  0000                     
   821                           ; #config settings
   822  00FFFE  00                 	db	0	; dummy byte at the end
   823  0000                     
   824                           	psect	cinit
   825  0022C8                     __pcinit:
   826                           	opt stack 0
   827  0022C8                     start_initialization:
   828                           	opt stack 0
   829  0022C8                     __initialization:
   830                           	opt stack 0
   831                           
   832                           ; Clear objects allocated to BANK0 (34 bytes)
   833  0022C8  EE00  F0AA         	lfsr	0,__pbssBANK0
   834  0022CC  0E22               	movlw	34
   835  0022CE                     clear_0:
   836  0022CE  6AEE               	clrf	postinc0,c
   837  0022D0  06E8               	decf	wreg,f,c
   838  0022D2  E1FD               	bnz	clear_0
   839                           
   840                           ; Clear objects allocated to COMRAM (24 bytes)
   841  0022D4  EE00  F045         	lfsr	0,__pbssCOMRAM
   842  0022D8  0E18               	movlw	24
   843  0022DA                     clear_1:
   844  0022DA  6AEE               	clrf	postinc0,c
   845  0022DC  06E8               	decf	wreg,f,c
   846  0022DE  E1FD               	bnz	clear_1
   847                           
   848                           ; Initialize objects allocated to BANK0 (42 bytes)
   849                           ; load TBLPTR registers with __pidataBANK0
   850  0022E0  0E8A               	movlw	low __pidataBANK0
   851  0022E2  6EF6               	movwf	tblptrl,c
   852  0022E4  0E27               	movlw	high __pidataBANK0
   853  0022E6  6EF7               	movwf	tblptrh,c
   854  0022E8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   855  0022EA  6EF8               	movwf	tblptru,c
   856  0022EC  EE00  F080         	lfsr	0,__pdataBANK0
   857  0022F0  EE10 F02A          	lfsr	1,42
   858  0022F4                     copy_data0:
   859  0022F4  0009               	tblrd		*+
   860  0022F6  CFF5 FFEE          	movff	tablat,postinc0
   861  0022FA  50E5               	movf	postdec1,w,c
   862  0022FC  50E1               	movf	fsr1l,w,c
   863  0022FE  E1FA               	bnz	copy_data0
   864                           
   865                           ; Initialize objects allocated to COMRAM (21 bytes)
   866                           ; load TBLPTR registers with __pidataCOMRAM
   867  002300  0EB4               	movlw	low __pidataCOMRAM
   868  002302  6EF6               	movwf	tblptrl,c
   869  002304  0E28               	movlw	high __pidataCOMRAM
   870  002306  6EF7               	movwf	tblptrh,c
   871  002308  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   872  00230A  6EF8               	movwf	tblptru,c
   873  00230C  EE00  F05D         	lfsr	0,__pdataCOMRAM
   874  002310  EE10 F015          	lfsr	1,21
   875  002314                     copy_data1:
   876  002314  0009               	tblrd		*+
   877  002316  CFF5 FFEE          	movff	tablat,postinc0
   878  00231A  50E5               	movf	postdec1,w,c
   879  00231C  50E1               	movf	fsr1l,w,c
   880  00231E  E1FA               	bnz	copy_data1
   881  002320                     end_of_initialization:
   882                           	opt stack 0
   883  002320                     __end_of__initialization:
   884                           	opt stack 0
   885  002320  0E00               	movlw	low (__Lmediumconst shr (0+16))
   886  002322  6EF8               	movwf	tblptru,c
   887  002324  0100               	movlb	0
   888  002326  EFD2  F00E         	goto	_main	;jump to C main() function
   889                           tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postdec1	equ	0xFE5
   896                           fsr1l	equ	0xFE1
   897                           
   898                           	psect	bssCOMRAM
   899  000045                     __pbssCOMRAM:
   900                           	opt stack 0
   901  000045                     _nbr:
   902                           	opt stack 0
   903  000045                     	ds	2
   904  000047                     _txt:
   905                           	opt stack 0
   906  000047                     	ds	2
   907  000049                     _Count:
   908                           	opt stack 0
   909  000049                     	ds	1
   910  00004A                     _EW_PED_SW:
   911                           	opt stack 0
   912  00004A                     	ds	1
   913  00004B                     _Flashing_Request:
   914                           	opt stack 0
   915  00004B                     	ds	1
   916  00004C                     _Flashing_Status:
   917                           	opt stack 0
   918  00004C                     	ds	1
   919  00004D                     _INT0_Flag:
   920                           	opt stack 0
   921  00004D                     	ds	1
   922  00004E                     _INT1_Flag:
   923                           	opt stack 0
   924  00004E                     	ds	1
   925  00004F                     _INT2_Flag:
   926                           	opt stack 0
   927  00004F                     	ds	1
   928  000050                     _Light_Sensor:
   929                           	opt stack 0
   930  000050                     	ds	1
   931  000051                     _MODE:
   932                           	opt stack 0
   933  000051                     	ds	1
   934  000052                     _NS_PED_SW:
   935                           	opt stack 0
   936  000052                     	ds	1
   937  000053                     _PED_Count:
   938                           	opt stack 0
   939  000053                     	ds	1
   940  000054                     _SW_EWLT:
   941                           	opt stack 0
   942  000054                     	ds	1
   943  000055                     _SW_EWPED:
   944                           	opt stack 0
   945  000055                     	ds	1
   946  000056                     _SW_NSLT:
   947                           	opt stack 0
   948  000056                     	ds	1
   949  000057                     _SW_NSPED:
   950                           	opt stack 0
   951  000057                     	ds	1
   952  000058                     __tft_type:
   953                           	opt stack 0
   954  000058                     	ds	1
   955  000059                     _colstart:
   956                           	opt stack 0
   957  000059                     	ds	1
   958  00005A                     _dir:
   959                           	opt stack 0
   960  00005A                     	ds	1
   961  00005B                     _direction:
   962                           	opt stack 0
   963  00005B                     	ds	1
   964  00005C                     _rowstart:
   965                           	opt stack 0
   966  00005C                     	ds	1
   967                           tblptru	equ	0xFF8
   968                           tblptrh	equ	0xFF7
   969                           tblptrl	equ	0xFF6
   970                           tablat	equ	0xFF5
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           postdec1	equ	0xFE5
   974                           fsr1l	equ	0xFE1
   975                           
   976                           	psect	dataCOMRAM
   977  00005D                     __pdataCOMRAM:
   978                           	opt stack 0
   979  00005D                     _wrap:
   980                           	opt stack 0
   981  00005D                     	ds	1
   982  00005E                     _EW_Count:
   983                           	opt stack 0
   984  00005E                     	ds	3
   985  000061                     _Light_Sensor_Mode_Txt:
   986                           	opt stack 0
   987  000061                     	ds	3
   988  000064                     _Act_Mode_Txt:
   989                           	opt stack 0
   990  000064                     	ds	2
   991  000066                     _FlashingR_Txt:
   992                           	opt stack 0
   993  000066                     	ds	2
   994  000068                     _FlashingS_Txt:
   995                           	opt stack 0
   996  000068                     	ds	2
   997  00006A                     _SW_EWLT_Txt:
   998                           	opt stack 0
   999  00006A                     	ds	2
  1000  00006C                     _SW_EWPED_Txt:
  1001                           	opt stack 0
  1002  00006C                     	ds	2
  1003  00006E                     _SW_NSLT_Txt:
  1004                           	opt stack 0
  1005  00006E                     	ds	2
  1006  000070                     _SW_NSPED_Txt:
  1007                           	opt stack 0
  1008  000070                     	ds	2
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           postdec1	equ	0xFE5
  1016                           fsr1l	equ	0xFE1
  1017                           
  1018                           	psect	bssBANK0
  1019  0000AA                     __pbssBANK0:
  1020                           	opt stack 0
  1021  0000AA                     _volt:
  1022                           	opt stack 0
  1023  0000AA                     	ds	3
  1024  0000AD                     _buffer:
  1025                           	opt stack 0
  1026  0000AD                     	ds	31
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           postdec1	equ	0xFE5
  1034                           fsr1l	equ	0xFE1
  1035                           
  1036                           	psect	dataBANK0
  1037  000080                     __pdataBANK0:
  1038                           	opt stack 0
  1039  000080                     _Timing_Txt:
  1040                           	opt stack 0
  1041  000080                     	ds	22
  1042  000096                     _Light_Sensor_Voltage_Txt:
  1043                           	opt stack 0
  1044  000096                     	ds	5
  1045  00009B                     _EWLT_Count:
  1046                           	opt stack 0
  1047  00009B                     	ds	3
  1048  00009E                     _NSLT_Count:
  1049                           	opt stack 0
  1050  00009E                     	ds	3
  1051  0000A1                     _NS_Count:
  1052                           	opt stack 0
  1053  0000A1                     	ds	3
  1054  0000A4                     _PED_EW_Count:
  1055                           	opt stack 0
  1056  0000A4                     	ds	3
  1057  0000A7                     _PED_NS_Count:
  1058                           	opt stack 0
  1059  0000A7                     	ds	3
  1060                           tblptru	equ	0xFF8
  1061                           tblptrh	equ	0xFF7
  1062                           tblptrl	equ	0xFF6
  1063                           tablat	equ	0xFF5
  1064                           postinc0	equ	0xFEE
  1065                           wreg	equ	0xFE8
  1066                           postdec1	equ	0xFE5
  1067                           fsr1l	equ	0xFE1
  1068                           
  1069                           	psect	cstackBANK0
  1070  0000CC                     __pcstackBANK0:
  1071                           	opt stack 0
  1072  0000CC                     drawtext@x:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x0
  1076  0000CC                     	ds	1
  1077  0000CD                     drawtext@textsize:
  1078                           	opt stack 0
  1079                           
  1080                           ; 2 bytes @ 0x1
  1081  0000CD                     	ds	2
  1082  0000CF                     drawtext@i:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x3
  1086  0000CF                     	ds	2
  1087  0000D1                     drawtext@cursor_y:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x5
  1091  0000D1                     	ds	1
  1092  0000D2                     drawtext@cursor_x:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x6
  1096  0000D2                     	ds	1
  1097  0000D3                     update_LCD_misc@nStep:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x7
  1101  0000D3                     	ds	2
  1102  0000D5                     update_LCD_misc@volt:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0x9
  1106  0000D5                     	ds	3
  1107  0000D8                     PED_Control@i:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0xC
  1111  0000D8                     	ds	2
  1112  0000DA                     PED_Control@j:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0xE
  1116  0000DA                     	ds	2
  1117  0000DC                     PED_Control@direction:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x10
  1121  0000DC                     	ds	1
  1122                           tblptru	equ	0xFF8
  1123                           tblptrh	equ	0xFF7
  1124                           tblptrl	equ	0xFF6
  1125                           tablat	equ	0xFF5
  1126                           postinc0	equ	0xFEE
  1127                           wreg	equ	0xFE8
  1128                           postdec1	equ	0xFE5
  1129                           fsr1l	equ	0xFE1
  1130                           
  1131                           	psect	cstackCOMRAM
  1132  000001                     __pcstackCOMRAM:
  1133                           	opt stack 0
  1134  000001                     ??_chkisr:
  1135                           
  1136                           ; 0 bytes @ 0x0
  1137  000001                     	ds	14
  1138  00000F                     ?_get_full_ADC:
  1139                           	opt stack 0
  1140  00000F                     ?_strlen:
  1141                           	opt stack 0
  1142  00000F                     ?___wmul:
  1143                           	opt stack 0
  1144  00000F                     ?___awdiv:
  1145                           	opt stack 0
  1146  00000F                     ?___ftpack:
  1147                           	opt stack 0
  1148  00000F                     spiwrite@x:
  1149                           	opt stack 0
  1150  00000F                     OpenUSART@spbrg:
  1151                           	opt stack 0
  1152  00000F                     ___wmul@multiplier:
  1153                           	opt stack 0
  1154  00000F                     ___awdiv@dividend:
  1155                           	opt stack 0
  1156  00000F                     strcpy@to:
  1157                           	opt stack 0
  1158  00000F                     strlen@s:
  1159                           	opt stack 0
  1160  00000F                     ___ftpack@arg:
  1161                           	opt stack 0
  1162  00000F                     ___ftge@ff1:
  1163                           	opt stack 0
  1164                           
  1165                           ; 3 bytes @ 0xE
  1166  00000F                     	ds	1
  1167  000010                     spiwrite@spidata:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0xF
  1171  000010                     	ds	1
  1172  000011                     ??_get_full_ADC:
  1173  000011                     ??_strlen:
  1174  000011                     write_command@cmd_:
  1175                           	opt stack 0
  1176  000011                     write_data@data_:
  1177                           	opt stack 0
  1178  000011                     OpenUSART@config:
  1179                           	opt stack 0
  1180  000011                     ___wmul@multiplicand:
  1181                           	opt stack 0
  1182  000011                     ___awdiv@divisor:
  1183                           	opt stack 0
  1184  000011                     strcpy@from:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x10
  1188  000011                     	ds	1
  1189  000012                     setAddrWindow@y0:
  1190                           	opt stack 0
  1191  000012                     ___ftpack@exp:
  1192                           	opt stack 0
  1193  000012                     ___ftge@ff2:
  1194                           	opt stack 0
  1195                           
  1196                           ; 3 bytes @ 0x11
  1197  000012                     	ds	1
  1198  000013                     setAddrWindow@x1:
  1199                           	opt stack 0
  1200  000013                     ___awdiv@counter:
  1201                           	opt stack 0
  1202  000013                     ___ftpack@sign:
  1203                           	opt stack 0
  1204  000013                     get_full_ADC@result:
  1205                           	opt stack 0
  1206  000013                     ___wmul@product:
  1207                           	opt stack 0
  1208  000013                     strcpy@cp:
  1209                           	opt stack 0
  1210  000013                     strlen@cp:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x12
  1214  000013                     	ds	1
  1215  000014                     ??___ftpack:
  1216  000014                     setAddrWindow@y1:
  1217                           	opt stack 0
  1218  000014                     ___awdiv@sign:
  1219                           	opt stack 0
  1220                           
  1221                           ; 1 bytes @ 0x13
  1222  000014                     	ds	1
  1223  000015                     ??___ftge:
  1224  000015                     setAddrWindow@x0:
  1225                           	opt stack 0
  1226  000015                     delay_ms@ms:
  1227                           	opt stack 0
  1228  000015                     ___awdiv@quotient:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0x14
  1232  000015                     	ds	1
  1233  000016                     drawPixel@y:
  1234                           	opt stack 0
  1235  000016                     drawFastVLine@y:
  1236                           	opt stack 0
  1237  000016                     fillRectangle@y:
  1238                           	opt stack 0
  1239  000016                     drawFastHLine@y:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x15
  1243  000016                     	ds	1
  1244  000017                     ??_delay_ms:
  1245  000017                     ?___ftmul:
  1246                           	opt stack 0
  1247  000017                     ?___awtoft:
  1248                           	opt stack 0
  1249  000017                     drawFastVLine@h:
  1250                           	opt stack 0
  1251  000017                     fillRectangle@w:
  1252                           	opt stack 0
  1253  000017                     drawFastHLine@w:
  1254                           	opt stack 0
  1255  000017                     drawPixel@color:
  1256                           	opt stack 0
  1257  000017                     ___awtoft@c:
  1258                           	opt stack 0
  1259  000017                     ___ftmul@f1:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x16
  1263  000017                     	ds	1
  1264  000018                     fillRectangle@h:
  1265                           	opt stack 0
  1266  000018                     drawFastVLine@color:
  1267                           	opt stack 0
  1268  000018                     drawFastHLine@color:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x17
  1272  000018                     	ds	1
  1273  000019                     drawPixel@x:
  1274                           	opt stack 0
  1275  000019                     delay_ms@count:
  1276                           	opt stack 0
  1277  000019                     fillRectangle@color:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x18
  1281  000019                     	ds	1
  1282  00001A                     ??_drawFastVLine:
  1283  00001A                     ??_drawFastHLine:
  1284  00001A                     ___awtoft@sign:
  1285                           	opt stack 0
  1286  00001A                     drawCircle@x0:
  1287                           	opt stack 0
  1288  00001A                     ___ftmul@f2:
  1289                           	opt stack 0
  1290                           
  1291                           ; 3 bytes @ 0x19
  1292  00001A                     	ds	1
  1293  00001B                     ??_fillRectangle:
  1294  00001B                     ?___ftdiv:
  1295                           	opt stack 0
  1296  00001B                     ___ftdiv@f1:
  1297                           	opt stack 0
  1298                           
  1299                           ; 3 bytes @ 0x1A
  1300  00001B                     	ds	1
  1301  00001C                     drawCircle@y0:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x1B
  1305  00001C                     	ds	1
  1306  00001D                     ??___ftmul:
  1307                           
  1308                           ; 0 bytes @ 0x1C
  1309  00001D                     	ds	1
  1310  00001E                     drawFastVLine@hi:
  1311                           	opt stack 0
  1312  00001E                     drawFastHLine@hi:
  1313                           	opt stack 0
  1314  00001E                     drawCircle@r:
  1315                           	opt stack 0
  1316  00001E                     ___ftdiv@f2:
  1317                           	opt stack 0
  1318                           
  1319                           ; 3 bytes @ 0x1D
  1320  00001E                     	ds	1
  1321  00001F                     drawFastVLine@lo:
  1322                           	opt stack 0
  1323  00001F                     fillRectangle@hi:
  1324                           	opt stack 0
  1325  00001F                     drawFastHLine@lo:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x1E
  1329  00001F                     	ds	1
  1330  000020                     drawFastVLine@x:
  1331                           	opt stack 0
  1332  000020                     fillRectangle@lo:
  1333                           	opt stack 0
  1334  000020                     drawFastHLine@x:
  1335                           	opt stack 0
  1336  000020                     ___ftmul@exp:
  1337                           	opt stack 0
  1338  000020                     drawCircle@color:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x1F
  1342  000020                     	ds	1
  1343  000021                     ??___ftdiv:
  1344  000021                     fillRect@y:
  1345                           	opt stack 0
  1346  000021                     fillRectangle@x:
  1347                           	opt stack 0
  1348  000021                     fillCircleHelper@x0:
  1349                           	opt stack 0
  1350  000021                     drawRect@x:
  1351                           	opt stack 0
  1352  000021                     ___ftmul@f3_as_product:
  1353                           	opt stack 0
  1354                           
  1355                           ; 3 bytes @ 0x20
  1356  000021                     	ds	1
  1357  000022                     ??_drawCircle:
  1358  000022                     fillRect@w:
  1359                           	opt stack 0
  1360  000022                     fillScreen@color:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x21
  1364  000022                     	ds	1
  1365  000023                     fillRect@h:
  1366                           	opt stack 0
  1367  000023                     fillCircleHelper@y0:
  1368                           	opt stack 0
  1369  000023                     drawRect@y:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x22
  1373  000023                     	ds	1
  1374  000024                     ___ftdiv@cntr:
  1375                           	opt stack 0
  1376  000024                     ___ftmul@cntr:
  1377                           	opt stack 0
  1378  000024                     fillRect@color:
  1379                           	opt stack 0
  1380  000024                     drawCircle@ddF_x:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x23
  1384  000024                     	ds	1
  1385  000025                     ___ftmul@sign:
  1386                           	opt stack 0
  1387  000025                     fillCircleHelper@r:
  1388                           	opt stack 0
  1389  000025                     drawRect@w:
  1390                           	opt stack 0
  1391  000025                     ___ftdiv@f3:
  1392                           	opt stack 0
  1393                           
  1394                           ; 3 bytes @ 0x24
  1395  000025                     	ds	1
  1396  000026                     ??_fillRect:
  1397  000026                     ?___fttol:
  1398                           	opt stack 0
  1399  000026                     drawCircle@ddF_y:
  1400                           	opt stack 0
  1401  000026                     ___fttol@f1:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x25
  1405  000026                     	ds	1
  1406  000027                     fillCircleHelper@cornername:
  1407                           	opt stack 0
  1408  000027                     drawRect@h:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x26
  1412  000027                     	ds	1
  1413  000028                     ___ftdiv@exp:
  1414                           	opt stack 0
  1415  000028                     drawCircle@f:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x27
  1419  000028                     	ds	1
  1420  000029                     fillRect@x:
  1421                           	opt stack 0
  1422  000029                     ___ftdiv@sign:
  1423                           	opt stack 0
  1424  000029                     fillCircleHelper@delta:
  1425                           	opt stack 0
  1426  000029                     drawRect@color:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x28
  1430  000029                     	ds	1
  1431  00002A                     ??___fttol:
  1432  00002A                     ?_Read_Volt:
  1433                           	opt stack 0
  1434  00002A                     fillRect@i:
  1435                           	opt stack 0
  1436  00002A                     drawCircle@x:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x29
  1440  00002A                     	ds	1
  1441  00002B                     ??_drawRect:
  1442  00002B                     fillCircleHelper@color:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x2A
  1446  00002B                     	ds	1
  1447  00002C                     drawChar@y:
  1448                           	opt stack 0
  1449  00002C                     drawCircle@y:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x2B
  1453  00002C                     	ds	1
  1454  00002D                     ??_fillCircleHelper:
  1455  00002D                     drawChar@c:
  1456                           	opt stack 0
  1457  00002D                     Read_Volt@volt:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0x2C
  1461  00002D                     	ds	1
  1462  00002E                     drawChar@color:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x2D
  1466  00002E                     	ds	1
  1467  00002F                     ___fttol@sign1:
  1468                           	opt stack 0
  1469  00002F                     fillCircleHelper@ddF_x:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x2E
  1473  00002F                     	ds	1
  1474  000030                     Read_Volt@ADC_Channel:
  1475                           	opt stack 0
  1476  000030                     drawChar@bg:
  1477                           	opt stack 0
  1478  000030                     ___fttol@lval:
  1479                           	opt stack 0
  1480                           
  1481                           ; 4 bytes @ 0x2F
  1482  000030                     	ds	1
  1483  000031                     fillCircleHelper@ddF_y:
  1484                           	opt stack 0
  1485  000031                     Read_Volt@nStep:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x30
  1489  000031                     	ds	1
  1490  000032                     drawChar@size:
  1491                           	opt stack 0
  1492                           
  1493                           ; 1 bytes @ 0x31
  1494  000032                     	ds	1
  1495  000033                     drawChar@line:
  1496                           	opt stack 0
  1497  000033                     fillCircleHelper@f:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x32
  1501  000033                     	ds	1
  1502  000034                     drawChar@x:
  1503                           	opt stack 0
  1504  000034                     ___fttol@exp1:
  1505                           	opt stack 0
  1506                           
  1507                           ; 1 bytes @ 0x33
  1508  000034                     	ds	1
  1509  000035                     ?___awmod:
  1510                           	opt stack 0
  1511  000035                     drawChar@j:
  1512                           	opt stack 0
  1513  000035                     fillCircleHelper@x:
  1514                           	opt stack 0
  1515  000035                     ___awmod@dividend:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x34
  1519  000035                     	ds	1
  1520  000036                     drawChar@i:
  1521                           	opt stack 0
  1522                           
  1523                           ; 1 bytes @ 0x35
  1524  000036                     	ds	1
  1525  000037                     drawtext@y:
  1526                           	opt stack 0
  1527  000037                     fillCircleHelper@y:
  1528                           	opt stack 0
  1529  000037                     ___awmod@divisor:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x36
  1533  000037                     	ds	1
  1534  000038                     drawtext@_text:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x37
  1538  000038                     	ds	1
  1539  000039                     ___awmod@counter:
  1540                           	opt stack 0
  1541  000039                     fillCircle@x0:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x38
  1545  000039                     	ds	1
  1546  00003A                     ___awmod@sign:
  1547                           	opt stack 0
  1548  00003A                     drawtext@color:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x39
  1552  00003A                     	ds	1
  1553  00003B                     fillCircle@y0:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x3A
  1557  00003B                     	ds	1
  1558  00003C                     drawtext@bg:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x3B
  1562  00003C                     	ds	1
  1563  00003D                     fillCircle@r:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x3C
  1567  00003D                     	ds	1
  1568  00003E                     drawtext@size:
  1569                           	opt stack 0
  1570                           
  1571                           ; 1 bytes @ 0x3D
  1572  00003E                     	ds	1
  1573  00003F                     ??_drawtext:
  1574  00003F                     fillCircle@color:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x3E
  1578  00003F                     	ds	2
  1579  000041                     update_LCD_color@color:
  1580                           	opt stack 0
  1581  000041                     update_LCD_PED_Count@count:
  1582                           	opt stack 0
  1583  000041                     update_LCD_count@count:
  1584                           	opt stack 0
  1585                           
  1586                           ; 1 bytes @ 0x40
  1587  000041                     	ds	1
  1588  000042                     update_LCD_color@direction:
  1589                           	opt stack 0
  1590  000042                     update_LCD_PED_Count@direction:
  1591                           	opt stack 0
  1592  000042                     update_LCD_count@direction:
  1593                           	opt stack 0
  1594                           
  1595                           ; 1 bytes @ 0x41
  1596  000042                     	ds	1
  1597  000043                     update_LCD_color@Circle_Y:
  1598                           	opt stack 0
  1599  000043                     PED_Control@num_sec:
  1600                           	opt stack 0
  1601  000043                     Wait_N_Seconds@seconds:
  1602                           	opt stack 0
  1603                           
  1604                           ; 1 bytes @ 0x42
  1605  000043                     	ds	1
  1606  000044                     Set_NS@color:
  1607                           	opt stack 0
  1608  000044                     Set_NS_LT@color:
  1609                           	opt stack 0
  1610  000044                     Set_EW@color:
  1611                           	opt stack 0
  1612  000044                     Set_EW_LT@color:
  1613                           	opt stack 0
  1614  000044                     Wait_N_Seconds@I:
  1615                           	opt stack 0
  1616                           
  1617                           ; 1 bytes @ 0x43
  1618  000044                     	ds	1
  1619  000045                     tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           postinc0	equ	0xFEE
  1624                           wreg	equ	0xFE8
  1625                           postdec1	equ	0xFE5
  1626                           fsr1l	equ	0xFE1
  1627                           
  1628                           ; 0 bytes @ 0x44
  1629 ;;
  1630 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1631 ;;
  1632 ;; *************** function _main *****************
  1633 ;; Defined at:
  1634 ;;		line 56 in file "lab9.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;		None
  1639 ;; Return value:  Size  Location     Type
  1640 ;;		None               void
  1641 ;; Registers used:
  1642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;Total ram usage:        0 bytes
  1653 ;; Hardware stack levels required when called:   13
  1654 ;; This function calls:
  1655 ;;		_Day_Mode
  1656 ;;		_Do_Flashing
  1657 ;;		_Init_ADC
  1658 ;;		_Init_UART
  1659 ;;		_Initialize_LCD_Screen
  1660 ;;		_Night_Mode
  1661 ;;		_Read_Volt
  1662 ;;		___ftge
  1663 ;;		_init_INTERRUPT
  1664 ;; This function is called by:
  1665 ;;		Startup code after reset
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text0
  1670  001DA4                     __ptext0:
  1671                           	opt stack 0
  1672  001DA4                     _main:
  1673                           	opt stack 18
  1674                           
  1675                           ;lab9.c: 58: OSCCON = 0x70;
  1676                           
  1677                           ;incstack = 0
  1678  001DA4  0E70               	movlw	112
  1679  001DA6  6ED3               	movwf	4051,c	;volatile
  1680                           
  1681                           ;lab9.c: 59: TRISA = 0x1F;
  1682  001DA8  0E1F               	movlw	31
  1683  001DAA  6E92               	movwf	3986,c	;volatile
  1684                           
  1685                           ;lab9.c: 60: TRISB = 0x07;
  1686  001DAC  0E07               	movlw	7
  1687  001DAE  6E93               	movwf	3987,c	;volatile
  1688                           
  1689                           ;lab9.c: 61: TRISC = 0x00;
  1690  001DB0  0E00               	movlw	0
  1691  001DB2  6E94               	movwf	3988,c	;volatile
  1692                           
  1693                           ;lab9.c: 62: TRISD = 0x00;
  1694  001DB4  0E00               	movlw	0
  1695  001DB6  6E95               	movwf	3989,c	;volatile
  1696                           
  1697                           ;lab9.c: 63: TRISE = 0x00;
  1698  001DB8  0E00               	movlw	0
  1699  001DBA  6E96               	movwf	3990,c	;volatile
  1700                           
  1701                           ;lab9.c: 64: Init_ADC();
  1702  001DBC  ECAF  F014         	call	_Init_ADC	;wreg free
  1703                           
  1704                           ;lab9.c: 65: Init_UART();
  1705  001DC0  EC65  F014         	call	_Init_UART	;wreg free
  1706                           
  1707                           ;lab9.c: 67: Initialize_LCD_Screen();
  1708  001DC4  EC0E  F000         	call	_Initialize_LCD_Screen	;wreg free
  1709                           
  1710                           ;lab9.c: 69: RBPU = 0;
  1711  001DC8  9EF1               	bcf	intcon2,7,c	;volatile
  1712                           
  1713                           ;lab9.c: 70: init_INTERRUPT();
  1714  001DCA  EC4F  F014         	call	_init_INTERRUPT	;wreg free
  1715                           
  1716                           ;lab9.c: 104: volt = Read_Volt(0);
  1717  001DCE  0E00               	movlw	0
  1718  001DD0  ECFA  F010         	call	_Read_Volt
  1719  001DD4  C02A  F0AA         	movff	?_Read_Volt,_volt
  1720  001DD8  C02B  F0AB         	movff	?_Read_Volt+1,_volt+1
  1721  001DDC  C02C  F0AC         	movff	?_Read_Volt+2,_volt+2
  1722                           
  1723                           ;lab9.c: 106: Light_Sensor = volt < 2.5 ? 1:0;
  1724  001DE0  C0AA  F00F         	movff	_volt,___ftge@ff1
  1725  001DE4  C0AB  F010         	movff	_volt+1,___ftge@ff1+1
  1726  001DE8  C0AC  F011         	movff	_volt+2,___ftge@ff1+2
  1727  001DEC  0E00               	movlw	0
  1728  001DEE  6E12               	movwf	___ftge@ff2,c
  1729  001DF0  0E20               	movlw	32
  1730  001DF2  6E13               	movwf	___ftge@ff2+1,c
  1731  001DF4  0E40               	movlw	64
  1732  001DF6  6E14               	movwf	___ftge@ff2+2,c
  1733  001DF8  EC6B  F00F         	call	___ftge	;wreg free
  1734  001DFC  B0D8               	btfsc	status,0,c
  1735  001DFE  D002               	goto	u4450
  1736  001E00  0E01               	movlw	1
  1737  001E02  D001               	goto	u4460
  1738  001E04                     u4450:
  1739  001E04  0E00               	movlw	0
  1740  001E06                     u4460:
  1741  001E06  6E50               	movwf	_Light_Sensor,c
  1742  001E08  D000               	goto	l6055
  1743  001E0A                     l6055:
  1744                           
  1745                           ;lab9.c: 109: {
  1746                           ;lab9.c: 111: if (Light_Sensor == 1)
  1747  001E0A  0450               	decf	_Light_Sensor,w,c
  1748  001E0C  A4D8               	btfss	status,2,c
  1749  001E0E  D006               	goto	l6063
  1750                           
  1751                           ;lab9.c: 112: {
  1752                           ;lab9.c: 113: MODE = 1;
  1753  001E10  0E01               	movlw	1
  1754  001E12  6E51               	movwf	_MODE,c
  1755                           
  1756                           ;lab9.c: 114: PORTEbits.RE0 = 1;
  1757  001E14  8084               	bsf	3972,0,c	;volatile
  1758                           
  1759                           ;lab9.c: 115: Day_Mode();
  1760  001E16  EC25  F00E         	call	_Day_Mode	;wreg free
  1761                           
  1762                           ;lab9.c: 116: }
  1763  001E1A  D006               	goto	l6069
  1764  001E1C                     l6063:
  1765                           
  1766                           ;lab9.c: 117: else
  1767                           ;lab9.c: 118: {
  1768                           ;lab9.c: 119: MODE = 0;
  1769  001E1C  0E00               	movlw	0
  1770  001E1E  6E51               	movwf	_MODE,c
  1771                           
  1772                           ;lab9.c: 120: PORTEbits.RE0 = 0;
  1773  001E20  9084               	bcf	3972,0,c	;volatile
  1774                           
  1775                           ;lab9.c: 121: Night_Mode();
  1776  001E22  EC81  F00E         	call	_Night_Mode	;wreg free
  1777  001E26  D000               	goto	l6069
  1778  001E28                     l6069:
  1779                           
  1780                           ;lab9.c: 122: }
  1781                           ;lab9.c: 124: if (Flashing_Request == 1)
  1782  001E28  044B               	decf	_Flashing_Request,w,c
  1783  001E2A  A4D8               	btfss	status,2,c
  1784  001E2C  D7EE               	goto	l6055
  1785                           
  1786                           ;lab9.c: 125: {
  1787                           ;lab9.c: 126: Flashing_Request = 0;
  1788  001E2E  0E00               	movlw	0
  1789  001E30  6E4B               	movwf	_Flashing_Request,c
  1790                           
  1791                           ;lab9.c: 127: Flashing_Status = 1;
  1792  001E32  0E01               	movlw	1
  1793  001E34  6E4C               	movwf	_Flashing_Status,c
  1794                           
  1795                           ;lab9.c: 128: Do_Flashing();
  1796  001E36  EC95  F011         	call	_Do_Flashing	;wreg free
  1797  001E3A  D7E7               	goto	l6055
  1798  001E3C  EF0C  F000         	goto	start
  1799  001E40                     __end_of_main:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           intcon2	equ	0xFF1
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           postdec1	equ	0xFE5
  1809                           fsr1l	equ	0xFE1
  1810                           status	equ	0xFD8
  1811                           
  1812 ;; *************** function _init_INTERRUPT *****************
  1813 ;; Defined at:
  1814 ;;		line 14 in file "Interrupt.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;		None               void
  1821 ;; Registers used:
  1822 ;;		None
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;Total ram usage:        0 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    2
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text1
  1843  00289E                     __ptext1:
  1844                           	opt stack 0
  1845  00289E                     _init_INTERRUPT:
  1846                           	opt stack 28
  1847                           
  1848                           ;Interrupt.c: 17: INTCONbits.INT0IF = 0;
  1849                           
  1850                           ;incstack = 0
  1851  00289E  92F2               	bcf	intcon,1,c	;volatile
  1852                           
  1853                           ;Interrupt.c: 18: INTCON3bits.INT1IF = 0;
  1854  0028A0  90F0               	bcf	intcon3,0,c	;volatile
  1855                           
  1856                           ;Interrupt.c: 19: INTCON3bits.INT2IF = 0;
  1857  0028A2  92F0               	bcf	intcon3,1,c	;volatile
  1858                           
  1859                           ;Interrupt.c: 22: INTCON2bits.INTEDG0 = 1;
  1860  0028A4  8CF1               	bsf	intcon2,6,c	;volatile
  1861                           
  1862                           ;Interrupt.c: 23: INTCON2bits.INTEDG1 = 1;
  1863  0028A6  8AF1               	bsf	intcon2,5,c	;volatile
  1864                           
  1865                           ;Interrupt.c: 24: INTCON2bits.INTEDG2 = 1;
  1866  0028A8  88F1               	bsf	intcon2,4,c	;volatile
  1867                           
  1868                           ;Interrupt.c: 26: INTCONbits.INT0IE = 1;
  1869  0028AA  88F2               	bsf	intcon,4,c	;volatile
  1870                           
  1871                           ;Interrupt.c: 27: INTCON3bits.INT1IE = 1;
  1872  0028AC  86F0               	bsf	intcon3,3,c	;volatile
  1873                           
  1874                           ;Interrupt.c: 28: INTCON3bits.INT2IE = 1;
  1875  0028AE  88F0               	bsf	intcon3,4,c	;volatile
  1876                           
  1877                           ;Interrupt.c: 30: INTCONbits.GIE = 1;
  1878  0028B0  8EF2               	bsf	intcon,7,c	;volatile
  1879  0028B2  0012               	return		;funcret
  1880  0028B4                     __end_of_init_INTERRUPT:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           intcon	equ	0xFF2
  1887                           intcon2	equ	0xFF1
  1888                           intcon3	equ	0xFF0
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _Night_Mode *****************
  1896 ;; Defined at:
  1897 ;;		line 276 in file "lab9.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;		None               void
  1904 ;; Registers used:
  1905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:   12
  1918 ;; This function calls:
  1919 ;;		_Set_EW
  1920 ;;		_Set_EW_LT
  1921 ;;		_Set_NS
  1922 ;;		_Set_NS_LT
  1923 ;;		_Wait_N_Seconds
  1924 ;; This function is called by:
  1925 ;;		_main
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text2
  1930  001D02                     __ptext2:
  1931                           	opt stack 0
  1932  001D02                     _Night_Mode:
  1933                           	opt stack 18
  1934                           
  1935                           ;lab9.c: 279: NS_PED_SW = 0;
  1936                           
  1937                           ;incstack = 0
  1938  001D02  0E00               	movlw	0
  1939  001D04  6E52               	movwf	_NS_PED_SW,c
  1940                           
  1941                           ;lab9.c: 280: EW_PED_SW = 0;
  1942  001D06  0E00               	movlw	0
  1943  001D08  6E4A               	movwf	_EW_PED_SW,c
  1944                           
  1945                           ;lab9.c: 281: PORTEbits.RE0 = 0;
  1946  001D0A  9084               	bcf	3972,0,c	;volatile
  1947                           
  1948                           ;lab9.c: 282: Set_NS_LT(1);
  1949  001D0C  0E01               	movlw	1
  1950  001D0E  EC5D  F012         	call	_Set_NS_LT
  1951                           
  1952                           ;lab9.c: 283: Set_EW(1);
  1953  001D12  0E01               	movlw	1
  1954  001D14  ECC3  F012         	call	_Set_EW
  1955                           
  1956                           ;lab9.c: 284: Set_EW_LT(1);
  1957  001D18  0E01               	movlw	1
  1958  001D1A  ECA1  F012         	call	_Set_EW_LT
  1959                           
  1960                           ;lab9.c: 285: Set_NS(2);
  1961  001D1E  0E02               	movlw	2
  1962  001D20  EC7F  F012         	call	_Set_NS
  1963                           
  1964                           ;lab9.c: 286: Wait_N_Seconds(7);
  1965  001D24  0E07               	movlw	7
  1966  001D26  EC7B  F013         	call	_Wait_N_Seconds
  1967                           
  1968                           ;lab9.c: 287: Set_NS(3);
  1969  001D2A  0E03               	movlw	3
  1970  001D2C  EC7F  F012         	call	_Set_NS
  1971                           
  1972                           ;lab9.c: 288: Wait_N_Seconds(3);
  1973  001D30  0E03               	movlw	3
  1974  001D32  EC7B  F013         	call	_Wait_N_Seconds
  1975                           
  1976                           ;lab9.c: 289: Set_NS(1);
  1977  001D36  0E01               	movlw	1
  1978  001D38  EC7F  F012         	call	_Set_NS
  1979                           
  1980                           ;lab9.c: 290: if(PORTAbits.RA3 == 1)
  1981  001D3C  A680               	btfss	3968,3,c	;volatile
  1982  001D3E  D010               	goto	l5755
  1983                           
  1984                           ;lab9.c: 291: {
  1985                           ;lab9.c: 292: Set_EW_LT(2);
  1986  001D40  0E02               	movlw	2
  1987  001D42  ECA1  F012         	call	_Set_EW_LT
  1988                           
  1989                           ;lab9.c: 293: Wait_N_Seconds(5);
  1990  001D46  0E05               	movlw	5
  1991  001D48  EC7B  F013         	call	_Wait_N_Seconds
  1992                           
  1993                           ;lab9.c: 294: Set_EW_LT(3);
  1994  001D4C  0E03               	movlw	3
  1995  001D4E  ECA1  F012         	call	_Set_EW_LT
  1996                           
  1997                           ;lab9.c: 295: Wait_N_Seconds(3);
  1998  001D52  0E03               	movlw	3
  1999  001D54  EC7B  F013         	call	_Wait_N_Seconds
  2000                           
  2001                           ;lab9.c: 296: Set_EW_LT(1);
  2002  001D58  0E01               	movlw	1
  2003  001D5A  ECA1  F012         	call	_Set_EW_LT
  2004  001D5E  D000               	goto	l5755
  2005  001D60                     l5755:
  2006                           
  2007                           ;lab9.c: 297: }
  2008                           ;lab9.c: 298: Set_EW(2);
  2009  001D60  0E02               	movlw	2
  2010  001D62  ECC3  F012         	call	_Set_EW
  2011                           
  2012                           ;lab9.c: 299: Wait_N_Seconds(7);
  2013  001D66  0E07               	movlw	7
  2014  001D68  EC7B  F013         	call	_Wait_N_Seconds
  2015                           
  2016                           ;lab9.c: 300: Set_EW(3);
  2017  001D6C  0E03               	movlw	3
  2018  001D6E  ECC3  F012         	call	_Set_EW
  2019                           
  2020                           ;lab9.c: 301: Wait_N_Seconds(3);
  2021  001D72  0E03               	movlw	3
  2022  001D74  EC7B  F013         	call	_Wait_N_Seconds
  2023                           
  2024                           ;lab9.c: 302: Set_EW(1);
  2025  001D78  0E01               	movlw	1
  2026  001D7A  ECC3  F012         	call	_Set_EW
  2027                           
  2028                           ;lab9.c: 303: if(PORTAbits.RA4 == 1)
  2029  001D7E  A880               	btfss	3968,4,c	;volatile
  2030  001D80  D010               	goto	l621
  2031                           
  2032                           ;lab9.c: 304: {
  2033                           ;lab9.c: 305: Set_NS_LT(2);
  2034  001D82  0E02               	movlw	2
  2035  001D84  EC5D  F012         	call	_Set_NS_LT
  2036                           
  2037                           ;lab9.c: 306: Wait_N_Seconds(5);
  2038  001D88  0E05               	movlw	5
  2039  001D8A  EC7B  F013         	call	_Wait_N_Seconds
  2040                           
  2041                           ;lab9.c: 307: Set_NS_LT(3);
  2042  001D8E  0E03               	movlw	3
  2043  001D90  EC5D  F012         	call	_Set_NS_LT
  2044                           
  2045                           ;lab9.c: 308: Wait_N_Seconds(3);
  2046  001D94  0E03               	movlw	3
  2047  001D96  EC7B  F013         	call	_Wait_N_Seconds
  2048                           
  2049                           ;lab9.c: 309: Set_NS_LT(1);
  2050  001D9A  0E01               	movlw	1
  2051  001D9C  EC5D  F012         	call	_Set_NS_LT
  2052  001DA0  D000               	goto	l621
  2053  001DA2                     l621:
  2054  001DA2  0012               	return		;funcret
  2055  001DA4                     __end_of_Night_Mode:
  2056                           	opt stack 0
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           intcon	equ	0xFF2
  2062                           intcon2	equ	0xFF1
  2063                           intcon3	equ	0xFF0
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           postdec1	equ	0xFE5
  2067                           fsr1l	equ	0xFE1
  2068                           status	equ	0xFD8
  2069                           
  2070 ;; *************** function _Initialize_LCD_Screen *****************
  2071 ;; Defined at:
  2072 ;;		line 53 in file "Main_Screen.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;		None               void
  2079 ;; Registers used:
  2080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;Total ram usage:        0 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    9
  2093 ;; This function calls:
  2094 ;;		_LCD_Reset
  2095 ;;		_TFT_GreenTab_Initialize
  2096 ;;		_drawCircle
  2097 ;;		_drawRect
  2098 ;;		_drawtext
  2099 ;;		_fillCircle
  2100 ;;		_fillScreen
  2101 ;;		_strcpy
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text3
  2108  00001C                     __ptext3:
  2109                           	opt stack 0
  2110  00001C                     _Initialize_LCD_Screen:
  2111                           	opt stack 21
  2112                           
  2113                           ;Main_Screen.c: 55: LCD_Reset();
  2114                           
  2115                           ;incstack = 0
  2116  00001C  EC8D  F014         	call	_LCD_Reset	;wreg free
  2117                           
  2118                           ;Main_Screen.c: 56: TFT_GreenTab_Initialize();
  2119  000020  ECDA  F013         	call	_TFT_GreenTab_Initialize	;wreg free
  2120                           
  2121                           ;Main_Screen.c: 58: fillScreen(0x0000);
  2122  000024  0E00               	movlw	0
  2123  000026  6E23               	movwf	fillScreen@color+1,c
  2124  000028  0E00               	movlw	0
  2125  00002A  6E22               	movwf	fillScreen@color,c
  2126  00002C  EC27  F014         	call	_fillScreen	;wreg free
  2127                           
  2128                           ;Main_Screen.c: 60: txt = buffer;
  2129  000030  0EAD               	movlw	low _buffer
  2130  000032  6E47               	movwf	_txt,c
  2131  000034  0E00               	movlw	high _buffer
  2132  000036  6E48               	movwf	_txt+1,c
  2133                           
  2134                           ;Main_Screen.c: 62: strcpy(txt, "Mode:");
  2135  000038  C047  F00F         	movff	_txt,strcpy@to
  2136  00003C  C048  F010         	movff	_txt+1,strcpy@to+1
  2137  000040  0EE4               	movlw	low STR_1
  2138  000042  6E11               	movwf	strcpy@from,c
  2139  000044  0EFF               	movlw	high STR_1
  2140  000046  6E12               	movwf	strcpy@from+1,c
  2141  000048  EC94  F013         	call	_strcpy	;wreg free
  2142                           
  2143                           ;Main_Screen.c: 63: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2144  00004C  0E02               	movlw	2
  2145  00004E  6E37               	movwf	drawtext@y,c
  2146  000050  C047  F038         	movff	_txt,drawtext@_text
  2147  000054  C048  F039         	movff	_txt+1,drawtext@_text+1
  2148  000058  0EFF               	movlw	255
  2149  00005A  6E3B               	movwf	drawtext@color+1,c
  2150  00005C  683A               	setf	drawtext@color,c
  2151  00005E  0E00               	movlw	0
  2152  000060  6E3D               	movwf	drawtext@bg+1,c
  2153  000062  0E00               	movlw	0
  2154  000064  6E3C               	movwf	drawtext@bg,c
  2155  000066  0E01               	movlw	1
  2156  000068  6E3E               	movwf	drawtext@size,c
  2157  00006A  0E02               	movlw	2
  2158  00006C  EC24  F00A         	call	_drawtext
  2159                           
  2160                           ;Main_Screen.c: 64: drawtext(35,2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2161  000070  0E02               	movlw	2
  2162  000072  6E37               	movwf	drawtext@y,c
  2163  000074  0E64               	movlw	low _Act_Mode_Txt
  2164  000076  6E38               	movwf	drawtext@_text,c
  2165  000078  0E00               	movlw	high _Act_Mode_Txt
  2166  00007A  6E39               	movwf	drawtext@_text+1,c
  2167  00007C  0EFF               	movlw	255
  2168  00007E  6E3B               	movwf	drawtext@color+1,c
  2169  000080  683A               	setf	drawtext@color,c
  2170  000082  0E00               	movlw	0
  2171  000084  6E3D               	movwf	drawtext@bg+1,c
  2172  000086  0E00               	movlw	0
  2173  000088  6E3C               	movwf	drawtext@bg,c
  2174  00008A  0E01               	movlw	1
  2175  00008C  6E3E               	movwf	drawtext@size,c
  2176  00008E  0E23               	movlw	35
  2177  000090  EC24  F00A         	call	_drawtext
  2178                           
  2179                           ;Main_Screen.c: 65: strcpy(txt, "LSV:");
  2180  000094  C047  F00F         	movff	_txt,strcpy@to
  2181  000098  C048  F010         	movff	_txt+1,strcpy@to+1
  2182  00009C  0EEA               	movlw	low STR_2
  2183  00009E  6E11               	movwf	strcpy@from,c
  2184  0000A0  0EFF               	movlw	high STR_2
  2185  0000A2  6E12               	movwf	strcpy@from+1,c
  2186  0000A4  EC94  F013         	call	_strcpy	;wreg free
  2187                           
  2188                           ;Main_Screen.c: 66: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  2189  0000A8  0E02               	movlw	2
  2190  0000AA  6E37               	movwf	drawtext@y,c
  2191  0000AC  C047  F038         	movff	_txt,drawtext@_text
  2192  0000B0  C048  F039         	movff	_txt+1,drawtext@_text+1
  2193  0000B4  0EFF               	movlw	255
  2194  0000B6  6E3B               	movwf	drawtext@color+1,c
  2195  0000B8  683A               	setf	drawtext@color,c
  2196  0000BA  0E00               	movlw	0
  2197  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2198  0000BE  0E00               	movlw	0
  2199  0000C0  6E3C               	movwf	drawtext@bg,c
  2200  0000C2  0E01               	movlw	1
  2201  0000C4  6E3E               	movwf	drawtext@size,c
  2202  0000C6  0E32               	movlw	50
  2203  0000C8  EC24  F00A         	call	_drawtext
  2204                           
  2205                           ;Main_Screen.c: 67: drawtext(75,2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  2206  0000CC  0E02               	movlw	2
  2207  0000CE  6E37               	movwf	drawtext@y,c
  2208  0000D0  0E96               	movlw	low _Light_Sensor_Voltage_Txt
  2209  0000D2  6E38               	movwf	drawtext@_text,c
  2210  0000D4  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  2211  0000D6  6E39               	movwf	drawtext@_text+1,c
  2212  0000D8  0EFF               	movlw	255
  2213  0000DA  6E3B               	movwf	drawtext@color+1,c
  2214  0000DC  683A               	setf	drawtext@color,c
  2215  0000DE  0E00               	movlw	0
  2216  0000E0  6E3D               	movwf	drawtext@bg+1,c
  2217  0000E2  0E00               	movlw	0
  2218  0000E4  6E3C               	movwf	drawtext@bg,c
  2219  0000E6  0E01               	movlw	1
  2220  0000E8  6E3E               	movwf	drawtext@size,c
  2221  0000EA  0E4B               	movlw	75
  2222  0000EC  EC24  F00A         	call	_drawtext
  2223                           
  2224                           ;Main_Screen.c: 68: strcpy(txt, "-D");
  2225  0000F0  C047  F00F         	movff	_txt,strcpy@to
  2226  0000F4  C048  F010         	movff	_txt+1,strcpy@to+1
  2227  0000F8  0EF7               	movlw	low STR_3
  2228  0000FA  6E11               	movwf	strcpy@from,c
  2229  0000FC  0EFF               	movlw	high STR_3
  2230  0000FE  6E12               	movwf	strcpy@from+1,c
  2231  000100  EC94  F013         	call	_strcpy	;wreg free
  2232                           
  2233                           ;Main_Screen.c: 69: drawtext(100,2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  2234  000104  0E02               	movlw	2
  2235  000106  6E37               	movwf	drawtext@y,c
  2236  000108  0E61               	movlw	low _Light_Sensor_Mode_Txt
  2237  00010A  6E38               	movwf	drawtext@_text,c
  2238  00010C  0E00               	movlw	high _Light_Sensor_Mode_Txt
  2239  00010E  6E39               	movwf	drawtext@_text+1,c
  2240  000110  0EFF               	movlw	255
  2241  000112  6E3B               	movwf	drawtext@color+1,c
  2242  000114  683A               	setf	drawtext@color,c
  2243  000116  0E00               	movlw	0
  2244  000118  6E3D               	movwf	drawtext@bg+1,c
  2245  00011A  0E00               	movlw	0
  2246  00011C  6E3C               	movwf	drawtext@bg,c
  2247  00011E  0E01               	movlw	1
  2248  000120  6E3E               	movwf	drawtext@size,c
  2249  000122  0E64               	movlw	100
  2250  000124  EC24  F00A         	call	_drawtext
  2251                           
  2252                           ;Main_Screen.c: 72: strcpy(txt, "*");
  2253  000128  C047  F00F         	movff	_txt,strcpy@to
  2254  00012C  C048  F010         	movff	_txt+1,strcpy@to+1
  2255  000130  0EFC               	movlw	low STR_4
  2256  000132  6E11               	movwf	strcpy@from,c
  2257  000134  0EFF               	movlw	high STR_4
  2258  000136  6E12               	movwf	strcpy@from+1,c
  2259  000138  EC94  F013         	call	_strcpy	;wreg free
  2260                           
  2261                           ;Main_Screen.c: 73: drawtext(120, 2, txt, 0xFFFF, 0x0000, 1);
  2262  00013C  0E02               	movlw	2
  2263  00013E  6E37               	movwf	drawtext@y,c
  2264  000140  C047  F038         	movff	_txt,drawtext@_text
  2265  000144  C048  F039         	movff	_txt+1,drawtext@_text+1
  2266  000148  0EFF               	movlw	255
  2267  00014A  6E3B               	movwf	drawtext@color+1,c
  2268  00014C  683A               	setf	drawtext@color,c
  2269  00014E  0E00               	movlw	0
  2270  000150  6E3D               	movwf	drawtext@bg+1,c
  2271  000152  0E00               	movlw	0
  2272  000154  6E3C               	movwf	drawtext@bg,c
  2273  000156  0E01               	movlw	1
  2274  000158  6E3E               	movwf	drawtext@size,c
  2275  00015A  0E78               	movlw	120
  2276  00015C  EC24  F00A         	call	_drawtext
  2277                           
  2278                           ;Main_Screen.c: 76: strcpy(txt, "NSP NSLT EWP EWLT R S");
  2279  000160  C047  F00F         	movff	_txt,strcpy@to
  2280  000164  C048  F010         	movff	_txt+1,strcpy@to+1
  2281  000168  0EAA               	movlw	low STR_5
  2282  00016A  6E11               	movwf	strcpy@from,c
  2283  00016C  0EFF               	movlw	high STR_5
  2284  00016E  6E12               	movwf	strcpy@from+1,c
  2285  000170  EC94  F013         	call	_strcpy	;wreg free
  2286                           
  2287                           ;Main_Screen.c: 77: drawtext(1, 11, txt, 0xFFFF, 0x0000, 1);
  2288  000174  0E0B               	movlw	11
  2289  000176  6E37               	movwf	drawtext@y,c
  2290  000178  C047  F038         	movff	_txt,drawtext@_text
  2291  00017C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2292  000180  0EFF               	movlw	255
  2293  000182  6E3B               	movwf	drawtext@color+1,c
  2294  000184  683A               	setf	drawtext@color,c
  2295  000186  0E00               	movlw	0
  2296  000188  6E3D               	movwf	drawtext@bg+1,c
  2297  00018A  0E00               	movlw	0
  2298  00018C  6E3C               	movwf	drawtext@bg,c
  2299  00018E  0E01               	movlw	1
  2300  000190  6E3E               	movwf	drawtext@size,c
  2301  000192  0E01               	movlw	1
  2302  000194  EC24  F00A         	call	_drawtext
  2303                           
  2304                           ;Main_Screen.c: 78: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2305  000198  0E14               	movlw	20
  2306  00019A  6E37               	movwf	drawtext@y,c
  2307  00019C  0E70               	movlw	low _SW_NSPED_Txt
  2308  00019E  6E38               	movwf	drawtext@_text,c
  2309  0001A0  0E00               	movlw	high _SW_NSPED_Txt
  2310  0001A2  6E39               	movwf	drawtext@_text+1,c
  2311  0001A4  0EFF               	movlw	255
  2312  0001A6  6E3B               	movwf	drawtext@color+1,c
  2313  0001A8  683A               	setf	drawtext@color,c
  2314  0001AA  0E00               	movlw	0
  2315  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2316  0001AE  0E00               	movlw	0
  2317  0001B0  6E3C               	movwf	drawtext@bg,c
  2318  0001B2  0E01               	movlw	1
  2319  0001B4  6E3E               	movwf	drawtext@size,c
  2320  0001B6  0E08               	movlw	8
  2321  0001B8  EC24  F00A         	call	_drawtext
  2322                           
  2323                           ;Main_Screen.c: 79: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2324  0001BC  0E14               	movlw	20
  2325  0001BE  6E37               	movwf	drawtext@y,c
  2326  0001C0  0E6E               	movlw	low _SW_NSLT_Txt
  2327  0001C2  6E38               	movwf	drawtext@_text,c
  2328  0001C4  0E00               	movlw	high _SW_NSLT_Txt
  2329  0001C6  6E39               	movwf	drawtext@_text+1,c
  2330  0001C8  0EFF               	movlw	255
  2331  0001CA  6E3B               	movwf	drawtext@color+1,c
  2332  0001CC  683A               	setf	drawtext@color,c
  2333  0001CE  0E00               	movlw	0
  2334  0001D0  6E3D               	movwf	drawtext@bg+1,c
  2335  0001D2  0E00               	movlw	0
  2336  0001D4  6E3C               	movwf	drawtext@bg,c
  2337  0001D6  0E01               	movlw	1
  2338  0001D8  6E3E               	movwf	drawtext@size,c
  2339  0001DA  0E23               	movlw	35
  2340  0001DC  EC24  F00A         	call	_drawtext
  2341                           
  2342                           ;Main_Screen.c: 80: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2343  0001E0  0E14               	movlw	20
  2344  0001E2  6E37               	movwf	drawtext@y,c
  2345  0001E4  0E6C               	movlw	low _SW_EWPED_Txt
  2346  0001E6  6E38               	movwf	drawtext@_text,c
  2347  0001E8  0E00               	movlw	high _SW_EWPED_Txt
  2348  0001EA  6E39               	movwf	drawtext@_text+1,c
  2349  0001EC  0EFF               	movlw	255
  2350  0001EE  6E3B               	movwf	drawtext@color+1,c
  2351  0001F0  683A               	setf	drawtext@color,c
  2352  0001F2  0E00               	movlw	0
  2353  0001F4  6E3D               	movwf	drawtext@bg+1,c
  2354  0001F6  0E00               	movlw	0
  2355  0001F8  6E3C               	movwf	drawtext@bg,c
  2356  0001FA  0E01               	movlw	1
  2357  0001FC  6E3E               	movwf	drawtext@size,c
  2358  0001FE  0E3C               	movlw	60
  2359  000200  EC24  F00A         	call	_drawtext
  2360                           
  2361                           ;Main_Screen.c: 81: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2362  000204  0E14               	movlw	20
  2363  000206  6E37               	movwf	drawtext@y,c
  2364  000208  0E6A               	movlw	low _SW_EWLT_Txt
  2365  00020A  6E38               	movwf	drawtext@_text,c
  2366  00020C  0E00               	movlw	high _SW_EWLT_Txt
  2367  00020E  6E39               	movwf	drawtext@_text+1,c
  2368  000210  0EFF               	movlw	255
  2369  000212  6E3B               	movwf	drawtext@color+1,c
  2370  000214  683A               	setf	drawtext@color,c
  2371  000216  0E00               	movlw	0
  2372  000218  6E3D               	movwf	drawtext@bg+1,c
  2373  00021A  0E00               	movlw	0
  2374  00021C  6E3C               	movwf	drawtext@bg,c
  2375  00021E  0E01               	movlw	1
  2376  000220  6E3E               	movwf	drawtext@size,c
  2377  000222  0E55               	movlw	85
  2378  000224  EC24  F00A         	call	_drawtext
  2379                           
  2380                           ;Main_Screen.c: 82: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2381  000228  0E14               	movlw	20
  2382  00022A  6E37               	movwf	drawtext@y,c
  2383  00022C  0E66               	movlw	low _FlashingR_Txt
  2384  00022E  6E38               	movwf	drawtext@_text,c
  2385  000230  0E00               	movlw	high _FlashingR_Txt
  2386  000232  6E39               	movwf	drawtext@_text+1,c
  2387  000234  0EFF               	movlw	255
  2388  000236  6E3B               	movwf	drawtext@color+1,c
  2389  000238  683A               	setf	drawtext@color,c
  2390  00023A  0E00               	movlw	0
  2391  00023C  6E3D               	movwf	drawtext@bg+1,c
  2392  00023E  0E00               	movlw	0
  2393  000240  6E3C               	movwf	drawtext@bg,c
  2394  000242  0E01               	movlw	1
  2395  000244  6E3E               	movwf	drawtext@size,c
  2396  000246  0E6C               	movlw	108
  2397  000248  EC24  F00A         	call	_drawtext
  2398                           
  2399                           ;Main_Screen.c: 83: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2400  00024C  0E14               	movlw	20
  2401  00024E  6E37               	movwf	drawtext@y,c
  2402  000250  0E68               	movlw	low _FlashingS_Txt
  2403  000252  6E38               	movwf	drawtext@_text,c
  2404  000254  0E00               	movlw	high _FlashingS_Txt
  2405  000256  6E39               	movwf	drawtext@_text+1,c
  2406  000258  0EFF               	movlw	255
  2407  00025A  6E3B               	movwf	drawtext@color+1,c
  2408  00025C  683A               	setf	drawtext@color,c
  2409  00025E  0E00               	movlw	0
  2410  000260  6E3D               	movwf	drawtext@bg+1,c
  2411  000262  0E00               	movlw	0
  2412  000264  6E3C               	movwf	drawtext@bg,c
  2413  000266  0E01               	movlw	1
  2414  000268  6E3E               	movwf	drawtext@size,c
  2415  00026A  0E77               	movlw	119
  2416  00026C  EC24  F00A         	call	_drawtext
  2417                           
  2418                           ;Main_Screen.c: 87: strcpy(txt, "NORTH/SOUTH");
  2419  000270  C047  F00F         	movff	_txt,strcpy@to
  2420  000274  C048  F010         	movff	_txt+1,strcpy@to+1
  2421  000278  0EC0               	movlw	low STR_6
  2422  00027A  6E11               	movwf	strcpy@from,c
  2423  00027C  0EFF               	movlw	high STR_6
  2424  00027E  6E12               	movwf	strcpy@from+1,c
  2425  000280  EC94  F013         	call	_strcpy	;wreg free
  2426                           
  2427                           ;Main_Screen.c: 88: drawtext (30, 30 , txt, 0xFFE0, 0x0000, 1);
  2428  000284  0E1E               	movlw	30
  2429  000286  6E37               	movwf	drawtext@y,c
  2430  000288  C047  F038         	movff	_txt,drawtext@_text
  2431  00028C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2432  000290  0EFF               	movlw	255
  2433  000292  6E3B               	movwf	drawtext@color+1,c
  2434  000294  0EE0               	movlw	224
  2435  000296  6E3A               	movwf	drawtext@color,c
  2436  000298  0E00               	movlw	0
  2437  00029A  6E3D               	movwf	drawtext@bg+1,c
  2438  00029C  0E00               	movlw	0
  2439  00029E  6E3C               	movwf	drawtext@bg,c
  2440  0002A0  0E01               	movlw	1
  2441  0002A2  6E3E               	movwf	drawtext@size,c
  2442  0002A4  0E1E               	movlw	30
  2443  0002A6  EC24  F00A         	call	_drawtext
  2444                           
  2445                           ;Main_Screen.c: 89: drawRect (30, 30 + 16-8, 60, 18, 0xFFE0);
  2446  0002AA  0E00               	movlw	0
  2447  0002AC  6E22               	movwf	drawRect@x+1,c
  2448  0002AE  0E1E               	movlw	30
  2449  0002B0  6E21               	movwf	drawRect@x,c
  2450  0002B2  0E00               	movlw	0
  2451  0002B4  6E24               	movwf	drawRect@y+1,c
  2452  0002B6  0E26               	movlw	38
  2453  0002B8  6E23               	movwf	drawRect@y,c
  2454  0002BA  0E00               	movlw	0
  2455  0002BC  6E26               	movwf	drawRect@w+1,c
  2456  0002BE  0E3C               	movlw	60
  2457  0002C0  6E25               	movwf	drawRect@w,c
  2458  0002C2  0E00               	movlw	0
  2459  0002C4  6E28               	movwf	drawRect@h+1,c
  2460  0002C6  0E12               	movlw	18
  2461  0002C8  6E27               	movwf	drawRect@h,c
  2462  0002CA  0EFF               	movlw	255
  2463  0002CC  6E2A               	movwf	drawRect@color+1,c
  2464  0002CE  0EE0               	movlw	224
  2465  0002D0  6E29               	movwf	drawRect@color,c
  2466  0002D2  EC31  F011         	call	_drawRect	;wreg free
  2467                           
  2468                           ;Main_Screen.c: 90: drawCircle(40, 30 + 16 , 7, 0xF800);
  2469  0002D6  0E00               	movlw	0
  2470  0002D8  6E1B               	movwf	drawCircle@x0+1,c
  2471  0002DA  0E28               	movlw	40
  2472  0002DC  6E1A               	movwf	drawCircle@x0,c
  2473  0002DE  0E00               	movlw	0
  2474  0002E0  6E1D               	movwf	drawCircle@y0+1,c
  2475  0002E2  0E2E               	movlw	46
  2476  0002E4  6E1C               	movwf	drawCircle@y0,c
  2477  0002E6  0E00               	movlw	0
  2478  0002E8  6E1F               	movwf	drawCircle@r+1,c
  2479  0002EA  0E07               	movlw	7
  2480  0002EC  6E1E               	movwf	drawCircle@r,c
  2481  0002EE  0EF8               	movlw	248
  2482  0002F0  6E21               	movwf	drawCircle@color+1,c
  2483  0002F2  0E00               	movlw	0
  2484  0002F4  6E20               	movwf	drawCircle@color,c
  2485  0002F6  ECB9  F006         	call	_drawCircle	;wreg free
  2486                           
  2487                           ;Main_Screen.c: 91: drawCircle(60, 30 + 16 , 7, 0xFFE0);
  2488  0002FA  0E00               	movlw	0
  2489  0002FC  6E1B               	movwf	drawCircle@x0+1,c
  2490  0002FE  0E3C               	movlw	60
  2491  000300  6E1A               	movwf	drawCircle@x0,c
  2492  000302  0E00               	movlw	0
  2493  000304  6E1D               	movwf	drawCircle@y0+1,c
  2494  000306  0E2E               	movlw	46
  2495  000308  6E1C               	movwf	drawCircle@y0,c
  2496  00030A  0E00               	movlw	0
  2497  00030C  6E1F               	movwf	drawCircle@r+1,c
  2498  00030E  0E07               	movlw	7
  2499  000310  6E1E               	movwf	drawCircle@r,c
  2500  000312  0EFF               	movlw	255
  2501  000314  6E21               	movwf	drawCircle@color+1,c
  2502  000316  0EE0               	movlw	224
  2503  000318  6E20               	movwf	drawCircle@color,c
  2504  00031A  ECB9  F006         	call	_drawCircle	;wreg free
  2505                           
  2506                           ;Main_Screen.c: 92: fillCircle(80, 30 + 16 , 7, 0x07E0);
  2507  00031E  0E00               	movlw	0
  2508  000320  6E3A               	movwf	fillCircle@x0+1,c
  2509  000322  0E50               	movlw	80
  2510  000324  6E39               	movwf	fillCircle@x0,c
  2511  000326  0E00               	movlw	0
  2512  000328  6E3C               	movwf	fillCircle@y0+1,c
  2513  00032A  0E2E               	movlw	46
  2514  00032C  6E3B               	movwf	fillCircle@y0,c
  2515  00032E  0E00               	movlw	0
  2516  000330  6E3E               	movwf	fillCircle@r+1,c
  2517  000332  0E07               	movlw	7
  2518  000334  6E3D               	movwf	fillCircle@r,c
  2519  000336  0E07               	movlw	7
  2520  000338  6E40               	movwf	fillCircle@color+1,c
  2521  00033A  0EE0               	movlw	224
  2522  00033C  6E3F               	movwf	fillCircle@color,c
  2523  00033E  ECE8  F011         	call	_fillCircle	;wreg free
  2524                           
  2525                           ;Main_Screen.c: 93: drawtext (100, 30 + 10, NS_Count, 0xFFE0, 0x0000, 2);
  2526  000342  0E28               	movlw	40
  2527  000344  6E37               	movwf	drawtext@y,c
  2528  000346  0EA1               	movlw	low _NS_Count
  2529  000348  6E38               	movwf	drawtext@_text,c
  2530  00034A  0E00               	movlw	high _NS_Count
  2531  00034C  6E39               	movwf	drawtext@_text+1,c
  2532  00034E  0EFF               	movlw	255
  2533  000350  6E3B               	movwf	drawtext@color+1,c
  2534  000352  0EE0               	movlw	224
  2535  000354  6E3A               	movwf	drawtext@color,c
  2536  000356  0E00               	movlw	0
  2537  000358  6E3D               	movwf	drawtext@bg+1,c
  2538  00035A  0E00               	movlw	0
  2539  00035C  6E3C               	movwf	drawtext@bg,c
  2540  00035E  0E02               	movlw	2
  2541  000360  6E3E               	movwf	drawtext@size,c
  2542  000362  0E64               	movlw	100
  2543  000364  EC24  F00A         	call	_drawtext
  2544                           
  2545                           ;Main_Screen.c: 96: strcpy(txt, "N/S LT");
  2546  000368  C047  F00F         	movff	_txt,strcpy@to
  2547  00036C  C048  F010         	movff	_txt+1,strcpy@to+1
  2548  000370  0ED6               	movlw	low STR_7
  2549  000372  6E11               	movwf	strcpy@from,c
  2550  000374  0EFF               	movlw	high STR_7
  2551  000376  6E12               	movwf	strcpy@from+1,c
  2552  000378  EC94  F013         	call	_strcpy	;wreg free
  2553                           
  2554                           ;Main_Screen.c: 97: drawtext (30, 60, txt, 0xF81F, 0x0000, 1);
  2555  00037C  0E3C               	movlw	60
  2556  00037E  6E37               	movwf	drawtext@y,c
  2557  000380  C047  F038         	movff	_txt,drawtext@_text
  2558  000384  C048  F039         	movff	_txt+1,drawtext@_text+1
  2559  000388  0EF8               	movlw	248
  2560  00038A  6E3B               	movwf	drawtext@color+1,c
  2561  00038C  0E1F               	movlw	31
  2562  00038E  6E3A               	movwf	drawtext@color,c
  2563  000390  0E00               	movlw	0
  2564  000392  6E3D               	movwf	drawtext@bg+1,c
  2565  000394  0E00               	movlw	0
  2566  000396  6E3C               	movwf	drawtext@bg,c
  2567  000398  0E01               	movlw	1
  2568  00039A  6E3E               	movwf	drawtext@size,c
  2569  00039C  0E1E               	movlw	30
  2570  00039E  EC24  F00A         	call	_drawtext
  2571                           
  2572                           ;Main_Screen.c: 98: drawRect (30, 60 + 16-8, 60, 18, 0xF81F);
  2573  0003A2  0E00               	movlw	0
  2574  0003A4  6E22               	movwf	drawRect@x+1,c
  2575  0003A6  0E1E               	movlw	30
  2576  0003A8  6E21               	movwf	drawRect@x,c
  2577  0003AA  0E00               	movlw	0
  2578  0003AC  6E24               	movwf	drawRect@y+1,c
  2579  0003AE  0E44               	movlw	68
  2580  0003B0  6E23               	movwf	drawRect@y,c
  2581  0003B2  0E00               	movlw	0
  2582  0003B4  6E26               	movwf	drawRect@w+1,c
  2583  0003B6  0E3C               	movlw	60
  2584  0003B8  6E25               	movwf	drawRect@w,c
  2585  0003BA  0E00               	movlw	0
  2586  0003BC  6E28               	movwf	drawRect@h+1,c
  2587  0003BE  0E12               	movlw	18
  2588  0003C0  6E27               	movwf	drawRect@h,c
  2589  0003C2  0EF8               	movlw	248
  2590  0003C4  6E2A               	movwf	drawRect@color+1,c
  2591  0003C6  0E1F               	movlw	31
  2592  0003C8  6E29               	movwf	drawRect@color,c
  2593  0003CA  EC31  F011         	call	_drawRect	;wreg free
  2594                           
  2595                           ;Main_Screen.c: 99: fillCircle(40, 60 + 16, 7, 0xF800);
  2596  0003CE  0E00               	movlw	0
  2597  0003D0  6E3A               	movwf	fillCircle@x0+1,c
  2598  0003D2  0E28               	movlw	40
  2599  0003D4  6E39               	movwf	fillCircle@x0,c
  2600  0003D6  0E00               	movlw	0
  2601  0003D8  6E3C               	movwf	fillCircle@y0+1,c
  2602  0003DA  0E4C               	movlw	76
  2603  0003DC  6E3B               	movwf	fillCircle@y0,c
  2604  0003DE  0E00               	movlw	0
  2605  0003E0  6E3E               	movwf	fillCircle@r+1,c
  2606  0003E2  0E07               	movlw	7
  2607  0003E4  6E3D               	movwf	fillCircle@r,c
  2608  0003E6  0EF8               	movlw	248
  2609  0003E8  6E40               	movwf	fillCircle@color+1,c
  2610  0003EA  0E00               	movlw	0
  2611  0003EC  6E3F               	movwf	fillCircle@color,c
  2612  0003EE  ECE8  F011         	call	_fillCircle	;wreg free
  2613                           
  2614                           ;Main_Screen.c: 100: drawCircle(60, 60 + 16, 7, 0xFFE0);
  2615  0003F2  0E00               	movlw	0
  2616  0003F4  6E1B               	movwf	drawCircle@x0+1,c
  2617  0003F6  0E3C               	movlw	60
  2618  0003F8  6E1A               	movwf	drawCircle@x0,c
  2619  0003FA  0E00               	movlw	0
  2620  0003FC  6E1D               	movwf	drawCircle@y0+1,c
  2621  0003FE  0E4C               	movlw	76
  2622  000400  6E1C               	movwf	drawCircle@y0,c
  2623  000402  0E00               	movlw	0
  2624  000404  6E1F               	movwf	drawCircle@r+1,c
  2625  000406  0E07               	movlw	7
  2626  000408  6E1E               	movwf	drawCircle@r,c
  2627  00040A  0EFF               	movlw	255
  2628  00040C  6E21               	movwf	drawCircle@color+1,c
  2629  00040E  0EE0               	movlw	224
  2630  000410  6E20               	movwf	drawCircle@color,c
  2631  000412  ECB9  F006         	call	_drawCircle	;wreg free
  2632                           
  2633                           ;Main_Screen.c: 101: drawCircle(80, 60 + 16, 7, 0x07E0);
  2634  000416  0E00               	movlw	0
  2635  000418  6E1B               	movwf	drawCircle@x0+1,c
  2636  00041A  0E50               	movlw	80
  2637  00041C  6E1A               	movwf	drawCircle@x0,c
  2638  00041E  0E00               	movlw	0
  2639  000420  6E1D               	movwf	drawCircle@y0+1,c
  2640  000422  0E4C               	movlw	76
  2641  000424  6E1C               	movwf	drawCircle@y0,c
  2642  000426  0E00               	movlw	0
  2643  000428  6E1F               	movwf	drawCircle@r+1,c
  2644  00042A  0E07               	movlw	7
  2645  00042C  6E1E               	movwf	drawCircle@r,c
  2646  00042E  0E07               	movlw	7
  2647  000430  6E21               	movwf	drawCircle@color+1,c
  2648  000432  0EE0               	movlw	224
  2649  000434  6E20               	movwf	drawCircle@color,c
  2650  000436  ECB9  F006         	call	_drawCircle	;wreg free
  2651                           
  2652                           ;Main_Screen.c: 102: drawtext (100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2653  00043A  0E46               	movlw	70
  2654  00043C  6E37               	movwf	drawtext@y,c
  2655  00043E  0E9E               	movlw	low _NSLT_Count
  2656  000440  6E38               	movwf	drawtext@_text,c
  2657  000442  0E00               	movlw	high _NSLT_Count
  2658  000444  6E39               	movwf	drawtext@_text+1,c
  2659  000446  0EF8               	movlw	248
  2660  000448  6E3B               	movwf	drawtext@color+1,c
  2661  00044A  0E1F               	movlw	31
  2662  00044C  6E3A               	movwf	drawtext@color,c
  2663  00044E  0E00               	movlw	0
  2664  000450  6E3D               	movwf	drawtext@bg+1,c
  2665  000452  0E00               	movlw	0
  2666  000454  6E3C               	movwf	drawtext@bg,c
  2667  000456  0E02               	movlw	2
  2668  000458  6E3E               	movwf	drawtext@size,c
  2669  00045A  0E64               	movlw	100
  2670  00045C  EC24  F00A         	call	_drawtext
  2671                           
  2672                           ;Main_Screen.c: 105: strcpy(txt, "EAST/WEST");
  2673  000460  C047  F00F         	movff	_txt,strcpy@to
  2674  000464  C048  F010         	movff	_txt+1,strcpy@to+1
  2675  000468  0ECC               	movlw	low STR_8
  2676  00046A  6E11               	movwf	strcpy@from,c
  2677  00046C  0EFF               	movlw	high STR_8
  2678  00046E  6E12               	movwf	strcpy@from+1,c
  2679  000470  EC94  F013         	call	_strcpy	;wreg free
  2680                           
  2681                           ;Main_Screen.c: 106: drawtext (30, 90, txt, 0x07FF, 0x0000, 1);
  2682  000474  0E5A               	movlw	90
  2683  000476  6E37               	movwf	drawtext@y,c
  2684  000478  C047  F038         	movff	_txt,drawtext@_text
  2685  00047C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2686  000480  0E07               	movlw	7
  2687  000482  6E3B               	movwf	drawtext@color+1,c
  2688  000484  683A               	setf	drawtext@color,c
  2689  000486  0E00               	movlw	0
  2690  000488  6E3D               	movwf	drawtext@bg+1,c
  2691  00048A  0E00               	movlw	0
  2692  00048C  6E3C               	movwf	drawtext@bg,c
  2693  00048E  0E01               	movlw	1
  2694  000490  6E3E               	movwf	drawtext@size,c
  2695  000492  0E1E               	movlw	30
  2696  000494  EC24  F00A         	call	_drawtext
  2697                           
  2698                           ;Main_Screen.c: 107: drawRect (30, 90 + 16-8, 60, 18, 0x07FF);
  2699  000498  0E00               	movlw	0
  2700  00049A  6E22               	movwf	drawRect@x+1,c
  2701  00049C  0E1E               	movlw	30
  2702  00049E  6E21               	movwf	drawRect@x,c
  2703  0004A0  0E00               	movlw	0
  2704  0004A2  6E24               	movwf	drawRect@y+1,c
  2705  0004A4  0E62               	movlw	98
  2706  0004A6  6E23               	movwf	drawRect@y,c
  2707  0004A8  0E00               	movlw	0
  2708  0004AA  6E26               	movwf	drawRect@w+1,c
  2709  0004AC  0E3C               	movlw	60
  2710  0004AE  6E25               	movwf	drawRect@w,c
  2711  0004B0  0E00               	movlw	0
  2712  0004B2  6E28               	movwf	drawRect@h+1,c
  2713  0004B4  0E12               	movlw	18
  2714  0004B6  6E27               	movwf	drawRect@h,c
  2715  0004B8  0E07               	movlw	7
  2716  0004BA  6E2A               	movwf	drawRect@color+1,c
  2717  0004BC  6829               	setf	drawRect@color,c
  2718  0004BE  EC31  F011         	call	_drawRect	;wreg free
  2719                           
  2720                           ;Main_Screen.c: 108: fillCircle(40, 90 + 16, 7, 0xF800);
  2721  0004C2  0E00               	movlw	0
  2722  0004C4  6E3A               	movwf	fillCircle@x0+1,c
  2723  0004C6  0E28               	movlw	40
  2724  0004C8  6E39               	movwf	fillCircle@x0,c
  2725  0004CA  0E00               	movlw	0
  2726  0004CC  6E3C               	movwf	fillCircle@y0+1,c
  2727  0004CE  0E6A               	movlw	106
  2728  0004D0  6E3B               	movwf	fillCircle@y0,c
  2729  0004D2  0E00               	movlw	0
  2730  0004D4  6E3E               	movwf	fillCircle@r+1,c
  2731  0004D6  0E07               	movlw	7
  2732  0004D8  6E3D               	movwf	fillCircle@r,c
  2733  0004DA  0EF8               	movlw	248
  2734  0004DC  6E40               	movwf	fillCircle@color+1,c
  2735  0004DE  0E00               	movlw	0
  2736  0004E0  6E3F               	movwf	fillCircle@color,c
  2737  0004E2  ECE8  F011         	call	_fillCircle	;wreg free
  2738                           
  2739                           ;Main_Screen.c: 109: drawCircle(60, 90 + 16, 7, 0xFFE0);
  2740  0004E6  0E00               	movlw	0
  2741  0004E8  6E1B               	movwf	drawCircle@x0+1,c
  2742  0004EA  0E3C               	movlw	60
  2743  0004EC  6E1A               	movwf	drawCircle@x0,c
  2744  0004EE  0E00               	movlw	0
  2745  0004F0  6E1D               	movwf	drawCircle@y0+1,c
  2746  0004F2  0E6A               	movlw	106
  2747  0004F4  6E1C               	movwf	drawCircle@y0,c
  2748  0004F6  0E00               	movlw	0
  2749  0004F8  6E1F               	movwf	drawCircle@r+1,c
  2750  0004FA  0E07               	movlw	7
  2751  0004FC  6E1E               	movwf	drawCircle@r,c
  2752  0004FE  0EFF               	movlw	255
  2753  000500  6E21               	movwf	drawCircle@color+1,c
  2754  000502  0EE0               	movlw	224
  2755  000504  6E20               	movwf	drawCircle@color,c
  2756  000506  ECB9  F006         	call	_drawCircle	;wreg free
  2757                           
  2758                           ;Main_Screen.c: 110: drawCircle(80, 90 + 16, 7, 0x07E0);
  2759  00050A  0E00               	movlw	0
  2760  00050C  6E1B               	movwf	drawCircle@x0+1,c
  2761  00050E  0E50               	movlw	80
  2762  000510  6E1A               	movwf	drawCircle@x0,c
  2763  000512  0E00               	movlw	0
  2764  000514  6E1D               	movwf	drawCircle@y0+1,c
  2765  000516  0E6A               	movlw	106
  2766  000518  6E1C               	movwf	drawCircle@y0,c
  2767  00051A  0E00               	movlw	0
  2768  00051C  6E1F               	movwf	drawCircle@r+1,c
  2769  00051E  0E07               	movlw	7
  2770  000520  6E1E               	movwf	drawCircle@r,c
  2771  000522  0E07               	movlw	7
  2772  000524  6E21               	movwf	drawCircle@color+1,c
  2773  000526  0EE0               	movlw	224
  2774  000528  6E20               	movwf	drawCircle@color,c
  2775  00052A  ECB9  F006         	call	_drawCircle	;wreg free
  2776                           
  2777                           ;Main_Screen.c: 111: drawtext (100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2778  00052E  0E64               	movlw	100
  2779  000530  6E37               	movwf	drawtext@y,c
  2780  000532  0E5E               	movlw	low _EW_Count
  2781  000534  6E38               	movwf	drawtext@_text,c
  2782  000536  0E00               	movlw	high _EW_Count
  2783  000538  6E39               	movwf	drawtext@_text+1,c
  2784  00053A  0E07               	movlw	7
  2785  00053C  6E3B               	movwf	drawtext@color+1,c
  2786  00053E  683A               	setf	drawtext@color,c
  2787  000540  0E00               	movlw	0
  2788  000542  6E3D               	movwf	drawtext@bg+1,c
  2789  000544  0E00               	movlw	0
  2790  000546  6E3C               	movwf	drawtext@bg,c
  2791  000548  0E02               	movlw	2
  2792  00054A  6E3E               	movwf	drawtext@size,c
  2793  00054C  0E64               	movlw	100
  2794  00054E  EC24  F00A         	call	_drawtext
  2795                           
  2796                           ;Main_Screen.c: 114: strcpy(txt, "E/W LT");
  2797  000552  C047  F00F         	movff	_txt,strcpy@to
  2798  000556  C048  F010         	movff	_txt+1,strcpy@to+1
  2799  00055A  0EDD               	movlw	low STR_9
  2800  00055C  6E11               	movwf	strcpy@from,c
  2801  00055E  0EFF               	movlw	high STR_9
  2802  000560  6E12               	movwf	strcpy@from+1,c
  2803  000562  EC94  F013         	call	_strcpy	;wreg free
  2804                           
  2805                           ;Main_Screen.c: 115: drawtext (30, 120, txt, 0xFFFF, 0x0000, 1);
  2806  000566  0E78               	movlw	120
  2807  000568  6E37               	movwf	drawtext@y,c
  2808  00056A  C047  F038         	movff	_txt,drawtext@_text
  2809  00056E  C048  F039         	movff	_txt+1,drawtext@_text+1
  2810  000572  0EFF               	movlw	255
  2811  000574  6E3B               	movwf	drawtext@color+1,c
  2812  000576  683A               	setf	drawtext@color,c
  2813  000578  0E00               	movlw	0
  2814  00057A  6E3D               	movwf	drawtext@bg+1,c
  2815  00057C  0E00               	movlw	0
  2816  00057E  6E3C               	movwf	drawtext@bg,c
  2817  000580  0E01               	movlw	1
  2818  000582  6E3E               	movwf	drawtext@size,c
  2819  000584  0E1E               	movlw	30
  2820  000586  EC24  F00A         	call	_drawtext
  2821                           
  2822                           ;Main_Screen.c: 116: drawRect (30, 120 + 16-8, 60, 18, 0xFFFF);
  2823  00058A  0E00               	movlw	0
  2824  00058C  6E22               	movwf	drawRect@x+1,c
  2825  00058E  0E1E               	movlw	30
  2826  000590  6E21               	movwf	drawRect@x,c
  2827  000592  0E00               	movlw	0
  2828  000594  6E24               	movwf	drawRect@y+1,c
  2829  000596  0E80               	movlw	128
  2830  000598  6E23               	movwf	drawRect@y,c
  2831  00059A  0E00               	movlw	0
  2832  00059C  6E26               	movwf	drawRect@w+1,c
  2833  00059E  0E3C               	movlw	60
  2834  0005A0  6E25               	movwf	drawRect@w,c
  2835  0005A2  0E00               	movlw	0
  2836  0005A4  6E28               	movwf	drawRect@h+1,c
  2837  0005A6  0E12               	movlw	18
  2838  0005A8  6E27               	movwf	drawRect@h,c
  2839  0005AA  0EFF               	movlw	255
  2840  0005AC  6E2A               	movwf	drawRect@color+1,c
  2841  0005AE  6829               	setf	drawRect@color,c
  2842  0005B0  EC31  F011         	call	_drawRect	;wreg free
  2843                           
  2844                           ;Main_Screen.c: 117: fillCircle(40, 120 + 16, 7, 0xF800);
  2845  0005B4  0E00               	movlw	0
  2846  0005B6  6E3A               	movwf	fillCircle@x0+1,c
  2847  0005B8  0E28               	movlw	40
  2848  0005BA  6E39               	movwf	fillCircle@x0,c
  2849  0005BC  0E00               	movlw	0
  2850  0005BE  6E3C               	movwf	fillCircle@y0+1,c
  2851  0005C0  0E88               	movlw	136
  2852  0005C2  6E3B               	movwf	fillCircle@y0,c
  2853  0005C4  0E00               	movlw	0
  2854  0005C6  6E3E               	movwf	fillCircle@r+1,c
  2855  0005C8  0E07               	movlw	7
  2856  0005CA  6E3D               	movwf	fillCircle@r,c
  2857  0005CC  0EF8               	movlw	248
  2858  0005CE  6E40               	movwf	fillCircle@color+1,c
  2859  0005D0  0E00               	movlw	0
  2860  0005D2  6E3F               	movwf	fillCircle@color,c
  2861  0005D4  ECE8  F011         	call	_fillCircle	;wreg free
  2862                           
  2863                           ;Main_Screen.c: 118: drawCircle(60, 120 + 16, 7, 0xFFE0);
  2864  0005D8  0E00               	movlw	0
  2865  0005DA  6E1B               	movwf	drawCircle@x0+1,c
  2866  0005DC  0E3C               	movlw	60
  2867  0005DE  6E1A               	movwf	drawCircle@x0,c
  2868  0005E0  0E00               	movlw	0
  2869  0005E2  6E1D               	movwf	drawCircle@y0+1,c
  2870  0005E4  0E88               	movlw	136
  2871  0005E6  6E1C               	movwf	drawCircle@y0,c
  2872  0005E8  0E00               	movlw	0
  2873  0005EA  6E1F               	movwf	drawCircle@r+1,c
  2874  0005EC  0E07               	movlw	7
  2875  0005EE  6E1E               	movwf	drawCircle@r,c
  2876  0005F0  0EFF               	movlw	255
  2877  0005F2  6E21               	movwf	drawCircle@color+1,c
  2878  0005F4  0EE0               	movlw	224
  2879  0005F6  6E20               	movwf	drawCircle@color,c
  2880  0005F8  ECB9  F006         	call	_drawCircle	;wreg free
  2881                           
  2882                           ;Main_Screen.c: 119: drawCircle(80, 120 + 16, 7, 0x07E0);
  2883  0005FC  0E00               	movlw	0
  2884  0005FE  6E1B               	movwf	drawCircle@x0+1,c
  2885  000600  0E50               	movlw	80
  2886  000602  6E1A               	movwf	drawCircle@x0,c
  2887  000604  0E00               	movlw	0
  2888  000606  6E1D               	movwf	drawCircle@y0+1,c
  2889  000608  0E88               	movlw	136
  2890  00060A  6E1C               	movwf	drawCircle@y0,c
  2891  00060C  0E00               	movlw	0
  2892  00060E  6E1F               	movwf	drawCircle@r+1,c
  2893  000610  0E07               	movlw	7
  2894  000612  6E1E               	movwf	drawCircle@r,c
  2895  000614  0E07               	movlw	7
  2896  000616  6E21               	movwf	drawCircle@color+1,c
  2897  000618  0EE0               	movlw	224
  2898  00061A  6E20               	movwf	drawCircle@color,c
  2899  00061C  ECB9  F006         	call	_drawCircle	;wreg free
  2900                           
  2901                           ;Main_Screen.c: 120: drawtext (100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2902  000620  0E82               	movlw	130
  2903  000622  6E37               	movwf	drawtext@y,c
  2904  000624  0E9B               	movlw	low _EWLT_Count
  2905  000626  6E38               	movwf	drawtext@_text,c
  2906  000628  0E00               	movlw	high _EWLT_Count
  2907  00062A  6E39               	movwf	drawtext@_text+1,c
  2908  00062C  0EFF               	movlw	255
  2909  00062E  6E3B               	movwf	drawtext@color+1,c
  2910  000630  683A               	setf	drawtext@color,c
  2911  000632  0E00               	movlw	0
  2912  000634  6E3D               	movwf	drawtext@bg+1,c
  2913  000636  0E00               	movlw	0
  2914  000638  6E3C               	movwf	drawtext@bg,c
  2915  00063A  0E02               	movlw	2
  2916  00063C  6E3E               	movwf	drawtext@size,c
  2917  00063E  0E64               	movlw	100
  2918  000640  EC24  F00A         	call	_drawtext
  2919                           
  2920                           ;Main_Screen.c: 123: strcpy(txt, "PNS");
  2921  000644  C047  F00F         	movff	_txt,strcpy@to
  2922  000648  C048  F010         	movff	_txt+1,strcpy@to+1
  2923  00064C  0EEF               	movlw	low STR_10
  2924  00064E  6E11               	movwf	strcpy@from,c
  2925  000650  0EFF               	movlw	high STR_10
  2926  000652  6E12               	movwf	strcpy@from+1,c
  2927  000654  EC94  F013         	call	_strcpy	;wreg free
  2928                           
  2929                           ;Main_Screen.c: 124: drawtext(3, 30, txt, 0xFFE0, 0x0000, 1);
  2930  000658  0E1E               	movlw	30
  2931  00065A  6E37               	movwf	drawtext@y,c
  2932  00065C  C047  F038         	movff	_txt,drawtext@_text
  2933  000660  C048  F039         	movff	_txt+1,drawtext@_text+1
  2934  000664  0EFF               	movlw	255
  2935  000666  6E3B               	movwf	drawtext@color+1,c
  2936  000668  0EE0               	movlw	224
  2937  00066A  6E3A               	movwf	drawtext@color,c
  2938  00066C  0E00               	movlw	0
  2939  00066E  6E3D               	movwf	drawtext@bg+1,c
  2940  000670  0E00               	movlw	0
  2941  000672  6E3C               	movwf	drawtext@bg,c
  2942  000674  0E01               	movlw	1
  2943  000676  6E3E               	movwf	drawtext@size,c
  2944  000678  0E03               	movlw	3
  2945  00067A  EC24  F00A         	call	_drawtext
  2946                           
  2947                           ;Main_Screen.c: 125: drawtext(2, 40, PED_NS_Count, 0xFFE0, 0x0000, 2);
  2948  00067E  0E28               	movlw	40
  2949  000680  6E37               	movwf	drawtext@y,c
  2950  000682  0EA7               	movlw	low _PED_NS_Count
  2951  000684  6E38               	movwf	drawtext@_text,c
  2952  000686  0E00               	movlw	high _PED_NS_Count
  2953  000688  6E39               	movwf	drawtext@_text+1,c
  2954  00068A  0EFF               	movlw	255
  2955  00068C  6E3B               	movwf	drawtext@color+1,c
  2956  00068E  0EE0               	movlw	224
  2957  000690  6E3A               	movwf	drawtext@color,c
  2958  000692  0E00               	movlw	0
  2959  000694  6E3D               	movwf	drawtext@bg+1,c
  2960  000696  0E00               	movlw	0
  2961  000698  6E3C               	movwf	drawtext@bg,c
  2962  00069A  0E02               	movlw	2
  2963  00069C  6E3E               	movwf	drawtext@size,c
  2964  00069E  0E02               	movlw	2
  2965  0006A0  EC24  F00A         	call	_drawtext
  2966                           
  2967                           ;Main_Screen.c: 129: strcpy(txt, "PEW");
  2968  0006A4  C047  F00F         	movff	_txt,strcpy@to
  2969  0006A8  C048  F010         	movff	_txt+1,strcpy@to+1
  2970  0006AC  0EF3               	movlw	low STR_11
  2971  0006AE  6E11               	movwf	strcpy@from,c
  2972  0006B0  0EFF               	movlw	high STR_11
  2973  0006B2  6E12               	movwf	strcpy@from+1,c
  2974  0006B4  EC94  F013         	call	_strcpy	;wreg free
  2975                           
  2976                           ;Main_Screen.c: 130: drawtext(3, 90, txt, 0x07FF, 0x0000, 1);
  2977  0006B8  0E5A               	movlw	90
  2978  0006BA  6E37               	movwf	drawtext@y,c
  2979  0006BC  C047  F038         	movff	_txt,drawtext@_text
  2980  0006C0  C048  F039         	movff	_txt+1,drawtext@_text+1
  2981  0006C4  0E07               	movlw	7
  2982  0006C6  6E3B               	movwf	drawtext@color+1,c
  2983  0006C8  683A               	setf	drawtext@color,c
  2984  0006CA  0E00               	movlw	0
  2985  0006CC  6E3D               	movwf	drawtext@bg+1,c
  2986  0006CE  0E00               	movlw	0
  2987  0006D0  6E3C               	movwf	drawtext@bg,c
  2988  0006D2  0E01               	movlw	1
  2989  0006D4  6E3E               	movwf	drawtext@size,c
  2990  0006D6  0E03               	movlw	3
  2991  0006D8  EC24  F00A         	call	_drawtext
  2992                           
  2993                           ;Main_Screen.c: 131: drawtext(2, 100, PED_EW_Count, 0x07FF, 0x0000, 2);
  2994  0006DC  0E64               	movlw	100
  2995  0006DE  6E37               	movwf	drawtext@y,c
  2996  0006E0  0EA4               	movlw	low _PED_EW_Count
  2997  0006E2  6E38               	movwf	drawtext@_text,c
  2998  0006E4  0E00               	movlw	high _PED_EW_Count
  2999  0006E6  6E39               	movwf	drawtext@_text+1,c
  3000  0006E8  0E07               	movlw	7
  3001  0006EA  6E3B               	movwf	drawtext@color+1,c
  3002  0006EC  683A               	setf	drawtext@color,c
  3003  0006EE  0E00               	movlw	0
  3004  0006F0  6E3D               	movwf	drawtext@bg+1,c
  3005  0006F2  0E00               	movlw	0
  3006  0006F4  6E3C               	movwf	drawtext@bg,c
  3007  0006F6  0E02               	movlw	2
  3008  0006F8  6E3E               	movwf	drawtext@size,c
  3009  0006FA  0E02               	movlw	2
  3010  0006FC  EC24  F00A         	call	_drawtext
  3011                           
  3012                           ;Main_Screen.c: 133: if (1 == 0)
  3013  000700  D005               	goto	l5679
  3014                           
  3015                           ;Main_Screen.c: 134: {
  3016                           ;Main_Screen.c: 135: Timing_Txt[0] = 'S';
  3017  000702  0E53               	movlw	83
  3018  000704  0100               	movlb	0	; () banked
  3019  000706  6F80               	movwf	_Timing_Txt& (0+255),b
  3020                           
  3021                           ;Main_Screen.c: 136: Timing_Txt[1] = 'P';
  3022  000708  0E50               	movlw	80
  3023  00070A  D004               	goto	L1
  3024  00070C                     l5679:
  3025                           
  3026                           ;Main_Screen.c: 138: else
  3027                           ;Main_Screen.c: 139: {
  3028                           ;Main_Screen.c: 140: Timing_Txt[0] = 'F';
  3029  00070C  0E46               	movlw	70
  3030  00070E  0100               	movlb	0	; () banked
  3031  000710  6F80               	movwf	_Timing_Txt& (0+255),b
  3032                           
  3033                           ;Main_Screen.c: 141: Timing_Txt[1] = 'S';
  3034  000712  0E53               	movlw	83
  3035  000714                     L1:
  3036  000714  0100               	movlb	0	; () banked
  3037  000716  6F81               	movwf	(_Timing_Txt+1)& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;Main_Screen.c: 142: }
  3041                           ;Main_Screen.c: 143: Timing_Txt[2] = 24/10 + '0';
  3042  000718  0E32               	movlw	50
  3043  00071A  0100               	movlb	0	; () banked
  3044  00071C  6F82               	movwf	(_Timing_Txt+2)& (0+255),b
  3045                           
  3046                           ;Main_Screen.c: 144: Timing_Txt[3] = 24%10 + '0';
  3047  00071E  0E34               	movlw	52
  3048  000720  0100               	movlb	0	; () banked
  3049  000722  6F83               	movwf	(_Timing_Txt+3)& (0+255),b
  3050                           
  3051                           ;Main_Screen.c: 145: Timing_Txt[5] = 3%10 + '0';
  3052  000724  0E33               	movlw	51
  3053  000726  0100               	movlb	0	; () banked
  3054  000728  6F85               	movwf	(_Timing_Txt+5)& (0+255),b
  3055                           
  3056                           ;Main_Screen.c: 146: Timing_Txt[7] = 13/10 + '0';
  3057  00072A  0E31               	movlw	49
  3058  00072C  0100               	movlb	0	; () banked
  3059  00072E  6F87               	movwf	(_Timing_Txt+7)& (0+255),b
  3060                           
  3061                           ;Main_Screen.c: 147: Timing_Txt[8] = 13%10 + '0';
  3062  000730  0E33               	movlw	51
  3063  000732  0100               	movlb	0	; () banked
  3064  000734  6F88               	movwf	(_Timing_Txt+8)& (0+255),b
  3065                           
  3066                           ;Main_Screen.c: 148: Timing_Txt[10] = 7 + '0';
  3067  000736  0E37               	movlw	55
  3068  000738  0100               	movlb	0	; () banked
  3069  00073A  6F8A               	movwf	(_Timing_Txt+10)& (0+255),b
  3070                           
  3071                           ;Main_Screen.c: 149: Timing_Txt[11] = 5 + '0';
  3072  00073C  0E35               	movlw	53
  3073  00073E  0100               	movlb	0	; () banked
  3074  000740  6F8B               	movwf	(_Timing_Txt+11)& (0+255),b
  3075                           
  3076                           ;Main_Screen.c: 150: Timing_Txt[12] = 8 + '0';
  3077  000742  0E38               	movlw	56
  3078  000744  0100               	movlb	0	; () banked
  3079  000746  6F8C               	movwf	(_Timing_Txt+12)& (0+255),b
  3080                           
  3081                           ;Main_Screen.c: 151: Timing_Txt[13] = 5 + '0';
  3082  000748  0E35               	movlw	53
  3083  00074A  0100               	movlb	0	; () banked
  3084  00074C  6F8D               	movwf	(_Timing_Txt+13)& (0+255),b
  3085                           
  3086                           ;Main_Screen.c: 152: Timing_Txt[14] = 6 + '0';
  3087  00074E  0E36               	movlw	54
  3088  000750  0100               	movlb	0	; () banked
  3089  000752  6F8E               	movwf	(_Timing_Txt+14)& (0+255),b
  3090                           
  3091                           ;Main_Screen.c: 153: Timing_Txt[15] = 5 + '0';
  3092  000754  0E35               	movlw	53
  3093  000756  0100               	movlb	0	; () banked
  3094  000758  6F8F               	movwf	(_Timing_Txt+15)& (0+255),b
  3095                           
  3096                           ;Main_Screen.c: 154: Timing_Txt[17] = 7 + '0';
  3097  00075A  0E37               	movlw	55
  3098  00075C  0100               	movlb	0	; () banked
  3099  00075E  6F91               	movwf	(_Timing_Txt+17)& (0+255),b
  3100                           
  3101                           ;Main_Screen.c: 155: Timing_Txt[18] = 5 + '0';
  3102  000760  0E35               	movlw	53
  3103  000762  0100               	movlb	0	; () banked
  3104  000764  6F92               	movwf	(_Timing_Txt+18)& (0+255),b
  3105                           
  3106                           ;Main_Screen.c: 156: Timing_Txt[19] = 7 + '0';
  3107  000766  0E37               	movlw	55
  3108  000768  0100               	movlb	0	; () banked
  3109  00076A  6F93               	movwf	(_Timing_Txt+19)& (0+255),b
  3110                           
  3111                           ;Main_Screen.c: 157: Timing_Txt[20] = 5 + '0';
  3112  00076C  0E35               	movlw	53
  3113  00076E  0100               	movlb	0	; () banked
  3114  000770  6F94               	movwf	(_Timing_Txt+20)& (0+255),b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;Main_Screen.c: 158: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  3118  000772  0E96               	movlw	150
  3119  000774  6E37               	movwf	drawtext@y,c
  3120  000776  0E80               	movlw	low _Timing_Txt
  3121  000778  6E38               	movwf	drawtext@_text,c
  3122  00077A  0E00               	movlw	high _Timing_Txt
  3123  00077C  6E39               	movwf	drawtext@_text+1,c
  3124  00077E  0EFF               	movlw	255
  3125  000780  6E3B               	movwf	drawtext@color+1,c
  3126  000782  683A               	setf	drawtext@color,c
  3127  000784  0E00               	movlw	0
  3128  000786  6E3D               	movwf	drawtext@bg+1,c
  3129  000788  0E00               	movlw	0
  3130  00078A  6E3C               	movwf	drawtext@bg,c
  3131  00078C  0E01               	movlw	1
  3132  00078E  6E3E               	movwf	drawtext@size,c
  3133  000790  0E01               	movlw	1
  3134  000792  EC24  F00A         	call	_drawtext
  3135  000796  0012               	return		;funcret
  3136  000798                     __end_of_Initialize_LCD_Screen:
  3137                           	opt stack 0
  3138                           tblptru	equ	0xFF8
  3139                           tblptrh	equ	0xFF7
  3140                           tblptrl	equ	0xFF6
  3141                           tablat	equ	0xFF5
  3142                           intcon	equ	0xFF2
  3143                           intcon2	equ	0xFF1
  3144                           intcon3	equ	0xFF0
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postdec1	equ	0xFE5
  3148                           fsr1l	equ	0xFE1
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function _fillScreen *****************
  3152 ;; Defined at:
  3153 ;;		line 570 in file "ST7735_TFT.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  color           2   33[COMRAM] unsigned int 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;		None
  3158 ;; Return value:  Size  Location     Type
  3159 ;;		None               void
  3160 ;; Registers used:
  3161 ;;		wreg, status,2, status,0, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3167 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;Total ram usage:        2 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    6
  3174 ;; This function calls:
  3175 ;;		_fillRectangle
  3176 ;; This function is called by:
  3177 ;;		_Initialize_LCD_Screen
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text4
  3182  00284E                     __ptext4:
  3183                           	opt stack 0
  3184  00284E                     _fillScreen:
  3185                           	opt stack 23
  3186                           
  3187                           ;ST7735_TFT.c: 572: fillRectangle(0, 0, 128, 160, color);
  3188                           
  3189                           ;incstack = 0
  3190  00284E  0E00               	movlw	0
  3191  002850  6E16               	movwf	fillRectangle@y,c
  3192  002852  0E80               	movlw	128
  3193  002854  6E17               	movwf	fillRectangle@w,c
  3194  002856  0EA0               	movlw	160
  3195  002858  6E18               	movwf	fillRectangle@h,c
  3196  00285A  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3197  00285E  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3198  002862  0E00               	movlw	0
  3199  002864  EC82  F00C         	call	_fillRectangle
  3200  002868  0012               	return		;funcret
  3201  00286A                     __end_of_fillScreen:
  3202                           	opt stack 0
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           intcon	equ	0xFF2
  3208                           intcon2	equ	0xFF1
  3209                           intcon3	equ	0xFF0
  3210                           postinc0	equ	0xFEE
  3211                           wreg	equ	0xFE8
  3212                           postdec1	equ	0xFE5
  3213                           fsr1l	equ	0xFE1
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function _fillRectangle *****************
  3217 ;; Defined at:
  3218 ;;		line 454 in file "ST7735_TFT.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  x               1    wreg     unsigned char 
  3221 ;;  y               1   21[COMRAM] unsigned char 
  3222 ;;  w               1   22[COMRAM] unsigned char 
  3223 ;;  h               1   23[COMRAM] unsigned char 
  3224 ;;  color           2   24[COMRAM] unsigned int 
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  x               1   32[COMRAM] unsigned char 
  3227 ;;  lo              1   31[COMRAM] unsigned char 
  3228 ;;  hi              1   30[COMRAM] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;		None               void
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3238 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;Total ram usage:       12 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    5
  3245 ;; This function calls:
  3246 ;;		_setAddrWindow
  3247 ;;		_spiwrite
  3248 ;; This function is called by:
  3249 ;;		_fillScreen
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text5
  3254  001904                     __ptext5:
  3255                           	opt stack 0
  3256  001904                     _fillRectangle:
  3257                           	opt stack 23
  3258                           
  3259                           ;incstack = 0
  3260                           ;fillRectangle@x stored from wreg
  3261  001904  6E21               	movwf	fillRectangle@x,c
  3262                           
  3263                           ;ST7735_TFT.c: 456: unsigned char hi, lo;
  3264                           ;ST7735_TFT.c: 457: if((x >= 128) || (y >= 160))
  3265  001906  0E80               	movlw	128
  3266  001908  6021               	cpfslt	fillRectangle@x,c
  3267  00190A  D069               	goto	l281
  3268  00190C  0E9F               	movlw	159
  3269  00190E  6416               	cpfsgt	fillRectangle@y,c
  3270  001910  D001               	goto	l5371
  3271                           
  3272                           ;ST7735_TFT.c: 458: return;
  3273  001912  D065               	goto	l281
  3274  001914                     l5371:
  3275                           
  3276                           ;ST7735_TFT.c: 459: if((x + w - 1) >= 128)
  3277  001914  0EFF               	movlw	255
  3278  001916  6E1B               	movwf	??_fillRectangle& (0+255),c
  3279  001918  0EFF               	movlw	255
  3280  00191A  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3281  00191C  5017               	movf	fillRectangle@w,w,c
  3282  00191E  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3283  001922  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3284  001924  261D               	addwf	??_fillRectangle+2,f,c
  3285  001926  0E00               	movlw	0
  3286  001928  221E               	addwfc	??_fillRectangle+3,f,c
  3287  00192A  501B               	movf	??_fillRectangle,w,c
  3288  00192C  261D               	addwf	??_fillRectangle+2,f,c
  3289  00192E  501C               	movf	??_fillRectangle+1,w,c
  3290  001930  221E               	addwfc	??_fillRectangle+3,f,c
  3291  001932  BE1E               	btfsc	??_fillRectangle+3,7,c
  3292  001934  D00A               	goto	l282
  3293  001936  501E               	movf	??_fillRectangle+3,w,c
  3294  001938  E104               	bnz	u4070
  3295  00193A  0E80               	movlw	128
  3296  00193C  5C1D               	subwf	??_fillRectangle+2,w,c
  3297  00193E  A0D8               	btfss	status,0,c
  3298  001940  D004               	goto	l282
  3299  001942                     u4070:
  3300                           
  3301                           ;ST7735_TFT.c: 460: w = 128 - x;
  3302  001942  5021               	movf	fillRectangle@x,w,c
  3303  001944  0800               	sublw	0
  3304  001946  0F80               	addlw	128
  3305  001948  6E17               	movwf	fillRectangle@w,c
  3306  00194A                     l282:
  3307                           
  3308                           ;ST7735_TFT.c: 461: if((y + h - 1) >= 160)
  3309  00194A  0EFF               	movlw	255
  3310  00194C  6E1B               	movwf	??_fillRectangle& (0+255),c
  3311  00194E  0EFF               	movlw	255
  3312  001950  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3313  001952  5018               	movf	fillRectangle@h,w,c
  3314  001954  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3315  001958  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3316  00195A  261D               	addwf	??_fillRectangle+2,f,c
  3317  00195C  0E00               	movlw	0
  3318  00195E  221E               	addwfc	??_fillRectangle+3,f,c
  3319  001960  501B               	movf	??_fillRectangle,w,c
  3320  001962  261D               	addwf	??_fillRectangle+2,f,c
  3321  001964  501C               	movf	??_fillRectangle+1,w,c
  3322  001966  221E               	addwfc	??_fillRectangle+3,f,c
  3323  001968  BE1E               	btfsc	??_fillRectangle+3,7,c
  3324  00196A  D00B               	goto	l5377
  3325  00196C  501E               	movf	??_fillRectangle+3,w,c
  3326  00196E  E104               	bnz	u4080
  3327  001970  0EA0               	movlw	160
  3328  001972  5C1D               	subwf	??_fillRectangle+2,w,c
  3329  001974  A0D8               	btfss	status,0,c
  3330  001976  D005               	goto	l5377
  3331  001978                     u4080:
  3332                           
  3333                           ;ST7735_TFT.c: 462: h = 160 - y;
  3334  001978  5016               	movf	fillRectangle@y,w,c
  3335  00197A  0800               	sublw	0
  3336  00197C  0FA0               	addlw	160
  3337  00197E  6E18               	movwf	fillRectangle@h,c
  3338  001980  D000               	goto	l5377
  3339  001982                     l5377:
  3340                           
  3341                           ;ST7735_TFT.c: 463: setAddrWindow(x, y, x+w-1, y+h-1);
  3342  001982  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3343  001986  5021               	movf	fillRectangle@x,w,c
  3344  001988  2417               	addwf	fillRectangle@w,w,c
  3345  00198A  6E1B               	movwf	??_fillRectangle& (0+255),c
  3346  00198C  041B               	decf	??_fillRectangle,w,c
  3347  00198E  6E13               	movwf	setAddrWindow@x1,c
  3348  001990  5016               	movf	fillRectangle@y,w,c
  3349  001992  2418               	addwf	fillRectangle@h,w,c
  3350  001994  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3351  001996  041C               	decf	??_fillRectangle+1,w,c
  3352  001998  6E14               	movwf	setAddrWindow@y1,c
  3353  00199A  5021               	movf	fillRectangle@x,w,c
  3354  00199C  EC11  F012         	call	_setAddrWindow
  3355                           
  3356                           ;ST7735_TFT.c: 464: hi = color >> 8; lo = color;
  3357  0019A0  501A               	movf	fillRectangle@color+1,w,c
  3358  0019A2  6E1F               	movwf	fillRectangle@hi,c
  3359  0019A4  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3360                           
  3361                           ;ST7735_TFT.c: 465: PORTDbits.RD2 = 1;
  3362  0019A8  8483               	bsf	3971,2,c	;volatile
  3363                           
  3364                           ;ST7735_TFT.c: 466: PORTDbits.RD3 = 0;
  3365  0019AA  9683               	bcf	3971,3,c	;volatile
  3366                           
  3367                           ;ST7735_TFT.c: 468: for(y=h; y>0; y--) {
  3368  0019AC  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3369  0019B0                     l5389:
  3370  0019B0  5016               	movf	fillRectangle@y,w,c
  3371  0019B2  B4D8               	btfsc	status,2,c
  3372  0019B4  D013               	goto	l285
  3373  0019B6  D001               	goto	l284
  3374  0019B8  D011               	goto	l285
  3375  0019BA                     l284:
  3376                           
  3377                           ;ST7735_TFT.c: 469: for(x = w; x > 0; x--) {
  3378  0019BA  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3379  0019BE                     l5393:
  3380  0019BE  5021               	movf	fillRectangle@x,w,c
  3381  0019C0  B4D8               	btfsc	status,2,c
  3382  0019C2  D00A               	goto	l5403
  3383  0019C4  D001               	goto	l5397
  3384  0019C6  D008               	goto	l5403
  3385  0019C8                     l5397:
  3386                           
  3387                           ;ST7735_TFT.c: 470: spiwrite(hi);
  3388  0019C8  501F               	movf	fillRectangle@hi,w,c
  3389  0019CA  EC6F  F014         	call	_spiwrite
  3390                           
  3391                           ;ST7735_TFT.c: 471: spiwrite(lo);
  3392  0019CE  5020               	movf	fillRectangle@lo,w,c
  3393  0019D0  EC6F  F014         	call	_spiwrite
  3394  0019D4  0621               	decf	fillRectangle@x,f,c
  3395  0019D6  D7F3               	goto	l5393
  3396  0019D8                     l5403:
  3397  0019D8  0616               	decf	fillRectangle@y,f,c
  3398  0019DA  D7EA               	goto	l5389
  3399  0019DC                     l285:
  3400                           
  3401                           ;ST7735_TFT.c: 472: }
  3402                           ;ST7735_TFT.c: 473: }
  3403                           ;ST7735_TFT.c: 474: PORTDbits.RD3 = 1;
  3404  0019DC  8683               	bsf	3971,3,c	;volatile
  3405  0019DE                     l281:
  3406  0019DE  0012               	return		;funcret
  3407  0019E0                     __end_of_fillRectangle:
  3408                           	opt stack 0
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           intcon	equ	0xFF2
  3414                           intcon2	equ	0xFF1
  3415                           intcon3	equ	0xFF0
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           postdec1	equ	0xFE5
  3419                           fsr1l	equ	0xFE1
  3420                           status	equ	0xFD8
  3421                           
  3422 ;; *************** function _drawRect *****************
  3423 ;; Defined at:
  3424 ;;		line 636 in file "ST7735_TFT.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  x               2   32[COMRAM] unsigned int 
  3427 ;;  y               2   34[COMRAM] unsigned int 
  3428 ;;  w               2   36[COMRAM] unsigned int 
  3429 ;;  h               2   38[COMRAM] unsigned int 
  3430 ;;  color           2   40[COMRAM] unsigned int 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;		None               void
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3442 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;Total ram usage:       11 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    6
  3449 ;; This function calls:
  3450 ;;		_drawFastHLine
  3451 ;;		_drawFastVLine
  3452 ;; This function is called by:
  3453 ;;		_Initialize_LCD_Screen
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text6
  3458  002262                     __ptext6:
  3459                           	opt stack 0
  3460  002262                     _drawRect:
  3461                           	opt stack 23
  3462                           
  3463                           ;ST7735_TFT.c: 638: drawFastHLine(x, y, w, color);
  3464                           
  3465                           ;incstack = 0
  3466  002262  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3467  002266  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3468  00226A  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3469  00226E  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3470  002272  5021               	movf	drawRect@x,w,c
  3471  002274  ECB6  F00F         	call	_drawFastHLine
  3472                           
  3473                           ;ST7735_TFT.c: 639: drawFastHLine(x, y + h - 1, w, color);
  3474  002278  5023               	movf	drawRect@y,w,c
  3475  00227A  2427               	addwf	drawRect@h,w,c
  3476  00227C  6E2B               	movwf	??_drawRect& (0+255),c
  3477  00227E  042B               	decf	??_drawRect,w,c
  3478  002280  6E16               	movwf	drawFastHLine@y,c
  3479  002282  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3480  002286  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3481  00228A  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3482  00228E  5021               	movf	drawRect@x,w,c
  3483  002290  ECB6  F00F         	call	_drawFastHLine
  3484                           
  3485                           ;ST7735_TFT.c: 640: drawFastVLine(x, y, h, color);
  3486  002294  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3487  002298  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3488  00229C  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3489  0022A0  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3490  0022A4  5021               	movf	drawRect@x,w,c
  3491  0022A6  ECFA  F00F         	call	_drawFastVLine
  3492                           
  3493                           ;ST7735_TFT.c: 641: drawFastVLine(x + w - 1, y, h, color);
  3494  0022AA  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3495  0022AE  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3496  0022B2  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3497  0022B6  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3498  0022BA  5021               	movf	drawRect@x,w,c
  3499  0022BC  2425               	addwf	drawRect@w,w,c
  3500  0022BE  6E2B               	movwf	??_drawRect& (0+255),c
  3501  0022C0  042B               	decf	??_drawRect,w,c
  3502  0022C2  ECFA  F00F         	call	_drawFastVLine
  3503  0022C6  0012               	return		;funcret
  3504  0022C8                     __end_of_drawRect:
  3505                           	opt stack 0
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           intcon	equ	0xFF2
  3511                           intcon2	equ	0xFF1
  3512                           intcon3	equ	0xFF0
  3513                           postinc0	equ	0xFEE
  3514                           wreg	equ	0xFE8
  3515                           postdec1	equ	0xFE5
  3516                           fsr1l	equ	0xFE1
  3517                           status	equ	0xFD8
  3518                           
  3519 ;; *************** function _drawFastHLine *****************
  3520 ;; Defined at:
  3521 ;;		line 575 in file "ST7735_TFT.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  x               1    wreg     unsigned char 
  3524 ;;  y               1   21[COMRAM] unsigned char 
  3525 ;;  w               1   22[COMRAM] unsigned char 
  3526 ;;  color           2   23[COMRAM] unsigned int 
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;  x               1   31[COMRAM] unsigned char 
  3529 ;;  lo              1   30[COMRAM] unsigned char 
  3530 ;;  hi              1   29[COMRAM] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;		None               void
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3540 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;Total ram usage:       11 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    5
  3547 ;; This function calls:
  3548 ;;		_setAddrWindow
  3549 ;;		_spiwrite
  3550 ;; This function is called by:
  3551 ;;		_drawRect
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text7
  3556  001F6C                     __ptext7:
  3557                           	opt stack 0
  3558  001F6C                     _drawFastHLine:
  3559                           	opt stack 23
  3560                           
  3561                           ;incstack = 0
  3562                           ;drawFastHLine@x stored from wreg
  3563  001F6C  6E20               	movwf	drawFastHLine@x,c
  3564                           
  3565                           ;ST7735_TFT.c: 577: unsigned char hi, lo;
  3566                           ;ST7735_TFT.c: 578: if((x >= 128) || (y >= 160))
  3567  001F6E  0E80               	movlw	128
  3568  001F70  6020               	cpfslt	drawFastHLine@x,c
  3569  001F72  D03F               	goto	l326
  3570  001F74  0E9F               	movlw	159
  3571  001F76  6416               	cpfsgt	drawFastHLine@y,c
  3572  001F78  D001               	goto	l5411
  3573                           
  3574                           ;ST7735_TFT.c: 579: return;
  3575  001F7A  D03B               	goto	l326
  3576  001F7C                     l5411:
  3577                           
  3578                           ;ST7735_TFT.c: 580: if((x + w - 1) >= 128)
  3579  001F7C  0EFF               	movlw	255
  3580  001F7E  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3581  001F80  0EFF               	movlw	255
  3582  001F82  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3583  001F84  5017               	movf	drawFastHLine@w,w,c
  3584  001F86  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3585  001F8A  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3586  001F8C  261C               	addwf	??_drawFastHLine+2,f,c
  3587  001F8E  0E00               	movlw	0
  3588  001F90  221D               	addwfc	??_drawFastHLine+3,f,c
  3589  001F92  501A               	movf	??_drawFastHLine,w,c
  3590  001F94  261C               	addwf	??_drawFastHLine+2,f,c
  3591  001F96  501B               	movf	??_drawFastHLine+1,w,c
  3592  001F98  221D               	addwfc	??_drawFastHLine+3,f,c
  3593  001F9A  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3594  001F9C  D00B               	goto	l5415
  3595  001F9E  501D               	movf	??_drawFastHLine+3,w,c
  3596  001FA0  E104               	bnz	u4150
  3597  001FA2  0E80               	movlw	128
  3598  001FA4  5C1C               	subwf	??_drawFastHLine+2,w,c
  3599  001FA6  A0D8               	btfss	status,0,c
  3600  001FA8  D005               	goto	l5415
  3601  001FAA                     u4150:
  3602                           
  3603                           ;ST7735_TFT.c: 581: w = 128 - x;
  3604  001FAA  5020               	movf	drawFastHLine@x,w,c
  3605  001FAC  0800               	sublw	0
  3606  001FAE  0F80               	addlw	128
  3607  001FB0  6E17               	movwf	drawFastHLine@w,c
  3608  001FB2  D000               	goto	l5415
  3609  001FB4                     l5415:
  3610                           
  3611                           ;ST7735_TFT.c: 582: hi = color >> 8; lo = color;
  3612  001FB4  5019               	movf	drawFastHLine@color+1,w,c
  3613  001FB6  6E1E               	movwf	drawFastHLine@hi,c
  3614  001FB8  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3615                           
  3616                           ;ST7735_TFT.c: 583: setAddrWindow(x, y, x + w - 1, y);
  3617  001FBC  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3618  001FC0  5020               	movf	drawFastHLine@x,w,c
  3619  001FC2  2417               	addwf	drawFastHLine@w,w,c
  3620  001FC4  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3621  001FC6  041A               	decf	??_drawFastHLine,w,c
  3622  001FC8  6E13               	movwf	setAddrWindow@x1,c
  3623  001FCA  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3624  001FCE  5020               	movf	drawFastHLine@x,w,c
  3625  001FD0  EC11  F012         	call	_setAddrWindow
  3626                           
  3627                           ;ST7735_TFT.c: 584: PORTDbits.RD2 = 1;
  3628  001FD4  8483               	bsf	3971,2,c	;volatile
  3629                           
  3630                           ;ST7735_TFT.c: 585: PORTDbits.RD3 = 0;
  3631  001FD6  9683               	bcf	3971,3,c	;volatile
  3632                           
  3633                           ;ST7735_TFT.c: 587: while (w--) {
  3634  001FD8  D007               	goto	l5427
  3635  001FDA                     l5425:
  3636                           
  3637                           ;ST7735_TFT.c: 588: spiwrite(hi);
  3638  001FDA  501E               	movf	drawFastHLine@hi,w,c
  3639  001FDC  EC6F  F014         	call	_spiwrite
  3640                           
  3641                           ;ST7735_TFT.c: 589: spiwrite(lo);
  3642  001FE0  501F               	movf	drawFastHLine@lo,w,c
  3643  001FE2  EC6F  F014         	call	_spiwrite
  3644  001FE6  D000               	goto	l5427
  3645  001FE8                     l5427:
  3646  001FE8  0617               	decf	drawFastHLine@w,f,c
  3647  001FEA  2817               	incf	drawFastHLine@w,w,c
  3648  001FEC  A4D8               	btfss	status,2,c
  3649  001FEE  D7F5               	goto	l5425
  3650                           
  3651                           ;ST7735_TFT.c: 590: }
  3652                           ;ST7735_TFT.c: 591: PORTDbits.RD3 = 1;
  3653  001FF0  8683               	bsf	3971,3,c	;volatile
  3654  001FF2                     l326:
  3655  001FF2  0012               	return		;funcret
  3656  001FF4                     __end_of_drawFastHLine:
  3657                           	opt stack 0
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           intcon	equ	0xFF2
  3663                           intcon2	equ	0xFF1
  3664                           intcon3	equ	0xFF0
  3665                           postinc0	equ	0xFEE
  3666                           wreg	equ	0xFE8
  3667                           postdec1	equ	0xFE5
  3668                           fsr1l	equ	0xFE1
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function _TFT_GreenTab_Initialize *****************
  3672 ;; Defined at:
  3673 ;;		line 595 in file "ST7735_TFT.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;		None               void
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;Total ram usage:        0 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    5
  3694 ;; This function calls:
  3695 ;;		_Rcmd1
  3696 ;;		_Rcmd2red
  3697 ;;		_Rcmd3
  3698 ;;		_write_command
  3699 ;;		_write_data
  3700 ;; This function is called by:
  3701 ;;		_Initialize_LCD_Screen
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text8
  3706  0027B4                     __ptext8:
  3707                           	opt stack 0
  3708  0027B4                     _TFT_GreenTab_Initialize:
  3709                           	opt stack 24
  3710                           
  3711                           ;ST7735_TFT.c: 597: PORTDbits.RD3 = 1;
  3712                           
  3713                           ;incstack = 0
  3714  0027B4  8683               	bsf	3971,3,c	;volatile
  3715                           
  3716                           ;ST7735_TFT.c: 598: PORTDbits.RD2 = 0;
  3717  0027B6  9483               	bcf	3971,2,c	;volatile
  3718                           
  3719                           ;ST7735_TFT.c: 600: SSPSTAT=0x80;
  3720  0027B8  0E80               	movlw	128
  3721  0027BA  6EC7               	movwf	4039,c	;volatile
  3722                           
  3723                           ;ST7735_TFT.c: 601: SSPCON1=0x30;
  3724  0027BC  0E30               	movlw	48
  3725  0027BE  6EC6               	movwf	4038,c	;volatile
  3726                           
  3727                           ;ST7735_TFT.c: 604: Rcmd1();
  3728  0027C0  EC9C  F009         	call	_Rcmd1	;wreg free
  3729                           
  3730                           ;ST7735_TFT.c: 605: Rcmd2red();
  3731  0027C4  ECE5  F012         	call	_Rcmd2red	;wreg free
  3732                           
  3733                           ;ST7735_TFT.c: 606: Rcmd3();
  3734  0027C8  EC25  F00B         	call	_Rcmd3	;wreg free
  3735                           
  3736                           ;ST7735_TFT.c: 607: write_command(0x36);
  3737  0027CC  0E36               	movlw	54
  3738  0027CE  ECA7  F014         	call	_write_command
  3739                           
  3740                           ;ST7735_TFT.c: 608: write_data(0xC0);
  3741  0027D2  0EC0               	movlw	192
  3742  0027D4  EC9F  F014         	call	_write_data
  3743                           
  3744                           ;ST7735_TFT.c: 609: _tft_type = 1;
  3745  0027D8  0E01               	movlw	1
  3746  0027DA  6E58               	movwf	__tft_type,c
  3747  0027DC  0012               	return		;funcret
  3748  0027DE                     __end_of_TFT_GreenTab_Initialize:
  3749                           	opt stack 0
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           intcon	equ	0xFF2
  3755                           intcon2	equ	0xFF1
  3756                           intcon3	equ	0xFF0
  3757                           postinc0	equ	0xFEE
  3758                           wreg	equ	0xFE8
  3759                           postdec1	equ	0xFE5
  3760                           fsr1l	equ	0xFE1
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function _Rcmd3 *****************
  3764 ;; Defined at:
  3765 ;;		line 289 in file "ST7735_TFT.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;		None
  3770 ;; Return value:  Size  Location     Type
  3771 ;;		None               void
  3772 ;; Registers used:
  3773 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;Total ram usage:        0 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    4
  3786 ;; This function calls:
  3787 ;;		_delay_ms
  3788 ;;		_write_command
  3789 ;;		_write_data
  3790 ;; This function is called by:
  3791 ;;		_TFT_GreenTab_Initialize
  3792 ;;		_TFT_BlackTab_Initialize
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text9
  3797  00164A                     __ptext9:
  3798                           	opt stack 0
  3799  00164A                     _Rcmd3:
  3800                           	opt stack 24
  3801                           
  3802                           ;ST7735_TFT.c: 291: write_command(0xE0);
  3803                           
  3804                           ;incstack = 0
  3805  00164A  0EE0               	movlw	224
  3806  00164C  ECA7  F014         	call	_write_command
  3807                           
  3808                           ;ST7735_TFT.c: 292: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3809  001650  0E02               	movlw	2
  3810  001652  EC9F  F014         	call	_write_data
  3811  001656  0E1C               	movlw	28
  3812  001658  EC9F  F014         	call	_write_data
  3813  00165C  0E07               	movlw	7
  3814  00165E  EC9F  F014         	call	_write_data
  3815  001662  0E12               	movlw	18
  3816  001664  EC9F  F014         	call	_write_data
  3817                           
  3818                           ;ST7735_TFT.c: 293: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3819  001668  0E37               	movlw	55
  3820  00166A  EC9F  F014         	call	_write_data
  3821  00166E  0E32               	movlw	50
  3822  001670  EC9F  F014         	call	_write_data
  3823  001674  0E29               	movlw	41
  3824  001676  EC9F  F014         	call	_write_data
  3825  00167A  0E2D               	movlw	45
  3826  00167C  EC9F  F014         	call	_write_data
  3827                           
  3828                           ;ST7735_TFT.c: 294: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3829  001680  0E29               	movlw	41
  3830  001682  EC9F  F014         	call	_write_data
  3831  001686  0E25               	movlw	37
  3832  001688  EC9F  F014         	call	_write_data
  3833  00168C  0E2B               	movlw	43
  3834  00168E  EC9F  F014         	call	_write_data
  3835  001692  0E39               	movlw	57
  3836  001694  EC9F  F014         	call	_write_data
  3837                           
  3838                           ;ST7735_TFT.c: 295: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3839  001698  0E00               	movlw	0
  3840  00169A  EC9F  F014         	call	_write_data
  3841  00169E  0E01               	movlw	1
  3842  0016A0  EC9F  F014         	call	_write_data
  3843  0016A4  0E03               	movlw	3
  3844  0016A6  EC9F  F014         	call	_write_data
  3845  0016AA  0E10               	movlw	16
  3846  0016AC  EC9F  F014         	call	_write_data
  3847                           
  3848                           ;ST7735_TFT.c: 296: write_command(0xE1);
  3849  0016B0  0EE1               	movlw	225
  3850  0016B2  ECA7  F014         	call	_write_command
  3851                           
  3852                           ;ST7735_TFT.c: 297: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3853  0016B6  0E03               	movlw	3
  3854  0016B8  EC9F  F014         	call	_write_data
  3855  0016BC  0E1D               	movlw	29
  3856  0016BE  EC9F  F014         	call	_write_data
  3857  0016C2  0E07               	movlw	7
  3858  0016C4  EC9F  F014         	call	_write_data
  3859  0016C8  0E06               	movlw	6
  3860  0016CA  EC9F  F014         	call	_write_data
  3861                           
  3862                           ;ST7735_TFT.c: 298: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3863  0016CE  0E2E               	movlw	46
  3864  0016D0  EC9F  F014         	call	_write_data
  3865  0016D4  0E2C               	movlw	44
  3866  0016D6  EC9F  F014         	call	_write_data
  3867  0016DA  0E29               	movlw	41
  3868  0016DC  EC9F  F014         	call	_write_data
  3869  0016E0  0E2D               	movlw	45
  3870  0016E2  EC9F  F014         	call	_write_data
  3871                           
  3872                           ;ST7735_TFT.c: 299: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3873  0016E6  0E2E               	movlw	46
  3874  0016E8  EC9F  F014         	call	_write_data
  3875  0016EC  0E2E               	movlw	46
  3876  0016EE  EC9F  F014         	call	_write_data
  3877  0016F2  0E37               	movlw	55
  3878  0016F4  EC9F  F014         	call	_write_data
  3879  0016F8  0E3F               	movlw	63
  3880  0016FA  EC9F  F014         	call	_write_data
  3881                           
  3882                           ;ST7735_TFT.c: 300: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3883  0016FE  0E00               	movlw	0
  3884  001700  EC9F  F014         	call	_write_data
  3885  001704  0E00               	movlw	0
  3886  001706  EC9F  F014         	call	_write_data
  3887  00170A  0E02               	movlw	2
  3888  00170C  EC9F  F014         	call	_write_data
  3889  001710  0E10               	movlw	16
  3890  001712  EC9F  F014         	call	_write_data
  3891                           
  3892                           ;ST7735_TFT.c: 301: write_command(0x13);
  3893  001716  0E13               	movlw	19
  3894  001718  ECA7  F014         	call	_write_command
  3895                           
  3896                           ;ST7735_TFT.c: 302: delay_ms(10);
  3897  00171C  0E00               	movlw	0
  3898  00171E  6E16               	movwf	delay_ms@ms+1,c
  3899  001720  0E0A               	movlw	10
  3900  001722  6E15               	movwf	delay_ms@ms,c
  3901  001724  ECBF  F011         	call	_delay_ms	;wreg free
  3902                           
  3903                           ;ST7735_TFT.c: 303: write_command(0x29);
  3904  001728  0E29               	movlw	41
  3905  00172A  ECA7  F014         	call	_write_command
  3906                           
  3907                           ;ST7735_TFT.c: 304: delay_ms(100);
  3908  00172E  0E00               	movlw	0
  3909  001730  6E16               	movwf	delay_ms@ms+1,c
  3910  001732  0E64               	movlw	100
  3911  001734  6E15               	movwf	delay_ms@ms,c
  3912  001736  ECBF  F011         	call	_delay_ms	;wreg free
  3913  00173A  0012               	return		;funcret
  3914  00173C                     __end_of_Rcmd3:
  3915                           	opt stack 0
  3916                           tblptru	equ	0xFF8
  3917                           tblptrh	equ	0xFF7
  3918                           tblptrl	equ	0xFF6
  3919                           tablat	equ	0xFF5
  3920                           intcon	equ	0xFF2
  3921                           intcon2	equ	0xFF1
  3922                           intcon3	equ	0xFF0
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           postdec1	equ	0xFE5
  3926                           fsr1l	equ	0xFE1
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _Rcmd2red *****************
  3930 ;; Defined at:
  3931 ;;		line 275 in file "ST7735_TFT.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;		None
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;		None
  3936 ;; Return value:  Size  Location     Type
  3937 ;;		None               void
  3938 ;; Registers used:
  3939 ;;		wreg, status,2, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;Total ram usage:        0 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    4
  3952 ;; This function calls:
  3953 ;;		_write_command
  3954 ;;		_write_data
  3955 ;; This function is called by:
  3956 ;;		_TFT_GreenTab_Initialize
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text10
  3961  0025CA                     __ptext10:
  3962                           	opt stack 0
  3963  0025CA                     _Rcmd2red:
  3964                           	opt stack 24
  3965                           
  3966                           ;ST7735_TFT.c: 277: write_command(0x2A);
  3967                           
  3968                           ;incstack = 0
  3969  0025CA  0E2A               	movlw	42
  3970  0025CC  ECA7  F014         	call	_write_command
  3971                           
  3972                           ;ST7735_TFT.c: 278: write_data(0x00);
  3973  0025D0  0E00               	movlw	0
  3974  0025D2  EC9F  F014         	call	_write_data
  3975                           
  3976                           ;ST7735_TFT.c: 279: write_data(0x00);
  3977  0025D6  0E00               	movlw	0
  3978  0025D8  EC9F  F014         	call	_write_data
  3979                           
  3980                           ;ST7735_TFT.c: 280: write_data(0x00);
  3981  0025DC  0E00               	movlw	0
  3982  0025DE  EC9F  F014         	call	_write_data
  3983                           
  3984                           ;ST7735_TFT.c: 281: write_data(0x7F);
  3985  0025E2  0E7F               	movlw	127
  3986  0025E4  EC9F  F014         	call	_write_data
  3987                           
  3988                           ;ST7735_TFT.c: 282: write_command(0x2B);
  3989  0025E8  0E2B               	movlw	43
  3990  0025EA  ECA7  F014         	call	_write_command
  3991                           
  3992                           ;ST7735_TFT.c: 283: write_data(0x00);
  3993  0025EE  0E00               	movlw	0
  3994  0025F0  EC9F  F014         	call	_write_data
  3995                           
  3996                           ;ST7735_TFT.c: 284: write_data(0x00);
  3997  0025F4  0E00               	movlw	0
  3998  0025F6  EC9F  F014         	call	_write_data
  3999                           
  4000                           ;ST7735_TFT.c: 285: write_data(0x00);
  4001  0025FA  0E00               	movlw	0
  4002  0025FC  EC9F  F014         	call	_write_data
  4003                           
  4004                           ;ST7735_TFT.c: 286: write_data(0x9F);
  4005  002600  0E9F               	movlw	159
  4006  002602  EC9F  F014         	call	_write_data
  4007  002606  0012               	return		;funcret
  4008  002608                     __end_of_Rcmd2red:
  4009                           	opt stack 0
  4010                           tblptru	equ	0xFF8
  4011                           tblptrh	equ	0xFF7
  4012                           tblptrl	equ	0xFF6
  4013                           tablat	equ	0xFF5
  4014                           intcon	equ	0xFF2
  4015                           intcon2	equ	0xFF1
  4016                           intcon3	equ	0xFF0
  4017                           postinc0	equ	0xFEE
  4018                           wreg	equ	0xFE8
  4019                           postdec1	equ	0xFE5
  4020                           fsr1l	equ	0xFE1
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function _Rcmd1 *****************
  4024 ;; Defined at:
  4025 ;;		line 228 in file "ST7735_TFT.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;		None               void
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;Total ram usage:        0 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    4
  4046 ;; This function calls:
  4047 ;;		_delay_ms
  4048 ;;		_write_command
  4049 ;;		_write_data
  4050 ;; This function is called by:
  4051 ;;		_TFT_GreenTab_Initialize
  4052 ;;		_TFT_BlackTab_Initialize
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text11
  4057  001338                     __ptext11:
  4058                           	opt stack 0
  4059  001338                     _Rcmd1:
  4060                           	opt stack 24
  4061                           
  4062                           ;ST7735_TFT.c: 230: write_command(0x01);
  4063                           
  4064                           ;incstack = 0
  4065  001338  0E01               	movlw	1
  4066  00133A  ECA7  F014         	call	_write_command
  4067                           
  4068                           ;ST7735_TFT.c: 231: delay_ms(150);
  4069  00133E  0E00               	movlw	0
  4070  001340  6E16               	movwf	delay_ms@ms+1,c
  4071  001342  0E96               	movlw	150
  4072  001344  6E15               	movwf	delay_ms@ms,c
  4073  001346  ECBF  F011         	call	_delay_ms	;wreg free
  4074                           
  4075                           ;ST7735_TFT.c: 232: write_command(0x11);
  4076  00134A  0E11               	movlw	17
  4077  00134C  ECA7  F014         	call	_write_command
  4078                           
  4079                           ;ST7735_TFT.c: 233: delay_ms(500);
  4080  001350  0E01               	movlw	1
  4081  001352  6E16               	movwf	delay_ms@ms+1,c
  4082  001354  0EF4               	movlw	244
  4083  001356  6E15               	movwf	delay_ms@ms,c
  4084  001358  ECBF  F011         	call	_delay_ms	;wreg free
  4085                           
  4086                           ;ST7735_TFT.c: 234: write_command(0xB1);
  4087  00135C  0EB1               	movlw	177
  4088  00135E  ECA7  F014         	call	_write_command
  4089                           
  4090                           ;ST7735_TFT.c: 235: write_data(0x01);
  4091  001362  0E01               	movlw	1
  4092  001364  EC9F  F014         	call	_write_data
  4093                           
  4094                           ;ST7735_TFT.c: 236: write_data(0x2C);
  4095  001368  0E2C               	movlw	44
  4096  00136A  EC9F  F014         	call	_write_data
  4097                           
  4098                           ;ST7735_TFT.c: 237: write_data(0x2D);
  4099  00136E  0E2D               	movlw	45
  4100  001370  EC9F  F014         	call	_write_data
  4101                           
  4102                           ;ST7735_TFT.c: 238: write_command(0xB2);
  4103  001374  0EB2               	movlw	178
  4104  001376  ECA7  F014         	call	_write_command
  4105                           
  4106                           ;ST7735_TFT.c: 239: write_data(0x01);
  4107  00137A  0E01               	movlw	1
  4108  00137C  EC9F  F014         	call	_write_data
  4109                           
  4110                           ;ST7735_TFT.c: 240: write_data(0x2C);
  4111  001380  0E2C               	movlw	44
  4112  001382  EC9F  F014         	call	_write_data
  4113                           
  4114                           ;ST7735_TFT.c: 241: write_data(0x2D);
  4115  001386  0E2D               	movlw	45
  4116  001388  EC9F  F014         	call	_write_data
  4117                           
  4118                           ;ST7735_TFT.c: 242: write_command(0xB3);
  4119  00138C  0EB3               	movlw	179
  4120  00138E  ECA7  F014         	call	_write_command
  4121                           
  4122                           ;ST7735_TFT.c: 243: write_data(0x01);
  4123  001392  0E01               	movlw	1
  4124  001394  EC9F  F014         	call	_write_data
  4125                           
  4126                           ;ST7735_TFT.c: 244: write_data(0x2C);
  4127  001398  0E2C               	movlw	44
  4128  00139A  EC9F  F014         	call	_write_data
  4129                           
  4130                           ;ST7735_TFT.c: 245: write_data(0x2D);
  4131  00139E  0E2D               	movlw	45
  4132  0013A0  EC9F  F014         	call	_write_data
  4133                           
  4134                           ;ST7735_TFT.c: 246: write_data(0x01);
  4135  0013A4  0E01               	movlw	1
  4136  0013A6  EC9F  F014         	call	_write_data
  4137                           
  4138                           ;ST7735_TFT.c: 247: write_data(0x2C);
  4139  0013AA  0E2C               	movlw	44
  4140  0013AC  EC9F  F014         	call	_write_data
  4141                           
  4142                           ;ST7735_TFT.c: 248: write_data(0x2D);
  4143  0013B0  0E2D               	movlw	45
  4144  0013B2  EC9F  F014         	call	_write_data
  4145                           
  4146                           ;ST7735_TFT.c: 249: write_command(0xB4);
  4147  0013B6  0EB4               	movlw	180
  4148  0013B8  ECA7  F014         	call	_write_command
  4149                           
  4150                           ;ST7735_TFT.c: 250: write_data(0x07);
  4151  0013BC  0E07               	movlw	7
  4152  0013BE  EC9F  F014         	call	_write_data
  4153                           
  4154                           ;ST7735_TFT.c: 251: write_command(0xC0);
  4155  0013C2  0EC0               	movlw	192
  4156  0013C4  ECA7  F014         	call	_write_command
  4157                           
  4158                           ;ST7735_TFT.c: 252: write_data(0xA2);
  4159  0013C8  0EA2               	movlw	162
  4160  0013CA  EC9F  F014         	call	_write_data
  4161                           
  4162                           ;ST7735_TFT.c: 253: write_data(0x02);
  4163  0013CE  0E02               	movlw	2
  4164  0013D0  EC9F  F014         	call	_write_data
  4165                           
  4166                           ;ST7735_TFT.c: 254: write_data(0x84);
  4167  0013D4  0E84               	movlw	132
  4168  0013D6  EC9F  F014         	call	_write_data
  4169                           
  4170                           ;ST7735_TFT.c: 255: write_command(0xC1);
  4171  0013DA  0EC1               	movlw	193
  4172  0013DC  ECA7  F014         	call	_write_command
  4173                           
  4174                           ;ST7735_TFT.c: 256: write_data(0xC5);
  4175  0013E0  0EC5               	movlw	197
  4176  0013E2  EC9F  F014         	call	_write_data
  4177                           
  4178                           ;ST7735_TFT.c: 257: write_command(0xC2);
  4179  0013E6  0EC2               	movlw	194
  4180  0013E8  ECA7  F014         	call	_write_command
  4181                           
  4182                           ;ST7735_TFT.c: 258: write_data(0x0A);
  4183  0013EC  0E0A               	movlw	10
  4184  0013EE  EC9F  F014         	call	_write_data
  4185                           
  4186                           ;ST7735_TFT.c: 259: write_data(0x00);
  4187  0013F2  0E00               	movlw	0
  4188  0013F4  EC9F  F014         	call	_write_data
  4189                           
  4190                           ;ST7735_TFT.c: 260: write_command(0xC3);
  4191  0013F8  0EC3               	movlw	195
  4192  0013FA  ECA7  F014         	call	_write_command
  4193                           
  4194                           ;ST7735_TFT.c: 261: write_data(0x8A);
  4195  0013FE  0E8A               	movlw	138
  4196  001400  EC9F  F014         	call	_write_data
  4197                           
  4198                           ;ST7735_TFT.c: 262: write_data(0x2A);
  4199  001404  0E2A               	movlw	42
  4200  001406  EC9F  F014         	call	_write_data
  4201                           
  4202                           ;ST7735_TFT.c: 263: write_command(0xC4);
  4203  00140A  0EC4               	movlw	196
  4204  00140C  ECA7  F014         	call	_write_command
  4205                           
  4206                           ;ST7735_TFT.c: 264: write_data(0x8A);
  4207  001410  0E8A               	movlw	138
  4208  001412  EC9F  F014         	call	_write_data
  4209                           
  4210                           ;ST7735_TFT.c: 265: write_data(0xEE);
  4211  001416  0EEE               	movlw	238
  4212  001418  EC9F  F014         	call	_write_data
  4213                           
  4214                           ;ST7735_TFT.c: 266: write_command(0xC5);
  4215  00141C  0EC5               	movlw	197
  4216  00141E  ECA7  F014         	call	_write_command
  4217                           
  4218                           ;ST7735_TFT.c: 267: write_data(0x0E);
  4219  001422  0E0E               	movlw	14
  4220  001424  EC9F  F014         	call	_write_data
  4221                           
  4222                           ;ST7735_TFT.c: 268: write_command(0x20);
  4223  001428  0E20               	movlw	32
  4224  00142A  ECA7  F014         	call	_write_command
  4225                           
  4226                           ;ST7735_TFT.c: 269: write_command(0x36);
  4227  00142E  0E36               	movlw	54
  4228  001430  ECA7  F014         	call	_write_command
  4229                           
  4230                           ;ST7735_TFT.c: 270: write_data(0xC8);
  4231  001434  0EC8               	movlw	200
  4232  001436  EC9F  F014         	call	_write_data
  4233                           
  4234                           ;ST7735_TFT.c: 271: write_command(0x3A);
  4235  00143A  0E3A               	movlw	58
  4236  00143C  ECA7  F014         	call	_write_command
  4237                           
  4238                           ;ST7735_TFT.c: 272: write_data(0x05);
  4239  001440  0E05               	movlw	5
  4240  001442  EC9F  F014         	call	_write_data
  4241  001446  0012               	return		;funcret
  4242  001448                     __end_of_Rcmd1:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           intcon	equ	0xFF2
  4249                           intcon2	equ	0xFF1
  4250                           intcon3	equ	0xFF0
  4251                           postinc0	equ	0xFEE
  4252                           wreg	equ	0xFE8
  4253                           postdec1	equ	0xFE5
  4254                           fsr1l	equ	0xFE1
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function _LCD_Reset *****************
  4258 ;; Defined at:
  4259 ;;		line 164 in file "ST7735_TFT.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;		None               void
  4266 ;; Registers used:
  4267 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;Total ram usage:        0 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    4
  4280 ;; This function calls:
  4281 ;;		_delay_ms
  4282 ;; This function is called by:
  4283 ;;		_Initialize_LCD_Screen
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text12
  4288  00291A                     __ptext12:
  4289                           	opt stack 0
  4290  00291A                     _LCD_Reset:
  4291                           	opt stack 25
  4292                           
  4293                           ;ST7735_TFT.c: 166: PORTDbits.RD4 = 0;
  4294                           
  4295                           ;incstack = 0
  4296  00291A  9883               	bcf	3971,4,c	;volatile
  4297                           
  4298                           ;ST7735_TFT.c: 167: delay_ms(100);
  4299  00291C  0E00               	movlw	0
  4300  00291E  6E16               	movwf	delay_ms@ms+1,c
  4301  002920  0E64               	movlw	100
  4302  002922  6E15               	movwf	delay_ms@ms,c
  4303  002924  ECBF  F011         	call	_delay_ms	;wreg free
  4304                           
  4305                           ;ST7735_TFT.c: 168: PORTDbits.RD4 = 1;
  4306  002928  8883               	bsf	3971,4,c	;volatile
  4307  00292A  0012               	return		;funcret
  4308  00292C                     __end_of_LCD_Reset:
  4309                           	opt stack 0
  4310                           tblptru	equ	0xFF8
  4311                           tblptrh	equ	0xFF7
  4312                           tblptrl	equ	0xFF6
  4313                           tablat	equ	0xFF5
  4314                           intcon	equ	0xFF2
  4315                           intcon2	equ	0xFF1
  4316                           intcon3	equ	0xFF0
  4317                           postinc0	equ	0xFEE
  4318                           wreg	equ	0xFE8
  4319                           postdec1	equ	0xFE5
  4320                           fsr1l	equ	0xFE1
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function _delay_ms *****************
  4324 ;; Defined at:
  4325 ;;		line 11 in file "ST7735_TFT.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  ms              2   20[COMRAM] int 
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  count           2   24[COMRAM] int 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;		None               void
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;Total ram usage:        6 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    3
  4346 ;; This function calls:
  4347 ;;		___wmul
  4348 ;; This function is called by:
  4349 ;;		_LCD_Reset
  4350 ;;		_Rcmd1
  4351 ;;		_Rcmd3
  4352 ;;		_Bcmd
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text13
  4357  00237E                     __ptext13:
  4358                           	opt stack 0
  4359  00237E                     _delay_ms:
  4360                           	opt stack 24
  4361                           
  4362                           ;ST7735_TFT.c: 17: int count;
  4363                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  4364                           
  4365                           ;incstack = 0
  4366  00237E  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4367  002382  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4368  002386  0E00               	movlw	0
  4369  002388  6E12               	movwf	___wmul@multiplicand+1,c
  4370  00238A  0EFA               	movlw	250
  4371  00238C  6E11               	movwf	___wmul@multiplicand,c
  4372  00238E  ECEF  F013         	call	___wmul	;wreg free
  4373  002392  C00F  F019         	movff	?___wmul,delay_ms@count
  4374  002396  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4375                           
  4376                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  4377  00239A  C019  F017         	movff	delay_ms@count,??_delay_ms
  4378  00239E  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4379  0023A2  1E17               	comf	??_delay_ms,f,c
  4380  0023A4  1E18               	comf	??_delay_ms+1,f,c
  4381  0023A6  4A17               	infsnz	??_delay_ms,f,c
  4382  0023A8  2A18               	incf	??_delay_ms+1,f,c
  4383  0023AA  0EFF               	movlw	255
  4384  0023AC  2417               	addwf	??_delay_ms,w,c
  4385  0023AE  6E19               	movwf	delay_ms@count,c
  4386  0023B0  0EFF               	movlw	255
  4387  0023B2  2018               	addwfc	??_delay_ms+1,w,c
  4388  0023B4  6E1A               	movwf	delay_ms@count+1,c
  4389                           
  4390                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  4391  0023B6  0EB8               	movlw	184
  4392  0023B8  6EB1               	movwf	4017,c	;volatile
  4393                           
  4394                           ;ST7735_TFT.c: 23: TMR3L = count & 0x00ff;
  4395  0023BA  C019  FFB2         	movff	delay_ms@count,4018	;volatile
  4396                           
  4397                           ;ST7735_TFT.c: 24: TMR3H = count >> 8;
  4398  0023BE  501A               	movf	delay_ms@count+1,w,c
  4399  0023C0  6EB3               	movwf	4019,c	;volatile
  4400                           
  4401                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  4402  0023C2  92A1               	bcf	4001,1,c	;volatile
  4403                           
  4404                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  4405  0023C4  80B1               	bsf	4017,0,c	;volatile
  4406                           
  4407                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  4408  0023C6  D000               	goto	l168
  4409  0023C8                     l168:
  4410  0023C8  A2A1               	btfss	4001,1,c	;volatile
  4411  0023CA  D7FE               	goto	l168
  4412                           
  4413                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  4414  0023CC  90B1               	bcf	4017,0,c	;volatile
  4415  0023CE  0012               	return		;funcret
  4416  0023D0                     __end_of_delay_ms:
  4417                           	opt stack 0
  4418                           tblptru	equ	0xFF8
  4419                           tblptrh	equ	0xFF7
  4420                           tblptrl	equ	0xFF6
  4421                           tablat	equ	0xFF5
  4422                           intcon	equ	0xFF2
  4423                           intcon2	equ	0xFF1
  4424                           intcon3	equ	0xFF0
  4425                           postinc0	equ	0xFEE
  4426                           wreg	equ	0xFE8
  4427                           postdec1	equ	0xFE5
  4428                           fsr1l	equ	0xFE1
  4429                           status	equ	0xFD8
  4430                           
  4431 ;; *************** function _Init_UART *****************
  4432 ;; Defined at:
  4433 ;;		line 25 in file "utils.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;		None               void
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;Total ram usage:        0 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    3
  4454 ;; This function calls:
  4455 ;;		_OpenUSART
  4456 ;; This function is called by:
  4457 ;;		_main
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           	psect	text14
  4462  0028CA                     __ptext14:
  4463                           	opt stack 0
  4464  0028CA                     _Init_UART:
  4465                           	opt stack 27
  4466                           
  4467                           ;utils.c: 27: OpenUSART (0b01111111 & 0b10111111 &
  4468                           ;utils.c: 28: 0b11111110 & 0b11111101 & 0b11111111 &
  4469                           ;utils.c: 29: 0b11111111, 25);
  4470                           
  4471                           ;incstack = 0
  4472  0028CA  0E00               	movlw	0
  4473  0028CC  6E10               	movwf	OpenUSART@spbrg+1,c
  4474  0028CE  0E19               	movlw	25
  4475  0028D0  6E0F               	movwf	OpenUSART@spbrg,c
  4476  0028D2  0E3C               	movlw	60
  4477  0028D4  ECC2  F010         	call	_OpenUSART
  4478                           
  4479                           ;utils.c: 30: OSCCON = 0x70;
  4480  0028D8  0E70               	movlw	112
  4481  0028DA  6ED3               	movwf	4051,c	;volatile
  4482  0028DC  0012               	return		;funcret
  4483  0028DE                     __end_of_Init_UART:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           intcon	equ	0xFF2
  4490                           intcon2	equ	0xFF1
  4491                           intcon3	equ	0xFF0
  4492                           postinc0	equ	0xFEE
  4493                           wreg	equ	0xFE8
  4494                           postdec1	equ	0xFE5
  4495                           fsr1l	equ	0xFE1
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function _OpenUSART *****************
  4499 ;; Defined at:
  4500 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  config          1    wreg     unsigned char 
  4503 ;;  spbrg           2   14[COMRAM] unsigned int 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  config          1   16[COMRAM] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;		None               void
  4508 ;; Registers used:
  4509 ;;		wreg, status,2
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;Total ram usage:        3 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    2
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_Init_UART
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text15
  4530  002184                     __ptext15:
  4531                           	opt stack 0
  4532  002184                     _OpenUSART:
  4533                           	opt stack 27
  4534                           
  4535                           ;incstack = 0
  4536                           ;OpenUSART@config stored from wreg
  4537  002184  6E11               	movwf	OpenUSART@config,c
  4538  002186  0E00               	movlw	0
  4539  002188  6EAC               	movwf	4012,c	;volatile
  4540  00218A  0E00               	movlw	0
  4541  00218C  6EAB               	movwf	4011,c	;volatile
  4542  00218E  A011               	btfss	OpenUSART@config,0,c
  4543  002190  D002               	goto	l3899
  4544  002192  88AC               	bsf	4012,4,c	;volatile
  4545  002194  D000               	goto	l3899
  4546  002196                     l3899:
  4547  002196  A211               	btfss	OpenUSART@config,1,c
  4548  002198  D003               	goto	l3903
  4549  00219A  8CAC               	bsf	4012,6,c	;volatile
  4550  00219C  8CAB               	bsf	4011,6,c	;volatile
  4551  00219E  D000               	goto	l3903
  4552  0021A0                     l3903:
  4553  0021A0  A411               	btfss	OpenUSART@config,2,c
  4554  0021A2  D002               	goto	l3907
  4555  0021A4  8EAC               	bsf	4012,7,c	;volatile
  4556  0021A6  D000               	goto	l3907
  4557  0021A8                     l3907:
  4558  0021A8  A611               	btfss	OpenUSART@config,3,c
  4559  0021AA  D002               	goto	l700
  4560  0021AC  88AB               	bsf	4011,4,c	;volatile
  4561  0021AE  D002               	goto	l3911
  4562  0021B0                     l700:
  4563  0021B0  8AAB               	bsf	4011,5,c	;volatile
  4564  0021B2  D000               	goto	l3911
  4565  0021B4                     l3911:
  4566  0021B4  B811               	btfsc	OpenUSART@config,4,c
  4567  0021B6  84AC               	bsf	4012,2,c	;volatile
  4568  0021B8  989E               	bcf	3998,4,c	;volatile
  4569  0021BA  AA11               	btfss	OpenUSART@config,5,c
  4570  0021BC  D002               	goto	l3919
  4571  0021BE  86AB               	bsf	4011,3,c	;volatile
  4572  0021C0  D000               	goto	l3919
  4573  0021C2                     l3919:
  4574  0021C2  AC11               	btfss	OpenUSART@config,6,c
  4575  0021C4  D002               	goto	l704
  4576  0021C6  8A9D               	bsf	3997,5,c	;volatile
  4577  0021C8  D001               	goto	l705
  4578  0021CA                     l704:
  4579  0021CA  9A9D               	bcf	3997,5,c	;volatile
  4580  0021CC                     l705:
  4581  0021CC  9A9E               	bcf	3998,5,c	;volatile
  4582  0021CE  AE11               	btfss	OpenUSART@config,7,c
  4583  0021D0  D002               	goto	l706
  4584  0021D2  889D               	bsf	3997,4,c	;volatile
  4585  0021D4  D001               	goto	l707
  4586  0021D6                     l706:
  4587  0021D6  989D               	bcf	3997,4,c	;volatile
  4588  0021D8                     l707:
  4589  0021D8  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4590  0021DC  5010               	movf	OpenUSART@spbrg+1,w,c
  4591  0021DE  6EB0               	movwf	4016,c	;volatile
  4592  0021E0  8AAC               	bsf	4012,5,c	;volatile
  4593  0021E2  8EAB               	bsf	4011,7,c	;volatile
  4594  0021E4  9C94               	bcf	3988,6,c	;volatile
  4595  0021E6  8E94               	bsf	3988,7,c	;volatile
  4596  0021E8  B8AC               	btfsc	4012,4,c	;volatile
  4597  0021EA  BEAC               	btfsc	4012,7,c	;volatile
  4598  0021EC  D002               	goto	l709
  4599  0021EE  8C94               	bsf	3988,6,c	;volatile
  4600  0021F0  D000               	goto	l709
  4601  0021F2                     l709:
  4602  0021F2  0012               	return		;funcret
  4603  0021F4                     __end_of_OpenUSART:
  4604                           	opt stack 0
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           intcon	equ	0xFF2
  4610                           intcon2	equ	0xFF1
  4611                           intcon3	equ	0xFF0
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           postdec1	equ	0xFE5
  4615                           fsr1l	equ	0xFE1
  4616                           status	equ	0xFD8
  4617                           
  4618 ;; *************** function _Init_ADC *****************
  4619 ;; Defined at:
  4620 ;;		line 18 in file "utils.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;		None
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;		None
  4625 ;; Return value:  Size  Location     Type
  4626 ;;		None               void
  4627 ;; Registers used:
  4628 ;;		wreg, status,2
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;Total ram usage:        0 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    2
  4641 ;; This function calls:
  4642 ;;		Nothing
  4643 ;; This function is called by:
  4644 ;;		_main
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text16
  4649  00295E                     __ptext16:
  4650                           	opt stack 0
  4651  00295E                     _Init_ADC:
  4652                           	opt stack 28
  4653                           
  4654                           ;utils.c: 20: ADCON0 = 0x01;
  4655                           
  4656                           ;incstack = 0
  4657  00295E  0E01               	movlw	1
  4658  002960  6EC2               	movwf	4034,c	;volatile
  4659                           
  4660                           ;utils.c: 21: ADCON1 = 0x0E;
  4661  002962  0E0E               	movlw	14
  4662  002964  6EC1               	movwf	4033,c	;volatile
  4663                           
  4664                           ;utils.c: 22: ADCON2 = 0xA9;
  4665  002966  0EA9               	movlw	169
  4666  002968  6EC0               	movwf	4032,c	;volatile
  4667  00296A  0012               	return		;funcret
  4668  00296C                     __end_of_Init_ADC:
  4669                           	opt stack 0
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           intcon	equ	0xFF2
  4675                           intcon2	equ	0xFF1
  4676                           intcon3	equ	0xFF0
  4677                           postinc0	equ	0xFEE
  4678                           wreg	equ	0xFE8
  4679                           postdec1	equ	0xFE5
  4680                           fsr1l	equ	0xFE1
  4681                           status	equ	0xFD8
  4682                           
  4683 ;; *************** function _Do_Flashing *****************
  4684 ;; Defined at:
  4685 ;;		line 327 in file "lab9.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;		None
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;		None
  4690 ;; Return value:  Size  Location     Type
  4691 ;;		None               void
  4692 ;; Registers used:
  4693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;Total ram usage:        0 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:   11
  4706 ;; This function calls:
  4707 ;;		_Set_EW
  4708 ;;		_Set_EW_LT
  4709 ;;		_Set_NS
  4710 ;;		_Set_NS_LT
  4711 ;;		_Wait_One_Second
  4712 ;; This function is called by:
  4713 ;;		_main
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text17
  4718  00232A                     __ptext17:
  4719                           	opt stack 0
  4720  00232A                     _Do_Flashing:
  4721                           	opt stack 19
  4722                           
  4723                           ;lab9.c: 329: while (Flashing_Status == 1)
  4724                           
  4725                           ;incstack = 0
  4726  00232A  D025               	goto	l5791
  4727  00232C                     l5773:
  4728                           
  4729                           ;lab9.c: 330: {
  4730                           ;lab9.c: 331: if (Flashing_Request == 0)
  4731  00232C  504B               	movf	_Flashing_Request,w,c
  4732  00232E  A4D8               	btfss	status,2,c
  4733  002330  D01D               	goto	l5789
  4734                           
  4735                           ;lab9.c: 332: {
  4736                           ;lab9.c: 333: Set_NS_LT(1);
  4737  002332  0E01               	movlw	1
  4738  002334  EC5D  F012         	call	_Set_NS_LT
  4739                           
  4740                           ;lab9.c: 334: Set_EW(1);
  4741  002338  0E01               	movlw	1
  4742  00233A  ECC3  F012         	call	_Set_EW
  4743                           
  4744                           ;lab9.c: 335: Set_EW_LT(1);
  4745  00233E  0E01               	movlw	1
  4746  002340  ECA1  F012         	call	_Set_EW_LT
  4747                           
  4748                           ;lab9.c: 336: Set_NS(1);
  4749  002344  0E01               	movlw	1
  4750  002346  EC7F  F012         	call	_Set_NS
  4751                           
  4752                           ;lab9.c: 338: Wait_One_Second();
  4753  00234A  EC35  F014         	call	_Wait_One_Second	;wreg free
  4754                           
  4755                           ;lab9.c: 340: Set_NS_LT(0);
  4756  00234E  0E00               	movlw	0
  4757  002350  EC5D  F012         	call	_Set_NS_LT
  4758                           
  4759                           ;lab9.c: 341: Set_EW(0);
  4760  002354  0E00               	movlw	0
  4761  002356  ECC3  F012         	call	_Set_EW
  4762                           
  4763                           ;lab9.c: 342: Set_EW_LT(0);
  4764  00235A  0E00               	movlw	0
  4765  00235C  ECA1  F012         	call	_Set_EW_LT
  4766                           
  4767                           ;lab9.c: 343: Set_NS(0);
  4768  002360  0E00               	movlw	0
  4769  002362  EC7F  F012         	call	_Set_NS
  4770                           
  4771                           ;lab9.c: 345: Wait_One_Second();
  4772  002366  EC35  F014         	call	_Wait_One_Second	;wreg free
  4773                           
  4774                           ;lab9.c: 346: }
  4775  00236A  D005               	goto	l5791
  4776  00236C                     l5789:
  4777                           
  4778                           ;lab9.c: 347: else
  4779                           ;lab9.c: 348: {
  4780                           ;lab9.c: 349: Flashing_Request = 0;
  4781  00236C  0E00               	movlw	0
  4782  00236E  6E4B               	movwf	_Flashing_Request,c
  4783                           
  4784                           ;lab9.c: 350: Flashing_Status = 0;
  4785  002370  0E00               	movlw	0
  4786  002372  6E4C               	movwf	_Flashing_Status,c
  4787  002374  D000               	goto	l5791
  4788  002376                     l5791:
  4789  002376  044C               	decf	_Flashing_Status,w,c
  4790  002378  B4D8               	btfsc	status,2,c
  4791  00237A  D7D8               	goto	l5773
  4792  00237C  0012               	return		;funcret
  4793  00237E                     __end_of_Do_Flashing:
  4794                           	opt stack 0
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           intcon	equ	0xFF2
  4800                           intcon2	equ	0xFF1
  4801                           intcon3	equ	0xFF0
  4802                           postinc0	equ	0xFEE
  4803                           wreg	equ	0xFE8
  4804                           postdec1	equ	0xFE5
  4805                           fsr1l	equ	0xFE1
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _Day_Mode *****************
  4809 ;; Defined at:
  4810 ;;		line 229 in file "lab9.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;Total ram usage:        0 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:   12
  4831 ;; This function calls:
  4832 ;;		_PED_Control
  4833 ;;		_Set_EW
  4834 ;;		_Set_EW_LT
  4835 ;;		_Set_NS
  4836 ;;		_Set_NS_LT
  4837 ;;		_Wait_N_Seconds
  4838 ;; This function is called by:
  4839 ;;		_main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text18
  4844  001C4A                     __ptext18:
  4845                           	opt stack 0
  4846  001C4A                     _Day_Mode:
  4847                           	opt stack 18
  4848                           
  4849                           ;lab9.c: 233: Set_NS_LT(1);
  4850                           
  4851                           ;incstack = 0
  4852  001C4A  0E01               	movlw	1
  4853  001C4C  EC5D  F012         	call	_Set_NS_LT
  4854                           
  4855                           ;lab9.c: 234: Set_EW(1);
  4856  001C50  0E01               	movlw	1
  4857  001C52  ECC3  F012         	call	_Set_EW
  4858                           
  4859                           ;lab9.c: 235: Set_EW_LT(1);
  4860  001C56  0E01               	movlw	1
  4861  001C58  ECA1  F012         	call	_Set_EW_LT
  4862                           
  4863                           ;lab9.c: 236: Set_NS(2);
  4864  001C5C  0E02               	movlw	2
  4865  001C5E  EC7F  F012         	call	_Set_NS
  4866                           
  4867                           ;lab9.c: 238: if(NS_PED_SW == 1)
  4868  001C62  0452               	decf	_NS_PED_SW,w,c
  4869  001C64  A4D8               	btfss	status,2,c
  4870  001C66  D005               	goto	l612
  4871                           
  4872                           ;lab9.c: 239: {
  4873                           ;lab9.c: 240: PED_Control(0,7);
  4874  001C68  0E07               	movlw	7
  4875  001C6A  6E43               	movwf	PED_Control@num_sec,c
  4876  001C6C  0E00               	movlw	0
  4877  001C6E  ECF0  F00C         	call	_PED_Control
  4878  001C72                     l612:
  4879                           
  4880                           ;lab9.c: 241: }
  4881                           ;lab9.c: 242: Wait_N_Seconds(5);
  4882  001C72  0E05               	movlw	5
  4883  001C74  EC7B  F013         	call	_Wait_N_Seconds
  4884                           
  4885                           ;lab9.c: 243: Set_NS(3);
  4886  001C78  0E03               	movlw	3
  4887  001C7A  EC7F  F012         	call	_Set_NS
  4888                           
  4889                           ;lab9.c: 244: Wait_N_Seconds(3);
  4890  001C7E  0E03               	movlw	3
  4891  001C80  EC7B  F013         	call	_Wait_N_Seconds
  4892                           
  4893                           ;lab9.c: 245: Set_NS(1);
  4894  001C84  0E01               	movlw	1
  4895  001C86  EC7F  F012         	call	_Set_NS
  4896                           
  4897                           ;lab9.c: 247: if(PORTAbits.RA3 == 1)
  4898  001C8A  A680               	btfss	3968,3,c	;volatile
  4899  001C8C  D010               	goto	l5705
  4900                           
  4901                           ;lab9.c: 248: {
  4902                           ;lab9.c: 249: Set_EW_LT(2);
  4903  001C8E  0E02               	movlw	2
  4904  001C90  ECA1  F012         	call	_Set_EW_LT
  4905                           
  4906                           ;lab9.c: 250: Wait_N_Seconds(8);
  4907  001C94  0E08               	movlw	8
  4908  001C96  EC7B  F013         	call	_Wait_N_Seconds
  4909                           
  4910                           ;lab9.c: 251: Set_EW_LT(3);
  4911  001C9A  0E03               	movlw	3
  4912  001C9C  ECA1  F012         	call	_Set_EW_LT
  4913                           
  4914                           ;lab9.c: 252: Wait_N_Seconds(3);
  4915  001CA0  0E03               	movlw	3
  4916  001CA2  EC7B  F013         	call	_Wait_N_Seconds
  4917                           
  4918                           ;lab9.c: 253: Set_EW_LT(1);
  4919  001CA6  0E01               	movlw	1
  4920  001CA8  ECA1  F012         	call	_Set_EW_LT
  4921  001CAC  D000               	goto	l5705
  4922  001CAE                     l5705:
  4923                           
  4924                           ;lab9.c: 254: }
  4925                           ;lab9.c: 255: Set_EW(2);
  4926  001CAE  0E02               	movlw	2
  4927  001CB0  ECC3  F012         	call	_Set_EW
  4928                           
  4929                           ;lab9.c: 256: if(EW_PED_SW == 1)
  4930  001CB4  044A               	decf	_EW_PED_SW,w,c
  4931  001CB6  A4D8               	btfss	status,2,c
  4932  001CB8  D005               	goto	l614
  4933                           
  4934                           ;lab9.c: 257: {
  4935                           ;lab9.c: 258: PED_Control(2,5);
  4936  001CBA  0E05               	movlw	5
  4937  001CBC  6E43               	movwf	PED_Control@num_sec,c
  4938  001CBE  0E02               	movlw	2
  4939  001CC0  ECF0  F00C         	call	_PED_Control
  4940  001CC4                     l614:
  4941                           
  4942                           ;lab9.c: 259: }
  4943                           ;lab9.c: 260: Wait_N_Seconds(6);
  4944  001CC4  0E06               	movlw	6
  4945  001CC6  EC7B  F013         	call	_Wait_N_Seconds
  4946                           
  4947                           ;lab9.c: 261: Set_EW(3);
  4948  001CCA  0E03               	movlw	3
  4949  001CCC  ECC3  F012         	call	_Set_EW
  4950                           
  4951                           ;lab9.c: 262: Wait_N_Seconds(3);
  4952  001CD0  0E03               	movlw	3
  4953  001CD2  EC7B  F013         	call	_Wait_N_Seconds
  4954                           
  4955                           ;lab9.c: 263: Set_EW(1);
  4956  001CD6  0E01               	movlw	1
  4957  001CD8  ECC3  F012         	call	_Set_EW
  4958                           
  4959                           ;lab9.c: 265: if(PORTAbits.RA4 == 1)
  4960  001CDC  A880               	btfss	3968,4,c	;volatile
  4961  001CDE  D010               	goto	l616
  4962                           
  4963                           ;lab9.c: 266: {
  4964                           ;lab9.c: 267: Set_NS_LT(2);
  4965  001CE0  0E02               	movlw	2
  4966  001CE2  EC5D  F012         	call	_Set_NS_LT
  4967                           
  4968                           ;lab9.c: 268: Wait_N_Seconds(5);
  4969  001CE6  0E05               	movlw	5
  4970  001CE8  EC7B  F013         	call	_Wait_N_Seconds
  4971                           
  4972                           ;lab9.c: 269: Set_NS_LT(3);
  4973  001CEC  0E03               	movlw	3
  4974  001CEE  EC5D  F012         	call	_Set_NS_LT
  4975                           
  4976                           ;lab9.c: 270: Wait_N_Seconds(3);
  4977  001CF2  0E03               	movlw	3
  4978  001CF4  EC7B  F013         	call	_Wait_N_Seconds
  4979                           
  4980                           ;lab9.c: 271: Set_NS_LT(1);
  4981  001CF8  0E01               	movlw	1
  4982  001CFA  EC5D  F012         	call	_Set_NS_LT
  4983  001CFE  D000               	goto	l616
  4984  001D00                     l616:
  4985  001D00  0012               	return		;funcret
  4986  001D02                     __end_of_Day_Mode:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           intcon	equ	0xFF2
  4993                           intcon2	equ	0xFF1
  4994                           intcon3	equ	0xFF0
  4995                           postinc0	equ	0xFEE
  4996                           wreg	equ	0xFE8
  4997                           postdec1	equ	0xFE5
  4998                           fsr1l	equ	0xFE1
  4999                           status	equ	0xFD8
  5000                           
  5001 ;; *************** function _Wait_N_Seconds *****************
  5002 ;; Defined at:
  5003 ;;		line 314 in file "lab9.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  seconds         1    wreg     unsigned char 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  seconds         1   66[COMRAM] unsigned char 
  5008 ;;  I               1   67[COMRAM] unsigned char 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;		None               void
  5011 ;; Registers used:
  5012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;Total ram usage:        2 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:   11
  5025 ;; This function calls:
  5026 ;;		_Wait_One_Second
  5027 ;;		_update_LCD_count
  5028 ;; This function is called by:
  5029 ;;		_Day_Mode
  5030 ;;		_Night_Mode
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text19
  5035  0026F6                     __ptext19:
  5036                           	opt stack 0
  5037  0026F6                     _Wait_N_Seconds:
  5038                           	opt stack 18
  5039                           
  5040                           ;incstack = 0
  5041                           ;Wait_N_Seconds@seconds stored from wreg
  5042  0026F6  6E43               	movwf	Wait_N_Seconds@seconds,c
  5043                           
  5044                           ;lab9.c: 316: char I;
  5045                           ;lab9.c: 317: for (I = seconds; I> 0; I--)
  5046  0026F8  C043  F044         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  5047  0026FC                     l5555:
  5048  0026FC  5044               	movf	Wait_N_Seconds@I,w,c
  5049  0026FE  B4D8               	btfsc	status,2,c
  5050  002700  D00B               	goto	l5565
  5051  002702  D001               	goto	l5559
  5052  002704  D009               	goto	l5565
  5053  002706                     l5559:
  5054                           
  5055                           ;lab9.c: 318: {
  5056                           ;lab9.c: 320: Wait_One_Second();
  5057  002706  EC35  F014         	call	_Wait_One_Second	;wreg free
  5058                           
  5059                           ;lab9.c: 321: update_LCD_count(direction, I);
  5060  00270A  C044  F041         	movff	Wait_N_Seconds@I,update_LCD_count@count
  5061  00270E  505B               	movf	_direction,w,c
  5062  002710  EC90  F007         	call	_update_LCD_count
  5063  002714  0644               	decf	Wait_N_Seconds@I,f,c
  5064  002716  D7F2               	goto	l5555
  5065  002718                     l5565:
  5066                           
  5067                           ;lab9.c: 322: }
  5068                           ;lab9.c: 323: Wait_One_Second();
  5069  002718  EC35  F014         	call	_Wait_One_Second	;wreg free
  5070                           
  5071                           ;lab9.c: 324: update_LCD_count(direction, 0);
  5072  00271C  0E00               	movlw	0
  5073  00271E  6E41               	movwf	update_LCD_count@count,c
  5074  002720  505B               	movf	_direction,w,c
  5075  002722  EC90  F007         	call	_update_LCD_count
  5076  002726  0012               	return		;funcret
  5077  002728                     __end_of_Wait_N_Seconds:
  5078                           	opt stack 0
  5079                           tblptru	equ	0xFF8
  5080                           tblptrh	equ	0xFF7
  5081                           tblptrl	equ	0xFF6
  5082                           tablat	equ	0xFF5
  5083                           intcon	equ	0xFF2
  5084                           intcon2	equ	0xFF1
  5085                           intcon3	equ	0xFF0
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           postdec1	equ	0xFE5
  5089                           fsr1l	equ	0xFE1
  5090                           status	equ	0xFD8
  5091                           
  5092 ;; *************** function _update_LCD_count *****************
  5093 ;; Defined at:
  5094 ;;		line 228 in file "Main_Screen.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;  direction       1    wreg     unsigned char 
  5097 ;;  count           1   64[COMRAM] unsigned char 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;  direction       1   65[COMRAM] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;		None               void
  5102 ;; Registers used:
  5103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5109 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;Total ram usage:        2 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    9
  5116 ;; This function calls:
  5117 ;;		___awdiv
  5118 ;;		___awmod
  5119 ;;		_drawtext
  5120 ;; This function is called by:
  5121 ;;		_Wait_N_Seconds
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text20
  5126  000F20                     __ptext20:
  5127                           	opt stack 0
  5128  000F20                     _update_LCD_count:
  5129                           	opt stack 19
  5130                           
  5131                           ;incstack = 0
  5132                           ;update_LCD_count@direction stored from wreg
  5133  000F20  6E42               	movwf	update_LCD_count@direction,c
  5134                           
  5135                           ;Main_Screen.c: 230: switch (direction)
  5136  000F22  D0B4               	goto	l5273
  5137  000F24                     l5255:
  5138                           
  5139                           ;Main_Screen.c: 233: NS_Count[0] = count/10 + '0';
  5140  000F24  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5141  000F28  6A10               	clrf	___awdiv@dividend+1,c
  5142  000F2A  0E00               	movlw	0
  5143  000F2C  6E12               	movwf	___awdiv@divisor+1,c
  5144  000F2E  0E0A               	movlw	10
  5145  000F30  6E11               	movwf	___awdiv@divisor,c
  5146  000F32  EC20  F00F         	call	___awdiv	;wreg free
  5147  000F36  500F               	movf	?___awdiv,w,c
  5148  000F38  0F30               	addlw	48
  5149  000F3A  0100               	movlb	0	; () banked
  5150  000F3C  6FA1               	movwf	_NS_Count& (0+255),b
  5151                           
  5152                           ;Main_Screen.c: 234: NS_Count[1] = count%10 + '0';
  5153  000F3E  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5154  000F42  6A36               	clrf	___awmod@dividend+1,c
  5155  000F44  0E00               	movlw	0
  5156  000F46  6E38               	movwf	___awmod@divisor+1,c
  5157  000F48  0E0A               	movlw	10
  5158  000F4A  6E37               	movwf	___awmod@divisor,c
  5159  000F4C  EC81  F010         	call	___awmod	;wreg free
  5160  000F50  5035               	movf	?___awmod,w,c
  5161  000F52  0F30               	addlw	48
  5162  000F54  0100               	movlb	0	; () banked
  5163  000F56  6FA2               	movwf	(_NS_Count+1)& (0+255),b
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;Main_Screen.c: 235: drawtext(100, 30 + 10, NS_Count, 0xFFE0, 0x0000, 2);
  5167  000F58  0E28               	movlw	40
  5168  000F5A  6E37               	movwf	drawtext@y,c
  5169  000F5C  0EA1               	movlw	low _NS_Count
  5170  000F5E  6E38               	movwf	drawtext@_text,c
  5171  000F60  0E00               	movlw	high _NS_Count
  5172  000F62  6E39               	movwf	drawtext@_text+1,c
  5173  000F64  0EFF               	movlw	255
  5174  000F66  6E3B               	movwf	drawtext@color+1,c
  5175  000F68  0EE0               	movlw	224
  5176  000F6A  6E3A               	movwf	drawtext@color,c
  5177  000F6C  0E00               	movlw	0
  5178  000F6E  6E3D               	movwf	drawtext@bg+1,c
  5179  000F70  0E00               	movlw	0
  5180  000F72  6E3C               	movwf	drawtext@bg,c
  5181  000F74  0E02               	movlw	2
  5182  000F76  6E3E               	movwf	drawtext@size,c
  5183  000F78  0E64               	movlw	100
  5184  000F7A  EC24  F00A         	call	_drawtext
  5185                           
  5186                           ;Main_Screen.c: 236: break;
  5187  000F7E  D094               	goto	l108
  5188  000F80                     l5259:
  5189                           
  5190                           ;Main_Screen.c: 239: NSLT_Count[0] = count/10 + '0';
  5191  000F80  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5192  000F84  6A10               	clrf	___awdiv@dividend+1,c
  5193  000F86  0E00               	movlw	0
  5194  000F88  6E12               	movwf	___awdiv@divisor+1,c
  5195  000F8A  0E0A               	movlw	10
  5196  000F8C  6E11               	movwf	___awdiv@divisor,c
  5197  000F8E  EC20  F00F         	call	___awdiv	;wreg free
  5198  000F92  500F               	movf	?___awdiv,w,c
  5199  000F94  0F30               	addlw	48
  5200  000F96  0100               	movlb	0	; () banked
  5201  000F98  6F9E               	movwf	_NSLT_Count& (0+255),b
  5202                           
  5203                           ;Main_Screen.c: 240: NSLT_Count[1] = count%10 + '0';
  5204  000F9A  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5205  000F9E  6A36               	clrf	___awmod@dividend+1,c
  5206  000FA0  0E00               	movlw	0
  5207  000FA2  6E38               	movwf	___awmod@divisor+1,c
  5208  000FA4  0E0A               	movlw	10
  5209  000FA6  6E37               	movwf	___awmod@divisor,c
  5210  000FA8  EC81  F010         	call	___awmod	;wreg free
  5211  000FAC  5035               	movf	?___awmod,w,c
  5212  000FAE  0F30               	addlw	48
  5213  000FB0  0100               	movlb	0	; () banked
  5214  000FB2  6F9F               	movwf	(_NSLT_Count+1)& (0+255),b
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;Main_Screen.c: 241: drawtext(100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5218  000FB4  0E46               	movlw	70
  5219  000FB6  6E37               	movwf	drawtext@y,c
  5220  000FB8  0E9E               	movlw	low _NSLT_Count
  5221  000FBA  6E38               	movwf	drawtext@_text,c
  5222  000FBC  0E00               	movlw	high _NSLT_Count
  5223  000FBE  6E39               	movwf	drawtext@_text+1,c
  5224  000FC0  0EF8               	movlw	248
  5225  000FC2  6E3B               	movwf	drawtext@color+1,c
  5226  000FC4  0E1F               	movlw	31
  5227  000FC6  6E3A               	movwf	drawtext@color,c
  5228  000FC8  0E00               	movlw	0
  5229  000FCA  6E3D               	movwf	drawtext@bg+1,c
  5230  000FCC  0E00               	movlw	0
  5231  000FCE  6E3C               	movwf	drawtext@bg,c
  5232  000FD0  0E02               	movlw	2
  5233  000FD2  6E3E               	movwf	drawtext@size,c
  5234  000FD4  0E64               	movlw	100
  5235  000FD6  EC24  F00A         	call	_drawtext
  5236                           
  5237                           ;Main_Screen.c: 242: break;
  5238  000FDA  D066               	goto	l108
  5239  000FDC                     l5263:
  5240                           
  5241                           ;Main_Screen.c: 245: EW_Count[0] = count/10 + '0';
  5242  000FDC  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5243  000FE0  6A10               	clrf	___awdiv@dividend+1,c
  5244  000FE2  0E00               	movlw	0
  5245  000FE4  6E12               	movwf	___awdiv@divisor+1,c
  5246  000FE6  0E0A               	movlw	10
  5247  000FE8  6E11               	movwf	___awdiv@divisor,c
  5248  000FEA  EC20  F00F         	call	___awdiv	;wreg free
  5249  000FEE  500F               	movf	?___awdiv,w,c
  5250  000FF0  0F30               	addlw	48
  5251  000FF2  6E5E               	movwf	_EW_Count,c
  5252                           
  5253                           ;Main_Screen.c: 246: EW_Count[1] = count%10 + '0';
  5254  000FF4  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5255  000FF8  6A36               	clrf	___awmod@dividend+1,c
  5256  000FFA  0E00               	movlw	0
  5257  000FFC  6E38               	movwf	___awmod@divisor+1,c
  5258  000FFE  0E0A               	movlw	10
  5259  001000  6E37               	movwf	___awmod@divisor,c
  5260  001002  EC81  F010         	call	___awmod	;wreg free
  5261  001006  5035               	movf	?___awmod,w,c
  5262  001008  0F30               	addlw	48
  5263  00100A  6E5F               	movwf	_EW_Count+1,c
  5264                           
  5265                           ;Main_Screen.c: 247: drawtext(100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5266  00100C  0E64               	movlw	100
  5267  00100E  6E37               	movwf	drawtext@y,c
  5268  001010  0E5E               	movlw	low _EW_Count
  5269  001012  6E38               	movwf	drawtext@_text,c
  5270  001014  0E00               	movlw	high _EW_Count
  5271  001016  6E39               	movwf	drawtext@_text+1,c
  5272  001018  0E07               	movlw	7
  5273  00101A  6E3B               	movwf	drawtext@color+1,c
  5274  00101C  683A               	setf	drawtext@color,c
  5275  00101E  0E00               	movlw	0
  5276  001020  6E3D               	movwf	drawtext@bg+1,c
  5277  001022  0E00               	movlw	0
  5278  001024  6E3C               	movwf	drawtext@bg,c
  5279  001026  0E02               	movlw	2
  5280  001028  6E3E               	movwf	drawtext@size,c
  5281  00102A  0E64               	movlw	100
  5282  00102C  EC24  F00A         	call	_drawtext
  5283                           
  5284                           ;Main_Screen.c: 248: break;
  5285  001030  D03B               	goto	l108
  5286  001032                     l5267:
  5287                           
  5288                           ;Main_Screen.c: 251: EWLT_Count[0] = count/10 + '0';
  5289  001032  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5290  001036  6A10               	clrf	___awdiv@dividend+1,c
  5291  001038  0E00               	movlw	0
  5292  00103A  6E12               	movwf	___awdiv@divisor+1,c
  5293  00103C  0E0A               	movlw	10
  5294  00103E  6E11               	movwf	___awdiv@divisor,c
  5295  001040  EC20  F00F         	call	___awdiv	;wreg free
  5296  001044  500F               	movf	?___awdiv,w,c
  5297  001046  0F30               	addlw	48
  5298  001048  0100               	movlb	0	; () banked
  5299  00104A  6F9B               	movwf	_EWLT_Count& (0+255),b
  5300                           
  5301                           ;Main_Screen.c: 252: EWLT_Count[1] = count%10 + '0';
  5302  00104C  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5303  001050  6A36               	clrf	___awmod@dividend+1,c
  5304  001052  0E00               	movlw	0
  5305  001054  6E38               	movwf	___awmod@divisor+1,c
  5306  001056  0E0A               	movlw	10
  5307  001058  6E37               	movwf	___awmod@divisor,c
  5308  00105A  EC81  F010         	call	___awmod	;wreg free
  5309  00105E  5035               	movf	?___awmod,w,c
  5310  001060  0F30               	addlw	48
  5311  001062  0100               	movlb	0	; () banked
  5312  001064  6F9C               	movwf	(_EWLT_Count+1)& (0+255),b
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;Main_Screen.c: 253: drawtext(100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5316  001066  0E82               	movlw	130
  5317  001068  6E37               	movwf	drawtext@y,c
  5318  00106A  0E9B               	movlw	low _EWLT_Count
  5319  00106C  6E38               	movwf	drawtext@_text,c
  5320  00106E  0E00               	movlw	high _EWLT_Count
  5321  001070  6E39               	movwf	drawtext@_text+1,c
  5322  001072  0EFF               	movlw	255
  5323  001074  6E3B               	movwf	drawtext@color+1,c
  5324  001076  683A               	setf	drawtext@color,c
  5325  001078  0E00               	movlw	0
  5326  00107A  6E3D               	movwf	drawtext@bg+1,c
  5327  00107C  0E00               	movlw	0
  5328  00107E  6E3C               	movwf	drawtext@bg,c
  5329  001080  0E02               	movlw	2
  5330  001082  6E3E               	movwf	drawtext@size,c
  5331  001084  0E64               	movlw	100
  5332  001086  EC24  F00A         	call	_drawtext
  5333                           
  5334                           ;Main_Screen.c: 255: }
  5335                           
  5336                           ;Main_Screen.c: 254: break;
  5337  00108A  D00E               	goto	l108
  5338  00108C                     l5273:
  5339  00108C  5042               	movf	update_LCD_count@direction,w,c
  5340                           
  5341                           ; Switch size 1, requested type "space"
  5342                           ; Number of cases is 4, Range of values is 0 to 3
  5343                           ; switch strategies available:
  5344                           ; Name         Instructions Cycles
  5345                           ; simple_byte           13     7 (average)
  5346                           ;	Chosen strategy is simple_byte
  5347  00108E  0A00               	xorlw	0	; case 0
  5348  001090  B4D8               	btfsc	status,2,c
  5349  001092  D748               	goto	l5255
  5350  001094  0A01               	xorlw	1	; case 1
  5351  001096  B4D8               	btfsc	status,2,c
  5352  001098  D773               	goto	l5259
  5353  00109A  0A03               	xorlw	3	; case 2
  5354  00109C  B4D8               	btfsc	status,2,c
  5355  00109E  D79E               	goto	l5263
  5356  0010A0  0A01               	xorlw	1	; case 3
  5357  0010A2  B4D8               	btfsc	status,2,c
  5358  0010A4  D7C6               	goto	l5267
  5359  0010A6  D000               	goto	l108
  5360  0010A8                     l108:
  5361  0010A8  0012               	return		;funcret
  5362  0010AA                     __end_of_update_LCD_count:
  5363                           	opt stack 0
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           intcon	equ	0xFF2
  5369                           intcon2	equ	0xFF1
  5370                           intcon3	equ	0xFF0
  5371                           postinc0	equ	0xFEE
  5372                           wreg	equ	0xFE8
  5373                           postdec1	equ	0xFE5
  5374                           fsr1l	equ	0xFE1
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function _Wait_One_Second *****************
  5378 ;; Defined at:
  5379 ;;		line 89 in file "utils.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;		None               void
  5386 ;; Registers used:
  5387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:   10
  5400 ;; This function calls:
  5401 ;;		_Draw_Star
  5402 ;;		_Erase_Star
  5403 ;;		_Wait_Half_Second
  5404 ;;		_update_LCD_misc
  5405 ;; This function is called by:
  5406 ;;		_Wait_N_Seconds
  5407 ;;		_Do_Flashing
  5408 ;;		_Do_Beep
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text21
  5413  00286A                     __ptext21:
  5414                           	opt stack 0
  5415  00286A                     _Wait_One_Second:
  5416                           	opt stack 18
  5417                           
  5418                           ;utils.c: 91: PORTDbits.RD7 = 1;
  5419                           
  5420                           ;incstack = 0
  5421  00286A  8E83               	bsf	3971,7,c	;volatile
  5422                           
  5423                           ;utils.c: 92: Draw_Star();
  5424  00286C  EC5E  F013         	call	_Draw_Star	;wreg free
  5425                           
  5426                           ;utils.c: 93: Wait_Half_Second();
  5427  002870  EC42  F014         	call	_Wait_Half_Second	;wreg free
  5428                           
  5429                           ;utils.c: 94: PORTDbits.RD7 = 0;
  5430  002874  9E83               	bcf	3971,7,c	;volatile
  5431                           
  5432                           ;utils.c: 95: Erase_Star();
  5433  002876  EC41  F013         	call	_Erase_Star	;wreg free
  5434                           
  5435                           ;utils.c: 96: Wait_Half_Second();
  5436  00287A  EC42  F014         	call	_Wait_Half_Second	;wreg free
  5437                           
  5438                           ;utils.c: 97: update_LCD_misc();
  5439  00287E  EC7D  F005         	call	_update_LCD_misc	;wreg free
  5440  002882  0012               	return		;funcret
  5441  002884                     __end_of_Wait_One_Second:
  5442                           	opt stack 0
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           intcon	equ	0xFF2
  5448                           intcon2	equ	0xFF1
  5449                           intcon3	equ	0xFF0
  5450                           postinc0	equ	0xFEE
  5451                           wreg	equ	0xFE8
  5452                           postdec1	equ	0xFE5
  5453                           fsr1l	equ	0xFE1
  5454                           status	equ	0xFD8
  5455                           
  5456 ;; *************** function _Set_NS_LT *****************
  5457 ;; Defined at:
  5458 ;;		line 148 in file "lab9.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  color           1    wreg     unsigned char 
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  color           1   67[COMRAM] unsigned char 
  5463 ;; Return value:  Size  Location     Type
  5464 ;;		None               void
  5465 ;; Registers used:
  5466 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5467 ;; Tracked objects:
  5468 ;;		On entry : 0/0
  5469 ;;		On exit  : 0/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;Total ram usage:        1 bytes
  5477 ;; Hardware stack levels used:    1
  5478 ;; Hardware stack levels required when called:    9
  5479 ;; This function calls:
  5480 ;;		_update_LCD_color
  5481 ;; This function is called by:
  5482 ;;		_Day_Mode
  5483 ;;		_Night_Mode
  5484 ;;		_Do_Flashing
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           	psect	text22
  5489  0024BA                     __ptext22:
  5490                           	opt stack 0
  5491  0024BA                     _Set_NS_LT:
  5492                           	opt stack 20
  5493                           
  5494                           ;incstack = 0
  5495                           ;Set_NS_LT@color stored from wreg
  5496  0024BA  6E44               	movwf	Set_NS_LT@color,c
  5497                           
  5498                           ;lab9.c: 151: direction = 1;
  5499  0024BC  0E01               	movlw	1
  5500  0024BE  6E5B               	movwf	_direction,c
  5501                           
  5502                           ;lab9.c: 152: update_LCD_color(direction, color);
  5503  0024C0  C044  F041         	movff	Set_NS_LT@color,update_LCD_color@color
  5504  0024C4  505B               	movf	_direction,w,c
  5505  0024C6  ECCC  F003         	call	_update_LCD_color
  5506                           
  5507                           ;lab9.c: 153: switch (color)
  5508  0024CA  D00A               	goto	l5495
  5509  0024CC                     l577:
  5510  0024CC  9083               	bcf	3971,0,c	;volatile
  5511  0024CE  D001               	goto	L2
  5512  0024D0                     l579:
  5513  0024D0  8083               	bsf	3971,0,c	;volatile
  5514  0024D2                     L2:
  5515  0024D2  9283               	bcf	3971,1,c	;volatile
  5516  0024D4  D013               	goto	l582
  5517  0024D6                     l580:
  5518  0024D6  9083               	bcf	3971,0,c	;volatile
  5519  0024D8  D001               	goto	L3
  5520  0024DA                     l581:
  5521  0024DA  8083               	bsf	3971,0,c	;volatile
  5522  0024DC                     L3:
  5523  0024DC  8283               	bsf	3971,1,c	;volatile
  5524                           
  5525                           ;lab9.c: 159: }
  5526  0024DE  D00E               	goto	l582
  5527  0024E0                     l5495:
  5528  0024E0  5044               	movf	Set_NS_LT@color,w,c
  5529                           
  5530                           ; Switch size 1, requested type "space"
  5531                           ; Number of cases is 4, Range of values is 0 to 3
  5532                           ; switch strategies available:
  5533                           ; Name         Instructions Cycles
  5534                           ; simple_byte           13     7 (average)
  5535                           ;	Chosen strategy is simple_byte
  5536  0024E2  0A00               	xorlw	0	; case 0
  5537  0024E4  B4D8               	btfsc	status,2,c
  5538  0024E6  D7F2               	goto	l577
  5539  0024E8  0A01               	xorlw	1	; case 1
  5540  0024EA  B4D8               	btfsc	status,2,c
  5541  0024EC  D7F1               	goto	l579
  5542  0024EE  0A03               	xorlw	3	; case 2
  5543  0024F0  B4D8               	btfsc	status,2,c
  5544  0024F2  D7F1               	goto	l580
  5545  0024F4  0A01               	xorlw	1	; case 3
  5546  0024F6  B4D8               	btfsc	status,2,c
  5547  0024F8  D7F0               	goto	l581
  5548  0024FA  D000               	goto	l582
  5549  0024FC                     l582:
  5550  0024FC  0012               	return		;funcret
  5551  0024FE                     __end_of_Set_NS_LT:
  5552                           	opt stack 0
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           intcon	equ	0xFF2
  5558                           intcon2	equ	0xFF1
  5559                           intcon3	equ	0xFF0
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           postdec1	equ	0xFE5
  5563                           fsr1l	equ	0xFE1
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function _Set_NS *****************
  5567 ;; Defined at:
  5568 ;;		line 134 in file "lab9.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  color           1    wreg     unsigned char 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  color           1   67[COMRAM] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;		None               void
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;Total ram usage:        1 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    9
  5589 ;; This function calls:
  5590 ;;		_update_LCD_color
  5591 ;; This function is called by:
  5592 ;;		_Day_Mode
  5593 ;;		_Night_Mode
  5594 ;;		_Do_Flashing
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text23
  5599  0024FE                     __ptext23:
  5600                           	opt stack 0
  5601  0024FE                     _Set_NS:
  5602                           	opt stack 20
  5603                           
  5604                           ;incstack = 0
  5605                           ;Set_NS@color stored from wreg
  5606  0024FE  6E44               	movwf	Set_NS@color,c
  5607                           
  5608                           ;lab9.c: 137: direction = 0;
  5609  002500  0E00               	movlw	0
  5610  002502  6E5B               	movwf	_direction,c
  5611                           
  5612                           ;lab9.c: 138: update_LCD_color(direction, color);
  5613  002504  C044  F041         	movff	Set_NS@color,update_LCD_color@color
  5614  002508  505B               	movf	_direction,w,c
  5615  00250A  ECCC  F003         	call	_update_LCD_color
  5616                           
  5617                           ;lab9.c: 139: switch (color)
  5618  00250E  D00A               	goto	l5487
  5619  002510                     l568:
  5620  002510  9A80               	bcf	3968,5,c	;volatile
  5621  002512  D001               	goto	L4
  5622  002514                     l570:
  5623  002514  8A80               	bsf	3968,5,c	;volatile
  5624  002516                     L4:
  5625  002516  9082               	bcf	3970,0,c	;volatile
  5626  002518  D013               	goto	l573
  5627  00251A                     l571:
  5628  00251A  9A80               	bcf	3968,5,c	;volatile
  5629  00251C  D001               	goto	L5
  5630  00251E                     l572:
  5631  00251E  8A80               	bsf	3968,5,c	;volatile
  5632  002520                     L5:
  5633  002520  8082               	bsf	3970,0,c	;volatile
  5634                           
  5635                           ;lab9.c: 145: }
  5636  002522  D00E               	goto	l573
  5637  002524                     l5487:
  5638  002524  5044               	movf	Set_NS@color,w,c
  5639                           
  5640                           ; Switch size 1, requested type "space"
  5641                           ; Number of cases is 4, Range of values is 0 to 3
  5642                           ; switch strategies available:
  5643                           ; Name         Instructions Cycles
  5644                           ; simple_byte           13     7 (average)
  5645                           ;	Chosen strategy is simple_byte
  5646  002526  0A00               	xorlw	0	; case 0
  5647  002528  B4D8               	btfsc	status,2,c
  5648  00252A  D7F2               	goto	l568
  5649  00252C  0A01               	xorlw	1	; case 1
  5650  00252E  B4D8               	btfsc	status,2,c
  5651  002530  D7F1               	goto	l570
  5652  002532  0A03               	xorlw	3	; case 2
  5653  002534  B4D8               	btfsc	status,2,c
  5654  002536  D7F1               	goto	l571
  5655  002538  0A01               	xorlw	1	; case 3
  5656  00253A  B4D8               	btfsc	status,2,c
  5657  00253C  D7F0               	goto	l572
  5658  00253E  D000               	goto	l573
  5659  002540                     l573:
  5660  002540  0012               	return		;funcret
  5661  002542                     __end_of_Set_NS:
  5662                           	opt stack 0
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           intcon	equ	0xFF2
  5668                           intcon2	equ	0xFF1
  5669                           intcon3	equ	0xFF0
  5670                           postinc0	equ	0xFEE
  5671                           wreg	equ	0xFE8
  5672                           postdec1	equ	0xFE5
  5673                           fsr1l	equ	0xFE1
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _Set_EW_LT *****************
  5677 ;; Defined at:
  5678 ;;		line 176 in file "lab9.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  color           1    wreg     unsigned char 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  color           1   67[COMRAM] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;		None               void
  5685 ;; Registers used:
  5686 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;Total ram usage:        1 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    9
  5699 ;; This function calls:
  5700 ;;		_update_LCD_color
  5701 ;; This function is called by:
  5702 ;;		_Day_Mode
  5703 ;;		_Night_Mode
  5704 ;;		_Do_Flashing
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text24
  5709  002542                     __ptext24:
  5710                           	opt stack 0
  5711  002542                     _Set_EW_LT:
  5712                           	opt stack 20
  5713                           
  5714                           ;incstack = 0
  5715                           ;Set_EW_LT@color stored from wreg
  5716  002542  6E44               	movwf	Set_EW_LT@color,c
  5717                           
  5718                           ;lab9.c: 179: direction = 3;
  5719  002544  0E03               	movlw	3
  5720  002546  6E5B               	movwf	_direction,c
  5721                           
  5722                           ;lab9.c: 180: update_LCD_color(direction, color);
  5723  002548  C044  F041         	movff	Set_EW_LT@color,update_LCD_color@color
  5724  00254C  505B               	movf	_direction,w,c
  5725  00254E  ECCC  F003         	call	_update_LCD_color
  5726                           
  5727                           ;lab9.c: 181: switch (color)
  5728  002552  D00A               	goto	l5511
  5729  002554                     l595:
  5730  002554  9284               	bcf	3972,1,c	;volatile
  5731  002556  D001               	goto	L6
  5732  002558                     l597:
  5733  002558  8284               	bsf	3972,1,c	;volatile
  5734  00255A                     L6:
  5735  00255A  9484               	bcf	3972,2,c	;volatile
  5736  00255C  D013               	goto	l600
  5737  00255E                     l598:
  5738  00255E  9284               	bcf	3972,1,c	;volatile
  5739  002560  D001               	goto	L7
  5740  002562                     l599:
  5741  002562  8284               	bsf	3972,1,c	;volatile
  5742  002564                     L7:
  5743  002564  8484               	bsf	3972,2,c	;volatile
  5744                           
  5745                           ;lab9.c: 187: }
  5746  002566  D00E               	goto	l600
  5747  002568                     l5511:
  5748  002568  5044               	movf	Set_EW_LT@color,w,c
  5749                           
  5750                           ; Switch size 1, requested type "space"
  5751                           ; Number of cases is 4, Range of values is 0 to 3
  5752                           ; switch strategies available:
  5753                           ; Name         Instructions Cycles
  5754                           ; simple_byte           13     7 (average)
  5755                           ;	Chosen strategy is simple_byte
  5756  00256A  0A00               	xorlw	0	; case 0
  5757  00256C  B4D8               	btfsc	status,2,c
  5758  00256E  D7F2               	goto	l595
  5759  002570  0A01               	xorlw	1	; case 1
  5760  002572  B4D8               	btfsc	status,2,c
  5761  002574  D7F1               	goto	l597
  5762  002576  0A03               	xorlw	3	; case 2
  5763  002578  B4D8               	btfsc	status,2,c
  5764  00257A  D7F1               	goto	l598
  5765  00257C  0A01               	xorlw	1	; case 3
  5766  00257E  B4D8               	btfsc	status,2,c
  5767  002580  D7F0               	goto	l599
  5768  002582  D000               	goto	l600
  5769  002584                     l600:
  5770  002584  0012               	return		;funcret
  5771  002586                     __end_of_Set_EW_LT:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           intcon	equ	0xFF2
  5778                           intcon2	equ	0xFF1
  5779                           intcon3	equ	0xFF0
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           postdec1	equ	0xFE5
  5783                           fsr1l	equ	0xFE1
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _Set_EW *****************
  5787 ;; Defined at:
  5788 ;;		line 162 in file "lab9.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  color           1    wreg     unsigned char 
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  color           1   67[COMRAM] unsigned char 
  5793 ;; Return value:  Size  Location     Type
  5794 ;;		None               void
  5795 ;; Registers used:
  5796 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5805 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;Total ram usage:        1 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    9
  5809 ;; This function calls:
  5810 ;;		_update_LCD_color
  5811 ;; This function is called by:
  5812 ;;		_Day_Mode
  5813 ;;		_Night_Mode
  5814 ;;		_Do_Flashing
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text25
  5819  002586                     __ptext25:
  5820                           	opt stack 0
  5821  002586                     _Set_EW:
  5822                           	opt stack 20
  5823                           
  5824                           ;incstack = 0
  5825                           ;Set_EW@color stored from wreg
  5826  002586  6E44               	movwf	Set_EW@color,c
  5827                           
  5828                           ;lab9.c: 165: direction = 2;
  5829  002588  0E02               	movlw	2
  5830  00258A  6E5B               	movwf	_direction,c
  5831                           
  5832                           ;lab9.c: 166: update_LCD_color(direction, color);
  5833  00258C  C044  F041         	movff	Set_EW@color,update_LCD_color@color
  5834  002590  505B               	movf	_direction,w,c
  5835  002592  ECCC  F003         	call	_update_LCD_color
  5836                           
  5837                           ;lab9.c: 167: switch (color)
  5838  002596  D00A               	goto	l5503
  5839  002598                     l586:
  5840  002598  9482               	bcf	3970,2,c	;volatile
  5841  00259A  D001               	goto	L8
  5842  00259C                     l588:
  5843  00259C  8482               	bsf	3970,2,c	;volatile
  5844  00259E                     L8:
  5845  00259E  9882               	bcf	3970,4,c	;volatile
  5846  0025A0  D013               	goto	l591
  5847  0025A2                     l589:
  5848  0025A2  9482               	bcf	3970,2,c	;volatile
  5849  0025A4  D001               	goto	L9
  5850  0025A6                     l590:
  5851  0025A6  8482               	bsf	3970,2,c	;volatile
  5852  0025A8                     L9:
  5853  0025A8  8882               	bsf	3970,4,c	;volatile
  5854                           
  5855                           ;lab9.c: 173: }
  5856  0025AA  D00E               	goto	l591
  5857  0025AC                     l5503:
  5858  0025AC  5044               	movf	Set_EW@color,w,c
  5859                           
  5860                           ; Switch size 1, requested type "space"
  5861                           ; Number of cases is 4, Range of values is 0 to 3
  5862                           ; switch strategies available:
  5863                           ; Name         Instructions Cycles
  5864                           ; simple_byte           13     7 (average)
  5865                           ;	Chosen strategy is simple_byte
  5866  0025AE  0A00               	xorlw	0	; case 0
  5867  0025B0  B4D8               	btfsc	status,2,c
  5868  0025B2  D7F2               	goto	l586
  5869  0025B4  0A01               	xorlw	1	; case 1
  5870  0025B6  B4D8               	btfsc	status,2,c
  5871  0025B8  D7F1               	goto	l588
  5872  0025BA  0A03               	xorlw	3	; case 2
  5873  0025BC  B4D8               	btfsc	status,2,c
  5874  0025BE  D7F1               	goto	l589
  5875  0025C0  0A01               	xorlw	1	; case 3
  5876  0025C2  B4D8               	btfsc	status,2,c
  5877  0025C4  D7F0               	goto	l590
  5878  0025C6  D000               	goto	l591
  5879  0025C8                     l591:
  5880  0025C8  0012               	return		;funcret
  5881  0025CA                     __end_of_Set_EW:
  5882                           	opt stack 0
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           intcon	equ	0xFF2
  5888                           intcon2	equ	0xFF1
  5889                           intcon3	equ	0xFF0
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           postdec1	equ	0xFE5
  5893                           fsr1l	equ	0xFE1
  5894                           status	equ	0xFD8
  5895                           
  5896 ;; *************** function _update_LCD_color *****************
  5897 ;; Defined at:
  5898 ;;		line 161 in file "Main_Screen.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;  direction       1    wreg     unsigned char 
  5901 ;;  color           1   64[COMRAM] unsigned char 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  direction       1   65[COMRAM] unsigned char 
  5904 ;;  Circle_Y        1   66[COMRAM] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;		None               void
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5914 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;Total ram usage:        3 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    8
  5921 ;; This function calls:
  5922 ;;		_drawCircle
  5923 ;;		_fillCircle
  5924 ;; This function is called by:
  5925 ;;		_Set_NS
  5926 ;;		_Set_NS_LT
  5927 ;;		_Set_EW
  5928 ;;		_Set_EW_LT
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text26
  5933  000798                     __ptext26:
  5934                           	opt stack 0
  5935  000798                     _update_LCD_color:
  5936                           	opt stack 20
  5937                           
  5938                           ;incstack = 0
  5939                           ;update_LCD_color@direction stored from wreg
  5940  000798  6E42               	movwf	update_LCD_color@direction,c
  5941                           
  5942                           ;Main_Screen.c: 163: char Circle_Y;
  5943                           ;Main_Screen.c: 164: Circle_Y = 30 + 16 + direction * 30;
  5944  00079A  5042               	movf	update_LCD_color@direction,w,c
  5945  00079C  0D1E               	mullw	30
  5946  00079E  50F3               	movf	prodl,w,c
  5947  0007A0  0F2E               	addlw	46
  5948  0007A2  6E43               	movwf	update_LCD_color@Circle_Y,c
  5949                           
  5950                           ;Main_Screen.c: 166: if (color == 0)
  5951  0007A4  5041               	movf	update_LCD_color@color,w,c
  5952  0007A6  A4D8               	btfss	status,2,c
  5953  0007A8  D067               	goto	l5227
  5954                           
  5955                           ;Main_Screen.c: 167: {
  5956                           ;Main_Screen.c: 168: fillCircle(40, Circle_Y, 7, 0x0000);
  5957  0007AA  0E00               	movlw	0
  5958  0007AC  6E3A               	movwf	fillCircle@x0+1,c
  5959  0007AE  0E28               	movlw	40
  5960  0007B0  6E39               	movwf	fillCircle@x0,c
  5961  0007B2  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5962  0007B6  6A3C               	clrf	fillCircle@y0+1,c
  5963  0007B8  0E00               	movlw	0
  5964  0007BA  6E3E               	movwf	fillCircle@r+1,c
  5965  0007BC  0E07               	movlw	7
  5966  0007BE  6E3D               	movwf	fillCircle@r,c
  5967  0007C0  0E00               	movlw	0
  5968  0007C2  6E40               	movwf	fillCircle@color+1,c
  5969  0007C4  0E00               	movlw	0
  5970  0007C6  6E3F               	movwf	fillCircle@color,c
  5971  0007C8  ECE8  F011         	call	_fillCircle	;wreg free
  5972                           
  5973                           ;Main_Screen.c: 169: fillCircle(60, Circle_Y, 7, 0x0000);
  5974  0007CC  0E00               	movlw	0
  5975  0007CE  6E3A               	movwf	fillCircle@x0+1,c
  5976  0007D0  0E3C               	movlw	60
  5977  0007D2  6E39               	movwf	fillCircle@x0,c
  5978  0007D4  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5979  0007D8  6A3C               	clrf	fillCircle@y0+1,c
  5980  0007DA  0E00               	movlw	0
  5981  0007DC  6E3E               	movwf	fillCircle@r+1,c
  5982  0007DE  0E07               	movlw	7
  5983  0007E0  6E3D               	movwf	fillCircle@r,c
  5984  0007E2  0E00               	movlw	0
  5985  0007E4  6E40               	movwf	fillCircle@color+1,c
  5986  0007E6  0E00               	movlw	0
  5987  0007E8  6E3F               	movwf	fillCircle@color,c
  5988  0007EA  ECE8  F011         	call	_fillCircle	;wreg free
  5989                           
  5990                           ;Main_Screen.c: 170: fillCircle(80, Circle_Y, 7, 0x0000);
  5991  0007EE  0E00               	movlw	0
  5992  0007F0  6E3A               	movwf	fillCircle@x0+1,c
  5993  0007F2  0E50               	movlw	80
  5994  0007F4  6E39               	movwf	fillCircle@x0,c
  5995  0007F6  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5996  0007FA  6A3C               	clrf	fillCircle@y0+1,c
  5997  0007FC  0E00               	movlw	0
  5998  0007FE  6E3E               	movwf	fillCircle@r+1,c
  5999  000800  0E07               	movlw	7
  6000  000802  6E3D               	movwf	fillCircle@r,c
  6001  000804  0E00               	movlw	0
  6002  000806  6E40               	movwf	fillCircle@color+1,c
  6003  000808  0E00               	movlw	0
  6004  00080A  6E3F               	movwf	fillCircle@color,c
  6005  00080C  ECE8  F011         	call	_fillCircle	;wreg free
  6006                           
  6007                           ;Main_Screen.c: 171: drawCircle(40, Circle_Y, 7, 0xF800);
  6008  000810  0E00               	movlw	0
  6009  000812  6E1B               	movwf	drawCircle@x0+1,c
  6010  000814  0E28               	movlw	40
  6011  000816  6E1A               	movwf	drawCircle@x0,c
  6012  000818  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6013  00081C  6A1D               	clrf	drawCircle@y0+1,c
  6014  00081E  0E00               	movlw	0
  6015  000820  6E1F               	movwf	drawCircle@r+1,c
  6016  000822  0E07               	movlw	7
  6017  000824  6E1E               	movwf	drawCircle@r,c
  6018  000826  0EF8               	movlw	248
  6019  000828  6E21               	movwf	drawCircle@color+1,c
  6020  00082A  0E00               	movlw	0
  6021  00082C  6E20               	movwf	drawCircle@color,c
  6022  00082E  ECB9  F006         	call	_drawCircle	;wreg free
  6023                           
  6024                           ;Main_Screen.c: 172: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6025  000832  0E00               	movlw	0
  6026  000834  6E1B               	movwf	drawCircle@x0+1,c
  6027  000836  0E3C               	movlw	60
  6028  000838  6E1A               	movwf	drawCircle@x0,c
  6029  00083A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6030  00083E  6A1D               	clrf	drawCircle@y0+1,c
  6031  000840  0E00               	movlw	0
  6032  000842  6E1F               	movwf	drawCircle@r+1,c
  6033  000844  0E07               	movlw	7
  6034  000846  6E1E               	movwf	drawCircle@r,c
  6035  000848  0EFF               	movlw	255
  6036  00084A  6E21               	movwf	drawCircle@color+1,c
  6037  00084C  0EE0               	movlw	224
  6038  00084E  6E20               	movwf	drawCircle@color,c
  6039  000850  ECB9  F006         	call	_drawCircle	;wreg free
  6040                           
  6041                           ;Main_Screen.c: 173: drawCircle(80, Circle_Y, 7, 0x07E0);
  6042  000854  0E00               	movlw	0
  6043  000856  6E1B               	movwf	drawCircle@x0+1,c
  6044  000858  0E50               	movlw	80
  6045  00085A  6E1A               	movwf	drawCircle@x0,c
  6046  00085C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6047  000860  6A1D               	clrf	drawCircle@y0+1,c
  6048  000862  0E00               	movlw	0
  6049  000864  6E1F               	movwf	drawCircle@r+1,c
  6050  000866  0E07               	movlw	7
  6051  000868  6E1E               	movwf	drawCircle@r,c
  6052  00086A  0E07               	movlw	7
  6053  00086C  6E21               	movwf	drawCircle@color+1,c
  6054  00086E  0EE0               	movlw	224
  6055  000870  6E20               	movwf	drawCircle@color,c
  6056  000872  ECB9  F006         	call	_drawCircle	;wreg free
  6057  000876  D000               	goto	l5227
  6058  000878                     l5227:
  6059                           
  6060                           ;Main_Screen.c: 174: }
  6061                           ;Main_Screen.c: 176: if (color == 1)
  6062  000878  0441               	decf	update_LCD_color@color,w,c
  6063  00087A  A4D8               	btfss	status,2,c
  6064  00087C  D067               	goto	l5231
  6065                           
  6066                           ;Main_Screen.c: 177: {
  6067                           ;Main_Screen.c: 178: fillCircle(40, Circle_Y, 7, 0xF800);
  6068  00087E  0E00               	movlw	0
  6069  000880  6E3A               	movwf	fillCircle@x0+1,c
  6070  000882  0E28               	movlw	40
  6071  000884  6E39               	movwf	fillCircle@x0,c
  6072  000886  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6073  00088A  6A3C               	clrf	fillCircle@y0+1,c
  6074  00088C  0E00               	movlw	0
  6075  00088E  6E3E               	movwf	fillCircle@r+1,c
  6076  000890  0E07               	movlw	7
  6077  000892  6E3D               	movwf	fillCircle@r,c
  6078  000894  0EF8               	movlw	248
  6079  000896  6E40               	movwf	fillCircle@color+1,c
  6080  000898  0E00               	movlw	0
  6081  00089A  6E3F               	movwf	fillCircle@color,c
  6082  00089C  ECE8  F011         	call	_fillCircle	;wreg free
  6083                           
  6084                           ;Main_Screen.c: 179: fillCircle(60, Circle_Y, 7, 0x0000);
  6085  0008A0  0E00               	movlw	0
  6086  0008A2  6E3A               	movwf	fillCircle@x0+1,c
  6087  0008A4  0E3C               	movlw	60
  6088  0008A6  6E39               	movwf	fillCircle@x0,c
  6089  0008A8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6090  0008AC  6A3C               	clrf	fillCircle@y0+1,c
  6091  0008AE  0E00               	movlw	0
  6092  0008B0  6E3E               	movwf	fillCircle@r+1,c
  6093  0008B2  0E07               	movlw	7
  6094  0008B4  6E3D               	movwf	fillCircle@r,c
  6095  0008B6  0E00               	movlw	0
  6096  0008B8  6E40               	movwf	fillCircle@color+1,c
  6097  0008BA  0E00               	movlw	0
  6098  0008BC  6E3F               	movwf	fillCircle@color,c
  6099  0008BE  ECE8  F011         	call	_fillCircle	;wreg free
  6100                           
  6101                           ;Main_Screen.c: 180: fillCircle(80, Circle_Y, 7, 0x0000);
  6102  0008C2  0E00               	movlw	0
  6103  0008C4  6E3A               	movwf	fillCircle@x0+1,c
  6104  0008C6  0E50               	movlw	80
  6105  0008C8  6E39               	movwf	fillCircle@x0,c
  6106  0008CA  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6107  0008CE  6A3C               	clrf	fillCircle@y0+1,c
  6108  0008D0  0E00               	movlw	0
  6109  0008D2  6E3E               	movwf	fillCircle@r+1,c
  6110  0008D4  0E07               	movlw	7
  6111  0008D6  6E3D               	movwf	fillCircle@r,c
  6112  0008D8  0E00               	movlw	0
  6113  0008DA  6E40               	movwf	fillCircle@color+1,c
  6114  0008DC  0E00               	movlw	0
  6115  0008DE  6E3F               	movwf	fillCircle@color,c
  6116  0008E0  ECE8  F011         	call	_fillCircle	;wreg free
  6117                           
  6118                           ;Main_Screen.c: 181: drawCircle(40, Circle_Y, 7, 0xF800);
  6119  0008E4  0E00               	movlw	0
  6120  0008E6  6E1B               	movwf	drawCircle@x0+1,c
  6121  0008E8  0E28               	movlw	40
  6122  0008EA  6E1A               	movwf	drawCircle@x0,c
  6123  0008EC  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6124  0008F0  6A1D               	clrf	drawCircle@y0+1,c
  6125  0008F2  0E00               	movlw	0
  6126  0008F4  6E1F               	movwf	drawCircle@r+1,c
  6127  0008F6  0E07               	movlw	7
  6128  0008F8  6E1E               	movwf	drawCircle@r,c
  6129  0008FA  0EF8               	movlw	248
  6130  0008FC  6E21               	movwf	drawCircle@color+1,c
  6131  0008FE  0E00               	movlw	0
  6132  000900  6E20               	movwf	drawCircle@color,c
  6133  000902  ECB9  F006         	call	_drawCircle	;wreg free
  6134                           
  6135                           ;Main_Screen.c: 182: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6136  000906  0E00               	movlw	0
  6137  000908  6E1B               	movwf	drawCircle@x0+1,c
  6138  00090A  0E3C               	movlw	60
  6139  00090C  6E1A               	movwf	drawCircle@x0,c
  6140  00090E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6141  000912  6A1D               	clrf	drawCircle@y0+1,c
  6142  000914  0E00               	movlw	0
  6143  000916  6E1F               	movwf	drawCircle@r+1,c
  6144  000918  0E07               	movlw	7
  6145  00091A  6E1E               	movwf	drawCircle@r,c
  6146  00091C  0EFF               	movlw	255
  6147  00091E  6E21               	movwf	drawCircle@color+1,c
  6148  000920  0EE0               	movlw	224
  6149  000922  6E20               	movwf	drawCircle@color,c
  6150  000924  ECB9  F006         	call	_drawCircle	;wreg free
  6151                           
  6152                           ;Main_Screen.c: 183: drawCircle(80, Circle_Y, 7, 0x07E0);
  6153  000928  0E00               	movlw	0
  6154  00092A  6E1B               	movwf	drawCircle@x0+1,c
  6155  00092C  0E50               	movlw	80
  6156  00092E  6E1A               	movwf	drawCircle@x0,c
  6157  000930  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6158  000934  6A1D               	clrf	drawCircle@y0+1,c
  6159  000936  0E00               	movlw	0
  6160  000938  6E1F               	movwf	drawCircle@r+1,c
  6161  00093A  0E07               	movlw	7
  6162  00093C  6E1E               	movwf	drawCircle@r,c
  6163  00093E  0E07               	movlw	7
  6164  000940  6E21               	movwf	drawCircle@color+1,c
  6165  000942  0EE0               	movlw	224
  6166  000944  6E20               	movwf	drawCircle@color,c
  6167  000946  ECB9  F006         	call	_drawCircle	;wreg free
  6168  00094A  D000               	goto	l5231
  6169  00094C                     l5231:
  6170                           
  6171                           ;Main_Screen.c: 184: }
  6172                           ;Main_Screen.c: 186: if (color == 3)
  6173  00094C  0E03               	movlw	3
  6174  00094E  1841               	xorwf	update_LCD_color@color,w,c
  6175  000950  A4D8               	btfss	status,2,c
  6176  000952  D067               	goto	l5235
  6177                           
  6178                           ;Main_Screen.c: 187: {
  6179                           ;Main_Screen.c: 188: fillCircle(40, Circle_Y, 7, 0x0000);
  6180  000954  0E00               	movlw	0
  6181  000956  6E3A               	movwf	fillCircle@x0+1,c
  6182  000958  0E28               	movlw	40
  6183  00095A  6E39               	movwf	fillCircle@x0,c
  6184  00095C  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6185  000960  6A3C               	clrf	fillCircle@y0+1,c
  6186  000962  0E00               	movlw	0
  6187  000964  6E3E               	movwf	fillCircle@r+1,c
  6188  000966  0E07               	movlw	7
  6189  000968  6E3D               	movwf	fillCircle@r,c
  6190  00096A  0E00               	movlw	0
  6191  00096C  6E40               	movwf	fillCircle@color+1,c
  6192  00096E  0E00               	movlw	0
  6193  000970  6E3F               	movwf	fillCircle@color,c
  6194  000972  ECE8  F011         	call	_fillCircle	;wreg free
  6195                           
  6196                           ;Main_Screen.c: 189: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6197  000976  0E00               	movlw	0
  6198  000978  6E3A               	movwf	fillCircle@x0+1,c
  6199  00097A  0E3C               	movlw	60
  6200  00097C  6E39               	movwf	fillCircle@x0,c
  6201  00097E  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6202  000982  6A3C               	clrf	fillCircle@y0+1,c
  6203  000984  0E00               	movlw	0
  6204  000986  6E3E               	movwf	fillCircle@r+1,c
  6205  000988  0E07               	movlw	7
  6206  00098A  6E3D               	movwf	fillCircle@r,c
  6207  00098C  0EFF               	movlw	255
  6208  00098E  6E40               	movwf	fillCircle@color+1,c
  6209  000990  0EE0               	movlw	224
  6210  000992  6E3F               	movwf	fillCircle@color,c
  6211  000994  ECE8  F011         	call	_fillCircle	;wreg free
  6212                           
  6213                           ;Main_Screen.c: 190: fillCircle(80, Circle_Y, 7, 0x0000);
  6214  000998  0E00               	movlw	0
  6215  00099A  6E3A               	movwf	fillCircle@x0+1,c
  6216  00099C  0E50               	movlw	80
  6217  00099E  6E39               	movwf	fillCircle@x0,c
  6218  0009A0  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6219  0009A4  6A3C               	clrf	fillCircle@y0+1,c
  6220  0009A6  0E00               	movlw	0
  6221  0009A8  6E3E               	movwf	fillCircle@r+1,c
  6222  0009AA  0E07               	movlw	7
  6223  0009AC  6E3D               	movwf	fillCircle@r,c
  6224  0009AE  0E00               	movlw	0
  6225  0009B0  6E40               	movwf	fillCircle@color+1,c
  6226  0009B2  0E00               	movlw	0
  6227  0009B4  6E3F               	movwf	fillCircle@color,c
  6228  0009B6  ECE8  F011         	call	_fillCircle	;wreg free
  6229                           
  6230                           ;Main_Screen.c: 191: drawCircle(40, Circle_Y, 7, 0xF800);
  6231  0009BA  0E00               	movlw	0
  6232  0009BC  6E1B               	movwf	drawCircle@x0+1,c
  6233  0009BE  0E28               	movlw	40
  6234  0009C0  6E1A               	movwf	drawCircle@x0,c
  6235  0009C2  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6236  0009C6  6A1D               	clrf	drawCircle@y0+1,c
  6237  0009C8  0E00               	movlw	0
  6238  0009CA  6E1F               	movwf	drawCircle@r+1,c
  6239  0009CC  0E07               	movlw	7
  6240  0009CE  6E1E               	movwf	drawCircle@r,c
  6241  0009D0  0EF8               	movlw	248
  6242  0009D2  6E21               	movwf	drawCircle@color+1,c
  6243  0009D4  0E00               	movlw	0
  6244  0009D6  6E20               	movwf	drawCircle@color,c
  6245  0009D8  ECB9  F006         	call	_drawCircle	;wreg free
  6246                           
  6247                           ;Main_Screen.c: 192: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6248  0009DC  0E00               	movlw	0
  6249  0009DE  6E1B               	movwf	drawCircle@x0+1,c
  6250  0009E0  0E3C               	movlw	60
  6251  0009E2  6E1A               	movwf	drawCircle@x0,c
  6252  0009E4  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6253  0009E8  6A1D               	clrf	drawCircle@y0+1,c
  6254  0009EA  0E00               	movlw	0
  6255  0009EC  6E1F               	movwf	drawCircle@r+1,c
  6256  0009EE  0E07               	movlw	7
  6257  0009F0  6E1E               	movwf	drawCircle@r,c
  6258  0009F2  0EFF               	movlw	255
  6259  0009F4  6E21               	movwf	drawCircle@color+1,c
  6260  0009F6  0EE0               	movlw	224
  6261  0009F8  6E20               	movwf	drawCircle@color,c
  6262  0009FA  ECB9  F006         	call	_drawCircle	;wreg free
  6263                           
  6264                           ;Main_Screen.c: 193: drawCircle(80, Circle_Y, 7, 0x07E0);
  6265  0009FE  0E00               	movlw	0
  6266  000A00  6E1B               	movwf	drawCircle@x0+1,c
  6267  000A02  0E50               	movlw	80
  6268  000A04  6E1A               	movwf	drawCircle@x0,c
  6269  000A06  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6270  000A0A  6A1D               	clrf	drawCircle@y0+1,c
  6271  000A0C  0E00               	movlw	0
  6272  000A0E  6E1F               	movwf	drawCircle@r+1,c
  6273  000A10  0E07               	movlw	7
  6274  000A12  6E1E               	movwf	drawCircle@r,c
  6275  000A14  0E07               	movlw	7
  6276  000A16  6E21               	movwf	drawCircle@color+1,c
  6277  000A18  0EE0               	movlw	224
  6278  000A1A  6E20               	movwf	drawCircle@color,c
  6279  000A1C  ECB9  F006         	call	_drawCircle	;wreg free
  6280  000A20  D000               	goto	l5235
  6281  000A22                     l5235:
  6282                           
  6283                           ;Main_Screen.c: 194: }
  6284                           ;Main_Screen.c: 196: if (color == 2)
  6285  000A22  0E02               	movlw	2
  6286  000A24  1841               	xorwf	update_LCD_color@color,w,c
  6287  000A26  A4D8               	btfss	status,2,c
  6288  000A28  D067               	goto	l92
  6289                           
  6290                           ;Main_Screen.c: 197: {
  6291                           ;Main_Screen.c: 198: fillCircle(40, Circle_Y, 7, 0x0000);
  6292  000A2A  0E00               	movlw	0
  6293  000A2C  6E3A               	movwf	fillCircle@x0+1,c
  6294  000A2E  0E28               	movlw	40
  6295  000A30  6E39               	movwf	fillCircle@x0,c
  6296  000A32  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6297  000A36  6A3C               	clrf	fillCircle@y0+1,c
  6298  000A38  0E00               	movlw	0
  6299  000A3A  6E3E               	movwf	fillCircle@r+1,c
  6300  000A3C  0E07               	movlw	7
  6301  000A3E  6E3D               	movwf	fillCircle@r,c
  6302  000A40  0E00               	movlw	0
  6303  000A42  6E40               	movwf	fillCircle@color+1,c
  6304  000A44  0E00               	movlw	0
  6305  000A46  6E3F               	movwf	fillCircle@color,c
  6306  000A48  ECE8  F011         	call	_fillCircle	;wreg free
  6307                           
  6308                           ;Main_Screen.c: 199: fillCircle(60, Circle_Y, 7, 0x0000);
  6309  000A4C  0E00               	movlw	0
  6310  000A4E  6E3A               	movwf	fillCircle@x0+1,c
  6311  000A50  0E3C               	movlw	60
  6312  000A52  6E39               	movwf	fillCircle@x0,c
  6313  000A54  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6314  000A58  6A3C               	clrf	fillCircle@y0+1,c
  6315  000A5A  0E00               	movlw	0
  6316  000A5C  6E3E               	movwf	fillCircle@r+1,c
  6317  000A5E  0E07               	movlw	7
  6318  000A60  6E3D               	movwf	fillCircle@r,c
  6319  000A62  0E00               	movlw	0
  6320  000A64  6E40               	movwf	fillCircle@color+1,c
  6321  000A66  0E00               	movlw	0
  6322  000A68  6E3F               	movwf	fillCircle@color,c
  6323  000A6A  ECE8  F011         	call	_fillCircle	;wreg free
  6324                           
  6325                           ;Main_Screen.c: 200: fillCircle(80, Circle_Y, 7, 0x07E0);
  6326  000A6E  0E00               	movlw	0
  6327  000A70  6E3A               	movwf	fillCircle@x0+1,c
  6328  000A72  0E50               	movlw	80
  6329  000A74  6E39               	movwf	fillCircle@x0,c
  6330  000A76  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6331  000A7A  6A3C               	clrf	fillCircle@y0+1,c
  6332  000A7C  0E00               	movlw	0
  6333  000A7E  6E3E               	movwf	fillCircle@r+1,c
  6334  000A80  0E07               	movlw	7
  6335  000A82  6E3D               	movwf	fillCircle@r,c
  6336  000A84  0E07               	movlw	7
  6337  000A86  6E40               	movwf	fillCircle@color+1,c
  6338  000A88  0EE0               	movlw	224
  6339  000A8A  6E3F               	movwf	fillCircle@color,c
  6340  000A8C  ECE8  F011         	call	_fillCircle	;wreg free
  6341                           
  6342                           ;Main_Screen.c: 201: drawCircle(40, Circle_Y, 7, 0xF800);
  6343  000A90  0E00               	movlw	0
  6344  000A92  6E1B               	movwf	drawCircle@x0+1,c
  6345  000A94  0E28               	movlw	40
  6346  000A96  6E1A               	movwf	drawCircle@x0,c
  6347  000A98  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6348  000A9C  6A1D               	clrf	drawCircle@y0+1,c
  6349  000A9E  0E00               	movlw	0
  6350  000AA0  6E1F               	movwf	drawCircle@r+1,c
  6351  000AA2  0E07               	movlw	7
  6352  000AA4  6E1E               	movwf	drawCircle@r,c
  6353  000AA6  0EF8               	movlw	248
  6354  000AA8  6E21               	movwf	drawCircle@color+1,c
  6355  000AAA  0E00               	movlw	0
  6356  000AAC  6E20               	movwf	drawCircle@color,c
  6357  000AAE  ECB9  F006         	call	_drawCircle	;wreg free
  6358                           
  6359                           ;Main_Screen.c: 202: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6360  000AB2  0E00               	movlw	0
  6361  000AB4  6E1B               	movwf	drawCircle@x0+1,c
  6362  000AB6  0E3C               	movlw	60
  6363  000AB8  6E1A               	movwf	drawCircle@x0,c
  6364  000ABA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6365  000ABE  6A1D               	clrf	drawCircle@y0+1,c
  6366  000AC0  0E00               	movlw	0
  6367  000AC2  6E1F               	movwf	drawCircle@r+1,c
  6368  000AC4  0E07               	movlw	7
  6369  000AC6  6E1E               	movwf	drawCircle@r,c
  6370  000AC8  0EFF               	movlw	255
  6371  000ACA  6E21               	movwf	drawCircle@color+1,c
  6372  000ACC  0EE0               	movlw	224
  6373  000ACE  6E20               	movwf	drawCircle@color,c
  6374  000AD0  ECB9  F006         	call	_drawCircle	;wreg free
  6375                           
  6376                           ;Main_Screen.c: 203: drawCircle(80, Circle_Y, 7, 0x07E0);
  6377  000AD4  0E00               	movlw	0
  6378  000AD6  6E1B               	movwf	drawCircle@x0+1,c
  6379  000AD8  0E50               	movlw	80
  6380  000ADA  6E1A               	movwf	drawCircle@x0,c
  6381  000ADC  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6382  000AE0  6A1D               	clrf	drawCircle@y0+1,c
  6383  000AE2  0E00               	movlw	0
  6384  000AE4  6E1F               	movwf	drawCircle@r+1,c
  6385  000AE6  0E07               	movlw	7
  6386  000AE8  6E1E               	movwf	drawCircle@r,c
  6387  000AEA  0E07               	movlw	7
  6388  000AEC  6E21               	movwf	drawCircle@color+1,c
  6389  000AEE  0EE0               	movlw	224
  6390  000AF0  6E20               	movwf	drawCircle@color,c
  6391  000AF2  ECB9  F006         	call	_drawCircle	;wreg free
  6392  000AF6  D000               	goto	l92
  6393  000AF8                     l92:
  6394  000AF8  0012               	return		;funcret
  6395  000AFA                     __end_of_update_LCD_color:
  6396                           	opt stack 0
  6397                           tblptru	equ	0xFF8
  6398                           tblptrh	equ	0xFF7
  6399                           tblptrl	equ	0xFF6
  6400                           tablat	equ	0xFF5
  6401                           prodl	equ	0xFF3
  6402                           intcon	equ	0xFF2
  6403                           intcon2	equ	0xFF1
  6404                           intcon3	equ	0xFF0
  6405                           postinc0	equ	0xFEE
  6406                           wreg	equ	0xFE8
  6407                           postdec1	equ	0xFE5
  6408                           fsr1l	equ	0xFE1
  6409                           status	equ	0xFD8
  6410                           
  6411 ;; *************** function _fillCircle *****************
  6412 ;; Defined at:
  6413 ;;		line 565 in file "ST7735_TFT.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  x0              2   56[COMRAM] int 
  6416 ;;  y0              2   58[COMRAM] int 
  6417 ;;  r               2   60[COMRAM] int 
  6418 ;;  color           2   62[COMRAM] unsigned int 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;		None               void
  6423 ;; Registers used:
  6424 ;;		wreg, status,2, status,0, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6430 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;Total ram usage:        8 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    7
  6437 ;; This function calls:
  6438 ;;		_drawFastVLine
  6439 ;;		_fillCircleHelper
  6440 ;; This function is called by:
  6441 ;;		_Initialize_LCD_Screen
  6442 ;;		_update_LCD_color
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text27
  6447  0023D0                     __ptext27:
  6448                           	opt stack 0
  6449  0023D0                     _fillCircle:
  6450                           	opt stack 20
  6451                           
  6452                           ;ST7735_TFT.c: 567: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6453                           
  6454                           ;incstack = 0
  6455  0023D0  503D               	movf	fillCircle@r,w,c
  6456  0023D2  0800               	sublw	0
  6457  0023D4  243B               	addwf	fillCircle@y0,w,c
  6458  0023D6  6E16               	movwf	drawFastVLine@y,c
  6459  0023D8  80D8               	bsf	status,0,c
  6460  0023DA  343D               	rlcf	fillCircle@r,w,c
  6461  0023DC  6E17               	movwf	drawFastVLine@h,c
  6462  0023DE  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  6463  0023E2  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  6464  0023E6  5039               	movf	fillCircle@x0,w,c
  6465  0023E8  ECFA  F00F         	call	_drawFastVLine
  6466                           
  6467                           ;ST7735_TFT.c: 568: fillCircleHelper(x0, y0, r, 3, 0, color);
  6468  0023EC  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  6469  0023F0  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6470  0023F4  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  6471  0023F8  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6472  0023FC  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  6473  002400  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6474  002404  0E00               	movlw	0
  6475  002406  6E28               	movwf	fillCircleHelper@cornername+1,c
  6476  002408  0E03               	movlw	3
  6477  00240A  6E27               	movwf	fillCircleHelper@cornername,c
  6478  00240C  0E00               	movlw	0
  6479  00240E  6E2A               	movwf	fillCircleHelper@delta+1,c
  6480  002410  0E00               	movlw	0
  6481  002412  6E29               	movwf	fillCircleHelper@delta,c
  6482  002414  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  6483  002418  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6484  00241C  EC00  F009         	call	_fillCircleHelper	;wreg free
  6485  002420  0012               	return		;funcret
  6486  002422                     __end_of_fillCircle:
  6487                           	opt stack 0
  6488                           tblptru	equ	0xFF8
  6489                           tblptrh	equ	0xFF7
  6490                           tblptrl	equ	0xFF6
  6491                           tablat	equ	0xFF5
  6492                           prodl	equ	0xFF3
  6493                           intcon	equ	0xFF2
  6494                           intcon2	equ	0xFF1
  6495                           intcon3	equ	0xFF0
  6496                           postinc0	equ	0xFEE
  6497                           wreg	equ	0xFE8
  6498                           postdec1	equ	0xFE5
  6499                           fsr1l	equ	0xFE1
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _fillCircleHelper *****************
  6503 ;; Defined at:
  6504 ;;		line 540 in file "ST7735_TFT.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  x0              2   32[COMRAM] int 
  6507 ;;  y0              2   34[COMRAM] int 
  6508 ;;  r               2   36[COMRAM] int 
  6509 ;;  cornername      2   38[COMRAM] unsigned int 
  6510 ;;  delta           2   40[COMRAM] int 
  6511 ;;  color           2   42[COMRAM] unsigned int 
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;  y               2   54[COMRAM] int 
  6514 ;;  x               2   52[COMRAM] int 
  6515 ;;  f               2   50[COMRAM] int 
  6516 ;;  ddF_y           2   48[COMRAM] int 
  6517 ;;  ddF_x           2   46[COMRAM] int 
  6518 ;; Return value:  Size  Location     Type
  6519 ;;		None               void
  6520 ;; Registers used:
  6521 ;;		wreg, status,2, status,0, cstack
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6527 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;Total ram usage:       24 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    6
  6534 ;; This function calls:
  6535 ;;		_drawFastVLine
  6536 ;; This function is called by:
  6537 ;;		_fillCircle
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text28
  6542  001200                     __ptext28:
  6543                           	opt stack 0
  6544  001200                     _fillCircleHelper:
  6545                           	opt stack 20
  6546                           
  6547                           ;ST7735_TFT.c: 542: signed int f, ddF_x, ddF_y, x, y;
  6548                           ;ST7735_TFT.c: 543: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6549                           
  6550                           ;incstack = 0
  6551  001200  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6552  001204  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6553  001208  1E2D               	comf	??_fillCircleHelper,f,c
  6554  00120A  1E2E               	comf	??_fillCircleHelper+1,f,c
  6555  00120C  4A2D               	infsnz	??_fillCircleHelper,f,c
  6556  00120E  2A2E               	incf	??_fillCircleHelper+1,f,c
  6557  001210  0E01               	movlw	1
  6558  001212  242D               	addwf	??_fillCircleHelper,w,c
  6559  001214  6E33               	movwf	fillCircleHelper@f,c
  6560  001216  0E00               	movlw	0
  6561  001218  202E               	addwfc	??_fillCircleHelper+1,w,c
  6562  00121A  6E34               	movwf	fillCircleHelper@f+1,c
  6563  00121C  0E00               	movlw	0
  6564  00121E  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  6565  001220  0E01               	movlw	1
  6566  001222  6E2F               	movwf	fillCircleHelper@ddF_x,c
  6567  001224  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6568  001228  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6569  00122C  90D8               	bcf	status,0,c
  6570  00122E  362D               	rlcf	??_fillCircleHelper,f,c
  6571  001230  362E               	rlcf	??_fillCircleHelper+1,f,c
  6572  001232  1E2D               	comf	??_fillCircleHelper,f,c
  6573  001234  1E2E               	comf	??_fillCircleHelper+1,f,c
  6574  001236  4A2D               	infsnz	??_fillCircleHelper,f,c
  6575  001238  2A2E               	incf	??_fillCircleHelper+1,f,c
  6576  00123A  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  6577  00123E  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  6578  001242  0E00               	movlw	0
  6579  001244  6E36               	movwf	fillCircleHelper@x+1,c
  6580  001246  0E00               	movlw	0
  6581  001248  6E35               	movwf	fillCircleHelper@x,c
  6582  00124A  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  6583  00124E  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  6584                           
  6585                           ;ST7735_TFT.c: 544: while (x<y) {
  6586  001252  D067               	goto	l4873
  6587  001254                     l4853:
  6588                           
  6589                           ;ST7735_TFT.c: 545: if (f >= 0) {
  6590  001254  BE34               	btfsc	fillCircleHelper@f+1,7,c
  6591  001256  D00B               	goto	l310
  6592                           
  6593                           ;ST7735_TFT.c: 546: y--;
  6594  001258  0637               	decf	fillCircleHelper@y,f,c
  6595  00125A  A0D8               	btfss	status,0,c
  6596  00125C  0638               	decf	fillCircleHelper@y+1,f,c
  6597                           
  6598                           ;ST7735_TFT.c: 547: ddF_y += 2;
  6599  00125E  0E02               	movlw	2
  6600  001260  2631               	addwf	fillCircleHelper@ddF_y,f,c
  6601  001262  0E00               	movlw	0
  6602  001264  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  6603                           
  6604                           ;ST7735_TFT.c: 548: f += ddF_y;
  6605  001266  5031               	movf	fillCircleHelper@ddF_y,w,c
  6606  001268  2633               	addwf	fillCircleHelper@f,f,c
  6607  00126A  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  6608  00126C  2234               	addwfc	fillCircleHelper@f+1,f,c
  6609  00126E                     l310:
  6610                           
  6611                           ;ST7735_TFT.c: 549: }
  6612                           ;ST7735_TFT.c: 550: x++;
  6613  00126E  4A35               	infsnz	fillCircleHelper@x,f,c
  6614  001270  2A36               	incf	fillCircleHelper@x+1,f,c
  6615                           
  6616                           ;ST7735_TFT.c: 551: ddF_x += 2;
  6617  001272  0E02               	movlw	2
  6618  001274  262F               	addwf	fillCircleHelper@ddF_x,f,c
  6619  001276  0E00               	movlw	0
  6620  001278  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  6621                           
  6622                           ;ST7735_TFT.c: 552: f += ddF_x;
  6623  00127A  502F               	movf	fillCircleHelper@ddF_x,w,c
  6624  00127C  2633               	addwf	fillCircleHelper@f,f,c
  6625  00127E  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  6626  001280  2234               	addwfc	fillCircleHelper@f+1,f,c
  6627                           
  6628                           ;ST7735_TFT.c: 554: if (cornername & 0x1) {
  6629  001282  A027               	btfss	fillCircleHelper@cornername,0,c
  6630  001284  D025               	goto	l4869
  6631                           
  6632                           ;ST7735_TFT.c: 555: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  6633  001286  5037               	movf	fillCircleHelper@y,w,c
  6634  001288  0800               	sublw	0
  6635  00128A  2423               	addwf	fillCircleHelper@y0,w,c
  6636  00128C  6E16               	movwf	drawFastVLine@y,c
  6637  00128E  5037               	movf	fillCircleHelper@y,w,c
  6638  001290  2437               	addwf	fillCircleHelper@y,w,c
  6639  001292  2429               	addwf	fillCircleHelper@delta,w,c
  6640  001294  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6641  001296  282D               	incf	??_fillCircleHelper,w,c
  6642  001298  6E17               	movwf	drawFastVLine@h,c
  6643  00129A  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6644  00129E  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6645  0012A2  5021               	movf	fillCircleHelper@x0,w,c
  6646  0012A4  2435               	addwf	fillCircleHelper@x,w,c
  6647  0012A6  ECFA  F00F         	call	_drawFastVLine
  6648                           
  6649                           ;ST7735_TFT.c: 556: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  6650  0012AA  5035               	movf	fillCircleHelper@x,w,c
  6651  0012AC  0800               	sublw	0
  6652  0012AE  2423               	addwf	fillCircleHelper@y0,w,c
  6653  0012B0  6E16               	movwf	drawFastVLine@y,c
  6654  0012B2  5035               	movf	fillCircleHelper@x,w,c
  6655  0012B4  2435               	addwf	fillCircleHelper@x,w,c
  6656  0012B6  2429               	addwf	fillCircleHelper@delta,w,c
  6657  0012B8  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6658  0012BA  282D               	incf	??_fillCircleHelper,w,c
  6659  0012BC  6E17               	movwf	drawFastVLine@h,c
  6660  0012BE  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6661  0012C2  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6662  0012C6  5021               	movf	fillCircleHelper@x0,w,c
  6663  0012C8  2437               	addwf	fillCircleHelper@y,w,c
  6664  0012CA  ECFA  F00F         	call	_drawFastVLine
  6665  0012CE  D000               	goto	l4869
  6666  0012D0                     l4869:
  6667                           
  6668                           ;ST7735_TFT.c: 557: }
  6669                           ;ST7735_TFT.c: 558: if (cornername & 0x2) {
  6670  0012D0  A227               	btfss	fillCircleHelper@cornername,1,c
  6671  0012D2  D027               	goto	l4873
  6672                           
  6673                           ;ST7735_TFT.c: 559: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  6674  0012D4  5037               	movf	fillCircleHelper@y,w,c
  6675  0012D6  0800               	sublw	0
  6676  0012D8  2423               	addwf	fillCircleHelper@y0,w,c
  6677  0012DA  6E16               	movwf	drawFastVLine@y,c
  6678  0012DC  5037               	movf	fillCircleHelper@y,w,c
  6679  0012DE  2437               	addwf	fillCircleHelper@y,w,c
  6680  0012E0  2429               	addwf	fillCircleHelper@delta,w,c
  6681  0012E2  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6682  0012E4  282D               	incf	??_fillCircleHelper,w,c
  6683  0012E6  6E17               	movwf	drawFastVLine@h,c
  6684  0012E8  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6685  0012EC  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6686  0012F0  5035               	movf	fillCircleHelper@x,w,c
  6687  0012F2  0800               	sublw	0
  6688  0012F4  2421               	addwf	fillCircleHelper@x0,w,c
  6689  0012F6  ECFA  F00F         	call	_drawFastVLine
  6690                           
  6691                           ;ST7735_TFT.c: 560: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  6692  0012FA  5035               	movf	fillCircleHelper@x,w,c
  6693  0012FC  0800               	sublw	0
  6694  0012FE  2423               	addwf	fillCircleHelper@y0,w,c
  6695  001300  6E16               	movwf	drawFastVLine@y,c
  6696  001302  5035               	movf	fillCircleHelper@x,w,c
  6697  001304  2435               	addwf	fillCircleHelper@x,w,c
  6698  001306  2429               	addwf	fillCircleHelper@delta,w,c
  6699  001308  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6700  00130A  282D               	incf	??_fillCircleHelper,w,c
  6701  00130C  6E17               	movwf	drawFastVLine@h,c
  6702  00130E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6703  001312  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6704  001316  5037               	movf	fillCircleHelper@y,w,c
  6705  001318  0800               	sublw	0
  6706  00131A  2421               	addwf	fillCircleHelper@x0,w,c
  6707  00131C  ECFA  F00F         	call	_drawFastVLine
  6708  001320  D000               	goto	l4873
  6709  001322                     l4873:
  6710  001322  5037               	movf	fillCircleHelper@y,w,c
  6711  001324  5C35               	subwf	fillCircleHelper@x,w,c
  6712  001326  5036               	movf	fillCircleHelper@x+1,w,c
  6713  001328  0A80               	xorlw	128
  6714  00132A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6715  00132C  5038               	movf	fillCircleHelper@y+1,w,c
  6716  00132E  0A80               	xorlw	128
  6717  001330  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  6718  001332  A0D8               	btfss	status,0,c
  6719  001334  D78F               	goto	l4853
  6720  001336  0012               	return		;funcret
  6721  001338                     __end_of_fillCircleHelper:
  6722                           	opt stack 0
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           intcon2	equ	0xFF1
  6730                           intcon3	equ	0xFF0
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           postdec1	equ	0xFE5
  6734                           fsr1l	equ	0xFE1
  6735                           status	equ	0xFD8
  6736                           
  6737 ;; *************** function _drawCircle *****************
  6738 ;; Defined at:
  6739 ;;		line 479 in file "ST7735_TFT.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;  x0              2   25[COMRAM] int 
  6742 ;;  y0              2   27[COMRAM] int 
  6743 ;;  r               2   29[COMRAM] int 
  6744 ;;  color           2   31[COMRAM] unsigned int 
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;  y               2   43[COMRAM] int 
  6747 ;;  x               2   41[COMRAM] int 
  6748 ;;  f               2   39[COMRAM] int 
  6749 ;;  ddF_y           2   37[COMRAM] int 
  6750 ;;  ddF_x           2   35[COMRAM] int 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;		None               void
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6760 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;Total ram usage:       20 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    6
  6767 ;; This function calls:
  6768 ;;		_drawPixel
  6769 ;; This function is called by:
  6770 ;;		_Initialize_LCD_Screen
  6771 ;;		_update_LCD_color
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text29
  6776  000D72                     __ptext29:
  6777                           	opt stack 0
  6778  000D72                     _drawCircle:
  6779                           	opt stack 21
  6780                           
  6781                           ;ST7735_TFT.c: 481: signed int f, ddF_x, ddF_y, x, y;
  6782                           ;ST7735_TFT.c: 482: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6783                           
  6784                           ;incstack = 0
  6785  000D72  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6786  000D76  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6787  000D7A  1E22               	comf	??_drawCircle,f,c
  6788  000D7C  1E23               	comf	??_drawCircle+1,f,c
  6789  000D7E  4A22               	infsnz	??_drawCircle,f,c
  6790  000D80  2A23               	incf	??_drawCircle+1,f,c
  6791  000D82  0E01               	movlw	1
  6792  000D84  2422               	addwf	??_drawCircle,w,c
  6793  000D86  6E28               	movwf	drawCircle@f,c
  6794  000D88  0E00               	movlw	0
  6795  000D8A  2023               	addwfc	??_drawCircle+1,w,c
  6796  000D8C  6E29               	movwf	drawCircle@f+1,c
  6797  000D8E  0E00               	movlw	0
  6798  000D90  6E25               	movwf	drawCircle@ddF_x+1,c
  6799  000D92  0E01               	movlw	1
  6800  000D94  6E24               	movwf	drawCircle@ddF_x,c
  6801  000D96  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6802  000D9A  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6803  000D9E  90D8               	bcf	status,0,c
  6804  000DA0  3622               	rlcf	??_drawCircle,f,c
  6805  000DA2  3623               	rlcf	??_drawCircle+1,f,c
  6806  000DA4  1E22               	comf	??_drawCircle,f,c
  6807  000DA6  1E23               	comf	??_drawCircle+1,f,c
  6808  000DA8  4A22               	infsnz	??_drawCircle,f,c
  6809  000DAA  2A23               	incf	??_drawCircle+1,f,c
  6810  000DAC  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  6811  000DB0  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6812  000DB4  0E00               	movlw	0
  6813  000DB6  6E2B               	movwf	drawCircle@x+1,c
  6814  000DB8  0E00               	movlw	0
  6815  000DBA  6E2A               	movwf	drawCircle@x,c
  6816  000DBC  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  6817  000DC0  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  6818                           
  6819                           ;ST7735_TFT.c: 483: drawPixel(x0 , y0 + r, color);
  6820  000DC4  501C               	movf	drawCircle@y0,w,c
  6821  000DC6  241E               	addwf	drawCircle@r,w,c
  6822  000DC8  6E16               	movwf	drawPixel@y,c
  6823  000DCA  C020  F017         	movff	drawCircle@color,drawPixel@color
  6824  000DCE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6825  000DD2  501A               	movf	drawCircle@x0,w,c
  6826  000DD4  ECAD  F013         	call	_drawPixel
  6827                           
  6828                           ;ST7735_TFT.c: 484: drawPixel(x0 , y0 - r, color);
  6829  000DD8  501E               	movf	drawCircle@r,w,c
  6830  000DDA  0800               	sublw	0
  6831  000DDC  241C               	addwf	drawCircle@y0,w,c
  6832  000DDE  6E16               	movwf	drawPixel@y,c
  6833  000DE0  C020  F017         	movff	drawCircle@color,drawPixel@color
  6834  000DE4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6835  000DE8  501A               	movf	drawCircle@x0,w,c
  6836  000DEA  ECAD  F013         	call	_drawPixel
  6837                           
  6838                           ;ST7735_TFT.c: 485: drawPixel(x0+r, y0 , color);
  6839  000DEE  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6840  000DF2  C020  F017         	movff	drawCircle@color,drawPixel@color
  6841  000DF6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6842  000DFA  501A               	movf	drawCircle@x0,w,c
  6843  000DFC  241E               	addwf	drawCircle@r,w,c
  6844  000DFE  ECAD  F013         	call	_drawPixel
  6845                           
  6846                           ;ST7735_TFT.c: 486: drawPixel(x0-r, y0 , color);
  6847  000E02  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6848  000E06  C020  F017         	movff	drawCircle@color,drawPixel@color
  6849  000E0A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6850  000E0E  501E               	movf	drawCircle@r,w,c
  6851  000E10  0800               	sublw	0
  6852  000E12  241A               	addwf	drawCircle@x0,w,c
  6853  000E14  ECAD  F013         	call	_drawPixel
  6854                           
  6855                           ;ST7735_TFT.c: 487: while (x < y) {
  6856  000E18  D078               	goto	l5069
  6857  000E1A                     l5041:
  6858                           
  6859                           ;ST7735_TFT.c: 488: if (f >= 0) {
  6860  000E1A  BE29               	btfsc	drawCircle@f+1,7,c
  6861  000E1C  D00B               	goto	l292
  6862                           
  6863                           ;ST7735_TFT.c: 489: y--;
  6864  000E1E  062C               	decf	drawCircle@y,f,c
  6865  000E20  A0D8               	btfss	status,0,c
  6866  000E22  062D               	decf	drawCircle@y+1,f,c
  6867                           
  6868                           ;ST7735_TFT.c: 490: ddF_y += 2;
  6869  000E24  0E02               	movlw	2
  6870  000E26  2626               	addwf	drawCircle@ddF_y,f,c
  6871  000E28  0E00               	movlw	0
  6872  000E2A  2227               	addwfc	drawCircle@ddF_y+1,f,c
  6873                           
  6874                           ;ST7735_TFT.c: 491: f += ddF_y;
  6875  000E2C  5026               	movf	drawCircle@ddF_y,w,c
  6876  000E2E  2628               	addwf	drawCircle@f,f,c
  6877  000E30  5027               	movf	drawCircle@ddF_y+1,w,c
  6878  000E32  2229               	addwfc	drawCircle@f+1,f,c
  6879  000E34                     l292:
  6880                           
  6881                           ;ST7735_TFT.c: 492: }
  6882                           ;ST7735_TFT.c: 493: x++;
  6883  000E34  4A2A               	infsnz	drawCircle@x,f,c
  6884  000E36  2A2B               	incf	drawCircle@x+1,f,c
  6885                           
  6886                           ;ST7735_TFT.c: 494: ddF_x += 2;
  6887  000E38  0E02               	movlw	2
  6888  000E3A  2624               	addwf	drawCircle@ddF_x,f,c
  6889  000E3C  0E00               	movlw	0
  6890  000E3E  2225               	addwfc	drawCircle@ddF_x+1,f,c
  6891                           
  6892                           ;ST7735_TFT.c: 495: f += ddF_x;
  6893  000E40  5024               	movf	drawCircle@ddF_x,w,c
  6894  000E42  2628               	addwf	drawCircle@f,f,c
  6895  000E44  5025               	movf	drawCircle@ddF_x+1,w,c
  6896  000E46  2229               	addwfc	drawCircle@f+1,f,c
  6897                           
  6898                           ;ST7735_TFT.c: 496: drawPixel(x0 + x, y0 + y, color);
  6899  000E48  501C               	movf	drawCircle@y0,w,c
  6900  000E4A  242C               	addwf	drawCircle@y,w,c
  6901  000E4C  6E16               	movwf	drawPixel@y,c
  6902  000E4E  C020  F017         	movff	drawCircle@color,drawPixel@color
  6903  000E52  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6904  000E56  501A               	movf	drawCircle@x0,w,c
  6905  000E58  242A               	addwf	drawCircle@x,w,c
  6906  000E5A  ECAD  F013         	call	_drawPixel
  6907                           
  6908                           ;ST7735_TFT.c: 497: drawPixel(x0 - x, y0 + y, color);
  6909  000E5E  501C               	movf	drawCircle@y0,w,c
  6910  000E60  242C               	addwf	drawCircle@y,w,c
  6911  000E62  6E16               	movwf	drawPixel@y,c
  6912  000E64  C020  F017         	movff	drawCircle@color,drawPixel@color
  6913  000E68  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6914  000E6C  502A               	movf	drawCircle@x,w,c
  6915  000E6E  0800               	sublw	0
  6916  000E70  241A               	addwf	drawCircle@x0,w,c
  6917  000E72  ECAD  F013         	call	_drawPixel
  6918                           
  6919                           ;ST7735_TFT.c: 498: drawPixel(x0 + x, y0 - y, color);
  6920  000E76  502C               	movf	drawCircle@y,w,c
  6921  000E78  0800               	sublw	0
  6922  000E7A  241C               	addwf	drawCircle@y0,w,c
  6923  000E7C  6E16               	movwf	drawPixel@y,c
  6924  000E7E  C020  F017         	movff	drawCircle@color,drawPixel@color
  6925  000E82  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6926  000E86  501A               	movf	drawCircle@x0,w,c
  6927  000E88  242A               	addwf	drawCircle@x,w,c
  6928  000E8A  ECAD  F013         	call	_drawPixel
  6929                           
  6930                           ;ST7735_TFT.c: 499: drawPixel(x0 - x, y0 - y, color);
  6931  000E8E  502C               	movf	drawCircle@y,w,c
  6932  000E90  0800               	sublw	0
  6933  000E92  241C               	addwf	drawCircle@y0,w,c
  6934  000E94  6E16               	movwf	drawPixel@y,c
  6935  000E96  C020  F017         	movff	drawCircle@color,drawPixel@color
  6936  000E9A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6937  000E9E  502A               	movf	drawCircle@x,w,c
  6938  000EA0  0800               	sublw	0
  6939  000EA2  241A               	addwf	drawCircle@x0,w,c
  6940  000EA4  ECAD  F013         	call	_drawPixel
  6941                           
  6942                           ;ST7735_TFT.c: 500: drawPixel(x0 + y, y0 + x, color);
  6943  000EA8  501C               	movf	drawCircle@y0,w,c
  6944  000EAA  242A               	addwf	drawCircle@x,w,c
  6945  000EAC  6E16               	movwf	drawPixel@y,c
  6946  000EAE  C020  F017         	movff	drawCircle@color,drawPixel@color
  6947  000EB2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6948  000EB6  501A               	movf	drawCircle@x0,w,c
  6949  000EB8  242C               	addwf	drawCircle@y,w,c
  6950  000EBA  ECAD  F013         	call	_drawPixel
  6951                           
  6952                           ;ST7735_TFT.c: 501: drawPixel(x0 - y, y0 + x, color);
  6953  000EBE  501C               	movf	drawCircle@y0,w,c
  6954  000EC0  242A               	addwf	drawCircle@x,w,c
  6955  000EC2  6E16               	movwf	drawPixel@y,c
  6956  000EC4  C020  F017         	movff	drawCircle@color,drawPixel@color
  6957  000EC8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6958  000ECC  502C               	movf	drawCircle@y,w,c
  6959  000ECE  0800               	sublw	0
  6960  000ED0  241A               	addwf	drawCircle@x0,w,c
  6961  000ED2  ECAD  F013         	call	_drawPixel
  6962                           
  6963                           ;ST7735_TFT.c: 502: drawPixel(x0 + y, y0 - x, color);
  6964  000ED6  502A               	movf	drawCircle@x,w,c
  6965  000ED8  0800               	sublw	0
  6966  000EDA  241C               	addwf	drawCircle@y0,w,c
  6967  000EDC  6E16               	movwf	drawPixel@y,c
  6968  000EDE  C020  F017         	movff	drawCircle@color,drawPixel@color
  6969  000EE2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6970  000EE6  501A               	movf	drawCircle@x0,w,c
  6971  000EE8  242C               	addwf	drawCircle@y,w,c
  6972  000EEA  ECAD  F013         	call	_drawPixel
  6973                           
  6974                           ;ST7735_TFT.c: 503: drawPixel(x0 - y, y0 - x, color);
  6975  000EEE  502A               	movf	drawCircle@x,w,c
  6976  000EF0  0800               	sublw	0
  6977  000EF2  241C               	addwf	drawCircle@y0,w,c
  6978  000EF4  6E16               	movwf	drawPixel@y,c
  6979  000EF6  C020  F017         	movff	drawCircle@color,drawPixel@color
  6980  000EFA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6981  000EFE  502C               	movf	drawCircle@y,w,c
  6982  000F00  0800               	sublw	0
  6983  000F02  241A               	addwf	drawCircle@x0,w,c
  6984  000F04  ECAD  F013         	call	_drawPixel
  6985  000F08  D000               	goto	l5069
  6986  000F0A                     l5069:
  6987  000F0A  502C               	movf	drawCircle@y,w,c
  6988  000F0C  5C2A               	subwf	drawCircle@x,w,c
  6989  000F0E  502B               	movf	drawCircle@x+1,w,c
  6990  000F10  0A80               	xorlw	128
  6991  000F12  6E22               	movwf	??_drawCircle& (0+255),c
  6992  000F14  502D               	movf	drawCircle@y+1,w,c
  6993  000F16  0A80               	xorlw	128
  6994  000F18  5822               	subwfb	??_drawCircle& (0+255),w,c
  6995  000F1A  A0D8               	btfss	status,0,c
  6996  000F1C  D77E               	goto	l5041
  6997  000F1E  0012               	return		;funcret
  6998  000F20                     __end_of_drawCircle:
  6999                           	opt stack 0
  7000                           tblptru	equ	0xFF8
  7001                           tblptrh	equ	0xFF7
  7002                           tblptrl	equ	0xFF6
  7003                           tablat	equ	0xFF5
  7004                           prodl	equ	0xFF3
  7005                           intcon	equ	0xFF2
  7006                           intcon2	equ	0xFF1
  7007                           intcon3	equ	0xFF0
  7008                           postinc0	equ	0xFEE
  7009                           wreg	equ	0xFE8
  7010                           postdec1	equ	0xFE5
  7011                           fsr1l	equ	0xFE1
  7012                           status	equ	0xFD8
  7013                           
  7014 ;; *************** function _PED_Control *****************
  7015 ;; Defined at:
  7016 ;;		line 190 in file "lab9.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;  direction       1    wreg     unsigned char 
  7019 ;;  num_sec         1   66[COMRAM] unsigned char 
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;  direction       1   16[BANK0 ] unsigned char 
  7022 ;;  j               2   14[BANK0 ] int 
  7023 ;;  i               2   12[BANK0 ] int 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;		None               void
  7026 ;; Registers used:
  7027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7033 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;Total ram usage:        6 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:   11
  7040 ;; This function calls:
  7041 ;;		_Wait_One_Second_With_Beep
  7042 ;;		_update_LCD_PED_Count
  7043 ;; This function is called by:
  7044 ;;		_Day_Mode
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text30
  7049  0019E0                     __ptext30:
  7050                           	opt stack 0
  7051  0019E0                     _PED_Control:
  7052                           	opt stack 18
  7053                           
  7054                           ;incstack = 0
  7055                           ;PED_Control@direction stored from wreg
  7056  0019E0  0100               	movlb	0	; () banked
  7057  0019E2  6FDC               	movwf	PED_Control@direction& (0+255),b
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;lab9.c: 193: if (direction == 0)
  7061  0019E4  0100               	movlb	0	; () banked
  7062  0019E6  51DC               	movf	PED_Control@direction& (0+255),w,b
  7063  0019E8  0100               	movlb	0	; () banked
  7064  0019EA  A4D8               	btfss	status,2,c
  7065  0019EC  D031               	goto	l5533
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;lab9.c: 194: {
  7069                           ;lab9.c: 197: update_LCD_PED_Count(direction, 0);
  7070  0019EE  0E00               	movlw	0
  7071  0019F0  6E41               	movwf	update_LCD_PED_Count@count,c
  7072  0019F2  0100               	movlb	0	; () banked
  7073  0019F4  51DC               	movf	PED_Control@direction& (0+255),w,b
  7074  0019F6  EC5C  F00D         	call	_update_LCD_PED_Count
  7075                           
  7076                           ;lab9.c: 198: for (int i=num_sec-1; i>0; i--)
  7077  0019FA  0EFF               	movlw	255
  7078  0019FC  2443               	addwf	PED_Control@num_sec,w,c
  7079  0019FE  0100               	movlb	0	; () banked
  7080  001A00  6FD8               	movwf	PED_Control@i& (0+255),b
  7081  001A02  0100               	movlb	0	; () banked
  7082  001A04  6BD9               	clrf	(PED_Control@i+1)& (0+255),b
  7083  001A06  0EFF               	movlw	255
  7084  001A08  23D9               	addwfc	(PED_Control@i+1)& (0+255),f,b
  7085  001A0A                     l5519:
  7086                           
  7087                           ; BSR set to: 0
  7088  001A0A  0100               	movlb	0	; () banked
  7089  001A0C  BFD9               	btfsc	(PED_Control@i+1)& (0+255),7,b
  7090  001A0E  D017               	goto	l5529
  7091  001A10  0100               	movlb	0	; () banked
  7092  001A12  51D9               	movf	(PED_Control@i+1)& (0+255),w,b
  7093  001A14  E106               	bnz	l5523
  7094  001A16  0100               	movlb	0	; () banked
  7095  001A18  05D8               	decf	PED_Control@i& (0+255),w,b
  7096  001A1A  A0D8               	btfss	status,0,c
  7097  001A1C  D010               	goto	l5529
  7098  001A1E  D001               	goto	l5523
  7099                           
  7100                           ; BSR set to: 0
  7101  001A20  D00E               	goto	l5529
  7102  001A22                     l5523:
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;lab9.c: 199: {
  7106                           ;lab9.c: 202: update_LCD_PED_Count(direction, i);
  7107  001A22  C0D8  F041         	movff	PED_Control@i,update_LCD_PED_Count@count
  7108  001A26  0100               	movlb	0	; () banked
  7109  001A28  51DC               	movf	PED_Control@direction& (0+255),w,b
  7110  001A2A  EC5C  F00D         	call	_update_LCD_PED_Count
  7111                           
  7112                           ;lab9.c: 203: Wait_One_Second_With_Beep();
  7113  001A2E  EC16  F014         	call	_Wait_One_Second_With_Beep	;wreg free
  7114  001A32  0100               	movlb	0	; () banked
  7115  001A34  07D8               	decf	PED_Control@i& (0+255),f,b
  7116  001A36  A0D8               	btfss	status,0,c
  7117  001A38  07D9               	decf	(PED_Control@i+1)& (0+255),f,b
  7118  001A3A  D7E7               	goto	l5519
  7119                           
  7120                           ; BSR set to: 0
  7121  001A3C  D7F2               	goto	l5523
  7122  001A3E                     l5529:
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;lab9.c: 204: }
  7126                           ;lab9.c: 205: update_LCD_PED_Count(direction, 0);
  7127  001A3E  0E00               	movlw	0
  7128  001A40  6E41               	movwf	update_LCD_PED_Count@count,c
  7129  001A42  0100               	movlb	0	; () banked
  7130  001A44  51DC               	movf	PED_Control@direction& (0+255),w,b
  7131  001A46  EC5C  F00D         	call	_update_LCD_PED_Count
  7132                           
  7133                           ;lab9.c: 206: NS_PED_SW = 0;
  7134  001A4A  0E00               	movlw	0
  7135  001A4C  6E52               	movwf	_NS_PED_SW,c
  7136                           
  7137                           ;lab9.c: 208: }
  7138  001A4E  D031               	goto	l5551
  7139  001A50                     l5533:
  7140                           
  7141                           ;lab9.c: 209: else
  7142                           ;lab9.c: 210: {
  7143                           ;lab9.c: 213: update_LCD_PED_Count(direction, 0);
  7144  001A50  0E00               	movlw	0
  7145  001A52  6E41               	movwf	update_LCD_PED_Count@count,c
  7146  001A54  0100               	movlb	0	; () banked
  7147  001A56  51DC               	movf	PED_Control@direction& (0+255),w,b
  7148  001A58  EC5C  F00D         	call	_update_LCD_PED_Count
  7149                           
  7150                           ;lab9.c: 214: for (int j=num_sec-1; j>0; j--)
  7151  001A5C  0EFF               	movlw	255
  7152  001A5E  2443               	addwf	PED_Control@num_sec,w,c
  7153  001A60  0100               	movlb	0	; () banked
  7154  001A62  6FDA               	movwf	PED_Control@j& (0+255),b
  7155  001A64  0100               	movlb	0	; () banked
  7156  001A66  6BDB               	clrf	(PED_Control@j+1)& (0+255),b
  7157  001A68  0EFF               	movlw	255
  7158  001A6A  23DB               	addwfc	(PED_Control@j+1)& (0+255),f,b
  7159  001A6C                     l5537:
  7160                           
  7161                           ; BSR set to: 0
  7162  001A6C  0100               	movlb	0	; () banked
  7163  001A6E  BFDB               	btfsc	(PED_Control@j+1)& (0+255),7,b
  7164  001A70  D017               	goto	l5547
  7165  001A72  0100               	movlb	0	; () banked
  7166  001A74  51DB               	movf	(PED_Control@j+1)& (0+255),w,b
  7167  001A76  E106               	bnz	l5541
  7168  001A78  0100               	movlb	0	; () banked
  7169  001A7A  05DA               	decf	PED_Control@j& (0+255),w,b
  7170  001A7C  A0D8               	btfss	status,0,c
  7171  001A7E  D010               	goto	l5547
  7172  001A80  D001               	goto	l5541
  7173                           
  7174                           ; BSR set to: 0
  7175  001A82  D00E               	goto	l5547
  7176  001A84                     l5541:
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;lab9.c: 215: {
  7180                           ;lab9.c: 218: update_LCD_PED_Count(direction, j);
  7181  001A84  C0DA  F041         	movff	PED_Control@j,update_LCD_PED_Count@count
  7182  001A88  0100               	movlb	0	; () banked
  7183  001A8A  51DC               	movf	PED_Control@direction& (0+255),w,b
  7184  001A8C  EC5C  F00D         	call	_update_LCD_PED_Count
  7185                           
  7186                           ;lab9.c: 219: Wait_One_Second_With_Beep();
  7187  001A90  EC16  F014         	call	_Wait_One_Second_With_Beep	;wreg free
  7188  001A94  0100               	movlb	0	; () banked
  7189  001A96  07DA               	decf	PED_Control@j& (0+255),f,b
  7190  001A98  A0D8               	btfss	status,0,c
  7191  001A9A  07DB               	decf	(PED_Control@j+1)& (0+255),f,b
  7192  001A9C  D7E7               	goto	l5537
  7193                           
  7194                           ; BSR set to: 0
  7195  001A9E  D7F2               	goto	l5541
  7196  001AA0                     l5547:
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;lab9.c: 220: }
  7200                           ;lab9.c: 221: update_LCD_PED_Count(direction, 0);
  7201  001AA0  0E00               	movlw	0
  7202  001AA2  6E41               	movwf	update_LCD_PED_Count@count,c
  7203  001AA4  0100               	movlb	0	; () banked
  7204  001AA6  51DC               	movf	PED_Control@direction& (0+255),w,b
  7205  001AA8  EC5C  F00D         	call	_update_LCD_PED_Count
  7206                           
  7207                           ;lab9.c: 222: EW_PED_SW = 0;
  7208  001AAC  0E00               	movlw	0
  7209  001AAE  6E4A               	movwf	_EW_PED_SW,c
  7210  001AB0  D000               	goto	l5551
  7211  001AB2                     l5551:
  7212                           
  7213                           ;lab9.c: 223: }
  7214                           ;lab9.c: 225: Wait_One_Second_With_Beep();
  7215  001AB2  EC16  F014         	call	_Wait_One_Second_With_Beep	;wreg free
  7216  001AB6  0012               	return		;funcret
  7217  001AB8                     __end_of_PED_Control:
  7218                           	opt stack 0
  7219                           tblptru	equ	0xFF8
  7220                           tblptrh	equ	0xFF7
  7221                           tblptrl	equ	0xFF6
  7222                           tablat	equ	0xFF5
  7223                           prodl	equ	0xFF3
  7224                           intcon	equ	0xFF2
  7225                           intcon2	equ	0xFF1
  7226                           intcon3	equ	0xFF0
  7227                           postinc0	equ	0xFEE
  7228                           wreg	equ	0xFE8
  7229                           postdec1	equ	0xFE5
  7230                           fsr1l	equ	0xFE1
  7231                           status	equ	0xFD8
  7232                           
  7233 ;; *************** function _update_LCD_PED_Count *****************
  7234 ;; Defined at:
  7235 ;;		line 207 in file "Main_Screen.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;  direction       1    wreg     unsigned char 
  7238 ;;  count           1   64[COMRAM] unsigned char 
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;  direction       1   65[COMRAM] unsigned char 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;		None               void
  7243 ;; Registers used:
  7244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7250 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;Total ram usage:        2 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    9
  7257 ;; This function calls:
  7258 ;;		___awdiv
  7259 ;;		___awmod
  7260 ;;		_drawtext
  7261 ;; This function is called by:
  7262 ;;		_PED_Control
  7263 ;; This function uses a non-reentrant model
  7264 ;;
  7265                           
  7266                           	psect	text31
  7267  001AB8                     __ptext31:
  7268                           	opt stack 0
  7269  001AB8                     _update_LCD_PED_Count:
  7270                           	opt stack 19
  7271                           
  7272                           ;incstack = 0
  7273                           ;update_LCD_PED_Count@direction stored from wreg
  7274  001AB8  6E42               	movwf	update_LCD_PED_Count@direction,c
  7275                           
  7276                           ;Main_Screen.c: 209: switch (direction)
  7277  001ABA  D05B               	goto	l5251
  7278  001ABC                     l5241:
  7279                           
  7280                           ;Main_Screen.c: 213: PED_NS_Count[0] = count/10 + '0';
  7281  001ABC  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7282  001AC0  6A10               	clrf	___awdiv@dividend+1,c
  7283  001AC2  0E00               	movlw	0
  7284  001AC4  6E12               	movwf	___awdiv@divisor+1,c
  7285  001AC6  0E0A               	movlw	10
  7286  001AC8  6E11               	movwf	___awdiv@divisor,c
  7287  001ACA  EC20  F00F         	call	___awdiv	;wreg free
  7288  001ACE  500F               	movf	?___awdiv,w,c
  7289  001AD0  0F30               	addlw	48
  7290  001AD2  0100               	movlb	0	; () banked
  7291  001AD4  6FA7               	movwf	_PED_NS_Count& (0+255),b
  7292                           
  7293                           ;Main_Screen.c: 214: PED_NS_Count[1] = count%10 + '0';
  7294  001AD6  C041  F035         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7295  001ADA  6A36               	clrf	___awmod@dividend+1,c
  7296  001ADC  0E00               	movlw	0
  7297  001ADE  6E38               	movwf	___awmod@divisor+1,c
  7298  001AE0  0E0A               	movlw	10
  7299  001AE2  6E37               	movwf	___awmod@divisor,c
  7300  001AE4  EC81  F010         	call	___awmod	;wreg free
  7301  001AE8  5035               	movf	?___awmod,w,c
  7302  001AEA  0F30               	addlw	48
  7303  001AEC  0100               	movlb	0	; () banked
  7304  001AEE  6FA8               	movwf	(_PED_NS_Count+1)& (0+255),b
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;Main_Screen.c: 215: drawtext(2, 40, PED_NS_Count, 0xFFE0, 0x0000, 2);
  7308  001AF0  0E28               	movlw	40
  7309  001AF2  6E37               	movwf	drawtext@y,c
  7310  001AF4  0EA7               	movlw	low _PED_NS_Count
  7311  001AF6  6E38               	movwf	drawtext@_text,c
  7312  001AF8  0E00               	movlw	high _PED_NS_Count
  7313  001AFA  6E39               	movwf	drawtext@_text+1,c
  7314  001AFC  0EFF               	movlw	255
  7315  001AFE  6E3B               	movwf	drawtext@color+1,c
  7316  001B00  0EE0               	movlw	224
  7317  001B02  6E3A               	movwf	drawtext@color,c
  7318  001B04  0E00               	movlw	0
  7319  001B06  6E3D               	movwf	drawtext@bg+1,c
  7320  001B08  0E00               	movlw	0
  7321  001B0A  6E3C               	movwf	drawtext@bg,c
  7322  001B0C  0E02               	movlw	2
  7323  001B0E  6E3E               	movwf	drawtext@size,c
  7324  001B10  0E02               	movlw	2
  7325  001B12  EC24  F00A         	call	_drawtext
  7326                           
  7327                           ;Main_Screen.c: 216: break;
  7328  001B16  D035               	goto	l99
  7329  001B18                     l5245:
  7330                           
  7331                           ;Main_Screen.c: 219: PED_EW_Count[0] = count/10 + '0';
  7332  001B18  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7333  001B1C  6A10               	clrf	___awdiv@dividend+1,c
  7334  001B1E  0E00               	movlw	0
  7335  001B20  6E12               	movwf	___awdiv@divisor+1,c
  7336  001B22  0E0A               	movlw	10
  7337  001B24  6E11               	movwf	___awdiv@divisor,c
  7338  001B26  EC20  F00F         	call	___awdiv	;wreg free
  7339  001B2A  500F               	movf	?___awdiv,w,c
  7340  001B2C  0F30               	addlw	48
  7341  001B2E  0100               	movlb	0	; () banked
  7342  001B30  6FA4               	movwf	_PED_EW_Count& (0+255),b
  7343                           
  7344                           ;Main_Screen.c: 220: PED_EW_Count[1] = count%10 + '0';
  7345  001B32  C041  F035         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7346  001B36  6A36               	clrf	___awmod@dividend+1,c
  7347  001B38  0E00               	movlw	0
  7348  001B3A  6E38               	movwf	___awmod@divisor+1,c
  7349  001B3C  0E0A               	movlw	10
  7350  001B3E  6E37               	movwf	___awmod@divisor,c
  7351  001B40  EC81  F010         	call	___awmod	;wreg free
  7352  001B44  5035               	movf	?___awmod,w,c
  7353  001B46  0F30               	addlw	48
  7354  001B48  0100               	movlb	0	; () banked
  7355  001B4A  6FA5               	movwf	(_PED_EW_Count+1)& (0+255),b
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;Main_Screen.c: 221: drawtext(2, 100, PED_EW_Count, 0x07FF, 0x0000, 2);
  7359  001B4C  0E64               	movlw	100
  7360  001B4E  6E37               	movwf	drawtext@y,c
  7361  001B50  0EA4               	movlw	low _PED_EW_Count
  7362  001B52  6E38               	movwf	drawtext@_text,c
  7363  001B54  0E00               	movlw	high _PED_EW_Count
  7364  001B56  6E39               	movwf	drawtext@_text+1,c
  7365  001B58  0E07               	movlw	7
  7366  001B5A  6E3B               	movwf	drawtext@color+1,c
  7367  001B5C  683A               	setf	drawtext@color,c
  7368  001B5E  0E00               	movlw	0
  7369  001B60  6E3D               	movwf	drawtext@bg+1,c
  7370  001B62  0E00               	movlw	0
  7371  001B64  6E3C               	movwf	drawtext@bg,c
  7372  001B66  0E02               	movlw	2
  7373  001B68  6E3E               	movwf	drawtext@size,c
  7374  001B6A  0E02               	movlw	2
  7375  001B6C  EC24  F00A         	call	_drawtext
  7376                           
  7377                           ;Main_Screen.c: 224: }
  7378                           
  7379                           ;Main_Screen.c: 222: break;
  7380  001B70  D008               	goto	l99
  7381  001B72                     l5251:
  7382  001B72  5042               	movf	update_LCD_PED_Count@direction,w,c
  7383                           
  7384                           ; Switch size 1, requested type "space"
  7385                           ; Number of cases is 2, Range of values is 0 to 2
  7386                           ; switch strategies available:
  7387                           ; Name         Instructions Cycles
  7388                           ; simple_byte            7     4 (average)
  7389                           ;	Chosen strategy is simple_byte
  7390  001B74  0A00               	xorlw	0	; case 0
  7391  001B76  B4D8               	btfsc	status,2,c
  7392  001B78  D7A1               	goto	l5241
  7393  001B7A  0A02               	xorlw	2	; case 2
  7394  001B7C  B4D8               	btfsc	status,2,c
  7395  001B7E  D7CC               	goto	l5245
  7396  001B80  D000               	goto	l99
  7397  001B82                     l99:
  7398  001B82  0012               	return		;funcret
  7399  001B84                     __end_of_update_LCD_PED_Count:
  7400                           	opt stack 0
  7401                           tblptru	equ	0xFF8
  7402                           tblptrh	equ	0xFF7
  7403                           tblptrl	equ	0xFF6
  7404                           tablat	equ	0xFF5
  7405                           prodl	equ	0xFF3
  7406                           intcon	equ	0xFF2
  7407                           intcon2	equ	0xFF1
  7408                           intcon3	equ	0xFF0
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           postdec1	equ	0xFE5
  7412                           fsr1l	equ	0xFE1
  7413                           status	equ	0xFD8
  7414                           
  7415 ;; *************** function ___awdiv *****************
  7416 ;; Defined at:
  7417 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;  dividend        2   14[COMRAM] int 
  7420 ;;  divisor         2   16[COMRAM] int 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  quotient        2   20[COMRAM] int 
  7423 ;;  sign            1   19[COMRAM] unsigned char 
  7424 ;;  counter         1   18[COMRAM] unsigned char 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  2   14[COMRAM] int 
  7427 ;; Registers used:
  7428 ;;		wreg, status,2, status,0
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7434 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;Total ram usage:        8 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    2
  7441 ;; This function calls:
  7442 ;;		Nothing
  7443 ;; This function is called by:
  7444 ;;		_update_LCD_PED_Count
  7445 ;;		_update_LCD_count
  7446 ;;		_dec_2_bcd
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           	psect	text32
  7451  001E40                     __ptext32:
  7452                           	opt stack 0
  7453  001E40                     ___awdiv:
  7454                           	opt stack 25
  7455                           
  7456                           ;incstack = 0
  7457  001E40  0E00               	movlw	0
  7458  001E42  6E14               	movwf	___awdiv@sign,c
  7459  001E44  AE12               	btfss	___awdiv@divisor+1,7,c
  7460  001E46  D007               	goto	l5185
  7461  001E48  6C11               	negf	___awdiv@divisor,c
  7462  001E4A  1E12               	comf	___awdiv@divisor+1,f,c
  7463  001E4C  B0D8               	btfsc	status,0,c
  7464  001E4E  2A12               	incf	___awdiv@divisor+1,f,c
  7465  001E50  0E01               	movlw	1
  7466  001E52  6E14               	movwf	___awdiv@sign,c
  7467  001E54  D000               	goto	l5185
  7468  001E56                     l5185:
  7469  001E56  AE10               	btfss	___awdiv@dividend+1,7,c
  7470  001E58  D007               	goto	l5191
  7471  001E5A  6C0F               	negf	___awdiv@dividend,c
  7472  001E5C  1E10               	comf	___awdiv@dividend+1,f,c
  7473  001E5E  B0D8               	btfsc	status,0,c
  7474  001E60  2A10               	incf	___awdiv@dividend+1,f,c
  7475  001E62  0E01               	movlw	1
  7476  001E64  1A14               	xorwf	___awdiv@sign,f,c
  7477  001E66  D000               	goto	l5191
  7478  001E68                     l5191:
  7479  001E68  0E00               	movlw	0
  7480  001E6A  6E16               	movwf	___awdiv@quotient+1,c
  7481  001E6C  0E00               	movlw	0
  7482  001E6E  6E15               	movwf	___awdiv@quotient,c
  7483  001E70  5011               	movf	___awdiv@divisor,w,c
  7484  001E72  1012               	iorwf	___awdiv@divisor+1,w,c
  7485  001E74  B4D8               	btfsc	status,2,c
  7486  001E76  D021               	goto	l5213
  7487  001E78  0E01               	movlw	1
  7488  001E7A  6E13               	movwf	___awdiv@counter,c
  7489  001E7C  D005               	goto	l5199
  7490  001E7E                     l5197:
  7491  001E7E  90D8               	bcf	status,0,c
  7492  001E80  3611               	rlcf	___awdiv@divisor,f,c
  7493  001E82  3612               	rlcf	___awdiv@divisor+1,f,c
  7494  001E84  2A13               	incf	___awdiv@counter,f,c
  7495  001E86  D000               	goto	l5199
  7496  001E88                     l5199:
  7497  001E88  BE12               	btfsc	___awdiv@divisor+1,7,c
  7498  001E8A  D002               	goto	l5201
  7499  001E8C  D7F8               	goto	l5197
  7500  001E8E  D000               	goto	l5201
  7501  001E90                     l5201:
  7502  001E90  90D8               	bcf	status,0,c
  7503  001E92  3615               	rlcf	___awdiv@quotient,f,c
  7504  001E94  3616               	rlcf	___awdiv@quotient+1,f,c
  7505  001E96  5011               	movf	___awdiv@divisor,w,c
  7506  001E98  5C0F               	subwf	___awdiv@dividend,w,c
  7507  001E9A  5012               	movf	___awdiv@divisor+1,w,c
  7508  001E9C  5810               	subwfb	___awdiv@dividend+1,w,c
  7509  001E9E  A0D8               	btfss	status,0,c
  7510  001EA0  D006               	goto	l5209
  7511  001EA2  5011               	movf	___awdiv@divisor,w,c
  7512  001EA4  5E0F               	subwf	___awdiv@dividend,f,c
  7513  001EA6  5012               	movf	___awdiv@divisor+1,w,c
  7514  001EA8  5A10               	subwfb	___awdiv@dividend+1,f,c
  7515  001EAA  8015               	bsf	___awdiv@quotient,0,c
  7516  001EAC  D000               	goto	l5209
  7517  001EAE                     l5209:
  7518  001EAE  90D8               	bcf	status,0,c
  7519  001EB0  3212               	rrcf	___awdiv@divisor+1,f,c
  7520  001EB2  3211               	rrcf	___awdiv@divisor,f,c
  7521  001EB4  2E13               	decfsz	___awdiv@counter,f,c
  7522  001EB6  D7EC               	goto	l5201
  7523  001EB8  D000               	goto	l5213
  7524  001EBA                     l5213:
  7525  001EBA  5014               	movf	___awdiv@sign,w,c
  7526  001EBC  B4D8               	btfsc	status,2,c
  7527  001EBE  D005               	goto	l5217
  7528  001EC0  6C15               	negf	___awdiv@quotient,c
  7529  001EC2  1E16               	comf	___awdiv@quotient+1,f,c
  7530  001EC4  B0D8               	btfsc	status,0,c
  7531  001EC6  2A16               	incf	___awdiv@quotient+1,f,c
  7532  001EC8  D000               	goto	l5217
  7533  001ECA                     l5217:
  7534  001ECA  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  7535  001ECE  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  7536  001ED2  D000               	goto	l905
  7537  001ED4                     l905:
  7538  001ED4  0012               	return		;funcret
  7539  001ED6                     __end_of___awdiv:
  7540                           	opt stack 0
  7541                           tblptru	equ	0xFF8
  7542                           tblptrh	equ	0xFF7
  7543                           tblptrl	equ	0xFF6
  7544                           tablat	equ	0xFF5
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           intcon2	equ	0xFF1
  7548                           intcon3	equ	0xFF0
  7549                           postinc0	equ	0xFEE
  7550                           wreg	equ	0xFE8
  7551                           postdec1	equ	0xFE5
  7552                           fsr1l	equ	0xFE1
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function _Wait_One_Second_With_Beep *****************
  7556 ;; Defined at:
  7557 ;;		line 100 in file "utils.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;		None
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;		None
  7562 ;; Return value:  Size  Location     Type
  7563 ;;		None               void
  7564 ;; Registers used:
  7565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;Total ram usage:        0 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:   10
  7578 ;; This function calls:
  7579 ;;		_Activate_Buzzer
  7580 ;;		_Deactivate_Buzzer
  7581 ;;		_Draw_Star
  7582 ;;		_Erase_Star
  7583 ;;		_Wait_Half_Second
  7584 ;;		_update_LCD_misc
  7585 ;; This function is called by:
  7586 ;;		_PED_Control
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text33
  7591  00282C                     __ptext33:
  7592                           	opt stack 0
  7593  00282C                     _Wait_One_Second_With_Beep:
  7594                           	opt stack 18
  7595                           
  7596                           ;utils.c: 102: PORTDbits.RD7 = 1;
  7597                           
  7598                           ;incstack = 0
  7599  00282C  8E83               	bsf	3971,7,c	;volatile
  7600                           
  7601                           ;utils.c: 103: Draw_Star();
  7602  00282E  EC5E  F013         	call	_Draw_Star	;wreg free
  7603                           
  7604                           ;utils.c: 104: Activate_Buzzer();
  7605  002832  EC96  F014         	call	_Activate_Buzzer	;wreg free
  7606                           
  7607                           ;utils.c: 105: Wait_Half_Second();
  7608  002836  EC42  F014         	call	_Wait_Half_Second	;wreg free
  7609                           
  7610                           ;utils.c: 107: PORTDbits.RD7 = 0;
  7611  00283A  9E83               	bcf	3971,7,c	;volatile
  7612                           
  7613                           ;utils.c: 108: Erase_Star();
  7614  00283C  EC41  F013         	call	_Erase_Star	;wreg free
  7615                           
  7616                           ;utils.c: 109: Deactivate_Buzzer();
  7617  002840  ECB6  F014         	call	_Deactivate_Buzzer	;wreg free
  7618                           
  7619                           ;utils.c: 110: Wait_Half_Second();
  7620  002844  EC42  F014         	call	_Wait_Half_Second	;wreg free
  7621                           
  7622                           ;utils.c: 111: update_LCD_misc();
  7623  002848  EC7D  F005         	call	_update_LCD_misc	;wreg free
  7624  00284C  0012               	return		;funcret
  7625  00284E                     __end_of_Wait_One_Second_With_Beep:
  7626                           	opt stack 0
  7627                           tblptru	equ	0xFF8
  7628                           tblptrh	equ	0xFF7
  7629                           tblptrl	equ	0xFF6
  7630                           tablat	equ	0xFF5
  7631                           prodl	equ	0xFF3
  7632                           intcon	equ	0xFF2
  7633                           intcon2	equ	0xFF1
  7634                           intcon3	equ	0xFF0
  7635                           postinc0	equ	0xFEE
  7636                           wreg	equ	0xFE8
  7637                           postdec1	equ	0xFE5
  7638                           fsr1l	equ	0xFE1
  7639                           status	equ	0xFD8
  7640                           
  7641 ;; *************** function _update_LCD_misc *****************
  7642 ;; Defined at:
  7643 ;;		line 258 in file "Main_Screen.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;		None
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  volt            3    9[BANK0 ] float 
  7648 ;;  nStep           2    7[BANK0 ] int 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;		None               void
  7651 ;; Registers used:
  7652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;Total ram usage:        5 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    9
  7665 ;; This function calls:
  7666 ;;		_Read_Volt
  7667 ;;		___awmod
  7668 ;;		___ftge
  7669 ;;		___ftmul
  7670 ;;		___fttol
  7671 ;;		_drawtext
  7672 ;;		_get_full_ADC
  7673 ;; This function is called by:
  7674 ;;		_Wait_One_Second
  7675 ;;		_Wait_One_Second_With_Beep
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text34
  7680  000AFA                     __ptext34:
  7681                           	opt stack 0
  7682  000AFA                     _update_LCD_misc:
  7683                           	opt stack 18
  7684                           
  7685                           ;Main_Screen.c: 260: int nStep = get_full_ADC();
  7686                           
  7687                           ;incstack = 0
  7688  000AFA  EC03  F014         	call	_get_full_ADC	;wreg free
  7689  000AFE  C00F  F0D3         	movff	?_get_full_ADC,update_LCD_misc@nStep
  7690  000B02  C010  F0D4         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  7691                           
  7692                           ;Main_Screen.c: 261: float volt = Read_Volt (0);
  7693  000B06  0E00               	movlw	0
  7694  000B08  ECFA  F010         	call	_Read_Volt
  7695  000B0C  C02A  F0D5         	movff	?_Read_Volt,update_LCD_misc@volt
  7696  000B10  C02B  F0D6         	movff	?_Read_Volt+1,update_LCD_misc@volt+1
  7697  000B14  C02C  F0D7         	movff	?_Read_Volt+2,update_LCD_misc@volt+2
  7698                           
  7699                           ;Main_Screen.c: 262: Light_Sensor = volt < 2.5 ? 1:0;
  7700  000B18  C0D5  F00F         	movff	update_LCD_misc@volt,___ftge@ff1
  7701  000B1C  C0D6  F010         	movff	update_LCD_misc@volt+1,___ftge@ff1+1
  7702  000B20  C0D7  F011         	movff	update_LCD_misc@volt+2,___ftge@ff1+2
  7703  000B24  0E00               	movlw	0
  7704  000B26  6E12               	movwf	___ftge@ff2,c
  7705  000B28  0E20               	movlw	32
  7706  000B2A  6E13               	movwf	___ftge@ff2+1,c
  7707  000B2C  0E40               	movlw	64
  7708  000B2E  6E14               	movwf	___ftge@ff2+2,c
  7709  000B30  EC6B  F00F         	call	___ftge	;wreg free
  7710  000B34  B0D8               	btfsc	status,0,c
  7711  000B36  D002               	goto	u3830
  7712  000B38  0E01               	movlw	1
  7713  000B3A  D001               	goto	u3840
  7714  000B3C                     u3830:
  7715  000B3C  0E00               	movlw	0
  7716  000B3E                     u3840:
  7717  000B3E  6E50               	movwf	_Light_Sensor,c
  7718                           
  7719                           ;Main_Screen.c: 263: Light_Sensor_Voltage_Txt[0] = ((int) volt + '0');
  7720  000B40  C0D5  F026         	movff	update_LCD_misc@volt,___fttol@f1
  7721  000B44  C0D6  F027         	movff	update_LCD_misc@volt+1,___fttol@f1+1
  7722  000B48  C0D7  F028         	movff	update_LCD_misc@volt+2,___fttol@f1+2
  7723  000B4C  EC9E  F00B         	call	___fttol	;wreg free
  7724  000B50  5026               	movf	?___fttol,w,c
  7725  000B52  0F30               	addlw	48
  7726  000B54  0100               	movlb	0	; () banked
  7727  000B56  6F96               	movwf	_Light_Sensor_Voltage_Txt& (0+255),b
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;Main_Screen.c: 264: Light_Sensor_Voltage_Txt[2] = ((((int) (volt*10))%10) + '0');
  7731  000B58  0E00               	movlw	0
  7732  000B5A  6E1A               	movwf	___ftmul@f2,c
  7733  000B5C  0E20               	movlw	32
  7734  000B5E  6E1B               	movwf	___ftmul@f2+1,c
  7735  000B60  0E41               	movlw	65
  7736  000B62  6E1C               	movwf	___ftmul@f2+2,c
  7737  000B64  C0D5  F017         	movff	update_LCD_misc@volt,___ftmul@f1
  7738  000B68  C0D6  F018         	movff	update_LCD_misc@volt+1,___ftmul@f1+1
  7739  000B6C  C0D7  F019         	movff	update_LCD_misc@volt+2,___ftmul@f1+2
  7740  000B70  ECA9  F00A         	call	___ftmul	;wreg free
  7741  000B74  C017  F026         	movff	?___ftmul,___fttol@f1
  7742  000B78  C018  F027         	movff	?___ftmul+1,___fttol@f1+1
  7743  000B7C  C019  F028         	movff	?___ftmul+2,___fttol@f1+2
  7744  000B80  EC9E  F00B         	call	___fttol	;wreg free
  7745  000B84  C026  F035         	movff	?___fttol,___awmod@dividend
  7746  000B88  C027  F036         	movff	?___fttol+1,___awmod@dividend+1
  7747  000B8C  0E00               	movlw	0
  7748  000B8E  6E38               	movwf	___awmod@divisor+1,c
  7749  000B90  0E0A               	movlw	10
  7750  000B92  6E37               	movwf	___awmod@divisor,c
  7751  000B94  EC81  F010         	call	___awmod	;wreg free
  7752  000B98  5035               	movf	?___awmod,w,c
  7753  000B9A  0F30               	addlw	48
  7754  000B9C  0100               	movlb	0	; () banked
  7755  000B9E  6F98               	movwf	(_Light_Sensor_Voltage_Txt+2)& (0+255),b
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;Main_Screen.c: 265: if (Light_Sensor == 0) Light_Sensor_Mode_Txt[1] = 'N'; else Light_S
      +                          ensor_Mode_Txt[1] = 'D';
  7759  000BA0  5050               	movf	_Light_Sensor,w,c
  7760  000BA2  A4D8               	btfss	status,2,c
  7761  000BA4  D002               	goto	l5087
  7762                           
  7763                           ; BSR set to: 0
  7764  000BA6  0E4E               	movlw	78
  7765  000BA8  D001               	goto	L10
  7766  000BAA                     l5087:
  7767                           
  7768                           ; BSR set to: 0
  7769  000BAA  0E44               	movlw	68
  7770  000BAC                     L10:
  7771  000BAC  6E62               	movwf	_Light_Sensor_Mode_Txt+1,c
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;Main_Screen.c: 266: if (MODE == 0) Act_Mode_Txt[0] = 'N'; else Act_Mode_Txt[0] = 'D';
  7775  000BAE  5051               	movf	_MODE,w,c
  7776  000BB0  A4D8               	btfss	status,2,c
  7777  000BB2  D002               	goto	l5091
  7778                           
  7779                           ; BSR set to: 0
  7780  000BB4  0E4E               	movlw	78
  7781  000BB6  D001               	goto	L11
  7782  000BB8                     l5091:
  7783                           
  7784                           ; BSR set to: 0
  7785  000BB8  0E44               	movlw	68
  7786  000BBA                     L11:
  7787  000BBA  6E64               	movwf	_Act_Mode_Txt,c
  7788  000BBC  D000               	goto	l5093
  7789  000BBE                     l5093:
  7790                           
  7791                           ; BSR set to: 0
  7792                           ;Main_Screen.c: 268: SW_EWPED = EW_PED_SW;
  7793  000BBE  C04A  F055         	movff	_EW_PED_SW,_SW_EWPED
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;Main_Screen.c: 269: SW_EWLT = PORTAbits.RA3;
  7797  000BC2  0E00               	movlw	0
  7798  000BC4  B680               	btfsc	3968,3,c	;volatile
  7799  000BC6  0E01               	movlw	1
  7800  000BC8  6E54               	movwf	_SW_EWLT,c
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;Main_Screen.c: 270: SW_NSPED = NS_PED_SW;
  7804  000BCA  C052  F057         	movff	_NS_PED_SW,_SW_NSPED
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;Main_Screen.c: 271: SW_NSLT = PORTAbits.RA4;
  7808  000BCE  0E00               	movlw	0
  7809  000BD0  B880               	btfsc	3968,4,c	;volatile
  7810  000BD2  0E01               	movlw	1
  7811  000BD4  6E56               	movwf	_SW_NSLT,c
  7812                           
  7813                           ;Main_Screen.c: 274: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1
      +                          ';
  7814  000BD6  5057               	movf	_SW_NSPED,w,c
  7815  000BD8  A4D8               	btfss	status,2,c
  7816  000BDA  D002               	goto	l5103
  7817                           
  7818                           ; BSR set to: 0
  7819  000BDC  0E30               	movlw	48
  7820  000BDE  D001               	goto	L12
  7821  000BE0                     l5103:
  7822                           
  7823                           ; BSR set to: 0
  7824  000BE0  0E31               	movlw	49
  7825  000BE2                     L12:
  7826  000BE2  6E70               	movwf	_SW_NSPED_Txt,c
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;Main_Screen.c: 275: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  7830  000BE4  5056               	movf	_SW_NSLT,w,c
  7831  000BE6  A4D8               	btfss	status,2,c
  7832  000BE8  D002               	goto	l5107
  7833                           
  7834                           ; BSR set to: 0
  7835  000BEA  0E30               	movlw	48
  7836  000BEC  D001               	goto	L13
  7837  000BEE                     l5107:
  7838                           
  7839                           ; BSR set to: 0
  7840  000BEE  0E31               	movlw	49
  7841  000BF0                     L13:
  7842  000BF0  6E6E               	movwf	_SW_NSLT_Txt,c
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;Main_Screen.c: 276: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1
      +                          ';
  7846  000BF2  5055               	movf	_SW_EWPED,w,c
  7847  000BF4  A4D8               	btfss	status,2,c
  7848  000BF6  D002               	goto	l5111
  7849                           
  7850                           ; BSR set to: 0
  7851  000BF8  0E30               	movlw	48
  7852  000BFA  D001               	goto	L14
  7853  000BFC                     l5111:
  7854                           
  7855                           ; BSR set to: 0
  7856  000BFC  0E31               	movlw	49
  7857  000BFE                     L14:
  7858  000BFE  6E6C               	movwf	_SW_EWPED_Txt,c
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;Main_Screen.c: 277: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  7862  000C00  5054               	movf	_SW_EWLT,w,c
  7863  000C02  A4D8               	btfss	status,2,c
  7864  000C04  D002               	goto	l5115
  7865                           
  7866                           ; BSR set to: 0
  7867  000C06  0E30               	movlw	48
  7868  000C08  D001               	goto	L15
  7869  000C0A                     l5115:
  7870                           
  7871                           ; BSR set to: 0
  7872  000C0A  0E31               	movlw	49
  7873  000C0C                     L15:
  7874  000C0C  6E6A               	movwf	_SW_EWLT_Txt,c
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;Main_Screen.c: 279: if (Flashing_Request == 0) FlashingR_Txt[0] = '0'; else FlashingR_T
      +                          xt[0] = '1';
  7878  000C0E  504B               	movf	_Flashing_Request,w,c
  7879  000C10  A4D8               	btfss	status,2,c
  7880  000C12  D002               	goto	l5119
  7881                           
  7882                           ; BSR set to: 0
  7883  000C14  0E30               	movlw	48
  7884  000C16  D001               	goto	L16
  7885  000C18                     l5119:
  7886                           
  7887                           ; BSR set to: 0
  7888  000C18  0E31               	movlw	49
  7889  000C1A                     L16:
  7890  000C1A  6E66               	movwf	_FlashingR_Txt,c
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;Main_Screen.c: 280: if (Flashing_Status == 0) FlashingS_Txt[0] = '0'; else FlashingS_Tx
      +                          t[0] = '1';
  7894  000C1C  504C               	movf	_Flashing_Status,w,c
  7895  000C1E  A4D8               	btfss	status,2,c
  7896  000C20  D002               	goto	l5123
  7897                           
  7898                           ; BSR set to: 0
  7899  000C22  0E30               	movlw	48
  7900  000C24  D001               	goto	L17
  7901  000C26                     l5123:
  7902                           
  7903                           ; BSR set to: 0
  7904  000C26  0E31               	movlw	49
  7905  000C28                     L17:
  7906  000C28  6E68               	movwf	_FlashingS_Txt,c
  7907  000C2A  D000               	goto	l5125
  7908  000C2C                     l5125:
  7909                           
  7910                           ; BSR set to: 0
  7911                           ;Main_Screen.c: 282: drawtext(35, 2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  7912  000C2C  0E02               	movlw	2
  7913  000C2E  6E37               	movwf	drawtext@y,c
  7914  000C30  0E64               	movlw	low _Act_Mode_Txt
  7915  000C32  6E38               	movwf	drawtext@_text,c
  7916  000C34  0E00               	movlw	high _Act_Mode_Txt
  7917  000C36  6E39               	movwf	drawtext@_text+1,c
  7918  000C38  0EFF               	movlw	255
  7919  000C3A  6E3B               	movwf	drawtext@color+1,c
  7920  000C3C  683A               	setf	drawtext@color,c
  7921  000C3E  0E00               	movlw	0
  7922  000C40  6E3D               	movwf	drawtext@bg+1,c
  7923  000C42  0E00               	movlw	0
  7924  000C44  6E3C               	movwf	drawtext@bg,c
  7925  000C46  0E01               	movlw	1
  7926  000C48  6E3E               	movwf	drawtext@size,c
  7927  000C4A  0E23               	movlw	35
  7928  000C4C  EC24  F00A         	call	_drawtext
  7929                           
  7930                           ;Main_Screen.c: 283: drawtext(75, 2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  7931  000C50  0E02               	movlw	2
  7932  000C52  6E37               	movwf	drawtext@y,c
  7933  000C54  0E96               	movlw	low _Light_Sensor_Voltage_Txt
  7934  000C56  6E38               	movwf	drawtext@_text,c
  7935  000C58  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  7936  000C5A  6E39               	movwf	drawtext@_text+1,c
  7937  000C5C  0EFF               	movlw	255
  7938  000C5E  6E3B               	movwf	drawtext@color+1,c
  7939  000C60  683A               	setf	drawtext@color,c
  7940  000C62  0E00               	movlw	0
  7941  000C64  6E3D               	movwf	drawtext@bg+1,c
  7942  000C66  0E00               	movlw	0
  7943  000C68  6E3C               	movwf	drawtext@bg,c
  7944  000C6A  0E01               	movlw	1
  7945  000C6C  6E3E               	movwf	drawtext@size,c
  7946  000C6E  0E4B               	movlw	75
  7947  000C70  EC24  F00A         	call	_drawtext
  7948                           
  7949                           ;Main_Screen.c: 284: drawtext(100, 2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  7950  000C74  0E02               	movlw	2
  7951  000C76  6E37               	movwf	drawtext@y,c
  7952  000C78  0E61               	movlw	low _Light_Sensor_Mode_Txt
  7953  000C7A  6E38               	movwf	drawtext@_text,c
  7954  000C7C  0E00               	movlw	high _Light_Sensor_Mode_Txt
  7955  000C7E  6E39               	movwf	drawtext@_text+1,c
  7956  000C80  0EFF               	movlw	255
  7957  000C82  6E3B               	movwf	drawtext@color+1,c
  7958  000C84  683A               	setf	drawtext@color,c
  7959  000C86  0E00               	movlw	0
  7960  000C88  6E3D               	movwf	drawtext@bg+1,c
  7961  000C8A  0E00               	movlw	0
  7962  000C8C  6E3C               	movwf	drawtext@bg,c
  7963  000C8E  0E01               	movlw	1
  7964  000C90  6E3E               	movwf	drawtext@size,c
  7965  000C92  0E64               	movlw	100
  7966  000C94  EC24  F00A         	call	_drawtext
  7967                           
  7968                           ;Main_Screen.c: 288: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  7969  000C98  0E14               	movlw	20
  7970  000C9A  6E37               	movwf	drawtext@y,c
  7971  000C9C  0E70               	movlw	low _SW_NSPED_Txt
  7972  000C9E  6E38               	movwf	drawtext@_text,c
  7973  000CA0  0E00               	movlw	high _SW_NSPED_Txt
  7974  000CA2  6E39               	movwf	drawtext@_text+1,c
  7975  000CA4  0EFF               	movlw	255
  7976  000CA6  6E3B               	movwf	drawtext@color+1,c
  7977  000CA8  683A               	setf	drawtext@color,c
  7978  000CAA  0E00               	movlw	0
  7979  000CAC  6E3D               	movwf	drawtext@bg+1,c
  7980  000CAE  0E00               	movlw	0
  7981  000CB0  6E3C               	movwf	drawtext@bg,c
  7982  000CB2  0E01               	movlw	1
  7983  000CB4  6E3E               	movwf	drawtext@size,c
  7984  000CB6  0E08               	movlw	8
  7985  000CB8  EC24  F00A         	call	_drawtext
  7986                           
  7987                           ;Main_Screen.c: 289: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  7988  000CBC  0E14               	movlw	20
  7989  000CBE  6E37               	movwf	drawtext@y,c
  7990  000CC0  0E6E               	movlw	low _SW_NSLT_Txt
  7991  000CC2  6E38               	movwf	drawtext@_text,c
  7992  000CC4  0E00               	movlw	high _SW_NSLT_Txt
  7993  000CC6  6E39               	movwf	drawtext@_text+1,c
  7994  000CC8  0EFF               	movlw	255
  7995  000CCA  6E3B               	movwf	drawtext@color+1,c
  7996  000CCC  683A               	setf	drawtext@color,c
  7997  000CCE  0E00               	movlw	0
  7998  000CD0  6E3D               	movwf	drawtext@bg+1,c
  7999  000CD2  0E00               	movlw	0
  8000  000CD4  6E3C               	movwf	drawtext@bg,c
  8001  000CD6  0E01               	movlw	1
  8002  000CD8  6E3E               	movwf	drawtext@size,c
  8003  000CDA  0E23               	movlw	35
  8004  000CDC  EC24  F00A         	call	_drawtext
  8005                           
  8006                           ;Main_Screen.c: 290: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  8007  000CE0  0E14               	movlw	20
  8008  000CE2  6E37               	movwf	drawtext@y,c
  8009  000CE4  0E6C               	movlw	low _SW_EWPED_Txt
  8010  000CE6  6E38               	movwf	drawtext@_text,c
  8011  000CE8  0E00               	movlw	high _SW_EWPED_Txt
  8012  000CEA  6E39               	movwf	drawtext@_text+1,c
  8013  000CEC  0EFF               	movlw	255
  8014  000CEE  6E3B               	movwf	drawtext@color+1,c
  8015  000CF0  683A               	setf	drawtext@color,c
  8016  000CF2  0E00               	movlw	0
  8017  000CF4  6E3D               	movwf	drawtext@bg+1,c
  8018  000CF6  0E00               	movlw	0
  8019  000CF8  6E3C               	movwf	drawtext@bg,c
  8020  000CFA  0E01               	movlw	1
  8021  000CFC  6E3E               	movwf	drawtext@size,c
  8022  000CFE  0E3C               	movlw	60
  8023  000D00  EC24  F00A         	call	_drawtext
  8024                           
  8025                           ;Main_Screen.c: 291: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  8026  000D04  0E14               	movlw	20
  8027  000D06  6E37               	movwf	drawtext@y,c
  8028  000D08  0E6A               	movlw	low _SW_EWLT_Txt
  8029  000D0A  6E38               	movwf	drawtext@_text,c
  8030  000D0C  0E00               	movlw	high _SW_EWLT_Txt
  8031  000D0E  6E39               	movwf	drawtext@_text+1,c
  8032  000D10  0EFF               	movlw	255
  8033  000D12  6E3B               	movwf	drawtext@color+1,c
  8034  000D14  683A               	setf	drawtext@color,c
  8035  000D16  0E00               	movlw	0
  8036  000D18  6E3D               	movwf	drawtext@bg+1,c
  8037  000D1A  0E00               	movlw	0
  8038  000D1C  6E3C               	movwf	drawtext@bg,c
  8039  000D1E  0E01               	movlw	1
  8040  000D20  6E3E               	movwf	drawtext@size,c
  8041  000D22  0E55               	movlw	85
  8042  000D24  EC24  F00A         	call	_drawtext
  8043                           
  8044                           ;Main_Screen.c: 292: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  8045  000D28  0E14               	movlw	20
  8046  000D2A  6E37               	movwf	drawtext@y,c
  8047  000D2C  0E66               	movlw	low _FlashingR_Txt
  8048  000D2E  6E38               	movwf	drawtext@_text,c
  8049  000D30  0E00               	movlw	high _FlashingR_Txt
  8050  000D32  6E39               	movwf	drawtext@_text+1,c
  8051  000D34  0EFF               	movlw	255
  8052  000D36  6E3B               	movwf	drawtext@color+1,c
  8053  000D38  683A               	setf	drawtext@color,c
  8054  000D3A  0E00               	movlw	0
  8055  000D3C  6E3D               	movwf	drawtext@bg+1,c
  8056  000D3E  0E00               	movlw	0
  8057  000D40  6E3C               	movwf	drawtext@bg,c
  8058  000D42  0E01               	movlw	1
  8059  000D44  6E3E               	movwf	drawtext@size,c
  8060  000D46  0E6C               	movlw	108
  8061  000D48  EC24  F00A         	call	_drawtext
  8062                           
  8063                           ;Main_Screen.c: 293: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  8064  000D4C  0E14               	movlw	20
  8065  000D4E  6E37               	movwf	drawtext@y,c
  8066  000D50  0E68               	movlw	low _FlashingS_Txt
  8067  000D52  6E38               	movwf	drawtext@_text,c
  8068  000D54  0E00               	movlw	high _FlashingS_Txt
  8069  000D56  6E39               	movwf	drawtext@_text+1,c
  8070  000D58  0EFF               	movlw	255
  8071  000D5A  6E3B               	movwf	drawtext@color+1,c
  8072  000D5C  683A               	setf	drawtext@color,c
  8073  000D5E  0E00               	movlw	0
  8074  000D60  6E3D               	movwf	drawtext@bg+1,c
  8075  000D62  0E00               	movlw	0
  8076  000D64  6E3C               	movwf	drawtext@bg,c
  8077  000D66  0E01               	movlw	1
  8078  000D68  6E3E               	movwf	drawtext@size,c
  8079  000D6A  0E77               	movlw	119
  8080  000D6C  EC24  F00A         	call	_drawtext
  8081  000D70  0012               	return		;funcret
  8082  000D72                     __end_of_update_LCD_misc:
  8083                           	opt stack 0
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           intcon2	equ	0xFF1
  8091                           intcon3	equ	0xFF0
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           postdec1	equ	0xFE5
  8095                           fsr1l	equ	0xFE1
  8096                           status	equ	0xFD8
  8097                           
  8098 ;; *************** function ___fttol *****************
  8099 ;; Defined at:
  8100 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  f1              3   37[COMRAM] float 
  8103 ;; Auto vars:     Size  Location     Type
  8104 ;;  lval            4   47[COMRAM] unsigned long 
  8105 ;;  exp1            1   51[COMRAM] unsigned char 
  8106 ;;  sign1           1   46[COMRAM] unsigned char 
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  4   37[COMRAM] long 
  8109 ;; Registers used:
  8110 ;;		wreg, status,2, status,0
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;Total ram usage:       15 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    2
  8123 ;; This function calls:
  8124 ;;		Nothing
  8125 ;; This function is called by:
  8126 ;;		_update_LCD_misc
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text35
  8131  00173C                     __ptext35:
  8132                           	opt stack 0
  8133  00173C                     ___fttol:
  8134                           	opt stack 24
  8135                           
  8136                           ;incstack = 0
  8137  00173C  C028  F02A         	movff	___fttol@f1+2,??___fttol
  8138  001740  6A2B               	clrf	(??___fttol+1)& (0+255),c
  8139  001742  6A2C               	clrf	(??___fttol+2)& (0+255),c
  8140  001744  3427               	rlcf	___fttol@f1+1,w,c
  8141  001746  362A               	rlcf	??___fttol& (0+255),f,c
  8142  001748  E301               	bnc	u3731
  8143  00174A  802B               	bsf	(??___fttol+1)& (0+255),0,c
  8144  00174C                     u3731:
  8145  00174C  502A               	movf	??___fttol,w,c
  8146  00174E  6E34               	movwf	___fttol@exp1,c
  8147  001750  5034               	movf	___fttol@exp1,w,c
  8148  001752  A4D8               	btfss	status,2,c
  8149  001754  D002               	goto	l4983
  8150  001756  D039               	goto	l5007
  8151  001758  D063               	goto	l1128
  8152  00175A                     l4983:
  8153  00175A  0E17               	movlw	23
  8154  00175C  6E2A               	movwf	??___fttol& (0+255),c
  8155  00175E  C026  F02B         	movff	___fttol@f1,??___fttol+1
  8156  001762  C027  F02C         	movff	___fttol@f1+1,??___fttol+2
  8157  001766  C028  F02D         	movff	___fttol@f1+2,??___fttol+3
  8158  00176A  282A               	incf	??___fttol,w,c
  8159  00176C  6E2E               	movwf	(??___fttol+4)& (0+255),c
  8160  00176E  D004               	goto	u3750
  8161  001770                     u3755:
  8162  001770  90D8               	bcf	status,0,c
  8163  001772  322D               	rrcf	??___fttol+3,f,c
  8164  001774  322C               	rrcf	??___fttol+2,f,c
  8165  001776  322B               	rrcf	??___fttol+1,f,c
  8166  001778                     u3750:
  8167  001778  2E2E               	decfsz	(??___fttol+4)& (0+255),f,c
  8168  00177A  D7FA               	goto	u3755
  8169  00177C  502B               	movf	??___fttol+1,w,c
  8170  00177E  6E2F               	movwf	___fttol@sign1,c
  8171  001780  8E27               	bsf	___fttol@f1+1,7,c
  8172  001782  0EFF               	movlw	255
  8173  001784  1626               	andwf	___fttol@f1,f,c
  8174  001786  0EFF               	movlw	255
  8175  001788  1627               	andwf	___fttol@f1+1,f,c
  8176  00178A  0E00               	movlw	0
  8177  00178C  1628               	andwf	___fttol@f1+2,f,c
  8178  00178E  5026               	movf	___fttol@f1,w,c
  8179  001790  6E30               	movwf	___fttol@lval,c
  8180  001792  5027               	movf	___fttol@f1+1,w,c
  8181  001794  6E31               	movwf	___fttol@lval+1,c
  8182  001796  5028               	movf	___fttol@f1+2,w,c
  8183  001798  6E32               	movwf	___fttol@lval+2,c
  8184  00179A  6A33               	clrf	___fttol@lval+3,c
  8185  00179C  0E8E               	movlw	142
  8186  00179E  5E34               	subwf	___fttol@exp1,f,c
  8187  0017A0  AE34               	btfss	___fttol@exp1,7,c
  8188  0017A2  D010               	goto	l5005
  8189  0017A4  5034               	movf	___fttol@exp1,w,c
  8190  0017A6  0A80               	xorlw	128
  8191  0017A8  0F8F               	addlw	143
  8192  0017AA  B0D8               	btfsc	status,0,c
  8193  0017AC  D003               	goto	l5001
  8194  0017AE  D00D               	goto	l5007
  8195  0017B0  D037               	goto	l1128
  8196  0017B2  D000               	goto	l5001
  8197  0017B4                     l5001:
  8198  0017B4  90D8               	bcf	status,0,c
  8199  0017B6  3233               	rrcf	___fttol@lval+3,f,c
  8200  0017B8  3232               	rrcf	___fttol@lval+2,f,c
  8201  0017BA  3231               	rrcf	___fttol@lval+1,f,c
  8202  0017BC  3230               	rrcf	___fttol@lval,f,c
  8203  0017BE  3E34               	incfsz	___fttol@exp1,f,c
  8204  0017C0  D7F9               	goto	l5001
  8205  0017C2  D019               	goto	l5015
  8206  0017C4                     l5005:
  8207  0017C4  0E17               	movlw	23
  8208  0017C6  6434               	cpfsgt	___fttol@exp1,c
  8209  0017C8  D011               	goto	l5013
  8210  0017CA                     l5007:
  8211  0017CA  0E00               	movlw	0
  8212  0017CC  6E26               	movwf	?___fttol,c
  8213  0017CE  0E00               	movlw	0
  8214  0017D0  6E27               	movwf	?___fttol+1,c
  8215  0017D2  0E00               	movlw	0
  8216  0017D4  6E28               	movwf	?___fttol+2,c
  8217  0017D6  0E00               	movlw	0
  8218  0017D8  6E29               	movwf	?___fttol+3,c
  8219  0017DA  D022               	goto	l1128
  8220  0017DC  D007               	goto	l5013
  8221  0017DE                     l5011:
  8222  0017DE  90D8               	bcf	status,0,c
  8223  0017E0  3630               	rlcf	___fttol@lval,f,c
  8224  0017E2  3631               	rlcf	___fttol@lval+1,f,c
  8225  0017E4  3632               	rlcf	___fttol@lval+2,f,c
  8226  0017E6  3633               	rlcf	___fttol@lval+3,f,c
  8227  0017E8  0634               	decf	___fttol@exp1,f,c
  8228  0017EA  D000               	goto	l5013
  8229  0017EC                     l5013:
  8230  0017EC  5034               	movf	___fttol@exp1,w,c
  8231  0017EE  B4D8               	btfsc	status,2,c
  8232  0017F0  D002               	goto	l5015
  8233  0017F2  D7F5               	goto	l5011
  8234  0017F4  D000               	goto	l5015
  8235  0017F6                     l5015:
  8236  0017F6  502F               	movf	___fttol@sign1,w,c
  8237  0017F8  B4D8               	btfsc	status,2,c
  8238  0017FA  D009               	goto	l5019
  8239  0017FC  1E33               	comf	___fttol@lval+3,f,c
  8240  0017FE  1E32               	comf	___fttol@lval+2,f,c
  8241  001800  1E31               	comf	___fttol@lval+1,f,c
  8242  001802  6C30               	negf	___fttol@lval,c
  8243  001804  0E00               	movlw	0
  8244  001806  2231               	addwfc	___fttol@lval+1,f,c
  8245  001808  2232               	addwfc	___fttol@lval+2,f,c
  8246  00180A  2233               	addwfc	___fttol@lval+3,f,c
  8247  00180C  D000               	goto	l5019
  8248  00180E                     l5019:
  8249  00180E  C030  F026         	movff	___fttol@lval,?___fttol
  8250  001812  C031  F027         	movff	___fttol@lval+1,?___fttol+1
  8251  001816  C032  F028         	movff	___fttol@lval+2,?___fttol+2
  8252  00181A  C033  F029         	movff	___fttol@lval+3,?___fttol+3
  8253  00181E  D000               	goto	l1128
  8254  001820                     l1128:
  8255  001820  0012               	return		;funcret
  8256  001822                     __end_of___fttol:
  8257                           	opt stack 0
  8258                           tblptru	equ	0xFF8
  8259                           tblptrh	equ	0xFF7
  8260                           tblptrl	equ	0xFF6
  8261                           tablat	equ	0xFF5
  8262                           prodl	equ	0xFF3
  8263                           intcon	equ	0xFF2
  8264                           intcon2	equ	0xFF1
  8265                           intcon3	equ	0xFF0
  8266                           postinc0	equ	0xFEE
  8267                           wreg	equ	0xFE8
  8268                           postdec1	equ	0xFE5
  8269                           fsr1l	equ	0xFE1
  8270                           status	equ	0xFD8
  8271                           
  8272 ;; *************** function ___ftmul *****************
  8273 ;; Defined at:
  8274 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;  f1              3   22[COMRAM] float 
  8277 ;;  f2              3   25[COMRAM] float 
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;  f3_as_produc    3   32[COMRAM] unsigned um
  8280 ;;  sign            1   36[COMRAM] unsigned char 
  8281 ;;  cntr            1   35[COMRAM] unsigned char 
  8282 ;;  exp             1   31[COMRAM] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  3   22[COMRAM] float 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8292 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;Total ram usage:       15 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    3
  8299 ;; This function calls:
  8300 ;;		___ftpack
  8301 ;; This function is called by:
  8302 ;;		_update_LCD_misc
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text36
  8307  001552                     __ptext36:
  8308                           	opt stack 0
  8309  001552                     ___ftmul:
  8310                           	opt stack 23
  8311                           
  8312                           ;incstack = 0
  8313  001552  C019  F01D         	movff	___ftmul@f1+2,??___ftmul
  8314  001556  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  8315  001558  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  8316  00155A  3418               	rlcf	___ftmul@f1+1,w,c
  8317  00155C  361D               	rlcf	??___ftmul& (0+255),f,c
  8318  00155E  E301               	bnc	u3581
  8319  001560  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  8320  001562                     u3581:
  8321  001562  501D               	movf	??___ftmul,w,c
  8322  001564  6E20               	movwf	___ftmul@exp,c
  8323  001566  5020               	movf	___ftmul@exp,w,c
  8324  001568  A4D8               	btfss	status,2,c
  8325  00156A  D002               	goto	l4881
  8326  00156C  D00E               	goto	l4883
  8327  00156E  D06C               	goto	l1107
  8328  001570                     l4881:
  8329  001570  C01C  F01D         	movff	___ftmul@f2+2,??___ftmul
  8330  001574  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  8331  001576  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  8332  001578  341B               	rlcf	___ftmul@f2+1,w,c
  8333  00157A  361D               	rlcf	??___ftmul& (0+255),f,c
  8334  00157C  E301               	bnc	u3601
  8335  00157E  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  8336  001580                     u3601:
  8337  001580  501D               	movf	??___ftmul,w,c
  8338  001582  6E25               	movwf	___ftmul@sign,c
  8339  001584  5025               	movf	___ftmul@sign,w,c
  8340  001586  A4D8               	btfss	status,2,c
  8341  001588  D007               	goto	l4887
  8342  00158A                     l4883:
  8343  00158A  0E00               	movlw	0
  8344  00158C  6E17               	movwf	?___ftmul,c
  8345  00158E  0E00               	movlw	0
  8346  001590  6E18               	movwf	?___ftmul+1,c
  8347  001592  0E00               	movlw	0
  8348  001594  6E19               	movwf	?___ftmul+2,c
  8349  001596  D058               	goto	l1107
  8350  001598                     l4887:
  8351  001598  5025               	movf	___ftmul@sign,w,c
  8352  00159A  0F7B               	addlw	123
  8353  00159C  2620               	addwf	___ftmul@exp,f,c
  8354  00159E  C019  F025         	movff	___ftmul@f1+2,___ftmul@sign
  8355  0015A2  501C               	movf	___ftmul@f2+2,w,c
  8356  0015A4  1A25               	xorwf	___ftmul@sign,f,c
  8357  0015A6  0E80               	movlw	128
  8358  0015A8  1625               	andwf	___ftmul@sign,f,c
  8359  0015AA  8E18               	bsf	___ftmul@f1+1,7,c
  8360  0015AC  8E1B               	bsf	___ftmul@f2+1,7,c
  8361  0015AE  0EFF               	movlw	255
  8362  0015B0  161A               	andwf	___ftmul@f2,f,c
  8363  0015B2  0EFF               	movlw	255
  8364  0015B4  161B               	andwf	___ftmul@f2+1,f,c
  8365  0015B6  0E00               	movlw	0
  8366  0015B8  161C               	andwf	___ftmul@f2+2,f,c
  8367  0015BA  0E00               	movlw	0
  8368  0015BC  6E21               	movwf	___ftmul@f3_as_product,c
  8369  0015BE  0E00               	movlw	0
  8370  0015C0  6E22               	movwf	___ftmul@f3_as_product+1,c
  8371  0015C2  0E00               	movlw	0
  8372  0015C4  6E23               	movwf	___ftmul@f3_as_product+2,c
  8373  0015C6  0E07               	movlw	7
  8374  0015C8  6E24               	movwf	___ftmul@cntr,c
  8375  0015CA  D000               	goto	l4901
  8376  0015CC                     l4901:
  8377  0015CC  A017               	btfss	___ftmul@f1,0,c
  8378  0015CE  D007               	goto	l4905
  8379  0015D0  501A               	movf	___ftmul@f2,w,c
  8380  0015D2  2621               	addwf	___ftmul@f3_as_product,f,c
  8381  0015D4  501B               	movf	___ftmul@f2+1,w,c
  8382  0015D6  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  8383  0015D8  501C               	movf	___ftmul@f2+2,w,c
  8384  0015DA  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  8385  0015DC  D000               	goto	l4905
  8386  0015DE                     l4905:
  8387  0015DE  90D8               	bcf	status,0,c
  8388  0015E0  3219               	rrcf	___ftmul@f1+2,f,c
  8389  0015E2  3218               	rrcf	___ftmul@f1+1,f,c
  8390  0015E4  3217               	rrcf	___ftmul@f1,f,c
  8391  0015E6  90D8               	bcf	status,0,c
  8392  0015E8  361A               	rlcf	___ftmul@f2,f,c
  8393  0015EA  361B               	rlcf	___ftmul@f2+1,f,c
  8394  0015EC  361C               	rlcf	___ftmul@f2+2,f,c
  8395  0015EE  2E24               	decfsz	___ftmul@cntr,f,c
  8396  0015F0  D7ED               	goto	l4901
  8397  0015F2  D000               	goto	l4909
  8398  0015F4                     l4909:
  8399  0015F4  0E09               	movlw	9
  8400  0015F6  6E24               	movwf	___ftmul@cntr,c
  8401  0015F8  D000               	goto	l4911
  8402  0015FA                     l4911:
  8403  0015FA  A017               	btfss	___ftmul@f1,0,c
  8404  0015FC  D007               	goto	l4915
  8405  0015FE  501A               	movf	___ftmul@f2,w,c
  8406  001600  2621               	addwf	___ftmul@f3_as_product,f,c
  8407  001602  501B               	movf	___ftmul@f2+1,w,c
  8408  001604  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  8409  001606  501C               	movf	___ftmul@f2+2,w,c
  8410  001608  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  8411  00160A  D000               	goto	l4915
  8412  00160C                     l4915:
  8413  00160C  90D8               	bcf	status,0,c
  8414  00160E  3219               	rrcf	___ftmul@f1+2,f,c
  8415  001610  3218               	rrcf	___ftmul@f1+1,f,c
  8416  001612  3217               	rrcf	___ftmul@f1,f,c
  8417  001614  90D8               	bcf	status,0,c
  8418  001616  3223               	rrcf	___ftmul@f3_as_product+2,f,c
  8419  001618  3222               	rrcf	___ftmul@f3_as_product+1,f,c
  8420  00161A  3221               	rrcf	___ftmul@f3_as_product,f,c
  8421  00161C  2E24               	decfsz	___ftmul@cntr,f,c
  8422  00161E  D7ED               	goto	l4911
  8423  001620  D000               	goto	l4919
  8424  001622                     l4919:
  8425  001622  C021  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  8426  001626  C022  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8427  00162A  C023  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8428  00162E  C020  F012         	movff	___ftmul@exp,___ftpack@exp
  8429  001632  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  8430  001636  ECC2  F00D         	call	___ftpack	;wreg free
  8431  00163A  C00F  F017         	movff	?___ftpack,?___ftmul
  8432  00163E  C010  F018         	movff	?___ftpack+1,?___ftmul+1
  8433  001642  C011  F019         	movff	?___ftpack+2,?___ftmul+2
  8434  001646  D000               	goto	l1107
  8435  001648                     l1107:
  8436  001648  0012               	return		;funcret
  8437  00164A                     __end_of___ftmul:
  8438                           	opt stack 0
  8439                           tblptru	equ	0xFF8
  8440                           tblptrh	equ	0xFF7
  8441                           tblptrl	equ	0xFF6
  8442                           tablat	equ	0xFF5
  8443                           prodl	equ	0xFF3
  8444                           intcon	equ	0xFF2
  8445                           intcon2	equ	0xFF1
  8446                           intcon3	equ	0xFF0
  8447                           postinc0	equ	0xFEE
  8448                           wreg	equ	0xFE8
  8449                           postdec1	equ	0xFE5
  8450                           fsr1l	equ	0xFE1
  8451                           status	equ	0xFD8
  8452                           
  8453 ;; *************** function ___ftge *****************
  8454 ;; Defined at:
  8455 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;  ff1             3   14[COMRAM] float 
  8458 ;;  ff2             3   17[COMRAM] float 
  8459 ;; Auto vars:     Size  Location     Type
  8460 ;;		None
  8461 ;; Return value:  Size  Location     Type
  8462 ;;		None               void
  8463 ;; Registers used:
  8464 ;;		wreg, status,2, status,0
  8465 ;; Tracked objects:
  8466 ;;		On entry : 0/0
  8467 ;;		On exit  : 0/0
  8468 ;;		Unchanged: 0/0
  8469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8470 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8472 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8473 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;Total ram usage:        9 bytes
  8475 ;; Hardware stack levels used:    1
  8476 ;; Hardware stack levels required when called:    2
  8477 ;; This function calls:
  8478 ;;		Nothing
  8479 ;; This function is called by:
  8480 ;;		_update_LCD_misc
  8481 ;;		_main
  8482 ;; This function uses a non-reentrant model
  8483 ;;
  8484                           
  8485                           	psect	text37
  8486  001ED6                     __ptext37:
  8487                           	opt stack 0
  8488  001ED6                     ___ftge:
  8489                           	opt stack 28
  8490                           
  8491                           ;incstack = 0
  8492  001ED6  AE11               	btfss	___ftge@ff1+2,7,c
  8493  001ED8  D017               	goto	l4963
  8494  001EDA  C00F  F015         	movff	___ftge@ff1,??___ftge
  8495  001EDE  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  8496  001EE2  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  8497  001EE6  1E15               	comf	??___ftge,f,c
  8498  001EE8  1E16               	comf	??___ftge+1,f,c
  8499  001EEA  1E17               	comf	??___ftge+2,f,c
  8500  001EEC  2A15               	incf	??___ftge,f,c
  8501  001EEE  0E00               	movlw	0
  8502  001EF0  2216               	addwfc	??___ftge+1,f,c
  8503  001EF2  2217               	addwfc	??___ftge+2,f,c
  8504  001EF4  0E00               	movlw	0
  8505  001EF6  2415               	addwf	??___ftge,w,c
  8506  001EF8  6E0F               	movwf	___ftge@ff1,c
  8507  001EFA  0E00               	movlw	0
  8508  001EFC  2016               	addwfc	??___ftge+1,w,c
  8509  001EFE  6E10               	movwf	___ftge@ff1+1,c
  8510  001F00  0E80               	movlw	128
  8511  001F02  2017               	addwfc	??___ftge+2,w,c
  8512  001F04  6E11               	movwf	___ftge@ff1+2,c
  8513  001F06  D000               	goto	l4963
  8514  001F08                     l4963:
  8515  001F08  AE14               	btfss	___ftge@ff2+2,7,c
  8516  001F0A  D017               	goto	l4967
  8517  001F0C  C012  F015         	movff	___ftge@ff2,??___ftge
  8518  001F10  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  8519  001F14  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  8520  001F18  1E15               	comf	??___ftge,f,c
  8521  001F1A  1E16               	comf	??___ftge+1,f,c
  8522  001F1C  1E17               	comf	??___ftge+2,f,c
  8523  001F1E  2A15               	incf	??___ftge,f,c
  8524  001F20  0E00               	movlw	0
  8525  001F22  2216               	addwfc	??___ftge+1,f,c
  8526  001F24  2217               	addwfc	??___ftge+2,f,c
  8527  001F26  0E00               	movlw	0
  8528  001F28  2415               	addwf	??___ftge,w,c
  8529  001F2A  6E12               	movwf	___ftge@ff2,c
  8530  001F2C  0E00               	movlw	0
  8531  001F2E  2016               	addwfc	??___ftge+1,w,c
  8532  001F30  6E13               	movwf	___ftge@ff2+1,c
  8533  001F32  0E80               	movlw	128
  8534  001F34  2017               	addwfc	??___ftge+2,w,c
  8535  001F36  6E14               	movwf	___ftge@ff2+2,c
  8536  001F38  D000               	goto	l4967
  8537  001F3A                     l4967:
  8538  001F3A  0E00               	movlw	0
  8539  001F3C  1A0F               	xorwf	___ftge@ff1,f,c
  8540  001F3E  0E00               	movlw	0
  8541  001F40  1A10               	xorwf	___ftge@ff1+1,f,c
  8542  001F42  0E80               	movlw	128
  8543  001F44  1A11               	xorwf	___ftge@ff1+2,f,c
  8544  001F46  0E00               	movlw	0
  8545  001F48  1A12               	xorwf	___ftge@ff2,f,c
  8546  001F4A  0E00               	movlw	0
  8547  001F4C  1A13               	xorwf	___ftge@ff2+1,f,c
  8548  001F4E  0E80               	movlw	128
  8549  001F50  1A14               	xorwf	___ftge@ff2+2,f,c
  8550  001F52  5012               	movf	___ftge@ff2,w,c
  8551  001F54  5C0F               	subwf	___ftge@ff1,w,c
  8552  001F56  5013               	movf	___ftge@ff2+1,w,c
  8553  001F58  5810               	subwfb	___ftge@ff1+1,w,c
  8554  001F5A  5014               	movf	___ftge@ff2+2,w,c
  8555  001F5C  5811               	subwfb	___ftge@ff1+2,w,c
  8556  001F5E  B0D8               	btfsc	status,0,c
  8557  001F60  D002               	goto	l4973
  8558  001F62  90D8               	bcf	status,0,c
  8559  001F64  D002               	goto	l1101
  8560  001F66                     l4973:
  8561  001F66  80D8               	bsf	status,0,c
  8562  001F68  D000               	goto	l1101
  8563  001F6A                     l1101:
  8564  001F6A  0012               	return		;funcret
  8565  001F6C                     __end_of___ftge:
  8566                           	opt stack 0
  8567                           tblptru	equ	0xFF8
  8568                           tblptrh	equ	0xFF7
  8569                           tblptrl	equ	0xFF6
  8570                           tablat	equ	0xFF5
  8571                           prodl	equ	0xFF3
  8572                           intcon	equ	0xFF2
  8573                           intcon2	equ	0xFF1
  8574                           intcon3	equ	0xFF0
  8575                           postinc0	equ	0xFEE
  8576                           wreg	equ	0xFE8
  8577                           postdec1	equ	0xFE5
  8578                           fsr1l	equ	0xFE1
  8579                           status	equ	0xFD8
  8580                           
  8581 ;; *************** function ___awmod *****************
  8582 ;; Defined at:
  8583 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  dividend        2   52[COMRAM] int 
  8586 ;;  divisor         2   54[COMRAM] int 
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;  sign            1   57[COMRAM] unsigned char 
  8589 ;;  counter         1   56[COMRAM] unsigned char 
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  2   52[COMRAM] int 
  8592 ;; Registers used:
  8593 ;;		wreg, status,2, status,0
  8594 ;; Tracked objects:
  8595 ;;		On entry : 0/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;Total ram usage:        6 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:    2
  8606 ;; This function calls:
  8607 ;;		Nothing
  8608 ;; This function is called by:
  8609 ;;		_update_LCD_PED_Count
  8610 ;;		_update_LCD_count
  8611 ;;		_update_LCD_misc
  8612 ;;		_dec_2_bcd
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           	psect	text38
  8617  002102                     __ptext38:
  8618                           	opt stack 0
  8619  002102                     ___awmod:
  8620                           	opt stack 25
  8621                           
  8622                           ;incstack = 0
  8623  002102  0E00               	movlw	0
  8624  002104  6E3A               	movwf	___awmod@sign,c
  8625  002106  AE36               	btfss	___awmod@dividend+1,7,c
  8626  002108  D007               	goto	l4931
  8627  00210A  6C35               	negf	___awmod@dividend,c
  8628  00210C  1E36               	comf	___awmod@dividend+1,f,c
  8629  00210E  B0D8               	btfsc	status,0,c
  8630  002110  2A36               	incf	___awmod@dividend+1,f,c
  8631  002112  0E01               	movlw	1
  8632  002114  6E3A               	movwf	___awmod@sign,c
  8633  002116  D000               	goto	l4931
  8634  002118                     l4931:
  8635  002118  AE38               	btfss	___awmod@divisor+1,7,c
  8636  00211A  D005               	goto	l4935
  8637  00211C  6C37               	negf	___awmod@divisor,c
  8638  00211E  1E38               	comf	___awmod@divisor+1,f,c
  8639  002120  B0D8               	btfsc	status,0,c
  8640  002122  2A38               	incf	___awmod@divisor+1,f,c
  8641  002124  D000               	goto	l4935
  8642  002126                     l4935:
  8643  002126  5037               	movf	___awmod@divisor,w,c
  8644  002128  1038               	iorwf	___awmod@divisor+1,w,c
  8645  00212A  B4D8               	btfsc	status,2,c
  8646  00212C  D01D               	goto	l4951
  8647  00212E  0E01               	movlw	1
  8648  002130  6E39               	movwf	___awmod@counter,c
  8649  002132  D005               	goto	l4941
  8650  002134                     l4939:
  8651  002134  90D8               	bcf	status,0,c
  8652  002136  3637               	rlcf	___awmod@divisor,f,c
  8653  002138  3638               	rlcf	___awmod@divisor+1,f,c
  8654  00213A  2A39               	incf	___awmod@counter,f,c
  8655  00213C  D000               	goto	l4941
  8656  00213E                     l4941:
  8657  00213E  BE38               	btfsc	___awmod@divisor+1,7,c
  8658  002140  D002               	goto	l4943
  8659  002142  D7F8               	goto	l4939
  8660  002144  D000               	goto	l4943
  8661  002146                     l4943:
  8662  002146  5037               	movf	___awmod@divisor,w,c
  8663  002148  5C35               	subwf	___awmod@dividend,w,c
  8664  00214A  5038               	movf	___awmod@divisor+1,w,c
  8665  00214C  5836               	subwfb	___awmod@dividend+1,w,c
  8666  00214E  A0D8               	btfss	status,0,c
  8667  002150  D005               	goto	l4947
  8668  002152  5037               	movf	___awmod@divisor,w,c
  8669  002154  5E35               	subwf	___awmod@dividend,f,c
  8670  002156  5038               	movf	___awmod@divisor+1,w,c
  8671  002158  5A36               	subwfb	___awmod@dividend+1,f,c
  8672  00215A  D000               	goto	l4947
  8673  00215C                     l4947:
  8674  00215C  90D8               	bcf	status,0,c
  8675  00215E  3238               	rrcf	___awmod@divisor+1,f,c
  8676  002160  3237               	rrcf	___awmod@divisor,f,c
  8677  002162  2E39               	decfsz	___awmod@counter,f,c
  8678  002164  D7F0               	goto	l4943
  8679  002166  D000               	goto	l4951
  8680  002168                     l4951:
  8681  002168  503A               	movf	___awmod@sign,w,c
  8682  00216A  B4D8               	btfsc	status,2,c
  8683  00216C  D005               	goto	l4955
  8684  00216E  6C35               	negf	___awmod@dividend,c
  8685  002170  1E36               	comf	___awmod@dividend+1,f,c
  8686  002172  B0D8               	btfsc	status,0,c
  8687  002174  2A36               	incf	___awmod@dividend+1,f,c
  8688  002176  D000               	goto	l4955
  8689  002178                     l4955:
  8690  002178  C035  F035         	movff	___awmod@dividend,?___awmod
  8691  00217C  C036  F036         	movff	___awmod@dividend+1,?___awmod+1
  8692  002180  D000               	goto	l918
  8693  002182                     l918:
  8694  002182  0012               	return		;funcret
  8695  002184                     __end_of___awmod:
  8696                           	opt stack 0
  8697                           tblptru	equ	0xFF8
  8698                           tblptrh	equ	0xFF7
  8699                           tblptrl	equ	0xFF6
  8700                           tablat	equ	0xFF5
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           intcon2	equ	0xFF1
  8704                           intcon3	equ	0xFF0
  8705                           postinc0	equ	0xFEE
  8706                           wreg	equ	0xFE8
  8707                           postdec1	equ	0xFE5
  8708                           fsr1l	equ	0xFE1
  8709                           status	equ	0xFD8
  8710                           
  8711 ;; *************** function _Read_Volt *****************
  8712 ;; Defined at:
  8713 ;;		line 141 in file "utils.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;  ADC_Channel     1    wreg     unsigned char 
  8716 ;; Auto vars:     Size  Location     Type
  8717 ;;  ADC_Channel     1   47[COMRAM] unsigned char 
  8718 ;;  volt            3   44[COMRAM] float 
  8719 ;;  nStep           2   48[COMRAM] int 
  8720 ;; Return value:  Size  Location     Type
  8721 ;;                  3   41[COMRAM] float 
  8722 ;; Registers used:
  8723 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8729 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;Total ram usage:        9 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:    4
  8736 ;; This function calls:
  8737 ;;		___awtoft
  8738 ;;		___ftdiv
  8739 ;;		___wmul
  8740 ;;		_get_full_ADC
  8741 ;; This function is called by:
  8742 ;;		_update_LCD_misc
  8743 ;;		_main
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           	psect	text39
  8748  0021F4                     __ptext39:
  8749                           	opt stack 0
  8750  0021F4                     _Read_Volt:
  8751                           	opt stack 26
  8752                           
  8753                           ;incstack = 0
  8754                           ;Read_Volt@ADC_Channel stored from wreg
  8755  0021F4  6E30               	movwf	Read_Volt@ADC_Channel,c
  8756                           
  8757                           ;utils.c: 143: ADCON0 = ADC_Channel * 4 + 1;
  8758  0021F6  5030               	movf	Read_Volt@ADC_Channel,w,c
  8759  0021F8  0D04               	mullw	4
  8760  0021FA  28F3               	incf	prodl,w,c
  8761  0021FC  6EC2               	movwf	4034,c	;volatile
  8762                           
  8763                           ;utils.c: 144: int nStep = get_full_ADC();
  8764  0021FE  EC03  F014         	call	_get_full_ADC	;wreg free
  8765  002202  C00F  F031         	movff	?_get_full_ADC,Read_Volt@nStep
  8766  002206  C010  F032         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  8767                           
  8768                           ;utils.c: 145: float volt = nStep * 5 /1024.0;
  8769  00220A  C031  F00F         	movff	Read_Volt@nStep,___wmul@multiplier
  8770  00220E  C032  F010         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  8771  002212  0E00               	movlw	0
  8772  002214  6E12               	movwf	___wmul@multiplicand+1,c
  8773  002216  0E05               	movlw	5
  8774  002218  6E11               	movwf	___wmul@multiplicand,c
  8775  00221A  ECEF  F013         	call	___wmul	;wreg free
  8776  00221E  C00F  F017         	movff	?___wmul,___awtoft@c
  8777  002222  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  8778  002226  EC23  F013         	call	___awtoft	;wreg free
  8779  00222A  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  8780  00222E  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  8781  002232  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  8782  002236  0E00               	movlw	0
  8783  002238  6E1E               	movwf	___ftdiv@f2,c
  8784  00223A  0E80               	movlw	128
  8785  00223C  6E1F               	movwf	___ftdiv@f2+1,c
  8786  00223E  0E44               	movlw	68
  8787  002240  6E20               	movwf	___ftdiv@f2+2,c
  8788  002242  EC11  F00C         	call	___ftdiv	;wreg free
  8789  002246  C01B  F02D         	movff	?___ftdiv,Read_Volt@volt
  8790  00224A  C01C  F02E         	movff	?___ftdiv+1,Read_Volt@volt+1
  8791  00224E  C01D  F02F         	movff	?___ftdiv+2,Read_Volt@volt+2
  8792                           
  8793                           ;utils.c: 146: return (volt);
  8794  002252  C02D  F02A         	movff	Read_Volt@volt,?_Read_Volt
  8795  002256  C02E  F02B         	movff	Read_Volt@volt+1,?_Read_Volt+1
  8796  00225A  C02F  F02C         	movff	Read_Volt@volt+2,?_Read_Volt+2
  8797  00225E  D000               	goto	l462
  8798  002260                     l462:
  8799  002260  0012               	return		;funcret
  8800  002262                     __end_of_Read_Volt:
  8801                           	opt stack 0
  8802                           tblptru	equ	0xFF8
  8803                           tblptrh	equ	0xFF7
  8804                           tblptrl	equ	0xFF6
  8805                           tablat	equ	0xFF5
  8806                           prodl	equ	0xFF3
  8807                           intcon	equ	0xFF2
  8808                           intcon2	equ	0xFF1
  8809                           intcon3	equ	0xFF0
  8810                           postinc0	equ	0xFEE
  8811                           wreg	equ	0xFE8
  8812                           postdec1	equ	0xFE5
  8813                           fsr1l	equ	0xFE1
  8814                           status	equ	0xFD8
  8815                           
  8816 ;; *************** function _get_full_ADC *****************
  8817 ;; Defined at:
  8818 ;;		line 149 in file "utils.c"
  8819 ;; Parameters:    Size  Location     Type
  8820 ;;		None
  8821 ;; Auto vars:     Size  Location     Type
  8822 ;;  result          2   18[COMRAM] unsigned int 
  8823 ;; Return value:  Size  Location     Type
  8824 ;;                  2   14[COMRAM] unsigned int 
  8825 ;; Registers used:
  8826 ;;		wreg, status,2, status,0
  8827 ;; Tracked objects:
  8828 ;;		On entry : 0/0
  8829 ;;		On exit  : 0/0
  8830 ;;		Unchanged: 0/0
  8831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8836 ;;Total ram usage:        6 bytes
  8837 ;; Hardware stack levels used:    1
  8838 ;; Hardware stack levels required when called:    2
  8839 ;; This function calls:
  8840 ;;		Nothing
  8841 ;; This function is called by:
  8842 ;;		_update_LCD_misc
  8843 ;;		_Read_Volt
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           	psect	text40
  8848  002806                     __ptext40:
  8849                           	opt stack 0
  8850  002806                     _get_full_ADC:
  8851                           	opt stack 27
  8852                           
  8853                           ;utils.c: 151: unsigned int result;
  8854                           ;utils.c: 152: ADCON0bits.GO=1;
  8855                           
  8856                           ;incstack = 0
  8857  002806  82C2               	bsf	4034,1,c	;volatile
  8858                           
  8859                           ;utils.c: 153: while(ADCON0bits.DONE==1);
  8860  002808  D000               	goto	l465
  8861  00280A                     l465:
  8862  00280A  B2C2               	btfsc	4034,1,c	;volatile
  8863  00280C  D7FE               	goto	l465
  8864                           
  8865                           ;utils.c: 154: result = (ADRESH * 0x100) + ADRESL;
  8866  00280E  50C4               	movf	4036,w,c	;volatile
  8867  002810  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  8868  002812  6A11               	clrf	??_get_full_ADC& (0+255),c
  8869  002814  50C3               	movf	4035,w,c	;volatile
  8870  002816  2411               	addwf	??_get_full_ADC,w,c
  8871  002818  6E13               	movwf	get_full_ADC@result,c
  8872  00281A  0E00               	movlw	0
  8873  00281C  2012               	addwfc	??_get_full_ADC+1,w,c
  8874  00281E  6E14               	movwf	get_full_ADC@result+1,c
  8875                           
  8876                           ;utils.c: 156: return result;
  8877  002820  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  8878  002824  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  8879  002828  D000               	goto	l468
  8880  00282A                     l468:
  8881  00282A  0012               	return		;funcret
  8882  00282C                     __end_of_get_full_ADC:
  8883                           	opt stack 0
  8884                           tblptru	equ	0xFF8
  8885                           tblptrh	equ	0xFF7
  8886                           tblptrl	equ	0xFF6
  8887                           tablat	equ	0xFF5
  8888                           prodl	equ	0xFF3
  8889                           intcon	equ	0xFF2
  8890                           intcon2	equ	0xFF1
  8891                           intcon3	equ	0xFF0
  8892                           postinc0	equ	0xFEE
  8893                           wreg	equ	0xFE8
  8894                           postdec1	equ	0xFE5
  8895                           fsr1l	equ	0xFE1
  8896                           status	equ	0xFD8
  8897                           
  8898 ;; *************** function ___ftdiv *****************
  8899 ;; Defined at:
  8900 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  f1              3   26[COMRAM] float 
  8903 ;;  f2              3   29[COMRAM] float 
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;  f3              3   36[COMRAM] float 
  8906 ;;  sign            1   40[COMRAM] unsigned char 
  8907 ;;  exp             1   39[COMRAM] unsigned char 
  8908 ;;  cntr            1   35[COMRAM] unsigned char 
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  3   26[COMRAM] float 
  8911 ;; Registers used:
  8912 ;;		wreg, status,2, status,0, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8918 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;Total ram usage:       15 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    3
  8925 ;; This function calls:
  8926 ;;		___ftpack
  8927 ;; This function is called by:
  8928 ;;		_Read_Volt
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text41
  8933  001822                     __ptext41:
  8934                           	opt stack 0
  8935  001822                     ___ftdiv:
  8936                           	opt stack 26
  8937                           
  8938                           ;incstack = 0
  8939  001822  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  8940  001826  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  8941  001828  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  8942  00182A  341C               	rlcf	___ftdiv@f1+1,w,c
  8943  00182C  3621               	rlcf	??___ftdiv& (0+255),f,c
  8944  00182E  E301               	bnc	u3411
  8945  001830  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  8946  001832                     u3411:
  8947  001832  5021               	movf	??___ftdiv,w,c
  8948  001834  6E28               	movwf	___ftdiv@exp,c
  8949  001836  5028               	movf	___ftdiv@exp,w,c
  8950  001838  A4D8               	btfss	status,2,c
  8951  00183A  D002               	goto	l4739
  8952  00183C  D00E               	goto	l4741
  8953  00183E  D061               	goto	l1092
  8954  001840                     l4739:
  8955  001840  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  8956  001844  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  8957  001846  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  8958  001848  341F               	rlcf	___ftdiv@f2+1,w,c
  8959  00184A  3621               	rlcf	??___ftdiv& (0+255),f,c
  8960  00184C  E301               	bnc	u3431
  8961  00184E  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  8962  001850                     u3431:
  8963  001850  5021               	movf	??___ftdiv,w,c
  8964  001852  6E29               	movwf	___ftdiv@sign,c
  8965  001854  5029               	movf	___ftdiv@sign,w,c
  8966  001856  A4D8               	btfss	status,2,c
  8967  001858  D007               	goto	l4745
  8968  00185A                     l4741:
  8969  00185A  0E00               	movlw	0
  8970  00185C  6E1B               	movwf	?___ftdiv,c
  8971  00185E  0E00               	movlw	0
  8972  001860  6E1C               	movwf	?___ftdiv+1,c
  8973  001862  0E00               	movlw	0
  8974  001864  6E1D               	movwf	?___ftdiv+2,c
  8975  001866  D04D               	goto	l1092
  8976  001868                     l4745:
  8977  001868  0E00               	movlw	0
  8978  00186A  6E25               	movwf	___ftdiv@f3,c
  8979  00186C  0E00               	movlw	0
  8980  00186E  6E26               	movwf	___ftdiv@f3+1,c
  8981  001870  0E00               	movlw	0
  8982  001872  6E27               	movwf	___ftdiv@f3+2,c
  8983  001874  5029               	movf	___ftdiv@sign,w,c
  8984  001876  0F89               	addlw	137
  8985  001878  5E28               	subwf	___ftdiv@exp,f,c
  8986  00187A  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  8987  00187E  5020               	movf	___ftdiv@f2+2,w,c
  8988  001880  1A29               	xorwf	___ftdiv@sign,f,c
  8989  001882  0E80               	movlw	128
  8990  001884  1629               	andwf	___ftdiv@sign,f,c
  8991  001886  8E1C               	bsf	___ftdiv@f1+1,7,c
  8992  001888  0EFF               	movlw	255
  8993  00188A  161B               	andwf	___ftdiv@f1,f,c
  8994  00188C  0EFF               	movlw	255
  8995  00188E  161C               	andwf	___ftdiv@f1+1,f,c
  8996  001890  0E00               	movlw	0
  8997  001892  161D               	andwf	___ftdiv@f1+2,f,c
  8998  001894  8E1F               	bsf	___ftdiv@f2+1,7,c
  8999  001896  0EFF               	movlw	255
  9000  001898  161E               	andwf	___ftdiv@f2,f,c
  9001  00189A  0EFF               	movlw	255
  9002  00189C  161F               	andwf	___ftdiv@f2+1,f,c
  9003  00189E  0E00               	movlw	0
  9004  0018A0  1620               	andwf	___ftdiv@f2+2,f,c
  9005  0018A2  0E18               	movlw	24
  9006  0018A4  6E24               	movwf	___ftdiv@cntr,c
  9007  0018A6  D000               	goto	l4765
  9008  0018A8                     l4765:
  9009  0018A8  90D8               	bcf	status,0,c
  9010  0018AA  3625               	rlcf	___ftdiv@f3,f,c
  9011  0018AC  3626               	rlcf	___ftdiv@f3+1,f,c
  9012  0018AE  3627               	rlcf	___ftdiv@f3+2,f,c
  9013  0018B0  501E               	movf	___ftdiv@f2,w,c
  9014  0018B2  5C1B               	subwf	___ftdiv@f1,w,c
  9015  0018B4  501F               	movf	___ftdiv@f2+1,w,c
  9016  0018B6  581C               	subwfb	___ftdiv@f1+1,w,c
  9017  0018B8  5020               	movf	___ftdiv@f2+2,w,c
  9018  0018BA  581D               	subwfb	___ftdiv@f1+2,w,c
  9019  0018BC  A0D8               	btfss	status,0,c
  9020  0018BE  D007               	goto	l1095
  9021  0018C0  501E               	movf	___ftdiv@f2,w,c
  9022  0018C2  5E1B               	subwf	___ftdiv@f1,f,c
  9023  0018C4  501F               	movf	___ftdiv@f2+1,w,c
  9024  0018C6  5A1C               	subwfb	___ftdiv@f1+1,f,c
  9025  0018C8  5020               	movf	___ftdiv@f2+2,w,c
  9026  0018CA  5A1D               	subwfb	___ftdiv@f1+2,f,c
  9027  0018CC  8025               	bsf	___ftdiv@f3,0,c
  9028  0018CE                     l1095:
  9029  0018CE  90D8               	bcf	status,0,c
  9030  0018D0  361B               	rlcf	___ftdiv@f1,f,c
  9031  0018D2  361C               	rlcf	___ftdiv@f1+1,f,c
  9032  0018D4  361D               	rlcf	___ftdiv@f1+2,f,c
  9033  0018D6  2E24               	decfsz	___ftdiv@cntr,f,c
  9034  0018D8  D7E7               	goto	l4765
  9035  0018DA  D000               	goto	l4775
  9036  0018DC                     l4775:
  9037  0018DC  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  9038  0018E0  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9039  0018E4  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9040  0018E8  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  9041  0018EC  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  9042  0018F0  ECC2  F00D         	call	___ftpack	;wreg free
  9043  0018F4  C00F  F01B         	movff	?___ftpack,?___ftdiv
  9044  0018F8  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  9045  0018FC  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  9046  001900  D000               	goto	l1092
  9047  001902                     l1092:
  9048  001902  0012               	return		;funcret
  9049  001904                     __end_of___ftdiv:
  9050                           	opt stack 0
  9051                           tblptru	equ	0xFF8
  9052                           tblptrh	equ	0xFF7
  9053                           tblptrl	equ	0xFF6
  9054                           tablat	equ	0xFF5
  9055                           prodl	equ	0xFF3
  9056                           intcon	equ	0xFF2
  9057                           intcon2	equ	0xFF1
  9058                           intcon3	equ	0xFF0
  9059                           postinc0	equ	0xFEE
  9060                           wreg	equ	0xFE8
  9061                           postdec1	equ	0xFE5
  9062                           fsr1l	equ	0xFE1
  9063                           status	equ	0xFD8
  9064                           
  9065 ;; *************** function ___awtoft *****************
  9066 ;; Defined at:
  9067 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  9068 ;; Parameters:    Size  Location     Type
  9069 ;;  c               2   22[COMRAM] int 
  9070 ;; Auto vars:     Size  Location     Type
  9071 ;;  sign            1   25[COMRAM] unsigned char 
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  3   22[COMRAM] float 
  9074 ;; Registers used:
  9075 ;;		wreg, status,2, status,0, cstack
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9081 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9084 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;Total ram usage:        4 bytes
  9086 ;; Hardware stack levels used:    1
  9087 ;; Hardware stack levels required when called:    3
  9088 ;; This function calls:
  9089 ;;		___ftpack
  9090 ;; This function is called by:
  9091 ;;		_Read_Volt
  9092 ;; This function uses a non-reentrant model
  9093 ;;
  9094                           
  9095                           	psect	text42
  9096  002646                     __ptext42:
  9097                           	opt stack 0
  9098  002646                     ___awtoft:
  9099                           	opt stack 26
  9100                           
  9101                           ;incstack = 0
  9102  002646  0E00               	movlw	0
  9103  002648  6E1A               	movwf	___awtoft@sign,c
  9104  00264A  AE18               	btfss	___awtoft@c+1,7,c
  9105  00264C  D007               	goto	l4787
  9106  00264E  6C17               	negf	___awtoft@c,c
  9107  002650  1E18               	comf	___awtoft@c+1,f,c
  9108  002652  B0D8               	btfsc	status,0,c
  9109  002654  2A18               	incf	___awtoft@c+1,f,c
  9110  002656  0E01               	movlw	1
  9111  002658  6E1A               	movwf	___awtoft@sign,c
  9112  00265A  D000               	goto	l4787
  9113  00265C                     l4787:
  9114  00265C  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  9115  002660  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  9116  002664  6A11               	clrf	___ftpack@arg+2,c
  9117  002666  0E8E               	movlw	142
  9118  002668  6E12               	movwf	___ftpack@exp,c
  9119  00266A  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  9120  00266E  ECC2  F00D         	call	___ftpack	;wreg free
  9121  002672  C00F  F017         	movff	?___ftpack,?___awtoft
  9122  002676  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  9123  00267A  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  9124  00267E  D000               	goto	l930
  9125  002680                     l930:
  9126  002680  0012               	return		;funcret
  9127  002682                     __end_of___awtoft:
  9128                           	opt stack 0
  9129                           tblptru	equ	0xFF8
  9130                           tblptrh	equ	0xFF7
  9131                           tblptrl	equ	0xFF6
  9132                           tablat	equ	0xFF5
  9133                           prodl	equ	0xFF3
  9134                           intcon	equ	0xFF2
  9135                           intcon2	equ	0xFF1
  9136                           intcon3	equ	0xFF0
  9137                           postinc0	equ	0xFEE
  9138                           wreg	equ	0xFE8
  9139                           postdec1	equ	0xFE5
  9140                           fsr1l	equ	0xFE1
  9141                           status	equ	0xFD8
  9142                           
  9143 ;; *************** function ___ftpack *****************
  9144 ;; Defined at:
  9145 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;  arg             3   14[COMRAM] unsigned um
  9148 ;;  exp             1   17[COMRAM] unsigned char 
  9149 ;;  sign            1   18[COMRAM] unsigned char 
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;		None
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  3   14[COMRAM] float 
  9154 ;; Registers used:
  9155 ;;		wreg, status,2, status,0
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9161 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;Total ram usage:        8 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    2
  9168 ;; This function calls:
  9169 ;;		Nothing
  9170 ;; This function is called by:
  9171 ;;		___awtoft
  9172 ;;		___ftdiv
  9173 ;;		___ftmul
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           	psect	text43
  9178  001B84                     __ptext43:
  9179                           	opt stack 0
  9180  001B84                     ___ftpack:
  9181                           	opt stack 26
  9182                           
  9183                           ;incstack = 0
  9184  001B84  5012               	movf	___ftpack@exp,w,c
  9185  001B86  B4D8               	btfsc	status,2,c
  9186  001B88  D005               	goto	l4629
  9187  001B8A  500F               	movf	___ftpack@arg,w,c
  9188  001B8C  1010               	iorwf	___ftpack@arg+1,w,c
  9189  001B8E  1011               	iorwf	___ftpack@arg+2,w,c
  9190  001B90  A4D8               	btfss	status,2,c
  9191  001B92  D00E               	goto	l4635
  9192  001B94                     l4629:
  9193  001B94  0E00               	movlw	0
  9194  001B96  6E0F               	movwf	?___ftpack,c
  9195  001B98  0E00               	movlw	0
  9196  001B9A  6E10               	movwf	?___ftpack+1,c
  9197  001B9C  0E00               	movlw	0
  9198  001B9E  6E11               	movwf	?___ftpack+2,c
  9199  001BA0  D053               	goto	l1020
  9200  001BA2  D006               	goto	l4635
  9201  001BA4                     l4633:
  9202  001BA4  2A12               	incf	___ftpack@exp,f,c
  9203  001BA6  90D8               	bcf	status,0,c
  9204  001BA8  3211               	rrcf	___ftpack@arg+2,f,c
  9205  001BAA  3210               	rrcf	___ftpack@arg+1,f,c
  9206  001BAC  320F               	rrcf	___ftpack@arg,f,c
  9207  001BAE  D000               	goto	l4635
  9208  001BB0                     l4635:
  9209  001BB0  0E00               	movlw	0
  9210  001BB2  140F               	andwf	___ftpack@arg,w,c
  9211  001BB4  6E14               	movwf	??___ftpack& (0+255),c
  9212  001BB6  0E00               	movlw	0
  9213  001BB8  1410               	andwf	___ftpack@arg+1,w,c
  9214  001BBA  6E15               	movwf	(??___ftpack+1)& (0+255),c
  9215  001BBC  0EFE               	movlw	254
  9216  001BBE  1411               	andwf	___ftpack@arg+2,w,c
  9217  001BC0  6E16               	movwf	(??___ftpack+2)& (0+255),c
  9218  001BC2  5014               	movf	??___ftpack,w,c
  9219  001BC4  1015               	iorwf	??___ftpack+1,w,c
  9220  001BC6  1016               	iorwf	??___ftpack+2,w,c
  9221  001BC8  B4D8               	btfsc	status,2,c
  9222  001BCA  D00E               	goto	l4641
  9223  001BCC  D7EB               	goto	l4633
  9224  001BCE  D00C               	goto	l4641
  9225  001BD0                     l4637:
  9226  001BD0  2A12               	incf	___ftpack@exp,f,c
  9227  001BD2  0E01               	movlw	1
  9228  001BD4  260F               	addwf	___ftpack@arg,f,c
  9229  001BD6  0E00               	movlw	0
  9230  001BD8  2210               	addwfc	___ftpack@arg+1,f,c
  9231  001BDA  0E00               	movlw	0
  9232  001BDC  2211               	addwfc	___ftpack@arg+2,f,c
  9233  001BDE  90D8               	bcf	status,0,c
  9234  001BE0  3211               	rrcf	___ftpack@arg+2,f,c
  9235  001BE2  3210               	rrcf	___ftpack@arg+1,f,c
  9236  001BE4  320F               	rrcf	___ftpack@arg,f,c
  9237  001BE6  D000               	goto	l4641
  9238  001BE8                     l4641:
  9239  001BE8  0E00               	movlw	0
  9240  001BEA  140F               	andwf	___ftpack@arg,w,c
  9241  001BEC  6E14               	movwf	??___ftpack& (0+255),c
  9242  001BEE  0E00               	movlw	0
  9243  001BF0  1410               	andwf	___ftpack@arg+1,w,c
  9244  001BF2  6E15               	movwf	(??___ftpack+1)& (0+255),c
  9245  001BF4  0EFF               	movlw	255
  9246  001BF6  1411               	andwf	___ftpack@arg+2,w,c
  9247  001BF8  6E16               	movwf	(??___ftpack+2)& (0+255),c
  9248  001BFA  5014               	movf	??___ftpack,w,c
  9249  001BFC  1015               	iorwf	??___ftpack+1,w,c
  9250  001BFE  1016               	iorwf	??___ftpack+2,w,c
  9251  001C00  B4D8               	btfsc	status,2,c
  9252  001C02  D008               	goto	l4645
  9253  001C04  D7E5               	goto	l4637
  9254  001C06  D006               	goto	l4645
  9255  001C08                     l4643:
  9256  001C08  0612               	decf	___ftpack@exp,f,c
  9257  001C0A  90D8               	bcf	status,0,c
  9258  001C0C  360F               	rlcf	___ftpack@arg,f,c
  9259  001C0E  3610               	rlcf	___ftpack@arg+1,f,c
  9260  001C10  3611               	rlcf	___ftpack@arg+2,f,c
  9261  001C12  D000               	goto	l4645
  9262  001C14                     l4645:
  9263  001C14  BE10               	btfsc	___ftpack@arg+1,7,c
  9264  001C16  D004               	goto	l1031
  9265  001C18  0E02               	movlw	2
  9266  001C1A  6012               	cpfslt	___ftpack@exp,c
  9267  001C1C  D7F5               	goto	l4643
  9268  001C1E  D000               	goto	l1031
  9269  001C20                     l1031:
  9270  001C20  B012               	btfsc	___ftpack@exp,0,c
  9271  001C22  D002               	goto	l4651
  9272  001C24  9E10               	bcf	___ftpack@arg+1,7,c
  9273  001C26  D000               	goto	l4651
  9274  001C28                     l4651:
  9275  001C28  90D8               	bcf	status,0,c
  9276  001C2A  3212               	rrcf	___ftpack@exp,f,c
  9277  001C2C  5012               	movf	___ftpack@exp,w,c
  9278  001C2E  1211               	iorwf	___ftpack@arg+2,f,c
  9279  001C30  5013               	movf	___ftpack@sign,w,c
  9280  001C32  B4D8               	btfsc	status,2,c
  9281  001C34  D002               	goto	l4657
  9282  001C36  8E11               	bsf	___ftpack@arg+2,7,c
  9283  001C38  D000               	goto	l4657
  9284  001C3A                     l4657:
  9285  001C3A  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  9286  001C3E  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  9287  001C42  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  9288  001C46  D000               	goto	l1020
  9289  001C48                     l1020:
  9290  001C48  0012               	return		;funcret
  9291  001C4A                     __end_of___ftpack:
  9292                           	opt stack 0
  9293                           tblptru	equ	0xFF8
  9294                           tblptrh	equ	0xFF7
  9295                           tblptrl	equ	0xFF6
  9296                           tablat	equ	0xFF5
  9297                           prodl	equ	0xFF3
  9298                           intcon	equ	0xFF2
  9299                           intcon2	equ	0xFF1
  9300                           intcon3	equ	0xFF0
  9301                           postinc0	equ	0xFEE
  9302                           wreg	equ	0xFE8
  9303                           postdec1	equ	0xFE5
  9304                           fsr1l	equ	0xFE1
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _Wait_Half_Second *****************
  9308 ;; Defined at:
  9309 ;;		line 114 in file "utils.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, status,2
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;Total ram usage:        0 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    2
  9330 ;; This function calls:
  9331 ;;		Nothing
  9332 ;; This function is called by:
  9333 ;;		_Wait_One_Second
  9334 ;;		_Wait_One_Second_With_Beep
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text44
  9339  002884                     __ptext44:
  9340                           	opt stack 0
  9341  002884                     _Wait_Half_Second:
  9342                           	opt stack 25
  9343                           
  9344                           ;utils.c: 116: T0CON = 0x03;
  9345                           
  9346                           ;incstack = 0
  9347  002884  0E03               	movlw	3
  9348  002886  6ED5               	movwf	4053,c	;volatile
  9349                           
  9350                           ;utils.c: 117: TMR0L = 0xDB;
  9351  002888  0EDB               	movlw	219
  9352  00288A  6ED6               	movwf	4054,c	;volatile
  9353                           
  9354                           ;utils.c: 118: TMR0H = 0x0B;
  9355  00288C  0E0B               	movlw	11
  9356  00288E  6ED7               	movwf	4055,c	;volatile
  9357                           
  9358                           ;utils.c: 119: INTCONbits.TMR0IF = 0;
  9359  002890  94F2               	bcf	intcon,2,c	;volatile
  9360                           
  9361                           ;utils.c: 120: T0CONbits.TMR0ON = 1;
  9362  002892  8ED5               	bsf	4053,7,c	;volatile
  9363                           
  9364                           ;utils.c: 121: while (INTCONbits.TMR0IF == 0);
  9365  002894  D000               	goto	l445
  9366  002896                     l445:
  9367  002896  A4F2               	btfss	intcon,2,c	;volatile
  9368  002898  D7FE               	goto	l445
  9369                           
  9370                           ;utils.c: 122: T0CONbits.TMR0ON = 0;
  9371  00289A  9ED5               	bcf	4053,7,c	;volatile
  9372  00289C  0012               	return		;funcret
  9373  00289E                     __end_of_Wait_Half_Second:
  9374                           	opt stack 0
  9375                           tblptru	equ	0xFF8
  9376                           tblptrh	equ	0xFF7
  9377                           tblptrl	equ	0xFF6
  9378                           tablat	equ	0xFF5
  9379                           prodl	equ	0xFF3
  9380                           intcon	equ	0xFF2
  9381                           intcon2	equ	0xFF1
  9382                           intcon3	equ	0xFF0
  9383                           postinc0	equ	0xFEE
  9384                           wreg	equ	0xFE8
  9385                           postdec1	equ	0xFE5
  9386                           fsr1l	equ	0xFE1
  9387                           status	equ	0xFD8
  9388                           
  9389 ;; *************** function _Erase_Star *****************
  9390 ;; Defined at:
  9391 ;;		line 304 in file "Main_Screen.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;		None
  9394 ;; Auto vars:     Size  Location     Type
  9395 ;;		None
  9396 ;; Return value:  Size  Location     Type
  9397 ;;		None               void
  9398 ;; Registers used:
  9399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9409 ;;Total ram usage:        0 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    9
  9412 ;; This function calls:
  9413 ;;		_drawtext
  9414 ;;		_strcpy
  9415 ;; This function is called by:
  9416 ;;		_Wait_One_Second
  9417 ;;		_Wait_One_Second_With_Beep
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           	psect	text45
  9422  002682                     __ptext45:
  9423                           	opt stack 0
  9424  002682                     _Erase_Star:
  9425                           	opt stack 18
  9426                           
  9427                           ;Main_Screen.c: 306: strcpy(txt," ");
  9428                           
  9429                           ;incstack = 0
  9430  002682  C047  F00F         	movff	_txt,strcpy@to
  9431  002686  C048  F010         	movff	_txt+1,strcpy@to+1
  9432  00268A  0EFA               	movlw	low STR_13
  9433  00268C  6E11               	movwf	strcpy@from,c
  9434  00268E  0EFF               	movlw	high STR_13
  9435  002690  6E12               	movwf	strcpy@from+1,c
  9436  002692  EC94  F013         	call	_strcpy	;wreg free
  9437                           
  9438                           ;Main_Screen.c: 307: drawtext(120,2,txt,0xFFFF,0x0000,1);
  9439  002696  0E02               	movlw	2
  9440  002698  6E37               	movwf	drawtext@y,c
  9441  00269A  C047  F038         	movff	_txt,drawtext@_text
  9442  00269E  C048  F039         	movff	_txt+1,drawtext@_text+1
  9443  0026A2  0EFF               	movlw	255
  9444  0026A4  6E3B               	movwf	drawtext@color+1,c
  9445  0026A6  683A               	setf	drawtext@color,c
  9446  0026A8  0E00               	movlw	0
  9447  0026AA  6E3D               	movwf	drawtext@bg+1,c
  9448  0026AC  0E00               	movlw	0
  9449  0026AE  6E3C               	movwf	drawtext@bg,c
  9450  0026B0  0E01               	movlw	1
  9451  0026B2  6E3E               	movwf	drawtext@size,c
  9452  0026B4  0E78               	movlw	120
  9453  0026B6  EC24  F00A         	call	_drawtext
  9454  0026BA  0012               	return		;funcret
  9455  0026BC                     __end_of_Erase_Star:
  9456                           	opt stack 0
  9457                           tblptru	equ	0xFF8
  9458                           tblptrh	equ	0xFF7
  9459                           tblptrl	equ	0xFF6
  9460                           tablat	equ	0xFF5
  9461                           prodl	equ	0xFF3
  9462                           intcon	equ	0xFF2
  9463                           intcon2	equ	0xFF1
  9464                           intcon3	equ	0xFF0
  9465                           postinc0	equ	0xFEE
  9466                           wreg	equ	0xFE8
  9467                           postdec1	equ	0xFE5
  9468                           fsr1l	equ	0xFE1
  9469                           status	equ	0xFD8
  9470                           
  9471 ;; *************** function _Draw_Star *****************
  9472 ;; Defined at:
  9473 ;;		line 298 in file "Main_Screen.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;		None
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;		None
  9478 ;; Return value:  Size  Location     Type
  9479 ;;		None               void
  9480 ;; Registers used:
  9481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9491 ;;Total ram usage:        0 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    9
  9494 ;; This function calls:
  9495 ;;		_drawtext
  9496 ;;		_strcpy
  9497 ;; This function is called by:
  9498 ;;		_Wait_One_Second
  9499 ;;		_Wait_One_Second_With_Beep
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           	psect	text46
  9504  0026BC                     __ptext46:
  9505                           	opt stack 0
  9506  0026BC                     _Draw_Star:
  9507                           	opt stack 18
  9508                           
  9509                           ;Main_Screen.c: 300: strcpy(txt,"*");
  9510                           
  9511                           ;incstack = 0
  9512  0026BC  C047  F00F         	movff	_txt,strcpy@to
  9513  0026C0  C048  F010         	movff	_txt+1,strcpy@to+1
  9514  0026C4  0EFC               	movlw	low STR_4
  9515  0026C6  6E11               	movwf	strcpy@from,c
  9516  0026C8  0EFF               	movlw	high STR_4
  9517  0026CA  6E12               	movwf	strcpy@from+1,c
  9518  0026CC  EC94  F013         	call	_strcpy	;wreg free
  9519                           
  9520                           ;Main_Screen.c: 301: drawtext(120,2,txt,0xFFFF,0x0000,1);
  9521  0026D0  0E02               	movlw	2
  9522  0026D2  6E37               	movwf	drawtext@y,c
  9523  0026D4  C047  F038         	movff	_txt,drawtext@_text
  9524  0026D8  C048  F039         	movff	_txt+1,drawtext@_text+1
  9525  0026DC  0EFF               	movlw	255
  9526  0026DE  6E3B               	movwf	drawtext@color+1,c
  9527  0026E0  683A               	setf	drawtext@color,c
  9528  0026E2  0E00               	movlw	0
  9529  0026E4  6E3D               	movwf	drawtext@bg+1,c
  9530  0026E6  0E00               	movlw	0
  9531  0026E8  6E3C               	movwf	drawtext@bg,c
  9532  0026EA  0E01               	movlw	1
  9533  0026EC  6E3E               	movwf	drawtext@size,c
  9534  0026EE  0E78               	movlw	120
  9535  0026F0  EC24  F00A         	call	_drawtext
  9536  0026F4  0012               	return		;funcret
  9537  0026F6                     __end_of_Draw_Star:
  9538                           	opt stack 0
  9539                           tblptru	equ	0xFF8
  9540                           tblptrh	equ	0xFF7
  9541                           tblptrl	equ	0xFF6
  9542                           tablat	equ	0xFF5
  9543                           prodl	equ	0xFF3
  9544                           intcon	equ	0xFF2
  9545                           intcon2	equ	0xFF1
  9546                           intcon3	equ	0xFF0
  9547                           postinc0	equ	0xFEE
  9548                           wreg	equ	0xFE8
  9549                           postdec1	equ	0xFE5
  9550                           fsr1l	equ	0xFE1
  9551                           status	equ	0xFD8
  9552                           
  9553 ;; *************** function _strcpy *****************
  9554 ;; Defined at:
  9555 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;  to              2   14[COMRAM] PTR unsigned char 
  9558 ;;		 -> NULL(0), buffer(31), 
  9559 ;;  from            2   16[COMRAM] PTR const unsigned char 
  9560 ;;		 -> STR_13(2), STR_12(2), STR_11(4), STR_10(4), 
  9561 ;;		 -> STR_9(7), STR_8(10), STR_7(7), STR_6(12), 
  9562 ;;		 -> STR_5(22), STR_4(2), STR_3(3), STR_2(5), 
  9563 ;;		 -> STR_1(6), 
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;  cp              2   18[COMRAM] PTR unsigned char 
  9566 ;;		 -> NULL(0), buffer(31), 
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  2   14[COMRAM] PTR unsigned char 
  9569 ;; Registers used:
  9570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9576 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;Total ram usage:        6 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    2
  9583 ;; This function calls:
  9584 ;;		Nothing
  9585 ;; This function is called by:
  9586 ;;		_Initialize_LCD_Screen
  9587 ;;		_Draw_Star
  9588 ;;		_Erase_Star
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           	psect	text47
  9593  002728                     __ptext47:
  9594                           	opt stack 0
  9595  002728                     _strcpy:
  9596                           	opt stack 24
  9597                           
  9598                           ;incstack = 0
  9599  002728  C00F  F013         	movff	strcpy@to,strcpy@cp
  9600  00272C  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  9601  002730  D005               	goto	l4795
  9602  002732                     l4793:
  9603  002732  4A13               	infsnz	strcpy@cp,f,c
  9604  002734  2A14               	incf	strcpy@cp+1,f,c
  9605  002736  4A11               	infsnz	strcpy@from,f,c
  9606  002738  2A12               	incf	strcpy@from+1,f,c
  9607  00273A  D000               	goto	l4795
  9608  00273C                     l4795:
  9609  00273C  C011  FFF6         	movff	strcpy@from,tblptrl
  9610  002740  C012  FFF7         	movff	strcpy@from+1,tblptrh
  9611  002744                     	if	0	;tblptru may be non-zero
  9612  002744                     	endif
  9613  002744                     	if	0	;tblptru may be non-zero
  9614  002744                     	endif
  9615  002744  C013  FFD9         	movff	strcpy@cp,fsr2l
  9616  002748  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  9617  00274C  0008               	tblrd		*
  9618  00274E  CFF5 FFDF          	movff	tablat,indf2
  9619  002752  50DF               	movf	indf2,w,c
  9620  002754  A4D8               	btfss	status,2,c
  9621  002756  D7ED               	goto	l4793
  9622                           
  9623                           ;	Return value of _strcpy is never used
  9624  002758  0012               	return		;funcret
  9625  00275A                     __end_of_strcpy:
  9626                           	opt stack 0
  9627                           tblptru	equ	0xFF8
  9628                           tblptrh	equ	0xFF7
  9629                           tblptrl	equ	0xFF6
  9630                           tablat	equ	0xFF5
  9631                           prodl	equ	0xFF3
  9632                           intcon	equ	0xFF2
  9633                           intcon2	equ	0xFF1
  9634                           intcon3	equ	0xFF0
  9635                           postinc0	equ	0xFEE
  9636                           wreg	equ	0xFE8
  9637                           postdec1	equ	0xFE5
  9638                           fsr1l	equ	0xFE1
  9639                           indf2	equ	0xFDF
  9640                           fsr2h	equ	0xFDA
  9641                           fsr2l	equ	0xFD9
  9642                           status	equ	0xFD8
  9643                           
  9644 ;; *************** function _drawtext *****************
  9645 ;; Defined at:
  9646 ;;		line 425 in file "ST7735_TFT.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  x               1    wreg     unsigned char 
  9649 ;;  y               1   54[COMRAM] unsigned char 
  9650 ;;  _text           2   55[COMRAM] PTR unsigned char 
  9651 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9652 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9653 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9654 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9655 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9656 ;;  color           2   57[COMRAM] unsigned int 
  9657 ;;  bg              2   59[COMRAM] unsigned int 
  9658 ;;  size            1   61[COMRAM] unsigned char 
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;  x               1    0[BANK0 ] unsigned char 
  9661 ;;  i               2    3[BANK0 ] unsigned int 
  9662 ;;  textsize        2    1[BANK0 ] unsigned int 
  9663 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  9664 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;		None               void
  9667 ;; Registers used:
  9668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9674 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;Total ram usage:       17 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    8
  9681 ;; This function calls:
  9682 ;;		_drawChar
  9683 ;;		_strlen
  9684 ;; This function is called by:
  9685 ;;		_Initialize_LCD_Screen
  9686 ;;		_update_LCD_PED_Count
  9687 ;;		_update_LCD_count
  9688 ;;		_update_LCD_misc
  9689 ;;		_Draw_Star
  9690 ;;		_Erase_Star
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           	psect	text48
  9695  001448                     __ptext48:
  9696                           	opt stack 0
  9697  001448                     _drawtext:
  9698                           	opt stack 19
  9699                           
  9700                           ;incstack = 0
  9701                           ;drawtext@x stored from wreg
  9702  001448  0100               	movlb	0	; () banked
  9703  00144A  6FCC               	movwf	drawtext@x& (0+255),b
  9704                           
  9705                           ; BSR set to: 0
  9706                           ;ST7735_TFT.c: 427: unsigned char cursor_x, cursor_y;
  9707                           ;ST7735_TFT.c: 428: unsigned int textsize, i;
  9708                           ;ST7735_TFT.c: 429: cursor_x = x, cursor_y = y;
  9709  00144C  C0CC  F0D2         	movff	drawtext@x,drawtext@cursor_x
  9710                           
  9711                           ; BSR set to: 0
  9712  001450  C037  F0D1         	movff	drawtext@y,drawtext@cursor_y
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;ST7735_TFT.c: 430: textsize = strlen(_text);
  9716  001454  C038  F00F         	movff	drawtext@_text,strlen@s
  9717  001458  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  9718  00145C  EC04  F013         	call	_strlen	;wreg free
  9719  001460  C00F  F0CD         	movff	?_strlen,drawtext@textsize
  9720  001464  C010  F0CE         	movff	?_strlen+1,drawtext@textsize+1
  9721                           
  9722                           ;ST7735_TFT.c: 431: for(i = 0; i < textsize; i++){
  9723  001468  0E00               	movlw	0
  9724  00146A  0100               	movlb	0	; () banked
  9725  00146C  6FD0               	movwf	(drawtext@i+1)& (0+255),b
  9726  00146E  0E00               	movlw	0
  9727  001470  6FCF               	movwf	drawtext@i& (0+255),b
  9728  001472  D064               	goto	l4831
  9729  001474                     l4805:
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;ST7735_TFT.c: 432: if(wrap && ((cursor_x + size * 5) > 128)){
  9733  001474  505D               	movf	_wrap,w,c
  9734  001476  B4D8               	btfsc	status,2,c
  9735  001478  D034               	goto	l4821
  9736                           
  9737                           ; BSR set to: 0
  9738  00147A  503E               	movf	drawtext@size,w,c
  9739  00147C  0D05               	mullw	5
  9740  00147E  0100               	movlb	0	; () banked
  9741  001480  51D2               	movf	drawtext@cursor_x& (0+255),w,b
  9742  001482  6E3F               	movwf	??_drawtext& (0+255),c
  9743  001484  6A40               	clrf	(??_drawtext+1)& (0+255),c
  9744  001486  50F3               	movf	prodl,w,c
  9745  001488  263F               	addwf	??_drawtext,f,c
  9746  00148A  50F4               	movf	prodh,w,c
  9747  00148C  2240               	addwfc	??_drawtext+1,f,c
  9748  00148E  BE40               	btfsc	??_drawtext+1,7,c
  9749  001490  D028               	goto	l4821
  9750  001492  5040               	movf	??_drawtext+1,w,c
  9751  001494  E104               	bnz	u3490
  9752  001496  0E81               	movlw	129
  9753  001498  5C3F               	subwf	??_drawtext,w,c
  9754  00149A  A0D8               	btfss	status,0,c
  9755  00149C  D022               	goto	l4821
  9756  00149E                     u3490:
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;ST7735_TFT.c: 433: cursor_x = 0;
  9760  00149E  0E00               	movlw	0
  9761  0014A0  0100               	movlb	0	; () banked
  9762  0014A2  6FD2               	movwf	drawtext@cursor_x& (0+255),b
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;ST7735_TFT.c: 434: cursor_y = cursor_y + size * 7 + 3 ;
  9766  0014A4  503E               	movf	drawtext@size,w,c
  9767  0014A6  0D07               	mullw	7
  9768  0014A8  50F3               	movf	prodl,w,c
  9769  0014AA  0100               	movlb	0	; () banked
  9770  0014AC  25D1               	addwf	drawtext@cursor_y& (0+255),w,b
  9771  0014AE  0F03               	addlw	3
  9772  0014B0  0100               	movlb	0	; () banked
  9773  0014B2  6FD1               	movwf	drawtext@cursor_y& (0+255),b
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;ST7735_TFT.c: 435: if(cursor_y > 160) cursor_y = 160;
  9777  0014B4  0EA0               	movlw	160
  9778  0014B6  0100               	movlb	0	; () banked
  9779  0014B8  65D1               	cpfsgt	drawtext@cursor_y& (0+255),b
  9780  0014BA  D004               	goto	l4817
  9781                           
  9782                           ; BSR set to: 0
  9783  0014BC  0EA0               	movlw	160
  9784  0014BE  0100               	movlb	0	; () banked
  9785  0014C0  6FD1               	movwf	drawtext@cursor_y& (0+255),b
  9786  0014C2  D000               	goto	l4817
  9787  0014C4                     l4817:
  9788                           
  9789                           ; BSR set to: 0
  9790                           ;ST7735_TFT.c: 436: if(_text[i] == 0x20) goto _skip; }
  9791  0014C4  0100               	movlb	0	; () banked
  9792  0014C6  51CF               	movf	drawtext@i& (0+255),w,b
  9793  0014C8  2438               	addwf	drawtext@_text,w,c
  9794  0014CA  6ED9               	movwf	fsr2l,c
  9795  0014CC  0100               	movlb	0	; () banked
  9796  0014CE  51D0               	movf	(drawtext@i+1)& (0+255),w,b
  9797  0014D0  2039               	addwfc	drawtext@_text+1,w,c
  9798  0014D2  6EDA               	movwf	fsr2h,c
  9799  0014D4  0E20               	movlw	32
  9800  0014D6  18DE               	xorwf	postinc2,w,c
  9801  0014D8  B4D8               	btfsc	status,2,c
  9802  0014DA  D02C               	goto	l4829
  9803  0014DC  D002               	goto	l4821
  9804                           
  9805                           ; BSR set to: 0
  9806  0014DE  D02A               	goto	l4829
  9807                           
  9808                           ; BSR set to: 0
  9809  0014E0  D000               	goto	l4821
  9810  0014E2                     l4821:
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;ST7735_TFT.c: 437: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  9814  0014E2  C0D1  F02C         	movff	drawtext@cursor_y,drawChar@y
  9815  0014E6  0100               	movlb	0	; () banked
  9816  0014E8  51CF               	movf	drawtext@i& (0+255),w,b
  9817  0014EA  2438               	addwf	drawtext@_text,w,c
  9818  0014EC  6ED9               	movwf	fsr2l,c
  9819  0014EE  0100               	movlb	0	; () banked
  9820  0014F0  51D0               	movf	(drawtext@i+1)& (0+255),w,b
  9821  0014F2  2039               	addwfc	drawtext@_text+1,w,c
  9822  0014F4  6EDA               	movwf	fsr2h,c
  9823  0014F6  50DF               	movf	indf2,w,c
  9824  0014F8  6E2D               	movwf	drawChar@c,c
  9825  0014FA  C03A  F02E         	movff	drawtext@color,drawChar@color
  9826  0014FE  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  9827  001502  C03C  F030         	movff	drawtext@bg,drawChar@bg
  9828  001506  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  9829  00150A  C03E  F032         	movff	drawtext@size,drawChar@size
  9830  00150E  0100               	movlb	0	; () banked
  9831  001510  51D2               	movf	drawtext@cursor_x& (0+255),w,b
  9832  001512  EC55  F008         	call	_drawChar
  9833                           
  9834                           ;ST7735_TFT.c: 438: cursor_x = cursor_x + size * 6;
  9835  001516  503E               	movf	drawtext@size,w,c
  9836  001518  0D06               	mullw	6
  9837  00151A  50F3               	movf	prodl,w,c
  9838  00151C  0100               	movlb	0	; () banked
  9839  00151E  25D2               	addwf	drawtext@cursor_x& (0+255),w,b
  9840  001520  0100               	movlb	0	; () banked
  9841  001522  6FD2               	movwf	drawtext@cursor_x& (0+255),b
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;ST7735_TFT.c: 439: if(cursor_x > 128) cursor_x = 128;
  9845  001524  0E80               	movlw	128
  9846  001526  0100               	movlb	0	; () banked
  9847  001528  65D2               	cpfsgt	drawtext@cursor_x& (0+255),b
  9848  00152A  D004               	goto	l4829
  9849                           
  9850                           ; BSR set to: 0
  9851  00152C  0E80               	movlw	128
  9852  00152E  0100               	movlb	0	; () banked
  9853  001530  6FD2               	movwf	drawtext@cursor_x& (0+255),b
  9854                           
  9855                           ; BSR set to: 0
  9856  001532  D000               	goto	l4829
  9857  001534                     l4829:
  9858                           
  9859                           ; BSR set to: 0
  9860  001534  0100               	movlb	0	; () banked
  9861  001536  4BCF               	infsnz	drawtext@i& (0+255),f,b
  9862  001538  2BD0               	incf	(drawtext@i+1)& (0+255),f,b
  9863  00153A  D000               	goto	l4831
  9864  00153C                     l4831:
  9865                           
  9866                           ; BSR set to: 0
  9867  00153C  0100               	movlb	0	; () banked
  9868  00153E  51CD               	movf	drawtext@textsize& (0+255),w,b
  9869  001540  0100               	movlb	0	; () banked
  9870  001542  5DCF               	subwf	drawtext@i& (0+255),w,b
  9871  001544  0100               	movlb	0	; () banked
  9872  001546  51CE               	movf	(drawtext@textsize+1)& (0+255),w,b
  9873  001548  0100               	movlb	0	; () banked
  9874  00154A  59D0               	subwfb	(drawtext@i+1)& (0+255),w,b
  9875  00154C  A0D8               	btfss	status,0,c
  9876  00154E  D792               	goto	l4805
  9877                           
  9878                           ; BSR set to: 0
  9879                           
  9880                           ; BSR set to: 0
  9881  001550  0012               	return		;funcret
  9882  001552                     __end_of_drawtext:
  9883                           	opt stack 0
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon2	equ	0xFF1
  9892                           intcon3	equ	0xFF0
  9893                           postinc0	equ	0xFEE
  9894                           wreg	equ	0xFE8
  9895                           postdec1	equ	0xFE5
  9896                           fsr1l	equ	0xFE1
  9897                           indf2	equ	0xFDF
  9898                           postinc2	equ	0xFDE
  9899                           fsr2h	equ	0xFDA
  9900                           fsr2l	equ	0xFD9
  9901                           status	equ	0xFD8
  9902                           
  9903 ;; *************** function _strlen *****************
  9904 ;; Defined at:
  9905 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;  s               2   14[COMRAM] PTR const unsigned char 
  9908 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9909 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9910 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9911 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9912 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  9915 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9916 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9917 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9918 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9919 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  2   14[COMRAM] unsigned int 
  9922 ;; Registers used:
  9923 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9929 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;Total ram usage:        6 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:    2
  9936 ;; This function calls:
  9937 ;;		Nothing
  9938 ;; This function is called by:
  9939 ;;		_drawtext
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           	psect	text49
  9944  002608                     __ptext49:
  9945                           	opt stack 0
  9946  002608                     _strlen:
  9947                           	opt stack 24
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;incstack = 0
  9951  002608  C00F  F013         	movff	strlen@s,strlen@cp
  9952  00260C  C010  F014         	movff	strlen@s+1,strlen@cp+1
  9953  002610  D003               	goto	l4727
  9954  002612                     l4725:
  9955  002612  4A13               	infsnz	strlen@cp,f,c
  9956  002614  2A14               	incf	strlen@cp+1,f,c
  9957  002616  D000               	goto	l4727
  9958  002618                     l4727:
  9959  002618  C013  FFD9         	movff	strlen@cp,fsr2l
  9960  00261C  C014  FFDA         	movff	strlen@cp+1,fsr2h
  9961  002620  50DF               	movf	indf2,w,c
  9962  002622  A4D8               	btfss	status,2,c
  9963  002624  D7F6               	goto	l4725
  9964  002626  C00F  F011         	movff	strlen@s,??_strlen
  9965  00262A  C010  F012         	movff	strlen@s+1,??_strlen+1
  9966  00262E  1E11               	comf	??_strlen,f,c
  9967  002630  1E12               	comf	??_strlen+1,f,c
  9968  002632  4A11               	infsnz	??_strlen,f,c
  9969  002634  2A12               	incf	??_strlen+1,f,c
  9970  002636  5013               	movf	strlen@cp,w,c
  9971  002638  2411               	addwf	??_strlen,w,c
  9972  00263A  6E0F               	movwf	?_strlen,c
  9973  00263C  5014               	movf	strlen@cp+1,w,c
  9974  00263E  2012               	addwfc	??_strlen+1,w,c
  9975  002640  6E10               	movwf	?_strlen+1,c
  9976  002642  D000               	goto	l1269
  9977  002644                     l1269:
  9978  002644  0012               	return		;funcret
  9979  002646                     __end_of_strlen:
  9980                           	opt stack 0
  9981                           tblptru	equ	0xFF8
  9982                           tblptrh	equ	0xFF7
  9983                           tblptrl	equ	0xFF6
  9984                           tablat	equ	0xFF5
  9985                           prodh	equ	0xFF4
  9986                           prodl	equ	0xFF3
  9987                           intcon	equ	0xFF2
  9988                           intcon2	equ	0xFF1
  9989                           intcon3	equ	0xFF0
  9990                           postinc0	equ	0xFEE
  9991                           wreg	equ	0xFE8
  9992                           postdec1	equ	0xFE5
  9993                           fsr1l	equ	0xFE1
  9994                           indf2	equ	0xFDF
  9995                           postinc2	equ	0xFDE
  9996                           fsr2h	equ	0xFDA
  9997                           fsr2l	equ	0xFD9
  9998                           status	equ	0xFD8
  9999                           
 10000 ;; *************** function _drawChar *****************
 10001 ;; Defined at:
 10002 ;;		line 398 in file "ST7735_TFT.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;  x               1    wreg     unsigned char 
 10005 ;;  y               1   43[COMRAM] unsigned char 
 10006 ;;  c               1   44[COMRAM] unsigned char 
 10007 ;;  color           2   45[COMRAM] unsigned int 
 10008 ;;  bg              2   47[COMRAM] unsigned int 
 10009 ;;  size            1   49[COMRAM] unsigned char 
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;  x               1   51[COMRAM] unsigned char 
 10012 ;;  line            1   50[COMRAM] unsigned char 
 10013 ;;  i               1   53[COMRAM] unsigned char 
 10014 ;;  j               1   52[COMRAM] unsigned char 
 10015 ;; Return value:  Size  Location     Type
 10016 ;;		None               void
 10017 ;; Registers used:
 10018 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10024 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;Total ram usage:       11 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    7
 10031 ;; This function calls:
 10032 ;;		___wmul
 10033 ;;		_drawPixel
 10034 ;;		_fillRect
 10035 ;; This function is called by:
 10036 ;;		_drawtext
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text50
 10041  0010AA                     __ptext50:
 10042                           	opt stack 0
 10043  0010AA                     _drawChar:
 10044                           	opt stack 19
 10045                           
 10046                           ;incstack = 0
 10047                           ;drawChar@x stored from wreg
 10048  0010AA  6E34               	movwf	drawChar@x,c
 10049                           
 10050                           ;ST7735_TFT.c: 400: char i, j;
 10051                           ;ST7735_TFT.c: 401: if((x >= 128) || (y >= 160))
 10052  0010AC  0E80               	movlw	128
 10053  0010AE  6034               	cpfslt	drawChar@x,c
 10054  0010B0  D0A6               	goto	l244
 10055  0010B2  0E9F               	movlw	159
 10056  0010B4  642C               	cpfsgt	drawChar@y,c
 10057  0010B6  D001               	goto	l4673
 10058                           
 10059                           ;ST7735_TFT.c: 402: return;
 10060  0010B8  D0A2               	goto	l244
 10061  0010BA                     l4673:
 10062                           
 10063                           ;ST7735_TFT.c: 403: if(size < 1) size = 1;
 10064  0010BA  5032               	movf	drawChar@size,w,c
 10065  0010BC  A4D8               	btfss	status,2,c
 10066  0010BE  D003               	goto	l4677
 10067  0010C0  0E01               	movlw	1
 10068  0010C2  6E32               	movwf	drawChar@size,c
 10069  0010C4  D000               	goto	l4677
 10070  0010C6                     l4677:
 10071                           
 10072                           ;ST7735_TFT.c: 404: if((c < ' ') || (c > '~'))
 10073  0010C6  0E1F               	movlw	31
 10074  0010C8  642D               	cpfsgt	drawChar@c,c
 10075  0010CA  D004               	goto	l4681
 10076  0010CC  0E7E               	movlw	126
 10077  0010CE  642D               	cpfsgt	drawChar@c,c
 10078  0010D0  D003               	goto	l246
 10079  0010D2  D000               	goto	l4681
 10080  0010D4                     l4681:
 10081                           
 10082                           ;ST7735_TFT.c: 405: c = '?';
 10083  0010D4  0E3F               	movlw	63
 10084  0010D6  6E2D               	movwf	drawChar@c,c
 10085  0010D8                     l246:
 10086                           
 10087                           ;ST7735_TFT.c: 406: for(i=0; i<5; i++ ) {
 10088  0010D8  0E00               	movlw	0
 10089  0010DA  6E36               	movwf	drawChar@i,c
 10090  0010DC                     l4683:
 10091  0010DC  0E04               	movlw	4
 10092  0010DE  6436               	cpfsgt	drawChar@i,c
 10093  0010E0  D001               	goto	l4687
 10094  0010E2  D08D               	goto	l244
 10095  0010E4                     l4687:
 10096                           
 10097                           ;ST7735_TFT.c: 407: unsigned char line;
 10098                           ;ST7735_TFT.c: 408: if(c < 'S')
 10099  0010E4  0E53               	movlw	83
 10100  0010E6  602D               	cpfslt	drawChar@c,c
 10101  0010E8  D015               	goto	l4691
 10102                           
 10103                           ;ST7735_TFT.c: 409: line = font[(c - 32)*5 + i];
 10104  0010EA  0EE0               	movlw	224
 10105  0010EC  242D               	addwf	drawChar@c,w,c
 10106  0010EE  6E0F               	movwf	___wmul@multiplier,c
 10107  0010F0  6A10               	clrf	___wmul@multiplier+1,c
 10108  0010F2  0EFF               	movlw	255
 10109  0010F4  2210               	addwfc	___wmul@multiplier+1,f,c
 10110  0010F6  0E00               	movlw	0
 10111  0010F8  6E12               	movwf	___wmul@multiplicand+1,c
 10112  0010FA  0E05               	movlw	5
 10113  0010FC  6E11               	movwf	___wmul@multiplicand,c
 10114  0010FE  ECEF  F013         	call	___wmul	;wreg free
 10115  001102  5036               	movf	drawChar@i,w,c
 10116  001104  260F               	addwf	?___wmul,f,c
 10117  001106  0E00               	movlw	0
 10118  001108  2210               	addwfc	?___wmul+1,f,c
 10119  00110A  0ECF               	movlw	low _font
 10120  00110C  240F               	addwf	?___wmul,w,c
 10121  00110E  6EF6               	movwf	tblptrl,c
 10122  001110  0EFD               	movlw	high _font
 10123  001112  D014               	goto	L18
 10124  001114                     l4691:
 10125                           
 10126                           ;ST7735_TFT.c: 410: else
 10127                           ;ST7735_TFT.c: 411: line = font2[(c - 'S')*5 + i];
 10128  001114  0EAD               	movlw	173
 10129  001116  242D               	addwf	drawChar@c,w,c
 10130  001118  6E0F               	movwf	___wmul@multiplier,c
 10131  00111A  6A10               	clrf	___wmul@multiplier+1,c
 10132  00111C  0EFF               	movlw	255
 10133  00111E  2210               	addwfc	___wmul@multiplier+1,f,c
 10134  001120  0E00               	movlw	0
 10135  001122  6E12               	movwf	___wmul@multiplicand+1,c
 10136  001124  0E05               	movlw	5
 10137  001126  6E11               	movwf	___wmul@multiplicand,c
 10138  001128  ECEF  F013         	call	___wmul	;wreg free
 10139  00112C  5036               	movf	drawChar@i,w,c
 10140  00112E  260F               	addwf	?___wmul,f,c
 10141  001130  0E00               	movlw	0
 10142  001132  2210               	addwfc	?___wmul+1,f,c
 10143  001134  0ECE               	movlw	low _font2
 10144  001136  240F               	addwf	?___wmul,w,c
 10145  001138  6EF6               	movwf	tblptrl,c
 10146  00113A  0EFE               	movlw	high _font2
 10147  00113C                     L18:
 10148  00113C  2010               	addwfc	?___wmul+1,w,c
 10149  00113E  6EF7               	movwf	tblptrh,c
 10150  001140                     	if	0	;There are less than 3 active tblptr bytes
 10151  001140                     	endif
 10152  001140  0008               	tblrd		*
 10153  001142  CFF5 F033          	movff	tablat,drawChar@line
 10154  001146  D000               	goto	l4693
 10155  001148                     l4693:
 10156                           
 10157                           ;ST7735_TFT.c: 412: for(j=0; j<7; j++, line >>= 1) {
 10158  001148  0E00               	movlw	0
 10159  00114A  6E35               	movwf	drawChar@j,c
 10160  00114C                     l4695:
 10161  00114C  0E06               	movlw	6
 10162  00114E  6435               	cpfsgt	drawChar@j,c
 10163  001150  D001               	goto	l253
 10164  001152  D053               	goto	l4719
 10165  001154                     l253:
 10166                           
 10167                           ;ST7735_TFT.c: 413: if(line & 0x01) {
 10168  001154  A033               	btfss	drawChar@line,0,c
 10169  001156  D023               	goto	l4705
 10170                           
 10171                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, color);
 10172  001158  0432               	decf	drawChar@size,w,c
 10173  00115A  A4D8               	btfss	status,2,c
 10174  00115C  D00C               	goto	l4703
 10175  00115E  502C               	movf	drawChar@y,w,c
 10176  001160  2435               	addwf	drawChar@j,w,c
 10177  001162  6E16               	movwf	drawPixel@y,c
 10178  001164  C02E  F017         	movff	drawChar@color,drawPixel@color
 10179  001168  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
 10180  00116C  5034               	movf	drawChar@x,w,c
 10181  00116E  2436               	addwf	drawChar@i,w,c
 10182  001170  ECAD  F013         	call	_drawPixel
 10183  001174  D03E               	goto	l4713
 10184  001176                     l4703:
 10185                           
 10186                           ;ST7735_TFT.c: 415: else fillRect(x+(i*size), y+(j*size), size, size, color);
 10187  001176  5035               	movf	drawChar@j,w,c
 10188  001178  0232               	mulwf	drawChar@size,c
 10189  00117A  50F3               	movf	prodl,w,c
 10190  00117C  242C               	addwf	drawChar@y,w,c
 10191  00117E  6E21               	movwf	fillRect@y,c
 10192  001180  C032  F022         	movff	drawChar@size,fillRect@w
 10193  001184  C032  F023         	movff	drawChar@size,fillRect@h
 10194  001188  C02E  F024         	movff	drawChar@color,fillRect@color
 10195  00118C  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
 10196  001190  5036               	movf	drawChar@i,w,c
 10197  001192  0232               	mulwf	drawChar@size,c
 10198  001194  50F3               	movf	prodl,w,c
 10199  001196  2434               	addwf	drawChar@x,w,c
 10200  001198  EC38  F012         	call	_fillRect
 10201                           
 10202                           ;ST7735_TFT.c: 416: }
 10203  00119C  D02A               	goto	l4713
 10204  00119E                     l4705:
 10205                           
 10206                           ;ST7735_TFT.c: 417: else if(bg != color) {
 10207  00119E  502E               	movf	drawChar@color,w,c
 10208  0011A0  1830               	xorwf	drawChar@bg,w,c
 10209  0011A2  E104               	bnz	u3360
 10210  0011A4  502F               	movf	drawChar@color+1,w,c
 10211  0011A6  1831               	xorwf	drawChar@bg+1,w,c
 10212  0011A8  B4D8               	btfsc	status,2,c
 10213  0011AA  D023               	goto	l4713
 10214  0011AC                     u3360:
 10215                           
 10216                           ;ST7735_TFT.c: 418: if(size == 1) drawPixel(x+i, y+j, bg);
 10217  0011AC  0432               	decf	drawChar@size,w,c
 10218  0011AE  A4D8               	btfss	status,2,c
 10219  0011B0  D00C               	goto	l4711
 10220  0011B2  502C               	movf	drawChar@y,w,c
 10221  0011B4  2435               	addwf	drawChar@j,w,c
 10222  0011B6  6E16               	movwf	drawPixel@y,c
 10223  0011B8  C030  F017         	movff	drawChar@bg,drawPixel@color
 10224  0011BC  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
 10225  0011C0  5034               	movf	drawChar@x,w,c
 10226  0011C2  2436               	addwf	drawChar@i,w,c
 10227  0011C4  ECAD  F013         	call	_drawPixel
 10228  0011C8  D014               	goto	l4713
 10229  0011CA                     l4711:
 10230                           
 10231                           ;ST7735_TFT.c: 419: else fillRect(x+i*size, y+j*size, size, size, bg);
 10232  0011CA  5035               	movf	drawChar@j,w,c
 10233  0011CC  0232               	mulwf	drawChar@size,c
 10234  0011CE  50F3               	movf	prodl,w,c
 10235  0011D0  242C               	addwf	drawChar@y,w,c
 10236  0011D2  6E21               	movwf	fillRect@y,c
 10237  0011D4  C032  F022         	movff	drawChar@size,fillRect@w
 10238  0011D8  C032  F023         	movff	drawChar@size,fillRect@h
 10239  0011DC  C030  F024         	movff	drawChar@bg,fillRect@color
 10240  0011E0  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
 10241  0011E4  5036               	movf	drawChar@i,w,c
 10242  0011E6  0232               	mulwf	drawChar@size,c
 10243  0011E8  50F3               	movf	prodl,w,c
 10244  0011EA  2434               	addwf	drawChar@x,w,c
 10245  0011EC  EC38  F012         	call	_fillRect
 10246  0011F0  D000               	goto	l4713
 10247  0011F2                     l4713:
 10248  0011F2  2A35               	incf	drawChar@j,f,c
 10249  0011F4  90D8               	bcf	status,0,c
 10250  0011F6  3233               	rrcf	drawChar@line,f,c
 10251  0011F8  D7A9               	goto	l4695
 10252  0011FA                     l4719:
 10253  0011FA  2A36               	incf	drawChar@i,f,c
 10254  0011FC  D76F               	goto	l4683
 10255  0011FE                     l244:
 10256  0011FE  0012               	return		;funcret
 10257  001200                     __end_of_drawChar:
 10258                           	opt stack 0
 10259                           tblptru	equ	0xFF8
 10260                           tblptrh	equ	0xFF7
 10261                           tblptrl	equ	0xFF6
 10262                           tablat	equ	0xFF5
 10263                           prodh	equ	0xFF4
 10264                           prodl	equ	0xFF3
 10265                           intcon	equ	0xFF2
 10266                           intcon2	equ	0xFF1
 10267                           intcon3	equ	0xFF0
 10268                           postinc0	equ	0xFEE
 10269                           wreg	equ	0xFE8
 10270                           postdec1	equ	0xFE5
 10271                           fsr1l	equ	0xFE1
 10272                           indf2	equ	0xFDF
 10273                           postinc2	equ	0xFDE
 10274                           fsr2h	equ	0xFDA
 10275                           fsr2l	equ	0xFD9
 10276                           status	equ	0xFD8
 10277                           
 10278 ;; *************** function _fillRect *****************
 10279 ;; Defined at:
 10280 ;;		line 388 in file "ST7735_TFT.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;  x               1    wreg     unsigned char 
 10283 ;;  y               1   32[COMRAM] unsigned char 
 10284 ;;  w               1   33[COMRAM] unsigned char 
 10285 ;;  h               1   34[COMRAM] unsigned char 
 10286 ;;  color           2   35[COMRAM] unsigned int 
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  x               1   40[COMRAM] unsigned char 
 10289 ;;  i               2   41[COMRAM] int 
 10290 ;; Return value:  Size  Location     Type
 10291 ;;		None               void
 10292 ;; Registers used:
 10293 ;;		wreg, status,2, status,0, cstack
 10294 ;; Tracked objects:
 10295 ;;		On entry : 0/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10299 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10303 ;;Total ram usage:       11 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:    6
 10306 ;; This function calls:
 10307 ;;		_drawFastVLine
 10308 ;; This function is called by:
 10309 ;;		_drawChar
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           	psect	text51
 10314  002470                     __ptext51:
 10315                           	opt stack 0
 10316  002470                     _fillRect:
 10317                           	opt stack 19
 10318                           
 10319                           ;incstack = 0
 10320                           ;fillRect@x stored from wreg
 10321  002470  6E29               	movwf	fillRect@x,c
 10322                           
 10323                           ;ST7735_TFT.c: 390: signed int i;
 10324                           ;ST7735_TFT.c: 392: for (i = x; i < x + w; i++)
 10325  002472  C029  F02A         	movff	fillRect@x,fillRect@i
 10326  002476  6A2B               	clrf	fillRect@i+1,c
 10327  002478  D00E               	goto	l4617
 10328  00247A                     l4613:
 10329                           
 10330                           ;ST7735_TFT.c: 393: {
 10331                           ;ST7735_TFT.c: 394: drawFastVLine(i, y, h, color);
 10332  00247A  C021  F016         	movff	fillRect@y,drawFastVLine@y
 10333  00247E  C023  F017         	movff	fillRect@h,drawFastVLine@h
 10334  002482  C024  F018         	movff	fillRect@color,drawFastVLine@color
 10335  002486  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
 10336  00248A  502A               	movf	fillRect@i,w,c
 10337  00248C  ECFA  F00F         	call	_drawFastVLine
 10338  002490  4A2A               	infsnz	fillRect@i,f,c
 10339  002492  2A2B               	incf	fillRect@i+1,f,c
 10340  002494  D000               	goto	l4617
 10341  002496                     l4617:
 10342  002496  5022               	movf	fillRect@w,w,c
 10343  002498  C029  F026         	movff	fillRect@x,??_fillRect
 10344  00249C  6A27               	clrf	(??_fillRect+1)& (0+255),c
 10345  00249E  2626               	addwf	??_fillRect,f,c
 10346  0024A0  0E00               	movlw	0
 10347  0024A2  2227               	addwfc	??_fillRect+1,f,c
 10348  0024A4  5026               	movf	??_fillRect,w,c
 10349  0024A6  5C2A               	subwf	fillRect@i,w,c
 10350  0024A8  502B               	movf	fillRect@i+1,w,c
 10351  0024AA  0A80               	xorlw	128
 10352  0024AC  6E28               	movwf	(??_fillRect+2)& (0+255),c
 10353  0024AE  5027               	movf	??_fillRect+1,w,c
 10354  0024B0  0A80               	xorlw	128
 10355  0024B2  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
 10356  0024B4  A0D8               	btfss	status,0,c
 10357  0024B6  D7E1               	goto	l4613
 10358  0024B8  0012               	return		;funcret
 10359  0024BA                     __end_of_fillRect:
 10360                           	opt stack 0
 10361                           tblptru	equ	0xFF8
 10362                           tblptrh	equ	0xFF7
 10363                           tblptrl	equ	0xFF6
 10364                           tablat	equ	0xFF5
 10365                           prodh	equ	0xFF4
 10366                           prodl	equ	0xFF3
 10367                           intcon	equ	0xFF2
 10368                           intcon2	equ	0xFF1
 10369                           intcon3	equ	0xFF0
 10370                           postinc0	equ	0xFEE
 10371                           wreg	equ	0xFE8
 10372                           postdec1	equ	0xFE5
 10373                           fsr1l	equ	0xFE1
 10374                           indf2	equ	0xFDF
 10375                           postinc2	equ	0xFDE
 10376                           fsr2h	equ	0xFDA
 10377                           fsr2l	equ	0xFD9
 10378                           status	equ	0xFD8
 10379                           
 10380 ;; *************** function _drawFastVLine *****************
 10381 ;; Defined at:
 10382 ;;		line 367 in file "ST7735_TFT.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;  x               1    wreg     unsigned char 
 10385 ;;  y               1   21[COMRAM] unsigned char 
 10386 ;;  h               1   22[COMRAM] unsigned char 
 10387 ;;  color           2   23[COMRAM] unsigned int 
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  x               1   31[COMRAM] unsigned char 
 10390 ;;  lo              1   30[COMRAM] unsigned char 
 10391 ;;  hi              1   29[COMRAM] unsigned char 
 10392 ;; Return value:  Size  Location     Type
 10393 ;;		None               void
 10394 ;; Registers used:
 10395 ;;		wreg, status,2, status,0, cstack
 10396 ;; Tracked objects:
 10397 ;;		On entry : 0/0
 10398 ;;		On exit  : 0/0
 10399 ;;		Unchanged: 0/0
 10400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10401 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10403 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;Total ram usage:       11 bytes
 10406 ;; Hardware stack levels used:    1
 10407 ;; Hardware stack levels required when called:    5
 10408 ;; This function calls:
 10409 ;;		_setAddrWindow
 10410 ;;		_spiwrite
 10411 ;; This function is called by:
 10412 ;;		_fillRect
 10413 ;;		_fillCircleHelper
 10414 ;;		_fillCircle
 10415 ;;		_drawRect
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           	psect	text52
 10420  001FF4                     __ptext52:
 10421                           	opt stack 0
 10422  001FF4                     _drawFastVLine:
 10423                           	opt stack 19
 10424                           
 10425                           ;incstack = 0
 10426                           ;drawFastVLine@x stored from wreg
 10427  001FF4  6E20               	movwf	drawFastVLine@x,c
 10428                           
 10429                           ;ST7735_TFT.c: 369: unsigned char hi, lo;
 10430                           ;ST7735_TFT.c: 370: if((x >= 128) || (y >= 160))
 10431  001FF6  0E80               	movlw	128
 10432  001FF8  6020               	cpfslt	drawFastVLine@x,c
 10433  001FFA  D03F               	goto	l228
 10434  001FFC  0E9F               	movlw	159
 10435  001FFE  6416               	cpfsgt	drawFastVLine@y,c
 10436  002000  D001               	goto	l4583
 10437                           
 10438                           ;ST7735_TFT.c: 371: return;
 10439  002002  D03B               	goto	l228
 10440  002004                     l4583:
 10441                           
 10442                           ;ST7735_TFT.c: 372: if((y + h - 1) >= 160)
 10443  002004  0EFF               	movlw	255
 10444  002006  6E1A               	movwf	??_drawFastVLine& (0+255),c
 10445  002008  0EFF               	movlw	255
 10446  00200A  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 10447  00200C  5017               	movf	drawFastVLine@h,w,c
 10448  00200E  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 10449  002012  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 10450  002014  261C               	addwf	??_drawFastVLine+2,f,c
 10451  002016  0E00               	movlw	0
 10452  002018  221D               	addwfc	??_drawFastVLine+3,f,c
 10453  00201A  501A               	movf	??_drawFastVLine,w,c
 10454  00201C  261C               	addwf	??_drawFastVLine+2,f,c
 10455  00201E  501B               	movf	??_drawFastVLine+1,w,c
 10456  002020  221D               	addwfc	??_drawFastVLine+3,f,c
 10457  002022  BE1D               	btfsc	??_drawFastVLine+3,7,c
 10458  002024  D00B               	goto	l4587
 10459  002026  501D               	movf	??_drawFastVLine+3,w,c
 10460  002028  E104               	bnz	u3120
 10461  00202A  0EA0               	movlw	160
 10462  00202C  5C1C               	subwf	??_drawFastVLine+2,w,c
 10463  00202E  A0D8               	btfss	status,0,c
 10464  002030  D005               	goto	l4587
 10465  002032                     u3120:
 10466                           
 10467                           ;ST7735_TFT.c: 373: h = 160 - y;
 10468  002032  5016               	movf	drawFastVLine@y,w,c
 10469  002034  0800               	sublw	0
 10470  002036  0FA0               	addlw	160
 10471  002038  6E17               	movwf	drawFastVLine@h,c
 10472  00203A  D000               	goto	l4587
 10473  00203C                     l4587:
 10474                           
 10475                           ;ST7735_TFT.c: 374: hi = color >> 8; lo = color;
 10476  00203C  5019               	movf	drawFastVLine@color+1,w,c
 10477  00203E  6E1E               	movwf	drawFastVLine@hi,c
 10478  002040  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 10479                           
 10480                           ;ST7735_TFT.c: 375: setAddrWindow(x, y, x, y + h - 1);
 10481  002044  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 10482  002048  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 10483  00204C  5016               	movf	drawFastVLine@y,w,c
 10484  00204E  2417               	addwf	drawFastVLine@h,w,c
 10485  002050  6E1A               	movwf	??_drawFastVLine& (0+255),c
 10486  002052  041A               	decf	??_drawFastVLine,w,c
 10487  002054  6E14               	movwf	setAddrWindow@y1,c
 10488  002056  5020               	movf	drawFastVLine@x,w,c
 10489  002058  EC11  F012         	call	_setAddrWindow
 10490                           
 10491                           ;ST7735_TFT.c: 376: PORTDbits.RD2 = 1;
 10492  00205C  8483               	bsf	3971,2,c	;volatile
 10493                           
 10494                           ;ST7735_TFT.c: 377: PORTDbits.RD3 = 0;
 10495  00205E  9683               	bcf	3971,3,c	;volatile
 10496                           
 10497                           ;ST7735_TFT.c: 379: while (h--) {
 10498  002060  D007               	goto	l4599
 10499  002062                     l4597:
 10500                           
 10501                           ;ST7735_TFT.c: 380: spiwrite(hi);
 10502  002062  501E               	movf	drawFastVLine@hi,w,c
 10503  002064  EC6F  F014         	call	_spiwrite
 10504                           
 10505                           ;ST7735_TFT.c: 381: spiwrite(lo);
 10506  002068  501F               	movf	drawFastVLine@lo,w,c
 10507  00206A  EC6F  F014         	call	_spiwrite
 10508  00206E  D000               	goto	l4599
 10509  002070                     l4599:
 10510  002070  0617               	decf	drawFastVLine@h,f,c
 10511  002072  2817               	incf	drawFastVLine@h,w,c
 10512  002074  A4D8               	btfss	status,2,c
 10513  002076  D7F5               	goto	l4597
 10514                           
 10515                           ;ST7735_TFT.c: 382: }
 10516                           ;ST7735_TFT.c: 383: PORTDbits.RD3 = 1;
 10517  002078  8683               	bsf	3971,3,c	;volatile
 10518  00207A                     l228:
 10519  00207A  0012               	return		;funcret
 10520  00207C                     __end_of_drawFastVLine:
 10521                           	opt stack 0
 10522                           tblptru	equ	0xFF8
 10523                           tblptrh	equ	0xFF7
 10524                           tblptrl	equ	0xFF6
 10525                           tablat	equ	0xFF5
 10526                           prodh	equ	0xFF4
 10527                           prodl	equ	0xFF3
 10528                           intcon	equ	0xFF2
 10529                           intcon2	equ	0xFF1
 10530                           intcon3	equ	0xFF0
 10531                           postinc0	equ	0xFEE
 10532                           wreg	equ	0xFE8
 10533                           postdec1	equ	0xFE5
 10534                           fsr1l	equ	0xFE1
 10535                           indf2	equ	0xFDF
 10536                           postinc2	equ	0xFDE
 10537                           fsr2h	equ	0xFDA
 10538                           fsr2l	equ	0xFD9
 10539                           status	equ	0xFD8
 10540                           
 10541 ;; *************** function _drawPixel *****************
 10542 ;; Defined at:
 10543 ;;		line 358 in file "ST7735_TFT.c"
 10544 ;; Parameters:    Size  Location     Type
 10545 ;;  x               1    wreg     unsigned char 
 10546 ;;  y               1   21[COMRAM] unsigned char 
 10547 ;;  color           2   22[COMRAM] unsigned int 
 10548 ;; Auto vars:     Size  Location     Type
 10549 ;;  x               1   24[COMRAM] unsigned char 
 10550 ;; Return value:  Size  Location     Type
 10551 ;;		None               void
 10552 ;; Registers used:
 10553 ;;		wreg, status,2, status,0, cstack
 10554 ;; Tracked objects:
 10555 ;;		On entry : 0/0
 10556 ;;		On exit  : 0/0
 10557 ;;		Unchanged: 0/0
 10558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10559 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10562 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;Total ram usage:        4 bytes
 10564 ;; Hardware stack levels used:    1
 10565 ;; Hardware stack levels required when called:    5
 10566 ;; This function calls:
 10567 ;;		_setAddrWindow
 10568 ;;		_write_data
 10569 ;; This function is called by:
 10570 ;;		_drawChar
 10571 ;;		_drawCircle
 10572 ;;		_drawCircleHelper
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           	psect	text53
 10577  00275A                     __ptext53:
 10578                           	opt stack 0
 10579  00275A                     _drawPixel:
 10580                           	opt stack 20
 10581                           
 10582                           ;incstack = 0
 10583                           ;drawPixel@x stored from wreg
 10584  00275A  6E19               	movwf	drawPixel@x,c
 10585                           
 10586                           ;ST7735_TFT.c: 360: if((x >= 128) || (y >= 160))
 10587  00275C  0E80               	movlw	128
 10588  00275E  6019               	cpfslt	drawPixel@x,c
 10589  002760  D013               	goto	l222
 10590  002762  0E9F               	movlw	159
 10591  002764  6416               	cpfsgt	drawPixel@y,c
 10592  002766  D001               	goto	l4605
 10593                           
 10594                           ;ST7735_TFT.c: 361: return;
 10595  002768  D00F               	goto	l222
 10596  00276A                     l4605:
 10597                           
 10598                           ;ST7735_TFT.c: 362: setAddrWindow(x,y,x+1,y+1);
 10599  00276A  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 10600  00276E  2819               	incf	drawPixel@x,w,c
 10601  002770  6E13               	movwf	setAddrWindow@x1,c
 10602  002772  2816               	incf	drawPixel@y,w,c
 10603  002774  6E14               	movwf	setAddrWindow@y1,c
 10604  002776  5019               	movf	drawPixel@x,w,c
 10605  002778  EC11  F012         	call	_setAddrWindow
 10606                           
 10607                           ;ST7735_TFT.c: 363: write_data(color >> 8);
 10608  00277C  5018               	movf	drawPixel@color+1,w,c
 10609  00277E  EC9F  F014         	call	_write_data
 10610                           
 10611                           ;ST7735_TFT.c: 364: write_data(color & 0xFF);
 10612  002782  5017               	movf	drawPixel@color,w,c
 10613  002784  EC9F  F014         	call	_write_data
 10614  002788                     l222:
 10615  002788  0012               	return		;funcret
 10616  00278A                     __end_of_drawPixel:
 10617                           	opt stack 0
 10618                           tblptru	equ	0xFF8
 10619                           tblptrh	equ	0xFF7
 10620                           tblptrl	equ	0xFF6
 10621                           tablat	equ	0xFF5
 10622                           prodh	equ	0xFF4
 10623                           prodl	equ	0xFF3
 10624                           intcon	equ	0xFF2
 10625                           intcon2	equ	0xFF1
 10626                           intcon3	equ	0xFF0
 10627                           postinc0	equ	0xFEE
 10628                           wreg	equ	0xFE8
 10629                           postdec1	equ	0xFE5
 10630                           fsr1l	equ	0xFE1
 10631                           indf2	equ	0xFDF
 10632                           postinc2	equ	0xFDE
 10633                           fsr2h	equ	0xFDA
 10634                           fsr2l	equ	0xFD9
 10635                           status	equ	0xFD8
 10636                           
 10637 ;; *************** function _setAddrWindow *****************
 10638 ;; Defined at:
 10639 ;;		line 343 in file "ST7735_TFT.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;  x0              1    wreg     unsigned char 
 10642 ;;  y0              1   17[COMRAM] unsigned char 
 10643 ;;  x1              1   18[COMRAM] unsigned char 
 10644 ;;  y1              1   19[COMRAM] unsigned char 
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;  x0              1   20[COMRAM] unsigned char 
 10647 ;; Return value:  Size  Location     Type
 10648 ;;		None               void
 10649 ;; Registers used:
 10650 ;;		wreg, status,2, status,0, cstack
 10651 ;; Tracked objects:
 10652 ;;		On entry : 0/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10656 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;Total ram usage:        4 bytes
 10661 ;; Hardware stack levels used:    1
 10662 ;; Hardware stack levels required when called:    4
 10663 ;; This function calls:
 10664 ;;		_write_command
 10665 ;;		_write_data
 10666 ;; This function is called by:
 10667 ;;		_drawPixel
 10668 ;;		_drawFastVLine
 10669 ;;		_fillRectangle
 10670 ;;		_drawFastHLine
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674                           	psect	text54
 10675  002422                     __ptext54:
 10676                           	opt stack 0
 10677  002422                     _setAddrWindow:
 10678                           	opt stack 19
 10679                           
 10680                           ;incstack = 0
 10681                           ;setAddrWindow@x0 stored from wreg
 10682  002422  6E15               	movwf	setAddrWindow@x0,c
 10683                           
 10684                           ;ST7735_TFT.c: 345: write_command(0x2A);
 10685  002424  0E2A               	movlw	42
 10686  002426  ECA7  F014         	call	_write_command
 10687                           
 10688                           ;ST7735_TFT.c: 346: write_data(0);
 10689  00242A  0E00               	movlw	0
 10690  00242C  EC9F  F014         	call	_write_data
 10691                           
 10692                           ;ST7735_TFT.c: 347: write_data(x0 + colstart);
 10693  002430  5015               	movf	setAddrWindow@x0,w,c
 10694  002432  2459               	addwf	_colstart,w,c
 10695  002434  EC9F  F014         	call	_write_data
 10696                           
 10697                           ;ST7735_TFT.c: 348: write_data(0);
 10698  002438  0E00               	movlw	0
 10699  00243A  EC9F  F014         	call	_write_data
 10700                           
 10701                           ;ST7735_TFT.c: 349: write_data(x1 + colstart);
 10702  00243E  5013               	movf	setAddrWindow@x1,w,c
 10703  002440  2459               	addwf	_colstart,w,c
 10704  002442  EC9F  F014         	call	_write_data
 10705                           
 10706                           ;ST7735_TFT.c: 350: write_command(0x2B);
 10707  002446  0E2B               	movlw	43
 10708  002448  ECA7  F014         	call	_write_command
 10709                           
 10710                           ;ST7735_TFT.c: 351: write_data(0);
 10711  00244C  0E00               	movlw	0
 10712  00244E  EC9F  F014         	call	_write_data
 10713                           
 10714                           ;ST7735_TFT.c: 352: write_data(y0 + rowstart);
 10715  002452  5012               	movf	setAddrWindow@y0,w,c
 10716  002454  245C               	addwf	_rowstart,w,c
 10717  002456  EC9F  F014         	call	_write_data
 10718                           
 10719                           ;ST7735_TFT.c: 353: write_data(0);
 10720  00245A  0E00               	movlw	0
 10721  00245C  EC9F  F014         	call	_write_data
 10722                           
 10723                           ;ST7735_TFT.c: 354: write_data(y1 + rowstart);
 10724  002460  5014               	movf	setAddrWindow@y1,w,c
 10725  002462  245C               	addwf	_rowstart,w,c
 10726  002464  EC9F  F014         	call	_write_data
 10727                           
 10728                           ;ST7735_TFT.c: 355: write_command(0x2C);
 10729  002468  0E2C               	movlw	44
 10730  00246A  ECA7  F014         	call	_write_command
 10731  00246E  0012               	return		;funcret
 10732  002470                     __end_of_setAddrWindow:
 10733                           	opt stack 0
 10734                           tblptru	equ	0xFF8
 10735                           tblptrh	equ	0xFF7
 10736                           tblptrl	equ	0xFF6
 10737                           tablat	equ	0xFF5
 10738                           prodh	equ	0xFF4
 10739                           prodl	equ	0xFF3
 10740                           intcon	equ	0xFF2
 10741                           intcon2	equ	0xFF1
 10742                           intcon3	equ	0xFF0
 10743                           postinc0	equ	0xFEE
 10744                           wreg	equ	0xFE8
 10745                           postdec1	equ	0xFE5
 10746                           fsr1l	equ	0xFE1
 10747                           indf2	equ	0xFDF
 10748                           postinc2	equ	0xFDE
 10749                           fsr2h	equ	0xFDA
 10750                           fsr2l	equ	0xFD9
 10751                           status	equ	0xFD8
 10752                           
 10753 ;; *************** function _write_data *****************
 10754 ;; Defined at:
 10755 ;;		line 156 in file "ST7735_TFT.c"
 10756 ;; Parameters:    Size  Location     Type
 10757 ;;  data_           1    wreg     unsigned char 
 10758 ;; Auto vars:     Size  Location     Type
 10759 ;;  data_           1   16[COMRAM] unsigned char 
 10760 ;; Return value:  Size  Location     Type
 10761 ;;		None               void
 10762 ;; Registers used:
 10763 ;;		wreg, status,2, cstack
 10764 ;; Tracked objects:
 10765 ;;		On entry : 0/0
 10766 ;;		On exit  : 0/0
 10767 ;;		Unchanged: 0/0
 10768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;Total ram usage:        1 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; Hardware stack levels required when called:    3
 10776 ;; This function calls:
 10777 ;;		_spiwrite
 10778 ;; This function is called by:
 10779 ;;		_Rcmd1
 10780 ;;		_Rcmd2red
 10781 ;;		_Rcmd3
 10782 ;;		_setAddrWindow
 10783 ;;		_drawPixel
 10784 ;;		_TFT_GreenTab_Initialize
 10785 ;;		_Bcmd
 10786 ;;		_setScrollDefinition
 10787 ;;		_Rcmd2green
 10788 ;;		_VerticalScroll
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           	psect	text55
 10793  00293E                     __ptext55:
 10794                           	opt stack 0
 10795  00293E                     _write_data:
 10796                           	opt stack 19
 10797                           
 10798                           ;incstack = 0
 10799                           ;write_data@data_ stored from wreg
 10800  00293E  6E11               	movwf	write_data@data_,c
 10801                           
 10802                           ;ST7735_TFT.c: 158: PORTDbits.RD3 = 0;
 10803  002940  9683               	bcf	3971,3,c	;volatile
 10804                           
 10805                           ;ST7735_TFT.c: 159: PORTDbits.RD2 = 1;
 10806  002942  8483               	bsf	3971,2,c	;volatile
 10807                           
 10808                           ;ST7735_TFT.c: 160: spiwrite(data_);
 10809  002944  5011               	movf	write_data@data_,w,c
 10810  002946  EC6F  F014         	call	_spiwrite
 10811                           
 10812                           ;ST7735_TFT.c: 161: PORTDbits.RD3 = 1;
 10813  00294A  8683               	bsf	3971,3,c	;volatile
 10814  00294C  0012               	return		;funcret
 10815  00294E                     __end_of_write_data:
 10816                           	opt stack 0
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodh	equ	0xFF4
 10822                           prodl	equ	0xFF3
 10823                           intcon	equ	0xFF2
 10824                           intcon2	equ	0xFF1
 10825                           intcon3	equ	0xFF0
 10826                           postinc0	equ	0xFEE
 10827                           wreg	equ	0xFE8
 10828                           postdec1	equ	0xFE5
 10829                           fsr1l	equ	0xFE1
 10830                           indf2	equ	0xFDF
 10831                           postinc2	equ	0xFDE
 10832                           fsr2h	equ	0xFDA
 10833                           fsr2l	equ	0xFD9
 10834                           status	equ	0xFD8
 10835                           
 10836 ;; *************** function _write_command *****************
 10837 ;; Defined at:
 10838 ;;		line 145 in file "ST7735_TFT.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;  cmd_            1    wreg     unsigned char 
 10841 ;; Auto vars:     Size  Location     Type
 10842 ;;  cmd_            1   16[COMRAM] unsigned char 
 10843 ;; Return value:  Size  Location     Type
 10844 ;;		None               void
 10845 ;; Registers used:
 10846 ;;		wreg, status,2, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;Total ram usage:        1 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:    3
 10859 ;; This function calls:
 10860 ;;		_spiwrite
 10861 ;; This function is called by:
 10862 ;;		_Rcmd1
 10863 ;;		_Rcmd2red
 10864 ;;		_Rcmd3
 10865 ;;		_setAddrWindow
 10866 ;;		_TFT_GreenTab_Initialize
 10867 ;;		_Bcmd
 10868 ;;		_setScrollDefinition
 10869 ;;		_Rcmd2green
 10870 ;;		_VerticalScroll
 10871 ;; This function uses a non-reentrant model
 10872 ;;
 10873                           
 10874                           	psect	text56
 10875  00294E                     __ptext56:
 10876                           	opt stack 0
 10877  00294E                     _write_command:
 10878                           	opt stack 19
 10879                           
 10880                           ;incstack = 0
 10881                           ;write_command@cmd_ stored from wreg
 10882  00294E  6E11               	movwf	write_command@cmd_,c
 10883                           
 10884                           ;ST7735_TFT.c: 147: PORTDbits.RD3 = 0;
 10885  002950  9683               	bcf	3971,3,c	;volatile
 10886                           
 10887                           ;ST7735_TFT.c: 149: PORTDbits.RD2 = 0;
 10888  002952  9483               	bcf	3971,2,c	;volatile
 10889                           
 10890                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
 10891  002954  5011               	movf	write_command@cmd_,w,c
 10892  002956  EC6F  F014         	call	_spiwrite
 10893                           
 10894                           ;ST7735_TFT.c: 152: PORTDbits.RD3 = 1;
 10895  00295A  8683               	bsf	3971,3,c	;volatile
 10896  00295C  0012               	return		;funcret
 10897  00295E                     __end_of_write_command:
 10898                           	opt stack 0
 10899                           tblptru	equ	0xFF8
 10900                           tblptrh	equ	0xFF7
 10901                           tblptrl	equ	0xFF6
 10902                           tablat	equ	0xFF5
 10903                           prodh	equ	0xFF4
 10904                           prodl	equ	0xFF3
 10905                           intcon	equ	0xFF2
 10906                           intcon2	equ	0xFF1
 10907                           intcon3	equ	0xFF0
 10908                           postinc0	equ	0xFEE
 10909                           wreg	equ	0xFE8
 10910                           postdec1	equ	0xFE5
 10911                           fsr1l	equ	0xFE1
 10912                           indf2	equ	0xFDF
 10913                           postinc2	equ	0xFDE
 10914                           fsr2h	equ	0xFDA
 10915                           fsr2l	equ	0xFD9
 10916                           status	equ	0xFD8
 10917                           
 10918 ;; *************** function _spiwrite *****************
 10919 ;; Defined at:
 10920 ;;		line 136 in file "ST7735_TFT.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;  spidata         1    wreg     unsigned char 
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;  spidata         1   15[COMRAM] unsigned char 
 10925 ;;  x               1   14[COMRAM] unsigned char 
 10926 ;; Return value:  Size  Location     Type
 10927 ;;		None               void
 10928 ;; Registers used:
 10929 ;;		wreg
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10938 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10939 ;;Total ram usage:        2 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; Hardware stack levels required when called:    2
 10942 ;; This function calls:
 10943 ;;		Nothing
 10944 ;; This function is called by:
 10945 ;;		_write_command
 10946 ;;		_write_data
 10947 ;;		_drawFastVLine
 10948 ;;		_fillRectangle
 10949 ;;		_drawFastHLine
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           	psect	text57
 10954  0028DE                     __ptext57:
 10955                           	opt stack 0
 10956  0028DE                     _spiwrite:
 10957                           	opt stack 21
 10958                           
 10959                           ;incstack = 0
 10960                           ;spiwrite@spidata stored from wreg
 10961  0028DE  6E10               	movwf	spiwrite@spidata,c
 10962                           
 10963                           ;ST7735_TFT.c: 138: char x;
 10964                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
 10965  0028E0  969E               	bcf	3998,3,c	;volatile
 10966                           
 10967                           ;ST7735_TFT.c: 140: x = SSPBUF;
 10968  0028E2  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 10969                           
 10970                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
 10971  0028E6  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 10972                           
 10973                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
 10974  0028EA  D000               	goto	l178
 10975  0028EC                     l178:
 10976  0028EC  A0C7               	btfss	4039,0,c	;volatile
 10977  0028EE  D7FE               	goto	l178
 10978  0028F0  0012               	return		;funcret
 10979  0028F2                     __end_of_spiwrite:
 10980                           	opt stack 0
 10981                           tblptru	equ	0xFF8
 10982                           tblptrh	equ	0xFF7
 10983                           tblptrl	equ	0xFF6
 10984                           tablat	equ	0xFF5
 10985                           prodh	equ	0xFF4
 10986                           prodl	equ	0xFF3
 10987                           intcon	equ	0xFF2
 10988                           intcon2	equ	0xFF1
 10989                           intcon3	equ	0xFF0
 10990                           postinc0	equ	0xFEE
 10991                           wreg	equ	0xFE8
 10992                           postdec1	equ	0xFE5
 10993                           fsr1l	equ	0xFE1
 10994                           indf2	equ	0xFDF
 10995                           postinc2	equ	0xFDE
 10996                           fsr2h	equ	0xFDA
 10997                           fsr2l	equ	0xFD9
 10998                           status	equ	0xFD8
 10999                           
 11000 ;; *************** function ___wmul *****************
 11001 ;; Defined at:
 11002 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;  multiplier      2   14[COMRAM] unsigned int 
 11005 ;;  multiplicand    2   16[COMRAM] unsigned int 
 11006 ;; Auto vars:     Size  Location     Type
 11007 ;;  product         2   18[COMRAM] unsigned int 
 11008 ;; Return value:  Size  Location     Type
 11009 ;;                  2   14[COMRAM] unsigned int 
 11010 ;; Registers used:
 11011 ;;		wreg, status,2, status,0, prodl, prodh
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11017 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11021 ;;Total ram usage:        6 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    2
 11024 ;; This function calls:
 11025 ;;		Nothing
 11026 ;; This function is called by:
 11027 ;;		_delay_ms
 11028 ;;		_drawChar
 11029 ;;		_Read_Volt
 11030 ;; This function uses a non-reentrant model
 11031 ;;
 11032                           
 11033                           	psect	text58
 11034  0027DE                     __ptext58:
 11035                           	opt stack 0
 11036  0027DE                     ___wmul:
 11037                           	opt stack 27
 11038                           
 11039                           ;incstack = 0
 11040  0027DE  500F               	movf	___wmul@multiplier,w,c
 11041  0027E0  0211               	mulwf	___wmul@multiplicand,c
 11042  0027E2  CFF3 F013          	movff	prodl,___wmul@product
 11043  0027E6  CFF4 F014          	movff	prodh,___wmul@product+1
 11044  0027EA  500F               	movf	___wmul@multiplier,w,c
 11045  0027EC  0212               	mulwf	___wmul@multiplicand+1,c
 11046  0027EE  50F3               	movf	prodl,w,c
 11047  0027F0  2614               	addwf	___wmul@product+1,f,c
 11048  0027F2  5010               	movf	___wmul@multiplier+1,w,c
 11049  0027F4  0211               	mulwf	___wmul@multiplicand,c
 11050  0027F6  50F3               	movf	prodl,w,c
 11051  0027F8  2614               	addwf	___wmul@product+1,f,c
 11052  0027FA  C013  F00F         	movff	___wmul@product,?___wmul
 11053  0027FE  C014  F010         	movff	___wmul@product+1,?___wmul+1
 11054  002802  D000               	goto	l712
 11055  002804                     l712:
 11056  002804  0012               	return		;funcret
 11057  002806                     __end_of___wmul:
 11058                           	opt stack 0
 11059                           tblptru	equ	0xFF8
 11060                           tblptrh	equ	0xFF7
 11061                           tblptrl	equ	0xFF6
 11062                           tablat	equ	0xFF5
 11063                           prodh	equ	0xFF4
 11064                           prodl	equ	0xFF3
 11065                           intcon	equ	0xFF2
 11066                           intcon2	equ	0xFF1
 11067                           intcon3	equ	0xFF0
 11068                           postinc0	equ	0xFEE
 11069                           wreg	equ	0xFE8
 11070                           postdec1	equ	0xFE5
 11071                           fsr1l	equ	0xFE1
 11072                           indf2	equ	0xFDF
 11073                           postinc2	equ	0xFDE
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function _Deactivate_Buzzer *****************
 11079 ;; Defined at:
 11080 ;;		line 83 in file "utils.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;		None
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;		None               void
 11087 ;; Registers used:
 11088 ;;		wreg, status,2
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;Total ram usage:        0 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    2
 11101 ;; This function calls:
 11102 ;;		Nothing
 11103 ;; This function is called by:
 11104 ;;		_Wait_One_Second_With_Beep
 11105 ;;		_Do_Beep
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           	psect	text59
 11110  00296C                     __ptext59:
 11111                           	opt stack 0
 11112  00296C                     _Deactivate_Buzzer:
 11113                           	opt stack 25
 11114                           
 11115                           ;utils.c: 85: CCP2CON = 0x0;
 11116                           
 11117                           ;incstack = 0
 11118  00296C  0E00               	movlw	0
 11119  00296E  6EBA               	movwf	4026,c	;volatile
 11120                           
 11121                           ;utils.c: 86: PORTCbits.RC1 = 0;
 11122  002970  9282               	bcf	3970,1,c	;volatile
 11123  002972  0012               	return		;funcret
 11124  002974                     __end_of_Deactivate_Buzzer:
 11125                           	opt stack 0
 11126                           tblptru	equ	0xFF8
 11127                           tblptrh	equ	0xFF7
 11128                           tblptrl	equ	0xFF6
 11129                           tablat	equ	0xFF5
 11130                           prodh	equ	0xFF4
 11131                           prodl	equ	0xFF3
 11132                           intcon	equ	0xFF2
 11133                           intcon2	equ	0xFF1
 11134                           intcon3	equ	0xFF0
 11135                           postinc0	equ	0xFEE
 11136                           wreg	equ	0xFE8
 11137                           postdec1	equ	0xFE5
 11138                           fsr1l	equ	0xFE1
 11139                           indf2	equ	0xFDF
 11140                           postinc2	equ	0xFDE
 11141                           fsr2h	equ	0xFDA
 11142                           fsr2l	equ	0xFD9
 11143                           status	equ	0xFD8
 11144                           
 11145 ;; *************** function _Activate_Buzzer *****************
 11146 ;; Defined at:
 11147 ;;		line 60 in file "utils.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;		None               void
 11154 ;; Registers used:
 11155 ;;		wreg, status,2
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;Total ram usage:        0 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    2
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_Wait_One_Second_With_Beep
 11172 ;;		_Do_Beep
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           	psect	text60
 11177  00292C                     __ptext60:
 11178                           	opt stack 0
 11179  00292C                     _Activate_Buzzer:
 11180                           	opt stack 25
 11181                           
 11182                           ;utils.c: 62: PR2 = 0b11111001 ;
 11183                           
 11184                           ;incstack = 0
 11185  00292C  0EF9               	movlw	249
 11186  00292E  6ECB               	movwf	4043,c	;volatile
 11187                           
 11188                           ;utils.c: 63: T2CON = 0b00000101 ;
 11189  002930  0E05               	movlw	5
 11190  002932  6ECA               	movwf	4042,c	;volatile
 11191                           
 11192                           ;utils.c: 64: CCPR2L = 0b01001010 ;
 11193  002934  0E4A               	movlw	74
 11194  002936  6EBB               	movwf	4027,c	;volatile
 11195                           
 11196                           ;utils.c: 65: CCP2CON = 0b00111100 ;
 11197  002938  0E3C               	movlw	60
 11198  00293A  6EBA               	movwf	4026,c	;volatile
 11199  00293C  0012               	return		;funcret
 11200  00293E                     __end_of_Activate_Buzzer:
 11201                           	opt stack 0
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           intcon2	equ	0xFF1
 11210                           intcon3	equ	0xFF0
 11211                           postinc0	equ	0xFEE
 11212                           wreg	equ	0xFE8
 11213                           postdec1	equ	0xFE5
 11214                           fsr1l	equ	0xFE1
 11215                           indf2	equ	0xFDF
 11216                           postinc2	equ	0xFDE
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221 ;; *************** function _chkisr *****************
 11222 ;; Defined at:
 11223 ;;		line 33 in file "Interrupt.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;		None
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;		None
 11228 ;; Return value:  Size  Location     Type
 11229 ;;		None               void
 11230 ;; Registers used:
 11231 ;;		wreg, status,2, status,0, cstack
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;Total ram usage:       14 bytes
 11242 ;; Hardware stack levels used:    1
 11243 ;; Hardware stack levels required when called:    1
 11244 ;; This function calls:
 11245 ;;		_INT0_ISR
 11246 ;;		_INT1_ISR
 11247 ;;		_INT2_ISR
 11248 ;; This function is called by:
 11249 ;;		Interrupt level 2
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           	psect	intcode
 11254  000008                     __pintcode:
 11255                           	opt stack 0
 11256  000008                     _chkisr:
 11257                           	opt stack 18
 11258                           
 11259                           ;incstack = 0
 11260  000008  CFFA F001          	movff	pclath,??_chkisr
 11261  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 11262  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 11263  000014  ED3E  F010         	call	int_func,f	;refresh shadow registers
 11264                           pclatu	equ	0xFFB
 11265                           pclath	equ	0xFFA
 11266                           tblptru	equ	0xFF8
 11267                           tblptrh	equ	0xFF7
 11268                           tblptrl	equ	0xFF6
 11269                           tablat	equ	0xFF5
 11270                           prodh	equ	0xFF4
 11271                           prodl	equ	0xFF3
 11272                           intcon	equ	0xFF2
 11273                           intcon2	equ	0xFF1
 11274                           intcon3	equ	0xFF0
 11275                           postinc0	equ	0xFEE
 11276                           fsr0l	equ	0xFE9
 11277                           wreg	equ	0xFE8
 11278                           postdec1	equ	0xFE5
 11279                           fsr1l	equ	0xFE1
 11280                           indf2	equ	0xFDF
 11281                           postinc2	equ	0xFDE
 11282                           fsr2h	equ	0xFDA
 11283                           fsr2l	equ	0xFD9
 11284                           status	equ	0xFD8
 11285                           
 11286                           	psect	intcode_body
 11287  00207C                     __pintcode_body:
 11288                           	opt stack 18
 11289  00207C                     int_func:
 11290                           	opt stack 18
 11291  00207C  0006               	pop		; remove dummy address from shadow register refresh
 11292  00207E  CFEA F004          	movff	fsr0h,??_chkisr+3
 11293  002082  CFE1 F005          	movff	fsr1l,??_chkisr+4
 11294  002086  CFE2 F006          	movff	fsr1h,??_chkisr+5
 11295  00208A  CFD9 F007          	movff	fsr2l,??_chkisr+6
 11296  00208E  CFDA F008          	movff	fsr2h,??_chkisr+7
 11297  002092  CFF3 F009          	movff	prodl,??_chkisr+8
 11298  002096  CFF4 F00A          	movff	prodh,??_chkisr+9
 11299  00209A  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 11300  00209E  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 11301  0020A2  CFF8 F00D          	movff	tblptru,??_chkisr+12
 11302  0020A6  CFF5 F00E          	movff	tablat,??_chkisr+13
 11303                           
 11304                           ;Interrupt.c: 35: if (INTCONbits.INT0IF == 1)
 11305  0020AA  A2F2               	btfss	intcon,1,c	;volatile
 11306  0020AC  D003               	goto	i2l2949
 11307                           
 11308                           ;Interrupt.c: 36: INT0_ISR();
 11309  0020AE  EC83  F014         	call	_INT0_ISR	;wreg free
 11310  0020B2  D000               	goto	i2l2949
 11311  0020B4                     i2l2949:
 11312                           
 11313                           ;Interrupt.c: 37: if (INTCON3bits.INT1IF == 1)
 11314  0020B4  A0F0               	btfss	intcon3,0,c	;volatile
 11315  0020B6  D003               	goto	i2l2953
 11316                           
 11317                           ;Interrupt.c: 38: INT1_ISR();
 11318  0020B8  EC79  F014         	call	_INT1_ISR	;wreg free
 11319  0020BC  D000               	goto	i2l2953
 11320  0020BE                     i2l2953:
 11321                           
 11322                           ;Interrupt.c: 39: if (INTCON3bits.INT2IF == 1)
 11323  0020BE  A2F0               	btfss	intcon3,1,c	;volatile
 11324  0020C0  D003               	goto	i2l663
 11325                           
 11326                           ;Interrupt.c: 40: INT2_ISR();
 11327  0020C2  ECBA  F014         	call	_INT2_ISR	;wreg free
 11328  0020C6  D000               	goto	i2l663
 11329  0020C8                     i2l663:
 11330  0020C8  C00E  FFF5         	movff	??_chkisr+13,tablat
 11331  0020CC  C00D  FFF8         	movff	??_chkisr+12,tblptru
 11332  0020D0  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 11333  0020D4  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 11334  0020D8  C00A  FFF4         	movff	??_chkisr+9,prodh
 11335  0020DC  C009  FFF3         	movff	??_chkisr+8,prodl
 11336  0020E0  C008  FFDA         	movff	??_chkisr+7,fsr2h
 11337  0020E4  C007  FFD9         	movff	??_chkisr+6,fsr2l
 11338  0020E8  C006  FFE2         	movff	??_chkisr+5,fsr1h
 11339  0020EC  C005  FFE1         	movff	??_chkisr+4,fsr1l
 11340  0020F0  C004  FFEA         	movff	??_chkisr+3,fsr0h
 11341  0020F4  C003  FFE9         	movff	??_chkisr+2,fsr0l
 11342  0020F8  C002  FFFB         	movff	??_chkisr+1,pclatu
 11343  0020FC  C001  FFFA         	movff	??_chkisr,pclath
 11344  002100  0011               	retfie		f
 11345  002102                     __end_of_chkisr:
 11346                           	opt stack 0
 11347                           pclatu	equ	0xFFB
 11348                           pclath	equ	0xFFA
 11349                           tblptru	equ	0xFF8
 11350                           tblptrh	equ	0xFF7
 11351                           tblptrl	equ	0xFF6
 11352                           tablat	equ	0xFF5
 11353                           prodh	equ	0xFF4
 11354                           prodl	equ	0xFF3
 11355                           intcon	equ	0xFF2
 11356                           intcon2	equ	0xFF1
 11357                           intcon3	equ	0xFF0
 11358                           postinc0	equ	0xFEE
 11359                           fsr0h	equ	0xFEA
 11360                           fsr0l	equ	0xFE9
 11361                           wreg	equ	0xFE8
 11362                           postdec1	equ	0xFE5
 11363                           fsr1h	equ	0xFE2
 11364                           fsr1l	equ	0xFE1
 11365                           indf2	equ	0xFDF
 11366                           postinc2	equ	0xFDE
 11367                           fsr2h	equ	0xFDA
 11368                           fsr2l	equ	0xFD9
 11369                           status	equ	0xFD8
 11370                           
 11371 ;; *************** function _INT2_ISR *****************
 11372 ;; Defined at:
 11373 ;;		line 66 in file "Interrupt.c"
 11374 ;; Parameters:    Size  Location     Type
 11375 ;;		None
 11376 ;; Auto vars:     Size  Location     Type
 11377 ;;		None
 11378 ;; Return value:  Size  Location     Type
 11379 ;;		None               void
 11380 ;; Registers used:
 11381 ;;		wreg, status,2
 11382 ;; Tracked objects:
 11383 ;;		On entry : 0/0
 11384 ;;		On exit  : 0/0
 11385 ;;		Unchanged: 0/0
 11386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;Total ram usage:        0 bytes
 11392 ;; Hardware stack levels used:    1
 11393 ;; This function calls:
 11394 ;;		Nothing
 11395 ;; This function is called by:
 11396 ;;		_chkisr
 11397 ;; This function uses a non-reentrant model
 11398 ;;
 11399                           
 11400                           	psect	text62
 11401  002974                     __ptext62:
 11402                           	opt stack 0
 11403  002974                     _INT2_ISR:
 11404                           	opt stack 18
 11405                           
 11406                           ;Interrupt.c: 69: INTCON3bits.INT2IF=0;
 11407                           
 11408                           ;incstack = 0
 11409  002974  92F0               	bcf	intcon3,1,c	;volatile
 11410                           
 11411                           ;Interrupt.c: 70: Flashing_Request = 1;
 11412  002976  0E01               	movlw	1
 11413  002978  6E4B               	movwf	_Flashing_Request,c
 11414  00297A  0012               	return		;funcret
 11415  00297C                     __end_of_INT2_ISR:
 11416                           	opt stack 0
 11417                           pclatu	equ	0xFFB
 11418                           pclath	equ	0xFFA
 11419                           tblptru	equ	0xFF8
 11420                           tblptrh	equ	0xFF7
 11421                           tblptrl	equ	0xFF6
 11422                           tablat	equ	0xFF5
 11423                           prodh	equ	0xFF4
 11424                           prodl	equ	0xFF3
 11425                           intcon	equ	0xFF2
 11426                           intcon2	equ	0xFF1
 11427                           intcon3	equ	0xFF0
 11428                           postinc0	equ	0xFEE
 11429                           fsr0h	equ	0xFEA
 11430                           fsr0l	equ	0xFE9
 11431                           wreg	equ	0xFE8
 11432                           postdec1	equ	0xFE5
 11433                           fsr1h	equ	0xFE2
 11434                           fsr1l	equ	0xFE1
 11435                           indf2	equ	0xFDF
 11436                           postinc2	equ	0xFDE
 11437                           fsr2h	equ	0xFDA
 11438                           fsr2l	equ	0xFD9
 11439                           status	equ	0xFD8
 11440                           
 11441 ;; *************** function _INT1_ISR *****************
 11442 ;; Defined at:
 11443 ;;		line 54 in file "Interrupt.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;		None
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;		None
 11448 ;; Return value:  Size  Location     Type
 11449 ;;		None               void
 11450 ;; Registers used:
 11451 ;;		wreg, status,2, status,0
 11452 ;; Tracked objects:
 11453 ;;		On entry : 0/0
 11454 ;;		On exit  : 0/0
 11455 ;;		Unchanged: 0/0
 11456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;Total ram usage:        0 bytes
 11462 ;; Hardware stack levels used:    1
 11463 ;; This function calls:
 11464 ;;		Nothing
 11465 ;; This function is called by:
 11466 ;;		_chkisr
 11467 ;; This function uses a non-reentrant model
 11468 ;;
 11469                           
 11470                           	psect	text63
 11471  0028F2                     __ptext63:
 11472                           	opt stack 0
 11473  0028F2                     _INT1_ISR:
 11474                           	opt stack 18
 11475                           
 11476                           ;Interrupt.c: 57: INTCON3bits.INT1IF=0;
 11477                           
 11478                           ;incstack = 0
 11479  0028F2  90F0               	bcf	intcon3,0,c	;volatile
 11480                           
 11481                           ;Interrupt.c: 58: if (MODE == 1)
 11482  0028F4  0451               	decf	_MODE,w,c
 11483  0028F6  A4D8               	btfss	status,2,c
 11484  0028F8  D002               	goto	i2l2639
 11485                           
 11486                           ;Interrupt.c: 59: {
 11487                           ;Interrupt.c: 60: NS_PED_SW = 1;
 11488  0028FA  0E01               	movlw	1
 11489  0028FC  D001               	goto	L19
 11490  0028FE                     i2l2639:
 11491                           
 11492                           ;Interrupt.c: 62: else
 11493                           ;Interrupt.c: 63: NS_PED_SW = 0;
 11494  0028FE  0E00               	movlw	0
 11495  002900                     L19:
 11496  002900  6E52               	movwf	_NS_PED_SW,c
 11497  002902  D000               	goto	i2l673
 11498  002904                     i2l673:
 11499  002904  0012               	return		;funcret
 11500  002906                     __end_of_INT1_ISR:
 11501                           	opt stack 0
 11502                           pclatu	equ	0xFFB
 11503                           pclath	equ	0xFFA
 11504                           tblptru	equ	0xFF8
 11505                           tblptrh	equ	0xFF7
 11506                           tblptrl	equ	0xFF6
 11507                           tablat	equ	0xFF5
 11508                           prodh	equ	0xFF4
 11509                           prodl	equ	0xFF3
 11510                           intcon	equ	0xFF2
 11511                           intcon2	equ	0xFF1
 11512                           intcon3	equ	0xFF0
 11513                           postinc0	equ	0xFEE
 11514                           fsr0h	equ	0xFEA
 11515                           fsr0l	equ	0xFE9
 11516                           wreg	equ	0xFE8
 11517                           postdec1	equ	0xFE5
 11518                           fsr1h	equ	0xFE2
 11519                           fsr1l	equ	0xFE1
 11520                           indf2	equ	0xFDF
 11521                           postinc2	equ	0xFDE
 11522                           fsr2h	equ	0xFDA
 11523                           fsr2l	equ	0xFD9
 11524                           status	equ	0xFD8
 11525                           
 11526 ;; *************** function _INT0_ISR *****************
 11527 ;; Defined at:
 11528 ;;		line 43 in file "Interrupt.c"
 11529 ;; Parameters:    Size  Location     Type
 11530 ;;		None
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;		None
 11533 ;; Return value:  Size  Location     Type
 11534 ;;		None               void
 11535 ;; Registers used:
 11536 ;;		wreg, status,2, status,0
 11537 ;; Tracked objects:
 11538 ;;		On entry : 0/0
 11539 ;;		On exit  : 0/0
 11540 ;;		Unchanged: 0/0
 11541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11546 ;;Total ram usage:        0 bytes
 11547 ;; Hardware stack levels used:    1
 11548 ;; This function calls:
 11549 ;;		Nothing
 11550 ;; This function is called by:
 11551 ;;		_chkisr
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           	psect	text64
 11556  002906                     __ptext64:
 11557                           	opt stack 0
 11558  002906                     _INT0_ISR:
 11559                           	opt stack 18
 11560                           
 11561                           ;Interrupt.c: 45: INTCONbits.INT0IF=0;
 11562                           
 11563                           ;incstack = 0
 11564  002906  92F2               	bcf	intcon,1,c	;volatile
 11565                           
 11566                           ;Interrupt.c: 46: if (MODE == 1)
 11567  002908  0451               	decf	_MODE,w,c
 11568  00290A  A4D8               	btfss	status,2,c
 11569  00290C  D002               	goto	i2l2631
 11570                           
 11571                           ;Interrupt.c: 47: {
 11572                           ;Interrupt.c: 48: EW_PED_SW = 1;
 11573  00290E  0E01               	movlw	1
 11574  002910  D001               	goto	L20
 11575  002912                     i2l2631:
 11576                           
 11577                           ;Interrupt.c: 50: else
 11578                           ;Interrupt.c: 51: EW_PED_SW = 0;
 11579  002912  0E00               	movlw	0
 11580  002914                     L20:
 11581  002914  6E4A               	movwf	_EW_PED_SW,c
 11582  002916  D000               	goto	i2l668
 11583  002918                     i2l668:
 11584  002918  0012               	return		;funcret
 11585  00291A                     __end_of_INT0_ISR:
 11586                           	opt stack 0
 11587                           pclatu	equ	0xFFB
 11588                           pclath	equ	0xFFA
 11589                           tblptru	equ	0xFF8
 11590                           tblptrh	equ	0xFF7
 11591                           tblptrl	equ	0xFF6
 11592                           tablat	equ	0xFF5
 11593                           prodh	equ	0xFF4
 11594                           prodl	equ	0xFF3
 11595                           intcon	equ	0xFF2
 11596                           intcon2	equ	0xFF1
 11597                           intcon3	equ	0xFF0
 11598                           postinc0	equ	0xFEE
 11599                           fsr0h	equ	0xFEA
 11600                           fsr0l	equ	0xFE9
 11601                           wreg	equ	0xFE8
 11602                           postdec1	equ	0xFE5
 11603                           fsr1h	equ	0xFE2
 11604                           fsr1l	equ	0xFE1
 11605                           indf2	equ	0xFDF
 11606                           postinc2	equ	0xFDE
 11607                           fsr2h	equ	0xFDA
 11608                           fsr2l	equ	0xFD9
 11609                           status	equ	0xFD8
 11610                           pclatu	equ	0xFFB
 11611                           pclath	equ	0xFFA
 11612                           tblptru	equ	0xFF8
 11613                           tblptrh	equ	0xFF7
 11614                           tblptrl	equ	0xFF6
 11615                           tablat	equ	0xFF5
 11616                           prodh	equ	0xFF4
 11617                           prodl	equ	0xFF3
 11618                           intcon	equ	0xFF2
 11619                           intcon2	equ	0xFF1
 11620                           intcon3	equ	0xFF0
 11621                           postinc0	equ	0xFEE
 11622                           fsr0h	equ	0xFEA
 11623                           fsr0l	equ	0xFE9
 11624                           wreg	equ	0xFE8
 11625                           postdec1	equ	0xFE5
 11626                           fsr1h	equ	0xFE2
 11627                           fsr1l	equ	0xFE1
 11628                           indf2	equ	0xFDF
 11629                           postinc2	equ	0xFDE
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634                           	psect	rparam
 11635  0000                     pclatu	equ	0xFFB
 11636                           pclath	equ	0xFFA
 11637                           tblptru	equ	0xFF8
 11638                           tblptrh	equ	0xFF7
 11639                           tblptrl	equ	0xFF6
 11640                           tablat	equ	0xFF5
 11641                           prodh	equ	0xFF4
 11642                           prodl	equ	0xFF3
 11643                           intcon	equ	0xFF2
 11644                           intcon2	equ	0xFF1
 11645                           intcon3	equ	0xFF0
 11646                           postinc0	equ	0xFEE
 11647                           fsr0h	equ	0xFEA
 11648                           fsr0l	equ	0xFE9
 11649                           wreg	equ	0xFE8
 11650                           postdec1	equ	0xFE5
 11651                           fsr1h	equ	0xFE2
 11652                           fsr1l	equ	0xFE1
 11653                           indf2	equ	0xFDF
 11654                           postinc2	equ	0xFDE
 11655                           fsr2h	equ	0xFDA
 11656                           fsr2l	equ	0xFD9
 11657                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    475
    Data        63
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     68     113
    BANK0           128     17      93
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[7]), STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[12]), 
		 -> STR_5(CODE[22]), STR_4(CODE[2]), STR_3(CODE[3]), STR_2(CODE[5]), 
		 -> STR_1(CODE[6]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Night_Mode->_Set_EW
    _Night_Mode->_Set_EW_LT
    _Night_Mode->_Set_NS
    _Night_Mode->_Set_NS_LT
    _Night_Mode->_Wait_N_Seconds
    _Initialize_LCD_Screen->_drawtext
    _Initialize_LCD_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART
    _Do_Flashing->_Set_EW
    _Do_Flashing->_Set_EW_LT
    _Do_Flashing->_Set_NS
    _Do_Flashing->_Set_NS_LT
    _Day_Mode->_Set_EW
    _Day_Mode->_Set_EW_LT
    _Day_Mode->_Set_NS
    _Day_Mode->_Set_NS_LT
    _Day_Mode->_Wait_N_Seconds
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _update_LCD_misc->_drawtext
    ___fttol->___ftmul
    ___ftmul->___ftpack
    ___awmod->___fttol
    _Read_Volt->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Erase_Star->_drawtext
    _Draw_Star->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Initialize_LCD_Screen->_drawtext
    _Day_Mode->_PED_Control
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Erase_Star->_drawtext
    _Draw_Star->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  823223
                           _Day_Mode
                        _Do_Flashing
                           _Init_ADC
                          _Init_UART
              _Initialize_LCD_Screen
                         _Night_Mode
                          _Read_Volt
                             ___ftge
                     _init_INTERRUPT
 ---------------------------------------------------------------------------------
 (1) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  219657
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   65973
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  190764
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  340359
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0  120089
                                             66 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28763
                                             64 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   91196
                          _Draw_Star
                         _Erase_Star
                   _Wait_Half_Second
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          6     5      1  120702
                                             66 COMRAM     1     0      1
                                             12 BANK0      5     5      0
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28899
                                             64 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1355
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   91196
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                          _Draw_Star
                         _Erase_Star
                   _Wait_Half_Second
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   36546
                                              7 BANK0      5     5      0
                          _Read_Volt
                            ___awmod
                             ___ftge
                            ___ftmul
                            ___fttol
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     501
                                             37 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    2716
                                             22 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1473
                                             52 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _Read_Volt                                            9     6      3    5739
                                             41 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2206
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Erase_Star                                           0     0      0   27325
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Draw_Star                                            0     0      0   27325
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1799
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25526
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10644
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Draw_Star
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _Erase_Star
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _Wait_Half_Second
       _update_LCD_misc
         _Read_Volt
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul
           _get_full_ADC
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftge
         ___ftmul
           ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   ___ftge
   _init_INTERRUPT

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      5D       5       72.7%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     44      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CE      34        0.0%
DATA                 0      0      CE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 24 20:38:23 2024

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 282C                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                                l92 0AF8                                  l99 1B82  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 0043                                 l108 10A8  
                               l222 2788                                 l310 126E  
                               l228 207A                                 l244 11FE  
                               l253 1154                                 l246 10D8  
                               l326 1FF2                                 l600 2584  
                               l168 23C8                                 l281 19DE  
                               l178 28EC                                 l282 194A  
                               l292 0E34                                 l612 1C72  
                               l700 21B0                                 l284 19BA  
                               l445 2896                                 l285 19DC  
                               l621 1DA2                                 l462 2260  
                               l614 1CC4                                 l712 2804  
                               l616 1D00                                 l704 21CA  
                               l465 280A                                 l705 21CC  
                               l570 2514                                 l706 21D6  
                               l571 251A                                 l707 21D8  
                               l468 282A                                 l572 251E  
                               l580 24D6                                 l573 2540  
                               l581 24DA                                 l709 21F2  
                               l590 25A6                                 l582 24FC  
                               l591 25C8                                 l568 2510  
                               l905 1ED4                                 l577 24CC  
                               l930 2680                                 l586 2598  
                               l595 2554                                 l579 24D0  
                               l588 259C                                 l589 25A2  
                               l597 2558                                 l918 2182  
                               l598 255E                                 l599 2562  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 0042  
                               _PR2 000FCB                   _Deactivate_Buzzer 296C  
                               _dir 005A                                 _nbr 0045  
                               _txt 0047                      drawFastHLine@w 0017  
                    drawFastHLine@x 0020                      drawFastHLine@y 0016  
                      ___awmod@sign 003A             __end_of_update_LCD_misc 0D72  
                               wreg 000FE8                  ??_Wait_Half_Second 000F  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 001B  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize 27B4  
                      ___ftdiv@cntr 0024                     _Flashing_Status 004C  
                      ___ftdiv@sign 0029                        __CFG_WDT$OFF 000000  
                              l1020 1C48                                l1101 1F6A  
                              l1031 1C20                                l1107 1648  
                    drawFastVLine@h 0017                                l1128 1820  
                              l1092 1902                                l1095 18CE  
                    drawFastVLine@x 0020                                l1269 2644  
                    drawFastVLine@y 0016                                l5001 17B4  
                              l5011 17DE                                l5013 17EC  
                              l5005 17C4                                l5007 17CA  
                              l5015 17F6                                l5111 0BFC  
                              l5103 0BE0                                l5201 1E90  
                              l5041 0E1A                                l5019 180E  
                              l5123 0C26                                l5115 0C0A  
                              l5107 0BEE                                l5125 0C2C  
                              l5213 1EBA                                l5119 0C18  
                              l5231 094C                                l5217 1ECA  
                              l5209 1EAE                                l5241 1ABC  
                              l5091 0BB8                                l5251 1B72  
                              l5235 0A22                                l5227 0878  
                              l5411 1F7C                                l5403 19D8  
                              l4605 276A                                l4613 247A  
                              l5093 0BBE                                l5245 1B18  
                              l5069 0F0A                                l4711 11CA  
                              l4703 1176                                l5087 0BAA  
                              l5191 1E68                                l5503 25AC  
                              l5511 2568                                l5263 0FDC  
                              l5255 0F24                                l3911 21B4  
                              l3903 21A0                                l5415 1FB4  
                              l6063 1E1C                                l6055 1E0A  
                              l4617 2496                                l4713 11F2  
                              l4705 119E                                l4641 1BE8  
                              l4633 1BA4                                l5185 1E56  
                              l5273 108C                                l5425 1FDA  
                              l4651 1C28                                l4643 1C08  
                              l4635 1BB0                                l5523 1A22  
                              l5267 1032                                l5259 0F80  
                              l3907 21A8                                l5427 1FE8  
                              l5371 1914                                l4725 2612  
                              l4821 14E2                                l4805 1474  
                              l4645 1C14                                l4637 1BD0  
                              l4629 1B94                                l4741 185A  
                              l4901 15CC                                l5197 1E7E  
                              l5541 1A84                                l5533 1A50  
                              l6069 1E28                                l4583 2004  
                              l4719 11FA                                l4727 2618  
                              l4831 153C                                l4911 15FA  
                              l5199 1E88                                l5551 1AB2  
                              l5519 1A0A                                l3919 21C2  
                              l4681 10D4                                l4673 10BA  
                              l4817 14C4                                l4657 1C3A  
                              l4745 1868                                l4905 15DE  
                              l5537 1A6C                                l5529 1A3E  
                              l5705 1CAE                                l5393 19BE  
                              l5377 1982                                l4587 203C  
                              l4691 1114                                l4683 10DC  
                              l4739 1840                                l4931 2118  
                              l4915 160C                                l5547 1AA0  
                              l5555 26FC                                l4597 2062  
                              l4693 1148                                l4677 10C6  
                              l4829 1534                                l4765 18A8  
                              l4941 213E                                l4909 15F4  
                              l4853 1254                                l5565 2718  
                              l5397 19C8                                l5389 19B0  
                              l4599 2070                                l4695 114C  
                              l4687 10E4                                l4775 18DC  
                              l4943 2146                                l4951 2168  
                              l4935 2126                                l4919 1622  
                              l5487 2524                                l5495 24E0  
                              l5559 2706                                l4793 2732  
                              l4881 1570                                l4873 1322  
                              l4795 273C                                l4787 265C  
                              l4955 2178                                l4947 215C  
                              l4939 2134                                l4963 1F08  
                              l4883 158A                                l3899 2196  
                              l5755 1D60                                l4973 1F66  
                              l4869 12D0                                l5773 232C  
                              l4967 1F3A                                l4887 1598  
                              l4983 175A                                l5791 2376  
                              l5679 070C                                l5789 236C  
                              STR_1 FFE4                                STR_2 FFEA  
                              STR_3 FFF7                                STR_4 FFFC  
                              STR_5 FFAA                                STR_6 FFC0  
                              STR_7 FFD6                                STR_8 FFCC  
                              STR_9 FFDD                                u3120 2032  
                              u3411 1832                                u4150 1FAA  
                              u4070 1942                                u3431 1850  
                              u3360 11AC                                u4080 1978  
                              u3601 1580                                u3490 149E  
                              u4450 1E04                                u3731 174C  
                              u4460 1E06                                u3581 1562  
                              u3750 1778                                u3830 0B3C  
                              u3840 0B3E                                _MODE 0051  
                              u3755 1770                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 1DA4                                _font FDCF  
                      ___ftpack@arg 000F                        ___ftpack@exp 0012  
                              fsr0h 000FEA                                fsr1h 000FE2  
                    ??_get_full_ADC 0011                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 005D                                _volt 00AA  
                   drawFastHLine@hi 001E                     drawFastHLine@lo 001F  
          __end_of_update_LCD_color 0AFA                                pclat 000FFA  
          __end_of_update_LCD_count 10AA                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0018                     ??_drawFastHLine 001A  
                   ??_drawFastVLine 001A                        ___ftmul@cntr 0024  
                      ___param_bank 000010                        ___ftmul@sign 0025  
                      ___fttol@exp1 0034                    _Flashing_Request 004B  
                      ___fttol@lval 0030                        _Act_Mode_Txt 0064  
                  __end_of_INT0_ISR 291A                    __end_of_INT1_ISR 2906  
                  __end_of_INT2_ISR 297C                         _Do_Flashing 232A  
         __end_of_Deactivate_Buzzer 2974                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                      Read_Volt@nStep 0031  
                       _SW_EWLT_Txt 006A                               ?_main 0001  
                   __end_of___awdiv 1ED6                     drawCircle@ddF_x 0024  
                             STR_10 FFEF                     drawCircle@ddF_y 0026  
                             STR_11 FFF3                               STR_12 FFFC  
                             STR_13 FFFA                     __end_of___awmod 2184  
                   __end_of___ftdiv 1904                     __end_of___ftmul 164A  
                             _T0CON 000FD5                     ___awdiv@divisor 0011  
                   __end_of___fttol 1822                               _T2CON 000FCA  
                             _T3CON 000FB1                               i2l663 20C8  
                             i2l673 2904                               i2l668 2918  
                   ___awdiv@counter 0013                     drawCircle@color 0020  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _TMR3H 000FB3  
                             _TMR3L 000FB2                               _SPBRG 000FAF  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 0049  
                      ?_PED_Control 0043                               _Rcmd1 1338  
                             _Rcmd3 164A                         _SW_NSLT_Txt 006E  
                     drawRect@color 0029                       ___awtoft@sign 001A  
                        _Erase_Star 2682                               _font2 FECE  
             fillCircleHelper@ddF_x 002F               fillCircleHelper@ddF_y 0031  
                 ??_Wait_One_Second 0041                       ___ftpack@sign 0013  
             fillCircleHelper@delta 0029               fillCircleHelper@color 002B  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 0042  
                  __end_of_Day_Mode 1D02                      _Wait_N_Seconds 26F6  
                   write_data@data_ 0011                     __initialization 22C8  
                      __end_of_main 1E40                        __end_of_font FECE  
                  __end_of_Init_ADC 296C                    __end_of_Rcmd2red 2608  
                        _Night_Mode 1D02                              ??_main 0045  
                     ___fttol@sign1 002F                       __activetblptr 000002  
             Wait_N_Seconds@seconds 0043                   __end_of_LCD_Reset 292C  
                      _SW_EWPED_Txt 006C           ??_TFT_GreenTab_Initialize 001B  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001             __size_of_init_INTERRUPT 0016  
                __size_of_Draw_Star 003A                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 00DC  
                  ___awdiv@dividend 000F                    __end_of___awtoft 2682  
                  __end_of___ftpack 1C4A                              i2l2631 2912  
                            i2l2639 28FE                              i2l2953 20BE  
                            i2l2949 20B4                              _OSCCON 000FD3  
                __size_of_Init_UART 0014                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds 2728  
                      _SW_NSPED_Txt 0070                  __size_of_Read_Volt 006E  
                  __end_of_delay_ms 23D0                              _Set_EW 2586  
                            _Set_NS 24FE                    __end_of_fillRect 24BA  
                  __end_of_drawChar 1200                    __end_of_drawRect 22C8  
                __size_of_Set_EW_LT 0044                  __size_of_OpenUSART 0070  
                            ___ftge 1ED6                  __size_of_Set_NS_LT 0044  
          __size_of_Activate_Buzzer 0012                              ___wmul 27DE  
                         ??___awdiv 0013           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext 1552                           ??___awmod 0039  
                         ??___ftdiv 0021                           ??___ftmul 001D  
                         ??___fttol 002A                              _chkisr 0008  
                            _buffer 00AD                              clear_0 22CE  
                            clear_1 22DA                    ___awdiv@quotient 0015  
                   ___awmod@divisor 0037                          _Timing_Txt 0080  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0039  
                      drawtext@size 003E                              _strcpy 2728  
                            _strlen 2608               ___ftmul@f3_as_product 0021  
           ??_Initialize_LCD_Screen 0041                __end_of_get_full_ADC 282C  
                      __pdataCOMRAM 005D  __size_of_Wait_One_Second_With_Beep 0022  
                       Set_EW@color 0044                        __mediumconst FDCE  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                         ?_Erase_Star 0001  
                  __end_of_spiwrite 28F2                         Set_NS@color 0044  
                        __accesstop 0080             __end_of__initialization 2320  
                         ?_INT0_ISR 0001                           ?_INT1_ISR 0001  
                         ?_INT2_ISR 0001                          ___ftge@ff1 000F  
                        ___ftge@ff2 0012                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 001B  
                        ___ftdiv@f2 001E                          ___ftdiv@f3 0025  
                        ___awtoft@c 0017                          ___ftmul@f1 0017  
                        ___ftmul@f2 001A                          ___fttol@f1 0026  
                     __end_of_Rcmd1 1448                       __end_of_Rcmd3 173C  
                    __pcstackCOMRAM 0001                   __end_of_Draw_Star 26F6  
                      __pidataBANK0 278A                       __end_of_font2 FFAA  
                       ?_Night_Mode 0001                   __end_of_Init_UART 28DE  
                    drawPixel@color 0017              __size_of_write_command 0010  
                 __end_of_Read_Volt 2262                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT 2586                   __end_of_OpenUSART 21F4  
                 __end_of_Set_NS_LT 24FE                __size_of_PED_Control 00D8  
              Read_Volt@ADC_Channel 0030                          __pbssBANK0 00AA  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                        ??_INT0_ISR 0001                          ??_INT1_ISR 0001  
         __size_of_Wait_Half_Second 001A                          ??_INT2_ISR 0001  
                   spiwrite@spidata 0010                   ?_update_LCD_color 0041  
                 ?_update_LCD_count 0041                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  ??_update_LCD_color 0042  
                ??_update_LCD_count 0042                             ?___ftge 000F  
                           ?___wmul 000F                             ?_chkisr 0001  
               __size_of_Erase_Star 003A              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA                        ?_Do_Flashing 0001  
         update_LCD_PED_Count@count 0041                           ?___awtoft 0017  
                         ?___ftpack 000F                     _Wait_One_Second 286A  
                        _fillCircle 23D0                             ?_strcpy 000F  
                           ?_strlen 000F                   ??_Activate_Buzzer 000F  
                        _fillScreen 284E                          _drawCircle 0D72  
                        ??_Day_Mode 0045                      _init_INTERRUPT 289E  
                         ?_delay_ms 0015                           ?_fillRect 0021  
         update_LCD_count@direction 0042                           ?_drawChar 002C  
                           _SSPCON1 000FC6                           ?_drawRect 0021  
                           _SSPSTAT 000FC7               __end_of_fillRectangle 19E0  
                         ?_drawtext 0037                             _SW_EWLT 0054  
                        ??_Init_ADC 000F                             _SW_NSLT 0056  
                        ??_Rcmd2red 0012                 __size_of_Night_Mode 00A2  
                     _write_command 294E                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0044  
                   __size_of_Set_NS 0044               __end_of_drawFastHLine 1FF4  
                 __end_of_drawPixel 278A               __end_of_drawFastVLine 207C  
                  _fillCircleHelper 1200                     __size_of___ftge 0096  
                           ___awdiv 1E40                             ___awmod 2102  
                           ___ftdiv 1822                     __size_of___wmul 0028  
                           ___ftmul 1552                             ___fttol 173C  
             __size_of_get_full_ADC 0026                     __size_of_chkisr 20FA  
                         ?_spiwrite 0001                             __pcinit 22C8  
                        ??___awtoft 001A                          ??___ftpack 0014  
                           __ramtop 1000                             __ptext0 1DA4  
                           __ptext1 289E                             __ptext2 1D02  
                           __ptext3 001C                             __ptext4 284E  
                           __ptext5 1904                             __ptext6 2262  
                           __ptext7 1F6C                             __ptext8 27B4  
                           __ptext9 164A            _Light_Sensor_Voltage_Txt 0096  
            __end_of_init_INTERRUPT 28B4                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                         _T3CONbits 000FB1                    ___awmod@dividend 0035  
                        ??_delay_ms 0017                       drawtext@_text 0038  
                     drawtext@color 003A                          ??_fillRect 0026  
                        ??_drawChar 0033                           _LCD_Reset 291A  
                         _INT0_Flag 004D                           _INT1_Flag 004E  
                        ??_drawRect 002B                           _INT2_Flag 004F  
                     _setAddrWindow 2422                      __pintcode_body 207C  
                drawFastHLine@color 0018                          delay_ms@ms 0015  
              end_of_initialization 2320                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FDCE  
                           int_func 207C                           _PED_Count 0053  
                      _get_full_ADC 2806                        PED_Control@i 00D8  
                      PED_Control@j 00DA                           _EW_PED_SW 004A  
     __size_of_update_LCD_PED_Count 00CC                 update_LCD_misc@volt 00D5  
           __end_of_Wait_One_Second 2884                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 000F  
                           strlen@s 000F                     fillCircle@color 003F  
                       ?_fillCircle 0039                           _PORTAbits 000F80  
                  drawtext@cursor_x 00D2                    drawtext@cursor_y 00D1  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                     ?_init_INTERRUPT 0001  
                       ?_fillScreen 0022                           _NS_PED_SW 0052  
                       ?_drawCircle 001A      __size_of_Initialize_LCD_Screen 077C  
                        drawChar@bg 0030       __end_of_Initialize_LCD_Screen 0798  
                         _TRISCbits 000F94                        ??_Erase_Star 0041  
                    ?_setAddrWindow 0012                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 0043                    drawtext@textsize 00CD  
          __size_of_update_LCD_misc 0278                          drawPixel@x 0019  
                        drawPixel@y 0016                    _Wait_Half_Second 2884  
                       ___ftdiv@exp 0028                           _TXSTAbits 000FAC  
                get_full_ADC@result 0013                   __size_of_INT0_ISR 0014  
                 __size_of_INT1_ISR 0014                   __size_of_INT2_ISR 0008  
                       ___ftmul@exp 0020                      __end_of_Set_EW 25CA  
                    __end_of_Set_NS 2542                        _Light_Sensor 0050  
                    __end_of___ftge 1F6C                       Read_Volt@volt 002D  
                    __end_of___wmul 2806                  __end_of_Erase_Star 26BC  
                     delay_ms@count 0019                          _write_data 293E  
                     __pidataCOMRAM 28B4                      __end_of_chkisr 2102  
                         _Draw_Star 26BC                        ??_Night_Mode 0045  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 003C  
              __size_of_Do_Flashing 0054                  PED_Control@num_sec 0043  
                    __end_of_strcpy 275A                      __end_of_strlen 2646  
               start_initialization 22C8                           _Init_UART 28CA  
                 __size_of_Day_Mode 00B8                           _Read_Volt 21F4  
                   ??_write_command 0011                           _Set_EW_LT 2542  
                         _OpenUSART 2184                           _Set_NS_LT 24BA  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode 1DA4  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 0044                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0044                            ??_Set_NS 0044  
                   _Activate_Buzzer 292C                    ?_Wait_One_Second 0001  
                          ??___ftge 0015                            ??___wmul 0013  
                          ??_chkisr 0001                         __pdataBANK0 0080  
                        ?_Draw_Star 0001                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00A4  
         __size_of_update_LCD_color 0362           __size_of_update_LCD_count 018A  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0045                       ??_PED_Control 0044  
                        ?_Init_UART 0001                     ??_setAddrWindow 0015  
                     __pcstackBANK0 00CC                        _PED_NS_Count 00A7  
                        ?_Read_Volt 002A                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 1338                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 000F                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 010A  
                 ??_update_LCD_misc 0041                           __pintcode 0008  
   __end_of_TFT_GreenTab_Initialize 27DE                       __pmediumconst FDCE  
                          ?___awdiv 000F                            ?___awmod 0035  
                          ?___ftdiv 001B                            ?___ftmul 0017  
                          ?___fttol 0026                           __tft_type 0058  
                         _direction 005B                  drawFastVLine@color 0018  
                       ?_write_data 0001                           _drawPixel 275A  
                 __size_of_spiwrite 0014                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2   __end_of_Wait_One_Second_With_Beep 284E  
               __end_of_PED_Control 1AB8             __end_of_Activate_Buzzer 293E  
                          _INT0_ISR 2906                            _INT1_ISR 28F2  
                          _INT2_ISR 2974                      ___wmul@product 0013  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 005E  
                  ??_init_INTERRUPT 000F                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                       ??_Draw_Star 0041                           drawChar@c 002D  
                         drawChar@i 0036                           drawChar@j 0035  
                      ??_fillCircle 0041                           drawChar@x 0034  
                         drawChar@y 002C                          ?_drawPixel 0016  
            __size_of_fillRectangle 00DC                            _NS_Count 00A1  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second 289E  
                 ___wmul@multiplier 000F                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 0066                       _FlashingS_Txt 0068  
                      ??_drawCircle 0022        __end_of_update_LCD_PED_Count 1B84  
                          _SW_EWPED 0055               update_LCD_color@color 0041  
                          _Day_Mode 1C4A                            _SW_NSPED 0057  
         update_LCD_color@direction 0042                         ??_Init_UART 0012  
                       ??_Read_Volt 002D              __size_of_drawFastHLine 0088  
                       _INTCON2bits 000FF1               _Light_Sensor_Mode_Txt 0061  
                       _INTCON3bits 000FF0                           copy_data0 22F4  
                         copy_data1 2314                           drawtext@i 00CF  
            __size_of_drawFastVLine 0088                           drawtext@x 00CC  
                         drawtext@y 0037                            _Init_ADC 295E  
                 write_command@cmd_ 0011                         ??_Set_EW_LT 0044  
                       ??_OpenUSART 0011                         ??_Set_NS_LT 0044  
                          _Rcmd2red 25CA                 __size_of_write_data 0010  
                   OpenUSART@config 0011                  __end_of_fillCircle 2422  
                          __Hrparam 0000                  __end_of_fillScreen 286A  
             update_LCD_count@count 0041                            __Lrparam 0000  
                __end_of_drawCircle 0F20                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                  __size_of___ftmul 00F8                    __size_of___fttol 00E6  
                          ___awtoft 2646                            ___ftpack 1B84  
                  _update_LCD_color 0798                    _update_LCD_count 0F20  
                       _PED_Control 19E0                            _delay_ms 237E  
                          __ptext10 25CA                            __ptext11 1338  
                          __ptext20 0F20                            __ptext12 291A  
                          __ptext21 286A                            __ptext13 237E  
                          __ptext30 19E0                            __ptext22 24BA  
                          __ptext14 28CA                            __ptext31 1AB8  
                          __ptext23 24FE                            __ptext15 2184  
                          __ptext40 2806                            __ptext32 1E40  
                          __ptext24 2542                            __ptext16 295E  
                          __ptext41 1822                            __ptext33 282C  
                          __ptext25 2586                            __ptext17 232A  
                          __ptext50 10AA                            __ptext42 2646  
                          __ptext34 0AFA                            __ptext26 0798  
                          __ptext18 1C4A                            __ptext51 2470  
                          __ptext43 1B84                            __ptext35 173C  
                          __ptext27 23D0                            __ptext19 26F6  
                          __ptext60 292C                            __ptext52 1FF4  
                          __ptext44 2884                            __ptext36 1552  
                          __ptext28 1200                            __ptext53 275A  
                          __ptext45 2682                            __ptext37 1ED6  
                          __ptext29 0D72                            __ptext62 2974  
                          __ptext54 2422                            __ptext46 26BC  
                          __ptext38 2102                            __ptext63 28F2  
                          __ptext55 293E                            __ptext47 2728  
                          __ptext39 21F4                            __ptext64 2906  
                          __ptext56 294E                            __ptext48 1448  
                          __ptext57 28DE                            __ptext49 2608  
                          __ptext58 27DE                            __ptext59 296C  
                          _fillRect 2470                            _drawChar 10AA  
             _Initialize_LCD_Screen 001C                            _drawRect 2262  
  __size_of_TFT_GreenTab_Initialize 002A                            _colstart 0059  
                          _drawtext 1448                          strcpy@from 0011  
                     _fillRectangle 1904                    ?_Activate_Buzzer 0001  
                     __size_of_main 009C                     fillRectangle@hi 001F  
                   fillRectangle@lo 0020                       _drawFastHLine 1F6C  
                    Set_EW_LT@color 0044                       _drawFastVLine 1FF4  
                     ??_Do_Flashing 0045                            _spiwrite 28DE  
                       ??_drawPixel 0019                            _rowstart 005C  
                fillCircleHelper@x0 0021                  fillCircleHelper@y0 0023  
                        _INTCONbits 000FF2                      OpenUSART@spbrg 000F  
                        _EWLT_Count 009B                   ?_fillCircleHelper 0021  
                         spiwrite@x 000F         ??_Wait_One_Second_With_Beep 0041  
                          intlevel2 0000                     _update_LCD_misc 0AFA  
                    ?_fillRectangle 0016                  ??_fillCircleHelper 002D  
             __end_of_write_command 295E                     fillScreen@color 0022  
              update_LCD_misc@nStep 00D3                _update_LCD_PED_Count 1AB8  
           __size_of_Wait_N_Seconds 0032                        fillCircle@x0 0039  
                      fillCircle@y0 003B                      ?_drawFastHLine 0016  
                    fillRectangle@h 0018                      fillRectangle@w 0017  
                    fillRectangle@x 0021                      fillRectangle@y 0016  
                    ?_drawFastVLine 0016                   fillCircleHelper@f 0033  
                 fillCircleHelper@r 0025                   fillCircleHelper@x 0035  
                 fillCircleHelper@y 0037                        ??_write_data 0011  
                     fillRect@color 0024            __size_of_Wait_One_Second 001A  
                          strcpy@cp 0013                            strlen@cp 0013  
                          strcpy@to 000F                 __end_of_Do_Flashing 237E  
                        _NSLT_Count 009E              ?_Initialize_LCD_Screen 0001  
                       fillCircle@r 003D               __end_of_setAddrWindow 2470  
                fillRectangle@color 0019                       drawChar@color 002E  
                __end_of_write_data 294E                        drawChar@line 0033  
                    Set_NS_LT@color 0044                       ?_get_full_ADC 000F  
                      drawChar@size 0032               ?_update_LCD_PED_Count 0041  
