

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 24 17:26:33 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  00D7F7                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _wrap
    81  00D7F7  01                 	db	1
    82                           
    83                           ;initializer for _Light_Sensor_Voltage_Txt
    84  00D7F8  32                 	db	50
    85  00D7F9  2E                 	db	46
    86  00D7FA  35                 	db	53
    87  00D7FB  56                 	db	86
    88  00D7FC  00                 	db	0
    89                           
    90                           ;initializer for _EWLT_Count
    91  00D7FD  30                 	db	48
    92  00D7FE  30                 	db	48
    93  00D7FF  00                 	db	0
    94                           
    95                           ;initializer for _EW_Count
    96  00D800  30                 	db	48
    97  00D801  30                 	db	48
    98  00D802  00                 	db	0
    99                           
   100                           ;initializer for _Light_Sensor_Mode_Txt
   101  00D803  2D                 	db	45
   102  00D804  44                 	db	68
   103  00D805  00                 	db	0
   104                           
   105                           ;initializer for _NSLT_Count
   106  00D806  30                 	db	48
   107  00D807  30                 	db	48
   108  00D808  00                 	db	0
   109                           
   110                           ;initializer for _NS_Count
   111  00D809  30                 	db	48
   112  00D80A  30                 	db	48
   113  00D80B  00                 	db	0
   114                           
   115                           ;initializer for _PED_EW_Count
   116  00D80C  30                 	db	48
   117  00D80D  30                 	db	48
   118  00D80E  00                 	db	0
   119                           
   120                           ;initializer for _PED_NS_Count
   121  00D80F  30                 	db	48
   122  00D810  30                 	db	48
   123  00D811  00                 	db	0
   124                           
   125                           ;initializer for _Act_Mode_Txt
   126  00D812  44                 	db	68
   127  00D813  00                 	db	0
   128                           
   129                           ;initializer for _FlashingR_Txt
   130  00D814  30                 	db	48
   131  00D815  00                 	db	0
   132                           
   133                           ;initializer for _FlashingS_Txt
   134  00D816  30                 	db	48
   135  00D817  00                 	db	0
   136                           
   137                           ;initializer for _SW_EWLT_Txt
   138  00D818  30                 	db	48
   139  00D819  00                 	db	0
   140                           
   141                           ;initializer for _SW_EWPED_Txt
   142  00D81A  30                 	db	48
   143  00D81B  00                 	db	0
   144                           
   145                           ;initializer for _SW_NSLT_Txt
   146  00D81C  30                 	db	48
   147  00D81D  00                 	db	0
   148                           
   149                           ;initializer for _SW_NSPED_Txt
   150  00D81E  30                 	db	48
   151  00D81F  00                 	db	0
   152                           
   153                           	psect	idataBANK0
   154  00D720                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _Timing_Txt
   158  00D720  53                 	db	83
   159  00D721  50                 	db	80
   160  00D722  32                 	db	50
   161  00D723  34                 	db	52
   162  00D724  2F                 	db	47
   163  00D725  31                 	db	49
   164  00D726  2F                 	db	47
   165  00D727  30                 	db	48
   166  00D728  31                 	db	49
   167  00D729  20                 	db	32
   168  00D72A  30                 	db	48
   169  00D72B  30                 	db	48
   170  00D72C  30                 	db	48
   171  00D72D  30                 	db	48
   172  00D72E  30                 	db	48
   173  00D72F  30                 	db	48
   174  00D730  20                 	db	32
   175  00D731  30                 	db	48
   176  00D732  30                 	db	48
   177  00D733  30                 	db	48
   178  00D734  30                 	db	48
   179  00D735  00                 	db	0
   180                           
   181                           	psect	mediumconst
   182  00FDCE                     __pmediumconst:
   183                           	opt stack 0
   184  00FDCE  00                 	db	0
   185  00FDCF                     _font:
   186                           	opt stack 0
   187  00FDCF  00                 	db	0
   188  00FDD0  00                 	db	0
   189  00FDD1  00                 	db	0
   190  00FDD2  00                 	db	0
   191  00FDD3  00                 	db	0
   192  00FDD4  00                 	db	0
   193  00FDD5  00                 	db	0
   194  00FDD6  5F                 	db	95
   195  00FDD7  00                 	db	0
   196  00FDD8  00                 	db	0
   197  00FDD9  00                 	db	0
   198  00FDDA  07                 	db	7
   199  00FDDB  00                 	db	0
   200  00FDDC  07                 	db	7
   201  00FDDD  00                 	db	0
   202  00FDDE  14                 	db	20
   203  00FDDF  7F                 	db	127
   204  00FDE0  14                 	db	20
   205  00FDE1  7F                 	db	127
   206  00FDE2  14                 	db	20
   207  00FDE3  24                 	db	36
   208  00FDE4  2A                 	db	42
   209  00FDE5  7F                 	db	127
   210  00FDE6  2A                 	db	42
   211  00FDE7  12                 	db	18
   212  00FDE8  23                 	db	35
   213  00FDE9  13                 	db	19
   214  00FDEA  08                 	db	8
   215  00FDEB  64                 	db	100
   216  00FDEC  62                 	db	98
   217  00FDED  36                 	db	54
   218  00FDEE  49                 	db	73
   219  00FDEF  56                 	db	86
   220  00FDF0  20                 	db	32
   221  00FDF1  50                 	db	80
   222  00FDF2  00                 	db	0
   223  00FDF3  08                 	db	8
   224  00FDF4  07                 	db	7
   225  00FDF5  03                 	db	3
   226  00FDF6  00                 	db	0
   227  00FDF7  00                 	db	0
   228  00FDF8  1C                 	db	28
   229  00FDF9  22                 	db	34
   230  00FDFA  41                 	db	65
   231  00FDFB  00                 	db	0
   232  00FDFC  00                 	db	0
   233  00FDFD  41                 	db	65
   234  00FDFE  22                 	db	34
   235  00FDFF  1C                 	db	28
   236  00FE00  00                 	db	0
   237  00FE01  2A                 	db	42
   238  00FE02  1C                 	db	28
   239  00FE03  7F                 	db	127
   240  00FE04  1C                 	db	28
   241  00FE05  2A                 	db	42
   242  00FE06  08                 	db	8
   243  00FE07  08                 	db	8
   244  00FE08  3E                 	db	62
   245  00FE09  08                 	db	8
   246  00FE0A  08                 	db	8
   247  00FE0B  00                 	db	0
   248  00FE0C  80                 	db	128
   249  00FE0D  70                 	db	112
   250  00FE0E  30                 	db	48
   251  00FE0F  00                 	db	0
   252  00FE10  08                 	db	8
   253  00FE11  08                 	db	8
   254  00FE12  08                 	db	8
   255  00FE13  08                 	db	8
   256  00FE14  08                 	db	8
   257  00FE15  00                 	db	0
   258  00FE16  00                 	db	0
   259  00FE17  60                 	db	96
   260  00FE18  60                 	db	96
   261  00FE19  00                 	db	0
   262  00FE1A  20                 	db	32
   263  00FE1B  10                 	db	16
   264  00FE1C  08                 	db	8
   265  00FE1D  04                 	db	4
   266  00FE1E  02                 	db	2
   267  00FE1F  3E                 	db	62
   268  00FE20  51                 	db	81
   269  00FE21  49                 	db	73
   270  00FE22  45                 	db	69
   271  00FE23  3E                 	db	62
   272  00FE24  00                 	db	0
   273  00FE25  42                 	db	66
   274  00FE26  7F                 	db	127
   275  00FE27  40                 	db	64
   276  00FE28  00                 	db	0
   277  00FE29  72                 	db	114
   278  00FE2A  49                 	db	73
   279  00FE2B  49                 	db	73
   280  00FE2C  49                 	db	73
   281  00FE2D  46                 	db	70
   282  00FE2E  21                 	db	33
   283  00FE2F  41                 	db	65
   284  00FE30  49                 	db	73
   285  00FE31  4D                 	db	77
   286  00FE32  33                 	db	51
   287  00FE33  18                 	db	24
   288  00FE34  14                 	db	20
   289  00FE35  12                 	db	18
   290  00FE36  7F                 	db	127
   291  00FE37  10                 	db	16
   292  00FE38  27                 	db	39
   293  00FE39  45                 	db	69
   294  00FE3A  45                 	db	69
   295  00FE3B  45                 	db	69
   296  00FE3C  39                 	db	57
   297  00FE3D  3C                 	db	60
   298  00FE3E  4A                 	db	74
   299  00FE3F  49                 	db	73
   300  00FE40  49                 	db	73
   301  00FE41  31                 	db	49
   302  00FE42  41                 	db	65
   303  00FE43  21                 	db	33
   304  00FE44  11                 	db	17
   305  00FE45  09                 	db	9
   306  00FE46  07                 	db	7
   307  00FE47  36                 	db	54
   308  00FE48  49                 	db	73
   309  00FE49  49                 	db	73
   310  00FE4A  49                 	db	73
   311  00FE4B  36                 	db	54
   312  00FE4C  46                 	db	70
   313  00FE4D  49                 	db	73
   314  00FE4E  49                 	db	73
   315  00FE4F  29                 	db	41
   316  00FE50  1E                 	db	30
   317  00FE51  00                 	db	0
   318  00FE52  00                 	db	0
   319  00FE53  14                 	db	20
   320  00FE54  00                 	db	0
   321  00FE55  00                 	db	0
   322  00FE56  00                 	db	0
   323  00FE57  40                 	db	64
   324  00FE58  34                 	db	52
   325  00FE59  00                 	db	0
   326  00FE5A  00                 	db	0
   327  00FE5B  00                 	db	0
   328  00FE5C  08                 	db	8
   329  00FE5D  14                 	db	20
   330  00FE5E  22                 	db	34
   331  00FE5F  41                 	db	65
   332  00FE60  14                 	db	20
   333  00FE61  14                 	db	20
   334  00FE62  14                 	db	20
   335  00FE63  14                 	db	20
   336  00FE64  14                 	db	20
   337  00FE65  00                 	db	0
   338  00FE66  41                 	db	65
   339  00FE67  22                 	db	34
   340  00FE68  14                 	db	20
   341  00FE69  08                 	db	8
   342  00FE6A  02                 	db	2
   343  00FE6B  01                 	db	1
   344  00FE6C  59                 	db	89
   345  00FE6D  09                 	db	9
   346  00FE6E  06                 	db	6
   347  00FE6F  3E                 	db	62
   348  00FE70  41                 	db	65
   349  00FE71  5D                 	db	93
   350  00FE72  59                 	db	89
   351  00FE73  4E                 	db	78
   352  00FE74  7C                 	db	124
   353  00FE75  12                 	db	18
   354  00FE76  11                 	db	17
   355  00FE77  12                 	db	18
   356  00FE78  7C                 	db	124
   357  00FE79  7F                 	db	127
   358  00FE7A  49                 	db	73
   359  00FE7B  49                 	db	73
   360  00FE7C  49                 	db	73
   361  00FE7D  36                 	db	54
   362  00FE7E  3E                 	db	62
   363  00FE7F  41                 	db	65
   364  00FE80  41                 	db	65
   365  00FE81  41                 	db	65
   366  00FE82  22                 	db	34
   367  00FE83  7F                 	db	127
   368  00FE84  41                 	db	65
   369  00FE85  41                 	db	65
   370  00FE86  41                 	db	65
   371  00FE87  3E                 	db	62
   372  00FE88  7F                 	db	127
   373  00FE89  49                 	db	73
   374  00FE8A  49                 	db	73
   375  00FE8B  49                 	db	73
   376  00FE8C  41                 	db	65
   377  00FE8D  7F                 	db	127
   378  00FE8E  09                 	db	9
   379  00FE8F  09                 	db	9
   380  00FE90  09                 	db	9
   381  00FE91  01                 	db	1
   382  00FE92  3E                 	db	62
   383  00FE93  41                 	db	65
   384  00FE94  41                 	db	65
   385  00FE95  51                 	db	81
   386  00FE96  73                 	db	115
   387  00FE97  7F                 	db	127
   388  00FE98  08                 	db	8
   389  00FE99  08                 	db	8
   390  00FE9A  08                 	db	8
   391  00FE9B  7F                 	db	127
   392  00FE9C  00                 	db	0
   393  00FE9D  41                 	db	65
   394  00FE9E  7F                 	db	127
   395  00FE9F  41                 	db	65
   396  00FEA0  00                 	db	0
   397  00FEA1  20                 	db	32
   398  00FEA2  40                 	db	64
   399  00FEA3  41                 	db	65
   400  00FEA4  3F                 	db	63
   401  00FEA5  01                 	db	1
   402  00FEA6  7F                 	db	127
   403  00FEA7  08                 	db	8
   404  00FEA8  14                 	db	20
   405  00FEA9  22                 	db	34
   406  00FEAA  41                 	db	65
   407  00FEAB  7F                 	db	127
   408  00FEAC  40                 	db	64
   409  00FEAD  40                 	db	64
   410  00FEAE  40                 	db	64
   411  00FEAF  40                 	db	64
   412  00FEB0  7F                 	db	127
   413  00FEB1  02                 	db	2
   414  00FEB2  1C                 	db	28
   415  00FEB3  02                 	db	2
   416  00FEB4  7F                 	db	127
   417  00FEB5  7F                 	db	127
   418  00FEB6  04                 	db	4
   419  00FEB7  08                 	db	8
   420  00FEB8  10                 	db	16
   421  00FEB9  7F                 	db	127
   422  00FEBA  3E                 	db	62
   423  00FEBB  41                 	db	65
   424  00FEBC  41                 	db	65
   425  00FEBD  41                 	db	65
   426  00FEBE  3E                 	db	62
   427  00FEBF  7F                 	db	127
   428  00FEC0  09                 	db	9
   429  00FEC1  09                 	db	9
   430  00FEC2  09                 	db	9
   431  00FEC3  06                 	db	6
   432  00FEC4  3E                 	db	62
   433  00FEC5  41                 	db	65
   434  00FEC6  51                 	db	81
   435  00FEC7  21                 	db	33
   436  00FEC8  5E                 	db	94
   437  00FEC9  7F                 	db	127
   438  00FECA  09                 	db	9
   439  00FECB  19                 	db	25
   440  00FECC  29                 	db	41
   441  00FECD  46                 	db	70
   442  00FECE                     __end_of_font:
   443                           	opt stack 0
   444  00FECE                     _font2:
   445                           	opt stack 0
   446  00FECE  26                 	db	38
   447  00FECF  49                 	db	73
   448  00FED0  49                 	db	73
   449  00FED1  49                 	db	73
   450  00FED2  32                 	db	50
   451  00FED3  03                 	db	3
   452  00FED4  01                 	db	1
   453  00FED5  7F                 	db	127
   454  00FED6  01                 	db	1
   455  00FED7  03                 	db	3
   456  00FED8  3F                 	db	63
   457  00FED9  40                 	db	64
   458  00FEDA  40                 	db	64
   459  00FEDB  40                 	db	64
   460  00FEDC  3F                 	db	63
   461  00FEDD  1F                 	db	31
   462  00FEDE  20                 	db	32
   463  00FEDF  40                 	db	64
   464  00FEE0  20                 	db	32
   465  00FEE1  1F                 	db	31
   466  00FEE2  3F                 	db	63
   467  00FEE3  40                 	db	64
   468  00FEE4  38                 	db	56
   469  00FEE5  40                 	db	64
   470  00FEE6  3F                 	db	63
   471  00FEE7  63                 	db	99
   472  00FEE8  14                 	db	20
   473  00FEE9  08                 	db	8
   474  00FEEA  14                 	db	20
   475  00FEEB  63                 	db	99
   476  00FEEC  03                 	db	3
   477  00FEED  04                 	db	4
   478  00FEEE  78                 	db	120
   479  00FEEF  04                 	db	4
   480  00FEF0  03                 	db	3
   481  00FEF1  61                 	db	97
   482  00FEF2  59                 	db	89
   483  00FEF3  49                 	db	73
   484  00FEF4  4D                 	db	77
   485  00FEF5  43                 	db	67
   486  00FEF6  00                 	db	0
   487  00FEF7  7F                 	db	127
   488  00FEF8  41                 	db	65
   489  00FEF9  41                 	db	65
   490  00FEFA  41                 	db	65
   491  00FEFB  02                 	db	2
   492  00FEFC  04                 	db	4
   493  00FEFD  08                 	db	8
   494  00FEFE  10                 	db	16
   495  00FEFF  20                 	db	32
   496  00FF00  00                 	db	0
   497  00FF01  41                 	db	65
   498  00FF02  41                 	db	65
   499  00FF03  41                 	db	65
   500  00FF04  7F                 	db	127
   501  00FF05  04                 	db	4
   502  00FF06  02                 	db	2
   503  00FF07  01                 	db	1
   504  00FF08  02                 	db	2
   505  00FF09  04                 	db	4
   506  00FF0A  40                 	db	64
   507  00FF0B  40                 	db	64
   508  00FF0C  40                 	db	64
   509  00FF0D  40                 	db	64
   510  00FF0E  40                 	db	64
   511  00FF0F  00                 	db	0
   512  00FF10  03                 	db	3
   513  00FF11  07                 	db	7
   514  00FF12  08                 	db	8
   515  00FF13  00                 	db	0
   516  00FF14  20                 	db	32
   517  00FF15  54                 	db	84
   518  00FF16  54                 	db	84
   519  00FF17  78                 	db	120
   520  00FF18  40                 	db	64
   521  00FF19  7F                 	db	127
   522  00FF1A  28                 	db	40
   523  00FF1B  44                 	db	68
   524  00FF1C  44                 	db	68
   525  00FF1D  38                 	db	56
   526  00FF1E  38                 	db	56
   527  00FF1F  44                 	db	68
   528  00FF20  44                 	db	68
   529  00FF21  44                 	db	68
   530  00FF22  28                 	db	40
   531  00FF23  38                 	db	56
   532  00FF24  44                 	db	68
   533  00FF25  44                 	db	68
   534  00FF26  28                 	db	40
   535  00FF27  7F                 	db	127
   536  00FF28  38                 	db	56
   537  00FF29  54                 	db	84
   538  00FF2A  54                 	db	84
   539  00FF2B  54                 	db	84
   540  00FF2C  18                 	db	24
   541  00FF2D  00                 	db	0
   542  00FF2E  08                 	db	8
   543  00FF2F  7E                 	db	126
   544  00FF30  09                 	db	9
   545  00FF31  02                 	db	2
   546  00FF32  18                 	db	24
   547  00FF33  A4                 	db	164
   548  00FF34  A4                 	db	164
   549  00FF35  9C                 	db	156
   550  00FF36  78                 	db	120
   551  00FF37  7F                 	db	127
   552  00FF38  08                 	db	8
   553  00FF39  04                 	db	4
   554  00FF3A  04                 	db	4
   555  00FF3B  78                 	db	120
   556  00FF3C  00                 	db	0
   557  00FF3D  44                 	db	68
   558  00FF3E  7D                 	db	125
   559  00FF3F  40                 	db	64
   560  00FF40  00                 	db	0
   561  00FF41  20                 	db	32
   562  00FF42  40                 	db	64
   563  00FF43  40                 	db	64
   564  00FF44  3D                 	db	61
   565  00FF45  00                 	db	0
   566  00FF46  7F                 	db	127
   567  00FF47  10                 	db	16
   568  00FF48  28                 	db	40
   569  00FF49  44                 	db	68
   570  00FF4A  00                 	db	0
   571  00FF4B  00                 	db	0
   572  00FF4C  41                 	db	65
   573  00FF4D  7F                 	db	127
   574  00FF4E  40                 	db	64
   575  00FF4F  00                 	db	0
   576  00FF50  7C                 	db	124
   577  00FF51  04                 	db	4
   578  00FF52  78                 	db	120
   579  00FF53  04                 	db	4
   580  00FF54  78                 	db	120
   581  00FF55  7C                 	db	124
   582  00FF56  08                 	db	8
   583  00FF57  04                 	db	4
   584  00FF58  04                 	db	4
   585  00FF59  78                 	db	120
   586  00FF5A  38                 	db	56
   587  00FF5B  44                 	db	68
   588  00FF5C  44                 	db	68
   589  00FF5D  44                 	db	68
   590  00FF5E  38                 	db	56
   591  00FF5F  FC                 	db	252
   592  00FF60  18                 	db	24
   593  00FF61  24                 	db	36
   594  00FF62  24                 	db	36
   595  00FF63  18                 	db	24
   596  00FF64  18                 	db	24
   597  00FF65  24                 	db	36
   598  00FF66  24                 	db	36
   599  00FF67  18                 	db	24
   600  00FF68  FC                 	db	252
   601  00FF69  7C                 	db	124
   602  00FF6A  08                 	db	8
   603  00FF6B  04                 	db	4
   604  00FF6C  04                 	db	4
   605  00FF6D  08                 	db	8
   606  00FF6E  48                 	db	72
   607  00FF6F  54                 	db	84
   608  00FF70  54                 	db	84
   609  00FF71  54                 	db	84
   610  00FF72  24                 	db	36
   611  00FF73  04                 	db	4
   612  00FF74  04                 	db	4
   613  00FF75  3F                 	db	63
   614  00FF76  44                 	db	68
   615  00FF77  24                 	db	36
   616  00FF78  3C                 	db	60
   617  00FF79  40                 	db	64
   618  00FF7A  40                 	db	64
   619  00FF7B  20                 	db	32
   620  00FF7C  7C                 	db	124
   621  00FF7D  1C                 	db	28
   622  00FF7E  20                 	db	32
   623  00FF7F  40                 	db	64
   624  00FF80  20                 	db	32
   625  00FF81  1C                 	db	28
   626  00FF82  3C                 	db	60
   627  00FF83  40                 	db	64
   628  00FF84  30                 	db	48
   629  00FF85  40                 	db	64
   630  00FF86  3C                 	db	60
   631  00FF87  44                 	db	68
   632  00FF88  28                 	db	40
   633  00FF89  10                 	db	16
   634  00FF8A  28                 	db	40
   635  00FF8B  44                 	db	68
   636  00FF8C  4C                 	db	76
   637  00FF8D  90                 	db	144
   638  00FF8E  90                 	db	144
   639  00FF8F  90                 	db	144
   640  00FF90  7C                 	db	124
   641  00FF91  44                 	db	68
   642  00FF92  64                 	db	100
   643  00FF93  54                 	db	84
   644  00FF94  4C                 	db	76
   645  00FF95  44                 	db	68
   646  00FF96  00                 	db	0
   647  00FF97  08                 	db	8
   648  00FF98  36                 	db	54
   649  00FF99  41                 	db	65
   650  00FF9A  00                 	db	0
   651  00FF9B  00                 	db	0
   652  00FF9C  00                 	db	0
   653  00FF9D  77                 	db	119
   654  00FF9E  00                 	db	0
   655  00FF9F  00                 	db	0
   656  00FFA0  00                 	db	0
   657  00FFA1  41                 	db	65
   658  00FFA2  36                 	db	54
   659  00FFA3  08                 	db	8
   660  00FFA4  00                 	db	0
   661  00FFA5  02                 	db	2
   662  00FFA6  01                 	db	1
   663  00FFA7  02                 	db	2
   664  00FFA8  04                 	db	4
   665  00FFA9  02                 	db	2
   666  00FFAA                     __end_of_font2:
   667                           	opt stack 0
   668  0000                     _ADCON0	set	4034
   669  0000                     _ADCON0bits	set	4034
   670  0000                     _ADCON1	set	4033
   671  0000                     _ADCON2	set	4032
   672  0000                     _ADRESH	set	4036
   673  0000                     _ADRESL	set	4035
   674  0000                     _CCP2CON	set	4026
   675  0000                     _CCPR2L	set	4027
   676  0000                     _INTCONbits	set	4082
   677  0000                     _OSCCON	set	4051
   678  0000                     _PIE1bits	set	3997
   679  0000                     _PIR1bits	set	3998
   680  0000                     _PIR2bits	set	4001
   681  0000                     _PORTAbits	set	3968
   682  0000                     _PORTCbits	set	3970
   683  0000                     _PORTDbits	set	3971
   684  0000                     _PORTEbits	set	3972
   685  0000                     _PR2	set	4043
   686  0000                     _RCSTA	set	4011
   687  0000                     _RCSTAbits	set	4011
   688  0000                     _SPBRG	set	4015
   689  0000                     _SPBRGH	set	4016
   690  0000                     _SSPBUF	set	4041
   691  0000                     _SSPCON1	set	4038
   692  0000                     _SSPSTAT	set	4039
   693  0000                     _SSPSTATbits	set	4039
   694  0000                     _T0CON	set	4053
   695  0000                     _T0CONbits	set	4053
   696  0000                     _T2CON	set	4042
   697  0000                     _T3CON	set	4017
   698  0000                     _T3CONbits	set	4017
   699  0000                     _TMR0H	set	4055
   700  0000                     _TMR0L	set	4054
   701  0000                     _TMR3H	set	4019
   702  0000                     _TMR3L	set	4018
   703  0000                     _TRISA	set	3986
   704  0000                     _TRISB	set	3987
   705  0000                     _TRISC	set	3988
   706  0000                     _TRISCbits	set	3988
   707  0000                     _TRISD	set	3989
   708  0000                     _TRISE	set	3990
   709  0000                     _TXREG	set	4013
   710  0000                     _TXSTA	set	4012
   711  0000                     _TXSTAbits	set	4012
   712  0000                     _TRMT	set	32097
   713  00FFAA                     STR_5:
   714  00FFAA  4E                 	db	78	;'N'
   715  00FFAB  53                 	db	83	;'S'
   716  00FFAC  50                 	db	80	;'P'
   717  00FFAD  20                 	db	32
   718  00FFAE  4E                 	db	78	;'N'
   719  00FFAF  53                 	db	83	;'S'
   720  00FFB0  4C                 	db	76	;'L'
   721  00FFB1  54                 	db	84	;'T'
   722  00FFB2  20                 	db	32
   723  00FFB3  45                 	db	69	;'E'
   724  00FFB4  57                 	db	87	;'W'
   725  00FFB5  50                 	db	80	;'P'
   726  00FFB6  20                 	db	32
   727  00FFB7  45                 	db	69	;'E'
   728  00FFB8  57                 	db	87	;'W'
   729  00FFB9  4C                 	db	76	;'L'
   730  00FFBA  54                 	db	84	;'T'
   731  00FFBB  20                 	db	32
   732  00FFBC  52                 	db	82	;'R'
   733  00FFBD  20                 	db	32
   734  00FFBE  53                 	db	83	;'S'
   735  00FFBF  00                 	db	0
   736  00FFC0                     STR_6:
   737  00FFC0  4E                 	db	78	;'N'
   738  00FFC1  4F                 	db	79	;'O'
   739  00FFC2  52                 	db	82	;'R'
   740  00FFC3  54                 	db	84	;'T'
   741  00FFC4  48                 	db	72	;'H'
   742  00FFC5  2F                 	db	47
   743  00FFC6  53                 	db	83	;'S'
   744  00FFC7  4F                 	db	79	;'O'
   745  00FFC8  55                 	db	85	;'U'
   746  00FFC9  54                 	db	84	;'T'
   747  00FFCA  48                 	db	72	;'H'
   748  00FFCB  00                 	db	0
   749  00FFCC                     STR_8:
   750  00FFCC  45                 	db	69	;'E'
   751  00FFCD  41                 	db	65	;'A'
   752  00FFCE  53                 	db	83	;'S'
   753  00FFCF  54                 	db	84	;'T'
   754  00FFD0  2F                 	db	47
   755  00FFD1  57                 	db	87	;'W'
   756  00FFD2  45                 	db	69	;'E'
   757  00FFD3  53                 	db	83	;'S'
   758  00FFD4  54                 	db	84	;'T'
   759  00FFD5  00                 	db	0
   760  00FFD6                     STR_7:
   761  00FFD6  4E                 	db	78	;'N'
   762  00FFD7  2F                 	db	47
   763  00FFD8  53                 	db	83	;'S'
   764  00FFD9  20                 	db	32
   765  00FFDA  4C                 	db	76	;'L'
   766  00FFDB  54                 	db	84	;'T'
   767  00FFDC  00                 	db	0
   768  00FFDD                     STR_9:
   769  00FFDD  45                 	db	69	;'E'
   770  00FFDE  2F                 	db	47
   771  00FFDF  57                 	db	87	;'W'
   772  00FFE0  20                 	db	32
   773  00FFE1  4C                 	db	76	;'L'
   774  00FFE2  54                 	db	84	;'T'
   775  00FFE3  00                 	db	0
   776  00FFE4                     STR_1:
   777  00FFE4  4D                 	db	77	;'M'
   778  00FFE5  6F                 	db	111	;'o'
   779  00FFE6  64                 	db	100	;'d'
   780  00FFE7  65                 	db	101	;'e'
   781  00FFE8  3A                 	db	58	;':'
   782  00FFE9  00                 	db	0
   783  00FFEA                     STR_2:
   784  00FFEA  4C                 	db	76	;'L'
   785  00FFEB  53                 	db	83	;'S'
   786  00FFEC  56                 	db	86	;'V'
   787  00FFED  3A                 	db	58	;':'
   788  00FFEE  00                 	db	0
   789  00FFEF                     STR_10:
   790  00FFEF  50                 	db	80	;'P'
   791  00FFF0  4E                 	db	78	;'N'
   792  00FFF1  53                 	db	83	;'S'
   793  00FFF2  00                 	db	0
   794  00FFF3                     STR_11:
   795  00FFF3  50                 	db	80	;'P'
   796  00FFF4  45                 	db	69	;'E'
   797  00FFF5  57                 	db	87	;'W'
   798  00FFF6  00                 	db	0
   799  00FFF7                     STR_3:
   800  00FFF7  2D                 	db	45
   801  00FFF8  44                 	db	68	;'D'
   802  00FFF9  00                 	db	0
   803  00FFFA                     STR_13:
   804  00FFFA  20                 	db	32
   805  00FFFB  00                 	db	0
   806  00FFFC                     STR_4:
   807  00FFFC  2A                 	db	42
   808  00FFFD  00                 	db	0
   809  0000                     
   810                           ; #config settings
   811  00FFFE  00                 	db	0	; dummy byte at the end
   812  0000                     
   813                           	psect	cinit
   814  00DCA8                     __pcinit:
   815                           	opt stack 0
   816  00DCA8                     start_initialization:
   817                           	opt stack 0
   818  00DCA8                     __initialization:
   819                           	opt stack 0
   820                           
   821                           ; Clear objects allocated to BANK0 (31 bytes)
   822  00DCA8  EE00  F080         	lfsr	0,__pbssBANK0
   823  00DCAC  0E1F               	movlw	31
   824  00DCAE                     clear_0:
   825  00DCAE  6AEE               	clrf	postinc0,c
   826  00DCB0  06E8               	decf	wreg,f,c
   827  00DCB2  E1FD               	bnz	clear_0
   828                           
   829                           ; Clear objects allocated to COMRAM (20 bytes)
   830  00DCB4  EE00  F06C         	lfsr	0,__pbssCOMRAM
   831  00DCB8  0E14               	movlw	20
   832  00DCBA                     clear_1:
   833  00DCBA  6AEE               	clrf	postinc0,c
   834  00DCBC  06E8               	decf	wreg,f,c
   835  00DCBE  E1FD               	bnz	clear_1
   836                           
   837                           ; Initialize objects allocated to BANK0 (22 bytes)
   838                           ; load TBLPTR registers with __pidataBANK0
   839  00DCC0  0E20               	movlw	low __pidataBANK0
   840  00DCC2  6EF6               	movwf	tblptrl,c
   841  00DCC4  0ED7               	movlw	high __pidataBANK0
   842  00DCC6  6EF7               	movwf	tblptrh,c
   843  00DCC8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   844  00DCCA  6EF8               	movwf	tblptru,c
   845  00DCCC  EE00  F09F         	lfsr	0,__pdataBANK0
   846  00DCD0  EE10 F016          	lfsr	1,22
   847  00DCD4                     copy_data0:
   848  00DCD4  0009               	tblrd		*+
   849  00DCD6  CFF5 FFEE          	movff	tablat,postinc0
   850  00DCDA  50E5               	movf	postdec1,w,c
   851  00DCDC  50E1               	movf	fsr1l,w,c
   852  00DCDE  E1FA               	bnz	copy_data0
   853                           
   854                           ; Initialize objects allocated to COMRAM (41 bytes)
   855                           ; load TBLPTR registers with __pidataCOMRAM
   856  00DCE0  0EF7               	movlw	low __pidataCOMRAM
   857  00DCE2  6EF6               	movwf	tblptrl,c
   858  00DCE4  0ED7               	movlw	high __pidataCOMRAM
   859  00DCE6  6EF7               	movwf	tblptrh,c
   860  00DCE8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   861  00DCEA  6EF8               	movwf	tblptru,c
   862  00DCEC  EE00  F043         	lfsr	0,__pdataCOMRAM
   863  00DCF0  EE10 F029          	lfsr	1,41
   864  00DCF4                     copy_data1:
   865  00DCF4  0009               	tblrd		*+
   866  00DCF6  CFF5 FFEE          	movff	tablat,postinc0
   867  00DCFA  50E5               	movf	postdec1,w,c
   868  00DCFC  50E1               	movf	fsr1l,w,c
   869  00DCFE  E1FA               	bnz	copy_data1
   870  00DD00                     end_of_initialization:
   871                           	opt stack 0
   872  00DD00                     __end_of__initialization:
   873                           	opt stack 0
   874  00DD00  0E00               	movlw	low (__Lmediumconst shr (0+16))
   875  00DD02  6EF8               	movwf	tblptru,c
   876  00DD04  0100               	movlb	0
   877  00DD06  EF27  F06F         	goto	_main	;jump to C main() function
   878                           tblptru	equ	0xFF8
   879                           tblptrh	equ	0xFF7
   880                           tblptrl	equ	0xFF6
   881                           tablat	equ	0xFF5
   882                           postinc0	equ	0xFEE
   883                           wreg	equ	0xFE8
   884                           postdec1	equ	0xFE5
   885                           fsr1l	equ	0xFE1
   886                           
   887                           	psect	bssCOMRAM
   888  00006C                     __pbssCOMRAM:
   889                           	opt stack 0
   890  00006C                     _volt:
   891                           	opt stack 0
   892  00006C                     	ds	3
   893  00006F                     _nbr:
   894                           	opt stack 0
   895  00006F                     	ds	2
   896  000071                     _txt:
   897                           	opt stack 0
   898  000071                     	ds	2
   899  000073                     _Count:
   900                           	opt stack 0
   901  000073                     	ds	1
   902  000074                     _Light_Sensor:
   903                           	opt stack 0
   904  000074                     	ds	1
   905  000075                     _MODE:
   906                           	opt stack 0
   907  000075                     	ds	1
   908  000076                     _PED_Count:
   909                           	opt stack 0
   910  000076                     	ds	1
   911  000077                     _SW_EWLT:
   912                           	opt stack 0
   913  000077                     	ds	1
   914  000078                     _SW_EWPED:
   915                           	opt stack 0
   916  000078                     	ds	1
   917  000079                     _SW_NSLT:
   918                           	opt stack 0
   919  000079                     	ds	1
   920  00007A                     _SW_NSPED:
   921                           	opt stack 0
   922  00007A                     	ds	1
   923  00007B                     __tft_type:
   924                           	opt stack 0
   925  00007B                     	ds	1
   926  00007C                     _colstart:
   927                           	opt stack 0
   928  00007C                     	ds	1
   929  00007D                     _dir:
   930                           	opt stack 0
   931  00007D                     	ds	1
   932  00007E                     _direction:
   933                           	opt stack 0
   934  00007E                     	ds	1
   935  00007F                     _rowstart:
   936                           	opt stack 0
   937  00007F                     	ds	1
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           postinc0	equ	0xFEE
   943                           wreg	equ	0xFE8
   944                           postdec1	equ	0xFE5
   945                           fsr1l	equ	0xFE1
   946                           
   947                           	psect	dataCOMRAM
   948  000043                     __pdataCOMRAM:
   949                           	opt stack 0
   950  000043                     _wrap:
   951                           	opt stack 0
   952  000043                     	ds	1
   953  000044                     _Light_Sensor_Voltage_Txt:
   954                           	opt stack 0
   955  000044                     	ds	5
   956  000049                     _EWLT_Count:
   957                           	opt stack 0
   958  000049                     	ds	3
   959  00004C                     _EW_Count:
   960                           	opt stack 0
   961  00004C                     	ds	3
   962  00004F                     _Light_Sensor_Mode_Txt:
   963                           	opt stack 0
   964  00004F                     	ds	3
   965  000052                     _NSLT_Count:
   966                           	opt stack 0
   967  000052                     	ds	3
   968  000055                     _NS_Count:
   969                           	opt stack 0
   970  000055                     	ds	3
   971  000058                     _PED_EW_Count:
   972                           	opt stack 0
   973  000058                     	ds	3
   974  00005B                     _PED_NS_Count:
   975                           	opt stack 0
   976  00005B                     	ds	3
   977  00005E                     _Act_Mode_Txt:
   978                           	opt stack 0
   979  00005E                     	ds	2
   980  000060                     _FlashingR_Txt:
   981                           	opt stack 0
   982  000060                     	ds	2
   983  000062                     _FlashingS_Txt:
   984                           	opt stack 0
   985  000062                     	ds	2
   986  000064                     _SW_EWLT_Txt:
   987                           	opt stack 0
   988  000064                     	ds	2
   989  000066                     _SW_EWPED_Txt:
   990                           	opt stack 0
   991  000066                     	ds	2
   992  000068                     _SW_NSLT_Txt:
   993                           	opt stack 0
   994  000068                     	ds	2
   995  00006A                     _SW_NSPED_Txt:
   996                           	opt stack 0
   997  00006A                     	ds	2
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           postdec1	equ	0xFE5
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007                           	psect	bssBANK0
  1008  000080                     __pbssBANK0:
  1009                           	opt stack 0
  1010  000080                     _buffer:
  1011                           	opt stack 0
  1012  000080                     	ds	31
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1l	equ	0xFE1
  1021                           
  1022                           	psect	dataBANK0
  1023  00009F                     __pdataBANK0:
  1024                           	opt stack 0
  1025  00009F                     _Timing_Txt:
  1026                           	opt stack 0
  1027  00009F                     	ds	22
  1028                           tblptru	equ	0xFF8
  1029                           tblptrh	equ	0xFF7
  1030                           tblptrl	equ	0xFF6
  1031                           tablat	equ	0xFF5
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           postdec1	equ	0xFE5
  1035                           fsr1l	equ	0xFE1
  1036                           
  1037                           	psect	cstackCOMRAM
  1038  000001                     __pcstackCOMRAM:
  1039                           	opt stack 0
  1040  000001                     ?_get_full_ADC:
  1041                           	opt stack 0
  1042  000001                     ?_strlen:
  1043                           	opt stack 0
  1044  000001                     ?___wmul:
  1045                           	opt stack 0
  1046  000001                     ?___awdiv:
  1047                           	opt stack 0
  1048  000001                     ?___ftpack:
  1049                           	opt stack 0
  1050  000001                     spiwrite@x:
  1051                           	opt stack 0
  1052  000001                     OpenUSART@spbrg:
  1053                           	opt stack 0
  1054  000001                     ___wmul@multiplier:
  1055                           	opt stack 0
  1056  000001                     ___awdiv@dividend:
  1057                           	opt stack 0
  1058  000001                     strcpy@to:
  1059                           	opt stack 0
  1060  000001                     strlen@s:
  1061                           	opt stack 0
  1062  000001                     ___ftpack@arg:
  1063                           	opt stack 0
  1064  000001                     ___ftge@ff1:
  1065                           	opt stack 0
  1066                           
  1067                           ; 3 bytes @ 0x0
  1068  000001                     	ds	1
  1069  000002                     spiwrite@spidata:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x1
  1073  000002                     	ds	1
  1074  000003                     ??_get_full_ADC:
  1075  000003                     ??_strlen:
  1076  000003                     write_command@cmd_:
  1077                           	opt stack 0
  1078  000003                     write_data@data_:
  1079                           	opt stack 0
  1080  000003                     OpenUSART@config:
  1081                           	opt stack 0
  1082  000003                     ___wmul@multiplicand:
  1083                           	opt stack 0
  1084  000003                     ___awdiv@divisor:
  1085                           	opt stack 0
  1086  000003                     strcpy@from:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x2
  1090  000003                     	ds	1
  1091  000004                     setAddrWindow@y0:
  1092                           	opt stack 0
  1093  000004                     ___ftpack@exp:
  1094                           	opt stack 0
  1095  000004                     ___ftge@ff2:
  1096                           	opt stack 0
  1097                           
  1098                           ; 3 bytes @ 0x3
  1099  000004                     	ds	1
  1100  000005                     setAddrWindow@x1:
  1101                           	opt stack 0
  1102  000005                     ___awdiv@counter:
  1103                           	opt stack 0
  1104  000005                     ___ftpack@sign:
  1105                           	opt stack 0
  1106  000005                     get_full_ADC@result:
  1107                           	opt stack 0
  1108  000005                     ___wmul@product:
  1109                           	opt stack 0
  1110  000005                     strcpy@cp:
  1111                           	opt stack 0
  1112  000005                     strlen@cp:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x4
  1116  000005                     	ds	1
  1117  000006                     ??___ftpack:
  1118  000006                     setAddrWindow@y1:
  1119                           	opt stack 0
  1120  000006                     ___awdiv@sign:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x5
  1124  000006                     	ds	1
  1125  000007                     ??___ftge:
  1126  000007                     setAddrWindow@x0:
  1127                           	opt stack 0
  1128  000007                     delay_ms@ms:
  1129                           	opt stack 0
  1130  000007                     ___awdiv@quotient:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x6
  1134  000007                     	ds	1
  1135  000008                     drawPixel@y:
  1136                           	opt stack 0
  1137  000008                     drawFastVLine@y:
  1138                           	opt stack 0
  1139  000008                     fillRectangle@y:
  1140                           	opt stack 0
  1141  000008                     drawFastHLine@y:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x7
  1145  000008                     	ds	1
  1146  000009                     ??_delay_ms:
  1147  000009                     ?___ftmul:
  1148                           	opt stack 0
  1149  000009                     ?___awtoft:
  1150                           	opt stack 0
  1151  000009                     drawFastVLine@h:
  1152                           	opt stack 0
  1153  000009                     fillRectangle@w:
  1154                           	opt stack 0
  1155  000009                     drawFastHLine@w:
  1156                           	opt stack 0
  1157  000009                     drawPixel@color:
  1158                           	opt stack 0
  1159  000009                     ___awtoft@c:
  1160                           	opt stack 0
  1161  000009                     ___ftmul@f1:
  1162                           	opt stack 0
  1163                           
  1164                           ; 3 bytes @ 0x8
  1165  000009                     	ds	1
  1166  00000A                     fillRectangle@h:
  1167                           	opt stack 0
  1168  00000A                     drawFastVLine@color:
  1169                           	opt stack 0
  1170  00000A                     drawFastHLine@color:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x9
  1174  00000A                     	ds	1
  1175  00000B                     drawPixel@x:
  1176                           	opt stack 0
  1177  00000B                     delay_ms@count:
  1178                           	opt stack 0
  1179  00000B                     fillRectangle@color:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0xA
  1183  00000B                     	ds	1
  1184  00000C                     ??_drawFastVLine:
  1185  00000C                     ??_drawFastHLine:
  1186  00000C                     ___awtoft@sign:
  1187                           	opt stack 0
  1188  00000C                     drawCircle@x0:
  1189                           	opt stack 0
  1190  00000C                     ___ftmul@f2:
  1191                           	opt stack 0
  1192                           
  1193                           ; 3 bytes @ 0xB
  1194  00000C                     	ds	1
  1195  00000D                     ??_fillRectangle:
  1196  00000D                     ?___ftdiv:
  1197                           	opt stack 0
  1198  00000D                     ___ftdiv@f1:
  1199                           	opt stack 0
  1200                           
  1201                           ; 3 bytes @ 0xC
  1202  00000D                     	ds	1
  1203  00000E                     drawCircle@y0:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0xD
  1207  00000E                     	ds	1
  1208  00000F                     ??___ftmul:
  1209                           
  1210                           ; 0 bytes @ 0xE
  1211  00000F                     	ds	1
  1212  000010                     drawFastVLine@hi:
  1213                           	opt stack 0
  1214  000010                     drawFastHLine@hi:
  1215                           	opt stack 0
  1216  000010                     drawCircle@r:
  1217                           	opt stack 0
  1218  000010                     ___ftdiv@f2:
  1219                           	opt stack 0
  1220                           
  1221                           ; 3 bytes @ 0xF
  1222  000010                     	ds	1
  1223  000011                     drawFastVLine@lo:
  1224                           	opt stack 0
  1225  000011                     fillRectangle@hi:
  1226                           	opt stack 0
  1227  000011                     drawFastHLine@lo:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x10
  1231  000011                     	ds	1
  1232  000012                     drawFastVLine@x:
  1233                           	opt stack 0
  1234  000012                     fillRectangle@lo:
  1235                           	opt stack 0
  1236  000012                     drawFastHLine@x:
  1237                           	opt stack 0
  1238  000012                     ___ftmul@exp:
  1239                           	opt stack 0
  1240  000012                     drawCircle@color:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x11
  1244  000012                     	ds	1
  1245  000013                     ??___ftdiv:
  1246  000013                     fillRect@y:
  1247                           	opt stack 0
  1248  000013                     fillRectangle@x:
  1249                           	opt stack 0
  1250  000013                     fillCircleHelper@x0:
  1251                           	opt stack 0
  1252  000013                     drawRect@x:
  1253                           	opt stack 0
  1254  000013                     ___ftmul@f3_as_product:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x12
  1258  000013                     	ds	1
  1259  000014                     ??_drawCircle:
  1260  000014                     fillRect@w:
  1261                           	opt stack 0
  1262  000014                     fillScreen@color:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x13
  1266  000014                     	ds	1
  1267  000015                     fillRect@h:
  1268                           	opt stack 0
  1269  000015                     fillCircleHelper@y0:
  1270                           	opt stack 0
  1271  000015                     drawRect@y:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x14
  1275  000015                     	ds	1
  1276  000016                     ___ftdiv@cntr:
  1277                           	opt stack 0
  1278  000016                     ___ftmul@cntr:
  1279                           	opt stack 0
  1280  000016                     fillRect@color:
  1281                           	opt stack 0
  1282  000016                     drawCircle@ddF_x:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x15
  1286  000016                     	ds	1
  1287  000017                     ___ftmul@sign:
  1288                           	opt stack 0
  1289  000017                     fillCircleHelper@r:
  1290                           	opt stack 0
  1291  000017                     drawRect@w:
  1292                           	opt stack 0
  1293  000017                     ___ftdiv@f3:
  1294                           	opt stack 0
  1295                           
  1296                           ; 3 bytes @ 0x16
  1297  000017                     	ds	1
  1298  000018                     ??_fillRect:
  1299  000018                     ?___fttol:
  1300                           	opt stack 0
  1301  000018                     drawCircle@ddF_y:
  1302                           	opt stack 0
  1303  000018                     ___fttol@f1:
  1304                           	opt stack 0
  1305                           
  1306                           ; 3 bytes @ 0x17
  1307  000018                     	ds	1
  1308  000019                     fillCircleHelper@cornername:
  1309                           	opt stack 0
  1310  000019                     drawRect@h:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x18
  1314  000019                     	ds	1
  1315  00001A                     ___ftdiv@exp:
  1316                           	opt stack 0
  1317  00001A                     drawCircle@f:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x19
  1321  00001A                     	ds	1
  1322  00001B                     fillRect@x:
  1323                           	opt stack 0
  1324  00001B                     ___ftdiv@sign:
  1325                           	opt stack 0
  1326  00001B                     fillCircleHelper@delta:
  1327                           	opt stack 0
  1328  00001B                     drawRect@color:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x1A
  1332  00001B                     	ds	1
  1333  00001C                     ??___fttol:
  1334  00001C                     ?_Read_Volt:
  1335                           	opt stack 0
  1336  00001C                     fillRect@i:
  1337                           	opt stack 0
  1338  00001C                     drawCircle@x:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x1B
  1342  00001C                     	ds	1
  1343  00001D                     ??_drawRect:
  1344  00001D                     fillCircleHelper@color:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x1C
  1348  00001D                     	ds	1
  1349  00001E                     drawChar@y:
  1350                           	opt stack 0
  1351  00001E                     drawCircle@y:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x1D
  1355  00001E                     	ds	1
  1356  00001F                     ??_fillCircleHelper:
  1357  00001F                     drawChar@c:
  1358                           	opt stack 0
  1359  00001F                     Read_Volt@volt:
  1360                           	opt stack 0
  1361                           
  1362                           ; 3 bytes @ 0x1E
  1363  00001F                     	ds	1
  1364  000020                     drawChar@color:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x1F
  1368  000020                     	ds	1
  1369  000021                     ___fttol@sign1:
  1370                           	opt stack 0
  1371  000021                     fillCircleHelper@ddF_x:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x20
  1375  000021                     	ds	1
  1376  000022                     drawChar@bg:
  1377                           	opt stack 0
  1378  000022                     Read_Volt@nStep:
  1379                           	opt stack 0
  1380  000022                     ___fttol@lval:
  1381                           	opt stack 0
  1382                           
  1383                           ; 4 bytes @ 0x21
  1384  000022                     	ds	1
  1385  000023                     fillCircleHelper@ddF_y:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x22
  1389  000023                     	ds	1
  1390  000024                     drawChar@size:
  1391                           	opt stack 0
  1392  000024                     Read_Volt@ADC_Channel:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x23
  1396  000024                     	ds	1
  1397  000025                     drawChar@line:
  1398                           	opt stack 0
  1399  000025                     fillCircleHelper@f:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x24
  1403  000025                     	ds	1
  1404  000026                     drawChar@x:
  1405                           	opt stack 0
  1406  000026                     ___fttol@exp1:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x25
  1410  000026                     	ds	1
  1411  000027                     ?___awmod:
  1412                           	opt stack 0
  1413  000027                     drawChar@j:
  1414                           	opt stack 0
  1415  000027                     fillCircleHelper@x:
  1416                           	opt stack 0
  1417  000027                     ___awmod@dividend:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x26
  1421  000027                     	ds	1
  1422  000028                     drawChar@i:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x27
  1426  000028                     	ds	1
  1427  000029                     drawtext@y:
  1428                           	opt stack 0
  1429  000029                     fillCircleHelper@y:
  1430                           	opt stack 0
  1431  000029                     ___awmod@divisor:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x28
  1435  000029                     	ds	1
  1436  00002A                     drawtext@_text:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x29
  1440  00002A                     	ds	1
  1441  00002B                     ___awmod@counter:
  1442                           	opt stack 0
  1443  00002B                     fillCircle@x0:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x2A
  1447  00002B                     	ds	1
  1448  00002C                     ___awmod@sign:
  1449                           	opt stack 0
  1450  00002C                     drawtext@color:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x2B
  1454  00002C                     	ds	1
  1455  00002D                     fillCircle@y0:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x2C
  1459  00002D                     	ds	1
  1460  00002E                     drawtext@bg:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x2D
  1464  00002E                     	ds	1
  1465  00002F                     fillCircle@r:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x2E
  1469  00002F                     	ds	1
  1470  000030                     drawtext@size:
  1471                           	opt stack 0
  1472                           
  1473                           ; 1 bytes @ 0x2F
  1474  000030                     	ds	1
  1475  000031                     ??_drawtext:
  1476  000031                     fillCircle@color:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x30
  1480  000031                     	ds	2
  1481  000033                     update_LCD_color@color:
  1482                           	opt stack 0
  1483  000033                     drawtext@textsize:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x32
  1487  000033                     	ds	1
  1488  000034                     update_LCD_color@direction:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x33
  1492  000034                     	ds	1
  1493  000035                     update_LCD_color@Circle_Y:
  1494                           	opt stack 0
  1495  000035                     drawtext@x:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x34
  1499  000035                     	ds	1
  1500  000036                     Set_NS@color:
  1501                           	opt stack 0
  1502  000036                     Set_NS_LT@color:
  1503                           	opt stack 0
  1504  000036                     Set_EW@color:
  1505                           	opt stack 0
  1506  000036                     Set_EW_LT@color:
  1507                           	opt stack 0
  1508  000036                     drawtext@i:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x35
  1512  000036                     	ds	2
  1513  000038                     drawtext@cursor_y:
  1514                           	opt stack 0
  1515                           
  1516                           ; 1 bytes @ 0x37
  1517  000038                     	ds	1
  1518  000039                     drawtext@cursor_x:
  1519                           	opt stack 0
  1520                           
  1521                           ; 1 bytes @ 0x38
  1522  000039                     	ds	1
  1523  00003A                     update_LCD_PED_Count@count:
  1524                           	opt stack 0
  1525  00003A                     update_LCD_count@count:
  1526                           	opt stack 0
  1527  00003A                     update_LCD_misc@nStep:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x39
  1531  00003A                     	ds	1
  1532  00003B                     update_LCD_PED_Count@direction:
  1533                           	opt stack 0
  1534  00003B                     update_LCD_count@direction:
  1535                           	opt stack 0
  1536                           
  1537                           ; 1 bytes @ 0x3A
  1538  00003B                     	ds	1
  1539  00003C                     update_LCD_misc@volt:
  1540                           	opt stack 0
  1541                           
  1542                           ; 3 bytes @ 0x3B
  1543  00003C                     	ds	3
  1544  00003F                     PED_Control@num_sec:
  1545                           	opt stack 0
  1546  00003F                     Wait_N_Seconds@seconds:
  1547                           	opt stack 0
  1548                           
  1549                           ; 1 bytes @ 0x3E
  1550  00003F                     	ds	1
  1551  000040                     PED_Control@direction:
  1552                           	opt stack 0
  1553  000040                     Wait_N_Seconds@I:
  1554                           	opt stack 0
  1555                           
  1556                           ; 1 bytes @ 0x3F
  1557  000040                     	ds	1
  1558  000041                     PED_Control@i:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x40
  1562  000041                     	ds	2
  1563  000043                     tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           postdec1	equ	0xFE5
  1570                           fsr1l	equ	0xFE1
  1571                           
  1572                           ; 0 bytes @ 0x42
  1573 ;;
  1574 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1575 ;;
  1576 ;; *************** function _main *****************
  1577 ;; Defined at:
  1578 ;;		line 44 in file "lab8.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;		None
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;		None
  1583 ;; Return value:  Size  Location     Type
  1584 ;;		None               void
  1585 ;; Registers used:
  1586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;Total ram usage:        0 bytes
  1597 ;; Hardware stack levels required when called:   11
  1598 ;; This function calls:
  1599 ;;		_Day_Mode
  1600 ;;		_Init_ADC
  1601 ;;		_Init_UART
  1602 ;;		_Initialize_LCD_Screen
  1603 ;;		_Night_Mode
  1604 ;;		_Read_Volt
  1605 ;;		___ftge
  1606 ;; This function is called by:
  1607 ;;		Startup code after reset
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text0
  1612  00DE4E                     __ptext0:
  1613                           	opt stack 0
  1614  00DE4E                     _main:
  1615                           	opt stack 20
  1616                           
  1617                           ;lab8.c: 46: OSCCON = 0x70;
  1618                           
  1619                           ;incstack = 0
  1620  00DE4E  0E70               	movlw	112
  1621  00DE50  6ED3               	movwf	4051,c	;volatile
  1622                           
  1623                           ;lab8.c: 47: TRISA = 0x1F;
  1624  00DE52  0E1F               	movlw	31
  1625  00DE54  6E92               	movwf	3986,c	;volatile
  1626                           
  1627                           ;lab8.c: 48: TRISB = 0x07;
  1628  00DE56  0E07               	movlw	7
  1629  00DE58  6E93               	movwf	3987,c	;volatile
  1630                           
  1631                           ;lab8.c: 49: TRISC = 0x00;
  1632  00DE5A  0E00               	movlw	0
  1633  00DE5C  6E94               	movwf	3988,c	;volatile
  1634                           
  1635                           ;lab8.c: 50: TRISD = 0x00;
  1636  00DE5E  0E00               	movlw	0
  1637  00DE60  6E95               	movwf	3989,c	;volatile
  1638                           
  1639                           ;lab8.c: 51: TRISE = 0x00;
  1640  00DE62  0E00               	movlw	0
  1641  00DE64  6E96               	movwf	3990,c	;volatile
  1642                           
  1643                           ;lab8.c: 52: Init_ADC();
  1644  00DE66  EC53  F06B         	call	_Init_ADC	;wreg free
  1645                           
  1646                           ;lab8.c: 53: Init_UART();
  1647  00DE6A  EC86  F06B         	call	_Init_UART	;wreg free
  1648                           
  1649                           ;lab8.c: 55: Initialize_LCD_Screen();
  1650  00DE6E  EC29  F07B         	call	_Initialize_LCD_Screen	;wreg free
  1651                           
  1652                           ;lab8.c: 64: volt = Read_Volt(0);
  1653  00DE72  0E00               	movlw	0
  1654  00DE74  ECB8  F06E         	call	_Read_Volt
  1655  00DE78  C01C  F06C         	movff	?_Read_Volt,_volt
  1656  00DE7C  C01D  F06D         	movff	?_Read_Volt+1,_volt+1
  1657  00DE80  C01E  F06E         	movff	?_Read_Volt+2,_volt+2
  1658                           
  1659                           ;lab8.c: 66: Light_Sensor = volt < 2.5 ? 1:0;
  1660  00DE84  C06C  F001         	movff	_volt,___ftge@ff1
  1661  00DE88  C06D  F002         	movff	_volt+1,___ftge@ff1+1
  1662  00DE8C  C06E  F003         	movff	_volt+2,___ftge@ff1+2
  1663  00DE90  0E00               	movlw	0
  1664  00DE92  6E04               	movwf	___ftge@ff2,c
  1665  00DE94  0E20               	movlw	32
  1666  00DE96  6E05               	movwf	___ftge@ff2+1,c
  1667  00DE98  0E40               	movlw	64
  1668  00DE9A  6E06               	movwf	___ftge@ff2+2,c
  1669  00DE9C  EC2B  F070         	call	___ftge	;wreg free
  1670  00DEA0  B0D8               	btfsc	status,0,c
  1671  00DEA2  D002               	goto	u2710
  1672  00DEA4  0E01               	movlw	1
  1673  00DEA6  D001               	goto	u2720
  1674  00DEA8                     u2710:
  1675  00DEA8  0E00               	movlw	0
  1676  00DEAA                     u2720:
  1677  00DEAA  6E74               	movwf	_Light_Sensor,c
  1678  00DEAC  D000               	goto	l3992
  1679  00DEAE                     l3992:
  1680                           
  1681                           ;lab8.c: 69: {
  1682                           ;lab8.c: 71: if (Light_Sensor == 1)
  1683  00DEAE  0474               	decf	_Light_Sensor,w,c
  1684  00DEB0  A4D8               	btfss	status,2,c
  1685  00DEB2  D003               	goto	l3996
  1686                           
  1687                           ;lab8.c: 72: {
  1688                           ;lab8.c: 73: Day_Mode();
  1689  00DEB4  EC0E  F071         	call	_Day_Mode	;wreg free
  1690                           
  1691                           ;lab8.c: 74: }
  1692  00DEB8  D7FA               	goto	l3992
  1693  00DEBA                     l3996:
  1694                           
  1695                           ;lab8.c: 75: else
  1696                           ;lab8.c: 76: {
  1697                           ;lab8.c: 77: Night_Mode();
  1698  00DEBA  ECC1  F070         	call	_Night_Mode	;wreg free
  1699  00DEBE  D7F7               	goto	l3992
  1700  00DEC0  EF00  F000         	goto	start
  1701  00DEC4                     __end_of_main:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1l	equ	0xFE1
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _Night_Mode *****************
  1714 ;; Defined at:
  1715 ;;		line 222 in file "lab8.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;		None
  1720 ;; Return value:  Size  Location     Type
  1721 ;;		None               void
  1722 ;; Registers used:
  1723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;Total ram usage:        0 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:   10
  1736 ;; This function calls:
  1737 ;;		_Set_EW
  1738 ;;		_Set_EW_LT
  1739 ;;		_Set_NS
  1740 ;;		_Set_NS_LT
  1741 ;;		_Wait_N_Seconds
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text1
  1748  00E182                     __ptext1:
  1749                           	opt stack 0
  1750  00E182                     _Night_Mode:
  1751                           	opt stack 20
  1752                           
  1753                           ;lab8.c: 225: PORTEbits.RE0 = 0;
  1754                           
  1755                           ;incstack = 0
  1756  00E182  9084               	bcf	3972,0,c	;volatile
  1757                           
  1758                           ;lab8.c: 226: Set_NS_LT(1);
  1759  00E184  0E01               	movlw	1
  1760  00E186  EC6B  F06D         	call	_Set_NS_LT
  1761                           
  1762                           ;lab8.c: 227: Set_EW(1);
  1763  00E18A  0E01               	movlw	1
  1764  00E18C  EC05  F06D         	call	_Set_EW
  1765                           
  1766                           ;lab8.c: 228: Set_EW_LT(1);
  1767  00E190  0E01               	movlw	1
  1768  00E192  EC27  F06D         	call	_Set_EW_LT
  1769                           
  1770                           ;lab8.c: 229: Set_NS(2);
  1771  00E196  0E02               	movlw	2
  1772  00E198  EC49  F06D         	call	_Set_NS
  1773                           
  1774                           ;lab8.c: 230: Wait_N_Seconds(7);
  1775  00E19C  0E07               	movlw	7
  1776  00E19E  EC56  F06C         	call	_Wait_N_Seconds
  1777                           
  1778                           ;lab8.c: 231: Set_NS(3);
  1779  00E1A2  0E03               	movlw	3
  1780  00E1A4  EC49  F06D         	call	_Set_NS
  1781                           
  1782                           ;lab8.c: 232: Wait_N_Seconds(3);
  1783  00E1A8  0E03               	movlw	3
  1784  00E1AA  EC56  F06C         	call	_Wait_N_Seconds
  1785                           
  1786                           ;lab8.c: 233: Set_NS(1);
  1787  00E1AE  0E01               	movlw	1
  1788  00E1B0  EC49  F06D         	call	_Set_NS
  1789                           
  1790                           ;lab8.c: 234: if(PORTAbits.RA3 == 1)
  1791  00E1B4  A680               	btfss	3968,3,c	;volatile
  1792  00E1B6  D010               	goto	l3962
  1793                           
  1794                           ;lab8.c: 235: {
  1795                           ;lab8.c: 236: Set_EW_LT(2);
  1796  00E1B8  0E02               	movlw	2
  1797  00E1BA  EC27  F06D         	call	_Set_EW_LT
  1798                           
  1799                           ;lab8.c: 237: Wait_N_Seconds(5);
  1800  00E1BE  0E05               	movlw	5
  1801  00E1C0  EC56  F06C         	call	_Wait_N_Seconds
  1802                           
  1803                           ;lab8.c: 238: Set_EW_LT(3);
  1804  00E1C4  0E03               	movlw	3
  1805  00E1C6  EC27  F06D         	call	_Set_EW_LT
  1806                           
  1807                           ;lab8.c: 239: Wait_N_Seconds(3);
  1808  00E1CA  0E03               	movlw	3
  1809  00E1CC  EC56  F06C         	call	_Wait_N_Seconds
  1810                           
  1811                           ;lab8.c: 240: Set_EW_LT(1);
  1812  00E1D0  0E01               	movlw	1
  1813  00E1D2  EC27  F06D         	call	_Set_EW_LT
  1814  00E1D6  D000               	goto	l3962
  1815  00E1D8                     l3962:
  1816                           
  1817                           ;lab8.c: 241: }
  1818                           ;lab8.c: 242: Set_EW(2);
  1819  00E1D8  0E02               	movlw	2
  1820  00E1DA  EC05  F06D         	call	_Set_EW
  1821                           
  1822                           ;lab8.c: 243: Wait_N_Seconds(7);
  1823  00E1DE  0E07               	movlw	7
  1824  00E1E0  EC56  F06C         	call	_Wait_N_Seconds
  1825                           
  1826                           ;lab8.c: 244: Set_EW(3);
  1827  00E1E4  0E03               	movlw	3
  1828  00E1E6  EC05  F06D         	call	_Set_EW
  1829                           
  1830                           ;lab8.c: 245: Wait_N_Seconds(3);
  1831  00E1EA  0E03               	movlw	3
  1832  00E1EC  EC56  F06C         	call	_Wait_N_Seconds
  1833                           
  1834                           ;lab8.c: 246: Set_EW(1);
  1835  00E1F0  0E01               	movlw	1
  1836  00E1F2  EC05  F06D         	call	_Set_EW
  1837                           
  1838                           ;lab8.c: 247: if(PORTAbits.RA4 == 1)
  1839  00E1F6  A880               	btfss	3968,4,c	;volatile
  1840  00E1F8  D010               	goto	l119
  1841                           
  1842                           ;lab8.c: 248: {
  1843                           ;lab8.c: 249: Set_NS_LT(2);
  1844  00E1FA  0E02               	movlw	2
  1845  00E1FC  EC6B  F06D         	call	_Set_NS_LT
  1846                           
  1847                           ;lab8.c: 250: Wait_N_Seconds(5);
  1848  00E200  0E05               	movlw	5
  1849  00E202  EC56  F06C         	call	_Wait_N_Seconds
  1850                           
  1851                           ;lab8.c: 251: Set_NS_LT(3);
  1852  00E206  0E03               	movlw	3
  1853  00E208  EC6B  F06D         	call	_Set_NS_LT
  1854                           
  1855                           ;lab8.c: 252: Wait_N_Seconds(3);
  1856  00E20C  0E03               	movlw	3
  1857  00E20E  EC56  F06C         	call	_Wait_N_Seconds
  1858                           
  1859                           ;lab8.c: 253: Set_NS_LT(1);
  1860  00E212  0E01               	movlw	1
  1861  00E214  EC6B  F06D         	call	_Set_NS_LT
  1862  00E218  D000               	goto	l119
  1863  00E21A                     l119:
  1864  00E21A  0012               	return		;funcret
  1865  00E21C                     __end_of_Night_Mode:
  1866                           	opt stack 0
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           postdec1	equ	0xFE5
  1874                           fsr1l	equ	0xFE1
  1875                           status	equ	0xFD8
  1876                           
  1877 ;; *************** function _Initialize_LCD_Screen *****************
  1878 ;; Defined at:
  1879 ;;		line 48 in file "Main_Screen.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;		None
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;		None
  1884 ;; Return value:  Size  Location     Type
  1885 ;;		None               void
  1886 ;; Registers used:
  1887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1897 ;;Total ram usage:        0 bytes
  1898 ;; Hardware stack levels used:    1
  1899 ;; Hardware stack levels required when called:    7
  1900 ;; This function calls:
  1901 ;;		_LCD_Reset
  1902 ;;		_TFT_GreenTab_Initialize
  1903 ;;		_drawCircle
  1904 ;;		_drawRect
  1905 ;;		_drawtext
  1906 ;;		_fillCircle
  1907 ;;		_fillScreen
  1908 ;;		_strcpy
  1909 ;; This function is called by:
  1910 ;;		_main
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text2
  1915  00F652                     __ptext2:
  1916                           	opt stack 0
  1917  00F652                     _Initialize_LCD_Screen:
  1918                           	opt stack 23
  1919                           
  1920                           ;Main_Screen.c: 50: LCD_Reset();
  1921                           
  1922                           ;incstack = 0
  1923  00F652  EC73  F06B         	call	_LCD_Reset	;wreg free
  1924                           
  1925                           ;Main_Screen.c: 51: TFT_GreenTab_Initialize();
  1926  00F656  EC10  F06C         	call	_TFT_GreenTab_Initialize	;wreg free
  1927                           
  1928                           ;Main_Screen.c: 53: fillScreen(0x0000);
  1929  00F65A  0E00               	movlw	0
  1930  00F65C  6E15               	movwf	fillScreen@color+1,c
  1931  00F65E  0E00               	movlw	0
  1932  00F660  6E14               	movwf	fillScreen@color,c
  1933  00F662  ECB5  F06B         	call	_fillScreen	;wreg free
  1934                           
  1935                           ;Main_Screen.c: 55: txt = buffer;
  1936  00F666  0E80               	movlw	low _buffer
  1937  00F668  6E71               	movwf	_txt,c
  1938  00F66A  0E00               	movlw	high _buffer
  1939  00F66C  6E72               	movwf	_txt+1,c
  1940                           
  1941                           ;Main_Screen.c: 57: strcpy(txt, "Mode:");
  1942  00F66E  C071  F001         	movff	_txt,strcpy@to
  1943  00F672  C072  F002         	movff	_txt+1,strcpy@to+1
  1944  00F676  0EE4               	movlw	low STR_1
  1945  00F678  6E03               	movwf	strcpy@from,c
  1946  00F67A  0EFF               	movlw	high STR_1
  1947  00F67C  6E04               	movwf	strcpy@from+1,c
  1948  00F67E  EC3D  F06C         	call	_strcpy	;wreg free
  1949                           
  1950                           ;Main_Screen.c: 58: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  1951  00F682  0E02               	movlw	2
  1952  00F684  6E29               	movwf	drawtext@y,c
  1953  00F686  C071  F02A         	movff	_txt,drawtext@_text
  1954  00F68A  C072  F02B         	movff	_txt+1,drawtext@_text+1
  1955  00F68E  0EFF               	movlw	255
  1956  00F690  6E2D               	movwf	drawtext@color+1,c
  1957  00F692  682C               	setf	drawtext@color,c
  1958  00F694  0E00               	movlw	0
  1959  00F696  6E2F               	movwf	drawtext@bg+1,c
  1960  00F698  0E00               	movlw	0
  1961  00F69A  6E2E               	movwf	drawtext@bg,c
  1962  00F69C  0E01               	movlw	1
  1963  00F69E  6E30               	movwf	drawtext@size,c
  1964  00F6A0  0E02               	movlw	2
  1965  00F6A2  EC9B  F072         	call	_drawtext
  1966                           
  1967                           ;Main_Screen.c: 59: drawtext(35,2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  1968  00F6A6  0E02               	movlw	2
  1969  00F6A8  6E29               	movwf	drawtext@y,c
  1970  00F6AA  0E5E               	movlw	low _Act_Mode_Txt
  1971  00F6AC  6E2A               	movwf	drawtext@_text,c
  1972  00F6AE  0E00               	movlw	high _Act_Mode_Txt
  1973  00F6B0  6E2B               	movwf	drawtext@_text+1,c
  1974  00F6B2  0EFF               	movlw	255
  1975  00F6B4  6E2D               	movwf	drawtext@color+1,c
  1976  00F6B6  682C               	setf	drawtext@color,c
  1977  00F6B8  0E00               	movlw	0
  1978  00F6BA  6E2F               	movwf	drawtext@bg+1,c
  1979  00F6BC  0E00               	movlw	0
  1980  00F6BE  6E2E               	movwf	drawtext@bg,c
  1981  00F6C0  0E01               	movlw	1
  1982  00F6C2  6E30               	movwf	drawtext@size,c
  1983  00F6C4  0E23               	movlw	35
  1984  00F6C6  EC9B  F072         	call	_drawtext
  1985                           
  1986                           ;Main_Screen.c: 60: strcpy(txt, "LSV:");
  1987  00F6CA  C071  F001         	movff	_txt,strcpy@to
  1988  00F6CE  C072  F002         	movff	_txt+1,strcpy@to+1
  1989  00F6D2  0EEA               	movlw	low STR_2
  1990  00F6D4  6E03               	movwf	strcpy@from,c
  1991  00F6D6  0EFF               	movlw	high STR_2
  1992  00F6D8  6E04               	movwf	strcpy@from+1,c
  1993  00F6DA  EC3D  F06C         	call	_strcpy	;wreg free
  1994                           
  1995                           ;Main_Screen.c: 61: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  1996  00F6DE  0E02               	movlw	2
  1997  00F6E0  6E29               	movwf	drawtext@y,c
  1998  00F6E2  C071  F02A         	movff	_txt,drawtext@_text
  1999  00F6E6  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2000  00F6EA  0EFF               	movlw	255
  2001  00F6EC  6E2D               	movwf	drawtext@color+1,c
  2002  00F6EE  682C               	setf	drawtext@color,c
  2003  00F6F0  0E00               	movlw	0
  2004  00F6F2  6E2F               	movwf	drawtext@bg+1,c
  2005  00F6F4  0E00               	movlw	0
  2006  00F6F6  6E2E               	movwf	drawtext@bg,c
  2007  00F6F8  0E01               	movlw	1
  2008  00F6FA  6E30               	movwf	drawtext@size,c
  2009  00F6FC  0E32               	movlw	50
  2010  00F6FE  EC9B  F072         	call	_drawtext
  2011                           
  2012                           ;Main_Screen.c: 62: drawtext(75,2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  2013  00F702  0E02               	movlw	2
  2014  00F704  6E29               	movwf	drawtext@y,c
  2015  00F706  0E44               	movlw	low _Light_Sensor_Voltage_Txt
  2016  00F708  6E2A               	movwf	drawtext@_text,c
  2017  00F70A  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  2018  00F70C  6E2B               	movwf	drawtext@_text+1,c
  2019  00F70E  0EFF               	movlw	255
  2020  00F710  6E2D               	movwf	drawtext@color+1,c
  2021  00F712  682C               	setf	drawtext@color,c
  2022  00F714  0E00               	movlw	0
  2023  00F716  6E2F               	movwf	drawtext@bg+1,c
  2024  00F718  0E00               	movlw	0
  2025  00F71A  6E2E               	movwf	drawtext@bg,c
  2026  00F71C  0E01               	movlw	1
  2027  00F71E  6E30               	movwf	drawtext@size,c
  2028  00F720  0E4B               	movlw	75
  2029  00F722  EC9B  F072         	call	_drawtext
  2030                           
  2031                           ;Main_Screen.c: 63: strcpy(txt, "-D");
  2032  00F726  C071  F001         	movff	_txt,strcpy@to
  2033  00F72A  C072  F002         	movff	_txt+1,strcpy@to+1
  2034  00F72E  0EF7               	movlw	low STR_3
  2035  00F730  6E03               	movwf	strcpy@from,c
  2036  00F732  0EFF               	movlw	high STR_3
  2037  00F734  6E04               	movwf	strcpy@from+1,c
  2038  00F736  EC3D  F06C         	call	_strcpy	;wreg free
  2039                           
  2040                           ;Main_Screen.c: 64: drawtext(100,2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  2041  00F73A  0E02               	movlw	2
  2042  00F73C  6E29               	movwf	drawtext@y,c
  2043  00F73E  0E4F               	movlw	low _Light_Sensor_Mode_Txt
  2044  00F740  6E2A               	movwf	drawtext@_text,c
  2045  00F742  0E00               	movlw	high _Light_Sensor_Mode_Txt
  2046  00F744  6E2B               	movwf	drawtext@_text+1,c
  2047  00F746  0EFF               	movlw	255
  2048  00F748  6E2D               	movwf	drawtext@color+1,c
  2049  00F74A  682C               	setf	drawtext@color,c
  2050  00F74C  0E00               	movlw	0
  2051  00F74E  6E2F               	movwf	drawtext@bg+1,c
  2052  00F750  0E00               	movlw	0
  2053  00F752  6E2E               	movwf	drawtext@bg,c
  2054  00F754  0E01               	movlw	1
  2055  00F756  6E30               	movwf	drawtext@size,c
  2056  00F758  0E64               	movlw	100
  2057  00F75A  EC9B  F072         	call	_drawtext
  2058                           
  2059                           ;Main_Screen.c: 67: strcpy(txt, "*");
  2060  00F75E  C071  F001         	movff	_txt,strcpy@to
  2061  00F762  C072  F002         	movff	_txt+1,strcpy@to+1
  2062  00F766  0EFC               	movlw	low STR_4
  2063  00F768  6E03               	movwf	strcpy@from,c
  2064  00F76A  0EFF               	movlw	high STR_4
  2065  00F76C  6E04               	movwf	strcpy@from+1,c
  2066  00F76E  EC3D  F06C         	call	_strcpy	;wreg free
  2067                           
  2068                           ;Main_Screen.c: 68: drawtext(120, 2, txt, 0xFFFF, 0x0000, 1);
  2069  00F772  0E02               	movlw	2
  2070  00F774  6E29               	movwf	drawtext@y,c
  2071  00F776  C071  F02A         	movff	_txt,drawtext@_text
  2072  00F77A  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2073  00F77E  0EFF               	movlw	255
  2074  00F780  6E2D               	movwf	drawtext@color+1,c
  2075  00F782  682C               	setf	drawtext@color,c
  2076  00F784  0E00               	movlw	0
  2077  00F786  6E2F               	movwf	drawtext@bg+1,c
  2078  00F788  0E00               	movlw	0
  2079  00F78A  6E2E               	movwf	drawtext@bg,c
  2080  00F78C  0E01               	movlw	1
  2081  00F78E  6E30               	movwf	drawtext@size,c
  2082  00F790  0E78               	movlw	120
  2083  00F792  EC9B  F072         	call	_drawtext
  2084                           
  2085                           ;Main_Screen.c: 71: strcpy(txt, "NSP NSLT EWP EWLT R S");
  2086  00F796  C071  F001         	movff	_txt,strcpy@to
  2087  00F79A  C072  F002         	movff	_txt+1,strcpy@to+1
  2088  00F79E  0EAA               	movlw	low STR_5
  2089  00F7A0  6E03               	movwf	strcpy@from,c
  2090  00F7A2  0EFF               	movlw	high STR_5
  2091  00F7A4  6E04               	movwf	strcpy@from+1,c
  2092  00F7A6  EC3D  F06C         	call	_strcpy	;wreg free
  2093                           
  2094                           ;Main_Screen.c: 72: drawtext(1, 11, txt, 0xFFFF, 0x0000, 1);
  2095  00F7AA  0E0B               	movlw	11
  2096  00F7AC  6E29               	movwf	drawtext@y,c
  2097  00F7AE  C071  F02A         	movff	_txt,drawtext@_text
  2098  00F7B2  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2099  00F7B6  0EFF               	movlw	255
  2100  00F7B8  6E2D               	movwf	drawtext@color+1,c
  2101  00F7BA  682C               	setf	drawtext@color,c
  2102  00F7BC  0E00               	movlw	0
  2103  00F7BE  6E2F               	movwf	drawtext@bg+1,c
  2104  00F7C0  0E00               	movlw	0
  2105  00F7C2  6E2E               	movwf	drawtext@bg,c
  2106  00F7C4  0E01               	movlw	1
  2107  00F7C6  6E30               	movwf	drawtext@size,c
  2108  00F7C8  0E01               	movlw	1
  2109  00F7CA  EC9B  F072         	call	_drawtext
  2110                           
  2111                           ;Main_Screen.c: 73: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2112  00F7CE  0E14               	movlw	20
  2113  00F7D0  6E29               	movwf	drawtext@y,c
  2114  00F7D2  0E6A               	movlw	low _SW_NSPED_Txt
  2115  00F7D4  6E2A               	movwf	drawtext@_text,c
  2116  00F7D6  0E00               	movlw	high _SW_NSPED_Txt
  2117  00F7D8  6E2B               	movwf	drawtext@_text+1,c
  2118  00F7DA  0EFF               	movlw	255
  2119  00F7DC  6E2D               	movwf	drawtext@color+1,c
  2120  00F7DE  682C               	setf	drawtext@color,c
  2121  00F7E0  0E00               	movlw	0
  2122  00F7E2  6E2F               	movwf	drawtext@bg+1,c
  2123  00F7E4  0E00               	movlw	0
  2124  00F7E6  6E2E               	movwf	drawtext@bg,c
  2125  00F7E8  0E01               	movlw	1
  2126  00F7EA  6E30               	movwf	drawtext@size,c
  2127  00F7EC  0E08               	movlw	8
  2128  00F7EE  EC9B  F072         	call	_drawtext
  2129                           
  2130                           ;Main_Screen.c: 74: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2131  00F7F2  0E14               	movlw	20
  2132  00F7F4  6E29               	movwf	drawtext@y,c
  2133  00F7F6  0E68               	movlw	low _SW_NSLT_Txt
  2134  00F7F8  6E2A               	movwf	drawtext@_text,c
  2135  00F7FA  0E00               	movlw	high _SW_NSLT_Txt
  2136  00F7FC  6E2B               	movwf	drawtext@_text+1,c
  2137  00F7FE  0EFF               	movlw	255
  2138  00F800  6E2D               	movwf	drawtext@color+1,c
  2139  00F802  682C               	setf	drawtext@color,c
  2140  00F804  0E00               	movlw	0
  2141  00F806  6E2F               	movwf	drawtext@bg+1,c
  2142  00F808  0E00               	movlw	0
  2143  00F80A  6E2E               	movwf	drawtext@bg,c
  2144  00F80C  0E01               	movlw	1
  2145  00F80E  6E30               	movwf	drawtext@size,c
  2146  00F810  0E23               	movlw	35
  2147  00F812  EC9B  F072         	call	_drawtext
  2148                           
  2149                           ;Main_Screen.c: 75: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2150  00F816  0E14               	movlw	20
  2151  00F818  6E29               	movwf	drawtext@y,c
  2152  00F81A  0E66               	movlw	low _SW_EWPED_Txt
  2153  00F81C  6E2A               	movwf	drawtext@_text,c
  2154  00F81E  0E00               	movlw	high _SW_EWPED_Txt
  2155  00F820  6E2B               	movwf	drawtext@_text+1,c
  2156  00F822  0EFF               	movlw	255
  2157  00F824  6E2D               	movwf	drawtext@color+1,c
  2158  00F826  682C               	setf	drawtext@color,c
  2159  00F828  0E00               	movlw	0
  2160  00F82A  6E2F               	movwf	drawtext@bg+1,c
  2161  00F82C  0E00               	movlw	0
  2162  00F82E  6E2E               	movwf	drawtext@bg,c
  2163  00F830  0E01               	movlw	1
  2164  00F832  6E30               	movwf	drawtext@size,c
  2165  00F834  0E3C               	movlw	60
  2166  00F836  EC9B  F072         	call	_drawtext
  2167                           
  2168                           ;Main_Screen.c: 76: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2169  00F83A  0E14               	movlw	20
  2170  00F83C  6E29               	movwf	drawtext@y,c
  2171  00F83E  0E64               	movlw	low _SW_EWLT_Txt
  2172  00F840  6E2A               	movwf	drawtext@_text,c
  2173  00F842  0E00               	movlw	high _SW_EWLT_Txt
  2174  00F844  6E2B               	movwf	drawtext@_text+1,c
  2175  00F846  0EFF               	movlw	255
  2176  00F848  6E2D               	movwf	drawtext@color+1,c
  2177  00F84A  682C               	setf	drawtext@color,c
  2178  00F84C  0E00               	movlw	0
  2179  00F84E  6E2F               	movwf	drawtext@bg+1,c
  2180  00F850  0E00               	movlw	0
  2181  00F852  6E2E               	movwf	drawtext@bg,c
  2182  00F854  0E01               	movlw	1
  2183  00F856  6E30               	movwf	drawtext@size,c
  2184  00F858  0E55               	movlw	85
  2185  00F85A  EC9B  F072         	call	_drawtext
  2186                           
  2187                           ;Main_Screen.c: 77: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2188  00F85E  0E14               	movlw	20
  2189  00F860  6E29               	movwf	drawtext@y,c
  2190  00F862  0E60               	movlw	low _FlashingR_Txt
  2191  00F864  6E2A               	movwf	drawtext@_text,c
  2192  00F866  0E00               	movlw	high _FlashingR_Txt
  2193  00F868  6E2B               	movwf	drawtext@_text+1,c
  2194  00F86A  0EFF               	movlw	255
  2195  00F86C  6E2D               	movwf	drawtext@color+1,c
  2196  00F86E  682C               	setf	drawtext@color,c
  2197  00F870  0E00               	movlw	0
  2198  00F872  6E2F               	movwf	drawtext@bg+1,c
  2199  00F874  0E00               	movlw	0
  2200  00F876  6E2E               	movwf	drawtext@bg,c
  2201  00F878  0E01               	movlw	1
  2202  00F87A  6E30               	movwf	drawtext@size,c
  2203  00F87C  0E6C               	movlw	108
  2204  00F87E  EC9B  F072         	call	_drawtext
  2205                           
  2206                           ;Main_Screen.c: 78: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2207  00F882  0E14               	movlw	20
  2208  00F884  6E29               	movwf	drawtext@y,c
  2209  00F886  0E62               	movlw	low _FlashingS_Txt
  2210  00F888  6E2A               	movwf	drawtext@_text,c
  2211  00F88A  0E00               	movlw	high _FlashingS_Txt
  2212  00F88C  6E2B               	movwf	drawtext@_text+1,c
  2213  00F88E  0EFF               	movlw	255
  2214  00F890  6E2D               	movwf	drawtext@color+1,c
  2215  00F892  682C               	setf	drawtext@color,c
  2216  00F894  0E00               	movlw	0
  2217  00F896  6E2F               	movwf	drawtext@bg+1,c
  2218  00F898  0E00               	movlw	0
  2219  00F89A  6E2E               	movwf	drawtext@bg,c
  2220  00F89C  0E01               	movlw	1
  2221  00F89E  6E30               	movwf	drawtext@size,c
  2222  00F8A0  0E77               	movlw	119
  2223  00F8A2  EC9B  F072         	call	_drawtext
  2224                           
  2225                           ;Main_Screen.c: 82: strcpy(txt, "NORTH/SOUTH");
  2226  00F8A6  C071  F001         	movff	_txt,strcpy@to
  2227  00F8AA  C072  F002         	movff	_txt+1,strcpy@to+1
  2228  00F8AE  0EC0               	movlw	low STR_6
  2229  00F8B0  6E03               	movwf	strcpy@from,c
  2230  00F8B2  0EFF               	movlw	high STR_6
  2231  00F8B4  6E04               	movwf	strcpy@from+1,c
  2232  00F8B6  EC3D  F06C         	call	_strcpy	;wreg free
  2233                           
  2234                           ;Main_Screen.c: 83: drawtext (30, 30 , txt, 0xFFE0, 0x0000, 1);
  2235  00F8BA  0E1E               	movlw	30
  2236  00F8BC  6E29               	movwf	drawtext@y,c
  2237  00F8BE  C071  F02A         	movff	_txt,drawtext@_text
  2238  00F8C2  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2239  00F8C6  0EFF               	movlw	255
  2240  00F8C8  6E2D               	movwf	drawtext@color+1,c
  2241  00F8CA  0EE0               	movlw	224
  2242  00F8CC  6E2C               	movwf	drawtext@color,c
  2243  00F8CE  0E00               	movlw	0
  2244  00F8D0  6E2F               	movwf	drawtext@bg+1,c
  2245  00F8D2  0E00               	movlw	0
  2246  00F8D4  6E2E               	movwf	drawtext@bg,c
  2247  00F8D6  0E01               	movlw	1
  2248  00F8D8  6E30               	movwf	drawtext@size,c
  2249  00F8DA  0E1E               	movlw	30
  2250  00F8DC  EC9B  F072         	call	_drawtext
  2251                           
  2252                           ;Main_Screen.c: 84: drawRect (30, 30 + 16-8, 60, 18, 0xFFE0);
  2253  00F8E0  0E00               	movlw	0
  2254  00F8E2  6E14               	movwf	drawRect@x+1,c
  2255  00F8E4  0E1E               	movlw	30
  2256  00F8E6  6E13               	movwf	drawRect@x,c
  2257  00F8E8  0E00               	movlw	0
  2258  00F8EA  6E16               	movwf	drawRect@y+1,c
  2259  00F8EC  0E26               	movlw	38
  2260  00F8EE  6E15               	movwf	drawRect@y,c
  2261  00F8F0  0E00               	movlw	0
  2262  00F8F2  6E18               	movwf	drawRect@w+1,c
  2263  00F8F4  0E3C               	movlw	60
  2264  00F8F6  6E17               	movwf	drawRect@w,c
  2265  00F8F8  0E00               	movlw	0
  2266  00F8FA  6E1A               	movwf	drawRect@h+1,c
  2267  00F8FC  0E12               	movlw	18
  2268  00F8FE  6E19               	movwf	drawRect@h,c
  2269  00F900  0EFF               	movlw	255
  2270  00F902  6E1C               	movwf	drawRect@color+1,c
  2271  00F904  0EE0               	movlw	224
  2272  00F906  6E1B               	movwf	drawRect@color,c
  2273  00F908  EC85  F06E         	call	_drawRect	;wreg free
  2274                           
  2275                           ;Main_Screen.c: 85: drawCircle(40, 30 + 16 , 7, 0xF800);
  2276  00F90C  0E00               	movlw	0
  2277  00F90E  6E0D               	movwf	drawCircle@x0+1,c
  2278  00F910  0E28               	movlw	40
  2279  00F912  6E0C               	movwf	drawCircle@x0,c
  2280  00F914  0E00               	movlw	0
  2281  00F916  6E0F               	movwf	drawCircle@y0+1,c
  2282  00F918  0E2E               	movlw	46
  2283  00F91A  6E0E               	movwf	drawCircle@y0,c
  2284  00F91C  0E00               	movlw	0
  2285  00F91E  6E11               	movwf	drawCircle@r+1,c
  2286  00F920  0E07               	movlw	7
  2287  00F922  6E10               	movwf	drawCircle@r,c
  2288  00F924  0EF8               	movlw	248
  2289  00F926  6E13               	movwf	drawCircle@color+1,c
  2290  00F928  0E00               	movlw	0
  2291  00F92A  6E12               	movwf	drawCircle@color,c
  2292  00F92C  EC71  F077         	call	_drawCircle	;wreg free
  2293                           
  2294                           ;Main_Screen.c: 86: drawCircle(60, 30 + 16 , 7, 0xFFE0);
  2295  00F930  0E00               	movlw	0
  2296  00F932  6E0D               	movwf	drawCircle@x0+1,c
  2297  00F934  0E3C               	movlw	60
  2298  00F936  6E0C               	movwf	drawCircle@x0,c
  2299  00F938  0E00               	movlw	0
  2300  00F93A  6E0F               	movwf	drawCircle@y0+1,c
  2301  00F93C  0E2E               	movlw	46
  2302  00F93E  6E0E               	movwf	drawCircle@y0,c
  2303  00F940  0E00               	movlw	0
  2304  00F942  6E11               	movwf	drawCircle@r+1,c
  2305  00F944  0E07               	movlw	7
  2306  00F946  6E10               	movwf	drawCircle@r,c
  2307  00F948  0EFF               	movlw	255
  2308  00F94A  6E13               	movwf	drawCircle@color+1,c
  2309  00F94C  0EE0               	movlw	224
  2310  00F94E  6E12               	movwf	drawCircle@color,c
  2311  00F950  EC71  F077         	call	_drawCircle	;wreg free
  2312                           
  2313                           ;Main_Screen.c: 87: fillCircle(80, 30 + 16 , 7, 0x07E0);
  2314  00F954  0E00               	movlw	0
  2315  00F956  6E2C               	movwf	fillCircle@x0+1,c
  2316  00F958  0E50               	movlw	80
  2317  00F95A  6E2B               	movwf	fillCircle@x0,c
  2318  00F95C  0E00               	movlw	0
  2319  00F95E  6E2E               	movwf	fillCircle@y0+1,c
  2320  00F960  0E2E               	movlw	46
  2321  00F962  6E2D               	movwf	fillCircle@y0,c
  2322  00F964  0E00               	movlw	0
  2323  00F966  6E30               	movwf	fillCircle@r+1,c
  2324  00F968  0E07               	movlw	7
  2325  00F96A  6E2F               	movwf	fillCircle@r,c
  2326  00F96C  0E07               	movlw	7
  2327  00F96E  6E32               	movwf	fillCircle@color+1,c
  2328  00F970  0EE0               	movlw	224
  2329  00F972  6E31               	movwf	fillCircle@color,c
  2330  00F974  EC02  F06E         	call	_fillCircle	;wreg free
  2331                           
  2332                           ;Main_Screen.c: 88: drawtext (100, 30 + 10, NS_Count, 0xFFE0, 0x0000, 2);
  2333  00F978  0E28               	movlw	40
  2334  00F97A  6E29               	movwf	drawtext@y,c
  2335  00F97C  0E55               	movlw	low _NS_Count
  2336  00F97E  6E2A               	movwf	drawtext@_text,c
  2337  00F980  0E00               	movlw	high _NS_Count
  2338  00F982  6E2B               	movwf	drawtext@_text+1,c
  2339  00F984  0EFF               	movlw	255
  2340  00F986  6E2D               	movwf	drawtext@color+1,c
  2341  00F988  0EE0               	movlw	224
  2342  00F98A  6E2C               	movwf	drawtext@color,c
  2343  00F98C  0E00               	movlw	0
  2344  00F98E  6E2F               	movwf	drawtext@bg+1,c
  2345  00F990  0E00               	movlw	0
  2346  00F992  6E2E               	movwf	drawtext@bg,c
  2347  00F994  0E02               	movlw	2
  2348  00F996  6E30               	movwf	drawtext@size,c
  2349  00F998  0E64               	movlw	100
  2350  00F99A  EC9B  F072         	call	_drawtext
  2351                           
  2352                           ;Main_Screen.c: 91: strcpy(txt, "N/S LT");
  2353  00F99E  C071  F001         	movff	_txt,strcpy@to
  2354  00F9A2  C072  F002         	movff	_txt+1,strcpy@to+1
  2355  00F9A6  0ED6               	movlw	low STR_7
  2356  00F9A8  6E03               	movwf	strcpy@from,c
  2357  00F9AA  0EFF               	movlw	high STR_7
  2358  00F9AC  6E04               	movwf	strcpy@from+1,c
  2359  00F9AE  EC3D  F06C         	call	_strcpy	;wreg free
  2360                           
  2361                           ;Main_Screen.c: 92: drawtext (30, 60, txt, 0xF81F, 0x0000, 1);
  2362  00F9B2  0E3C               	movlw	60
  2363  00F9B4  6E29               	movwf	drawtext@y,c
  2364  00F9B6  C071  F02A         	movff	_txt,drawtext@_text
  2365  00F9BA  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2366  00F9BE  0EF8               	movlw	248
  2367  00F9C0  6E2D               	movwf	drawtext@color+1,c
  2368  00F9C2  0E1F               	movlw	31
  2369  00F9C4  6E2C               	movwf	drawtext@color,c
  2370  00F9C6  0E00               	movlw	0
  2371  00F9C8  6E2F               	movwf	drawtext@bg+1,c
  2372  00F9CA  0E00               	movlw	0
  2373  00F9CC  6E2E               	movwf	drawtext@bg,c
  2374  00F9CE  0E01               	movlw	1
  2375  00F9D0  6E30               	movwf	drawtext@size,c
  2376  00F9D2  0E1E               	movlw	30
  2377  00F9D4  EC9B  F072         	call	_drawtext
  2378                           
  2379                           ;Main_Screen.c: 93: drawRect (30, 60 + 16-8, 60, 18, 0xF81F);
  2380  00F9D8  0E00               	movlw	0
  2381  00F9DA  6E14               	movwf	drawRect@x+1,c
  2382  00F9DC  0E1E               	movlw	30
  2383  00F9DE  6E13               	movwf	drawRect@x,c
  2384  00F9E0  0E00               	movlw	0
  2385  00F9E2  6E16               	movwf	drawRect@y+1,c
  2386  00F9E4  0E44               	movlw	68
  2387  00F9E6  6E15               	movwf	drawRect@y,c
  2388  00F9E8  0E00               	movlw	0
  2389  00F9EA  6E18               	movwf	drawRect@w+1,c
  2390  00F9EC  0E3C               	movlw	60
  2391  00F9EE  6E17               	movwf	drawRect@w,c
  2392  00F9F0  0E00               	movlw	0
  2393  00F9F2  6E1A               	movwf	drawRect@h+1,c
  2394  00F9F4  0E12               	movlw	18
  2395  00F9F6  6E19               	movwf	drawRect@h,c
  2396  00F9F8  0EF8               	movlw	248
  2397  00F9FA  6E1C               	movwf	drawRect@color+1,c
  2398  00F9FC  0E1F               	movlw	31
  2399  00F9FE  6E1B               	movwf	drawRect@color,c
  2400  00FA00  EC85  F06E         	call	_drawRect	;wreg free
  2401                           
  2402                           ;Main_Screen.c: 94: fillCircle(40, 60 + 16, 7, 0xF800);
  2403  00FA04  0E00               	movlw	0
  2404  00FA06  6E2C               	movwf	fillCircle@x0+1,c
  2405  00FA08  0E28               	movlw	40
  2406  00FA0A  6E2B               	movwf	fillCircle@x0,c
  2407  00FA0C  0E00               	movlw	0
  2408  00FA0E  6E2E               	movwf	fillCircle@y0+1,c
  2409  00FA10  0E4C               	movlw	76
  2410  00FA12  6E2D               	movwf	fillCircle@y0,c
  2411  00FA14  0E00               	movlw	0
  2412  00FA16  6E30               	movwf	fillCircle@r+1,c
  2413  00FA18  0E07               	movlw	7
  2414  00FA1A  6E2F               	movwf	fillCircle@r,c
  2415  00FA1C  0EF8               	movlw	248
  2416  00FA1E  6E32               	movwf	fillCircle@color+1,c
  2417  00FA20  0E00               	movlw	0
  2418  00FA22  6E31               	movwf	fillCircle@color,c
  2419  00FA24  EC02  F06E         	call	_fillCircle	;wreg free
  2420                           
  2421                           ;Main_Screen.c: 95: drawCircle(60, 60 + 16, 7, 0xFFE0);
  2422  00FA28  0E00               	movlw	0
  2423  00FA2A  6E0D               	movwf	drawCircle@x0+1,c
  2424  00FA2C  0E3C               	movlw	60
  2425  00FA2E  6E0C               	movwf	drawCircle@x0,c
  2426  00FA30  0E00               	movlw	0
  2427  00FA32  6E0F               	movwf	drawCircle@y0+1,c
  2428  00FA34  0E4C               	movlw	76
  2429  00FA36  6E0E               	movwf	drawCircle@y0,c
  2430  00FA38  0E00               	movlw	0
  2431  00FA3A  6E11               	movwf	drawCircle@r+1,c
  2432  00FA3C  0E07               	movlw	7
  2433  00FA3E  6E10               	movwf	drawCircle@r,c
  2434  00FA40  0EFF               	movlw	255
  2435  00FA42  6E13               	movwf	drawCircle@color+1,c
  2436  00FA44  0EE0               	movlw	224
  2437  00FA46  6E12               	movwf	drawCircle@color,c
  2438  00FA48  EC71  F077         	call	_drawCircle	;wreg free
  2439                           
  2440                           ;Main_Screen.c: 96: drawCircle(80, 60 + 16, 7, 0x07E0);
  2441  00FA4C  0E00               	movlw	0
  2442  00FA4E  6E0D               	movwf	drawCircle@x0+1,c
  2443  00FA50  0E50               	movlw	80
  2444  00FA52  6E0C               	movwf	drawCircle@x0,c
  2445  00FA54  0E00               	movlw	0
  2446  00FA56  6E0F               	movwf	drawCircle@y0+1,c
  2447  00FA58  0E4C               	movlw	76
  2448  00FA5A  6E0E               	movwf	drawCircle@y0,c
  2449  00FA5C  0E00               	movlw	0
  2450  00FA5E  6E11               	movwf	drawCircle@r+1,c
  2451  00FA60  0E07               	movlw	7
  2452  00FA62  6E10               	movwf	drawCircle@r,c
  2453  00FA64  0E07               	movlw	7
  2454  00FA66  6E13               	movwf	drawCircle@color+1,c
  2455  00FA68  0EE0               	movlw	224
  2456  00FA6A  6E12               	movwf	drawCircle@color,c
  2457  00FA6C  EC71  F077         	call	_drawCircle	;wreg free
  2458                           
  2459                           ;Main_Screen.c: 97: drawtext (100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2460  00FA70  0E46               	movlw	70
  2461  00FA72  6E29               	movwf	drawtext@y,c
  2462  00FA74  0E52               	movlw	low _NSLT_Count
  2463  00FA76  6E2A               	movwf	drawtext@_text,c
  2464  00FA78  0E00               	movlw	high _NSLT_Count
  2465  00FA7A  6E2B               	movwf	drawtext@_text+1,c
  2466  00FA7C  0EF8               	movlw	248
  2467  00FA7E  6E2D               	movwf	drawtext@color+1,c
  2468  00FA80  0E1F               	movlw	31
  2469  00FA82  6E2C               	movwf	drawtext@color,c
  2470  00FA84  0E00               	movlw	0
  2471  00FA86  6E2F               	movwf	drawtext@bg+1,c
  2472  00FA88  0E00               	movlw	0
  2473  00FA8A  6E2E               	movwf	drawtext@bg,c
  2474  00FA8C  0E02               	movlw	2
  2475  00FA8E  6E30               	movwf	drawtext@size,c
  2476  00FA90  0E64               	movlw	100
  2477  00FA92  EC9B  F072         	call	_drawtext
  2478                           
  2479                           ;Main_Screen.c: 100: strcpy(txt, "EAST/WEST");
  2480  00FA96  C071  F001         	movff	_txt,strcpy@to
  2481  00FA9A  C072  F002         	movff	_txt+1,strcpy@to+1
  2482  00FA9E  0ECC               	movlw	low STR_8
  2483  00FAA0  6E03               	movwf	strcpy@from,c
  2484  00FAA2  0EFF               	movlw	high STR_8
  2485  00FAA4  6E04               	movwf	strcpy@from+1,c
  2486  00FAA6  EC3D  F06C         	call	_strcpy	;wreg free
  2487                           
  2488                           ;Main_Screen.c: 101: drawtext (30, 90, txt, 0x07FF, 0x0000, 1);
  2489  00FAAA  0E5A               	movlw	90
  2490  00FAAC  6E29               	movwf	drawtext@y,c
  2491  00FAAE  C071  F02A         	movff	_txt,drawtext@_text
  2492  00FAB2  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2493  00FAB6  0E07               	movlw	7
  2494  00FAB8  6E2D               	movwf	drawtext@color+1,c
  2495  00FABA  682C               	setf	drawtext@color,c
  2496  00FABC  0E00               	movlw	0
  2497  00FABE  6E2F               	movwf	drawtext@bg+1,c
  2498  00FAC0  0E00               	movlw	0
  2499  00FAC2  6E2E               	movwf	drawtext@bg,c
  2500  00FAC4  0E01               	movlw	1
  2501  00FAC6  6E30               	movwf	drawtext@size,c
  2502  00FAC8  0E1E               	movlw	30
  2503  00FACA  EC9B  F072         	call	_drawtext
  2504                           
  2505                           ;Main_Screen.c: 102: drawRect (30, 90 + 16-8, 60, 18, 0x07FF);
  2506  00FACE  0E00               	movlw	0
  2507  00FAD0  6E14               	movwf	drawRect@x+1,c
  2508  00FAD2  0E1E               	movlw	30
  2509  00FAD4  6E13               	movwf	drawRect@x,c
  2510  00FAD6  0E00               	movlw	0
  2511  00FAD8  6E16               	movwf	drawRect@y+1,c
  2512  00FADA  0E62               	movlw	98
  2513  00FADC  6E15               	movwf	drawRect@y,c
  2514  00FADE  0E00               	movlw	0
  2515  00FAE0  6E18               	movwf	drawRect@w+1,c
  2516  00FAE2  0E3C               	movlw	60
  2517  00FAE4  6E17               	movwf	drawRect@w,c
  2518  00FAE6  0E00               	movlw	0
  2519  00FAE8  6E1A               	movwf	drawRect@h+1,c
  2520  00FAEA  0E12               	movlw	18
  2521  00FAEC  6E19               	movwf	drawRect@h,c
  2522  00FAEE  0E07               	movlw	7
  2523  00FAF0  6E1C               	movwf	drawRect@color+1,c
  2524  00FAF2  681B               	setf	drawRect@color,c
  2525  00FAF4  EC85  F06E         	call	_drawRect	;wreg free
  2526                           
  2527                           ;Main_Screen.c: 103: fillCircle(40, 90 + 16, 7, 0xF800);
  2528  00FAF8  0E00               	movlw	0
  2529  00FAFA  6E2C               	movwf	fillCircle@x0+1,c
  2530  00FAFC  0E28               	movlw	40
  2531  00FAFE  6E2B               	movwf	fillCircle@x0,c
  2532  00FB00  0E00               	movlw	0
  2533  00FB02  6E2E               	movwf	fillCircle@y0+1,c
  2534  00FB04  0E6A               	movlw	106
  2535  00FB06  6E2D               	movwf	fillCircle@y0,c
  2536  00FB08  0E00               	movlw	0
  2537  00FB0A  6E30               	movwf	fillCircle@r+1,c
  2538  00FB0C  0E07               	movlw	7
  2539  00FB0E  6E2F               	movwf	fillCircle@r,c
  2540  00FB10  0EF8               	movlw	248
  2541  00FB12  6E32               	movwf	fillCircle@color+1,c
  2542  00FB14  0E00               	movlw	0
  2543  00FB16  6E31               	movwf	fillCircle@color,c
  2544  00FB18  EC02  F06E         	call	_fillCircle	;wreg free
  2545                           
  2546                           ;Main_Screen.c: 104: drawCircle(60, 90 + 16, 7, 0xFFE0);
  2547  00FB1C  0E00               	movlw	0
  2548  00FB1E  6E0D               	movwf	drawCircle@x0+1,c
  2549  00FB20  0E3C               	movlw	60
  2550  00FB22  6E0C               	movwf	drawCircle@x0,c
  2551  00FB24  0E00               	movlw	0
  2552  00FB26  6E0F               	movwf	drawCircle@y0+1,c
  2553  00FB28  0E6A               	movlw	106
  2554  00FB2A  6E0E               	movwf	drawCircle@y0,c
  2555  00FB2C  0E00               	movlw	0
  2556  00FB2E  6E11               	movwf	drawCircle@r+1,c
  2557  00FB30  0E07               	movlw	7
  2558  00FB32  6E10               	movwf	drawCircle@r,c
  2559  00FB34  0EFF               	movlw	255
  2560  00FB36  6E13               	movwf	drawCircle@color+1,c
  2561  00FB38  0EE0               	movlw	224
  2562  00FB3A  6E12               	movwf	drawCircle@color,c
  2563  00FB3C  EC71  F077         	call	_drawCircle	;wreg free
  2564                           
  2565                           ;Main_Screen.c: 105: drawCircle(80, 90 + 16, 7, 0x07E0);
  2566  00FB40  0E00               	movlw	0
  2567  00FB42  6E0D               	movwf	drawCircle@x0+1,c
  2568  00FB44  0E50               	movlw	80
  2569  00FB46  6E0C               	movwf	drawCircle@x0,c
  2570  00FB48  0E00               	movlw	0
  2571  00FB4A  6E0F               	movwf	drawCircle@y0+1,c
  2572  00FB4C  0E6A               	movlw	106
  2573  00FB4E  6E0E               	movwf	drawCircle@y0,c
  2574  00FB50  0E00               	movlw	0
  2575  00FB52  6E11               	movwf	drawCircle@r+1,c
  2576  00FB54  0E07               	movlw	7
  2577  00FB56  6E10               	movwf	drawCircle@r,c
  2578  00FB58  0E07               	movlw	7
  2579  00FB5A  6E13               	movwf	drawCircle@color+1,c
  2580  00FB5C  0EE0               	movlw	224
  2581  00FB5E  6E12               	movwf	drawCircle@color,c
  2582  00FB60  EC71  F077         	call	_drawCircle	;wreg free
  2583                           
  2584                           ;Main_Screen.c: 106: drawtext (100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2585  00FB64  0E64               	movlw	100
  2586  00FB66  6E29               	movwf	drawtext@y,c
  2587  00FB68  0E4C               	movlw	low _EW_Count
  2588  00FB6A  6E2A               	movwf	drawtext@_text,c
  2589  00FB6C  0E00               	movlw	high _EW_Count
  2590  00FB6E  6E2B               	movwf	drawtext@_text+1,c
  2591  00FB70  0E07               	movlw	7
  2592  00FB72  6E2D               	movwf	drawtext@color+1,c
  2593  00FB74  682C               	setf	drawtext@color,c
  2594  00FB76  0E00               	movlw	0
  2595  00FB78  6E2F               	movwf	drawtext@bg+1,c
  2596  00FB7A  0E00               	movlw	0
  2597  00FB7C  6E2E               	movwf	drawtext@bg,c
  2598  00FB7E  0E02               	movlw	2
  2599  00FB80  6E30               	movwf	drawtext@size,c
  2600  00FB82  0E64               	movlw	100
  2601  00FB84  EC9B  F072         	call	_drawtext
  2602                           
  2603                           ;Main_Screen.c: 109: strcpy(txt, "E/W LT");
  2604  00FB88  C071  F001         	movff	_txt,strcpy@to
  2605  00FB8C  C072  F002         	movff	_txt+1,strcpy@to+1
  2606  00FB90  0EDD               	movlw	low STR_9
  2607  00FB92  6E03               	movwf	strcpy@from,c
  2608  00FB94  0EFF               	movlw	high STR_9
  2609  00FB96  6E04               	movwf	strcpy@from+1,c
  2610  00FB98  EC3D  F06C         	call	_strcpy	;wreg free
  2611                           
  2612                           ;Main_Screen.c: 110: drawtext (30, 120, txt, 0xFFFF, 0x0000, 1);
  2613  00FB9C  0E78               	movlw	120
  2614  00FB9E  6E29               	movwf	drawtext@y,c
  2615  00FBA0  C071  F02A         	movff	_txt,drawtext@_text
  2616  00FBA4  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2617  00FBA8  0EFF               	movlw	255
  2618  00FBAA  6E2D               	movwf	drawtext@color+1,c
  2619  00FBAC  682C               	setf	drawtext@color,c
  2620  00FBAE  0E00               	movlw	0
  2621  00FBB0  6E2F               	movwf	drawtext@bg+1,c
  2622  00FBB2  0E00               	movlw	0
  2623  00FBB4  6E2E               	movwf	drawtext@bg,c
  2624  00FBB6  0E01               	movlw	1
  2625  00FBB8  6E30               	movwf	drawtext@size,c
  2626  00FBBA  0E1E               	movlw	30
  2627  00FBBC  EC9B  F072         	call	_drawtext
  2628                           
  2629                           ;Main_Screen.c: 111: drawRect (30, 120 + 16-8, 60, 18, 0xFFFF);
  2630  00FBC0  0E00               	movlw	0
  2631  00FBC2  6E14               	movwf	drawRect@x+1,c
  2632  00FBC4  0E1E               	movlw	30
  2633  00FBC6  6E13               	movwf	drawRect@x,c
  2634  00FBC8  0E00               	movlw	0
  2635  00FBCA  6E16               	movwf	drawRect@y+1,c
  2636  00FBCC  0E80               	movlw	128
  2637  00FBCE  6E15               	movwf	drawRect@y,c
  2638  00FBD0  0E00               	movlw	0
  2639  00FBD2  6E18               	movwf	drawRect@w+1,c
  2640  00FBD4  0E3C               	movlw	60
  2641  00FBD6  6E17               	movwf	drawRect@w,c
  2642  00FBD8  0E00               	movlw	0
  2643  00FBDA  6E1A               	movwf	drawRect@h+1,c
  2644  00FBDC  0E12               	movlw	18
  2645  00FBDE  6E19               	movwf	drawRect@h,c
  2646  00FBE0  0EFF               	movlw	255
  2647  00FBE2  6E1C               	movwf	drawRect@color+1,c
  2648  00FBE4  681B               	setf	drawRect@color,c
  2649  00FBE6  EC85  F06E         	call	_drawRect	;wreg free
  2650                           
  2651                           ;Main_Screen.c: 112: fillCircle(40, 120 + 16, 7, 0xF800);
  2652  00FBEA  0E00               	movlw	0
  2653  00FBEC  6E2C               	movwf	fillCircle@x0+1,c
  2654  00FBEE  0E28               	movlw	40
  2655  00FBF0  6E2B               	movwf	fillCircle@x0,c
  2656  00FBF2  0E00               	movlw	0
  2657  00FBF4  6E2E               	movwf	fillCircle@y0+1,c
  2658  00FBF6  0E88               	movlw	136
  2659  00FBF8  6E2D               	movwf	fillCircle@y0,c
  2660  00FBFA  0E00               	movlw	0
  2661  00FBFC  6E30               	movwf	fillCircle@r+1,c
  2662  00FBFE  0E07               	movlw	7
  2663  00FC00  6E2F               	movwf	fillCircle@r,c
  2664  00FC02  0EF8               	movlw	248
  2665  00FC04  6E32               	movwf	fillCircle@color+1,c
  2666  00FC06  0E00               	movlw	0
  2667  00FC08  6E31               	movwf	fillCircle@color,c
  2668  00FC0A  EC02  F06E         	call	_fillCircle	;wreg free
  2669                           
  2670                           ;Main_Screen.c: 113: drawCircle(60, 120 + 16, 7, 0xFFE0);
  2671  00FC0E  0E00               	movlw	0
  2672  00FC10  6E0D               	movwf	drawCircle@x0+1,c
  2673  00FC12  0E3C               	movlw	60
  2674  00FC14  6E0C               	movwf	drawCircle@x0,c
  2675  00FC16  0E00               	movlw	0
  2676  00FC18  6E0F               	movwf	drawCircle@y0+1,c
  2677  00FC1A  0E88               	movlw	136
  2678  00FC1C  6E0E               	movwf	drawCircle@y0,c
  2679  00FC1E  0E00               	movlw	0
  2680  00FC20  6E11               	movwf	drawCircle@r+1,c
  2681  00FC22  0E07               	movlw	7
  2682  00FC24  6E10               	movwf	drawCircle@r,c
  2683  00FC26  0EFF               	movlw	255
  2684  00FC28  6E13               	movwf	drawCircle@color+1,c
  2685  00FC2A  0EE0               	movlw	224
  2686  00FC2C  6E12               	movwf	drawCircle@color,c
  2687  00FC2E  EC71  F077         	call	_drawCircle	;wreg free
  2688                           
  2689                           ;Main_Screen.c: 114: drawCircle(80, 120 + 16, 7, 0x07E0);
  2690  00FC32  0E00               	movlw	0
  2691  00FC34  6E0D               	movwf	drawCircle@x0+1,c
  2692  00FC36  0E50               	movlw	80
  2693  00FC38  6E0C               	movwf	drawCircle@x0,c
  2694  00FC3A  0E00               	movlw	0
  2695  00FC3C  6E0F               	movwf	drawCircle@y0+1,c
  2696  00FC3E  0E88               	movlw	136
  2697  00FC40  6E0E               	movwf	drawCircle@y0,c
  2698  00FC42  0E00               	movlw	0
  2699  00FC44  6E11               	movwf	drawCircle@r+1,c
  2700  00FC46  0E07               	movlw	7
  2701  00FC48  6E10               	movwf	drawCircle@r,c
  2702  00FC4A  0E07               	movlw	7
  2703  00FC4C  6E13               	movwf	drawCircle@color+1,c
  2704  00FC4E  0EE0               	movlw	224
  2705  00FC50  6E12               	movwf	drawCircle@color,c
  2706  00FC52  EC71  F077         	call	_drawCircle	;wreg free
  2707                           
  2708                           ;Main_Screen.c: 115: drawtext (100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2709  00FC56  0E82               	movlw	130
  2710  00FC58  6E29               	movwf	drawtext@y,c
  2711  00FC5A  0E49               	movlw	low _EWLT_Count
  2712  00FC5C  6E2A               	movwf	drawtext@_text,c
  2713  00FC5E  0E00               	movlw	high _EWLT_Count
  2714  00FC60  6E2B               	movwf	drawtext@_text+1,c
  2715  00FC62  0EFF               	movlw	255
  2716  00FC64  6E2D               	movwf	drawtext@color+1,c
  2717  00FC66  682C               	setf	drawtext@color,c
  2718  00FC68  0E00               	movlw	0
  2719  00FC6A  6E2F               	movwf	drawtext@bg+1,c
  2720  00FC6C  0E00               	movlw	0
  2721  00FC6E  6E2E               	movwf	drawtext@bg,c
  2722  00FC70  0E02               	movlw	2
  2723  00FC72  6E30               	movwf	drawtext@size,c
  2724  00FC74  0E64               	movlw	100
  2725  00FC76  EC9B  F072         	call	_drawtext
  2726                           
  2727                           ;Main_Screen.c: 118: strcpy(txt, "PNS");
  2728  00FC7A  C071  F001         	movff	_txt,strcpy@to
  2729  00FC7E  C072  F002         	movff	_txt+1,strcpy@to+1
  2730  00FC82  0EEF               	movlw	low STR_10
  2731  00FC84  6E03               	movwf	strcpy@from,c
  2732  00FC86  0EFF               	movlw	high STR_10
  2733  00FC88  6E04               	movwf	strcpy@from+1,c
  2734  00FC8A  EC3D  F06C         	call	_strcpy	;wreg free
  2735                           
  2736                           ;Main_Screen.c: 119: drawtext(3, 30, txt, 0xFFE0, 0x0000, 1);
  2737  00FC8E  0E1E               	movlw	30
  2738  00FC90  6E29               	movwf	drawtext@y,c
  2739  00FC92  C071  F02A         	movff	_txt,drawtext@_text
  2740  00FC96  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2741  00FC9A  0EFF               	movlw	255
  2742  00FC9C  6E2D               	movwf	drawtext@color+1,c
  2743  00FC9E  0EE0               	movlw	224
  2744  00FCA0  6E2C               	movwf	drawtext@color,c
  2745  00FCA2  0E00               	movlw	0
  2746  00FCA4  6E2F               	movwf	drawtext@bg+1,c
  2747  00FCA6  0E00               	movlw	0
  2748  00FCA8  6E2E               	movwf	drawtext@bg,c
  2749  00FCAA  0E01               	movlw	1
  2750  00FCAC  6E30               	movwf	drawtext@size,c
  2751  00FCAE  0E03               	movlw	3
  2752  00FCB0  EC9B  F072         	call	_drawtext
  2753                           
  2754                           ;Main_Screen.c: 120: drawtext(2, 40, PED_NS_Count, 0xFFE0, 0x0000, 2);
  2755  00FCB4  0E28               	movlw	40
  2756  00FCB6  6E29               	movwf	drawtext@y,c
  2757  00FCB8  0E5B               	movlw	low _PED_NS_Count
  2758  00FCBA  6E2A               	movwf	drawtext@_text,c
  2759  00FCBC  0E00               	movlw	high _PED_NS_Count
  2760  00FCBE  6E2B               	movwf	drawtext@_text+1,c
  2761  00FCC0  0EFF               	movlw	255
  2762  00FCC2  6E2D               	movwf	drawtext@color+1,c
  2763  00FCC4  0EE0               	movlw	224
  2764  00FCC6  6E2C               	movwf	drawtext@color,c
  2765  00FCC8  0E00               	movlw	0
  2766  00FCCA  6E2F               	movwf	drawtext@bg+1,c
  2767  00FCCC  0E00               	movlw	0
  2768  00FCCE  6E2E               	movwf	drawtext@bg,c
  2769  00FCD0  0E02               	movlw	2
  2770  00FCD2  6E30               	movwf	drawtext@size,c
  2771  00FCD4  0E02               	movlw	2
  2772  00FCD6  EC9B  F072         	call	_drawtext
  2773                           
  2774                           ;Main_Screen.c: 124: strcpy(txt, "PEW");
  2775  00FCDA  C071  F001         	movff	_txt,strcpy@to
  2776  00FCDE  C072  F002         	movff	_txt+1,strcpy@to+1
  2777  00FCE2  0EF3               	movlw	low STR_11
  2778  00FCE4  6E03               	movwf	strcpy@from,c
  2779  00FCE6  0EFF               	movlw	high STR_11
  2780  00FCE8  6E04               	movwf	strcpy@from+1,c
  2781  00FCEA  EC3D  F06C         	call	_strcpy	;wreg free
  2782                           
  2783                           ;Main_Screen.c: 125: drawtext(3, 90, txt, 0x07FF, 0x0000, 1);
  2784  00FCEE  0E5A               	movlw	90
  2785  00FCF0  6E29               	movwf	drawtext@y,c
  2786  00FCF2  C071  F02A         	movff	_txt,drawtext@_text
  2787  00FCF6  C072  F02B         	movff	_txt+1,drawtext@_text+1
  2788  00FCFA  0E07               	movlw	7
  2789  00FCFC  6E2D               	movwf	drawtext@color+1,c
  2790  00FCFE  682C               	setf	drawtext@color,c
  2791  00FD00  0E00               	movlw	0
  2792  00FD02  6E2F               	movwf	drawtext@bg+1,c
  2793  00FD04  0E00               	movlw	0
  2794  00FD06  6E2E               	movwf	drawtext@bg,c
  2795  00FD08  0E01               	movlw	1
  2796  00FD0A  6E30               	movwf	drawtext@size,c
  2797  00FD0C  0E03               	movlw	3
  2798  00FD0E  EC9B  F072         	call	_drawtext
  2799                           
  2800                           ;Main_Screen.c: 126: drawtext(2, 100, PED_EW_Count, 0x07FF, 0x0000, 2);
  2801  00FD12  0E64               	movlw	100
  2802  00FD14  6E29               	movwf	drawtext@y,c
  2803  00FD16  0E58               	movlw	low _PED_EW_Count
  2804  00FD18  6E2A               	movwf	drawtext@_text,c
  2805  00FD1A  0E00               	movlw	high _PED_EW_Count
  2806  00FD1C  6E2B               	movwf	drawtext@_text+1,c
  2807  00FD1E  0E07               	movlw	7
  2808  00FD20  6E2D               	movwf	drawtext@color+1,c
  2809  00FD22  682C               	setf	drawtext@color,c
  2810  00FD24  0E00               	movlw	0
  2811  00FD26  6E2F               	movwf	drawtext@bg+1,c
  2812  00FD28  0E00               	movlw	0
  2813  00FD2A  6E2E               	movwf	drawtext@bg,c
  2814  00FD2C  0E02               	movlw	2
  2815  00FD2E  6E30               	movwf	drawtext@size,c
  2816  00FD30  0E02               	movlw	2
  2817  00FD32  EC9B  F072         	call	_drawtext
  2818                           
  2819                           ;Main_Screen.c: 128: if (1 == 0)
  2820  00FD36  D005               	goto	l3898
  2821                           
  2822                           ;Main_Screen.c: 129: {
  2823                           ;Main_Screen.c: 130: Timing_Txt[0] = 'S';
  2824  00FD38  0E53               	movlw	83
  2825  00FD3A  0100               	movlb	0	; () banked
  2826  00FD3C  6F9F               	movwf	_Timing_Txt& (0+255),b
  2827                           
  2828                           ;Main_Screen.c: 131: Timing_Txt[1] = 'P';
  2829  00FD3E  0E50               	movlw	80
  2830  00FD40  D004               	goto	L1
  2831  00FD42                     l3898:
  2832                           
  2833                           ;Main_Screen.c: 133: else
  2834                           ;Main_Screen.c: 134: {
  2835                           ;Main_Screen.c: 135: Timing_Txt[0] = 'F';
  2836  00FD42  0E46               	movlw	70
  2837  00FD44  0100               	movlb	0	; () banked
  2838  00FD46  6F9F               	movwf	_Timing_Txt& (0+255),b
  2839                           
  2840                           ;Main_Screen.c: 136: Timing_Txt[1] = 'S';
  2841  00FD48  0E53               	movlw	83
  2842  00FD4A                     L1:
  2843  00FD4A  0100               	movlb	0	; () banked
  2844  00FD4C  6FA0               	movwf	(_Timing_Txt+1)& (0+255),b
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;Main_Screen.c: 137: }
  2848                           ;Main_Screen.c: 138: Timing_Txt[2] = 24/10 + '0';
  2849  00FD4E  0E32               	movlw	50
  2850  00FD50  0100               	movlb	0	; () banked
  2851  00FD52  6FA1               	movwf	(_Timing_Txt+2)& (0+255),b
  2852                           
  2853                           ;Main_Screen.c: 139: Timing_Txt[3] = 24%10 + '0';
  2854  00FD54  0E34               	movlw	52
  2855  00FD56  0100               	movlb	0	; () banked
  2856  00FD58  6FA2               	movwf	(_Timing_Txt+3)& (0+255),b
  2857                           
  2858                           ;Main_Screen.c: 140: Timing_Txt[5] = 3%10 + '0';
  2859  00FD5A  0E33               	movlw	51
  2860  00FD5C  0100               	movlb	0	; () banked
  2861  00FD5E  6FA4               	movwf	(_Timing_Txt+5)& (0+255),b
  2862                           
  2863                           ;Main_Screen.c: 141: Timing_Txt[7] = 13/10 + '0';
  2864  00FD60  0E31               	movlw	49
  2865  00FD62  0100               	movlb	0	; () banked
  2866  00FD64  6FA6               	movwf	(_Timing_Txt+7)& (0+255),b
  2867                           
  2868                           ;Main_Screen.c: 142: Timing_Txt[8] = 13%10 + '0';
  2869  00FD66  0E33               	movlw	51
  2870  00FD68  0100               	movlb	0	; () banked
  2871  00FD6A  6FA7               	movwf	(_Timing_Txt+8)& (0+255),b
  2872                           
  2873                           ;Main_Screen.c: 143: Timing_Txt[10] = 7 + '0';
  2874  00FD6C  0E37               	movlw	55
  2875  00FD6E  0100               	movlb	0	; () banked
  2876  00FD70  6FA9               	movwf	(_Timing_Txt+10)& (0+255),b
  2877                           
  2878                           ;Main_Screen.c: 144: Timing_Txt[11] = 5 + '0';
  2879  00FD72  0E35               	movlw	53
  2880  00FD74  0100               	movlb	0	; () banked
  2881  00FD76  6FAA               	movwf	(_Timing_Txt+11)& (0+255),b
  2882                           
  2883                           ;Main_Screen.c: 145: Timing_Txt[12] = 8 + '0';
  2884  00FD78  0E38               	movlw	56
  2885  00FD7A  0100               	movlb	0	; () banked
  2886  00FD7C  6FAB               	movwf	(_Timing_Txt+12)& (0+255),b
  2887                           
  2888                           ;Main_Screen.c: 146: Timing_Txt[13] = 5 + '0';
  2889  00FD7E  0E35               	movlw	53
  2890  00FD80  0100               	movlb	0	; () banked
  2891  00FD82  6FAC               	movwf	(_Timing_Txt+13)& (0+255),b
  2892                           
  2893                           ;Main_Screen.c: 147: Timing_Txt[14] = 6 + '0';
  2894  00FD84  0E36               	movlw	54
  2895  00FD86  0100               	movlb	0	; () banked
  2896  00FD88  6FAD               	movwf	(_Timing_Txt+14)& (0+255),b
  2897                           
  2898                           ;Main_Screen.c: 148: Timing_Txt[15] = 5 + '0';
  2899  00FD8A  0E35               	movlw	53
  2900  00FD8C  0100               	movlb	0	; () banked
  2901  00FD8E  6FAE               	movwf	(_Timing_Txt+15)& (0+255),b
  2902                           
  2903                           ;Main_Screen.c: 149: Timing_Txt[17] = 7 + '0';
  2904  00FD90  0E37               	movlw	55
  2905  00FD92  0100               	movlb	0	; () banked
  2906  00FD94  6FB0               	movwf	(_Timing_Txt+17)& (0+255),b
  2907                           
  2908                           ;Main_Screen.c: 150: Timing_Txt[18] = 5 + '0';
  2909  00FD96  0E35               	movlw	53
  2910  00FD98  0100               	movlb	0	; () banked
  2911  00FD9A  6FB1               	movwf	(_Timing_Txt+18)& (0+255),b
  2912                           
  2913                           ;Main_Screen.c: 151: Timing_Txt[19] = 7 + '0';
  2914  00FD9C  0E37               	movlw	55
  2915  00FD9E  0100               	movlb	0	; () banked
  2916  00FDA0  6FB2               	movwf	(_Timing_Txt+19)& (0+255),b
  2917                           
  2918                           ;Main_Screen.c: 152: Timing_Txt[20] = 5 + '0';
  2919  00FDA2  0E35               	movlw	53
  2920  00FDA4  0100               	movlb	0	; () banked
  2921  00FDA6  6FB3               	movwf	(_Timing_Txt+20)& (0+255),b
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;Main_Screen.c: 153: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  2925  00FDA8  0E96               	movlw	150
  2926  00FDAA  6E29               	movwf	drawtext@y,c
  2927  00FDAC  0E9F               	movlw	low _Timing_Txt
  2928  00FDAE  6E2A               	movwf	drawtext@_text,c
  2929  00FDB0  0E00               	movlw	high _Timing_Txt
  2930  00FDB2  6E2B               	movwf	drawtext@_text+1,c
  2931  00FDB4  0EFF               	movlw	255
  2932  00FDB6  6E2D               	movwf	drawtext@color+1,c
  2933  00FDB8  682C               	setf	drawtext@color,c
  2934  00FDBA  0E00               	movlw	0
  2935  00FDBC  6E2F               	movwf	drawtext@bg+1,c
  2936  00FDBE  0E00               	movlw	0
  2937  00FDC0  6E2E               	movwf	drawtext@bg,c
  2938  00FDC2  0E01               	movlw	1
  2939  00FDC4  6E30               	movwf	drawtext@size,c
  2940  00FDC6  0E01               	movlw	1
  2941  00FDC8  EC9B  F072         	call	_drawtext
  2942  00FDCC  0012               	return		;funcret
  2943  00FDCE                     __end_of_Initialize_LCD_Screen:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           postinc0	equ	0xFEE
  2950                           wreg	equ	0xFE8
  2951                           postdec1	equ	0xFE5
  2952                           fsr1l	equ	0xFE1
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _fillScreen *****************
  2956 ;; Defined at:
  2957 ;;		line 570 in file "ST7735_TFT.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  color           2   19[COMRAM] unsigned int 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;		None               void
  2964 ;; Registers used:
  2965 ;;		wreg, status,2, status,0, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2971 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;Total ram usage:        2 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    4
  2978 ;; This function calls:
  2979 ;;		_fillRectangle
  2980 ;; This function is called by:
  2981 ;;		_Initialize_LCD_Screen
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text3
  2986  00D76A                     __ptext3:
  2987                           	opt stack 0
  2988  00D76A                     _fillScreen:
  2989                           	opt stack 25
  2990                           
  2991                           ;ST7735_TFT.c: 572: fillRectangle(0, 0, 128, 160, color);
  2992                           
  2993                           ;incstack = 0
  2994  00D76A  0E00               	movlw	0
  2995  00D76C  6E08               	movwf	fillRectangle@y,c
  2996  00D76E  0E80               	movlw	128
  2997  00D770  6E09               	movwf	fillRectangle@w,c
  2998  00D772  0EA0               	movlw	160
  2999  00D774  6E0A               	movwf	fillRectangle@h,c
  3000  00D776  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3001  00D77A  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3002  00D77E  0E00               	movlw	0
  3003  00D780  EC2D  F072         	call	_fillRectangle
  3004  00D784  0012               	return		;funcret
  3005  00D786                     __end_of_fillScreen:
  3006                           	opt stack 0
  3007                           tblptru	equ	0xFF8
  3008                           tblptrh	equ	0xFF7
  3009                           tblptrl	equ	0xFF6
  3010                           tablat	equ	0xFF5
  3011                           postinc0	equ	0xFEE
  3012                           wreg	equ	0xFE8
  3013                           postdec1	equ	0xFE5
  3014                           fsr1l	equ	0xFE1
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function _fillRectangle *****************
  3018 ;; Defined at:
  3019 ;;		line 454 in file "ST7735_TFT.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  x               1    wreg     unsigned char 
  3022 ;;  y               1    7[COMRAM] unsigned char 
  3023 ;;  w               1    8[COMRAM] unsigned char 
  3024 ;;  h               1    9[COMRAM] unsigned char 
  3025 ;;  color           2   10[COMRAM] unsigned int 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  x               1   18[COMRAM] unsigned char 
  3028 ;;  lo              1   17[COMRAM] unsigned char 
  3029 ;;  hi              1   16[COMRAM] unsigned char 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;		None               void
  3032 ;; Registers used:
  3033 ;;		wreg, status,2, status,0, cstack
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3039 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;Total ram usage:       12 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    3
  3046 ;; This function calls:
  3047 ;;		_setAddrWindow
  3048 ;;		_spiwrite
  3049 ;; This function is called by:
  3050 ;;		_fillScreen
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text4
  3055  00E45A                     __ptext4:
  3056                           	opt stack 0
  3057  00E45A                     _fillRectangle:
  3058                           	opt stack 25
  3059                           
  3060                           ;incstack = 0
  3061                           ;fillRectangle@x stored from wreg
  3062  00E45A  6E13               	movwf	fillRectangle@x,c
  3063                           
  3064                           ;ST7735_TFT.c: 456: unsigned char hi, lo;
  3065                           ;ST7735_TFT.c: 457: if((x >= 128) || (y >= 160))
  3066  00E45C  0E80               	movlw	128
  3067  00E45E  6013               	cpfslt	fillRectangle@x,c
  3068  00E460  D069               	goto	l393
  3069  00E462  0E9F               	movlw	159
  3070  00E464  6408               	cpfsgt	fillRectangle@y,c
  3071  00E466  D001               	goto	l3586
  3072                           
  3073                           ;ST7735_TFT.c: 458: return;
  3074  00E468  D065               	goto	l393
  3075  00E46A                     l3586:
  3076                           
  3077                           ;ST7735_TFT.c: 459: if((x + w - 1) >= 128)
  3078  00E46A  0EFF               	movlw	255
  3079  00E46C  6E0D               	movwf	??_fillRectangle& (0+255),c
  3080  00E46E  0EFF               	movlw	255
  3081  00E470  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3082  00E472  5009               	movf	fillRectangle@w,w,c
  3083  00E474  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3084  00E478  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3085  00E47A  260F               	addwf	??_fillRectangle+2,f,c
  3086  00E47C  0E00               	movlw	0
  3087  00E47E  2210               	addwfc	??_fillRectangle+3,f,c
  3088  00E480  500D               	movf	??_fillRectangle,w,c
  3089  00E482  260F               	addwf	??_fillRectangle+2,f,c
  3090  00E484  500E               	movf	??_fillRectangle+1,w,c
  3091  00E486  2210               	addwfc	??_fillRectangle+3,f,c
  3092  00E488  BE10               	btfsc	??_fillRectangle+3,7,c
  3093  00E48A  D00A               	goto	l394
  3094  00E48C  5010               	movf	??_fillRectangle+3,w,c
  3095  00E48E  E104               	bnz	u2410
  3096  00E490  0E80               	movlw	128
  3097  00E492  5C0F               	subwf	??_fillRectangle+2,w,c
  3098  00E494  A0D8               	btfss	status,0,c
  3099  00E496  D004               	goto	l394
  3100  00E498                     u2410:
  3101                           
  3102                           ;ST7735_TFT.c: 460: w = 128 - x;
  3103  00E498  5013               	movf	fillRectangle@x,w,c
  3104  00E49A  0800               	sublw	0
  3105  00E49C  0F80               	addlw	128
  3106  00E49E  6E09               	movwf	fillRectangle@w,c
  3107  00E4A0                     l394:
  3108                           
  3109                           ;ST7735_TFT.c: 461: if((y + h - 1) >= 160)
  3110  00E4A0  0EFF               	movlw	255
  3111  00E4A2  6E0D               	movwf	??_fillRectangle& (0+255),c
  3112  00E4A4  0EFF               	movlw	255
  3113  00E4A6  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3114  00E4A8  500A               	movf	fillRectangle@h,w,c
  3115  00E4AA  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3116  00E4AE  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3117  00E4B0  260F               	addwf	??_fillRectangle+2,f,c
  3118  00E4B2  0E00               	movlw	0
  3119  00E4B4  2210               	addwfc	??_fillRectangle+3,f,c
  3120  00E4B6  500D               	movf	??_fillRectangle,w,c
  3121  00E4B8  260F               	addwf	??_fillRectangle+2,f,c
  3122  00E4BA  500E               	movf	??_fillRectangle+1,w,c
  3123  00E4BC  2210               	addwfc	??_fillRectangle+3,f,c
  3124  00E4BE  BE10               	btfsc	??_fillRectangle+3,7,c
  3125  00E4C0  D00B               	goto	l3592
  3126  00E4C2  5010               	movf	??_fillRectangle+3,w,c
  3127  00E4C4  E104               	bnz	u2420
  3128  00E4C6  0EA0               	movlw	160
  3129  00E4C8  5C0F               	subwf	??_fillRectangle+2,w,c
  3130  00E4CA  A0D8               	btfss	status,0,c
  3131  00E4CC  D005               	goto	l3592
  3132  00E4CE                     u2420:
  3133                           
  3134                           ;ST7735_TFT.c: 462: h = 160 - y;
  3135  00E4CE  5008               	movf	fillRectangle@y,w,c
  3136  00E4D0  0800               	sublw	0
  3137  00E4D2  0FA0               	addlw	160
  3138  00E4D4  6E0A               	movwf	fillRectangle@h,c
  3139  00E4D6  D000               	goto	l3592
  3140  00E4D8                     l3592:
  3141                           
  3142                           ;ST7735_TFT.c: 463: setAddrWindow(x, y, x+w-1, y+h-1);
  3143  00E4D8  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3144  00E4DC  5013               	movf	fillRectangle@x,w,c
  3145  00E4DE  2409               	addwf	fillRectangle@w,w,c
  3146  00E4E0  6E0D               	movwf	??_fillRectangle& (0+255),c
  3147  00E4E2  040D               	decf	??_fillRectangle,w,c
  3148  00E4E4  6E05               	movwf	setAddrWindow@x1,c
  3149  00E4E6  5008               	movf	fillRectangle@y,w,c
  3150  00E4E8  240A               	addwf	fillRectangle@h,w,c
  3151  00E4EA  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3152  00E4EC  040E               	decf	??_fillRectangle+1,w,c
  3153  00E4EE  6E06               	movwf	setAddrWindow@y1,c
  3154  00E4F0  5013               	movf	fillRectangle@x,w,c
  3155  00E4F2  ECB2  F06D         	call	_setAddrWindow
  3156                           
  3157                           ;ST7735_TFT.c: 464: hi = color >> 8; lo = color;
  3158  00E4F6  500C               	movf	fillRectangle@color+1,w,c
  3159  00E4F8  6E11               	movwf	fillRectangle@hi,c
  3160  00E4FA  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3161                           
  3162                           ;ST7735_TFT.c: 465: PORTDbits.RD2 = 1;
  3163  00E4FE  8483               	bsf	3971,2,c	;volatile
  3164                           
  3165                           ;ST7735_TFT.c: 466: PORTDbits.RD3 = 0;
  3166  00E500  9683               	bcf	3971,3,c	;volatile
  3167                           
  3168                           ;ST7735_TFT.c: 468: for(y=h; y>0; y--) {
  3169  00E502  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3170  00E506                     l3604:
  3171  00E506  5008               	movf	fillRectangle@y,w,c
  3172  00E508  B4D8               	btfsc	status,2,c
  3173  00E50A  D013               	goto	l397
  3174  00E50C  D001               	goto	l396
  3175  00E50E  D011               	goto	l397
  3176  00E510                     l396:
  3177                           
  3178                           ;ST7735_TFT.c: 469: for(x = w; x > 0; x--) {
  3179  00E510  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3180  00E514                     l3608:
  3181  00E514  5013               	movf	fillRectangle@x,w,c
  3182  00E516  B4D8               	btfsc	status,2,c
  3183  00E518  D00A               	goto	l3618
  3184  00E51A  D001               	goto	l3612
  3185  00E51C  D008               	goto	l3618
  3186  00E51E                     l3612:
  3187                           
  3188                           ;ST7735_TFT.c: 470: spiwrite(hi);
  3189  00E51E  5011               	movf	fillRectangle@hi,w,c
  3190  00E520  EC7C  F06B         	call	_spiwrite
  3191                           
  3192                           ;ST7735_TFT.c: 471: spiwrite(lo);
  3193  00E524  5012               	movf	fillRectangle@lo,w,c
  3194  00E526  EC7C  F06B         	call	_spiwrite
  3195  00E52A  0613               	decf	fillRectangle@x,f,c
  3196  00E52C  D7F3               	goto	l3608
  3197  00E52E                     l3618:
  3198  00E52E  0608               	decf	fillRectangle@y,f,c
  3199  00E530  D7EA               	goto	l3604
  3200  00E532                     l397:
  3201                           
  3202                           ;ST7735_TFT.c: 472: }
  3203                           ;ST7735_TFT.c: 473: }
  3204                           ;ST7735_TFT.c: 474: PORTDbits.RD3 = 1;
  3205  00E532  8683               	bsf	3971,3,c	;volatile
  3206  00E534                     l393:
  3207  00E534  0012               	return		;funcret
  3208  00E536                     __end_of_fillRectangle:
  3209                           	opt stack 0
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           postinc0	equ	0xFEE
  3215                           wreg	equ	0xFE8
  3216                           postdec1	equ	0xFE5
  3217                           fsr1l	equ	0xFE1
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _drawRect *****************
  3221 ;; Defined at:
  3222 ;;		line 636 in file "ST7735_TFT.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  x               2   18[COMRAM] unsigned int 
  3225 ;;  y               2   20[COMRAM] unsigned int 
  3226 ;;  w               2   22[COMRAM] unsigned int 
  3227 ;;  h               2   24[COMRAM] unsigned int 
  3228 ;;  color           2   26[COMRAM] unsigned int 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;		None               void
  3233 ;; Registers used:
  3234 ;;		wreg, status,2, status,0, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3240 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;Total ram usage:       11 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    4
  3247 ;; This function calls:
  3248 ;;		_drawFastHLine
  3249 ;;		_drawFastVLine
  3250 ;; This function is called by:
  3251 ;;		_Initialize_LCD_Screen
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text5
  3256  00DD0A                     __ptext5:
  3257                           	opt stack 0
  3258  00DD0A                     _drawRect:
  3259                           	opt stack 25
  3260                           
  3261                           ;ST7735_TFT.c: 638: drawFastHLine(x, y, w, color);
  3262                           
  3263                           ;incstack = 0
  3264  00DD0A  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3265  00DD0E  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3266  00DD12  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3267  00DD16  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3268  00DD1A  5013               	movf	drawRect@x,w,c
  3269  00DD1C  ECE7  F06F         	call	_drawFastHLine
  3270                           
  3271                           ;ST7735_TFT.c: 639: drawFastHLine(x, y + h - 1, w, color);
  3272  00DD20  5015               	movf	drawRect@y,w,c
  3273  00DD22  2419               	addwf	drawRect@h,w,c
  3274  00DD24  6E1D               	movwf	??_drawRect& (0+255),c
  3275  00DD26  041D               	decf	??_drawRect,w,c
  3276  00DD28  6E08               	movwf	drawFastHLine@y,c
  3277  00DD2A  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3278  00DD2E  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3279  00DD32  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3280  00DD36  5013               	movf	drawRect@x,w,c
  3281  00DD38  ECE7  F06F         	call	_drawFastHLine
  3282                           
  3283                           ;ST7735_TFT.c: 640: drawFastVLine(x, y, h, color);
  3284  00DD3C  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3285  00DD40  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3286  00DD44  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3287  00DD48  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3288  00DD4C  5013               	movf	drawRect@x,w,c
  3289  00DD4E  ECA3  F06F         	call	_drawFastVLine
  3290                           
  3291                           ;ST7735_TFT.c: 641: drawFastVLine(x + w - 1, y, h, color);
  3292  00DD52  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3293  00DD56  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3294  00DD5A  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3295  00DD5E  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3296  00DD62  5013               	movf	drawRect@x,w,c
  3297  00DD64  2417               	addwf	drawRect@w,w,c
  3298  00DD66  6E1D               	movwf	??_drawRect& (0+255),c
  3299  00DD68  041D               	decf	??_drawRect,w,c
  3300  00DD6A  ECA3  F06F         	call	_drawFastVLine
  3301  00DD6E  0012               	return		;funcret
  3302  00DD70                     __end_of_drawRect:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           postdec1	equ	0xFE5
  3311                           fsr1l	equ	0xFE1
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function _drawFastHLine *****************
  3315 ;; Defined at:
  3316 ;;		line 575 in file "ST7735_TFT.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  x               1    wreg     unsigned char 
  3319 ;;  y               1    7[COMRAM] unsigned char 
  3320 ;;  w               1    8[COMRAM] unsigned char 
  3321 ;;  color           2    9[COMRAM] unsigned int 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  x               1   17[COMRAM] unsigned char 
  3324 ;;  lo              1   16[COMRAM] unsigned char 
  3325 ;;  hi              1   15[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;		None               void
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;Total ram usage:       11 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    3
  3342 ;; This function calls:
  3343 ;;		_setAddrWindow
  3344 ;;		_spiwrite
  3345 ;; This function is called by:
  3346 ;;		_drawRect
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text6
  3351  00DFCE                     __ptext6:
  3352                           	opt stack 0
  3353  00DFCE                     _drawFastHLine:
  3354                           	opt stack 25
  3355                           
  3356                           ;incstack = 0
  3357                           ;drawFastHLine@x stored from wreg
  3358  00DFCE  6E12               	movwf	drawFastHLine@x,c
  3359                           
  3360                           ;ST7735_TFT.c: 577: unsigned char hi, lo;
  3361                           ;ST7735_TFT.c: 578: if((x >= 128) || (y >= 160))
  3362  00DFD0  0E80               	movlw	128
  3363  00DFD2  6012               	cpfslt	drawFastHLine@x,c
  3364  00DFD4  D03F               	goto	l438
  3365  00DFD6  0E9F               	movlw	159
  3366  00DFD8  6408               	cpfsgt	drawFastHLine@y,c
  3367  00DFDA  D001               	goto	l3626
  3368                           
  3369                           ;ST7735_TFT.c: 579: return;
  3370  00DFDC  D03B               	goto	l438
  3371  00DFDE                     l3626:
  3372                           
  3373                           ;ST7735_TFT.c: 580: if((x + w - 1) >= 128)
  3374  00DFDE  0EFF               	movlw	255
  3375  00DFE0  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3376  00DFE2  0EFF               	movlw	255
  3377  00DFE4  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3378  00DFE6  5009               	movf	drawFastHLine@w,w,c
  3379  00DFE8  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3380  00DFEC  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3381  00DFEE  260E               	addwf	??_drawFastHLine+2,f,c
  3382  00DFF0  0E00               	movlw	0
  3383  00DFF2  220F               	addwfc	??_drawFastHLine+3,f,c
  3384  00DFF4  500C               	movf	??_drawFastHLine,w,c
  3385  00DFF6  260E               	addwf	??_drawFastHLine+2,f,c
  3386  00DFF8  500D               	movf	??_drawFastHLine+1,w,c
  3387  00DFFA  220F               	addwfc	??_drawFastHLine+3,f,c
  3388  00DFFC  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3389  00DFFE  D00B               	goto	l3630
  3390  00E000  500F               	movf	??_drawFastHLine+3,w,c
  3391  00E002  E104               	bnz	u2490
  3392  00E004  0E80               	movlw	128
  3393  00E006  5C0E               	subwf	??_drawFastHLine+2,w,c
  3394  00E008  A0D8               	btfss	status,0,c
  3395  00E00A  D005               	goto	l3630
  3396  00E00C                     u2490:
  3397                           
  3398                           ;ST7735_TFT.c: 581: w = 128 - x;
  3399  00E00C  5012               	movf	drawFastHLine@x,w,c
  3400  00E00E  0800               	sublw	0
  3401  00E010  0F80               	addlw	128
  3402  00E012  6E09               	movwf	drawFastHLine@w,c
  3403  00E014  D000               	goto	l3630
  3404  00E016                     l3630:
  3405                           
  3406                           ;ST7735_TFT.c: 582: hi = color >> 8; lo = color;
  3407  00E016  500B               	movf	drawFastHLine@color+1,w,c
  3408  00E018  6E10               	movwf	drawFastHLine@hi,c
  3409  00E01A  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3410                           
  3411                           ;ST7735_TFT.c: 583: setAddrWindow(x, y, x + w - 1, y);
  3412  00E01E  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3413  00E022  5012               	movf	drawFastHLine@x,w,c
  3414  00E024  2409               	addwf	drawFastHLine@w,w,c
  3415  00E026  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3416  00E028  040C               	decf	??_drawFastHLine,w,c
  3417  00E02A  6E05               	movwf	setAddrWindow@x1,c
  3418  00E02C  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3419  00E030  5012               	movf	drawFastHLine@x,w,c
  3420  00E032  ECB2  F06D         	call	_setAddrWindow
  3421                           
  3422                           ;ST7735_TFT.c: 584: PORTDbits.RD2 = 1;
  3423  00E036  8483               	bsf	3971,2,c	;volatile
  3424                           
  3425                           ;ST7735_TFT.c: 585: PORTDbits.RD3 = 0;
  3426  00E038  9683               	bcf	3971,3,c	;volatile
  3427                           
  3428                           ;ST7735_TFT.c: 587: while (w--) {
  3429  00E03A  D007               	goto	l3642
  3430  00E03C                     l3640:
  3431                           
  3432                           ;ST7735_TFT.c: 588: spiwrite(hi);
  3433  00E03C  5010               	movf	drawFastHLine@hi,w,c
  3434  00E03E  EC7C  F06B         	call	_spiwrite
  3435                           
  3436                           ;ST7735_TFT.c: 589: spiwrite(lo);
  3437  00E042  5011               	movf	drawFastHLine@lo,w,c
  3438  00E044  EC7C  F06B         	call	_spiwrite
  3439  00E048  D000               	goto	l3642
  3440  00E04A                     l3642:
  3441  00E04A  0609               	decf	drawFastHLine@w,f,c
  3442  00E04C  2809               	incf	drawFastHLine@w,w,c
  3443  00E04E  A4D8               	btfss	status,2,c
  3444  00E050  D7F5               	goto	l3640
  3445                           
  3446                           ;ST7735_TFT.c: 590: }
  3447                           ;ST7735_TFT.c: 591: PORTDbits.RD3 = 1;
  3448  00E052  8683               	bsf	3971,3,c	;volatile
  3449  00E054                     l438:
  3450  00E054  0012               	return		;funcret
  3451  00E056                     __end_of_drawFastHLine:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           fsr1l	equ	0xFE1
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _TFT_GreenTab_Initialize *****************
  3464 ;; Defined at:
  3465 ;;		line 595 in file "ST7735_TFT.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;		None               void
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;Total ram usage:        0 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    3
  3486 ;; This function calls:
  3487 ;;		_Rcmd1
  3488 ;;		_Rcmd2red
  3489 ;;		_Rcmd3
  3490 ;;		_write_command
  3491 ;;		_write_data
  3492 ;; This function is called by:
  3493 ;;		_Initialize_LCD_Screen
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text7
  3498  00D820                     __ptext7:
  3499                           	opt stack 0
  3500  00D820                     _TFT_GreenTab_Initialize:
  3501                           	opt stack 26
  3502                           
  3503                           ;ST7735_TFT.c: 597: PORTDbits.RD3 = 1;
  3504                           
  3505                           ;incstack = 0
  3506  00D820  8683               	bsf	3971,3,c	;volatile
  3507                           
  3508                           ;ST7735_TFT.c: 598: PORTDbits.RD2 = 0;
  3509  00D822  9483               	bcf	3971,2,c	;volatile
  3510                           
  3511                           ;ST7735_TFT.c: 600: SSPSTAT=0x80;
  3512  00D824  0E80               	movlw	128
  3513  00D826  6EC7               	movwf	4039,c	;volatile
  3514                           
  3515                           ;ST7735_TFT.c: 601: SSPCON1=0x30;
  3516  00D828  0E30               	movlw	48
  3517  00D82A  6EC6               	movwf	4038,c	;volatile
  3518                           
  3519                           ;ST7735_TFT.c: 604: Rcmd1();
  3520  00D82C  ECE3  F074         	call	_Rcmd1	;wreg free
  3521                           
  3522                           ;ST7735_TFT.c: 605: Rcmd2red();
  3523  00D830  ECE6  F06C         	call	_Rcmd2red	;wreg free
  3524                           
  3525                           ;ST7735_TFT.c: 606: Rcmd3();
  3526  00D834  ECEE  F073         	call	_Rcmd3	;wreg free
  3527                           
  3528                           ;ST7735_TFT.c: 607: write_command(0x36);
  3529  00D838  0E36               	movlw	54
  3530  00D83A  EC5A  F06B         	call	_write_command
  3531                           
  3532                           ;ST7735_TFT.c: 608: write_data(0xC0);
  3533  00D83E  0EC0               	movlw	192
  3534  00D840  EC62  F06B         	call	_write_data
  3535                           
  3536                           ;ST7735_TFT.c: 609: _tft_type = 1;
  3537  00D844  0E01               	movlw	1
  3538  00D846  6E7B               	movwf	__tft_type,c
  3539  00D848  0012               	return		;funcret
  3540  00D84A                     __end_of_TFT_GreenTab_Initialize:
  3541                           	opt stack 0
  3542                           tblptru	equ	0xFF8
  3543                           tblptrh	equ	0xFF7
  3544                           tblptrl	equ	0xFF6
  3545                           tablat	equ	0xFF5
  3546                           postinc0	equ	0xFEE
  3547                           wreg	equ	0xFE8
  3548                           postdec1	equ	0xFE5
  3549                           fsr1l	equ	0xFE1
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _Rcmd3 *****************
  3553 ;; Defined at:
  3554 ;;		line 289 in file "ST7735_TFT.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;		None               void
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;Total ram usage:        0 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    2
  3575 ;; This function calls:
  3576 ;;		_delay_ms
  3577 ;;		_write_command
  3578 ;;		_write_data
  3579 ;; This function is called by:
  3580 ;;		_TFT_GreenTab_Initialize
  3581 ;;		_TFT_BlackTab_Initialize
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text8
  3586  00E7DC                     __ptext8:
  3587                           	opt stack 0
  3588  00E7DC                     _Rcmd3:
  3589                           	opt stack 26
  3590                           
  3591                           ;ST7735_TFT.c: 291: write_command(0xE0);
  3592                           
  3593                           ;incstack = 0
  3594  00E7DC  0EE0               	movlw	224
  3595  00E7DE  EC5A  F06B         	call	_write_command
  3596                           
  3597                           ;ST7735_TFT.c: 292: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3598  00E7E2  0E02               	movlw	2
  3599  00E7E4  EC62  F06B         	call	_write_data
  3600  00E7E8  0E1C               	movlw	28
  3601  00E7EA  EC62  F06B         	call	_write_data
  3602  00E7EE  0E07               	movlw	7
  3603  00E7F0  EC62  F06B         	call	_write_data
  3604  00E7F4  0E12               	movlw	18
  3605  00E7F6  EC62  F06B         	call	_write_data
  3606                           
  3607                           ;ST7735_TFT.c: 293: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3608  00E7FA  0E37               	movlw	55
  3609  00E7FC  EC62  F06B         	call	_write_data
  3610  00E800  0E32               	movlw	50
  3611  00E802  EC62  F06B         	call	_write_data
  3612  00E806  0E29               	movlw	41
  3613  00E808  EC62  F06B         	call	_write_data
  3614  00E80C  0E2D               	movlw	45
  3615  00E80E  EC62  F06B         	call	_write_data
  3616                           
  3617                           ;ST7735_TFT.c: 294: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3618  00E812  0E29               	movlw	41
  3619  00E814  EC62  F06B         	call	_write_data
  3620  00E818  0E25               	movlw	37
  3621  00E81A  EC62  F06B         	call	_write_data
  3622  00E81E  0E2B               	movlw	43
  3623  00E820  EC62  F06B         	call	_write_data
  3624  00E824  0E39               	movlw	57
  3625  00E826  EC62  F06B         	call	_write_data
  3626                           
  3627                           ;ST7735_TFT.c: 295: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3628  00E82A  0E00               	movlw	0
  3629  00E82C  EC62  F06B         	call	_write_data
  3630  00E830  0E01               	movlw	1
  3631  00E832  EC62  F06B         	call	_write_data
  3632  00E836  0E03               	movlw	3
  3633  00E838  EC62  F06B         	call	_write_data
  3634  00E83C  0E10               	movlw	16
  3635  00E83E  EC62  F06B         	call	_write_data
  3636                           
  3637                           ;ST7735_TFT.c: 296: write_command(0xE1);
  3638  00E842  0EE1               	movlw	225
  3639  00E844  EC5A  F06B         	call	_write_command
  3640                           
  3641                           ;ST7735_TFT.c: 297: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3642  00E848  0E03               	movlw	3
  3643  00E84A  EC62  F06B         	call	_write_data
  3644  00E84E  0E1D               	movlw	29
  3645  00E850  EC62  F06B         	call	_write_data
  3646  00E854  0E07               	movlw	7
  3647  00E856  EC62  F06B         	call	_write_data
  3648  00E85A  0E06               	movlw	6
  3649  00E85C  EC62  F06B         	call	_write_data
  3650                           
  3651                           ;ST7735_TFT.c: 298: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3652  00E860  0E2E               	movlw	46
  3653  00E862  EC62  F06B         	call	_write_data
  3654  00E866  0E2C               	movlw	44
  3655  00E868  EC62  F06B         	call	_write_data
  3656  00E86C  0E29               	movlw	41
  3657  00E86E  EC62  F06B         	call	_write_data
  3658  00E872  0E2D               	movlw	45
  3659  00E874  EC62  F06B         	call	_write_data
  3660                           
  3661                           ;ST7735_TFT.c: 299: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3662  00E878  0E2E               	movlw	46
  3663  00E87A  EC62  F06B         	call	_write_data
  3664  00E87E  0E2E               	movlw	46
  3665  00E880  EC62  F06B         	call	_write_data
  3666  00E884  0E37               	movlw	55
  3667  00E886  EC62  F06B         	call	_write_data
  3668  00E88A  0E3F               	movlw	63
  3669  00E88C  EC62  F06B         	call	_write_data
  3670                           
  3671                           ;ST7735_TFT.c: 300: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3672  00E890  0E00               	movlw	0
  3673  00E892  EC62  F06B         	call	_write_data
  3674  00E896  0E00               	movlw	0
  3675  00E898  EC62  F06B         	call	_write_data
  3676  00E89C  0E02               	movlw	2
  3677  00E89E  EC62  F06B         	call	_write_data
  3678  00E8A2  0E10               	movlw	16
  3679  00E8A4  EC62  F06B         	call	_write_data
  3680                           
  3681                           ;ST7735_TFT.c: 301: write_command(0x13);
  3682  00E8A8  0E13               	movlw	19
  3683  00E8AA  EC5A  F06B         	call	_write_command
  3684                           
  3685                           ;ST7735_TFT.c: 302: delay_ms(10);
  3686  00E8AE  0E00               	movlw	0
  3687  00E8B0  6E08               	movwf	delay_ms@ms+1,c
  3688  00E8B2  0E0A               	movlw	10
  3689  00E8B4  6E07               	movwf	delay_ms@ms,c
  3690  00E8B6  EC2B  F06E         	call	_delay_ms	;wreg free
  3691                           
  3692                           ;ST7735_TFT.c: 303: write_command(0x29);
  3693  00E8BA  0E29               	movlw	41
  3694  00E8BC  EC5A  F06B         	call	_write_command
  3695                           
  3696                           ;ST7735_TFT.c: 304: delay_ms(100);
  3697  00E8C0  0E00               	movlw	0
  3698  00E8C2  6E08               	movwf	delay_ms@ms+1,c
  3699  00E8C4  0E64               	movlw	100
  3700  00E8C6  6E07               	movwf	delay_ms@ms,c
  3701  00E8C8  EC2B  F06E         	call	_delay_ms	;wreg free
  3702  00E8CC  0012               	return		;funcret
  3703  00E8CE                     __end_of_Rcmd3:
  3704                           	opt stack 0
  3705                           tblptru	equ	0xFF8
  3706                           tblptrh	equ	0xFF7
  3707                           tblptrl	equ	0xFF6
  3708                           tablat	equ	0xFF5
  3709                           postinc0	equ	0xFEE
  3710                           wreg	equ	0xFE8
  3711                           postdec1	equ	0xFE5
  3712                           fsr1l	equ	0xFE1
  3713                           status	equ	0xFD8
  3714                           
  3715 ;; *************** function _Rcmd2red *****************
  3716 ;; Defined at:
  3717 ;;		line 275 in file "ST7735_TFT.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;		None
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;		None
  3722 ;; Return value:  Size  Location     Type
  3723 ;;		None               void
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3735 ;;Total ram usage:        0 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    2
  3738 ;; This function calls:
  3739 ;;		_write_command
  3740 ;;		_write_data
  3741 ;; This function is called by:
  3742 ;;		_TFT_GreenTab_Initialize
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text9
  3747  00D9CC                     __ptext9:
  3748                           	opt stack 0
  3749  00D9CC                     _Rcmd2red:
  3750                           	opt stack 26
  3751                           
  3752                           ;ST7735_TFT.c: 277: write_command(0x2A);
  3753                           
  3754                           ;incstack = 0
  3755  00D9CC  0E2A               	movlw	42
  3756  00D9CE  EC5A  F06B         	call	_write_command
  3757                           
  3758                           ;ST7735_TFT.c: 278: write_data(0x00);
  3759  00D9D2  0E00               	movlw	0
  3760  00D9D4  EC62  F06B         	call	_write_data
  3761                           
  3762                           ;ST7735_TFT.c: 279: write_data(0x00);
  3763  00D9D8  0E00               	movlw	0
  3764  00D9DA  EC62  F06B         	call	_write_data
  3765                           
  3766                           ;ST7735_TFT.c: 280: write_data(0x00);
  3767  00D9DE  0E00               	movlw	0
  3768  00D9E0  EC62  F06B         	call	_write_data
  3769                           
  3770                           ;ST7735_TFT.c: 281: write_data(0x7F);
  3771  00D9E4  0E7F               	movlw	127
  3772  00D9E6  EC62  F06B         	call	_write_data
  3773                           
  3774                           ;ST7735_TFT.c: 282: write_command(0x2B);
  3775  00D9EA  0E2B               	movlw	43
  3776  00D9EC  EC5A  F06B         	call	_write_command
  3777                           
  3778                           ;ST7735_TFT.c: 283: write_data(0x00);
  3779  00D9F0  0E00               	movlw	0
  3780  00D9F2  EC62  F06B         	call	_write_data
  3781                           
  3782                           ;ST7735_TFT.c: 284: write_data(0x00);
  3783  00D9F6  0E00               	movlw	0
  3784  00D9F8  EC62  F06B         	call	_write_data
  3785                           
  3786                           ;ST7735_TFT.c: 285: write_data(0x00);
  3787  00D9FC  0E00               	movlw	0
  3788  00D9FE  EC62  F06B         	call	_write_data
  3789                           
  3790                           ;ST7735_TFT.c: 286: write_data(0x9F);
  3791  00DA02  0E9F               	movlw	159
  3792  00DA04  EC62  F06B         	call	_write_data
  3793  00DA08  0012               	return		;funcret
  3794  00DA0A                     __end_of_Rcmd2red:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           postinc0	equ	0xFEE
  3801                           wreg	equ	0xFE8
  3802                           postdec1	equ	0xFE5
  3803                           fsr1l	equ	0xFE1
  3804                           status	equ	0xFD8
  3805                           
  3806 ;; *************** function _Rcmd1 *****************
  3807 ;; Defined at:
  3808 ;;		line 228 in file "ST7735_TFT.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;		None               void
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;Total ram usage:        0 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    2
  3829 ;; This function calls:
  3830 ;;		_delay_ms
  3831 ;;		_write_command
  3832 ;;		_write_data
  3833 ;; This function is called by:
  3834 ;;		_TFT_GreenTab_Initialize
  3835 ;;		_TFT_BlackTab_Initialize
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text10
  3840  00E9C6                     __ptext10:
  3841                           	opt stack 0
  3842  00E9C6                     _Rcmd1:
  3843                           	opt stack 26
  3844                           
  3845                           ;ST7735_TFT.c: 230: write_command(0x01);
  3846                           
  3847                           ;incstack = 0
  3848  00E9C6  0E01               	movlw	1
  3849  00E9C8  EC5A  F06B         	call	_write_command
  3850                           
  3851                           ;ST7735_TFT.c: 231: delay_ms(150);
  3852  00E9CC  0E00               	movlw	0
  3853  00E9CE  6E08               	movwf	delay_ms@ms+1,c
  3854  00E9D0  0E96               	movlw	150
  3855  00E9D2  6E07               	movwf	delay_ms@ms,c
  3856  00E9D4  EC2B  F06E         	call	_delay_ms	;wreg free
  3857                           
  3858                           ;ST7735_TFT.c: 232: write_command(0x11);
  3859  00E9D8  0E11               	movlw	17
  3860  00E9DA  EC5A  F06B         	call	_write_command
  3861                           
  3862                           ;ST7735_TFT.c: 233: delay_ms(500);
  3863  00E9DE  0E01               	movlw	1
  3864  00E9E0  6E08               	movwf	delay_ms@ms+1,c
  3865  00E9E2  0EF4               	movlw	244
  3866  00E9E4  6E07               	movwf	delay_ms@ms,c
  3867  00E9E6  EC2B  F06E         	call	_delay_ms	;wreg free
  3868                           
  3869                           ;ST7735_TFT.c: 234: write_command(0xB1);
  3870  00E9EA  0EB1               	movlw	177
  3871  00E9EC  EC5A  F06B         	call	_write_command
  3872                           
  3873                           ;ST7735_TFT.c: 235: write_data(0x01);
  3874  00E9F0  0E01               	movlw	1
  3875  00E9F2  EC62  F06B         	call	_write_data
  3876                           
  3877                           ;ST7735_TFT.c: 236: write_data(0x2C);
  3878  00E9F6  0E2C               	movlw	44
  3879  00E9F8  EC62  F06B         	call	_write_data
  3880                           
  3881                           ;ST7735_TFT.c: 237: write_data(0x2D);
  3882  00E9FC  0E2D               	movlw	45
  3883  00E9FE  EC62  F06B         	call	_write_data
  3884                           
  3885                           ;ST7735_TFT.c: 238: write_command(0xB2);
  3886  00EA02  0EB2               	movlw	178
  3887  00EA04  EC5A  F06B         	call	_write_command
  3888                           
  3889                           ;ST7735_TFT.c: 239: write_data(0x01);
  3890  00EA08  0E01               	movlw	1
  3891  00EA0A  EC62  F06B         	call	_write_data
  3892                           
  3893                           ;ST7735_TFT.c: 240: write_data(0x2C);
  3894  00EA0E  0E2C               	movlw	44
  3895  00EA10  EC62  F06B         	call	_write_data
  3896                           
  3897                           ;ST7735_TFT.c: 241: write_data(0x2D);
  3898  00EA14  0E2D               	movlw	45
  3899  00EA16  EC62  F06B         	call	_write_data
  3900                           
  3901                           ;ST7735_TFT.c: 242: write_command(0xB3);
  3902  00EA1A  0EB3               	movlw	179
  3903  00EA1C  EC5A  F06B         	call	_write_command
  3904                           
  3905                           ;ST7735_TFT.c: 243: write_data(0x01);
  3906  00EA20  0E01               	movlw	1
  3907  00EA22  EC62  F06B         	call	_write_data
  3908                           
  3909                           ;ST7735_TFT.c: 244: write_data(0x2C);
  3910  00EA26  0E2C               	movlw	44
  3911  00EA28  EC62  F06B         	call	_write_data
  3912                           
  3913                           ;ST7735_TFT.c: 245: write_data(0x2D);
  3914  00EA2C  0E2D               	movlw	45
  3915  00EA2E  EC62  F06B         	call	_write_data
  3916                           
  3917                           ;ST7735_TFT.c: 246: write_data(0x01);
  3918  00EA32  0E01               	movlw	1
  3919  00EA34  EC62  F06B         	call	_write_data
  3920                           
  3921                           ;ST7735_TFT.c: 247: write_data(0x2C);
  3922  00EA38  0E2C               	movlw	44
  3923  00EA3A  EC62  F06B         	call	_write_data
  3924                           
  3925                           ;ST7735_TFT.c: 248: write_data(0x2D);
  3926  00EA3E  0E2D               	movlw	45
  3927  00EA40  EC62  F06B         	call	_write_data
  3928                           
  3929                           ;ST7735_TFT.c: 249: write_command(0xB4);
  3930  00EA44  0EB4               	movlw	180
  3931  00EA46  EC5A  F06B         	call	_write_command
  3932                           
  3933                           ;ST7735_TFT.c: 250: write_data(0x07);
  3934  00EA4A  0E07               	movlw	7
  3935  00EA4C  EC62  F06B         	call	_write_data
  3936                           
  3937                           ;ST7735_TFT.c: 251: write_command(0xC0);
  3938  00EA50  0EC0               	movlw	192
  3939  00EA52  EC5A  F06B         	call	_write_command
  3940                           
  3941                           ;ST7735_TFT.c: 252: write_data(0xA2);
  3942  00EA56  0EA2               	movlw	162
  3943  00EA58  EC62  F06B         	call	_write_data
  3944                           
  3945                           ;ST7735_TFT.c: 253: write_data(0x02);
  3946  00EA5C  0E02               	movlw	2
  3947  00EA5E  EC62  F06B         	call	_write_data
  3948                           
  3949                           ;ST7735_TFT.c: 254: write_data(0x84);
  3950  00EA62  0E84               	movlw	132
  3951  00EA64  EC62  F06B         	call	_write_data
  3952                           
  3953                           ;ST7735_TFT.c: 255: write_command(0xC1);
  3954  00EA68  0EC1               	movlw	193
  3955  00EA6A  EC5A  F06B         	call	_write_command
  3956                           
  3957                           ;ST7735_TFT.c: 256: write_data(0xC5);
  3958  00EA6E  0EC5               	movlw	197
  3959  00EA70  EC62  F06B         	call	_write_data
  3960                           
  3961                           ;ST7735_TFT.c: 257: write_command(0xC2);
  3962  00EA74  0EC2               	movlw	194
  3963  00EA76  EC5A  F06B         	call	_write_command
  3964                           
  3965                           ;ST7735_TFT.c: 258: write_data(0x0A);
  3966  00EA7A  0E0A               	movlw	10
  3967  00EA7C  EC62  F06B         	call	_write_data
  3968                           
  3969                           ;ST7735_TFT.c: 259: write_data(0x00);
  3970  00EA80  0E00               	movlw	0
  3971  00EA82  EC62  F06B         	call	_write_data
  3972                           
  3973                           ;ST7735_TFT.c: 260: write_command(0xC3);
  3974  00EA86  0EC3               	movlw	195
  3975  00EA88  EC5A  F06B         	call	_write_command
  3976                           
  3977                           ;ST7735_TFT.c: 261: write_data(0x8A);
  3978  00EA8C  0E8A               	movlw	138
  3979  00EA8E  EC62  F06B         	call	_write_data
  3980                           
  3981                           ;ST7735_TFT.c: 262: write_data(0x2A);
  3982  00EA92  0E2A               	movlw	42
  3983  00EA94  EC62  F06B         	call	_write_data
  3984                           
  3985                           ;ST7735_TFT.c: 263: write_command(0xC4);
  3986  00EA98  0EC4               	movlw	196
  3987  00EA9A  EC5A  F06B         	call	_write_command
  3988                           
  3989                           ;ST7735_TFT.c: 264: write_data(0x8A);
  3990  00EA9E  0E8A               	movlw	138
  3991  00EAA0  EC62  F06B         	call	_write_data
  3992                           
  3993                           ;ST7735_TFT.c: 265: write_data(0xEE);
  3994  00EAA4  0EEE               	movlw	238
  3995  00EAA6  EC62  F06B         	call	_write_data
  3996                           
  3997                           ;ST7735_TFT.c: 266: write_command(0xC5);
  3998  00EAAA  0EC5               	movlw	197
  3999  00EAAC  EC5A  F06B         	call	_write_command
  4000                           
  4001                           ;ST7735_TFT.c: 267: write_data(0x0E);
  4002  00EAB0  0E0E               	movlw	14
  4003  00EAB2  EC62  F06B         	call	_write_data
  4004                           
  4005                           ;ST7735_TFT.c: 268: write_command(0x20);
  4006  00EAB6  0E20               	movlw	32
  4007  00EAB8  EC5A  F06B         	call	_write_command
  4008                           
  4009                           ;ST7735_TFT.c: 269: write_command(0x36);
  4010  00EABC  0E36               	movlw	54
  4011  00EABE  EC5A  F06B         	call	_write_command
  4012                           
  4013                           ;ST7735_TFT.c: 270: write_data(0xC8);
  4014  00EAC2  0EC8               	movlw	200
  4015  00EAC4  EC62  F06B         	call	_write_data
  4016                           
  4017                           ;ST7735_TFT.c: 271: write_command(0x3A);
  4018  00EAC8  0E3A               	movlw	58
  4019  00EACA  EC5A  F06B         	call	_write_command
  4020                           
  4021                           ;ST7735_TFT.c: 272: write_data(0x05);
  4022  00EACE  0E05               	movlw	5
  4023  00EAD0  EC62  F06B         	call	_write_data
  4024  00EAD4  0012               	return		;funcret
  4025  00EAD6                     __end_of_Rcmd1:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           postdec1	equ	0xFE5
  4034                           fsr1l	equ	0xFE1
  4035                           status	equ	0xFD8
  4036                           
  4037 ;; *************** function _LCD_Reset *****************
  4038 ;; Defined at:
  4039 ;;		line 164 in file "ST7735_TFT.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;		None
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;		None
  4044 ;; Return value:  Size  Location     Type
  4045 ;;		None               void
  4046 ;; Registers used:
  4047 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;Total ram usage:        0 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    2
  4060 ;; This function calls:
  4061 ;;		_delay_ms
  4062 ;; This function is called by:
  4063 ;;		_Initialize_LCD_Screen
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text11
  4068  00D6E6                     __ptext11:
  4069                           	opt stack 0
  4070  00D6E6                     _LCD_Reset:
  4071                           	opt stack 27
  4072                           
  4073                           ;ST7735_TFT.c: 166: PORTDbits.RD4 = 0;
  4074                           
  4075                           ;incstack = 0
  4076  00D6E6  9883               	bcf	3971,4,c	;volatile
  4077                           
  4078                           ;ST7735_TFT.c: 167: delay_ms(100);
  4079  00D6E8  0E00               	movlw	0
  4080  00D6EA  6E08               	movwf	delay_ms@ms+1,c
  4081  00D6EC  0E64               	movlw	100
  4082  00D6EE  6E07               	movwf	delay_ms@ms,c
  4083  00D6F0  EC2B  F06E         	call	_delay_ms	;wreg free
  4084                           
  4085                           ;ST7735_TFT.c: 168: PORTDbits.RD4 = 1;
  4086  00D6F4  8883               	bsf	3971,4,c	;volatile
  4087  00D6F6  0012               	return		;funcret
  4088  00D6F8                     __end_of_LCD_Reset:
  4089                           	opt stack 0
  4090                           tblptru	equ	0xFF8
  4091                           tblptrh	equ	0xFF7
  4092                           tblptrl	equ	0xFF6
  4093                           tablat	equ	0xFF5
  4094                           postinc0	equ	0xFEE
  4095                           wreg	equ	0xFE8
  4096                           postdec1	equ	0xFE5
  4097                           fsr1l	equ	0xFE1
  4098                           status	equ	0xFD8
  4099                           
  4100 ;; *************** function _delay_ms *****************
  4101 ;; Defined at:
  4102 ;;		line 11 in file "ST7735_TFT.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  ms              2    6[COMRAM] int 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  count           2   10[COMRAM] int 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;		None               void
  4109 ;; Registers used:
  4110 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;Total ram usage:        6 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:    1
  4123 ;; This function calls:
  4124 ;;		___wmul
  4125 ;; This function is called by:
  4126 ;;		_LCD_Reset
  4127 ;;		_Rcmd1
  4128 ;;		_Rcmd3
  4129 ;;		_Bcmd
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text12
  4134  00DC56                     __ptext12:
  4135                           	opt stack 0
  4136  00DC56                     _delay_ms:
  4137                           	opt stack 26
  4138                           
  4139                           ;ST7735_TFT.c: 17: int count;
  4140                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  4141                           
  4142                           ;incstack = 0
  4143  00DC56  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  4144  00DC5A  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4145  00DC5E  0E00               	movlw	0
  4146  00DC60  6E04               	movwf	___wmul@multiplicand+1,c
  4147  00DC62  0EFA               	movlw	250
  4148  00DC64  6E03               	movwf	___wmul@multiplicand,c
  4149  00DC66  ECE7  F06B         	call	___wmul	;wreg free
  4150  00DC6A  C001  F00B         	movff	?___wmul,delay_ms@count
  4151  00DC6E  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  4152                           
  4153                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  4154  00DC72  C00B  F009         	movff	delay_ms@count,??_delay_ms
  4155  00DC76  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  4156  00DC7A  1E09               	comf	??_delay_ms,f,c
  4157  00DC7C  1E0A               	comf	??_delay_ms+1,f,c
  4158  00DC7E  4A09               	infsnz	??_delay_ms,f,c
  4159  00DC80  2A0A               	incf	??_delay_ms+1,f,c
  4160  00DC82  0EFF               	movlw	255
  4161  00DC84  2409               	addwf	??_delay_ms,w,c
  4162  00DC86  6E0B               	movwf	delay_ms@count,c
  4163  00DC88  0EFF               	movlw	255
  4164  00DC8A  200A               	addwfc	??_delay_ms+1,w,c
  4165  00DC8C  6E0C               	movwf	delay_ms@count+1,c
  4166                           
  4167                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  4168  00DC8E  0EB8               	movlw	184
  4169  00DC90  6EB1               	movwf	4017,c	;volatile
  4170                           
  4171                           ;ST7735_TFT.c: 23: TMR3L = count & 0x00ff;
  4172  00DC92  C00B  FFB2         	movff	delay_ms@count,4018	;volatile
  4173                           
  4174                           ;ST7735_TFT.c: 24: TMR3H = count >> 8;
  4175  00DC96  500C               	movf	delay_ms@count+1,w,c
  4176  00DC98  6EB3               	movwf	4019,c	;volatile
  4177                           
  4178                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  4179  00DC9A  92A1               	bcf	4001,1,c	;volatile
  4180                           
  4181                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  4182  00DC9C  80B1               	bsf	4017,0,c	;volatile
  4183                           
  4184                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  4185  00DC9E  D000               	goto	l280
  4186  00DCA0                     l280:
  4187  00DCA0  A2A1               	btfss	4001,1,c	;volatile
  4188  00DCA2  D7FE               	goto	l280
  4189                           
  4190                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  4191  00DCA4  90B1               	bcf	4017,0,c	;volatile
  4192  00DCA6  0012               	return		;funcret
  4193  00DCA8                     __end_of_delay_ms:
  4194                           	opt stack 0
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           postinc0	equ	0xFEE
  4200                           wreg	equ	0xFE8
  4201                           postdec1	equ	0xFE5
  4202                           fsr1l	equ	0xFE1
  4203                           status	equ	0xFD8
  4204                           
  4205 ;; *************** function _Init_UART *****************
  4206 ;; Defined at:
  4207 ;;		line 25 in file "utils.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;		None               void
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;Total ram usage:        0 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    1
  4228 ;; This function calls:
  4229 ;;		_OpenUSART
  4230 ;; This function is called by:
  4231 ;;		_main
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text13
  4236  00D70C                     __ptext13:
  4237                           	opt stack 0
  4238  00D70C                     _Init_UART:
  4239                           	opt stack 29
  4240                           
  4241                           ;utils.c: 27: OpenUSART (0b01111111 & 0b10111111 &
  4242                           ;utils.c: 28: 0b11111110 & 0b11111101 & 0b11111111 &
  4243                           ;utils.c: 29: 0b11111111, 25);
  4244                           
  4245                           ;incstack = 0
  4246  00D70C  0E00               	movlw	0
  4247  00D70E  6E02               	movwf	OpenUSART@spbrg+1,c
  4248  00D710  0E19               	movlw	25
  4249  00D712  6E01               	movwf	OpenUSART@spbrg,c
  4250  00D714  0E3C               	movlw	60
  4251  00D716  ECEF  F06E         	call	_OpenUSART
  4252                           
  4253                           ;utils.c: 30: OSCCON = 0x70;
  4254  00D71A  0E70               	movlw	112
  4255  00D71C  6ED3               	movwf	4051,c	;volatile
  4256  00D71E  0012               	return		;funcret
  4257  00D720                     __end_of_Init_UART:
  4258                           	opt stack 0
  4259                           tblptru	equ	0xFF8
  4260                           tblptrh	equ	0xFF7
  4261                           tblptrl	equ	0xFF6
  4262                           tablat	equ	0xFF5
  4263                           postinc0	equ	0xFEE
  4264                           wreg	equ	0xFE8
  4265                           postdec1	equ	0xFE5
  4266                           fsr1l	equ	0xFE1
  4267                           status	equ	0xFD8
  4268                           
  4269 ;; *************** function _OpenUSART *****************
  4270 ;; Defined at:
  4271 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  config          1    wreg     unsigned char 
  4274 ;;  spbrg           2    0[COMRAM] unsigned int 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  config          1    2[COMRAM] unsigned char 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;		None               void
  4279 ;; Registers used:
  4280 ;;		wreg, status,2
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;Total ram usage:        3 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_Init_UART
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text14
  4300  00DDDE                     __ptext14:
  4301                           	opt stack 0
  4302  00DDDE                     _OpenUSART:
  4303                           	opt stack 29
  4304                           
  4305                           ;incstack = 0
  4306                           ;OpenUSART@config stored from wreg
  4307  00DDDE  6E03               	movwf	OpenUSART@config,c
  4308  00DDE0  0E00               	movlw	0
  4309  00DDE2  6EAC               	movwf	4012,c	;volatile
  4310  00DDE4  0E00               	movlw	0
  4311  00DDE6  6EAB               	movwf	4011,c	;volatile
  4312  00DDE8  A003               	btfss	OpenUSART@config,0,c
  4313  00DDEA  D002               	goto	l3738
  4314  00DDEC  88AC               	bsf	4012,4,c	;volatile
  4315  00DDEE  D000               	goto	l3738
  4316  00DDF0                     l3738:
  4317  00DDF0  A203               	btfss	OpenUSART@config,1,c
  4318  00DDF2  D003               	goto	l3742
  4319  00DDF4  8CAC               	bsf	4012,6,c	;volatile
  4320  00DDF6  8CAB               	bsf	4011,6,c	;volatile
  4321  00DDF8  D000               	goto	l3742
  4322  00DDFA                     l3742:
  4323  00DDFA  A403               	btfss	OpenUSART@config,2,c
  4324  00DDFC  D002               	goto	l3746
  4325  00DDFE  8EAC               	bsf	4012,7,c	;volatile
  4326  00DE00  D000               	goto	l3746
  4327  00DE02                     l3746:
  4328  00DE02  A603               	btfss	OpenUSART@config,3,c
  4329  00DE04  D002               	goto	l613
  4330  00DE06  88AB               	bsf	4011,4,c	;volatile
  4331  00DE08  D002               	goto	l3750
  4332  00DE0A                     l613:
  4333  00DE0A  8AAB               	bsf	4011,5,c	;volatile
  4334  00DE0C  D000               	goto	l3750
  4335  00DE0E                     l3750:
  4336  00DE0E  B803               	btfsc	OpenUSART@config,4,c
  4337  00DE10  84AC               	bsf	4012,2,c	;volatile
  4338  00DE12  989E               	bcf	3998,4,c	;volatile
  4339  00DE14  AA03               	btfss	OpenUSART@config,5,c
  4340  00DE16  D002               	goto	l3758
  4341  00DE18  86AB               	bsf	4011,3,c	;volatile
  4342  00DE1A  D000               	goto	l3758
  4343  00DE1C                     l3758:
  4344  00DE1C  AC03               	btfss	OpenUSART@config,6,c
  4345  00DE1E  D002               	goto	l617
  4346  00DE20  8A9D               	bsf	3997,5,c	;volatile
  4347  00DE22  D001               	goto	l618
  4348  00DE24                     l617:
  4349  00DE24  9A9D               	bcf	3997,5,c	;volatile
  4350  00DE26                     l618:
  4351  00DE26  9A9E               	bcf	3998,5,c	;volatile
  4352  00DE28  AE03               	btfss	OpenUSART@config,7,c
  4353  00DE2A  D002               	goto	l619
  4354  00DE2C  889D               	bsf	3997,4,c	;volatile
  4355  00DE2E  D001               	goto	l620
  4356  00DE30                     l619:
  4357  00DE30  989D               	bcf	3997,4,c	;volatile
  4358  00DE32                     l620:
  4359  00DE32  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4360  00DE36  5002               	movf	OpenUSART@spbrg+1,w,c
  4361  00DE38  6EB0               	movwf	4016,c	;volatile
  4362  00DE3A  8AAC               	bsf	4012,5,c	;volatile
  4363  00DE3C  8EAB               	bsf	4011,7,c	;volatile
  4364  00DE3E  9C94               	bcf	3988,6,c	;volatile
  4365  00DE40  8E94               	bsf	3988,7,c	;volatile
  4366  00DE42  B8AC               	btfsc	4012,4,c	;volatile
  4367  00DE44  BEAC               	btfsc	4012,7,c	;volatile
  4368  00DE46  D002               	goto	l622
  4369  00DE48  8C94               	bsf	3988,6,c	;volatile
  4370  00DE4A  D000               	goto	l622
  4371  00DE4C                     l622:
  4372  00DE4C  0012               	return		;funcret
  4373  00DE4E                     __end_of_OpenUSART:
  4374                           	opt stack 0
  4375                           tblptru	equ	0xFF8
  4376                           tblptrh	equ	0xFF7
  4377                           tblptrl	equ	0xFF6
  4378                           tablat	equ	0xFF5
  4379                           postinc0	equ	0xFEE
  4380                           wreg	equ	0xFE8
  4381                           postdec1	equ	0xFE5
  4382                           fsr1l	equ	0xFE1
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function _Init_ADC *****************
  4386 ;; Defined at:
  4387 ;;		line 18 in file "utils.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;		None               void
  4394 ;; Registers used:
  4395 ;;		wreg, status,2
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;Total ram usage:        0 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; This function calls:
  4408 ;;		Nothing
  4409 ;; This function is called by:
  4410 ;;		_main
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text15
  4415  00D6A6                     __ptext15:
  4416                           	opt stack 0
  4417  00D6A6                     _Init_ADC:
  4418                           	opt stack 30
  4419                           
  4420                           ;utils.c: 20: ADCON0 = 0x01;
  4421                           
  4422                           ;incstack = 0
  4423  00D6A6  0E01               	movlw	1
  4424  00D6A8  6EC2               	movwf	4034,c	;volatile
  4425                           
  4426                           ;utils.c: 21: ADCON1 = 0x0E;
  4427  00D6AA  0E0E               	movlw	14
  4428  00D6AC  6EC1               	movwf	4033,c	;volatile
  4429                           
  4430                           ;utils.c: 22: ADCON2 = 0xA9;
  4431  00D6AE  0EA9               	movlw	169
  4432  00D6B0  6EC0               	movwf	4032,c	;volatile
  4433  00D6B2  0012               	return		;funcret
  4434  00D6B4                     __end_of_Init_ADC:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postdec1	equ	0xFE5
  4443                           fsr1l	equ	0xFE1
  4444                           status	equ	0xFD8
  4445                           
  4446 ;; *************** function _Day_Mode *****************
  4447 ;; Defined at:
  4448 ;;		line 176 in file "lab8.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;		None
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;		None
  4453 ;; Return value:  Size  Location     Type
  4454 ;;		None               void
  4455 ;; Registers used:
  4456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;Total ram usage:        0 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:   10
  4469 ;; This function calls:
  4470 ;;		_PED_Control
  4471 ;;		_Set_EW
  4472 ;;		_Set_EW_LT
  4473 ;;		_Set_NS
  4474 ;;		_Set_NS_LT
  4475 ;;		_Wait_N_Seconds
  4476 ;; This function is called by:
  4477 ;;		_main
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text16
  4482  00E21C                     __ptext16:
  4483                           	opt stack 0
  4484  00E21C                     _Day_Mode:
  4485                           	opt stack 20
  4486                           
  4487                           ;lab8.c: 179: Set_NS_LT(1);
  4488                           
  4489                           ;incstack = 0
  4490  00E21C  0E01               	movlw	1
  4491  00E21E  EC6B  F06D         	call	_Set_NS_LT
  4492                           
  4493                           ;lab8.c: 180: Set_EW(1);
  4494  00E222  0E01               	movlw	1
  4495  00E224  EC05  F06D         	call	_Set_EW
  4496                           
  4497                           ;lab8.c: 181: Set_EW_LT(1);
  4498  00E228  0E01               	movlw	1
  4499  00E22A  EC27  F06D         	call	_Set_EW_LT
  4500                           
  4501                           ;lab8.c: 182: Set_NS(2);
  4502  00E22E  0E02               	movlw	2
  4503  00E230  EC49  F06D         	call	_Set_NS
  4504                           
  4505                           ;lab8.c: 184: if(PORTAbits.RA2 == 1)
  4506  00E234  A480               	btfss	3968,2,c	;volatile
  4507  00E236  D005               	goto	l110
  4508                           
  4509                           ;lab8.c: 185: {
  4510                           ;lab8.c: 186: PED_Control(0,7);
  4511  00E238  0E07               	movlw	7
  4512  00E23A  6E3F               	movwf	PED_Control@num_sec,c
  4513  00E23C  0E00               	movlw	0
  4514  00E23E  ECD9  F06D         	call	_PED_Control
  4515  00E242                     l110:
  4516                           
  4517                           ;lab8.c: 187: }
  4518                           ;lab8.c: 188: Wait_N_Seconds(5);
  4519  00E242  0E05               	movlw	5
  4520  00E244  EC56  F06C         	call	_Wait_N_Seconds
  4521                           
  4522                           ;lab8.c: 189: Set_NS(3);
  4523  00E248  0E03               	movlw	3
  4524  00E24A  EC49  F06D         	call	_Set_NS
  4525                           
  4526                           ;lab8.c: 190: Wait_N_Seconds(3);
  4527  00E24E  0E03               	movlw	3
  4528  00E250  EC56  F06C         	call	_Wait_N_Seconds
  4529                           
  4530                           ;lab8.c: 191: Set_NS(1);
  4531  00E254  0E01               	movlw	1
  4532  00E256  EC49  F06D         	call	_Set_NS
  4533                           
  4534                           ;lab8.c: 193: if(PORTAbits.RA3 == 1)
  4535  00E25A  A680               	btfss	3968,3,c	;volatile
  4536  00E25C  D010               	goto	l3922
  4537                           
  4538                           ;lab8.c: 194: {
  4539                           ;lab8.c: 195: Set_EW_LT(2);
  4540  00E25E  0E02               	movlw	2
  4541  00E260  EC27  F06D         	call	_Set_EW_LT
  4542                           
  4543                           ;lab8.c: 196: Wait_N_Seconds(8);
  4544  00E264  0E08               	movlw	8
  4545  00E266  EC56  F06C         	call	_Wait_N_Seconds
  4546                           
  4547                           ;lab8.c: 197: Set_EW_LT(3);
  4548  00E26A  0E03               	movlw	3
  4549  00E26C  EC27  F06D         	call	_Set_EW_LT
  4550                           
  4551                           ;lab8.c: 198: Wait_N_Seconds(3);
  4552  00E270  0E03               	movlw	3
  4553  00E272  EC56  F06C         	call	_Wait_N_Seconds
  4554                           
  4555                           ;lab8.c: 199: Set_EW_LT(1);
  4556  00E276  0E01               	movlw	1
  4557  00E278  EC27  F06D         	call	_Set_EW_LT
  4558  00E27C  D000               	goto	l3922
  4559  00E27E                     l3922:
  4560                           
  4561                           ;lab8.c: 200: }
  4562                           ;lab8.c: 201: Set_EW(2);
  4563  00E27E  0E02               	movlw	2
  4564  00E280  EC05  F06D         	call	_Set_EW
  4565                           
  4566                           ;lab8.c: 202: if(PORTAbits.RA1 == 1)
  4567  00E284  A280               	btfss	3968,1,c	;volatile
  4568  00E286  D005               	goto	l112
  4569                           
  4570                           ;lab8.c: 203: {
  4571                           ;lab8.c: 204: PED_Control(2,5);
  4572  00E288  0E05               	movlw	5
  4573  00E28A  6E3F               	movwf	PED_Control@num_sec,c
  4574  00E28C  0E02               	movlw	2
  4575  00E28E  ECD9  F06D         	call	_PED_Control
  4576  00E292                     l112:
  4577                           
  4578                           ;lab8.c: 205: }
  4579                           ;lab8.c: 206: Wait_N_Seconds(6);
  4580  00E292  0E06               	movlw	6
  4581  00E294  EC56  F06C         	call	_Wait_N_Seconds
  4582                           
  4583                           ;lab8.c: 207: Set_EW(3);
  4584  00E298  0E03               	movlw	3
  4585  00E29A  EC05  F06D         	call	_Set_EW
  4586                           
  4587                           ;lab8.c: 208: Wait_N_Seconds(3);
  4588  00E29E  0E03               	movlw	3
  4589  00E2A0  EC56  F06C         	call	_Wait_N_Seconds
  4590                           
  4591                           ;lab8.c: 209: Set_EW(1);
  4592  00E2A4  0E01               	movlw	1
  4593  00E2A6  EC05  F06D         	call	_Set_EW
  4594                           
  4595                           ;lab8.c: 211: if(PORTAbits.RA4 == 1)
  4596  00E2AA  A880               	btfss	3968,4,c	;volatile
  4597  00E2AC  D010               	goto	l114
  4598                           
  4599                           ;lab8.c: 212: {
  4600                           ;lab8.c: 213: Set_NS_LT(2);
  4601  00E2AE  0E02               	movlw	2
  4602  00E2B0  EC6B  F06D         	call	_Set_NS_LT
  4603                           
  4604                           ;lab8.c: 214: Wait_N_Seconds(5);
  4605  00E2B4  0E05               	movlw	5
  4606  00E2B6  EC56  F06C         	call	_Wait_N_Seconds
  4607                           
  4608                           ;lab8.c: 215: Set_NS_LT(3);
  4609  00E2BA  0E03               	movlw	3
  4610  00E2BC  EC6B  F06D         	call	_Set_NS_LT
  4611                           
  4612                           ;lab8.c: 216: Wait_N_Seconds(3);
  4613  00E2C0  0E03               	movlw	3
  4614  00E2C2  EC56  F06C         	call	_Wait_N_Seconds
  4615                           
  4616                           ;lab8.c: 217: Set_NS_LT(1);
  4617  00E2C6  0E01               	movlw	1
  4618  00E2C8  EC6B  F06D         	call	_Set_NS_LT
  4619  00E2CC  D000               	goto	l114
  4620  00E2CE                     l114:
  4621  00E2CE  0012               	return		;funcret
  4622  00E2D0                     __end_of_Day_Mode:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           postinc0	equ	0xFEE
  4629                           wreg	equ	0xFE8
  4630                           postdec1	equ	0xFE5
  4631                           fsr1l	equ	0xFE1
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function _Wait_N_Seconds *****************
  4635 ;; Defined at:
  4636 ;;		line 258 in file "lab8.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  seconds         1    wreg     unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  seconds         1   62[COMRAM] unsigned char 
  4641 ;;  I               1   63[COMRAM] unsigned char 
  4642 ;; Return value:  Size  Location     Type
  4643 ;;		None               void
  4644 ;; Registers used:
  4645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;Total ram usage:        2 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    9
  4658 ;; This function calls:
  4659 ;;		_Wait_One_Second
  4660 ;;		_update_LCD_count
  4661 ;; This function is called by:
  4662 ;;		_Day_Mode
  4663 ;;		_Night_Mode
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text17
  4668  00D8AC                     __ptext17:
  4669                           	opt stack 0
  4670  00D8AC                     _Wait_N_Seconds:
  4671                           	opt stack 20
  4672                           
  4673                           ;incstack = 0
  4674                           ;Wait_N_Seconds@seconds stored from wreg
  4675  00D8AC  6E3F               	movwf	Wait_N_Seconds@seconds,c
  4676                           
  4677                           ;lab8.c: 260: char I;
  4678                           ;lab8.c: 261: for (I = seconds; I> 0; I--)
  4679  00D8AE  C03F  F040         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4680  00D8B2                     l3694:
  4681  00D8B2  5040               	movf	Wait_N_Seconds@I,w,c
  4682  00D8B4  B4D8               	btfsc	status,2,c
  4683  00D8B6  D00B               	goto	l3704
  4684  00D8B8  D001               	goto	l3698
  4685  00D8BA  D009               	goto	l3704
  4686  00D8BC                     l3698:
  4687                           
  4688                           ;lab8.c: 262: {
  4689                           ;lab8.c: 264: Wait_One_Second();
  4690  00D8BC  ECA8  F06B         	call	_Wait_One_Second	;wreg free
  4691                           
  4692                           ;lab8.c: 265: update_LCD_count(direction, I);
  4693  00D8C0  C040  F03A         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4694  00D8C4  507E               	movf	_direction,w,c
  4695  00D8C6  ECB2  F076         	call	_update_LCD_count
  4696  00D8CA  0640               	decf	Wait_N_Seconds@I,f,c
  4697  00D8CC  D7F2               	goto	l3694
  4698  00D8CE                     l3704:
  4699                           
  4700                           ;lab8.c: 266: }
  4701                           ;lab8.c: 267: Wait_One_Second();
  4702  00D8CE  ECA8  F06B         	call	_Wait_One_Second	;wreg free
  4703                           
  4704                           ;lab8.c: 268: update_LCD_count(direction, 0);
  4705  00D8D2  0E00               	movlw	0
  4706  00D8D4  6E3A               	movwf	update_LCD_count@count,c
  4707  00D8D6  507E               	movf	_direction,w,c
  4708  00D8D8  ECB2  F076         	call	_update_LCD_count
  4709  00D8DC  0012               	return		;funcret
  4710  00D8DE                     __end_of_Wait_N_Seconds:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           postinc0	equ	0xFEE
  4717                           wreg	equ	0xFE8
  4718                           postdec1	equ	0xFE5
  4719                           fsr1l	equ	0xFE1
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function _update_LCD_count *****************
  4723 ;; Defined at:
  4724 ;;		line 223 in file "Main_Screen.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  direction       1    wreg     unsigned char 
  4727 ;;  count           1   57[COMRAM] unsigned char 
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;  direction       1   58[COMRAM] unsigned char 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;		None               void
  4732 ;; Registers used:
  4733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4739 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;Total ram usage:        2 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    7
  4746 ;; This function calls:
  4747 ;;		___awdiv
  4748 ;;		___awmod
  4749 ;;		_drawtext
  4750 ;; This function is called by:
  4751 ;;		_Wait_N_Seconds
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text18
  4756  00ED64                     __ptext18:
  4757                           	opt stack 0
  4758  00ED64                     _update_LCD_count:
  4759                           	opt stack 21
  4760                           
  4761                           ;incstack = 0
  4762                           ;update_LCD_count@direction stored from wreg
  4763  00ED64  6E3B               	movwf	update_LCD_count@direction,c
  4764                           
  4765                           ;Main_Screen.c: 225: switch (direction)
  4766  00ED66  D0AE               	goto	l3488
  4767  00ED68                     l3470:
  4768                           
  4769                           ;Main_Screen.c: 228: NS_Count[0] = count/10 + '0';
  4770  00ED68  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4771  00ED6C  6A02               	clrf	___awdiv@dividend+1,c
  4772  00ED6E  0E00               	movlw	0
  4773  00ED70  6E04               	movwf	___awdiv@divisor+1,c
  4774  00ED72  0E0A               	movlw	10
  4775  00ED74  6E03               	movwf	___awdiv@divisor,c
  4776  00ED76  EC76  F070         	call	___awdiv	;wreg free
  4777  00ED7A  5001               	movf	?___awdiv,w,c
  4778  00ED7C  0F30               	addlw	48
  4779  00ED7E  6E55               	movwf	_NS_Count,c
  4780                           
  4781                           ;Main_Screen.c: 229: NS_Count[1] = count%10 + '0';
  4782  00ED80  C03A  F027         	movff	update_LCD_count@count,___awmod@dividend
  4783  00ED84  6A28               	clrf	___awmod@dividend+1,c
  4784  00ED86  0E00               	movlw	0
  4785  00ED88  6E2A               	movwf	___awmod@divisor+1,c
  4786  00ED8A  0E0A               	movlw	10
  4787  00ED8C  6E29               	movwf	___awmod@divisor,c
  4788  00ED8E  EC62  F06F         	call	___awmod	;wreg free
  4789  00ED92  5027               	movf	?___awmod,w,c
  4790  00ED94  0F30               	addlw	48
  4791  00ED96  6E56               	movwf	_NS_Count+1,c
  4792                           
  4793                           ;Main_Screen.c: 230: drawtext(100, 30 + 10, NS_Count, 0xFFE0, 0x0000, 2);
  4794  00ED98  0E28               	movlw	40
  4795  00ED9A  6E29               	movwf	drawtext@y,c
  4796  00ED9C  0E55               	movlw	low _NS_Count
  4797  00ED9E  6E2A               	movwf	drawtext@_text,c
  4798  00EDA0  0E00               	movlw	high _NS_Count
  4799  00EDA2  6E2B               	movwf	drawtext@_text+1,c
  4800  00EDA4  0EFF               	movlw	255
  4801  00EDA6  6E2D               	movwf	drawtext@color+1,c
  4802  00EDA8  0EE0               	movlw	224
  4803  00EDAA  6E2C               	movwf	drawtext@color,c
  4804  00EDAC  0E00               	movlw	0
  4805  00EDAE  6E2F               	movwf	drawtext@bg+1,c
  4806  00EDB0  0E00               	movlw	0
  4807  00EDB2  6E2E               	movwf	drawtext@bg,c
  4808  00EDB4  0E02               	movlw	2
  4809  00EDB6  6E30               	movwf	drawtext@size,c
  4810  00EDB8  0E64               	movlw	100
  4811  00EDBA  EC9B  F072         	call	_drawtext
  4812                           
  4813                           ;Main_Screen.c: 231: break;
  4814  00EDBE  D090               	goto	l224
  4815  00EDC0                     l3474:
  4816                           
  4817                           ;Main_Screen.c: 234: NSLT_Count[0] = count/10 + '0';
  4818  00EDC0  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4819  00EDC4  6A02               	clrf	___awdiv@dividend+1,c
  4820  00EDC6  0E00               	movlw	0
  4821  00EDC8  6E04               	movwf	___awdiv@divisor+1,c
  4822  00EDCA  0E0A               	movlw	10
  4823  00EDCC  6E03               	movwf	___awdiv@divisor,c
  4824  00EDCE  EC76  F070         	call	___awdiv	;wreg free
  4825  00EDD2  5001               	movf	?___awdiv,w,c
  4826  00EDD4  0F30               	addlw	48
  4827  00EDD6  6E52               	movwf	_NSLT_Count,c
  4828                           
  4829                           ;Main_Screen.c: 235: NSLT_Count[1] = count%10 + '0';
  4830  00EDD8  C03A  F027         	movff	update_LCD_count@count,___awmod@dividend
  4831  00EDDC  6A28               	clrf	___awmod@dividend+1,c
  4832  00EDDE  0E00               	movlw	0
  4833  00EDE0  6E2A               	movwf	___awmod@divisor+1,c
  4834  00EDE2  0E0A               	movlw	10
  4835  00EDE4  6E29               	movwf	___awmod@divisor,c
  4836  00EDE6  EC62  F06F         	call	___awmod	;wreg free
  4837  00EDEA  5027               	movf	?___awmod,w,c
  4838  00EDEC  0F30               	addlw	48
  4839  00EDEE  6E53               	movwf	_NSLT_Count+1,c
  4840                           
  4841                           ;Main_Screen.c: 236: drawtext(100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  4842  00EDF0  0E46               	movlw	70
  4843  00EDF2  6E29               	movwf	drawtext@y,c
  4844  00EDF4  0E52               	movlw	low _NSLT_Count
  4845  00EDF6  6E2A               	movwf	drawtext@_text,c
  4846  00EDF8  0E00               	movlw	high _NSLT_Count
  4847  00EDFA  6E2B               	movwf	drawtext@_text+1,c
  4848  00EDFC  0EF8               	movlw	248
  4849  00EDFE  6E2D               	movwf	drawtext@color+1,c
  4850  00EE00  0E1F               	movlw	31
  4851  00EE02  6E2C               	movwf	drawtext@color,c
  4852  00EE04  0E00               	movlw	0
  4853  00EE06  6E2F               	movwf	drawtext@bg+1,c
  4854  00EE08  0E00               	movlw	0
  4855  00EE0A  6E2E               	movwf	drawtext@bg,c
  4856  00EE0C  0E02               	movlw	2
  4857  00EE0E  6E30               	movwf	drawtext@size,c
  4858  00EE10  0E64               	movlw	100
  4859  00EE12  EC9B  F072         	call	_drawtext
  4860                           
  4861                           ;Main_Screen.c: 237: break;
  4862  00EE16  D064               	goto	l224
  4863  00EE18                     l3478:
  4864                           
  4865                           ;Main_Screen.c: 240: EW_Count[0] = count/10 + '0';
  4866  00EE18  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4867  00EE1C  6A02               	clrf	___awdiv@dividend+1,c
  4868  00EE1E  0E00               	movlw	0
  4869  00EE20  6E04               	movwf	___awdiv@divisor+1,c
  4870  00EE22  0E0A               	movlw	10
  4871  00EE24  6E03               	movwf	___awdiv@divisor,c
  4872  00EE26  EC76  F070         	call	___awdiv	;wreg free
  4873  00EE2A  5001               	movf	?___awdiv,w,c
  4874  00EE2C  0F30               	addlw	48
  4875  00EE2E  6E4C               	movwf	_EW_Count,c
  4876                           
  4877                           ;Main_Screen.c: 241: EW_Count[1] = count%10 + '0';
  4878  00EE30  C03A  F027         	movff	update_LCD_count@count,___awmod@dividend
  4879  00EE34  6A28               	clrf	___awmod@dividend+1,c
  4880  00EE36  0E00               	movlw	0
  4881  00EE38  6E2A               	movwf	___awmod@divisor+1,c
  4882  00EE3A  0E0A               	movlw	10
  4883  00EE3C  6E29               	movwf	___awmod@divisor,c
  4884  00EE3E  EC62  F06F         	call	___awmod	;wreg free
  4885  00EE42  5027               	movf	?___awmod,w,c
  4886  00EE44  0F30               	addlw	48
  4887  00EE46  6E4D               	movwf	_EW_Count+1,c
  4888                           
  4889                           ;Main_Screen.c: 242: drawtext(100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4890  00EE48  0E64               	movlw	100
  4891  00EE4A  6E29               	movwf	drawtext@y,c
  4892  00EE4C  0E4C               	movlw	low _EW_Count
  4893  00EE4E  6E2A               	movwf	drawtext@_text,c
  4894  00EE50  0E00               	movlw	high _EW_Count
  4895  00EE52  6E2B               	movwf	drawtext@_text+1,c
  4896  00EE54  0E07               	movlw	7
  4897  00EE56  6E2D               	movwf	drawtext@color+1,c
  4898  00EE58  682C               	setf	drawtext@color,c
  4899  00EE5A  0E00               	movlw	0
  4900  00EE5C  6E2F               	movwf	drawtext@bg+1,c
  4901  00EE5E  0E00               	movlw	0
  4902  00EE60  6E2E               	movwf	drawtext@bg,c
  4903  00EE62  0E02               	movlw	2
  4904  00EE64  6E30               	movwf	drawtext@size,c
  4905  00EE66  0E64               	movlw	100
  4906  00EE68  EC9B  F072         	call	_drawtext
  4907                           
  4908                           ;Main_Screen.c: 243: break;
  4909  00EE6C  D039               	goto	l224
  4910  00EE6E                     l3482:
  4911                           
  4912                           ;Main_Screen.c: 246: EWLT_Count[0] = count/10 + '0';
  4913  00EE6E  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4914  00EE72  6A02               	clrf	___awdiv@dividend+1,c
  4915  00EE74  0E00               	movlw	0
  4916  00EE76  6E04               	movwf	___awdiv@divisor+1,c
  4917  00EE78  0E0A               	movlw	10
  4918  00EE7A  6E03               	movwf	___awdiv@divisor,c
  4919  00EE7C  EC76  F070         	call	___awdiv	;wreg free
  4920  00EE80  5001               	movf	?___awdiv,w,c
  4921  00EE82  0F30               	addlw	48
  4922  00EE84  6E49               	movwf	_EWLT_Count,c
  4923                           
  4924                           ;Main_Screen.c: 247: EWLT_Count[1] = count%10 + '0';
  4925  00EE86  C03A  F027         	movff	update_LCD_count@count,___awmod@dividend
  4926  00EE8A  6A28               	clrf	___awmod@dividend+1,c
  4927  00EE8C  0E00               	movlw	0
  4928  00EE8E  6E2A               	movwf	___awmod@divisor+1,c
  4929  00EE90  0E0A               	movlw	10
  4930  00EE92  6E29               	movwf	___awmod@divisor,c
  4931  00EE94  EC62  F06F         	call	___awmod	;wreg free
  4932  00EE98  5027               	movf	?___awmod,w,c
  4933  00EE9A  0F30               	addlw	48
  4934  00EE9C  6E4A               	movwf	_EWLT_Count+1,c
  4935                           
  4936                           ;Main_Screen.c: 248: drawtext(100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  4937  00EE9E  0E82               	movlw	130
  4938  00EEA0  6E29               	movwf	drawtext@y,c
  4939  00EEA2  0E49               	movlw	low _EWLT_Count
  4940  00EEA4  6E2A               	movwf	drawtext@_text,c
  4941  00EEA6  0E00               	movlw	high _EWLT_Count
  4942  00EEA8  6E2B               	movwf	drawtext@_text+1,c
  4943  00EEAA  0EFF               	movlw	255
  4944  00EEAC  6E2D               	movwf	drawtext@color+1,c
  4945  00EEAE  682C               	setf	drawtext@color,c
  4946  00EEB0  0E00               	movlw	0
  4947  00EEB2  6E2F               	movwf	drawtext@bg+1,c
  4948  00EEB4  0E00               	movlw	0
  4949  00EEB6  6E2E               	movwf	drawtext@bg,c
  4950  00EEB8  0E02               	movlw	2
  4951  00EEBA  6E30               	movwf	drawtext@size,c
  4952  00EEBC  0E64               	movlw	100
  4953  00EEBE  EC9B  F072         	call	_drawtext
  4954                           
  4955                           ;Main_Screen.c: 250: }
  4956                           
  4957                           ;Main_Screen.c: 249: break;
  4958  00EEC2  D00E               	goto	l224
  4959  00EEC4                     l3488:
  4960  00EEC4  503B               	movf	update_LCD_count@direction,w,c
  4961                           
  4962                           ; Switch size 1, requested type "space"
  4963                           ; Number of cases is 4, Range of values is 0 to 3
  4964                           ; switch strategies available:
  4965                           ; Name         Instructions Cycles
  4966                           ; simple_byte           13     7 (average)
  4967                           ;	Chosen strategy is simple_byte
  4968  00EEC6  0A00               	xorlw	0	; case 0
  4969  00EEC8  B4D8               	btfsc	status,2,c
  4970  00EECA  D74E               	goto	l3470
  4971  00EECC  0A01               	xorlw	1	; case 1
  4972  00EECE  B4D8               	btfsc	status,2,c
  4973  00EED0  D777               	goto	l3474
  4974  00EED2  0A03               	xorlw	3	; case 2
  4975  00EED4  B4D8               	btfsc	status,2,c
  4976  00EED6  D7A0               	goto	l3478
  4977  00EED8  0A01               	xorlw	1	; case 3
  4978  00EEDA  B4D8               	btfsc	status,2,c
  4979  00EEDC  D7C8               	goto	l3482
  4980  00EEDE  D000               	goto	l224
  4981  00EEE0                     l224:
  4982  00EEE0  0012               	return		;funcret
  4983  00EEE2                     __end_of_update_LCD_count:
  4984                           	opt stack 0
  4985                           tblptru	equ	0xFF8
  4986                           tblptrh	equ	0xFF7
  4987                           tblptrl	equ	0xFF6
  4988                           tablat	equ	0xFF5
  4989                           postinc0	equ	0xFEE
  4990                           wreg	equ	0xFE8
  4991                           postdec1	equ	0xFE5
  4992                           fsr1l	equ	0xFE1
  4993                           status	equ	0xFD8
  4994                           
  4995 ;; *************** function _Wait_One_Second *****************
  4996 ;; Defined at:
  4997 ;;		line 89 in file "utils.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;		None               void
  5004 ;; Registers used:
  5005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;Total ram usage:        0 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    8
  5018 ;; This function calls:
  5019 ;;		_Draw_Star
  5020 ;;		_Erase_Star
  5021 ;;		_Wait_Half_Second
  5022 ;;		_update_LCD_misc
  5023 ;; This function is called by:
  5024 ;;		_Wait_N_Seconds
  5025 ;;		_Do_Beep
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text19
  5030  00D750                     __ptext19:
  5031                           	opt stack 0
  5032  00D750                     _Wait_One_Second:
  5033                           	opt stack 20
  5034                           
  5035                           ;utils.c: 91: PORTDbits.RD7 = 1;
  5036                           
  5037                           ;incstack = 0
  5038  00D750  8E83               	bsf	3971,7,c	;volatile
  5039                           
  5040                           ;utils.c: 92: Draw_Star();
  5041  00D752  EC6F  F06C         	call	_Draw_Star	;wreg free
  5042                           
  5043                           ;utils.c: 93: Wait_Half_Second();
  5044  00D756  EC9B  F06B         	call	_Wait_Half_Second	;wreg free
  5045                           
  5046                           ;utils.c: 94: PORTDbits.RD7 = 0;
  5047  00D75A  9E83               	bcf	3971,7,c	;volatile
  5048                           
  5049                           ;utils.c: 95: Erase_Star();
  5050  00D75C  EC8C  F06C         	call	_Erase_Star	;wreg free
  5051                           
  5052                           ;utils.c: 96: Wait_Half_Second();
  5053  00D760  EC9B  F06B         	call	_Wait_Half_Second	;wreg free
  5054                           
  5055                           ;utils.c: 97: update_LCD_misc();
  5056  00D764  EC48  F078         	call	_update_LCD_misc	;wreg free
  5057  00D768  0012               	return		;funcret
  5058  00D76A                     __end_of_Wait_One_Second:
  5059                           	opt stack 0
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1l	equ	0xFE1
  5068                           status	equ	0xFD8
  5069                           
  5070 ;; *************** function _Set_NS_LT *****************
  5071 ;; Defined at:
  5072 ;;		line 98 in file "lab8.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  color           1    wreg     unsigned char 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  color           1   53[COMRAM] unsigned char 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;		None               void
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;Total ram usage:        1 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    7
  5093 ;; This function calls:
  5094 ;;		_update_LCD_color
  5095 ;; This function is called by:
  5096 ;;		_Day_Mode
  5097 ;;		_Night_Mode
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text20
  5102  00DAD6                     __ptext20:
  5103                           	opt stack 0
  5104  00DAD6                     _Set_NS_LT:
  5105                           	opt stack 22
  5106                           
  5107                           ;incstack = 0
  5108                           ;Set_NS_LT@color stored from wreg
  5109  00DAD6  6E36               	movwf	Set_NS_LT@color,c
  5110                           
  5111                           ;lab8.c: 101: direction = 1;
  5112  00DAD8  0E01               	movlw	1
  5113  00DADA  6E7E               	movwf	_direction,c
  5114                           
  5115                           ;lab8.c: 102: update_LCD_color(direction, color);
  5116  00DADC  C036  F033         	movff	Set_NS_LT@color,update_LCD_color@color
  5117  00DAE0  507E               	movf	_direction,w,c
  5118  00DAE2  EC78  F079         	call	_update_LCD_color
  5119                           
  5120                           ;lab8.c: 103: switch (color)
  5121  00DAE6  D00A               	goto	l3658
  5122  00DAE8                     l79:
  5123  00DAE8  9083               	bcf	3971,0,c	;volatile
  5124  00DAEA  D001               	goto	L2
  5125  00DAEC                     l81:
  5126  00DAEC  8083               	bsf	3971,0,c	;volatile
  5127  00DAEE                     L2:
  5128  00DAEE  9283               	bcf	3971,1,c	;volatile
  5129  00DAF0  D013               	goto	l84
  5130  00DAF2                     l82:
  5131  00DAF2  9083               	bcf	3971,0,c	;volatile
  5132  00DAF4  D001               	goto	L3
  5133  00DAF6                     l83:
  5134  00DAF6  8083               	bsf	3971,0,c	;volatile
  5135  00DAF8                     L3:
  5136  00DAF8  8283               	bsf	3971,1,c	;volatile
  5137                           
  5138                           ;lab8.c: 109: }
  5139  00DAFA  D00E               	goto	l84
  5140  00DAFC                     l3658:
  5141  00DAFC  5036               	movf	Set_NS_LT@color,w,c
  5142                           
  5143                           ; Switch size 1, requested type "space"
  5144                           ; Number of cases is 4, Range of values is 0 to 3
  5145                           ; switch strategies available:
  5146                           ; Name         Instructions Cycles
  5147                           ; simple_byte           13     7 (average)
  5148                           ;	Chosen strategy is simple_byte
  5149  00DAFE  0A00               	xorlw	0	; case 0
  5150  00DB00  B4D8               	btfsc	status,2,c
  5151  00DB02  D7F2               	goto	l79
  5152  00DB04  0A01               	xorlw	1	; case 1
  5153  00DB06  B4D8               	btfsc	status,2,c
  5154  00DB08  D7F1               	goto	l81
  5155  00DB0A  0A03               	xorlw	3	; case 2
  5156  00DB0C  B4D8               	btfsc	status,2,c
  5157  00DB0E  D7F1               	goto	l82
  5158  00DB10  0A01               	xorlw	1	; case 3
  5159  00DB12  B4D8               	btfsc	status,2,c
  5160  00DB14  D7F0               	goto	l83
  5161  00DB16  D000               	goto	l84
  5162  00DB18                     l84:
  5163  00DB18  0012               	return		;funcret
  5164  00DB1A                     __end_of_Set_NS_LT:
  5165                           	opt stack 0
  5166                           tblptru	equ	0xFF8
  5167                           tblptrh	equ	0xFF7
  5168                           tblptrl	equ	0xFF6
  5169                           tablat	equ	0xFF5
  5170                           postinc0	equ	0xFEE
  5171                           wreg	equ	0xFE8
  5172                           postdec1	equ	0xFE5
  5173                           fsr1l	equ	0xFE1
  5174                           status	equ	0xFD8
  5175                           
  5176 ;; *************** function _Set_NS *****************
  5177 ;; Defined at:
  5178 ;;		line 84 in file "lab8.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;  color           1    wreg     unsigned char 
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;  color           1   53[COMRAM] unsigned char 
  5183 ;; Return value:  Size  Location     Type
  5184 ;;		None               void
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;Total ram usage:        1 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    7
  5199 ;; This function calls:
  5200 ;;		_update_LCD_color
  5201 ;; This function is called by:
  5202 ;;		_Day_Mode
  5203 ;;		_Night_Mode
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text21
  5208  00DA92                     __ptext21:
  5209                           	opt stack 0
  5210  00DA92                     _Set_NS:
  5211                           	opt stack 22
  5212                           
  5213                           ;incstack = 0
  5214                           ;Set_NS@color stored from wreg
  5215  00DA92  6E36               	movwf	Set_NS@color,c
  5216                           
  5217                           ;lab8.c: 87: direction = 0;
  5218  00DA94  0E00               	movlw	0
  5219  00DA96  6E7E               	movwf	_direction,c
  5220                           
  5221                           ;lab8.c: 88: update_LCD_color(direction, color);
  5222  00DA98  C036  F033         	movff	Set_NS@color,update_LCD_color@color
  5223  00DA9C  507E               	movf	_direction,w,c
  5224  00DA9E  EC78  F079         	call	_update_LCD_color
  5225                           
  5226                           ;lab8.c: 89: switch (color)
  5227  00DAA2  D00A               	goto	l3650
  5228  00DAA4                     l70:
  5229  00DAA4  9A80               	bcf	3968,5,c	;volatile
  5230  00DAA6  D001               	goto	L4
  5231  00DAA8                     l72:
  5232  00DAA8  8A80               	bsf	3968,5,c	;volatile
  5233  00DAAA                     L4:
  5234  00DAAA  9082               	bcf	3970,0,c	;volatile
  5235  00DAAC  D013               	goto	l75
  5236  00DAAE                     l73:
  5237  00DAAE  9A80               	bcf	3968,5,c	;volatile
  5238  00DAB0  D001               	goto	L5
  5239  00DAB2                     l74:
  5240  00DAB2  8A80               	bsf	3968,5,c	;volatile
  5241  00DAB4                     L5:
  5242  00DAB4  8082               	bsf	3970,0,c	;volatile
  5243                           
  5244                           ;lab8.c: 95: }
  5245  00DAB6  D00E               	goto	l75
  5246  00DAB8                     l3650:
  5247  00DAB8  5036               	movf	Set_NS@color,w,c
  5248                           
  5249                           ; Switch size 1, requested type "space"
  5250                           ; Number of cases is 4, Range of values is 0 to 3
  5251                           ; switch strategies available:
  5252                           ; Name         Instructions Cycles
  5253                           ; simple_byte           13     7 (average)
  5254                           ;	Chosen strategy is simple_byte
  5255  00DABA  0A00               	xorlw	0	; case 0
  5256  00DABC  B4D8               	btfsc	status,2,c
  5257  00DABE  D7F2               	goto	l70
  5258  00DAC0  0A01               	xorlw	1	; case 1
  5259  00DAC2  B4D8               	btfsc	status,2,c
  5260  00DAC4  D7F1               	goto	l72
  5261  00DAC6  0A03               	xorlw	3	; case 2
  5262  00DAC8  B4D8               	btfsc	status,2,c
  5263  00DACA  D7F1               	goto	l73
  5264  00DACC  0A01               	xorlw	1	; case 3
  5265  00DACE  B4D8               	btfsc	status,2,c
  5266  00DAD0  D7F0               	goto	l74
  5267  00DAD2  D000               	goto	l75
  5268  00DAD4                     l75:
  5269  00DAD4  0012               	return		;funcret
  5270  00DAD6                     __end_of_Set_NS:
  5271                           	opt stack 0
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           fsr1l	equ	0xFE1
  5280                           status	equ	0xFD8
  5281                           
  5282 ;; *************** function _Set_EW_LT *****************
  5283 ;; Defined at:
  5284 ;;		line 126 in file "lab8.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  color           1    wreg     unsigned char 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  color           1   53[COMRAM] unsigned char 
  5289 ;; Return value:  Size  Location     Type
  5290 ;;		None               void
  5291 ;; Registers used:
  5292 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;Total ram usage:        1 bytes
  5303 ;; Hardware stack levels used:    1
  5304 ;; Hardware stack levels required when called:    7
  5305 ;; This function calls:
  5306 ;;		_update_LCD_color
  5307 ;; This function is called by:
  5308 ;;		_Day_Mode
  5309 ;;		_Night_Mode
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	text22
  5314  00DA4E                     __ptext22:
  5315                           	opt stack 0
  5316  00DA4E                     _Set_EW_LT:
  5317                           	opt stack 22
  5318                           
  5319                           ;incstack = 0
  5320                           ;Set_EW_LT@color stored from wreg
  5321  00DA4E  6E36               	movwf	Set_EW_LT@color,c
  5322                           
  5323                           ;lab8.c: 129: direction = 3;
  5324  00DA50  0E03               	movlw	3
  5325  00DA52  6E7E               	movwf	_direction,c
  5326                           
  5327                           ;lab8.c: 130: update_LCD_color(direction, color);
  5328  00DA54  C036  F033         	movff	Set_EW_LT@color,update_LCD_color@color
  5329  00DA58  507E               	movf	_direction,w,c
  5330  00DA5A  EC78  F079         	call	_update_LCD_color
  5331                           
  5332                           ;lab8.c: 131: switch (color)
  5333  00DA5E  D00A               	goto	l3674
  5334  00DA60                     l97:
  5335  00DA60  9284               	bcf	3972,1,c	;volatile
  5336  00DA62  D001               	goto	L6
  5337  00DA64                     l99:
  5338  00DA64  8284               	bsf	3972,1,c	;volatile
  5339  00DA66                     L6:
  5340  00DA66  9484               	bcf	3972,2,c	;volatile
  5341  00DA68  D013               	goto	l102
  5342  00DA6A                     l100:
  5343  00DA6A  9284               	bcf	3972,1,c	;volatile
  5344  00DA6C  D001               	goto	L7
  5345  00DA6E                     l101:
  5346  00DA6E  8284               	bsf	3972,1,c	;volatile
  5347  00DA70                     L7:
  5348  00DA70  8484               	bsf	3972,2,c	;volatile
  5349                           
  5350                           ;lab8.c: 137: }
  5351  00DA72  D00E               	goto	l102
  5352  00DA74                     l3674:
  5353  00DA74  5036               	movf	Set_EW_LT@color,w,c
  5354                           
  5355                           ; Switch size 1, requested type "space"
  5356                           ; Number of cases is 4, Range of values is 0 to 3
  5357                           ; switch strategies available:
  5358                           ; Name         Instructions Cycles
  5359                           ; simple_byte           13     7 (average)
  5360                           ;	Chosen strategy is simple_byte
  5361  00DA76  0A00               	xorlw	0	; case 0
  5362  00DA78  B4D8               	btfsc	status,2,c
  5363  00DA7A  D7F2               	goto	l97
  5364  00DA7C  0A01               	xorlw	1	; case 1
  5365  00DA7E  B4D8               	btfsc	status,2,c
  5366  00DA80  D7F1               	goto	l99
  5367  00DA82  0A03               	xorlw	3	; case 2
  5368  00DA84  B4D8               	btfsc	status,2,c
  5369  00DA86  D7F1               	goto	l100
  5370  00DA88  0A01               	xorlw	1	; case 3
  5371  00DA8A  B4D8               	btfsc	status,2,c
  5372  00DA8C  D7F0               	goto	l101
  5373  00DA8E  D000               	goto	l102
  5374  00DA90                     l102:
  5375  00DA90  0012               	return		;funcret
  5376  00DA92                     __end_of_Set_EW_LT:
  5377                           	opt stack 0
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           postdec1	equ	0xFE5
  5385                           fsr1l	equ	0xFE1
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function _Set_EW *****************
  5389 ;; Defined at:
  5390 ;;		line 112 in file "lab8.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  color           1    wreg     unsigned char 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;  color           1   53[COMRAM] unsigned char 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;		None               void
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;Total ram usage:        1 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    7
  5411 ;; This function calls:
  5412 ;;		_update_LCD_color
  5413 ;; This function is called by:
  5414 ;;		_Day_Mode
  5415 ;;		_Night_Mode
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text23
  5420  00DA0A                     __ptext23:
  5421                           	opt stack 0
  5422  00DA0A                     _Set_EW:
  5423                           	opt stack 22
  5424                           
  5425                           ;incstack = 0
  5426                           ;Set_EW@color stored from wreg
  5427  00DA0A  6E36               	movwf	Set_EW@color,c
  5428                           
  5429                           ;lab8.c: 115: direction = 2;
  5430  00DA0C  0E02               	movlw	2
  5431  00DA0E  6E7E               	movwf	_direction,c
  5432                           
  5433                           ;lab8.c: 116: update_LCD_color(direction, color);
  5434  00DA10  C036  F033         	movff	Set_EW@color,update_LCD_color@color
  5435  00DA14  507E               	movf	_direction,w,c
  5436  00DA16  EC78  F079         	call	_update_LCD_color
  5437                           
  5438                           ;lab8.c: 117: switch (color)
  5439  00DA1A  D00A               	goto	l3666
  5440  00DA1C                     l88:
  5441  00DA1C  9482               	bcf	3970,2,c	;volatile
  5442  00DA1E  D001               	goto	L8
  5443  00DA20                     l90:
  5444  00DA20  8482               	bsf	3970,2,c	;volatile
  5445  00DA22                     L8:
  5446  00DA22  9882               	bcf	3970,4,c	;volatile
  5447  00DA24  D013               	goto	l93
  5448  00DA26                     l91:
  5449  00DA26  9482               	bcf	3970,2,c	;volatile
  5450  00DA28  D001               	goto	L9
  5451  00DA2A                     l92:
  5452  00DA2A  8482               	bsf	3970,2,c	;volatile
  5453  00DA2C                     L9:
  5454  00DA2C  8882               	bsf	3970,4,c	;volatile
  5455                           
  5456                           ;lab8.c: 123: }
  5457  00DA2E  D00E               	goto	l93
  5458  00DA30                     l3666:
  5459  00DA30  5036               	movf	Set_EW@color,w,c
  5460                           
  5461                           ; Switch size 1, requested type "space"
  5462                           ; Number of cases is 4, Range of values is 0 to 3
  5463                           ; switch strategies available:
  5464                           ; Name         Instructions Cycles
  5465                           ; simple_byte           13     7 (average)
  5466                           ;	Chosen strategy is simple_byte
  5467  00DA32  0A00               	xorlw	0	; case 0
  5468  00DA34  B4D8               	btfsc	status,2,c
  5469  00DA36  D7F2               	goto	l88
  5470  00DA38  0A01               	xorlw	1	; case 1
  5471  00DA3A  B4D8               	btfsc	status,2,c
  5472  00DA3C  D7F1               	goto	l90
  5473  00DA3E  0A03               	xorlw	3	; case 2
  5474  00DA40  B4D8               	btfsc	status,2,c
  5475  00DA42  D7F1               	goto	l91
  5476  00DA44  0A01               	xorlw	1	; case 3
  5477  00DA46  B4D8               	btfsc	status,2,c
  5478  00DA48  D7F0               	goto	l92
  5479  00DA4A  D000               	goto	l93
  5480  00DA4C                     l93:
  5481  00DA4C  0012               	return		;funcret
  5482  00DA4E                     __end_of_Set_EW:
  5483                           	opt stack 0
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           postinc0	equ	0xFEE
  5489                           wreg	equ	0xFE8
  5490                           postdec1	equ	0xFE5
  5491                           fsr1l	equ	0xFE1
  5492                           status	equ	0xFD8
  5493                           
  5494 ;; *************** function _update_LCD_color *****************
  5495 ;; Defined at:
  5496 ;;		line 156 in file "Main_Screen.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  direction       1    wreg     unsigned char 
  5499 ;;  color           1   50[COMRAM] unsigned char 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  direction       1   51[COMRAM] unsigned char 
  5502 ;;  Circle_Y        1   52[COMRAM] unsigned char 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;		None               void
  5505 ;; Registers used:
  5506 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5512 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;Total ram usage:        3 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    6
  5519 ;; This function calls:
  5520 ;;		_drawCircle
  5521 ;;		_fillCircle
  5522 ;; This function is called by:
  5523 ;;		_Set_NS
  5524 ;;		_Set_NS_LT
  5525 ;;		_Set_EW
  5526 ;;		_Set_EW_LT
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           	psect	text24
  5531  00F2F0                     __ptext24:
  5532                           	opt stack 0
  5533  00F2F0                     _update_LCD_color:
  5534                           	opt stack 22
  5535                           
  5536                           ;incstack = 0
  5537                           ;update_LCD_color@direction stored from wreg
  5538  00F2F0  6E34               	movwf	update_LCD_color@direction,c
  5539                           
  5540                           ;Main_Screen.c: 158: char Circle_Y;
  5541                           ;Main_Screen.c: 159: Circle_Y = 30 + 16 + direction * 30;
  5542  00F2F2  5034               	movf	update_LCD_color@direction,w,c
  5543  00F2F4  0D1E               	mullw	30
  5544  00F2F6  50F3               	movf	prodl,w,c
  5545  00F2F8  0F2E               	addlw	46
  5546  00F2FA  6E35               	movwf	update_LCD_color@Circle_Y,c
  5547                           
  5548                           ;Main_Screen.c: 161: if (color == 0)
  5549  00F2FC  5033               	movf	update_LCD_color@color,w,c
  5550  00F2FE  A4D8               	btfss	status,2,c
  5551  00F300  D067               	goto	l3416
  5552                           
  5553                           ;Main_Screen.c: 162: {
  5554                           ;Main_Screen.c: 163: fillCircle(40, Circle_Y, 7, 0x0000);
  5555  00F302  0E00               	movlw	0
  5556  00F304  6E2C               	movwf	fillCircle@x0+1,c
  5557  00F306  0E28               	movlw	40
  5558  00F308  6E2B               	movwf	fillCircle@x0,c
  5559  00F30A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5560  00F30E  6A2E               	clrf	fillCircle@y0+1,c
  5561  00F310  0E00               	movlw	0
  5562  00F312  6E30               	movwf	fillCircle@r+1,c
  5563  00F314  0E07               	movlw	7
  5564  00F316  6E2F               	movwf	fillCircle@r,c
  5565  00F318  0E00               	movlw	0
  5566  00F31A  6E32               	movwf	fillCircle@color+1,c
  5567  00F31C  0E00               	movlw	0
  5568  00F31E  6E31               	movwf	fillCircle@color,c
  5569  00F320  EC02  F06E         	call	_fillCircle	;wreg free
  5570                           
  5571                           ;Main_Screen.c: 164: fillCircle(60, Circle_Y, 7, 0x0000);
  5572  00F324  0E00               	movlw	0
  5573  00F326  6E2C               	movwf	fillCircle@x0+1,c
  5574  00F328  0E3C               	movlw	60
  5575  00F32A  6E2B               	movwf	fillCircle@x0,c
  5576  00F32C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5577  00F330  6A2E               	clrf	fillCircle@y0+1,c
  5578  00F332  0E00               	movlw	0
  5579  00F334  6E30               	movwf	fillCircle@r+1,c
  5580  00F336  0E07               	movlw	7
  5581  00F338  6E2F               	movwf	fillCircle@r,c
  5582  00F33A  0E00               	movlw	0
  5583  00F33C  6E32               	movwf	fillCircle@color+1,c
  5584  00F33E  0E00               	movlw	0
  5585  00F340  6E31               	movwf	fillCircle@color,c
  5586  00F342  EC02  F06E         	call	_fillCircle	;wreg free
  5587                           
  5588                           ;Main_Screen.c: 165: fillCircle(80, Circle_Y, 7, 0x0000);
  5589  00F346  0E00               	movlw	0
  5590  00F348  6E2C               	movwf	fillCircle@x0+1,c
  5591  00F34A  0E50               	movlw	80
  5592  00F34C  6E2B               	movwf	fillCircle@x0,c
  5593  00F34E  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5594  00F352  6A2E               	clrf	fillCircle@y0+1,c
  5595  00F354  0E00               	movlw	0
  5596  00F356  6E30               	movwf	fillCircle@r+1,c
  5597  00F358  0E07               	movlw	7
  5598  00F35A  6E2F               	movwf	fillCircle@r,c
  5599  00F35C  0E00               	movlw	0
  5600  00F35E  6E32               	movwf	fillCircle@color+1,c
  5601  00F360  0E00               	movlw	0
  5602  00F362  6E31               	movwf	fillCircle@color,c
  5603  00F364  EC02  F06E         	call	_fillCircle	;wreg free
  5604                           
  5605                           ;Main_Screen.c: 166: drawCircle(40, Circle_Y, 7, 0xF800);
  5606  00F368  0E00               	movlw	0
  5607  00F36A  6E0D               	movwf	drawCircle@x0+1,c
  5608  00F36C  0E28               	movlw	40
  5609  00F36E  6E0C               	movwf	drawCircle@x0,c
  5610  00F370  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5611  00F374  6A0F               	clrf	drawCircle@y0+1,c
  5612  00F376  0E00               	movlw	0
  5613  00F378  6E11               	movwf	drawCircle@r+1,c
  5614  00F37A  0E07               	movlw	7
  5615  00F37C  6E10               	movwf	drawCircle@r,c
  5616  00F37E  0EF8               	movlw	248
  5617  00F380  6E13               	movwf	drawCircle@color+1,c
  5618  00F382  0E00               	movlw	0
  5619  00F384  6E12               	movwf	drawCircle@color,c
  5620  00F386  EC71  F077         	call	_drawCircle	;wreg free
  5621                           
  5622                           ;Main_Screen.c: 167: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5623  00F38A  0E00               	movlw	0
  5624  00F38C  6E0D               	movwf	drawCircle@x0+1,c
  5625  00F38E  0E3C               	movlw	60
  5626  00F390  6E0C               	movwf	drawCircle@x0,c
  5627  00F392  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5628  00F396  6A0F               	clrf	drawCircle@y0+1,c
  5629  00F398  0E00               	movlw	0
  5630  00F39A  6E11               	movwf	drawCircle@r+1,c
  5631  00F39C  0E07               	movlw	7
  5632  00F39E  6E10               	movwf	drawCircle@r,c
  5633  00F3A0  0EFF               	movlw	255
  5634  00F3A2  6E13               	movwf	drawCircle@color+1,c
  5635  00F3A4  0EE0               	movlw	224
  5636  00F3A6  6E12               	movwf	drawCircle@color,c
  5637  00F3A8  EC71  F077         	call	_drawCircle	;wreg free
  5638                           
  5639                           ;Main_Screen.c: 168: drawCircle(80, Circle_Y, 7, 0x07E0);
  5640  00F3AC  0E00               	movlw	0
  5641  00F3AE  6E0D               	movwf	drawCircle@x0+1,c
  5642  00F3B0  0E50               	movlw	80
  5643  00F3B2  6E0C               	movwf	drawCircle@x0,c
  5644  00F3B4  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5645  00F3B8  6A0F               	clrf	drawCircle@y0+1,c
  5646  00F3BA  0E00               	movlw	0
  5647  00F3BC  6E11               	movwf	drawCircle@r+1,c
  5648  00F3BE  0E07               	movlw	7
  5649  00F3C0  6E10               	movwf	drawCircle@r,c
  5650  00F3C2  0E07               	movlw	7
  5651  00F3C4  6E13               	movwf	drawCircle@color+1,c
  5652  00F3C6  0EE0               	movlw	224
  5653  00F3C8  6E12               	movwf	drawCircle@color,c
  5654  00F3CA  EC71  F077         	call	_drawCircle	;wreg free
  5655  00F3CE  D000               	goto	l3416
  5656  00F3D0                     l3416:
  5657                           
  5658                           ;Main_Screen.c: 169: }
  5659                           ;Main_Screen.c: 171: if (color == 1)
  5660  00F3D0  0433               	decf	update_LCD_color@color,w,c
  5661  00F3D2  A4D8               	btfss	status,2,c
  5662  00F3D4  D067               	goto	l3420
  5663                           
  5664                           ;Main_Screen.c: 172: {
  5665                           ;Main_Screen.c: 173: fillCircle(40, Circle_Y, 7, 0xF800);
  5666  00F3D6  0E00               	movlw	0
  5667  00F3D8  6E2C               	movwf	fillCircle@x0+1,c
  5668  00F3DA  0E28               	movlw	40
  5669  00F3DC  6E2B               	movwf	fillCircle@x0,c
  5670  00F3DE  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5671  00F3E2  6A2E               	clrf	fillCircle@y0+1,c
  5672  00F3E4  0E00               	movlw	0
  5673  00F3E6  6E30               	movwf	fillCircle@r+1,c
  5674  00F3E8  0E07               	movlw	7
  5675  00F3EA  6E2F               	movwf	fillCircle@r,c
  5676  00F3EC  0EF8               	movlw	248
  5677  00F3EE  6E32               	movwf	fillCircle@color+1,c
  5678  00F3F0  0E00               	movlw	0
  5679  00F3F2  6E31               	movwf	fillCircle@color,c
  5680  00F3F4  EC02  F06E         	call	_fillCircle	;wreg free
  5681                           
  5682                           ;Main_Screen.c: 174: fillCircle(60, Circle_Y, 7, 0x0000);
  5683  00F3F8  0E00               	movlw	0
  5684  00F3FA  6E2C               	movwf	fillCircle@x0+1,c
  5685  00F3FC  0E3C               	movlw	60
  5686  00F3FE  6E2B               	movwf	fillCircle@x0,c
  5687  00F400  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5688  00F404  6A2E               	clrf	fillCircle@y0+1,c
  5689  00F406  0E00               	movlw	0
  5690  00F408  6E30               	movwf	fillCircle@r+1,c
  5691  00F40A  0E07               	movlw	7
  5692  00F40C  6E2F               	movwf	fillCircle@r,c
  5693  00F40E  0E00               	movlw	0
  5694  00F410  6E32               	movwf	fillCircle@color+1,c
  5695  00F412  0E00               	movlw	0
  5696  00F414  6E31               	movwf	fillCircle@color,c
  5697  00F416  EC02  F06E         	call	_fillCircle	;wreg free
  5698                           
  5699                           ;Main_Screen.c: 175: fillCircle(80, Circle_Y, 7, 0x0000);
  5700  00F41A  0E00               	movlw	0
  5701  00F41C  6E2C               	movwf	fillCircle@x0+1,c
  5702  00F41E  0E50               	movlw	80
  5703  00F420  6E2B               	movwf	fillCircle@x0,c
  5704  00F422  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5705  00F426  6A2E               	clrf	fillCircle@y0+1,c
  5706  00F428  0E00               	movlw	0
  5707  00F42A  6E30               	movwf	fillCircle@r+1,c
  5708  00F42C  0E07               	movlw	7
  5709  00F42E  6E2F               	movwf	fillCircle@r,c
  5710  00F430  0E00               	movlw	0
  5711  00F432  6E32               	movwf	fillCircle@color+1,c
  5712  00F434  0E00               	movlw	0
  5713  00F436  6E31               	movwf	fillCircle@color,c
  5714  00F438  EC02  F06E         	call	_fillCircle	;wreg free
  5715                           
  5716                           ;Main_Screen.c: 176: drawCircle(40, Circle_Y, 7, 0xF800);
  5717  00F43C  0E00               	movlw	0
  5718  00F43E  6E0D               	movwf	drawCircle@x0+1,c
  5719  00F440  0E28               	movlw	40
  5720  00F442  6E0C               	movwf	drawCircle@x0,c
  5721  00F444  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5722  00F448  6A0F               	clrf	drawCircle@y0+1,c
  5723  00F44A  0E00               	movlw	0
  5724  00F44C  6E11               	movwf	drawCircle@r+1,c
  5725  00F44E  0E07               	movlw	7
  5726  00F450  6E10               	movwf	drawCircle@r,c
  5727  00F452  0EF8               	movlw	248
  5728  00F454  6E13               	movwf	drawCircle@color+1,c
  5729  00F456  0E00               	movlw	0
  5730  00F458  6E12               	movwf	drawCircle@color,c
  5731  00F45A  EC71  F077         	call	_drawCircle	;wreg free
  5732                           
  5733                           ;Main_Screen.c: 177: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5734  00F45E  0E00               	movlw	0
  5735  00F460  6E0D               	movwf	drawCircle@x0+1,c
  5736  00F462  0E3C               	movlw	60
  5737  00F464  6E0C               	movwf	drawCircle@x0,c
  5738  00F466  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5739  00F46A  6A0F               	clrf	drawCircle@y0+1,c
  5740  00F46C  0E00               	movlw	0
  5741  00F46E  6E11               	movwf	drawCircle@r+1,c
  5742  00F470  0E07               	movlw	7
  5743  00F472  6E10               	movwf	drawCircle@r,c
  5744  00F474  0EFF               	movlw	255
  5745  00F476  6E13               	movwf	drawCircle@color+1,c
  5746  00F478  0EE0               	movlw	224
  5747  00F47A  6E12               	movwf	drawCircle@color,c
  5748  00F47C  EC71  F077         	call	_drawCircle	;wreg free
  5749                           
  5750                           ;Main_Screen.c: 178: drawCircle(80, Circle_Y, 7, 0x07E0);
  5751  00F480  0E00               	movlw	0
  5752  00F482  6E0D               	movwf	drawCircle@x0+1,c
  5753  00F484  0E50               	movlw	80
  5754  00F486  6E0C               	movwf	drawCircle@x0,c
  5755  00F488  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5756  00F48C  6A0F               	clrf	drawCircle@y0+1,c
  5757  00F48E  0E00               	movlw	0
  5758  00F490  6E11               	movwf	drawCircle@r+1,c
  5759  00F492  0E07               	movlw	7
  5760  00F494  6E10               	movwf	drawCircle@r,c
  5761  00F496  0E07               	movlw	7
  5762  00F498  6E13               	movwf	drawCircle@color+1,c
  5763  00F49A  0EE0               	movlw	224
  5764  00F49C  6E12               	movwf	drawCircle@color,c
  5765  00F49E  EC71  F077         	call	_drawCircle	;wreg free
  5766  00F4A2  D000               	goto	l3420
  5767  00F4A4                     l3420:
  5768                           
  5769                           ;Main_Screen.c: 179: }
  5770                           ;Main_Screen.c: 181: if (color == 3)
  5771  00F4A4  0E03               	movlw	3
  5772  00F4A6  1833               	xorwf	update_LCD_color@color,w,c
  5773  00F4A8  A4D8               	btfss	status,2,c
  5774  00F4AA  D067               	goto	l3424
  5775                           
  5776                           ;Main_Screen.c: 182: {
  5777                           ;Main_Screen.c: 183: fillCircle(40, Circle_Y, 7, 0x0000);
  5778  00F4AC  0E00               	movlw	0
  5779  00F4AE  6E2C               	movwf	fillCircle@x0+1,c
  5780  00F4B0  0E28               	movlw	40
  5781  00F4B2  6E2B               	movwf	fillCircle@x0,c
  5782  00F4B4  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5783  00F4B8  6A2E               	clrf	fillCircle@y0+1,c
  5784  00F4BA  0E00               	movlw	0
  5785  00F4BC  6E30               	movwf	fillCircle@r+1,c
  5786  00F4BE  0E07               	movlw	7
  5787  00F4C0  6E2F               	movwf	fillCircle@r,c
  5788  00F4C2  0E00               	movlw	0
  5789  00F4C4  6E32               	movwf	fillCircle@color+1,c
  5790  00F4C6  0E00               	movlw	0
  5791  00F4C8  6E31               	movwf	fillCircle@color,c
  5792  00F4CA  EC02  F06E         	call	_fillCircle	;wreg free
  5793                           
  5794                           ;Main_Screen.c: 184: fillCircle(60, Circle_Y, 7, 0xFFE0);
  5795  00F4CE  0E00               	movlw	0
  5796  00F4D0  6E2C               	movwf	fillCircle@x0+1,c
  5797  00F4D2  0E3C               	movlw	60
  5798  00F4D4  6E2B               	movwf	fillCircle@x0,c
  5799  00F4D6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5800  00F4DA  6A2E               	clrf	fillCircle@y0+1,c
  5801  00F4DC  0E00               	movlw	0
  5802  00F4DE  6E30               	movwf	fillCircle@r+1,c
  5803  00F4E0  0E07               	movlw	7
  5804  00F4E2  6E2F               	movwf	fillCircle@r,c
  5805  00F4E4  0EFF               	movlw	255
  5806  00F4E6  6E32               	movwf	fillCircle@color+1,c
  5807  00F4E8  0EE0               	movlw	224
  5808  00F4EA  6E31               	movwf	fillCircle@color,c
  5809  00F4EC  EC02  F06E         	call	_fillCircle	;wreg free
  5810                           
  5811                           ;Main_Screen.c: 185: fillCircle(80, Circle_Y, 7, 0x0000);
  5812  00F4F0  0E00               	movlw	0
  5813  00F4F2  6E2C               	movwf	fillCircle@x0+1,c
  5814  00F4F4  0E50               	movlw	80
  5815  00F4F6  6E2B               	movwf	fillCircle@x0,c
  5816  00F4F8  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5817  00F4FC  6A2E               	clrf	fillCircle@y0+1,c
  5818  00F4FE  0E00               	movlw	0
  5819  00F500  6E30               	movwf	fillCircle@r+1,c
  5820  00F502  0E07               	movlw	7
  5821  00F504  6E2F               	movwf	fillCircle@r,c
  5822  00F506  0E00               	movlw	0
  5823  00F508  6E32               	movwf	fillCircle@color+1,c
  5824  00F50A  0E00               	movlw	0
  5825  00F50C  6E31               	movwf	fillCircle@color,c
  5826  00F50E  EC02  F06E         	call	_fillCircle	;wreg free
  5827                           
  5828                           ;Main_Screen.c: 186: drawCircle(40, Circle_Y, 7, 0xF800);
  5829  00F512  0E00               	movlw	0
  5830  00F514  6E0D               	movwf	drawCircle@x0+1,c
  5831  00F516  0E28               	movlw	40
  5832  00F518  6E0C               	movwf	drawCircle@x0,c
  5833  00F51A  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5834  00F51E  6A0F               	clrf	drawCircle@y0+1,c
  5835  00F520  0E00               	movlw	0
  5836  00F522  6E11               	movwf	drawCircle@r+1,c
  5837  00F524  0E07               	movlw	7
  5838  00F526  6E10               	movwf	drawCircle@r,c
  5839  00F528  0EF8               	movlw	248
  5840  00F52A  6E13               	movwf	drawCircle@color+1,c
  5841  00F52C  0E00               	movlw	0
  5842  00F52E  6E12               	movwf	drawCircle@color,c
  5843  00F530  EC71  F077         	call	_drawCircle	;wreg free
  5844                           
  5845                           ;Main_Screen.c: 187: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5846  00F534  0E00               	movlw	0
  5847  00F536  6E0D               	movwf	drawCircle@x0+1,c
  5848  00F538  0E3C               	movlw	60
  5849  00F53A  6E0C               	movwf	drawCircle@x0,c
  5850  00F53C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5851  00F540  6A0F               	clrf	drawCircle@y0+1,c
  5852  00F542  0E00               	movlw	0
  5853  00F544  6E11               	movwf	drawCircle@r+1,c
  5854  00F546  0E07               	movlw	7
  5855  00F548  6E10               	movwf	drawCircle@r,c
  5856  00F54A  0EFF               	movlw	255
  5857  00F54C  6E13               	movwf	drawCircle@color+1,c
  5858  00F54E  0EE0               	movlw	224
  5859  00F550  6E12               	movwf	drawCircle@color,c
  5860  00F552  EC71  F077         	call	_drawCircle	;wreg free
  5861                           
  5862                           ;Main_Screen.c: 188: drawCircle(80, Circle_Y, 7, 0x07E0);
  5863  00F556  0E00               	movlw	0
  5864  00F558  6E0D               	movwf	drawCircle@x0+1,c
  5865  00F55A  0E50               	movlw	80
  5866  00F55C  6E0C               	movwf	drawCircle@x0,c
  5867  00F55E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5868  00F562  6A0F               	clrf	drawCircle@y0+1,c
  5869  00F564  0E00               	movlw	0
  5870  00F566  6E11               	movwf	drawCircle@r+1,c
  5871  00F568  0E07               	movlw	7
  5872  00F56A  6E10               	movwf	drawCircle@r,c
  5873  00F56C  0E07               	movlw	7
  5874  00F56E  6E13               	movwf	drawCircle@color+1,c
  5875  00F570  0EE0               	movlw	224
  5876  00F572  6E12               	movwf	drawCircle@color,c
  5877  00F574  EC71  F077         	call	_drawCircle	;wreg free
  5878  00F578  D000               	goto	l3424
  5879  00F57A                     l3424:
  5880                           
  5881                           ;Main_Screen.c: 189: }
  5882                           ;Main_Screen.c: 191: if (color == 2)
  5883  00F57A  0E02               	movlw	2
  5884  00F57C  1833               	xorwf	update_LCD_color@color,w,c
  5885  00F57E  A4D8               	btfss	status,2,c
  5886  00F580  D067               	goto	l208
  5887                           
  5888                           ;Main_Screen.c: 192: {
  5889                           ;Main_Screen.c: 193: fillCircle(40, Circle_Y, 7, 0x0000);
  5890  00F582  0E00               	movlw	0
  5891  00F584  6E2C               	movwf	fillCircle@x0+1,c
  5892  00F586  0E28               	movlw	40
  5893  00F588  6E2B               	movwf	fillCircle@x0,c
  5894  00F58A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5895  00F58E  6A2E               	clrf	fillCircle@y0+1,c
  5896  00F590  0E00               	movlw	0
  5897  00F592  6E30               	movwf	fillCircle@r+1,c
  5898  00F594  0E07               	movlw	7
  5899  00F596  6E2F               	movwf	fillCircle@r,c
  5900  00F598  0E00               	movlw	0
  5901  00F59A  6E32               	movwf	fillCircle@color+1,c
  5902  00F59C  0E00               	movlw	0
  5903  00F59E  6E31               	movwf	fillCircle@color,c
  5904  00F5A0  EC02  F06E         	call	_fillCircle	;wreg free
  5905                           
  5906                           ;Main_Screen.c: 194: fillCircle(60, Circle_Y, 7, 0x0000);
  5907  00F5A4  0E00               	movlw	0
  5908  00F5A6  6E2C               	movwf	fillCircle@x0+1,c
  5909  00F5A8  0E3C               	movlw	60
  5910  00F5AA  6E2B               	movwf	fillCircle@x0,c
  5911  00F5AC  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5912  00F5B0  6A2E               	clrf	fillCircle@y0+1,c
  5913  00F5B2  0E00               	movlw	0
  5914  00F5B4  6E30               	movwf	fillCircle@r+1,c
  5915  00F5B6  0E07               	movlw	7
  5916  00F5B8  6E2F               	movwf	fillCircle@r,c
  5917  00F5BA  0E00               	movlw	0
  5918  00F5BC  6E32               	movwf	fillCircle@color+1,c
  5919  00F5BE  0E00               	movlw	0
  5920  00F5C0  6E31               	movwf	fillCircle@color,c
  5921  00F5C2  EC02  F06E         	call	_fillCircle	;wreg free
  5922                           
  5923                           ;Main_Screen.c: 195: fillCircle(80, Circle_Y, 7, 0x07E0);
  5924  00F5C6  0E00               	movlw	0
  5925  00F5C8  6E2C               	movwf	fillCircle@x0+1,c
  5926  00F5CA  0E50               	movlw	80
  5927  00F5CC  6E2B               	movwf	fillCircle@x0,c
  5928  00F5CE  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5929  00F5D2  6A2E               	clrf	fillCircle@y0+1,c
  5930  00F5D4  0E00               	movlw	0
  5931  00F5D6  6E30               	movwf	fillCircle@r+1,c
  5932  00F5D8  0E07               	movlw	7
  5933  00F5DA  6E2F               	movwf	fillCircle@r,c
  5934  00F5DC  0E07               	movlw	7
  5935  00F5DE  6E32               	movwf	fillCircle@color+1,c
  5936  00F5E0  0EE0               	movlw	224
  5937  00F5E2  6E31               	movwf	fillCircle@color,c
  5938  00F5E4  EC02  F06E         	call	_fillCircle	;wreg free
  5939                           
  5940                           ;Main_Screen.c: 196: drawCircle(40, Circle_Y, 7, 0xF800);
  5941  00F5E8  0E00               	movlw	0
  5942  00F5EA  6E0D               	movwf	drawCircle@x0+1,c
  5943  00F5EC  0E28               	movlw	40
  5944  00F5EE  6E0C               	movwf	drawCircle@x0,c
  5945  00F5F0  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5946  00F5F4  6A0F               	clrf	drawCircle@y0+1,c
  5947  00F5F6  0E00               	movlw	0
  5948  00F5F8  6E11               	movwf	drawCircle@r+1,c
  5949  00F5FA  0E07               	movlw	7
  5950  00F5FC  6E10               	movwf	drawCircle@r,c
  5951  00F5FE  0EF8               	movlw	248
  5952  00F600  6E13               	movwf	drawCircle@color+1,c
  5953  00F602  0E00               	movlw	0
  5954  00F604  6E12               	movwf	drawCircle@color,c
  5955  00F606  EC71  F077         	call	_drawCircle	;wreg free
  5956                           
  5957                           ;Main_Screen.c: 197: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5958  00F60A  0E00               	movlw	0
  5959  00F60C  6E0D               	movwf	drawCircle@x0+1,c
  5960  00F60E  0E3C               	movlw	60
  5961  00F610  6E0C               	movwf	drawCircle@x0,c
  5962  00F612  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5963  00F616  6A0F               	clrf	drawCircle@y0+1,c
  5964  00F618  0E00               	movlw	0
  5965  00F61A  6E11               	movwf	drawCircle@r+1,c
  5966  00F61C  0E07               	movlw	7
  5967  00F61E  6E10               	movwf	drawCircle@r,c
  5968  00F620  0EFF               	movlw	255
  5969  00F622  6E13               	movwf	drawCircle@color+1,c
  5970  00F624  0EE0               	movlw	224
  5971  00F626  6E12               	movwf	drawCircle@color,c
  5972  00F628  EC71  F077         	call	_drawCircle	;wreg free
  5973                           
  5974                           ;Main_Screen.c: 198: drawCircle(80, Circle_Y, 7, 0x07E0);
  5975  00F62C  0E00               	movlw	0
  5976  00F62E  6E0D               	movwf	drawCircle@x0+1,c
  5977  00F630  0E50               	movlw	80
  5978  00F632  6E0C               	movwf	drawCircle@x0,c
  5979  00F634  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5980  00F638  6A0F               	clrf	drawCircle@y0+1,c
  5981  00F63A  0E00               	movlw	0
  5982  00F63C  6E11               	movwf	drawCircle@r+1,c
  5983  00F63E  0E07               	movlw	7
  5984  00F640  6E10               	movwf	drawCircle@r,c
  5985  00F642  0E07               	movlw	7
  5986  00F644  6E13               	movwf	drawCircle@color+1,c
  5987  00F646  0EE0               	movlw	224
  5988  00F648  6E12               	movwf	drawCircle@color,c
  5989  00F64A  EC71  F077         	call	_drawCircle	;wreg free
  5990  00F64E  D000               	goto	l208
  5991  00F650                     l208:
  5992  00F650  0012               	return		;funcret
  5993  00F652                     __end_of_update_LCD_color:
  5994                           	opt stack 0
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodl	equ	0xFF3
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           postdec1	equ	0xFE5
  6003                           fsr1l	equ	0xFE1
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _fillCircle *****************
  6007 ;; Defined at:
  6008 ;;		line 565 in file "ST7735_TFT.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  x0              2   42[COMRAM] int 
  6011 ;;  y0              2   44[COMRAM] int 
  6012 ;;  r               2   46[COMRAM] int 
  6013 ;;  color           2   48[COMRAM] unsigned int 
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;		None               void
  6018 ;; Registers used:
  6019 ;;		wreg, status,2, status,0, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6025 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6028 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;Total ram usage:        8 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    5
  6032 ;; This function calls:
  6033 ;;		_drawFastVLine
  6034 ;;		_fillCircleHelper
  6035 ;; This function is called by:
  6036 ;;		_Initialize_LCD_Screen
  6037 ;;		_update_LCD_color
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text25
  6042  00DC04                     __ptext25:
  6043                           	opt stack 0
  6044  00DC04                     _fillCircle:
  6045                           	opt stack 22
  6046                           
  6047                           ;ST7735_TFT.c: 567: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6048                           
  6049                           ;incstack = 0
  6050  00DC04  502F               	movf	fillCircle@r,w,c
  6051  00DC06  0800               	sublw	0
  6052  00DC08  242D               	addwf	fillCircle@y0,w,c
  6053  00DC0A  6E08               	movwf	drawFastVLine@y,c
  6054  00DC0C  80D8               	bsf	status,0,c
  6055  00DC0E  342F               	rlcf	fillCircle@r,w,c
  6056  00DC10  6E09               	movwf	drawFastVLine@h,c
  6057  00DC12  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  6058  00DC16  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  6059  00DC1A  502B               	movf	fillCircle@x0,w,c
  6060  00DC1C  ECA3  F06F         	call	_drawFastVLine
  6061                           
  6062                           ;ST7735_TFT.c: 568: fillCircleHelper(x0, y0, r, 3, 0, color);
  6063  00DC20  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  6064  00DC24  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6065  00DC28  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  6066  00DC2C  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6067  00DC30  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  6068  00DC34  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6069  00DC38  0E00               	movlw	0
  6070  00DC3A  6E1A               	movwf	fillCircleHelper@cornername+1,c
  6071  00DC3C  0E03               	movlw	3
  6072  00DC3E  6E19               	movwf	fillCircleHelper@cornername,c
  6073  00DC40  0E00               	movlw	0
  6074  00DC42  6E1C               	movwf	fillCircleHelper@delta+1,c
  6075  00DC44  0E00               	movlw	0
  6076  00DC46  6E1B               	movwf	fillCircleHelper@delta,c
  6077  00DC48  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  6078  00DC4C  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6079  00DC50  EC6B  F075         	call	_fillCircleHelper	;wreg free
  6080  00DC54  0012               	return		;funcret
  6081  00DC56                     __end_of_fillCircle:
  6082                           	opt stack 0
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodl	equ	0xFF3
  6088                           postinc0	equ	0xFEE
  6089                           wreg	equ	0xFE8
  6090                           postdec1	equ	0xFE5
  6091                           fsr1l	equ	0xFE1
  6092                           status	equ	0xFD8
  6093                           
  6094 ;; *************** function _fillCircleHelper *****************
  6095 ;; Defined at:
  6096 ;;		line 540 in file "ST7735_TFT.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  x0              2   18[COMRAM] int 
  6099 ;;  y0              2   20[COMRAM] int 
  6100 ;;  r               2   22[COMRAM] int 
  6101 ;;  cornername      2   24[COMRAM] unsigned int 
  6102 ;;  delta           2   26[COMRAM] int 
  6103 ;;  color           2   28[COMRAM] unsigned int 
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;  y               2   40[COMRAM] int 
  6106 ;;  x               2   38[COMRAM] int 
  6107 ;;  f               2   36[COMRAM] int 
  6108 ;;  ddF_y           2   34[COMRAM] int 
  6109 ;;  ddF_x           2   32[COMRAM] int 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;		None               void
  6112 ;; Registers used:
  6113 ;;		wreg, status,2, status,0, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6119 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;Total ram usage:       24 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    4
  6126 ;; This function calls:
  6127 ;;		_drawFastVLine
  6128 ;; This function is called by:
  6129 ;;		_fillCircle
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           	psect	text26
  6134  00EAD6                     __ptext26:
  6135                           	opt stack 0
  6136  00EAD6                     _fillCircleHelper:
  6137                           	opt stack 22
  6138                           
  6139                           ;ST7735_TFT.c: 542: signed int f, ddF_x, ddF_y, x, y;
  6140                           ;ST7735_TFT.c: 543: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6141                           
  6142                           ;incstack = 0
  6143  00EAD6  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  6144  00EADA  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6145  00EADE  1E1F               	comf	??_fillCircleHelper,f,c
  6146  00EAE0  1E20               	comf	??_fillCircleHelper+1,f,c
  6147  00EAE2  4A1F               	infsnz	??_fillCircleHelper,f,c
  6148  00EAE4  2A20               	incf	??_fillCircleHelper+1,f,c
  6149  00EAE6  0E01               	movlw	1
  6150  00EAE8  241F               	addwf	??_fillCircleHelper,w,c
  6151  00EAEA  6E25               	movwf	fillCircleHelper@f,c
  6152  00EAEC  0E00               	movlw	0
  6153  00EAEE  2020               	addwfc	??_fillCircleHelper+1,w,c
  6154  00EAF0  6E26               	movwf	fillCircleHelper@f+1,c
  6155  00EAF2  0E00               	movlw	0
  6156  00EAF4  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  6157  00EAF6  0E01               	movlw	1
  6158  00EAF8  6E21               	movwf	fillCircleHelper@ddF_x,c
  6159  00EAFA  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  6160  00EAFE  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6161  00EB02  90D8               	bcf	status,0,c
  6162  00EB04  361F               	rlcf	??_fillCircleHelper,f,c
  6163  00EB06  3620               	rlcf	??_fillCircleHelper+1,f,c
  6164  00EB08  1E1F               	comf	??_fillCircleHelper,f,c
  6165  00EB0A  1E20               	comf	??_fillCircleHelper+1,f,c
  6166  00EB0C  4A1F               	infsnz	??_fillCircleHelper,f,c
  6167  00EB0E  2A20               	incf	??_fillCircleHelper+1,f,c
  6168  00EB10  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  6169  00EB14  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  6170  00EB18  0E00               	movlw	0
  6171  00EB1A  6E28               	movwf	fillCircleHelper@x+1,c
  6172  00EB1C  0E00               	movlw	0
  6173  00EB1E  6E27               	movwf	fillCircleHelper@x,c
  6174  00EB20  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  6175  00EB24  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  6176                           
  6177                           ;ST7735_TFT.c: 544: while (x<y) {
  6178  00EB28  D067               	goto	l3082
  6179  00EB2A                     l3062:
  6180                           
  6181                           ;ST7735_TFT.c: 545: if (f >= 0) {
  6182  00EB2A  BE26               	btfsc	fillCircleHelper@f+1,7,c
  6183  00EB2C  D00B               	goto	l422
  6184                           
  6185                           ;ST7735_TFT.c: 546: y--;
  6186  00EB2E  0629               	decf	fillCircleHelper@y,f,c
  6187  00EB30  A0D8               	btfss	status,0,c
  6188  00EB32  062A               	decf	fillCircleHelper@y+1,f,c
  6189                           
  6190                           ;ST7735_TFT.c: 547: ddF_y += 2;
  6191  00EB34  0E02               	movlw	2
  6192  00EB36  2623               	addwf	fillCircleHelper@ddF_y,f,c
  6193  00EB38  0E00               	movlw	0
  6194  00EB3A  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  6195                           
  6196                           ;ST7735_TFT.c: 548: f += ddF_y;
  6197  00EB3C  5023               	movf	fillCircleHelper@ddF_y,w,c
  6198  00EB3E  2625               	addwf	fillCircleHelper@f,f,c
  6199  00EB40  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  6200  00EB42  2226               	addwfc	fillCircleHelper@f+1,f,c
  6201  00EB44                     l422:
  6202                           
  6203                           ;ST7735_TFT.c: 549: }
  6204                           ;ST7735_TFT.c: 550: x++;
  6205  00EB44  4A27               	infsnz	fillCircleHelper@x,f,c
  6206  00EB46  2A28               	incf	fillCircleHelper@x+1,f,c
  6207                           
  6208                           ;ST7735_TFT.c: 551: ddF_x += 2;
  6209  00EB48  0E02               	movlw	2
  6210  00EB4A  2621               	addwf	fillCircleHelper@ddF_x,f,c
  6211  00EB4C  0E00               	movlw	0
  6212  00EB4E  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  6213                           
  6214                           ;ST7735_TFT.c: 552: f += ddF_x;
  6215  00EB50  5021               	movf	fillCircleHelper@ddF_x,w,c
  6216  00EB52  2625               	addwf	fillCircleHelper@f,f,c
  6217  00EB54  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  6218  00EB56  2226               	addwfc	fillCircleHelper@f+1,f,c
  6219                           
  6220                           ;ST7735_TFT.c: 554: if (cornername & 0x1) {
  6221  00EB58  A019               	btfss	fillCircleHelper@cornername,0,c
  6222  00EB5A  D025               	goto	l3078
  6223                           
  6224                           ;ST7735_TFT.c: 555: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  6225  00EB5C  5029               	movf	fillCircleHelper@y,w,c
  6226  00EB5E  0800               	sublw	0
  6227  00EB60  2415               	addwf	fillCircleHelper@y0,w,c
  6228  00EB62  6E08               	movwf	drawFastVLine@y,c
  6229  00EB64  5029               	movf	fillCircleHelper@y,w,c
  6230  00EB66  2429               	addwf	fillCircleHelper@y,w,c
  6231  00EB68  241B               	addwf	fillCircleHelper@delta,w,c
  6232  00EB6A  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6233  00EB6C  281F               	incf	??_fillCircleHelper,w,c
  6234  00EB6E  6E09               	movwf	drawFastVLine@h,c
  6235  00EB70  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6236  00EB74  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6237  00EB78  5013               	movf	fillCircleHelper@x0,w,c
  6238  00EB7A  2427               	addwf	fillCircleHelper@x,w,c
  6239  00EB7C  ECA3  F06F         	call	_drawFastVLine
  6240                           
  6241                           ;ST7735_TFT.c: 556: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  6242  00EB80  5027               	movf	fillCircleHelper@x,w,c
  6243  00EB82  0800               	sublw	0
  6244  00EB84  2415               	addwf	fillCircleHelper@y0,w,c
  6245  00EB86  6E08               	movwf	drawFastVLine@y,c
  6246  00EB88  5027               	movf	fillCircleHelper@x,w,c
  6247  00EB8A  2427               	addwf	fillCircleHelper@x,w,c
  6248  00EB8C  241B               	addwf	fillCircleHelper@delta,w,c
  6249  00EB8E  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6250  00EB90  281F               	incf	??_fillCircleHelper,w,c
  6251  00EB92  6E09               	movwf	drawFastVLine@h,c
  6252  00EB94  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6253  00EB98  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6254  00EB9C  5013               	movf	fillCircleHelper@x0,w,c
  6255  00EB9E  2429               	addwf	fillCircleHelper@y,w,c
  6256  00EBA0  ECA3  F06F         	call	_drawFastVLine
  6257  00EBA4  D000               	goto	l3078
  6258  00EBA6                     l3078:
  6259                           
  6260                           ;ST7735_TFT.c: 557: }
  6261                           ;ST7735_TFT.c: 558: if (cornername & 0x2) {
  6262  00EBA6  A219               	btfss	fillCircleHelper@cornername,1,c
  6263  00EBA8  D027               	goto	l3082
  6264                           
  6265                           ;ST7735_TFT.c: 559: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  6266  00EBAA  5029               	movf	fillCircleHelper@y,w,c
  6267  00EBAC  0800               	sublw	0
  6268  00EBAE  2415               	addwf	fillCircleHelper@y0,w,c
  6269  00EBB0  6E08               	movwf	drawFastVLine@y,c
  6270  00EBB2  5029               	movf	fillCircleHelper@y,w,c
  6271  00EBB4  2429               	addwf	fillCircleHelper@y,w,c
  6272  00EBB6  241B               	addwf	fillCircleHelper@delta,w,c
  6273  00EBB8  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6274  00EBBA  281F               	incf	??_fillCircleHelper,w,c
  6275  00EBBC  6E09               	movwf	drawFastVLine@h,c
  6276  00EBBE  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6277  00EBC2  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6278  00EBC6  5027               	movf	fillCircleHelper@x,w,c
  6279  00EBC8  0800               	sublw	0
  6280  00EBCA  2413               	addwf	fillCircleHelper@x0,w,c
  6281  00EBCC  ECA3  F06F         	call	_drawFastVLine
  6282                           
  6283                           ;ST7735_TFT.c: 560: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  6284  00EBD0  5027               	movf	fillCircleHelper@x,w,c
  6285  00EBD2  0800               	sublw	0
  6286  00EBD4  2415               	addwf	fillCircleHelper@y0,w,c
  6287  00EBD6  6E08               	movwf	drawFastVLine@y,c
  6288  00EBD8  5027               	movf	fillCircleHelper@x,w,c
  6289  00EBDA  2427               	addwf	fillCircleHelper@x,w,c
  6290  00EBDC  241B               	addwf	fillCircleHelper@delta,w,c
  6291  00EBDE  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6292  00EBE0  281F               	incf	??_fillCircleHelper,w,c
  6293  00EBE2  6E09               	movwf	drawFastVLine@h,c
  6294  00EBE4  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6295  00EBE8  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6296  00EBEC  5029               	movf	fillCircleHelper@y,w,c
  6297  00EBEE  0800               	sublw	0
  6298  00EBF0  2413               	addwf	fillCircleHelper@x0,w,c
  6299  00EBF2  ECA3  F06F         	call	_drawFastVLine
  6300  00EBF6  D000               	goto	l3082
  6301  00EBF8                     l3082:
  6302  00EBF8  5029               	movf	fillCircleHelper@y,w,c
  6303  00EBFA  5C27               	subwf	fillCircleHelper@x,w,c
  6304  00EBFC  5028               	movf	fillCircleHelper@x+1,w,c
  6305  00EBFE  0A80               	xorlw	128
  6306  00EC00  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6307  00EC02  502A               	movf	fillCircleHelper@y+1,w,c
  6308  00EC04  0A80               	xorlw	128
  6309  00EC06  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  6310  00EC08  A0D8               	btfss	status,0,c
  6311  00EC0A  D78F               	goto	l3062
  6312  00EC0C  0012               	return		;funcret
  6313  00EC0E                     __end_of_fillCircleHelper:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodl	equ	0xFF3
  6320                           postinc0	equ	0xFEE
  6321                           wreg	equ	0xFE8
  6322                           postdec1	equ	0xFE5
  6323                           fsr1l	equ	0xFE1
  6324                           status	equ	0xFD8
  6325                           
  6326 ;; *************** function _drawCircle *****************
  6327 ;; Defined at:
  6328 ;;		line 479 in file "ST7735_TFT.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;  x0              2   11[COMRAM] int 
  6331 ;;  y0              2   13[COMRAM] int 
  6332 ;;  r               2   15[COMRAM] int 
  6333 ;;  color           2   17[COMRAM] unsigned int 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  y               2   29[COMRAM] int 
  6336 ;;  x               2   27[COMRAM] int 
  6337 ;;  f               2   25[COMRAM] int 
  6338 ;;  ddF_y           2   23[COMRAM] int 
  6339 ;;  ddF_x           2   21[COMRAM] int 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;		None               void
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6349 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;Total ram usage:       20 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    4
  6356 ;; This function calls:
  6357 ;;		_drawPixel
  6358 ;; This function is called by:
  6359 ;;		_Initialize_LCD_Screen
  6360 ;;		_update_LCD_color
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           	psect	text27
  6365  00EEE2                     __ptext27:
  6366                           	opt stack 0
  6367  00EEE2                     _drawCircle:
  6368                           	opt stack 23
  6369                           
  6370                           ;ST7735_TFT.c: 481: signed int f, ddF_x, ddF_y, x, y;
  6371                           ;ST7735_TFT.c: 482: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6372                           
  6373                           ;incstack = 0
  6374  00EEE2  C010  F014         	movff	drawCircle@r,??_drawCircle
  6375  00EEE6  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  6376  00EEEA  1E14               	comf	??_drawCircle,f,c
  6377  00EEEC  1E15               	comf	??_drawCircle+1,f,c
  6378  00EEEE  4A14               	infsnz	??_drawCircle,f,c
  6379  00EEF0  2A15               	incf	??_drawCircle+1,f,c
  6380  00EEF2  0E01               	movlw	1
  6381  00EEF4  2414               	addwf	??_drawCircle,w,c
  6382  00EEF6  6E1A               	movwf	drawCircle@f,c
  6383  00EEF8  0E00               	movlw	0
  6384  00EEFA  2015               	addwfc	??_drawCircle+1,w,c
  6385  00EEFC  6E1B               	movwf	drawCircle@f+1,c
  6386  00EEFE  0E00               	movlw	0
  6387  00EF00  6E17               	movwf	drawCircle@ddF_x+1,c
  6388  00EF02  0E01               	movlw	1
  6389  00EF04  6E16               	movwf	drawCircle@ddF_x,c
  6390  00EF06  C010  F014         	movff	drawCircle@r,??_drawCircle
  6391  00EF0A  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  6392  00EF0E  90D8               	bcf	status,0,c
  6393  00EF10  3614               	rlcf	??_drawCircle,f,c
  6394  00EF12  3615               	rlcf	??_drawCircle+1,f,c
  6395  00EF14  1E14               	comf	??_drawCircle,f,c
  6396  00EF16  1E15               	comf	??_drawCircle+1,f,c
  6397  00EF18  4A14               	infsnz	??_drawCircle,f,c
  6398  00EF1A  2A15               	incf	??_drawCircle+1,f,c
  6399  00EF1C  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  6400  00EF20  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6401  00EF24  0E00               	movlw	0
  6402  00EF26  6E1D               	movwf	drawCircle@x+1,c
  6403  00EF28  0E00               	movlw	0
  6404  00EF2A  6E1C               	movwf	drawCircle@x,c
  6405  00EF2C  C010  F01E         	movff	drawCircle@r,drawCircle@y
  6406  00EF30  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  6407                           
  6408                           ;ST7735_TFT.c: 483: drawPixel(x0 , y0 + r, color);
  6409  00EF34  500E               	movf	drawCircle@y0,w,c
  6410  00EF36  2410               	addwf	drawCircle@r,w,c
  6411  00EF38  6E08               	movwf	drawPixel@y,c
  6412  00EF3A  C012  F009         	movff	drawCircle@color,drawPixel@color
  6413  00EF3E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6414  00EF42  500C               	movf	drawCircle@x0,w,c
  6415  00EF44  EC25  F06C         	call	_drawPixel
  6416                           
  6417                           ;ST7735_TFT.c: 484: drawPixel(x0 , y0 - r, color);
  6418  00EF48  5010               	movf	drawCircle@r,w,c
  6419  00EF4A  0800               	sublw	0
  6420  00EF4C  240E               	addwf	drawCircle@y0,w,c
  6421  00EF4E  6E08               	movwf	drawPixel@y,c
  6422  00EF50  C012  F009         	movff	drawCircle@color,drawPixel@color
  6423  00EF54  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6424  00EF58  500C               	movf	drawCircle@x0,w,c
  6425  00EF5A  EC25  F06C         	call	_drawPixel
  6426                           
  6427                           ;ST7735_TFT.c: 485: drawPixel(x0+r, y0 , color);
  6428  00EF5E  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  6429  00EF62  C012  F009         	movff	drawCircle@color,drawPixel@color
  6430  00EF66  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6431  00EF6A  500C               	movf	drawCircle@x0,w,c
  6432  00EF6C  2410               	addwf	drawCircle@r,w,c
  6433  00EF6E  EC25  F06C         	call	_drawPixel
  6434                           
  6435                           ;ST7735_TFT.c: 486: drawPixel(x0-r, y0 , color);
  6436  00EF72  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  6437  00EF76  C012  F009         	movff	drawCircle@color,drawPixel@color
  6438  00EF7A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6439  00EF7E  5010               	movf	drawCircle@r,w,c
  6440  00EF80  0800               	sublw	0
  6441  00EF82  240C               	addwf	drawCircle@x0,w,c
  6442  00EF84  EC25  F06C         	call	_drawPixel
  6443                           
  6444                           ;ST7735_TFT.c: 487: while (x < y) {
  6445  00EF88  D078               	goto	l3278
  6446  00EF8A                     l3250:
  6447                           
  6448                           ;ST7735_TFT.c: 488: if (f >= 0) {
  6449  00EF8A  BE1B               	btfsc	drawCircle@f+1,7,c
  6450  00EF8C  D00B               	goto	l404
  6451                           
  6452                           ;ST7735_TFT.c: 489: y--;
  6453  00EF8E  061E               	decf	drawCircle@y,f,c
  6454  00EF90  A0D8               	btfss	status,0,c
  6455  00EF92  061F               	decf	drawCircle@y+1,f,c
  6456                           
  6457                           ;ST7735_TFT.c: 490: ddF_y += 2;
  6458  00EF94  0E02               	movlw	2
  6459  00EF96  2618               	addwf	drawCircle@ddF_y,f,c
  6460  00EF98  0E00               	movlw	0
  6461  00EF9A  2219               	addwfc	drawCircle@ddF_y+1,f,c
  6462                           
  6463                           ;ST7735_TFT.c: 491: f += ddF_y;
  6464  00EF9C  5018               	movf	drawCircle@ddF_y,w,c
  6465  00EF9E  261A               	addwf	drawCircle@f,f,c
  6466  00EFA0  5019               	movf	drawCircle@ddF_y+1,w,c
  6467  00EFA2  221B               	addwfc	drawCircle@f+1,f,c
  6468  00EFA4                     l404:
  6469                           
  6470                           ;ST7735_TFT.c: 492: }
  6471                           ;ST7735_TFT.c: 493: x++;
  6472  00EFA4  4A1C               	infsnz	drawCircle@x,f,c
  6473  00EFA6  2A1D               	incf	drawCircle@x+1,f,c
  6474                           
  6475                           ;ST7735_TFT.c: 494: ddF_x += 2;
  6476  00EFA8  0E02               	movlw	2
  6477  00EFAA  2616               	addwf	drawCircle@ddF_x,f,c
  6478  00EFAC  0E00               	movlw	0
  6479  00EFAE  2217               	addwfc	drawCircle@ddF_x+1,f,c
  6480                           
  6481                           ;ST7735_TFT.c: 495: f += ddF_x;
  6482  00EFB0  5016               	movf	drawCircle@ddF_x,w,c
  6483  00EFB2  261A               	addwf	drawCircle@f,f,c
  6484  00EFB4  5017               	movf	drawCircle@ddF_x+1,w,c
  6485  00EFB6  221B               	addwfc	drawCircle@f+1,f,c
  6486                           
  6487                           ;ST7735_TFT.c: 496: drawPixel(x0 + x, y0 + y, color);
  6488  00EFB8  500E               	movf	drawCircle@y0,w,c
  6489  00EFBA  241E               	addwf	drawCircle@y,w,c
  6490  00EFBC  6E08               	movwf	drawPixel@y,c
  6491  00EFBE  C012  F009         	movff	drawCircle@color,drawPixel@color
  6492  00EFC2  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6493  00EFC6  500C               	movf	drawCircle@x0,w,c
  6494  00EFC8  241C               	addwf	drawCircle@x,w,c
  6495  00EFCA  EC25  F06C         	call	_drawPixel
  6496                           
  6497                           ;ST7735_TFT.c: 497: drawPixel(x0 - x, y0 + y, color);
  6498  00EFCE  500E               	movf	drawCircle@y0,w,c
  6499  00EFD0  241E               	addwf	drawCircle@y,w,c
  6500  00EFD2  6E08               	movwf	drawPixel@y,c
  6501  00EFD4  C012  F009         	movff	drawCircle@color,drawPixel@color
  6502  00EFD8  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6503  00EFDC  501C               	movf	drawCircle@x,w,c
  6504  00EFDE  0800               	sublw	0
  6505  00EFE0  240C               	addwf	drawCircle@x0,w,c
  6506  00EFE2  EC25  F06C         	call	_drawPixel
  6507                           
  6508                           ;ST7735_TFT.c: 498: drawPixel(x0 + x, y0 - y, color);
  6509  00EFE6  501E               	movf	drawCircle@y,w,c
  6510  00EFE8  0800               	sublw	0
  6511  00EFEA  240E               	addwf	drawCircle@y0,w,c
  6512  00EFEC  6E08               	movwf	drawPixel@y,c
  6513  00EFEE  C012  F009         	movff	drawCircle@color,drawPixel@color
  6514  00EFF2  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6515  00EFF6  500C               	movf	drawCircle@x0,w,c
  6516  00EFF8  241C               	addwf	drawCircle@x,w,c
  6517  00EFFA  EC25  F06C         	call	_drawPixel
  6518                           
  6519                           ;ST7735_TFT.c: 499: drawPixel(x0 - x, y0 - y, color);
  6520  00EFFE  501E               	movf	drawCircle@y,w,c
  6521  00F000  0800               	sublw	0
  6522  00F002  240E               	addwf	drawCircle@y0,w,c
  6523  00F004  6E08               	movwf	drawPixel@y,c
  6524  00F006  C012  F009         	movff	drawCircle@color,drawPixel@color
  6525  00F00A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6526  00F00E  501C               	movf	drawCircle@x,w,c
  6527  00F010  0800               	sublw	0
  6528  00F012  240C               	addwf	drawCircle@x0,w,c
  6529  00F014  EC25  F06C         	call	_drawPixel
  6530                           
  6531                           ;ST7735_TFT.c: 500: drawPixel(x0 + y, y0 + x, color);
  6532  00F018  500E               	movf	drawCircle@y0,w,c
  6533  00F01A  241C               	addwf	drawCircle@x,w,c
  6534  00F01C  6E08               	movwf	drawPixel@y,c
  6535  00F01E  C012  F009         	movff	drawCircle@color,drawPixel@color
  6536  00F022  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6537  00F026  500C               	movf	drawCircle@x0,w,c
  6538  00F028  241E               	addwf	drawCircle@y,w,c
  6539  00F02A  EC25  F06C         	call	_drawPixel
  6540                           
  6541                           ;ST7735_TFT.c: 501: drawPixel(x0 - y, y0 + x, color);
  6542  00F02E  500E               	movf	drawCircle@y0,w,c
  6543  00F030  241C               	addwf	drawCircle@x,w,c
  6544  00F032  6E08               	movwf	drawPixel@y,c
  6545  00F034  C012  F009         	movff	drawCircle@color,drawPixel@color
  6546  00F038  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6547  00F03C  501E               	movf	drawCircle@y,w,c
  6548  00F03E  0800               	sublw	0
  6549  00F040  240C               	addwf	drawCircle@x0,w,c
  6550  00F042  EC25  F06C         	call	_drawPixel
  6551                           
  6552                           ;ST7735_TFT.c: 502: drawPixel(x0 + y, y0 - x, color);
  6553  00F046  501C               	movf	drawCircle@x,w,c
  6554  00F048  0800               	sublw	0
  6555  00F04A  240E               	addwf	drawCircle@y0,w,c
  6556  00F04C  6E08               	movwf	drawPixel@y,c
  6557  00F04E  C012  F009         	movff	drawCircle@color,drawPixel@color
  6558  00F052  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6559  00F056  500C               	movf	drawCircle@x0,w,c
  6560  00F058  241E               	addwf	drawCircle@y,w,c
  6561  00F05A  EC25  F06C         	call	_drawPixel
  6562                           
  6563                           ;ST7735_TFT.c: 503: drawPixel(x0 - y, y0 - x, color);
  6564  00F05E  501C               	movf	drawCircle@x,w,c
  6565  00F060  0800               	sublw	0
  6566  00F062  240E               	addwf	drawCircle@y0,w,c
  6567  00F064  6E08               	movwf	drawPixel@y,c
  6568  00F066  C012  F009         	movff	drawCircle@color,drawPixel@color
  6569  00F06A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6570  00F06E  501E               	movf	drawCircle@y,w,c
  6571  00F070  0800               	sublw	0
  6572  00F072  240C               	addwf	drawCircle@x0,w,c
  6573  00F074  EC25  F06C         	call	_drawPixel
  6574  00F078  D000               	goto	l3278
  6575  00F07A                     l3278:
  6576  00F07A  501E               	movf	drawCircle@y,w,c
  6577  00F07C  5C1C               	subwf	drawCircle@x,w,c
  6578  00F07E  501D               	movf	drawCircle@x+1,w,c
  6579  00F080  0A80               	xorlw	128
  6580  00F082  6E14               	movwf	??_drawCircle& (0+255),c
  6581  00F084  501F               	movf	drawCircle@y+1,w,c
  6582  00F086  0A80               	xorlw	128
  6583  00F088  5814               	subwfb	??_drawCircle& (0+255),w,c
  6584  00F08A  A0D8               	btfss	status,0,c
  6585  00F08C  D77E               	goto	l3250
  6586  00F08E  0012               	return		;funcret
  6587  00F090                     __end_of_drawCircle:
  6588                           	opt stack 0
  6589                           tblptru	equ	0xFF8
  6590                           tblptrh	equ	0xFF7
  6591                           tblptrl	equ	0xFF6
  6592                           tablat	equ	0xFF5
  6593                           prodl	equ	0xFF3
  6594                           postinc0	equ	0xFEE
  6595                           wreg	equ	0xFE8
  6596                           postdec1	equ	0xFE5
  6597                           fsr1l	equ	0xFE1
  6598                           status	equ	0xFD8
  6599                           
  6600 ;; *************** function _PED_Control *****************
  6601 ;; Defined at:
  6602 ;;		line 140 in file "lab8.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;  direction       1    wreg     unsigned char 
  6605 ;;  num_sec         1   62[COMRAM] unsigned char 
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  direction       1   63[COMRAM] unsigned char 
  6608 ;;  i               2   64[COMRAM] int 
  6609 ;; Return value:  Size  Location     Type
  6610 ;;		None               void
  6611 ;; Registers used:
  6612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6618 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;Total ram usage:        4 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    9
  6625 ;; This function calls:
  6626 ;;		_Wait_One_Second_With_Beep
  6627 ;;		_update_LCD_PED_Count
  6628 ;; This function is called by:
  6629 ;;		_Day_Mode
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text28
  6634  00DBB2                     __ptext28:
  6635                           	opt stack 0
  6636  00DBB2                     _PED_Control:
  6637                           	opt stack 20
  6638                           
  6639                           ;incstack = 0
  6640                           ;PED_Control@direction stored from wreg
  6641  00DBB2  6E40               	movwf	PED_Control@direction,c
  6642                           
  6643                           ;lab8.c: 147: update_LCD_PED_Count(direction, 0);
  6644  00DBB4  0E00               	movlw	0
  6645  00DBB6  6E3A               	movwf	update_LCD_PED_Count@count,c
  6646  00DBB8  5040               	movf	PED_Control@direction,w,c
  6647  00DBBA  EC68  F071         	call	_update_LCD_PED_Count
  6648                           
  6649                           ;lab8.c: 148: for (int i=num_sec-1; i>0; i--)
  6650  00DBBE  0EFF               	movlw	255
  6651  00DBC0  243F               	addwf	PED_Control@num_sec,w,c
  6652  00DBC2  6E41               	movwf	PED_Control@i,c
  6653  00DBC4  6A42               	clrf	PED_Control@i+1,c
  6654  00DBC6  0EFF               	movlw	255
  6655  00DBC8  2242               	addwfc	PED_Control@i+1,f,c
  6656  00DBCA                     l3680:
  6657  00DBCA  BE42               	btfsc	PED_Control@i+1,7,c
  6658  00DBCC  D013               	goto	l3690
  6659  00DBCE  5042               	movf	PED_Control@i+1,w,c
  6660  00DBD0  E105               	bnz	l3684
  6661  00DBD2  0441               	decf	PED_Control@i,w,c
  6662  00DBD4  A0D8               	btfss	status,0,c
  6663  00DBD6  D00E               	goto	l3690
  6664  00DBD8  D001               	goto	l3684
  6665  00DBDA  D00C               	goto	l3690
  6666  00DBDC                     l3684:
  6667                           
  6668                           ;lab8.c: 149: {
  6669                           ;lab8.c: 152: update_LCD_PED_Count(direction, i);
  6670  00DBDC  C041  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
  6671  00DBE0  5040               	movf	PED_Control@direction,w,c
  6672  00DBE2  EC68  F071         	call	_update_LCD_PED_Count
  6673                           
  6674                           ;lab8.c: 153: Wait_One_Second_With_Beep();
  6675  00DBE6  ECC3  F06B         	call	_Wait_One_Second_With_Beep	;wreg free
  6676  00DBEA  0641               	decf	PED_Control@i,f,c
  6677  00DBEC  A0D8               	btfss	status,0,c
  6678  00DBEE  0642               	decf	PED_Control@i+1,f,c
  6679  00DBF0  D7EC               	goto	l3680
  6680  00DBF2  D7F4               	goto	l3684
  6681  00DBF4                     l3690:
  6682                           
  6683                           ;lab8.c: 154: }
  6684                           ;lab8.c: 155: update_LCD_PED_Count(direction, 0);
  6685  00DBF4  0E00               	movlw	0
  6686  00DBF6  6E3A               	movwf	update_LCD_PED_Count@count,c
  6687  00DBF8  5040               	movf	PED_Control@direction,w,c
  6688  00DBFA  EC68  F071         	call	_update_LCD_PED_Count
  6689                           
  6690                           ;lab8.c: 172: Wait_One_Second_With_Beep();
  6691  00DBFE  ECC3  F06B         	call	_Wait_One_Second_With_Beep	;wreg free
  6692  00DC02  0012               	return		;funcret
  6693  00DC04                     __end_of_PED_Control:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodl	equ	0xFF3
  6700                           postinc0	equ	0xFEE
  6701                           wreg	equ	0xFE8
  6702                           postdec1	equ	0xFE5
  6703                           fsr1l	equ	0xFE1
  6704                           status	equ	0xFD8
  6705                           
  6706 ;; *************** function _update_LCD_PED_Count *****************
  6707 ;; Defined at:
  6708 ;;		line 202 in file "Main_Screen.c"
  6709 ;; Parameters:    Size  Location     Type
  6710 ;;  direction       1    wreg     unsigned char 
  6711 ;;  count           1   57[COMRAM] unsigned char 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;  direction       1   58[COMRAM] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;		None               void
  6716 ;; Registers used:
  6717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6723 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;Total ram usage:        2 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    7
  6730 ;; This function calls:
  6731 ;;		___awdiv
  6732 ;;		___awmod
  6733 ;;		_drawtext
  6734 ;; This function is called by:
  6735 ;;		_PED_Control
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text29
  6740  00E2D0                     __ptext29:
  6741                           	opt stack 0
  6742  00E2D0                     _update_LCD_PED_Count:
  6743                           	opt stack 21
  6744                           
  6745                           ;incstack = 0
  6746                           ;update_LCD_PED_Count@direction stored from wreg
  6747  00E2D0  6E3B               	movwf	update_LCD_PED_Count@direction,c
  6748                           
  6749                           ;Main_Screen.c: 204: switch (direction)
  6750  00E2D2  D057               	goto	l3440
  6751  00E2D4                     l3430:
  6752                           
  6753                           ;Main_Screen.c: 208: PED_NS_Count[0] = count/10 + '0';
  6754  00E2D4  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  6755  00E2D8  6A02               	clrf	___awdiv@dividend+1,c
  6756  00E2DA  0E00               	movlw	0
  6757  00E2DC  6E04               	movwf	___awdiv@divisor+1,c
  6758  00E2DE  0E0A               	movlw	10
  6759  00E2E0  6E03               	movwf	___awdiv@divisor,c
  6760  00E2E2  EC76  F070         	call	___awdiv	;wreg free
  6761  00E2E6  5001               	movf	?___awdiv,w,c
  6762  00E2E8  0F30               	addlw	48
  6763  00E2EA  6E5B               	movwf	_PED_NS_Count,c
  6764                           
  6765                           ;Main_Screen.c: 209: PED_NS_Count[1] = count%10 + '0';
  6766  00E2EC  C03A  F027         	movff	update_LCD_PED_Count@count,___awmod@dividend
  6767  00E2F0  6A28               	clrf	___awmod@dividend+1,c
  6768  00E2F2  0E00               	movlw	0
  6769  00E2F4  6E2A               	movwf	___awmod@divisor+1,c
  6770  00E2F6  0E0A               	movlw	10
  6771  00E2F8  6E29               	movwf	___awmod@divisor,c
  6772  00E2FA  EC62  F06F         	call	___awmod	;wreg free
  6773  00E2FE  5027               	movf	?___awmod,w,c
  6774  00E300  0F30               	addlw	48
  6775  00E302  6E5C               	movwf	_PED_NS_Count+1,c
  6776                           
  6777                           ;Main_Screen.c: 210: drawtext(2, 40, PED_NS_Count, 0xFFE0, 0x0000, 2);
  6778  00E304  0E28               	movlw	40
  6779  00E306  6E29               	movwf	drawtext@y,c
  6780  00E308  0E5B               	movlw	low _PED_NS_Count
  6781  00E30A  6E2A               	movwf	drawtext@_text,c
  6782  00E30C  0E00               	movlw	high _PED_NS_Count
  6783  00E30E  6E2B               	movwf	drawtext@_text+1,c
  6784  00E310  0EFF               	movlw	255
  6785  00E312  6E2D               	movwf	drawtext@color+1,c
  6786  00E314  0EE0               	movlw	224
  6787  00E316  6E2C               	movwf	drawtext@color,c
  6788  00E318  0E00               	movlw	0
  6789  00E31A  6E2F               	movwf	drawtext@bg+1,c
  6790  00E31C  0E00               	movlw	0
  6791  00E31E  6E2E               	movwf	drawtext@bg,c
  6792  00E320  0E02               	movlw	2
  6793  00E322  6E30               	movwf	drawtext@size,c
  6794  00E324  0E02               	movlw	2
  6795  00E326  EC9B  F072         	call	_drawtext
  6796                           
  6797                           ;Main_Screen.c: 211: break;
  6798  00E32A  D033               	goto	l215
  6799  00E32C                     l3434:
  6800                           
  6801                           ;Main_Screen.c: 214: PED_EW_Count[0] = count/10 + '0';
  6802  00E32C  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  6803  00E330  6A02               	clrf	___awdiv@dividend+1,c
  6804  00E332  0E00               	movlw	0
  6805  00E334  6E04               	movwf	___awdiv@divisor+1,c
  6806  00E336  0E0A               	movlw	10
  6807  00E338  6E03               	movwf	___awdiv@divisor,c
  6808  00E33A  EC76  F070         	call	___awdiv	;wreg free
  6809  00E33E  5001               	movf	?___awdiv,w,c
  6810  00E340  0F30               	addlw	48
  6811  00E342  6E58               	movwf	_PED_EW_Count,c
  6812                           
  6813                           ;Main_Screen.c: 215: PED_EW_Count[1] = count%10 + '0';
  6814  00E344  C03A  F027         	movff	update_LCD_PED_Count@count,___awmod@dividend
  6815  00E348  6A28               	clrf	___awmod@dividend+1,c
  6816  00E34A  0E00               	movlw	0
  6817  00E34C  6E2A               	movwf	___awmod@divisor+1,c
  6818  00E34E  0E0A               	movlw	10
  6819  00E350  6E29               	movwf	___awmod@divisor,c
  6820  00E352  EC62  F06F         	call	___awmod	;wreg free
  6821  00E356  5027               	movf	?___awmod,w,c
  6822  00E358  0F30               	addlw	48
  6823  00E35A  6E59               	movwf	_PED_EW_Count+1,c
  6824                           
  6825                           ;Main_Screen.c: 216: drawtext(2, 100, PED_EW_Count, 0x07FF, 0x0000, 2);
  6826  00E35C  0E64               	movlw	100
  6827  00E35E  6E29               	movwf	drawtext@y,c
  6828  00E360  0E58               	movlw	low _PED_EW_Count
  6829  00E362  6E2A               	movwf	drawtext@_text,c
  6830  00E364  0E00               	movlw	high _PED_EW_Count
  6831  00E366  6E2B               	movwf	drawtext@_text+1,c
  6832  00E368  0E07               	movlw	7
  6833  00E36A  6E2D               	movwf	drawtext@color+1,c
  6834  00E36C  682C               	setf	drawtext@color,c
  6835  00E36E  0E00               	movlw	0
  6836  00E370  6E2F               	movwf	drawtext@bg+1,c
  6837  00E372  0E00               	movlw	0
  6838  00E374  6E2E               	movwf	drawtext@bg,c
  6839  00E376  0E02               	movlw	2
  6840  00E378  6E30               	movwf	drawtext@size,c
  6841  00E37A  0E02               	movlw	2
  6842  00E37C  EC9B  F072         	call	_drawtext
  6843                           
  6844                           ;Main_Screen.c: 219: }
  6845                           
  6846                           ;Main_Screen.c: 217: break;
  6847  00E380  D008               	goto	l215
  6848  00E382                     l3440:
  6849  00E382  503B               	movf	update_LCD_PED_Count@direction,w,c
  6850                           
  6851                           ; Switch size 1, requested type "space"
  6852                           ; Number of cases is 2, Range of values is 0 to 2
  6853                           ; switch strategies available:
  6854                           ; Name         Instructions Cycles
  6855                           ; simple_byte            7     4 (average)
  6856                           ;	Chosen strategy is simple_byte
  6857  00E384  0A00               	xorlw	0	; case 0
  6858  00E386  B4D8               	btfsc	status,2,c
  6859  00E388  D7A5               	goto	l3430
  6860  00E38A  0A02               	xorlw	2	; case 2
  6861  00E38C  B4D8               	btfsc	status,2,c
  6862  00E38E  D7CE               	goto	l3434
  6863  00E390  D000               	goto	l215
  6864  00E392                     l215:
  6865  00E392  0012               	return		;funcret
  6866  00E394                     __end_of_update_LCD_PED_Count:
  6867                           	opt stack 0
  6868                           tblptru	equ	0xFF8
  6869                           tblptrh	equ	0xFF7
  6870                           tblptrl	equ	0xFF6
  6871                           tablat	equ	0xFF5
  6872                           prodl	equ	0xFF3
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           postdec1	equ	0xFE5
  6876                           fsr1l	equ	0xFE1
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function ___awdiv *****************
  6880 ;; Defined at:
  6881 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  dividend        2    0[COMRAM] int 
  6884 ;;  divisor         2    2[COMRAM] int 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  quotient        2    6[COMRAM] int 
  6887 ;;  sign            1    5[COMRAM] unsigned char 
  6888 ;;  counter         1    4[COMRAM] unsigned char 
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  2    0[COMRAM] int 
  6891 ;; Registers used:
  6892 ;;		wreg, status,2, status,0
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6898 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;Total ram usage:        8 bytes
  6903 ;; Hardware stack levels used:    1
  6904 ;; This function calls:
  6905 ;;		Nothing
  6906 ;; This function is called by:
  6907 ;;		_update_LCD_PED_Count
  6908 ;;		_update_LCD_count
  6909 ;;		_dec_2_bcd
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           	psect	text30
  6914  00E0EC                     __ptext30:
  6915                           	opt stack 0
  6916  00E0EC                     ___awdiv:
  6917                           	opt stack 27
  6918                           
  6919                           ;incstack = 0
  6920  00E0EC  0E00               	movlw	0
  6921  00E0EE  6E06               	movwf	___awdiv@sign,c
  6922  00E0F0  AE04               	btfss	___awdiv@divisor+1,7,c
  6923  00E0F2  D007               	goto	l3374
  6924  00E0F4  6C03               	negf	___awdiv@divisor,c
  6925  00E0F6  1E04               	comf	___awdiv@divisor+1,f,c
  6926  00E0F8  B0D8               	btfsc	status,0,c
  6927  00E0FA  2A04               	incf	___awdiv@divisor+1,f,c
  6928  00E0FC  0E01               	movlw	1
  6929  00E0FE  6E06               	movwf	___awdiv@sign,c
  6930  00E100  D000               	goto	l3374
  6931  00E102                     l3374:
  6932  00E102  AE02               	btfss	___awdiv@dividend+1,7,c
  6933  00E104  D007               	goto	l3380
  6934  00E106  6C01               	negf	___awdiv@dividend,c
  6935  00E108  1E02               	comf	___awdiv@dividend+1,f,c
  6936  00E10A  B0D8               	btfsc	status,0,c
  6937  00E10C  2A02               	incf	___awdiv@dividend+1,f,c
  6938  00E10E  0E01               	movlw	1
  6939  00E110  1A06               	xorwf	___awdiv@sign,f,c
  6940  00E112  D000               	goto	l3380
  6941  00E114                     l3380:
  6942  00E114  0E00               	movlw	0
  6943  00E116  6E08               	movwf	___awdiv@quotient+1,c
  6944  00E118  0E00               	movlw	0
  6945  00E11A  6E07               	movwf	___awdiv@quotient,c
  6946  00E11C  5003               	movf	___awdiv@divisor,w,c
  6947  00E11E  1004               	iorwf	___awdiv@divisor+1,w,c
  6948  00E120  B4D8               	btfsc	status,2,c
  6949  00E122  D021               	goto	l3402
  6950  00E124  0E01               	movlw	1
  6951  00E126  6E05               	movwf	___awdiv@counter,c
  6952  00E128  D005               	goto	l3388
  6953  00E12A                     l3386:
  6954  00E12A  90D8               	bcf	status,0,c
  6955  00E12C  3603               	rlcf	___awdiv@divisor,f,c
  6956  00E12E  3604               	rlcf	___awdiv@divisor+1,f,c
  6957  00E130  2A05               	incf	___awdiv@counter,f,c
  6958  00E132  D000               	goto	l3388
  6959  00E134                     l3388:
  6960  00E134  BE04               	btfsc	___awdiv@divisor+1,7,c
  6961  00E136  D002               	goto	l3390
  6962  00E138  D7F8               	goto	l3386
  6963  00E13A  D000               	goto	l3390
  6964  00E13C                     l3390:
  6965  00E13C  90D8               	bcf	status,0,c
  6966  00E13E  3607               	rlcf	___awdiv@quotient,f,c
  6967  00E140  3608               	rlcf	___awdiv@quotient+1,f,c
  6968  00E142  5003               	movf	___awdiv@divisor,w,c
  6969  00E144  5C01               	subwf	___awdiv@dividend,w,c
  6970  00E146  5004               	movf	___awdiv@divisor+1,w,c
  6971  00E148  5802               	subwfb	___awdiv@dividend+1,w,c
  6972  00E14A  A0D8               	btfss	status,0,c
  6973  00E14C  D006               	goto	l3398
  6974  00E14E  5003               	movf	___awdiv@divisor,w,c
  6975  00E150  5E01               	subwf	___awdiv@dividend,f,c
  6976  00E152  5004               	movf	___awdiv@divisor+1,w,c
  6977  00E154  5A02               	subwfb	___awdiv@dividend+1,f,c
  6978  00E156  8007               	bsf	___awdiv@quotient,0,c
  6979  00E158  D000               	goto	l3398
  6980  00E15A                     l3398:
  6981  00E15A  90D8               	bcf	status,0,c
  6982  00E15C  3204               	rrcf	___awdiv@divisor+1,f,c
  6983  00E15E  3203               	rrcf	___awdiv@divisor,f,c
  6984  00E160  2E05               	decfsz	___awdiv@counter,f,c
  6985  00E162  D7EC               	goto	l3390
  6986  00E164  D000               	goto	l3402
  6987  00E166                     l3402:
  6988  00E166  5006               	movf	___awdiv@sign,w,c
  6989  00E168  B4D8               	btfsc	status,2,c
  6990  00E16A  D005               	goto	l3406
  6991  00E16C  6C07               	negf	___awdiv@quotient,c
  6992  00E16E  1E08               	comf	___awdiv@quotient+1,f,c
  6993  00E170  B0D8               	btfsc	status,0,c
  6994  00E172  2A08               	incf	___awdiv@quotient+1,f,c
  6995  00E174  D000               	goto	l3406
  6996  00E176                     l3406:
  6997  00E176  C007  F001         	movff	___awdiv@quotient,?___awdiv
  6998  00E17A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  6999  00E17E  D000               	goto	l818
  7000  00E180                     l818:
  7001  00E180  0012               	return		;funcret
  7002  00E182                     __end_of___awdiv:
  7003                           	opt stack 0
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodl	equ	0xFF3
  7009                           postinc0	equ	0xFEE
  7010                           wreg	equ	0xFE8
  7011                           postdec1	equ	0xFE5
  7012                           fsr1l	equ	0xFE1
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function _Wait_One_Second_With_Beep *****************
  7016 ;; Defined at:
  7017 ;;		line 100 in file "utils.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;		None
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;		None
  7022 ;; Return value:  Size  Location     Type
  7023 ;;		None               void
  7024 ;; Registers used:
  7025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;Total ram usage:        0 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    8
  7038 ;; This function calls:
  7039 ;;		_Activate_Buzzer
  7040 ;;		_Deactivate_Buzzer
  7041 ;;		_Draw_Star
  7042 ;;		_Erase_Star
  7043 ;;		_Wait_Half_Second
  7044 ;;		_update_LCD_misc
  7045 ;; This function is called by:
  7046 ;;		_PED_Control
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text31
  7051  00D786                     __ptext31:
  7052                           	opt stack 0
  7053  00D786                     _Wait_One_Second_With_Beep:
  7054                           	opt stack 20
  7055                           
  7056                           ;utils.c: 102: PORTDbits.RD7 = 1;
  7057                           
  7058                           ;incstack = 0
  7059  00D786  8E83               	bsf	3971,7,c	;volatile
  7060                           
  7061                           ;utils.c: 103: Draw_Star();
  7062  00D788  EC6F  F06C         	call	_Draw_Star	;wreg free
  7063                           
  7064                           ;utils.c: 104: Activate_Buzzer();
  7065  00D78C  EC6A  F06B         	call	_Activate_Buzzer	;wreg free
  7066                           
  7067                           ;utils.c: 105: Wait_Half_Second();
  7068  00D790  EC9B  F06B         	call	_Wait_Half_Second	;wreg free
  7069                           
  7070                           ;utils.c: 107: PORTDbits.RD7 = 0;
  7071  00D794  9E83               	bcf	3971,7,c	;volatile
  7072                           
  7073                           ;utils.c: 108: Erase_Star();
  7074  00D796  EC8C  F06C         	call	_Erase_Star	;wreg free
  7075                           
  7076                           ;utils.c: 109: Deactivate_Buzzer();
  7077  00D79A  EC4F  F06B         	call	_Deactivate_Buzzer	;wreg free
  7078                           
  7079                           ;utils.c: 110: Wait_Half_Second();
  7080  00D79E  EC9B  F06B         	call	_Wait_Half_Second	;wreg free
  7081                           
  7082                           ;utils.c: 111: update_LCD_misc();
  7083  00D7A2  EC48  F078         	call	_update_LCD_misc	;wreg free
  7084  00D7A6  0012               	return		;funcret
  7085  00D7A8                     __end_of_Wait_One_Second_With_Beep:
  7086                           	opt stack 0
  7087                           tblptru	equ	0xFF8
  7088                           tblptrh	equ	0xFF7
  7089                           tblptrl	equ	0xFF6
  7090                           tablat	equ	0xFF5
  7091                           prodl	equ	0xFF3
  7092                           postinc0	equ	0xFEE
  7093                           wreg	equ	0xFE8
  7094                           postdec1	equ	0xFE5
  7095                           fsr1l	equ	0xFE1
  7096                           status	equ	0xFD8
  7097                           
  7098 ;; *************** function _update_LCD_misc *****************
  7099 ;; Defined at:
  7100 ;;		line 253 in file "Main_Screen.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;		None
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;  volt            3   59[COMRAM] float 
  7105 ;;  nStep           2   57[COMRAM] int 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;		None               void
  7108 ;; Registers used:
  7109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7116 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;Total ram usage:        5 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    7
  7122 ;; This function calls:
  7123 ;;		_Read_Volt
  7124 ;;		___awmod
  7125 ;;		___ftge
  7126 ;;		___ftmul
  7127 ;;		___fttol
  7128 ;;		_drawtext
  7129 ;;		_get_full_ADC
  7130 ;; This function is called by:
  7131 ;;		_Wait_One_Second
  7132 ;;		_Wait_One_Second_With_Beep
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text32
  7137  00F090                     __ptext32:
  7138                           	opt stack 0
  7139  00F090                     _update_LCD_misc:
  7140                           	opt stack 20
  7141                           
  7142                           ;Main_Screen.c: 255: int nStep = get_full_ADC();
  7143                           
  7144                           ;incstack = 0
  7145  00F090  ECD4  F06B         	call	_get_full_ADC	;wreg free
  7146  00F094  C001  F03A         	movff	?_get_full_ADC,update_LCD_misc@nStep
  7147  00F098  C002  F03B         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  7148                           
  7149                           ;Main_Screen.c: 256: float volt = Read_Volt (0);
  7150  00F09C  0E00               	movlw	0
  7151  00F09E  ECB8  F06E         	call	_Read_Volt
  7152  00F0A2  C01C  F03C         	movff	?_Read_Volt,update_LCD_misc@volt
  7153  00F0A6  C01D  F03D         	movff	?_Read_Volt+1,update_LCD_misc@volt+1
  7154  00F0AA  C01E  F03E         	movff	?_Read_Volt+2,update_LCD_misc@volt+2
  7155                           
  7156                           ;Main_Screen.c: 257: Light_Sensor = volt < 2.5 ? 1:0;
  7157  00F0AE  C03C  F001         	movff	update_LCD_misc@volt,___ftge@ff1
  7158  00F0B2  C03D  F002         	movff	update_LCD_misc@volt+1,___ftge@ff1+1
  7159  00F0B6  C03E  F003         	movff	update_LCD_misc@volt+2,___ftge@ff1+2
  7160  00F0BA  0E00               	movlw	0
  7161  00F0BC  6E04               	movwf	___ftge@ff2,c
  7162  00F0BE  0E20               	movlw	32
  7163  00F0C0  6E05               	movwf	___ftge@ff2+1,c
  7164  00F0C2  0E40               	movlw	64
  7165  00F0C4  6E06               	movwf	___ftge@ff2+2,c
  7166  00F0C6  EC2B  F070         	call	___ftge	;wreg free
  7167  00F0CA  B0D8               	btfsc	status,0,c
  7168  00F0CC  D002               	goto	u2200
  7169  00F0CE  0E01               	movlw	1
  7170  00F0D0  D001               	goto	u2210
  7171  00F0D2                     u2200:
  7172  00F0D2  0E00               	movlw	0
  7173  00F0D4                     u2210:
  7174  00F0D4  6E74               	movwf	_Light_Sensor,c
  7175                           
  7176                           ;Main_Screen.c: 258: Light_Sensor_Voltage_Txt[0] = ((int) volt + '0');
  7177  00F0D6  C03C  F018         	movff	update_LCD_misc@volt,___fttol@f1
  7178  00F0DA  C03D  F019         	movff	update_LCD_misc@volt+1,___fttol@f1+1
  7179  00F0DE  C03E  F01A         	movff	update_LCD_misc@volt+2,___fttol@f1+2
  7180  00F0E2  EC7B  F073         	call	___fttol	;wreg free
  7181  00F0E6  5018               	movf	?___fttol,w,c
  7182  00F0E8  0F30               	addlw	48
  7183  00F0EA  6E44               	movwf	_Light_Sensor_Voltage_Txt,c
  7184                           
  7185                           ;Main_Screen.c: 259: Light_Sensor_Voltage_Txt[2] = ((((int) (volt*10))%10) + '0');
  7186  00F0EC  0E00               	movlw	0
  7187  00F0EE  6E0C               	movwf	___ftmul@f2,c
  7188  00F0F0  0E20               	movlw	32
  7189  00F0F2  6E0D               	movwf	___ftmul@f2+1,c
  7190  00F0F4  0E41               	movlw	65
  7191  00F0F6  6E0E               	movwf	___ftmul@f2+2,c
  7192  00F0F8  C03C  F009         	movff	update_LCD_misc@volt,___ftmul@f1
  7193  00F0FC  C03D  F00A         	movff	update_LCD_misc@volt+1,___ftmul@f1+1
  7194  00F100  C03E  F00B         	movff	update_LCD_misc@volt+2,___ftmul@f1+2
  7195  00F104  EC67  F074         	call	___ftmul	;wreg free
  7196  00F108  C009  F018         	movff	?___ftmul,___fttol@f1
  7197  00F10C  C00A  F019         	movff	?___ftmul+1,___fttol@f1+1
  7198  00F110  C00B  F01A         	movff	?___ftmul+2,___fttol@f1+2
  7199  00F114  EC7B  F073         	call	___fttol	;wreg free
  7200  00F118  C018  F027         	movff	?___fttol,___awmod@dividend
  7201  00F11C  C019  F028         	movff	?___fttol+1,___awmod@dividend+1
  7202  00F120  0E00               	movlw	0
  7203  00F122  6E2A               	movwf	___awmod@divisor+1,c
  7204  00F124  0E0A               	movlw	10
  7205  00F126  6E29               	movwf	___awmod@divisor,c
  7206  00F128  EC62  F06F         	call	___awmod	;wreg free
  7207  00F12C  5027               	movf	?___awmod,w,c
  7208  00F12E  0F30               	addlw	48
  7209  00F130  6E46               	movwf	_Light_Sensor_Voltage_Txt+2,c
  7210                           
  7211                           ;Main_Screen.c: 260: if (Light_Sensor == 0) Light_Sensor_Mode_Txt[1] = 'N'; else Light_S
      +                          ensor_Mode_Txt[1] = 'D';
  7212  00F132  5074               	movf	_Light_Sensor,w,c
  7213  00F134  A4D8               	btfss	status,2,c
  7214  00F136  D002               	goto	l3296
  7215  00F138  0E4E               	movlw	78
  7216  00F13A  D001               	goto	L10
  7217  00F13C                     l3296:
  7218  00F13C  0E44               	movlw	68
  7219  00F13E                     L10:
  7220  00F13E  6E50               	movwf	_Light_Sensor_Mode_Txt+1,c
  7221                           
  7222                           ;Main_Screen.c: 261: if (MODE == 0) Act_Mode_Txt[0] = 'N'; else Act_Mode_Txt[0] = 'D';
  7223  00F140  5075               	movf	_MODE,w,c
  7224  00F142  A4D8               	btfss	status,2,c
  7225  00F144  D002               	goto	l3300
  7226  00F146  0E4E               	movlw	78
  7227  00F148  D001               	goto	L11
  7228  00F14A                     l3300:
  7229  00F14A  0E44               	movlw	68
  7230  00F14C                     L11:
  7231  00F14C  6E5E               	movwf	_Act_Mode_Txt,c
  7232  00F14E  D000               	goto	l3302
  7233  00F150                     l3302:
  7234                           
  7235                           ;Main_Screen.c: 263: SW_EWPED = PORTAbits.RA1;
  7236  00F150  0E00               	movlw	0
  7237  00F152  B280               	btfsc	3968,1,c	;volatile
  7238  00F154  0E01               	movlw	1
  7239  00F156  6E78               	movwf	_SW_EWPED,c
  7240                           
  7241                           ;Main_Screen.c: 264: SW_EWLT = PORTAbits.RA3;
  7242  00F158  0E00               	movlw	0
  7243  00F15A  B680               	btfsc	3968,3,c	;volatile
  7244  00F15C  0E01               	movlw	1
  7245  00F15E  6E77               	movwf	_SW_EWLT,c
  7246                           
  7247                           ;Main_Screen.c: 265: SW_NSPED = PORTAbits.RA2;
  7248  00F160  0E00               	movlw	0
  7249  00F162  B480               	btfsc	3968,2,c	;volatile
  7250  00F164  0E01               	movlw	1
  7251  00F166  6E7A               	movwf	_SW_NSPED,c
  7252                           
  7253                           ;Main_Screen.c: 266: SW_NSLT = PORTAbits.RA4;
  7254  00F168  0E00               	movlw	0
  7255  00F16A  B880               	btfsc	3968,4,c	;volatile
  7256  00F16C  0E01               	movlw	1
  7257  00F16E  6E79               	movwf	_SW_NSLT,c
  7258                           
  7259                           ;Main_Screen.c: 269: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1
      +                          ';
  7260  00F170  507A               	movf	_SW_NSPED,w,c
  7261  00F172  A4D8               	btfss	status,2,c
  7262  00F174  D002               	goto	l3312
  7263  00F176  0E30               	movlw	48
  7264  00F178  D001               	goto	L12
  7265  00F17A                     l3312:
  7266  00F17A  0E31               	movlw	49
  7267  00F17C                     L12:
  7268  00F17C  6E6A               	movwf	_SW_NSPED_Txt,c
  7269                           
  7270                           ;Main_Screen.c: 270: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  7271  00F17E  5079               	movf	_SW_NSLT,w,c
  7272  00F180  A4D8               	btfss	status,2,c
  7273  00F182  D002               	goto	l3316
  7274  00F184  0E30               	movlw	48
  7275  00F186  D001               	goto	L13
  7276  00F188                     l3316:
  7277  00F188  0E31               	movlw	49
  7278  00F18A                     L13:
  7279  00F18A  6E68               	movwf	_SW_NSLT_Txt,c
  7280                           
  7281                           ;Main_Screen.c: 271: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1
      +                          ';
  7282  00F18C  5078               	movf	_SW_EWPED,w,c
  7283  00F18E  A4D8               	btfss	status,2,c
  7284  00F190  D002               	goto	l3320
  7285  00F192  0E30               	movlw	48
  7286  00F194  D001               	goto	L14
  7287  00F196                     l3320:
  7288  00F196  0E31               	movlw	49
  7289  00F198                     L14:
  7290  00F198  6E66               	movwf	_SW_EWPED_Txt,c
  7291                           
  7292                           ;Main_Screen.c: 272: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  7293  00F19A  5077               	movf	_SW_EWLT,w,c
  7294  00F19C  A4D8               	btfss	status,2,c
  7295  00F19E  D002               	goto	l3324
  7296  00F1A0  0E30               	movlw	48
  7297  00F1A2  D001               	goto	L15
  7298  00F1A4                     l3324:
  7299  00F1A4  0E31               	movlw	49
  7300  00F1A6                     L15:
  7301  00F1A6  6E64               	movwf	_SW_EWLT_Txt,c
  7302  00F1A8  D000               	goto	l3326
  7303  00F1AA                     l3326:
  7304                           
  7305                           ;Main_Screen.c: 274: drawtext(35, 2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  7306  00F1AA  0E02               	movlw	2
  7307  00F1AC  6E29               	movwf	drawtext@y,c
  7308  00F1AE  0E5E               	movlw	low _Act_Mode_Txt
  7309  00F1B0  6E2A               	movwf	drawtext@_text,c
  7310  00F1B2  0E00               	movlw	high _Act_Mode_Txt
  7311  00F1B4  6E2B               	movwf	drawtext@_text+1,c
  7312  00F1B6  0EFF               	movlw	255
  7313  00F1B8  6E2D               	movwf	drawtext@color+1,c
  7314  00F1BA  682C               	setf	drawtext@color,c
  7315  00F1BC  0E00               	movlw	0
  7316  00F1BE  6E2F               	movwf	drawtext@bg+1,c
  7317  00F1C0  0E00               	movlw	0
  7318  00F1C2  6E2E               	movwf	drawtext@bg,c
  7319  00F1C4  0E01               	movlw	1
  7320  00F1C6  6E30               	movwf	drawtext@size,c
  7321  00F1C8  0E23               	movlw	35
  7322  00F1CA  EC9B  F072         	call	_drawtext
  7323                           
  7324                           ;Main_Screen.c: 275: drawtext(75, 2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  7325  00F1CE  0E02               	movlw	2
  7326  00F1D0  6E29               	movwf	drawtext@y,c
  7327  00F1D2  0E44               	movlw	low _Light_Sensor_Voltage_Txt
  7328  00F1D4  6E2A               	movwf	drawtext@_text,c
  7329  00F1D6  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  7330  00F1D8  6E2B               	movwf	drawtext@_text+1,c
  7331  00F1DA  0EFF               	movlw	255
  7332  00F1DC  6E2D               	movwf	drawtext@color+1,c
  7333  00F1DE  682C               	setf	drawtext@color,c
  7334  00F1E0  0E00               	movlw	0
  7335  00F1E2  6E2F               	movwf	drawtext@bg+1,c
  7336  00F1E4  0E00               	movlw	0
  7337  00F1E6  6E2E               	movwf	drawtext@bg,c
  7338  00F1E8  0E01               	movlw	1
  7339  00F1EA  6E30               	movwf	drawtext@size,c
  7340  00F1EC  0E4B               	movlw	75
  7341  00F1EE  EC9B  F072         	call	_drawtext
  7342                           
  7343                           ;Main_Screen.c: 276: drawtext(100, 2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  7344  00F1F2  0E02               	movlw	2
  7345  00F1F4  6E29               	movwf	drawtext@y,c
  7346  00F1F6  0E4F               	movlw	low _Light_Sensor_Mode_Txt
  7347  00F1F8  6E2A               	movwf	drawtext@_text,c
  7348  00F1FA  0E00               	movlw	high _Light_Sensor_Mode_Txt
  7349  00F1FC  6E2B               	movwf	drawtext@_text+1,c
  7350  00F1FE  0EFF               	movlw	255
  7351  00F200  6E2D               	movwf	drawtext@color+1,c
  7352  00F202  682C               	setf	drawtext@color,c
  7353  00F204  0E00               	movlw	0
  7354  00F206  6E2F               	movwf	drawtext@bg+1,c
  7355  00F208  0E00               	movlw	0
  7356  00F20A  6E2E               	movwf	drawtext@bg,c
  7357  00F20C  0E01               	movlw	1
  7358  00F20E  6E30               	movwf	drawtext@size,c
  7359  00F210  0E64               	movlw	100
  7360  00F212  EC9B  F072         	call	_drawtext
  7361                           
  7362                           ;Main_Screen.c: 280: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  7363  00F216  0E14               	movlw	20
  7364  00F218  6E29               	movwf	drawtext@y,c
  7365  00F21A  0E6A               	movlw	low _SW_NSPED_Txt
  7366  00F21C  6E2A               	movwf	drawtext@_text,c
  7367  00F21E  0E00               	movlw	high _SW_NSPED_Txt
  7368  00F220  6E2B               	movwf	drawtext@_text+1,c
  7369  00F222  0EFF               	movlw	255
  7370  00F224  6E2D               	movwf	drawtext@color+1,c
  7371  00F226  682C               	setf	drawtext@color,c
  7372  00F228  0E00               	movlw	0
  7373  00F22A  6E2F               	movwf	drawtext@bg+1,c
  7374  00F22C  0E00               	movlw	0
  7375  00F22E  6E2E               	movwf	drawtext@bg,c
  7376  00F230  0E01               	movlw	1
  7377  00F232  6E30               	movwf	drawtext@size,c
  7378  00F234  0E08               	movlw	8
  7379  00F236  EC9B  F072         	call	_drawtext
  7380                           
  7381                           ;Main_Screen.c: 281: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  7382  00F23A  0E14               	movlw	20
  7383  00F23C  6E29               	movwf	drawtext@y,c
  7384  00F23E  0E68               	movlw	low _SW_NSLT_Txt
  7385  00F240  6E2A               	movwf	drawtext@_text,c
  7386  00F242  0E00               	movlw	high _SW_NSLT_Txt
  7387  00F244  6E2B               	movwf	drawtext@_text+1,c
  7388  00F246  0EFF               	movlw	255
  7389  00F248  6E2D               	movwf	drawtext@color+1,c
  7390  00F24A  682C               	setf	drawtext@color,c
  7391  00F24C  0E00               	movlw	0
  7392  00F24E  6E2F               	movwf	drawtext@bg+1,c
  7393  00F250  0E00               	movlw	0
  7394  00F252  6E2E               	movwf	drawtext@bg,c
  7395  00F254  0E01               	movlw	1
  7396  00F256  6E30               	movwf	drawtext@size,c
  7397  00F258  0E23               	movlw	35
  7398  00F25A  EC9B  F072         	call	_drawtext
  7399                           
  7400                           ;Main_Screen.c: 282: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  7401  00F25E  0E14               	movlw	20
  7402  00F260  6E29               	movwf	drawtext@y,c
  7403  00F262  0E66               	movlw	low _SW_EWPED_Txt
  7404  00F264  6E2A               	movwf	drawtext@_text,c
  7405  00F266  0E00               	movlw	high _SW_EWPED_Txt
  7406  00F268  6E2B               	movwf	drawtext@_text+1,c
  7407  00F26A  0EFF               	movlw	255
  7408  00F26C  6E2D               	movwf	drawtext@color+1,c
  7409  00F26E  682C               	setf	drawtext@color,c
  7410  00F270  0E00               	movlw	0
  7411  00F272  6E2F               	movwf	drawtext@bg+1,c
  7412  00F274  0E00               	movlw	0
  7413  00F276  6E2E               	movwf	drawtext@bg,c
  7414  00F278  0E01               	movlw	1
  7415  00F27A  6E30               	movwf	drawtext@size,c
  7416  00F27C  0E3C               	movlw	60
  7417  00F27E  EC9B  F072         	call	_drawtext
  7418                           
  7419                           ;Main_Screen.c: 283: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  7420  00F282  0E14               	movlw	20
  7421  00F284  6E29               	movwf	drawtext@y,c
  7422  00F286  0E64               	movlw	low _SW_EWLT_Txt
  7423  00F288  6E2A               	movwf	drawtext@_text,c
  7424  00F28A  0E00               	movlw	high _SW_EWLT_Txt
  7425  00F28C  6E2B               	movwf	drawtext@_text+1,c
  7426  00F28E  0EFF               	movlw	255
  7427  00F290  6E2D               	movwf	drawtext@color+1,c
  7428  00F292  682C               	setf	drawtext@color,c
  7429  00F294  0E00               	movlw	0
  7430  00F296  6E2F               	movwf	drawtext@bg+1,c
  7431  00F298  0E00               	movlw	0
  7432  00F29A  6E2E               	movwf	drawtext@bg,c
  7433  00F29C  0E01               	movlw	1
  7434  00F29E  6E30               	movwf	drawtext@size,c
  7435  00F2A0  0E55               	movlw	85
  7436  00F2A2  EC9B  F072         	call	_drawtext
  7437                           
  7438                           ;Main_Screen.c: 284: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  7439  00F2A6  0E14               	movlw	20
  7440  00F2A8  6E29               	movwf	drawtext@y,c
  7441  00F2AA  0E60               	movlw	low _FlashingR_Txt
  7442  00F2AC  6E2A               	movwf	drawtext@_text,c
  7443  00F2AE  0E00               	movlw	high _FlashingR_Txt
  7444  00F2B0  6E2B               	movwf	drawtext@_text+1,c
  7445  00F2B2  0EFF               	movlw	255
  7446  00F2B4  6E2D               	movwf	drawtext@color+1,c
  7447  00F2B6  682C               	setf	drawtext@color,c
  7448  00F2B8  0E00               	movlw	0
  7449  00F2BA  6E2F               	movwf	drawtext@bg+1,c
  7450  00F2BC  0E00               	movlw	0
  7451  00F2BE  6E2E               	movwf	drawtext@bg,c
  7452  00F2C0  0E01               	movlw	1
  7453  00F2C2  6E30               	movwf	drawtext@size,c
  7454  00F2C4  0E6C               	movlw	108
  7455  00F2C6  EC9B  F072         	call	_drawtext
  7456                           
  7457                           ;Main_Screen.c: 285: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  7458  00F2CA  0E14               	movlw	20
  7459  00F2CC  6E29               	movwf	drawtext@y,c
  7460  00F2CE  0E62               	movlw	low _FlashingS_Txt
  7461  00F2D0  6E2A               	movwf	drawtext@_text,c
  7462  00F2D2  0E00               	movlw	high _FlashingS_Txt
  7463  00F2D4  6E2B               	movwf	drawtext@_text+1,c
  7464  00F2D6  0EFF               	movlw	255
  7465  00F2D8  6E2D               	movwf	drawtext@color+1,c
  7466  00F2DA  682C               	setf	drawtext@color,c
  7467  00F2DC  0E00               	movlw	0
  7468  00F2DE  6E2F               	movwf	drawtext@bg+1,c
  7469  00F2E0  0E00               	movlw	0
  7470  00F2E2  6E2E               	movwf	drawtext@bg,c
  7471  00F2E4  0E01               	movlw	1
  7472  00F2E6  6E30               	movwf	drawtext@size,c
  7473  00F2E8  0E77               	movlw	119
  7474  00F2EA  EC9B  F072         	call	_drawtext
  7475  00F2EE  0012               	return		;funcret
  7476  00F2F0                     __end_of_update_LCD_misc:
  7477                           	opt stack 0
  7478                           tblptru	equ	0xFF8
  7479                           tblptrh	equ	0xFF7
  7480                           tblptrl	equ	0xFF6
  7481                           tablat	equ	0xFF5
  7482                           prodl	equ	0xFF3
  7483                           postinc0	equ	0xFEE
  7484                           wreg	equ	0xFE8
  7485                           postdec1	equ	0xFE5
  7486                           fsr1l	equ	0xFE1
  7487                           status	equ	0xFD8
  7488                           
  7489 ;; *************** function ___fttol *****************
  7490 ;; Defined at:
  7491 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;  f1              3   23[COMRAM] float 
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;  lval            4   33[COMRAM] unsigned long 
  7496 ;;  exp1            1   37[COMRAM] unsigned char 
  7497 ;;  sign1           1   32[COMRAM] unsigned char 
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  4   23[COMRAM] long 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7507 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;Total ram usage:       15 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; This function calls:
  7514 ;;		Nothing
  7515 ;; This function is called by:
  7516 ;;		_update_LCD_misc
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text33
  7521  00E6F6                     __ptext33:
  7522                           	opt stack 0
  7523  00E6F6                     ___fttol:
  7524                           	opt stack 26
  7525                           
  7526                           ;incstack = 0
  7527  00E6F6  C01A  F01C         	movff	___fttol@f1+2,??___fttol
  7528  00E6FA  6A1D               	clrf	(??___fttol+1)& (0+255),c
  7529  00E6FC  6A1E               	clrf	(??___fttol+2)& (0+255),c
  7530  00E6FE  3419               	rlcf	___fttol@f1+1,w,c
  7531  00E700  361C               	rlcf	??___fttol& (0+255),f,c
  7532  00E702  E301               	bnc	u2101
  7533  00E704  801D               	bsf	(??___fttol+1)& (0+255),0,c
  7534  00E706                     u2101:
  7535  00E706  501C               	movf	??___fttol,w,c
  7536  00E708  6E26               	movwf	___fttol@exp1,c
  7537  00E70A  5026               	movf	___fttol@exp1,w,c
  7538  00E70C  A4D8               	btfss	status,2,c
  7539  00E70E  D002               	goto	l3192
  7540  00E710  D039               	goto	l3216
  7541  00E712  D063               	goto	l1041
  7542  00E714                     l3192:
  7543  00E714  0E17               	movlw	23
  7544  00E716  6E1C               	movwf	??___fttol& (0+255),c
  7545  00E718  C018  F01D         	movff	___fttol@f1,??___fttol+1
  7546  00E71C  C019  F01E         	movff	___fttol@f1+1,??___fttol+2
  7547  00E720  C01A  F01F         	movff	___fttol@f1+2,??___fttol+3
  7548  00E724  281C               	incf	??___fttol,w,c
  7549  00E726  6E20               	movwf	(??___fttol+4)& (0+255),c
  7550  00E728  D004               	goto	u2120
  7551  00E72A                     u2125:
  7552  00E72A  90D8               	bcf	status,0,c
  7553  00E72C  321F               	rrcf	??___fttol+3,f,c
  7554  00E72E  321E               	rrcf	??___fttol+2,f,c
  7555  00E730  321D               	rrcf	??___fttol+1,f,c
  7556  00E732                     u2120:
  7557  00E732  2E20               	decfsz	(??___fttol+4)& (0+255),f,c
  7558  00E734  D7FA               	goto	u2125
  7559  00E736  501D               	movf	??___fttol+1,w,c
  7560  00E738  6E21               	movwf	___fttol@sign1,c
  7561  00E73A  8E19               	bsf	___fttol@f1+1,7,c
  7562  00E73C  0EFF               	movlw	255
  7563  00E73E  1618               	andwf	___fttol@f1,f,c
  7564  00E740  0EFF               	movlw	255
  7565  00E742  1619               	andwf	___fttol@f1+1,f,c
  7566  00E744  0E00               	movlw	0
  7567  00E746  161A               	andwf	___fttol@f1+2,f,c
  7568  00E748  5018               	movf	___fttol@f1,w,c
  7569  00E74A  6E22               	movwf	___fttol@lval,c
  7570  00E74C  5019               	movf	___fttol@f1+1,w,c
  7571  00E74E  6E23               	movwf	___fttol@lval+1,c
  7572  00E750  501A               	movf	___fttol@f1+2,w,c
  7573  00E752  6E24               	movwf	___fttol@lval+2,c
  7574  00E754  6A25               	clrf	___fttol@lval+3,c
  7575  00E756  0E8E               	movlw	142
  7576  00E758  5E26               	subwf	___fttol@exp1,f,c
  7577  00E75A  AE26               	btfss	___fttol@exp1,7,c
  7578  00E75C  D010               	goto	l3214
  7579  00E75E  5026               	movf	___fttol@exp1,w,c
  7580  00E760  0A80               	xorlw	128
  7581  00E762  0F8F               	addlw	143
  7582  00E764  B0D8               	btfsc	status,0,c
  7583  00E766  D003               	goto	l3210
  7584  00E768  D00D               	goto	l3216
  7585  00E76A  D037               	goto	l1041
  7586  00E76C  D000               	goto	l3210
  7587  00E76E                     l3210:
  7588  00E76E  90D8               	bcf	status,0,c
  7589  00E770  3225               	rrcf	___fttol@lval+3,f,c
  7590  00E772  3224               	rrcf	___fttol@lval+2,f,c
  7591  00E774  3223               	rrcf	___fttol@lval+1,f,c
  7592  00E776  3222               	rrcf	___fttol@lval,f,c
  7593  00E778  3E26               	incfsz	___fttol@exp1,f,c
  7594  00E77A  D7F9               	goto	l3210
  7595  00E77C  D019               	goto	l3224
  7596  00E77E                     l3214:
  7597  00E77E  0E17               	movlw	23
  7598  00E780  6426               	cpfsgt	___fttol@exp1,c
  7599  00E782  D011               	goto	l3222
  7600  00E784                     l3216:
  7601  00E784  0E00               	movlw	0
  7602  00E786  6E18               	movwf	?___fttol,c
  7603  00E788  0E00               	movlw	0
  7604  00E78A  6E19               	movwf	?___fttol+1,c
  7605  00E78C  0E00               	movlw	0
  7606  00E78E  6E1A               	movwf	?___fttol+2,c
  7607  00E790  0E00               	movlw	0
  7608  00E792  6E1B               	movwf	?___fttol+3,c
  7609  00E794  D022               	goto	l1041
  7610  00E796  D007               	goto	l3222
  7611  00E798                     l3220:
  7612  00E798  90D8               	bcf	status,0,c
  7613  00E79A  3622               	rlcf	___fttol@lval,f,c
  7614  00E79C  3623               	rlcf	___fttol@lval+1,f,c
  7615  00E79E  3624               	rlcf	___fttol@lval+2,f,c
  7616  00E7A0  3625               	rlcf	___fttol@lval+3,f,c
  7617  00E7A2  0626               	decf	___fttol@exp1,f,c
  7618  00E7A4  D000               	goto	l3222
  7619  00E7A6                     l3222:
  7620  00E7A6  5026               	movf	___fttol@exp1,w,c
  7621  00E7A8  B4D8               	btfsc	status,2,c
  7622  00E7AA  D002               	goto	l3224
  7623  00E7AC  D7F5               	goto	l3220
  7624  00E7AE  D000               	goto	l3224
  7625  00E7B0                     l3224:
  7626  00E7B0  5021               	movf	___fttol@sign1,w,c
  7627  00E7B2  B4D8               	btfsc	status,2,c
  7628  00E7B4  D009               	goto	l3228
  7629  00E7B6  1E25               	comf	___fttol@lval+3,f,c
  7630  00E7B8  1E24               	comf	___fttol@lval+2,f,c
  7631  00E7BA  1E23               	comf	___fttol@lval+1,f,c
  7632  00E7BC  6C22               	negf	___fttol@lval,c
  7633  00E7BE  0E00               	movlw	0
  7634  00E7C0  2223               	addwfc	___fttol@lval+1,f,c
  7635  00E7C2  2224               	addwfc	___fttol@lval+2,f,c
  7636  00E7C4  2225               	addwfc	___fttol@lval+3,f,c
  7637  00E7C6  D000               	goto	l3228
  7638  00E7C8                     l3228:
  7639  00E7C8  C022  F018         	movff	___fttol@lval,?___fttol
  7640  00E7CC  C023  F019         	movff	___fttol@lval+1,?___fttol+1
  7641  00E7D0  C024  F01A         	movff	___fttol@lval+2,?___fttol+2
  7642  00E7D4  C025  F01B         	movff	___fttol@lval+3,?___fttol+3
  7643  00E7D8  D000               	goto	l1041
  7644  00E7DA                     l1041:
  7645  00E7DA  0012               	return		;funcret
  7646  00E7DC                     __end_of___fttol:
  7647                           	opt stack 0
  7648                           tblptru	equ	0xFF8
  7649                           tblptrh	equ	0xFF7
  7650                           tblptrl	equ	0xFF6
  7651                           tablat	equ	0xFF5
  7652                           prodl	equ	0xFF3
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           postdec1	equ	0xFE5
  7656                           fsr1l	equ	0xFE1
  7657                           status	equ	0xFD8
  7658                           
  7659 ;; *************** function ___ftmul *****************
  7660 ;; Defined at:
  7661 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  f1              3    8[COMRAM] float 
  7664 ;;  f2              3   11[COMRAM] float 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  7667 ;;  sign            1   22[COMRAM] unsigned char 
  7668 ;;  cntr            1   21[COMRAM] unsigned char 
  7669 ;;  exp             1   17[COMRAM] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  3    8[COMRAM] float 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7679 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;Total ram usage:       15 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    1
  7686 ;; This function calls:
  7687 ;;		___ftpack
  7688 ;; This function is called by:
  7689 ;;		_update_LCD_misc
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           	psect	text34
  7694  00E8CE                     __ptext34:
  7695                           	opt stack 0
  7696  00E8CE                     ___ftmul:
  7697                           	opt stack 25
  7698                           
  7699                           ;incstack = 0
  7700  00E8CE  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  7701  00E8D2  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7702  00E8D4  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7703  00E8D6  340A               	rlcf	___ftmul@f1+1,w,c
  7704  00E8D8  360F               	rlcf	??___ftmul& (0+255),f,c
  7705  00E8DA  E301               	bnc	u1951
  7706  00E8DC  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7707  00E8DE                     u1951:
  7708  00E8DE  500F               	movf	??___ftmul,w,c
  7709  00E8E0  6E12               	movwf	___ftmul@exp,c
  7710  00E8E2  5012               	movf	___ftmul@exp,w,c
  7711  00E8E4  A4D8               	btfss	status,2,c
  7712  00E8E6  D002               	goto	l3090
  7713  00E8E8  D00E               	goto	l3092
  7714  00E8EA  D06C               	goto	l1020
  7715  00E8EC                     l3090:
  7716  00E8EC  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  7717  00E8F0  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7718  00E8F2  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7719  00E8F4  340D               	rlcf	___ftmul@f2+1,w,c
  7720  00E8F6  360F               	rlcf	??___ftmul& (0+255),f,c
  7721  00E8F8  E301               	bnc	u1971
  7722  00E8FA  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7723  00E8FC                     u1971:
  7724  00E8FC  500F               	movf	??___ftmul,w,c
  7725  00E8FE  6E17               	movwf	___ftmul@sign,c
  7726  00E900  5017               	movf	___ftmul@sign,w,c
  7727  00E902  A4D8               	btfss	status,2,c
  7728  00E904  D007               	goto	l3096
  7729  00E906                     l3092:
  7730  00E906  0E00               	movlw	0
  7731  00E908  6E09               	movwf	?___ftmul,c
  7732  00E90A  0E00               	movlw	0
  7733  00E90C  6E0A               	movwf	?___ftmul+1,c
  7734  00E90E  0E00               	movlw	0
  7735  00E910  6E0B               	movwf	?___ftmul+2,c
  7736  00E912  D058               	goto	l1020
  7737  00E914                     l3096:
  7738  00E914  5017               	movf	___ftmul@sign,w,c
  7739  00E916  0F7B               	addlw	123
  7740  00E918  2612               	addwf	___ftmul@exp,f,c
  7741  00E91A  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  7742  00E91E  500E               	movf	___ftmul@f2+2,w,c
  7743  00E920  1A17               	xorwf	___ftmul@sign,f,c
  7744  00E922  0E80               	movlw	128
  7745  00E924  1617               	andwf	___ftmul@sign,f,c
  7746  00E926  8E0A               	bsf	___ftmul@f1+1,7,c
  7747  00E928  8E0D               	bsf	___ftmul@f2+1,7,c
  7748  00E92A  0EFF               	movlw	255
  7749  00E92C  160C               	andwf	___ftmul@f2,f,c
  7750  00E92E  0EFF               	movlw	255
  7751  00E930  160D               	andwf	___ftmul@f2+1,f,c
  7752  00E932  0E00               	movlw	0
  7753  00E934  160E               	andwf	___ftmul@f2+2,f,c
  7754  00E936  0E00               	movlw	0
  7755  00E938  6E13               	movwf	___ftmul@f3_as_product,c
  7756  00E93A  0E00               	movlw	0
  7757  00E93C  6E14               	movwf	___ftmul@f3_as_product+1,c
  7758  00E93E  0E00               	movlw	0
  7759  00E940  6E15               	movwf	___ftmul@f3_as_product+2,c
  7760  00E942  0E07               	movlw	7
  7761  00E944  6E16               	movwf	___ftmul@cntr,c
  7762  00E946  D000               	goto	l3110
  7763  00E948                     l3110:
  7764  00E948  A009               	btfss	___ftmul@f1,0,c
  7765  00E94A  D007               	goto	l3114
  7766  00E94C  500C               	movf	___ftmul@f2,w,c
  7767  00E94E  2613               	addwf	___ftmul@f3_as_product,f,c
  7768  00E950  500D               	movf	___ftmul@f2+1,w,c
  7769  00E952  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7770  00E954  500E               	movf	___ftmul@f2+2,w,c
  7771  00E956  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7772  00E958  D000               	goto	l3114
  7773  00E95A                     l3114:
  7774  00E95A  90D8               	bcf	status,0,c
  7775  00E95C  320B               	rrcf	___ftmul@f1+2,f,c
  7776  00E95E  320A               	rrcf	___ftmul@f1+1,f,c
  7777  00E960  3209               	rrcf	___ftmul@f1,f,c
  7778  00E962  90D8               	bcf	status,0,c
  7779  00E964  360C               	rlcf	___ftmul@f2,f,c
  7780  00E966  360D               	rlcf	___ftmul@f2+1,f,c
  7781  00E968  360E               	rlcf	___ftmul@f2+2,f,c
  7782  00E96A  2E16               	decfsz	___ftmul@cntr,f,c
  7783  00E96C  D7ED               	goto	l3110
  7784  00E96E  D000               	goto	l3118
  7785  00E970                     l3118:
  7786  00E970  0E09               	movlw	9
  7787  00E972  6E16               	movwf	___ftmul@cntr,c
  7788  00E974  D000               	goto	l3120
  7789  00E976                     l3120:
  7790  00E976  A009               	btfss	___ftmul@f1,0,c
  7791  00E978  D007               	goto	l3124
  7792  00E97A  500C               	movf	___ftmul@f2,w,c
  7793  00E97C  2613               	addwf	___ftmul@f3_as_product,f,c
  7794  00E97E  500D               	movf	___ftmul@f2+1,w,c
  7795  00E980  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7796  00E982  500E               	movf	___ftmul@f2+2,w,c
  7797  00E984  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7798  00E986  D000               	goto	l3124
  7799  00E988                     l3124:
  7800  00E988  90D8               	bcf	status,0,c
  7801  00E98A  320B               	rrcf	___ftmul@f1+2,f,c
  7802  00E98C  320A               	rrcf	___ftmul@f1+1,f,c
  7803  00E98E  3209               	rrcf	___ftmul@f1,f,c
  7804  00E990  90D8               	bcf	status,0,c
  7805  00E992  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  7806  00E994  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  7807  00E996  3213               	rrcf	___ftmul@f3_as_product,f,c
  7808  00E998  2E16               	decfsz	___ftmul@cntr,f,c
  7809  00E99A  D7ED               	goto	l3120
  7810  00E99C  D000               	goto	l3128
  7811  00E99E                     l3128:
  7812  00E99E  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7813  00E9A2  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7814  00E9A6  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7815  00E9AA  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  7816  00E9AE  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  7817  00E9B2  ECCA  F071         	call	___ftpack	;wreg free
  7818  00E9B6  C001  F009         	movff	?___ftpack,?___ftmul
  7819  00E9BA  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  7820  00E9BE  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  7821  00E9C2  D000               	goto	l1020
  7822  00E9C4                     l1020:
  7823  00E9C4  0012               	return		;funcret
  7824  00E9C6                     __end_of___ftmul:
  7825                           	opt stack 0
  7826                           tblptru	equ	0xFF8
  7827                           tblptrh	equ	0xFF7
  7828                           tblptrl	equ	0xFF6
  7829                           tablat	equ	0xFF5
  7830                           prodl	equ	0xFF3
  7831                           postinc0	equ	0xFEE
  7832                           wreg	equ	0xFE8
  7833                           postdec1	equ	0xFE5
  7834                           fsr1l	equ	0xFE1
  7835                           status	equ	0xFD8
  7836                           
  7837 ;; *************** function ___ftge *****************
  7838 ;; Defined at:
  7839 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  ff1             3    0[COMRAM] float 
  7842 ;;  ff2             3    3[COMRAM] float 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;		None
  7845 ;; Return value:  Size  Location     Type
  7846 ;;		None               void
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7854 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;Total ram usage:        9 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; This function calls:
  7861 ;;		Nothing
  7862 ;; This function is called by:
  7863 ;;		_main
  7864 ;;		_update_LCD_misc
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text35
  7869  00E056                     __ptext35:
  7870                           	opt stack 0
  7871  00E056                     ___ftge:
  7872                           	opt stack 30
  7873                           
  7874                           ;incstack = 0
  7875  00E056  AE03               	btfss	___ftge@ff1+2,7,c
  7876  00E058  D017               	goto	l3172
  7877  00E05A  C001  F007         	movff	___ftge@ff1,??___ftge
  7878  00E05E  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  7879  00E062  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  7880  00E066  1E07               	comf	??___ftge,f,c
  7881  00E068  1E08               	comf	??___ftge+1,f,c
  7882  00E06A  1E09               	comf	??___ftge+2,f,c
  7883  00E06C  2A07               	incf	??___ftge,f,c
  7884  00E06E  0E00               	movlw	0
  7885  00E070  2208               	addwfc	??___ftge+1,f,c
  7886  00E072  2209               	addwfc	??___ftge+2,f,c
  7887  00E074  0E00               	movlw	0
  7888  00E076  2407               	addwf	??___ftge,w,c
  7889  00E078  6E01               	movwf	___ftge@ff1,c
  7890  00E07A  0E00               	movlw	0
  7891  00E07C  2008               	addwfc	??___ftge+1,w,c
  7892  00E07E  6E02               	movwf	___ftge@ff1+1,c
  7893  00E080  0E80               	movlw	128
  7894  00E082  2009               	addwfc	??___ftge+2,w,c
  7895  00E084  6E03               	movwf	___ftge@ff1+2,c
  7896  00E086  D000               	goto	l3172
  7897  00E088                     l3172:
  7898  00E088  AE06               	btfss	___ftge@ff2+2,7,c
  7899  00E08A  D017               	goto	l3176
  7900  00E08C  C004  F007         	movff	___ftge@ff2,??___ftge
  7901  00E090  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  7902  00E094  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  7903  00E098  1E07               	comf	??___ftge,f,c
  7904  00E09A  1E08               	comf	??___ftge+1,f,c
  7905  00E09C  1E09               	comf	??___ftge+2,f,c
  7906  00E09E  2A07               	incf	??___ftge,f,c
  7907  00E0A0  0E00               	movlw	0
  7908  00E0A2  2208               	addwfc	??___ftge+1,f,c
  7909  00E0A4  2209               	addwfc	??___ftge+2,f,c
  7910  00E0A6  0E00               	movlw	0
  7911  00E0A8  2407               	addwf	??___ftge,w,c
  7912  00E0AA  6E04               	movwf	___ftge@ff2,c
  7913  00E0AC  0E00               	movlw	0
  7914  00E0AE  2008               	addwfc	??___ftge+1,w,c
  7915  00E0B0  6E05               	movwf	___ftge@ff2+1,c
  7916  00E0B2  0E80               	movlw	128
  7917  00E0B4  2009               	addwfc	??___ftge+2,w,c
  7918  00E0B6  6E06               	movwf	___ftge@ff2+2,c
  7919  00E0B8  D000               	goto	l3176
  7920  00E0BA                     l3176:
  7921  00E0BA  0E00               	movlw	0
  7922  00E0BC  1A01               	xorwf	___ftge@ff1,f,c
  7923  00E0BE  0E00               	movlw	0
  7924  00E0C0  1A02               	xorwf	___ftge@ff1+1,f,c
  7925  00E0C2  0E80               	movlw	128
  7926  00E0C4  1A03               	xorwf	___ftge@ff1+2,f,c
  7927  00E0C6  0E00               	movlw	0
  7928  00E0C8  1A04               	xorwf	___ftge@ff2,f,c
  7929  00E0CA  0E00               	movlw	0
  7930  00E0CC  1A05               	xorwf	___ftge@ff2+1,f,c
  7931  00E0CE  0E80               	movlw	128
  7932  00E0D0  1A06               	xorwf	___ftge@ff2+2,f,c
  7933  00E0D2  5004               	movf	___ftge@ff2,w,c
  7934  00E0D4  5C01               	subwf	___ftge@ff1,w,c
  7935  00E0D6  5005               	movf	___ftge@ff2+1,w,c
  7936  00E0D8  5802               	subwfb	___ftge@ff1+1,w,c
  7937  00E0DA  5006               	movf	___ftge@ff2+2,w,c
  7938  00E0DC  5803               	subwfb	___ftge@ff1+2,w,c
  7939  00E0DE  B0D8               	btfsc	status,0,c
  7940  00E0E0  D002               	goto	l3182
  7941  00E0E2  90D8               	bcf	status,0,c
  7942  00E0E4  D002               	goto	l1014
  7943  00E0E6                     l3182:
  7944  00E0E6  80D8               	bsf	status,0,c
  7945  00E0E8  D000               	goto	l1014
  7946  00E0EA                     l1014:
  7947  00E0EA  0012               	return		;funcret
  7948  00E0EC                     __end_of___ftge:
  7949                           	opt stack 0
  7950                           tblptru	equ	0xFF8
  7951                           tblptrh	equ	0xFF7
  7952                           tblptrl	equ	0xFF6
  7953                           tablat	equ	0xFF5
  7954                           prodl	equ	0xFF3
  7955                           postinc0	equ	0xFEE
  7956                           wreg	equ	0xFE8
  7957                           postdec1	equ	0xFE5
  7958                           fsr1l	equ	0xFE1
  7959                           status	equ	0xFD8
  7960                           
  7961 ;; *************** function ___awmod *****************
  7962 ;; Defined at:
  7963 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;  dividend        2   38[COMRAM] int 
  7966 ;;  divisor         2   40[COMRAM] int 
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;  sign            1   43[COMRAM] unsigned char 
  7969 ;;  counter         1   42[COMRAM] unsigned char 
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  2   38[COMRAM] int 
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7982 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7983 ;;Total ram usage:        6 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; This function calls:
  7986 ;;		Nothing
  7987 ;; This function is called by:
  7988 ;;		_update_LCD_PED_Count
  7989 ;;		_update_LCD_count
  7990 ;;		_update_LCD_misc
  7991 ;;		_dec_2_bcd
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           	psect	text36
  7996  00DEC4                     __ptext36:
  7997                           	opt stack 0
  7998  00DEC4                     ___awmod:
  7999                           	opt stack 27
  8000                           
  8001                           ;incstack = 0
  8002  00DEC4  0E00               	movlw	0
  8003  00DEC6  6E2C               	movwf	___awmod@sign,c
  8004  00DEC8  AE28               	btfss	___awmod@dividend+1,7,c
  8005  00DECA  D007               	goto	l3140
  8006  00DECC  6C27               	negf	___awmod@dividend,c
  8007  00DECE  1E28               	comf	___awmod@dividend+1,f,c
  8008  00DED0  B0D8               	btfsc	status,0,c
  8009  00DED2  2A28               	incf	___awmod@dividend+1,f,c
  8010  00DED4  0E01               	movlw	1
  8011  00DED6  6E2C               	movwf	___awmod@sign,c
  8012  00DED8  D000               	goto	l3140
  8013  00DEDA                     l3140:
  8014  00DEDA  AE2A               	btfss	___awmod@divisor+1,7,c
  8015  00DEDC  D005               	goto	l3144
  8016  00DEDE  6C29               	negf	___awmod@divisor,c
  8017  00DEE0  1E2A               	comf	___awmod@divisor+1,f,c
  8018  00DEE2  B0D8               	btfsc	status,0,c
  8019  00DEE4  2A2A               	incf	___awmod@divisor+1,f,c
  8020  00DEE6  D000               	goto	l3144
  8021  00DEE8                     l3144:
  8022  00DEE8  5029               	movf	___awmod@divisor,w,c
  8023  00DEEA  102A               	iorwf	___awmod@divisor+1,w,c
  8024  00DEEC  B4D8               	btfsc	status,2,c
  8025  00DEEE  D01D               	goto	l3160
  8026  00DEF0  0E01               	movlw	1
  8027  00DEF2  6E2B               	movwf	___awmod@counter,c
  8028  00DEF4  D005               	goto	l3150
  8029  00DEF6                     l3148:
  8030  00DEF6  90D8               	bcf	status,0,c
  8031  00DEF8  3629               	rlcf	___awmod@divisor,f,c
  8032  00DEFA  362A               	rlcf	___awmod@divisor+1,f,c
  8033  00DEFC  2A2B               	incf	___awmod@counter,f,c
  8034  00DEFE  D000               	goto	l3150
  8035  00DF00                     l3150:
  8036  00DF00  BE2A               	btfsc	___awmod@divisor+1,7,c
  8037  00DF02  D002               	goto	l3152
  8038  00DF04  D7F8               	goto	l3148
  8039  00DF06  D000               	goto	l3152
  8040  00DF08                     l3152:
  8041  00DF08  5029               	movf	___awmod@divisor,w,c
  8042  00DF0A  5C27               	subwf	___awmod@dividend,w,c
  8043  00DF0C  502A               	movf	___awmod@divisor+1,w,c
  8044  00DF0E  5828               	subwfb	___awmod@dividend+1,w,c
  8045  00DF10  A0D8               	btfss	status,0,c
  8046  00DF12  D005               	goto	l3156
  8047  00DF14  5029               	movf	___awmod@divisor,w,c
  8048  00DF16  5E27               	subwf	___awmod@dividend,f,c
  8049  00DF18  502A               	movf	___awmod@divisor+1,w,c
  8050  00DF1A  5A28               	subwfb	___awmod@dividend+1,f,c
  8051  00DF1C  D000               	goto	l3156
  8052  00DF1E                     l3156:
  8053  00DF1E  90D8               	bcf	status,0,c
  8054  00DF20  322A               	rrcf	___awmod@divisor+1,f,c
  8055  00DF22  3229               	rrcf	___awmod@divisor,f,c
  8056  00DF24  2E2B               	decfsz	___awmod@counter,f,c
  8057  00DF26  D7F0               	goto	l3152
  8058  00DF28  D000               	goto	l3160
  8059  00DF2A                     l3160:
  8060  00DF2A  502C               	movf	___awmod@sign,w,c
  8061  00DF2C  B4D8               	btfsc	status,2,c
  8062  00DF2E  D005               	goto	l3164
  8063  00DF30  6C27               	negf	___awmod@dividend,c
  8064  00DF32  1E28               	comf	___awmod@dividend+1,f,c
  8065  00DF34  B0D8               	btfsc	status,0,c
  8066  00DF36  2A28               	incf	___awmod@dividend+1,f,c
  8067  00DF38  D000               	goto	l3164
  8068  00DF3A                     l3164:
  8069  00DF3A  C027  F027         	movff	___awmod@dividend,?___awmod
  8070  00DF3E  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
  8071  00DF42  D000               	goto	l831
  8072  00DF44                     l831:
  8073  00DF44  0012               	return		;funcret
  8074  00DF46                     __end_of___awmod:
  8075                           	opt stack 0
  8076                           tblptru	equ	0xFF8
  8077                           tblptrh	equ	0xFF7
  8078                           tblptrl	equ	0xFF6
  8079                           tablat	equ	0xFF5
  8080                           prodl	equ	0xFF3
  8081                           postinc0	equ	0xFEE
  8082                           wreg	equ	0xFE8
  8083                           postdec1	equ	0xFE5
  8084                           fsr1l	equ	0xFE1
  8085                           status	equ	0xFD8
  8086                           
  8087 ;; *************** function _Read_Volt *****************
  8088 ;; Defined at:
  8089 ;;		line 141 in file "utils.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  ADC_Channel     1    wreg     unsigned char 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  ADC_Channel     1   35[COMRAM] unsigned char 
  8094 ;;  volt            3   30[COMRAM] float 
  8095 ;;  nStep           2   33[COMRAM] int 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  3   27[COMRAM] float 
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8105 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;Total ram usage:        9 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    2
  8112 ;; This function calls:
  8113 ;;		___awtoft
  8114 ;;		___ftdiv
  8115 ;;		___wmul
  8116 ;;		_get_full_ADC
  8117 ;; This function is called by:
  8118 ;;		_main
  8119 ;;		_update_LCD_misc
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           	psect	text37
  8124  00DD70                     __ptext37:
  8125                           	opt stack 0
  8126  00DD70                     _Read_Volt:
  8127                           	opt stack 28
  8128                           
  8129                           ;incstack = 0
  8130                           ;Read_Volt@ADC_Channel stored from wreg
  8131  00DD70  6E24               	movwf	Read_Volt@ADC_Channel,c
  8132                           
  8133                           ;utils.c: 143: ADCON0 = ADC_Channel * 4 + 1;
  8134  00DD72  5024               	movf	Read_Volt@ADC_Channel,w,c
  8135  00DD74  0D04               	mullw	4
  8136  00DD76  28F3               	incf	prodl,w,c
  8137  00DD78  6EC2               	movwf	4034,c	;volatile
  8138                           
  8139                           ;utils.c: 144: int nStep = get_full_ADC();
  8140  00DD7A  ECD4  F06B         	call	_get_full_ADC	;wreg free
  8141  00DD7E  C001  F022         	movff	?_get_full_ADC,Read_Volt@nStep
  8142  00DD82  C002  F023         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  8143                           
  8144                           ;utils.c: 145: float volt = nStep * 5 /1024.0;
  8145  00DD86  C022  F001         	movff	Read_Volt@nStep,___wmul@multiplier
  8146  00DD8A  C023  F002         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  8147  00DD8E  0E00               	movlw	0
  8148  00DD90  6E04               	movwf	___wmul@multiplicand+1,c
  8149  00DD92  0E05               	movlw	5
  8150  00DD94  6E03               	movwf	___wmul@multiplicand,c
  8151  00DD96  ECE7  F06B         	call	___wmul	;wreg free
  8152  00DD9A  C001  F009         	movff	?___wmul,___awtoft@c
  8153  00DD9E  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  8154  00DDA2  ECA9  F06C         	call	___awtoft	;wreg free
  8155  00DDA6  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  8156  00DDAA  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  8157  00DDAE  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  8158  00DDB2  0E00               	movlw	0
  8159  00DDB4  6E10               	movwf	___ftdiv@f2,c
  8160  00DDB6  0E80               	movlw	128
  8161  00DDB8  6E11               	movwf	___ftdiv@f2+1,c
  8162  00DDBA  0E44               	movlw	68
  8163  00DDBC  6E12               	movwf	___ftdiv@f2+2,c
  8164  00DDBE  EC0A  F073         	call	___ftdiv	;wreg free
  8165  00DDC2  C00D  F01F         	movff	?___ftdiv,Read_Volt@volt
  8166  00DDC6  C00E  F020         	movff	?___ftdiv+1,Read_Volt@volt+1
  8167  00DDCA  C00F  F021         	movff	?___ftdiv+2,Read_Volt@volt+2
  8168                           
  8169                           ;utils.c: 146: return (volt);
  8170  00DDCE  C01F  F01C         	movff	Read_Volt@volt,?_Read_Volt
  8171  00DDD2  C020  F01D         	movff	Read_Volt@volt+1,?_Read_Volt+1
  8172  00DDD6  C021  F01E         	movff	Read_Volt@volt+2,?_Read_Volt+2
  8173  00DDDA  D000               	goto	l574
  8174  00DDDC                     l574:
  8175  00DDDC  0012               	return		;funcret
  8176  00DDDE                     __end_of_Read_Volt:
  8177                           	opt stack 0
  8178                           tblptru	equ	0xFF8
  8179                           tblptrh	equ	0xFF7
  8180                           tblptrl	equ	0xFF6
  8181                           tablat	equ	0xFF5
  8182                           prodl	equ	0xFF3
  8183                           postinc0	equ	0xFEE
  8184                           wreg	equ	0xFE8
  8185                           postdec1	equ	0xFE5
  8186                           fsr1l	equ	0xFE1
  8187                           status	equ	0xFD8
  8188                           
  8189 ;; *************** function _get_full_ADC *****************
  8190 ;; Defined at:
  8191 ;;		line 149 in file "utils.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;		None
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  result          2    4[COMRAM] unsigned int 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  2    0[COMRAM] unsigned int 
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;Total ram usage:        6 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; This function calls:
  8212 ;;		Nothing
  8213 ;; This function is called by:
  8214 ;;		_update_LCD_misc
  8215 ;;		_Read_Volt
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text38
  8220  00D7A8                     __ptext38:
  8221                           	opt stack 0
  8222  00D7A8                     _get_full_ADC:
  8223                           	opt stack 29
  8224                           
  8225                           ;utils.c: 151: unsigned int result;
  8226                           ;utils.c: 152: ADCON0bits.GO=1;
  8227                           
  8228                           ;incstack = 0
  8229  00D7A8  82C2               	bsf	4034,1,c	;volatile
  8230                           
  8231                           ;utils.c: 153: while(ADCON0bits.DONE==1);
  8232  00D7AA  D000               	goto	l577
  8233  00D7AC                     l577:
  8234  00D7AC  B2C2               	btfsc	4034,1,c	;volatile
  8235  00D7AE  D7FE               	goto	l577
  8236                           
  8237                           ;utils.c: 154: result = (ADRESH * 0x100) + ADRESL;
  8238  00D7B0  50C4               	movf	4036,w,c	;volatile
  8239  00D7B2  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  8240  00D7B4  6A03               	clrf	??_get_full_ADC& (0+255),c
  8241  00D7B6  50C3               	movf	4035,w,c	;volatile
  8242  00D7B8  2403               	addwf	??_get_full_ADC,w,c
  8243  00D7BA  6E05               	movwf	get_full_ADC@result,c
  8244  00D7BC  0E00               	movlw	0
  8245  00D7BE  2004               	addwfc	??_get_full_ADC+1,w,c
  8246  00D7C0  6E06               	movwf	get_full_ADC@result+1,c
  8247                           
  8248                           ;utils.c: 156: return result;
  8249  00D7C2  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  8250  00D7C6  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  8251  00D7CA  D000               	goto	l580
  8252  00D7CC                     l580:
  8253  00D7CC  0012               	return		;funcret
  8254  00D7CE                     __end_of_get_full_ADC:
  8255                           	opt stack 0
  8256                           tblptru	equ	0xFF8
  8257                           tblptrh	equ	0xFF7
  8258                           tblptrl	equ	0xFF6
  8259                           tablat	equ	0xFF5
  8260                           prodl	equ	0xFF3
  8261                           postinc0	equ	0xFEE
  8262                           wreg	equ	0xFE8
  8263                           postdec1	equ	0xFE5
  8264                           fsr1l	equ	0xFE1
  8265                           status	equ	0xFD8
  8266                           
  8267 ;; *************** function ___ftdiv *****************
  8268 ;; Defined at:
  8269 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;  f1              3   12[COMRAM] float 
  8272 ;;  f2              3   15[COMRAM] float 
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  f3              3   22[COMRAM] float 
  8275 ;;  sign            1   26[COMRAM] unsigned char 
  8276 ;;  exp             1   25[COMRAM] unsigned char 
  8277 ;;  cntr            1   21[COMRAM] unsigned char 
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  3   12[COMRAM] float 
  8280 ;; Registers used:
  8281 ;;		wreg, status,2, status,0, cstack
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8287 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;Total ram usage:       15 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    1
  8294 ;; This function calls:
  8295 ;;		___ftpack
  8296 ;; This function is called by:
  8297 ;;		_Read_Volt
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text39
  8302  00E614                     __ptext39:
  8303                           	opt stack 0
  8304  00E614                     ___ftdiv:
  8305                           	opt stack 28
  8306                           
  8307                           ;incstack = 0
  8308  00E614  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  8309  00E618  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  8310  00E61A  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  8311  00E61C  340E               	rlcf	___ftdiv@f1+1,w,c
  8312  00E61E  3613               	rlcf	??___ftdiv& (0+255),f,c
  8313  00E620  E301               	bnc	u1781
  8314  00E622  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  8315  00E624                     u1781:
  8316  00E624  5013               	movf	??___ftdiv,w,c
  8317  00E626  6E1A               	movwf	___ftdiv@exp,c
  8318  00E628  501A               	movf	___ftdiv@exp,w,c
  8319  00E62A  A4D8               	btfss	status,2,c
  8320  00E62C  D002               	goto	l2948
  8321  00E62E  D00E               	goto	l2950
  8322  00E630  D061               	goto	l1005
  8323  00E632                     l2948:
  8324  00E632  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  8325  00E636  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  8326  00E638  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  8327  00E63A  3411               	rlcf	___ftdiv@f2+1,w,c
  8328  00E63C  3613               	rlcf	??___ftdiv& (0+255),f,c
  8329  00E63E  E301               	bnc	u1801
  8330  00E640  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  8331  00E642                     u1801:
  8332  00E642  5013               	movf	??___ftdiv,w,c
  8333  00E644  6E1B               	movwf	___ftdiv@sign,c
  8334  00E646  501B               	movf	___ftdiv@sign,w,c
  8335  00E648  A4D8               	btfss	status,2,c
  8336  00E64A  D007               	goto	l2954
  8337  00E64C                     l2950:
  8338  00E64C  0E00               	movlw	0
  8339  00E64E  6E0D               	movwf	?___ftdiv,c
  8340  00E650  0E00               	movlw	0
  8341  00E652  6E0E               	movwf	?___ftdiv+1,c
  8342  00E654  0E00               	movlw	0
  8343  00E656  6E0F               	movwf	?___ftdiv+2,c
  8344  00E658  D04D               	goto	l1005
  8345  00E65A                     l2954:
  8346  00E65A  0E00               	movlw	0
  8347  00E65C  6E17               	movwf	___ftdiv@f3,c
  8348  00E65E  0E00               	movlw	0
  8349  00E660  6E18               	movwf	___ftdiv@f3+1,c
  8350  00E662  0E00               	movlw	0
  8351  00E664  6E19               	movwf	___ftdiv@f3+2,c
  8352  00E666  501B               	movf	___ftdiv@sign,w,c
  8353  00E668  0F89               	addlw	137
  8354  00E66A  5E1A               	subwf	___ftdiv@exp,f,c
  8355  00E66C  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  8356  00E670  5012               	movf	___ftdiv@f2+2,w,c
  8357  00E672  1A1B               	xorwf	___ftdiv@sign,f,c
  8358  00E674  0E80               	movlw	128
  8359  00E676  161B               	andwf	___ftdiv@sign,f,c
  8360  00E678  8E0E               	bsf	___ftdiv@f1+1,7,c
  8361  00E67A  0EFF               	movlw	255
  8362  00E67C  160D               	andwf	___ftdiv@f1,f,c
  8363  00E67E  0EFF               	movlw	255
  8364  00E680  160E               	andwf	___ftdiv@f1+1,f,c
  8365  00E682  0E00               	movlw	0
  8366  00E684  160F               	andwf	___ftdiv@f1+2,f,c
  8367  00E686  8E11               	bsf	___ftdiv@f2+1,7,c
  8368  00E688  0EFF               	movlw	255
  8369  00E68A  1610               	andwf	___ftdiv@f2,f,c
  8370  00E68C  0EFF               	movlw	255
  8371  00E68E  1611               	andwf	___ftdiv@f2+1,f,c
  8372  00E690  0E00               	movlw	0
  8373  00E692  1612               	andwf	___ftdiv@f2+2,f,c
  8374  00E694  0E18               	movlw	24
  8375  00E696  6E16               	movwf	___ftdiv@cntr,c
  8376  00E698  D000               	goto	l2974
  8377  00E69A                     l2974:
  8378  00E69A  90D8               	bcf	status,0,c
  8379  00E69C  3617               	rlcf	___ftdiv@f3,f,c
  8380  00E69E  3618               	rlcf	___ftdiv@f3+1,f,c
  8381  00E6A0  3619               	rlcf	___ftdiv@f3+2,f,c
  8382  00E6A2  5010               	movf	___ftdiv@f2,w,c
  8383  00E6A4  5C0D               	subwf	___ftdiv@f1,w,c
  8384  00E6A6  5011               	movf	___ftdiv@f2+1,w,c
  8385  00E6A8  580E               	subwfb	___ftdiv@f1+1,w,c
  8386  00E6AA  5012               	movf	___ftdiv@f2+2,w,c
  8387  00E6AC  580F               	subwfb	___ftdiv@f1+2,w,c
  8388  00E6AE  A0D8               	btfss	status,0,c
  8389  00E6B0  D007               	goto	l1008
  8390  00E6B2  5010               	movf	___ftdiv@f2,w,c
  8391  00E6B4  5E0D               	subwf	___ftdiv@f1,f,c
  8392  00E6B6  5011               	movf	___ftdiv@f2+1,w,c
  8393  00E6B8  5A0E               	subwfb	___ftdiv@f1+1,f,c
  8394  00E6BA  5012               	movf	___ftdiv@f2+2,w,c
  8395  00E6BC  5A0F               	subwfb	___ftdiv@f1+2,f,c
  8396  00E6BE  8017               	bsf	___ftdiv@f3,0,c
  8397  00E6C0                     l1008:
  8398  00E6C0  90D8               	bcf	status,0,c
  8399  00E6C2  360D               	rlcf	___ftdiv@f1,f,c
  8400  00E6C4  360E               	rlcf	___ftdiv@f1+1,f,c
  8401  00E6C6  360F               	rlcf	___ftdiv@f1+2,f,c
  8402  00E6C8  2E16               	decfsz	___ftdiv@cntr,f,c
  8403  00E6CA  D7E7               	goto	l2974
  8404  00E6CC  D000               	goto	l2984
  8405  00E6CE                     l2984:
  8406  00E6CE  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  8407  00E6D2  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8408  00E6D6  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8409  00E6DA  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  8410  00E6DE  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  8411  00E6E2  ECCA  F071         	call	___ftpack	;wreg free
  8412  00E6E6  C001  F00D         	movff	?___ftpack,?___ftdiv
  8413  00E6EA  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  8414  00E6EE  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  8415  00E6F2  D000               	goto	l1005
  8416  00E6F4                     l1005:
  8417  00E6F4  0012               	return		;funcret
  8418  00E6F6                     __end_of___ftdiv:
  8419                           	opt stack 0
  8420                           tblptru	equ	0xFF8
  8421                           tblptrh	equ	0xFF7
  8422                           tblptrl	equ	0xFF6
  8423                           tablat	equ	0xFF5
  8424                           prodl	equ	0xFF3
  8425                           postinc0	equ	0xFEE
  8426                           wreg	equ	0xFE8
  8427                           postdec1	equ	0xFE5
  8428                           fsr1l	equ	0xFE1
  8429                           status	equ	0xFD8
  8430                           
  8431 ;; *************** function ___awtoft *****************
  8432 ;; Defined at:
  8433 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  8434 ;; Parameters:    Size  Location     Type
  8435 ;;  c               2    8[COMRAM] int 
  8436 ;; Auto vars:     Size  Location     Type
  8437 ;;  sign            1   11[COMRAM] unsigned char 
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  3    8[COMRAM] float 
  8440 ;; Registers used:
  8441 ;;		wreg, status,2, status,0, cstack
  8442 ;; Tracked objects:
  8443 ;;		On entry : 0/0
  8444 ;;		On exit  : 0/0
  8445 ;;		Unchanged: 0/0
  8446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8447 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8450 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8451 ;;Total ram usage:        4 bytes
  8452 ;; Hardware stack levels used:    1
  8453 ;; Hardware stack levels required when called:    1
  8454 ;; This function calls:
  8455 ;;		___ftpack
  8456 ;; This function is called by:
  8457 ;;		_Read_Volt
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           	psect	text40
  8462  00D952                     __ptext40:
  8463                           	opt stack 0
  8464  00D952                     ___awtoft:
  8465                           	opt stack 28
  8466                           
  8467                           ;incstack = 0
  8468  00D952  0E00               	movlw	0
  8469  00D954  6E0C               	movwf	___awtoft@sign,c
  8470  00D956  AE0A               	btfss	___awtoft@c+1,7,c
  8471  00D958  D007               	goto	l2996
  8472  00D95A  6C09               	negf	___awtoft@c,c
  8473  00D95C  1E0A               	comf	___awtoft@c+1,f,c
  8474  00D95E  B0D8               	btfsc	status,0,c
  8475  00D960  2A0A               	incf	___awtoft@c+1,f,c
  8476  00D962  0E01               	movlw	1
  8477  00D964  6E0C               	movwf	___awtoft@sign,c
  8478  00D966  D000               	goto	l2996
  8479  00D968                     l2996:
  8480  00D968  C009  F001         	movff	___awtoft@c,___ftpack@arg
  8481  00D96C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  8482  00D970  6A03               	clrf	___ftpack@arg+2,c
  8483  00D972  0E8E               	movlw	142
  8484  00D974  6E04               	movwf	___ftpack@exp,c
  8485  00D976  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  8486  00D97A  ECCA  F071         	call	___ftpack	;wreg free
  8487  00D97E  C001  F009         	movff	?___ftpack,?___awtoft
  8488  00D982  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8489  00D986  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8490  00D98A  D000               	goto	l843
  8491  00D98C                     l843:
  8492  00D98C  0012               	return		;funcret
  8493  00D98E                     __end_of___awtoft:
  8494                           	opt stack 0
  8495                           tblptru	equ	0xFF8
  8496                           tblptrh	equ	0xFF7
  8497                           tblptrl	equ	0xFF6
  8498                           tablat	equ	0xFF5
  8499                           prodl	equ	0xFF3
  8500                           postinc0	equ	0xFEE
  8501                           wreg	equ	0xFE8
  8502                           postdec1	equ	0xFE5
  8503                           fsr1l	equ	0xFE1
  8504                           status	equ	0xFD8
  8505                           
  8506 ;; *************** function ___ftpack *****************
  8507 ;; Defined at:
  8508 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  8509 ;; Parameters:    Size  Location     Type
  8510 ;;  arg             3    0[COMRAM] unsigned um
  8511 ;;  exp             1    3[COMRAM] unsigned char 
  8512 ;;  sign            1    4[COMRAM] unsigned char 
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;		None
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  3    0[COMRAM] float 
  8517 ;; Registers used:
  8518 ;;		wreg, status,2, status,0
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8524 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;Total ram usage:        8 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; This function calls:
  8531 ;;		Nothing
  8532 ;; This function is called by:
  8533 ;;		___awtoft
  8534 ;;		___ftdiv
  8535 ;;		___ftmul
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text41
  8540  00E394                     __ptext41:
  8541                           	opt stack 0
  8542  00E394                     ___ftpack:
  8543                           	opt stack 28
  8544                           
  8545                           ;incstack = 0
  8546  00E394  5004               	movf	___ftpack@exp,w,c
  8547  00E396  B4D8               	btfsc	status,2,c
  8548  00E398  D005               	goto	l2838
  8549  00E39A  5001               	movf	___ftpack@arg,w,c
  8550  00E39C  1002               	iorwf	___ftpack@arg+1,w,c
  8551  00E39E  1003               	iorwf	___ftpack@arg+2,w,c
  8552  00E3A0  A4D8               	btfss	status,2,c
  8553  00E3A2  D00E               	goto	l2844
  8554  00E3A4                     l2838:
  8555  00E3A4  0E00               	movlw	0
  8556  00E3A6  6E01               	movwf	?___ftpack,c
  8557  00E3A8  0E00               	movlw	0
  8558  00E3AA  6E02               	movwf	?___ftpack+1,c
  8559  00E3AC  0E00               	movlw	0
  8560  00E3AE  6E03               	movwf	?___ftpack+2,c
  8561  00E3B0  D053               	goto	l933
  8562  00E3B2  D006               	goto	l2844
  8563  00E3B4                     l2842:
  8564  00E3B4  2A04               	incf	___ftpack@exp,f,c
  8565  00E3B6  90D8               	bcf	status,0,c
  8566  00E3B8  3203               	rrcf	___ftpack@arg+2,f,c
  8567  00E3BA  3202               	rrcf	___ftpack@arg+1,f,c
  8568  00E3BC  3201               	rrcf	___ftpack@arg,f,c
  8569  00E3BE  D000               	goto	l2844
  8570  00E3C0                     l2844:
  8571  00E3C0  0E00               	movlw	0
  8572  00E3C2  1401               	andwf	___ftpack@arg,w,c
  8573  00E3C4  6E06               	movwf	??___ftpack& (0+255),c
  8574  00E3C6  0E00               	movlw	0
  8575  00E3C8  1402               	andwf	___ftpack@arg+1,w,c
  8576  00E3CA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8577  00E3CC  0EFE               	movlw	254
  8578  00E3CE  1403               	andwf	___ftpack@arg+2,w,c
  8579  00E3D0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8580  00E3D2  5006               	movf	??___ftpack,w,c
  8581  00E3D4  1007               	iorwf	??___ftpack+1,w,c
  8582  00E3D6  1008               	iorwf	??___ftpack+2,w,c
  8583  00E3D8  B4D8               	btfsc	status,2,c
  8584  00E3DA  D00E               	goto	l2850
  8585  00E3DC  D7EB               	goto	l2842
  8586  00E3DE  D00C               	goto	l2850
  8587  00E3E0                     l2846:
  8588  00E3E0  2A04               	incf	___ftpack@exp,f,c
  8589  00E3E2  0E01               	movlw	1
  8590  00E3E4  2601               	addwf	___ftpack@arg,f,c
  8591  00E3E6  0E00               	movlw	0
  8592  00E3E8  2202               	addwfc	___ftpack@arg+1,f,c
  8593  00E3EA  0E00               	movlw	0
  8594  00E3EC  2203               	addwfc	___ftpack@arg+2,f,c
  8595  00E3EE  90D8               	bcf	status,0,c
  8596  00E3F0  3203               	rrcf	___ftpack@arg+2,f,c
  8597  00E3F2  3202               	rrcf	___ftpack@arg+1,f,c
  8598  00E3F4  3201               	rrcf	___ftpack@arg,f,c
  8599  00E3F6  D000               	goto	l2850
  8600  00E3F8                     l2850:
  8601  00E3F8  0E00               	movlw	0
  8602  00E3FA  1401               	andwf	___ftpack@arg,w,c
  8603  00E3FC  6E06               	movwf	??___ftpack& (0+255),c
  8604  00E3FE  0E00               	movlw	0
  8605  00E400  1402               	andwf	___ftpack@arg+1,w,c
  8606  00E402  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8607  00E404  0EFF               	movlw	255
  8608  00E406  1403               	andwf	___ftpack@arg+2,w,c
  8609  00E408  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8610  00E40A  5006               	movf	??___ftpack,w,c
  8611  00E40C  1007               	iorwf	??___ftpack+1,w,c
  8612  00E40E  1008               	iorwf	??___ftpack+2,w,c
  8613  00E410  B4D8               	btfsc	status,2,c
  8614  00E412  D008               	goto	l2854
  8615  00E414  D7E5               	goto	l2846
  8616  00E416  D006               	goto	l2854
  8617  00E418                     l2852:
  8618  00E418  0604               	decf	___ftpack@exp,f,c
  8619  00E41A  90D8               	bcf	status,0,c
  8620  00E41C  3601               	rlcf	___ftpack@arg,f,c
  8621  00E41E  3602               	rlcf	___ftpack@arg+1,f,c
  8622  00E420  3603               	rlcf	___ftpack@arg+2,f,c
  8623  00E422  D000               	goto	l2854
  8624  00E424                     l2854:
  8625  00E424  BE02               	btfsc	___ftpack@arg+1,7,c
  8626  00E426  D004               	goto	l944
  8627  00E428  0E02               	movlw	2
  8628  00E42A  6004               	cpfslt	___ftpack@exp,c
  8629  00E42C  D7F5               	goto	l2852
  8630  00E42E  D000               	goto	l944
  8631  00E430                     l944:
  8632  00E430  B004               	btfsc	___ftpack@exp,0,c
  8633  00E432  D002               	goto	l2860
  8634  00E434  9E02               	bcf	___ftpack@arg+1,7,c
  8635  00E436  D000               	goto	l2860
  8636  00E438                     l2860:
  8637  00E438  90D8               	bcf	status,0,c
  8638  00E43A  3204               	rrcf	___ftpack@exp,f,c
  8639  00E43C  5004               	movf	___ftpack@exp,w,c
  8640  00E43E  1203               	iorwf	___ftpack@arg+2,f,c
  8641  00E440  5005               	movf	___ftpack@sign,w,c
  8642  00E442  B4D8               	btfsc	status,2,c
  8643  00E444  D002               	goto	l2866
  8644  00E446  8E03               	bsf	___ftpack@arg+2,7,c
  8645  00E448  D000               	goto	l2866
  8646  00E44A                     l2866:
  8647  00E44A  C001  F001         	movff	___ftpack@arg,?___ftpack
  8648  00E44E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8649  00E452  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8650  00E456  D000               	goto	l933
  8651  00E458                     l933:
  8652  00E458  0012               	return		;funcret
  8653  00E45A                     __end_of___ftpack:
  8654                           	opt stack 0
  8655                           tblptru	equ	0xFF8
  8656                           tblptrh	equ	0xFF7
  8657                           tblptrl	equ	0xFF6
  8658                           tablat	equ	0xFF5
  8659                           prodl	equ	0xFF3
  8660                           postinc0	equ	0xFEE
  8661                           wreg	equ	0xFE8
  8662                           postdec1	equ	0xFE5
  8663                           fsr1l	equ	0xFE1
  8664                           status	equ	0xFD8
  8665                           
  8666 ;; *************** function _Wait_Half_Second *****************
  8667 ;; Defined at:
  8668 ;;		line 114 in file "utils.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;		None
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;		None
  8673 ;; Return value:  Size  Location     Type
  8674 ;;		None               void
  8675 ;; Registers used:
  8676 ;;		wreg, status,2
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;Total ram usage:        0 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; This function calls:
  8689 ;;		Nothing
  8690 ;; This function is called by:
  8691 ;;		_Wait_One_Second
  8692 ;;		_Wait_One_Second_With_Beep
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           	psect	text42
  8697  00D736                     __ptext42:
  8698                           	opt stack 0
  8699  00D736                     _Wait_Half_Second:
  8700                           	opt stack 27
  8701                           
  8702                           ;utils.c: 116: T0CON = 0x03;
  8703                           
  8704                           ;incstack = 0
  8705  00D736  0E03               	movlw	3
  8706  00D738  6ED5               	movwf	4053,c	;volatile
  8707                           
  8708                           ;utils.c: 117: TMR0L = 0xDB;
  8709  00D73A  0EDB               	movlw	219
  8710  00D73C  6ED6               	movwf	4054,c	;volatile
  8711                           
  8712                           ;utils.c: 118: TMR0H = 0x0B;
  8713  00D73E  0E0B               	movlw	11
  8714  00D740  6ED7               	movwf	4055,c	;volatile
  8715                           
  8716                           ;utils.c: 119: INTCONbits.TMR0IF = 0;
  8717  00D742  94F2               	bcf	intcon,2,c	;volatile
  8718                           
  8719                           ;utils.c: 120: T0CONbits.TMR0ON = 1;
  8720  00D744  8ED5               	bsf	4053,7,c	;volatile
  8721                           
  8722                           ;utils.c: 121: while (INTCONbits.TMR0IF == 0);
  8723  00D746  D000               	goto	l557
  8724  00D748                     l557:
  8725  00D748  A4F2               	btfss	intcon,2,c	;volatile
  8726  00D74A  D7FE               	goto	l557
  8727                           
  8728                           ;utils.c: 122: T0CONbits.TMR0ON = 0;
  8729  00D74C  9ED5               	bcf	4053,7,c	;volatile
  8730  00D74E  0012               	return		;funcret
  8731  00D750                     __end_of_Wait_Half_Second:
  8732                           	opt stack 0
  8733                           tblptru	equ	0xFF8
  8734                           tblptrh	equ	0xFF7
  8735                           tblptrl	equ	0xFF6
  8736                           tablat	equ	0xFF5
  8737                           prodl	equ	0xFF3
  8738                           intcon	equ	0xFF2
  8739                           postinc0	equ	0xFEE
  8740                           wreg	equ	0xFE8
  8741                           postdec1	equ	0xFE5
  8742                           fsr1l	equ	0xFE1
  8743                           status	equ	0xFD8
  8744                           
  8745 ;; *************** function _Erase_Star *****************
  8746 ;; Defined at:
  8747 ;;		line 296 in file "Main_Screen.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;		None
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;		None
  8752 ;; Return value:  Size  Location     Type
  8753 ;;		None               void
  8754 ;; Registers used:
  8755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;Total ram usage:        0 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; Hardware stack levels required when called:    7
  8768 ;; This function calls:
  8769 ;;		_drawtext
  8770 ;;		_strcpy
  8771 ;; This function is called by:
  8772 ;;		_Wait_One_Second
  8773 ;;		_Wait_One_Second_With_Beep
  8774 ;; This function uses a non-reentrant model
  8775 ;;
  8776                           
  8777                           	psect	text43
  8778  00D918                     __ptext43:
  8779                           	opt stack 0
  8780  00D918                     _Erase_Star:
  8781                           	opt stack 20
  8782                           
  8783                           ;Main_Screen.c: 298: strcpy(txt," ");
  8784                           
  8785                           ;incstack = 0
  8786  00D918  C071  F001         	movff	_txt,strcpy@to
  8787  00D91C  C072  F002         	movff	_txt+1,strcpy@to+1
  8788  00D920  0EFA               	movlw	low STR_13
  8789  00D922  6E03               	movwf	strcpy@from,c
  8790  00D924  0EFF               	movlw	high STR_13
  8791  00D926  6E04               	movwf	strcpy@from+1,c
  8792  00D928  EC3D  F06C         	call	_strcpy	;wreg free
  8793                           
  8794                           ;Main_Screen.c: 299: drawtext(120,2,txt,0xFFFF,0x0000,1);
  8795  00D92C  0E02               	movlw	2
  8796  00D92E  6E29               	movwf	drawtext@y,c
  8797  00D930  C071  F02A         	movff	_txt,drawtext@_text
  8798  00D934  C072  F02B         	movff	_txt+1,drawtext@_text+1
  8799  00D938  0EFF               	movlw	255
  8800  00D93A  6E2D               	movwf	drawtext@color+1,c
  8801  00D93C  682C               	setf	drawtext@color,c
  8802  00D93E  0E00               	movlw	0
  8803  00D940  6E2F               	movwf	drawtext@bg+1,c
  8804  00D942  0E00               	movlw	0
  8805  00D944  6E2E               	movwf	drawtext@bg,c
  8806  00D946  0E01               	movlw	1
  8807  00D948  6E30               	movwf	drawtext@size,c
  8808  00D94A  0E78               	movlw	120
  8809  00D94C  EC9B  F072         	call	_drawtext
  8810  00D950  0012               	return		;funcret
  8811  00D952                     __end_of_Erase_Star:
  8812                           	opt stack 0
  8813                           tblptru	equ	0xFF8
  8814                           tblptrh	equ	0xFF7
  8815                           tblptrl	equ	0xFF6
  8816                           tablat	equ	0xFF5
  8817                           prodl	equ	0xFF3
  8818                           intcon	equ	0xFF2
  8819                           postinc0	equ	0xFEE
  8820                           wreg	equ	0xFE8
  8821                           postdec1	equ	0xFE5
  8822                           fsr1l	equ	0xFE1
  8823                           status	equ	0xFD8
  8824                           
  8825 ;; *************** function _Draw_Star *****************
  8826 ;; Defined at:
  8827 ;;		line 290 in file "Main_Screen.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;		None
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;		None
  8832 ;; Return value:  Size  Location     Type
  8833 ;;		None               void
  8834 ;; Registers used:
  8835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;Total ram usage:        0 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    7
  8848 ;; This function calls:
  8849 ;;		_drawtext
  8850 ;;		_strcpy
  8851 ;; This function is called by:
  8852 ;;		_Wait_One_Second
  8853 ;;		_Wait_One_Second_With_Beep
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           	psect	text44
  8858  00D8DE                     __ptext44:
  8859                           	opt stack 0
  8860  00D8DE                     _Draw_Star:
  8861                           	opt stack 20
  8862                           
  8863                           ;Main_Screen.c: 292: strcpy(txt,"*");
  8864                           
  8865                           ;incstack = 0
  8866  00D8DE  C071  F001         	movff	_txt,strcpy@to
  8867  00D8E2  C072  F002         	movff	_txt+1,strcpy@to+1
  8868  00D8E6  0EFC               	movlw	low STR_4
  8869  00D8E8  6E03               	movwf	strcpy@from,c
  8870  00D8EA  0EFF               	movlw	high STR_4
  8871  00D8EC  6E04               	movwf	strcpy@from+1,c
  8872  00D8EE  EC3D  F06C         	call	_strcpy	;wreg free
  8873                           
  8874                           ;Main_Screen.c: 293: drawtext(120,2,txt,0xFFFF,0x0000,1);
  8875  00D8F2  0E02               	movlw	2
  8876  00D8F4  6E29               	movwf	drawtext@y,c
  8877  00D8F6  C071  F02A         	movff	_txt,drawtext@_text
  8878  00D8FA  C072  F02B         	movff	_txt+1,drawtext@_text+1
  8879  00D8FE  0EFF               	movlw	255
  8880  00D900  6E2D               	movwf	drawtext@color+1,c
  8881  00D902  682C               	setf	drawtext@color,c
  8882  00D904  0E00               	movlw	0
  8883  00D906  6E2F               	movwf	drawtext@bg+1,c
  8884  00D908  0E00               	movlw	0
  8885  00D90A  6E2E               	movwf	drawtext@bg,c
  8886  00D90C  0E01               	movlw	1
  8887  00D90E  6E30               	movwf	drawtext@size,c
  8888  00D910  0E78               	movlw	120
  8889  00D912  EC9B  F072         	call	_drawtext
  8890  00D916  0012               	return		;funcret
  8891  00D918                     __end_of_Draw_Star:
  8892                           	opt stack 0
  8893                           tblptru	equ	0xFF8
  8894                           tblptrh	equ	0xFF7
  8895                           tblptrl	equ	0xFF6
  8896                           tablat	equ	0xFF5
  8897                           prodl	equ	0xFF3
  8898                           intcon	equ	0xFF2
  8899                           postinc0	equ	0xFEE
  8900                           wreg	equ	0xFE8
  8901                           postdec1	equ	0xFE5
  8902                           fsr1l	equ	0xFE1
  8903                           status	equ	0xFD8
  8904                           
  8905 ;; *************** function _strcpy *****************
  8906 ;; Defined at:
  8907 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  to              2    0[COMRAM] PTR unsigned char 
  8910 ;;		 -> NULL(0), buffer(31), 
  8911 ;;  from            2    2[COMRAM] PTR const unsigned char 
  8912 ;;		 -> STR_13(2), STR_12(2), STR_11(4), STR_10(4), 
  8913 ;;		 -> STR_9(7), STR_8(10), STR_7(7), STR_6(12), 
  8914 ;;		 -> STR_5(22), STR_4(2), STR_3(3), STR_2(5), 
  8915 ;;		 -> STR_1(6), 
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;  cp              2    4[COMRAM] PTR unsigned char 
  8918 ;;		 -> NULL(0), buffer(31), 
  8919 ;; Return value:  Size  Location     Type
  8920 ;;                  2    0[COMRAM] PTR unsigned char 
  8921 ;; Registers used:
  8922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;Total ram usage:        6 bytes
  8933 ;; Hardware stack levels used:    1
  8934 ;; This function calls:
  8935 ;;		Nothing
  8936 ;; This function is called by:
  8937 ;;		_Initialize_LCD_Screen
  8938 ;;		_Draw_Star
  8939 ;;		_Erase_Star
  8940 ;; This function uses a non-reentrant model
  8941 ;;
  8942                           
  8943                           	psect	text45
  8944  00D87A                     __ptext45:
  8945                           	opt stack 0
  8946  00D87A                     _strcpy:
  8947                           	opt stack 26
  8948                           
  8949                           ;incstack = 0
  8950  00D87A  C001  F005         	movff	strcpy@to,strcpy@cp
  8951  00D87E  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  8952  00D882  D005               	goto	l3014
  8953  00D884                     l3012:
  8954  00D884  4A05               	infsnz	strcpy@cp,f,c
  8955  00D886  2A06               	incf	strcpy@cp+1,f,c
  8956  00D888  4A03               	infsnz	strcpy@from,f,c
  8957  00D88A  2A04               	incf	strcpy@from+1,f,c
  8958  00D88C  D000               	goto	l3014
  8959  00D88E                     l3014:
  8960  00D88E  C003  FFF6         	movff	strcpy@from,tblptrl
  8961  00D892  C004  FFF7         	movff	strcpy@from+1,tblptrh
  8962  00D896                     	if	0	;tblptru may be non-zero
  8963  00D896                     	endif
  8964  00D896                     	if	0	;tblptru may be non-zero
  8965  00D896                     	endif
  8966  00D896  C005  FFD9         	movff	strcpy@cp,fsr2l
  8967  00D89A  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  8968  00D89E  0008               	tblrd		*
  8969  00D8A0  CFF5 FFDF          	movff	tablat,indf2
  8970  00D8A4  50DF               	movf	indf2,w,c
  8971  00D8A6  A4D8               	btfss	status,2,c
  8972  00D8A8  D7ED               	goto	l3012
  8973                           
  8974                           ;	Return value of _strcpy is never used
  8975  00D8AA  0012               	return		;funcret
  8976  00D8AC                     __end_of_strcpy:
  8977                           	opt stack 0
  8978                           tblptru	equ	0xFF8
  8979                           tblptrh	equ	0xFF7
  8980                           tblptrl	equ	0xFF6
  8981                           tablat	equ	0xFF5
  8982                           prodl	equ	0xFF3
  8983                           intcon	equ	0xFF2
  8984                           postinc0	equ	0xFEE
  8985                           wreg	equ	0xFE8
  8986                           postdec1	equ	0xFE5
  8987                           fsr1l	equ	0xFE1
  8988                           indf2	equ	0xFDF
  8989                           fsr2h	equ	0xFDA
  8990                           fsr2l	equ	0xFD9
  8991                           status	equ	0xFD8
  8992                           
  8993 ;; *************** function _drawtext *****************
  8994 ;; Defined at:
  8995 ;;		line 425 in file "ST7735_TFT.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;  x               1    wreg     unsigned char 
  8998 ;;  y               1   40[COMRAM] unsigned char 
  8999 ;;  _text           2   41[COMRAM] PTR unsigned char 
  9000 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9001 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9002 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9003 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9004 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9005 ;;  color           2   43[COMRAM] unsigned int 
  9006 ;;  bg              2   45[COMRAM] unsigned int 
  9007 ;;  size            1   47[COMRAM] unsigned char 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  x               1   52[COMRAM] unsigned char 
  9010 ;;  i               2   53[COMRAM] unsigned int 
  9011 ;;  textsize        2   50[COMRAM] unsigned int 
  9012 ;;  cursor_x        1   56[COMRAM] unsigned char 
  9013 ;;  cursor_y        1   55[COMRAM] unsigned char 
  9014 ;; Return value:  Size  Location     Type
  9015 ;;		None               void
  9016 ;; Registers used:
  9017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9023 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;Total ram usage:       17 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    6
  9030 ;; This function calls:
  9031 ;;		_drawChar
  9032 ;;		_strlen
  9033 ;; This function is called by:
  9034 ;;		_Initialize_LCD_Screen
  9035 ;;		_update_LCD_PED_Count
  9036 ;;		_update_LCD_count
  9037 ;;		_update_LCD_misc
  9038 ;;		_Draw_Star
  9039 ;;		_Erase_Star
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042                           
  9043                           	psect	text46
  9044  00E536                     __ptext46:
  9045                           	opt stack 0
  9046  00E536                     _drawtext:
  9047                           	opt stack 21
  9048                           
  9049                           ;incstack = 0
  9050                           ;drawtext@x stored from wreg
  9051  00E536  6E35               	movwf	drawtext@x,c
  9052                           
  9053                           ;ST7735_TFT.c: 427: unsigned char cursor_x, cursor_y;
  9054                           ;ST7735_TFT.c: 428: unsigned int textsize, i;
  9055                           ;ST7735_TFT.c: 429: cursor_x = x, cursor_y = y;
  9056  00E538  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  9057  00E53C  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  9058                           
  9059                           ;ST7735_TFT.c: 430: textsize = strlen(_text);
  9060  00E540  C02A  F001         	movff	drawtext@_text,strlen@s
  9061  00E544  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  9062  00E548  ECC7  F06C         	call	_strlen	;wreg free
  9063  00E54C  C001  F033         	movff	?_strlen,drawtext@textsize
  9064  00E550  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  9065                           
  9066                           ;ST7735_TFT.c: 431: for(i = 0; i < textsize; i++){
  9067  00E554  0E00               	movlw	0
  9068  00E556  6E37               	movwf	drawtext@i+1,c
  9069  00E558  0E00               	movlw	0
  9070  00E55A  6E36               	movwf	drawtext@i,c
  9071  00E55C  D054               	goto	l3050
  9072  00E55E                     l3024:
  9073                           
  9074                           ;ST7735_TFT.c: 432: if(wrap && ((cursor_x + size * 5) > 128)){
  9075  00E55E  5043               	movf	_wrap,w,c
  9076  00E560  B4D8               	btfsc	status,2,c
  9077  00E562  D02C               	goto	l3040
  9078  00E564  5030               	movf	drawtext@size,w,c
  9079  00E566  0D05               	mullw	5
  9080  00E568  5039               	movf	drawtext@cursor_x,w,c
  9081  00E56A  6E31               	movwf	??_drawtext& (0+255),c
  9082  00E56C  6A32               	clrf	(??_drawtext+1)& (0+255),c
  9083  00E56E  50F3               	movf	prodl,w,c
  9084  00E570  2631               	addwf	??_drawtext,f,c
  9085  00E572  50F4               	movf	prodh,w,c
  9086  00E574  2232               	addwfc	??_drawtext+1,f,c
  9087  00E576  BE32               	btfsc	??_drawtext+1,7,c
  9088  00E578  D021               	goto	l3040
  9089  00E57A  5032               	movf	??_drawtext+1,w,c
  9090  00E57C  E104               	bnz	u1860
  9091  00E57E  0E81               	movlw	129
  9092  00E580  5C31               	subwf	??_drawtext,w,c
  9093  00E582  A0D8               	btfss	status,0,c
  9094  00E584  D01B               	goto	l3040
  9095  00E586                     u1860:
  9096                           
  9097                           ;ST7735_TFT.c: 433: cursor_x = 0;
  9098  00E586  0E00               	movlw	0
  9099  00E588  6E39               	movwf	drawtext@cursor_x,c
  9100                           
  9101                           ;ST7735_TFT.c: 434: cursor_y = cursor_y + size * 7 + 3 ;
  9102  00E58A  5030               	movf	drawtext@size,w,c
  9103  00E58C  0D07               	mullw	7
  9104  00E58E  50F3               	movf	prodl,w,c
  9105  00E590  2438               	addwf	drawtext@cursor_y,w,c
  9106  00E592  0F03               	addlw	3
  9107  00E594  6E38               	movwf	drawtext@cursor_y,c
  9108                           
  9109                           ;ST7735_TFT.c: 435: if(cursor_y > 160) cursor_y = 160;
  9110  00E596  0EA0               	movlw	160
  9111  00E598  6438               	cpfsgt	drawtext@cursor_y,c
  9112  00E59A  D003               	goto	l3036
  9113  00E59C  0EA0               	movlw	160
  9114  00E59E  6E38               	movwf	drawtext@cursor_y,c
  9115  00E5A0  D000               	goto	l3036
  9116  00E5A2                     l3036:
  9117                           
  9118                           ;ST7735_TFT.c: 436: if(_text[i] == 0x20) goto _skip; }
  9119  00E5A2  5036               	movf	drawtext@i,w,c
  9120  00E5A4  242A               	addwf	drawtext@_text,w,c
  9121  00E5A6  6ED9               	movwf	fsr2l,c
  9122  00E5A8  5037               	movf	drawtext@i+1,w,c
  9123  00E5AA  202B               	addwfc	drawtext@_text+1,w,c
  9124  00E5AC  6EDA               	movwf	fsr2h,c
  9125  00E5AE  0E20               	movlw	32
  9126  00E5B0  18DE               	xorwf	postinc2,w,c
  9127  00E5B2  B4D8               	btfsc	status,2,c
  9128  00E5B4  D025               	goto	l3048
  9129  00E5B6  D002               	goto	l3040
  9130  00E5B8  D023               	goto	l3048
  9131  00E5BA  D000               	goto	l3040
  9132  00E5BC                     l3040:
  9133                           
  9134                           ;ST7735_TFT.c: 437: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  9135  00E5BC  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  9136  00E5C0  5036               	movf	drawtext@i,w,c
  9137  00E5C2  242A               	addwf	drawtext@_text,w,c
  9138  00E5C4  6ED9               	movwf	fsr2l,c
  9139  00E5C6  5037               	movf	drawtext@i+1,w,c
  9140  00E5C8  202B               	addwfc	drawtext@_text+1,w,c
  9141  00E5CA  6EDA               	movwf	fsr2h,c
  9142  00E5CC  50DF               	movf	indf2,w,c
  9143  00E5CE  6E1F               	movwf	drawChar@c,c
  9144  00E5D0  C02C  F020         	movff	drawtext@color,drawChar@color
  9145  00E5D4  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  9146  00E5D8  C02E  F022         	movff	drawtext@bg,drawChar@bg
  9147  00E5DC  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  9148  00E5E0  C030  F024         	movff	drawtext@size,drawChar@size
  9149  00E5E4  5039               	movf	drawtext@cursor_x,w,c
  9150  00E5E6  EC07  F076         	call	_drawChar
  9151                           
  9152                           ;ST7735_TFT.c: 438: cursor_x = cursor_x + size * 6;
  9153  00E5EA  5030               	movf	drawtext@size,w,c
  9154  00E5EC  0D06               	mullw	6
  9155  00E5EE  50F3               	movf	prodl,w,c
  9156  00E5F0  2439               	addwf	drawtext@cursor_x,w,c
  9157  00E5F2  6E39               	movwf	drawtext@cursor_x,c
  9158                           
  9159                           ;ST7735_TFT.c: 439: if(cursor_x > 128) cursor_x = 128;
  9160  00E5F4  0E80               	movlw	128
  9161  00E5F6  6439               	cpfsgt	drawtext@cursor_x,c
  9162  00E5F8  D003               	goto	l3048
  9163  00E5FA  0E80               	movlw	128
  9164  00E5FC  6E39               	movwf	drawtext@cursor_x,c
  9165  00E5FE  D000               	goto	l3048
  9166  00E600                     l3048:
  9167  00E600  4A36               	infsnz	drawtext@i,f,c
  9168  00E602  2A37               	incf	drawtext@i+1,f,c
  9169  00E604  D000               	goto	l3050
  9170  00E606                     l3050:
  9171  00E606  5033               	movf	drawtext@textsize,w,c
  9172  00E608  5C36               	subwf	drawtext@i,w,c
  9173  00E60A  5034               	movf	drawtext@textsize+1,w,c
  9174  00E60C  5837               	subwfb	drawtext@i+1,w,c
  9175  00E60E  A0D8               	btfss	status,0,c
  9176  00E610  D7A6               	goto	l3024
  9177  00E612  0012               	return		;funcret
  9178  00E614                     __end_of_drawtext:
  9179                           	opt stack 0
  9180                           tblptru	equ	0xFF8
  9181                           tblptrh	equ	0xFF7
  9182                           tblptrl	equ	0xFF6
  9183                           tablat	equ	0xFF5
  9184                           prodh	equ	0xFF4
  9185                           prodl	equ	0xFF3
  9186                           intcon	equ	0xFF2
  9187                           postinc0	equ	0xFEE
  9188                           wreg	equ	0xFE8
  9189                           postdec1	equ	0xFE5
  9190                           fsr1l	equ	0xFE1
  9191                           indf2	equ	0xFDF
  9192                           postinc2	equ	0xFDE
  9193                           fsr2h	equ	0xFDA
  9194                           fsr2l	equ	0xFD9
  9195                           status	equ	0xFD8
  9196                           
  9197 ;; *************** function _strlen *****************
  9198 ;; Defined at:
  9199 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  s               2    0[COMRAM] PTR const unsigned char 
  9202 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9203 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9204 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9205 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9206 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9207 ;; Auto vars:     Size  Location     Type
  9208 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  9209 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9210 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9211 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9212 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9213 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  2    0[COMRAM] unsigned int 
  9216 ;; Registers used:
  9217 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;Total ram usage:        6 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; This function calls:
  9230 ;;		Nothing
  9231 ;; This function is called by:
  9232 ;;		_drawtext
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           	psect	text47
  9237  00D98E                     __ptext47:
  9238                           	opt stack 0
  9239  00D98E                     _strlen:
  9240                           	opt stack 26
  9241                           
  9242                           ;incstack = 0
  9243  00D98E  C001  F005         	movff	strlen@s,strlen@cp
  9244  00D992  C002  F006         	movff	strlen@s+1,strlen@cp+1
  9245  00D996  D003               	goto	l2936
  9246  00D998                     l2934:
  9247  00D998  4A05               	infsnz	strlen@cp,f,c
  9248  00D99A  2A06               	incf	strlen@cp+1,f,c
  9249  00D99C  D000               	goto	l2936
  9250  00D99E                     l2936:
  9251  00D99E  C005  FFD9         	movff	strlen@cp,fsr2l
  9252  00D9A2  C006  FFDA         	movff	strlen@cp+1,fsr2h
  9253  00D9A6  50DF               	movf	indf2,w,c
  9254  00D9A8  A4D8               	btfss	status,2,c
  9255  00D9AA  D7F6               	goto	l2934
  9256  00D9AC  C001  F003         	movff	strlen@s,??_strlen
  9257  00D9B0  C002  F004         	movff	strlen@s+1,??_strlen+1
  9258  00D9B4  1E03               	comf	??_strlen,f,c
  9259  00D9B6  1E04               	comf	??_strlen+1,f,c
  9260  00D9B8  4A03               	infsnz	??_strlen,f,c
  9261  00D9BA  2A04               	incf	??_strlen+1,f,c
  9262  00D9BC  5005               	movf	strlen@cp,w,c
  9263  00D9BE  2403               	addwf	??_strlen,w,c
  9264  00D9C0  6E01               	movwf	?_strlen,c
  9265  00D9C2  5006               	movf	strlen@cp+1,w,c
  9266  00D9C4  2004               	addwfc	??_strlen+1,w,c
  9267  00D9C6  6E02               	movwf	?_strlen+1,c
  9268  00D9C8  D000               	goto	l1182
  9269  00D9CA                     l1182:
  9270  00D9CA  0012               	return		;funcret
  9271  00D9CC                     __end_of_strlen:
  9272                           	opt stack 0
  9273                           tblptru	equ	0xFF8
  9274                           tblptrh	equ	0xFF7
  9275                           tblptrl	equ	0xFF6
  9276                           tablat	equ	0xFF5
  9277                           prodh	equ	0xFF4
  9278                           prodl	equ	0xFF3
  9279                           intcon	equ	0xFF2
  9280                           postinc0	equ	0xFEE
  9281                           wreg	equ	0xFE8
  9282                           postdec1	equ	0xFE5
  9283                           fsr1l	equ	0xFE1
  9284                           indf2	equ	0xFDF
  9285                           postinc2	equ	0xFDE
  9286                           fsr2h	equ	0xFDA
  9287                           fsr2l	equ	0xFD9
  9288                           status	equ	0xFD8
  9289                           
  9290 ;; *************** function _drawChar *****************
  9291 ;; Defined at:
  9292 ;;		line 398 in file "ST7735_TFT.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;  x               1    wreg     unsigned char 
  9295 ;;  y               1   29[COMRAM] unsigned char 
  9296 ;;  c               1   30[COMRAM] unsigned char 
  9297 ;;  color           2   31[COMRAM] unsigned int 
  9298 ;;  bg              2   33[COMRAM] unsigned int 
  9299 ;;  size            1   35[COMRAM] unsigned char 
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;  x               1   37[COMRAM] unsigned char 
  9302 ;;  line            1   36[COMRAM] unsigned char 
  9303 ;;  i               1   39[COMRAM] unsigned char 
  9304 ;;  j               1   38[COMRAM] unsigned char 
  9305 ;; Return value:  Size  Location     Type
  9306 ;;		None               void
  9307 ;; Registers used:
  9308 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9309 ;; Tracked objects:
  9310 ;;		On entry : 0/0
  9311 ;;		On exit  : 0/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9314 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;Total ram usage:       11 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    5
  9321 ;; This function calls:
  9322 ;;		___wmul
  9323 ;;		_drawPixel
  9324 ;;		_fillRect
  9325 ;; This function is called by:
  9326 ;;		_drawtext
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           	psect	text48
  9331  00EC0E                     __ptext48:
  9332                           	opt stack 0
  9333  00EC0E                     _drawChar:
  9334                           	opt stack 21
  9335                           
  9336                           ;incstack = 0
  9337                           ;drawChar@x stored from wreg
  9338  00EC0E  6E26               	movwf	drawChar@x,c
  9339                           
  9340                           ;ST7735_TFT.c: 400: char i, j;
  9341                           ;ST7735_TFT.c: 401: if((x >= 128) || (y >= 160))
  9342  00EC10  0E80               	movlw	128
  9343  00EC12  6026               	cpfslt	drawChar@x,c
  9344  00EC14  D0A6               	goto	l356
  9345  00EC16  0E9F               	movlw	159
  9346  00EC18  641E               	cpfsgt	drawChar@y,c
  9347  00EC1A  D001               	goto	l2882
  9348                           
  9349                           ;ST7735_TFT.c: 402: return;
  9350  00EC1C  D0A2               	goto	l356
  9351  00EC1E                     l2882:
  9352                           
  9353                           ;ST7735_TFT.c: 403: if(size < 1) size = 1;
  9354  00EC1E  5024               	movf	drawChar@size,w,c
  9355  00EC20  A4D8               	btfss	status,2,c
  9356  00EC22  D003               	goto	l2886
  9357  00EC24  0E01               	movlw	1
  9358  00EC26  6E24               	movwf	drawChar@size,c
  9359  00EC28  D000               	goto	l2886
  9360  00EC2A                     l2886:
  9361                           
  9362                           ;ST7735_TFT.c: 404: if((c < ' ') || (c > '~'))
  9363  00EC2A  0E1F               	movlw	31
  9364  00EC2C  641F               	cpfsgt	drawChar@c,c
  9365  00EC2E  D004               	goto	l2890
  9366  00EC30  0E7E               	movlw	126
  9367  00EC32  641F               	cpfsgt	drawChar@c,c
  9368  00EC34  D003               	goto	l358
  9369  00EC36  D000               	goto	l2890
  9370  00EC38                     l2890:
  9371                           
  9372                           ;ST7735_TFT.c: 405: c = '?';
  9373  00EC38  0E3F               	movlw	63
  9374  00EC3A  6E1F               	movwf	drawChar@c,c
  9375  00EC3C                     l358:
  9376                           
  9377                           ;ST7735_TFT.c: 406: for(i=0; i<5; i++ ) {
  9378  00EC3C  0E00               	movlw	0
  9379  00EC3E  6E28               	movwf	drawChar@i,c
  9380  00EC40                     l2892:
  9381  00EC40  0E04               	movlw	4
  9382  00EC42  6428               	cpfsgt	drawChar@i,c
  9383  00EC44  D001               	goto	l2896
  9384  00EC46  D08D               	goto	l356
  9385  00EC48                     l2896:
  9386                           
  9387                           ;ST7735_TFT.c: 407: unsigned char line;
  9388                           ;ST7735_TFT.c: 408: if(c < 'S')
  9389  00EC48  0E53               	movlw	83
  9390  00EC4A  601F               	cpfslt	drawChar@c,c
  9391  00EC4C  D015               	goto	l2900
  9392                           
  9393                           ;ST7735_TFT.c: 409: line = font[(c - 32)*5 + i];
  9394  00EC4E  0EE0               	movlw	224
  9395  00EC50  241F               	addwf	drawChar@c,w,c
  9396  00EC52  6E01               	movwf	___wmul@multiplier,c
  9397  00EC54  6A02               	clrf	___wmul@multiplier+1,c
  9398  00EC56  0EFF               	movlw	255
  9399  00EC58  2202               	addwfc	___wmul@multiplier+1,f,c
  9400  00EC5A  0E00               	movlw	0
  9401  00EC5C  6E04               	movwf	___wmul@multiplicand+1,c
  9402  00EC5E  0E05               	movlw	5
  9403  00EC60  6E03               	movwf	___wmul@multiplicand,c
  9404  00EC62  ECE7  F06B         	call	___wmul	;wreg free
  9405  00EC66  5028               	movf	drawChar@i,w,c
  9406  00EC68  2601               	addwf	?___wmul,f,c
  9407  00EC6A  0E00               	movlw	0
  9408  00EC6C  2202               	addwfc	?___wmul+1,f,c
  9409  00EC6E  0ECF               	movlw	low _font
  9410  00EC70  2401               	addwf	?___wmul,w,c
  9411  00EC72  6EF6               	movwf	tblptrl,c
  9412  00EC74  0EFD               	movlw	high _font
  9413  00EC76  D014               	goto	L16
  9414  00EC78                     l2900:
  9415                           
  9416                           ;ST7735_TFT.c: 410: else
  9417                           ;ST7735_TFT.c: 411: line = font2[(c - 'S')*5 + i];
  9418  00EC78  0EAD               	movlw	173
  9419  00EC7A  241F               	addwf	drawChar@c,w,c
  9420  00EC7C  6E01               	movwf	___wmul@multiplier,c
  9421  00EC7E  6A02               	clrf	___wmul@multiplier+1,c
  9422  00EC80  0EFF               	movlw	255
  9423  00EC82  2202               	addwfc	___wmul@multiplier+1,f,c
  9424  00EC84  0E00               	movlw	0
  9425  00EC86  6E04               	movwf	___wmul@multiplicand+1,c
  9426  00EC88  0E05               	movlw	5
  9427  00EC8A  6E03               	movwf	___wmul@multiplicand,c
  9428  00EC8C  ECE7  F06B         	call	___wmul	;wreg free
  9429  00EC90  5028               	movf	drawChar@i,w,c
  9430  00EC92  2601               	addwf	?___wmul,f,c
  9431  00EC94  0E00               	movlw	0
  9432  00EC96  2202               	addwfc	?___wmul+1,f,c
  9433  00EC98  0ECE               	movlw	low _font2
  9434  00EC9A  2401               	addwf	?___wmul,w,c
  9435  00EC9C  6EF6               	movwf	tblptrl,c
  9436  00EC9E  0EFE               	movlw	high _font2
  9437  00ECA0                     L16:
  9438  00ECA0  2002               	addwfc	?___wmul+1,w,c
  9439  00ECA2  6EF7               	movwf	tblptrh,c
  9440  00ECA4                     	if	0	;There are less than 3 active tblptr bytes
  9441  00ECA4                     	endif
  9442  00ECA4  0008               	tblrd		*
  9443  00ECA6  CFF5 F025          	movff	tablat,drawChar@line
  9444  00ECAA  D000               	goto	l2902
  9445  00ECAC                     l2902:
  9446                           
  9447                           ;ST7735_TFT.c: 412: for(j=0; j<7; j++, line >>= 1) {
  9448  00ECAC  0E00               	movlw	0
  9449  00ECAE  6E27               	movwf	drawChar@j,c
  9450  00ECB0                     l2904:
  9451  00ECB0  0E06               	movlw	6
  9452  00ECB2  6427               	cpfsgt	drawChar@j,c
  9453  00ECB4  D001               	goto	l365
  9454  00ECB6  D053               	goto	l2928
  9455  00ECB8                     l365:
  9456                           
  9457                           ;ST7735_TFT.c: 413: if(line & 0x01) {
  9458  00ECB8  A025               	btfss	drawChar@line,0,c
  9459  00ECBA  D023               	goto	l2914
  9460                           
  9461                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, color);
  9462  00ECBC  0424               	decf	drawChar@size,w,c
  9463  00ECBE  A4D8               	btfss	status,2,c
  9464  00ECC0  D00C               	goto	l2912
  9465  00ECC2  501E               	movf	drawChar@y,w,c
  9466  00ECC4  2427               	addwf	drawChar@j,w,c
  9467  00ECC6  6E08               	movwf	drawPixel@y,c
  9468  00ECC8  C020  F009         	movff	drawChar@color,drawPixel@color
  9469  00ECCC  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  9470  00ECD0  5026               	movf	drawChar@x,w,c
  9471  00ECD2  2428               	addwf	drawChar@i,w,c
  9472  00ECD4  EC25  F06C         	call	_drawPixel
  9473  00ECD8  D03E               	goto	l2922
  9474  00ECDA                     l2912:
  9475                           
  9476                           ;ST7735_TFT.c: 415: else fillRect(x+(i*size), y+(j*size), size, size, color);
  9477  00ECDA  5027               	movf	drawChar@j,w,c
  9478  00ECDC  0224               	mulwf	drawChar@size,c
  9479  00ECDE  50F3               	movf	prodl,w,c
  9480  00ECE0  241E               	addwf	drawChar@y,w,c
  9481  00ECE2  6E13               	movwf	fillRect@y,c
  9482  00ECE4  C024  F014         	movff	drawChar@size,fillRect@w
  9483  00ECE8  C024  F015         	movff	drawChar@size,fillRect@h
  9484  00ECEC  C020  F016         	movff	drawChar@color,fillRect@color
  9485  00ECF0  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  9486  00ECF4  5028               	movf	drawChar@i,w,c
  9487  00ECF6  0224               	mulwf	drawChar@size,c
  9488  00ECF8  50F3               	movf	prodl,w,c
  9489  00ECFA  2426               	addwf	drawChar@x,w,c
  9490  00ECFC  EC8D  F06D         	call	_fillRect
  9491                           
  9492                           ;ST7735_TFT.c: 416: }
  9493  00ED00  D02A               	goto	l2922
  9494  00ED02                     l2914:
  9495                           
  9496                           ;ST7735_TFT.c: 417: else if(bg != color) {
  9497  00ED02  5020               	movf	drawChar@color,w,c
  9498  00ED04  1822               	xorwf	drawChar@bg,w,c
  9499  00ED06  E104               	bnz	u1730
  9500  00ED08  5021               	movf	drawChar@color+1,w,c
  9501  00ED0A  1823               	xorwf	drawChar@bg+1,w,c
  9502  00ED0C  B4D8               	btfsc	status,2,c
  9503  00ED0E  D023               	goto	l2922
  9504  00ED10                     u1730:
  9505                           
  9506                           ;ST7735_TFT.c: 418: if(size == 1) drawPixel(x+i, y+j, bg);
  9507  00ED10  0424               	decf	drawChar@size,w,c
  9508  00ED12  A4D8               	btfss	status,2,c
  9509  00ED14  D00C               	goto	l2920
  9510  00ED16  501E               	movf	drawChar@y,w,c
  9511  00ED18  2427               	addwf	drawChar@j,w,c
  9512  00ED1A  6E08               	movwf	drawPixel@y,c
  9513  00ED1C  C022  F009         	movff	drawChar@bg,drawPixel@color
  9514  00ED20  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  9515  00ED24  5026               	movf	drawChar@x,w,c
  9516  00ED26  2428               	addwf	drawChar@i,w,c
  9517  00ED28  EC25  F06C         	call	_drawPixel
  9518  00ED2C  D014               	goto	l2922
  9519  00ED2E                     l2920:
  9520                           
  9521                           ;ST7735_TFT.c: 419: else fillRect(x+i*size, y+j*size, size, size, bg);
  9522  00ED2E  5027               	movf	drawChar@j,w,c
  9523  00ED30  0224               	mulwf	drawChar@size,c
  9524  00ED32  50F3               	movf	prodl,w,c
  9525  00ED34  241E               	addwf	drawChar@y,w,c
  9526  00ED36  6E13               	movwf	fillRect@y,c
  9527  00ED38  C024  F014         	movff	drawChar@size,fillRect@w
  9528  00ED3C  C024  F015         	movff	drawChar@size,fillRect@h
  9529  00ED40  C022  F016         	movff	drawChar@bg,fillRect@color
  9530  00ED44  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  9531  00ED48  5028               	movf	drawChar@i,w,c
  9532  00ED4A  0224               	mulwf	drawChar@size,c
  9533  00ED4C  50F3               	movf	prodl,w,c
  9534  00ED4E  2426               	addwf	drawChar@x,w,c
  9535  00ED50  EC8D  F06D         	call	_fillRect
  9536  00ED54  D000               	goto	l2922
  9537  00ED56                     l2922:
  9538  00ED56  2A27               	incf	drawChar@j,f,c
  9539  00ED58  90D8               	bcf	status,0,c
  9540  00ED5A  3225               	rrcf	drawChar@line,f,c
  9541  00ED5C  D7A9               	goto	l2904
  9542  00ED5E                     l2928:
  9543  00ED5E  2A28               	incf	drawChar@i,f,c
  9544  00ED60  D76F               	goto	l2892
  9545  00ED62                     l356:
  9546  00ED62  0012               	return		;funcret
  9547  00ED64                     __end_of_drawChar:
  9548                           	opt stack 0
  9549                           tblptru	equ	0xFF8
  9550                           tblptrh	equ	0xFF7
  9551                           tblptrl	equ	0xFF6
  9552                           tablat	equ	0xFF5
  9553                           prodh	equ	0xFF4
  9554                           prodl	equ	0xFF3
  9555                           intcon	equ	0xFF2
  9556                           postinc0	equ	0xFEE
  9557                           wreg	equ	0xFE8
  9558                           postdec1	equ	0xFE5
  9559                           fsr1l	equ	0xFE1
  9560                           indf2	equ	0xFDF
  9561                           postinc2	equ	0xFDE
  9562                           fsr2h	equ	0xFDA
  9563                           fsr2l	equ	0xFD9
  9564                           status	equ	0xFD8
  9565                           
  9566 ;; *************** function _fillRect *****************
  9567 ;; Defined at:
  9568 ;;		line 388 in file "ST7735_TFT.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;  x               1    wreg     unsigned char 
  9571 ;;  y               1   18[COMRAM] unsigned char 
  9572 ;;  w               1   19[COMRAM] unsigned char 
  9573 ;;  h               1   20[COMRAM] unsigned char 
  9574 ;;  color           2   21[COMRAM] unsigned int 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  x               1   26[COMRAM] unsigned char 
  9577 ;;  i               2   27[COMRAM] int 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;		None               void
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0, cstack
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9587 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;Total ram usage:       11 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    4
  9594 ;; This function calls:
  9595 ;;		_drawFastVLine
  9596 ;; This function is called by:
  9597 ;;		_drawChar
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text49
  9602  00DB1A                     __ptext49:
  9603                           	opt stack 0
  9604  00DB1A                     _fillRect:
  9605                           	opt stack 21
  9606                           
  9607                           ;incstack = 0
  9608                           ;fillRect@x stored from wreg
  9609  00DB1A  6E1B               	movwf	fillRect@x,c
  9610                           
  9611                           ;ST7735_TFT.c: 390: signed int i;
  9612                           ;ST7735_TFT.c: 392: for (i = x; i < x + w; i++)
  9613  00DB1C  C01B  F01C         	movff	fillRect@x,fillRect@i
  9614  00DB20  6A1D               	clrf	fillRect@i+1,c
  9615  00DB22  D00E               	goto	l2826
  9616  00DB24                     l2822:
  9617                           
  9618                           ;ST7735_TFT.c: 393: {
  9619                           ;ST7735_TFT.c: 394: drawFastVLine(i, y, h, color);
  9620  00DB24  C013  F008         	movff	fillRect@y,drawFastVLine@y
  9621  00DB28  C015  F009         	movff	fillRect@h,drawFastVLine@h
  9622  00DB2C  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  9623  00DB30  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  9624  00DB34  501C               	movf	fillRect@i,w,c
  9625  00DB36  ECA3  F06F         	call	_drawFastVLine
  9626  00DB3A  4A1C               	infsnz	fillRect@i,f,c
  9627  00DB3C  2A1D               	incf	fillRect@i+1,f,c
  9628  00DB3E  D000               	goto	l2826
  9629  00DB40                     l2826:
  9630  00DB40  5014               	movf	fillRect@w,w,c
  9631  00DB42  C01B  F018         	movff	fillRect@x,??_fillRect
  9632  00DB46  6A19               	clrf	(??_fillRect+1)& (0+255),c
  9633  00DB48  2618               	addwf	??_fillRect,f,c
  9634  00DB4A  0E00               	movlw	0
  9635  00DB4C  2219               	addwfc	??_fillRect+1,f,c
  9636  00DB4E  5018               	movf	??_fillRect,w,c
  9637  00DB50  5C1C               	subwf	fillRect@i,w,c
  9638  00DB52  501D               	movf	fillRect@i+1,w,c
  9639  00DB54  0A80               	xorlw	128
  9640  00DB56  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  9641  00DB58  5019               	movf	??_fillRect+1,w,c
  9642  00DB5A  0A80               	xorlw	128
  9643  00DB5C  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  9644  00DB5E  A0D8               	btfss	status,0,c
  9645  00DB60  D7E1               	goto	l2822
  9646  00DB62  0012               	return		;funcret
  9647  00DB64                     __end_of_fillRect:
  9648                           	opt stack 0
  9649                           tblptru	equ	0xFF8
  9650                           tblptrh	equ	0xFF7
  9651                           tblptrl	equ	0xFF6
  9652                           tablat	equ	0xFF5
  9653                           prodh	equ	0xFF4
  9654                           prodl	equ	0xFF3
  9655                           intcon	equ	0xFF2
  9656                           postinc0	equ	0xFEE
  9657                           wreg	equ	0xFE8
  9658                           postdec1	equ	0xFE5
  9659                           fsr1l	equ	0xFE1
  9660                           indf2	equ	0xFDF
  9661                           postinc2	equ	0xFDE
  9662                           fsr2h	equ	0xFDA
  9663                           fsr2l	equ	0xFD9
  9664                           status	equ	0xFD8
  9665                           
  9666 ;; *************** function _drawFastVLine *****************
  9667 ;; Defined at:
  9668 ;;		line 367 in file "ST7735_TFT.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;  x               1    wreg     unsigned char 
  9671 ;;  y               1    7[COMRAM] unsigned char 
  9672 ;;  h               1    8[COMRAM] unsigned char 
  9673 ;;  color           2    9[COMRAM] unsigned int 
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;  x               1   17[COMRAM] unsigned char 
  9676 ;;  lo              1   16[COMRAM] unsigned char 
  9677 ;;  hi              1   15[COMRAM] unsigned char 
  9678 ;; Return value:  Size  Location     Type
  9679 ;;		None               void
  9680 ;; Registers used:
  9681 ;;		wreg, status,2, status,0, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9687 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;Total ram usage:       11 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    3
  9694 ;; This function calls:
  9695 ;;		_setAddrWindow
  9696 ;;		_spiwrite
  9697 ;; This function is called by:
  9698 ;;		_fillRect
  9699 ;;		_fillCircleHelper
  9700 ;;		_fillCircle
  9701 ;;		_drawRect
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           	psect	text50
  9706  00DF46                     __ptext50:
  9707                           	opt stack 0
  9708  00DF46                     _drawFastVLine:
  9709                           	opt stack 21
  9710                           
  9711                           ;incstack = 0
  9712                           ;drawFastVLine@x stored from wreg
  9713  00DF46  6E12               	movwf	drawFastVLine@x,c
  9714                           
  9715                           ;ST7735_TFT.c: 369: unsigned char hi, lo;
  9716                           ;ST7735_TFT.c: 370: if((x >= 128) || (y >= 160))
  9717  00DF48  0E80               	movlw	128
  9718  00DF4A  6012               	cpfslt	drawFastVLine@x,c
  9719  00DF4C  D03F               	goto	l340
  9720  00DF4E  0E9F               	movlw	159
  9721  00DF50  6408               	cpfsgt	drawFastVLine@y,c
  9722  00DF52  D001               	goto	l2792
  9723                           
  9724                           ;ST7735_TFT.c: 371: return;
  9725  00DF54  D03B               	goto	l340
  9726  00DF56                     l2792:
  9727                           
  9728                           ;ST7735_TFT.c: 372: if((y + h - 1) >= 160)
  9729  00DF56  0EFF               	movlw	255
  9730  00DF58  6E0C               	movwf	??_drawFastVLine& (0+255),c
  9731  00DF5A  0EFF               	movlw	255
  9732  00DF5C  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  9733  00DF5E  5009               	movf	drawFastVLine@h,w,c
  9734  00DF60  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  9735  00DF64  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  9736  00DF66  260E               	addwf	??_drawFastVLine+2,f,c
  9737  00DF68  0E00               	movlw	0
  9738  00DF6A  220F               	addwfc	??_drawFastVLine+3,f,c
  9739  00DF6C  500C               	movf	??_drawFastVLine,w,c
  9740  00DF6E  260E               	addwf	??_drawFastVLine+2,f,c
  9741  00DF70  500D               	movf	??_drawFastVLine+1,w,c
  9742  00DF72  220F               	addwfc	??_drawFastVLine+3,f,c
  9743  00DF74  BE0F               	btfsc	??_drawFastVLine+3,7,c
  9744  00DF76  D00B               	goto	l2796
  9745  00DF78  500F               	movf	??_drawFastVLine+3,w,c
  9746  00DF7A  E104               	bnz	u1490
  9747  00DF7C  0EA0               	movlw	160
  9748  00DF7E  5C0E               	subwf	??_drawFastVLine+2,w,c
  9749  00DF80  A0D8               	btfss	status,0,c
  9750  00DF82  D005               	goto	l2796
  9751  00DF84                     u1490:
  9752                           
  9753                           ;ST7735_TFT.c: 373: h = 160 - y;
  9754  00DF84  5008               	movf	drawFastVLine@y,w,c
  9755  00DF86  0800               	sublw	0
  9756  00DF88  0FA0               	addlw	160
  9757  00DF8A  6E09               	movwf	drawFastVLine@h,c
  9758  00DF8C  D000               	goto	l2796
  9759  00DF8E                     l2796:
  9760                           
  9761                           ;ST7735_TFT.c: 374: hi = color >> 8; lo = color;
  9762  00DF8E  500B               	movf	drawFastVLine@color+1,w,c
  9763  00DF90  6E10               	movwf	drawFastVLine@hi,c
  9764  00DF92  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  9765                           
  9766                           ;ST7735_TFT.c: 375: setAddrWindow(x, y, x, y + h - 1);
  9767  00DF96  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  9768  00DF9A  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  9769  00DF9E  5008               	movf	drawFastVLine@y,w,c
  9770  00DFA0  2409               	addwf	drawFastVLine@h,w,c
  9771  00DFA2  6E0C               	movwf	??_drawFastVLine& (0+255),c
  9772  00DFA4  040C               	decf	??_drawFastVLine,w,c
  9773  00DFA6  6E06               	movwf	setAddrWindow@y1,c
  9774  00DFA8  5012               	movf	drawFastVLine@x,w,c
  9775  00DFAA  ECB2  F06D         	call	_setAddrWindow
  9776                           
  9777                           ;ST7735_TFT.c: 376: PORTDbits.RD2 = 1;
  9778  00DFAE  8483               	bsf	3971,2,c	;volatile
  9779                           
  9780                           ;ST7735_TFT.c: 377: PORTDbits.RD3 = 0;
  9781  00DFB0  9683               	bcf	3971,3,c	;volatile
  9782                           
  9783                           ;ST7735_TFT.c: 379: while (h--) {
  9784  00DFB2  D007               	goto	l2808
  9785  00DFB4                     l2806:
  9786                           
  9787                           ;ST7735_TFT.c: 380: spiwrite(hi);
  9788  00DFB4  5010               	movf	drawFastVLine@hi,w,c
  9789  00DFB6  EC7C  F06B         	call	_spiwrite
  9790                           
  9791                           ;ST7735_TFT.c: 381: spiwrite(lo);
  9792  00DFBA  5011               	movf	drawFastVLine@lo,w,c
  9793  00DFBC  EC7C  F06B         	call	_spiwrite
  9794  00DFC0  D000               	goto	l2808
  9795  00DFC2                     l2808:
  9796  00DFC2  0609               	decf	drawFastVLine@h,f,c
  9797  00DFC4  2809               	incf	drawFastVLine@h,w,c
  9798  00DFC6  A4D8               	btfss	status,2,c
  9799  00DFC8  D7F5               	goto	l2806
  9800                           
  9801                           ;ST7735_TFT.c: 382: }
  9802                           ;ST7735_TFT.c: 383: PORTDbits.RD3 = 1;
  9803  00DFCA  8683               	bsf	3971,3,c	;volatile
  9804  00DFCC                     l340:
  9805  00DFCC  0012               	return		;funcret
  9806  00DFCE                     __end_of_drawFastVLine:
  9807                           	opt stack 0
  9808                           tblptru	equ	0xFF8
  9809                           tblptrh	equ	0xFF7
  9810                           tblptrl	equ	0xFF6
  9811                           tablat	equ	0xFF5
  9812                           prodh	equ	0xFF4
  9813                           prodl	equ	0xFF3
  9814                           intcon	equ	0xFF2
  9815                           postinc0	equ	0xFEE
  9816                           wreg	equ	0xFE8
  9817                           postdec1	equ	0xFE5
  9818                           fsr1l	equ	0xFE1
  9819                           indf2	equ	0xFDF
  9820                           postinc2	equ	0xFDE
  9821                           fsr2h	equ	0xFDA
  9822                           fsr2l	equ	0xFD9
  9823                           status	equ	0xFD8
  9824                           
  9825 ;; *************** function _drawPixel *****************
  9826 ;; Defined at:
  9827 ;;		line 358 in file "ST7735_TFT.c"
  9828 ;; Parameters:    Size  Location     Type
  9829 ;;  x               1    wreg     unsigned char 
  9830 ;;  y               1    7[COMRAM] unsigned char 
  9831 ;;  color           2    8[COMRAM] unsigned int 
  9832 ;; Auto vars:     Size  Location     Type
  9833 ;;  x               1   10[COMRAM] unsigned char 
  9834 ;; Return value:  Size  Location     Type
  9835 ;;		None               void
  9836 ;; Registers used:
  9837 ;;		wreg, status,2, status,0, cstack
  9838 ;; Tracked objects:
  9839 ;;		On entry : 0/0
  9840 ;;		On exit  : 0/0
  9841 ;;		Unchanged: 0/0
  9842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9843 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9844 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9846 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;Total ram usage:        4 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; Hardware stack levels required when called:    3
  9850 ;; This function calls:
  9851 ;;		_setAddrWindow
  9852 ;;		_write_data
  9853 ;; This function is called by:
  9854 ;;		_drawChar
  9855 ;;		_drawCircle
  9856 ;;		_drawCircleHelper
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           	psect	text51
  9861  00D84A                     __ptext51:
  9862                           	opt stack 0
  9863  00D84A                     _drawPixel:
  9864                           	opt stack 22
  9865                           
  9866                           ;incstack = 0
  9867                           ;drawPixel@x stored from wreg
  9868  00D84A  6E0B               	movwf	drawPixel@x,c
  9869                           
  9870                           ;ST7735_TFT.c: 360: if((x >= 128) || (y >= 160))
  9871  00D84C  0E80               	movlw	128
  9872  00D84E  600B               	cpfslt	drawPixel@x,c
  9873  00D850  D013               	goto	l334
  9874  00D852  0E9F               	movlw	159
  9875  00D854  6408               	cpfsgt	drawPixel@y,c
  9876  00D856  D001               	goto	l2814
  9877                           
  9878                           ;ST7735_TFT.c: 361: return;
  9879  00D858  D00F               	goto	l334
  9880  00D85A                     l2814:
  9881                           
  9882                           ;ST7735_TFT.c: 362: setAddrWindow(x,y,x+1,y+1);
  9883  00D85A  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  9884  00D85E  280B               	incf	drawPixel@x,w,c
  9885  00D860  6E05               	movwf	setAddrWindow@x1,c
  9886  00D862  2808               	incf	drawPixel@y,w,c
  9887  00D864  6E06               	movwf	setAddrWindow@y1,c
  9888  00D866  500B               	movf	drawPixel@x,w,c
  9889  00D868  ECB2  F06D         	call	_setAddrWindow
  9890                           
  9891                           ;ST7735_TFT.c: 363: write_data(color >> 8);
  9892  00D86C  500A               	movf	drawPixel@color+1,w,c
  9893  00D86E  EC62  F06B         	call	_write_data
  9894                           
  9895                           ;ST7735_TFT.c: 364: write_data(color & 0xFF);
  9896  00D872  5009               	movf	drawPixel@color,w,c
  9897  00D874  EC62  F06B         	call	_write_data
  9898  00D878                     l334:
  9899  00D878  0012               	return		;funcret
  9900  00D87A                     __end_of_drawPixel:
  9901                           	opt stack 0
  9902                           tblptru	equ	0xFF8
  9903                           tblptrh	equ	0xFF7
  9904                           tblptrl	equ	0xFF6
  9905                           tablat	equ	0xFF5
  9906                           prodh	equ	0xFF4
  9907                           prodl	equ	0xFF3
  9908                           intcon	equ	0xFF2
  9909                           postinc0	equ	0xFEE
  9910                           wreg	equ	0xFE8
  9911                           postdec1	equ	0xFE5
  9912                           fsr1l	equ	0xFE1
  9913                           indf2	equ	0xFDF
  9914                           postinc2	equ	0xFDE
  9915                           fsr2h	equ	0xFDA
  9916                           fsr2l	equ	0xFD9
  9917                           status	equ	0xFD8
  9918                           
  9919 ;; *************** function _setAddrWindow *****************
  9920 ;; Defined at:
  9921 ;;		line 343 in file "ST7735_TFT.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;  x0              1    wreg     unsigned char 
  9924 ;;  y0              1    3[COMRAM] unsigned char 
  9925 ;;  x1              1    4[COMRAM] unsigned char 
  9926 ;;  y1              1    5[COMRAM] unsigned char 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  x0              1    6[COMRAM] unsigned char 
  9929 ;; Return value:  Size  Location     Type
  9930 ;;		None               void
  9931 ;; Registers used:
  9932 ;;		wreg, status,2, status,0, cstack
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9938 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9942 ;;Total ram usage:        4 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:    2
  9945 ;; This function calls:
  9946 ;;		_write_command
  9947 ;;		_write_data
  9948 ;; This function is called by:
  9949 ;;		_drawPixel
  9950 ;;		_drawFastVLine
  9951 ;;		_fillRectangle
  9952 ;;		_drawFastHLine
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           	psect	text52
  9957  00DB64                     __ptext52:
  9958                           	opt stack 0
  9959  00DB64                     _setAddrWindow:
  9960                           	opt stack 21
  9961                           
  9962                           ;incstack = 0
  9963                           ;setAddrWindow@x0 stored from wreg
  9964  00DB64  6E07               	movwf	setAddrWindow@x0,c
  9965                           
  9966                           ;ST7735_TFT.c: 345: write_command(0x2A);
  9967  00DB66  0E2A               	movlw	42
  9968  00DB68  EC5A  F06B         	call	_write_command
  9969                           
  9970                           ;ST7735_TFT.c: 346: write_data(0);
  9971  00DB6C  0E00               	movlw	0
  9972  00DB6E  EC62  F06B         	call	_write_data
  9973                           
  9974                           ;ST7735_TFT.c: 347: write_data(x0 + colstart);
  9975  00DB72  5007               	movf	setAddrWindow@x0,w,c
  9976  00DB74  247C               	addwf	_colstart,w,c
  9977  00DB76  EC62  F06B         	call	_write_data
  9978                           
  9979                           ;ST7735_TFT.c: 348: write_data(0);
  9980  00DB7A  0E00               	movlw	0
  9981  00DB7C  EC62  F06B         	call	_write_data
  9982                           
  9983                           ;ST7735_TFT.c: 349: write_data(x1 + colstart);
  9984  00DB80  5005               	movf	setAddrWindow@x1,w,c
  9985  00DB82  247C               	addwf	_colstart,w,c
  9986  00DB84  EC62  F06B         	call	_write_data
  9987                           
  9988                           ;ST7735_TFT.c: 350: write_command(0x2B);
  9989  00DB88  0E2B               	movlw	43
  9990  00DB8A  EC5A  F06B         	call	_write_command
  9991                           
  9992                           ;ST7735_TFT.c: 351: write_data(0);
  9993  00DB8E  0E00               	movlw	0
  9994  00DB90  EC62  F06B         	call	_write_data
  9995                           
  9996                           ;ST7735_TFT.c: 352: write_data(y0 + rowstart);
  9997  00DB94  5004               	movf	setAddrWindow@y0,w,c
  9998  00DB96  247F               	addwf	_rowstart,w,c
  9999  00DB98  EC62  F06B         	call	_write_data
 10000                           
 10001                           ;ST7735_TFT.c: 353: write_data(0);
 10002  00DB9C  0E00               	movlw	0
 10003  00DB9E  EC62  F06B         	call	_write_data
 10004                           
 10005                           ;ST7735_TFT.c: 354: write_data(y1 + rowstart);
 10006  00DBA2  5006               	movf	setAddrWindow@y1,w,c
 10007  00DBA4  247F               	addwf	_rowstart,w,c
 10008  00DBA6  EC62  F06B         	call	_write_data
 10009                           
 10010                           ;ST7735_TFT.c: 355: write_command(0x2C);
 10011  00DBAA  0E2C               	movlw	44
 10012  00DBAC  EC5A  F06B         	call	_write_command
 10013  00DBB0  0012               	return		;funcret
 10014  00DBB2                     __end_of_setAddrWindow:
 10015                           	opt stack 0
 10016                           tblptru	equ	0xFF8
 10017                           tblptrh	equ	0xFF7
 10018                           tblptrl	equ	0xFF6
 10019                           tablat	equ	0xFF5
 10020                           prodh	equ	0xFF4
 10021                           prodl	equ	0xFF3
 10022                           intcon	equ	0xFF2
 10023                           postinc0	equ	0xFEE
 10024                           wreg	equ	0xFE8
 10025                           postdec1	equ	0xFE5
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           fsr2h	equ	0xFDA
 10030                           fsr2l	equ	0xFD9
 10031                           status	equ	0xFD8
 10032                           
 10033 ;; *************** function _write_data *****************
 10034 ;; Defined at:
 10035 ;;		line 156 in file "ST7735_TFT.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;  data_           1    wreg     unsigned char 
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  data_           1    2[COMRAM] unsigned char 
 10040 ;; Return value:  Size  Location     Type
 10041 ;;		None               void
 10042 ;; Registers used:
 10043 ;;		wreg, status,2, cstack
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;Total ram usage:        1 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:    1
 10056 ;; This function calls:
 10057 ;;		_spiwrite
 10058 ;; This function is called by:
 10059 ;;		_Rcmd1
 10060 ;;		_Rcmd2red
 10061 ;;		_Rcmd3
 10062 ;;		_setAddrWindow
 10063 ;;		_drawPixel
 10064 ;;		_TFT_GreenTab_Initialize
 10065 ;;		_Bcmd
 10066 ;;		_setScrollDefinition
 10067 ;;		_Rcmd2green
 10068 ;;		_VerticalScroll
 10069 ;; This function uses a non-reentrant model
 10070 ;;
 10071                           
 10072                           	psect	text53
 10073  00D6C4                     __ptext53:
 10074                           	opt stack 0
 10075  00D6C4                     _write_data:
 10076                           	opt stack 21
 10077                           
 10078                           ;incstack = 0
 10079                           ;write_data@data_ stored from wreg
 10080  00D6C4  6E03               	movwf	write_data@data_,c
 10081                           
 10082                           ;ST7735_TFT.c: 158: PORTDbits.RD3 = 0;
 10083  00D6C6  9683               	bcf	3971,3,c	;volatile
 10084                           
 10085                           ;ST7735_TFT.c: 159: PORTDbits.RD2 = 1;
 10086  00D6C8  8483               	bsf	3971,2,c	;volatile
 10087                           
 10088                           ;ST7735_TFT.c: 160: spiwrite(data_);
 10089  00D6CA  5003               	movf	write_data@data_,w,c
 10090  00D6CC  EC7C  F06B         	call	_spiwrite
 10091                           
 10092                           ;ST7735_TFT.c: 161: PORTDbits.RD3 = 1;
 10093  00D6D0  8683               	bsf	3971,3,c	;volatile
 10094  00D6D2  0012               	return		;funcret
 10095  00D6D4                     __end_of_write_data:
 10096                           	opt stack 0
 10097                           tblptru	equ	0xFF8
 10098                           tblptrh	equ	0xFF7
 10099                           tblptrl	equ	0xFF6
 10100                           tablat	equ	0xFF5
 10101                           prodh	equ	0xFF4
 10102                           prodl	equ	0xFF3
 10103                           intcon	equ	0xFF2
 10104                           postinc0	equ	0xFEE
 10105                           wreg	equ	0xFE8
 10106                           postdec1	equ	0xFE5
 10107                           fsr1l	equ	0xFE1
 10108                           indf2	equ	0xFDF
 10109                           postinc2	equ	0xFDE
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function _write_command *****************
 10115 ;; Defined at:
 10116 ;;		line 145 in file "ST7735_TFT.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;  cmd_            1    wreg     unsigned char 
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;  cmd_            1    2[COMRAM] unsigned char 
 10121 ;; Return value:  Size  Location     Type
 10122 ;;		None               void
 10123 ;; Registers used:
 10124 ;;		wreg, status,2, cstack
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;Total ram usage:        1 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    1
 10137 ;; This function calls:
 10138 ;;		_spiwrite
 10139 ;; This function is called by:
 10140 ;;		_Rcmd1
 10141 ;;		_Rcmd2red
 10142 ;;		_Rcmd3
 10143 ;;		_setAddrWindow
 10144 ;;		_TFT_GreenTab_Initialize
 10145 ;;		_Bcmd
 10146 ;;		_setScrollDefinition
 10147 ;;		_Rcmd2green
 10148 ;;		_VerticalScroll
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           	psect	text54
 10153  00D6B4                     __ptext54:
 10154                           	opt stack 0
 10155  00D6B4                     _write_command:
 10156                           	opt stack 21
 10157                           
 10158                           ;incstack = 0
 10159                           ;write_command@cmd_ stored from wreg
 10160  00D6B4  6E03               	movwf	write_command@cmd_,c
 10161                           
 10162                           ;ST7735_TFT.c: 147: PORTDbits.RD3 = 0;
 10163  00D6B6  9683               	bcf	3971,3,c	;volatile
 10164                           
 10165                           ;ST7735_TFT.c: 149: PORTDbits.RD2 = 0;
 10166  00D6B8  9483               	bcf	3971,2,c	;volatile
 10167                           
 10168                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
 10169  00D6BA  5003               	movf	write_command@cmd_,w,c
 10170  00D6BC  EC7C  F06B         	call	_spiwrite
 10171                           
 10172                           ;ST7735_TFT.c: 152: PORTDbits.RD3 = 1;
 10173  00D6C0  8683               	bsf	3971,3,c	;volatile
 10174  00D6C2  0012               	return		;funcret
 10175  00D6C4                     __end_of_write_command:
 10176                           	opt stack 0
 10177                           tblptru	equ	0xFF8
 10178                           tblptrh	equ	0xFF7
 10179                           tblptrl	equ	0xFF6
 10180                           tablat	equ	0xFF5
 10181                           prodh	equ	0xFF4
 10182                           prodl	equ	0xFF3
 10183                           intcon	equ	0xFF2
 10184                           postinc0	equ	0xFEE
 10185                           wreg	equ	0xFE8
 10186                           postdec1	equ	0xFE5
 10187                           fsr1l	equ	0xFE1
 10188                           indf2	equ	0xFDF
 10189                           postinc2	equ	0xFDE
 10190                           fsr2h	equ	0xFDA
 10191                           fsr2l	equ	0xFD9
 10192                           status	equ	0xFD8
 10193                           
 10194 ;; *************** function _spiwrite *****************
 10195 ;; Defined at:
 10196 ;;		line 136 in file "ST7735_TFT.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  spidata         1    wreg     unsigned char 
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  spidata         1    1[COMRAM] unsigned char 
 10201 ;;  x               1    0[COMRAM] unsigned char 
 10202 ;; Return value:  Size  Location     Type
 10203 ;;		None               void
 10204 ;; Registers used:
 10205 ;;		wreg
 10206 ;; Tracked objects:
 10207 ;;		On entry : 0/0
 10208 ;;		On exit  : 0/0
 10209 ;;		Unchanged: 0/0
 10210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10214 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10215 ;;Total ram usage:        2 bytes
 10216 ;; Hardware stack levels used:    1
 10217 ;; This function calls:
 10218 ;;		Nothing
 10219 ;; This function is called by:
 10220 ;;		_write_command
 10221 ;;		_write_data
 10222 ;;		_drawFastVLine
 10223 ;;		_fillRectangle
 10224 ;;		_drawFastHLine
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           	psect	text55
 10229  00D6F8                     __ptext55:
 10230                           	opt stack 0
 10231  00D6F8                     _spiwrite:
 10232                           	opt stack 23
 10233                           
 10234                           ;incstack = 0
 10235                           ;spiwrite@spidata stored from wreg
 10236  00D6F8  6E02               	movwf	spiwrite@spidata,c
 10237                           
 10238                           ;ST7735_TFT.c: 138: char x;
 10239                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
 10240  00D6FA  969E               	bcf	3998,3,c	;volatile
 10241                           
 10242                           ;ST7735_TFT.c: 140: x = SSPBUF;
 10243  00D6FC  CFC9 F001          	movff	4041,spiwrite@x	;volatile
 10244                           
 10245                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
 10246  00D700  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
 10247                           
 10248                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
 10249  00D704  D000               	goto	l290
 10250  00D706                     l290:
 10251  00D706  A0C7               	btfss	4039,0,c	;volatile
 10252  00D708  D7FE               	goto	l290
 10253  00D70A  0012               	return		;funcret
 10254  00D70C                     __end_of_spiwrite:
 10255                           	opt stack 0
 10256                           tblptru	equ	0xFF8
 10257                           tblptrh	equ	0xFF7
 10258                           tblptrl	equ	0xFF6
 10259                           tablat	equ	0xFF5
 10260                           prodh	equ	0xFF4
 10261                           prodl	equ	0xFF3
 10262                           intcon	equ	0xFF2
 10263                           postinc0	equ	0xFEE
 10264                           wreg	equ	0xFE8
 10265                           postdec1	equ	0xFE5
 10266                           fsr1l	equ	0xFE1
 10267                           indf2	equ	0xFDF
 10268                           postinc2	equ	0xFDE
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function ___wmul *****************
 10274 ;; Defined at:
 10275 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  multiplier      2    0[COMRAM] unsigned int 
 10278 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;  product         2    4[COMRAM] unsigned int 
 10281 ;; Return value:  Size  Location     Type
 10282 ;;                  2    0[COMRAM] unsigned int 
 10283 ;; Registers used:
 10284 ;;		wreg, status,2, status,0, prodl, prodh
 10285 ;; Tracked objects:
 10286 ;;		On entry : 0/0
 10287 ;;		On exit  : 0/0
 10288 ;;		Unchanged: 0/0
 10289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10290 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;Total ram usage:        6 bytes
 10295 ;; Hardware stack levels used:    1
 10296 ;; This function calls:
 10297 ;;		Nothing
 10298 ;; This function is called by:
 10299 ;;		_delay_ms
 10300 ;;		_drawChar
 10301 ;;		_Read_Volt
 10302 ;; This function uses a non-reentrant model
 10303 ;;
 10304                           
 10305                           	psect	text56
 10306  00D7CE                     __ptext56:
 10307                           	opt stack 0
 10308  00D7CE                     ___wmul:
 10309                           	opt stack 29
 10310                           
 10311                           ;incstack = 0
 10312  00D7CE  5001               	movf	___wmul@multiplier,w,c
 10313  00D7D0  0203               	mulwf	___wmul@multiplicand,c
 10314  00D7D2  CFF3 F005          	movff	prodl,___wmul@product
 10315  00D7D6  CFF4 F006          	movff	prodh,___wmul@product+1
 10316  00D7DA  5001               	movf	___wmul@multiplier,w,c
 10317  00D7DC  0204               	mulwf	___wmul@multiplicand+1,c
 10318  00D7DE  50F3               	movf	prodl,w,c
 10319  00D7E0  2606               	addwf	___wmul@product+1,f,c
 10320  00D7E2  5002               	movf	___wmul@multiplier+1,w,c
 10321  00D7E4  0203               	mulwf	___wmul@multiplicand,c
 10322  00D7E6  50F3               	movf	prodl,w,c
 10323  00D7E8  2606               	addwf	___wmul@product+1,f,c
 10324  00D7EA  C005  F001         	movff	___wmul@product,?___wmul
 10325  00D7EE  C006  F002         	movff	___wmul@product+1,?___wmul+1
 10326  00D7F2  D000               	goto	l625
 10327  00D7F4                     l625:
 10328  00D7F4  0012               	return		;funcret
 10329  00D7F6                     __end_of___wmul:
 10330                           	opt stack 0
 10331                           tblptru	equ	0xFF8
 10332                           tblptrh	equ	0xFF7
 10333                           tblptrl	equ	0xFF6
 10334                           tablat	equ	0xFF5
 10335                           prodh	equ	0xFF4
 10336                           prodl	equ	0xFF3
 10337                           intcon	equ	0xFF2
 10338                           postinc0	equ	0xFEE
 10339                           wreg	equ	0xFE8
 10340                           postdec1	equ	0xFE5
 10341                           fsr1l	equ	0xFE1
 10342                           indf2	equ	0xFDF
 10343                           postinc2	equ	0xFDE
 10344                           fsr2h	equ	0xFDA
 10345                           fsr2l	equ	0xFD9
 10346                           status	equ	0xFD8
 10347                           
 10348 ;; *************** function _Deactivate_Buzzer *****************
 10349 ;; Defined at:
 10350 ;;		line 83 in file "utils.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;		None
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;		None
 10355 ;; Return value:  Size  Location     Type
 10356 ;;		None               void
 10357 ;; Registers used:
 10358 ;;		wreg, status,2
 10359 ;; Tracked objects:
 10360 ;;		On entry : 0/0
 10361 ;;		On exit  : 0/0
 10362 ;;		Unchanged: 0/0
 10363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10368 ;;Total ram usage:        0 bytes
 10369 ;; Hardware stack levels used:    1
 10370 ;; This function calls:
 10371 ;;		Nothing
 10372 ;; This function is called by:
 10373 ;;		_Wait_One_Second_With_Beep
 10374 ;;		_Do_Beep
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           	psect	text57
 10379  00D69E                     __ptext57:
 10380                           	opt stack 0
 10381  00D69E                     _Deactivate_Buzzer:
 10382                           	opt stack 27
 10383                           
 10384                           ;utils.c: 85: CCP2CON = 0x0;
 10385                           
 10386                           ;incstack = 0
 10387  00D69E  0E00               	movlw	0
 10388  00D6A0  6EBA               	movwf	4026,c	;volatile
 10389                           
 10390                           ;utils.c: 86: PORTCbits.RC1 = 0;
 10391  00D6A2  9282               	bcf	3970,1,c	;volatile
 10392  00D6A4  0012               	return		;funcret
 10393  00D6A6                     __end_of_Deactivate_Buzzer:
 10394                           	opt stack 0
 10395                           tblptru	equ	0xFF8
 10396                           tblptrh	equ	0xFF7
 10397                           tblptrl	equ	0xFF6
 10398                           tablat	equ	0xFF5
 10399                           prodh	equ	0xFF4
 10400                           prodl	equ	0xFF3
 10401                           intcon	equ	0xFF2
 10402                           postinc0	equ	0xFEE
 10403                           wreg	equ	0xFE8
 10404                           postdec1	equ	0xFE5
 10405                           fsr1l	equ	0xFE1
 10406                           indf2	equ	0xFDF
 10407                           postinc2	equ	0xFDE
 10408                           fsr2h	equ	0xFDA
 10409                           fsr2l	equ	0xFD9
 10410                           status	equ	0xFD8
 10411                           
 10412 ;; *************** function _Activate_Buzzer *****************
 10413 ;; Defined at:
 10414 ;;		line 60 in file "utils.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;		None
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;		None
 10419 ;; Return value:  Size  Location     Type
 10420 ;;		None               void
 10421 ;; Registers used:
 10422 ;;		wreg, status,2
 10423 ;; Tracked objects:
 10424 ;;		On entry : 0/0
 10425 ;;		On exit  : 0/0
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;Total ram usage:        0 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; This function calls:
 10435 ;;		Nothing
 10436 ;; This function is called by:
 10437 ;;		_Wait_One_Second_With_Beep
 10438 ;;		_Do_Beep
 10439 ;; This function uses a non-reentrant model
 10440 ;;
 10441                           
 10442                           	psect	text58
 10443  00D6D4                     __ptext58:
 10444                           	opt stack 0
 10445  00D6D4                     _Activate_Buzzer:
 10446                           	opt stack 27
 10447                           
 10448                           ;utils.c: 62: PR2 = 0b11111001 ;
 10449                           
 10450                           ;incstack = 0
 10451  00D6D4  0EF9               	movlw	249
 10452  00D6D6  6ECB               	movwf	4043,c	;volatile
 10453                           
 10454                           ;utils.c: 63: T2CON = 0b00000101 ;
 10455  00D6D8  0E05               	movlw	5
 10456  00D6DA  6ECA               	movwf	4042,c	;volatile
 10457                           
 10458                           ;utils.c: 64: CCPR2L = 0b01001010 ;
 10459  00D6DC  0E4A               	movlw	74
 10460  00D6DE  6EBB               	movwf	4027,c	;volatile
 10461                           
 10462                           ;utils.c: 65: CCP2CON = 0b00111100 ;
 10463  00D6E0  0E3C               	movlw	60
 10464  00D6E2  6EBA               	movwf	4026,c	;volatile
 10465  00D6E4  0012               	return		;funcret
 10466  00D6E6                     __end_of_Activate_Buzzer:
 10467                           	opt stack 0
 10468                           tblptru	equ	0xFF8
 10469                           tblptrh	equ	0xFF7
 10470                           tblptrl	equ	0xFF6
 10471                           tablat	equ	0xFF5
 10472                           prodh	equ	0xFF4
 10473                           prodl	equ	0xFF3
 10474                           intcon	equ	0xFF2
 10475                           postinc0	equ	0xFEE
 10476                           wreg	equ	0xFE8
 10477                           postdec1	equ	0xFE5
 10478                           fsr1l	equ	0xFE1
 10479                           indf2	equ	0xFDF
 10480                           postinc2	equ	0xFDE
 10481                           fsr2h	equ	0xFDA
 10482                           fsr2l	equ	0xFD9
 10483                           status	equ	0xFD8
 10484                           tblptru	equ	0xFF8
 10485                           tblptrh	equ	0xFF7
 10486                           tblptrl	equ	0xFF6
 10487                           tablat	equ	0xFF5
 10488                           prodh	equ	0xFF4
 10489                           prodl	equ	0xFF3
 10490                           intcon	equ	0xFF2
 10491                           postinc0	equ	0xFEE
 10492                           wreg	equ	0xFE8
 10493                           postdec1	equ	0xFE5
 10494                           fsr1l	equ	0xFE1
 10495                           indf2	equ	0xFDF
 10496                           postinc2	equ	0xFDE
 10497                           fsr2h	equ	0xFDA
 10498                           fsr2l	equ	0xFD9
 10499                           status	equ	0xFD8
 10500                           
 10501                           	psect	rparam
 10502  0000                     tblptru	equ	0xFF8
 10503                           tblptrh	equ	0xFF7
 10504                           tblptrl	equ	0xFF6
 10505                           tablat	equ	0xFF5
 10506                           prodh	equ	0xFF4
 10507                           prodl	equ	0xFF3
 10508                           intcon	equ	0xFF2
 10509                           postinc0	equ	0xFEE
 10510                           wreg	equ	0xFE8
 10511                           postdec1	equ	0xFE5
 10512                           fsr1l	equ	0xFE1
 10513                           indf2	equ	0xFDF
 10514                           postinc2	equ	0xFDE
 10515                           fsr2h	equ	0xFDA
 10516                           fsr2l	equ	0xFD9
 10517                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    475
    Data        63
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     66     127
    BANK0           128      0      53
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(COMRAM[3]), PED_NS_Count(COMRAM[3]), 
		 -> EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(COMRAM[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(COMRAM[3]), PED_NS_Count(COMRAM[3]), 
		 -> EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(COMRAM[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[7]), STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[12]), 
		 -> STR_5(CODE[22]), STR_4(CODE[2]), STR_3(CODE[3]), STR_2(CODE[5]), 
		 -> STR_1(CODE[6]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(COMRAM[3]), PED_NS_Count(COMRAM[3]), 
		 -> EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(COMRAM[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Night_Mode->_Wait_N_Seconds
    _Initialize_LCD_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART
    _Day_Mode->_PED_Control
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_drawtext
    ___fttol->___ftmul
    ___ftmul->___ftpack
    ___awmod->___fttol
    _Read_Volt->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Erase_Star->_drawtext
    _Draw_Star->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  500650
                           _Day_Mode
                           _Init_ADC
                          _Init_UART
              _Initialize_LCD_Screen
                         _Night_Mode
                          _Read_Volt
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  173803
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   52103
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3190
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1505
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1505
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1415
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1415
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  269503
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   95563
                                             62 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   22824
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   72649
                          _Draw_Star
                         _Erase_Star
                   _Wait_Half_Second
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          4     3      1   95700
                                             62 COMRAM     4     3      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   22789
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1042
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   72649
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                          _Draw_Star
                         _Erase_Star
                   _Wait_Half_Second
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   29075
                                             57 COMRAM     5     5      0
                          _Read_Volt
                            ___awmod
                             ___ftge
                            ___ftmul
                            ___fttol
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     358
                                             23 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    2180
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1144
                                             38 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _Read_Volt                                            9     6      3    4620
                                             27 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2134
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    1812
                                              8 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1668
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Erase_Star                                           0     0      0   21787
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Draw_Star                                            0     0      0   21787
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1453
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   20334
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7    8302
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     583
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   ___ftge

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      35       5       41.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     42      7F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B4      34        0.0%
DATA                 0      0      B4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 24 17:26:33 2024

                       drawCircle@f 001A                         drawCircle@r 0010  
                       drawCircle@x 001C                         drawCircle@y 001E  
         _Wait_One_Second_With_Beep D786                         _SSPSTATbits 000FC7  
                      drawCircle@x0 000C                        drawCircle@y0 000E  
                                l70 DAA4                                  l72 DAA8  
                                l73 DAAE                                  l81 DAEC  
                                l90 DA20                                  l74 DAB2  
                                l82 DAF2                                  l91 DA26  
                                l75 DAD4                                  l83 DAF6  
                                l92 DA2A                                  l84 DB18  
                                l93 DA4C                                  l79 DAE8  
                                l88 DA1C                                  l97 DA60  
                                l99 DA64                        ___awdiv@sign 0006  
               ___wmul@multiplicand 0003            update_LCD_color@Circle_Y 0035  
                               l100 DA6A                                 l101 DA6E  
                               l102 DA90                                 l110 E242  
                               l112 E292                                 l114 E2CE  
                               l215 E392                                 l119 E21A  
                               l208 F650                                 l224 EEE0  
                               l340 DFCC                                 l404 EFA4  
                               l334 D878                                 l422 EB44  
                               l280 DCA0                                 l290 D706  
                               l356 ED62                                 l620 DE32  
                               l365 ECB8                                 l613 DE0A  
                               l358 EC3C                                 l622 DE4C  
                               l438 E054                                 l625 D7F4  
                               l617 DE24                                 l393 E534  
                               l618 DE26                                 l394 E4A0  
                               l619 DE30                                 l580 D7CC  
                               l396 E510                                 l557 D748  
                               l397 E532                                 l574 DDDC  
                               l831 DF44                                 l577 D7AC  
                               l818 E180                                 l843 D98C  
                               l933 E458                                 l944 E430  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 003B  
                               _PR2 000FCB                   _Deactivate_Buzzer D69E  
                               _dir 007D                                 _nbr 006F  
                               _txt 0071                      drawFastHLine@w 0009  
                    drawFastHLine@x 0012                      drawFastHLine@y 0008  
                      ___awmod@sign 002C             __end_of_update_LCD_misc F2F0  
                               wreg 000FE8                  ??_Wait_Half_Second 0001  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 000D  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize D820  
                      ___ftdiv@cntr 0016                        ___ftdiv@sign 001B  
                      __CFG_WDT$OFF 000000                                l1020 E9C4  
                              l1005 E6F4                                l1014 E0EA  
                              l1008 E6C0                                l1041 E7DA  
                    drawFastVLine@h 0009                                l3012 D884  
                              l1182 D9CA                                l3014 D88E  
                              l3110 E948                                l3040 E5BC  
                              l3024 E55E                                l3120 E976  
                              l3050 E606                                l3114 E95A  
                              l3210 E76E                                l3036 E5A2  
                              l3140 DEDA                                l3124 E988  
                              l3220 E798                                l3300 F14A  
                    drawFastVLine@x 0012                      drawFastVLine@y 0008  
                              l3150 DF00                                l3118 E970  
                              l3222 E7A6                                l3214 E77E  
                              l3302 F150                                l3062 EB2A  
                              l3048 E600                                l3152 DF08  
                              l3160 DF2A                                l3144 DEE8  
                              l3128 E99E                                l3216 E784  
                              l3224 E7B0                                l3320 F196  
                              l3312 F17A                                l3090 E8EC  
                              l3402 E166                                l3250 EF8A  
                              l3082 EBF8                                l3164 DF3A  
                              l3156 DF1E                                l3148 DEF6  
                              l3172 E088                                l3092 E906  
                              l3228 E7C8                                l3324 F1A4  
                              l3316 F188                                l3420 F4A4  
                              l3182 E0E6                                l3326 F1AA  
                              l3406 E176                                l3430 E2D4  
                              l3078 EBA6                                l3176 E0BA  
                              l3096 E914                                l3192 E714  
                              l3440 E382                                l3424 F57A  
                              l3416 F3D0                                l3434 E32C  
                              l2900 EC78                                l3380 E114  
                              l3612 E51E                                l3604 E506  
                              l2814 D85A                                l2806 DFB4  
                              l2822 DB24                                l2902 ECAC  
                              l3390 E13C                                l3374 E102  
                              l3278 F07A                                l3470 ED68  
                              l3630 E016                                l2808 DFC2  
                              l2920 ED2E                                l2912 ECDA  
                              l2904 ECB0                                l3296 F13C  
                              l3704 D8CE                                l3640 E03C  
                              l3608 E514                                l2826 DB40  
                              l2922 ED56                                l2914 ED02  
                              l2850 E3F8                                l2842 E3B4  
                              l3386 E12A                                l3650 DAB8  
                              l3482 EE6E                                l3474 EDC0  
                              l3642 E04A                                l3626 DFDE  
                              l3618 E52E                                l2860 E438  
                              l2852 E418                                l2844 E3C0  
                              l3388 E134                                l2934 D998  
                              l2854 E424                                l2846 E3E0  
                              l2838 E3A4                                l2950 E64C  
                              l3398 E15A                                l3478 EE18  
                              l3750 DE0E                                l3742 DDFA  
                              l2792 DF56                                l2928 ED5E  
                              l2936 D99E                                l3680 DBCA  
                              l3488 EEC4                                l3592 E4D8  
                              l2890 EC38                                l2882 EC1E  
                              l2866 E44A                                l2954 E65A  
                              l3690 DBF4                                l3666 DA30  
                              l3674 DA74                                l3658 DAFC  
                              l3922 E27E                                l3746 DE02  
                              l3738 DDF0                                l3586 E46A  
                              l2796 DF8E                                l2892 EC40  
                              l2948 E632                                l3684 DBDC  
                              l2886 EC2A                                l2974 E69A  
                              l3694 D8B2                                l3758 DE1C  
                              l2896 EC48                                l2984 E6CE  
                              l3698 D8BC                                l3962 E1D8  
                              l2996 D968                                l3992 DEAE  
                              l3898 FD42                                l3996 DEBA  
                              STR_1 FFE4                                STR_2 FFEA  
                              STR_3 FFF7                                STR_4 FFFC  
                              STR_5 FFAA                                STR_6 FFC0  
                              STR_7 FFD6                                STR_8 FFCC  
                              STR_9 FFDD                                u2101 E706  
                              u2120 E732                                u2200 F0D2  
                              u2210 F0D4                                u2125 E72A  
                              u2410 E498                                u2420 E4CE  
                              u1801 E642                                u1490 DF84  
                              u1730 ED10                                u2710 DEA8  
                              u2720 DEAA                                u2490 E00C  
                              u1860 E586                                u1781 E624  
                              u1951 E8DE                                u1971 E8FC  
                              _MODE 0075                                _TRMT 007D61  
               ??_Deactivate_Buzzer 0001                                _main DE4E  
                              _font FDCF                        ___ftpack@arg 0001  
                      ___ftpack@exp 0004                      ??_get_full_ADC 0003  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 0043                                _volt 006C  
                   drawFastHLine@hi 0010                     drawFastHLine@lo 0011  
          __end_of_update_LCD_color F652            __end_of_update_LCD_count EEE2  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                   ??_drawFastHLine 000C                     ??_drawFastVLine 000C  
                      ___ftmul@cntr 0016                        ___param_bank 000010  
                      ___ftmul@sign 0017                        ___fttol@exp1 0026  
                      ___fttol@lval 0022                        _Act_Mode_Txt 005E  
         __end_of_Deactivate_Buzzer D6A6                     drawFastVLine@hi 0010  
                   drawFastVLine@lo 0011                      Read_Volt@nStep 0022  
                       _SW_EWLT_Txt 0064                               ?_main 0001  
                   __end_of___awdiv E182                     drawCircle@ddF_x 0016  
                             STR_10 FFEF                     drawCircle@ddF_y 0018  
                             STR_11 FFF3                               STR_12 FFFC  
                             STR_13 FFFA                     __end_of___awmod DF46  
                   __end_of___ftdiv E6F6                     __end_of___ftmul E9C6  
                             _T0CON 000FD5                     ___awdiv@divisor 0003  
                   __end_of___fttol E7DC                               _T2CON 000FCA  
                             _T3CON 000FB1                     ___awdiv@counter 0005  
                   drawCircle@color 0012                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _TMR3H 000FB3                               _TMR3L 000FB2  
                             _SPBRG 000FAF                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 0073                        ?_PED_Control 003F  
                             _Rcmd1 E9C6                               _Rcmd3 E7DC  
                       _SW_NSLT_Txt 0068                       drawRect@color 001B  
                     ___awtoft@sign 000C                          _Erase_Star D918  
                             _font2 FECE               fillCircleHelper@ddF_x 0021  
             fillCircleHelper@ddF_y 0023                   ??_Wait_One_Second 003F  
                     ___ftpack@sign 0005               fillCircleHelper@delta 001B  
             fillCircleHelper@color 001D                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 003B                    __end_of_Day_Mode E2D0  
                    _Wait_N_Seconds D8AC                     write_data@data_ 0003  
                   __initialization DCA8                        __end_of_main DEC4  
                      __end_of_font FECE                    __end_of_Init_ADC D6B4  
                  __end_of_Rcmd2red DA0A                          _Night_Mode E182  
                            ??_main 0043                       ___fttol@sign1 0021  
                     __activetblptr 000002               Wait_N_Seconds@seconds 003F  
                 __end_of_LCD_Reset D6F8                        _SW_EWPED_Txt 0066  
         ??_TFT_GreenTab_Initialize 000D                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                __size_of_Draw_Star 003A                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 0040  
                  ___awdiv@dividend 0001                    __end_of___awtoft D98E  
                  __end_of___ftpack E45A                              _OSCCON 000FD3  
                __size_of_Init_UART 0014                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds D8DE  
                      _SW_NSPED_Txt 006A                  __size_of_Read_Volt 006E  
                  __end_of_delay_ms DCA8                              _Set_EW DA0A  
                            _Set_NS DA92                    __end_of_fillRect DB64  
                  __end_of_drawChar ED64                    __end_of_drawRect DD70  
                __size_of_Set_EW_LT 0044                  __size_of_OpenUSART 0070  
                            ___ftge E056                  __size_of_Set_NS_LT 0044  
          __size_of_Activate_Buzzer 0012                              ___wmul D7CE  
                         ??___awdiv 0005           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext E614                           ??___awmod 002B  
                         ??___ftdiv 0013                           ??___ftmul 000F  
                         ??___fttol 001C                              _buffer 0080  
                            clear_0 DCAE                              clear_1 DCBA  
                  ___awdiv@quotient 0007                     ___awmod@divisor 0029  
                        _Timing_Txt 009F          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 002B                        drawtext@size 0030  
                            _strcpy D87A                              _strlen D98E  
             ___ftmul@f3_as_product 0013             ??_Initialize_LCD_Screen 003A  
              __end_of_get_full_ADC D7CE                        __pdataCOMRAM 0043  
__size_of_Wait_One_Second_With_Beep 0022                         Set_EW@color 0036  
                      __mediumconst FDCE                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                       ?_Erase_Star 0001                    __end_of_spiwrite D70C  
                       Set_NS@color 0036                          __accesstop 0080  
           __end_of__initialization DD00                          ___ftge@ff1 0001  
                        ___ftge@ff2 0004                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 000D  
                        ___ftdiv@f2 0010                          ___ftdiv@f3 0017  
                        ___awtoft@c 0009                          ___ftmul@f1 0009  
                        ___ftmul@f2 000C                          ___fttol@f1 0018  
                     __end_of_Rcmd1 EAD6                       __end_of_Rcmd3 E8CE  
                    __pcstackCOMRAM 0001                   __end_of_Draw_Star D918  
                      __pidataBANK0 D720                       __end_of_font2 FFAA  
                       ?_Night_Mode 0001                   __end_of_Init_UART D720  
                    drawPixel@color 0009              __size_of_write_command 0010  
                 __end_of_Read_Volt DDDE                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0019                             ??_Rcmd1 000D  
                           ??_Rcmd3 000D                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT DA92                   __end_of_OpenUSART DE4E  
                 __end_of_Set_NS_LT DB1A                __size_of_PED_Control 0052  
              Read_Volt@ADC_Channel 0024                          __pbssBANK0 0080  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
         __size_of_Wait_Half_Second 001A                     spiwrite@spidata 0002  
                 ?_update_LCD_color 0033                   ?_update_LCD_count 003A  
                           ?_Set_EW 0001                             ?_Set_NS 0001  
                ??_update_LCD_color 0034                  ??_update_LCD_count 003B  
                           ?___ftge 0001                             ?___wmul 0001  
               __size_of_Erase_Star 003A              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA           update_LCD_PED_Count@count 003A  
                         ?___awtoft 0009                           ?___ftpack 0001  
                   _Wait_One_Second D750                          _fillCircle DC04  
                           ?_strcpy 0001                             ?_strlen 0001  
                 ??_Activate_Buzzer 0001                          _fillScreen D76A  
                        _drawCircle EEE2                          ??_Day_Mode 0043  
                         ?_delay_ms 0007                           ?_fillRect 0013  
         update_LCD_count@direction 003B                           ?_drawChar 001E  
                           _SSPCON1 000FC6                           ?_drawRect 0013  
                           _SSPSTAT 000FC7               __end_of_fillRectangle E536  
                         ?_drawtext 0029                             _SW_EWLT 0077  
                        ??_Init_ADC 0001                             _SW_NSLT 0079  
                        ??_Rcmd2red 0004                 __size_of_Night_Mode 009A  
                     _write_command D6B4                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0044  
                   __size_of_Set_NS 0044               __end_of_drawFastHLine E056  
                 __end_of_drawPixel D87A               __end_of_drawFastVLine DFCE  
                  _fillCircleHelper EAD6                     __size_of___ftge 0096  
                           ___awdiv E0EC                             ___awmod DEC4  
                           ___ftdiv E614                     __size_of___wmul 0028  
                           ___ftmul E8CE                             ___fttol E6F6  
             __size_of_get_full_ADC 0026                           ?_spiwrite 0001  
                           __pcinit DCA8                          ??___awtoft 000C  
                        ??___ftpack 0006                             __ramtop 1000  
                           __ptext0 DE4E                             __ptext1 E182  
                           __ptext2 F652                             __ptext3 D76A  
                           __ptext4 E45A                             __ptext5 DD0A  
                           __ptext6 DFCE                             __ptext7 D820  
                           __ptext8 E7DC                             __ptext9 D9CC  
          _Light_Sensor_Voltage_Txt 0044                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                         _T3CONbits 000FB1                    ___awmod@dividend 0027  
                        ??_delay_ms 0009                       drawtext@_text 002A  
                     drawtext@color 002C                          ??_fillRect 0018  
                        ??_drawChar 0025                           _LCD_Reset D6E6  
                        ??_drawRect 001D                       _setAddrWindow DB64  
                drawFastHLine@color 000A                          delay_ms@ms 0007  
              end_of_initialization DD00                          ??_drawtext 0031  
                    ?_write_command 0001                       __Lmediumconst FDCE  
                         _PED_Count 0076                        _get_full_ADC D7A8  
                      PED_Control@i 0041       __size_of_update_LCD_PED_Count 00C4  
               update_LCD_misc@volt 003C             __end_of_Wait_One_Second D76A  
                         _RCSTAbits 000FAB                             postdec1 000FE5  
                           postinc0 000FEE                             postinc2 000FDE  
                        ??_spiwrite 0001                             strlen@s 0001  
                   fillCircle@color 0031                         ?_fillCircle 002B  
                         _PORTAbits 000F80                    drawtext@cursor_x 0039  
                  drawtext@cursor_y 0038                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0014                         ?_drawCircle 000C  
    __size_of_Initialize_LCD_Screen 077C                          drawChar@bg 0022  
     __end_of_Initialize_LCD_Screen FDCE                           _TRISCbits 000F94  
                      ??_Erase_Star 003A                      ?_setAddrWindow 0004  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 003F  
                  drawtext@textsize 0033            __size_of_update_LCD_misc 0260  
                        drawPixel@x 000B                          drawPixel@y 0008  
                  _Wait_Half_Second D736                         ___ftdiv@exp 001A  
                         _TXSTAbits 000FAC                  get_full_ADC@result 0005  
                       ___ftmul@exp 0012                      __end_of_Set_EW DA4E  
                    __end_of_Set_NS DAD6                        _Light_Sensor 0074  
                    __end_of___ftge E0EC                       Read_Volt@volt 001F  
                    __end_of___wmul D7F6                  __end_of_Erase_Star D952  
                     delay_ms@count 000B                          _write_data D6C4  
                     __pidataCOMRAM D7F7                           _Draw_Star D8DE  
                      ??_Night_Mode 0041            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 002E                  PED_Control@num_sec 003F  
                    __end_of_strcpy D8AC                      __end_of_strlen D9CC  
               start_initialization DCA8                           _Init_UART D70C  
                 __size_of_Day_Mode 00B4                           _Read_Volt DD70  
                   ??_write_command 0003                           _Set_EW_LT DA4E  
                         _OpenUSART DDDE                           _Set_NS_LT DAD6  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode E21C  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 0040                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0036                            ??_Set_NS 0036  
                   _Activate_Buzzer D6D4                    ?_Wait_One_Second 0001  
                          ??___ftge 0007                            ??___wmul 0005  
                       __pdataBANK0 009F                          ?_Draw_Star 0001  
                   setAddrWindow@x0 0007                     setAddrWindow@x1 0005  
                   setAddrWindow@y0 0004                     setAddrWindow@y1 0006  
                          ??_strcpy 0005                            ??_strlen 0003  
                      _PED_EW_Count 0058           __size_of_update_LCD_color 0362  
         __size_of_update_LCD_count 017E                   __size_of___awtoft 003C  
                 __size_of___ftpack 00C6                         __pbssCOMRAM 006C  
                     ??_PED_Control 0040                          ?_Init_UART 0001  
                   ??_setAddrWindow 0007                        _PED_NS_Count 005B  
                        ?_Read_Volt 001C                         ??_LCD_Reset 000D  
          __end_of_fillCircleHelper EC0E                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 0001                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 00DE  
                 ??_update_LCD_misc 003A     __end_of_TFT_GreenTab_Initialize D84A  
                     __pmediumconst FDCE                            ?___awdiv 0001  
                          ?___awmod 0027                            ?___ftdiv 000D  
                          ?___ftmul 0009                            ?___fttol 0018  
                         __tft_type 007B                           _direction 007E  
                drawFastVLine@color 000A                         ?_write_data 0001  
                         _drawPixel D84A                   __size_of_spiwrite 0014  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
 __end_of_Wait_One_Second_With_Beep D7A8                 __end_of_PED_Control DC04  
           __end_of_Activate_Buzzer D6E6                      ___wmul@product 0005  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 004C  
                         fillRect@h 0015                           fillRect@i 001C  
                         fillRect@w 0014                           fillRect@x 001B  
                         fillRect@y 0013                         ??_Draw_Star 003A  
                         drawChar@c 001F                           drawChar@i 0028  
                         drawChar@j 0027                        ??_fillCircle 0033  
                         drawChar@x 0026                           drawChar@y 001E  
                        ?_drawPixel 0008              __size_of_fillRectangle 00DC  
                          _NS_Count 0055                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second D750                   ___wmul@multiplier 0001  
                      ??_fillScreen 0016                           drawRect@h 0019  
                         drawRect@w 0017                           drawRect@x 0013  
                         drawRect@y 0015                       _FlashingR_Txt 0060  
                     _FlashingS_Txt 0062                        ??_drawCircle 0014  
      __end_of_update_LCD_PED_Count E394                            _SW_EWPED 0078  
             update_LCD_color@color 0033                            _Day_Mode E21C  
                          _SW_NSPED 007A           update_LCD_color@direction 0034  
                       ??_Init_UART 0004                         ??_Read_Volt 001F  
            __size_of_drawFastHLine 0088               _Light_Sensor_Mode_Txt 004F  
                         copy_data0 DCD4                           copy_data1 DCF4  
                         drawtext@i 0036              __size_of_drawFastVLine 0088  
                         drawtext@x 0035                           drawtext@y 0029  
                          _Init_ADC D6A6                   write_command@cmd_ 0003  
                       ??_Set_EW_LT 0036                         ??_OpenUSART 0003  
                       ??_Set_NS_LT 0036                            _Rcmd2red D9CC  
               __size_of_write_data 0010                     OpenUSART@config 0003  
                __end_of_fillCircle DC56                            __Hrparam 0000  
                __end_of_fillScreen D786               update_LCD_count@count 003A  
                          __Lrparam 0000                  __end_of_drawCircle F090  
                  __size_of___awdiv 0096                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                    __size_of___ftmul 00F8  
                  __size_of___fttol 00E6                            ___awtoft D952  
                          ___ftpack E394                    _update_LCD_color F2F0  
                  _update_LCD_count ED64                         _PED_Control DBB2  
                          _delay_ms DC56                            __ptext10 E9C6  
                          __ptext11 D6E6                            __ptext20 DAD6  
                          __ptext12 DC56                            __ptext21 DA92  
                          __ptext13 D70C                            __ptext30 E0EC  
                          __ptext22 DA4E                            __ptext14 DDDE  
                          __ptext31 D786                            __ptext23 DA0A  
                          __ptext15 D6A6                            __ptext40 D952  
                          __ptext32 F090                            __ptext24 F2F0  
                          __ptext16 E21C                            __ptext41 E394  
                          __ptext33 E6F6                            __ptext25 DC04  
                          __ptext17 D8AC                            __ptext50 DF46  
                          __ptext42 D736                            __ptext34 E8CE  
                          __ptext26 EAD6                            __ptext18 ED64  
                          __ptext51 D84A                            __ptext43 D918  
                          __ptext35 E056                            __ptext27 EEE2  
                          __ptext19 D750                            __ptext52 DB64  
                          __ptext44 D8DE                            __ptext36 DEC4  
                          __ptext28 DBB2                            __ptext53 D6C4  
                          __ptext45 D87A                            __ptext37 DD70  
                          __ptext29 E2D0                            __ptext54 D6B4  
                          __ptext46 E536                            __ptext38 D7A8  
                          __ptext55 D6F8                            __ptext47 D98E  
                          __ptext39 E614                            __ptext56 D7CE  
                          __ptext48 EC0E                            __ptext57 D69E  
                          __ptext49 DB1A                            __ptext58 D6D4  
                          _fillRect DB1A                            _drawChar EC0E  
             _Initialize_LCD_Screen F652                            _drawRect DD0A  
  __size_of_TFT_GreenTab_Initialize 002A                            _colstart 007C  
                          _drawtext E536                          strcpy@from 0003  
                     _fillRectangle E45A                    ?_Activate_Buzzer 0001  
                     __size_of_main 0076                     fillRectangle@hi 0011  
                   fillRectangle@lo 0012                       _drawFastHLine DFCE  
                    Set_EW_LT@color 0036                       _drawFastVLine DF46  
                          _spiwrite D6F8                         ??_drawPixel 000B  
                          _rowstart 007F                  fillCircleHelper@x0 0013  
                fillCircleHelper@y0 0015                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 0001                          _EWLT_Count 0049  
                 ?_fillCircleHelper 0013                           spiwrite@x 0001  
       ??_Wait_One_Second_With_Beep 003F                     _update_LCD_misc F090  
                    ?_fillRectangle 0008                  ??_fillCircleHelper 001F  
             __end_of_write_command D6C4                     fillScreen@color 0014  
              update_LCD_misc@nStep 003A                _update_LCD_PED_Count E2D0  
           __size_of_Wait_N_Seconds 0032                        fillCircle@x0 002B  
                      fillCircle@y0 002D                      ?_drawFastHLine 0008  
                    fillRectangle@h 000A                      fillRectangle@w 0009  
                    fillRectangle@x 0013                      fillRectangle@y 0008  
                    ?_drawFastVLine 0008                   fillCircleHelper@f 0025  
                 fillCircleHelper@r 0017                   fillCircleHelper@x 0027  
                 fillCircleHelper@y 0029                        ??_write_data 0003  
                     fillRect@color 0016            __size_of_Wait_One_Second 001A  
                          strcpy@cp 0005                            strlen@cp 0005  
                          strcpy@to 0001                          _NSLT_Count 0052  
            ?_Initialize_LCD_Screen 0001                         fillCircle@r 002F  
             __end_of_setAddrWindow DBB2                  fillRectangle@color 000B  
                     drawChar@color 0020                  __end_of_write_data D6D4  
                      drawChar@line 0025                      Set_NS_LT@color 0036  
                     ?_get_full_ADC 0001                        drawChar@size 0024  
             ?_update_LCD_PED_Count 003A  
