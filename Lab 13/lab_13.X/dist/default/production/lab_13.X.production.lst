

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 26 18:04:52 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	text107,global,reloc=2,class=CODE,delta=1
   124                           	psect	text108,global,reloc=2,class=CODE,delta=1
   125                           	psect	text109,global,reloc=2,class=CODE,delta=1
   126                           	psect	text110,global,reloc=2,class=CODE,delta=1
   127                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   128                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   129                           	psect	text112,global,reloc=2,class=CODE,delta=1
   130                           	psect	text113,global,reloc=2,class=CODE,delta=1
   131                           	psect	text114,global,reloc=2,class=CODE,delta=1
   132                           	psect	text115,global,reloc=2,class=CODE,delta=1
   133                           	psect	text116,global,reloc=2,class=CODE,delta=1
   134                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   135                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   136  0000                     
   137                           	psect	idataBANK0
   138  004A8C                     __pidataBANK0:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _RTC_ALARM_Txt
   142  004A8C  30                 	db	48
   143  004A8D  00                 	db	0
   144                           
   145                           ;initializer for _fan_set_temp
   146  004A8E  10                 	db	16
   147                           
   148                           ;initializer for _tempSecond
   149  004A8F  FF                 	db	255
   150                           
   151                           ;initializer for _wrap
   152  004A90  01                 	db	1
   153                           
   154                           ;initializer for _tempF_Txt
   155  004A91  2B                 	db	43
   156  004A92  30                 	db	48
   157  004A93  37                 	db	55
   158  004A94  37                 	db	55
   159  004A95  00                 	db	0
   160                           
   161                           ;initializer for _DC_Txt
   162  004A96  30                 	db	48
   163  004A97  30                 	db	48
   164  004A98  30                 	db	48
   165  004A99  00                 	db	0
   166                           
   167                           ;initializer for _Fan_SW_Txt
   168  004A9A  4F                 	db	79
   169  004A9B  46                 	db	70
   170  004A9C  46                 	db	70
   171  004A9D  00                 	db	0
   172                           
   173                           ;initializer for _Fan_Set_Temp_Txt
   174  004A9E  37                 	db	55
   175  004A9F  37                 	db	55
   176  004AA0  46                 	db	70
   177  004AA1  00                 	db	0
   178                           
   179                           ;initializer for _Fan_Timer_Mode_Txt
   180  004AA2  4F                 	db	79
   181  004AA3  46                 	db	70
   182  004AA4  46                 	db	70
   183  004AA5  00                 	db	0
   184                           
   185                           ;initializer for _Fan_Timer_Txt
   186  004AA6  30                 	db	48
   187  004AA7  30                 	db	48
   188  004AA8  30                 	db	48
   189  004AA9  00                 	db	0
   190                           
   191                           ;initializer for _tempC_Txt
   192  004AAA  2B                 	db	43
   193  004AAB  32                 	db	50
   194  004AAC  35                 	db	53
   195  004AAD  00                 	db	0
   196                           
   197                           	psect	idataBANK1
   198  003E1E                     __pidataBANK1:
   199                           	opt stack 0
   200                           
   201                           ;initializer for _buffer
   202  003E1E  20                 	db	32
   203  003E1F  20                 	db	32
   204  003E20  20                 	db	32
   205  003E21  20                 	db	32
   206  003E22  20                 	db	32
   207  003E23  20                 	db	32
   208  003E24  20                 	db	32
   209  003E25  20                 	db	32
   210  003E26  20                 	db	32
   211  003E27  20                 	db	32
   212  003E28  20                 	db	32
   213  003E29  20                 	db	32
   214  003E2A  20                 	db	32
   215  003E2B  20                 	db	32
   216  003E2C  20                 	db	32
   217  003E2D  20                 	db	32
   218  003E2E  20                 	db	32
   219  003E2F  20                 	db	32
   220  003E30  20                 	db	32
   221  003E31  20                 	db	32
   222  003E32  20                 	db	32
   223  003E33  00                 	db	0
   224  003E34  00                 	db	0
   225  003E35  00                 	db	0
   226  003E36  00                 	db	0
   227  003E37  00                 	db	0
   228  003E38  00                 	db	0
   229  003E39  00                 	db	0
   230  003E3A  00                 	db	0
   231  003E3B  00                 	db	0
   232  003E3C  00                 	db	0
   233  003E3D  00                 	db	0
   234  003E3E  00                 	db	0
   235  003E3F  00                 	db	0
   236  003E40  00                 	db	0
   237                           
   238                           ;initializer for check_for_button_input@F4236
   239  003E41  A2                 	db	162
   240  003E42  62                 	db	98
   241  003E43  E2                 	db	226
   242  003E44  22                 	db	34
   243  003E45  02                 	db	2
   244  003E46  C2                 	db	194
   245  003E47  E0                 	db	224
   246  003E48  A8                 	db	168
   247  003E49  90                 	db	144
   248  003E4A  68                 	db	104
   249  003E4B  98                 	db	152
   250  003E4C  B0                 	db	176
   251  003E4D  30                 	db	48
   252  003E4E  18                 	db	24
   253  003E4F  7A                 	db	122
   254  003E50  10                 	db	16
   255  003E51  38                 	db	56
   256  003E52  5A                 	db	90
   257  003E53  42                 	db	66
   258  003E54  4A                 	db	74
   259  003E55  52                 	db	82
   260                           
   261                           ;initializer for _Timer_Table
   262  003E56  00                 	db	0
   263  003E57  05                 	db	5
   264  003E58  0A                 	db	10
   265  003E59  14                 	db	20
   266                           
   267                           ;initializer for _Timing_Txt
   268  003E5A  45                 	db	69
   269  003E5B  43                 	db	67
   270  003E5C  45                 	db	69
   271  003E5D  33                 	db	51
   272  003E5E  33                 	db	51
   273  003E5F  30                 	db	48
   274  003E60  31                 	db	49
   275  003E61  4C                 	db	76
   276  003E62  20                 	db	32
   277  003E63  46                 	db	70
   278  003E64  69                 	db	105
   279  003E65  6E                 	db	110
   280  003E66  46                 	db	70
   281  003E67  61                 	db	97
   282  003E68  32                 	db	50
   283  003E69  34                 	db	52
   284  003E6A  2F                 	db	47
   285  003E6B  31                 	db	49
   286  003E6C  2F                 	db	47
   287  003E6D  30                 	db	48
   288  003E6E  31                 	db	49
   289  003E6F  00                 	db	0
   290  003E70  00                 	db	0
   291                           
   292                           ;initializer for _date_Txt
   293  003E71  30                 	db	48
   294  003E72  30                 	db	48
   295  003E73  2F                 	db	47
   296  003E74  30                 	db	48
   297  003E75  30                 	db	48
   298  003E76  2F                 	db	47
   299  003E77  30                 	db	48
   300  003E78  30                 	db	48
   301  003E79  00                 	db	0
   302                           
   303                           ;initializer for _setup_date
   304  003E7A  30                 	db	48
   305  003E7B  31                 	db	49
   306  003E7C  2F                 	db	47
   307  003E7D  30                 	db	48
   308  003E7E  31                 	db	49
   309  003E7F  2F                 	db	47
   310  003E80  30                 	db	48
   311  003E81  30                 	db	48
   312  003E82  00                 	db	0
   313                           
   314                           ;initializer for _setup_time
   315  003E83  30                 	db	48
   316  003E84  30                 	db	48
   317  003E85  3A                 	db	58
   318  003E86  30                 	db	48
   319  003E87  30                 	db	48
   320  003E88  3A                 	db	58
   321  003E89  30                 	db	48
   322  003E8A  30                 	db	48
   323  003E8B  00                 	db	0
   324                           
   325                           ;initializer for _time_Txt
   326  003E8C  30                 	db	48
   327  003E8D  30                 	db	48
   328  003E8E  3A                 	db	58
   329  003E8F  30                 	db	48
   330  003E90  30                 	db	48
   331  003E91  3A                 	db	58
   332  003E92  30                 	db	48
   333  003E93  30                 	db	48
   334  003E94  00                 	db	0
   335                           
   336                           ;initializer for _Volt_Txt
   337  003E95  30                 	db	48
   338  003E96  2E                 	db	46
   339  003E97  30                 	db	48
   340  003E98  30                 	db	48
   341  003E99  56                 	db	86
   342  003E9A  00                 	db	0
   343                           
   344                           ;initializer for _Fan_Mode_Txt
   345  003E9B  4D                 	db	77
   346  003E9C  41                 	db	65
   347  003E9D  4E                 	db	78
   348  003E9E  55                 	db	85
   349  003E9F  00                 	db	0
   350                           
   351                           ;initializer for _RPM_Txt
   352  003EA0  30                 	db	48
   353  003EA1  30                 	db	48
   354  003EA2  30                 	db	48
   355  003EA3  30                 	db	48
   356  003EA4  00                 	db	0
   357                           
   358                           ;initializer for _setup_fan_set_text
   359  003EA5  30                 	db	48
   360  003EA6  37                 	db	55
   361  003EA7  37                 	db	55
   362  003EA8  46                 	db	70
   363  003EA9  00                 	db	0
   364                           
   365                           	psect	mediumconst
   366  00FBC0                     __pmediumconst:
   367                           	opt stack 0
   368  00FBC0  00                 	db	0
   369  00FBC1                     _font:
   370                           	opt stack 0
   371  00FBC1  00                 	db	0
   372  00FBC2  00                 	db	0
   373  00FBC3  00                 	db	0
   374  00FBC4  00                 	db	0
   375  00FBC5  00                 	db	0
   376  00FBC6  00                 	db	0
   377  00FBC7  00                 	db	0
   378  00FBC8  5F                 	db	95
   379  00FBC9  00                 	db	0
   380  00FBCA  00                 	db	0
   381  00FBCB  00                 	db	0
   382  00FBCC  07                 	db	7
   383  00FBCD  00                 	db	0
   384  00FBCE  07                 	db	7
   385  00FBCF  00                 	db	0
   386  00FBD0  14                 	db	20
   387  00FBD1  7F                 	db	127
   388  00FBD2  14                 	db	20
   389  00FBD3  7F                 	db	127
   390  00FBD4  14                 	db	20
   391  00FBD5  24                 	db	36
   392  00FBD6  2A                 	db	42
   393  00FBD7  7F                 	db	127
   394  00FBD8  2A                 	db	42
   395  00FBD9  12                 	db	18
   396  00FBDA  23                 	db	35
   397  00FBDB  13                 	db	19
   398  00FBDC  08                 	db	8
   399  00FBDD  64                 	db	100
   400  00FBDE  62                 	db	98
   401  00FBDF  36                 	db	54
   402  00FBE0  49                 	db	73
   403  00FBE1  56                 	db	86
   404  00FBE2  20                 	db	32
   405  00FBE3  50                 	db	80
   406  00FBE4  00                 	db	0
   407  00FBE5  08                 	db	8
   408  00FBE6  07                 	db	7
   409  00FBE7  03                 	db	3
   410  00FBE8  00                 	db	0
   411  00FBE9  00                 	db	0
   412  00FBEA  1C                 	db	28
   413  00FBEB  22                 	db	34
   414  00FBEC  41                 	db	65
   415  00FBED  00                 	db	0
   416  00FBEE  00                 	db	0
   417  00FBEF  41                 	db	65
   418  00FBF0  22                 	db	34
   419  00FBF1  1C                 	db	28
   420  00FBF2  00                 	db	0
   421  00FBF3  2A                 	db	42
   422  00FBF4  1C                 	db	28
   423  00FBF5  7F                 	db	127
   424  00FBF6  1C                 	db	28
   425  00FBF7  2A                 	db	42
   426  00FBF8  08                 	db	8
   427  00FBF9  08                 	db	8
   428  00FBFA  3E                 	db	62
   429  00FBFB  08                 	db	8
   430  00FBFC  08                 	db	8
   431  00FBFD  00                 	db	0
   432  00FBFE  80                 	db	128
   433  00FBFF  70                 	db	112
   434  00FC00  30                 	db	48
   435  00FC01  00                 	db	0
   436  00FC02  08                 	db	8
   437  00FC03  08                 	db	8
   438  00FC04  08                 	db	8
   439  00FC05  08                 	db	8
   440  00FC06  08                 	db	8
   441  00FC07  00                 	db	0
   442  00FC08  00                 	db	0
   443  00FC09  60                 	db	96
   444  00FC0A  60                 	db	96
   445  00FC0B  00                 	db	0
   446  00FC0C  20                 	db	32
   447  00FC0D  10                 	db	16
   448  00FC0E  08                 	db	8
   449  00FC0F  04                 	db	4
   450  00FC10  02                 	db	2
   451  00FC11  3E                 	db	62
   452  00FC12  51                 	db	81
   453  00FC13  49                 	db	73
   454  00FC14  45                 	db	69
   455  00FC15  3E                 	db	62
   456  00FC16  00                 	db	0
   457  00FC17  42                 	db	66
   458  00FC18  7F                 	db	127
   459  00FC19  40                 	db	64
   460  00FC1A  00                 	db	0
   461  00FC1B  72                 	db	114
   462  00FC1C  49                 	db	73
   463  00FC1D  49                 	db	73
   464  00FC1E  49                 	db	73
   465  00FC1F  46                 	db	70
   466  00FC20  21                 	db	33
   467  00FC21  41                 	db	65
   468  00FC22  49                 	db	73
   469  00FC23  4D                 	db	77
   470  00FC24  33                 	db	51
   471  00FC25  18                 	db	24
   472  00FC26  14                 	db	20
   473  00FC27  12                 	db	18
   474  00FC28  7F                 	db	127
   475  00FC29  10                 	db	16
   476  00FC2A  27                 	db	39
   477  00FC2B  45                 	db	69
   478  00FC2C  45                 	db	69
   479  00FC2D  45                 	db	69
   480  00FC2E  39                 	db	57
   481  00FC2F  3C                 	db	60
   482  00FC30  4A                 	db	74
   483  00FC31  49                 	db	73
   484  00FC32  49                 	db	73
   485  00FC33  31                 	db	49
   486  00FC34  41                 	db	65
   487  00FC35  21                 	db	33
   488  00FC36  11                 	db	17
   489  00FC37  09                 	db	9
   490  00FC38  07                 	db	7
   491  00FC39  36                 	db	54
   492  00FC3A  49                 	db	73
   493  00FC3B  49                 	db	73
   494  00FC3C  49                 	db	73
   495  00FC3D  36                 	db	54
   496  00FC3E  46                 	db	70
   497  00FC3F  49                 	db	73
   498  00FC40  49                 	db	73
   499  00FC41  29                 	db	41
   500  00FC42  1E                 	db	30
   501  00FC43  00                 	db	0
   502  00FC44  00                 	db	0
   503  00FC45  14                 	db	20
   504  00FC46  00                 	db	0
   505  00FC47  00                 	db	0
   506  00FC48  00                 	db	0
   507  00FC49  40                 	db	64
   508  00FC4A  34                 	db	52
   509  00FC4B  00                 	db	0
   510  00FC4C  00                 	db	0
   511  00FC4D  00                 	db	0
   512  00FC4E  08                 	db	8
   513  00FC4F  14                 	db	20
   514  00FC50  22                 	db	34
   515  00FC51  41                 	db	65
   516  00FC52  14                 	db	20
   517  00FC53  14                 	db	20
   518  00FC54  14                 	db	20
   519  00FC55  14                 	db	20
   520  00FC56  14                 	db	20
   521  00FC57  00                 	db	0
   522  00FC58  41                 	db	65
   523  00FC59  22                 	db	34
   524  00FC5A  14                 	db	20
   525  00FC5B  08                 	db	8
   526  00FC5C  02                 	db	2
   527  00FC5D  01                 	db	1
   528  00FC5E  59                 	db	89
   529  00FC5F  09                 	db	9
   530  00FC60  06                 	db	6
   531  00FC61  3E                 	db	62
   532  00FC62  41                 	db	65
   533  00FC63  5D                 	db	93
   534  00FC64  59                 	db	89
   535  00FC65  4E                 	db	78
   536  00FC66  7C                 	db	124
   537  00FC67  12                 	db	18
   538  00FC68  11                 	db	17
   539  00FC69  12                 	db	18
   540  00FC6A  7C                 	db	124
   541  00FC6B  7F                 	db	127
   542  00FC6C  49                 	db	73
   543  00FC6D  49                 	db	73
   544  00FC6E  49                 	db	73
   545  00FC6F  36                 	db	54
   546  00FC70  3E                 	db	62
   547  00FC71  41                 	db	65
   548  00FC72  41                 	db	65
   549  00FC73  41                 	db	65
   550  00FC74  22                 	db	34
   551  00FC75  7F                 	db	127
   552  00FC76  41                 	db	65
   553  00FC77  41                 	db	65
   554  00FC78  41                 	db	65
   555  00FC79  3E                 	db	62
   556  00FC7A  7F                 	db	127
   557  00FC7B  49                 	db	73
   558  00FC7C  49                 	db	73
   559  00FC7D  49                 	db	73
   560  00FC7E  41                 	db	65
   561  00FC7F  7F                 	db	127
   562  00FC80  09                 	db	9
   563  00FC81  09                 	db	9
   564  00FC82  09                 	db	9
   565  00FC83  01                 	db	1
   566  00FC84  3E                 	db	62
   567  00FC85  41                 	db	65
   568  00FC86  41                 	db	65
   569  00FC87  51                 	db	81
   570  00FC88  73                 	db	115
   571  00FC89  7F                 	db	127
   572  00FC8A  08                 	db	8
   573  00FC8B  08                 	db	8
   574  00FC8C  08                 	db	8
   575  00FC8D  7F                 	db	127
   576  00FC8E  00                 	db	0
   577  00FC8F  41                 	db	65
   578  00FC90  7F                 	db	127
   579  00FC91  41                 	db	65
   580  00FC92  00                 	db	0
   581  00FC93  20                 	db	32
   582  00FC94  40                 	db	64
   583  00FC95  41                 	db	65
   584  00FC96  3F                 	db	63
   585  00FC97  01                 	db	1
   586  00FC98  7F                 	db	127
   587  00FC99  08                 	db	8
   588  00FC9A  14                 	db	20
   589  00FC9B  22                 	db	34
   590  00FC9C  41                 	db	65
   591  00FC9D  7F                 	db	127
   592  00FC9E  40                 	db	64
   593  00FC9F  40                 	db	64
   594  00FCA0  40                 	db	64
   595  00FCA1  40                 	db	64
   596  00FCA2  7F                 	db	127
   597  00FCA3  02                 	db	2
   598  00FCA4  1C                 	db	28
   599  00FCA5  02                 	db	2
   600  00FCA6  7F                 	db	127
   601  00FCA7  7F                 	db	127
   602  00FCA8  04                 	db	4
   603  00FCA9  08                 	db	8
   604  00FCAA  10                 	db	16
   605  00FCAB  7F                 	db	127
   606  00FCAC  3E                 	db	62
   607  00FCAD  41                 	db	65
   608  00FCAE  41                 	db	65
   609  00FCAF  41                 	db	65
   610  00FCB0  3E                 	db	62
   611  00FCB1  7F                 	db	127
   612  00FCB2  09                 	db	9
   613  00FCB3  09                 	db	9
   614  00FCB4  09                 	db	9
   615  00FCB5  06                 	db	6
   616  00FCB6  3E                 	db	62
   617  00FCB7  41                 	db	65
   618  00FCB8  51                 	db	81
   619  00FCB9  21                 	db	33
   620  00FCBA  5E                 	db	94
   621  00FCBB  7F                 	db	127
   622  00FCBC  09                 	db	9
   623  00FCBD  19                 	db	25
   624  00FCBE  29                 	db	41
   625  00FCBF  46                 	db	70
   626  00FCC0                     __end_of_font:
   627                           	opt stack 0
   628  00FCC0                     _font2:
   629                           	opt stack 0
   630  00FCC0  26                 	db	38
   631  00FCC1  49                 	db	73
   632  00FCC2  49                 	db	73
   633  00FCC3  49                 	db	73
   634  00FCC4  32                 	db	50
   635  00FCC5  03                 	db	3
   636  00FCC6  01                 	db	1
   637  00FCC7  7F                 	db	127
   638  00FCC8  01                 	db	1
   639  00FCC9  03                 	db	3
   640  00FCCA  3F                 	db	63
   641  00FCCB  40                 	db	64
   642  00FCCC  40                 	db	64
   643  00FCCD  40                 	db	64
   644  00FCCE  3F                 	db	63
   645  00FCCF  1F                 	db	31
   646  00FCD0  20                 	db	32
   647  00FCD1  40                 	db	64
   648  00FCD2  20                 	db	32
   649  00FCD3  1F                 	db	31
   650  00FCD4  3F                 	db	63
   651  00FCD5  40                 	db	64
   652  00FCD6  38                 	db	56
   653  00FCD7  40                 	db	64
   654  00FCD8  3F                 	db	63
   655  00FCD9  63                 	db	99
   656  00FCDA  14                 	db	20
   657  00FCDB  08                 	db	8
   658  00FCDC  14                 	db	20
   659  00FCDD  63                 	db	99
   660  00FCDE  03                 	db	3
   661  00FCDF  04                 	db	4
   662  00FCE0  78                 	db	120
   663  00FCE1  04                 	db	4
   664  00FCE2  03                 	db	3
   665  00FCE3  61                 	db	97
   666  00FCE4  59                 	db	89
   667  00FCE5  49                 	db	73
   668  00FCE6  4D                 	db	77
   669  00FCE7  43                 	db	67
   670  00FCE8  00                 	db	0
   671  00FCE9  7F                 	db	127
   672  00FCEA  41                 	db	65
   673  00FCEB  41                 	db	65
   674  00FCEC  41                 	db	65
   675  00FCED  02                 	db	2
   676  00FCEE  04                 	db	4
   677  00FCEF  08                 	db	8
   678  00FCF0  10                 	db	16
   679  00FCF1  20                 	db	32
   680  00FCF2  00                 	db	0
   681  00FCF3  41                 	db	65
   682  00FCF4  41                 	db	65
   683  00FCF5  41                 	db	65
   684  00FCF6  7F                 	db	127
   685  00FCF7  04                 	db	4
   686  00FCF8  02                 	db	2
   687  00FCF9  01                 	db	1
   688  00FCFA  02                 	db	2
   689  00FCFB  04                 	db	4
   690  00FCFC  40                 	db	64
   691  00FCFD  40                 	db	64
   692  00FCFE  40                 	db	64
   693  00FCFF  40                 	db	64
   694  00FD00  40                 	db	64
   695  00FD01  00                 	db	0
   696  00FD02  03                 	db	3
   697  00FD03  07                 	db	7
   698  00FD04  08                 	db	8
   699  00FD05  00                 	db	0
   700  00FD06  20                 	db	32
   701  00FD07  54                 	db	84
   702  00FD08  54                 	db	84
   703  00FD09  78                 	db	120
   704  00FD0A  40                 	db	64
   705  00FD0B  7F                 	db	127
   706  00FD0C  28                 	db	40
   707  00FD0D  44                 	db	68
   708  00FD0E  44                 	db	68
   709  00FD0F  38                 	db	56
   710  00FD10  38                 	db	56
   711  00FD11  44                 	db	68
   712  00FD12  44                 	db	68
   713  00FD13  44                 	db	68
   714  00FD14  28                 	db	40
   715  00FD15  38                 	db	56
   716  00FD16  44                 	db	68
   717  00FD17  44                 	db	68
   718  00FD18  28                 	db	40
   719  00FD19  7F                 	db	127
   720  00FD1A  38                 	db	56
   721  00FD1B  54                 	db	84
   722  00FD1C  54                 	db	84
   723  00FD1D  54                 	db	84
   724  00FD1E  18                 	db	24
   725  00FD1F  00                 	db	0
   726  00FD20  08                 	db	8
   727  00FD21  7E                 	db	126
   728  00FD22  09                 	db	9
   729  00FD23  02                 	db	2
   730  00FD24  18                 	db	24
   731  00FD25  A4                 	db	164
   732  00FD26  A4                 	db	164
   733  00FD27  9C                 	db	156
   734  00FD28  78                 	db	120
   735  00FD29  7F                 	db	127
   736  00FD2A  08                 	db	8
   737  00FD2B  04                 	db	4
   738  00FD2C  04                 	db	4
   739  00FD2D  78                 	db	120
   740  00FD2E  00                 	db	0
   741  00FD2F  44                 	db	68
   742  00FD30  7D                 	db	125
   743  00FD31  40                 	db	64
   744  00FD32  00                 	db	0
   745  00FD33  20                 	db	32
   746  00FD34  40                 	db	64
   747  00FD35  40                 	db	64
   748  00FD36  3D                 	db	61
   749  00FD37  00                 	db	0
   750  00FD38  7F                 	db	127
   751  00FD39  10                 	db	16
   752  00FD3A  28                 	db	40
   753  00FD3B  44                 	db	68
   754  00FD3C  00                 	db	0
   755  00FD3D  00                 	db	0
   756  00FD3E  41                 	db	65
   757  00FD3F  7F                 	db	127
   758  00FD40  40                 	db	64
   759  00FD41  00                 	db	0
   760  00FD42  7C                 	db	124
   761  00FD43  04                 	db	4
   762  00FD44  78                 	db	120
   763  00FD45  04                 	db	4
   764  00FD46  78                 	db	120
   765  00FD47  7C                 	db	124
   766  00FD48  08                 	db	8
   767  00FD49  04                 	db	4
   768  00FD4A  04                 	db	4
   769  00FD4B  78                 	db	120
   770  00FD4C  38                 	db	56
   771  00FD4D  44                 	db	68
   772  00FD4E  44                 	db	68
   773  00FD4F  44                 	db	68
   774  00FD50  38                 	db	56
   775  00FD51  FC                 	db	252
   776  00FD52  18                 	db	24
   777  00FD53  24                 	db	36
   778  00FD54  24                 	db	36
   779  00FD55  18                 	db	24
   780  00FD56  18                 	db	24
   781  00FD57  24                 	db	36
   782  00FD58  24                 	db	36
   783  00FD59  18                 	db	24
   784  00FD5A  FC                 	db	252
   785  00FD5B  7C                 	db	124
   786  00FD5C  08                 	db	8
   787  00FD5D  04                 	db	4
   788  00FD5E  04                 	db	4
   789  00FD5F  08                 	db	8
   790  00FD60  48                 	db	72
   791  00FD61  54                 	db	84
   792  00FD62  54                 	db	84
   793  00FD63  54                 	db	84
   794  00FD64  24                 	db	36
   795  00FD65  04                 	db	4
   796  00FD66  04                 	db	4
   797  00FD67  3F                 	db	63
   798  00FD68  44                 	db	68
   799  00FD69  24                 	db	36
   800  00FD6A  3C                 	db	60
   801  00FD6B  40                 	db	64
   802  00FD6C  40                 	db	64
   803  00FD6D  20                 	db	32
   804  00FD6E  7C                 	db	124
   805  00FD6F  1C                 	db	28
   806  00FD70  20                 	db	32
   807  00FD71  40                 	db	64
   808  00FD72  20                 	db	32
   809  00FD73  1C                 	db	28
   810  00FD74  3C                 	db	60
   811  00FD75  40                 	db	64
   812  00FD76  30                 	db	48
   813  00FD77  40                 	db	64
   814  00FD78  3C                 	db	60
   815  00FD79  44                 	db	68
   816  00FD7A  28                 	db	40
   817  00FD7B  10                 	db	16
   818  00FD7C  28                 	db	40
   819  00FD7D  44                 	db	68
   820  00FD7E  4C                 	db	76
   821  00FD7F  90                 	db	144
   822  00FD80  90                 	db	144
   823  00FD81  90                 	db	144
   824  00FD82  7C                 	db	124
   825  00FD83  44                 	db	68
   826  00FD84  64                 	db	100
   827  00FD85  54                 	db	84
   828  00FD86  4C                 	db	76
   829  00FD87  44                 	db	68
   830  00FD88  00                 	db	0
   831  00FD89  08                 	db	8
   832  00FD8A  36                 	db	54
   833  00FD8B  41                 	db	65
   834  00FD8C  00                 	db	0
   835  00FD8D  00                 	db	0
   836  00FD8E  00                 	db	0
   837  00FD8F  77                 	db	119
   838  00FD90  00                 	db	0
   839  00FD91  00                 	db	0
   840  00FD92  00                 	db	0
   841  00FD93  41                 	db	65
   842  00FD94  36                 	db	54
   843  00FD95  08                 	db	8
   844  00FD96  00                 	db	0
   845  00FD97  02                 	db	2
   846  00FD98  01                 	db	1
   847  00FD99  02                 	db	2
   848  00FD9A  04                 	db	4
   849  00FD9B  02                 	db	2
   850  00FD9C                     __end_of_font2:
   851                           	opt stack 0
   852  00FD9C                     _dpowers:
   853                           	opt stack 0
   854  00FD9C  0001               	dw	1
   855  00FD9E  0000               	dw	0
   856  00FDA0  000A               	dw	10
   857  00FDA2  0000               	dw	0
   858  00FDA4  0064               	dw	100
   859  00FDA6  0000               	dw	0
   860  00FDA8  03E8               	dw	1000
   861  00FDAA  0000               	dw	0
   862  00FDAC  2710               	dw	10000
   863  00FDAE  0000               	dw	0
   864  00FDB0  86A0               	dw	34464
   865  00FDB2  0001               	dw	1
   866  00FDB4  4240               	dw	16960
   867  00FDB6  000F               	dw	15
   868  00FDB8  9680               	dw	38528
   869  00FDBA  0098               	dw	152
   870  00FDBC  E100               	dw	57600
   871  00FDBE  05F5               	dw	1525
   872  00FDC0  CA00               	dw	51712
   873  00FDC2  3B9A               	dw	15258
   874  00FDC4                     __end_of_dpowers:
   875                           	opt stack 0
   876  00FDC4                     __npowers_:
   877                           	opt stack 0
   878  00FDC4  00                 	db	0
   879  00FDC5  80                 	db	128
   880  00FDC6  3F                 	db	63
   881  00FDC7  CD                 	db	205
   882  00FDC8  CC                 	db	204
   883  00FDC9  3D                 	db	61
   884  00FDCA  D7                 	db	215
   885  00FDCB  23                 	db	35
   886  00FDCC  3C                 	db	60
   887  00FDCD  12                 	db	18
   888  00FDCE  83                 	db	131
   889  00FDCF  3A                 	db	58
   890  00FDD0  B7                 	db	183
   891  00FDD1  D1                 	db	209
   892  00FDD2  38                 	db	56
   893  00FDD3  C6                 	db	198
   894  00FDD4  27                 	db	39
   895  00FDD5  37                 	db	55
   896  00FDD6  38                 	db	56
   897  00FDD7  86                 	db	134
   898  00FDD8  35                 	db	53
   899  00FDD9  C0                 	db	192
   900  00FDDA  D6                 	db	214
   901  00FDDB  33                 	db	51
   902  00FDDC  CC                 	db	204
   903  00FDDD  2B                 	db	43
   904  00FDDE  32                 	db	50
   905  00FDDF  70                 	db	112
   906  00FDE0  89                 	db	137
   907  00FDE1  30                 	db	48
   908  00FDE2  E7                 	db	231
   909  00FDE3  DB                 	db	219
   910  00FDE4  2E                 	db	46
   911  00FDE5  E5                 	db	229
   912  00FDE6  3C                 	db	60
   913  00FDE7  1E                 	db	30
   914  00FDE8  42                 	db	66
   915  00FDE9  A2                 	db	162
   916  00FDEA  0D                 	db	13
   917  00FDEB                     __end_of__npowers_:
   918                           	opt stack 0
   919  00FDEB                     __powers_:
   920                           	opt stack 0
   921  00FDEB  00                 	db	0
   922  00FDEC  80                 	db	128
   923  00FDED  3F                 	db	63
   924  00FDEE  00                 	db	0
   925  00FDEF  20                 	db	32
   926  00FDF0  41                 	db	65
   927  00FDF1  00                 	db	0
   928  00FDF2  C8                 	db	200
   929  00FDF3  42                 	db	66
   930  00FDF4  00                 	db	0
   931  00FDF5  7A                 	db	122
   932  00FDF6  44                 	db	68
   933  00FDF7  40                 	db	64
   934  00FDF8  1C                 	db	28
   935  00FDF9  46                 	db	70
   936  00FDFA  50                 	db	80
   937  00FDFB  C3                 	db	195
   938  00FDFC  47                 	db	71
   939  00FDFD  24                 	db	36
   940  00FDFE  74                 	db	116
   941  00FDFF  49                 	db	73
   942  00FE00  97                 	db	151
   943  00FE01  18                 	db	24
   944  00FE02  4B                 	db	75
   945  00FE03  BC                 	db	188
   946  00FE04  BE                 	db	190
   947  00FE05  4C                 	db	76
   948  00FE06  6B                 	db	107
   949  00FE07  6E                 	db	110
   950  00FE08  4E                 	db	78
   951  00FE09  03                 	db	3
   952  00FE0A  15                 	db	21
   953  00FE0B  50                 	db	80
   954  00FE0C  79                 	db	121
   955  00FE0D  AD                 	db	173
   956  00FE0E  60                 	db	96
   957  00FE0F  F3                 	db	243
   958  00FE10  49                 	db	73
   959  00FE11  71                 	db	113
   960  00FE12                     __end_of__powers_:
   961                           	opt stack 0
   962  00FE12                     _hexpowers:
   963                           	opt stack 0
   964  00FE12  0001               	dw	1
   965  00FE14  0000               	dw	0
   966  00FE16  0010               	dw	16
   967  00FE18  0000               	dw	0
   968  00FE1A  0100               	dw	256
   969  00FE1C  0000               	dw	0
   970  00FE1E  1000               	dw	4096
   971  00FE20  0000               	dw	0
   972  00FE22  0000               	dw	0
   973  00FE24  0001               	dw	1
   974  00FE26  0000               	dw	0
   975  00FE28  0010               	dw	16
   976  00FE2A  0000               	dw	0
   977  00FE2C  0100               	dw	256
   978  00FE2E  0000               	dw	0
   979  00FE30  1000               	dw	4096
   980  00FE32                     __end_of_hexpowers:
   981                           	opt stack 0
   982  0000                     _ADCON0	set	4034
   983  0000                     _ADCON0bits	set	4034
   984  0000                     _ADCON1	set	4033
   985  0000                     _ADCON2	set	4032
   986  0000                     _ADRESH	set	4036
   987  0000                     _ADRESL	set	4035
   988  0000                     _CCP1CON	set	4029
   989  0000                     _CCP2CON	set	4026
   990  0000                     _CCPR1L	set	4030
   991  0000                     _CCPR2L	set	4027
   992  0000                     _INTCON2bits	set	4081
   993  0000                     _INTCON3bits	set	4080
   994  0000                     _INTCONbits	set	4082
   995  0000                     _OSCCON	set	4051
   996  0000                     _PIE1bits	set	3997
   997  0000                     _PIR1bits	set	3998
   998  0000                     _PORTA	set	3968
   999  0000                     _PORTBbits	set	3969
  1000  0000                     _PORTCbits	set	3970
  1001  0000                     _PORTD	set	3971
  1002  0000                     _PORTDbits	set	3971
  1003  0000                     _PORTE	set	3972
  1004  0000                     _PR2	set	4043
  1005  0000                     _RCSTA	set	4011
  1006  0000                     _RCSTAbits	set	4011
  1007  0000                     _SPBRG	set	4015
  1008  0000                     _SPBRGH	set	4016
  1009  0000                     _SSPBUF	set	4041
  1010  0000                     _SSPCON1	set	4038
  1011  0000                     _SSPSTAT	set	4039
  1012  0000                     _SSPSTATbits	set	4039
  1013  0000                     _T0CON	set	4053
  1014  0000                     _T0CONbits	set	4053
  1015  0000                     _T1CON	set	4045
  1016  0000                     _T1CONbits	set	4045
  1017  0000                     _T2CON	set	4042
  1018  0000                     _T3CON	set	4017
  1019  0000                     _TMR0H	set	4055
  1020  0000                     _TMR0L	set	4054
  1021  0000                     _TMR1H	set	4047
  1022  0000                     _TMR1L	set	4046
  1023  0000                     _TMR3L	set	4018
  1024  0000                     _TRISA	set	3986
  1025  0000                     _TRISB	set	3987
  1026  0000                     _TRISBbits	set	3987
  1027  0000                     _TRISC	set	3988
  1028  0000                     _TRISCbits	set	3988
  1029  0000                     _TRISD	set	3989
  1030  0000                     _TRISE	set	3990
  1031  0000                     _TXREG	set	4013
  1032  0000                     _TXSTA	set	4012
  1033  0000                     _TXSTAbits	set	4012
  1034  0000                     _RBPU	set	32655
  1035  0000                     _TRMT	set	32097
  1036  00FE32                     STR_9:
  1037                           
  1038                           ; BSR set to: 0
  1039  00FE32  54                 	db	84	;'T'
  1040  00FE33  68                 	db	104	;'h'
  1041  00FE34  65                 	db	101	;'e'
  1042  00FE35  20                 	db	32
  1043  00FE36  73                 	db	115	;'s'
  1044  00FE37  79                 	db	121	;'y'
  1045  00FE38  73                 	db	115	;'s'
  1046  00FE39  74                 	db	116	;'t'
  1047  00FE3A  65                 	db	101	;'e'
  1048  00FE3B  6D                 	db	109	;'m'
  1049  00FE3C  20                 	db	32
  1050  00FE3D  77                 	db	119	;'w'
  1051  00FE3E  69                 	db	105	;'i'
  1052  00FE3F  6C                 	db	108	;'l'
  1053  00FE40  6C                 	db	108	;'l'
  1054  00FE41  20                 	db	32
  1055  00FE42  6E                 	db	110	;'n'
  1056  00FE43  6F                 	db	111	;'o'
  1057  00FE44  77                 	db	119	;'w'
  1058  00FE45  20                 	db	32
  1059  00FE46  74                 	db	116	;'t'
  1060  00FE47  75                 	db	117	;'u'
  1061  00FE48  72                 	db	114	;'r'
  1062  00FE49  6E                 	db	110	;'n'
  1063  00FE4A  20                 	db	32
  1064  00FE4B  6F                 	db	111	;'o'
  1065  00FE4C  66                 	db	102	;'f'
  1066  00FE4D  66                 	db	102	;'f'
  1067  00FE4E  2E                 	db	46
  1068  00FE4F  20                 	db	32
  1069  00FE50  0D                 	db	13
  1070  00FE51  0A                 	db	10
  1071  00FE52  0A                 	db	10
  1072  00FE53  00                 	db	0
  1073  00FE54                     STR_11:
  1074                           
  1075                           ; BSR set to: 0
  1076  00FE54  54                 	db	84	;'T'
  1077  00FE55  68                 	db	104	;'h'
  1078  00FE56  65                 	db	101	;'e'
  1079  00FE57  20                 	db	32
  1080  00FE58  73                 	db	115	;'s'
  1081  00FE59  79                 	db	121	;'y'
  1082  00FE5A  73                 	db	115	;'s'
  1083  00FE5B  74                 	db	116	;'t'
  1084  00FE5C  65                 	db	101	;'e'
  1085  00FE5D  6D                 	db	109	;'m'
  1086  00FE5E  20                 	db	32
  1087  00FE5F  77                 	db	119	;'w'
  1088  00FE60  69                 	db	105	;'i'
  1089  00FE61  6C                 	db	108	;'l'
  1090  00FE62  6C                 	db	108	;'l'
  1091  00FE63  20                 	db	32
  1092  00FE64  6E                 	db	110	;'n'
  1093  00FE65  6F                 	db	111	;'o'
  1094  00FE66  77                 	db	119	;'w'
  1095  00FE67  20                 	db	32
  1096  00FE68  74                 	db	116	;'t'
  1097  00FE69  75                 	db	117	;'u'
  1098  00FE6A  72                 	db	114	;'r'
  1099  00FE6B  6E                 	db	110	;'n'
  1100  00FE6C  20                 	db	32
  1101  00FE6D  6F                 	db	111	;'o'
  1102  00FE6E  6E                 	db	110	;'n'
  1103  00FE6F  2E                 	db	46
  1104  00FE70  20                 	db	32
  1105  00FE71  0D                 	db	13
  1106  00FE72  0A                 	db	10
  1107  00FE73  0A                 	db	10
  1108  00FE74  00                 	db	0
  1109  00FE75                     STR_4:
  1110                           
  1111                           ; BSR set to: 0
  1112  00FE75  25                 	db	37
  1113  00FE76  30                 	db	48	;'0'
  1114  00FE77  32                 	db	50	;'2'
  1115  00FE78  78                 	db	120	;'x'
  1116  00FE79  3A                 	db	58	;':'
  1117  00FE7A  25                 	db	37
  1118  00FE7B  30                 	db	48	;'0'
  1119  00FE7C  32                 	db	50	;'2'
  1120  00FE7D  78                 	db	120	;'x'
  1121  00FE7E  3A                 	db	58	;':'
  1122  00FE7F  25                 	db	37
  1123  00FE80  30                 	db	48	;'0'
  1124  00FE81  32                 	db	50	;'2'
  1125  00FE82  78                 	db	120	;'x'
  1126  00FE83  20                 	db	32
  1127  00FE84  25                 	db	37
  1128  00FE85  30                 	db	48	;'0'
  1129  00FE86  32                 	db	50	;'2'
  1130  00FE87  78                 	db	120	;'x'
  1131  00FE88  2F                 	db	47
  1132  00FE89  25                 	db	37
  1133  00FE8A  30                 	db	48	;'0'
  1134  00FE8B  32                 	db	50	;'2'
  1135  00FE8C  78                 	db	120	;'x'
  1136  00FE8D  2F                 	db	47
  1137  00FE8E  25                 	db	37
  1138  00FE8F  30                 	db	48	;'0'
  1139  00FE90  32                 	db	50	;'2'
  1140  00FE91  78                 	db	120	;'x'
  1141  00FE92  00                 	db	0
  1142  00FE93                     STR_7:
  1143                           
  1144                           ; BSR set to: 0
  1145  00FE93  20                 	db	32
  1146  00FE94  52                 	db	82	;'R'
  1147  00FE95  50                 	db	80	;'P'
  1148  00FE96  4D                 	db	77	;'M'
  1149  00FE97  20                 	db	32
  1150  00FE98  3D                 	db	61	;'='
  1151  00FE99  20                 	db	32
  1152  00FE9A  25                 	db	37
  1153  00FE9B  64                 	db	100	;'d'
  1154  00FE9C  20                 	db	32
  1155  00FE9D  20                 	db	32
  1156  00FE9E  64                 	db	100	;'d'
  1157  00FE9F  63                 	db	99	;'c'
  1158  00FEA0  20                 	db	32
  1159  00FEA1  3D                 	db	61	;'='
  1160  00FEA2  20                 	db	32
  1161  00FEA3  25                 	db	37
  1162  00FEA4  64                 	db	100	;'d'
  1163  00FEA5  20                 	db	32
  1164  00FEA6  6C                 	db	108	;'l'
  1165  00FEA7  73                 	db	115	;'s'
  1166  00FEA8  20                 	db	32
  1167  00FEA9  3D                 	db	61	;'='
  1168  00FEAA  20                 	db	32
  1169  00FEAB  25                 	db	37
  1170  00FEAC  64                 	db	100	;'d'
  1171  00FEAD  0D                 	db	13
  1172  00FEAE  0A                 	db	10
  1173  00FEAF  00                 	db	0
  1174  00FEB0                     STR_10:
  1175                           
  1176                           ; BSR set to: 0
  1177  00FEB0  54                 	db	84	;'T'
  1178  00FEB1  68                 	db	104	;'h'
  1179  00FEB2  65                 	db	101	;'e'
  1180  00FEB3  20                 	db	32
  1181  00FEB4  73                 	db	115	;'s'
  1182  00FEB5  79                 	db	121	;'y'
  1183  00FEB6  73                 	db	115	;'s'
  1184  00FEB7  74                 	db	116	;'t'
  1185  00FEB8  65                 	db	101	;'e'
  1186  00FEB9  6D                 	db	109	;'m'
  1187  00FEBA  20                 	db	32
  1188  00FEBB  69                 	db	105	;'i'
  1189  00FEBC  73                 	db	115	;'s'
  1190  00FEBD  20                 	db	32
  1191  00FEBE  6E                 	db	110	;'n'
  1192  00FEBF  6F                 	db	111	;'o'
  1193  00FEC0  77                 	db	119	;'w'
  1194  00FEC1  20                 	db	32
  1195  00FEC2  4F                 	db	79	;'O'
  1196  00FEC3  46                 	db	70	;'F'
  1197  00FEC4  46                 	db	70	;'F'
  1198  00FEC5  2E                 	db	46
  1199  00FEC6  20                 	db	32
  1200  00FEC7  0D                 	db	13
  1201  00FEC8  0A                 	db	10
  1202  00FEC9  0A                 	db	10
  1203  00FECA  00                 	db	0
  1204  00FECB                     STR_8:
  1205                           
  1206                           ; BSR set to: 0
  1207  00FECB  4B                 	db	75	;'K'
  1208  00FECC  65                 	db	101	;'e'
  1209  00FECD  79                 	db	121	;'y'
  1210  00FECE  20                 	db	32
  1211  00FECF  4C                 	db	76	;'L'
  1212  00FED0  6F                 	db	111	;'o'
  1213  00FED1  63                 	db	99	;'c'
  1214  00FED2  61                 	db	97	;'a'
  1215  00FED3  74                 	db	116	;'t'
  1216  00FED4  69                 	db	105	;'i'
  1217  00FED5  6F                 	db	111	;'o'
  1218  00FED6  6E                 	db	110	;'n'
  1219  00FED7  20                 	db	32
  1220  00FED8  3D                 	db	61	;'='
  1221  00FED9  20                 	db	32
  1222  00FEDA  25                 	db	37
  1223  00FEDB  64                 	db	100	;'d'
  1224  00FEDC  20                 	db	32
  1225  00FEDD  0D                 	db	13
  1226  00FEDE  0A                 	db	10
  1227  00FEDF  0A                 	db	10
  1228  00FEE0  00                 	db	0
  1229  00FEE1                     STR_3:
  1230                           
  1231                           ; BSR set to: 0
  1232  00FEE1  43                 	db	67	;'C'
  1233  00FEE2  61                 	db	97	;'a'
  1234  00FEE3  6E                 	db	110	;'n'
  1235  00FEE4  6E                 	db	110	;'n'
  1236  00FEE5  6F                 	db	111	;'o'
  1237  00FEE6  74                 	db	116	;'t'
  1238  00FEE7  20                 	db	32
  1239  00FEE8  66                 	db	102	;'f'
  1240  00FEE9  69                 	db	105	;'i'
  1241  00FEEA  6E                 	db	110	;'n'
  1242  00FEEB  64                 	db	100	;'d'
  1243  00FEEC  20                 	db	32
  1244  00FEED  62                 	db	98	;'b'
  1245  00FEEE  75                 	db	117	;'u'
  1246  00FEEF  74                 	db	116	;'t'
  1247  00FEF0  74                 	db	116	;'t'
  1248  00FEF1  6F                 	db	111	;'o'
  1249  00FEF2  6E                 	db	110	;'n'
  1250  00FEF3  20                 	db	32
  1251  00FEF4  0D                 	db	13
  1252  00FEF5  0A                 	db	10
  1253  00FEF6  00                 	db	0
  1254  00FEF7                     STR_5:
  1255                           
  1256                           ; BSR set to: 0
  1257  00FEF7  20                 	db	32
  1258  00FEF8  54                 	db	84	;'T'
  1259  00FEF9  65                 	db	101	;'e'
  1260  00FEFA  6D                 	db	109	;'m'
  1261  00FEFB  70                 	db	112	;'p'
  1262  00FEFC  20                 	db	32
  1263  00FEFD  3D                 	db	61	;'='
  1264  00FEFE  20                 	db	32
  1265  00FEFF  25                 	db	37
  1266  00FF00  64                 	db	100	;'d'
  1267  00FF01  20                 	db	32
  1268  00FF02  43                 	db	67	;'C'
  1269  00FF03  20                 	db	32
  1270  00FF04  3D                 	db	61	;'='
  1271  00FF05  20                 	db	32
  1272  00FF06  25                 	db	37
  1273  00FF07  64                 	db	100	;'d'
  1274  00FF08  20                 	db	32
  1275  00FF09  46                 	db	70	;'F'
  1276  00FF0A  20                 	db	32
  1277  00FF0B  00                 	db	0
  1278  00FF0C                     STR_35:
  1279                           
  1280                           ; BSR set to: 0
  1281  00FF0C  20                 	db	32
  1282  00FF0D  54                 	db	84	;'T'
  1283  00FF0E  65                 	db	101	;'e'
  1284  00FF0F  6D                 	db	109	;'m'
  1285  00FF10  70                 	db	112	;'p'
  1286  00FF11  20                 	db	32
  1287  00FF12  3D                 	db	61	;'='
  1288  00FF13  20                 	db	32
  1289  00FF14  25                 	db	37
  1290  00FF15  64                 	db	100	;'d'
  1291  00FF16  20                 	db	32
  1292  00FF17  43                 	db	67	;'C'
  1293  00FF18  20                 	db	32
  1294  00FF19  3D                 	db	61	;'='
  1295  00FF1A  20                 	db	32
  1296  00FF1B  25                 	db	37
  1297  00FF1C  64                 	db	100	;'d'
  1298  00FF1D  20                 	db	32
  1299  00FF1E  46                 	db	70	;'F'
  1300  00FF1F  00                 	db	0
  1301  00FF20                     STR_6:
  1302                           
  1303                           ; BSR set to: 0
  1304  00FF20  4C                 	db	76	;'L'
  1305  00FF21  69                 	db	105	;'i'
  1306  00FF22  67                 	db	103	;'g'
  1307  00FF23  68                 	db	104	;'h'
  1308  00FF24  74                 	db	116	;'t'
  1309  00FF25  20                 	db	32
  1310  00FF26  53                 	db	83	;'S'
  1311  00FF27  65                 	db	101	;'e'
  1312  00FF28  6E                 	db	110	;'n'
  1313  00FF29  73                 	db	115	;'s'
  1314  00FF2A  6F                 	db	111	;'o'
  1315  00FF2B  72                 	db	114	;'r'
  1316  00FF2C  20                 	db	32
  1317  00FF2D  3D                 	db	61	;'='
  1318  00FF2E  20                 	db	32
  1319  00FF2F  25                 	db	37
  1320  00FF30  66                 	db	102	;'f'
  1321  00FF31  20                 	db	32
  1322  00FF32  56                 	db	86	;'V'
  1323  00FF33  00                 	db	0
  1324  00FF34                     STR_1:
  1325                           
  1326                           ; BSR set to: 0
  1327  00FF34  46                 	db	70	;'F'
  1328  00FF35  61                 	db	97	;'a'
  1329  00FF36  6E                 	db	110	;'n'
  1330  00FF37  20                 	db	32
  1331  00FF38  69                 	db	105	;'i'
  1332  00FF39  73                 	db	115	;'s'
  1333  00FF3A  20                 	db	32
  1334  00FF3B  74                 	db	116	;'t'
  1335  00FF3C  75                 	db	117	;'u'
  1336  00FF3D  72                 	db	114	;'r'
  1337  00FF3E  6E                 	db	110	;'n'
  1338  00FF3F  65                 	db	101	;'e'
  1339  00FF40  64                 	db	100	;'d'
  1340  00FF41  20                 	db	32
  1341  00FF42  6F                 	db	111	;'o'
  1342  00FF43  66                 	db	102	;'f'
  1343  00FF44  66                 	db	102	;'f'
  1344  00FF45  0D                 	db	13
  1345  00FF46  0A                 	db	10
  1346  00FF47  00                 	db	0
  1347  00FF48                     STR_2:
  1348                           
  1349                           ; BSR set to: 0
  1350  00FF48  46                 	db	70	;'F'
  1351  00FF49  61                 	db	97	;'a'
  1352  00FF4A  6E                 	db	110	;'n'
  1353  00FF4B  20                 	db	32
  1354  00FF4C  69                 	db	105	;'i'
  1355  00FF4D  73                 	db	115	;'s'
  1356  00FF4E  20                 	db	32
  1357  00FF4F  74                 	db	116	;'t'
  1358  00FF50  75                 	db	117	;'u'
  1359  00FF51  72                 	db	114	;'r'
  1360  00FF52  6E                 	db	110	;'n'
  1361  00FF53  65                 	db	101	;'e'
  1362  00FF54  64                 	db	100	;'d'
  1363  00FF55  20                 	db	32
  1364  00FF56  6F                 	db	111	;'o'
  1365  00FF57  6E                 	db	110	;'n'
  1366  00FF58  0D                 	db	13
  1367  00FF59  0A                 	db	10
  1368  00FF5A  00                 	db	0
  1369  00FF5B                     STR_47:
  1370                           
  1371                           ; BSR set to: 0
  1372  00FF5B  30                 	db	48	;'0'
  1373  00FF5C  31                 	db	49	;'1'
  1374  00FF5D  32                 	db	50	;'2'
  1375  00FF5E  33                 	db	51	;'3'
  1376  00FF5F  34                 	db	52	;'4'
  1377  00FF60  35                 	db	53	;'5'
  1378  00FF61  36                 	db	54	;'6'
  1379  00FF62  37                 	db	55	;'7'
  1380  00FF63  38                 	db	56	;'8'
  1381  00FF64  39                 	db	57	;'9'
  1382  00FF65  61                 	db	97	;'a'
  1383  00FF66  62                 	db	98	;'b'
  1384  00FF67  63                 	db	99	;'c'
  1385  00FF68  64                 	db	100	;'d'
  1386  00FF69  65                 	db	101	;'e'
  1387  00FF6A  66                 	db	102	;'f'
  1388  00FF6B  00                 	db	0
  1389  00FF6C                     STR_39:
  1390                           
  1391                           ; BSR set to: 0
  1392  00FF6C  20                 	db	32
  1393  00FF6D  20                 	db	32
  1394  00FF6E  53                 	db	83	;'S'
  1395  00FF6F  65                 	db	101	;'e'
  1396  00FF70  74                 	db	116	;'t'
  1397  00FF71  20                 	db	32
  1398  00FF72  46                 	db	70	;'F'
  1399  00FF73  61                 	db	97	;'a'
  1400  00FF74  6E                 	db	110	;'n'
  1401  00FF75  20                 	db	32
  1402  00FF76  54                 	db	84	;'T'
  1403  00FF77  65                 	db	101	;'e'
  1404  00FF78  6D                 	db	109	;'m'
  1405  00FF79  70                 	db	112	;'p'
  1406  00FF7A  00                 	db	0
  1407  00FF7B                     STR_12:
  1408                           
  1409                           ; BSR set to: 0
  1410  00FF7B  54                 	db	84	;'T'
  1411  00FF7C  65                 	db	101	;'e'
  1412  00FF7D  6D                 	db	109	;'m'
  1413  00FF7E  70                 	db	112	;'p'
  1414  00FF7F  65                 	db	101	;'e'
  1415  00FF80  72                 	db	114	;'r'
  1416  00FF81  61                 	db	97	;'a'
  1417  00FF82  74                 	db	116	;'t'
  1418  00FF83  75                 	db	117	;'u'
  1419  00FF84  72                 	db	114	;'r'
  1420  00FF85  65                 	db	101	;'e'
  1421  00FF86  3A                 	db	58	;':'
  1422  00FF87  00                 	db	0
  1423  00FF88                     STR_44:
  1424                           
  1425                           ; BSR set to: 0
  1426  00FF88  54                 	db	84	;'T'
  1427  00FF89  69                 	db	105	;'i'
  1428  00FF8A  6D                 	db	109	;'m'
  1429  00FF8B  65                 	db	101	;'e'
  1430  00FF8C  20                 	db	32
  1431  00FF8D  53                 	db	83	;'S'
  1432  00FF8E  65                 	db	101	;'e'
  1433  00FF8F  74                 	db	116	;'t'
  1434  00FF90  75                 	db	117	;'u'
  1435  00FF91  70                 	db	112	;'p'
  1436  00FF92  00                 	db	0
  1437  00FF93  00                 	db	0
  1438  00FF94                     STR_38:
  1439                           
  1440                           ; BSR set to: 0
  1441  00FF94  20                 	db	32
  1442  00FF95  46                 	db	70	;'F'
  1443  00FF96  61                 	db	97	;'a'
  1444  00FF97  6E                 	db	110	;'n'
  1445  00FF98  20                 	db	32
  1446  00FF99  53                 	db	83	;'S'
  1447  00FF9A  65                 	db	101	;'e'
  1448  00FF9B  74                 	db	116	;'t'
  1449  00FF9C  75                 	db	117	;'u'
  1450  00FF9D  70                 	db	112	;'p'
  1451  00FF9E  00                 	db	0
  1452  00FF9F  00                 	db	0
  1453  00FFA0                     STR_19:
  1454                           
  1455                           ; BSR set to: 0
  1456  00FFA0  46                 	db	70	;'F'
  1457  00FFA1  41                 	db	65	;'A'
  1458  00FFA2  4E                 	db	78	;'N'
  1459  00FFA3  20                 	db	32
  1460  00FFA4  53                 	db	83	;'S'
  1461  00FFA5  65                 	db	101	;'e'
  1462  00FFA6  74                 	db	116	;'t'
  1463  00FFA7  54                 	db	84	;'T'
  1464  00FFA8  65                 	db	101	;'e'
  1465  00FFA9  6D                 	db	109	;'m'
  1466  00FFAA  70                 	db	112	;'p'
  1467  00FFAB  00                 	db	0
  1468  00FFAC                     STR_25:
  1469                           
  1470                           ; BSR set to: 0
  1471  00FFAC  53                 	db	83	;'S'
  1472  00FFAD  59                 	db	89	;'Y'
  1473  00FFAE  53                 	db	83	;'S'
  1474  00FFAF  54                 	db	84	;'T'
  1475  00FFB0  45                 	db	69	;'E'
  1476  00FFB1  4D                 	db	77	;'M'
  1477  00FFB2  20                 	db	32
  1478  00FFB3  4F                 	db	79	;'O'
  1479  00FFB4  46                 	db	70	;'F'
  1480  00FFB5  46                 	db	70	;'F'
  1481  00FFB6  00                 	db	0
  1482  00FFB7                     STR_17:
  1483                           
  1484                           ; BSR set to: 0
  1485  00FFB7  54                 	db	84	;'T'
  1486  00FFB8  69                 	db	105	;'i'
  1487  00FFB9  6D                 	db	109	;'m'
  1488  00FFBA  65                 	db	101	;'e'
  1489  00FFBB  72                 	db	114	;'r'
  1490  00FFBC  20                 	db	32
  1491  00FFBD  4D                 	db	77	;'M'
  1492  00FFBE  6F                 	db	111	;'o'
  1493  00FFBF  64                 	db	100	;'d'
  1494  00FFC0  65                 	db	101	;'e'
  1495  00FFC1  00                 	db	0
  1496  00FFC2                     STR_18:
  1497                           
  1498                           ; BSR set to: 0
  1499  00FFC2  54                 	db	84	;'T'
  1500  00FFC3  69                 	db	105	;'i'
  1501  00FFC4  6D                 	db	109	;'m'
  1502  00FFC5  65                 	db	101	;'e'
  1503  00FFC6  72                 	db	114	;'r'
  1504  00FFC7  20                 	db	32
  1505  00FFC8  54                 	db	84	;'T'
  1506  00FFC9  69                 	db	105	;'i'
  1507  00FFCA  6D                 	db	109	;'m'
  1508  00FFCB  65                 	db	101	;'e'
  1509  00FFCC  00                 	db	0
  1510  00FFCD                     STR_30:
  1511                           
  1512                           ; BSR set to: 0
  1513  00FFCD  41                 	db	65	;'A'
  1514  00FFCE  55                 	db	85	;'U'
  1515  00FFCF  54                 	db	84	;'T'
  1516  00FFD0  4F                 	db	79	;'O'
  1517  00FFD1  00                 	db	0
  1518  00FFD2                     STR_31:
  1519                           
  1520                           ; BSR set to: 0
  1521  00FFD2  4D                 	db	77	;'M'
  1522  00FFD3  41                 	db	65	;'A'
  1523  00FFD4  4E                 	db	78	;'N'
  1524  00FFD5  55                 	db	85	;'U'
  1525  00FFD6  00                 	db	0
  1526  00FFD7                     STR_16:
  1527                           
  1528                           ; BSR set to: 0
  1529  00FFD7  44                 	db	68	;'D'
  1530  00FFD8  61                 	db	97	;'a'
  1531  00FFD9  74                 	db	116	;'t'
  1532  00FFDA  65                 	db	101	;'e'
  1533  00FFDB  00                 	db	0
  1534  00FFDC                     STR_23:
  1535                           
  1536                           ; BSR set to: 0
  1537  00FFDC  56                 	db	86	;'V'
  1538  00FFDD  6F                 	db	111	;'o'
  1539  00FFDE  6C                 	db	108	;'l'
  1540  00FFDF  74                 	db	116	;'t'
  1541  00FFE0  00                 	db	0
  1542  00FFE1                     STR_32:
  1543                           
  1544                           ; BSR set to: 0
  1545  00FFE1  4F                 	db	79	;'O'
  1546  00FFE2  4E                 	db	78	;'N'
  1547  00FFE3  20                 	db	32
  1548  00FFE4  00                 	db	0
  1549  00FFE5                     STR_27:
  1550                           
  1551                           ; BSR set to: 0
  1552  00FFE5  54                 	db	84	;'T'
  1553  00FFE6  4D                 	db	77	;'M'
  1554  00FFE7  31                 	db	49	;'1'
  1555  00FFE8  00                 	db	0
  1556  00FFE9                     STR_28:
  1557                           
  1558                           ; BSR set to: 0
  1559  00FFE9  54                 	db	84	;'T'
  1560  00FFEA  4D                 	db	77	;'M'
  1561  00FFEB  32                 	db	50	;'2'
  1562  00FFEC  00                 	db	0
  1563  00FFED                     STR_29:
  1564                           
  1565                           ; BSR set to: 0
  1566  00FFED  54                 	db	84	;'T'
  1567  00FFEE  4D                 	db	77	;'M'
  1568  00FFEF  33                 	db	51	;'3'
  1569  00FFF0  00                 	db	0
  1570  00FFF1                     STR_24:
  1571                           
  1572                           ; BSR set to: 0
  1573  00FFF1  52                 	db	82	;'R'
  1574  00FFF2  50                 	db	80	;'P'
  1575  00FFF3  4D                 	db	77	;'M'
  1576  00FFF4  00                 	db	0
  1577  00FFF5                     STR_13:
  1578                           
  1579                           ; BSR set to: 0
  1580  00FFF5  43                 	db	67	;'C'
  1581  00FFF6  2F                 	db	47
  1582  00FFF7  00                 	db	0
  1583  00FFF8                     STR_22:
  1584                           
  1585                           ; BSR set to: 0
  1586  00FFF8  44                 	db	68	;'D'
  1587  00FFF9  43                 	db	67	;'C'
  1588  00FFFA  00                 	db	0
  1589  00FFFB                     STR_21:
  1590                           
  1591                           ; BSR set to: 0
  1592  00FFFB  53                 	db	83	;'S'
  1593  00FFFC  57                 	db	87	;'W'
  1594  00FFFD  00                 	db	0
  1595  0000                     
  1596                           ; #config settings
  1597  00FFFE  00                 	db	0	; dummy byte at the end
  1598  0000                     
  1599                           	psect	cinit
  1600  0042FA                     __pcinit:
  1601                           	opt stack 0
  1602  0042FA                     start_initialization:
  1603                           	opt stack 0
  1604  0042FA                     __initialization:
  1605                           	opt stack 0
  1606                           
  1607                           ; Clear objects allocated to BANK0 (38 bytes)
  1608  0042FA  EE00  F0B4         	lfsr	0,__pbssBANK0
  1609  0042FE  0E26               	movlw	38
  1610  004300                     clear_0:
  1611  004300  6AEE               	clrf	postinc0,c
  1612  004302  06E8               	decf	wreg,f,c
  1613  004304  E1FD               	bnz	clear_0
  1614                           
  1615                           ; Clear objects allocated to COMRAM (18 bytes)
  1616  004306  EE00  F05A         	lfsr	0,__pbssCOMRAM
  1617  00430A  0E12               	movlw	18
  1618  00430C                     clear_1:
  1619  00430C  6AEE               	clrf	postinc0,c
  1620  00430E  06E8               	decf	wreg,f,c
  1621  004310  E1FD               	bnz	clear_1
  1622                           
  1623                           ; Initialize objects allocated to BANK1 (140 bytes)
  1624                           ; load TBLPTR registers with __pidataBANK1
  1625  004312  0E1E               	movlw	low __pidataBANK1
  1626  004314  6EF6               	movwf	tblptrl,c
  1627  004316  0E3E               	movlw	high __pidataBANK1
  1628  004318  6EF7               	movwf	tblptrh,c
  1629  00431A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1630  00431C  6EF8               	movwf	tblptru,c
  1631  00431E  EE01  F000         	lfsr	0,__pdataBANK1
  1632  004322  EE10 F08C          	lfsr	1,140
  1633  004326                     copy_data0:
  1634  004326  0009               	tblrd		*+
  1635  004328  CFF5 FFEE          	movff	tablat,postinc0
  1636  00432C  50E5               	movf	postdec1,w,c
  1637  00432E  50E1               	movf	fsr1l,w,c
  1638  004330  E1FA               	bnz	copy_data0
  1639                           
  1640                           ; Initialize objects allocated to BANK0 (34 bytes)
  1641                           ; load TBLPTR registers with __pidataBANK0
  1642  004332  0E8C               	movlw	low __pidataBANK0
  1643  004334  6EF6               	movwf	tblptrl,c
  1644  004336  0E4A               	movlw	high __pidataBANK0
  1645  004338  6EF7               	movwf	tblptrh,c
  1646  00433A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1647  00433C  6EF8               	movwf	tblptru,c
  1648  00433E  EE00  F0DA         	lfsr	0,__pdataBANK0
  1649  004342  EE10 F022          	lfsr	1,34
  1650  004346                     copy_data1:
  1651  004346  0009               	tblrd		*+
  1652  004348  CFF5 FFEE          	movff	tablat,postinc0
  1653  00434C  50E5               	movf	postdec1,w,c
  1654  00434E  50E1               	movf	fsr1l,w,c
  1655  004350  E1FA               	bnz	copy_data1
  1656  004352                     end_of_initialization:
  1657                           	opt stack 0
  1658  004352                     __end_of__initialization:
  1659                           	opt stack 0
  1660  004352  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1661  004354  6EF8               	movwf	tblptru,c
  1662  004356  0100               	movlb	0
  1663  004358  EF65  F00D         	goto	_main	;jump to C main() function
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postdec1	equ	0xFE5
  1671                           fsr1l	equ	0xFE1
  1672                           
  1673                           	psect	bssCOMRAM
  1674  00005A                     __pbssCOMRAM:
  1675                           	opt stack 0
  1676  00005A                     _Time_Elapsed:
  1677                           	opt stack 0
  1678  00005A                     	ds	2
  1679  00005C                     _rpm:
  1680                           	opt stack 0
  1681  00005C                     	ds	2
  1682  00005E                     _txt:
  1683                           	opt stack 0
  1684  00005E                     	ds	2
  1685  000060                     _FAN_TIMER_MODE:
  1686                           	opt stack 0
  1687  000060                     	ds	1
  1688  000061                     _Nec_state:
  1689                           	opt stack 0
  1690  000061                     	ds	1
  1691  000062                     _SYSTEM_ON:
  1692                           	opt stack 0
  1693  000062                     	ds	1
  1694  000063                     _day:
  1695                           	opt stack 0
  1696  000063                     	ds	1
  1697  000064                     _duty_cycle:
  1698                           	opt stack 0
  1699  000064                     	ds	1
  1700  000065                     _hour:
  1701                           	opt stack 0
  1702  000065                     	ds	1
  1703  000066                     _minute:
  1704                           	opt stack 0
  1705  000066                     	ds	1
  1706  000067                     _month:
  1707                           	opt stack 0
  1708  000067                     	ds	1
  1709  000068                     _second:
  1710                           	opt stack 0
  1711  000068                     	ds	1
  1712  000069                     _tempC:
  1713                           	opt stack 0
  1714  000069                     	ds	1
  1715  00006A                     _tempF:
  1716                           	opt stack 0
  1717  00006A                     	ds	1
  1718  00006B                     _year:
  1719                           	opt stack 0
  1720  00006B                     	ds	1
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1l	equ	0xFE1
  1729                           
  1730                           	psect	bssBANK0
  1731  0000B4                     __pbssBANK0:
  1732                           	opt stack 0
  1733  0000B4                     _Nec_code:
  1734                           	opt stack 0
  1735  0000B4                     	ds	4
  1736  0000B8                     _volt:
  1737                           	opt stack 0
  1738  0000B8                     	ds	3
  1739  0000BB                     _Nec_ok:
  1740                           	opt stack 0
  1741  0000BB                     	ds	2
  1742  0000BD                     _nbr:
  1743                           	opt stack 0
  1744  0000BD                     	ds	2
  1745  0000BF                     _rps:
  1746                           	opt stack 0
  1747  0000BF                     	ds	2
  1748  0000C1                     _FAN:
  1749                           	opt stack 0
  1750  0000C1                     	ds	1
  1751  0000C2                     _FANMODE:
  1752                           	opt stack 0
  1753  0000C2                     	ds	1
  1754  0000C3                     _FAN_TIMER_TIME:
  1755                           	opt stack 0
  1756  0000C3                     	ds	1
  1757  0000C4                     _INT0_flag:
  1758                           	opt stack 0
  1759  0000C4                     	ds	1
  1760  0000C5                     _INT1_flag:
  1761                           	opt stack 0
  1762  0000C5                     	ds	1
  1763  0000C6                     _INT2_flag:
  1764                           	opt stack 0
  1765  0000C6                     	ds	1
  1766  0000C7                     _In_Fan_Temp_Setup:
  1767                           	opt stack 0
  1768  0000C7                     	ds	1
  1769  0000C8                     _In_Time_Setup:
  1770                           	opt stack 0
  1771  0000C8                     	ds	1
  1772  0000C9                     _Nec_Button:
  1773                           	opt stack 0
  1774  0000C9                     	ds	1
  1775  0000CA                     _Select_Fan_Temp_Field:
  1776                           	opt stack 0
  1777  0000CA                     	ds	1
  1778  0000CB                     _Select_Field:
  1779                           	opt stack 0
  1780  0000CB                     	ds	1
  1781  0000CC                     __tft_type:
  1782                           	opt stack 0
  1783  0000CC                     	ds	1
  1784  0000CD                     _bit_count:
  1785                           	opt stack 0
  1786  0000CD                     	ds	1
  1787  0000CE                     _colstart:
  1788                           	opt stack 0
  1789  0000CE                     	ds	1
  1790  0000CF                     _dow:
  1791                           	opt stack 0
  1792  0000CF                     	ds	1
  1793  0000D0                     _found:
  1794                           	opt stack 0
  1795  0000D0                     	ds	1
  1796  0000D1                     _light_flag:
  1797                           	opt stack 0
  1798  0000D1                     	ds	1
  1799  0000D2                     _rowstart:
  1800                           	opt stack 0
  1801  0000D2                     	ds	1
  1802  0000D3                     _setup_day:
  1803                           	opt stack 0
  1804  0000D3                     	ds	1
  1805  0000D4                     _setup_fan_set_temp:
  1806                           	opt stack 0
  1807  0000D4                     	ds	1
  1808  0000D5                     _setup_hour:
  1809                           	opt stack 0
  1810  0000D5                     	ds	1
  1811  0000D6                     _setup_minute:
  1812                           	opt stack 0
  1813  0000D6                     	ds	1
  1814  0000D7                     _setup_month:
  1815                           	opt stack 0
  1816  0000D7                     	ds	1
  1817  0000D8                     _setup_second:
  1818                           	opt stack 0
  1819  0000D8                     	ds	1
  1820  0000D9                     _setup_year:
  1821                           	opt stack 0
  1822  0000D9                     	ds	1
  1823                           tblptru	equ	0xFF8
  1824                           tblptrh	equ	0xFF7
  1825                           tblptrl	equ	0xFF6
  1826                           tablat	equ	0xFF5
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           postdec1	equ	0xFE5
  1830                           fsr1l	equ	0xFE1
  1831                           
  1832                           	psect	dataBANK0
  1833  0000DA                     __pdataBANK0:
  1834                           	opt stack 0
  1835  0000DA                     _RTC_ALARM_Txt:
  1836                           	opt stack 0
  1837  0000DA                     	ds	2
  1838  0000DC                     _fan_set_temp:
  1839                           	opt stack 0
  1840  0000DC                     	ds	1
  1841  0000DD                     _tempSecond:
  1842                           	opt stack 0
  1843  0000DD                     	ds	1
  1844  0000DE                     _wrap:
  1845                           	opt stack 0
  1846  0000DE                     	ds	1
  1847  0000DF                     _tempF_Txt:
  1848                           	opt stack 0
  1849  0000DF                     	ds	5
  1850  0000E4                     _DC_Txt:
  1851                           	opt stack 0
  1852  0000E4                     	ds	4
  1853  0000E8                     _Fan_SW_Txt:
  1854                           	opt stack 0
  1855  0000E8                     	ds	4
  1856  0000EC                     _Fan_Set_Temp_Txt:
  1857                           	opt stack 0
  1858  0000EC                     	ds	4
  1859  0000F0                     _Fan_Timer_Mode_Txt:
  1860                           	opt stack 0
  1861  0000F0                     	ds	4
  1862  0000F4                     _Fan_Timer_Txt:
  1863                           	opt stack 0
  1864  0000F4                     	ds	4
  1865  0000F8                     _tempC_Txt:
  1866                           	opt stack 0
  1867  0000F8                     	ds	4
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           
  1877                           	psect	dataBANK1
  1878  000100                     __pdataBANK1:
  1879                           	opt stack 0
  1880  000100                     _buffer:
  1881                           	opt stack 0
  1882  000100                     	ds	35
  1883  000123                     check_for_button_input@F4236:
  1884                           	opt stack 0
  1885  000123                     	ds	21
  1886  000138                     _Timer_Table:
  1887                           	opt stack 0
  1888  000138                     	ds	4
  1889  00013C                     _Timing_Txt:
  1890                           	opt stack 0
  1891  00013C                     	ds	23
  1892  000153                     _date_Txt:
  1893                           	opt stack 0
  1894  000153                     	ds	9
  1895  00015C                     _setup_date:
  1896                           	opt stack 0
  1897  00015C                     	ds	9
  1898  000165                     _setup_time:
  1899                           	opt stack 0
  1900  000165                     	ds	9
  1901  00016E                     _time_Txt:
  1902                           	opt stack 0
  1903  00016E                     	ds	9
  1904  000177                     _Volt_Txt:
  1905                           	opt stack 0
  1906  000177                     	ds	6
  1907  00017D                     _Fan_Mode_Txt:
  1908                           	opt stack 0
  1909  00017D                     	ds	5
  1910  000182                     _RPM_Txt:
  1911                           	opt stack 0
  1912  000182                     	ds	5
  1913  000187                     _setup_fan_set_text:
  1914                           	opt stack 0
  1915  000187                     	ds	5
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postdec1	equ	0xFE5
  1923                           fsr1l	equ	0xFE1
  1924                           
  1925                           	psect	cstackBANK1
  1926  00018C                     __pcstackBANK1:
  1927                           	opt stack 0
  1928  00018C                     check_for_button_input@array1:
  1929                           	opt stack 0
  1930                           
  1931                           ; 21 bytes @ 0x0
  1932  00018C                     	ds	21
  1933  0001A1                     check_for_button_input@j:
  1934                           	opt stack 0
  1935                           
  1936                           ; 2 bytes @ 0x15
  1937  0001A1                     	ds	2
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           postdec1	equ	0xFE5
  1945                           fsr1l	equ	0xFE1
  1946                           
  1947                           	psect	cstackBANK0
  1948  000080                     __pcstackBANK0:
  1949                           	opt stack 0
  1950  000080                     ?___ftsub:
  1951                           	opt stack 0
  1952  000080                     ___ftsub@f1:
  1953                           	opt stack 0
  1954                           
  1955                           ; 3 bytes @ 0x0
  1956  000080                     	ds	3
  1957  000083                     ___ftsub@f2:
  1958                           	opt stack 0
  1959                           
  1960                           ; 3 bytes @ 0x3
  1961  000083                     	ds	3
  1962  000086                     ?_printf:
  1963                           	opt stack 0
  1964  000086                     printf@f:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x6
  1968  000086                     	ds	14
  1969  000094                     ??_printf:
  1970                           
  1971                           ; 0 bytes @ 0x14
  1972  000094                     	ds	6
  1973  00009A                     _printf$2978:
  1974                           	opt stack 0
  1975                           
  1976                           ; 3 bytes @ 0x1A
  1977  00009A                     	ds	3
  1978  00009D                     printf@idx:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x1D
  1982  00009D                     	ds	1
  1983  00009E                     printf@ap:
  1984                           	opt stack 0
  1985                           
  1986                           ; 2 bytes @ 0x1E
  1987  00009E                     	ds	2
  1988  0000A0                     printf@prec:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x20
  1992  0000A0                     	ds	2
  1993  0000A2                     printf@tmpval:
  1994                           	opt stack 0
  1995                           
  1996                           ; 4 bytes @ 0x22
  1997  0000A2                     	ds	4
  1998  0000A6                     printf@width:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x26
  2002  0000A6                     	ds	2
  2003  0000A8                     printf@exp:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x28
  2007  0000A8                     	ds	2
  2008  0000AA                     printf@val:
  2009                           	opt stack 0
  2010                           
  2011                           ; 4 bytes @ 0x2A
  2012  0000AA                     	ds	4
  2013  0000AE                     printf@flag:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0x2E
  2017  0000AE                     	ds	2
  2018  0000B0                     printf@fval:
  2019                           	opt stack 0
  2020                           
  2021                           ; 3 bytes @ 0x30
  2022  0000B0                     	ds	3
  2023  0000B3                     printf@c:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x33
  2027  0000B3                     	ds	1
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037                           	psect	cstackCOMRAM
  2038  000001                     __pcstackCOMRAM:
  2039                           	opt stack 0
  2040  000001                     ??_INT2_isr:
  2041  000001                     INT0_isr@k:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x0
  2045  000001                     	ds	2
  2046  000003                     ??_chkisr:
  2047                           
  2048                           ; 0 bytes @ 0x2
  2049  000003                     	ds	14
  2050  000011                     ??_isdigit:
  2051  000011                     ??_bcd_2_dec:
  2052  000011                     ?_strlen:
  2053                           	opt stack 0
  2054  000011                     ?_get_full_ADC:
  2055                           	opt stack 0
  2056  000011                     ?___wmul:
  2057                           	opt stack 0
  2058  000011                     ?___ftpack:
  2059                           	opt stack 0
  2060  000011                     ?___ftneg:
  2061                           	opt stack 0
  2062  000011                     ?__tdiv_to_l_:
  2063                           	opt stack 0
  2064  000011                     ?__div_to_l_:
  2065                           	opt stack 0
  2066  000011                     ?___lldiv:
  2067                           	opt stack 0
  2068  000011                     I2C_Read@ack:
  2069                           	opt stack 0
  2070  000011                     I2C_Write@outByte:
  2071                           	opt stack 0
  2072  000011                     spiwrite@x:
  2073                           	opt stack 0
  2074  000011                     putch@c:
  2075                           	opt stack 0
  2076  000011                     get_duty_cycle@temp:
  2077                           	opt stack 0
  2078  000011                     Wait_Half_Sec@k:
  2079                           	opt stack 0
  2080  000011                     OpenUSART@spbrg:
  2081                           	opt stack 0
  2082  000011                     ___wmul@multiplier:
  2083                           	opt stack 0
  2084  000011                     strcpy@to:
  2085                           	opt stack 0
  2086  000011                     strlen@s:
  2087                           	opt stack 0
  2088  000011                     __div_to_l_@f1:
  2089                           	opt stack 0
  2090  000011                     ___ftpack@arg:
  2091                           	opt stack 0
  2092  000011                     __tdiv_to_l_@f1:
  2093                           	opt stack 0
  2094  000011                     ___ftge@ff1:
  2095                           	opt stack 0
  2096  000011                     ___ftneg@f1:
  2097                           	opt stack 0
  2098  000011                     I2C_Init@c:
  2099                           	opt stack 0
  2100  000011                     ___lldiv@dividend:
  2101                           	opt stack 0
  2102                           
  2103                           ; 4 bytes @ 0x10
  2104  000011                     	ds	1
  2105  000012                     I2C_Read@n:
  2106                           	opt stack 0
  2107  000012                     I2C_Write@n:
  2108                           	opt stack 0
  2109  000012                     spiwrite@spidata:
  2110                           	opt stack 0
  2111  000012                     _isdigit$2600:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x11
  2115  000012                     	ds	1
  2116  000013                     ??_strlen:
  2117  000013                     ??_get_full_ADC:
  2118  000013                     I2C_Read@inByte:
  2119                           	opt stack 0
  2120  000013                     I2C_Write_Cmd_Only@Cmd:
  2121                           	opt stack 0
  2122  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  2123                           	opt stack 0
  2124  000013                     write_command@cmd_:
  2125                           	opt stack 0
  2126  000013                     write_data@data_:
  2127                           	opt stack 0
  2128  000013                     OpenUSART@config:
  2129                           	opt stack 0
  2130  000013                     isdigit@c:
  2131                           	opt stack 0
  2132  000013                     get_duty_cycle@set_temp:
  2133                           	opt stack 0
  2134  000013                     bcd_2_dec@dec:
  2135                           	opt stack 0
  2136  000013                     ___wmul@multiplicand:
  2137                           	opt stack 0
  2138  000013                     strcpy@from:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x12
  2142  000013                     	ds	1
  2143  000014                     ?_DS1621_Read_Temp:
  2144                           	opt stack 0
  2145  000014                     I2C_Write_Cmd_Only@Device:
  2146                           	opt stack 0
  2147  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  2148                           	opt stack 0
  2149  000014                     setAddrWindow@y0:
  2150                           	opt stack 0
  2151  000014                     DS3231_Read_Time@Address:
  2152                           	opt stack 0
  2153  000014                     ___ftpack@exp:
  2154                           	opt stack 0
  2155  000014                     __div_to_l_@f2:
  2156                           	opt stack 0
  2157  000014                     __tdiv_to_l_@f2:
  2158                           	opt stack 0
  2159  000014                     ___ftge@ff2:
  2160                           	opt stack 0
  2161                           
  2162                           ; 3 bytes @ 0x13
  2163  000014                     	ds	1
  2164  000015                     ??_get_duty_cycle:
  2165  000015                     I2C_Write_Cmd_Write_Data@Device:
  2166                           	opt stack 0
  2167  000015                     setAddrWindow@x1:
  2168                           	opt stack 0
  2169  000015                     bcd_2_dec@bcd:
  2170                           	opt stack 0
  2171  000015                     DS3231_Read_Time@Device:
  2172                           	opt stack 0
  2173  000015                     ___ftpack@sign:
  2174                           	opt stack 0
  2175  000015                     get_full_ADC@result:
  2176                           	opt stack 0
  2177  000015                     ___wmul@product:
  2178                           	opt stack 0
  2179  000015                     strcpy@cp:
  2180                           	opt stack 0
  2181  000015                     strlen@cp:
  2182                           	opt stack 0
  2183  000015                     ___lldiv@divisor:
  2184                           	opt stack 0
  2185                           
  2186                           ; 4 bytes @ 0x14
  2187  000015                     	ds	1
  2188  000016                     ??___ftpack:
  2189  000016                     setAddrWindow@y1:
  2190                           	opt stack 0
  2191  000016                     DS1621_Init@Device:
  2192                           	opt stack 0
  2193  000016                     DS1621_Read_Temp@Cmd:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x15
  2197  000016                     	ds	1
  2198  000017                     ??__tdiv_to_l_:
  2199  000017                     ??___ftge:
  2200  000017                     ?___awdiv:
  2201                           	opt stack 0
  2202  000017                     setAddrWindow@x0:
  2203                           	opt stack 0
  2204  000017                     DS1621_Read_Temp@Data_Ret:
  2205                           	opt stack 0
  2206  000017                     get_duty_cycle@diff_temp:
  2207                           	opt stack 0
  2208  000017                     delay_ms@ms:
  2209                           	opt stack 0
  2210  000017                     ___awdiv@dividend:
  2211                           	opt stack 0
  2212  000017                     __div_to_l_@quot:
  2213                           	opt stack 0
  2214                           
  2215                           ; 4 bytes @ 0x16
  2216  000017                     	ds	1
  2217  000018                     drawPixel@y:
  2218                           	opt stack 0
  2219  000018                     drawFastVLine@y:
  2220                           	opt stack 0
  2221  000018                     fillRectangle@y:
  2222                           	opt stack 0
  2223  000018                     DS1621_Read_Temp@Device:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x17
  2227  000018                     	ds	1
  2228  000019                     ?___awtoft:
  2229                           	opt stack 0
  2230  000019                     ?___lbtoft:
  2231                           	opt stack 0
  2232  000019                     ?___lltoft:
  2233                           	opt stack 0
  2234  000019                     drawFastVLine@h:
  2235                           	opt stack 0
  2236  000019                     fillRectangle@w:
  2237                           	opt stack 0
  2238  000019                     get_duty_cycle@dc:
  2239                           	opt stack 0
  2240  000019                     delay_ms@count:
  2241                           	opt stack 0
  2242  000019                     drawPixel@color:
  2243                           	opt stack 0
  2244  000019                     ___awdiv@divisor:
  2245                           	opt stack 0
  2246  000019                     ___awtoft@c:
  2247                           	opt stack 0
  2248  000019                     ___lldiv@quotient:
  2249                           	opt stack 0
  2250  000019                     ___lltoft@c:
  2251                           	opt stack 0
  2252                           
  2253                           ; 4 bytes @ 0x18
  2254  000019                     	ds	1
  2255  00001A                     fillRectangle@h:
  2256                           	opt stack 0
  2257  00001A                     drawFastVLine@color:
  2258                           	opt stack 0
  2259  00001A                     __tdiv_to_l_@quot:
  2260                           	opt stack 0
  2261                           
  2262                           ; 4 bytes @ 0x19
  2263  00001A                     	ds	1
  2264  00001B                     drawPixel@x:
  2265                           	opt stack 0
  2266  00001B                     ___awdiv@counter:
  2267                           	opt stack 0
  2268  00001B                     __div_to_l_@cntr:
  2269                           	opt stack 0
  2270  00001B                     fillRectangle@color:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x1A
  2274  00001B                     	ds	1
  2275  00001C                     ??_drawFastVLine:
  2276  00001C                     ___awdiv@sign:
  2277                           	opt stack 0
  2278  00001C                     ___awtoft@sign:
  2279                           	opt stack 0
  2280  00001C                     __div_to_l_@exp1:
  2281                           	opt stack 0
  2282  00001C                     ___lbtoft@c:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x1B
  2286  00001C                     	ds	1
  2287  00001D                     ??_fillRectangle:
  2288  00001D                     ??___lltoft:
  2289  00001D                     ___lldiv@counter:
  2290                           	opt stack 0
  2291  00001D                     ___awdiv@quotient:
  2292                           	opt stack 0
  2293                           
  2294                           ; 2 bytes @ 0x1C
  2295  00001D                     	ds	1
  2296  00001E                     ?___llmod:
  2297                           	opt stack 0
  2298  00001E                     __tdiv_to_l_@cntr:
  2299                           	opt stack 0
  2300  00001E                     ___llmod@dividend:
  2301                           	opt stack 0
  2302                           
  2303                           ; 4 bytes @ 0x1D
  2304  00001E                     	ds	1
  2305  00001F                     ??_Set_D1_RGB:
  2306  00001F                     ?_get_RPM:
  2307                           	opt stack 0
  2308  00001F                     ?___ftmul:
  2309                           	opt stack 0
  2310  00001F                     __tdiv_to_l_@exp1:
  2311                           	opt stack 0
  2312  00001F                     Set_D2_RGB@rpm:
  2313                           	opt stack 0
  2314  00001F                     ___ftmul@f1:
  2315                           	opt stack 0
  2316                           
  2317                           ; 3 bytes @ 0x1E
  2318  00001F                     	ds	1
  2319  000020                     drawFastVLine@hi:
  2320                           	opt stack 0
  2321  000020                     Set_D1_RGB@duty_cycle:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x1F
  2325  000020                     	ds	1
  2326  000021                     drawFastVLine@lo:
  2327                           	opt stack 0
  2328  000021                     fillRectangle@hi:
  2329                           	opt stack 0
  2330  000021                     ___lltoft@exp:
  2331                           	opt stack 0
  2332  000021                     get_RPM@RPS:
  2333                           	opt stack 0
  2334  000021                     Set_D1_RGB@range:
  2335                           	opt stack 0
  2336  000021                     Set_D2_RGB@range:
  2337                           	opt stack 0
  2338                           
  2339                           ; 2 bytes @ 0x20
  2340  000021                     	ds	1
  2341  000022                     drawFastVLine@x:
  2342                           	opt stack 0
  2343  000022                     fillRectangle@lo:
  2344                           	opt stack 0
  2345  000022                     ___ftmul@f2:
  2346                           	opt stack 0
  2347  000022                     ___llmod@divisor:
  2348                           	opt stack 0
  2349                           
  2350                           ; 4 bytes @ 0x21
  2351  000022                     	ds	1
  2352  000023                     fillRect@y:
  2353                           	opt stack 0
  2354  000023                     fillRectangle@x:
  2355                           	opt stack 0
  2356                           
  2357                           ; 1 bytes @ 0x22
  2358  000023                     	ds	1
  2359  000024                     fillRect@w:
  2360                           	opt stack 0
  2361  000024                     fillScreen@color:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x23
  2365  000024                     	ds	1
  2366  000025                     ??___ftmul:
  2367  000025                     fillRect@h:
  2368                           	opt stack 0
  2369                           
  2370                           ; 1 bytes @ 0x24
  2371  000025                     	ds	1
  2372  000026                     ___llmod@counter:
  2373                           	opt stack 0
  2374  000026                     fillRect@color:
  2375                           	opt stack 0
  2376                           
  2377                           ; 2 bytes @ 0x25
  2378  000026                     	ds	2
  2379  000028                     ??_fillRect:
  2380  000028                     ___ftmul@exp:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x27
  2384  000028                     	ds	1
  2385  000029                     ___ftmul@f3_as_product:
  2386                           	opt stack 0
  2387                           
  2388                           ; 3 bytes @ 0x28
  2389  000029                     	ds	2
  2390  00002B                     fillRect@x:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x2A
  2394  00002B                     	ds	1
  2395  00002C                     ___ftmul@cntr:
  2396                           	opt stack 0
  2397  00002C                     fillRect@i:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x2B
  2401  00002C                     	ds	1
  2402  00002D                     ___ftmul@sign:
  2403                           	opt stack 0
  2404                           
  2405                           ; 1 bytes @ 0x2C
  2406  00002D                     	ds	1
  2407  00002E                     ?___ftdiv:
  2408                           	opt stack 0
  2409  00002E                     ?___fttol:
  2410                           	opt stack 0
  2411  00002E                     drawChar@y:
  2412                           	opt stack 0
  2413  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2414                           	opt stack 0
  2415  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2416                           	opt stack 0
  2417  00002E                     ___ftdiv@f1:
  2418                           	opt stack 0
  2419  00002E                     ___fttol@f1:
  2420                           	opt stack 0
  2421                           
  2422                           ; 3 bytes @ 0x2D
  2423  00002E                     	ds	1
  2424  00002F                     drawChar@c:
  2425                           	opt stack 0
  2426  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2427                           	opt stack 0
  2428  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0x2E
  2432  00002F                     	ds	1
  2433  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2434                           	opt stack 0
  2435  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2436                           	opt stack 0
  2437  000030                     drawChar@color:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x2F
  2441  000030                     	ds	1
  2442  000031                     ___ftdiv@f2:
  2443                           	opt stack 0
  2444                           
  2445                           ; 3 bytes @ 0x30
  2446  000031                     	ds	1
  2447  000032                     ??___fttol:
  2448  000032                     drawChar@bg:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x31
  2452  000032                     	ds	2
  2453  000034                     ??___ftdiv:
  2454  000034                     drawChar@size:
  2455                           	opt stack 0
  2456                           
  2457                           ; 1 bytes @ 0x33
  2458  000034                     	ds	1
  2459  000035                     drawChar@line:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0x34
  2463  000035                     	ds	1
  2464  000036                     drawChar@x:
  2465                           	opt stack 0
  2466                           
  2467                           ; 1 bytes @ 0x35
  2468  000036                     	ds	1
  2469  000037                     drawChar@j:
  2470                           	opt stack 0
  2471  000037                     ___ftdiv@cntr:
  2472                           	opt stack 0
  2473  000037                     ___fttol@sign1:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x36
  2477  000037                     	ds	1
  2478  000038                     drawChar@i:
  2479                           	opt stack 0
  2480  000038                     ___ftdiv@f3:
  2481                           	opt stack 0
  2482  000038                     ___fttol@lval:
  2483                           	opt stack 0
  2484                           
  2485                           ; 4 bytes @ 0x37
  2486  000038                     	ds	1
  2487  000039                     drawtext@y:
  2488                           	opt stack 0
  2489                           
  2490                           ; 1 bytes @ 0x38
  2491  000039                     	ds	1
  2492  00003A                     drawtext@_text:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x39
  2496  00003A                     	ds	1
  2497  00003B                     ___ftdiv@exp:
  2498                           	opt stack 0
  2499                           
  2500                           ; 1 bytes @ 0x3A
  2501  00003B                     	ds	1
  2502  00003C                     ___ftdiv@sign:
  2503                           	opt stack 0
  2504  00003C                     ___fttol@exp1:
  2505                           	opt stack 0
  2506  00003C                     drawtext@color:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x3B
  2510  00003C                     	ds	1
  2511  00003D                     ??_do_update_pwm:
  2512  00003D                     ?___awmod:
  2513                           	opt stack 0
  2514  00003D                     ?_Read_Volt:
  2515                           	opt stack 0
  2516  00003D                     ___awmod@dividend:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x3C
  2520  00003D                     	ds	1
  2521  00003E                     drawtext@bg:
  2522                           	opt stack 0
  2523                           
  2524                           ; 2 bytes @ 0x3D
  2525  00003E                     	ds	1
  2526  00003F                     ___awmod@divisor:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x3E
  2530  00003F                     	ds	1
  2531  000040                     drawtext@size:
  2532                           	opt stack 0
  2533  000040                     do_update_pwm@dc_f:
  2534                           	opt stack 0
  2535  000040                     Read_Volt@volt:
  2536                           	opt stack 0
  2537                           
  2538                           ; 3 bytes @ 0x3F
  2539  000040                     	ds	1
  2540  000041                     ??_drawtext:
  2541  000041                     ___awmod@counter:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x40
  2545  000041                     	ds	1
  2546  000042                     ___awmod@sign:
  2547                           	opt stack 0
  2548                           
  2549                           ; 1 bytes @ 0x41
  2550  000042                     	ds	1
  2551  000043                     ?_dec_2_bcd:
  2552                           	opt stack 0
  2553  000043                     ?_fround:
  2554                           	opt stack 0
  2555  000043                     ?_scale:
  2556                           	opt stack 0
  2557  000043                     drawtext@x:
  2558                           	opt stack 0
  2559  000043                     do_update_pwm@duty_cycle:
  2560                           	opt stack 0
  2561  000043                     Read_Volt@ADC_Channel:
  2562                           	opt stack 0
  2563                           
  2564                           ; 1 bytes @ 0x42
  2565  000043                     	ds	1
  2566  000044                     drawtext@textsize:
  2567                           	opt stack 0
  2568  000044                     do_update_pwm@dc_I:
  2569                           	opt stack 0
  2570  000044                     Read_Volt@nStep:
  2571                           	opt stack 0
  2572                           
  2573                           ; 2 bytes @ 0x43
  2574  000044                     	ds	1
  2575  000045                     ??_dec_2_bcd:
  2576                           
  2577                           ; 0 bytes @ 0x44
  2578  000045                     	ds	1
  2579  000046                     drawtext@i:
  2580                           	opt stack 0
  2581  000046                     _fround$2976:
  2582                           	opt stack 0
  2583  000046                     _scale$2977:
  2584                           	opt stack 0
  2585                           
  2586                           ; 3 bytes @ 0x45
  2587  000046                     	ds	1
  2588  000047                     dec_2_bcd@bcd:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x46
  2592  000047                     	ds	1
  2593  000048                     drawtext@cursor_y:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x47
  2597  000048                     	ds	1
  2598  000049                     drawtext@cursor_x:
  2599                           	opt stack 0
  2600  000049                     dec_2_bcd@dec:
  2601                           	opt stack 0
  2602  000049                     scale@scl:
  2603                           	opt stack 0
  2604  000049                     _fround$2975:
  2605                           	opt stack 0
  2606                           
  2607                           ; 3 bytes @ 0x48
  2608  000049                     	ds	1
  2609  00004A                     ??_Update_Screen:
  2610  00004A                     DS3231_Write_Time@Device:
  2611                           	opt stack 0
  2612  00004A                     Update_Setup_Fan_Screen@dc_char1:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x49
  2616  00004A                     	ds	1
  2617  00004B                     DS3231_Write_Time@Address:
  2618                           	opt stack 0
  2619  00004B                     Update_Setup_Fan_Screen@dc_char2:
  2620                           	opt stack 0
  2621                           
  2622                           ; 1 bytes @ 0x4A
  2623  00004B                     	ds	1
  2624  00004C                     Update_Setup_Fan_Screen@dc_char3:
  2625                           	opt stack 0
  2626  00004C                     fround@prec:
  2627                           	opt stack 0
  2628  00004C                     Update_Screen@neg_tempC:
  2629                           	opt stack 0
  2630                           
  2631                           ; 2 bytes @ 0x4B
  2632  00004C                     	ds	1
  2633  00004D                     ?___ftadd:
  2634                           	opt stack 0
  2635  00004D                     ___ftadd@f1:
  2636                           	opt stack 0
  2637                           
  2638                           ; 3 bytes @ 0x4C
  2639  00004D                     	ds	1
  2640  00004E                     Update_Screen@neg_tempF:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0x4D
  2644  00004E                     	ds	2
  2645  000050                     ___ftadd@f2:
  2646                           	opt stack 0
  2647                           
  2648                           ; 3 bytes @ 0x4F
  2649  000050                     	ds	3
  2650  000053                     ??___ftadd:
  2651                           
  2652                           ; 0 bytes @ 0x52
  2653  000053                     	ds	3
  2654  000056                     ___ftadd@sign:
  2655                           	opt stack 0
  2656                           
  2657                           ; 1 bytes @ 0x55
  2658  000056                     	ds	1
  2659  000057                     ___ftadd@exp2:
  2660                           	opt stack 0
  2661                           
  2662                           ; 1 bytes @ 0x56
  2663  000057                     	ds	1
  2664  000058                     ___ftadd@exp1:
  2665                           	opt stack 0
  2666                           
  2667                           ; 1 bytes @ 0x57
  2668  000058                     	ds	1
  2669  000059                     
  2670                           ; 0 bytes @ 0x58
  2671  000059                     	ds	1
  2672  00005A                     tblptru	equ	0xFF8
  2673                           tblptrh	equ	0xFF7
  2674                           tblptrl	equ	0xFF6
  2675                           tablat	equ	0xFF5
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postdec1	equ	0xFE5
  2679                           fsr1l	equ	0xFE1
  2680                           
  2681                           ; 0 bytes @ 0x59
  2682 ;;
  2683 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2684 ;;
  2685 ;; *************** function _main *****************
  2686 ;; Defined at:
  2687 ;;		line 113 in file "Main.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;		None
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;		None
  2692 ;; Return value:  Size  Location     Type
  2693 ;;		None               void
  2694 ;; Registers used:
  2695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;Total ram usage:        0 bytes
  2706 ;; Hardware stack levels required when called:   13
  2707 ;; This function calls:
  2708 ;;		_DS1621_Read_Temp
  2709 ;;		_DS3231_Read_Time
  2710 ;;		_Decrease_Duty_Cycle
  2711 ;;		_Do_Beep_Bad
  2712 ;;		_Do_Beep_Good
  2713 ;;		_Do_Change_Fan_Timer_Mode_Minus
  2714 ;;		_Do_Change_Fan_Timer_Mode_Plus
  2715 ;;		_Do_Init
  2716 ;;		_Do_Setup_Time
  2717 ;;		_Increase_Duty_Cycle
  2718 ;;		_Initialize_Screen
  2719 ;;		_Monitor_Fan
  2720 ;;		_Read_Volt
  2721 ;;		_Set_D1_RGB
  2722 ;;		_Set_D2_RGB
  2723 ;;		_Setup_Fan_Temp
  2724 ;;		_Toggle_Fan
  2725 ;;		_Turn_Off_Fan
  2726 ;;		_Update_Screen
  2727 ;;		___awdiv
  2728 ;;		___ftge
  2729 ;;		___wmul
  2730 ;;		_check_for_button_input
  2731 ;;		_get_RPM
  2732 ;;		_printf
  2733 ;; This function is called by:
  2734 ;;		Startup code after reset
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text0
  2739  001ACA                     __ptext0:
  2740                           	opt stack 0
  2741  001ACA                     _main:
  2742                           	opt stack 18
  2743                           
  2744                           ;Main.c: 115: Do_Init();
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;incstack = 0
  2748  001ACA  ECDE  F021         	call	_Do_Init	;wreg free
  2749                           
  2750                           ;Main.c: 117: Initialize_Screen();
  2751  001ACE  EC95  F00B         	call	_Initialize_Screen	;wreg free
  2752                           
  2753                           ;Main.c: 119: TMR3L = 0x00;
  2754  001AD2  0E00               	movlw	0
  2755  001AD4  6EB2               	movwf	4018,c	;volatile
  2756                           
  2757                           ;Main.c: 120: T3CON = 0x03;
  2758  001AD6  0E03               	movlw	3
  2759  001AD8  6EB1               	movwf	4017,c	;volatile
  2760                           
  2761                           ;Main.c: 123: tempSecond = 0xff;
  2762  001ADA  0100               	movlb	0	; () banked
  2763  001ADC  69DD               	setf	_tempSecond& (0+255),b
  2764  001ADE  D000               	goto	l10440
  2765  001AE0                     l10440:
  2766                           
  2767                           ;Main.c: 126: {
  2768                           ;Main.c: 127: DS3231_Read_Time();
  2769  001AE0  EC4A  F021         	call	_DS3231_Read_Time	;wreg free
  2770                           
  2771                           ;Main.c: 129: if(tempSecond != second)
  2772  001AE4  5068               	movf	_second,w,c
  2773  001AE6  0100               	movlb	0	; () banked
  2774  001AE8  19DD               	xorwf	_tempSecond& (0+255),w,b
  2775  001AEA  B4D8               	btfsc	status,2,c
  2776  001AEC  D0A5               	goto	l10472
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;Main.c: 130: {
  2780                           ;Main.c: 131: tempSecond = second;
  2781  001AEE  C068  F0DD         	movff	_second,_tempSecond
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;Main.c: 132: rpm = get_RPM();
  2785  001AF2  EC48  F023         	call	_get_RPM	;wreg free
  2786  001AF6  C01F  F05C         	movff	?_get_RPM,_rpm
  2787  001AFA  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  2788                           
  2789                           ;Main.c: 135: volt = Read_Volt(1);
  2790  001AFE  0E01               	movlw	1
  2791  001B00  EC13  F021         	call	_Read_Volt
  2792  001B04  C03D  F0B8         	movff	?_Read_Volt,_volt
  2793  001B08  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  2794  001B0C  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  2795                           
  2796                           ;Main.c: 136: if (volt > 3.000) light_flag = 1;
  2797  001B10  0E00               	movlw	0
  2798  001B12  6E11               	movwf	___ftge@ff1,c
  2799  001B14  0E40               	movlw	64
  2800  001B16  6E12               	movwf	___ftge@ff1+1,c
  2801  001B18  0E40               	movlw	64
  2802  001B1A  6E13               	movwf	___ftge@ff1+2,c
  2803  001B1C  C0B8  F014         	movff	_volt,___ftge@ff2
  2804  001B20  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  2805  001B24  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  2806  001B28  EC7C  F01E         	call	___ftge	;wreg free
  2807  001B2C  B0D8               	btfsc	status,0,c
  2808  001B2E  D004               	goto	l10452
  2809  001B30  0E01               	movlw	1
  2810  001B32  0100               	movlb	0	; () banked
  2811  001B34  6FD1               	movwf	_light_flag& (0+255),b
  2812  001B36  D000               	goto	l10452
  2813  001B38                     l10452:
  2814                           
  2815                           ;Main.c: 137: tempC = DS1621_Read_Temp();
  2816  001B38  EC01  F024         	call	_DS1621_Read_Temp	;wreg free
  2817  001B3C  5014               	movf	?_DS1621_Read_Temp,w,c
  2818  001B3E  6E69               	movwf	_tempC,c
  2819                           
  2820                           ;Main.c: 138: tempF = (tempC * 9 / 5) + 32;
  2821  001B40  5069               	movf	_tempC,w,c
  2822  001B42  6E11               	movwf	___wmul@multiplier,c
  2823  001B44  6A12               	clrf	___wmul@multiplier+1,c
  2824  001B46  BE11               	btfsc	___wmul@multiplier,7,c
  2825  001B48  0612               	decf	___wmul@multiplier+1,f,c
  2826  001B4A  0E00               	movlw	0
  2827  001B4C  6E14               	movwf	___wmul@multiplicand+1,c
  2828  001B4E  0E09               	movlw	9
  2829  001B50  6E13               	movwf	___wmul@multiplicand,c
  2830  001B52  ECD5  F024         	call	___wmul	;wreg free
  2831  001B56  C011  F017         	movff	?___wmul,___awdiv@dividend
  2832  001B5A  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2833  001B5E  0E00               	movlw	0
  2834  001B60  6E1A               	movwf	___awdiv@divisor+1,c
  2835  001B62  0E05               	movlw	5
  2836  001B64  6E19               	movwf	___awdiv@divisor,c
  2837  001B66  EC31  F01E         	call	___awdiv	;wreg free
  2838  001B6A  5017               	movf	?___awdiv,w,c
  2839  001B6C  0F20               	addlw	32
  2840  001B6E  6E6A               	movwf	_tempF,c
  2841                           
  2842                           ;Main.c: 139: Set_D1_RGB(duty_cycle);
  2843  001B70  5064               	movf	_duty_cycle,w,c
  2844  001B72  ECDA  F022         	call	_Set_D1_RGB
  2845                           
  2846                           ;Main.c: 140: Set_D2_RGB(rpm);
  2847  001B76  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  2848  001B7A  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  2849  001B7E  EC63  F022         	call	_Set_D2_RGB	;wreg free
  2850                           
  2851                           ;Main.c: 142: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2852  001B82  0E75               	movlw	low STR_4
  2853  001B84  0100               	movlb	0	; () banked
  2854  001B86  6F86               	movwf	printf@f& (0+255),b
  2855  001B88  0EFE               	movlw	high STR_4
  2856  001B8A  0100               	movlb	0	; () banked
  2857  001B8C  6F87               	movwf	(printf@f+1)& (0+255),b
  2858  001B8E  C065  F088         	movff	_hour,?_printf+2
  2859  001B92  0100               	movlb	0	; () banked
  2860  001B94  6B89               	clrf	(?_printf+3)& (0+255),b
  2861  001B96  C066  F08A         	movff	_minute,?_printf+4
  2862  001B9A  0100               	movlb	0	; () banked
  2863  001B9C  6B8B               	clrf	(?_printf+5)& (0+255),b
  2864  001B9E  C068  F08C         	movff	_second,?_printf+6
  2865  001BA2  0100               	movlb	0	; () banked
  2866  001BA4  6B8D               	clrf	(?_printf+7)& (0+255),b
  2867  001BA6  C067  F08E         	movff	_month,?_printf+8
  2868  001BAA  0100               	movlb	0	; () banked
  2869  001BAC  6B8F               	clrf	(?_printf+9)& (0+255),b
  2870  001BAE  C063  F090         	movff	_day,?_printf+10
  2871  001BB2  0100               	movlb	0	; () banked
  2872  001BB4  6B91               	clrf	(?_printf+11)& (0+255),b
  2873  001BB6  C06B  F092         	movff	_year,?_printf+12
  2874  001BBA  0100               	movlb	0	; () banked
  2875  001BBC  6B93               	clrf	(?_printf+13)& (0+255),b
  2876  001BBE  EC0E  F000         	call	_printf	;wreg free
  2877                           
  2878                           ;Main.c: 143: printf (" Temp = %d C = %d F ", tempC, tempF);
  2879  001BC2  0EF7               	movlw	low STR_5
  2880  001BC4  0100               	movlb	0	; () banked
  2881  001BC6  6F86               	movwf	printf@f& (0+255),b
  2882  001BC8  0EFE               	movlw	high STR_5
  2883  001BCA  0100               	movlb	0	; () banked
  2884  001BCC  6F87               	movwf	(printf@f+1)& (0+255),b
  2885  001BCE  5069               	movf	_tempC,w,c
  2886  001BD0  0100               	movlb	0	; () banked
  2887  001BD2  6F88               	movwf	(?_printf+2)& (0+255),b
  2888  001BD4  6B89               	clrf	(?_printf+3)& (0+255),b
  2889  001BD6  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  2890  001BD8  0789               	decf	(?_printf+3)& (0+255),f,b
  2891  001BDA  506A               	movf	_tempF,w,c
  2892  001BDC  0100               	movlb	0	; () banked
  2893  001BDE  6F8A               	movwf	(?_printf+4)& (0+255),b
  2894  001BE0  6B8B               	clrf	(?_printf+5)& (0+255),b
  2895  001BE2  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  2896  001BE4  078B               	decf	(?_printf+5)& (0+255),f,b
  2897  001BE6  EC0E  F000         	call	_printf	;wreg free
  2898                           
  2899                           ;Main.c: 144: printf ("Light Sensor = %f V", volt);
  2900  001BEA  0E20               	movlw	low STR_6
  2901  001BEC  0100               	movlb	0	; () banked
  2902  001BEE  6F86               	movwf	printf@f& (0+255),b
  2903  001BF0  0EFF               	movlw	high STR_6
  2904  001BF2  0100               	movlb	0	; () banked
  2905  001BF4  6F87               	movwf	(printf@f+1)& (0+255),b
  2906  001BF6  C0B8  F088         	movff	_volt,?_printf+2
  2907  001BFA  C0B9  F089         	movff	_volt+1,?_printf+3
  2908  001BFE  C0BA  F08A         	movff	_volt+2,?_printf+4
  2909  001C02  EC0E  F000         	call	_printf	;wreg free
  2910                           
  2911                           ;Main.c: 145: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_flag);
  2912  001C06  0E93               	movlw	low STR_7
  2913  001C08  0100               	movlb	0	; () banked
  2914  001C0A  6F86               	movwf	printf@f& (0+255),b
  2915  001C0C  0EFE               	movlw	high STR_7
  2916  001C0E  0100               	movlb	0	; () banked
  2917  001C10  6F87               	movwf	(printf@f+1)& (0+255),b
  2918  001C12  C05C  F088         	movff	_rpm,?_printf+2
  2919  001C16  C05D  F089         	movff	_rpm+1,?_printf+3
  2920  001C1A  C064  F08A         	movff	_duty_cycle,?_printf+4
  2921  001C1E  0100               	movlb	0	; () banked
  2922  001C20  6B8B               	clrf	(?_printf+5)& (0+255),b
  2923  001C22  C0D1  F08C         	movff	_light_flag,?_printf+6
  2924  001C26  0100               	movlb	0	; () banked
  2925  001C28  6B8D               	clrf	(?_printf+7)& (0+255),b
  2926  001C2A  EC0E  F000         	call	_printf	;wreg free
  2927                           
  2928                           ;Main.c: 147: Monitor_Fan();
  2929  001C2E  ECB4  F022         	call	_Monitor_Fan	;wreg free
  2930                           
  2931                           ;Main.c: 149: Update_Screen();
  2932  001C32  EC30  F006         	call	_Update_Screen	;wreg free
  2933  001C36  D000               	goto	l10472
  2934  001C38                     l10472:
  2935                           
  2936                           ;Main.c: 150: }
  2937                           ;Main.c: 158: if (check_for_button_input()==1 && SYSTEM_ON == 1)
  2938  001C38  EC3A  F01D         	call	_check_for_button_input	;wreg free
  2939  001C3C  06E8               	decf	wreg,f,c
  2940  001C3E  A4D8               	btfss	status,2,c
  2941  001C40  D063               	goto	l10516
  2942  001C42  0462               	decf	_SYSTEM_ON,w,c
  2943  001C44  A4D8               	btfss	status,2,c
  2944  001C46  D060               	goto	l10516
  2945                           
  2946                           ;Main.c: 159: {
  2947                           ;Main.c: 161: printf("Key Location = %d \r\n\n", found);
  2948  001C48  0ECB               	movlw	low STR_8
  2949  001C4A  0100               	movlb	0	; () banked
  2950  001C4C  6F86               	movwf	printf@f& (0+255),b
  2951  001C4E  0EFE               	movlw	high STR_8
  2952  001C50  0100               	movlb	0	; () banked
  2953  001C52  6F87               	movwf	(printf@f+1)& (0+255),b
  2954  001C54  C0D0  F088         	movff	_found,?_printf+2
  2955  001C58  0100               	movlb	0	; () banked
  2956  001C5A  6B89               	clrf	(?_printf+3)& (0+255),b
  2957  001C5C  EC0E  F000         	call	_printf	;wreg free
  2958                           
  2959                           ;Main.c: 163: Nec_ok = 0;
  2960  001C60  0E00               	movlw	0
  2961  001C62  0100               	movlb	0	; () banked
  2962  001C64  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  2963  001C66  0E00               	movlw	0
  2964  001C68  6FBB               	movwf	_Nec_ok& (0+255),b
  2965                           
  2966                           ;Main.c: 165: switch(found)
  2967  001C6A  D032               	goto	l10514
  2968  001C6C                     l10480:
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;Main.c: 169: Do_Beep_Good();
  2972  001C6C  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  2973                           
  2974                           ;Main.c: 170: Do_Setup_Time();
  2975  001C70  ECE5  F00F         	call	_Do_Setup_Time	;wreg free
  2976                           
  2977                           ;Main.c: 171: break;
  2978  001C74  D049               	goto	l10516
  2979  001C76                     l10484:
  2980                           
  2981                           ;Main.c: 174: Do_Beep_Good();
  2982  001C76  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  2983                           
  2984                           ;Main.c: 175: Setup_Fan_Temp();
  2985  001C7A  EC04  F011         	call	_Setup_Fan_Temp	;wreg free
  2986                           
  2987                           ;Main.c: 176: break;
  2988  001C7E  D044               	goto	l10516
  2989  001C80                     l10488:
  2990                           
  2991                           ;Main.c: 179: Do_Beep_Good();
  2992  001C80  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  2993                           
  2994                           ;Main.c: 180: Do_Change_Fan_Timer_Mode_Minus();
  2995  001C84  EC94  F024         	call	_Do_Change_Fan_Timer_Mode_Minus	;wreg free
  2996                           
  2997                           ;Main.c: 181: break;
  2998  001C88  D03F               	goto	l10516
  2999  001C8A                     l10492:
  3000                           
  3001                           ;Main.c: 184: Do_Beep_Good();
  3002  001C8A  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  3003                           
  3004                           ;Main.c: 185: Do_Change_Fan_Timer_Mode_Plus();
  3005  001C8E  EC7E  F024         	call	_Do_Change_Fan_Timer_Mode_Plus	;wreg free
  3006                           
  3007                           ;Main.c: 186: break;
  3008  001C92  D03A               	goto	l10516
  3009  001C94                     l10496:
  3010                           
  3011                           ;Main.c: 189: Do_Beep_Good();
  3012  001C94  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  3013                           
  3014                           ;Main.c: 190: Toggle_Fan();
  3015  001C98  EC33  F026         	call	_Toggle_Fan	;wreg free
  3016                           
  3017                           ;Main.c: 191: break;
  3018  001C9C  D035               	goto	l10516
  3019  001C9E                     l10500:
  3020                           
  3021                           ;Main.c: 194: Do_Beep_Good();
  3022  001C9E  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  3023                           
  3024                           ;Main.c: 195: Decrease_Duty_Cycle();
  3025  001CA2  ECFC  F024         	call	_Decrease_Duty_Cycle	;wreg free
  3026                           
  3027                           ;Main.c: 196: break;
  3028  001CA6  D030               	goto	l10516
  3029  001CA8                     l10502:
  3030                           
  3031                           ;Main.c: 199: Do_Beep_Good();
  3032  001CA8  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  3033                           
  3034                           ;Main.c: 200: Increase_Duty_Cycle();
  3035  001CAC  EC38  F024         	call	_Increase_Duty_Cycle	;wreg free
  3036                           
  3037                           ;Main.c: 201: break;
  3038  001CB0  D02B               	goto	l10516
  3039  001CB2                     l10504:
  3040                           
  3041                           ;Main.c: 204: Do_Beep_Good();
  3042  001CB2  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  3043                           
  3044                           ;Main.c: 205: if (FANMODE == 1)
  3045  001CB6  0100               	movlb	0	; () banked
  3046  001CB8  05C2               	decf	_FANMODE& (0+255),w,b
  3047  001CBA  A4D8               	btfss	status,2,c
  3048  001CBC  D002               	goto	l10510
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;Main.c: 206: FANMODE = 0;
  3052  001CBE  0E00               	movlw	0
  3053  001CC0  D001               	goto	L1
  3054  001CC2                     l10510:
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Main.c: 207: else
  3058                           ;Main.c: 208: FANMODE = 1;
  3059  001CC2  0E01               	movlw	1
  3060  001CC4                     L1:
  3061  001CC4  0100               	movlb	0	; () banked
  3062  001CC6  6FC2               	movwf	_FANMODE& (0+255),b
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;Main.c: 209: break;
  3066  001CC8  D01F               	goto	l10516
  3067  001CCA                     l10512:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;Main.c: 212: Do_Beep_Bad();
  3071  001CCA  ECE2  F025         	call	_Do_Beep_Bad	;wreg free
  3072                           
  3073                           ;Main.c: 213: }
  3074  001CCE  D01C               	goto	l10516
  3075  001CD0                     l10514:
  3076  001CD0  0100               	movlb	0	; () banked
  3077  001CD2  51D0               	movf	_found& (0+255),w,b
  3078                           
  3079                           ; Switch size 1, requested type "space"
  3080                           ; Number of cases is 8, Range of values is 0 to 8
  3081                           ; switch strategies available:
  3082                           ; Name         Instructions Cycles
  3083                           ; simple_byte           25    13 (average)
  3084                           ;	Chosen strategy is simple_byte
  3085  001CD4  0A00               	xorlw	0	; case 0
  3086  001CD6  B4D8               	btfsc	status,2,c
  3087  001CD8  D7C9               	goto	l10480
  3088  001CDA  0A01               	xorlw	1	; case 1
  3089  001CDC  B4D8               	btfsc	status,2,c
  3090  001CDE  D7CB               	goto	l10484
  3091  001CE0  0A02               	xorlw	2	; case 3
  3092  001CE2  B4D8               	btfsc	status,2,c
  3093  001CE4  D7CD               	goto	l10488
  3094  001CE6  0A07               	xorlw	7	; case 4
  3095  001CE8  B4D8               	btfsc	status,2,c
  3096  001CEA  D7CF               	goto	l10492
  3097  001CEC  0A01               	xorlw	1	; case 5
  3098  001CEE  B4D8               	btfsc	status,2,c
  3099  001CF0  D7D1               	goto	l10496
  3100  001CF2  0A03               	xorlw	3	; case 6
  3101  001CF4  B4D8               	btfsc	status,2,c
  3102  001CF6  D7D3               	goto	l10500
  3103  001CF8  0A01               	xorlw	1	; case 7
  3104  001CFA  B4D8               	btfsc	status,2,c
  3105  001CFC  D7D5               	goto	l10502
  3106  001CFE  0A0F               	xorlw	15	; case 8
  3107  001D00  B4D8               	btfsc	status,2,c
  3108  001D02  D7D7               	goto	l10504
  3109  001D04  D7E2               	goto	l10512
  3110                           
  3111                           ; BSR set to: 0
  3112  001D06  D000               	goto	l10516
  3113  001D08                     l10516:
  3114                           
  3115                           ;Main.c: 214: }
  3116                           ;Main.c: 222: if (INT0_flag == 1 || light_flag == 1)
  3117  001D08  0100               	movlb	0	; () banked
  3118  001D0A  05C4               	decf	_INT0_flag& (0+255),w,b
  3119  001D0C  B4D8               	btfsc	status,2,c
  3120  001D0E  D004               	goto	l10520
  3121                           
  3122                           ; BSR set to: 0
  3123  001D10  0100               	movlb	0	; () banked
  3124  001D12  05D1               	decf	_light_flag& (0+255),w,b
  3125  001D14  A4D8               	btfss	status,2,c
  3126  001D16  D6E4               	goto	l10440
  3127  001D18                     l10520:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;Main.c: 223: {
  3131                           ;Main.c: 224: INT0_flag = 0;
  3132  001D18  0E00               	movlw	0
  3133  001D1A  0100               	movlb	0	; () banked
  3134  001D1C  6FC4               	movwf	_INT0_flag& (0+255),b
  3135                           
  3136                           ;Main.c: 225: light_flag = 0;
  3137  001D1E  0E00               	movlw	0
  3138  001D20  0100               	movlb	0	; () banked
  3139  001D22  6FD1               	movwf	_light_flag& (0+255),b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;Main.c: 227: if (SYSTEM_ON == 1)
  3143  001D24  0462               	decf	_SYSTEM_ON,w,c
  3144  001D26  A4D8               	btfss	status,2,c
  3145  001D28  D01C               	goto	l10534
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;Main.c: 228: {
  3149                           ;Main.c: 229: printf ("The system will now turn off. \r\n\n");
  3150  001D2A  0E32               	movlw	low STR_9
  3151  001D2C  0100               	movlb	0	; () banked
  3152  001D2E  6F86               	movwf	printf@f& (0+255),b
  3153  001D30  0EFE               	movlw	high STR_9
  3154  001D32  0100               	movlb	0	; () banked
  3155  001D34  6F87               	movwf	(printf@f+1)& (0+255),b
  3156  001D36  EC0E  F000         	call	_printf	;wreg free
  3157                           
  3158                           ;Main.c: 230: SYSTEM_ON = 0;
  3159  001D3A  0E00               	movlw	0
  3160  001D3C  6E62               	movwf	_SYSTEM_ON,c
  3161                           
  3162                           ;Main.c: 231: Turn_Off_Fan();
  3163  001D3E  ECC6  F025         	call	_Turn_Off_Fan	;wreg free
  3164                           
  3165                           ;Main.c: 232: FAN_TIMER_MODE = 0;
  3166  001D42  0E00               	movlw	0
  3167  001D44  6E60               	movwf	_FAN_TIMER_MODE,c
  3168                           
  3169                           ;Main.c: 233: FAN_TIMER_TIME = 0;
  3170  001D46  0E00               	movlw	0
  3171  001D48  0100               	movlb	0	; () banked
  3172  001D4A  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;Main.c: 234: printf ("The system is now OFF. \r\n\n");
  3176  001D4C  0EB0               	movlw	low STR_10
  3177  001D4E  0100               	movlb	0	; () banked
  3178  001D50  6F86               	movwf	printf@f& (0+255),b
  3179  001D52  0EFE               	movlw	high STR_10
  3180  001D54  0100               	movlb	0	; () banked
  3181  001D56  6F87               	movwf	(printf@f+1)& (0+255),b
  3182  001D58  EC0E  F000         	call	_printf	;wreg free
  3183                           
  3184                           ;Main.c: 235: Initialize_Screen();
  3185  001D5C  EC95  F00B         	call	_Initialize_Screen	;wreg free
  3186                           
  3187                           ;Main.c: 236: }
  3188  001D60  D6BF               	goto	l10440
  3189  001D62                     l10534:
  3190                           
  3191                           ;Main.c: 237: else if (SYSTEM_ON == 0)
  3192  001D62  5062               	movf	_SYSTEM_ON,w,c
  3193  001D64  A4D8               	btfss	status,2,c
  3194  001D66  D6BC               	goto	l10440
  3195                           
  3196                           ;Main.c: 238: {
  3197                           ;Main.c: 239: printf ("The system will now turn on. \r\n\n");
  3198  001D68  0E54               	movlw	low STR_11
  3199  001D6A  0100               	movlb	0	; () banked
  3200  001D6C  6F86               	movwf	printf@f& (0+255),b
  3201  001D6E  0EFE               	movlw	high STR_11
  3202  001D70  0100               	movlb	0	; () banked
  3203  001D72  6F87               	movwf	(printf@f+1)& (0+255),b
  3204  001D74  EC0E  F000         	call	_printf	;wreg free
  3205                           
  3206                           ;Main.c: 240: SYSTEM_ON = 1;
  3207  001D78  0E01               	movlw	1
  3208  001D7A  6E62               	movwf	_SYSTEM_ON,c
  3209                           
  3210                           ;Main.c: 241: Initialize_Screen();
  3211  001D7C  EC95  F00B         	call	_Initialize_Screen	;wreg free
  3212  001D80  D6AF               	goto	l10440
  3213  001D82  EF0C  F000         	goto	start
  3214  001D86                     __end_of_main:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           postinc0	equ	0xFEE
  3221                           wreg	equ	0xFE8
  3222                           postdec1	equ	0xFE5
  3223                           fsr1l	equ	0xFE1
  3224                           status	equ	0xFD8
  3225                           
  3226 ;; *************** function _Update_Screen *****************
  3227 ;; Defined at:
  3228 ;;		line 100 in file "Main_Screen.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;		None
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  neg_tempF       2   77[COMRAM] int 
  3233 ;;  neg_tempC       2   75[COMRAM] int 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;		None               void
  3236 ;; Registers used:
  3237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;Total ram usage:        6 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:   10
  3250 ;; This function calls:
  3251 ;;		___awdiv
  3252 ;;		___awmod
  3253 ;;		___ftmul
  3254 ;;		___fttol
  3255 ;;		_drawtext
  3256 ;;		_strcpy
  3257 ;; This function is called by:
  3258 ;;		_main
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text1
  3263  000C60                     __ptext1:
  3264                           	opt stack 0
  3265  000C60                     _Update_Screen:
  3266                           	opt stack 20
  3267                           
  3268                           ;Main_Screen.c: 102: if (SYSTEM_ON == 1)
  3269                           
  3270                           ;incstack = 0
  3271  000C60  0462               	decf	_SYSTEM_ON,w,c
  3272  000C62  A4D8               	btfss	status,2,c
  3273  000C64  D371               	goto	l979
  3274                           
  3275                           ;Main_Screen.c: 103: {
  3276                           ;Main_Screen.c: 104: if ((tempC & 0x80) == 0x80)
  3277  000C66  C069  F04A         	movff	_tempC,??_Update_Screen
  3278  000C6A  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3279  000C6C  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3280  000C6E  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3281  000C70  AE4A               	btfss	??_Update_Screen,7,c
  3282  000C72  D029               	goto	l9990
  3283                           
  3284                           ;Main_Screen.c: 105: {
  3285                           ;Main_Screen.c: 106: tempC_Txt[0] = '-';
  3286  000C74  0E2D               	movlw	45
  3287  000C76  0100               	movlb	0	; () banked
  3288  000C78  6FF8               	movwf	_tempC_Txt& (0+255),b
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;Main_Screen.c: 107: int neg_tempC = -tempC;
  3292  000C7A  C069  F04A         	movff	_tempC,??_Update_Screen
  3293  000C7E  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3294  000C80  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3295  000C82  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3296  000C84  1E4A               	comf	??_Update_Screen,f,c
  3297  000C86  1E4B               	comf	??_Update_Screen+1,f,c
  3298  000C88  4A4A               	infsnz	??_Update_Screen,f,c
  3299  000C8A  2A4B               	incf	??_Update_Screen+1,f,c
  3300  000C8C  C04A  F04C         	movff	??_Update_Screen,Update_Screen@neg_tempC
  3301  000C90  C04B  F04D         	movff	??_Update_Screen+1,Update_Screen@neg_tempC+1
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;Main_Screen.c: 108: tempC_Txt[1] = (neg_tempC & 0x7f)/10 + '0';
  3305  000C94  0E7F               	movlw	127
  3306  000C96  144C               	andwf	Update_Screen@neg_tempC,w,c
  3307  000C98  6E17               	movwf	___awdiv@dividend,c
  3308  000C9A  6A18               	clrf	___awdiv@dividend+1,c
  3309  000C9C  0E00               	movlw	0
  3310  000C9E  6E1A               	movwf	___awdiv@divisor+1,c
  3311  000CA0  0E0A               	movlw	10
  3312  000CA2  6E19               	movwf	___awdiv@divisor,c
  3313  000CA4  EC31  F01E         	call	___awdiv	;wreg free
  3314  000CA8  5017               	movf	?___awdiv,w,c
  3315  000CAA  0F30               	addlw	48
  3316  000CAC  0100               	movlb	0	; () banked
  3317  000CAE  6FF9               	movwf	(_tempC_Txt+1)& (0+255),b
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;Main_Screen.c: 109: tempC_Txt[2] = (neg_tempC & 0x7f)%10 + '0';
  3321  000CB0  0E7F               	movlw	127
  3322  000CB2  144C               	andwf	Update_Screen@neg_tempC,w,c
  3323  000CB4  6E3D               	movwf	___awmod@dividend,c
  3324  000CB6  6A3E               	clrf	___awmod@dividend+1,c
  3325  000CB8  0E00               	movlw	0
  3326  000CBA  6E40               	movwf	___awmod@divisor+1,c
  3327  000CBC  0E0A               	movlw	10
  3328  000CBE  6E3F               	movwf	___awmod@divisor,c
  3329  000CC0  EC62  F020         	call	___awmod	;wreg free
  3330  000CC4  D01D               	goto	L2
  3331  000CC6                     l9990:
  3332                           
  3333                           ;Main_Screen.c: 111: else
  3334                           ;Main_Screen.c: 112: {
  3335                           ;Main_Screen.c: 113: tempC_Txt[0] = '+';
  3336  000CC6  0E2B               	movlw	43
  3337  000CC8  0100               	movlb	0	; () banked
  3338  000CCA  6FF8               	movwf	_tempC_Txt& (0+255),b
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;Main_Screen.c: 114: tempC_Txt[1] = tempC/10 + '0';
  3342  000CCC  5069               	movf	_tempC,w,c
  3343  000CCE  6E17               	movwf	___awdiv@dividend,c
  3344  000CD0  6A18               	clrf	___awdiv@dividend+1,c
  3345  000CD2  BE17               	btfsc	___awdiv@dividend,7,c
  3346  000CD4  0618               	decf	___awdiv@dividend+1,f,c
  3347  000CD6  0E00               	movlw	0
  3348  000CD8  6E1A               	movwf	___awdiv@divisor+1,c
  3349  000CDA  0E0A               	movlw	10
  3350  000CDC  6E19               	movwf	___awdiv@divisor,c
  3351  000CDE  EC31  F01E         	call	___awdiv	;wreg free
  3352  000CE2  5017               	movf	?___awdiv,w,c
  3353  000CE4  0F30               	addlw	48
  3354  000CE6  0100               	movlb	0	; () banked
  3355  000CE8  6FF9               	movwf	(_tempC_Txt+1)& (0+255),b
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;Main_Screen.c: 115: tempC_Txt[2] = tempC%10 + '0';
  3359  000CEA  5069               	movf	_tempC,w,c
  3360  000CEC  6E3D               	movwf	___awmod@dividend,c
  3361  000CEE  6A3E               	clrf	___awmod@dividend+1,c
  3362  000CF0  BE3D               	btfsc	___awmod@dividend,7,c
  3363  000CF2  063E               	decf	___awmod@dividend+1,f,c
  3364  000CF4  0E00               	movlw	0
  3365  000CF6  6E40               	movwf	___awmod@divisor+1,c
  3366  000CF8  0E0A               	movlw	10
  3367  000CFA  6E3F               	movwf	___awmod@divisor,c
  3368  000CFC  EC62  F020         	call	___awmod	;wreg free
  3369  000D00                     L2:
  3370  000D00  503D               	movf	?___awmod,w,c
  3371  000D02  0F30               	addlw	48
  3372  000D04  0100               	movlb	0	; () banked
  3373  000D06  6FFA               	movwf	(_tempC_Txt+2)& (0+255),b
  3374  000D08  D000               	goto	l9996
  3375  000D0A                     l9996:
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;Main_Screen.c: 116: }
  3379                           ;Main_Screen.c: 118: if (tempF < 0)
  3380  000D0A  AE6A               	btfss	_tempF,7,c
  3381  000D0C  D041               	goto	l10008
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;Main_Screen.c: 119: {
  3385                           ;Main_Screen.c: 120: tempF_Txt[0] = '-';
  3386  000D0E  0E2D               	movlw	45
  3387  000D10  0100               	movlb	0	; () banked
  3388  000D12  6FDF               	movwf	_tempF_Txt& (0+255),b
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;Main_Screen.c: 121: int neg_tempF = -tempF;
  3392  000D14  C06A  F04A         	movff	_tempF,??_Update_Screen
  3393  000D18  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3394  000D1A  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3395  000D1C  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3396  000D1E  1E4A               	comf	??_Update_Screen,f,c
  3397  000D20  1E4B               	comf	??_Update_Screen+1,f,c
  3398  000D22  4A4A               	infsnz	??_Update_Screen,f,c
  3399  000D24  2A4B               	incf	??_Update_Screen+1,f,c
  3400  000D26  C04A  F04E         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3401  000D2A  C04B  F04F         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;Main_Screen.c: 122: tempF_Txt[1] = neg_tempF/100 + '0';
  3405  000D2E  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3406  000D32  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3407  000D36  0E00               	movlw	0
  3408  000D38  6E1A               	movwf	___awdiv@divisor+1,c
  3409  000D3A  0E64               	movlw	100
  3410  000D3C  6E19               	movwf	___awdiv@divisor,c
  3411  000D3E  EC31  F01E         	call	___awdiv	;wreg free
  3412  000D42  5017               	movf	?___awdiv,w,c
  3413  000D44  0F30               	addlw	48
  3414  000D46  0100               	movlb	0	; () banked
  3415  000D48  6FE0               	movwf	(_tempF_Txt+1)& (0+255),b
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;Main_Screen.c: 123: tempF_Txt[2] = (neg_tempF/10)%10 + '0';
  3419  000D4A  0E00               	movlw	0
  3420  000D4C  6E1A               	movwf	___awdiv@divisor+1,c
  3421  000D4E  0E0A               	movlw	10
  3422  000D50  6E19               	movwf	___awdiv@divisor,c
  3423  000D52  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3424  000D56  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3425  000D5A  EC31  F01E         	call	___awdiv	;wreg free
  3426  000D5E  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3427  000D62  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3428  000D66  0E00               	movlw	0
  3429  000D68  6E40               	movwf	___awmod@divisor+1,c
  3430  000D6A  0E0A               	movlw	10
  3431  000D6C  6E3F               	movwf	___awmod@divisor,c
  3432  000D6E  EC62  F020         	call	___awmod	;wreg free
  3433  000D72  503D               	movf	?___awmod,w,c
  3434  000D74  0F30               	addlw	48
  3435  000D76  0100               	movlb	0	; () banked
  3436  000D78  6FE1               	movwf	(_tempF_Txt+2)& (0+255),b
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;Main_Screen.c: 124: tempF_Txt[3] = neg_tempF%10 + '0';
  3440  000D7A  C04E  F03D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3441  000D7E  C04F  F03E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3442  000D82  0E00               	movlw	0
  3443  000D84  6E40               	movwf	___awmod@divisor+1,c
  3444  000D86  0E0A               	movlw	10
  3445  000D88  6E3F               	movwf	___awmod@divisor,c
  3446  000D8A  EC62  F020         	call	___awmod	;wreg free
  3447  000D8E  D036               	goto	L3
  3448  000D90                     l10008:
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;Main_Screen.c: 126: else
  3452                           ;Main_Screen.c: 127: {
  3453                           ;Main_Screen.c: 128: tempF_Txt[0] = '+';
  3454  000D90  0E2B               	movlw	43
  3455  000D92  0100               	movlb	0	; () banked
  3456  000D94  6FDF               	movwf	_tempF_Txt& (0+255),b
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;Main_Screen.c: 129: tempF_Txt[1] = tempF/100 + '0';
  3460  000D96  506A               	movf	_tempF,w,c
  3461  000D98  6E17               	movwf	___awdiv@dividend,c
  3462  000D9A  6A18               	clrf	___awdiv@dividend+1,c
  3463  000D9C  BE17               	btfsc	___awdiv@dividend,7,c
  3464  000D9E  0618               	decf	___awdiv@dividend+1,f,c
  3465  000DA0  0E00               	movlw	0
  3466  000DA2  6E1A               	movwf	___awdiv@divisor+1,c
  3467  000DA4  0E64               	movlw	100
  3468  000DA6  6E19               	movwf	___awdiv@divisor,c
  3469  000DA8  EC31  F01E         	call	___awdiv	;wreg free
  3470  000DAC  5017               	movf	?___awdiv,w,c
  3471  000DAE  0F30               	addlw	48
  3472  000DB0  0100               	movlb	0	; () banked
  3473  000DB2  6FE0               	movwf	(_tempF_Txt+1)& (0+255),b
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;Main_Screen.c: 130: tempF_Txt[2] = (tempF/10)%10 + '0';
  3477  000DB4  0E00               	movlw	0
  3478  000DB6  6E1A               	movwf	___awdiv@divisor+1,c
  3479  000DB8  0E0A               	movlw	10
  3480  000DBA  6E19               	movwf	___awdiv@divisor,c
  3481  000DBC  506A               	movf	_tempF,w,c
  3482  000DBE  6E17               	movwf	___awdiv@dividend,c
  3483  000DC0  6A18               	clrf	___awdiv@dividend+1,c
  3484  000DC2  BE17               	btfsc	___awdiv@dividend,7,c
  3485  000DC4  0618               	decf	___awdiv@dividend+1,f,c
  3486  000DC6  EC31  F01E         	call	___awdiv	;wreg free
  3487  000DCA  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3488  000DCE  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3489  000DD2  0E00               	movlw	0
  3490  000DD4  6E40               	movwf	___awmod@divisor+1,c
  3491  000DD6  0E0A               	movlw	10
  3492  000DD8  6E3F               	movwf	___awmod@divisor,c
  3493  000DDA  EC62  F020         	call	___awmod	;wreg free
  3494  000DDE  503D               	movf	?___awmod,w,c
  3495  000DE0  0F30               	addlw	48
  3496  000DE2  0100               	movlb	0	; () banked
  3497  000DE4  6FE1               	movwf	(_tempF_Txt+2)& (0+255),b
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;Main_Screen.c: 131: tempF_Txt[3] = tempF%10 + '0';
  3501  000DE6  506A               	movf	_tempF,w,c
  3502  000DE8  6E3D               	movwf	___awmod@dividend,c
  3503  000DEA  6A3E               	clrf	___awmod@dividend+1,c
  3504  000DEC  BE3D               	btfsc	___awmod@dividend,7,c
  3505  000DEE  063E               	decf	___awmod@dividend+1,f,c
  3506  000DF0  0E00               	movlw	0
  3507  000DF2  6E40               	movwf	___awmod@divisor+1,c
  3508  000DF4  0E0A               	movlw	10
  3509  000DF6  6E3F               	movwf	___awmod@divisor,c
  3510  000DF8  EC62  F020         	call	___awmod	;wreg free
  3511  000DFC                     L3:
  3512  000DFC  503D               	movf	?___awmod,w,c
  3513  000DFE  0F30               	addlw	48
  3514  000E00  0100               	movlb	0	; () banked
  3515  000E02  6FE2               	movwf	(_tempF_Txt+3)& (0+255),b
  3516  000E04  D000               	goto	l10016
  3517  000E06                     l10016:
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;Main_Screen.c: 132: }
  3521                           ;Main_Screen.c: 134: time_Txt[0] = (hour>>4) + '0';
  3522  000E06  3865               	swapf	_hour,w,c
  3523  000E08  0B0F               	andlw	15
  3524  000E0A  0F30               	addlw	48
  3525  000E0C  0101               	movlb	1	; () banked
  3526  000E0E  6F6E               	movwf	_time_Txt& (0+255),b
  3527                           
  3528                           ; BSR set to: 1
  3529                           ;Main_Screen.c: 135: time_Txt[1] = (hour & 0x0f)+ '0';
  3530  000E10  5065               	movf	_hour,w,c
  3531  000E12  0B0F               	andlw	15
  3532  000E14  0F30               	addlw	48
  3533  000E16  0101               	movlb	1	; () banked
  3534  000E18  6F6F               	movwf	(_time_Txt+1)& (0+255),b
  3535                           
  3536                           ; BSR set to: 1
  3537                           ;Main_Screen.c: 136: time_Txt[3] = (minute>>4) + '0';
  3538  000E1A  3866               	swapf	_minute,w,c
  3539  000E1C  0B0F               	andlw	15
  3540  000E1E  0F30               	addlw	48
  3541  000E20  0101               	movlb	1	; () banked
  3542  000E22  6F71               	movwf	(_time_Txt+3)& (0+255),b
  3543                           
  3544                           ; BSR set to: 1
  3545                           ;Main_Screen.c: 137: time_Txt[4] = (minute & 0x0f) + '0';
  3546  000E24  5066               	movf	_minute,w,c
  3547  000E26  0B0F               	andlw	15
  3548  000E28  0F30               	addlw	48
  3549  000E2A  0101               	movlb	1	; () banked
  3550  000E2C  6F72               	movwf	(_time_Txt+4)& (0+255),b
  3551                           
  3552                           ; BSR set to: 1
  3553                           ;Main_Screen.c: 138: time_Txt[6] = (second>>4) + '0';
  3554  000E2E  3868               	swapf	_second,w,c
  3555  000E30  0B0F               	andlw	15
  3556  000E32  0F30               	addlw	48
  3557  000E34  0101               	movlb	1	; () banked
  3558  000E36  6F74               	movwf	(_time_Txt+6)& (0+255),b
  3559                           
  3560                           ; BSR set to: 1
  3561                           ;Main_Screen.c: 139: time_Txt[7] = (second & 0x0f) + '0';
  3562  000E38  5068               	movf	_second,w,c
  3563  000E3A  0B0F               	andlw	15
  3564  000E3C  0F30               	addlw	48
  3565  000E3E  0101               	movlb	1	; () banked
  3566  000E40  6F75               	movwf	(_time_Txt+7)& (0+255),b
  3567                           
  3568                           ; BSR set to: 1
  3569                           ;Main_Screen.c: 140: date_Txt[0] = (month>>4) + '0';
  3570  000E42  3867               	swapf	_month,w,c
  3571  000E44  0B0F               	andlw	15
  3572  000E46  0F30               	addlw	48
  3573  000E48  0101               	movlb	1	; () banked
  3574  000E4A  6F53               	movwf	_date_Txt& (0+255),b
  3575                           
  3576                           ; BSR set to: 1
  3577                           ;Main_Screen.c: 141: date_Txt[1] = (month & 0x0f) + '0';
  3578  000E4C  5067               	movf	_month,w,c
  3579  000E4E  0B0F               	andlw	15
  3580  000E50  0F30               	addlw	48
  3581  000E52  0101               	movlb	1	; () banked
  3582  000E54  6F54               	movwf	(_date_Txt+1)& (0+255),b
  3583                           
  3584                           ; BSR set to: 1
  3585                           ;Main_Screen.c: 142: date_Txt[3] = (day>>4) + '0';
  3586  000E56  3863               	swapf	_day,w,c
  3587  000E58  0B0F               	andlw	15
  3588  000E5A  0F30               	addlw	48
  3589  000E5C  0101               	movlb	1	; () banked
  3590  000E5E  6F56               	movwf	(_date_Txt+3)& (0+255),b
  3591                           
  3592                           ; BSR set to: 1
  3593                           ;Main_Screen.c: 143: date_Txt[4] = (day & 0x0f) + '0';
  3594  000E60  5063               	movf	_day,w,c
  3595  000E62  0B0F               	andlw	15
  3596  000E64  0F30               	addlw	48
  3597  000E66  0101               	movlb	1	; () banked
  3598  000E68  6F57               	movwf	(_date_Txt+4)& (0+255),b
  3599                           
  3600                           ; BSR set to: 1
  3601                           ;Main_Screen.c: 144: date_Txt[6] = (year>>4) + '0';
  3602  000E6A  386B               	swapf	_year,w,c
  3603  000E6C  0B0F               	andlw	15
  3604  000E6E  0F30               	addlw	48
  3605  000E70  0101               	movlb	1	; () banked
  3606  000E72  6F59               	movwf	(_date_Txt+6)& (0+255),b
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;Main_Screen.c: 145: date_Txt[7] = (year & 0x0f) + '0';
  3610  000E74  506B               	movf	_year,w,c
  3611  000E76  0B0F               	andlw	15
  3612  000E78  0F30               	addlw	48
  3613  000E7A  0101               	movlb	1	; () banked
  3614  000E7C  6F5A               	movwf	(_date_Txt+7)& (0+255),b
  3615                           
  3616                           ; BSR set to: 1
  3617                           ;Main_Screen.c: 147: if (FAN_TIMER_MODE == 0)
  3618  000E7E  5060               	movf	_FAN_TIMER_MODE,w,c
  3619  000E80  A4D8               	btfss	status,2,c
  3620  000E82  D00B               	goto	l10044
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;Main_Screen.c: 148: {
  3624                           ;Main_Screen.c: 149: strcpy(Fan_Timer_Mode_Txt, "OFF");
  3625  000E84  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3626  000E86  6E11               	movwf	strcpy@to,c
  3627  000E88  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3628  000E8A  6E12               	movwf	strcpy@to+1,c
  3629  000E8C  0EB3               	movlw	low (STR_25+7)
  3630  000E8E  6E13               	movwf	strcpy@from,c
  3631  000E90  0EFF               	movlw	high (STR_25+7)
  3632  000E92  6E14               	movwf	strcpy@from+1,c
  3633  000E94  EC1F  F024         	call	_strcpy	;wreg free
  3634                           
  3635                           ;Main_Screen.c: 150: }
  3636  000E98  D02C               	goto	l10056
  3637  000E9A                     l10044:
  3638                           
  3639                           ;Main_Screen.c: 151: else if (FAN_TIMER_MODE == 1)
  3640  000E9A  0460               	decf	_FAN_TIMER_MODE,w,c
  3641  000E9C  A4D8               	btfss	status,2,c
  3642  000E9E  D00B               	goto	l10048
  3643                           
  3644                           ;Main_Screen.c: 152: {
  3645                           ;Main_Screen.c: 153: strcpy(Fan_Timer_Mode_Txt, "TM1");
  3646  000EA0  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3647  000EA2  6E11               	movwf	strcpy@to,c
  3648  000EA4  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3649  000EA6  6E12               	movwf	strcpy@to+1,c
  3650  000EA8  0EE5               	movlw	low STR_27
  3651  000EAA  6E13               	movwf	strcpy@from,c
  3652  000EAC  0EFF               	movlw	high STR_27
  3653  000EAE  6E14               	movwf	strcpy@from+1,c
  3654  000EB0  EC1F  F024         	call	_strcpy	;wreg free
  3655                           
  3656                           ;Main_Screen.c: 154: }
  3657  000EB4  D01E               	goto	l10056
  3658  000EB6                     l10048:
  3659                           
  3660                           ;Main_Screen.c: 155: else if (FAN_TIMER_MODE == 2)
  3661  000EB6  0E02               	movlw	2
  3662  000EB8  1860               	xorwf	_FAN_TIMER_MODE,w,c
  3663  000EBA  A4D8               	btfss	status,2,c
  3664  000EBC  D00B               	goto	l10052
  3665                           
  3666                           ;Main_Screen.c: 156: {
  3667                           ;Main_Screen.c: 157: strcpy(Fan_Timer_Mode_Txt, "TM2");
  3668  000EBE  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3669  000EC0  6E11               	movwf	strcpy@to,c
  3670  000EC2  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3671  000EC4  6E12               	movwf	strcpy@to+1,c
  3672  000EC6  0EE9               	movlw	low STR_28
  3673  000EC8  6E13               	movwf	strcpy@from,c
  3674  000ECA  0EFF               	movlw	high STR_28
  3675  000ECC  6E14               	movwf	strcpy@from+1,c
  3676  000ECE  EC1F  F024         	call	_strcpy	;wreg free
  3677                           
  3678                           ;Main_Screen.c: 158: }
  3679  000ED2  D00F               	goto	l10056
  3680  000ED4                     l10052:
  3681                           
  3682                           ;Main_Screen.c: 159: else if (FAN_TIMER_MODE == 3)
  3683  000ED4  0E03               	movlw	3
  3684  000ED6  1860               	xorwf	_FAN_TIMER_MODE,w,c
  3685  000ED8  A4D8               	btfss	status,2,c
  3686  000EDA  D00B               	goto	l10056
  3687                           
  3688                           ;Main_Screen.c: 160: {
  3689                           ;Main_Screen.c: 161: strcpy(Fan_Timer_Mode_Txt, "TM3");
  3690  000EDC  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3691  000EDE  6E11               	movwf	strcpy@to,c
  3692  000EE0  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3693  000EE2  6E12               	movwf	strcpy@to+1,c
  3694  000EE4  0EED               	movlw	low STR_29
  3695  000EE6  6E13               	movwf	strcpy@from,c
  3696  000EE8  0EFF               	movlw	high STR_29
  3697  000EEA  6E14               	movwf	strcpy@from+1,c
  3698  000EEC  EC1F  F024         	call	_strcpy	;wreg free
  3699  000EF0  D000               	goto	l10056
  3700  000EF2                     l10056:
  3701                           
  3702                           ;Main_Screen.c: 162: }
  3703                           ;Main_Screen.c: 164: Fan_Timer_Txt[0] = FAN_TIMER_TIME/100 + '0';
  3704  000EF2  C0C3  F017         	movff	_FAN_TIMER_TIME,___awdiv@dividend
  3705  000EF6  6A18               	clrf	___awdiv@dividend+1,c
  3706  000EF8  0E00               	movlw	0
  3707  000EFA  6E1A               	movwf	___awdiv@divisor+1,c
  3708  000EFC  0E64               	movlw	100
  3709  000EFE  6E19               	movwf	___awdiv@divisor,c
  3710  000F00  EC31  F01E         	call	___awdiv	;wreg free
  3711  000F04  5017               	movf	?___awdiv,w,c
  3712  000F06  0F30               	addlw	48
  3713  000F08  0100               	movlb	0	; () banked
  3714  000F0A  6FF4               	movwf	_Fan_Timer_Txt& (0+255),b
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;Main_Screen.c: 165: Fan_Timer_Txt[1] = FAN_TIMER_TIME/10 + '0';
  3718  000F0C  C0C3  F017         	movff	_FAN_TIMER_TIME,___awdiv@dividend
  3719  000F10  6A18               	clrf	___awdiv@dividend+1,c
  3720  000F12  0E00               	movlw	0
  3721  000F14  6E1A               	movwf	___awdiv@divisor+1,c
  3722  000F16  0E0A               	movlw	10
  3723  000F18  6E19               	movwf	___awdiv@divisor,c
  3724  000F1A  EC31  F01E         	call	___awdiv	;wreg free
  3725  000F1E  5017               	movf	?___awdiv,w,c
  3726  000F20  0F30               	addlw	48
  3727  000F22  0100               	movlb	0	; () banked
  3728  000F24  6FF5               	movwf	(_Fan_Timer_Txt+1)& (0+255),b
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;Main_Screen.c: 166: Fan_Timer_Txt[2] = FAN_TIMER_TIME%10 + '0';
  3732  000F26  C0C3  F03D         	movff	_FAN_TIMER_TIME,___awmod@dividend
  3733  000F2A  6A3E               	clrf	___awmod@dividend+1,c
  3734  000F2C  0E00               	movlw	0
  3735  000F2E  6E40               	movwf	___awmod@divisor+1,c
  3736  000F30  0E0A               	movlw	10
  3737  000F32  6E3F               	movwf	___awmod@divisor,c
  3738  000F34  EC62  F020         	call	___awmod	;wreg free
  3739  000F38  503D               	movf	?___awmod,w,c
  3740  000F3A  0F30               	addlw	48
  3741  000F3C  0100               	movlb	0	; () banked
  3742  000F3E  6FF6               	movwf	(_Fan_Timer_Txt+2)& (0+255),b
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;Main_Screen.c: 168: Fan_Set_Temp_Txt[0] = fan_set_temp/100 + '0';
  3746  000F40  C0DC  F017         	movff	_fan_set_temp,___awdiv@dividend
  3747  000F44  6A18               	clrf	___awdiv@dividend+1,c
  3748  000F46  0E00               	movlw	0
  3749  000F48  6E1A               	movwf	___awdiv@divisor+1,c
  3750  000F4A  0E64               	movlw	100
  3751  000F4C  6E19               	movwf	___awdiv@divisor,c
  3752  000F4E  EC31  F01E         	call	___awdiv	;wreg free
  3753  000F52  5017               	movf	?___awdiv,w,c
  3754  000F54  0F30               	addlw	48
  3755  000F56  0100               	movlb	0	; () banked
  3756  000F58  6FEC               	movwf	_Fan_Set_Temp_Txt& (0+255),b
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;Main_Screen.c: 169: Fan_Set_Temp_Txt[1] = fan_set_temp/10 + '0';
  3760  000F5A  C0DC  F017         	movff	_fan_set_temp,___awdiv@dividend
  3761  000F5E  6A18               	clrf	___awdiv@dividend+1,c
  3762  000F60  0E00               	movlw	0
  3763  000F62  6E1A               	movwf	___awdiv@divisor+1,c
  3764  000F64  0E0A               	movlw	10
  3765  000F66  6E19               	movwf	___awdiv@divisor,c
  3766  000F68  EC31  F01E         	call	___awdiv	;wreg free
  3767  000F6C  5017               	movf	?___awdiv,w,c
  3768  000F6E  0F30               	addlw	48
  3769  000F70  0100               	movlb	0	; () banked
  3770  000F72  6FED               	movwf	(_Fan_Set_Temp_Txt+1)& (0+255),b
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;Main_Screen.c: 170: Fan_Set_Temp_Txt[2] = fan_set_temp%10 + '0';
  3774  000F74  C0DC  F03D         	movff	_fan_set_temp,___awmod@dividend
  3775  000F78  6A3E               	clrf	___awmod@dividend+1,c
  3776  000F7A  0E00               	movlw	0
  3777  000F7C  6E40               	movwf	___awmod@divisor+1,c
  3778  000F7E  0E0A               	movlw	10
  3779  000F80  6E3F               	movwf	___awmod@divisor,c
  3780  000F82  EC62  F020         	call	___awmod	;wreg free
  3781  000F86  503D               	movf	?___awmod,w,c
  3782  000F88  0F30               	addlw	48
  3783  000F8A  0100               	movlb	0	; () banked
  3784  000F8C  6FEE               	movwf	(_Fan_Set_Temp_Txt+2)& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;Main_Screen.c: 172: if (FANMODE == 1)
  3788  000F8E  0100               	movlb	0	; () banked
  3789  000F90  05C2               	decf	_FANMODE& (0+255),w,b
  3790  000F92  A4D8               	btfss	status,2,c
  3791  000F94  D00B               	goto	l10072
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;Main_Screen.c: 173: {
  3795                           ;Main_Screen.c: 174: strcpy(Fan_Mode_Txt, "AUTO");
  3796  000F96  0E7D               	movlw	low _Fan_Mode_Txt
  3797  000F98  6E11               	movwf	strcpy@to,c
  3798  000F9A  0E01               	movlw	high _Fan_Mode_Txt
  3799  000F9C  6E12               	movwf	strcpy@to+1,c
  3800  000F9E  0ECD               	movlw	low STR_30
  3801  000FA0  6E13               	movwf	strcpy@from,c
  3802  000FA2  0EFF               	movlw	high STR_30
  3803  000FA4  6E14               	movwf	strcpy@from+1,c
  3804  000FA6  EC1F  F024         	call	_strcpy	;wreg free
  3805                           
  3806                           ;Main_Screen.c: 175: }
  3807  000FAA  D00B               	goto	l10074
  3808  000FAC                     l10072:
  3809                           
  3810                           ;Main_Screen.c: 176: else
  3811                           ;Main_Screen.c: 177: {
  3812                           ;Main_Screen.c: 178: strcpy(Fan_Mode_Txt, "MANU");
  3813  000FAC  0E7D               	movlw	low _Fan_Mode_Txt
  3814  000FAE  6E11               	movwf	strcpy@to,c
  3815  000FB0  0E01               	movlw	high _Fan_Mode_Txt
  3816  000FB2  6E12               	movwf	strcpy@to+1,c
  3817  000FB4  0ED2               	movlw	low STR_31
  3818  000FB6  6E13               	movwf	strcpy@from,c
  3819  000FB8  0EFF               	movlw	high STR_31
  3820  000FBA  6E14               	movwf	strcpy@from+1,c
  3821  000FBC  EC1F  F024         	call	_strcpy	;wreg free
  3822  000FC0  D000               	goto	l10074
  3823  000FC2                     l10074:
  3824                           
  3825                           ;Main_Screen.c: 179: }
  3826                           ;Main_Screen.c: 181: if (FAN == 1)
  3827  000FC2  0100               	movlb	0	; () banked
  3828  000FC4  05C1               	decf	_FAN& (0+255),w,b
  3829  000FC6  A4D8               	btfss	status,2,c
  3830  000FC8  D00B               	goto	l10078
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;Main_Screen.c: 182: {
  3834                           ;Main_Screen.c: 183: strcpy(Fan_SW_Txt, "ON ");
  3835  000FCA  0EE8               	movlw	low _Fan_SW_Txt
  3836  000FCC  6E11               	movwf	strcpy@to,c
  3837  000FCE  0E00               	movlw	high _Fan_SW_Txt
  3838  000FD0  6E12               	movwf	strcpy@to+1,c
  3839  000FD2  0EE1               	movlw	low STR_32
  3840  000FD4  6E13               	movwf	strcpy@from,c
  3841  000FD6  0EFF               	movlw	high STR_32
  3842  000FD8  6E14               	movwf	strcpy@from+1,c
  3843  000FDA  EC1F  F024         	call	_strcpy	;wreg free
  3844                           
  3845                           ;Main_Screen.c: 184: }
  3846  000FDE  D00B               	goto	l10080
  3847  000FE0                     l10078:
  3848                           
  3849                           ;Main_Screen.c: 185: else
  3850                           ;Main_Screen.c: 186: {
  3851                           ;Main_Screen.c: 187: strcpy(Fan_SW_Txt, "OFF");
  3852  000FE0  0EE8               	movlw	low _Fan_SW_Txt
  3853  000FE2  6E11               	movwf	strcpy@to,c
  3854  000FE4  0E00               	movlw	high _Fan_SW_Txt
  3855  000FE6  6E12               	movwf	strcpy@to+1,c
  3856  000FE8  0EB3               	movlw	low (STR_25+7)
  3857  000FEA  6E13               	movwf	strcpy@from,c
  3858  000FEC  0EFF               	movlw	high (STR_25+7)
  3859  000FEE  6E14               	movwf	strcpy@from+1,c
  3860  000FF0  EC1F  F024         	call	_strcpy	;wreg free
  3861  000FF4  D000               	goto	l10080
  3862  000FF6                     l10080:
  3863                           
  3864                           ;Main_Screen.c: 188: }
  3865                           ;Main_Screen.c: 191: DC_Txt[0] = duty_cycle/100 + '0';
  3866  000FF6  C064  F017         	movff	_duty_cycle,___awdiv@dividend
  3867  000FFA  6A18               	clrf	___awdiv@dividend+1,c
  3868  000FFC  0E00               	movlw	0
  3869  000FFE  6E1A               	movwf	___awdiv@divisor+1,c
  3870  001000  0E64               	movlw	100
  3871  001002  6E19               	movwf	___awdiv@divisor,c
  3872  001004  EC31  F01E         	call	___awdiv	;wreg free
  3873  001008  5017               	movf	?___awdiv,w,c
  3874  00100A  0F30               	addlw	48
  3875  00100C  0100               	movlb	0	; () banked
  3876  00100E  6FE4               	movwf	_DC_Txt& (0+255),b
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;Main_Screen.c: 192: DC_Txt[1] = duty_cycle/10 + '0';
  3880  001010  C064  F017         	movff	_duty_cycle,___awdiv@dividend
  3881  001014  6A18               	clrf	___awdiv@dividend+1,c
  3882  001016  0E00               	movlw	0
  3883  001018  6E1A               	movwf	___awdiv@divisor+1,c
  3884  00101A  0E0A               	movlw	10
  3885  00101C  6E19               	movwf	___awdiv@divisor,c
  3886  00101E  EC31  F01E         	call	___awdiv	;wreg free
  3887  001022  5017               	movf	?___awdiv,w,c
  3888  001024  0F30               	addlw	48
  3889  001026  0100               	movlb	0	; () banked
  3890  001028  6FE5               	movwf	(_DC_Txt+1)& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;Main_Screen.c: 193: DC_Txt[2] = duty_cycle%10 + '0';
  3894  00102A  C064  F03D         	movff	_duty_cycle,___awmod@dividend
  3895  00102E  6A3E               	clrf	___awmod@dividend+1,c
  3896  001030  0E00               	movlw	0
  3897  001032  6E40               	movwf	___awmod@divisor+1,c
  3898  001034  0E0A               	movlw	10
  3899  001036  6E3F               	movwf	___awmod@divisor,c
  3900  001038  EC62  F020         	call	___awmod	;wreg free
  3901  00103C  503D               	movf	?___awmod,w,c
  3902  00103E  0F30               	addlw	48
  3903  001040  0100               	movlb	0	; () banked
  3904  001042  6FE6               	movwf	(_DC_Txt+2)& (0+255),b
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;Main_Screen.c: 195: Volt_Txt[0] = ((int) volt ) + '0';
  3908  001044  C0B8  F02E         	movff	_volt,___fttol@f1
  3909  001048  C0B9  F02F         	movff	_volt+1,___fttol@f1+1
  3910  00104C  C0BA  F030         	movff	_volt+2,___fttol@f1+2
  3911  001050  EC5E  F01A         	call	___fttol	;wreg free
  3912  001054  502E               	movf	?___fttol,w,c
  3913  001056  0F30               	addlw	48
  3914  001058  0101               	movlb	1	; () banked
  3915  00105A  6F77               	movwf	_Volt_Txt& (0+255),b
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;Main_Screen.c: 196: Volt_Txt[2] = (( (int) (volt*10 ) )%10) + '0';
  3919  00105C  0E00               	movlw	0
  3920  00105E  6E22               	movwf	___ftmul@f2,c
  3921  001060  0E20               	movlw	32
  3922  001062  6E23               	movwf	___ftmul@f2+1,c
  3923  001064  0E41               	movlw	65
  3924  001066  6E24               	movwf	___ftmul@f2+2,c
  3925  001068  C0B8  F01F         	movff	_volt,___ftmul@f1
  3926  00106C  C0B9  F020         	movff	_volt+1,___ftmul@f1+1
  3927  001070  C0BA  F021         	movff	_volt+2,___ftmul@f1+2
  3928  001074  ECF4  F018         	call	___ftmul	;wreg free
  3929  001078  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3930  00107C  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3931  001080  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3932  001084  EC5E  F01A         	call	___fttol	;wreg free
  3933  001088  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3934  00108C  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3935  001090  0E00               	movlw	0
  3936  001092  6E40               	movwf	___awmod@divisor+1,c
  3937  001094  0E0A               	movlw	10
  3938  001096  6E3F               	movwf	___awmod@divisor,c
  3939  001098  EC62  F020         	call	___awmod	;wreg free
  3940  00109C  503D               	movf	?___awmod,w,c
  3941  00109E  0F30               	addlw	48
  3942  0010A0  0101               	movlb	1	; () banked
  3943  0010A2  6F79               	movwf	(_Volt_Txt+2)& (0+255),b
  3944                           
  3945                           ; BSR set to: 1
  3946                           ;Main_Screen.c: 197: Volt_Txt[3] = (( (int) (volt*100) )%10) + '0';
  3947  0010A4  0E00               	movlw	0
  3948  0010A6  6E22               	movwf	___ftmul@f2,c
  3949  0010A8  0EC8               	movlw	200
  3950  0010AA  6E23               	movwf	___ftmul@f2+1,c
  3951  0010AC  0E42               	movlw	66
  3952  0010AE  6E24               	movwf	___ftmul@f2+2,c
  3953  0010B0  C0B8  F01F         	movff	_volt,___ftmul@f1
  3954  0010B4  C0B9  F020         	movff	_volt+1,___ftmul@f1+1
  3955  0010B8  C0BA  F021         	movff	_volt+2,___ftmul@f1+2
  3956  0010BC  ECF4  F018         	call	___ftmul	;wreg free
  3957  0010C0  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3958  0010C4  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3959  0010C8  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3960  0010CC  EC5E  F01A         	call	___fttol	;wreg free
  3961  0010D0  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3962  0010D4  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3963  0010D8  0E00               	movlw	0
  3964  0010DA  6E40               	movwf	___awmod@divisor+1,c
  3965  0010DC  0E0A               	movlw	10
  3966  0010DE  6E3F               	movwf	___awmod@divisor,c
  3967  0010E0  EC62  F020         	call	___awmod	;wreg free
  3968  0010E4  503D               	movf	?___awmod,w,c
  3969  0010E6  0F30               	addlw	48
  3970  0010E8  0101               	movlb	1	; () banked
  3971  0010EA  6F7A               	movwf	(_Volt_Txt+3)& (0+255),b
  3972                           
  3973                           ; BSR set to: 1
  3974                           ;Main_Screen.c: 199: RPM_Txt[0] = rpm/1000 + '0';
  3975  0010EC  C05C  F017         	movff	_rpm,___awdiv@dividend
  3976  0010F0  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  3977  0010F4  0E03               	movlw	3
  3978  0010F6  6E1A               	movwf	___awdiv@divisor+1,c
  3979  0010F8  0EE8               	movlw	232
  3980  0010FA  6E19               	movwf	___awdiv@divisor,c
  3981  0010FC  EC31  F01E         	call	___awdiv	;wreg free
  3982  001100  5017               	movf	?___awdiv,w,c
  3983  001102  0F30               	addlw	48
  3984  001104  0101               	movlb	1	; () banked
  3985  001106  6F82               	movwf	_RPM_Txt& (0+255),b
  3986                           
  3987                           ; BSR set to: 1
  3988                           ;Main_Screen.c: 200: RPM_Txt[1] = (rpm/100)%10 + '0';
  3989  001108  0E00               	movlw	0
  3990  00110A  6E1A               	movwf	___awdiv@divisor+1,c
  3991  00110C  0E64               	movlw	100
  3992  00110E  6E19               	movwf	___awdiv@divisor,c
  3993  001110  C05C  F017         	movff	_rpm,___awdiv@dividend
  3994  001114  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  3995  001118  EC31  F01E         	call	___awdiv	;wreg free
  3996  00111C  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3997  001120  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3998  001124  0E00               	movlw	0
  3999  001126  6E40               	movwf	___awmod@divisor+1,c
  4000  001128  0E0A               	movlw	10
  4001  00112A  6E3F               	movwf	___awmod@divisor,c
  4002  00112C  EC62  F020         	call	___awmod	;wreg free
  4003  001130  503D               	movf	?___awmod,w,c
  4004  001132  0F30               	addlw	48
  4005  001134  0101               	movlb	1	; () banked
  4006  001136  6F83               	movwf	(_RPM_Txt+1)& (0+255),b
  4007                           
  4008                           ; BSR set to: 1
  4009                           ;Main_Screen.c: 201: RPM_Txt[2] = (rpm/10)%10 + '0';
  4010  001138  0E00               	movlw	0
  4011  00113A  6E1A               	movwf	___awdiv@divisor+1,c
  4012  00113C  0E0A               	movlw	10
  4013  00113E  6E19               	movwf	___awdiv@divisor,c
  4014  001140  C05C  F017         	movff	_rpm,___awdiv@dividend
  4015  001144  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4016  001148  EC31  F01E         	call	___awdiv	;wreg free
  4017  00114C  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4018  001150  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4019  001154  0E00               	movlw	0
  4020  001156  6E40               	movwf	___awmod@divisor+1,c
  4021  001158  0E0A               	movlw	10
  4022  00115A  6E3F               	movwf	___awmod@divisor,c
  4023  00115C  EC62  F020         	call	___awmod	;wreg free
  4024  001160  503D               	movf	?___awmod,w,c
  4025  001162  0F30               	addlw	48
  4026  001164  0101               	movlb	1	; () banked
  4027  001166  6F84               	movwf	(_RPM_Txt+2)& (0+255),b
  4028                           
  4029                           ; BSR set to: 1
  4030                           ;Main_Screen.c: 202: RPM_Txt[3] = rpm%10 + '0';
  4031  001168  C05C  F03D         	movff	_rpm,___awmod@dividend
  4032  00116C  C05D  F03E         	movff	_rpm+1,___awmod@dividend+1
  4033  001170  0E00               	movlw	0
  4034  001172  6E40               	movwf	___awmod@divisor+1,c
  4035  001174  0E0A               	movlw	10
  4036  001176  6E3F               	movwf	___awmod@divisor,c
  4037  001178  EC62  F020         	call	___awmod	;wreg free
  4038  00117C  503D               	movf	?___awmod,w,c
  4039  00117E  0F30               	addlw	48
  4040  001180  0101               	movlb	1	; () banked
  4041  001182  6F85               	movwf	(_RPM_Txt+3)& (0+255),b
  4042                           
  4043                           ; BSR set to: 1
  4044                           ;Main_Screen.c: 204: drawtext(1, 23, tempC_Txt , 0xFFE0 , 0x0000 , 2);
  4045  001184  0E17               	movlw	23
  4046  001186  6E39               	movwf	drawtext@y,c
  4047  001188  0EF8               	movlw	low _tempC_Txt
  4048  00118A  6E3A               	movwf	drawtext@_text,c
  4049  00118C  0E00               	movlw	high _tempC_Txt
  4050  00118E  6E3B               	movwf	drawtext@_text+1,c
  4051  001190  0EFF               	movlw	255
  4052  001192  6E3D               	movwf	drawtext@color+1,c
  4053  001194  0EE0               	movlw	224
  4054  001196  6E3C               	movwf	drawtext@color,c
  4055  001198  0E00               	movlw	0
  4056  00119A  6E3F               	movwf	drawtext@bg+1,c
  4057  00119C  0E00               	movlw	0
  4058  00119E  6E3E               	movwf	drawtext@bg,c
  4059  0011A0  0E02               	movlw	2
  4060  0011A2  6E40               	movwf	drawtext@size,c
  4061  0011A4  0E01               	movlw	1
  4062  0011A6  ECD1  F01A         	call	_drawtext
  4063                           
  4064                           ;Main_Screen.c: 205: drawtext(60, 23, tempF_Txt , 0xFFE0 , 0x0000 , 2);
  4065  0011AA  0E17               	movlw	23
  4066  0011AC  6E39               	movwf	drawtext@y,c
  4067  0011AE  0EDF               	movlw	low _tempF_Txt
  4068  0011B0  6E3A               	movwf	drawtext@_text,c
  4069  0011B2  0E00               	movlw	high _tempF_Txt
  4070  0011B4  6E3B               	movwf	drawtext@_text+1,c
  4071  0011B6  0EFF               	movlw	255
  4072  0011B8  6E3D               	movwf	drawtext@color+1,c
  4073  0011BA  0EE0               	movlw	224
  4074  0011BC  6E3C               	movwf	drawtext@color,c
  4075  0011BE  0E00               	movlw	0
  4076  0011C0  6E3F               	movwf	drawtext@bg+1,c
  4077  0011C2  0E00               	movlw	0
  4078  0011C4  6E3E               	movwf	drawtext@bg,c
  4079  0011C6  0E02               	movlw	2
  4080  0011C8  6E40               	movwf	drawtext@size,c
  4081  0011CA  0E3C               	movlw	60
  4082  0011CC  ECD1  F01A         	call	_drawtext
  4083                           
  4084                           ;Main_Screen.c: 206: drawtext(15 , 52 , time_Txt , 0x07FF , 0x0000 , 2);
  4085  0011D0  0E34               	movlw	52
  4086  0011D2  6E39               	movwf	drawtext@y,c
  4087  0011D4  0E6E               	movlw	low _time_Txt
  4088  0011D6  6E3A               	movwf	drawtext@_text,c
  4089  0011D8  0E01               	movlw	high _time_Txt
  4090  0011DA  6E3B               	movwf	drawtext@_text+1,c
  4091  0011DC  0E07               	movlw	7
  4092  0011DE  6E3D               	movwf	drawtext@color+1,c
  4093  0011E0  683C               	setf	drawtext@color,c
  4094  0011E2  0E00               	movlw	0
  4095  0011E4  6E3F               	movwf	drawtext@bg+1,c
  4096  0011E6  0E00               	movlw	0
  4097  0011E8  6E3E               	movwf	drawtext@bg,c
  4098  0011EA  0E02               	movlw	2
  4099  0011EC  6E40               	movwf	drawtext@size,c
  4100  0011EE  0E0F               	movlw	15
  4101  0011F0  ECD1  F01A         	call	_drawtext
  4102                           
  4103                           ;Main_Screen.c: 207: drawtext(15 , 82 , date_Txt , 0x07E0 , 0x0000 , 2);
  4104  0011F4  0E52               	movlw	82
  4105  0011F6  6E39               	movwf	drawtext@y,c
  4106  0011F8  0E53               	movlw	low _date_Txt
  4107  0011FA  6E3A               	movwf	drawtext@_text,c
  4108  0011FC  0E01               	movlw	high _date_Txt
  4109  0011FE  6E3B               	movwf	drawtext@_text+1,c
  4110  001200  0E07               	movlw	7
  4111  001202  6E3D               	movwf	drawtext@color+1,c
  4112  001204  0EE0               	movlw	224
  4113  001206  6E3C               	movwf	drawtext@color,c
  4114  001208  0E00               	movlw	0
  4115  00120A  6E3F               	movwf	drawtext@bg+1,c
  4116  00120C  0E00               	movlw	0
  4117  00120E  6E3E               	movwf	drawtext@bg,c
  4118  001210  0E02               	movlw	2
  4119  001212  6E40               	movwf	drawtext@size,c
  4120  001214  0E0F               	movlw	15
  4121  001216  ECD1  F01A         	call	_drawtext
  4122                           
  4123                           ;Main_Screen.c: 208: drawtext(25 , 110 , Fan_Timer_Mode_Txt , 0x07FF , 0x0000 , 1);
  4124  00121A  0E6E               	movlw	110
  4125  00121C  6E39               	movwf	drawtext@y,c
  4126  00121E  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  4127  001220  6E3A               	movwf	drawtext@_text,c
  4128  001222  0E00               	movlw	high _Fan_Timer_Mode_Txt
  4129  001224  6E3B               	movwf	drawtext@_text+1,c
  4130  001226  0E07               	movlw	7
  4131  001228  6E3D               	movwf	drawtext@color+1,c
  4132  00122A  683C               	setf	drawtext@color,c
  4133  00122C  0E00               	movlw	0
  4134  00122E  6E3F               	movwf	drawtext@bg+1,c
  4135  001230  0E00               	movlw	0
  4136  001232  6E3E               	movwf	drawtext@bg,c
  4137  001234  0E01               	movlw	1
  4138  001236  6E40               	movwf	drawtext@size,c
  4139  001238  0E19               	movlw	25
  4140  00123A  ECD1  F01A         	call	_drawtext
  4141                           
  4142                           ;Main_Screen.c: 209: drawtext(90 , 110 , Fan_Timer_Txt , 0x07FF , 0x0000 , 1);
  4143  00123E  0E6E               	movlw	110
  4144  001240  6E39               	movwf	drawtext@y,c
  4145  001242  0EF4               	movlw	low _Fan_Timer_Txt
  4146  001244  6E3A               	movwf	drawtext@_text,c
  4147  001246  0E00               	movlw	high _Fan_Timer_Txt
  4148  001248  6E3B               	movwf	drawtext@_text+1,c
  4149  00124A  0E07               	movlw	7
  4150  00124C  6E3D               	movwf	drawtext@color+1,c
  4151  00124E  683C               	setf	drawtext@color,c
  4152  001250  0E00               	movlw	0
  4153  001252  6E3F               	movwf	drawtext@bg+1,c
  4154  001254  0E00               	movlw	0
  4155  001256  6E3E               	movwf	drawtext@bg,c
  4156  001258  0E01               	movlw	1
  4157  00125A  6E40               	movwf	drawtext@size,c
  4158  00125C  0E5A               	movlw	90
  4159  00125E  ECD1  F01A         	call	_drawtext
  4160                           
  4161                           ;Main_Screen.c: 210: drawtext(35, 130 ,Fan_Set_Temp_Txt, 0xF800, 0x0000, 1);
  4162  001262  0E82               	movlw	130
  4163  001264  6E39               	movwf	drawtext@y,c
  4164  001266  0EEC               	movlw	low _Fan_Set_Temp_Txt
  4165  001268  6E3A               	movwf	drawtext@_text,c
  4166  00126A  0E00               	movlw	high _Fan_Set_Temp_Txt
  4167  00126C  6E3B               	movwf	drawtext@_text+1,c
  4168  00126E  0EF8               	movlw	248
  4169  001270  6E3D               	movwf	drawtext@color+1,c
  4170  001272  0E00               	movlw	0
  4171  001274  6E3C               	movwf	drawtext@color,c
  4172  001276  0E00               	movlw	0
  4173  001278  6E3F               	movwf	drawtext@bg+1,c
  4174  00127A  0E00               	movlw	0
  4175  00127C  6E3E               	movwf	drawtext@bg,c
  4176  00127E  0E01               	movlw	1
  4177  001280  6E40               	movwf	drawtext@size,c
  4178  001282  0E23               	movlw	35
  4179  001284  ECD1  F01A         	call	_drawtext
  4180                           
  4181                           ;Main_Screen.c: 211: drawtext(75, 130, Fan_Mode_Txt, 0xF800 , 0x0000 , 1);
  4182  001288  0E82               	movlw	130
  4183  00128A  6E39               	movwf	drawtext@y,c
  4184  00128C  0E7D               	movlw	low _Fan_Mode_Txt
  4185  00128E  6E3A               	movwf	drawtext@_text,c
  4186  001290  0E01               	movlw	high _Fan_Mode_Txt
  4187  001292  6E3B               	movwf	drawtext@_text+1,c
  4188  001294  0EF8               	movlw	248
  4189  001296  6E3D               	movwf	drawtext@color+1,c
  4190  001298  0E00               	movlw	0
  4191  00129A  6E3C               	movwf	drawtext@color,c
  4192  00129C  0E00               	movlw	0
  4193  00129E  6E3F               	movwf	drawtext@bg+1,c
  4194  0012A0  0E00               	movlw	0
  4195  0012A2  6E3E               	movwf	drawtext@bg,c
  4196  0012A4  0E01               	movlw	1
  4197  0012A6  6E40               	movwf	drawtext@size,c
  4198  0012A8  0E4B               	movlw	75
  4199  0012AA  ECD1  F01A         	call	_drawtext
  4200                           
  4201                           ;Main_Screen.c: 212: drawtext(105, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4202  0012AE  0E82               	movlw	130
  4203  0012B0  6E39               	movwf	drawtext@y,c
  4204  0012B2  0EE8               	movlw	low _Fan_SW_Txt
  4205  0012B4  6E3A               	movwf	drawtext@_text,c
  4206  0012B6  0E00               	movlw	high _Fan_SW_Txt
  4207  0012B8  6E3B               	movwf	drawtext@_text+1,c
  4208  0012BA  0EF8               	movlw	248
  4209  0012BC  6E3D               	movwf	drawtext@color+1,c
  4210  0012BE  0E00               	movlw	0
  4211  0012C0  6E3C               	movwf	drawtext@color,c
  4212  0012C2  0E00               	movlw	0
  4213  0012C4  6E3F               	movwf	drawtext@bg+1,c
  4214  0012C6  0E00               	movlw	0
  4215  0012C8  6E3E               	movwf	drawtext@bg,c
  4216  0012CA  0E01               	movlw	1
  4217  0012CC  6E40               	movwf	drawtext@size,c
  4218  0012CE  0E69               	movlw	105
  4219  0012D0  ECD1  F01A         	call	_drawtext
  4220                           
  4221                           ;Main_Screen.c: 213: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4222  0012D4  0E96               	movlw	150
  4223  0012D6  6E39               	movwf	drawtext@y,c
  4224  0012D8  0EE4               	movlw	low _DC_Txt
  4225  0012DA  6E3A               	movwf	drawtext@_text,c
  4226  0012DC  0E00               	movlw	high _DC_Txt
  4227  0012DE  6E3B               	movwf	drawtext@_text+1,c
  4228  0012E0  0E07               	movlw	7
  4229  0012E2  6E3D               	movwf	drawtext@color+1,c
  4230  0012E4  0EE0               	movlw	224
  4231  0012E6  6E3C               	movwf	drawtext@color,c
  4232  0012E8  0E00               	movlw	0
  4233  0012EA  6E3F               	movwf	drawtext@bg+1,c
  4234  0012EC  0E00               	movlw	0
  4235  0012EE  6E3E               	movwf	drawtext@bg,c
  4236  0012F0  0E01               	movlw	1
  4237  0012F2  6E40               	movwf	drawtext@size,c
  4238  0012F4  0E0A               	movlw	10
  4239  0012F6  ECD1  F01A         	call	_drawtext
  4240                           
  4241                           ;Main_Screen.c: 215: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4242  0012FA  0E96               	movlw	150
  4243  0012FC  6E39               	movwf	drawtext@y,c
  4244  0012FE  0E77               	movlw	low _Volt_Txt
  4245  001300  6E3A               	movwf	drawtext@_text,c
  4246  001302  0E01               	movlw	high _Volt_Txt
  4247  001304  6E3B               	movwf	drawtext@_text+1,c
  4248  001306  0E07               	movlw	7
  4249  001308  6E3D               	movwf	drawtext@color+1,c
  4250  00130A  0EE0               	movlw	224
  4251  00130C  6E3C               	movwf	drawtext@color,c
  4252  00130E  0E00               	movlw	0
  4253  001310  6E3F               	movwf	drawtext@bg+1,c
  4254  001312  0E00               	movlw	0
  4255  001314  6E3E               	movwf	drawtext@bg,c
  4256  001316  0E01               	movlw	1
  4257  001318  6E40               	movwf	drawtext@size,c
  4258  00131A  0E32               	movlw	50
  4259  00131C  ECD1  F01A         	call	_drawtext
  4260                           
  4261                           ;Main_Screen.c: 216: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4262  001320  0E96               	movlw	150
  4263  001322  6E39               	movwf	drawtext@y,c
  4264  001324  0E82               	movlw	low _RPM_Txt
  4265  001326  6E3A               	movwf	drawtext@_text,c
  4266  001328  0E01               	movlw	high _RPM_Txt
  4267  00132A  6E3B               	movwf	drawtext@_text+1,c
  4268  00132C  0E07               	movlw	7
  4269  00132E  6E3D               	movwf	drawtext@color+1,c
  4270  001330  0EE0               	movlw	224
  4271  001332  6E3C               	movwf	drawtext@color,c
  4272  001334  0E00               	movlw	0
  4273  001336  6E3F               	movwf	drawtext@bg+1,c
  4274  001338  0E00               	movlw	0
  4275  00133A  6E3E               	movwf	drawtext@bg,c
  4276  00133C  0E01               	movlw	1
  4277  00133E  6E40               	movwf	drawtext@size,c
  4278  001340  0E5D               	movlw	93
  4279  001342  ECD1  F01A         	call	_drawtext
  4280  001346  D000               	goto	l979
  4281  001348                     l979:
  4282  001348  0012               	return		;funcret
  4283  00134A                     __end_of_Update_Screen:
  4284                           	opt stack 0
  4285                           tblptru	equ	0xFF8
  4286                           tblptrh	equ	0xFF7
  4287                           tblptrl	equ	0xFF6
  4288                           tablat	equ	0xFF5
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           postdec1	equ	0xFE5
  4292                           fsr1l	equ	0xFE1
  4293                           status	equ	0xFD8
  4294                           
  4295 ;; *************** function _Toggle_Fan *****************
  4296 ;; Defined at:
  4297 ;;		line 79 in file "Fan_Support.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;		None
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;		None
  4302 ;; Return value:  Size  Location     Type
  4303 ;;		None               void
  4304 ;; Registers used:
  4305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:        0 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    8
  4318 ;; This function calls:
  4319 ;;		_Turn_Off_Fan
  4320 ;;		_Turn_On_Fan
  4321 ;; This function is called by:
  4322 ;;		_main
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           	psect	text2
  4327  004C66                     __ptext2:
  4328                           	opt stack 0
  4329  004C66                     _Toggle_Fan:
  4330                           	opt stack 22
  4331                           
  4332                           ;Fan_Support.c: 83: if (FAN == 1)
  4333                           
  4334                           ;incstack = 0
  4335  004C66  0100               	movlb	0	; () banked
  4336  004C68  05C1               	decf	_FAN& (0+255),w,b
  4337  004C6A  A4D8               	btfss	status,2,c
  4338  004C6C  D003               	goto	l9904
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;Fan_Support.c: 84: Turn_Off_Fan();
  4342  004C6E  ECC6  F025         	call	_Turn_Off_Fan	;wreg free
  4343  004C72  D003               	goto	l55
  4344  004C74                     l9904:
  4345                           
  4346                           ;Fan_Support.c: 85: else
  4347                           ;Fan_Support.c: 86: Turn_On_Fan();
  4348  004C74  EC57  F025         	call	_Turn_On_Fan	;wreg free
  4349  004C78  D000               	goto	l55
  4350  004C7A                     l55:
  4351  004C7A  0012               	return		;funcret
  4352  004C7C                     __end_of_Toggle_Fan:
  4353                           	opt stack 0
  4354                           tblptru	equ	0xFF8
  4355                           tblptrh	equ	0xFF7
  4356                           tblptrl	equ	0xFF6
  4357                           tablat	equ	0xFF5
  4358                           postinc0	equ	0xFEE
  4359                           wreg	equ	0xFE8
  4360                           postdec1	equ	0xFE5
  4361                           fsr1l	equ	0xFE1
  4362                           status	equ	0xFD8
  4363                           
  4364 ;; *************** function _Turn_On_Fan *****************
  4365 ;; Defined at:
  4366 ;;		line 98 in file "Fan_Support.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;		None
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;		None
  4371 ;; Return value:  Size  Location     Type
  4372 ;;		None               void
  4373 ;; Registers used:
  4374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;Total ram usage:        0 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    7
  4387 ;; This function calls:
  4388 ;;		_do_update_pwm
  4389 ;;		_printf
  4390 ;; This function is called by:
  4391 ;;		_Toggle_Fan
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           	psect	text3
  4396  004AAE                     __ptext3:
  4397                           	opt stack 0
  4398  004AAE                     _Turn_On_Fan:
  4399                           	opt stack 22
  4400                           
  4401                           ;Fan_Support.c: 100: printf ("Fan is turned on\r\n");
  4402                           
  4403                           ;incstack = 0
  4404  004AAE  0E48               	movlw	low STR_2
  4405  004AB0  0100               	movlb	0	; () banked
  4406  004AB2  6F86               	movwf	printf@f& (0+255),b
  4407  004AB4  0EFF               	movlw	high STR_2
  4408  004AB6  0100               	movlb	0	; () banked
  4409  004AB8  6F87               	movwf	(printf@f+1)& (0+255),b
  4410  004ABA  EC0E  F000         	call	_printf	;wreg free
  4411                           
  4412                           ;Fan_Support.c: 102: FAN = 1;
  4413  004ABE  0E01               	movlw	1
  4414  004AC0  0100               	movlb	0	; () banked
  4415  004AC2  6FC1               	movwf	_FAN& (0+255),b
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;Fan_Support.c: 103: PORTDbits.RD1 = 1;
  4419  004AC4  8283               	bsf	3971,1,c	;volatile
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;Fan_Support.c: 104: PORTDbits.RD2 = 1;
  4423  004AC6  8483               	bsf	3971,2,c	;volatile
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;Fan_Support.c: 105: do_update_pwm(duty_cycle);
  4427  004AC8  5064               	movf	_duty_cycle,w,c
  4428  004ACA  ECDF  F01C         	call	_do_update_pwm
  4429  004ACE  0012               	return		;funcret
  4430  004AD0                     __end_of_Turn_On_Fan:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           postdec1	equ	0xFE5
  4439                           fsr1l	equ	0xFE1
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function _Setup_Fan_Temp *****************
  4443 ;; Defined at:
  4444 ;;		line 36 in file "Setup_Fan_Temp.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;		None
  4449 ;; Return value:  Size  Location     Type
  4450 ;;		None               void
  4451 ;; Registers used:
  4452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;Total ram usage:        0 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:   12
  4465 ;; This function calls:
  4466 ;;		_DS1621_Read_Temp
  4467 ;;		_DS3231_Read_Time
  4468 ;;		_Decrease_Fan_Temp
  4469 ;;		_Do_Beep_Bad
  4470 ;;		_Do_Beep_Good
  4471 ;;		_Do_Save_New_Fan_Temp
  4472 ;;		_Increase_Fan_Temp
  4473 ;;		_Initialize_Setup_Fan_Screen
  4474 ;;		_Read_Volt
  4475 ;;		_Set_D1_RGB
  4476 ;;		_Set_D2_RGB
  4477 ;;		_Update_Setup_Fan_Screen
  4478 ;;		___awdiv
  4479 ;;		___ftge
  4480 ;;		___wmul
  4481 ;;		_check_for_button_input
  4482 ;;		_get_RPM
  4483 ;;		_printf
  4484 ;; This function is called by:
  4485 ;;		_main
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text4
  4490  002208                     __ptext4:
  4491                           	opt stack 0
  4492  002208                     _Setup_Fan_Temp:
  4493                           	opt stack 18
  4494                           
  4495                           ;Setup_Fan_Temp.c: 39: In_Fan_Temp_Setup = 1;
  4496                           
  4497                           ;incstack = 0
  4498  002208  0E01               	movlw	1
  4499  00220A  0100               	movlb	0	; () banked
  4500  00220C  6FC7               	movwf	_In_Fan_Temp_Setup& (0+255),b
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;Setup_Fan_Temp.c: 40: setup_fan_set_temp = fan_set_temp;
  4504  00220E  C0DC  F0D4         	movff	_fan_set_temp,_setup_fan_set_temp
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;Setup_Fan_Temp.c: 41: Initialize_Setup_Fan_Screen();
  4508  002212  ECE9  F019         	call	_Initialize_Setup_Fan_Screen	;wreg free
  4509                           
  4510                           ;Setup_Fan_Temp.c: 42: Update_Setup_Fan_Screen();
  4511  002216  EC21  F020         	call	_Update_Setup_Fan_Screen	;wreg free
  4512                           
  4513                           ;Setup_Fan_Temp.c: 44: while (In_Fan_Temp_Setup == 1)
  4514  00221A  D0E2               	goto	l10280
  4515  00221C                     l10222:
  4516                           
  4517                           ;Setup_Fan_Temp.c: 45: {
  4518                           ;Setup_Fan_Temp.c: 46: DS3231_Read_Time();
  4519  00221C  EC4A  F021         	call	_DS3231_Read_Time	;wreg free
  4520                           
  4521                           ;Setup_Fan_Temp.c: 48: if(tempSecond != second)
  4522  002220  5068               	movf	_second,w,c
  4523  002222  0100               	movlb	0	; () banked
  4524  002224  19DD               	xorwf	_tempSecond& (0+255),w,b
  4525  002226  B4D8               	btfsc	status,2,c
  4526  002228  D0A1               	goto	l10250
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;Setup_Fan_Temp.c: 49: {
  4530                           ;Setup_Fan_Temp.c: 50: tempSecond = second;
  4531  00222A  C068  F0DD         	movff	_second,_tempSecond
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;Setup_Fan_Temp.c: 51: rpm = get_RPM();
  4535  00222E  EC48  F023         	call	_get_RPM	;wreg free
  4536  002232  C01F  F05C         	movff	?_get_RPM,_rpm
  4537  002236  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  4538                           
  4539                           ;Setup_Fan_Temp.c: 53: volt = Read_Volt(0);
  4540  00223A  0E00               	movlw	0
  4541  00223C  EC13  F021         	call	_Read_Volt
  4542  002240  C03D  F0B8         	movff	?_Read_Volt,_volt
  4543  002244  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  4544  002248  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  4545                           
  4546                           ;Setup_Fan_Temp.c: 54: if (volt > 3.000) light_flag = 1;
  4547  00224C  0E00               	movlw	0
  4548  00224E  6E11               	movwf	___ftge@ff1,c
  4549  002250  0E40               	movlw	64
  4550  002252  6E12               	movwf	___ftge@ff1+1,c
  4551  002254  0E40               	movlw	64
  4552  002256  6E13               	movwf	___ftge@ff1+2,c
  4553  002258  C0B8  F014         	movff	_volt,___ftge@ff2
  4554  00225C  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  4555  002260  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  4556  002264  EC7C  F01E         	call	___ftge	;wreg free
  4557  002268  B0D8               	btfsc	status,0,c
  4558  00226A  D004               	goto	l10234
  4559  00226C  0E01               	movlw	1
  4560  00226E  0100               	movlb	0	; () banked
  4561  002270  6FD1               	movwf	_light_flag& (0+255),b
  4562  002272  D000               	goto	l10234
  4563  002274                     l10234:
  4564                           
  4565                           ;Setup_Fan_Temp.c: 55: tempC = DS1621_Read_Temp();
  4566  002274  EC01  F024         	call	_DS1621_Read_Temp	;wreg free
  4567  002278  5014               	movf	?_DS1621_Read_Temp,w,c
  4568  00227A  6E69               	movwf	_tempC,c
  4569                           
  4570                           ;Setup_Fan_Temp.c: 56: tempF = (tempC * 9 / 5) + 32;
  4571  00227C  5069               	movf	_tempC,w,c
  4572  00227E  6E11               	movwf	___wmul@multiplier,c
  4573  002280  6A12               	clrf	___wmul@multiplier+1,c
  4574  002282  BE11               	btfsc	___wmul@multiplier,7,c
  4575  002284  0612               	decf	___wmul@multiplier+1,f,c
  4576  002286  0E00               	movlw	0
  4577  002288  6E14               	movwf	___wmul@multiplicand+1,c
  4578  00228A  0E09               	movlw	9
  4579  00228C  6E13               	movwf	___wmul@multiplicand,c
  4580  00228E  ECD5  F024         	call	___wmul	;wreg free
  4581  002292  C011  F017         	movff	?___wmul,___awdiv@dividend
  4582  002296  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  4583  00229A  0E00               	movlw	0
  4584  00229C  6E1A               	movwf	___awdiv@divisor+1,c
  4585  00229E  0E05               	movlw	5
  4586  0022A0  6E19               	movwf	___awdiv@divisor,c
  4587  0022A2  EC31  F01E         	call	___awdiv	;wreg free
  4588  0022A6  5017               	movf	?___awdiv,w,c
  4589  0022A8  0F20               	addlw	32
  4590  0022AA  6E6A               	movwf	_tempF,c
  4591                           
  4592                           ;Setup_Fan_Temp.c: 57: Set_D1_RGB(duty_cycle);
  4593  0022AC  5064               	movf	_duty_cycle,w,c
  4594  0022AE  ECDA  F022         	call	_Set_D1_RGB
  4595                           
  4596                           ;Setup_Fan_Temp.c: 58: Set_D2_RGB(rpm);
  4597  0022B2  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  4598  0022B6  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  4599  0022BA  EC63  F022         	call	_Set_D2_RGB	;wreg free
  4600                           
  4601                           ;Setup_Fan_Temp.c: 60: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,
      +                          day,year);
  4602  0022BE  0E75               	movlw	low STR_4
  4603  0022C0  0100               	movlb	0	; () banked
  4604  0022C2  6F86               	movwf	printf@f& (0+255),b
  4605  0022C4  0EFE               	movlw	high STR_4
  4606  0022C6  0100               	movlb	0	; () banked
  4607  0022C8  6F87               	movwf	(printf@f+1)& (0+255),b
  4608  0022CA  C065  F088         	movff	_hour,?_printf+2
  4609  0022CE  0100               	movlb	0	; () banked
  4610  0022D0  6B89               	clrf	(?_printf+3)& (0+255),b
  4611  0022D2  C066  F08A         	movff	_minute,?_printf+4
  4612  0022D6  0100               	movlb	0	; () banked
  4613  0022D8  6B8B               	clrf	(?_printf+5)& (0+255),b
  4614  0022DA  C068  F08C         	movff	_second,?_printf+6
  4615  0022DE  0100               	movlb	0	; () banked
  4616  0022E0  6B8D               	clrf	(?_printf+7)& (0+255),b
  4617  0022E2  C067  F08E         	movff	_month,?_printf+8
  4618  0022E6  0100               	movlb	0	; () banked
  4619  0022E8  6B8F               	clrf	(?_printf+9)& (0+255),b
  4620  0022EA  C063  F090         	movff	_day,?_printf+10
  4621  0022EE  0100               	movlb	0	; () banked
  4622  0022F0  6B91               	clrf	(?_printf+11)& (0+255),b
  4623  0022F2  C06B  F092         	movff	_year,?_printf+12
  4624  0022F6  0100               	movlb	0	; () banked
  4625  0022F8  6B93               	clrf	(?_printf+13)& (0+255),b
  4626  0022FA  EC0E  F000         	call	_printf	;wreg free
  4627                           
  4628                           ;Setup_Fan_Temp.c: 61: printf (" Temp = %d C = %d F", tempC, tempF);
  4629  0022FE  0E0C               	movlw	low STR_35
  4630  002300  0100               	movlb	0	; () banked
  4631  002302  6F86               	movwf	printf@f& (0+255),b
  4632  002304  0EFF               	movlw	high STR_35
  4633  002306  0100               	movlb	0	; () banked
  4634  002308  6F87               	movwf	(printf@f+1)& (0+255),b
  4635  00230A  5069               	movf	_tempC,w,c
  4636  00230C  0100               	movlb	0	; () banked
  4637  00230E  6F88               	movwf	(?_printf+2)& (0+255),b
  4638  002310  6B89               	clrf	(?_printf+3)& (0+255),b
  4639  002312  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  4640  002314  0789               	decf	(?_printf+3)& (0+255),f,b
  4641  002316  506A               	movf	_tempF,w,c
  4642  002318  0100               	movlb	0	; () banked
  4643  00231A  6F8A               	movwf	(?_printf+4)& (0+255),b
  4644  00231C  6B8B               	clrf	(?_printf+5)& (0+255),b
  4645  00231E  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  4646  002320  078B               	decf	(?_printf+5)& (0+255),f,b
  4647  002322  EC0E  F000         	call	_printf	;wreg free
  4648                           
  4649                           ;Setup_Fan_Temp.c: 62: printf ("Light Sensor = %f V", volt);
  4650  002326  0E20               	movlw	low STR_6
  4651  002328  0100               	movlb	0	; () banked
  4652  00232A  6F86               	movwf	printf@f& (0+255),b
  4653  00232C  0EFF               	movlw	high STR_6
  4654  00232E  0100               	movlb	0	; () banked
  4655  002330  6F87               	movwf	(printf@f+1)& (0+255),b
  4656  002332  C0B8  F088         	movff	_volt,?_printf+2
  4657  002336  C0B9  F089         	movff	_volt+1,?_printf+3
  4658  00233A  C0BA  F08A         	movff	_volt+2,?_printf+4
  4659  00233E  EC0E  F000         	call	_printf	;wreg free
  4660                           
  4661                           ;Setup_Fan_Temp.c: 63: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_
      +                          flag);
  4662  002342  0E93               	movlw	low STR_7
  4663  002344  0100               	movlb	0	; () banked
  4664  002346  6F86               	movwf	printf@f& (0+255),b
  4665  002348  0EFE               	movlw	high STR_7
  4666  00234A  0100               	movlb	0	; () banked
  4667  00234C  6F87               	movwf	(printf@f+1)& (0+255),b
  4668  00234E  C05C  F088         	movff	_rpm,?_printf+2
  4669  002352  C05D  F089         	movff	_rpm+1,?_printf+3
  4670  002356  C064  F08A         	movff	_duty_cycle,?_printf+4
  4671  00235A  0100               	movlb	0	; () banked
  4672  00235C  6B8B               	clrf	(?_printf+5)& (0+255),b
  4673  00235E  C0D1  F08C         	movff	_light_flag,?_printf+6
  4674  002362  0100               	movlb	0	; () banked
  4675  002364  6B8D               	clrf	(?_printf+7)& (0+255),b
  4676  002366  EC0E  F000         	call	_printf	;wreg free
  4677  00236A  D000               	goto	l10250
  4678  00236C                     l10250:
  4679                           
  4680                           ;Setup_Fan_Temp.c: 64: }
  4681                           ;Setup_Fan_Temp.c: 65: if (check_for_button_input() == 1)
  4682  00236C  EC3A  F01D         	call	_check_for_button_input	;wreg free
  4683  002370  06E8               	decf	wreg,f,c
  4684  002372  A4D8               	btfss	status,2,c
  4685  002374  D035               	goto	l10280
  4686                           
  4687                           ;Setup_Fan_Temp.c: 66: {
  4688                           ;Setup_Fan_Temp.c: 67: Nec_ok = 0;
  4689  002376  0E00               	movlw	0
  4690  002378  0100               	movlb	0	; () banked
  4691  00237A  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  4692  00237C  0E00               	movlw	0
  4693  00237E  6FBB               	movwf	_Nec_ok& (0+255),b
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;Setup_Fan_Temp.c: 68: if (found >= 5 && found <= 8)
  4697  002380  0E04               	movlw	4
  4698  002382  0100               	movlb	0	; () banked
  4699  002384  65D0               	cpfsgt	_found& (0+255),b
  4700  002386  D029               	goto	l10278
  4701                           
  4702                           ; BSR set to: 0
  4703  002388  0E09               	movlw	9
  4704  00238A  0100               	movlb	0	; () banked
  4705  00238C  61D0               	cpfslt	_found& (0+255),b
  4706  00238E  D025               	goto	l10278
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;Setup_Fan_Temp.c: 69: {
  4710                           ;Setup_Fan_Temp.c: 70: Do_Beep_Good();
  4711  002390  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  4712                           
  4713                           ;Setup_Fan_Temp.c: 71: if (found == 5) Do_Save_New_Fan_Temp();
  4714  002394  0E05               	movlw	5
  4715  002396  0100               	movlb	0	; () banked
  4716  002398  19D0               	xorwf	_found& (0+255),w,b
  4717  00239A  A4D8               	btfss	status,2,c
  4718  00239C  D003               	goto	l10264
  4719                           
  4720                           ; BSR set to: 0
  4721  00239E  EC49  F026         	call	_Do_Save_New_Fan_Temp	;wreg free
  4722  0023A2  D000               	goto	l10264
  4723  0023A4                     l10264:
  4724                           
  4725                           ;Setup_Fan_Temp.c: 74: if (found == 8)
  4726  0023A4  0E08               	movlw	8
  4727  0023A6  0100               	movlb	0	; () banked
  4728  0023A8  19D0               	xorwf	_found& (0+255),w,b
  4729  0023AA  A4D8               	btfss	status,2,c
  4730  0023AC  D003               	goto	l10268
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;Setup_Fan_Temp.c: 75: Increase_Fan_Temp();
  4734  0023AE  EC0C  F026         	call	_Increase_Fan_Temp	;wreg free
  4735  0023B2  D000               	goto	l10268
  4736  0023B4                     l10268:
  4737                           
  4738                           ;Setup_Fan_Temp.c: 76: if (found == 6)
  4739  0023B4  0E06               	movlw	6
  4740  0023B6  0100               	movlb	0	; () banked
  4741  0023B8  19D0               	xorwf	_found& (0+255),w,b
  4742  0023BA  A4D8               	btfss	status,2,c
  4743  0023BC  D003               	goto	l10272
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;Setup_Fan_Temp.c: 77: Decrease_Fan_Temp();
  4747  0023BE  EC19  F026         	call	_Decrease_Fan_Temp	;wreg free
  4748  0023C2  D000               	goto	l10272
  4749  0023C4                     l10272:
  4750                           
  4751                           ;Setup_Fan_Temp.c: 78: if (found == 7)
  4752  0023C4  0E07               	movlw	7
  4753  0023C6  0100               	movlb	0	; () banked
  4754  0023C8  19D0               	xorwf	_found& (0+255),w,b
  4755  0023CA  A4D8               	btfss	status,2,c
  4756  0023CC  D003               	goto	l10276
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;Setup_Fan_Temp.c: 79: Increase_Fan_Temp();
  4760  0023CE  EC0C  F026         	call	_Increase_Fan_Temp	;wreg free
  4761  0023D2  D000               	goto	l10276
  4762  0023D4                     l10276:
  4763                           
  4764                           ;Setup_Fan_Temp.c: 83: found = 0xff;
  4765  0023D4  0100               	movlb	0	; () banked
  4766  0023D6  69D0               	setf	_found& (0+255),b
  4767                           
  4768                           ;Setup_Fan_Temp.c: 84: }
  4769  0023D8  D003               	goto	l10280
  4770  0023DA                     l10278:
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;Setup_Fan_Temp.c: 85: else
  4774                           ;Setup_Fan_Temp.c: 86: {
  4775                           ;Setup_Fan_Temp.c: 87: Do_Beep_Bad();
  4776  0023DA  ECE2  F025         	call	_Do_Beep_Bad	;wreg free
  4777  0023DE  D000               	goto	l10280
  4778  0023E0                     l10280:
  4779  0023E0  0100               	movlb	0	; () banked
  4780  0023E2  05C7               	decf	_In_Fan_Temp_Setup& (0+255),w,b
  4781  0023E4  B4D8               	btfsc	status,2,c
  4782  0023E6  D71A               	goto	l10222
  4783                           
  4784                           ; BSR set to: 0
  4785                           
  4786                           ; BSR set to: 0
  4787  0023E8  0012               	return		;funcret
  4788  0023EA                     __end_of_Setup_Fan_Temp:
  4789                           	opt stack 0
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           postinc0	equ	0xFEE
  4795                           wreg	equ	0xFE8
  4796                           postdec1	equ	0xFE5
  4797                           fsr1l	equ	0xFE1
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _Initialize_Setup_Fan_Screen *****************
  4801 ;; Defined at:
  4802 ;;		line 132 in file "Setup_Fan_Temp.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;		None               void
  4809 ;; Registers used:
  4810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;Total ram usage:        0 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:   10
  4823 ;; This function calls:
  4824 ;;		_LCD_Reset
  4825 ;;		_TFT_GreenTab_Initialize
  4826 ;;		_drawtext
  4827 ;;		_fillScreen
  4828 ;;		_strcpy
  4829 ;; This function is called by:
  4830 ;;		_Setup_Fan_Temp
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text5
  4835  0033D2                     __ptext5:
  4836                           	opt stack 0
  4837  0033D2                     _Initialize_Setup_Fan_Screen:
  4838                           	opt stack 19
  4839                           
  4840                           ;Setup_Fan_Temp.c: 134: LCD_Reset();
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;incstack = 0
  4844  0033D2  EC71  F026         	call	_LCD_Reset	;wreg free
  4845                           
  4846                           ;Setup_Fan_Temp.c: 135: TFT_GreenTab_Initialize();
  4847  0033D6  EC68  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  4848                           
  4849                           ;Setup_Fan_Temp.c: 136: fillScreen(0x0000);
  4850  0033DA  0E00               	movlw	0
  4851  0033DC  6E25               	movwf	fillScreen@color+1,c
  4852  0033DE  0E00               	movlw	0
  4853  0033E0  6E24               	movwf	fillScreen@color,c
  4854  0033E2  ECB8  F025         	call	_fillScreen	;wreg free
  4855                           
  4856                           ;Setup_Fan_Temp.c: 137: if (1 == 0)
  4857  0033E6  D005               	goto	l9740
  4858                           
  4859                           ;Setup_Fan_Temp.c: 138: {
  4860                           ;Setup_Fan_Temp.c: 139: Timing_Txt[12] = 'S';
  4861  0033E8  0E53               	movlw	83
  4862  0033EA  0101               	movlb	1	; () banked
  4863  0033EC  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  4864                           
  4865                           ;Setup_Fan_Temp.c: 140: Timing_Txt[13] = 'P';
  4866  0033EE  0E50               	movlw	80
  4867  0033F0  D004               	goto	L4
  4868  0033F2                     l9740:
  4869                           
  4870                           ;Setup_Fan_Temp.c: 142: else
  4871                           ;Setup_Fan_Temp.c: 143: {
  4872                           ;Setup_Fan_Temp.c: 144: Timing_Txt[12] = 'F';
  4873  0033F2  0E46               	movlw	70
  4874  0033F4  0101               	movlb	1	; () banked
  4875  0033F6  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  4876                           
  4877                           ;Setup_Fan_Temp.c: 145: Timing_Txt[13] = 'A';
  4878  0033F8  0E41               	movlw	65
  4879  0033FA                     L4:
  4880  0033FA  0101               	movlb	1	; () banked
  4881  0033FC  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  4882                           
  4883                           ; BSR set to: 1
  4884                           ;Setup_Fan_Temp.c: 146: }
  4885                           ;Setup_Fan_Temp.c: 147: Timing_Txt[14] = 24/10 + '0';
  4886  0033FE  0E32               	movlw	50
  4887  003400  0101               	movlb	1	; () banked
  4888  003402  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  4889                           
  4890                           ;Setup_Fan_Temp.c: 148: Timing_Txt[15] = 24%10 + '0';
  4891  003404  0E34               	movlw	52
  4892  003406  0101               	movlb	1	; () banked
  4893  003408  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  4894                           
  4895                           ;Setup_Fan_Temp.c: 149: Timing_Txt[17] = 3%10 + '0';
  4896  00340A  0E33               	movlw	51
  4897  00340C  0101               	movlb	1	; () banked
  4898  00340E  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  4899                           
  4900                           ;Setup_Fan_Temp.c: 150: Timing_Txt[19] = 13/10 + '0';
  4901  003410  0E31               	movlw	49
  4902  003412  0101               	movlb	1	; () banked
  4903  003414  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  4904                           
  4905                           ;Setup_Fan_Temp.c: 151: Timing_Txt[20] = 13%10 + '0';
  4906  003416  0E33               	movlw	51
  4907  003418  0101               	movlb	1	; () banked
  4908  00341A  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  4909                           
  4910                           ; BSR set to: 1
  4911                           ;Setup_Fan_Temp.c: 153: if (SYSTEM_ON == 1)
  4912  00341C  0462               	decf	_SYSTEM_ON,w,c
  4913  00341E  A4D8               	btfss	status,2,c
  4914  003420  D04C               	goto	l1102
  4915                           
  4916                           ; BSR set to: 1
  4917                           ;Setup_Fan_Temp.c: 154: {
  4918                           ;Setup_Fan_Temp.c: 155: drawtext(1 , 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  4919  003422  0E01               	movlw	1
  4920  003424  6E39               	movwf	drawtext@y,c
  4921  003426  0E3C               	movlw	low _Timing_Txt
  4922  003428  6E3A               	movwf	drawtext@_text,c
  4923  00342A  0E01               	movlw	high _Timing_Txt
  4924  00342C  6E3B               	movwf	drawtext@_text+1,c
  4925  00342E  0EFF               	movlw	255
  4926  003430  6E3D               	movwf	drawtext@color+1,c
  4927  003432  683C               	setf	drawtext@color,c
  4928  003434  0E00               	movlw	0
  4929  003436  6E3F               	movwf	drawtext@bg+1,c
  4930  003438  0E00               	movlw	0
  4931  00343A  6E3E               	movwf	drawtext@bg,c
  4932  00343C  0E01               	movlw	1
  4933  00343E  6E40               	movwf	drawtext@size,c
  4934  003440  0E01               	movlw	1
  4935  003442  ECD1  F01A         	call	_drawtext
  4936                           
  4937                           ;Setup_Fan_Temp.c: 158: strcpy(txt, " Fan Setup\0");
  4938  003446  C05E  F011         	movff	_txt,strcpy@to
  4939  00344A  C05F  F012         	movff	_txt+1,strcpy@to+1
  4940  00344E  0E94               	movlw	low STR_38
  4941  003450  6E13               	movwf	strcpy@from,c
  4942  003452  0EFF               	movlw	high STR_38
  4943  003454  6E14               	movwf	strcpy@from+1,c
  4944  003456  EC1F  F024         	call	_strcpy	;wreg free
  4945                           
  4946                           ;Setup_Fan_Temp.c: 159: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  4947  00345A  0E1A               	movlw	26
  4948  00345C  6E39               	movwf	drawtext@y,c
  4949  00345E  C05E  F03A         	movff	_txt,drawtext@_text
  4950  003462  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  4951  003466  0EFF               	movlw	255
  4952  003468  6E3D               	movwf	drawtext@color+1,c
  4953  00346A  0EE0               	movlw	224
  4954  00346C  6E3C               	movwf	drawtext@color,c
  4955  00346E  0E00               	movlw	0
  4956  003470  6E3F               	movwf	drawtext@bg+1,c
  4957  003472  0E00               	movlw	0
  4958  003474  6E3E               	movwf	drawtext@bg,c
  4959  003476  0E02               	movlw	2
  4960  003478  6E40               	movwf	drawtext@size,c
  4961  00347A  0E01               	movlw	1
  4962  00347C  ECD1  F01A         	call	_drawtext
  4963                           
  4964                           ;Setup_Fan_Temp.c: 161: strcpy(txt, "  Set Fan Temp");
  4965  003480  C05E  F011         	movff	_txt,strcpy@to
  4966  003484  C05F  F012         	movff	_txt+1,strcpy@to+1
  4967  003488  0E6C               	movlw	low STR_39
  4968  00348A  6E13               	movwf	strcpy@from,c
  4969  00348C  0EFF               	movlw	high STR_39
  4970  00348E  6E14               	movwf	strcpy@from+1,c
  4971  003490  EC1F  F024         	call	_strcpy	;wreg free
  4972                           
  4973                           ;Setup_Fan_Temp.c: 162: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  4974  003494  0E3C               	movlw	60
  4975  003496  6E39               	movwf	drawtext@y,c
  4976  003498  C05E  F03A         	movff	_txt,drawtext@_text
  4977  00349C  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  4978  0034A0  0E07               	movlw	7
  4979  0034A2  6E3D               	movwf	drawtext@color+1,c
  4980  0034A4  683C               	setf	drawtext@color,c
  4981  0034A6  0E00               	movlw	0
  4982  0034A8  6E3F               	movwf	drawtext@bg+1,c
  4983  0034AA  0E00               	movlw	0
  4984  0034AC  6E3E               	movwf	drawtext@bg,c
  4985  0034AE  0E01               	movlw	1
  4986  0034B0  6E40               	movwf	drawtext@size,c
  4987  0034B2  0E0F               	movlw	15
  4988  0034B4  ECD1  F01A         	call	_drawtext
  4989  0034B8  D000               	goto	l1102
  4990  0034BA                     l1102:
  4991  0034BA  0012               	return		;funcret
  4992  0034BC                     __end_of_Initialize_Setup_Fan_Screen:
  4993                           	opt stack 0
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           postinc0	equ	0xFEE
  4999                           wreg	equ	0xFE8
  5000                           postdec1	equ	0xFE5
  5001                           fsr1l	equ	0xFE1
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _Increase_Fan_Temp *****************
  5005 ;; Defined at:
  5006 ;;		line 93 in file "Setup_Fan_Temp.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;		None               void
  5013 ;; Registers used:
  5014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;Total ram usage:        0 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:   11
  5027 ;; This function calls:
  5028 ;;		_Update_Setup_Fan_Screen
  5029 ;; This function is called by:
  5030 ;;		_Setup_Fan_Temp
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text6
  5035  004C18                     __ptext6:
  5036                           	opt stack 0
  5037  004C18                     _Increase_Fan_Temp:
  5038                           	opt stack 18
  5039                           
  5040                           ;Setup_Fan_Temp.c: 97: setup_fan_set_temp++;
  5041                           
  5042                           ;incstack = 0
  5043  004C18  0100               	movlb	0	; () banked
  5044  004C1A  2BD4               	incf	_setup_fan_set_temp& (0+255),f,b
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;Setup_Fan_Temp.c: 98: if (setup_fan_set_temp > 110)
  5048  004C1C  0E6E               	movlw	110
  5049  004C1E  0100               	movlb	0	; () banked
  5050  004C20  65D4               	cpfsgt	_setup_fan_set_temp& (0+255),b
  5051  004C22  D004               	goto	l9766
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;Setup_Fan_Temp.c: 99: setup_fan_set_temp = 110;
  5055  004C24  0E6E               	movlw	110
  5056  004C26  0100               	movlb	0	; () banked
  5057  004C28  6FD4               	movwf	_setup_fan_set_temp& (0+255),b
  5058  004C2A  D000               	goto	l9766
  5059  004C2C                     l9766:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;Setup_Fan_Temp.c: 101: Update_Setup_Fan_Screen();
  5063  004C2C  EC21  F020         	call	_Update_Setup_Fan_Screen	;wreg free
  5064  004C30  0012               	return		;funcret
  5065  004C32                     __end_of_Increase_Fan_Temp:
  5066                           	opt stack 0
  5067                           tblptru	equ	0xFF8
  5068                           tblptrh	equ	0xFF7
  5069                           tblptrl	equ	0xFF6
  5070                           tablat	equ	0xFF5
  5071                           postinc0	equ	0xFEE
  5072                           wreg	equ	0xFE8
  5073                           postdec1	equ	0xFE5
  5074                           fsr1l	equ	0xFE1
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function _Do_Save_New_Fan_Temp *****************
  5078 ;; Defined at:
  5079 ;;		line 116 in file "Setup_Fan_Temp.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;		None
  5084 ;; Return value:  Size  Location     Type
  5085 ;;		None               void
  5086 ;; Registers used:
  5087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;Total ram usage:        0 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:   11
  5100 ;; This function calls:
  5101 ;;		_DS3231_Read_Time
  5102 ;;		_Initialize_Screen
  5103 ;; This function is called by:
  5104 ;;		_Setup_Fan_Temp
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text7
  5109  004C92                     __ptext7:
  5110                           	opt stack 0
  5111  004C92                     _Do_Save_New_Fan_Temp:
  5112                           	opt stack 18
  5113                           
  5114                           ;Setup_Fan_Temp.c: 118: fan_set_temp = setup_fan_set_temp;
  5115                           
  5116                           ;incstack = 0
  5117  004C92  C0D4  F0DC         	movff	_setup_fan_set_temp,_fan_set_temp
  5118                           
  5119                           ;Setup_Fan_Temp.c: 119: DS3231_Read_Time();
  5120  004C96  EC4A  F021         	call	_DS3231_Read_Time	;wreg free
  5121                           
  5122                           ;Setup_Fan_Temp.c: 120: Initialize_Screen();
  5123  004C9A  EC95  F00B         	call	_Initialize_Screen	;wreg free
  5124                           
  5125                           ;Setup_Fan_Temp.c: 121: In_Fan_Temp_Setup = 0;
  5126  004C9E  0E00               	movlw	0
  5127  004CA0  0100               	movlb	0	; () banked
  5128  004CA2  6FC7               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5129                           
  5130                           ; BSR set to: 0
  5131  004CA4  0012               	return		;funcret
  5132  004CA6                     __end_of_Do_Save_New_Fan_Temp:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           postinc0	equ	0xFEE
  5139                           wreg	equ	0xFE8
  5140                           postdec1	equ	0xFE5
  5141                           fsr1l	equ	0xFE1
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _Decrease_Fan_Temp *****************
  5145 ;; Defined at:
  5146 ;;		line 105 in file "Setup_Fan_Temp.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;		None
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;		None               void
  5153 ;; Registers used:
  5154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;Total ram usage:        0 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:   11
  5167 ;; This function calls:
  5168 ;;		_Update_Setup_Fan_Screen
  5169 ;; This function is called by:
  5170 ;;		_Setup_Fan_Temp
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           	psect	text8
  5175  004C32                     __ptext8:
  5176                           	opt stack 0
  5177  004C32                     _Decrease_Fan_Temp:
  5178                           	opt stack 18
  5179                           
  5180                           ;Setup_Fan_Temp.c: 109: setup_fan_set_temp--;
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;incstack = 0
  5184  004C32  0100               	movlb	0	; () banked
  5185  004C34  07D4               	decf	_setup_fan_set_temp& (0+255),f,b
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;Setup_Fan_Temp.c: 110: if (setup_fan_set_temp < 50)
  5189  004C36  0E32               	movlw	50
  5190  004C38  0100               	movlb	0	; () banked
  5191  004C3A  61D4               	cpfslt	_setup_fan_set_temp& (0+255),b
  5192  004C3C  D004               	goto	l9774
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;Setup_Fan_Temp.c: 111: setup_fan_set_temp = 50;
  5196  004C3E  0E32               	movlw	50
  5197  004C40  0100               	movlb	0	; () banked
  5198  004C42  6FD4               	movwf	_setup_fan_set_temp& (0+255),b
  5199  004C44  D000               	goto	l9774
  5200  004C46                     l9774:
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;Setup_Fan_Temp.c: 113: Update_Setup_Fan_Screen();
  5204  004C46  EC21  F020         	call	_Update_Setup_Fan_Screen	;wreg free
  5205  004C4A  0012               	return		;funcret
  5206  004C4C                     __end_of_Decrease_Fan_Temp:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           postinc0	equ	0xFEE
  5213                           wreg	equ	0xFE8
  5214                           postdec1	equ	0xFE5
  5215                           fsr1l	equ	0xFE1
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function _Update_Setup_Fan_Screen *****************
  5219 ;; Defined at:
  5220 ;;		line 166 in file "Setup_Fan_Temp.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  dc_char3        1   75[COMRAM] unsigned char 
  5225 ;;  dc_char2        1   74[COMRAM] unsigned char 
  5226 ;;  dc_char1        1   73[COMRAM] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;		None               void
  5229 ;; Registers used:
  5230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;Total ram usage:        3 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:   10
  5243 ;; This function calls:
  5244 ;;		___awdiv
  5245 ;;		___awmod
  5246 ;;		_drawtext
  5247 ;; This function is called by:
  5248 ;;		_Setup_Fan_Temp
  5249 ;;		_Increase_Fan_Temp
  5250 ;;		_Decrease_Fan_Temp
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           	psect	text9
  5255  004042                     __ptext9:
  5256                           	opt stack 0
  5257  004042                     _Update_Setup_Fan_Screen:
  5258                           	opt stack 19
  5259                           
  5260                           ;Setup_Fan_Temp.c: 168: char dc_char1 = (setup_fan_set_temp/100);
  5261                           
  5262                           ;incstack = 0
  5263  004042  C0D4  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5264  004046  6A18               	clrf	___awdiv@dividend+1,c
  5265  004048  0E00               	movlw	0
  5266  00404A  6E1A               	movwf	___awdiv@divisor+1,c
  5267  00404C  0E64               	movlw	100
  5268  00404E  6E19               	movwf	___awdiv@divisor,c
  5269  004050  EC31  F01E         	call	___awdiv	;wreg free
  5270  004054  5017               	movf	?___awdiv,w,c
  5271  004056  6E4A               	movwf	Update_Setup_Fan_Screen@dc_char1,c
  5272                           
  5273                           ;Setup_Fan_Temp.c: 169: char dc_char2 = (setup_fan_set_temp/10);
  5274  004058  C0D4  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5275  00405C  6A18               	clrf	___awdiv@dividend+1,c
  5276  00405E  0E00               	movlw	0
  5277  004060  6E1A               	movwf	___awdiv@divisor+1,c
  5278  004062  0E0A               	movlw	10
  5279  004064  6E19               	movwf	___awdiv@divisor,c
  5280  004066  EC31  F01E         	call	___awdiv	;wreg free
  5281  00406A  5017               	movf	?___awdiv,w,c
  5282  00406C  6E4B               	movwf	Update_Setup_Fan_Screen@dc_char2,c
  5283                           
  5284                           ;Setup_Fan_Temp.c: 170: char dc_char3 = (setup_fan_set_temp%10);
  5285  00406E  C0D4  F03D         	movff	_setup_fan_set_temp,___awmod@dividend
  5286  004072  6A3E               	clrf	___awmod@dividend+1,c
  5287  004074  0E00               	movlw	0
  5288  004076  6E40               	movwf	___awmod@divisor+1,c
  5289  004078  0E0A               	movlw	10
  5290  00407A  6E3F               	movwf	___awmod@divisor,c
  5291  00407C  EC62  F020         	call	___awmod	;wreg free
  5292  004080  503D               	movf	?___awmod,w,c
  5293  004082  6E4C               	movwf	Update_Setup_Fan_Screen@dc_char3,c
  5294                           
  5295                           ;Setup_Fan_Temp.c: 173: setup_fan_set_text[0] = dc_char1 + '0';
  5296  004084  504A               	movf	Update_Setup_Fan_Screen@dc_char1,w,c
  5297  004086  0F30               	addlw	48
  5298  004088  0101               	movlb	1	; () banked
  5299  00408A  6F87               	movwf	_setup_fan_set_text& (0+255),b
  5300                           
  5301                           ; BSR set to: 1
  5302                           ;Setup_Fan_Temp.c: 174: setup_fan_set_text[1] = dc_char2 + '0';
  5303  00408C  504B               	movf	Update_Setup_Fan_Screen@dc_char2,w,c
  5304  00408E  0F30               	addlw	48
  5305  004090  0101               	movlb	1	; () banked
  5306  004092  6F88               	movwf	(_setup_fan_set_text+1)& (0+255),b
  5307                           
  5308                           ; BSR set to: 1
  5309                           ;Setup_Fan_Temp.c: 175: setup_fan_set_text[2] = dc_char3 + '0';
  5310  004094  504C               	movf	Update_Setup_Fan_Screen@dc_char3,w,c
  5311  004096  0F30               	addlw	48
  5312  004098  0101               	movlb	1	; () banked
  5313  00409A  6F89               	movwf	(_setup_fan_set_text+2)& (0+255),b
  5314                           
  5315                           ; BSR set to: 1
  5316                           ;Setup_Fan_Temp.c: 177: drawtext(40, 74 ,setup_fan_set_text, 0xF800, 0x0000, 2);
  5317  00409C  0E4A               	movlw	74
  5318  00409E  6E39               	movwf	drawtext@y,c
  5319  0040A0  0E87               	movlw	low _setup_fan_set_text
  5320  0040A2  6E3A               	movwf	drawtext@_text,c
  5321  0040A4  0E01               	movlw	high _setup_fan_set_text
  5322  0040A6  6E3B               	movwf	drawtext@_text+1,c
  5323  0040A8  0EF8               	movlw	248
  5324  0040AA  6E3D               	movwf	drawtext@color+1,c
  5325  0040AC  0E00               	movlw	0
  5326  0040AE  6E3C               	movwf	drawtext@color,c
  5327  0040B0  0E00               	movlw	0
  5328  0040B2  6E3F               	movwf	drawtext@bg+1,c
  5329  0040B4  0E00               	movlw	0
  5330  0040B6  6E3E               	movwf	drawtext@bg,c
  5331  0040B8  0E02               	movlw	2
  5332  0040BA  6E40               	movwf	drawtext@size,c
  5333  0040BC  0E28               	movlw	40
  5334  0040BE  ECD1  F01A         	call	_drawtext
  5335  0040C2  0012               	return		;funcret
  5336  0040C4                     __end_of_Update_Setup_Fan_Screen:
  5337                           	opt stack 0
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           postinc0	equ	0xFEE
  5343                           wreg	equ	0xFE8
  5344                           postdec1	equ	0xFE5
  5345                           fsr1l	equ	0xFE1
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function _Increase_Duty_Cycle *****************
  5349 ;; Defined at:
  5350 ;;		line 109 in file "Fan_Support.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;		None
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;		None
  5355 ;; Return value:  Size  Location     Type
  5356 ;;		None               void
  5357 ;; Registers used:
  5358 ;;		wreg, status,2, status,0, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;Total ram usage:        0 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    7
  5371 ;; This function calls:
  5372 ;;		_Do_Beep
  5373 ;;		_do_update_pwm
  5374 ;; This function is called by:
  5375 ;;		_main
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text10
  5380  004870                     __ptext10:
  5381                           	opt stack 0
  5382  004870                     _Increase_Duty_Cycle:
  5383                           	opt stack 23
  5384                           
  5385                           ;Fan_Support.c: 111: if (FANMODE == 0)
  5386                           
  5387                           ;incstack = 0
  5388  004870  0100               	movlb	0	; () banked
  5389  004872  51C2               	movf	_FANMODE& (0+255),w,b
  5390  004874  A4D8               	btfss	status,2,c
  5391  004876  D013               	goto	l67
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;Fan_Support.c: 112: {
  5395                           ;Fan_Support.c: 115: if (duty_cycle == 100)
  5396  004878  0E64               	movlw	100
  5397  00487A  1864               	xorwf	_duty_cycle,w,c
  5398  00487C  A4D8               	btfss	status,2,c
  5399  00487E  D008               	goto	l9912
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;Fan_Support.c: 116: {
  5403                           ;Fan_Support.c: 117: Do_Beep();
  5404  004880  ECF0  F025         	call	_Do_Beep	;wreg free
  5405                           
  5406                           ;Fan_Support.c: 118: Do_Beep();
  5407  004884  ECF0  F025         	call	_Do_Beep	;wreg free
  5408                           
  5409                           ;Fan_Support.c: 119: do_update_pwm(duty_cycle);
  5410  004888  5064               	movf	_duty_cycle,w,c
  5411  00488A  ECDF  F01C         	call	_do_update_pwm
  5412                           
  5413                           ;Fan_Support.c: 120: }
  5414  00488E  D007               	goto	l67
  5415  004890                     l9912:
  5416                           
  5417                           ;Fan_Support.c: 121: else
  5418                           ;Fan_Support.c: 122: {
  5419                           ;Fan_Support.c: 123: duty_cycle = duty_cycle + 5;
  5420  004890  5064               	movf	_duty_cycle,w,c
  5421  004892  0F05               	addlw	5
  5422  004894  6E64               	movwf	_duty_cycle,c
  5423                           
  5424                           ;Fan_Support.c: 124: do_update_pwm(duty_cycle);
  5425  004896  5064               	movf	_duty_cycle,w,c
  5426  004898  ECDF  F01C         	call	_do_update_pwm
  5427  00489C  D000               	goto	l67
  5428  00489E                     l67:
  5429  00489E  0012               	return		;funcret
  5430  0048A0                     __end_of_Increase_Duty_Cycle:
  5431                           	opt stack 0
  5432                           tblptru	equ	0xFF8
  5433                           tblptrh	equ	0xFF7
  5434                           tblptrl	equ	0xFF6
  5435                           tablat	equ	0xFF5
  5436                           postinc0	equ	0xFEE
  5437                           wreg	equ	0xFE8
  5438                           postdec1	equ	0xFE5
  5439                           fsr1l	equ	0xFE1
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function _Do_Setup_Time *****************
  5443 ;; Defined at:
  5444 ;;		line 41 in file "Setup_Time.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;		None               void
  5451 ;; Registers used:
  5452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;Total ram usage:        0 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:   12
  5465 ;; This function calls:
  5466 ;;		_DS1621_Read_Temp
  5467 ;;		_DS3231_Read_Time
  5468 ;;		_Decrease_Time
  5469 ;;		_Do_Beep_Bad
  5470 ;;		_Do_Beep_Good
  5471 ;;		_Do_Save_New_Time
  5472 ;;		_Exit_Time_Setup
  5473 ;;		_Go_Next_Field
  5474 ;;		_Go_Prev_Field
  5475 ;;		_Increase_Time
  5476 ;;		_Initialize_Setup_Time_Screen
  5477 ;;		_Monitor_Fan
  5478 ;;		_Read_Volt
  5479 ;;		_Set_D1_RGB
  5480 ;;		_Set_D2_RGB
  5481 ;;		_Update_Setup_Time_Screen
  5482 ;;		___awdiv
  5483 ;;		___ftge
  5484 ;;		___wmul
  5485 ;;		_bcd_2_dec
  5486 ;;		_check_for_button_input
  5487 ;;		_get_RPM
  5488 ;;		_printf
  5489 ;; This function is called by:
  5490 ;;		_main
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text11
  5495  001FCA                     __ptext11:
  5496                           	opt stack 0
  5497  001FCA                     _Do_Setup_Time:
  5498                           	opt stack 18
  5499                           
  5500                           ;Setup_Time.c: 44: Select_Field = 0;
  5501                           
  5502                           ;incstack = 0
  5503  001FCA  0E00               	movlw	0
  5504  001FCC  0100               	movlb	0	; () banked
  5505  001FCE  6FCB               	movwf	_Select_Field& (0+255),b
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;Setup_Time.c: 46: DS3231_Read_Time();
  5509  001FD0  EC4A  F021         	call	_DS3231_Read_Time	;wreg free
  5510                           
  5511                           ;Setup_Time.c: 47: setup_second = bcd_2_dec(second);
  5512  001FD4  5068               	movf	_second,w,c
  5513  001FD6  ECC0  F024         	call	_bcd_2_dec
  5514  001FDA  0100               	movlb	0	; () banked
  5515  001FDC  6FD8               	movwf	_setup_second& (0+255),b
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;Setup_Time.c: 48: setup_minute = bcd_2_dec(minute);
  5519  001FDE  5066               	movf	_minute,w,c
  5520  001FE0  ECC0  F024         	call	_bcd_2_dec
  5521  001FE4  0100               	movlb	0	; () banked
  5522  001FE6  6FD6               	movwf	_setup_minute& (0+255),b
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;Setup_Time.c: 49: setup_hour = bcd_2_dec(hour);
  5526  001FE8  5065               	movf	_hour,w,c
  5527  001FEA  ECC0  F024         	call	_bcd_2_dec
  5528  001FEE  0100               	movlb	0	; () banked
  5529  001FF0  6FD5               	movwf	_setup_hour& (0+255),b
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;Setup_Time.c: 50: setup_day = bcd_2_dec(day);
  5533  001FF2  5063               	movf	_day,w,c
  5534  001FF4  ECC0  F024         	call	_bcd_2_dec
  5535  001FF8  0100               	movlb	0	; () banked
  5536  001FFA  6FD3               	movwf	_setup_day& (0+255),b
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;Setup_Time.c: 51: setup_month = bcd_2_dec(month);
  5540  001FFC  5067               	movf	_month,w,c
  5541  001FFE  ECC0  F024         	call	_bcd_2_dec
  5542  002002  0100               	movlb	0	; () banked
  5543  002004  6FD7               	movwf	_setup_month& (0+255),b
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;Setup_Time.c: 52: setup_year = bcd_2_dec(year);
  5547  002006  506B               	movf	_year,w,c
  5548  002008  ECC0  F024         	call	_bcd_2_dec
  5549  00200C  0100               	movlb	0	; () banked
  5550  00200E  6FD9               	movwf	_setup_year& (0+255),b
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;Setup_Time.c: 54: Initialize_Setup_Time_Screen();
  5554  002010  ECC0  F016         	call	_Initialize_Setup_Time_Screen	;wreg free
  5555                           
  5556                           ;Setup_Time.c: 55: Update_Setup_Time_Screen();
  5557  002014  EC53  F015         	call	_Update_Setup_Time_Screen	;wreg free
  5558                           
  5559                           ;Setup_Time.c: 56: In_Time_Setup = 1;
  5560  002018  0E01               	movlw	1
  5561  00201A  0100               	movlb	0	; () banked
  5562  00201C  6FC8               	movwf	_In_Time_Setup& (0+255),b
  5563                           
  5564                           ;Setup_Time.c: 58: while (In_Time_Setup == 1)
  5565  00201E  D0EF               	goto	l10212
  5566  002020                     l10146:
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;Setup_Time.c: 59: {
  5570                           ;Setup_Time.c: 60: DS3231_Read_Time();
  5571  002020  EC4A  F021         	call	_DS3231_Read_Time	;wreg free
  5572                           
  5573                           ;Setup_Time.c: 63: if(tempSecond != second)
  5574  002024  5068               	movf	_second,w,c
  5575  002026  0100               	movlb	0	; () banked
  5576  002028  19DD               	xorwf	_tempSecond& (0+255),w,b
  5577  00202A  B4D8               	btfsc	status,2,c
  5578  00202C  D0A3               	goto	l10176
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;Setup_Time.c: 64: {
  5582                           ;Setup_Time.c: 65: tempSecond = second;
  5583  00202E  C068  F0DD         	movff	_second,_tempSecond
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;Setup_Time.c: 66: rpm = get_RPM();
  5587  002032  EC48  F023         	call	_get_RPM	;wreg free
  5588  002036  C01F  F05C         	movff	?_get_RPM,_rpm
  5589  00203A  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  5590                           
  5591                           ;Setup_Time.c: 68: volt = Read_Volt(0);
  5592  00203E  0E00               	movlw	0
  5593  002040  EC13  F021         	call	_Read_Volt
  5594  002044  C03D  F0B8         	movff	?_Read_Volt,_volt
  5595  002048  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  5596  00204C  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  5597                           
  5598                           ;Setup_Time.c: 69: if (volt > 3.000) light_flag = 1;
  5599  002050  0E00               	movlw	0
  5600  002052  6E11               	movwf	___ftge@ff1,c
  5601  002054  0E40               	movlw	64
  5602  002056  6E12               	movwf	___ftge@ff1+1,c
  5603  002058  0E40               	movlw	64
  5604  00205A  6E13               	movwf	___ftge@ff1+2,c
  5605  00205C  C0B8  F014         	movff	_volt,___ftge@ff2
  5606  002060  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  5607  002064  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  5608  002068  EC7C  F01E         	call	___ftge	;wreg free
  5609  00206C  B0D8               	btfsc	status,0,c
  5610  00206E  D004               	goto	l10158
  5611  002070  0E01               	movlw	1
  5612  002072  0100               	movlb	0	; () banked
  5613  002074  6FD1               	movwf	_light_flag& (0+255),b
  5614  002076  D000               	goto	l10158
  5615  002078                     l10158:
  5616                           
  5617                           ;Setup_Time.c: 70: tempC = DS1621_Read_Temp();
  5618  002078  EC01  F024         	call	_DS1621_Read_Temp	;wreg free
  5619  00207C  5014               	movf	?_DS1621_Read_Temp,w,c
  5620  00207E  6E69               	movwf	_tempC,c
  5621                           
  5622                           ;Setup_Time.c: 71: tempF = (tempC * 9 / 5) + 32;
  5623  002080  5069               	movf	_tempC,w,c
  5624  002082  6E11               	movwf	___wmul@multiplier,c
  5625  002084  6A12               	clrf	___wmul@multiplier+1,c
  5626  002086  BE11               	btfsc	___wmul@multiplier,7,c
  5627  002088  0612               	decf	___wmul@multiplier+1,f,c
  5628  00208A  0E00               	movlw	0
  5629  00208C  6E14               	movwf	___wmul@multiplicand+1,c
  5630  00208E  0E09               	movlw	9
  5631  002090  6E13               	movwf	___wmul@multiplicand,c
  5632  002092  ECD5  F024         	call	___wmul	;wreg free
  5633  002096  C011  F017         	movff	?___wmul,___awdiv@dividend
  5634  00209A  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  5635  00209E  0E00               	movlw	0
  5636  0020A0  6E1A               	movwf	___awdiv@divisor+1,c
  5637  0020A2  0E05               	movlw	5
  5638  0020A4  6E19               	movwf	___awdiv@divisor,c
  5639  0020A6  EC31  F01E         	call	___awdiv	;wreg free
  5640  0020AA  5017               	movf	?___awdiv,w,c
  5641  0020AC  0F20               	addlw	32
  5642  0020AE  6E6A               	movwf	_tempF,c
  5643                           
  5644                           ;Setup_Time.c: 72: Set_D1_RGB(duty_cycle);
  5645  0020B0  5064               	movf	_duty_cycle,w,c
  5646  0020B2  ECDA  F022         	call	_Set_D1_RGB
  5647                           
  5648                           ;Setup_Time.c: 73: Set_D2_RGB(rpm);
  5649  0020B6  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  5650  0020BA  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  5651  0020BE  EC63  F022         	call	_Set_D2_RGB	;wreg free
  5652                           
  5653                           ;Setup_Time.c: 75: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,
      +                          year);
  5654  0020C2  0E75               	movlw	low STR_4
  5655  0020C4  0100               	movlb	0	; () banked
  5656  0020C6  6F86               	movwf	printf@f& (0+255),b
  5657  0020C8  0EFE               	movlw	high STR_4
  5658  0020CA  0100               	movlb	0	; () banked
  5659  0020CC  6F87               	movwf	(printf@f+1)& (0+255),b
  5660  0020CE  C065  F088         	movff	_hour,?_printf+2
  5661  0020D2  0100               	movlb	0	; () banked
  5662  0020D4  6B89               	clrf	(?_printf+3)& (0+255),b
  5663  0020D6  C066  F08A         	movff	_minute,?_printf+4
  5664  0020DA  0100               	movlb	0	; () banked
  5665  0020DC  6B8B               	clrf	(?_printf+5)& (0+255),b
  5666  0020DE  C068  F08C         	movff	_second,?_printf+6
  5667  0020E2  0100               	movlb	0	; () banked
  5668  0020E4  6B8D               	clrf	(?_printf+7)& (0+255),b
  5669  0020E6  C067  F08E         	movff	_month,?_printf+8
  5670  0020EA  0100               	movlb	0	; () banked
  5671  0020EC  6B8F               	clrf	(?_printf+9)& (0+255),b
  5672  0020EE  C063  F090         	movff	_day,?_printf+10
  5673  0020F2  0100               	movlb	0	; () banked
  5674  0020F4  6B91               	clrf	(?_printf+11)& (0+255),b
  5675  0020F6  C06B  F092         	movff	_year,?_printf+12
  5676  0020FA  0100               	movlb	0	; () banked
  5677  0020FC  6B93               	clrf	(?_printf+13)& (0+255),b
  5678  0020FE  EC0E  F000         	call	_printf	;wreg free
  5679                           
  5680                           ;Setup_Time.c: 76: printf (" Temp = %d C = %d F ", tempC, tempF);
  5681  002102  0EF7               	movlw	low STR_5
  5682  002104  0100               	movlb	0	; () banked
  5683  002106  6F86               	movwf	printf@f& (0+255),b
  5684  002108  0EFE               	movlw	high STR_5
  5685  00210A  0100               	movlb	0	; () banked
  5686  00210C  6F87               	movwf	(printf@f+1)& (0+255),b
  5687  00210E  5069               	movf	_tempC,w,c
  5688  002110  0100               	movlb	0	; () banked
  5689  002112  6F88               	movwf	(?_printf+2)& (0+255),b
  5690  002114  6B89               	clrf	(?_printf+3)& (0+255),b
  5691  002116  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  5692  002118  0789               	decf	(?_printf+3)& (0+255),f,b
  5693  00211A  506A               	movf	_tempF,w,c
  5694  00211C  0100               	movlb	0	; () banked
  5695  00211E  6F8A               	movwf	(?_printf+4)& (0+255),b
  5696  002120  6B8B               	clrf	(?_printf+5)& (0+255),b
  5697  002122  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  5698  002124  078B               	decf	(?_printf+5)& (0+255),f,b
  5699  002126  EC0E  F000         	call	_printf	;wreg free
  5700                           
  5701                           ;Setup_Time.c: 77: printf ("Light Sensor = %f V", volt);
  5702  00212A  0E20               	movlw	low STR_6
  5703  00212C  0100               	movlb	0	; () banked
  5704  00212E  6F86               	movwf	printf@f& (0+255),b
  5705  002130  0EFF               	movlw	high STR_6
  5706  002132  0100               	movlb	0	; () banked
  5707  002134  6F87               	movwf	(printf@f+1)& (0+255),b
  5708  002136  C0B8  F088         	movff	_volt,?_printf+2
  5709  00213A  C0B9  F089         	movff	_volt+1,?_printf+3
  5710  00213E  C0BA  F08A         	movff	_volt+2,?_printf+4
  5711  002142  EC0E  F000         	call	_printf	;wreg free
  5712                           
  5713                           ;Setup_Time.c: 78: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_flag
      +                          );
  5714  002146  0E93               	movlw	low STR_7
  5715  002148  0100               	movlb	0	; () banked
  5716  00214A  6F86               	movwf	printf@f& (0+255),b
  5717  00214C  0EFE               	movlw	high STR_7
  5718  00214E  0100               	movlb	0	; () banked
  5719  002150  6F87               	movwf	(printf@f+1)& (0+255),b
  5720  002152  C05C  F088         	movff	_rpm,?_printf+2
  5721  002156  C05D  F089         	movff	_rpm+1,?_printf+3
  5722  00215A  C064  F08A         	movff	_duty_cycle,?_printf+4
  5723  00215E  0100               	movlb	0	; () banked
  5724  002160  6B8B               	clrf	(?_printf+5)& (0+255),b
  5725  002162  C0D1  F08C         	movff	_light_flag,?_printf+6
  5726  002166  0100               	movlb	0	; () banked
  5727  002168  6B8D               	clrf	(?_printf+7)& (0+255),b
  5728  00216A  EC0E  F000         	call	_printf	;wreg free
  5729                           
  5730                           ;Setup_Time.c: 79: Monitor_Fan();
  5731  00216E  ECB4  F022         	call	_Monitor_Fan	;wreg free
  5732  002172  D000               	goto	l10176
  5733  002174                     l10176:
  5734                           
  5735                           ;Setup_Time.c: 81: }
  5736                           ;Setup_Time.c: 82: if (check_for_button_input() == 1)
  5737  002174  EC3A  F01D         	call	_check_for_button_input	;wreg free
  5738  002178  06E8               	decf	wreg,f,c
  5739  00217A  A4D8               	btfss	status,2,c
  5740  00217C  D040               	goto	l10212
  5741                           
  5742                           ;Setup_Time.c: 83: {
  5743                           ;Setup_Time.c: 85: if (found >= 3 && found <= 8)
  5744  00217E  0E02               	movlw	2
  5745  002180  0100               	movlb	0	; () banked
  5746  002182  65D0               	cpfsgt	_found& (0+255),b
  5747  002184  D039               	goto	l10210
  5748                           
  5749                           ; BSR set to: 0
  5750  002186  0E09               	movlw	9
  5751  002188  0100               	movlb	0	; () banked
  5752  00218A  61D0               	cpfslt	_found& (0+255),b
  5753  00218C  D035               	goto	l10210
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;Setup_Time.c: 86: {
  5757                           ;Setup_Time.c: 87: Do_Beep_Good();
  5758  00218E  ECD4  F025         	call	_Do_Beep_Good	;wreg free
  5759                           
  5760                           ;Setup_Time.c: 88: if (found == 3)
  5761  002192  0E03               	movlw	3
  5762  002194  0100               	movlb	0	; () banked
  5763  002196  19D0               	xorwf	_found& (0+255),w,b
  5764  002198  A4D8               	btfss	status,2,c
  5765  00219A  D003               	goto	l10188
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;Setup_Time.c: 89: Go_Prev_Field();
  5769  00219C  EC79  F025         	call	_Go_Prev_Field	;wreg free
  5770  0021A0  D000               	goto	l10188
  5771  0021A2                     l10188:
  5772                           
  5773                           ;Setup_Time.c: 90: if (found == 4)
  5774  0021A2  0E04               	movlw	4
  5775  0021A4  0100               	movlb	0	; () banked
  5776  0021A6  19D0               	xorwf	_found& (0+255),w,b
  5777  0021A8  A4D8               	btfss	status,2,c
  5778  0021AA  D003               	goto	l10192
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;Setup_Time.c: 91: Go_Next_Field();
  5782  0021AC  EC89  F025         	call	_Go_Next_Field	;wreg free
  5783  0021B0  D000               	goto	l10192
  5784  0021B2                     l10192:
  5785                           
  5786                           ;Setup_Time.c: 92: if (found == 5)
  5787  0021B2  0E05               	movlw	5
  5788  0021B4  0100               	movlb	0	; () banked
  5789  0021B6  19D0               	xorwf	_found& (0+255),w,b
  5790  0021B8  A4D8               	btfss	status,2,c
  5791  0021BA  D003               	goto	l10196
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;Setup_Time.c: 93: Do_Save_New_Time();
  5795  0021BC  EC53  F026         	call	_Do_Save_New_Time	;wreg free
  5796  0021C0  D000               	goto	l10196
  5797  0021C2                     l10196:
  5798                           
  5799                           ;Setup_Time.c: 94: if (found == 8)
  5800  0021C2  0E08               	movlw	8
  5801  0021C4  0100               	movlb	0	; () banked
  5802  0021C6  19D0               	xorwf	_found& (0+255),w,b
  5803  0021C8  A4D8               	btfss	status,2,c
  5804  0021CA  D003               	goto	l10200
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;Setup_Time.c: 95: Exit_Time_Setup();
  5808  0021CC  ECB0  F026         	call	_Exit_Time_Setup	;wreg free
  5809  0021D0  D000               	goto	l10200
  5810  0021D2                     l10200:
  5811                           
  5812                           ;Setup_Time.c: 96: if (found == 6)
  5813  0021D2  0E06               	movlw	6
  5814  0021D4  0100               	movlb	0	; () banked
  5815  0021D6  19D0               	xorwf	_found& (0+255),w,b
  5816  0021D8  A4D8               	btfss	status,2,c
  5817  0021DA  D003               	goto	l10204
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;Setup_Time.c: 97: Decrease_Time();
  5821  0021DC  EC84  F01C         	call	_Decrease_Time	;wreg free
  5822  0021E0  D000               	goto	l10204
  5823  0021E2                     l10204:
  5824                           
  5825                           ;Setup_Time.c: 98: if (found == 7)
  5826  0021E2  0E07               	movlw	7
  5827  0021E4  0100               	movlb	0	; () banked
  5828  0021E6  19D0               	xorwf	_found& (0+255),w,b
  5829  0021E8  A4D8               	btfss	status,2,c
  5830  0021EA  D003               	goto	l10208
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;Setup_Time.c: 99: Increase_Time();
  5834  0021EC  EC91  F01D         	call	_Increase_Time	;wreg free
  5835  0021F0  D000               	goto	l10208
  5836  0021F2                     l10208:
  5837                           
  5838                           ;Setup_Time.c: 100: found = 0xff;
  5839  0021F2  0100               	movlb	0	; () banked
  5840  0021F4  69D0               	setf	_found& (0+255),b
  5841                           
  5842                           ;Setup_Time.c: 101: }
  5843  0021F6  D003               	goto	l10212
  5844  0021F8                     l10210:
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;Setup_Time.c: 102: else
  5848                           ;Setup_Time.c: 103: {
  5849                           ;Setup_Time.c: 104: Do_Beep_Bad();
  5850  0021F8  ECE2  F025         	call	_Do_Beep_Bad	;wreg free
  5851  0021FC  D000               	goto	l10212
  5852  0021FE                     l10212:
  5853  0021FE  0100               	movlb	0	; () banked
  5854  002200  05C8               	decf	_In_Time_Setup& (0+255),w,b
  5855  002202  B4D8               	btfsc	status,2,c
  5856  002204  D70D               	goto	l10146
  5857                           
  5858                           ; BSR set to: 0
  5859                           
  5860                           ; BSR set to: 0
  5861  002206  0012               	return		;funcret
  5862  002208                     __end_of_Do_Setup_Time:
  5863                           	opt stack 0
  5864                           tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           postdec1	equ	0xFE5
  5871                           fsr1l	equ	0xFE1
  5872                           status	equ	0xFD8
  5873                           
  5874 ;; *************** function _get_RPM *****************
  5875 ;; Defined at:
  5876 ;;		line 70 in file "Fan_Support.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;		None
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  RPS             2   32[COMRAM] int 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  2   30[COMRAM] int 
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;Total ram usage:        4 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    4
  5897 ;; This function calls:
  5898 ;;		___awdiv
  5899 ;;		___wmul
  5900 ;; This function is called by:
  5901 ;;		_main
  5902 ;;		_Setup_Fan_Temp
  5903 ;;		_Do_Setup_Time
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text12
  5908  004690                     __ptext12:
  5909                           	opt stack 0
  5910  004690                     _get_RPM:
  5911                           	opt stack 26
  5912                           
  5913                           ;Fan_Support.c: 73: int RPS = TMR3L / 2;
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;incstack = 0
  5917  004690  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  5918  004694  6A18               	clrf	___awdiv@dividend+1,c
  5919  004696  0E00               	movlw	0
  5920  004698  6E1A               	movwf	___awdiv@divisor+1,c
  5921  00469A  0E02               	movlw	2
  5922  00469C  6E19               	movwf	___awdiv@divisor,c
  5923  00469E  EC31  F01E         	call	___awdiv	;wreg free
  5924  0046A2  C017  F021         	movff	?___awdiv,get_RPM@RPS
  5925  0046A6  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  5926                           
  5927                           ;Fan_Support.c: 75: TMR3L = 0;
  5928  0046AA  0E00               	movlw	0
  5929  0046AC  6EB2               	movwf	4018,c	;volatile
  5930                           
  5931                           ;Fan_Support.c: 76: return (RPS * 60);
  5932  0046AE  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  5933  0046B2  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  5934  0046B6  0E00               	movlw	0
  5935  0046B8  6E14               	movwf	___wmul@multiplicand+1,c
  5936  0046BA  0E3C               	movlw	60
  5937  0046BC  6E13               	movwf	___wmul@multiplicand,c
  5938  0046BE  ECD5  F024         	call	___wmul	;wreg free
  5939  0046C2  C011  F01F         	movff	?___wmul,?_get_RPM
  5940  0046C6  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  5941  0046CA  D000               	goto	l50
  5942  0046CC                     l50:
  5943  0046CC  0012               	return		;funcret
  5944  0046CE                     __end_of_get_RPM:
  5945                           	opt stack 0
  5946                           tblptru	equ	0xFF8
  5947                           tblptrh	equ	0xFF7
  5948                           tblptrl	equ	0xFF6
  5949                           tablat	equ	0xFF5
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           postdec1	equ	0xFE5
  5953                           fsr1l	equ	0xFE1
  5954                           status	equ	0xFD8
  5955                           
  5956 ;; *************** function _check_for_button_input *****************
  5957 ;; Defined at:
  5958 ;;		line 14 in file "utils.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  j               2   21[BANK1 ] int 
  5963 ;;  array1         21    0[BANK1 ] unsigned char [21]
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      unsigned char 
  5966 ;; Registers used:
  5967 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;      Totals:         1       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;Total ram usage:       24 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    7
  5980 ;; This function calls:
  5981 ;;		_printf
  5982 ;; This function is called by:
  5983 ;;		_main
  5984 ;;		_Setup_Fan_Temp
  5985 ;;		_Do_Setup_Time
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           	psect	text13
  5990  003A74                     __ptext13:
  5991                           	opt stack 0
  5992  003A74                     _check_for_button_input:
  5993                           	opt stack 23
  5994                           
  5995                           ;utils.c: 16: char array1[21]={0xa2,0x62,0xe2,0x22,0x02,0xc2,0xe0,0xa8,0x90,0x68,0x98,0x
      +                          b0,0x30,0x18,0x7a,0x10,0x38,0x5a,0x42,0x4a,0x52};
  5996                           
  5997                           ;incstack = 0
  5998  003A74  EE21  F023         	lfsr	2,check_for_button_input@F4236
  5999  003A78  EE11  F08C         	lfsr	1,check_for_button_input@array1
  6000  003A7C  0E14               	movlw	20
  6001  003A7E                     u8431:
  6002  003A7E  CFDB FFE3          	movff	plusw2,plusw1
  6003  003A82  06E8               	decf	wreg,f,c
  6004  003A84  E2FC               	bc	u8431
  6005                           
  6006                           ;utils.c: 18: if (Nec_ok == 1)
  6007  003A86  0100               	movlb	0	; () banked
  6008  003A88  05BB               	decf	_Nec_ok& (0+255),w,b
  6009  003A8A  0100               	movlb	0	; () banked
  6010  003A8C  11BC               	iorwf	(_Nec_ok+1)& (0+255),w,b
  6011  003A8E  A4D8               	btfss	status,2,c
  6012  003A90  D045               	goto	l9700
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;utils.c: 19: {
  6016                           ;utils.c: 20: Nec_ok = 0;
  6017  003A92  0E00               	movlw	0
  6018  003A94  0100               	movlb	0	; () banked
  6019  003A96  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  6020  003A98  0E00               	movlw	0
  6021  003A9A  6FBB               	movwf	_Nec_ok& (0+255),b
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;utils.c: 24: INTCON3bits.INT2IE = 1;
  6025  003A9C  88F0               	bsf	intcon3,4,c	;volatile
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;utils.c: 25: INTCON2bits.INTEDG2 = 0;
  6029  003A9E  98F1               	bcf	intcon2,4,c	;volatile
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;utils.c: 27: found = 0xff;
  6033  003AA0  0100               	movlb	0	; () banked
  6034  003AA2  69D0               	setf	_found& (0+255),b
  6035                           
  6036                           ;utils.c: 28: for (int j=0; j< 21; j++)
  6037  003AA4  0E00               	movlw	0
  6038  003AA6  0101               	movlb	1	; () banked
  6039  003AA8  6FA2               	movwf	(check_for_button_input@j+1)& (0+255),b
  6040  003AAA  0E00               	movlw	0
  6041  003AAC  6FA1               	movwf	check_for_button_input@j& (0+255),b
  6042  003AAE                     l9672:
  6043                           
  6044                           ; BSR set to: 1
  6045  003AAE  0101               	movlb	1	; () banked
  6046  003AB0  BFA2               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  6047  003AB2  D00A               	goto	l9676
  6048  003AB4  0101               	movlb	1	; () banked
  6049  003AB6  51A2               	movf	(check_for_button_input@j+1)& (0+255),w,b
  6050  003AB8  E121               	bnz	l9686
  6051  003ABA  0E15               	movlw	21
  6052  003ABC  0101               	movlb	1	; () banked
  6053  003ABE  5DA1               	subwf	check_for_button_input@j& (0+255),w,b
  6054  003AC0  B0D8               	btfsc	status,0,c
  6055  003AC2  D01C               	goto	l9686
  6056  003AC4  D001               	goto	l9676
  6057                           
  6058                           ; BSR set to: 1
  6059  003AC6  D01A               	goto	l9686
  6060  003AC8                     l9676:
  6061                           
  6062                           ; BSR set to: 1
  6063                           ;utils.c: 29: {
  6064                           ;utils.c: 31: if (Nec_Button == array1[j])
  6065  003AC8  0E8C               	movlw	low check_for_button_input@array1
  6066  003ACA  0101               	movlb	1	; () banked
  6067  003ACC  25A1               	addwf	check_for_button_input@j& (0+255),w,b
  6068  003ACE  6ED9               	movwf	fsr2l,c
  6069  003AD0  0E01               	movlw	high check_for_button_input@array1
  6070  003AD2  0101               	movlb	1	; () banked
  6071  003AD4  21A2               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  6072  003AD6  6EDA               	movwf	fsr2h,c
  6073  003AD8  0100               	movlb	0	; () banked
  6074  003ADA  51C9               	movf	_Nec_Button& (0+255),w,b
  6075  003ADC  18DE               	xorwf	postinc2,w,c
  6076  003ADE  A4D8               	btfss	status,2,c
  6077  003AE0  D008               	goto	l9682
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;utils.c: 32: {
  6081                           ;utils.c: 33: found = j;
  6082  003AE2  C1A1  F0D0         	movff	check_for_button_input@j,_found
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;utils.c: 34: j = 21;
  6086  003AE6  0E00               	movlw	0
  6087  003AE8  0101               	movlb	1	; () banked
  6088  003AEA  6FA2               	movwf	(check_for_button_input@j+1)& (0+255),b
  6089  003AEC  0E15               	movlw	21
  6090  003AEE  6FA1               	movwf	check_for_button_input@j& (0+255),b
  6091  003AF0  D000               	goto	l9682
  6092  003AF2                     l9682:
  6093  003AF2  0101               	movlb	1	; () banked
  6094  003AF4  4BA1               	infsnz	check_for_button_input@j& (0+255),f,b
  6095  003AF6  2BA2               	incf	(check_for_button_input@j+1)& (0+255),f,b
  6096  003AF8  D7DA               	goto	l9672
  6097                           
  6098                           ; BSR set to: 1
  6099  003AFA  D000               	goto	l9686
  6100  003AFC                     l9686:
  6101                           
  6102                           ; BSR set to: 1
  6103                           ;utils.c: 35: }
  6104                           ;utils.c: 36: }
  6105                           ;utils.c: 38: if (found == 0xff)
  6106  003AFC  0100               	movlb	0	; () banked
  6107  003AFE  29D0               	incf	_found& (0+255),w,b
  6108  003B00  A4D8               	btfss	status,2,c
  6109  003B02  D00A               	goto	l9696
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;utils.c: 39: {
  6113                           ;utils.c: 40: printf ("Cannot find button \r\n");
  6114  003B04  0EE1               	movlw	low STR_3
  6115  003B06  0100               	movlb	0	; () banked
  6116  003B08  6F86               	movwf	printf@f& (0+255),b
  6117  003B0A  0EFE               	movlw	high STR_3
  6118  003B0C  0100               	movlb	0	; () banked
  6119  003B0E  6F87               	movwf	(printf@f+1)& (0+255),b
  6120  003B10  EC0E  F000         	call	_printf	;wreg free
  6121  003B14  D003               	goto	l9700
  6122                           
  6123                           ;utils.c: 42: }
  6124                           
  6125                           ;utils.c: 41: return (0);
  6126  003B16  D004               	goto	l446
  6127  003B18                     l9696:
  6128                           
  6129                           ;utils.c: 43: else
  6130                           ;utils.c: 44: {
  6131                           ;utils.c: 45: return (1);
  6132  003B18  0E01               	movlw	1
  6133                           
  6134                           ;utils.c: 46: }
  6135                           ;utils.c: 47: }
  6136  003B1A  D002               	goto	l446
  6137  003B1C                     l9700:
  6138                           
  6139                           ;utils.c: 48: else {return (0);}
  6140  003B1C  0E00               	movlw	0
  6141  003B1E  D000               	goto	l446
  6142  003B20                     l446:
  6143  003B20  0012               	return		;funcret
  6144  003B22                     __end_of_check_for_button_input:
  6145                           	opt stack 0
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           intcon2	equ	0xFF1
  6151                           intcon3	equ	0xFF0
  6152                           postinc0	equ	0xFEE
  6153                           wreg	equ	0xFE8
  6154                           postdec1	equ	0xFE5
  6155                           plusw1	equ	0xFE3
  6156                           fsr1l	equ	0xFE1
  6157                           postinc2	equ	0xFDE
  6158                           plusw2	equ	0xFDB
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _bcd_2_dec *****************
  6164 ;; Defined at:
  6165 ;;		line 52 in file "utils.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  bcd             1    wreg     unsigned char 
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;  bcd             1   20[COMRAM] unsigned char 
  6170 ;;  dec             2   18[COMRAM] int 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      unsigned char 
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0, prodl, prodh
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;Total ram usage:        5 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    3
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_Do_Setup_Time
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text14
  6195  004980                     __ptext14:
  6196                           	opt stack 0
  6197  004980                     _bcd_2_dec:
  6198                           	opt stack 26
  6199                           
  6200                           ;incstack = 0
  6201                           ;bcd_2_dec@bcd stored from wreg
  6202  004980  6E15               	movwf	bcd_2_dec@bcd,c
  6203                           
  6204                           ;utils.c: 54: int dec;
  6205                           ;utils.c: 55: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  6206  004982  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  6207  004986  0E0F               	movlw	15
  6208  004988  1611               	andwf	??_bcd_2_dec,f,c
  6209  00498A  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  6210  00498E  3A12               	swapf	??_bcd_2_dec+1,f,c
  6211  004990  0E0F               	movlw	15
  6212  004992  1612               	andwf	??_bcd_2_dec+1,f,c
  6213  004994  5012               	movf	??_bcd_2_dec+1,w,c
  6214  004996  0D0A               	mullw	10
  6215  004998  5011               	movf	??_bcd_2_dec,w,c
  6216  00499A  24F3               	addwf	prodl,w,c
  6217  00499C  6E13               	movwf	bcd_2_dec@dec,c
  6218  00499E  0E00               	movlw	0
  6219  0049A0  20F4               	addwfc	prodh,w,c
  6220  0049A2  6E14               	movwf	bcd_2_dec@dec+1,c
  6221                           
  6222                           ;utils.c: 56: return dec;
  6223  0049A4  5013               	movf	bcd_2_dec@dec,w,c
  6224  0049A6  D000               	goto	l451
  6225  0049A8                     l451:
  6226  0049A8  0012               	return		;funcret
  6227  0049AA                     __end_of_bcd_2_dec:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           intcon2	equ	0xFF1
  6236                           intcon3	equ	0xFF0
  6237                           postinc0	equ	0xFEE
  6238                           wreg	equ	0xFE8
  6239                           postdec1	equ	0xFE5
  6240                           plusw1	equ	0xFE3
  6241                           fsr1l	equ	0xFE1
  6242                           postinc2	equ	0xFDE
  6243                           plusw2	equ	0xFDB
  6244                           fsr2h	equ	0xFDA
  6245                           fsr2l	equ	0xFD9
  6246                           status	equ	0xFD8
  6247                           
  6248 ;; *************** function _Set_D2_RGB *****************
  6249 ;; Defined at:
  6250 ;;		line 257 in file "Main.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;  rpm             2   30[COMRAM] int 
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;  range           2   32[COMRAM] int 
  6255 ;; Return value:  Size  Location     Type
  6256 ;;		None               void
  6257 ;; Registers used:
  6258 ;;		wreg, status,2, status,0, cstack
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6267 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6268 ;;Total ram usage:        4 bytes
  6269 ;; Hardware stack levels used:    1
  6270 ;; Hardware stack levels required when called:    4
  6271 ;; This function calls:
  6272 ;;		___awdiv
  6273 ;; This function is called by:
  6274 ;;		_main
  6275 ;;		_Setup_Fan_Temp
  6276 ;;		_Do_Setup_Time
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           	psect	text15
  6281  0044C6                     __ptext15:
  6282                           	opt stack 0
  6283  0044C6                     _Set_D2_RGB:
  6284                           	opt stack 25
  6285                           
  6286                           ;Main.c: 260: int range = (rpm/500)+1;
  6287                           
  6288                           ;incstack = 0
  6289  0044C6  C01F  F017         	movff	Set_D2_RGB@rpm,___awdiv@dividend
  6290  0044CA  C020  F018         	movff	Set_D2_RGB@rpm+1,___awdiv@dividend+1
  6291  0044CE  0E01               	movlw	1
  6292  0044D0  6E1A               	movwf	___awdiv@divisor+1,c
  6293  0044D2  0EF4               	movlw	244
  6294  0044D4  6E19               	movwf	___awdiv@divisor,c
  6295  0044D6  EC31  F01E         	call	___awdiv	;wreg free
  6296  0044DA  0E01               	movlw	1
  6297  0044DC  2417               	addwf	?___awdiv,w,c
  6298  0044DE  6E21               	movwf	Set_D2_RGB@range,c
  6299  0044E0  0E00               	movlw	0
  6300  0044E2  2018               	addwfc	?___awdiv+1,w,c
  6301  0044E4  6E22               	movwf	Set_D2_RGB@range+1,c
  6302                           
  6303                           ;Main.c: 261: if (range > 7)
  6304  0044E6  BE22               	btfsc	Set_D2_RGB@range+1,7,c
  6305  0044E8  D00B               	goto	l9728
  6306  0044EA  5022               	movf	Set_D2_RGB@range+1,w,c
  6307  0044EC  E104               	bnz	u8500
  6308  0044EE  0E08               	movlw	8
  6309  0044F0  5C21               	subwf	Set_D2_RGB@range,w,c
  6310  0044F2  A0D8               	btfss	status,0,c
  6311  0044F4  D005               	goto	l9728
  6312  0044F6                     u8500:
  6313                           
  6314                           ;Main.c: 262: range = 7;
  6315  0044F6  0E00               	movlw	0
  6316  0044F8  6E22               	movwf	Set_D2_RGB@range+1,c
  6317  0044FA  0E07               	movlw	7
  6318  0044FC  6E21               	movwf	Set_D2_RGB@range,c
  6319  0044FE  D000               	goto	l9728
  6320  004500                     l9728:
  6321                           
  6322                           ;Main.c: 263: if (rpm == 0)
  6323  004500  501F               	movf	Set_D2_RGB@rpm,w,c
  6324  004502  1020               	iorwf	Set_D2_RGB@rpm+1,w,c
  6325  004504  A4D8               	btfss	status,2,c
  6326  004506  D005               	goto	l9732
  6327                           
  6328                           ;Main.c: 264: range = 0;
  6329  004508  0E00               	movlw	0
  6330  00450A  6E22               	movwf	Set_D2_RGB@range+1,c
  6331  00450C  0E00               	movlw	0
  6332  00450E  6E21               	movwf	Set_D2_RGB@range,c
  6333  004510  D000               	goto	l9732
  6334  004512                     l9732:
  6335                           
  6336                           ;Main.c: 265: PORTE = range;
  6337  004512  C021  FF84         	movff	Set_D2_RGB@range,3972	;volatile
  6338  004516  0012               	return		;funcret
  6339  004518                     __end_of_Set_D2_RGB:
  6340                           	opt stack 0
  6341                           tblptru	equ	0xFF8
  6342                           tblptrh	equ	0xFF7
  6343                           tblptrl	equ	0xFF6
  6344                           tablat	equ	0xFF5
  6345                           prodh	equ	0xFF4
  6346                           prodl	equ	0xFF3
  6347                           intcon2	equ	0xFF1
  6348                           intcon3	equ	0xFF0
  6349                           postinc0	equ	0xFEE
  6350                           wreg	equ	0xFE8
  6351                           postdec1	equ	0xFE5
  6352                           plusw1	equ	0xFE3
  6353                           fsr1l	equ	0xFE1
  6354                           postinc2	equ	0xFDE
  6355                           plusw2	equ	0xFDB
  6356                           fsr2h	equ	0xFDA
  6357                           fsr2l	equ	0xFD9
  6358                           status	equ	0xFD8
  6359                           
  6360 ;; *************** function _Set_D1_RGB *****************
  6361 ;; Defined at:
  6362 ;;		line 248 in file "Main.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;  duty_cycle      1    wreg     unsigned char 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  duty_cycle      1   31[COMRAM] unsigned char 
  6367 ;;  range           2   32[COMRAM] int 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;		None               void
  6370 ;; Registers used:
  6371 ;;		wreg, status,2, status,0, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;Total ram usage:        4 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    4
  6384 ;; This function calls:
  6385 ;;		___awdiv
  6386 ;; This function is called by:
  6387 ;;		_main
  6388 ;;		_Setup_Fan_Temp
  6389 ;;		_Do_Setup_Time
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text16
  6394  0045B4                     __ptext16:
  6395                           	opt stack 0
  6396  0045B4                     _Set_D1_RGB:
  6397                           	opt stack 25
  6398                           
  6399                           ;incstack = 0
  6400                           ;Set_D1_RGB@duty_cycle stored from wreg
  6401  0045B4  6E20               	movwf	Set_D1_RGB@duty_cycle,c
  6402                           
  6403                           ;Main.c: 251: int range = duty_cycle/10;
  6404  0045B6  C020  F017         	movff	Set_D1_RGB@duty_cycle,___awdiv@dividend
  6405  0045BA  6A18               	clrf	___awdiv@dividend+1,c
  6406  0045BC  0E00               	movlw	0
  6407  0045BE  6E1A               	movwf	___awdiv@divisor+1,c
  6408  0045C0  0E0A               	movlw	10
  6409  0045C2  6E19               	movwf	___awdiv@divisor,c
  6410  0045C4  EC31  F01E         	call	___awdiv	;wreg free
  6411  0045C8  C017  F021         	movff	?___awdiv,Set_D1_RGB@range
  6412  0045CC  C018  F022         	movff	?___awdiv+1,Set_D1_RGB@range+1
  6413                           
  6414                           ;Main.c: 252: if (range > 7)
  6415  0045D0  BE22               	btfsc	Set_D1_RGB@range+1,7,c
  6416  0045D2  D00B               	goto	l9720
  6417  0045D4  5022               	movf	Set_D1_RGB@range+1,w,c
  6418  0045D6  E104               	bnz	u8490
  6419  0045D8  0E08               	movlw	8
  6420  0045DA  5C21               	subwf	Set_D1_RGB@range,w,c
  6421  0045DC  A0D8               	btfss	status,0,c
  6422  0045DE  D005               	goto	l9720
  6423  0045E0                     u8490:
  6424                           
  6425                           ;Main.c: 253: range = 7;
  6426  0045E0  0E00               	movlw	0
  6427  0045E2  6E22               	movwf	Set_D1_RGB@range+1,c
  6428  0045E4  0E07               	movlw	7
  6429  0045E6  6E21               	movwf	Set_D1_RGB@range,c
  6430  0045E8  D000               	goto	l9720
  6431  0045EA                     l9720:
  6432                           
  6433                           ;Main.c: 254: PORTD = (PORTD & 0x8F) | (range<<4);
  6434  0045EA  C021  F01F         	movff	Set_D1_RGB@range,??_Set_D1_RGB
  6435  0045EE  3A1F               	swapf	??_Set_D1_RGB,f,c
  6436  0045F0  0EF0               	movlw	240
  6437  0045F2  161F               	andwf	??_Set_D1_RGB,f,c
  6438  0045F4  5083               	movf	3971,w,c	;volatile
  6439  0045F6  0B8F               	andlw	143
  6440  0045F8  101F               	iorwf	??_Set_D1_RGB,w,c
  6441  0045FA  6E83               	movwf	3971,c	;volatile
  6442  0045FC  0012               	return		;funcret
  6443  0045FE                     __end_of_Set_D1_RGB:
  6444                           	opt stack 0
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon2	equ	0xFF1
  6452                           intcon3	equ	0xFF0
  6453                           postinc0	equ	0xFEE
  6454                           wreg	equ	0xFE8
  6455                           postdec1	equ	0xFE5
  6456                           plusw1	equ	0xFE3
  6457                           fsr1l	equ	0xFE1
  6458                           postinc2	equ	0xFDE
  6459                           plusw2	equ	0xFDB
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function _Read_Volt *****************
  6465 ;; Defined at:
  6466 ;;		line 156 in file "utils.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;  ADC_Channel     1    wreg     unsigned char 
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;  ADC_Channel     1   66[COMRAM] unsigned char 
  6471 ;;  volt            3   63[COMRAM] float 
  6472 ;;  nStep           2   67[COMRAM] int 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  3   60[COMRAM] float 
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6482 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;Total ram usage:        9 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    5
  6489 ;; This function calls:
  6490 ;;		___awtoft
  6491 ;;		___ftdiv
  6492 ;;		___wmul
  6493 ;;		_get_full_ADC
  6494 ;; This function is called by:
  6495 ;;		_main
  6496 ;;		_Setup_Fan_Temp
  6497 ;;		_Do_Setup_Time
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text17
  6502  004226                     __ptext17:
  6503                           	opt stack 0
  6504  004226                     _Read_Volt:
  6505                           	opt stack 24
  6506                           
  6507                           ;incstack = 0
  6508                           ;Read_Volt@ADC_Channel stored from wreg
  6509  004226  6E43               	movwf	Read_Volt@ADC_Channel,c
  6510                           
  6511                           ;utils.c: 158: ADCON0 = ADC_Channel * 4 + 1;
  6512  004228  5043               	movf	Read_Volt@ADC_Channel,w,c
  6513  00422A  0D04               	mullw	4
  6514  00422C  28F3               	incf	prodl,w,c
  6515  00422E  6EC2               	movwf	4034,c	;volatile
  6516                           
  6517                           ;utils.c: 159: int nStep = get_full_ADC();
  6518  004230  ECE9  F024         	call	_get_full_ADC	;wreg free
  6519  004234  C011  F044         	movff	?_get_full_ADC,Read_Volt@nStep
  6520  004238  C012  F045         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  6521                           
  6522                           ;utils.c: 160: float volt = nStep * 5 /1024.0;
  6523  00423C  C044  F011         	movff	Read_Volt@nStep,___wmul@multiplier
  6524  004240  C045  F012         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  6525  004244  0E00               	movlw	0
  6526  004246  6E14               	movwf	___wmul@multiplicand+1,c
  6527  004248  0E05               	movlw	5
  6528  00424A  6E13               	movwf	___wmul@multiplicand,c
  6529  00424C  ECD5  F024         	call	___wmul	;wreg free
  6530  004250  C011  F019         	movff	?___wmul,___awtoft@c
  6531  004254  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  6532  004258  ECE3  F023         	call	___awtoft	;wreg free
  6533  00425C  C019  F02E         	movff	?___awtoft,___ftdiv@f1
  6534  004260  C01A  F02F         	movff	?___awtoft+1,___ftdiv@f1+1
  6535  004264  C01B  F030         	movff	?___awtoft+2,___ftdiv@f1+2
  6536  004268  0E00               	movlw	0
  6537  00426A  6E31               	movwf	___ftdiv@f2,c
  6538  00426C  0E80               	movlw	128
  6539  00426E  6E32               	movwf	___ftdiv@f2+1,c
  6540  004270  0E44               	movlw	68
  6541  004272  6E33               	movwf	___ftdiv@f2+2,c
  6542  004274  EC42  F01B         	call	___ftdiv	;wreg free
  6543  004278  C02E  F040         	movff	?___ftdiv,Read_Volt@volt
  6544  00427C  C02F  F041         	movff	?___ftdiv+1,Read_Volt@volt+1
  6545  004280  C030  F042         	movff	?___ftdiv+2,Read_Volt@volt+2
  6546                           
  6547                           ;utils.c: 161: return (volt);
  6548  004284  C040  F03D         	movff	Read_Volt@volt,?_Read_Volt
  6549  004288  C041  F03E         	movff	Read_Volt@volt+1,?_Read_Volt+1
  6550  00428C  C042  F03F         	movff	Read_Volt@volt+2,?_Read_Volt+2
  6551  004290  D000               	goto	l490
  6552  004292                     l490:
  6553  004292  0012               	return		;funcret
  6554  004294                     __end_of_Read_Volt:
  6555                           	opt stack 0
  6556                           tblptru	equ	0xFF8
  6557                           tblptrh	equ	0xFF7
  6558                           tblptrl	equ	0xFF6
  6559                           tablat	equ	0xFF5
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           intcon2	equ	0xFF1
  6563                           intcon3	equ	0xFF0
  6564                           postinc0	equ	0xFEE
  6565                           wreg	equ	0xFE8
  6566                           postdec1	equ	0xFE5
  6567                           plusw1	equ	0xFE3
  6568                           fsr1l	equ	0xFE1
  6569                           postinc2	equ	0xFDE
  6570                           plusw2	equ	0xFDB
  6571                           fsr2h	equ	0xFDA
  6572                           fsr2l	equ	0xFD9
  6573                           status	equ	0xFD8
  6574                           
  6575 ;; *************** function _get_full_ADC *****************
  6576 ;; Defined at:
  6577 ;;		line 164 in file "utils.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;		None
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  result          2   20[COMRAM] unsigned int 
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  2   16[COMRAM] unsigned int 
  6584 ;; Registers used:
  6585 ;;		wreg, status,2, status,0
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6593 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;Total ram usage:        6 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    3
  6598 ;; This function calls:
  6599 ;;		Nothing
  6600 ;; This function is called by:
  6601 ;;		_Read_Volt
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           	psect	text18
  6606  0049D2                     __ptext18:
  6607                           	opt stack 0
  6608  0049D2                     _get_full_ADC:
  6609                           	opt stack 25
  6610                           
  6611                           ;utils.c: 166: unsigned int result;
  6612                           ;utils.c: 167: ADCON0bits.GO=1;
  6613                           
  6614                           ;incstack = 0
  6615  0049D2  82C2               	bsf	4034,1,c	;volatile
  6616                           
  6617                           ;utils.c: 168: while(ADCON0bits.DONE==1);
  6618  0049D4  D000               	goto	l493
  6619  0049D6                     l493:
  6620  0049D6  B2C2               	btfsc	4034,1,c	;volatile
  6621  0049D8  D7FE               	goto	l493
  6622                           
  6623                           ;utils.c: 169: result = (ADRESH * 0x100) + ADRESL;
  6624  0049DA  50C4               	movf	4036,w,c	;volatile
  6625  0049DC  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  6626  0049DE  6A13               	clrf	??_get_full_ADC& (0+255),c
  6627  0049E0  50C3               	movf	4035,w,c	;volatile
  6628  0049E2  2413               	addwf	??_get_full_ADC,w,c
  6629  0049E4  6E15               	movwf	get_full_ADC@result,c
  6630  0049E6  0E00               	movlw	0
  6631  0049E8  2014               	addwfc	??_get_full_ADC+1,w,c
  6632  0049EA  6E16               	movwf	get_full_ADC@result+1,c
  6633                           
  6634                           ;utils.c: 171: return result;
  6635  0049EC  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  6636  0049F0  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  6637  0049F4  D000               	goto	l496
  6638  0049F6                     l496:
  6639  0049F6  0012               	return		;funcret
  6640  0049F8                     __end_of_get_full_ADC:
  6641                           	opt stack 0
  6642                           tblptru	equ	0xFF8
  6643                           tblptrh	equ	0xFF7
  6644                           tblptrl	equ	0xFF6
  6645                           tablat	equ	0xFF5
  6646                           prodh	equ	0xFF4
  6647                           prodl	equ	0xFF3
  6648                           intcon2	equ	0xFF1
  6649                           intcon3	equ	0xFF0
  6650                           postinc0	equ	0xFEE
  6651                           wreg	equ	0xFE8
  6652                           postdec1	equ	0xFE5
  6653                           plusw1	equ	0xFE3
  6654                           fsr1l	equ	0xFE1
  6655                           postinc2	equ	0xFDE
  6656                           plusw2	equ	0xFDB
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function ___awtoft *****************
  6662 ;; Defined at:
  6663 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  c               2   24[COMRAM] int 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  sign            1   27[COMRAM] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  3   24[COMRAM] float 
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6677 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;Total ram usage:        4 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    4
  6684 ;; This function calls:
  6685 ;;		___ftpack
  6686 ;; This function is called by:
  6687 ;;		_Read_Volt
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text19
  6692  0047C6                     __ptext19:
  6693                           	opt stack 0
  6694  0047C6                     ___awtoft:
  6695                           	opt stack 24
  6696                           
  6697                           ;incstack = 0
  6698  0047C6  0E00               	movlw	0
  6699  0047C8  6E1C               	movwf	___awtoft@sign,c
  6700  0047CA  AE1A               	btfss	___awtoft@c+1,7,c
  6701  0047CC  D007               	goto	l9592
  6702  0047CE  6C19               	negf	___awtoft@c,c
  6703  0047D0  1E1A               	comf	___awtoft@c+1,f,c
  6704  0047D2  B0D8               	btfsc	status,0,c
  6705  0047D4  2A1A               	incf	___awtoft@c+1,f,c
  6706  0047D6  0E01               	movlw	1
  6707  0047D8  6E1C               	movwf	___awtoft@sign,c
  6708  0047DA  D000               	goto	l9592
  6709  0047DC                     l9592:
  6710  0047DC  C019  F011         	movff	___awtoft@c,___ftpack@arg
  6711  0047E0  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  6712  0047E4  6A13               	clrf	___ftpack@arg+2,c
  6713  0047E6  0E8E               	movlw	142
  6714  0047E8  6E14               	movwf	___ftpack@exp,c
  6715  0047EA  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  6716  0047EE  EC21  F01C         	call	___ftpack	;wreg free
  6717  0047F2  C011  F019         	movff	?___ftpack,?___awtoft
  6718  0047F6  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  6719  0047FA  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  6720  0047FE  D000               	goto	l1720
  6721  004800                     l1720:
  6722  004800  0012               	return		;funcret
  6723  004802                     __end_of___awtoft:
  6724                           	opt stack 0
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           intcon2	equ	0xFF1
  6732                           intcon3	equ	0xFF0
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           postdec1	equ	0xFE5
  6736                           plusw1	equ	0xFE3
  6737                           fsr1l	equ	0xFE1
  6738                           postinc2	equ	0xFDE
  6739                           plusw2	equ	0xFDB
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function _Monitor_Fan *****************
  6745 ;; Defined at:
  6746 ;;		line 38 in file "Fan_Support.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;		None               void
  6753 ;; Registers used:
  6754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;Total ram usage:        0 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    8
  6767 ;; This function calls:
  6768 ;;		_Turn_Off_Fan
  6769 ;;		_do_update_pwm
  6770 ;;		_get_duty_cycle
  6771 ;; This function is called by:
  6772 ;;		_main
  6773 ;;		_Do_Setup_Time
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text20
  6778  004568                     __ptext20:
  6779                           	opt stack 0
  6780  004568                     _Monitor_Fan:
  6781                           	opt stack 22
  6782                           
  6783                           ;Fan_Support.c: 45: if (FANMODE == 1)
  6784                           
  6785                           ;incstack = 0
  6786  004568  0100               	movlb	0	; () banked
  6787  00456A  05C2               	decf	_FANMODE& (0+255),w,b
  6788  00456C  A4D8               	btfss	status,2,c
  6789  00456E  D00E               	goto	l9600
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;Fan_Support.c: 46: {
  6793                           ;Fan_Support.c: 47: get_duty_cycle (tempF, fan_set_temp);
  6794  004570  506A               	movf	_tempF,w,c
  6795  004572  6E11               	movwf	get_duty_cycle@temp,c
  6796  004574  6A12               	clrf	get_duty_cycle@temp+1,c
  6797  004576  BE11               	btfsc	get_duty_cycle@temp,7,c
  6798  004578  0612               	decf	get_duty_cycle@temp+1,f,c
  6799  00457A  C0DC  F013         	movff	_fan_set_temp,get_duty_cycle@set_temp
  6800  00457E  6A14               	clrf	get_duty_cycle@set_temp+1,c
  6801  004580  ECDF  F01F         	call	_get_duty_cycle	;wreg free
  6802                           
  6803                           ;Fan_Support.c: 48: do_update_pwm(duty_cycle);
  6804  004584  5064               	movf	_duty_cycle,w,c
  6805  004586  ECDF  F01C         	call	_do_update_pwm
  6806  00458A  D000               	goto	l9600
  6807  00458C                     l9600:
  6808                           
  6809                           ;Fan_Support.c: 49: }
  6810                           ;Fan_Support.c: 57: if (FAN_TIMER_MODE != 0)
  6811  00458C  5060               	movf	_FAN_TIMER_MODE,w,c
  6812  00458E  B4D8               	btfsc	status,2,c
  6813  004590  D010               	goto	l47
  6814                           
  6815                           ;Fan_Support.c: 58: {
  6816                           ;Fan_Support.c: 59: if (FAN_TIMER_TIME != 0)
  6817  004592  0100               	movlb	0	; () banked
  6818  004594  51C3               	movf	_FAN_TIMER_TIME& (0+255),w,b
  6819  004596  B4D8               	btfsc	status,2,c
  6820  004598  D003               	goto	l9606
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;Fan_Support.c: 60: FAN_TIMER_TIME--;
  6824  00459A  0100               	movlb	0	; () banked
  6825  00459C  07C3               	decf	_FAN_TIMER_TIME& (0+255),f,b
  6826  00459E  D000               	goto	l9606
  6827  0045A0                     l9606:
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;Fan_Support.c: 61: if (FAN_TIMER_TIME == 0)
  6831  0045A0  0100               	movlb	0	; () banked
  6832  0045A2  51C3               	movf	_FAN_TIMER_TIME& (0+255),w,b
  6833  0045A4  A4D8               	btfss	status,2,c
  6834  0045A6  D005               	goto	l47
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;Fan_Support.c: 62: {
  6838                           ;Fan_Support.c: 63: FAN_TIMER_MODE = 0;
  6839  0045A8  0E00               	movlw	0
  6840  0045AA  6E60               	movwf	_FAN_TIMER_MODE,c
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;Fan_Support.c: 64: Turn_Off_Fan();
  6844  0045AC  ECC6  F025         	call	_Turn_Off_Fan	;wreg free
  6845  0045B0  D000               	goto	l47
  6846  0045B2                     l47:
  6847  0045B2  0012               	return		;funcret
  6848  0045B4                     __end_of_Monitor_Fan:
  6849                           	opt stack 0
  6850                           tblptru	equ	0xFF8
  6851                           tblptrh	equ	0xFF7
  6852                           tblptrl	equ	0xFF6
  6853                           tablat	equ	0xFF5
  6854                           prodh	equ	0xFF4
  6855                           prodl	equ	0xFF3
  6856                           intcon2	equ	0xFF1
  6857                           intcon3	equ	0xFF0
  6858                           postinc0	equ	0xFEE
  6859                           wreg	equ	0xFE8
  6860                           postdec1	equ	0xFE5
  6861                           plusw1	equ	0xFE3
  6862                           fsr1l	equ	0xFE1
  6863                           postinc2	equ	0xFDE
  6864                           plusw2	equ	0xFDB
  6865                           fsr2h	equ	0xFDA
  6866                           fsr2l	equ	0xFD9
  6867                           status	equ	0xFD8
  6868                           
  6869 ;; *************** function _get_duty_cycle *****************
  6870 ;; Defined at:
  6871 ;;		line 16 in file "Fan_Support.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  temp            2   16[COMRAM] int 
  6874 ;;  set_temp        2   18[COMRAM] int 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  diff_temp       2   22[COMRAM] int 
  6877 ;;  dc              2   24[COMRAM] int 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  2   16[COMRAM] int 
  6880 ;; Registers used:
  6881 ;;		wreg, status,2, status,0
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6887 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6891 ;;Total ram usage:       10 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    3
  6894 ;; This function calls:
  6895 ;;		Nothing
  6896 ;; This function is called by:
  6897 ;;		_Monitor_Fan
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           	psect	text21
  6902  003FBE                     __ptext21:
  6903                           	opt stack 0
  6904  003FBE                     _get_duty_cycle:
  6905                           	opt stack 26
  6906                           
  6907                           ;Fan_Support.c: 18: int dc;
  6908                           ;Fan_Support.c: 23: if (temp < set_temp)
  6909                           
  6910                           ;incstack = 0
  6911  003FBE  5013               	movf	get_duty_cycle@set_temp,w,c
  6912  003FC0  5C11               	subwf	get_duty_cycle@temp,w,c
  6913  003FC2  5012               	movf	get_duty_cycle@temp+1,w,c
  6914  003FC4  0A80               	xorlw	128
  6915  003FC6  6E15               	movwf	??_get_duty_cycle& (0+255),c
  6916  003FC8  5014               	movf	get_duty_cycle@set_temp+1,w,c
  6917  003FCA  0A80               	xorlw	128
  6918  003FCC  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  6919  003FCE  B0D8               	btfsc	status,0,c
  6920  003FD0  D01D               	goto	l6612
  6921                           
  6922                           ;Fan_Support.c: 24: {
  6923                           ;Fan_Support.c: 25: int diff_temp = (temp-set_temp);
  6924  003FD2  C013  F015         	movff	get_duty_cycle@set_temp,??_get_duty_cycle
  6925  003FD6  C014  F016         	movff	get_duty_cycle@set_temp+1,??_get_duty_cycle+1
  6926  003FDA  1E15               	comf	??_get_duty_cycle,f,c
  6927  003FDC  1E16               	comf	??_get_duty_cycle+1,f,c
  6928  003FDE  4A15               	infsnz	??_get_duty_cycle,f,c
  6929  003FE0  2A16               	incf	??_get_duty_cycle+1,f,c
  6930  003FE2  5011               	movf	get_duty_cycle@temp,w,c
  6931  003FE4  2415               	addwf	??_get_duty_cycle,w,c
  6932  003FE6  6E17               	movwf	get_duty_cycle@diff_temp,c
  6933  003FE8  5012               	movf	get_duty_cycle@temp+1,w,c
  6934  003FEA  2016               	addwfc	??_get_duty_cycle+1,w,c
  6935  003FEC  6E18               	movwf	get_duty_cycle@diff_temp+1,c
  6936                           
  6937                           ;Fan_Support.c: 26: dc = diff_temp * 4;
  6938  003FEE  C017  F015         	movff	get_duty_cycle@diff_temp,??_get_duty_cycle
  6939  003FF2  C018  F016         	movff	get_duty_cycle@diff_temp+1,??_get_duty_cycle+1
  6940  003FF6  90D8               	bcf	status,0,c
  6941  003FF8  3615               	rlcf	??_get_duty_cycle,f,c
  6942  003FFA  3616               	rlcf	??_get_duty_cycle+1,f,c
  6943  003FFC  90D8               	bcf	status,0,c
  6944  003FFE  3615               	rlcf	??_get_duty_cycle,f,c
  6945  004000  3616               	rlcf	??_get_duty_cycle+1,f,c
  6946  004002  C015  F019         	movff	??_get_duty_cycle,get_duty_cycle@dc
  6947  004006  C016  F01A         	movff	??_get_duty_cycle+1,get_duty_cycle@dc+1
  6948  00400A  D000               	goto	l6612
  6949  00400C                     l6612:
  6950                           
  6951                           ;Fan_Support.c: 27: }
  6952                           ;Fan_Support.c: 29: if (dc > 100)
  6953  00400C  BE1A               	btfsc	get_duty_cycle@dc+1,7,c
  6954  00400E  D00B               	goto	l6616
  6955  004010  501A               	movf	get_duty_cycle@dc+1,w,c
  6956  004012  E104               	bnz	u5300
  6957  004014  0E65               	movlw	101
  6958  004016  5C19               	subwf	get_duty_cycle@dc,w,c
  6959  004018  A0D8               	btfss	status,0,c
  6960  00401A  D005               	goto	l6616
  6961  00401C                     u5300:
  6962                           
  6963                           ;Fan_Support.c: 30: dc = 100;
  6964  00401C  0E00               	movlw	0
  6965  00401E  6E1A               	movwf	get_duty_cycle@dc+1,c
  6966  004020  0E64               	movlw	100
  6967  004022  6E19               	movwf	get_duty_cycle@dc,c
  6968  004024  D000               	goto	l6616
  6969  004026                     l6616:
  6970                           
  6971                           ;Fan_Support.c: 32: if (temp > 100)
  6972  004026  BE12               	btfsc	get_duty_cycle@temp+1,7,c
  6973  004028  D00B               	goto	l40
  6974  00402A  5012               	movf	get_duty_cycle@temp+1,w,c
  6975  00402C  E104               	bnz	u5310
  6976  00402E  0E65               	movlw	101
  6977  004030  5C11               	subwf	get_duty_cycle@temp,w,c
  6978  004032  A0D8               	btfss	status,0,c
  6979  004034  D005               	goto	l40
  6980  004036                     u5310:
  6981                           
  6982                           ;Fan_Support.c: 33: dc = 0;
  6983  004036  0E00               	movlw	0
  6984  004038  6E1A               	movwf	get_duty_cycle@dc+1,c
  6985  00403A  0E00               	movlw	0
  6986  00403C  6E19               	movwf	get_duty_cycle@dc,c
  6987  00403E  D000               	goto	l40
  6988  004040                     l40:
  6989  004040  0012               	return		;funcret
  6990  004042                     __end_of_get_duty_cycle:
  6991                           	opt stack 0
  6992                           tblptru	equ	0xFF8
  6993                           tblptrh	equ	0xFF7
  6994                           tblptrl	equ	0xFF6
  6995                           tablat	equ	0xFF5
  6996                           prodh	equ	0xFF4
  6997                           prodl	equ	0xFF3
  6998                           intcon2	equ	0xFF1
  6999                           intcon3	equ	0xFF0
  7000                           postinc0	equ	0xFEE
  7001                           wreg	equ	0xFE8
  7002                           postdec1	equ	0xFE5
  7003                           plusw1	equ	0xFE3
  7004                           fsr1l	equ	0xFE1
  7005                           postinc2	equ	0xFDE
  7006                           plusw2	equ	0xFDB
  7007                           fsr2h	equ	0xFDA
  7008                           fsr2l	equ	0xFD9
  7009                           status	equ	0xFD8
  7010                           
  7011 ;; *************** function _Initialize_Setup_Time_Screen *****************
  7012 ;; Defined at:
  7013 ;;		line 229 in file "Setup_Time.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;		None
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;		None
  7018 ;; Return value:  Size  Location     Type
  7019 ;;		None               void
  7020 ;; Registers used:
  7021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;Total ram usage:        0 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:   10
  7034 ;; This function calls:
  7035 ;;		_LCD_Reset
  7036 ;;		_TFT_GreenTab_Initialize
  7037 ;;		_drawtext
  7038 ;;		_fillRect
  7039 ;;		_fillScreen
  7040 ;;		_strcpy
  7041 ;; This function is called by:
  7042 ;;		_Do_Setup_Time
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text22
  7047  002D80                     __ptext22:
  7048                           	opt stack 0
  7049  002D80                     _Initialize_Setup_Time_Screen:
  7050                           	opt stack 19
  7051                           
  7052                           ;Setup_Time.c: 231: LCD_Reset();
  7053                           
  7054                           ;incstack = 0
  7055  002D80  EC71  F026         	call	_LCD_Reset	;wreg free
  7056                           
  7057                           ;Setup_Time.c: 232: TFT_GreenTab_Initialize();
  7058  002D84  EC68  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  7059                           
  7060                           ;Setup_Time.c: 233: fillScreen(0x0000);
  7061  002D88  0E00               	movlw	0
  7062  002D8A  6E25               	movwf	fillScreen@color+1,c
  7063  002D8C  0E00               	movlw	0
  7064  002D8E  6E24               	movwf	fillScreen@color,c
  7065  002D90  ECB8  F025         	call	_fillScreen	;wreg free
  7066                           
  7067                           ;Setup_Time.c: 234: if (1 == 0)
  7068  002D94  D005               	goto	l9782
  7069                           
  7070                           ;Setup_Time.c: 235: {
  7071                           ;Setup_Time.c: 236: Timing_Txt[12] = 'S';
  7072  002D96  0E53               	movlw	83
  7073  002D98  0101               	movlb	1	; () banked
  7074  002D9A  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  7075                           
  7076                           ;Setup_Time.c: 237: Timing_Txt[13] = 'P';
  7077  002D9C  0E50               	movlw	80
  7078  002D9E  D004               	goto	L5
  7079  002DA0                     l9782:
  7080                           
  7081                           ;Setup_Time.c: 239: else
  7082                           ;Setup_Time.c: 240: {
  7083                           ;Setup_Time.c: 241: Timing_Txt[12] = 'F';
  7084  002DA0  0E46               	movlw	70
  7085  002DA2  0101               	movlb	1	; () banked
  7086  002DA4  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  7087                           
  7088                           ;Setup_Time.c: 242: Timing_Txt[13] = 'A';
  7089  002DA6  0E41               	movlw	65
  7090  002DA8                     L5:
  7091  002DA8  0101               	movlb	1	; () banked
  7092  002DAA  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  7093                           
  7094                           ; BSR set to: 1
  7095                           ;Setup_Time.c: 243: }
  7096                           ;Setup_Time.c: 244: Timing_Txt[14] = 24/10 + '0';
  7097  002DAC  0E32               	movlw	50
  7098  002DAE  0101               	movlb	1	; () banked
  7099  002DB0  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  7100                           
  7101                           ;Setup_Time.c: 245: Timing_Txt[15] = 24%10 + '0';
  7102  002DB2  0E34               	movlw	52
  7103  002DB4  0101               	movlb	1	; () banked
  7104  002DB6  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  7105                           
  7106                           ;Setup_Time.c: 246: Timing_Txt[17] = 3%10 + '0';
  7107  002DB8  0E33               	movlw	51
  7108  002DBA  0101               	movlb	1	; () banked
  7109  002DBC  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  7110                           
  7111                           ;Setup_Time.c: 247: Timing_Txt[19] = 13/10 + '0';
  7112  002DBE  0E31               	movlw	49
  7113  002DC0  0101               	movlb	1	; () banked
  7114  002DC2  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  7115                           
  7116                           ;Setup_Time.c: 248: Timing_Txt[20] = 13%10 + '0';
  7117  002DC4  0E33               	movlw	51
  7118  002DC6  0101               	movlb	1	; () banked
  7119  002DC8  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  7120                           
  7121                           ; BSR set to: 1
  7122                           ;Setup_Time.c: 250: if (SYSTEM_ON == 1)
  7123  002DCA  0462               	decf	_SYSTEM_ON,w,c
  7124  002DCC  A4D8               	btfss	status,2,c
  7125  002DCE  D076               	goto	l1299
  7126                           
  7127                           ; BSR set to: 1
  7128                           ;Setup_Time.c: 251: {
  7129                           ;Setup_Time.c: 252: drawtext(1 , 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  7130  002DD0  0E01               	movlw	1
  7131  002DD2  6E39               	movwf	drawtext@y,c
  7132  002DD4  0E3C               	movlw	low _Timing_Txt
  7133  002DD6  6E3A               	movwf	drawtext@_text,c
  7134  002DD8  0E01               	movlw	high _Timing_Txt
  7135  002DDA  6E3B               	movwf	drawtext@_text+1,c
  7136  002DDC  0EFF               	movlw	255
  7137  002DDE  6E3D               	movwf	drawtext@color+1,c
  7138  002DE0  683C               	setf	drawtext@color,c
  7139  002DE2  0E00               	movlw	0
  7140  002DE4  6E3F               	movwf	drawtext@bg+1,c
  7141  002DE6  0E00               	movlw	0
  7142  002DE8  6E3E               	movwf	drawtext@bg,c
  7143  002DEA  0E01               	movlw	1
  7144  002DEC  6E40               	movwf	drawtext@size,c
  7145  002DEE  0E01               	movlw	1
  7146  002DF0  ECD1  F01A         	call	_drawtext
  7147                           
  7148                           ;Setup_Time.c: 254: strcpy(txt, "Time Setup\0");
  7149  002DF4  C05E  F011         	movff	_txt,strcpy@to
  7150  002DF8  C05F  F012         	movff	_txt+1,strcpy@to+1
  7151  002DFC  0E88               	movlw	low STR_44
  7152  002DFE  6E13               	movwf	strcpy@from,c
  7153  002E00  0EFF               	movlw	high STR_44
  7154  002E02  6E14               	movwf	strcpy@from+1,c
  7155  002E04  EC1F  F024         	call	_strcpy	;wreg free
  7156                           
  7157                           ;Setup_Time.c: 255: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  7158  002E08  0E10               	movlw	16
  7159  002E0A  6E39               	movwf	drawtext@y,c
  7160  002E0C  C05E  F03A         	movff	_txt,drawtext@_text
  7161  002E10  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7162  002E14  0EF8               	movlw	248
  7163  002E16  6E3D               	movwf	drawtext@color+1,c
  7164  002E18  0E1F               	movlw	31
  7165  002E1A  6E3C               	movwf	drawtext@color,c
  7166  002E1C  0E00               	movlw	0
  7167  002E1E  6E3F               	movwf	drawtext@bg+1,c
  7168  002E20  0E00               	movlw	0
  7169  002E22  6E3E               	movwf	drawtext@bg,c
  7170  002E24  0E02               	movlw	2
  7171  002E26  6E40               	movwf	drawtext@size,c
  7172  002E28  0E04               	movlw	4
  7173  002E2A  ECD1  F01A         	call	_drawtext
  7174                           
  7175                           ;Setup_Time.c: 257: strcpy(txt, "Time");
  7176  002E2E  C05E  F011         	movff	_txt,strcpy@to
  7177  002E32  C05F  F012         	movff	_txt+1,strcpy@to+1
  7178  002E36  0EC8               	movlw	low (STR_18+6)
  7179  002E38  6E13               	movwf	strcpy@from,c
  7180  002E3A  0EFF               	movlw	high (STR_18+6)
  7181  002E3C  6E14               	movwf	strcpy@from+1,c
  7182  002E3E  EC1F  F024         	call	_strcpy	;wreg free
  7183                           
  7184                           ;Setup_Time.c: 258: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  7185  002E42  0E28               	movlw	40
  7186  002E44  6E39               	movwf	drawtext@y,c
  7187  002E46  C05E  F03A         	movff	_txt,drawtext@_text
  7188  002E4A  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7189  002E4E  0E00               	movlw	0
  7190  002E50  6E3D               	movwf	drawtext@color+1,c
  7191  002E52  0E1F               	movlw	31
  7192  002E54  6E3C               	movwf	drawtext@color,c
  7193  002E56  0E00               	movlw	0
  7194  002E58  6E3F               	movwf	drawtext@bg+1,c
  7195  002E5A  0E00               	movlw	0
  7196  002E5C  6E3E               	movwf	drawtext@bg,c
  7197  002E5E  0E01               	movlw	1
  7198  002E60  6E40               	movwf	drawtext@size,c
  7199  002E62  0E32               	movlw	50
  7200  002E64  ECD1  F01A         	call	_drawtext
  7201                           
  7202                           ;Setup_Time.c: 260: fillRect(15-1, 52+16, 25,2,0x07FF);
  7203  002E68  0E44               	movlw	68
  7204  002E6A  6E23               	movwf	fillRect@y,c
  7205  002E6C  0E19               	movlw	25
  7206  002E6E  6E24               	movwf	fillRect@w,c
  7207  002E70  0E02               	movlw	2
  7208  002E72  6E25               	movwf	fillRect@h,c
  7209  002E74  0E07               	movlw	7
  7210  002E76  6E27               	movwf	fillRect@color+1,c
  7211  002E78  6826               	setf	fillRect@color,c
  7212  002E7A  0E0E               	movlw	14
  7213  002E7C  ECFF  F022         	call	_fillRect
  7214                           
  7215                           ;Setup_Time.c: 261: strcpy(txt, "Date");
  7216  002E80  C05E  F011         	movff	_txt,strcpy@to
  7217  002E84  C05F  F012         	movff	_txt+1,strcpy@to+1
  7218  002E88  0ED7               	movlw	low STR_16
  7219  002E8A  6E13               	movwf	strcpy@from,c
  7220  002E8C  0EFF               	movlw	high STR_16
  7221  002E8E  6E14               	movwf	strcpy@from+1,c
  7222  002E90  EC1F  F024         	call	_strcpy	;wreg free
  7223                           
  7224                           ;Setup_Time.c: 262: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  7225  002E94  0E47               	movlw	71
  7226  002E96  6E39               	movwf	drawtext@y,c
  7227  002E98  C05E  F03A         	movff	_txt,drawtext@_text
  7228  002E9C  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7229  002EA0  0EF8               	movlw	248
  7230  002EA2  6E3D               	movwf	drawtext@color+1,c
  7231  002EA4  0E00               	movlw	0
  7232  002EA6  6E3C               	movwf	drawtext@color,c
  7233  002EA8  0E00               	movlw	0
  7234  002EAA  6E3F               	movwf	drawtext@bg+1,c
  7235  002EAC  0E00               	movlw	0
  7236  002EAE  6E3E               	movwf	drawtext@bg,c
  7237  002EB0  0E01               	movlw	1
  7238  002EB2  6E40               	movwf	drawtext@size,c
  7239  002EB4  0E32               	movlw	50
  7240  002EB6  ECD1  F01A         	call	_drawtext
  7241  002EBA  D000               	goto	l1299
  7242  002EBC                     l1299:
  7243  002EBC  0012               	return		;funcret
  7244  002EBE                     __end_of_Initialize_Setup_Time_Screen:
  7245                           	opt stack 0
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           intcon2	equ	0xFF1
  7253                           intcon3	equ	0xFF0
  7254                           postinc0	equ	0xFEE
  7255                           wreg	equ	0xFE8
  7256                           postdec1	equ	0xFE5
  7257                           plusw1	equ	0xFE3
  7258                           fsr1l	equ	0xFE1
  7259                           postinc2	equ	0xFDE
  7260                           plusw2	equ	0xFDB
  7261                           fsr2h	equ	0xFDA
  7262                           fsr2l	equ	0xFD9
  7263                           status	equ	0xFD8
  7264                           
  7265 ;; *************** function _Increase_Time *****************
  7266 ;; Defined at:
  7267 ;;		line 110 in file "Setup_Time.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;		None
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;		None
  7272 ;; Return value:  Size  Location     Type
  7273 ;;		None               void
  7274 ;; Registers used:
  7275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;Total ram usage:        0 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:   11
  7288 ;; This function calls:
  7289 ;;		_Update_Setup_Time_Screen
  7290 ;; This function is called by:
  7291 ;;		_Do_Setup_Time
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text23
  7296  003B22                     __ptext23:
  7297                           	opt stack 0
  7298  003B22                     _Increase_Time:
  7299                           	opt stack 18
  7300                           
  7301                           ;Setup_Time.c: 112: switch (Select_Field)
  7302                           
  7303                           ;incstack = 0
  7304  003B22  D03A               	goto	l9896
  7305  003B24                     l9858:
  7306                           
  7307                           ;Setup_Time.c: 115: setup_hour++;
  7308  003B24  0100               	movlb	0	; () banked
  7309  003B26  2BD5               	incf	_setup_hour& (0+255),f,b
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;Setup_Time.c: 116: if (setup_hour == 24) setup_hour = 0;
  7313  003B28  0E18               	movlw	24
  7314  003B2A  0100               	movlb	0	; () banked
  7315  003B2C  19D5               	xorwf	_setup_hour& (0+255),w,b
  7316  003B2E                     L6:
  7317  003B2E  A4D8               	btfss	status,2,c
  7318  003B30  D048               	goto	l9898
  7319                           
  7320                           ; BSR set to: 0
  7321  003B32  0E00               	movlw	0
  7322  003B34  0100               	movlb	0	; () banked
  7323  003B36  6FD5               	movwf	_setup_hour& (0+255),b
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;Setup_Time.c: 117: break;
  7327  003B38  D044               	goto	l9898
  7328  003B3A                     l9864:
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;Setup_Time.c: 121: setup_minute++;
  7332  003B3A  0100               	movlb	0	; () banked
  7333  003B3C  2BD6               	incf	_setup_minute& (0+255),f,b
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;Setup_Time.c: 122: if (setup_minute == 60) setup_hour = 0;
  7337  003B3E  0E3C               	movlw	60
  7338  003B40  0100               	movlb	0	; () banked
  7339  003B42  19D6               	xorwf	_setup_minute& (0+255),w,b
  7340  003B44  D7F4               	goto	L6
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;Setup_Time.c: 123: break;
  7344                           
  7345                           ; BSR set to: 0
  7346  003B46  D03D               	goto	l9898
  7347  003B48                     l9870:
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;Setup_Time.c: 127: setup_second++;
  7351  003B48  0100               	movlb	0	; () banked
  7352  003B4A  2BD8               	incf	_setup_second& (0+255),f,b
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;Setup_Time.c: 128: if (setup_second == 60) setup_second = 0;
  7356  003B4C  0E3C               	movlw	60
  7357  003B4E  0100               	movlb	0	; () banked
  7358  003B50  19D8               	xorwf	_setup_second& (0+255),w,b
  7359  003B52  A4D8               	btfss	status,2,c
  7360  003B54  D036               	goto	l9898
  7361                           
  7362                           ; BSR set to: 0
  7363  003B56  0E00               	movlw	0
  7364  003B58  0100               	movlb	0	; () banked
  7365  003B5A  6FD8               	movwf	_setup_second& (0+255),b
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;Setup_Time.c: 129: break;
  7369  003B5C  D032               	goto	l9898
  7370  003B5E                     l9876:
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;Setup_Time.c: 133: setup_month++;
  7374  003B5E  0100               	movlb	0	; () banked
  7375  003B60  2BD7               	incf	_setup_month& (0+255),f,b
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;Setup_Time.c: 134: if (setup_month == 13) setup_month = 1;
  7379  003B62  0E0D               	movlw	13
  7380  003B64  0100               	movlb	0	; () banked
  7381  003B66  19D7               	xorwf	_setup_month& (0+255),w,b
  7382  003B68  A4D8               	btfss	status,2,c
  7383  003B6A  D02B               	goto	l9898
  7384                           
  7385                           ; BSR set to: 0
  7386  003B6C  0E01               	movlw	1
  7387  003B6E  0100               	movlb	0	; () banked
  7388  003B70  6FD7               	movwf	_setup_month& (0+255),b
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;Setup_Time.c: 135: break;
  7392  003B72  D027               	goto	l9898
  7393  003B74                     l9882:
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;Setup_Time.c: 139: setup_day++;
  7397  003B74  0100               	movlb	0	; () banked
  7398  003B76  2BD3               	incf	_setup_day& (0+255),f,b
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;Setup_Time.c: 140: if (setup_day == 32) setup_day = 1;
  7402  003B78  0E20               	movlw	32
  7403  003B7A  0100               	movlb	0	; () banked
  7404  003B7C  19D3               	xorwf	_setup_day& (0+255),w,b
  7405  003B7E  A4D8               	btfss	status,2,c
  7406  003B80  D020               	goto	l9898
  7407                           
  7408                           ; BSR set to: 0
  7409  003B82  0E01               	movlw	1
  7410  003B84  0100               	movlb	0	; () banked
  7411  003B86  6FD3               	movwf	_setup_day& (0+255),b
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;Setup_Time.c: 141: break;
  7415  003B88  D01C               	goto	l9898
  7416  003B8A                     l9888:
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;Setup_Time.c: 145: setup_year++;
  7420  003B8A  0100               	movlb	0	; () banked
  7421  003B8C  2BD9               	incf	_setup_year& (0+255),f,b
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;Setup_Time.c: 146: if (setup_year == 100) setup_hour = 0;
  7425  003B8E  0E64               	movlw	100
  7426  003B90  0100               	movlb	0	; () banked
  7427  003B92  19D9               	xorwf	_setup_year& (0+255),w,b
  7428  003B94  D7CC               	goto	L6
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;Setup_Time.c: 151: }
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;Setup_Time.c: 150: break;
  7435                           
  7436                           ;Setup_Time.c: 149: default:
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;Setup_Time.c: 147: break;
  7440                           
  7441                           ; BSR set to: 0
  7442  003B96  D015               	goto	l9898
  7443  003B98                     l9896:
  7444  003B98  0100               	movlb	0	; () banked
  7445  003B9A  51CB               	movf	_Select_Field& (0+255),w,b
  7446                           
  7447                           ; Switch size 1, requested type "space"
  7448                           ; Number of cases is 6, Range of values is 0 to 5
  7449                           ; switch strategies available:
  7450                           ; Name         Instructions Cycles
  7451                           ; simple_byte           19    10 (average)
  7452                           ;	Chosen strategy is simple_byte
  7453  003B9C  0A00               	xorlw	0	; case 0
  7454  003B9E  B4D8               	btfsc	status,2,c
  7455  003BA0  D7C1               	goto	l9858
  7456  003BA2  0A01               	xorlw	1	; case 1
  7457  003BA4  B4D8               	btfsc	status,2,c
  7458  003BA6  D7C9               	goto	l9864
  7459  003BA8  0A03               	xorlw	3	; case 2
  7460  003BAA  B4D8               	btfsc	status,2,c
  7461  003BAC  D7CD               	goto	l9870
  7462  003BAE  0A01               	xorlw	1	; case 3
  7463  003BB0  B4D8               	btfsc	status,2,c
  7464  003BB2  D7D5               	goto	l9876
  7465  003BB4  0A07               	xorlw	7	; case 4
  7466  003BB6  B4D8               	btfsc	status,2,c
  7467  003BB8  D7DD               	goto	l9882
  7468  003BBA  0A01               	xorlw	1	; case 5
  7469  003BBC  B4D8               	btfsc	status,2,c
  7470  003BBE  D7E5               	goto	l9888
  7471  003BC0  D000               	goto	l9898
  7472  003BC2                     l9898:
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;Setup_Time.c: 152: Update_Setup_Time_Screen();
  7476  003BC2  EC53  F015         	call	_Update_Setup_Time_Screen	;wreg free
  7477  003BC6  0012               	return		;funcret
  7478  003BC8                     __end_of_Increase_Time:
  7479                           	opt stack 0
  7480                           tblptru	equ	0xFF8
  7481                           tblptrh	equ	0xFF7
  7482                           tblptrl	equ	0xFF6
  7483                           tablat	equ	0xFF5
  7484                           prodh	equ	0xFF4
  7485                           prodl	equ	0xFF3
  7486                           intcon2	equ	0xFF1
  7487                           intcon3	equ	0xFF0
  7488                           postinc0	equ	0xFEE
  7489                           wreg	equ	0xFE8
  7490                           postdec1	equ	0xFE5
  7491                           plusw1	equ	0xFE3
  7492                           fsr1l	equ	0xFE1
  7493                           postinc2	equ	0xFDE
  7494                           plusw2	equ	0xFDB
  7495                           fsr2h	equ	0xFDA
  7496                           fsr2l	equ	0xFD9
  7497                           status	equ	0xFD8
  7498                           
  7499 ;; *************** function _Go_Prev_Field *****************
  7500 ;; Defined at:
  7501 ;;		line 207 in file "Setup_Time.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;		None
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;		None               void
  7508 ;; Registers used:
  7509 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;Total ram usage:        0 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    9
  7522 ;; This function calls:
  7523 ;;		_Update_Setup_Screen_Cursor_Backward
  7524 ;; This function is called by:
  7525 ;;		_Do_Setup_Time
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text24
  7530  004AF2                     __ptext24:
  7531                           	opt stack 0
  7532  004AF2                     _Go_Prev_Field:
  7533                           	opt stack 20
  7534                           
  7535                           ;Setup_Time.c: 209: if (Select_Field == 0) Select_Field = 5;
  7536                           
  7537                           ;incstack = 0
  7538  004AF2  0100               	movlb	0	; () banked
  7539  004AF4  51CB               	movf	_Select_Field& (0+255),w,b
  7540  004AF6  A4D8               	btfss	status,2,c
  7541  004AF8  D004               	goto	l7194
  7542                           
  7543                           ; BSR set to: 0
  7544  004AFA  0E05               	movlw	5
  7545  004AFC  0100               	movlb	0	; () banked
  7546  004AFE  6FCB               	movwf	_Select_Field& (0+255),b
  7547  004B00  D003               	goto	l7196
  7548  004B02                     l7194:
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;Setup_Time.c: 210: else Select_Field--;
  7552  004B02  0100               	movlb	0	; () banked
  7553  004B04  07CB               	decf	_Select_Field& (0+255),f,b
  7554  004B06  D000               	goto	l7196
  7555  004B08                     l7196:
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;Setup_Time.c: 211: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7559  004B08  0100               	movlb	0	; () banked
  7560  004B0A  51CB               	movf	_Select_Field& (0+255),w,b
  7561  004B0C  ECB4  F013         	call	_Update_Setup_Screen_Cursor_Backward
  7562  004B10  0012               	return		;funcret
  7563  004B12                     __end_of_Go_Prev_Field:
  7564                           	opt stack 0
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon2	equ	0xFF1
  7572                           intcon3	equ	0xFF0
  7573                           postinc0	equ	0xFEE
  7574                           wreg	equ	0xFE8
  7575                           postdec1	equ	0xFE5
  7576                           plusw1	equ	0xFE3
  7577                           fsr1l	equ	0xFE1
  7578                           postinc2	equ	0xFDE
  7579                           plusw2	equ	0xFDB
  7580                           fsr2h	equ	0xFDA
  7581                           fsr2l	equ	0xFD9
  7582                           status	equ	0xFD8
  7583                           
  7584 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  7585 ;; Defined at:
  7586 ;;		line 330 in file "Setup_Time.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;  field           1    wreg     unsigned char 
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;  field           1   45[COMRAM] unsigned char 
  7591 ;;  xinc            1   47[COMRAM] unsigned char 
  7592 ;;  yinc            1   46[COMRAM] unsigned char 
  7593 ;; Return value:  Size  Location     Type
  7594 ;;		None               void
  7595 ;; Registers used:
  7596 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;Total ram usage:        3 bytes
  7607 ;; Hardware stack levels used:    1
  7608 ;; Hardware stack levels required when called:    8
  7609 ;; This function calls:
  7610 ;;		_fillRect
  7611 ;; This function is called by:
  7612 ;;		_Go_Prev_Field
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text25
  7617  002768                     __ptext25:
  7618                           	opt stack 0
  7619  002768                     _Update_Setup_Screen_Cursor_Backward:
  7620                           	opt stack 20
  7621                           
  7622                           ;incstack = 0
  7623                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  7624  002768  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  7625                           
  7626                           ;Setup_Time.c: 332: char xinc = 36;
  7627  00276A  0E24               	movlw	36
  7628  00276C  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  7629                           
  7630                           ;Setup_Time.c: 333: char yinc = 30;
  7631  00276E  0E1E               	movlw	30
  7632  002770  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  7633                           
  7634                           ;Setup_Time.c: 334: switch (field)
  7635  002772  D0BF               	goto	l6914
  7636  002774                     l6892:
  7637                           
  7638                           ;Setup_Time.c: 337: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  7639  002774  0E44               	movlw	68
  7640  002776  6E23               	movwf	fillRect@y,c
  7641  002778  0E19               	movlw	25
  7642  00277A  6E24               	movwf	fillRect@w,c
  7643  00277C  0E02               	movlw	2
  7644  00277E  6E25               	movwf	fillRect@h,c
  7645  002780  0E00               	movlw	0
  7646  002782  6E27               	movwf	fillRect@color+1,c
  7647  002784  0E00               	movlw	0
  7648  002786  6E26               	movwf	fillRect@color,c
  7649  002788  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7650  00278A  0F0E               	addlw	14
  7651  00278C  ECFF  F022         	call	_fillRect
  7652                           
  7653                           ;Setup_Time.c: 338: fillRect(15-1, 52+16, 25,2,0x07FF);
  7654  002790  0E44               	movlw	68
  7655  002792  6E23               	movwf	fillRect@y,c
  7656  002794  0E19               	movlw	25
  7657  002796  6E24               	movwf	fillRect@w,c
  7658  002798  0E02               	movlw	2
  7659  00279A  6E25               	movwf	fillRect@h,c
  7660  00279C  0E07               	movlw	7
  7661  00279E  6E27               	movwf	fillRect@color+1,c
  7662  0027A0  6826               	setf	fillRect@color,c
  7663  0027A2  0E0E               	movlw	14
  7664  0027A4  ECFF  F022         	call	_fillRect
  7665                           
  7666                           ;Setup_Time.c: 339: break;
  7667  0027A8  D0B8               	goto	l1324
  7668  0027AA                     l6894:
  7669                           
  7670                           ;Setup_Time.c: 342: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  7671  0027AA  0E44               	movlw	68
  7672  0027AC  6E23               	movwf	fillRect@y,c
  7673  0027AE  0E19               	movlw	25
  7674  0027B0  6E24               	movwf	fillRect@w,c
  7675  0027B2  0E02               	movlw	2
  7676  0027B4  6E25               	movwf	fillRect@h,c
  7677  0027B6  0E00               	movlw	0
  7678  0027B8  6E27               	movwf	fillRect@color+1,c
  7679  0027BA  0E00               	movlw	0
  7680  0027BC  6E26               	movwf	fillRect@color,c
  7681  0027BE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7682  0027C0  0D02               	mullw	2
  7683  0027C2  50F3               	movf	prodl,w,c
  7684  0027C4  0F0E               	addlw	14
  7685  0027C6  ECFF  F022         	call	_fillRect
  7686                           
  7687                           ;Setup_Time.c: 343: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  7688  0027CA  0E44               	movlw	68
  7689  0027CC  6E23               	movwf	fillRect@y,c
  7690  0027CE  0E19               	movlw	25
  7691  0027D0  6E24               	movwf	fillRect@w,c
  7692  0027D2  0E02               	movlw	2
  7693  0027D4  6E25               	movwf	fillRect@h,c
  7694  0027D6  0E07               	movlw	7
  7695  0027D8  6E27               	movwf	fillRect@color+1,c
  7696  0027DA  6826               	setf	fillRect@color,c
  7697  0027DC  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7698  0027DE  0F0E               	addlw	14
  7699  0027E0  ECFF  F022         	call	_fillRect
  7700                           
  7701                           ;Setup_Time.c: 344: break;
  7702  0027E4  D09A               	goto	l1324
  7703  0027E6                     l6898:
  7704                           
  7705                           ;Setup_Time.c: 347: fillRect(15-1, 52+16, 25,2,0x0000);
  7706  0027E6  0E44               	movlw	68
  7707  0027E8  6E23               	movwf	fillRect@y,c
  7708  0027EA  0E19               	movlw	25
  7709  0027EC  6E24               	movwf	fillRect@w,c
  7710  0027EE  0E02               	movlw	2
  7711  0027F0  6E25               	movwf	fillRect@h,c
  7712  0027F2  0E00               	movlw	0
  7713  0027F4  6E27               	movwf	fillRect@color+1,c
  7714  0027F6  0E00               	movlw	0
  7715  0027F8  6E26               	movwf	fillRect@color,c
  7716  0027FA  0E0E               	movlw	14
  7717  0027FC  ECFF  F022         	call	_fillRect
  7718                           
  7719                           ;Setup_Time.c: 348: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  7720  002800  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7721  002802  0F44               	addlw	68
  7722  002804  6E23               	movwf	fillRect@y,c
  7723  002806  0E19               	movlw	25
  7724  002808  6E24               	movwf	fillRect@w,c
  7725  00280A  0E02               	movlw	2
  7726  00280C  6E25               	movwf	fillRect@h,c
  7727  00280E  0E00               	movlw	0
  7728  002810  6E27               	movwf	fillRect@color+1,c
  7729  002812  0E00               	movlw	0
  7730  002814  6E26               	movwf	fillRect@color,c
  7731  002816  0E0E               	movlw	14
  7732  002818  ECFF  F022         	call	_fillRect
  7733                           
  7734                           ;Setup_Time.c: 349: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  7735  00281C  0E44               	movlw	68
  7736  00281E  6E23               	movwf	fillRect@y,c
  7737  002820  0E19               	movlw	25
  7738  002822  6E24               	movwf	fillRect@w,c
  7739  002824  0E02               	movlw	2
  7740  002826  6E25               	movwf	fillRect@h,c
  7741  002828  0E07               	movlw	7
  7742  00282A  6E27               	movwf	fillRect@color+1,c
  7743  00282C  6826               	setf	fillRect@color,c
  7744  00282E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7745  002830  0D02               	mullw	2
  7746  002832  50F3               	movf	prodl,w,c
  7747  002834  0F0E               	addlw	14
  7748  002836  ECFF  F022         	call	_fillRect
  7749                           
  7750                           ;Setup_Time.c: 350: break;
  7751  00283A  D06F               	goto	l1324
  7752  00283C                     l6902:
  7753                           
  7754                           ;Setup_Time.c: 353: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  7755  00283C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7756  00283E  0F44               	addlw	68
  7757  002840  6E23               	movwf	fillRect@y,c
  7758  002842  0E19               	movlw	25
  7759  002844  6E24               	movwf	fillRect@w,c
  7760  002846  0E02               	movlw	2
  7761  002848  6E25               	movwf	fillRect@h,c
  7762  00284A  0E00               	movlw	0
  7763  00284C  6E27               	movwf	fillRect@color+1,c
  7764  00284E  0E00               	movlw	0
  7765  002850  6E26               	movwf	fillRect@color,c
  7766  002852  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7767  002854  0F0E               	addlw	14
  7768  002856  ECFF  F022         	call	_fillRect
  7769                           
  7770                           ;Setup_Time.c: 354: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  7771  00285A  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7772  00285C  0F44               	addlw	68
  7773  00285E  6E23               	movwf	fillRect@y,c
  7774  002860  0E19               	movlw	25
  7775  002862  6E24               	movwf	fillRect@w,c
  7776  002864  0E02               	movlw	2
  7777  002866  6E25               	movwf	fillRect@h,c
  7778  002868  0E07               	movlw	7
  7779  00286A  6E27               	movwf	fillRect@color+1,c
  7780  00286C  6826               	setf	fillRect@color,c
  7781  00286E  0E0E               	movlw	14
  7782  002870  ECFF  F022         	call	_fillRect
  7783                           
  7784                           ;Setup_Time.c: 355: break;
  7785  002874  D052               	goto	l1324
  7786  002876                     l6904:
  7787                           
  7788                           ;Setup_Time.c: 358: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  7789  002876  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7790  002878  0F44               	addlw	68
  7791  00287A  6E23               	movwf	fillRect@y,c
  7792  00287C  0E19               	movlw	25
  7793  00287E  6E24               	movwf	fillRect@w,c
  7794  002880  0E02               	movlw	2
  7795  002882  6E25               	movwf	fillRect@h,c
  7796  002884  0E00               	movlw	0
  7797  002886  6E27               	movwf	fillRect@color+1,c
  7798  002888  0E00               	movlw	0
  7799  00288A  6E26               	movwf	fillRect@color,c
  7800  00288C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7801  00288E  0D02               	mullw	2
  7802  002890  50F3               	movf	prodl,w,c
  7803  002892  0F0E               	addlw	14
  7804  002894  ECFF  F022         	call	_fillRect
  7805                           
  7806                           ;Setup_Time.c: 359: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  7807  002898  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7808  00289A  0F44               	addlw	68
  7809  00289C  6E23               	movwf	fillRect@y,c
  7810  00289E  0E19               	movlw	25
  7811  0028A0  6E24               	movwf	fillRect@w,c
  7812  0028A2  0E02               	movlw	2
  7813  0028A4  6E25               	movwf	fillRect@h,c
  7814  0028A6  0E07               	movlw	7
  7815  0028A8  6E27               	movwf	fillRect@color+1,c
  7816  0028AA  6826               	setf	fillRect@color,c
  7817  0028AC  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7818  0028AE  0F0E               	addlw	14
  7819  0028B0  ECFF  F022         	call	_fillRect
  7820                           
  7821                           ;Setup_Time.c: 360: break;
  7822  0028B4  D032               	goto	l1324
  7823  0028B6                     l6908:
  7824                           
  7825                           ;Setup_Time.c: 363: fillRect(15-1, 52+16, 25,2,0x0000);
  7826  0028B6  0E44               	movlw	68
  7827  0028B8  6E23               	movwf	fillRect@y,c
  7828  0028BA  0E19               	movlw	25
  7829  0028BC  6E24               	movwf	fillRect@w,c
  7830  0028BE  0E02               	movlw	2
  7831  0028C0  6E25               	movwf	fillRect@h,c
  7832  0028C2  0E00               	movlw	0
  7833  0028C4  6E27               	movwf	fillRect@color+1,c
  7834  0028C6  0E00               	movlw	0
  7835  0028C8  6E26               	movwf	fillRect@color,c
  7836  0028CA  0E0E               	movlw	14
  7837  0028CC  ECFF  F022         	call	_fillRect
  7838                           
  7839                           ;Setup_Time.c: 364: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  7840  0028D0  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7841  0028D2  0F44               	addlw	68
  7842  0028D4  6E23               	movwf	fillRect@y,c
  7843  0028D6  0E19               	movlw	25
  7844  0028D8  6E24               	movwf	fillRect@w,c
  7845  0028DA  0E02               	movlw	2
  7846  0028DC  6E25               	movwf	fillRect@h,c
  7847  0028DE  0E07               	movlw	7
  7848  0028E0  6E27               	movwf	fillRect@color+1,c
  7849  0028E2  6826               	setf	fillRect@color,c
  7850  0028E4  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7851  0028E6  0D02               	mullw	2
  7852  0028E8  50F3               	movf	prodl,w,c
  7853  0028EA  0F0E               	addlw	14
  7854  0028EC  ECFF  F022         	call	_fillRect
  7855                           
  7856                           ;Setup_Time.c: 366: }
  7857                           
  7858                           ;Setup_Time.c: 365: break;
  7859  0028F0  D014               	goto	l1324
  7860  0028F2                     l6914:
  7861  0028F2  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  7862                           
  7863                           ; Switch size 1, requested type "space"
  7864                           ; Number of cases is 6, Range of values is 0 to 5
  7865                           ; switch strategies available:
  7866                           ; Name         Instructions Cycles
  7867                           ; simple_byte           19    10 (average)
  7868                           ;	Chosen strategy is simple_byte
  7869  0028F4  0A00               	xorlw	0	; case 0
  7870  0028F6  B4D8               	btfsc	status,2,c
  7871  0028F8  D73D               	goto	l6892
  7872  0028FA  0A01               	xorlw	1	; case 1
  7873  0028FC  B4D8               	btfsc	status,2,c
  7874  0028FE  D755               	goto	l6894
  7875  002900  0A03               	xorlw	3	; case 2
  7876  002902  B4D8               	btfsc	status,2,c
  7877  002904  D770               	goto	l6898
  7878  002906  0A01               	xorlw	1	; case 3
  7879  002908  B4D8               	btfsc	status,2,c
  7880  00290A  D798               	goto	l6902
  7881  00290C  0A07               	xorlw	7	; case 4
  7882  00290E  B4D8               	btfsc	status,2,c
  7883  002910  D7B2               	goto	l6904
  7884  002912  0A01               	xorlw	1	; case 5
  7885  002914  B4D8               	btfsc	status,2,c
  7886  002916  D7CF               	goto	l6908
  7887  002918  D000               	goto	l1324
  7888  00291A                     l1324:
  7889  00291A  0012               	return		;funcret
  7890  00291C                     __end_of_Update_Setup_Screen_Cursor_Backward:
  7891                           	opt stack 0
  7892                           tblptru	equ	0xFF8
  7893                           tblptrh	equ	0xFF7
  7894                           tblptrl	equ	0xFF6
  7895                           tablat	equ	0xFF5
  7896                           prodh	equ	0xFF4
  7897                           prodl	equ	0xFF3
  7898                           intcon2	equ	0xFF1
  7899                           intcon3	equ	0xFF0
  7900                           postinc0	equ	0xFEE
  7901                           wreg	equ	0xFE8
  7902                           postdec1	equ	0xFE5
  7903                           plusw1	equ	0xFE3
  7904                           fsr1l	equ	0xFE1
  7905                           postinc2	equ	0xFDE
  7906                           plusw2	equ	0xFDB
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _Go_Next_Field *****************
  7912 ;; Defined at:
  7913 ;;		line 199 in file "Setup_Time.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;		None
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;		None
  7918 ;; Return value:  Size  Location     Type
  7919 ;;		None               void
  7920 ;; Registers used:
  7921 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;Total ram usage:        0 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    9
  7934 ;; This function calls:
  7935 ;;		_Update_Setup_Screen_Cursor_Forward
  7936 ;; This function is called by:
  7937 ;;		_Do_Setup_Time
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           	psect	text26
  7942  004B12                     __ptext26:
  7943                           	opt stack 0
  7944  004B12                     _Go_Next_Field:
  7945                           	opt stack 20
  7946                           
  7947                           ;Setup_Time.c: 201: Select_Field++;
  7948                           
  7949                           ;incstack = 0
  7950  004B12  0100               	movlb	0	; () banked
  7951  004B14  2BCB               	incf	_Select_Field& (0+255),f,b
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;Setup_Time.c: 202: if (Select_Field == 6) Select_Field = 0;
  7955  004B16  0E06               	movlw	6
  7956  004B18  0100               	movlb	0	; () banked
  7957  004B1A  19CB               	xorwf	_Select_Field& (0+255),w,b
  7958  004B1C  A4D8               	btfss	status,2,c
  7959  004B1E  D004               	goto	l7204
  7960                           
  7961                           ; BSR set to: 0
  7962  004B20  0E00               	movlw	0
  7963  004B22  0100               	movlb	0	; () banked
  7964  004B24  6FCB               	movwf	_Select_Field& (0+255),b
  7965  004B26  D000               	goto	l7204
  7966  004B28                     l7204:
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;Setup_Time.c: 203: Update_Setup_Screen_Cursor_Forward(Select_Field);
  7970  004B28  0100               	movlb	0	; () banked
  7971  004B2A  51CB               	movf	_Select_Field& (0+255),w,b
  7972  004B2C  ECD7  F012         	call	_Update_Setup_Screen_Cursor_Forward
  7973  004B30  0012               	return		;funcret
  7974  004B32                     __end_of_Go_Next_Field:
  7975                           	opt stack 0
  7976                           tblptru	equ	0xFF8
  7977                           tblptrh	equ	0xFF7
  7978                           tblptrl	equ	0xFF6
  7979                           tablat	equ	0xFF5
  7980                           prodh	equ	0xFF4
  7981                           prodl	equ	0xFF3
  7982                           intcon2	equ	0xFF1
  7983                           intcon3	equ	0xFF0
  7984                           postinc0	equ	0xFEE
  7985                           wreg	equ	0xFE8
  7986                           postdec1	equ	0xFE5
  7987                           plusw1	equ	0xFE3
  7988                           fsr1l	equ	0xFE1
  7989                           postinc2	equ	0xFDE
  7990                           plusw2	equ	0xFDB
  7991                           fsr2h	equ	0xFDA
  7992                           fsr2l	equ	0xFD9
  7993                           status	equ	0xFD8
  7994                           
  7995 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  7996 ;; Defined at:
  7997 ;;		line 290 in file "Setup_Time.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;  field           1    wreg     unsigned char 
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;  field           1   45[COMRAM] unsigned char 
  8002 ;;  xinc            1   47[COMRAM] unsigned char 
  8003 ;;  yinc            1   46[COMRAM] unsigned char 
  8004 ;; Return value:  Size  Location     Type
  8005 ;;		None               void
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;Total ram usage:        3 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    8
  8020 ;; This function calls:
  8021 ;;		_fillRect
  8022 ;; This function is called by:
  8023 ;;		_Go_Next_Field
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           	psect	text27
  8028  0025AE                     __ptext27:
  8029                           	opt stack 0
  8030  0025AE                     _Update_Setup_Screen_Cursor_Forward:
  8031                           	opt stack 20
  8032                           
  8033                           ;incstack = 0
  8034                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  8035  0025AE  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  8036                           
  8037                           ;Setup_Time.c: 292: char xinc = 36;
  8038  0025B0  0E24               	movlw	36
  8039  0025B2  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  8040                           
  8041                           ;Setup_Time.c: 293: char yinc = 30;
  8042  0025B4  0E1E               	movlw	30
  8043  0025B6  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  8044                           
  8045                           ;Setup_Time.c: 294: switch (field)
  8046  0025B8  D0C2               	goto	l6888
  8047  0025BA                     l6866:
  8048                           
  8049                           ;Setup_Time.c: 297: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  8050  0025BA  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8051  0025BC  0F44               	addlw	68
  8052  0025BE  6E23               	movwf	fillRect@y,c
  8053  0025C0  0E19               	movlw	25
  8054  0025C2  6E24               	movwf	fillRect@w,c
  8055  0025C4  0E02               	movlw	2
  8056  0025C6  6E25               	movwf	fillRect@h,c
  8057  0025C8  0E00               	movlw	0
  8058  0025CA  6E27               	movwf	fillRect@color+1,c
  8059  0025CC  0E00               	movlw	0
  8060  0025CE  6E26               	movwf	fillRect@color,c
  8061  0025D0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8062  0025D2  0D02               	mullw	2
  8063  0025D4  50F3               	movf	prodl,w,c
  8064  0025D6  0F0E               	addlw	14
  8065  0025D8  ECFF  F022         	call	_fillRect
  8066                           
  8067                           ;Setup_Time.c: 298: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8068  0025DC  0E44               	movlw	68
  8069  0025DE  6E23               	movwf	fillRect@y,c
  8070  0025E0  0E19               	movlw	25
  8071  0025E2  6E24               	movwf	fillRect@w,c
  8072  0025E4  0E02               	movlw	2
  8073  0025E6  6E25               	movwf	fillRect@h,c
  8074  0025E8  0E00               	movlw	0
  8075  0025EA  6E27               	movwf	fillRect@color+1,c
  8076  0025EC  0E00               	movlw	0
  8077  0025EE  6E26               	movwf	fillRect@color,c
  8078  0025F0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8079  0025F2  0D02               	mullw	2
  8080  0025F4  50F3               	movf	prodl,w,c
  8081  0025F6  0F0E               	addlw	14
  8082  0025F8  ECFF  F022         	call	_fillRect
  8083                           
  8084                           ;Setup_Time.c: 299: fillRect(15-1, 52+16, 25,2,0x07FF);
  8085  0025FC  0E44               	movlw	68
  8086  0025FE  6E23               	movwf	fillRect@y,c
  8087  002600  0E19               	movlw	25
  8088  002602  6E24               	movwf	fillRect@w,c
  8089  002604  0E02               	movlw	2
  8090  002606  6E25               	movwf	fillRect@h,c
  8091  002608  0E07               	movlw	7
  8092  00260A  6E27               	movwf	fillRect@color+1,c
  8093  00260C  6826               	setf	fillRect@color,c
  8094  00260E  0E0E               	movlw	14
  8095  002610  ECFF  F022         	call	_fillRect
  8096                           
  8097                           ;Setup_Time.c: 300: break;
  8098  002614  D0A8               	goto	l1313
  8099  002616                     l6870:
  8100                           
  8101                           ;Setup_Time.c: 303: fillRect(15-1, 52+16, 25,2,0x0000);
  8102  002616  0E44               	movlw	68
  8103  002618  6E23               	movwf	fillRect@y,c
  8104  00261A  0E19               	movlw	25
  8105  00261C  6E24               	movwf	fillRect@w,c
  8106  00261E  0E02               	movlw	2
  8107  002620  6E25               	movwf	fillRect@h,c
  8108  002622  0E00               	movlw	0
  8109  002624  6E27               	movwf	fillRect@color+1,c
  8110  002626  0E00               	movlw	0
  8111  002628  6E26               	movwf	fillRect@color,c
  8112  00262A  0E0E               	movlw	14
  8113  00262C  ECFF  F022         	call	_fillRect
  8114                           
  8115                           ;Setup_Time.c: 304: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  8116  002630  0E44               	movlw	68
  8117  002632  6E23               	movwf	fillRect@y,c
  8118  002634  0E19               	movlw	25
  8119  002636  6E24               	movwf	fillRect@w,c
  8120  002638  0E02               	movlw	2
  8121  00263A  6E25               	movwf	fillRect@h,c
  8122  00263C  0E07               	movlw	7
  8123  00263E  6E27               	movwf	fillRect@color+1,c
  8124  002640  6826               	setf	fillRect@color,c
  8125  002642  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8126  002644  0F0E               	addlw	14
  8127  002646  ECFF  F022         	call	_fillRect
  8128                           
  8129                           ;Setup_Time.c: 305: break;
  8130  00264A  D08D               	goto	l1313
  8131  00264C                     l6872:
  8132                           
  8133                           ;Setup_Time.c: 309: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  8134  00264C  0E44               	movlw	68
  8135  00264E  6E23               	movwf	fillRect@y,c
  8136  002650  0E19               	movlw	25
  8137  002652  6E24               	movwf	fillRect@w,c
  8138  002654  0E02               	movlw	2
  8139  002656  6E25               	movwf	fillRect@h,c
  8140  002658  0E00               	movlw	0
  8141  00265A  6E27               	movwf	fillRect@color+1,c
  8142  00265C  0E00               	movlw	0
  8143  00265E  6E26               	movwf	fillRect@color,c
  8144  002660  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8145  002662  0F0E               	addlw	14
  8146  002664  ECFF  F022         	call	_fillRect
  8147                           
  8148                           ;Setup_Time.c: 310: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  8149  002668  0E44               	movlw	68
  8150  00266A  6E23               	movwf	fillRect@y,c
  8151  00266C  0E19               	movlw	25
  8152  00266E  6E24               	movwf	fillRect@w,c
  8153  002670  0E02               	movlw	2
  8154  002672  6E25               	movwf	fillRect@h,c
  8155  002674  0E07               	movlw	7
  8156  002676  6E27               	movwf	fillRect@color+1,c
  8157  002678  6826               	setf	fillRect@color,c
  8158  00267A  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8159  00267C  0D02               	mullw	2
  8160  00267E  50F3               	movf	prodl,w,c
  8161  002680  0F0E               	addlw	14
  8162  002682  ECFF  F022         	call	_fillRect
  8163                           
  8164                           ;Setup_Time.c: 311: break;
  8165  002686  D06F               	goto	l1313
  8166  002688                     l6876:
  8167                           
  8168                           ;Setup_Time.c: 314: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8169  002688  0E44               	movlw	68
  8170  00268A  6E23               	movwf	fillRect@y,c
  8171  00268C  0E19               	movlw	25
  8172  00268E  6E24               	movwf	fillRect@w,c
  8173  002690  0E02               	movlw	2
  8174  002692  6E25               	movwf	fillRect@h,c
  8175  002694  0E00               	movlw	0
  8176  002696  6E27               	movwf	fillRect@color+1,c
  8177  002698  0E00               	movlw	0
  8178  00269A  6E26               	movwf	fillRect@color,c
  8179  00269C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8180  00269E  0D02               	mullw	2
  8181  0026A0  50F3               	movf	prodl,w,c
  8182  0026A2  0F0E               	addlw	14
  8183  0026A4  ECFF  F022         	call	_fillRect
  8184                           
  8185                           ;Setup_Time.c: 315: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  8186  0026A8  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8187  0026AA  0F44               	addlw	68
  8188  0026AC  6E23               	movwf	fillRect@y,c
  8189  0026AE  0E19               	movlw	25
  8190  0026B0  6E24               	movwf	fillRect@w,c
  8191  0026B2  0E02               	movlw	2
  8192  0026B4  6E25               	movwf	fillRect@h,c
  8193  0026B6  0E07               	movlw	7
  8194  0026B8  6E27               	movwf	fillRect@color+1,c
  8195  0026BA  6826               	setf	fillRect@color,c
  8196  0026BC  0E0E               	movlw	14
  8197  0026BE  ECFF  F022         	call	_fillRect
  8198                           
  8199                           ;Setup_Time.c: 316: break;
  8200  0026C2  D051               	goto	l1313
  8201  0026C4                     l6880:
  8202                           
  8203                           ;Setup_Time.c: 319: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  8204  0026C4  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8205  0026C6  0F44               	addlw	68
  8206  0026C8  6E23               	movwf	fillRect@y,c
  8207  0026CA  0E19               	movlw	25
  8208  0026CC  6E24               	movwf	fillRect@w,c
  8209  0026CE  0E02               	movlw	2
  8210  0026D0  6E25               	movwf	fillRect@h,c
  8211  0026D2  0E00               	movlw	0
  8212  0026D4  6E27               	movwf	fillRect@color+1,c
  8213  0026D6  0E00               	movlw	0
  8214  0026D8  6E26               	movwf	fillRect@color,c
  8215  0026DA  0E0E               	movlw	14
  8216  0026DC  ECFF  F022         	call	_fillRect
  8217                           
  8218                           ;Setup_Time.c: 320: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  8219  0026E0  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8220  0026E2  0F44               	addlw	68
  8221  0026E4  6E23               	movwf	fillRect@y,c
  8222  0026E6  0E19               	movlw	25
  8223  0026E8  6E24               	movwf	fillRect@w,c
  8224  0026EA  0E02               	movlw	2
  8225  0026EC  6E25               	movwf	fillRect@h,c
  8226  0026EE  0E07               	movlw	7
  8227  0026F0  6E27               	movwf	fillRect@color+1,c
  8228  0026F2  6826               	setf	fillRect@color,c
  8229  0026F4  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8230  0026F6  0F0E               	addlw	14
  8231  0026F8  ECFF  F022         	call	_fillRect
  8232                           
  8233                           ;Setup_Time.c: 321: break;
  8234  0026FC  D034               	goto	l1313
  8235  0026FE                     l6882:
  8236                           
  8237                           ;Setup_Time.c: 324: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  8238  0026FE  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8239  002700  0F44               	addlw	68
  8240  002702  6E23               	movwf	fillRect@y,c
  8241  002704  0E19               	movlw	25
  8242  002706  6E24               	movwf	fillRect@w,c
  8243  002708  0E02               	movlw	2
  8244  00270A  6E25               	movwf	fillRect@h,c
  8245  00270C  0E00               	movlw	0
  8246  00270E  6E27               	movwf	fillRect@color+1,c
  8247  002710  0E00               	movlw	0
  8248  002712  6E26               	movwf	fillRect@color,c
  8249  002714  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8250  002716  0F0E               	addlw	14
  8251  002718  ECFF  F022         	call	_fillRect
  8252                           
  8253                           ;Setup_Time.c: 325: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  8254  00271C  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8255  00271E  0F44               	addlw	68
  8256  002720  6E23               	movwf	fillRect@y,c
  8257  002722  0E19               	movlw	25
  8258  002724  6E24               	movwf	fillRect@w,c
  8259  002726  0E02               	movlw	2
  8260  002728  6E25               	movwf	fillRect@h,c
  8261  00272A  0E07               	movlw	7
  8262  00272C  6E27               	movwf	fillRect@color+1,c
  8263  00272E  6826               	setf	fillRect@color,c
  8264  002730  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8265  002732  0D02               	mullw	2
  8266  002734  50F3               	movf	prodl,w,c
  8267  002736  0F0E               	addlw	14
  8268  002738  ECFF  F022         	call	_fillRect
  8269                           
  8270                           ;Setup_Time.c: 327: }
  8271                           
  8272                           ;Setup_Time.c: 326: break;
  8273  00273C  D014               	goto	l1313
  8274  00273E                     l6888:
  8275  00273E  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  8276                           
  8277                           ; Switch size 1, requested type "space"
  8278                           ; Number of cases is 6, Range of values is 0 to 5
  8279                           ; switch strategies available:
  8280                           ; Name         Instructions Cycles
  8281                           ; simple_byte           19    10 (average)
  8282                           ;	Chosen strategy is simple_byte
  8283  002740  0A00               	xorlw	0	; case 0
  8284  002742  B4D8               	btfsc	status,2,c
  8285  002744  D73A               	goto	l6866
  8286  002746  0A01               	xorlw	1	; case 1
  8287  002748  B4D8               	btfsc	status,2,c
  8288  00274A  D765               	goto	l6870
  8289  00274C  0A03               	xorlw	3	; case 2
  8290  00274E  B4D8               	btfsc	status,2,c
  8291  002750  D77D               	goto	l6872
  8292  002752  0A01               	xorlw	1	; case 3
  8293  002754  B4D8               	btfsc	status,2,c
  8294  002756  D798               	goto	l6876
  8295  002758  0A07               	xorlw	7	; case 4
  8296  00275A  B4D8               	btfsc	status,2,c
  8297  00275C  D7B3               	goto	l6880
  8298  00275E  0A01               	xorlw	1	; case 5
  8299  002760  B4D8               	btfsc	status,2,c
  8300  002762  D7CD               	goto	l6882
  8301  002764  D000               	goto	l1313
  8302  002766                     l1313:
  8303  002766  0012               	return		;funcret
  8304  002768                     __end_of_Update_Setup_Screen_Cursor_Forward:
  8305                           	opt stack 0
  8306                           tblptru	equ	0xFF8
  8307                           tblptrh	equ	0xFF7
  8308                           tblptrl	equ	0xFF6
  8309                           tablat	equ	0xFF5
  8310                           prodh	equ	0xFF4
  8311                           prodl	equ	0xFF3
  8312                           intcon2	equ	0xFF1
  8313                           intcon3	equ	0xFF0
  8314                           postinc0	equ	0xFEE
  8315                           wreg	equ	0xFE8
  8316                           postdec1	equ	0xFE5
  8317                           plusw1	equ	0xFE3
  8318                           fsr1l	equ	0xFE1
  8319                           postinc2	equ	0xFDE
  8320                           plusw2	equ	0xFDB
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function _Exit_Time_Setup *****************
  8326 ;; Defined at:
  8327 ;;		line 222 in file "Setup_Time.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;		None               void
  8334 ;; Registers used:
  8335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;Total ram usage:        0 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:   11
  8348 ;; This function calls:
  8349 ;;		_DS3231_Read_Time
  8350 ;;		_Initialize_Screen
  8351 ;; This function is called by:
  8352 ;;		_Do_Setup_Time
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           	psect	text28
  8357  004D60                     __ptext28:
  8358                           	opt stack 0
  8359  004D60                     _Exit_Time_Setup:
  8360                           	opt stack 18
  8361                           
  8362                           ;Setup_Time.c: 224: DS3231_Read_Time();
  8363                           
  8364                           ;incstack = 0
  8365  004D60  EC4A  F021         	call	_DS3231_Read_Time	;wreg free
  8366                           
  8367                           ;Setup_Time.c: 225: Initialize_Screen();
  8368  004D64  EC95  F00B         	call	_Initialize_Screen	;wreg free
  8369                           
  8370                           ;Setup_Time.c: 226: In_Time_Setup = 0;
  8371  004D68  0E00               	movlw	0
  8372  004D6A  0100               	movlb	0	; () banked
  8373  004D6C  6FC8               	movwf	_In_Time_Setup& (0+255),b
  8374                           
  8375                           ; BSR set to: 0
  8376  004D6E  0012               	return		;funcret
  8377  004D70                     __end_of_Exit_Time_Setup:
  8378                           	opt stack 0
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon2	equ	0xFF1
  8386                           intcon3	equ	0xFF0
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           postdec1	equ	0xFE5
  8390                           plusw1	equ	0xFE3
  8391                           fsr1l	equ	0xFE1
  8392                           postinc2	equ	0xFDE
  8393                           plusw2	equ	0xFDB
  8394                           fsr2h	equ	0xFDA
  8395                           fsr2l	equ	0xFD9
  8396                           status	equ	0xFD8
  8397                           
  8398 ;; *************** function _Do_Save_New_Time *****************
  8399 ;; Defined at:
  8400 ;;		line 214 in file "Setup_Time.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;		None
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;		None
  8405 ;; Return value:  Size  Location     Type
  8406 ;;		None               void
  8407 ;; Registers used:
  8408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;Total ram usage:        0 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:   11
  8421 ;; This function calls:
  8422 ;;		_DS3231_Read_Time
  8423 ;;		_DS3231_Write_Time
  8424 ;;		_Initialize_Screen
  8425 ;; This function is called by:
  8426 ;;		_Do_Setup_Time
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text29
  8431  004CA6                     __ptext29:
  8432                           	opt stack 0
  8433  004CA6                     _Do_Save_New_Time:
  8434                           	opt stack 18
  8435                           
  8436                           ;Setup_Time.c: 216: DS3231_Write_Time();
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;incstack = 0
  8440  004CA6  ECE4  F01D         	call	_DS3231_Write_Time	;wreg free
  8441                           
  8442                           ;Setup_Time.c: 217: DS3231_Read_Time();
  8443  004CAA  EC4A  F021         	call	_DS3231_Read_Time	;wreg free
  8444                           
  8445                           ;Setup_Time.c: 218: Initialize_Screen();
  8446  004CAE  EC95  F00B         	call	_Initialize_Screen	;wreg free
  8447                           
  8448                           ;Setup_Time.c: 219: In_Time_Setup = 0;
  8449  004CB2  0E00               	movlw	0
  8450  004CB4  0100               	movlb	0	; () banked
  8451  004CB6  6FC8               	movwf	_In_Time_Setup& (0+255),b
  8452                           
  8453                           ; BSR set to: 0
  8454  004CB8  0012               	return		;funcret
  8455  004CBA                     __end_of_Do_Save_New_Time:
  8456                           	opt stack 0
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           prodh	equ	0xFF4
  8462                           prodl	equ	0xFF3
  8463                           intcon2	equ	0xFF1
  8464                           intcon3	equ	0xFF0
  8465                           postinc0	equ	0xFEE
  8466                           wreg	equ	0xFE8
  8467                           postdec1	equ	0xFE5
  8468                           plusw1	equ	0xFE3
  8469                           fsr1l	equ	0xFE1
  8470                           postinc2	equ	0xFDE
  8471                           plusw2	equ	0xFDB
  8472                           fsr2h	equ	0xFDA
  8473                           fsr2l	equ	0xFD9
  8474                           status	equ	0xFD8
  8475                           
  8476 ;; *************** function _Initialize_Screen *****************
  8477 ;; Defined at:
  8478 ;;		line 41 in file "Main_Screen.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;		None
  8481 ;; Auto vars:     Size  Location     Type
  8482 ;;		None
  8483 ;; Return value:  Size  Location     Type
  8484 ;;		None               void
  8485 ;; Registers used:
  8486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8487 ;; Tracked objects:
  8488 ;;		On entry : 0/0
  8489 ;;		On exit  : 0/0
  8490 ;;		Unchanged: 0/0
  8491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;Total ram usage:        0 bytes
  8497 ;; Hardware stack levels used:    1
  8498 ;; Hardware stack levels required when called:   10
  8499 ;; This function calls:
  8500 ;;		_LCD_Reset
  8501 ;;		_TFT_GreenTab_Initialize
  8502 ;;		_drawtext
  8503 ;;		_fillScreen
  8504 ;;		_strcpy
  8505 ;; This function is called by:
  8506 ;;		_main
  8507 ;;		_Do_Save_New_Fan_Temp
  8508 ;;		_Do_Save_New_Time
  8509 ;;		_Exit_Time_Setup
  8510 ;;		_Exit_Setup_Fan_Temp
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           	psect	text30
  8515  00172A                     __ptext30:
  8516                           	opt stack 0
  8517  00172A                     _Initialize_Screen:
  8518                           	opt stack 18
  8519                           
  8520                           ;Main_Screen.c: 43: LCD_Reset();
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;incstack = 0
  8524  00172A  EC71  F026         	call	_LCD_Reset	;wreg free
  8525                           
  8526                           ;Main_Screen.c: 44: TFT_GreenTab_Initialize();
  8527  00172E  EC68  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  8528                           
  8529                           ;Main_Screen.c: 45: fillScreen(0x0000);
  8530  001732  0E00               	movlw	0
  8531  001734  6E25               	movwf	fillScreen@color+1,c
  8532  001736  0E00               	movlw	0
  8533  001738  6E24               	movwf	fillScreen@color,c
  8534  00173A  ECB8  F025         	call	_fillScreen	;wreg free
  8535                           
  8536                           ;Main_Screen.c: 46: if (1 == 0)
  8537  00173E  D005               	goto	l9522
  8538                           
  8539                           ;Main_Screen.c: 47: {
  8540                           ;Main_Screen.c: 48: Timing_Txt[12] = 'S';
  8541  001740  0E53               	movlw	83
  8542  001742  0101               	movlb	1	; () banked
  8543  001744  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  8544                           
  8545                           ;Main_Screen.c: 49: Timing_Txt[13] = 'P';
  8546  001746  0E50               	movlw	80
  8547  001748  D004               	goto	L7
  8548  00174A                     l9522:
  8549                           
  8550                           ;Main_Screen.c: 51: else
  8551                           ;Main_Screen.c: 52: {
  8552                           ;Main_Screen.c: 53: Timing_Txt[12] = 'F';
  8553  00174A  0E46               	movlw	70
  8554  00174C  0101               	movlb	1	; () banked
  8555  00174E  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  8556                           
  8557                           ;Main_Screen.c: 54: Timing_Txt[13] = 'A';
  8558  001750  0E41               	movlw	65
  8559  001752                     L7:
  8560  001752  0101               	movlb	1	; () banked
  8561  001754  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  8562                           
  8563                           ; BSR set to: 1
  8564                           ;Main_Screen.c: 55: }
  8565                           ;Main_Screen.c: 56: Timing_Txt[14] = 24/10 + '0';
  8566  001756  0E32               	movlw	50
  8567  001758  0101               	movlb	1	; () banked
  8568  00175A  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  8569                           
  8570                           ;Main_Screen.c: 57: Timing_Txt[15] = 24%10 + '0';
  8571  00175C  0E34               	movlw	52
  8572  00175E  0101               	movlb	1	; () banked
  8573  001760  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  8574                           
  8575                           ;Main_Screen.c: 58: Timing_Txt[17] = 3%10 + '0';
  8576  001762  0E33               	movlw	51
  8577  001764  0101               	movlb	1	; () banked
  8578  001766  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  8579                           
  8580                           ;Main_Screen.c: 59: Timing_Txt[19] = 13/10 + '0';
  8581  001768  0E31               	movlw	49
  8582  00176A  0101               	movlb	1	; () banked
  8583  00176C  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  8584                           
  8585                           ;Main_Screen.c: 60: Timing_Txt[20] = 13%10 + '0';
  8586  00176E  0E33               	movlw	51
  8587  001770  0101               	movlb	1	; () banked
  8588  001772  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  8589                           
  8590                           ; BSR set to: 1
  8591                           ;Main_Screen.c: 62: if (SYSTEM_ON == 1)
  8592  001774  0462               	decf	_SYSTEM_ON,w,c
  8593  001776  A4D8               	btfss	status,2,c
  8594  001778  D189               	goto	l9564
  8595                           
  8596                           ; BSR set to: 1
  8597                           ;Main_Screen.c: 63: {
  8598                           ;Main_Screen.c: 64: drawtext(1, 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  8599  00177A  0E01               	movlw	1
  8600  00177C  6E39               	movwf	drawtext@y,c
  8601  00177E  0E3C               	movlw	low _Timing_Txt
  8602  001780  6E3A               	movwf	drawtext@_text,c
  8603  001782  0E01               	movlw	high _Timing_Txt
  8604  001784  6E3B               	movwf	drawtext@_text+1,c
  8605  001786  0EFF               	movlw	255
  8606  001788  6E3D               	movwf	drawtext@color+1,c
  8607  00178A  683C               	setf	drawtext@color,c
  8608  00178C  0E00               	movlw	0
  8609  00178E  6E3F               	movwf	drawtext@bg+1,c
  8610  001790  0E00               	movlw	0
  8611  001792  6E3E               	movwf	drawtext@bg,c
  8612  001794  0E01               	movlw	1
  8613  001796  6E40               	movwf	drawtext@size,c
  8614  001798  0E01               	movlw	1
  8615  00179A  ECD1  F01A         	call	_drawtext
  8616                           
  8617                           ;Main_Screen.c: 66: strcpy(txt, "Temperature:");
  8618  00179E  C05E  F011         	movff	_txt,strcpy@to
  8619  0017A2  C05F  F012         	movff	_txt+1,strcpy@to+1
  8620  0017A6  0E7B               	movlw	low STR_12
  8621  0017A8  6E13               	movwf	strcpy@from,c
  8622  0017AA  0EFF               	movlw	high STR_12
  8623  0017AC  6E14               	movwf	strcpy@from+1,c
  8624  0017AE  EC1F  F024         	call	_strcpy	;wreg free
  8625                           
  8626                           ;Main_Screen.c: 67: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  8627  0017B2  0E0B               	movlw	11
  8628  0017B4  6E39               	movwf	drawtext@y,c
  8629  0017B6  C05E  F03A         	movff	_txt,drawtext@_text
  8630  0017BA  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8631  0017BE  0EF8               	movlw	248
  8632  0017C0  6E3D               	movwf	drawtext@color+1,c
  8633  0017C2  0E1F               	movlw	31
  8634  0017C4  6E3C               	movwf	drawtext@color,c
  8635  0017C6  0E00               	movlw	0
  8636  0017C8  6E3F               	movwf	drawtext@bg+1,c
  8637  0017CA  0E00               	movlw	0
  8638  0017CC  6E3E               	movwf	drawtext@bg,c
  8639  0017CE  0E01               	movlw	1
  8640  0017D0  6E40               	movwf	drawtext@size,c
  8641  0017D2  0E18               	movlw	24
  8642  0017D4  ECD1  F01A         	call	_drawtext
  8643                           
  8644                           ;Main_Screen.c: 68: strcpy(txt, "C/");
  8645  0017D8  C05E  F011         	movff	_txt,strcpy@to
  8646  0017DC  C05F  F012         	movff	_txt+1,strcpy@to+1
  8647  0017E0  0EF5               	movlw	low STR_13
  8648  0017E2  6E13               	movwf	strcpy@from,c
  8649  0017E4  0EFF               	movlw	high STR_13
  8650  0017E6  6E14               	movwf	strcpy@from+1,c
  8651  0017E8  EC1F  F024         	call	_strcpy	;wreg free
  8652                           
  8653                           ;Main_Screen.c: 69: drawtext(38 , 23, txt, 0xFFE0 , 0x0000, 2);
  8654  0017EC  0E17               	movlw	23
  8655  0017EE  6E39               	movwf	drawtext@y,c
  8656  0017F0  C05E  F03A         	movff	_txt,drawtext@_text
  8657  0017F4  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8658  0017F8  0EFF               	movlw	255
  8659  0017FA  6E3D               	movwf	drawtext@color+1,c
  8660  0017FC  0EE0               	movlw	224
  8661  0017FE  6E3C               	movwf	drawtext@color,c
  8662  001800  0E00               	movlw	0
  8663  001802  6E3F               	movwf	drawtext@bg+1,c
  8664  001804  0E00               	movlw	0
  8665  001806  6E3E               	movwf	drawtext@bg,c
  8666  001808  0E02               	movlw	2
  8667  00180A  6E40               	movwf	drawtext@size,c
  8668  00180C  0E26               	movlw	38
  8669  00180E  ECD1  F01A         	call	_drawtext
  8670                           
  8671                           ;Main_Screen.c: 70: strcpy(txt, "F");
  8672  001812  C05E  F011         	movff	_txt,strcpy@to
  8673  001816  C05F  F012         	movff	_txt+1,strcpy@to+1
  8674  00181A  0E1E               	movlw	low (STR_35+18)
  8675  00181C  6E13               	movwf	strcpy@from,c
  8676  00181E  0EFF               	movlw	high (STR_35+18)
  8677  001820  6E14               	movwf	strcpy@from+1,c
  8678  001822  EC1F  F024         	call	_strcpy	;wreg free
  8679                           
  8680                           ;Main_Screen.c: 71: drawtext(110 , 23, txt, 0xFFE0 , 0x0000, 2);
  8681  001826  0E17               	movlw	23
  8682  001828  6E39               	movwf	drawtext@y,c
  8683  00182A  C05E  F03A         	movff	_txt,drawtext@_text
  8684  00182E  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8685  001832  0EFF               	movlw	255
  8686  001834  6E3D               	movwf	drawtext@color+1,c
  8687  001836  0EE0               	movlw	224
  8688  001838  6E3C               	movwf	drawtext@color,c
  8689  00183A  0E00               	movlw	0
  8690  00183C  6E3F               	movwf	drawtext@bg+1,c
  8691  00183E  0E00               	movlw	0
  8692  001840  6E3E               	movwf	drawtext@bg,c
  8693  001842  0E02               	movlw	2
  8694  001844  6E40               	movwf	drawtext@size,c
  8695  001846  0E6E               	movlw	110
  8696  001848  ECD1  F01A         	call	_drawtext
  8697                           
  8698                           ;Main_Screen.c: 72: strcpy(txt, "Time");
  8699  00184C  C05E  F011         	movff	_txt,strcpy@to
  8700  001850  C05F  F012         	movff	_txt+1,strcpy@to+1
  8701  001854  0EC8               	movlw	low (STR_18+6)
  8702  001856  6E13               	movwf	strcpy@from,c
  8703  001858  0EFF               	movlw	high (STR_18+6)
  8704  00185A  6E14               	movwf	strcpy@from+1,c
  8705  00185C  EC1F  F024         	call	_strcpy	;wreg free
  8706                           
  8707                           ;Main_Screen.c: 73: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8708  001860  0E28               	movlw	40
  8709  001862  6E39               	movwf	drawtext@y,c
  8710  001864  C05E  F03A         	movff	_txt,drawtext@_text
  8711  001868  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8712  00186C  0E00               	movlw	0
  8713  00186E  6E3D               	movwf	drawtext@color+1,c
  8714  001870  0E1F               	movlw	31
  8715  001872  6E3C               	movwf	drawtext@color,c
  8716  001874  0E00               	movlw	0
  8717  001876  6E3F               	movwf	drawtext@bg+1,c
  8718  001878  0E00               	movlw	0
  8719  00187A  6E3E               	movwf	drawtext@bg,c
  8720  00187C  0E01               	movlw	1
  8721  00187E  6E40               	movwf	drawtext@size,c
  8722  001880  0E32               	movlw	50
  8723  001882  ECD1  F01A         	call	_drawtext
  8724                           
  8725                           ;Main_Screen.c: 74: strcpy(txt, "Date");
  8726  001886  C05E  F011         	movff	_txt,strcpy@to
  8727  00188A  C05F  F012         	movff	_txt+1,strcpy@to+1
  8728  00188E  0ED7               	movlw	low STR_16
  8729  001890  6E13               	movwf	strcpy@from,c
  8730  001892  0EFF               	movlw	high STR_16
  8731  001894  6E14               	movwf	strcpy@from+1,c
  8732  001896  EC1F  F024         	call	_strcpy	;wreg free
  8733                           
  8734                           ;Main_Screen.c: 75: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  8735  00189A  0E47               	movlw	71
  8736  00189C  6E39               	movwf	drawtext@y,c
  8737  00189E  C05E  F03A         	movff	_txt,drawtext@_text
  8738  0018A2  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8739  0018A6  0EF8               	movlw	248
  8740  0018A8  6E3D               	movwf	drawtext@color+1,c
  8741  0018AA  0E00               	movlw	0
  8742  0018AC  6E3C               	movwf	drawtext@color,c
  8743  0018AE  0E00               	movlw	0
  8744  0018B0  6E3F               	movwf	drawtext@bg+1,c
  8745  0018B2  0E00               	movlw	0
  8746  0018B4  6E3E               	movwf	drawtext@bg,c
  8747  0018B6  0E01               	movlw	1
  8748  0018B8  6E40               	movwf	drawtext@size,c
  8749  0018BA  0E32               	movlw	50
  8750  0018BC  ECD1  F01A         	call	_drawtext
  8751                           
  8752                           ;Main_Screen.c: 76: strcpy(txt, "Timer Mode");
  8753  0018C0  C05E  F011         	movff	_txt,strcpy@to
  8754  0018C4  C05F  F012         	movff	_txt+1,strcpy@to+1
  8755  0018C8  0EB7               	movlw	low STR_17
  8756  0018CA  6E13               	movwf	strcpy@from,c
  8757  0018CC  0EFF               	movlw	high STR_17
  8758  0018CE  6E14               	movwf	strcpy@from+1,c
  8759  0018D0  EC1F  F024         	call	_strcpy	;wreg free
  8760                           
  8761                           ;Main_Screen.c: 77: drawtext(1 , 100 , txt, 0xFFE0, 0x0000, 1);
  8762  0018D4  0E64               	movlw	100
  8763  0018D6  6E39               	movwf	drawtext@y,c
  8764  0018D8  C05E  F03A         	movff	_txt,drawtext@_text
  8765  0018DC  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8766  0018E0  0EFF               	movlw	255
  8767  0018E2  6E3D               	movwf	drawtext@color+1,c
  8768  0018E4  0EE0               	movlw	224
  8769  0018E6  6E3C               	movwf	drawtext@color,c
  8770  0018E8  0E00               	movlw	0
  8771  0018EA  6E3F               	movwf	drawtext@bg+1,c
  8772  0018EC  0E00               	movlw	0
  8773  0018EE  6E3E               	movwf	drawtext@bg,c
  8774  0018F0  0E01               	movlw	1
  8775  0018F2  6E40               	movwf	drawtext@size,c
  8776  0018F4  0E01               	movlw	1
  8777  0018F6  ECD1  F01A         	call	_drawtext
  8778                           
  8779                           ;Main_Screen.c: 78: strcpy(txt, "Timer Time");
  8780  0018FA  C05E  F011         	movff	_txt,strcpy@to
  8781  0018FE  C05F  F012         	movff	_txt+1,strcpy@to+1
  8782  001902  0EC2               	movlw	low STR_18
  8783  001904  6E13               	movwf	strcpy@from,c
  8784  001906  0EFF               	movlw	high STR_18
  8785  001908  6E14               	movwf	strcpy@from+1,c
  8786  00190A  EC1F  F024         	call	_strcpy	;wreg free
  8787                           
  8788                           ;Main_Screen.c: 79: drawtext(65 , 100 , txt, 0xFFE0, 0x0000, 1);
  8789  00190E  0E64               	movlw	100
  8790  001910  6E39               	movwf	drawtext@y,c
  8791  001912  C05E  F03A         	movff	_txt,drawtext@_text
  8792  001916  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8793  00191A  0EFF               	movlw	255
  8794  00191C  6E3D               	movwf	drawtext@color+1,c
  8795  00191E  0EE0               	movlw	224
  8796  001920  6E3C               	movwf	drawtext@color,c
  8797  001922  0E00               	movlw	0
  8798  001924  6E3F               	movwf	drawtext@bg+1,c
  8799  001926  0E00               	movlw	0
  8800  001928  6E3E               	movwf	drawtext@bg,c
  8801  00192A  0E01               	movlw	1
  8802  00192C  6E40               	movwf	drawtext@size,c
  8803  00192E  0E41               	movlw	65
  8804  001930  ECD1  F01A         	call	_drawtext
  8805                           
  8806                           ;Main_Screen.c: 80: strcpy(txt, "FAN SetTemp");
  8807  001934  C05E  F011         	movff	_txt,strcpy@to
  8808  001938  C05F  F012         	movff	_txt+1,strcpy@to+1
  8809  00193C  0EA0               	movlw	low STR_19
  8810  00193E  6E13               	movwf	strcpy@from,c
  8811  001940  0EFF               	movlw	high STR_19
  8812  001942  6E14               	movwf	strcpy@from+1,c
  8813  001944  EC1F  F024         	call	_strcpy	;wreg free
  8814                           
  8815                           ;Main_Screen.c: 81: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
  8816  001948  0E78               	movlw	120
  8817  00194A  6E39               	movwf	drawtext@y,c
  8818  00194C  C05E  F03A         	movff	_txt,drawtext@_text
  8819  001950  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8820  001954  0E00               	movlw	0
  8821  001956  6E3D               	movwf	drawtext@color+1,c
  8822  001958  0E1F               	movlw	31
  8823  00195A  6E3C               	movwf	drawtext@color,c
  8824  00195C  0E00               	movlw	0
  8825  00195E  6E3F               	movwf	drawtext@bg+1,c
  8826  001960  0E00               	movlw	0
  8827  001962  6E3E               	movwf	drawtext@bg,c
  8828  001964  0E01               	movlw	1
  8829  001966  6E40               	movwf	drawtext@size,c
  8830  001968  0E06               	movlw	6
  8831  00196A  ECD1  F01A         	call	_drawtext
  8832                           
  8833                           ;Main_Screen.c: 82: strcpy(txt, "Mode");
  8834  00196E  C05E  F011         	movff	_txt,strcpy@to
  8835  001972  C05F  F012         	movff	_txt+1,strcpy@to+1
  8836  001976  0EBD               	movlw	low (STR_17+6)
  8837  001978  6E13               	movwf	strcpy@from,c
  8838  00197A  0EFF               	movlw	high (STR_17+6)
  8839  00197C  6E14               	movwf	strcpy@from+1,c
  8840  00197E  EC1F  F024         	call	_strcpy	;wreg free
  8841                           
  8842                           ;Main_Screen.c: 83: drawtext(75, 120, txt, 0x001F , 0x0000, 1);
  8843  001982  0E78               	movlw	120
  8844  001984  6E39               	movwf	drawtext@y,c
  8845  001986  C05E  F03A         	movff	_txt,drawtext@_text
  8846  00198A  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8847  00198E  0E00               	movlw	0
  8848  001990  6E3D               	movwf	drawtext@color+1,c
  8849  001992  0E1F               	movlw	31
  8850  001994  6E3C               	movwf	drawtext@color,c
  8851  001996  0E00               	movlw	0
  8852  001998  6E3F               	movwf	drawtext@bg+1,c
  8853  00199A  0E00               	movlw	0
  8854  00199C  6E3E               	movwf	drawtext@bg,c
  8855  00199E  0E01               	movlw	1
  8856  0019A0  6E40               	movwf	drawtext@size,c
  8857  0019A2  0E4B               	movlw	75
  8858  0019A4  ECD1  F01A         	call	_drawtext
  8859                           
  8860                           ;Main_Screen.c: 84: strcpy(txt, "SW");
  8861  0019A8  C05E  F011         	movff	_txt,strcpy@to
  8862  0019AC  C05F  F012         	movff	_txt+1,strcpy@to+1
  8863  0019B0  0EFB               	movlw	low STR_21
  8864  0019B2  6E13               	movwf	strcpy@from,c
  8865  0019B4  0EFF               	movlw	high STR_21
  8866  0019B6  6E14               	movwf	strcpy@from+1,c
  8867  0019B8  EC1F  F024         	call	_strcpy	;wreg free
  8868                           
  8869                           ;Main_Screen.c: 85: drawtext(105, 120, txt, 0x001F , 0x0000, 1);
  8870  0019BC  0E78               	movlw	120
  8871  0019BE  6E39               	movwf	drawtext@y,c
  8872  0019C0  C05E  F03A         	movff	_txt,drawtext@_text
  8873  0019C4  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8874  0019C8  0E00               	movlw	0
  8875  0019CA  6E3D               	movwf	drawtext@color+1,c
  8876  0019CC  0E1F               	movlw	31
  8877  0019CE  6E3C               	movwf	drawtext@color,c
  8878  0019D0  0E00               	movlw	0
  8879  0019D2  6E3F               	movwf	drawtext@bg+1,c
  8880  0019D4  0E00               	movlw	0
  8881  0019D6  6E3E               	movwf	drawtext@bg,c
  8882  0019D8  0E01               	movlw	1
  8883  0019DA  6E40               	movwf	drawtext@size,c
  8884  0019DC  0E69               	movlw	105
  8885  0019DE  ECD1  F01A         	call	_drawtext
  8886                           
  8887                           ;Main_Screen.c: 86: strcpy(txt, "DC");
  8888  0019E2  C05E  F011         	movff	_txt,strcpy@to
  8889  0019E6  C05F  F012         	movff	_txt+1,strcpy@to+1
  8890  0019EA  0EF8               	movlw	low STR_22
  8891  0019EC  6E13               	movwf	strcpy@from,c
  8892  0019EE  0EFF               	movlw	high STR_22
  8893  0019F0  6E14               	movwf	strcpy@from+1,c
  8894  0019F2  EC1F  F024         	call	_strcpy	;wreg free
  8895                           
  8896                           ;Main_Screen.c: 87: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  8897  0019F6  0E8C               	movlw	140
  8898  0019F8  6E39               	movwf	drawtext@y,c
  8899  0019FA  C05E  F03A         	movff	_txt,drawtext@_text
  8900  0019FE  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8901  001A02  0EFF               	movlw	255
  8902  001A04  6E3D               	movwf	drawtext@color+1,c
  8903  001A06  683C               	setf	drawtext@color,c
  8904  001A08  0E00               	movlw	0
  8905  001A0A  6E3F               	movwf	drawtext@bg+1,c
  8906  001A0C  0E00               	movlw	0
  8907  001A0E  6E3E               	movwf	drawtext@bg,c
  8908  001A10  0E01               	movlw	1
  8909  001A12  6E40               	movwf	drawtext@size,c
  8910  001A14  0E0C               	movlw	12
  8911  001A16  ECD1  F01A         	call	_drawtext
  8912                           
  8913                           ;Main_Screen.c: 88: strcpy(txt, "Volt");
  8914  001A1A  C05E  F011         	movff	_txt,strcpy@to
  8915  001A1E  C05F  F012         	movff	_txt+1,strcpy@to+1
  8916  001A22  0EDC               	movlw	low STR_23
  8917  001A24  6E13               	movwf	strcpy@from,c
  8918  001A26  0EFF               	movlw	high STR_23
  8919  001A28  6E14               	movwf	strcpy@from+1,c
  8920  001A2A  EC1F  F024         	call	_strcpy	;wreg free
  8921                           
  8922                           ;Main_Screen.c: 89: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
  8923  001A2E  0E8C               	movlw	140
  8924  001A30  6E39               	movwf	drawtext@y,c
  8925  001A32  C05E  F03A         	movff	_txt,drawtext@_text
  8926  001A36  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8927  001A3A  0EFF               	movlw	255
  8928  001A3C  6E3D               	movwf	drawtext@color+1,c
  8929  001A3E  683C               	setf	drawtext@color,c
  8930  001A40  0E00               	movlw	0
  8931  001A42  6E3F               	movwf	drawtext@bg+1,c
  8932  001A44  0E00               	movlw	0
  8933  001A46  6E3E               	movwf	drawtext@bg,c
  8934  001A48  0E01               	movlw	1
  8935  001A4A  6E40               	movwf	drawtext@size,c
  8936  001A4C  0E32               	movlw	50
  8937  001A4E  ECD1  F01A         	call	_drawtext
  8938                           
  8939                           ;Main_Screen.c: 90: strcpy(txt, "RPM");
  8940  001A52  C05E  F011         	movff	_txt,strcpy@to
  8941  001A56  C05F  F012         	movff	_txt+1,strcpy@to+1
  8942  001A5A  0EF1               	movlw	low STR_24
  8943  001A5C  6E13               	movwf	strcpy@from,c
  8944  001A5E  0EFF               	movlw	high STR_24
  8945  001A60  6E14               	movwf	strcpy@from+1,c
  8946  001A62  EC1F  F024         	call	_strcpy	;wreg free
  8947                           
  8948                           ;Main_Screen.c: 91: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  8949  001A66  0E8C               	movlw	140
  8950  001A68  6E39               	movwf	drawtext@y,c
  8951  001A6A  C05E  F03A         	movff	_txt,drawtext@_text
  8952  001A6E  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8953  001A72  0EFF               	movlw	255
  8954  001A74  6E3D               	movwf	drawtext@color+1,c
  8955  001A76  683C               	setf	drawtext@color,c
  8956  001A78  0E00               	movlw	0
  8957  001A7A  6E3F               	movwf	drawtext@bg+1,c
  8958  001A7C  0E00               	movlw	0
  8959  001A7E  6E3E               	movwf	drawtext@bg,c
  8960  001A80  0E01               	movlw	1
  8961  001A82  6E40               	movwf	drawtext@size,c
  8962  001A84  0E5F               	movlw	95
  8963  001A86  ECD1  F01A         	call	_drawtext
  8964                           
  8965                           ;Main_Screen.c: 92: }
  8966  001A8A  D01E               	goto	l960
  8967  001A8C                     l9564:
  8968                           
  8969                           ;Main_Screen.c: 93: else
  8970                           ;Main_Screen.c: 94: {
  8971                           ;Main_Screen.c: 95: strcpy(txt, "SYSTEM OFF");
  8972  001A8C  C05E  F011         	movff	_txt,strcpy@to
  8973  001A90  C05F  F012         	movff	_txt+1,strcpy@to+1
  8974  001A94  0EAC               	movlw	low STR_25
  8975  001A96  6E13               	movwf	strcpy@from,c
  8976  001A98  0EFF               	movlw	high STR_25
  8977  001A9A  6E14               	movwf	strcpy@from+1,c
  8978  001A9C  EC1F  F024         	call	_strcpy	;wreg free
  8979                           
  8980                           ;Main_Screen.c: 96: drawtext(5 , 80 , txt, 0xF81F, 0x0000, 2);
  8981  001AA0  0E50               	movlw	80
  8982  001AA2  6E39               	movwf	drawtext@y,c
  8983  001AA4  C05E  F03A         	movff	_txt,drawtext@_text
  8984  001AA8  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8985  001AAC  0EF8               	movlw	248
  8986  001AAE  6E3D               	movwf	drawtext@color+1,c
  8987  001AB0  0E1F               	movlw	31
  8988  001AB2  6E3C               	movwf	drawtext@color,c
  8989  001AB4  0E00               	movlw	0
  8990  001AB6  6E3F               	movwf	drawtext@bg+1,c
  8991  001AB8  0E00               	movlw	0
  8992  001ABA  6E3E               	movwf	drawtext@bg,c
  8993  001ABC  0E02               	movlw	2
  8994  001ABE  6E40               	movwf	drawtext@size,c
  8995  001AC0  0E05               	movlw	5
  8996  001AC2  ECD1  F01A         	call	_drawtext
  8997  001AC6  D000               	goto	l960
  8998  001AC8                     l960:
  8999  001AC8  0012               	return		;funcret
  9000  001ACA                     __end_of_Initialize_Screen:
  9001                           	opt stack 0
  9002                           tblptru	equ	0xFF8
  9003                           tblptrh	equ	0xFF7
  9004                           tblptrl	equ	0xFF6
  9005                           tablat	equ	0xFF5
  9006                           prodh	equ	0xFF4
  9007                           prodl	equ	0xFF3
  9008                           intcon2	equ	0xFF1
  9009                           intcon3	equ	0xFF0
  9010                           postinc0	equ	0xFEE
  9011                           wreg	equ	0xFE8
  9012                           postdec1	equ	0xFE5
  9013                           plusw1	equ	0xFE3
  9014                           fsr1l	equ	0xFE1
  9015                           postinc2	equ	0xFDE
  9016                           plusw2	equ	0xFDB
  9017                           fsr2h	equ	0xFDA
  9018                           fsr2l	equ	0xFD9
  9019                           status	equ	0xFD8
  9020                           
  9021 ;; *************** function _strcpy *****************
  9022 ;; Defined at:
  9023 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;  to              2   16[COMRAM] PTR unsigned char 
  9026 ;;		 -> NULL(0), Fan_SW_Txt(4), Fan_Mode_Txt(5), Fan_Timer_Mode_Txt(4), 
  9027 ;;  from            2   18[COMRAM] PTR const unsigned char 
  9028 ;;		 -> STR_46(5), STR_45(5), STR_44(12), STR_39(15), 
  9029 ;;		 -> STR_38(12), STR_33(4), STR_32(4), STR_31(5), 
  9030 ;;		 -> STR_30(5), STR_29(4), STR_28(4), STR_27(4), 
  9031 ;;		 -> STR_26(4), STR_25(11), STR_24(4), STR_23(5), 
  9032 ;;		 -> STR_22(3), STR_21(3), STR_20(5), STR_19(12), 
  9033 ;;		 -> STR_18(11), STR_17(11), STR_16(5), STR_15(5), 
  9034 ;;		 -> STR_14(2), STR_13(3), STR_12(13), 
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  cp              2   20[COMRAM] PTR unsigned char 
  9037 ;;		 -> NULL(0), Fan_SW_Txt(4), Fan_Mode_Txt(5), Fan_Timer_Mode_Txt(4), 
  9038 ;; Return value:  Size  Location     Type
  9039 ;;                  2   16[COMRAM] PTR unsigned char 
  9040 ;; Registers used:
  9041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9042 ;; Tracked objects:
  9043 ;;		On entry : 0/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9050 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;Total ram usage:        6 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; Hardware stack levels required when called:    3
  9054 ;; This function calls:
  9055 ;;		Nothing
  9056 ;; This function is called by:
  9057 ;;		_Initialize_Screen
  9058 ;;		_Update_Screen
  9059 ;;		_Initialize_Setup_Fan_Screen
  9060 ;;		_Initialize_Setup_Time_Screen
  9061 ;; This function uses a non-reentrant model
  9062 ;;
  9063                           
  9064                           	psect	text31
  9065  00483E                     __ptext31:
  9066                           	opt stack 0
  9067  00483E                     _strcpy:
  9068                           	opt stack 26
  9069                           
  9070                           ;incstack = 0
  9071  00483E  C011  F015         	movff	strcpy@to,strcpy@cp
  9072  004842  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  9073  004846  D005               	goto	l6554
  9074  004848                     l6552:
  9075  004848  4A15               	infsnz	strcpy@cp,f,c
  9076  00484A  2A16               	incf	strcpy@cp+1,f,c
  9077  00484C  4A13               	infsnz	strcpy@from,f,c
  9078  00484E  2A14               	incf	strcpy@from+1,f,c
  9079  004850  D000               	goto	l6554
  9080  004852                     l6554:
  9081  004852  C013  FFF6         	movff	strcpy@from,tblptrl
  9082  004856  C014  FFF7         	movff	strcpy@from+1,tblptrh
  9083  00485A                     	if	0	;tblptru may be non-zero
  9084  00485A                     	endif
  9085  00485A                     	if	0	;tblptru may be non-zero
  9086  00485A                     	endif
  9087  00485A  C015  FFD9         	movff	strcpy@cp,fsr2l
  9088  00485E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  9089  004862  0008               	tblrd		*
  9090  004864  CFF5 FFDF          	movff	tablat,indf2
  9091  004868  50DF               	movf	indf2,w,c
  9092  00486A  A4D8               	btfss	status,2,c
  9093  00486C  D7ED               	goto	l6552
  9094                           
  9095                           ;	Return value of _strcpy is never used
  9096  00486E  0012               	return		;funcret
  9097  004870                     __end_of_strcpy:
  9098                           	opt stack 0
  9099                           tblptru	equ	0xFF8
  9100                           tblptrh	equ	0xFF7
  9101                           tblptrl	equ	0xFF6
  9102                           tablat	equ	0xFF5
  9103                           prodh	equ	0xFF4
  9104                           prodl	equ	0xFF3
  9105                           intcon2	equ	0xFF1
  9106                           intcon3	equ	0xFF0
  9107                           postinc0	equ	0xFEE
  9108                           wreg	equ	0xFE8
  9109                           postdec1	equ	0xFE5
  9110                           plusw1	equ	0xFE3
  9111                           fsr1l	equ	0xFE1
  9112                           indf2	equ	0xFDF
  9113                           postinc2	equ	0xFDE
  9114                           plusw2	equ	0xFDB
  9115                           fsr2h	equ	0xFDA
  9116                           fsr2l	equ	0xFD9
  9117                           status	equ	0xFD8
  9118                           
  9119 ;; *************** function _fillScreen *****************
  9120 ;; Defined at:
  9121 ;;		line 567 in file "ST7735_TFT.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;  color           2   35[COMRAM] unsigned int 
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;		None
  9126 ;; Return value:  Size  Location     Type
  9127 ;;		None               void
  9128 ;; Registers used:
  9129 ;;		wreg, status,2, status,0, cstack
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9139 ;;Total ram usage:        2 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    7
  9142 ;; This function calls:
  9143 ;;		_fillRectangle
  9144 ;; This function is called by:
  9145 ;;		_Initialize_Screen
  9146 ;;		_Initialize_Setup_Fan_Screen
  9147 ;;		_Initialize_Setup_Time_Screen
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           	psect	text32
  9152  004B70                     __ptext32:
  9153                           	opt stack 0
  9154  004B70                     _fillScreen:
  9155                           	opt stack 21
  9156                           
  9157                           ;ST7735_TFT.c: 569: fillRectangle(0, 0, 128, 160, color);
  9158                           
  9159                           ;incstack = 0
  9160  004B70  0E00               	movlw	0
  9161  004B72  6E18               	movwf	fillRectangle@y,c
  9162  004B74  0E80               	movlw	128
  9163  004B76  6E19               	movwf	fillRectangle@w,c
  9164  004B78  0EA0               	movlw	160
  9165  004B7A  6E1A               	movwf	fillRectangle@h,c
  9166  004B7C  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  9167  004B80  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  9168  004B84  0E00               	movlw	0
  9169  004B86  ECB3  F01B         	call	_fillRectangle
  9170  004B8A  0012               	return		;funcret
  9171  004B8C                     __end_of_fillScreen:
  9172                           	opt stack 0
  9173                           tblptru	equ	0xFF8
  9174                           tblptrh	equ	0xFF7
  9175                           tblptrl	equ	0xFF6
  9176                           tablat	equ	0xFF5
  9177                           prodh	equ	0xFF4
  9178                           prodl	equ	0xFF3
  9179                           intcon2	equ	0xFF1
  9180                           intcon3	equ	0xFF0
  9181                           postinc0	equ	0xFEE
  9182                           wreg	equ	0xFE8
  9183                           postdec1	equ	0xFE5
  9184                           plusw1	equ	0xFE3
  9185                           fsr1l	equ	0xFE1
  9186                           indf2	equ	0xFDF
  9187                           postinc2	equ	0xFDE
  9188                           plusw2	equ	0xFDB
  9189                           fsr2h	equ	0xFDA
  9190                           fsr2l	equ	0xFD9
  9191                           status	equ	0xFD8
  9192                           
  9193 ;; *************** function _fillRectangle *****************
  9194 ;; Defined at:
  9195 ;;		line 451 in file "ST7735_TFT.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  x               1    wreg     unsigned char 
  9198 ;;  y               1   23[COMRAM] unsigned char 
  9199 ;;  w               1   24[COMRAM] unsigned char 
  9200 ;;  h               1   25[COMRAM] unsigned char 
  9201 ;;  color           2   26[COMRAM] unsigned int 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  x               1   34[COMRAM] unsigned char 
  9204 ;;  lo              1   33[COMRAM] unsigned char 
  9205 ;;  hi              1   32[COMRAM] unsigned char 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;		None               void
  9208 ;; Registers used:
  9209 ;;		wreg, status,2, status,0, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9215 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9217 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9218 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9219 ;;Total ram usage:       12 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    6
  9222 ;; This function calls:
  9223 ;;		_setAddrWindow
  9224 ;;		_spiwrite
  9225 ;; This function is called by:
  9226 ;;		_fillScreen
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           	psect	text33
  9231  003766                     __ptext33:
  9232                           	opt stack 0
  9233  003766                     _fillRectangle:
  9234                           	opt stack 21
  9235                           
  9236                           ;incstack = 0
  9237                           ;fillRectangle@x stored from wreg
  9238  003766  6E23               	movwf	fillRectangle@x,c
  9239                           
  9240                           ;ST7735_TFT.c: 453: unsigned char hi, lo;
  9241                           ;ST7735_TFT.c: 454: if((x >= 128) || (y >= 160))
  9242  003768  0E80               	movlw	128
  9243  00376A  6023               	cpfslt	fillRectangle@x,c
  9244  00376C  D069               	goto	l311
  9245  00376E  0E9F               	movlw	159
  9246  003770  6418               	cpfsgt	fillRectangle@y,c
  9247  003772  D001               	goto	l5762
  9248                           
  9249                           ;ST7735_TFT.c: 455: return;
  9250  003774  D065               	goto	l311
  9251  003776                     l5762:
  9252                           
  9253                           ;ST7735_TFT.c: 456: if((x + w - 1) >= 128)
  9254  003776  0EFF               	movlw	255
  9255  003778  6E1D               	movwf	??_fillRectangle& (0+255),c
  9256  00377A  0EFF               	movlw	255
  9257  00377C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9258  00377E  5019               	movf	fillRectangle@w,w,c
  9259  003780  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  9260  003784  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9261  003786  261F               	addwf	??_fillRectangle+2,f,c
  9262  003788  0E00               	movlw	0
  9263  00378A  2220               	addwfc	??_fillRectangle+3,f,c
  9264  00378C  501D               	movf	??_fillRectangle,w,c
  9265  00378E  261F               	addwf	??_fillRectangle+2,f,c
  9266  003790  501E               	movf	??_fillRectangle+1,w,c
  9267  003792  2220               	addwfc	??_fillRectangle+3,f,c
  9268  003794  BE20               	btfsc	??_fillRectangle+3,7,c
  9269  003796  D00A               	goto	l312
  9270  003798  5020               	movf	??_fillRectangle+3,w,c
  9271  00379A  E104               	bnz	u4060
  9272  00379C  0E80               	movlw	128
  9273  00379E  5C1F               	subwf	??_fillRectangle+2,w,c
  9274  0037A0  A0D8               	btfss	status,0,c
  9275  0037A2  D004               	goto	l312
  9276  0037A4                     u4060:
  9277                           
  9278                           ;ST7735_TFT.c: 457: w = 128 - x;
  9279  0037A4  5023               	movf	fillRectangle@x,w,c
  9280  0037A6  0800               	sublw	0
  9281  0037A8  0F80               	addlw	128
  9282  0037AA  6E19               	movwf	fillRectangle@w,c
  9283  0037AC                     l312:
  9284                           
  9285                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  9286  0037AC  0EFF               	movlw	255
  9287  0037AE  6E1D               	movwf	??_fillRectangle& (0+255),c
  9288  0037B0  0EFF               	movlw	255
  9289  0037B2  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9290  0037B4  501A               	movf	fillRectangle@h,w,c
  9291  0037B6  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  9292  0037BA  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9293  0037BC  261F               	addwf	??_fillRectangle+2,f,c
  9294  0037BE  0E00               	movlw	0
  9295  0037C0  2220               	addwfc	??_fillRectangle+3,f,c
  9296  0037C2  501D               	movf	??_fillRectangle,w,c
  9297  0037C4  261F               	addwf	??_fillRectangle+2,f,c
  9298  0037C6  501E               	movf	??_fillRectangle+1,w,c
  9299  0037C8  2220               	addwfc	??_fillRectangle+3,f,c
  9300  0037CA  BE20               	btfsc	??_fillRectangle+3,7,c
  9301  0037CC  D00B               	goto	l5768
  9302  0037CE  5020               	movf	??_fillRectangle+3,w,c
  9303  0037D0  E104               	bnz	u4070
  9304  0037D2  0EA0               	movlw	160
  9305  0037D4  5C1F               	subwf	??_fillRectangle+2,w,c
  9306  0037D6  A0D8               	btfss	status,0,c
  9307  0037D8  D005               	goto	l5768
  9308  0037DA                     u4070:
  9309                           
  9310                           ;ST7735_TFT.c: 459: h = 160 - y;
  9311  0037DA  5018               	movf	fillRectangle@y,w,c
  9312  0037DC  0800               	sublw	0
  9313  0037DE  0FA0               	addlw	160
  9314  0037E0  6E1A               	movwf	fillRectangle@h,c
  9315  0037E2  D000               	goto	l5768
  9316  0037E4                     l5768:
  9317                           
  9318                           ;ST7735_TFT.c: 460: setAddrWindow(x, y, x+w-1, y+h-1);
  9319  0037E4  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  9320  0037E8  5023               	movf	fillRectangle@x,w,c
  9321  0037EA  2419               	addwf	fillRectangle@w,w,c
  9322  0037EC  6E1D               	movwf	??_fillRectangle& (0+255),c
  9323  0037EE  041D               	decf	??_fillRectangle,w,c
  9324  0037F0  6E15               	movwf	setAddrWindow@x1,c
  9325  0037F2  5018               	movf	fillRectangle@y,w,c
  9326  0037F4  241A               	addwf	fillRectangle@h,w,c
  9327  0037F6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9328  0037F8  041E               	decf	??_fillRectangle+1,w,c
  9329  0037FA  6E16               	movwf	setAddrWindow@y1,c
  9330  0037FC  5023               	movf	fillRectangle@x,w,c
  9331  0037FE  EC38  F022         	call	_setAddrWindow
  9332                           
  9333                           ;ST7735_TFT.c: 461: hi = color >> 8; lo = color;
  9334  003802  501C               	movf	fillRectangle@color+1,w,c
  9335  003804  6E21               	movwf	fillRectangle@hi,c
  9336  003806  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  9337                           
  9338                           ;ST7735_TFT.c: 462: PORTDbits.RD7 = 1;
  9339  00380A  8E83               	bsf	3971,7,c	;volatile
  9340                           
  9341                           ;ST7735_TFT.c: 463: PORTCbits.RC4 = 0;
  9342  00380C  9882               	bcf	3970,4,c	;volatile
  9343                           
  9344                           ;ST7735_TFT.c: 465: for(y=h; y>0; y--) {
  9345  00380E  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  9346  003812                     l5780:
  9347  003812  5018               	movf	fillRectangle@y,w,c
  9348  003814  B4D8               	btfsc	status,2,c
  9349  003816  D013               	goto	l315
  9350  003818  D001               	goto	l314
  9351  00381A  D011               	goto	l315
  9352  00381C                     l314:
  9353                           
  9354                           ;ST7735_TFT.c: 466: for(x = w; x > 0; x--) {
  9355  00381C  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  9356  003820                     l5784:
  9357  003820  5023               	movf	fillRectangle@x,w,c
  9358  003822  B4D8               	btfsc	status,2,c
  9359  003824  D00A               	goto	l5794
  9360  003826  D001               	goto	l5788
  9361  003828  D008               	goto	l5794
  9362  00382A                     l5788:
  9363                           
  9364                           ;ST7735_TFT.c: 467: spiwrite(hi);
  9365  00382A  5021               	movf	fillRectangle@hi,w,c
  9366  00382C  EC5D  F026         	call	_spiwrite
  9367                           
  9368                           ;ST7735_TFT.c: 468: spiwrite(lo);
  9369  003830  5022               	movf	fillRectangle@lo,w,c
  9370  003832  EC5D  F026         	call	_spiwrite
  9371  003836  0623               	decf	fillRectangle@x,f,c
  9372  003838  D7F3               	goto	l5784
  9373  00383A                     l5794:
  9374  00383A  0618               	decf	fillRectangle@y,f,c
  9375  00383C  D7EA               	goto	l5780
  9376  00383E                     l315:
  9377                           
  9378                           ;ST7735_TFT.c: 469: }
  9379                           ;ST7735_TFT.c: 470: }
  9380                           ;ST7735_TFT.c: 471: PORTCbits.RC4 = 1;
  9381  00383E  8882               	bsf	3970,4,c	;volatile
  9382  003840                     l311:
  9383  003840  0012               	return		;funcret
  9384  003842                     __end_of_fillRectangle:
  9385                           	opt stack 0
  9386                           tblptru	equ	0xFF8
  9387                           tblptrh	equ	0xFF7
  9388                           tblptrl	equ	0xFF6
  9389                           tablat	equ	0xFF5
  9390                           prodh	equ	0xFF4
  9391                           prodl	equ	0xFF3
  9392                           intcon2	equ	0xFF1
  9393                           intcon3	equ	0xFF0
  9394                           postinc0	equ	0xFEE
  9395                           wreg	equ	0xFE8
  9396                           postdec1	equ	0xFE5
  9397                           plusw1	equ	0xFE3
  9398                           fsr1l	equ	0xFE1
  9399                           indf2	equ	0xFDF
  9400                           postinc2	equ	0xFDE
  9401                           plusw2	equ	0xFDB
  9402                           fsr2h	equ	0xFDA
  9403                           fsr2l	equ	0xFD9
  9404                           status	equ	0xFD8
  9405                           
  9406 ;; *************** function _TFT_GreenTab_Initialize *****************
  9407 ;; Defined at:
  9408 ;;		line 592 in file "ST7735_TFT.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;		None
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;		None
  9413 ;; Return value:  Size  Location     Type
  9414 ;;		None               void
  9415 ;; Registers used:
  9416 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9417 ;; Tracked objects:
  9418 ;;		On entry : 0/0
  9419 ;;		On exit  : 0/0
  9420 ;;		Unchanged: 0/0
  9421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;Total ram usage:        0 bytes
  9427 ;; Hardware stack levels used:    1
  9428 ;; Hardware stack levels required when called:    6
  9429 ;; This function calls:
  9430 ;;		_Rcmd1
  9431 ;;		_Rcmd2red
  9432 ;;		_Rcmd3
  9433 ;;		_write_command
  9434 ;;		_write_data
  9435 ;; This function is called by:
  9436 ;;		_Initialize_Screen
  9437 ;;		_Initialize_Setup_Fan_Screen
  9438 ;;		_Initialize_Setup_Time_Screen
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           	psect	text34
  9443  0048D0                     __ptext34:
  9444                           	opt stack 0
  9445  0048D0                     _TFT_GreenTab_Initialize:
  9446                           	opt stack 22
  9447                           
  9448                           ;ST7735_TFT.c: 594: PORTCbits.RC4 = 1;
  9449                           
  9450                           ;incstack = 0
  9451  0048D0  8882               	bsf	3970,4,c	;volatile
  9452                           
  9453                           ;ST7735_TFT.c: 595: PORTDbits.RD7 = 0;
  9454  0048D2  9E83               	bcf	3971,7,c	;volatile
  9455                           
  9456                           ;ST7735_TFT.c: 597: SSPSTAT=0x80;
  9457  0048D4  0E80               	movlw	128
  9458  0048D6  6EC7               	movwf	4039,c	;volatile
  9459                           
  9460                           ;ST7735_TFT.c: 598: SSPCON1=0x30;
  9461  0048D8  0E30               	movlw	48
  9462  0048DA  6EC6               	movwf	4038,c	;volatile
  9463                           
  9464                           ;ST7735_TFT.c: 601: Rcmd1();
  9465  0048DC  EC5F  F017         	call	_Rcmd1	;wreg free
  9466                           
  9467                           ;ST7735_TFT.c: 602: Rcmd2red();
  9468  0048E0  EC67  F023         	call	_Rcmd2red	;wreg free
  9469                           
  9470                           ;ST7735_TFT.c: 603: Rcmd3();
  9471  0048E4  EC70  F019         	call	_Rcmd3	;wreg free
  9472                           
  9473                           ;ST7735_TFT.c: 604: write_command(0x36);
  9474  0048E8  0E36               	movlw	54
  9475  0048EA  ECC0  F026         	call	_write_command
  9476                           
  9477                           ;ST7735_TFT.c: 605: write_data(0xC0);
  9478  0048EE  0EC0               	movlw	192
  9479  0048F0  ECB8  F026         	call	_write_data
  9480                           
  9481                           ;ST7735_TFT.c: 606: _tft_type = 1;
  9482  0048F4  0E01               	movlw	1
  9483  0048F6  0100               	movlb	0	; () banked
  9484  0048F8  6FCC               	movwf	__tft_type& (0+255),b
  9485                           
  9486                           ; BSR set to: 0
  9487  0048FA  0012               	return		;funcret
  9488  0048FC                     __end_of_TFT_GreenTab_Initialize:
  9489                           	opt stack 0
  9490                           tblptru	equ	0xFF8
  9491                           tblptrh	equ	0xFF7
  9492                           tblptrl	equ	0xFF6
  9493                           tablat	equ	0xFF5
  9494                           prodh	equ	0xFF4
  9495                           prodl	equ	0xFF3
  9496                           intcon2	equ	0xFF1
  9497                           intcon3	equ	0xFF0
  9498                           postinc0	equ	0xFEE
  9499                           wreg	equ	0xFE8
  9500                           postdec1	equ	0xFE5
  9501                           plusw1	equ	0xFE3
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           plusw2	equ	0xFDB
  9506                           fsr2h	equ	0xFDA
  9507                           fsr2l	equ	0xFD9
  9508                           status	equ	0xFD8
  9509                           
  9510 ;; *************** function _Rcmd3 *****************
  9511 ;; Defined at:
  9512 ;;		line 286 in file "ST7735_TFT.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;		None
  9517 ;; Return value:  Size  Location     Type
  9518 ;;		None               void
  9519 ;; Registers used:
  9520 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;Total ram usage:        0 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    5
  9533 ;; This function calls:
  9534 ;;		_delay_ms
  9535 ;;		_write_command
  9536 ;;		_write_data
  9537 ;; This function is called by:
  9538 ;;		_TFT_GreenTab_Initialize
  9539 ;;		_TFT_BlackTab_Initialize
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           	psect	text35
  9544  0032E0                     __ptext35:
  9545                           	opt stack 0
  9546  0032E0                     _Rcmd3:
  9547                           	opt stack 22
  9548                           
  9549                           ;ST7735_TFT.c: 288: write_command(0xE0);
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;incstack = 0
  9553  0032E0  0EE0               	movlw	224
  9554  0032E2  ECC0  F026         	call	_write_command
  9555                           
  9556                           ;ST7735_TFT.c: 289: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  9557  0032E6  0E02               	movlw	2
  9558  0032E8  ECB8  F026         	call	_write_data
  9559  0032EC  0E1C               	movlw	28
  9560  0032EE  ECB8  F026         	call	_write_data
  9561  0032F2  0E07               	movlw	7
  9562  0032F4  ECB8  F026         	call	_write_data
  9563  0032F8  0E12               	movlw	18
  9564  0032FA  ECB8  F026         	call	_write_data
  9565                           
  9566                           ;ST7735_TFT.c: 290: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  9567  0032FE  0E37               	movlw	55
  9568  003300  ECB8  F026         	call	_write_data
  9569  003304  0E32               	movlw	50
  9570  003306  ECB8  F026         	call	_write_data
  9571  00330A  0E29               	movlw	41
  9572  00330C  ECB8  F026         	call	_write_data
  9573  003310  0E2D               	movlw	45
  9574  003312  ECB8  F026         	call	_write_data
  9575                           
  9576                           ;ST7735_TFT.c: 291: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  9577  003316  0E29               	movlw	41
  9578  003318  ECB8  F026         	call	_write_data
  9579  00331C  0E25               	movlw	37
  9580  00331E  ECB8  F026         	call	_write_data
  9581  003322  0E2B               	movlw	43
  9582  003324  ECB8  F026         	call	_write_data
  9583  003328  0E39               	movlw	57
  9584  00332A  ECB8  F026         	call	_write_data
  9585                           
  9586                           ;ST7735_TFT.c: 292: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  9587  00332E  0E00               	movlw	0
  9588  003330  ECB8  F026         	call	_write_data
  9589  003334  0E01               	movlw	1
  9590  003336  ECB8  F026         	call	_write_data
  9591  00333A  0E03               	movlw	3
  9592  00333C  ECB8  F026         	call	_write_data
  9593  003340  0E10               	movlw	16
  9594  003342  ECB8  F026         	call	_write_data
  9595                           
  9596                           ;ST7735_TFT.c: 293: write_command(0xE1);
  9597  003346  0EE1               	movlw	225
  9598  003348  ECC0  F026         	call	_write_command
  9599                           
  9600                           ;ST7735_TFT.c: 294: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  9601  00334C  0E03               	movlw	3
  9602  00334E  ECB8  F026         	call	_write_data
  9603  003352  0E1D               	movlw	29
  9604  003354  ECB8  F026         	call	_write_data
  9605  003358  0E07               	movlw	7
  9606  00335A  ECB8  F026         	call	_write_data
  9607  00335E  0E06               	movlw	6
  9608  003360  ECB8  F026         	call	_write_data
  9609                           
  9610                           ;ST7735_TFT.c: 295: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  9611  003364  0E2E               	movlw	46
  9612  003366  ECB8  F026         	call	_write_data
  9613  00336A  0E2C               	movlw	44
  9614  00336C  ECB8  F026         	call	_write_data
  9615  003370  0E29               	movlw	41
  9616  003372  ECB8  F026         	call	_write_data
  9617  003376  0E2D               	movlw	45
  9618  003378  ECB8  F026         	call	_write_data
  9619                           
  9620                           ;ST7735_TFT.c: 296: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  9621  00337C  0E2E               	movlw	46
  9622  00337E  ECB8  F026         	call	_write_data
  9623  003382  0E2E               	movlw	46
  9624  003384  ECB8  F026         	call	_write_data
  9625  003388  0E37               	movlw	55
  9626  00338A  ECB8  F026         	call	_write_data
  9627  00338E  0E3F               	movlw	63
  9628  003390  ECB8  F026         	call	_write_data
  9629                           
  9630                           ;ST7735_TFT.c: 297: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  9631  003394  0E00               	movlw	0
  9632  003396  ECB8  F026         	call	_write_data
  9633  00339A  0E00               	movlw	0
  9634  00339C  ECB8  F026         	call	_write_data
  9635  0033A0  0E02               	movlw	2
  9636  0033A2  ECB8  F026         	call	_write_data
  9637  0033A6  0E10               	movlw	16
  9638  0033A8  ECB8  F026         	call	_write_data
  9639                           
  9640                           ;ST7735_TFT.c: 298: write_command(0x13);
  9641  0033AC  0E13               	movlw	19
  9642  0033AE  ECC0  F026         	call	_write_command
  9643                           
  9644                           ;ST7735_TFT.c: 299: delay_ms(10);
  9645  0033B2  0E00               	movlw	0
  9646  0033B4  6E18               	movwf	delay_ms@ms+1,c
  9647  0033B6  0E0A               	movlw	10
  9648  0033B8  6E17               	movwf	delay_ms@ms,c
  9649  0033BA  EC86  F023         	call	_delay_ms	;wreg free
  9650                           
  9651                           ;ST7735_TFT.c: 300: write_command(0x29);
  9652  0033BE  0E29               	movlw	41
  9653  0033C0  ECC0  F026         	call	_write_command
  9654                           
  9655                           ;ST7735_TFT.c: 301: delay_ms(100);
  9656  0033C4  0E00               	movlw	0
  9657  0033C6  6E18               	movwf	delay_ms@ms+1,c
  9658  0033C8  0E64               	movlw	100
  9659  0033CA  6E17               	movwf	delay_ms@ms,c
  9660  0033CC  EC86  F023         	call	_delay_ms	;wreg free
  9661  0033D0  0012               	return		;funcret
  9662  0033D2                     __end_of_Rcmd3:
  9663                           	opt stack 0
  9664                           tblptru	equ	0xFF8
  9665                           tblptrh	equ	0xFF7
  9666                           tblptrl	equ	0xFF6
  9667                           tablat	equ	0xFF5
  9668                           prodh	equ	0xFF4
  9669                           prodl	equ	0xFF3
  9670                           intcon2	equ	0xFF1
  9671                           intcon3	equ	0xFF0
  9672                           postinc0	equ	0xFEE
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           plusw1	equ	0xFE3
  9676                           fsr1l	equ	0xFE1
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           plusw2	equ	0xFDB
  9680                           fsr2h	equ	0xFDA
  9681                           fsr2l	equ	0xFD9
  9682                           status	equ	0xFD8
  9683                           
  9684 ;; *************** function _Rcmd2red *****************
  9685 ;; Defined at:
  9686 ;;		line 276 in file "ST7735_TFT.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;		None
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;		None
  9691 ;; Return value:  Size  Location     Type
  9692 ;;		None               void
  9693 ;; Registers used:
  9694 ;;		wreg, status,2, cstack
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;Total ram usage:        0 bytes
  9705 ;; Hardware stack levels used:    1
  9706 ;; Hardware stack levels required when called:    5
  9707 ;; This function calls:
  9708 ;;		_write_command
  9709 ;;		_write_data
  9710 ;; This function is called by:
  9711 ;;		_TFT_GreenTab_Initialize
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           	psect	text36
  9716  0046CE                     __ptext36:
  9717                           	opt stack 0
  9718  0046CE                     _Rcmd2red:
  9719                           	opt stack 22
  9720                           
  9721                           ;ST7735_TFT.c: 278: write_command(0x2A);
  9722                           
  9723                           ;incstack = 0
  9724  0046CE  0E2A               	movlw	42
  9725  0046D0  ECC0  F026         	call	_write_command
  9726                           
  9727                           ;ST7735_TFT.c: 279: write_data(0x00); write_data(0x00);
  9728  0046D4  0E00               	movlw	0
  9729  0046D6  ECB8  F026         	call	_write_data
  9730  0046DA  0E00               	movlw	0
  9731  0046DC  ECB8  F026         	call	_write_data
  9732                           
  9733                           ;ST7735_TFT.c: 280: write_data(0x00); write_data(0x7F);
  9734  0046E0  0E00               	movlw	0
  9735  0046E2  ECB8  F026         	call	_write_data
  9736  0046E6  0E7F               	movlw	127
  9737  0046E8  ECB8  F026         	call	_write_data
  9738                           
  9739                           ;ST7735_TFT.c: 281: write_command(0x2B);
  9740  0046EC  0E2B               	movlw	43
  9741  0046EE  ECC0  F026         	call	_write_command
  9742                           
  9743                           ;ST7735_TFT.c: 282: write_data(0x00); write_data(0x00);
  9744  0046F2  0E00               	movlw	0
  9745  0046F4  ECB8  F026         	call	_write_data
  9746  0046F8  0E00               	movlw	0
  9747  0046FA  ECB8  F026         	call	_write_data
  9748                           
  9749                           ;ST7735_TFT.c: 283: write_data(0x00); write_data(0x9F);
  9750  0046FE  0E00               	movlw	0
  9751  004700  ECB8  F026         	call	_write_data
  9752  004704  0E9F               	movlw	159
  9753  004706  ECB8  F026         	call	_write_data
  9754  00470A  0012               	return		;funcret
  9755  00470C                     __end_of_Rcmd2red:
  9756                           	opt stack 0
  9757                           tblptru	equ	0xFF8
  9758                           tblptrh	equ	0xFF7
  9759                           tblptrl	equ	0xFF6
  9760                           tablat	equ	0xFF5
  9761                           prodh	equ	0xFF4
  9762                           prodl	equ	0xFF3
  9763                           intcon2	equ	0xFF1
  9764                           intcon3	equ	0xFF0
  9765                           postinc0	equ	0xFEE
  9766                           wreg	equ	0xFE8
  9767                           postdec1	equ	0xFE5
  9768                           plusw1	equ	0xFE3
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           plusw2	equ	0xFDB
  9773                           fsr2h	equ	0xFDA
  9774                           fsr2l	equ	0xFD9
  9775                           status	equ	0xFD8
  9776                           
  9777 ;; *************** function _Rcmd1 *****************
  9778 ;; Defined at:
  9779 ;;		line 229 in file "ST7735_TFT.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;		None
  9782 ;; Auto vars:     Size  Location     Type
  9783 ;;		None
  9784 ;; Return value:  Size  Location     Type
  9785 ;;		None               void
  9786 ;; Registers used:
  9787 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9788 ;; Tracked objects:
  9789 ;;		On entry : 0/0
  9790 ;;		On exit  : 0/0
  9791 ;;		Unchanged: 0/0
  9792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;Total ram usage:        0 bytes
  9798 ;; Hardware stack levels used:    1
  9799 ;; Hardware stack levels required when called:    5
  9800 ;; This function calls:
  9801 ;;		_delay_ms
  9802 ;;		_write_command
  9803 ;;		_write_data
  9804 ;; This function is called by:
  9805 ;;		_TFT_GreenTab_Initialize
  9806 ;;		_TFT_BlackTab_Initialize
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text37
  9811  002EBE                     __ptext37:
  9812                           	opt stack 0
  9813  002EBE                     _Rcmd1:
  9814                           	opt stack 22
  9815                           
  9816                           ;ST7735_TFT.c: 231: write_command(0x01);
  9817                           
  9818                           ;incstack = 0
  9819  002EBE  0E01               	movlw	1
  9820  002EC0  ECC0  F026         	call	_write_command
  9821                           
  9822                           ;ST7735_TFT.c: 232: delay_ms(150);
  9823  002EC4  0E00               	movlw	0
  9824  002EC6  6E18               	movwf	delay_ms@ms+1,c
  9825  002EC8  0E96               	movlw	150
  9826  002ECA  6E17               	movwf	delay_ms@ms,c
  9827  002ECC  EC86  F023         	call	_delay_ms	;wreg free
  9828                           
  9829                           ;ST7735_TFT.c: 233: write_command(0x11);
  9830  002ED0  0E11               	movlw	17
  9831  002ED2  ECC0  F026         	call	_write_command
  9832                           
  9833                           ;ST7735_TFT.c: 234: delay_ms(500);
  9834  002ED6  0E01               	movlw	1
  9835  002ED8  6E18               	movwf	delay_ms@ms+1,c
  9836  002EDA  0EF4               	movlw	244
  9837  002EDC  6E17               	movwf	delay_ms@ms,c
  9838  002EDE  EC86  F023         	call	_delay_ms	;wreg free
  9839                           
  9840                           ;ST7735_TFT.c: 235: write_command(0xB1);
  9841  002EE2  0EB1               	movlw	177
  9842  002EE4  ECC0  F026         	call	_write_command
  9843                           
  9844                           ;ST7735_TFT.c: 236: write_data(0x01);
  9845  002EE8  0E01               	movlw	1
  9846  002EEA  ECB8  F026         	call	_write_data
  9847                           
  9848                           ;ST7735_TFT.c: 237: write_data(0x2C);
  9849  002EEE  0E2C               	movlw	44
  9850  002EF0  ECB8  F026         	call	_write_data
  9851                           
  9852                           ;ST7735_TFT.c: 238: write_data(0x2D);
  9853  002EF4  0E2D               	movlw	45
  9854  002EF6  ECB8  F026         	call	_write_data
  9855                           
  9856                           ;ST7735_TFT.c: 239: write_command(0xB2);
  9857  002EFA  0EB2               	movlw	178
  9858  002EFC  ECC0  F026         	call	_write_command
  9859                           
  9860                           ;ST7735_TFT.c: 240: write_data(0x01);
  9861  002F00  0E01               	movlw	1
  9862  002F02  ECB8  F026         	call	_write_data
  9863                           
  9864                           ;ST7735_TFT.c: 241: write_data(0x2C);
  9865  002F06  0E2C               	movlw	44
  9866  002F08  ECB8  F026         	call	_write_data
  9867                           
  9868                           ;ST7735_TFT.c: 242: write_data(0x2D);
  9869  002F0C  0E2D               	movlw	45
  9870  002F0E  ECB8  F026         	call	_write_data
  9871                           
  9872                           ;ST7735_TFT.c: 243: write_command(0xB3);
  9873  002F12  0EB3               	movlw	179
  9874  002F14  ECC0  F026         	call	_write_command
  9875                           
  9876                           ;ST7735_TFT.c: 244: write_data(0x01);
  9877  002F18  0E01               	movlw	1
  9878  002F1A  ECB8  F026         	call	_write_data
  9879                           
  9880                           ;ST7735_TFT.c: 245: write_data(0x2C);
  9881  002F1E  0E2C               	movlw	44
  9882  002F20  ECB8  F026         	call	_write_data
  9883                           
  9884                           ;ST7735_TFT.c: 246: write_data(0x2D);
  9885  002F24  0E2D               	movlw	45
  9886  002F26  ECB8  F026         	call	_write_data
  9887                           
  9888                           ;ST7735_TFT.c: 247: write_data(0x01);
  9889  002F2A  0E01               	movlw	1
  9890  002F2C  ECB8  F026         	call	_write_data
  9891                           
  9892                           ;ST7735_TFT.c: 248: write_data(0x2C);
  9893  002F30  0E2C               	movlw	44
  9894  002F32  ECB8  F026         	call	_write_data
  9895                           
  9896                           ;ST7735_TFT.c: 249: write_data(0x2D);
  9897  002F36  0E2D               	movlw	45
  9898  002F38  ECB8  F026         	call	_write_data
  9899                           
  9900                           ;ST7735_TFT.c: 250: write_command(0xB4);
  9901  002F3C  0EB4               	movlw	180
  9902  002F3E  ECC0  F026         	call	_write_command
  9903                           
  9904                           ;ST7735_TFT.c: 251: write_data(0x07);
  9905  002F42  0E07               	movlw	7
  9906  002F44  ECB8  F026         	call	_write_data
  9907                           
  9908                           ;ST7735_TFT.c: 252: write_command(0xC0);
  9909  002F48  0EC0               	movlw	192
  9910  002F4A  ECC0  F026         	call	_write_command
  9911                           
  9912                           ;ST7735_TFT.c: 253: write_data(0xA2);
  9913  002F4E  0EA2               	movlw	162
  9914  002F50  ECB8  F026         	call	_write_data
  9915                           
  9916                           ;ST7735_TFT.c: 254: write_data(0x02);
  9917  002F54  0E02               	movlw	2
  9918  002F56  ECB8  F026         	call	_write_data
  9919                           
  9920                           ;ST7735_TFT.c: 255: write_data(0x84);
  9921  002F5A  0E84               	movlw	132
  9922  002F5C  ECB8  F026         	call	_write_data
  9923                           
  9924                           ;ST7735_TFT.c: 256: write_command(0xC1);
  9925  002F60  0EC1               	movlw	193
  9926  002F62  ECC0  F026         	call	_write_command
  9927                           
  9928                           ;ST7735_TFT.c: 257: write_data(0xC5);
  9929  002F66  0EC5               	movlw	197
  9930  002F68  ECB8  F026         	call	_write_data
  9931                           
  9932                           ;ST7735_TFT.c: 258: write_command(0xC2);
  9933  002F6C  0EC2               	movlw	194
  9934  002F6E  ECC0  F026         	call	_write_command
  9935                           
  9936                           ;ST7735_TFT.c: 259: write_data(0x0A);
  9937  002F72  0E0A               	movlw	10
  9938  002F74  ECB8  F026         	call	_write_data
  9939                           
  9940                           ;ST7735_TFT.c: 260: write_data(0x00);
  9941  002F78  0E00               	movlw	0
  9942  002F7A  ECB8  F026         	call	_write_data
  9943                           
  9944                           ;ST7735_TFT.c: 261: write_command(0xC3);
  9945  002F7E  0EC3               	movlw	195
  9946  002F80  ECC0  F026         	call	_write_command
  9947                           
  9948                           ;ST7735_TFT.c: 262: write_data(0x8A);
  9949  002F84  0E8A               	movlw	138
  9950  002F86  ECB8  F026         	call	_write_data
  9951                           
  9952                           ;ST7735_TFT.c: 263: write_data(0x2A);
  9953  002F8A  0E2A               	movlw	42
  9954  002F8C  ECB8  F026         	call	_write_data
  9955                           
  9956                           ;ST7735_TFT.c: 264: write_command(0xC4);
  9957  002F90  0EC4               	movlw	196
  9958  002F92  ECC0  F026         	call	_write_command
  9959                           
  9960                           ;ST7735_TFT.c: 265: write_data(0x8A);
  9961  002F96  0E8A               	movlw	138
  9962  002F98  ECB8  F026         	call	_write_data
  9963                           
  9964                           ;ST7735_TFT.c: 266: write_data(0xEE);
  9965  002F9C  0EEE               	movlw	238
  9966  002F9E  ECB8  F026         	call	_write_data
  9967                           
  9968                           ;ST7735_TFT.c: 267: write_command(0xC5);
  9969  002FA2  0EC5               	movlw	197
  9970  002FA4  ECC0  F026         	call	_write_command
  9971                           
  9972                           ;ST7735_TFT.c: 268: write_data(0x0E);
  9973  002FA8  0E0E               	movlw	14
  9974  002FAA  ECB8  F026         	call	_write_data
  9975                           
  9976                           ;ST7735_TFT.c: 269: write_command(0x20);
  9977  002FAE  0E20               	movlw	32
  9978  002FB0  ECC0  F026         	call	_write_command
  9979                           
  9980                           ;ST7735_TFT.c: 270: write_command(0x36);
  9981  002FB4  0E36               	movlw	54
  9982  002FB6  ECC0  F026         	call	_write_command
  9983                           
  9984                           ;ST7735_TFT.c: 271: write_data(0xC8);
  9985  002FBA  0EC8               	movlw	200
  9986  002FBC  ECB8  F026         	call	_write_data
  9987                           
  9988                           ;ST7735_TFT.c: 272: write_command(0x3A);
  9989  002FC0  0E3A               	movlw	58
  9990  002FC2  ECC0  F026         	call	_write_command
  9991                           
  9992                           ;ST7735_TFT.c: 273: write_data(0x05);
  9993  002FC6  0E05               	movlw	5
  9994  002FC8  ECB8  F026         	call	_write_data
  9995  002FCC  0012               	return		;funcret
  9996  002FCE                     __end_of_Rcmd1:
  9997                           	opt stack 0
  9998                           tblptru	equ	0xFF8
  9999                           tblptrh	equ	0xFF7
 10000                           tblptrl	equ	0xFF6
 10001                           tablat	equ	0xFF5
 10002                           prodh	equ	0xFF4
 10003                           prodl	equ	0xFF3
 10004                           intcon2	equ	0xFF1
 10005                           intcon3	equ	0xFF0
 10006                           postinc0	equ	0xFEE
 10007                           wreg	equ	0xFE8
 10008                           postdec1	equ	0xFE5
 10009                           plusw1	equ	0xFE3
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           plusw2	equ	0xFDB
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function _LCD_Reset *****************
 10019 ;; Defined at:
 10020 ;;		line 165 in file "ST7735_TFT.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;		None
 10025 ;; Return value:  Size  Location     Type
 10026 ;;		None               void
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    5
 10041 ;; This function calls:
 10042 ;;		_delay_ms
 10043 ;; This function is called by:
 10044 ;;		_Initialize_Screen
 10045 ;;		_Initialize_Setup_Fan_Screen
 10046 ;;		_Initialize_Setup_Time_Screen
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           	psect	text38
 10051  004CE2                     __ptext38:
 10052                           	opt stack 0
 10053  004CE2                     _LCD_Reset:
 10054                           	opt stack 23
 10055                           
 10056                           ;ST7735_TFT.c: 167: PORTDbits.RD0 = 0;
 10057                           
 10058                           ;incstack = 0
 10059  004CE2  9083               	bcf	3971,0,c	;volatile
 10060                           
 10061                           ;ST7735_TFT.c: 168: delay_ms(100);
 10062  004CE4  0E00               	movlw	0
 10063  004CE6  6E18               	movwf	delay_ms@ms+1,c
 10064  004CE8  0E64               	movlw	100
 10065  004CEA  6E17               	movwf	delay_ms@ms,c
 10066  004CEC  EC86  F023         	call	_delay_ms	;wreg free
 10067                           
 10068                           ;ST7735_TFT.c: 169: PORTDbits.RD0 = 1;
 10069  004CF0  8083               	bsf	3971,0,c	;volatile
 10070  004CF2  0012               	return		;funcret
 10071  004CF4                     __end_of_LCD_Reset:
 10072                           	opt stack 0
 10073                           tblptru	equ	0xFF8
 10074                           tblptrh	equ	0xFF7
 10075                           tblptrl	equ	0xFF6
 10076                           tablat	equ	0xFF5
 10077                           prodh	equ	0xFF4
 10078                           prodl	equ	0xFF3
 10079                           intcon2	equ	0xFF1
 10080                           intcon3	equ	0xFF0
 10081                           postinc0	equ	0xFEE
 10082                           wreg	equ	0xFE8
 10083                           postdec1	equ	0xFE5
 10084                           plusw1	equ	0xFE3
 10085                           fsr1l	equ	0xFE1
 10086                           indf2	equ	0xFDF
 10087                           postinc2	equ	0xFDE
 10088                           plusw2	equ	0xFDB
 10089                           fsr2h	equ	0xFDA
 10090                           fsr2l	equ	0xFD9
 10091                           status	equ	0xFD8
 10092                           
 10093 ;; *************** function _delay_ms *****************
 10094 ;; Defined at:
 10095 ;;		line 12 in file "ST7735_TFT.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;  ms              2   22[COMRAM] int 
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;  count           2   24[COMRAM] int 
 10100 ;; Return value:  Size  Location     Type
 10101 ;;		None               void
 10102 ;; Registers used:
 10103 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10104 ;; Tracked objects:
 10105 ;;		On entry : 0/0
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10112 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10113 ;;Total ram usage:        4 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    4
 10116 ;; This function calls:
 10117 ;;		___wmul
 10118 ;; This function is called by:
 10119 ;;		_LCD_Reset
 10120 ;;		_Rcmd1
 10121 ;;		_Rcmd3
 10122 ;;		_Bcmd
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           	psect	text39
 10127  00470C                     __ptext39:
 10128                           	opt stack 0
 10129  00470C                     _delay_ms:
 10130                           	opt stack 22
 10131                           
 10132                           ;ST7735_TFT.c: 18: int count;
 10133                           ;ST7735_TFT.c: 19: count = 8000000/4000/8 * ms;
 10134                           
 10135                           ;incstack = 0
 10136  00470C  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 10137  004710  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 10138  004714  0E00               	movlw	0
 10139  004716  6E14               	movwf	___wmul@multiplicand+1,c
 10140  004718  0EFA               	movlw	250
 10141  00471A  6E13               	movwf	___wmul@multiplicand,c
 10142  00471C  ECD5  F024         	call	___wmul	;wreg free
 10143  004720  C011  F019         	movff	?___wmul,delay_ms@count
 10144  004724  C012  F01A         	movff	?___wmul+1,delay_ms@count+1
 10145                           
 10146                           ;ST7735_TFT.c: 20: count = (0xffff - count)+1;
 10147  004728  6C19               	negf	delay_ms@count,c
 10148  00472A  1E1A               	comf	delay_ms@count+1,f,c
 10149  00472C  B0D8               	btfsc	status,0,c
 10150  00472E  2A1A               	incf	delay_ms@count+1,f,c
 10151                           
 10152                           ;ST7735_TFT.c: 22: T0CON = 0x02;
 10153  004730  0E02               	movlw	2
 10154  004732  6ED5               	movwf	4053,c	;volatile
 10155                           
 10156                           ;ST7735_TFT.c: 23: TMR0H = count >> 8;
 10157  004734  501A               	movf	delay_ms@count+1,w,c
 10158  004736  6ED7               	movwf	4055,c	;volatile
 10159                           
 10160                           ;ST7735_TFT.c: 24: TMR0L = count & 0x00ff;
 10161  004738  C019  FFD6         	movff	delay_ms@count,4054	;volatile
 10162                           
 10163                           ;ST7735_TFT.c: 27: INTCONbits.TMR0IF = 0;
 10164  00473C  94F2               	bcf	intcon,2,c	;volatile
 10165                           
 10166                           ;ST7735_TFT.c: 28: T0CONbits.TMR0ON = 1;
 10167  00473E  8ED5               	bsf	4053,7,c	;volatile
 10168                           
 10169                           ;ST7735_TFT.c: 30: while (INTCONbits.TMR0IF == 0);
 10170  004740  D000               	goto	l198
 10171  004742                     l198:
 10172  004742  A4F2               	btfss	intcon,2,c	;volatile
 10173  004744  D7FE               	goto	l198
 10174                           
 10175                           ;ST7735_TFT.c: 31: T0CONbits.TMR0ON = 0;
 10176  004746  9ED5               	bcf	4053,7,c	;volatile
 10177  004748  0012               	return		;funcret
 10178  00474A                     __end_of_delay_ms:
 10179                           	opt stack 0
 10180                           tblptru	equ	0xFF8
 10181                           tblptrh	equ	0xFF7
 10182                           tblptrl	equ	0xFF6
 10183                           tablat	equ	0xFF5
 10184                           prodh	equ	0xFF4
 10185                           prodl	equ	0xFF3
 10186                           intcon	equ	0xFF2
 10187                           intcon2	equ	0xFF1
 10188                           intcon3	equ	0xFF0
 10189                           postinc0	equ	0xFEE
 10190                           wreg	equ	0xFE8
 10191                           postdec1	equ	0xFE5
 10192                           plusw1	equ	0xFE3
 10193                           fsr1l	equ	0xFE1
 10194                           indf2	equ	0xFDF
 10195                           postinc2	equ	0xFDE
 10196                           plusw2	equ	0xFDB
 10197                           fsr2h	equ	0xFDA
 10198                           fsr2l	equ	0xFD9
 10199                           status	equ	0xFD8
 10200                           
 10201 ;; *************** function _DS3231_Write_Time *****************
 10202 ;; Defined at:
 10203 ;;		line 64 in file "I2C_Support.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;  Address         1   74[COMRAM] unsigned char 
 10208 ;;  Device          1   73[COMRAM] unsigned char 
 10209 ;; Return value:  Size  Location     Type
 10210 ;;		None               void
 10211 ;; Registers used:
 10212 ;;		wreg, status,2, status,0, cstack
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10222 ;;Total ram usage:        2 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:    5
 10225 ;; This function calls:
 10226 ;;		_I2C_Start
 10227 ;;		_I2C_Stop
 10228 ;;		_I2C_Write
 10229 ;;		_dec_2_bcd
 10230 ;; This function is called by:
 10231 ;;		_Do_Save_New_Time
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           	psect	text40
 10236  003BC8                     __ptext40:
 10237                           	opt stack 0
 10238  003BC8                     _DS3231_Write_Time:
 10239                           	opt stack 23
 10240                           
 10241                           ;I2C_Support.c: 66: char Device = 0x68;
 10242                           
 10243                           ;incstack = 0
 10244  003BC8  0E68               	movlw	104
 10245  003BCA  6E4A               	movwf	DS3231_Write_Time@Device,c
 10246                           
 10247                           ;I2C_Support.c: 67: char Address = 0x00;
 10248  003BCC  0E00               	movlw	0
 10249  003BCE  6E4B               	movwf	DS3231_Write_Time@Address,c
 10250                           
 10251                           ;I2C_Support.c: 68: second = dec_2_bcd(setup_second);
 10252  003BD0  0100               	movlb	0	; () banked
 10253  003BD2  51D8               	movf	_setup_second& (0+255),w,b
 10254  003BD4  EC0C  F022         	call	_dec_2_bcd
 10255  003BD8  5043               	movf	?_dec_2_bcd,w,c
 10256  003BDA  6E68               	movwf	_second,c
 10257                           
 10258                           ;I2C_Support.c: 69: minute = dec_2_bcd(setup_minute);
 10259  003BDC  0100               	movlb	0	; () banked
 10260  003BDE  51D6               	movf	_setup_minute& (0+255),w,b
 10261  003BE0  EC0C  F022         	call	_dec_2_bcd
 10262  003BE4  5043               	movf	?_dec_2_bcd,w,c
 10263  003BE6  6E66               	movwf	_minute,c
 10264                           
 10265                           ;I2C_Support.c: 70: hour = dec_2_bcd(setup_hour);
 10266  003BE8  0100               	movlb	0	; () banked
 10267  003BEA  51D5               	movf	_setup_hour& (0+255),w,b
 10268  003BEC  EC0C  F022         	call	_dec_2_bcd
 10269  003BF0  5043               	movf	?_dec_2_bcd,w,c
 10270  003BF2  6E65               	movwf	_hour,c
 10271                           
 10272                           ;I2C_Support.c: 71: dow = 0x01;
 10273  003BF4  0E01               	movlw	1
 10274  003BF6  0100               	movlb	0	; () banked
 10275  003BF8  6FCF               	movwf	_dow& (0+255),b
 10276                           
 10277                           ;I2C_Support.c: 72: day = dec_2_bcd(setup_day);
 10278  003BFA  0100               	movlb	0	; () banked
 10279  003BFC  51D3               	movf	_setup_day& (0+255),w,b
 10280  003BFE  EC0C  F022         	call	_dec_2_bcd
 10281  003C02  5043               	movf	?_dec_2_bcd,w,c
 10282  003C04  6E63               	movwf	_day,c
 10283                           
 10284                           ;I2C_Support.c: 73: month = dec_2_bcd(setup_month);
 10285  003C06  0100               	movlb	0	; () banked
 10286  003C08  51D7               	movf	_setup_month& (0+255),w,b
 10287  003C0A  EC0C  F022         	call	_dec_2_bcd
 10288  003C0E  5043               	movf	?_dec_2_bcd,w,c
 10289  003C10  6E67               	movwf	_month,c
 10290                           
 10291                           ;I2C_Support.c: 74: year = dec_2_bcd(setup_year);
 10292  003C12  0100               	movlb	0	; () banked
 10293  003C14  51D9               	movf	_setup_year& (0+255),w,b
 10294  003C16  EC0C  F022         	call	_dec_2_bcd
 10295  003C1A  5043               	movf	?_dec_2_bcd,w,c
 10296  003C1C  6E6B               	movwf	_year,c
 10297                           
 10298                           ;I2C_Support.c: 75: I2C_Start();
 10299  003C1E  EC8C  F026         	call	_I2C_Start	;wreg free
 10300                           
 10301                           ;I2C_Support.c: 76: I2C_Write((Device << 1) | 0);
 10302  003C22  504A               	movf	DS3231_Write_Time@Device,w,c
 10303  003C24  244A               	addwf	DS3231_Write_Time@Device,w,c
 10304  003C26  ECC4  F023         	call	_I2C_Write
 10305                           
 10306                           ;I2C_Support.c: 77: I2C_Write(Address);
 10307  003C2A  504B               	movf	DS3231_Write_Time@Address,w,c
 10308  003C2C  ECC4  F023         	call	_I2C_Write
 10309                           
 10310                           ;I2C_Support.c: 78: I2C_Write(second);
 10311  003C30  5068               	movf	_second,w,c
 10312  003C32  ECC4  F023         	call	_I2C_Write
 10313                           
 10314                           ;I2C_Support.c: 79: I2C_Write(minute);
 10315  003C36  5066               	movf	_minute,w,c
 10316  003C38  ECC4  F023         	call	_I2C_Write
 10317                           
 10318                           ;I2C_Support.c: 80: I2C_Write(hour);
 10319  003C3C  5065               	movf	_hour,w,c
 10320  003C3E  ECC4  F023         	call	_I2C_Write
 10321                           
 10322                           ;I2C_Support.c: 81: I2C_Write(dow);
 10323  003C42  0100               	movlb	0	; () banked
 10324  003C44  51CF               	movf	_dow& (0+255),w,b
 10325  003C46  ECC4  F023         	call	_I2C_Write
 10326                           
 10327                           ;I2C_Support.c: 82: I2C_Write(day);
 10328  003C4A  5063               	movf	_day,w,c
 10329  003C4C  ECC4  F023         	call	_I2C_Write
 10330                           
 10331                           ;I2C_Support.c: 83: I2C_Write(month);
 10332  003C50  5067               	movf	_month,w,c
 10333  003C52  ECC4  F023         	call	_I2C_Write
 10334                           
 10335                           ;I2C_Support.c: 84: I2C_Write(year);
 10336  003C56  506B               	movf	_year,w,c
 10337  003C58  ECC4  F023         	call	_I2C_Write
 10338                           
 10339                           ;I2C_Support.c: 85: I2C_Stop();
 10340  003C5C  EC83  F026         	call	_I2C_Stop	;wreg free
 10341  003C60  0012               	return		;funcret
 10342  003C62                     __end_of_DS3231_Write_Time:
 10343                           	opt stack 0
 10344                           tblptru	equ	0xFF8
 10345                           tblptrh	equ	0xFF7
 10346                           tblptrl	equ	0xFF6
 10347                           tablat	equ	0xFF5
 10348                           prodh	equ	0xFF4
 10349                           prodl	equ	0xFF3
 10350                           intcon	equ	0xFF2
 10351                           intcon2	equ	0xFF1
 10352                           intcon3	equ	0xFF0
 10353                           postinc0	equ	0xFEE
 10354                           wreg	equ	0xFE8
 10355                           postdec1	equ	0xFE5
 10356                           plusw1	equ	0xFE3
 10357                           fsr1l	equ	0xFE1
 10358                           indf2	equ	0xFDF
 10359                           postinc2	equ	0xFDE
 10360                           plusw2	equ	0xFDB
 10361                           fsr2h	equ	0xFDA
 10362                           fsr2l	equ	0xFD9
 10363                           status	equ	0xFD8
 10364                           
 10365 ;; *************** function _dec_2_bcd *****************
 10366 ;; Defined at:
 10367 ;;		line 59 in file "utils.c"
 10368 ;; Parameters:    Size  Location     Type
 10369 ;;  dec             1    wreg     unsigned char 
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;  dec             1   72[COMRAM] unsigned char 
 10372 ;;  bcd             2   70[COMRAM] int 
 10373 ;; Return value:  Size  Location     Type
 10374 ;;                  2   66[COMRAM] int 
 10375 ;; Registers used:
 10376 ;;		wreg, status,2, status,0, cstack
 10377 ;; Tracked objects:
 10378 ;;		On entry : 0/0
 10379 ;;		On exit  : 0/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10382 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10385 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;Total ram usage:        7 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; Hardware stack levels required when called:    4
 10389 ;; This function calls:
 10390 ;;		___awdiv
 10391 ;;		___awmod
 10392 ;; This function is called by:
 10393 ;;		_DS3231_Write_Time
 10394 ;; This function uses a non-reentrant model
 10395 ;;
 10396                           
 10397                           	psect	text41
 10398  004418                     __ptext41:
 10399                           	opt stack 0
 10400  004418                     _dec_2_bcd:
 10401                           	opt stack 23
 10402                           
 10403                           ;incstack = 0
 10404                           ;dec_2_bcd@dec stored from wreg
 10405  004418  6E49               	movwf	dec_2_bcd@dec,c
 10406                           
 10407                           ;utils.c: 61: int bcd;
 10408                           ;utils.c: 62: bcd = ((dec / 10) << 4) + (dec % 10);
 10409  00441A  C049  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 10410  00441E  6A18               	clrf	___awdiv@dividend+1,c
 10411  004420  0E00               	movlw	0
 10412  004422  6E1A               	movwf	___awdiv@divisor+1,c
 10413  004424  0E0A               	movlw	10
 10414  004426  6E19               	movwf	___awdiv@divisor,c
 10415  004428  EC31  F01E         	call	___awdiv	;wreg free
 10416  00442C  C017  F045         	movff	?___awdiv,??_dec_2_bcd
 10417  004430  C018  F046         	movff	?___awdiv+1,??_dec_2_bcd+1
 10418  004434  3A45               	swapf	??_dec_2_bcd,f,c
 10419  004436  3A46               	swapf	??_dec_2_bcd+1,f,c
 10420  004438  0EF0               	movlw	240
 10421  00443A  1646               	andwf	??_dec_2_bcd+1,f,c
 10422  00443C  5045               	movf	??_dec_2_bcd,w,c
 10423  00443E  0B0F               	andlw	15
 10424  004440  1246               	iorwf	??_dec_2_bcd+1,f,c
 10425  004442  0EF0               	movlw	240
 10426  004444  1645               	andwf	??_dec_2_bcd,f,c
 10427  004446  C049  F03D         	movff	dec_2_bcd@dec,___awmod@dividend
 10428  00444A  6A3E               	clrf	___awmod@dividend+1,c
 10429  00444C  0E00               	movlw	0
 10430  00444E  6E40               	movwf	___awmod@divisor+1,c
 10431  004450  0E0A               	movlw	10
 10432  004452  6E3F               	movwf	___awmod@divisor,c
 10433  004454  EC62  F020         	call	___awmod	;wreg free
 10434  004458  503D               	movf	?___awmod,w,c
 10435  00445A  2445               	addwf	??_dec_2_bcd,w,c
 10436  00445C  6E47               	movwf	dec_2_bcd@bcd,c
 10437  00445E  503E               	movf	?___awmod+1,w,c
 10438  004460  2046               	addwfc	??_dec_2_bcd+1,w,c
 10439  004462  6E48               	movwf	dec_2_bcd@bcd+1,c
 10440                           
 10441                           ;utils.c: 63: return bcd;
 10442  004464  C047  F043         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 10443  004468  C048  F044         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 10444  00446C  D000               	goto	l454
 10445  00446E                     l454:
 10446  00446E  0012               	return		;funcret
 10447  004470                     __end_of_dec_2_bcd:
 10448                           	opt stack 0
 10449                           tblptru	equ	0xFF8
 10450                           tblptrh	equ	0xFF7
 10451                           tblptrl	equ	0xFF6
 10452                           tablat	equ	0xFF5
 10453                           prodh	equ	0xFF4
 10454                           prodl	equ	0xFF3
 10455                           intcon	equ	0xFF2
 10456                           intcon2	equ	0xFF1
 10457                           intcon3	equ	0xFF0
 10458                           postinc0	equ	0xFEE
 10459                           wreg	equ	0xFE8
 10460                           postdec1	equ	0xFE5
 10461                           plusw1	equ	0xFE3
 10462                           fsr1l	equ	0xFE1
 10463                           indf2	equ	0xFDF
 10464                           postinc2	equ	0xFDE
 10465                           plusw2	equ	0xFDB
 10466                           fsr2h	equ	0xFDA
 10467                           fsr2l	equ	0xFD9
 10468                           status	equ	0xFD8
 10469                           
 10470 ;; *************** function _DS3231_Read_Time *****************
 10471 ;; Defined at:
 10472 ;;		line 43 in file "I2C_Support.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;		None
 10475 ;; Auto vars:     Size  Location     Type
 10476 ;;  Device          1   20[COMRAM] unsigned char 
 10477 ;;  Address         1   19[COMRAM] unsigned char 
 10478 ;;  Data_Ret        1    0        unsigned char 
 10479 ;; Return value:  Size  Location     Type
 10480 ;;		None               void
 10481 ;; Registers used:
 10482 ;;		wreg, status,2, status,0, cstack
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;Total ram usage:        2 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; Hardware stack levels required when called:    6
 10495 ;; This function calls:
 10496 ;;		_I2C_ReStart
 10497 ;;		_I2C_Read
 10498 ;;		_I2C_Start
 10499 ;;		_I2C_Stop
 10500 ;;		_I2C_Write
 10501 ;; This function is called by:
 10502 ;;		_main
 10503 ;;		_Setup_Fan_Temp
 10504 ;;		_Do_Save_New_Fan_Temp
 10505 ;;		_Do_Setup_Time
 10506 ;;		_Do_Save_New_Time
 10507 ;;		_Exit_Time_Setup
 10508 ;;		_Exit_Setup_Fan_Temp
 10509 ;; This function uses a non-reentrant model
 10510 ;;
 10511                           
 10512                           	psect	text42
 10513  004294                     __ptext42:
 10514                           	opt stack 0
 10515  004294                     _DS3231_Read_Time:
 10516                           	opt stack 22
 10517                           
 10518                           ;I2C_Support.c: 46: char Device = 0x68;
 10519                           
 10520                           ;incstack = 0
 10521  004294  0E68               	movlw	104
 10522  004296  6E15               	movwf	DS3231_Read_Time@Device,c
 10523                           
 10524                           ;I2C_Support.c: 47: char Address = 0x00;
 10525  004298  0E00               	movlw	0
 10526  00429A  6E14               	movwf	DS3231_Read_Time@Address,c
 10527                           
 10528                           ;I2C_Support.c: 48: char Data_Ret;
 10529                           ;I2C_Support.c: 49: I2C_Start();
 10530  00429C  EC8C  F026         	call	_I2C_Start	;wreg free
 10531                           
 10532                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
 10533  0042A0  5015               	movf	DS3231_Read_Time@Device,w,c
 10534  0042A2  2415               	addwf	DS3231_Read_Time@Device,w,c
 10535  0042A4  ECC4  F023         	call	_I2C_Write
 10536                           
 10537                           ;I2C_Support.c: 51: I2C_Write(Address);
 10538  0042A8  5014               	movf	DS3231_Read_Time@Address,w,c
 10539  0042AA  ECC4  F023         	call	_I2C_Write
 10540                           
 10541                           ;I2C_Support.c: 52: I2C_ReStart();
 10542  0042AE  EC3E  F026         	call	_I2C_ReStart	;wreg free
 10543                           
 10544                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
 10545  0042B2  80D8               	bsf	status,0,c
 10546  0042B4  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10547  0042B6  ECC4  F023         	call	_I2C_Write
 10548                           
 10549                           ;I2C_Support.c: 54: second = I2C_Read(1);
 10550  0042BA  0E01               	movlw	1
 10551  0042BC  EC24  F023         	call	_I2C_Read
 10552  0042C0  6E68               	movwf	_second,c
 10553                           
 10554                           ;I2C_Support.c: 55: minute = I2C_Read(1);
 10555  0042C2  0E01               	movlw	1
 10556  0042C4  EC24  F023         	call	_I2C_Read
 10557  0042C8  6E66               	movwf	_minute,c
 10558                           
 10559                           ;I2C_Support.c: 56: hour = I2C_Read(1);
 10560  0042CA  0E01               	movlw	1
 10561  0042CC  EC24  F023         	call	_I2C_Read
 10562  0042D0  6E65               	movwf	_hour,c
 10563                           
 10564                           ;I2C_Support.c: 57: dow = I2C_Read(1);
 10565  0042D2  0E01               	movlw	1
 10566  0042D4  EC24  F023         	call	_I2C_Read
 10567  0042D8  0100               	movlb	0	; () banked
 10568  0042DA  6FCF               	movwf	_dow& (0+255),b
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;I2C_Support.c: 58: day = I2C_Read(1);
 10572  0042DC  0E01               	movlw	1
 10573  0042DE  EC24  F023         	call	_I2C_Read
 10574  0042E2  6E63               	movwf	_day,c
 10575                           
 10576                           ;I2C_Support.c: 59: month = I2C_Read(1);
 10577  0042E4  0E01               	movlw	1
 10578  0042E6  EC24  F023         	call	_I2C_Read
 10579  0042EA  6E67               	movwf	_month,c
 10580                           
 10581                           ;I2C_Support.c: 60: year = I2C_Read(0);
 10582  0042EC  0E00               	movlw	0
 10583  0042EE  EC24  F023         	call	_I2C_Read
 10584  0042F2  6E6B               	movwf	_year,c
 10585                           
 10586                           ;I2C_Support.c: 61: I2C_Stop();
 10587  0042F4  EC83  F026         	call	_I2C_Stop	;wreg free
 10588  0042F8  0012               	return		;funcret
 10589  0042FA                     __end_of_DS3231_Read_Time:
 10590                           	opt stack 0
 10591                           tblptru	equ	0xFF8
 10592                           tblptrh	equ	0xFF7
 10593                           tblptrl	equ	0xFF6
 10594                           tablat	equ	0xFF5
 10595                           prodh	equ	0xFF4
 10596                           prodl	equ	0xFF3
 10597                           intcon	equ	0xFF2
 10598                           intcon2	equ	0xFF1
 10599                           intcon3	equ	0xFF0
 10600                           postinc0	equ	0xFEE
 10601                           wreg	equ	0xFE8
 10602                           postdec1	equ	0xFE5
 10603                           plusw1	equ	0xFE3
 10604                           fsr1l	equ	0xFE1
 10605                           indf2	equ	0xFDF
 10606                           postinc2	equ	0xFDE
 10607                           plusw2	equ	0xFDB
 10608                           fsr2h	equ	0xFDA
 10609                           fsr2l	equ	0xFD9
 10610                           status	equ	0xFD8
 10611                           
 10612 ;; *************** function _Decrease_Time *****************
 10613 ;; Defined at:
 10614 ;;		line 155 in file "Setup_Time.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;		None
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;		None
 10619 ;; Return value:  Size  Location     Type
 10620 ;;		None               void
 10621 ;; Registers used:
 10622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;Total ram usage:        0 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:   11
 10635 ;; This function calls:
 10636 ;;		_Update_Setup_Time_Screen
 10637 ;; This function is called by:
 10638 ;;		_Do_Setup_Time
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text43
 10643  003908                     __ptext43:
 10644                           	opt stack 0
 10645  003908                     _Decrease_Time:
 10646                           	opt stack 18
 10647                           
 10648                           ;Setup_Time.c: 157: switch (Select_Field)
 10649                           
 10650                           ;incstack = 0
 10651  003908  D042               	goto	l9852
 10652  00390A                     l9814:
 10653                           
 10654                           ;Setup_Time.c: 160: if (setup_hour == 0) setup_hour = 23;
 10655  00390A  0100               	movlb	0	; () banked
 10656  00390C  51D5               	movf	_setup_hour& (0+255),w,b
 10657  00390E  A4D8               	btfss	status,2,c
 10658  003910  D004               	goto	l9818
 10659                           
 10660                           ; BSR set to: 0
 10661  003912  0E17               	movlw	23
 10662  003914  0100               	movlb	0	; () banked
 10663  003916  6FD5               	movwf	_setup_hour& (0+255),b
 10664  003918  D04F               	goto	l9854
 10665  00391A                     l9818:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;Setup_Time.c: 161: else --setup_hour;
 10669  00391A  0100               	movlb	0	; () banked
 10670  00391C  07D5               	decf	_setup_hour& (0+255),f,b
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;Setup_Time.c: 162: break;
 10674  00391E  D04C               	goto	l9854
 10675  003920                     l9820:
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;Setup_Time.c: 165: if (setup_minute == 0) setup_minute = 59;
 10679  003920  0100               	movlb	0	; () banked
 10680  003922  51D6               	movf	_setup_minute& (0+255),w,b
 10681  003924  A4D8               	btfss	status,2,c
 10682  003926  D004               	goto	l9824
 10683                           
 10684                           ; BSR set to: 0
 10685  003928  0E3B               	movlw	59
 10686  00392A  0100               	movlb	0	; () banked
 10687  00392C  6FD6               	movwf	_setup_minute& (0+255),b
 10688  00392E  D044               	goto	l9854
 10689  003930                     l9824:
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;Setup_Time.c: 166: else --setup_minute;
 10693  003930  0100               	movlb	0	; () banked
 10694  003932  07D6               	decf	_setup_minute& (0+255),f,b
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;Setup_Time.c: 167: break;
 10698  003934  D041               	goto	l9854
 10699  003936                     l9826:
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;Setup_Time.c: 171: if (setup_second == 0) setup_second = 59;
 10703  003936  0100               	movlb	0	; () banked
 10704  003938  51D8               	movf	_setup_second& (0+255),w,b
 10705  00393A  A4D8               	btfss	status,2,c
 10706  00393C  D004               	goto	l9830
 10707                           
 10708                           ; BSR set to: 0
 10709  00393E  0E3B               	movlw	59
 10710  003940  0100               	movlb	0	; () banked
 10711  003942  6FD8               	movwf	_setup_second& (0+255),b
 10712  003944  D039               	goto	l9854
 10713  003946                     l9830:
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;Setup_Time.c: 172: else --setup_second;
 10717  003946  0100               	movlb	0	; () banked
 10718  003948  07D8               	decf	_setup_second& (0+255),f,b
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;Setup_Time.c: 173: break;
 10722  00394A  D036               	goto	l9854
 10723  00394C                     l9832:
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;Setup_Time.c: 177: if (setup_month == 1) setup_month = 12;
 10727  00394C  0100               	movlb	0	; () banked
 10728  00394E  05D7               	decf	_setup_month& (0+255),w,b
 10729  003950  A4D8               	btfss	status,2,c
 10730  003952  D004               	goto	l9836
 10731                           
 10732                           ; BSR set to: 0
 10733  003954  0E0C               	movlw	12
 10734  003956  0100               	movlb	0	; () banked
 10735  003958  6FD7               	movwf	_setup_month& (0+255),b
 10736  00395A  D02E               	goto	l9854
 10737  00395C                     l9836:
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;Setup_Time.c: 178: else --setup_month;
 10741  00395C  0100               	movlb	0	; () banked
 10742  00395E  07D7               	decf	_setup_month& (0+255),f,b
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;Setup_Time.c: 179: break;
 10746  003960  D02B               	goto	l9854
 10747  003962                     l9838:
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;Setup_Time.c: 183: if (setup_day == 1) setup_day = 1;
 10751  003962  0100               	movlb	0	; () banked
 10752  003964  05D3               	decf	_setup_day& (0+255),w,b
 10753  003966  A4D8               	btfss	status,2,c
 10754  003968  D004               	goto	l9842
 10755                           
 10756                           ; BSR set to: 0
 10757  00396A  0E01               	movlw	1
 10758  00396C  0100               	movlb	0	; () banked
 10759  00396E  6FD3               	movwf	_setup_day& (0+255),b
 10760  003970  D023               	goto	l9854
 10761  003972                     l9842:
 10762                           
 10763                           ; BSR set to: 0
 10764                           ;Setup_Time.c: 184: else --setup_day;
 10765  003972  0100               	movlb	0	; () banked
 10766  003974  07D3               	decf	_setup_day& (0+255),f,b
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;Setup_Time.c: 185: break;
 10770  003976  D020               	goto	l9854
 10771  003978                     l9844:
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;Setup_Time.c: 189: if (setup_year == 00) setup_year = 99;
 10775  003978  0100               	movlb	0	; () banked
 10776  00397A  51D9               	movf	_setup_year& (0+255),w,b
 10777  00397C  A4D8               	btfss	status,2,c
 10778  00397E  D004               	goto	l9848
 10779                           
 10780                           ; BSR set to: 0
 10781  003980  0E63               	movlw	99
 10782  003982  0100               	movlb	0	; () banked
 10783  003984  6FD9               	movwf	_setup_year& (0+255),b
 10784  003986  D018               	goto	l9854
 10785  003988                     l9848:
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;Setup_Time.c: 190: else --setup_year;
 10789  003988  0100               	movlb	0	; () banked
 10790  00398A  07D9               	decf	_setup_year& (0+255),f,b
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;Setup_Time.c: 195: }
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;Setup_Time.c: 194: break;
 10797                           
 10798                           ;Setup_Time.c: 193: default:
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;Setup_Time.c: 191: break;
 10802  00398C  D015               	goto	l9854
 10803  00398E                     l9852:
 10804  00398E  0100               	movlb	0	; () banked
 10805  003990  51CB               	movf	_Select_Field& (0+255),w,b
 10806                           
 10807                           ; Switch size 1, requested type "space"
 10808                           ; Number of cases is 6, Range of values is 0 to 5
 10809                           ; switch strategies available:
 10810                           ; Name         Instructions Cycles
 10811                           ; simple_byte           19    10 (average)
 10812                           ;	Chosen strategy is simple_byte
 10813  003992  0A00               	xorlw	0	; case 0
 10814  003994  B4D8               	btfsc	status,2,c
 10815  003996  D7B9               	goto	l9814
 10816  003998  0A01               	xorlw	1	; case 1
 10817  00399A  B4D8               	btfsc	status,2,c
 10818  00399C  D7C1               	goto	l9820
 10819  00399E  0A03               	xorlw	3	; case 2
 10820  0039A0  B4D8               	btfsc	status,2,c
 10821  0039A2  D7C9               	goto	l9826
 10822  0039A4  0A01               	xorlw	1	; case 3
 10823  0039A6  B4D8               	btfsc	status,2,c
 10824  0039A8  D7D1               	goto	l9832
 10825  0039AA  0A07               	xorlw	7	; case 4
 10826  0039AC  B4D8               	btfsc	status,2,c
 10827  0039AE  D7D9               	goto	l9838
 10828  0039B0  0A01               	xorlw	1	; case 5
 10829  0039B2  B4D8               	btfsc	status,2,c
 10830  0039B4  D7E1               	goto	l9844
 10831  0039B6  D000               	goto	l9854
 10832  0039B8                     l9854:
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;Setup_Time.c: 196: Update_Setup_Time_Screen();
 10836  0039B8  EC53  F015         	call	_Update_Setup_Time_Screen	;wreg free
 10837  0039BC  0012               	return		;funcret
 10838  0039BE                     __end_of_Decrease_Time:
 10839                           	opt stack 0
 10840                           tblptru	equ	0xFF8
 10841                           tblptrh	equ	0xFF7
 10842                           tblptrl	equ	0xFF6
 10843                           tablat	equ	0xFF5
 10844                           prodh	equ	0xFF4
 10845                           prodl	equ	0xFF3
 10846                           intcon	equ	0xFF2
 10847                           intcon2	equ	0xFF1
 10848                           intcon3	equ	0xFF0
 10849                           postinc0	equ	0xFEE
 10850                           wreg	equ	0xFE8
 10851                           postdec1	equ	0xFE5
 10852                           plusw1	equ	0xFE3
 10853                           fsr1l	equ	0xFE1
 10854                           indf2	equ	0xFDF
 10855                           postinc2	equ	0xFDE
 10856                           plusw2	equ	0xFDB
 10857                           fsr2h	equ	0xFDA
 10858                           fsr2l	equ	0xFD9
 10859                           status	equ	0xFD8
 10860                           
 10861 ;; *************** function _Update_Setup_Time_Screen *****************
 10862 ;; Defined at:
 10863 ;;		line 266 in file "Setup_Time.c"
 10864 ;; Parameters:    Size  Location     Type
 10865 ;;		None
 10866 ;; Auto vars:     Size  Location     Type
 10867 ;;		None
 10868 ;; Return value:  Size  Location     Type
 10869 ;;		None               void
 10870 ;; Registers used:
 10871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10872 ;; Tracked objects:
 10873 ;;		On entry : 0/0
 10874 ;;		On exit  : 0/0
 10875 ;;		Unchanged: 0/0
 10876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10881 ;;Total ram usage:        0 bytes
 10882 ;; Hardware stack levels used:    1
 10883 ;; Hardware stack levels required when called:   10
 10884 ;; This function calls:
 10885 ;;		___awdiv
 10886 ;;		___awmod
 10887 ;;		_drawtext
 10888 ;; This function is called by:
 10889 ;;		_Do_Setup_Time
 10890 ;;		_Increase_Time
 10891 ;;		_Decrease_Time
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           	psect	text44
 10896  002AA6                     __ptext44:
 10897                           	opt stack 0
 10898  002AA6                     _Update_Setup_Time_Screen:
 10899                           	opt stack 19
 10900                           
 10901                           ;Setup_Time.c: 268: setup_time[0] = (setup_hour/10) + '0';
 10902                           
 10903                           ;incstack = 0
 10904  002AA6  C0D5  F017         	movff	_setup_hour,___awdiv@dividend
 10905  002AAA  6A18               	clrf	___awdiv@dividend+1,c
 10906  002AAC  0E00               	movlw	0
 10907  002AAE  6E1A               	movwf	___awdiv@divisor+1,c
 10908  002AB0  0E0A               	movlw	10
 10909  002AB2  6E19               	movwf	___awdiv@divisor,c
 10910  002AB4  EC31  F01E         	call	___awdiv	;wreg free
 10911  002AB8  5017               	movf	?___awdiv,w,c
 10912  002ABA  0F30               	addlw	48
 10913  002ABC  0101               	movlb	1	; () banked
 10914  002ABE  6F65               	movwf	_setup_time& (0+255),b
 10915                           
 10916                           ;Setup_Time.c: 269: setup_time[1] = (setup_hour%10) + '0';
 10917  002AC0  C0D5  F03D         	movff	_setup_hour,___awmod@dividend
 10918  002AC4  6A3E               	clrf	___awmod@dividend+1,c
 10919  002AC6  0E00               	movlw	0
 10920  002AC8  6E40               	movwf	___awmod@divisor+1,c
 10921  002ACA  0E0A               	movlw	10
 10922  002ACC  6E3F               	movwf	___awmod@divisor,c
 10923  002ACE  EC62  F020         	call	___awmod	;wreg free
 10924  002AD2  503D               	movf	?___awmod,w,c
 10925  002AD4  0F30               	addlw	48
 10926  002AD6  0101               	movlb	1	; () banked
 10927  002AD8  6F66               	movwf	(_setup_time+1)& (0+255),b
 10928                           
 10929                           ;Setup_Time.c: 271: setup_time[3] = (setup_minute/10) + '0';
 10930  002ADA  C0D6  F017         	movff	_setup_minute,___awdiv@dividend
 10931  002ADE  6A18               	clrf	___awdiv@dividend+1,c
 10932  002AE0  0E00               	movlw	0
 10933  002AE2  6E1A               	movwf	___awdiv@divisor+1,c
 10934  002AE4  0E0A               	movlw	10
 10935  002AE6  6E19               	movwf	___awdiv@divisor,c
 10936  002AE8  EC31  F01E         	call	___awdiv	;wreg free
 10937  002AEC  5017               	movf	?___awdiv,w,c
 10938  002AEE  0F30               	addlw	48
 10939  002AF0  0101               	movlb	1	; () banked
 10940  002AF2  6F68               	movwf	(_setup_time+3)& (0+255),b
 10941                           
 10942                           ;Setup_Time.c: 272: setup_time[4] = (setup_minute%10) + '0';
 10943  002AF4  C0D6  F03D         	movff	_setup_minute,___awmod@dividend
 10944  002AF8  6A3E               	clrf	___awmod@dividend+1,c
 10945  002AFA  0E00               	movlw	0
 10946  002AFC  6E40               	movwf	___awmod@divisor+1,c
 10947  002AFE  0E0A               	movlw	10
 10948  002B00  6E3F               	movwf	___awmod@divisor,c
 10949  002B02  EC62  F020         	call	___awmod	;wreg free
 10950  002B06  503D               	movf	?___awmod,w,c
 10951  002B08  0F30               	addlw	48
 10952  002B0A  0101               	movlb	1	; () banked
 10953  002B0C  6F69               	movwf	(_setup_time+4)& (0+255),b
 10954                           
 10955                           ;Setup_Time.c: 274: setup_time[6] = (setup_second/10) + '0';
 10956  002B0E  C0D8  F017         	movff	_setup_second,___awdiv@dividend
 10957  002B12  6A18               	clrf	___awdiv@dividend+1,c
 10958  002B14  0E00               	movlw	0
 10959  002B16  6E1A               	movwf	___awdiv@divisor+1,c
 10960  002B18  0E0A               	movlw	10
 10961  002B1A  6E19               	movwf	___awdiv@divisor,c
 10962  002B1C  EC31  F01E         	call	___awdiv	;wreg free
 10963  002B20  5017               	movf	?___awdiv,w,c
 10964  002B22  0F30               	addlw	48
 10965  002B24  0101               	movlb	1	; () banked
 10966  002B26  6F6B               	movwf	(_setup_time+6)& (0+255),b
 10967                           
 10968                           ;Setup_Time.c: 275: setup_time[7] = (setup_second%10) + '0';
 10969  002B28  C0D8  F03D         	movff	_setup_second,___awmod@dividend
 10970  002B2C  6A3E               	clrf	___awmod@dividend+1,c
 10971  002B2E  0E00               	movlw	0
 10972  002B30  6E40               	movwf	___awmod@divisor+1,c
 10973  002B32  0E0A               	movlw	10
 10974  002B34  6E3F               	movwf	___awmod@divisor,c
 10975  002B36  EC62  F020         	call	___awmod	;wreg free
 10976  002B3A  503D               	movf	?___awmod,w,c
 10977  002B3C  0F30               	addlw	48
 10978  002B3E  0101               	movlb	1	; () banked
 10979  002B40  6F6C               	movwf	(_setup_time+7)& (0+255),b
 10980                           
 10981                           ;Setup_Time.c: 277: setup_date[0] = (setup_month/10) + '0';
 10982  002B42  C0D7  F017         	movff	_setup_month,___awdiv@dividend
 10983  002B46  6A18               	clrf	___awdiv@dividend+1,c
 10984  002B48  0E00               	movlw	0
 10985  002B4A  6E1A               	movwf	___awdiv@divisor+1,c
 10986  002B4C  0E0A               	movlw	10
 10987  002B4E  6E19               	movwf	___awdiv@divisor,c
 10988  002B50  EC31  F01E         	call	___awdiv	;wreg free
 10989  002B54  5017               	movf	?___awdiv,w,c
 10990  002B56  0F30               	addlw	48
 10991  002B58  0101               	movlb	1	; () banked
 10992  002B5A  6F5C               	movwf	_setup_date& (0+255),b
 10993                           
 10994                           ;Setup_Time.c: 278: setup_date[1] = (setup_month%10) + '0';
 10995  002B5C  C0D7  F03D         	movff	_setup_month,___awmod@dividend
 10996  002B60  6A3E               	clrf	___awmod@dividend+1,c
 10997  002B62  0E00               	movlw	0
 10998  002B64  6E40               	movwf	___awmod@divisor+1,c
 10999  002B66  0E0A               	movlw	10
 11000  002B68  6E3F               	movwf	___awmod@divisor,c
 11001  002B6A  EC62  F020         	call	___awmod	;wreg free
 11002  002B6E  503D               	movf	?___awmod,w,c
 11003  002B70  0F30               	addlw	48
 11004  002B72  0101               	movlb	1	; () banked
 11005  002B74  6F5D               	movwf	(_setup_date+1)& (0+255),b
 11006                           
 11007                           ;Setup_Time.c: 280: setup_date[3] = (setup_day/10) + '0';
 11008  002B76  C0D3  F017         	movff	_setup_day,___awdiv@dividend
 11009  002B7A  6A18               	clrf	___awdiv@dividend+1,c
 11010  002B7C  0E00               	movlw	0
 11011  002B7E  6E1A               	movwf	___awdiv@divisor+1,c
 11012  002B80  0E0A               	movlw	10
 11013  002B82  6E19               	movwf	___awdiv@divisor,c
 11014  002B84  EC31  F01E         	call	___awdiv	;wreg free
 11015  002B88  5017               	movf	?___awdiv,w,c
 11016  002B8A  0F30               	addlw	48
 11017  002B8C  0101               	movlb	1	; () banked
 11018  002B8E  6F5F               	movwf	(_setup_date+3)& (0+255),b
 11019                           
 11020                           ;Setup_Time.c: 281: setup_date[4] = (setup_day%10) + '0';
 11021  002B90  C0D3  F03D         	movff	_setup_day,___awmod@dividend
 11022  002B94  6A3E               	clrf	___awmod@dividend+1,c
 11023  002B96  0E00               	movlw	0
 11024  002B98  6E40               	movwf	___awmod@divisor+1,c
 11025  002B9A  0E0A               	movlw	10
 11026  002B9C  6E3F               	movwf	___awmod@divisor,c
 11027  002B9E  EC62  F020         	call	___awmod	;wreg free
 11028  002BA2  503D               	movf	?___awmod,w,c
 11029  002BA4  0F30               	addlw	48
 11030  002BA6  0101               	movlb	1	; () banked
 11031  002BA8  6F60               	movwf	(_setup_date+4)& (0+255),b
 11032                           
 11033                           ;Setup_Time.c: 283: setup_date[6] = (setup_year/10) + '0';
 11034  002BAA  C0D9  F017         	movff	_setup_year,___awdiv@dividend
 11035  002BAE  6A18               	clrf	___awdiv@dividend+1,c
 11036  002BB0  0E00               	movlw	0
 11037  002BB2  6E1A               	movwf	___awdiv@divisor+1,c
 11038  002BB4  0E0A               	movlw	10
 11039  002BB6  6E19               	movwf	___awdiv@divisor,c
 11040  002BB8  EC31  F01E         	call	___awdiv	;wreg free
 11041  002BBC  5017               	movf	?___awdiv,w,c
 11042  002BBE  0F30               	addlw	48
 11043  002BC0  0101               	movlb	1	; () banked
 11044  002BC2  6F62               	movwf	(_setup_date+6)& (0+255),b
 11045                           
 11046                           ;Setup_Time.c: 284: setup_date[7] = (setup_year%10) + '0';
 11047  002BC4  C0D9  F03D         	movff	_setup_year,___awmod@dividend
 11048  002BC8  6A3E               	clrf	___awmod@dividend+1,c
 11049  002BCA  0E00               	movlw	0
 11050  002BCC  6E40               	movwf	___awmod@divisor+1,c
 11051  002BCE  0E0A               	movlw	10
 11052  002BD0  6E3F               	movwf	___awmod@divisor,c
 11053  002BD2  EC62  F020         	call	___awmod	;wreg free
 11054  002BD6  503D               	movf	?___awmod,w,c
 11055  002BD8  0F30               	addlw	48
 11056  002BDA  0101               	movlb	1	; () banked
 11057  002BDC  6F63               	movwf	(_setup_date+7)& (0+255),b
 11058                           
 11059                           ; BSR set to: 1
 11060                           ;Setup_Time.c: 286: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
 11061  002BDE  0E34               	movlw	52
 11062  002BE0  6E39               	movwf	drawtext@y,c
 11063  002BE2  0E65               	movlw	low _setup_time
 11064  002BE4  6E3A               	movwf	drawtext@_text,c
 11065  002BE6  0E01               	movlw	high _setup_time
 11066  002BE8  6E3B               	movwf	drawtext@_text+1,c
 11067  002BEA  0E07               	movlw	7
 11068  002BEC  6E3D               	movwf	drawtext@color+1,c
 11069  002BEE  683C               	setf	drawtext@color,c
 11070  002BF0  0E00               	movlw	0
 11071  002BF2  6E3F               	movwf	drawtext@bg+1,c
 11072  002BF4  0E00               	movlw	0
 11073  002BF6  6E3E               	movwf	drawtext@bg,c
 11074  002BF8  0E02               	movlw	2
 11075  002BFA  6E40               	movwf	drawtext@size,c
 11076  002BFC  0E0F               	movlw	15
 11077  002BFE  ECD1  F01A         	call	_drawtext
 11078                           
 11079                           ;Setup_Time.c: 287: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
 11080  002C02  0E52               	movlw	82
 11081  002C04  6E39               	movwf	drawtext@y,c
 11082  002C06  0E5C               	movlw	low _setup_date
 11083  002C08  6E3A               	movwf	drawtext@_text,c
 11084  002C0A  0E01               	movlw	high _setup_date
 11085  002C0C  6E3B               	movwf	drawtext@_text+1,c
 11086  002C0E  0E07               	movlw	7
 11087  002C10  6E3D               	movwf	drawtext@color+1,c
 11088  002C12  0EE0               	movlw	224
 11089  002C14  6E3C               	movwf	drawtext@color,c
 11090  002C16  0E00               	movlw	0
 11091  002C18  6E3F               	movwf	drawtext@bg+1,c
 11092  002C1A  0E00               	movlw	0
 11093  002C1C  6E3E               	movwf	drawtext@bg,c
 11094  002C1E  0E02               	movlw	2
 11095  002C20  6E40               	movwf	drawtext@size,c
 11096  002C22  0E0F               	movlw	15
 11097  002C24  ECD1  F01A         	call	_drawtext
 11098  002C28  0012               	return		;funcret
 11099  002C2A                     __end_of_Update_Setup_Time_Screen:
 11100                           	opt stack 0
 11101                           tblptru	equ	0xFF8
 11102                           tblptrh	equ	0xFF7
 11103                           tblptrl	equ	0xFF6
 11104                           tablat	equ	0xFF5
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           intcon	equ	0xFF2
 11108                           intcon2	equ	0xFF1
 11109                           intcon3	equ	0xFF0
 11110                           postinc0	equ	0xFEE
 11111                           wreg	equ	0xFE8
 11112                           postdec1	equ	0xFE5
 11113                           plusw1	equ	0xFE3
 11114                           fsr1l	equ	0xFE1
 11115                           indf2	equ	0xFDF
 11116                           postinc2	equ	0xFDE
 11117                           plusw2	equ	0xFDB
 11118                           fsr2h	equ	0xFDA
 11119                           fsr2l	equ	0xFD9
 11120                           status	equ	0xFD8
 11121                           
 11122 ;; *************** function _drawtext *****************
 11123 ;; Defined at:
 11124 ;;		line 422 in file "ST7735_TFT.c"
 11125 ;; Parameters:    Size  Location     Type
 11126 ;;  x               1    wreg     unsigned char 
 11127 ;;  y               1   56[COMRAM] unsigned char 
 11128 ;;  _text           2   57[COMRAM] PTR unsigned char 
 11129 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11130 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11131 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11132 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11133 ;;		 -> Timing_Txt(23), 
 11134 ;;  color           2   59[COMRAM] unsigned int 
 11135 ;;  bg              2   61[COMRAM] unsigned int 
 11136 ;;  size            1   63[COMRAM] unsigned char 
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;  x               1   66[COMRAM] unsigned char 
 11139 ;;  i               2   69[COMRAM] unsigned int 
 11140 ;;  textsize        2   67[COMRAM] unsigned int 
 11141 ;;  cursor_x        1   72[COMRAM] unsigned char 
 11142 ;;  cursor_y        1   71[COMRAM] unsigned char 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;		None               void
 11145 ;; Registers used:
 11146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11152 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11153 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11154 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11155 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11156 ;;Total ram usage:       17 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    9
 11159 ;; This function calls:
 11160 ;;		_drawChar
 11161 ;;		_strlen
 11162 ;; This function is called by:
 11163 ;;		_Initialize_Screen
 11164 ;;		_Update_Screen
 11165 ;;		_Initialize_Setup_Fan_Screen
 11166 ;;		_Update_Setup_Fan_Screen
 11167 ;;		_Initialize_Setup_Time_Screen
 11168 ;;		_Update_Setup_Time_Screen
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           	psect	text45
 11173  0035A2                     __ptext45:
 11174                           	opt stack 0
 11175  0035A2                     _drawtext:
 11176                           	opt stack 20
 11177                           
 11178                           ;incstack = 0
 11179                           ;drawtext@x stored from wreg
 11180  0035A2  6E43               	movwf	drawtext@x,c
 11181                           
 11182                           ;ST7735_TFT.c: 424: unsigned char cursor_x, cursor_y;
 11183                           ;ST7735_TFT.c: 425: unsigned int textsize, i;
 11184                           ;ST7735_TFT.c: 426: cursor_x = x, cursor_y = y;
 11185  0035A4  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 11186  0035A8  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 11187                           
 11188                           ;ST7735_TFT.c: 427: textsize = strlen(_text);
 11189  0035AC  C03A  F011         	movff	drawtext@_text,strlen@s
 11190  0035B0  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 11191  0035B4  ECA5  F023         	call	_strlen	;wreg free
 11192  0035B8  C011  F044         	movff	?_strlen,drawtext@textsize
 11193  0035BC  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 11194                           
 11195                           ;ST7735_TFT.c: 428: for(i = 0; i < textsize; i++){
 11196  0035C0  0E00               	movlw	0
 11197  0035C2  6E47               	movwf	drawtext@i+1,c
 11198  0035C4  0E00               	movlw	0
 11199  0035C6  6E46               	movwf	drawtext@i,c
 11200  0035C8  D056               	goto	l9390
 11201  0035CA                     l9364:
 11202                           
 11203                           ;ST7735_TFT.c: 429: if(wrap && ((cursor_x + size * 5) > 128)){
 11204  0035CA  0100               	movlb	0	; () banked
 11205  0035CC  51DE               	movf	_wrap& (0+255),w,b
 11206  0035CE  0100               	movlb	0	; () banked
 11207  0035D0  B4D8               	btfsc	status,2,c
 11208  0035D2  D02C               	goto	l9380
 11209                           
 11210                           ; BSR set to: 0
 11211  0035D4  5040               	movf	drawtext@size,w,c
 11212  0035D6  0D05               	mullw	5
 11213  0035D8  5049               	movf	drawtext@cursor_x,w,c
 11214  0035DA  6E41               	movwf	??_drawtext& (0+255),c
 11215  0035DC  6A42               	clrf	(??_drawtext+1)& (0+255),c
 11216  0035DE  50F3               	movf	prodl,w,c
 11217  0035E0  2641               	addwf	??_drawtext,f,c
 11218  0035E2  50F4               	movf	prodh,w,c
 11219  0035E4  2242               	addwfc	??_drawtext+1,f,c
 11220  0035E6  BE42               	btfsc	??_drawtext+1,7,c
 11221  0035E8  D021               	goto	l9380
 11222  0035EA  5042               	movf	??_drawtext+1,w,c
 11223  0035EC  E104               	bnz	u8260
 11224  0035EE  0E81               	movlw	129
 11225  0035F0  5C41               	subwf	??_drawtext,w,c
 11226  0035F2  A0D8               	btfss	status,0,c
 11227  0035F4  D01B               	goto	l9380
 11228  0035F6                     u8260:
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;ST7735_TFT.c: 430: cursor_x = 0;
 11232  0035F6  0E00               	movlw	0
 11233  0035F8  6E49               	movwf	drawtext@cursor_x,c
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;ST7735_TFT.c: 431: cursor_y = cursor_y + size * 7 + 3 ;
 11237  0035FA  5040               	movf	drawtext@size,w,c
 11238  0035FC  0D07               	mullw	7
 11239  0035FE  50F3               	movf	prodl,w,c
 11240  003600  2448               	addwf	drawtext@cursor_y,w,c
 11241  003602  0F03               	addlw	3
 11242  003604  6E48               	movwf	drawtext@cursor_y,c
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;ST7735_TFT.c: 432: if(cursor_y > 160) cursor_y = 160;
 11246  003606  0EA0               	movlw	160
 11247  003608  6448               	cpfsgt	drawtext@cursor_y,c
 11248  00360A  D003               	goto	l9376
 11249                           
 11250                           ; BSR set to: 0
 11251  00360C  0EA0               	movlw	160
 11252  00360E  6E48               	movwf	drawtext@cursor_y,c
 11253  003610  D000               	goto	l9376
 11254  003612                     l9376:
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;ST7735_TFT.c: 433: if(_text[i] == 0x20) goto _skip; }
 11258  003612  5046               	movf	drawtext@i,w,c
 11259  003614  243A               	addwf	drawtext@_text,w,c
 11260  003616  6ED9               	movwf	fsr2l,c
 11261  003618  5047               	movf	drawtext@i+1,w,c
 11262  00361A  203B               	addwfc	drawtext@_text+1,w,c
 11263  00361C  6EDA               	movwf	fsr2h,c
 11264  00361E  0E20               	movlw	32
 11265  003620  18DE               	xorwf	postinc2,w,c
 11266  003622  B4D8               	btfsc	status,2,c
 11267  003624  D025               	goto	l9388
 11268  003626  D002               	goto	l9380
 11269                           
 11270                           ; BSR set to: 0
 11271  003628  D023               	goto	l9388
 11272                           
 11273                           ; BSR set to: 0
 11274  00362A  D000               	goto	l9380
 11275  00362C                     l9380:
 11276                           
 11277                           ; BSR set to: 0
 11278                           ;ST7735_TFT.c: 434: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 11279  00362C  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 11280  003630  5046               	movf	drawtext@i,w,c
 11281  003632  243A               	addwf	drawtext@_text,w,c
 11282  003634  6ED9               	movwf	fsr2l,c
 11283  003636  5047               	movf	drawtext@i+1,w,c
 11284  003638  203B               	addwfc	drawtext@_text+1,w,c
 11285  00363A  6EDA               	movwf	fsr2h,c
 11286  00363C  50DF               	movf	indf2,w,c
 11287  00363E  6E2F               	movwf	drawChar@c,c
 11288  003640  C03C  F030         	movff	drawtext@color,drawChar@color
 11289  003644  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 11290  003648  C03E  F032         	movff	drawtext@bg,drawChar@bg
 11291  00364C  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 11292  003650  C040  F034         	movff	drawtext@size,drawChar@size
 11293  003654  5049               	movf	drawtext@cursor_x,w,c
 11294  003656  EC15  F016         	call	_drawChar
 11295                           
 11296                           ;ST7735_TFT.c: 435: cursor_x = cursor_x + size * 6;
 11297  00365A  5040               	movf	drawtext@size,w,c
 11298  00365C  0D06               	mullw	6
 11299  00365E  50F3               	movf	prodl,w,c
 11300  003660  2449               	addwf	drawtext@cursor_x,w,c
 11301  003662  6E49               	movwf	drawtext@cursor_x,c
 11302                           
 11303                           ;ST7735_TFT.c: 436: if(cursor_x > 128) cursor_x = 128;
 11304  003664  0E80               	movlw	128
 11305  003666  6449               	cpfsgt	drawtext@cursor_x,c
 11306  003668  D003               	goto	l9388
 11307  00366A  0E80               	movlw	128
 11308  00366C  6E49               	movwf	drawtext@cursor_x,c
 11309  00366E  D000               	goto	l9388
 11310  003670                     l9388:
 11311  003670  4A46               	infsnz	drawtext@i,f,c
 11312  003672  2A47               	incf	drawtext@i+1,f,c
 11313  003674  D000               	goto	l9390
 11314  003676                     l9390:
 11315  003676  5044               	movf	drawtext@textsize,w,c
 11316  003678  5C46               	subwf	drawtext@i,w,c
 11317  00367A  5045               	movf	drawtext@textsize+1,w,c
 11318  00367C  5847               	subwfb	drawtext@i+1,w,c
 11319  00367E  A0D8               	btfss	status,0,c
 11320  003680  D7A4               	goto	l9364
 11321  003682  0012               	return		;funcret
 11322  003684                     __end_of_drawtext:
 11323                           	opt stack 0
 11324                           tblptru	equ	0xFF8
 11325                           tblptrh	equ	0xFF7
 11326                           tblptrl	equ	0xFF6
 11327                           tablat	equ	0xFF5
 11328                           prodh	equ	0xFF4
 11329                           prodl	equ	0xFF3
 11330                           intcon	equ	0xFF2
 11331                           intcon2	equ	0xFF1
 11332                           intcon3	equ	0xFF0
 11333                           postinc0	equ	0xFEE
 11334                           wreg	equ	0xFE8
 11335                           postdec1	equ	0xFE5
 11336                           plusw1	equ	0xFE3
 11337                           fsr1l	equ	0xFE1
 11338                           indf2	equ	0xFDF
 11339                           postinc2	equ	0xFDE
 11340                           plusw2	equ	0xFDB
 11341                           fsr2h	equ	0xFDA
 11342                           fsr2l	equ	0xFD9
 11343                           status	equ	0xFD8
 11344                           
 11345 ;; *************** function _strlen *****************
 11346 ;; Defined at:
 11347 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;  s               2   16[COMRAM] PTR const unsigned char 
 11350 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11351 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11352 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11353 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11354 ;;		 -> Timing_Txt(23), 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 11357 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11358 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11359 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11360 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11361 ;;		 -> Timing_Txt(23), 
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  2   16[COMRAM] unsigned int 
 11364 ;; Registers used:
 11365 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11371 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11372 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11373 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11374 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11375 ;;Total ram usage:        6 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    3
 11378 ;; This function calls:
 11379 ;;		Nothing
 11380 ;; This function is called by:
 11381 ;;		_drawtext
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           	psect	text46
 11386  00474A                     __ptext46:
 11387                           	opt stack 0
 11388  00474A                     _strlen:
 11389                           	opt stack 25
 11390                           
 11391                           ;incstack = 0
 11392  00474A  C011  F015         	movff	strlen@s,strlen@cp
 11393  00474E  C012  F016         	movff	strlen@s+1,strlen@cp+1
 11394  004752  D003               	goto	l5752
 11395  004754                     l5750:
 11396  004754  4A15               	infsnz	strlen@cp,f,c
 11397  004756  2A16               	incf	strlen@cp+1,f,c
 11398  004758  D000               	goto	l5752
 11399  00475A                     l5752:
 11400  00475A  C015  FFD9         	movff	strlen@cp,fsr2l
 11401  00475E  C016  FFDA         	movff	strlen@cp+1,fsr2h
 11402  004762  50DF               	movf	indf2,w,c
 11403  004764  A4D8               	btfss	status,2,c
 11404  004766  D7F6               	goto	l5750
 11405  004768  C011  F013         	movff	strlen@s,??_strlen
 11406  00476C  C012  F014         	movff	strlen@s+1,??_strlen+1
 11407  004770  1E13               	comf	??_strlen,f,c
 11408  004772  1E14               	comf	??_strlen+1,f,c
 11409  004774  4A13               	infsnz	??_strlen,f,c
 11410  004776  2A14               	incf	??_strlen+1,f,c
 11411  004778  5015               	movf	strlen@cp,w,c
 11412  00477A  2413               	addwf	??_strlen,w,c
 11413  00477C  6E11               	movwf	?_strlen,c
 11414  00477E  5016               	movf	strlen@cp+1,w,c
 11415  004780  2014               	addwfc	??_strlen+1,w,c
 11416  004782  6E12               	movwf	?_strlen+1,c
 11417  004784  D000               	goto	l2102
 11418  004786                     l2102:
 11419  004786  0012               	return		;funcret
 11420  004788                     __end_of_strlen:
 11421                           	opt stack 0
 11422                           tblptru	equ	0xFF8
 11423                           tblptrh	equ	0xFF7
 11424                           tblptrl	equ	0xFF6
 11425                           tablat	equ	0xFF5
 11426                           prodh	equ	0xFF4
 11427                           prodl	equ	0xFF3
 11428                           intcon	equ	0xFF2
 11429                           intcon2	equ	0xFF1
 11430                           intcon3	equ	0xFF0
 11431                           postinc0	equ	0xFEE
 11432                           wreg	equ	0xFE8
 11433                           postdec1	equ	0xFE5
 11434                           plusw1	equ	0xFE3
 11435                           fsr1l	equ	0xFE1
 11436                           indf2	equ	0xFDF
 11437                           postinc2	equ	0xFDE
 11438                           plusw2	equ	0xFDB
 11439                           fsr2h	equ	0xFDA
 11440                           fsr2l	equ	0xFD9
 11441                           status	equ	0xFD8
 11442                           
 11443 ;; *************** function _drawChar *****************
 11444 ;; Defined at:
 11445 ;;		line 395 in file "ST7735_TFT.c"
 11446 ;; Parameters:    Size  Location     Type
 11447 ;;  x               1    wreg     unsigned char 
 11448 ;;  y               1   45[COMRAM] unsigned char 
 11449 ;;  c               1   46[COMRAM] unsigned char 
 11450 ;;  color           2   47[COMRAM] unsigned int 
 11451 ;;  bg              2   49[COMRAM] unsigned int 
 11452 ;;  size            1   51[COMRAM] unsigned char 
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;  x               1   53[COMRAM] unsigned char 
 11455 ;;  line            1   52[COMRAM] unsigned char 
 11456 ;;  i               1   55[COMRAM] unsigned char 
 11457 ;;  j               1   54[COMRAM] unsigned char 
 11458 ;; Return value:  Size  Location     Type
 11459 ;;		None               void
 11460 ;; Registers used:
 11461 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11462 ;; Tracked objects:
 11463 ;;		On entry : 0/0
 11464 ;;		On exit  : 0/0
 11465 ;;		Unchanged: 0/0
 11466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11467 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11468 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11470 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11471 ;;Total ram usage:       11 bytes
 11472 ;; Hardware stack levels used:    1
 11473 ;; Hardware stack levels required when called:    8
 11474 ;; This function calls:
 11475 ;;		___wmul
 11476 ;;		_drawPixel
 11477 ;;		_fillRect
 11478 ;; This function is called by:
 11479 ;;		_drawtext
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           	psect	text47
 11484  002C2A                     __ptext47:
 11485                           	opt stack 0
 11486  002C2A                     _drawChar:
 11487                           	opt stack 20
 11488                           
 11489                           ;incstack = 0
 11490                           ;drawChar@x stored from wreg
 11491  002C2A  6E36               	movwf	drawChar@x,c
 11492                           
 11493                           ;ST7735_TFT.c: 397: char i, j;
 11494                           ;ST7735_TFT.c: 398: if((x >= 128) || (y >= 160))
 11495  002C2C  0E80               	movlw	128
 11496  002C2E  6036               	cpfslt	drawChar@x,c
 11497  002C30  D0A6               	goto	l274
 11498  002C32  0E9F               	movlw	159
 11499  002C34  642E               	cpfsgt	drawChar@y,c
 11500  002C36  D001               	goto	l8694
 11501                           
 11502                           ;ST7735_TFT.c: 399: return;
 11503  002C38  D0A2               	goto	l274
 11504  002C3A                     l8694:
 11505                           
 11506                           ;ST7735_TFT.c: 400: if(size < 1) size = 1;
 11507  002C3A  5034               	movf	drawChar@size,w,c
 11508  002C3C  A4D8               	btfss	status,2,c
 11509  002C3E  D003               	goto	l8698
 11510  002C40  0E01               	movlw	1
 11511  002C42  6E34               	movwf	drawChar@size,c
 11512  002C44  D000               	goto	l8698
 11513  002C46                     l8698:
 11514                           
 11515                           ;ST7735_TFT.c: 401: if((c < ' ') || (c > '~'))
 11516  002C46  0E1F               	movlw	31
 11517  002C48  642F               	cpfsgt	drawChar@c,c
 11518  002C4A  D004               	goto	l8702
 11519  002C4C  0E7E               	movlw	126
 11520  002C4E  642F               	cpfsgt	drawChar@c,c
 11521  002C50  D003               	goto	l276
 11522  002C52  D000               	goto	l8702
 11523  002C54                     l8702:
 11524                           
 11525                           ;ST7735_TFT.c: 402: c = '?';
 11526  002C54  0E3F               	movlw	63
 11527  002C56  6E2F               	movwf	drawChar@c,c
 11528  002C58                     l276:
 11529                           
 11530                           ;ST7735_TFT.c: 403: for(i=0; i<5; i++ ) {
 11531  002C58  0E00               	movlw	0
 11532  002C5A  6E38               	movwf	drawChar@i,c
 11533  002C5C                     l8704:
 11534  002C5C  0E04               	movlw	4
 11535  002C5E  6438               	cpfsgt	drawChar@i,c
 11536  002C60  D001               	goto	l8708
 11537  002C62  D08D               	goto	l274
 11538  002C64                     l8708:
 11539                           
 11540                           ;ST7735_TFT.c: 404: unsigned char line;
 11541                           ;ST7735_TFT.c: 405: if(c < 'S')
 11542  002C64  0E53               	movlw	83
 11543  002C66  602F               	cpfslt	drawChar@c,c
 11544  002C68  D015               	goto	l8712
 11545                           
 11546                           ;ST7735_TFT.c: 406: line = font[(c - 32)*5 + i];
 11547  002C6A  0EE0               	movlw	224
 11548  002C6C  242F               	addwf	drawChar@c,w,c
 11549  002C6E  6E11               	movwf	___wmul@multiplier,c
 11550  002C70  6A12               	clrf	___wmul@multiplier+1,c
 11551  002C72  0EFF               	movlw	255
 11552  002C74  2212               	addwfc	___wmul@multiplier+1,f,c
 11553  002C76  0E00               	movlw	0
 11554  002C78  6E14               	movwf	___wmul@multiplicand+1,c
 11555  002C7A  0E05               	movlw	5
 11556  002C7C  6E13               	movwf	___wmul@multiplicand,c
 11557  002C7E  ECD5  F024         	call	___wmul	;wreg free
 11558  002C82  5038               	movf	drawChar@i,w,c
 11559  002C84  2611               	addwf	?___wmul,f,c
 11560  002C86  0E00               	movlw	0
 11561  002C88  2212               	addwfc	?___wmul+1,f,c
 11562  002C8A  0EC1               	movlw	low _font
 11563  002C8C  2411               	addwf	?___wmul,w,c
 11564  002C8E  6EF6               	movwf	tblptrl,c
 11565  002C90  0EFB               	movlw	high _font
 11566  002C92  D014               	goto	L8
 11567  002C94                     l8712:
 11568                           
 11569                           ;ST7735_TFT.c: 407: else
 11570                           ;ST7735_TFT.c: 408: line = font2[(c - 'S')*5 + i];
 11571  002C94  0EAD               	movlw	173
 11572  002C96  242F               	addwf	drawChar@c,w,c
 11573  002C98  6E11               	movwf	___wmul@multiplier,c
 11574  002C9A  6A12               	clrf	___wmul@multiplier+1,c
 11575  002C9C  0EFF               	movlw	255
 11576  002C9E  2212               	addwfc	___wmul@multiplier+1,f,c
 11577  002CA0  0E00               	movlw	0
 11578  002CA2  6E14               	movwf	___wmul@multiplicand+1,c
 11579  002CA4  0E05               	movlw	5
 11580  002CA6  6E13               	movwf	___wmul@multiplicand,c
 11581  002CA8  ECD5  F024         	call	___wmul	;wreg free
 11582  002CAC  5038               	movf	drawChar@i,w,c
 11583  002CAE  2611               	addwf	?___wmul,f,c
 11584  002CB0  0E00               	movlw	0
 11585  002CB2  2212               	addwfc	?___wmul+1,f,c
 11586  002CB4  0EC0               	movlw	low _font2
 11587  002CB6  2411               	addwf	?___wmul,w,c
 11588  002CB8  6EF6               	movwf	tblptrl,c
 11589  002CBA  0EFC               	movlw	high _font2
 11590  002CBC                     L8:
 11591  002CBC  2012               	addwfc	?___wmul+1,w,c
 11592  002CBE  6EF7               	movwf	tblptrh,c
 11593  002CC0                     	if	0	;There are less than 3 active tblptr bytes
 11594  002CC0                     	endif
 11595  002CC0  0008               	tblrd		*
 11596  002CC2  CFF5 F035          	movff	tablat,drawChar@line
 11597  002CC6  D000               	goto	l8714
 11598  002CC8                     l8714:
 11599                           
 11600                           ;ST7735_TFT.c: 409: for(j=0; j<7; j++, line >>= 1) {
 11601  002CC8  0E00               	movlw	0
 11602  002CCA  6E37               	movwf	drawChar@j,c
 11603  002CCC                     l8716:
 11604  002CCC  0E06               	movlw	6
 11605  002CCE  6437               	cpfsgt	drawChar@j,c
 11606  002CD0  D001               	goto	l283
 11607  002CD2  D053               	goto	l8740
 11608  002CD4                     l283:
 11609                           
 11610                           ;ST7735_TFT.c: 410: if(line & 0x01) {
 11611  002CD4  A035               	btfss	drawChar@line,0,c
 11612  002CD6  D023               	goto	l8726
 11613                           
 11614                           ;ST7735_TFT.c: 411: if(size == 1) drawPixel(x+i, y+j, color);
 11615  002CD8  0434               	decf	drawChar@size,w,c
 11616  002CDA  A4D8               	btfss	status,2,c
 11617  002CDC  D00C               	goto	l8724
 11618  002CDE  502E               	movf	drawChar@y,w,c
 11619  002CE0  2437               	addwf	drawChar@j,w,c
 11620  002CE2  6E18               	movwf	drawPixel@y,c
 11621  002CE4  C030  F019         	movff	drawChar@color,drawPixel@color
 11622  002CE8  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 11623  002CEC  5036               	movf	drawChar@x,w,c
 11624  002CEE  2438               	addwf	drawChar@i,w,c
 11625  002CF0  EC50  F024         	call	_drawPixel
 11626  002CF4  D03E               	goto	l8734
 11627  002CF6                     l8724:
 11628                           
 11629                           ;ST7735_TFT.c: 412: else fillRect(x+(i*size), y+(j*size), size, size, color);
 11630  002CF6  5037               	movf	drawChar@j,w,c
 11631  002CF8  0234               	mulwf	drawChar@size,c
 11632  002CFA  50F3               	movf	prodl,w,c
 11633  002CFC  242E               	addwf	drawChar@y,w,c
 11634  002CFE  6E23               	movwf	fillRect@y,c
 11635  002D00  C034  F024         	movff	drawChar@size,fillRect@w
 11636  002D04  C034  F025         	movff	drawChar@size,fillRect@h
 11637  002D08  C030  F026         	movff	drawChar@color,fillRect@color
 11638  002D0C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 11639  002D10  5038               	movf	drawChar@i,w,c
 11640  002D12  0234               	mulwf	drawChar@size,c
 11641  002D14  50F3               	movf	prodl,w,c
 11642  002D16  2436               	addwf	drawChar@x,w,c
 11643  002D18  ECFF  F022         	call	_fillRect
 11644                           
 11645                           ;ST7735_TFT.c: 413: }
 11646  002D1C  D02A               	goto	l8734
 11647  002D1E                     l8726:
 11648                           
 11649                           ;ST7735_TFT.c: 414: else if(bg != color) {
 11650  002D1E  5030               	movf	drawChar@color,w,c
 11651  002D20  1832               	xorwf	drawChar@bg,w,c
 11652  002D22  E104               	bnz	u7230
 11653  002D24  5031               	movf	drawChar@color+1,w,c
 11654  002D26  1833               	xorwf	drawChar@bg+1,w,c
 11655  002D28  B4D8               	btfsc	status,2,c
 11656  002D2A  D023               	goto	l8734
 11657  002D2C                     u7230:
 11658                           
 11659                           ;ST7735_TFT.c: 415: if(size == 1) drawPixel(x+i, y+j, bg);
 11660  002D2C  0434               	decf	drawChar@size,w,c
 11661  002D2E  A4D8               	btfss	status,2,c
 11662  002D30  D00C               	goto	l8732
 11663  002D32  502E               	movf	drawChar@y,w,c
 11664  002D34  2437               	addwf	drawChar@j,w,c
 11665  002D36  6E18               	movwf	drawPixel@y,c
 11666  002D38  C032  F019         	movff	drawChar@bg,drawPixel@color
 11667  002D3C  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 11668  002D40  5036               	movf	drawChar@x,w,c
 11669  002D42  2438               	addwf	drawChar@i,w,c
 11670  002D44  EC50  F024         	call	_drawPixel
 11671  002D48  D014               	goto	l8734
 11672  002D4A                     l8732:
 11673                           
 11674                           ;ST7735_TFT.c: 416: else fillRect(x+i*size, y+j*size, size, size, bg);
 11675  002D4A  5037               	movf	drawChar@j,w,c
 11676  002D4C  0234               	mulwf	drawChar@size,c
 11677  002D4E  50F3               	movf	prodl,w,c
 11678  002D50  242E               	addwf	drawChar@y,w,c
 11679  002D52  6E23               	movwf	fillRect@y,c
 11680  002D54  C034  F024         	movff	drawChar@size,fillRect@w
 11681  002D58  C034  F025         	movff	drawChar@size,fillRect@h
 11682  002D5C  C032  F026         	movff	drawChar@bg,fillRect@color
 11683  002D60  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 11684  002D64  5038               	movf	drawChar@i,w,c
 11685  002D66  0234               	mulwf	drawChar@size,c
 11686  002D68  50F3               	movf	prodl,w,c
 11687  002D6A  2436               	addwf	drawChar@x,w,c
 11688  002D6C  ECFF  F022         	call	_fillRect
 11689  002D70  D000               	goto	l8734
 11690  002D72                     l8734:
 11691  002D72  2A37               	incf	drawChar@j,f,c
 11692  002D74  90D8               	bcf	status,0,c
 11693  002D76  3235               	rrcf	drawChar@line,f,c
 11694  002D78  D7A9               	goto	l8716
 11695  002D7A                     l8740:
 11696  002D7A  2A38               	incf	drawChar@i,f,c
 11697  002D7C  D76F               	goto	l8704
 11698  002D7E                     l274:
 11699  002D7E  0012               	return		;funcret
 11700  002D80                     __end_of_drawChar:
 11701                           	opt stack 0
 11702                           tblptru	equ	0xFF8
 11703                           tblptrh	equ	0xFF7
 11704                           tblptrl	equ	0xFF6
 11705                           tablat	equ	0xFF5
 11706                           prodh	equ	0xFF4
 11707                           prodl	equ	0xFF3
 11708                           intcon	equ	0xFF2
 11709                           intcon2	equ	0xFF1
 11710                           intcon3	equ	0xFF0
 11711                           postinc0	equ	0xFEE
 11712                           wreg	equ	0xFE8
 11713                           postdec1	equ	0xFE5
 11714                           plusw1	equ	0xFE3
 11715                           fsr1l	equ	0xFE1
 11716                           indf2	equ	0xFDF
 11717                           postinc2	equ	0xFDE
 11718                           plusw2	equ	0xFDB
 11719                           fsr2h	equ	0xFDA
 11720                           fsr2l	equ	0xFD9
 11721                           status	equ	0xFD8
 11722                           
 11723 ;; *************** function _fillRect *****************
 11724 ;; Defined at:
 11725 ;;		line 385 in file "ST7735_TFT.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;  x               1    wreg     unsigned char 
 11728 ;;  y               1   34[COMRAM] unsigned char 
 11729 ;;  w               1   35[COMRAM] unsigned char 
 11730 ;;  h               1   36[COMRAM] unsigned char 
 11731 ;;  color           2   37[COMRAM] unsigned int 
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;  x               1   42[COMRAM] unsigned char 
 11734 ;;  i               2   43[COMRAM] int 
 11735 ;; Return value:  Size  Location     Type
 11736 ;;		None               void
 11737 ;; Registers used:
 11738 ;;		wreg, status,2, status,0, cstack
 11739 ;; Tracked objects:
 11740 ;;		On entry : 0/0
 11741 ;;		On exit  : 0/0
 11742 ;;		Unchanged: 0/0
 11743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11744 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11745 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;Total ram usage:       11 bytes
 11749 ;; Hardware stack levels used:    1
 11750 ;; Hardware stack levels required when called:    7
 11751 ;; This function calls:
 11752 ;;		_drawFastVLine
 11753 ;; This function is called by:
 11754 ;;		_drawChar
 11755 ;;		_Initialize_Setup_Time_Screen
 11756 ;;		_Update_Setup_Screen_Cursor_Forward
 11757 ;;		_Update_Setup_Screen_Cursor_Backward
 11758 ;; This function uses a non-reentrant model
 11759 ;;
 11760                           
 11761                           	psect	text48
 11762  0045FE                     __ptext48:
 11763                           	opt stack 0
 11764  0045FE                     _fillRect:
 11765                           	opt stack 20
 11766                           
 11767                           ;incstack = 0
 11768                           ;fillRect@x stored from wreg
 11769  0045FE  6E2B               	movwf	fillRect@x,c
 11770                           
 11771                           ;ST7735_TFT.c: 387: signed int i;
 11772                           ;ST7735_TFT.c: 389: for (i = x; i < x + w; i++)
 11773  004600  C02B  F02C         	movff	fillRect@x,fillRect@i
 11774  004604  6A2D               	clrf	fillRect@i+1,c
 11775  004606  D00E               	goto	l5390
 11776  004608                     l5386:
 11777                           
 11778                           ;ST7735_TFT.c: 390: {
 11779                           ;ST7735_TFT.c: 391: drawFastVLine(i, y, h, color);
 11780  004608  C023  F018         	movff	fillRect@y,drawFastVLine@y
 11781  00460C  C025  F019         	movff	fillRect@h,drawFastVLine@h
 11782  004610  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 11783  004614  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 11784  004618  502C               	movf	fillRect@i,w,c
 11785  00461A  EC9B  F01F         	call	_drawFastVLine
 11786  00461E  4A2C               	infsnz	fillRect@i,f,c
 11787  004620  2A2D               	incf	fillRect@i+1,f,c
 11788  004622  D000               	goto	l5390
 11789  004624                     l5390:
 11790  004624  5024               	movf	fillRect@w,w,c
 11791  004626  C02B  F028         	movff	fillRect@x,??_fillRect
 11792  00462A  6A29               	clrf	(??_fillRect+1)& (0+255),c
 11793  00462C  2628               	addwf	??_fillRect,f,c
 11794  00462E  0E00               	movlw	0
 11795  004630  2229               	addwfc	??_fillRect+1,f,c
 11796  004632  5028               	movf	??_fillRect,w,c
 11797  004634  5C2C               	subwf	fillRect@i,w,c
 11798  004636  502D               	movf	fillRect@i+1,w,c
 11799  004638  0A80               	xorlw	128
 11800  00463A  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 11801  00463C  5029               	movf	??_fillRect+1,w,c
 11802  00463E  0A80               	xorlw	128
 11803  004640  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 11804  004642  A0D8               	btfss	status,0,c
 11805  004644  D7E1               	goto	l5386
 11806  004646  0012               	return		;funcret
 11807  004648                     __end_of_fillRect:
 11808                           	opt stack 0
 11809                           tblptru	equ	0xFF8
 11810                           tblptrh	equ	0xFF7
 11811                           tblptrl	equ	0xFF6
 11812                           tablat	equ	0xFF5
 11813                           prodh	equ	0xFF4
 11814                           prodl	equ	0xFF3
 11815                           intcon	equ	0xFF2
 11816                           intcon2	equ	0xFF1
 11817                           intcon3	equ	0xFF0
 11818                           postinc0	equ	0xFEE
 11819                           wreg	equ	0xFE8
 11820                           postdec1	equ	0xFE5
 11821                           plusw1	equ	0xFE3
 11822                           fsr1l	equ	0xFE1
 11823                           indf2	equ	0xFDF
 11824                           postinc2	equ	0xFDE
 11825                           plusw2	equ	0xFDB
 11826                           fsr2h	equ	0xFDA
 11827                           fsr2l	equ	0xFD9
 11828                           status	equ	0xFD8
 11829                           
 11830 ;; *************** function _drawFastVLine *****************
 11831 ;; Defined at:
 11832 ;;		line 364 in file "ST7735_TFT.c"
 11833 ;; Parameters:    Size  Location     Type
 11834 ;;  x               1    wreg     unsigned char 
 11835 ;;  y               1   23[COMRAM] unsigned char 
 11836 ;;  h               1   24[COMRAM] unsigned char 
 11837 ;;  color           2   25[COMRAM] unsigned int 
 11838 ;; Auto vars:     Size  Location     Type
 11839 ;;  x               1   33[COMRAM] unsigned char 
 11840 ;;  lo              1   32[COMRAM] unsigned char 
 11841 ;;  hi              1   31[COMRAM] unsigned char 
 11842 ;; Return value:  Size  Location     Type
 11843 ;;		None               void
 11844 ;; Registers used:
 11845 ;;		wreg, status,2, status,0, cstack
 11846 ;; Tracked objects:
 11847 ;;		On entry : 0/0
 11848 ;;		On exit  : 0/0
 11849 ;;		Unchanged: 0/0
 11850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11851 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11852 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;Total ram usage:       11 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:    6
 11858 ;; This function calls:
 11859 ;;		_setAddrWindow
 11860 ;;		_spiwrite
 11861 ;; This function is called by:
 11862 ;;		_fillRect
 11863 ;;		_fillCircleHelper
 11864 ;;		_fillCircle
 11865 ;;		_drawRect
 11866 ;; This function uses a non-reentrant model
 11867 ;;
 11868                           
 11869                           	psect	text49
 11870  003F36                     __ptext49:
 11871                           	opt stack 0
 11872  003F36                     _drawFastVLine:
 11873                           	opt stack 20
 11874                           
 11875                           ;incstack = 0
 11876                           ;drawFastVLine@x stored from wreg
 11877  003F36  6E22               	movwf	drawFastVLine@x,c
 11878                           
 11879                           ;ST7735_TFT.c: 366: unsigned char hi, lo;
 11880                           ;ST7735_TFT.c: 367: if((x >= 128) || (y >= 160))
 11881  003F38  0E80               	movlw	128
 11882  003F3A  6022               	cpfslt	drawFastVLine@x,c
 11883  003F3C  D03F               	goto	l258
 11884  003F3E  0E9F               	movlw	159
 11885  003F40  6418               	cpfsgt	drawFastVLine@y,c
 11886  003F42  D001               	goto	l5290
 11887                           
 11888                           ;ST7735_TFT.c: 368: return;
 11889  003F44  D03B               	goto	l258
 11890  003F46                     l5290:
 11891                           
 11892                           ;ST7735_TFT.c: 369: if((y + h - 1) >= 160)
 11893  003F46  0EFF               	movlw	255
 11894  003F48  6E1C               	movwf	??_drawFastVLine& (0+255),c
 11895  003F4A  0EFF               	movlw	255
 11896  003F4C  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 11897  003F4E  5019               	movf	drawFastVLine@h,w,c
 11898  003F50  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 11899  003F54  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 11900  003F56  261E               	addwf	??_drawFastVLine+2,f,c
 11901  003F58  0E00               	movlw	0
 11902  003F5A  221F               	addwfc	??_drawFastVLine+3,f,c
 11903  003F5C  501C               	movf	??_drawFastVLine,w,c
 11904  003F5E  261E               	addwf	??_drawFastVLine+2,f,c
 11905  003F60  501D               	movf	??_drawFastVLine+1,w,c
 11906  003F62  221F               	addwfc	??_drawFastVLine+3,f,c
 11907  003F64  BE1F               	btfsc	??_drawFastVLine+3,7,c
 11908  003F66  D00B               	goto	l5294
 11909  003F68  501F               	movf	??_drawFastVLine+3,w,c
 11910  003F6A  E104               	bnz	u3360
 11911  003F6C  0EA0               	movlw	160
 11912  003F6E  5C1E               	subwf	??_drawFastVLine+2,w,c
 11913  003F70  A0D8               	btfss	status,0,c
 11914  003F72  D005               	goto	l5294
 11915  003F74                     u3360:
 11916                           
 11917                           ;ST7735_TFT.c: 370: h = 160 - y;
 11918  003F74  5018               	movf	drawFastVLine@y,w,c
 11919  003F76  0800               	sublw	0
 11920  003F78  0FA0               	addlw	160
 11921  003F7A  6E19               	movwf	drawFastVLine@h,c
 11922  003F7C  D000               	goto	l5294
 11923  003F7E                     l5294:
 11924                           
 11925                           ;ST7735_TFT.c: 371: hi = color >> 8; lo = color;
 11926  003F7E  501B               	movf	drawFastVLine@color+1,w,c
 11927  003F80  6E20               	movwf	drawFastVLine@hi,c
 11928  003F82  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 11929                           
 11930                           ;ST7735_TFT.c: 372: setAddrWindow(x, y, x, y + h - 1);
 11931  003F86  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 11932  003F8A  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 11933  003F8E  5018               	movf	drawFastVLine@y,w,c
 11934  003F90  2419               	addwf	drawFastVLine@h,w,c
 11935  003F92  6E1C               	movwf	??_drawFastVLine& (0+255),c
 11936  003F94  041C               	decf	??_drawFastVLine,w,c
 11937  003F96  6E16               	movwf	setAddrWindow@y1,c
 11938  003F98  5022               	movf	drawFastVLine@x,w,c
 11939  003F9A  EC38  F022         	call	_setAddrWindow
 11940                           
 11941                           ;ST7735_TFT.c: 373: PORTDbits.RD7 = 1;
 11942  003F9E  8E83               	bsf	3971,7,c	;volatile
 11943                           
 11944                           ;ST7735_TFT.c: 374: PORTCbits.RC4 = 0;
 11945  003FA0  9882               	bcf	3970,4,c	;volatile
 11946                           
 11947                           ;ST7735_TFT.c: 376: while (h--) {
 11948  003FA2  D007               	goto	l5306
 11949  003FA4                     l5304:
 11950                           
 11951                           ;ST7735_TFT.c: 377: spiwrite(hi);
 11952  003FA4  5020               	movf	drawFastVLine@hi,w,c
 11953  003FA6  EC5D  F026         	call	_spiwrite
 11954                           
 11955                           ;ST7735_TFT.c: 378: spiwrite(lo);
 11956  003FAA  5021               	movf	drawFastVLine@lo,w,c
 11957  003FAC  EC5D  F026         	call	_spiwrite
 11958  003FB0  D000               	goto	l5306
 11959  003FB2                     l5306:
 11960  003FB2  0619               	decf	drawFastVLine@h,f,c
 11961  003FB4  2819               	incf	drawFastVLine@h,w,c
 11962  003FB6  A4D8               	btfss	status,2,c
 11963  003FB8  D7F5               	goto	l5304
 11964                           
 11965                           ;ST7735_TFT.c: 379: }
 11966                           ;ST7735_TFT.c: 380: PORTCbits.RC4 = 1;
 11967  003FBA  8882               	bsf	3970,4,c	;volatile
 11968  003FBC                     l258:
 11969  003FBC  0012               	return		;funcret
 11970  003FBE                     __end_of_drawFastVLine:
 11971                           	opt stack 0
 11972                           tblptru	equ	0xFF8
 11973                           tblptrh	equ	0xFF7
 11974                           tblptrl	equ	0xFF6
 11975                           tablat	equ	0xFF5
 11976                           prodh	equ	0xFF4
 11977                           prodl	equ	0xFF3
 11978                           intcon	equ	0xFF2
 11979                           intcon2	equ	0xFF1
 11980                           intcon3	equ	0xFF0
 11981                           postinc0	equ	0xFEE
 11982                           wreg	equ	0xFE8
 11983                           postdec1	equ	0xFE5
 11984                           plusw1	equ	0xFE3
 11985                           fsr1l	equ	0xFE1
 11986                           indf2	equ	0xFDF
 11987                           postinc2	equ	0xFDE
 11988                           plusw2	equ	0xFDB
 11989                           fsr2h	equ	0xFDA
 11990                           fsr2l	equ	0xFD9
 11991                           status	equ	0xFD8
 11992                           
 11993 ;; *************** function _drawPixel *****************
 11994 ;; Defined at:
 11995 ;;		line 355 in file "ST7735_TFT.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;  x               1    wreg     unsigned char 
 11998 ;;  y               1   23[COMRAM] unsigned char 
 11999 ;;  color           2   24[COMRAM] unsigned int 
 12000 ;; Auto vars:     Size  Location     Type
 12001 ;;  x               1   26[COMRAM] unsigned char 
 12002 ;; Return value:  Size  Location     Type
 12003 ;;		None               void
 12004 ;; Registers used:
 12005 ;;		wreg, status,2, status,0, cstack
 12006 ;; Tracked objects:
 12007 ;;		On entry : 0/0
 12008 ;;		On exit  : 0/0
 12009 ;;		Unchanged: 0/0
 12010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12011 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12012 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12014 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12015 ;;Total ram usage:        4 bytes
 12016 ;; Hardware stack levels used:    1
 12017 ;; Hardware stack levels required when called:    6
 12018 ;; This function calls:
 12019 ;;		_setAddrWindow
 12020 ;;		_write_data
 12021 ;; This function is called by:
 12022 ;;		_drawChar
 12023 ;;		_drawCircle
 12024 ;;		_drawCircleHelper
 12025 ;; This function uses a non-reentrant model
 12026 ;;
 12027                           
 12028                           	psect	text50
 12029  0048A0                     __ptext50:
 12030                           	opt stack 0
 12031  0048A0                     _drawPixel:
 12032                           	opt stack 21
 12033                           
 12034                           ;incstack = 0
 12035                           ;drawPixel@x stored from wreg
 12036  0048A0  6E1B               	movwf	drawPixel@x,c
 12037                           
 12038                           ;ST7735_TFT.c: 357: if((x >= 128) || (y >= 160))
 12039  0048A2  0E80               	movlw	128
 12040  0048A4  601B               	cpfslt	drawPixel@x,c
 12041  0048A6  D013               	goto	l252
 12042  0048A8  0E9F               	movlw	159
 12043  0048AA  6418               	cpfsgt	drawPixel@y,c
 12044  0048AC  D001               	goto	l5378
 12045                           
 12046                           ;ST7735_TFT.c: 358: return;
 12047  0048AE  D00F               	goto	l252
 12048  0048B0                     l5378:
 12049                           
 12050                           ;ST7735_TFT.c: 359: setAddrWindow(x,y,x+1,y+1);
 12051  0048B0  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 12052  0048B4  281B               	incf	drawPixel@x,w,c
 12053  0048B6  6E15               	movwf	setAddrWindow@x1,c
 12054  0048B8  2818               	incf	drawPixel@y,w,c
 12055  0048BA  6E16               	movwf	setAddrWindow@y1,c
 12056  0048BC  501B               	movf	drawPixel@x,w,c
 12057  0048BE  EC38  F022         	call	_setAddrWindow
 12058                           
 12059                           ;ST7735_TFT.c: 360: write_data(color >> 8);
 12060  0048C2  501A               	movf	drawPixel@color+1,w,c
 12061  0048C4  ECB8  F026         	call	_write_data
 12062                           
 12063                           ;ST7735_TFT.c: 361: write_data(color & 0xFF);
 12064  0048C8  5019               	movf	drawPixel@color,w,c
 12065  0048CA  ECB8  F026         	call	_write_data
 12066  0048CE                     l252:
 12067  0048CE  0012               	return		;funcret
 12068  0048D0                     __end_of_drawPixel:
 12069                           	opt stack 0
 12070                           tblptru	equ	0xFF8
 12071                           tblptrh	equ	0xFF7
 12072                           tblptrl	equ	0xFF6
 12073                           tablat	equ	0xFF5
 12074                           prodh	equ	0xFF4
 12075                           prodl	equ	0xFF3
 12076                           intcon	equ	0xFF2
 12077                           intcon2	equ	0xFF1
 12078                           intcon3	equ	0xFF0
 12079                           postinc0	equ	0xFEE
 12080                           wreg	equ	0xFE8
 12081                           postdec1	equ	0xFE5
 12082                           plusw1	equ	0xFE3
 12083                           fsr1l	equ	0xFE1
 12084                           indf2	equ	0xFDF
 12085                           postinc2	equ	0xFDE
 12086                           plusw2	equ	0xFDB
 12087                           fsr2h	equ	0xFDA
 12088                           fsr2l	equ	0xFD9
 12089                           status	equ	0xFD8
 12090                           
 12091 ;; *************** function _setAddrWindow *****************
 12092 ;; Defined at:
 12093 ;;		line 340 in file "ST7735_TFT.c"
 12094 ;; Parameters:    Size  Location     Type
 12095 ;;  x0              1    wreg     unsigned char 
 12096 ;;  y0              1   19[COMRAM] unsigned char 
 12097 ;;  x1              1   20[COMRAM] unsigned char 
 12098 ;;  y1              1   21[COMRAM] unsigned char 
 12099 ;; Auto vars:     Size  Location     Type
 12100 ;;  x0              1   22[COMRAM] unsigned char 
 12101 ;; Return value:  Size  Location     Type
 12102 ;;		None               void
 12103 ;; Registers used:
 12104 ;;		wreg, status,2, status,0, cstack
 12105 ;; Tracked objects:
 12106 ;;		On entry : 0/0
 12107 ;;		On exit  : 0/0
 12108 ;;		Unchanged: 0/0
 12109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12110 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12113 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12114 ;;Total ram usage:        4 bytes
 12115 ;; Hardware stack levels used:    1
 12116 ;; Hardware stack levels required when called:    5
 12117 ;; This function calls:
 12118 ;;		_write_command
 12119 ;;		_write_data
 12120 ;; This function is called by:
 12121 ;;		_drawPixel
 12122 ;;		_drawFastVLine
 12123 ;;		_fillRectangle
 12124 ;;		_drawFastHLine
 12125 ;; This function uses a non-reentrant model
 12126 ;;
 12127                           
 12128                           	psect	text51
 12129  004470                     __ptext51:
 12130                           	opt stack 0
 12131  004470                     _setAddrWindow:
 12132                           	opt stack 20
 12133                           
 12134                           ;incstack = 0
 12135                           ;setAddrWindow@x0 stored from wreg
 12136  004470  6E17               	movwf	setAddrWindow@x0,c
 12137                           
 12138                           ;ST7735_TFT.c: 342: write_command(0x2A);
 12139  004472  0E2A               	movlw	42
 12140  004474  ECC0  F026         	call	_write_command
 12141                           
 12142                           ;ST7735_TFT.c: 343: write_data(0);
 12143  004478  0E00               	movlw	0
 12144  00447A  ECB8  F026         	call	_write_data
 12145                           
 12146                           ;ST7735_TFT.c: 344: write_data(x0 + colstart);
 12147  00447E  5017               	movf	setAddrWindow@x0,w,c
 12148  004480  0100               	movlb	0	; () banked
 12149  004482  25CE               	addwf	_colstart& (0+255),w,b
 12150  004484  ECB8  F026         	call	_write_data
 12151                           
 12152                           ;ST7735_TFT.c: 345: write_data(0);
 12153  004488  0E00               	movlw	0
 12154  00448A  ECB8  F026         	call	_write_data
 12155                           
 12156                           ;ST7735_TFT.c: 346: write_data(x1 + colstart);
 12157  00448E  5015               	movf	setAddrWindow@x1,w,c
 12158  004490  0100               	movlb	0	; () banked
 12159  004492  25CE               	addwf	_colstart& (0+255),w,b
 12160  004494  ECB8  F026         	call	_write_data
 12161                           
 12162                           ;ST7735_TFT.c: 347: write_command(0x2B);
 12163  004498  0E2B               	movlw	43
 12164  00449A  ECC0  F026         	call	_write_command
 12165                           
 12166                           ;ST7735_TFT.c: 348: write_data(0);
 12167  00449E  0E00               	movlw	0
 12168  0044A0  ECB8  F026         	call	_write_data
 12169                           
 12170                           ;ST7735_TFT.c: 349: write_data(y0 + rowstart);
 12171  0044A4  5014               	movf	setAddrWindow@y0,w,c
 12172  0044A6  0100               	movlb	0	; () banked
 12173  0044A8  25D2               	addwf	_rowstart& (0+255),w,b
 12174  0044AA  ECB8  F026         	call	_write_data
 12175                           
 12176                           ;ST7735_TFT.c: 350: write_data(0);
 12177  0044AE  0E00               	movlw	0
 12178  0044B0  ECB8  F026         	call	_write_data
 12179                           
 12180                           ;ST7735_TFT.c: 351: write_data(y1 + rowstart);
 12181  0044B4  5016               	movf	setAddrWindow@y1,w,c
 12182  0044B6  0100               	movlb	0	; () banked
 12183  0044B8  25D2               	addwf	_rowstart& (0+255),w,b
 12184  0044BA  ECB8  F026         	call	_write_data
 12185                           
 12186                           ;ST7735_TFT.c: 352: write_command(0x2C);
 12187  0044BE  0E2C               	movlw	44
 12188  0044C0  ECC0  F026         	call	_write_command
 12189  0044C4  0012               	return		;funcret
 12190  0044C6                     __end_of_setAddrWindow:
 12191                           	opt stack 0
 12192                           tblptru	equ	0xFF8
 12193                           tblptrh	equ	0xFF7
 12194                           tblptrl	equ	0xFF6
 12195                           tablat	equ	0xFF5
 12196                           prodh	equ	0xFF4
 12197                           prodl	equ	0xFF3
 12198                           intcon	equ	0xFF2
 12199                           intcon2	equ	0xFF1
 12200                           intcon3	equ	0xFF0
 12201                           postinc0	equ	0xFEE
 12202                           wreg	equ	0xFE8
 12203                           postdec1	equ	0xFE5
 12204                           plusw1	equ	0xFE3
 12205                           fsr1l	equ	0xFE1
 12206                           indf2	equ	0xFDF
 12207                           postinc2	equ	0xFDE
 12208                           plusw2	equ	0xFDB
 12209                           fsr2h	equ	0xFDA
 12210                           fsr2l	equ	0xFD9
 12211                           status	equ	0xFD8
 12212                           
 12213 ;; *************** function _write_data *****************
 12214 ;; Defined at:
 12215 ;;		line 157 in file "ST7735_TFT.c"
 12216 ;; Parameters:    Size  Location     Type
 12217 ;;  data_           1    wreg     unsigned char 
 12218 ;; Auto vars:     Size  Location     Type
 12219 ;;  data_           1   18[COMRAM] unsigned char 
 12220 ;; Return value:  Size  Location     Type
 12221 ;;		None               void
 12222 ;; Registers used:
 12223 ;;		wreg, status,2, cstack
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;Total ram usage:        1 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; Hardware stack levels required when called:    4
 12236 ;; This function calls:
 12237 ;;		_spiwrite
 12238 ;; This function is called by:
 12239 ;;		_Rcmd1
 12240 ;;		_Rcmd2red
 12241 ;;		_Rcmd3
 12242 ;;		_setAddrWindow
 12243 ;;		_drawPixel
 12244 ;;		_TFT_GreenTab_Initialize
 12245 ;;		_Bcmd
 12246 ;;		_setScrollDefinition
 12247 ;;		_Rcmd2green
 12248 ;;		_VerticalScroll
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           	psect	text52
 12253  004D70                     __ptext52:
 12254                           	opt stack 0
 12255  004D70                     _write_data:
 12256                           	opt stack 20
 12257                           
 12258                           ;incstack = 0
 12259                           ;write_data@data_ stored from wreg
 12260  004D70  6E13               	movwf	write_data@data_,c
 12261                           
 12262                           ;ST7735_TFT.c: 159: PORTCbits.RC4 = 0;
 12263  004D72  9882               	bcf	3970,4,c	;volatile
 12264                           
 12265                           ;ST7735_TFT.c: 160: PORTDbits.RD7 = 1;
 12266  004D74  8E83               	bsf	3971,7,c	;volatile
 12267                           
 12268                           ;ST7735_TFT.c: 161: spiwrite(data_);
 12269  004D76  5013               	movf	write_data@data_,w,c
 12270  004D78  EC5D  F026         	call	_spiwrite
 12271                           
 12272                           ;ST7735_TFT.c: 162: PORTCbits.RC4 = 1;
 12273  004D7C  8882               	bsf	3970,4,c	;volatile
 12274  004D7E  0012               	return		;funcret
 12275  004D80                     __end_of_write_data:
 12276                           	opt stack 0
 12277                           tblptru	equ	0xFF8
 12278                           tblptrh	equ	0xFF7
 12279                           tblptrl	equ	0xFF6
 12280                           tablat	equ	0xFF5
 12281                           prodh	equ	0xFF4
 12282                           prodl	equ	0xFF3
 12283                           intcon	equ	0xFF2
 12284                           intcon2	equ	0xFF1
 12285                           intcon3	equ	0xFF0
 12286                           postinc0	equ	0xFEE
 12287                           wreg	equ	0xFE8
 12288                           postdec1	equ	0xFE5
 12289                           plusw1	equ	0xFE3
 12290                           fsr1l	equ	0xFE1
 12291                           indf2	equ	0xFDF
 12292                           postinc2	equ	0xFDE
 12293                           plusw2	equ	0xFDB
 12294                           fsr2h	equ	0xFDA
 12295                           fsr2l	equ	0xFD9
 12296                           status	equ	0xFD8
 12297                           
 12298 ;; *************** function _write_command *****************
 12299 ;; Defined at:
 12300 ;;		line 146 in file "ST7735_TFT.c"
 12301 ;; Parameters:    Size  Location     Type
 12302 ;;  cmd_            1    wreg     unsigned char 
 12303 ;; Auto vars:     Size  Location     Type
 12304 ;;  cmd_            1   18[COMRAM] unsigned char 
 12305 ;; Return value:  Size  Location     Type
 12306 ;;		None               void
 12307 ;; Registers used:
 12308 ;;		wreg, status,2, cstack
 12309 ;; Tracked objects:
 12310 ;;		On entry : 0/0
 12311 ;;		On exit  : 0/0
 12312 ;;		Unchanged: 0/0
 12313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12315 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12317 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12318 ;;Total ram usage:        1 bytes
 12319 ;; Hardware stack levels used:    1
 12320 ;; Hardware stack levels required when called:    4
 12321 ;; This function calls:
 12322 ;;		_spiwrite
 12323 ;; This function is called by:
 12324 ;;		_Rcmd1
 12325 ;;		_Rcmd2red
 12326 ;;		_Rcmd3
 12327 ;;		_setAddrWindow
 12328 ;;		_TFT_GreenTab_Initialize
 12329 ;;		_Bcmd
 12330 ;;		_setScrollDefinition
 12331 ;;		_Rcmd2green
 12332 ;;		_VerticalScroll
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           	psect	text53
 12337  004D80                     __ptext53:
 12338                           	opt stack 0
 12339  004D80                     _write_command:
 12340                           	opt stack 20
 12341                           
 12342                           ;incstack = 0
 12343                           ;write_command@cmd_ stored from wreg
 12344  004D80  6E13               	movwf	write_command@cmd_,c
 12345                           
 12346                           ;ST7735_TFT.c: 148: PORTCbits.RC4 = 0;
 12347  004D82  9882               	bcf	3970,4,c	;volatile
 12348                           
 12349                           ;ST7735_TFT.c: 150: PORTDbits.RD7 = 0;
 12350  004D84  9E83               	bcf	3971,7,c	;volatile
 12351                           
 12352                           ;ST7735_TFT.c: 151: spiwrite(cmd_);
 12353  004D86  5013               	movf	write_command@cmd_,w,c
 12354  004D88  EC5D  F026         	call	_spiwrite
 12355                           
 12356                           ;ST7735_TFT.c: 153: PORTCbits.RC4 = 1;
 12357  004D8C  8882               	bsf	3970,4,c	;volatile
 12358  004D8E  0012               	return		;funcret
 12359  004D90                     __end_of_write_command:
 12360                           	opt stack 0
 12361                           tblptru	equ	0xFF8
 12362                           tblptrh	equ	0xFF7
 12363                           tblptrl	equ	0xFF6
 12364                           tablat	equ	0xFF5
 12365                           prodh	equ	0xFF4
 12366                           prodl	equ	0xFF3
 12367                           intcon	equ	0xFF2
 12368                           intcon2	equ	0xFF1
 12369                           intcon3	equ	0xFF0
 12370                           postinc0	equ	0xFEE
 12371                           wreg	equ	0xFE8
 12372                           postdec1	equ	0xFE5
 12373                           plusw1	equ	0xFE3
 12374                           fsr1l	equ	0xFE1
 12375                           indf2	equ	0xFDF
 12376                           postinc2	equ	0xFDE
 12377                           plusw2	equ	0xFDB
 12378                           fsr2h	equ	0xFDA
 12379                           fsr2l	equ	0xFD9
 12380                           status	equ	0xFD8
 12381                           
 12382 ;; *************** function _spiwrite *****************
 12383 ;; Defined at:
 12384 ;;		line 137 in file "ST7735_TFT.c"
 12385 ;; Parameters:    Size  Location     Type
 12386 ;;  spidata         1    wreg     unsigned char 
 12387 ;; Auto vars:     Size  Location     Type
 12388 ;;  spidata         1   17[COMRAM] unsigned char 
 12389 ;;  x               1   16[COMRAM] unsigned char 
 12390 ;; Return value:  Size  Location     Type
 12391 ;;		None               void
 12392 ;; Registers used:
 12393 ;;		wreg
 12394 ;; Tracked objects:
 12395 ;;		On entry : 0/0
 12396 ;;		On exit  : 0/0
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12403 ;;Total ram usage:        2 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; Hardware stack levels required when called:    3
 12406 ;; This function calls:
 12407 ;;		Nothing
 12408 ;; This function is called by:
 12409 ;;		_write_command
 12410 ;;		_write_data
 12411 ;;		_drawFastVLine
 12412 ;;		_fillRectangle
 12413 ;;		_drawFastHLine
 12414 ;; This function uses a non-reentrant model
 12415 ;;
 12416                           
 12417                           	psect	text54
 12418  004CBA                     __ptext54:
 12419                           	opt stack 0
 12420  004CBA                     _spiwrite:
 12421                           	opt stack 22
 12422                           
 12423                           ;incstack = 0
 12424                           ;spiwrite@spidata stored from wreg
 12425  004CBA  6E12               	movwf	spiwrite@spidata,c
 12426                           
 12427                           ;ST7735_TFT.c: 139: char x;
 12428                           ;ST7735_TFT.c: 140: PIR1bits.SSPIF = 0;
 12429  004CBC  969E               	bcf	3998,3,c	;volatile
 12430                           
 12431                           ;ST7735_TFT.c: 141: x = SSPBUF;
 12432  004CBE  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 12433                           
 12434                           ;ST7735_TFT.c: 142: SSPBUF = spidata;
 12435  004CC2  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 12436                           
 12437                           ;ST7735_TFT.c: 143: while (!SSPSTATbits.BF);
 12438  004CC6  D000               	goto	l208
 12439  004CC8                     l208:
 12440  004CC8  A0C7               	btfss	4039,0,c	;volatile
 12441  004CCA  D7FE               	goto	l208
 12442  004CCC  0012               	return		;funcret
 12443  004CCE                     __end_of_spiwrite:
 12444                           	opt stack 0
 12445                           tblptru	equ	0xFF8
 12446                           tblptrh	equ	0xFF7
 12447                           tblptrl	equ	0xFF6
 12448                           tablat	equ	0xFF5
 12449                           prodh	equ	0xFF4
 12450                           prodl	equ	0xFF3
 12451                           intcon	equ	0xFF2
 12452                           intcon2	equ	0xFF1
 12453                           intcon3	equ	0xFF0
 12454                           postinc0	equ	0xFEE
 12455                           wreg	equ	0xFE8
 12456                           postdec1	equ	0xFE5
 12457                           plusw1	equ	0xFE3
 12458                           fsr1l	equ	0xFE1
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           plusw2	equ	0xFDB
 12462                           fsr2h	equ	0xFDA
 12463                           fsr2l	equ	0xFD9
 12464                           status	equ	0xFD8
 12465                           
 12466 ;; *************** function _DS1621_Read_Temp *****************
 12467 ;; Defined at:
 12468 ;;		line 27 in file "I2C_Support.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;		None
 12471 ;; Auto vars:     Size  Location     Type
 12472 ;;  Device          1   23[COMRAM] unsigned char 
 12473 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 12474 ;;  Cmd             1   21[COMRAM] unsigned char 
 12475 ;; Return value:  Size  Location     Type
 12476 ;;                  2   19[COMRAM] int 
 12477 ;; Registers used:
 12478 ;;		wreg, status,2, status,0, cstack
 12479 ;; Tracked objects:
 12480 ;;		On entry : 0/0
 12481 ;;		On exit  : 0/0
 12482 ;;		Unchanged: 0/0
 12483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12484 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12485 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12487 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12488 ;;Total ram usage:        5 bytes
 12489 ;; Hardware stack levels used:    1
 12490 ;; Hardware stack levels required when called:    6
 12491 ;; This function calls:
 12492 ;;		_I2C_ReStart
 12493 ;;		_I2C_Read
 12494 ;;		_I2C_Start
 12495 ;;		_I2C_Stop
 12496 ;;		_I2C_Write
 12497 ;; This function is called by:
 12498 ;;		_main
 12499 ;;		_Setup_Fan_Temp
 12500 ;;		_Do_Setup_Time
 12501 ;; This function uses a non-reentrant model
 12502 ;;
 12503                           
 12504                           	psect	text55
 12505  004802                     __ptext55:
 12506                           	opt stack 0
 12507  004802                     _DS1621_Read_Temp:
 12508                           	opt stack 23
 12509                           
 12510                           ;I2C_Support.c: 30: char Device = 0x48;
 12511                           
 12512                           ;incstack = 0
 12513  004802  0E48               	movlw	72
 12514  004804  6E18               	movwf	DS1621_Read_Temp@Device,c
 12515                           
 12516                           ;I2C_Support.c: 31: char Cmd = 0xAA;
 12517  004806  0EAA               	movlw	170
 12518  004808  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 12519                           
 12520                           ;I2C_Support.c: 32: char Data_Ret;
 12521                           ;I2C_Support.c: 33: I2C_Start();
 12522  00480A  EC8C  F026         	call	_I2C_Start	;wreg free
 12523                           
 12524                           ;I2C_Support.c: 34: I2C_Write((Device << 1) | 0);
 12525  00480E  5018               	movf	DS1621_Read_Temp@Device,w,c
 12526  004810  2418               	addwf	DS1621_Read_Temp@Device,w,c
 12527  004812  ECC4  F023         	call	_I2C_Write
 12528                           
 12529                           ;I2C_Support.c: 35: I2C_Write(Cmd);
 12530  004816  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 12531  004818  ECC4  F023         	call	_I2C_Write
 12532                           
 12533                           ;I2C_Support.c: 36: I2C_ReStart();
 12534  00481C  EC3E  F026         	call	_I2C_ReStart	;wreg free
 12535                           
 12536                           ;I2C_Support.c: 37: I2C_Write((Device << 1) | 1);
 12537  004820  80D8               	bsf	status,0,c
 12538  004822  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 12539  004824  ECC4  F023         	call	_I2C_Write
 12540                           
 12541                           ;I2C_Support.c: 38: Data_Ret = I2C_Read(0);
 12542  004828  0E00               	movlw	0
 12543  00482A  EC24  F023         	call	_I2C_Read
 12544  00482E  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 12545                           
 12546                           ;I2C_Support.c: 39: I2C_Stop();
 12547  004830  EC83  F026         	call	_I2C_Stop	;wreg free
 12548                           
 12549                           ;I2C_Support.c: 40: return Data_Ret;
 12550  004834  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 12551  004838  6A15               	clrf	?_DS1621_Read_Temp+1,c
 12552  00483A  D000               	goto	l560
 12553  00483C                     l560:
 12554  00483C  0012               	return		;funcret
 12555  00483E                     __end_of_DS1621_Read_Temp:
 12556                           	opt stack 0
 12557                           tblptru	equ	0xFF8
 12558                           tblptrh	equ	0xFF7
 12559                           tblptrl	equ	0xFF6
 12560                           tablat	equ	0xFF5
 12561                           prodh	equ	0xFF4
 12562                           prodl	equ	0xFF3
 12563                           intcon	equ	0xFF2
 12564                           intcon2	equ	0xFF1
 12565                           intcon3	equ	0xFF0
 12566                           postinc0	equ	0xFEE
 12567                           wreg	equ	0xFE8
 12568                           postdec1	equ	0xFE5
 12569                           plusw1	equ	0xFE3
 12570                           fsr1l	equ	0xFE1
 12571                           indf2	equ	0xFDF
 12572                           postinc2	equ	0xFDE
 12573                           plusw2	equ	0xFDB
 12574                           fsr2h	equ	0xFDA
 12575                           fsr2l	equ	0xFD9
 12576                           status	equ	0xFD8
 12577                           
 12578 ;; *************** function _I2C_Read *****************
 12579 ;; Defined at:
 12580 ;;		line 16 in file "I2C_Soft.c"
 12581 ;; Parameters:    Size  Location     Type
 12582 ;;  ack             1    wreg     unsigned char 
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;  ack             1   16[COMRAM] unsigned char 
 12585 ;;  inByte          1   18[COMRAM] unsigned char 
 12586 ;;  n               1   17[COMRAM] unsigned char 
 12587 ;; Return value:  Size  Location     Type
 12588 ;;                  1    wreg      unsigned char 
 12589 ;; Registers used:
 12590 ;;		wreg, status,2, status,0, cstack
 12591 ;; Tracked objects:
 12592 ;;		On entry : 0/0
 12593 ;;		On exit  : 0/0
 12594 ;;		Unchanged: 0/0
 12595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12597 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12600 ;;Total ram usage:        3 bytes
 12601 ;; Hardware stack levels used:    1
 12602 ;; Hardware stack levels required when called:    5
 12603 ;; This function calls:
 12604 ;;		_i2cAck
 12605 ;;		_i2cHighScl
 12606 ;;		_i2cHighSda
 12607 ;;		_i2cLowScl
 12608 ;;		_i2cNack
 12609 ;; This function is called by:
 12610 ;;		_DS1621_Read_Temp
 12611 ;;		_DS3231_Read_Time
 12612 ;;		_I2C_Write_Address_Read_One_Byte
 12613 ;;		_I2C_Write_Cmd_Read_One_Byte
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           	psect	text56
 12618  004648                     __ptext56:
 12619                           	opt stack 0
 12620  004648                     _I2C_Read:
 12621                           	opt stack 22
 12622                           
 12623                           ;incstack = 0
 12624                           ;I2C_Read@ack stored from wreg
 12625  004648  6E11               	movwf	I2C_Read@ack,c
 12626                           
 12627                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 12628                           ;I2C_Soft.c: 19: i2cHighSda();
 12629  00464A  ECFA  F026         	call	_i2cHighSda	;wreg free
 12630                           
 12631                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 12632  00464E  0E00               	movlw	0
 12633  004650  6E12               	movwf	I2C_Read@n,c
 12634  004652                     l6408:
 12635  004652  0E07               	movlw	7
 12636  004654  6412               	cpfsgt	I2C_Read@n,c
 12637  004656  D001               	goto	l6412
 12638  004658  D00F               	goto	l6426
 12639  00465A                     l6412:
 12640                           
 12641                           ;I2C_Soft.c: 21: {
 12642                           ;I2C_Soft.c: 22: i2cHighScl();
 12643  00465A  ECD6  F026         	call	_i2cHighScl	;wreg free
 12644                           
 12645                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
 12646  00465E  AA81               	btfss	3969,5,c	;volatile
 12647  004660  D003               	goto	l6418
 12648                           
 12649                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 12650  004662  80D8               	bsf	status,0,c
 12651  004664  3613               	rlcf	I2C_Read@inByte,f,c
 12652  004666  D004               	goto	l6420
 12653  004668                     l6418:
 12654                           
 12655                           ;I2C_Soft.c: 26: else
 12656                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 12657  004668  5013               	movf	I2C_Read@inByte,w,c
 12658  00466A  2413               	addwf	I2C_Read@inByte,w,c
 12659  00466C  6E13               	movwf	I2C_Read@inByte,c
 12660  00466E  D000               	goto	l6420
 12661  004670                     l6420:
 12662                           
 12663                           ;I2C_Soft.c: 28: i2cLowScl();
 12664  004670  ECF6  F026         	call	_i2cLowScl	;wreg free
 12665  004674  2A12               	incf	I2C_Read@n,f,c
 12666  004676  D7ED               	goto	l6408
 12667  004678                     l6426:
 12668                           
 12669                           ;I2C_Soft.c: 29: }
 12670                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 12671  004678  5011               	movf	I2C_Read@ack,w,c
 12672  00467A  B4D8               	btfsc	status,2,c
 12673  00467C  D003               	goto	l6430
 12674  00467E  EC7A  F026         	call	_i2cAck	;wreg free
 12675  004682  D003               	goto	l6432
 12676  004684                     l6430:
 12677                           
 12678                           ;I2C_Soft.c: 31: else i2cNack();
 12679  004684  ECE2  F026         	call	_i2cNack	;wreg free
 12680  004688  D000               	goto	l6432
 12681  00468A                     l6432:
 12682                           
 12683                           ;I2C_Soft.c: 34: return(inByte);
 12684  00468A  5013               	movf	I2C_Read@inByte,w,c
 12685  00468C  D000               	goto	l112
 12686  00468E                     l112:
 12687  00468E  0012               	return		;funcret
 12688  004690                     __end_of_I2C_Read:
 12689                           	opt stack 0
 12690                           tblptru	equ	0xFF8
 12691                           tblptrh	equ	0xFF7
 12692                           tblptrl	equ	0xFF6
 12693                           tablat	equ	0xFF5
 12694                           prodh	equ	0xFF4
 12695                           prodl	equ	0xFF3
 12696                           intcon	equ	0xFF2
 12697                           intcon2	equ	0xFF1
 12698                           intcon3	equ	0xFF0
 12699                           postinc0	equ	0xFEE
 12700                           wreg	equ	0xFE8
 12701                           postdec1	equ	0xFE5
 12702                           plusw1	equ	0xFE3
 12703                           fsr1l	equ	0xFE1
 12704                           indf2	equ	0xFDF
 12705                           postinc2	equ	0xFDE
 12706                           plusw2	equ	0xFDB
 12707                           fsr2h	equ	0xFDA
 12708                           fsr2l	equ	0xFD9
 12709                           status	equ	0xFD8
 12710                           
 12711 ;; *************** function _i2cNack *****************
 12712 ;; Defined at:
 12713 ;;		line 53 in file "I2C_Soft.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;		None
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;		None
 12718 ;; Return value:  Size  Location     Type
 12719 ;;		None               void
 12720 ;; Registers used:
 12721 ;;		wreg, cstack
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12731 ;;Total ram usage:        0 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; Hardware stack levels required when called:    4
 12734 ;; This function calls:
 12735 ;;		_i2cHighScl
 12736 ;;		_i2cLowScl
 12737 ;; This function is called by:
 12738 ;;		_I2C_Read
 12739 ;; This function uses a non-reentrant model
 12740 ;;
 12741                           
 12742                           	psect	text57
 12743  004DC4                     __ptext57:
 12744                           	opt stack 0
 12745  004DC4                     _i2cNack:
 12746                           	opt stack 22
 12747                           
 12748                           ;I2C_Soft.c: 55: i2cHighScl();
 12749                           
 12750                           ;incstack = 0
 12751  004DC4  ECD6  F026         	call	_i2cHighScl	;wreg free
 12752                           
 12753                           ;I2C_Soft.c: 56: i2cLowScl();
 12754  004DC8  ECF6  F026         	call	_i2cLowScl	;wreg free
 12755  004DCC  0012               	return		;funcret
 12756  004DCE                     __end_of_i2cNack:
 12757                           	opt stack 0
 12758                           tblptru	equ	0xFF8
 12759                           tblptrh	equ	0xFF7
 12760                           tblptrl	equ	0xFF6
 12761                           tablat	equ	0xFF5
 12762                           prodh	equ	0xFF4
 12763                           prodl	equ	0xFF3
 12764                           intcon	equ	0xFF2
 12765                           intcon2	equ	0xFF1
 12766                           intcon3	equ	0xFF0
 12767                           postinc0	equ	0xFEE
 12768                           wreg	equ	0xFE8
 12769                           postdec1	equ	0xFE5
 12770                           plusw1	equ	0xFE3
 12771                           fsr1l	equ	0xFE1
 12772                           indf2	equ	0xFDF
 12773                           postinc2	equ	0xFDE
 12774                           plusw2	equ	0xFDB
 12775                           fsr2h	equ	0xFDA
 12776                           fsr2l	equ	0xFD9
 12777                           status	equ	0xFD8
 12778                           
 12779 ;; *************** function _i2cAck *****************
 12780 ;; Defined at:
 12781 ;;		line 59 in file "I2C_Soft.c"
 12782 ;; Parameters:    Size  Location     Type
 12783 ;;		None
 12784 ;; Auto vars:     Size  Location     Type
 12785 ;;		None
 12786 ;; Return value:  Size  Location     Type
 12787 ;;		None               void
 12788 ;; Registers used:
 12789 ;;		wreg, cstack
 12790 ;; Tracked objects:
 12791 ;;		On entry : 0/0
 12792 ;;		On exit  : 0/0
 12793 ;;		Unchanged: 0/0
 12794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12799 ;;Total ram usage:        0 bytes
 12800 ;; Hardware stack levels used:    1
 12801 ;; Hardware stack levels required when called:    4
 12802 ;; This function calls:
 12803 ;;		_i2cHighScl
 12804 ;;		_i2cHighSda
 12805 ;;		_i2cLowScl
 12806 ;;		_i2cLowSda
 12807 ;; This function is called by:
 12808 ;;		_I2C_Read
 12809 ;; This function uses a non-reentrant model
 12810 ;;
 12811                           
 12812                           	psect	text58
 12813  004CF4                     __ptext58:
 12814                           	opt stack 0
 12815  004CF4                     _i2cAck:
 12816                           	opt stack 22
 12817                           
 12818                           ;I2C_Soft.c: 61: i2cLowSda();
 12819                           
 12820                           ;incstack = 0
 12821  004CF4  ECEC  F026         	call	_i2cLowSda	;wreg free
 12822                           
 12823                           ;I2C_Soft.c: 62: i2cHighScl();
 12824  004CF8  ECD6  F026         	call	_i2cHighScl	;wreg free
 12825                           
 12826                           ;I2C_Soft.c: 63: i2cLowScl();
 12827  004CFC  ECF6  F026         	call	_i2cLowScl	;wreg free
 12828                           
 12829                           ;I2C_Soft.c: 64: i2cHighSda();
 12830  004D00  ECFA  F026         	call	_i2cHighSda	;wreg free
 12831  004D04  0012               	return		;funcret
 12832  004D06                     __end_of_i2cAck:
 12833                           	opt stack 0
 12834                           tblptru	equ	0xFF8
 12835                           tblptrh	equ	0xFF7
 12836                           tblptrl	equ	0xFF6
 12837                           tablat	equ	0xFF5
 12838                           prodh	equ	0xFF4
 12839                           prodl	equ	0xFF3
 12840                           intcon	equ	0xFF2
 12841                           intcon2	equ	0xFF1
 12842                           intcon3	equ	0xFF0
 12843                           postinc0	equ	0xFEE
 12844                           wreg	equ	0xFE8
 12845                           postdec1	equ	0xFE5
 12846                           plusw1	equ	0xFE3
 12847                           fsr1l	equ	0xFE1
 12848                           indf2	equ	0xFDF
 12849                           postinc2	equ	0xFDE
 12850                           plusw2	equ	0xFDB
 12851                           fsr2h	equ	0xFDA
 12852                           fsr2l	equ	0xFD9
 12853                           status	equ	0xFD8
 12854                           
 12855 ;; *************** function _I2C_ReStart *****************
 12856 ;; Defined at:
 12857 ;;		line 75 in file "I2C_Soft.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;		None
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;		None
 12862 ;; Return value:  Size  Location     Type
 12863 ;;		None               void
 12864 ;; Registers used:
 12865 ;;		wreg, cstack
 12866 ;; Tracked objects:
 12867 ;;		On entry : 0/0
 12868 ;;		On exit  : 0/0
 12869 ;;		Unchanged: 0/0
 12870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12875 ;;Total ram usage:        0 bytes
 12876 ;; Hardware stack levels used:    1
 12877 ;; Hardware stack levels required when called:    4
 12878 ;; This function calls:
 12879 ;;		_i2cHighScl
 12880 ;;		_i2cHighSda
 12881 ;;		_i2cLowScl
 12882 ;;		_i2cLowSda
 12883 ;; This function is called by:
 12884 ;;		_DS1621_Read_Temp
 12885 ;;		_DS3231_Read_Time
 12886 ;;		_I2C_Write_Address_Read_One_Byte
 12887 ;;		_I2C_Write_Cmd_Read_One_Byte
 12888 ;;		_DS3231_Init
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           	psect	text59
 12893  004C7C                     __ptext59:
 12894                           	opt stack 0
 12895  004C7C                     _I2C_ReStart:
 12896                           	opt stack 23
 12897                           
 12898                           ;I2C_Soft.c: 77: i2cLowScl();
 12899                           
 12900                           ;incstack = 0
 12901  004C7C  ECF6  F026         	call	_i2cLowScl	;wreg free
 12902                           
 12903                           ;I2C_Soft.c: 78: i2cHighSda();
 12904  004C80  ECFA  F026         	call	_i2cHighSda	;wreg free
 12905                           
 12906                           ;I2C_Soft.c: 79: i2cHighScl();
 12907  004C84  ECD6  F026         	call	_i2cHighScl	;wreg free
 12908                           
 12909                           ;I2C_Soft.c: 80: i2cLowSda();
 12910  004C88  ECEC  F026         	call	_i2cLowSda	;wreg free
 12911                           
 12912                           ;I2C_Soft.c: 81: i2cLowScl();
 12913  004C8C  ECF6  F026         	call	_i2cLowScl	;wreg free
 12914  004C90  0012               	return		;funcret
 12915  004C92                     __end_of_I2C_ReStart:
 12916                           	opt stack 0
 12917                           tblptru	equ	0xFF8
 12918                           tblptrh	equ	0xFF7
 12919                           tblptrl	equ	0xFF6
 12920                           tablat	equ	0xFF5
 12921                           prodh	equ	0xFF4
 12922                           prodl	equ	0xFF3
 12923                           intcon	equ	0xFF2
 12924                           intcon2	equ	0xFF1
 12925                           intcon3	equ	0xFF0
 12926                           postinc0	equ	0xFEE
 12927                           wreg	equ	0xFE8
 12928                           postdec1	equ	0xFE5
 12929                           plusw1	equ	0xFE3
 12930                           fsr1l	equ	0xFE1
 12931                           indf2	equ	0xFDF
 12932                           postinc2	equ	0xFDE
 12933                           plusw2	equ	0xFDB
 12934                           fsr2h	equ	0xFDA
 12935                           fsr2l	equ	0xFD9
 12936                           status	equ	0xFD8
 12937                           
 12938 ;; *************** function _Do_Init *****************
 12939 ;; Defined at:
 12940 ;;		line 86 in file "Main.c"
 12941 ;; Parameters:    Size  Location     Type
 12942 ;;		None
 12943 ;; Auto vars:     Size  Location     Type
 12944 ;;		None
 12945 ;; Return value:  Size  Location     Type
 12946 ;;		None               void
 12947 ;; Registers used:
 12948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12949 ;; Tracked objects:
 12950 ;;		On entry : 0/0
 12951 ;;		On exit  : 0/0
 12952 ;;		Unchanged: 0/0
 12953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;Total ram usage:        0 bytes
 12959 ;; Hardware stack levels used:    1
 12960 ;; Hardware stack levels required when called:    8
 12961 ;; This function calls:
 12962 ;;		_DS1621_Init
 12963 ;;		_I2C_Init
 12964 ;;		_Init_ADC
 12965 ;;		_Init_Interrupt
 12966 ;;		_Init_UART
 12967 ;;		_Turn_Off_Fan
 12968 ;; This function is called by:
 12969 ;;		_main
 12970 ;; This function uses a non-reentrant model
 12971 ;;
 12972                           
 12973                           	psect	text60
 12974  0043BC                     __ptext60:
 12975                           	opt stack 0
 12976  0043BC                     _Do_Init:
 12977                           	opt stack 22
 12978                           
 12979                           ;Main.c: 88: Init_UART();
 12980                           
 12981                           ;incstack = 0
 12982  0043BC  EC67  F026         	call	_Init_UART	;wreg free
 12983                           
 12984                           ;Main.c: 89: Init_ADC();
 12985  0043C0  ECCF  F026         	call	_Init_ADC	;wreg free
 12986                           
 12987                           ;Main.c: 90: OSCCON=0x70;
 12988  0043C4  0E70               	movlw	112
 12989  0043C6  6ED3               	movwf	4051,c	;volatile
 12990                           
 12991                           ;Main.c: 92: ADCON1= 0x0E;
 12992  0043C8  0E0E               	movlw	14
 12993  0043CA  6EC1               	movwf	4033,c	;volatile
 12994                           
 12995                           ;Main.c: 93: TRISA = 0x03;
 12996  0043CC  0E03               	movlw	3
 12997  0043CE  6E92               	movwf	3986,c	;volatile
 12998                           
 12999                           ;Main.c: 94: TRISB = 0x07;
 13000  0043D0  0E07               	movlw	7
 13001  0043D2  6E93               	movwf	3987,c	;volatile
 13002                           
 13003                           ;Main.c: 95: TRISC = 0x01;
 13004  0043D4  0E01               	movlw	1
 13005  0043D6  6E94               	movwf	3988,c	;volatile
 13006                           
 13007                           ;Main.c: 96: TRISD = 0x00;
 13008  0043D8  0E00               	movlw	0
 13009  0043DA  6E95               	movwf	3989,c	;volatile
 13010                           
 13011                           ;Main.c: 97: TRISE = 0x00;
 13012  0043DC  0E00               	movlw	0
 13013  0043DE  6E96               	movwf	3990,c	;volatile
 13014                           
 13015                           ;Main.c: 98: PORTE = 0x00;
 13016  0043E0  0E00               	movlw	0
 13017  0043E2  6E84               	movwf	3972,c	;volatile
 13018                           
 13019                           ;Main.c: 100: FAN = 0;
 13020  0043E4  0E00               	movlw	0
 13021  0043E6  0100               	movlb	0	; () banked
 13022  0043E8  6FC1               	movwf	_FAN& (0+255),b
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;Main.c: 101: RBPU =0;
 13026  0043EA  9EF1               	bcf	intcon2,7,c	;volatile
 13027                           
 13028                           ; BSR set to: 0
 13029                           ;Main.c: 103: I2C_Init(100000);
 13030  0043EC  0EA0               	movlw	160
 13031  0043EE  6E11               	movwf	I2C_Init@c,c
 13032  0043F0  0E86               	movlw	134
 13033  0043F2  6E12               	movwf	I2C_Init@c+1,c
 13034  0043F4  0E01               	movlw	1
 13035  0043F6  6E13               	movwf	I2C_Init@c+2,c
 13036  0043F8  0E00               	movlw	0
 13037  0043FA  6E14               	movwf	I2C_Init@c+3,c
 13038  0043FC  ECE7  F026         	call	_I2C_Init	;wreg free
 13039                           
 13040                           ;Main.c: 105: DS1621_Init();
 13041  004400  ECA9  F025         	call	_DS1621_Init	;wreg free
 13042                           
 13043                           ;Main.c: 106: Init_Interrupt();
 13044  004404  EC34  F025         	call	_Init_Interrupt	;wreg free
 13045                           
 13046                           ;Main.c: 107: duty_cycle = 50;
 13047  004408  0E32               	movlw	50
 13048  00440A  6E64               	movwf	_duty_cycle,c
 13049                           
 13050                           ;Main.c: 108: Turn_Off_Fan();
 13051  00440C  ECC6  F025         	call	_Turn_Off_Fan	;wreg free
 13052                           
 13053                           ;Main.c: 109: fan_set_temp = 77;
 13054  004410  0E4D               	movlw	77
 13055  004412  0100               	movlb	0	; () banked
 13056  004414  6FDC               	movwf	_fan_set_temp& (0+255),b
 13057                           
 13058                           ; BSR set to: 0
 13059  004416  0012               	return		;funcret
 13060  004418                     __end_of_Do_Init:
 13061                           	opt stack 0
 13062                           tblptru	equ	0xFF8
 13063                           tblptrh	equ	0xFF7
 13064                           tblptrl	equ	0xFF6
 13065                           tablat	equ	0xFF5
 13066                           prodh	equ	0xFF4
 13067                           prodl	equ	0xFF3
 13068                           intcon	equ	0xFF2
 13069                           intcon2	equ	0xFF1
 13070                           intcon3	equ	0xFF0
 13071                           postinc0	equ	0xFEE
 13072                           wreg	equ	0xFE8
 13073                           postdec1	equ	0xFE5
 13074                           plusw1	equ	0xFE3
 13075                           fsr1l	equ	0xFE1
 13076                           indf2	equ	0xFDF
 13077                           postinc2	equ	0xFDE
 13078                           plusw2	equ	0xFDB
 13079                           fsr2h	equ	0xFDA
 13080                           fsr2l	equ	0xFD9
 13081                           status	equ	0xFD8
 13082                           
 13083 ;; *************** function _Turn_Off_Fan *****************
 13084 ;; Defined at:
 13085 ;;		line 89 in file "Fan_Support.c"
 13086 ;; Parameters:    Size  Location     Type
 13087 ;;		None
 13088 ;; Auto vars:     Size  Location     Type
 13089 ;;		None
 13090 ;; Return value:  Size  Location     Type
 13091 ;;		None               void
 13092 ;; Registers used:
 13093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13094 ;; Tracked objects:
 13095 ;;		On entry : 0/0
 13096 ;;		On exit  : 0/0
 13097 ;;		Unchanged: 0/0
 13098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;Total ram usage:        0 bytes
 13104 ;; Hardware stack levels used:    1
 13105 ;; Hardware stack levels required when called:    7
 13106 ;; This function calls:
 13107 ;;		_printf
 13108 ;; This function is called by:
 13109 ;;		_Monitor_Fan
 13110 ;;		_Toggle_Fan
 13111 ;;		_Do_Init
 13112 ;;		_main
 13113 ;; This function uses a non-reentrant model
 13114 ;;
 13115                           
 13116                           	psect	text61
 13117  004B8C                     __ptext61:
 13118                           	opt stack 0
 13119  004B8C                     _Turn_Off_Fan:
 13120                           	opt stack 23
 13121                           
 13122                           ;Fan_Support.c: 91: printf ("Fan is turned off\r\n");
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;incstack = 0
 13126  004B8C  0E34               	movlw	low STR_1
 13127  004B8E  0100               	movlb	0	; () banked
 13128  004B90  6F86               	movwf	printf@f& (0+255),b
 13129  004B92  0EFF               	movlw	high STR_1
 13130  004B94  0100               	movlb	0	; () banked
 13131  004B96  6F87               	movwf	(printf@f+1)& (0+255),b
 13132  004B98  EC0E  F000         	call	_printf	;wreg free
 13133                           
 13134                           ;Fan_Support.c: 93: FAN = 0;
 13135  004B9C  0E00               	movlw	0
 13136  004B9E  0100               	movlb	0	; () banked
 13137  004BA0  6FC1               	movwf	_FAN& (0+255),b
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;Fan_Support.c: 94: PORTDbits.RD1 = 0;
 13141  004BA2  9283               	bcf	3971,1,c	;volatile
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;Fan_Support.c: 95: PORTDbits.RD2 = 0;
 13145  004BA4  9483               	bcf	3971,2,c	;volatile
 13146                           
 13147                           ; BSR set to: 0
 13148  004BA6  0012               	return		;funcret
 13149  004BA8                     __end_of_Turn_Off_Fan:
 13150                           	opt stack 0
 13151                           tblptru	equ	0xFF8
 13152                           tblptrh	equ	0xFF7
 13153                           tblptrl	equ	0xFF6
 13154                           tablat	equ	0xFF5
 13155                           prodh	equ	0xFF4
 13156                           prodl	equ	0xFF3
 13157                           intcon	equ	0xFF2
 13158                           intcon2	equ	0xFF1
 13159                           intcon3	equ	0xFF0
 13160                           postinc0	equ	0xFEE
 13161                           wreg	equ	0xFE8
 13162                           postdec1	equ	0xFE5
 13163                           plusw1	equ	0xFE3
 13164                           fsr1l	equ	0xFE1
 13165                           indf2	equ	0xFDF
 13166                           postinc2	equ	0xFDE
 13167                           plusw2	equ	0xFDB
 13168                           fsr2h	equ	0xFDA
 13169                           fsr2l	equ	0xFD9
 13170                           status	equ	0xFD8
 13171                           
 13172 ;; *************** function _printf *****************
 13173 ;; Defined at:
 13174 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;  f               2    6[BANK0 ] PTR const unsigned char 
 13177 ;;		 -> STR_43(29), STR_42(20), STR_41(21), STR_40(30), 
 13178 ;;		 -> STR_37(29), STR_36(20), STR_35(20), STR_34(30), 
 13179 ;;		 -> STR_11(33), STR_10(27), STR_9(34), STR_8(22), 
 13180 ;;		 -> STR_7(29), STR_6(20), STR_5(21), STR_4(30), 
 13181 ;;		 -> STR_3(22), STR_2(19), STR_1(20), 
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;  idx             1   29[BANK0 ] unsigned char 
 13184 ;;  val             4   42[BANK0 ] unsigned long 
 13185 ;;  tmpval          4   34[BANK0 ] struct .
 13186 ;;  fval            3   48[BANK0 ] struct .
 13187 ;;  cp              3    0        PTR const unsigned char 
 13188 ;;  flag            2   46[BANK0 ] unsigned short 
 13189 ;;  exp             2   40[BANK0 ] int 
 13190 ;;  width           2   38[BANK0 ] int 
 13191 ;;  prec            2   32[BANK0 ] int 
 13192 ;;  ap              2   30[BANK0 ] PTR void [1]
 13193 ;;		 -> ?_printf(2), 
 13194 ;;  len             2    0        unsigned int 
 13195 ;;  c               1   51[BANK0 ] char 
 13196 ;;  d               1    0        unsigned char 
 13197 ;; Return value:  Size  Location     Type
 13198 ;;                  2    6[BANK0 ] int 
 13199 ;; Registers used:
 13200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13201 ;; Tracked objects:
 13202 ;;		On entry : 0/0
 13203 ;;		On exit  : 0/0
 13204 ;;		Unchanged: 0/0
 13205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13206 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13207 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13208 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13209 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13210 ;;Total ram usage:       46 bytes
 13211 ;; Hardware stack levels used:    1
 13212 ;; Hardware stack levels required when called:    6
 13213 ;; This function calls:
 13214 ;;		___awdiv
 13215 ;;		___ftadd
 13216 ;;		___ftge
 13217 ;;		___ftmul
 13218 ;;		___ftneg
 13219 ;;		___ftsub
 13220 ;;		___fttol
 13221 ;;		___lldiv
 13222 ;;		___llmod
 13223 ;;		___lltoft
 13224 ;;		___wmul
 13225 ;;		__div_to_l_
 13226 ;;		__tdiv_to_l_
 13227 ;;		_fround
 13228 ;;		_isdigit
 13229 ;;		_putch
 13230 ;;		_scale
 13231 ;; This function is called by:
 13232 ;;		_Turn_Off_Fan
 13233 ;;		_Turn_On_Fan
 13234 ;;		_check_for_button_input
 13235 ;;		_main
 13236 ;;		_Setup_Fan_Temp
 13237 ;;		_Do_Setup_Time
 13238 ;; This function uses a non-reentrant model
 13239 ;;
 13240                           
 13241                           	psect	text62
 13242  00001C                     __ptext62:
 13243                           	opt stack 0
 13244  00001C                     _printf:
 13245                           	opt stack 24
 13246                           
 13247                           ;doprnt.c: 466: va_list ap;
 13248                           ;doprnt.c: 499: signed char c;
 13249                           ;doprnt.c: 501: int width;
 13250                           ;doprnt.c: 504: int prec;
 13251                           ;doprnt.c: 508: unsigned short flag;
 13252                           ;doprnt.c: 515: char d;
 13253                           ;doprnt.c: 516: double fval;
 13254                           ;doprnt.c: 517: int exp;
 13255                           ;doprnt.c: 523: union {
 13256                           ;doprnt.c: 524: unsigned long vd;
 13257                           ;doprnt.c: 525: double integ;
 13258                           ;doprnt.c: 526: } tmpval;
 13259                           ;doprnt.c: 528: unsigned long val;
 13260                           ;doprnt.c: 529: unsigned len;
 13261                           ;doprnt.c: 530: const char * cp;
 13262                           ;doprnt.c: 533: *ap = __va_start();
 13263                           
 13264                           ; BSR set to: 0
 13265                           ;incstack = 0
 13266  00001C  0E88               	movlw	low (?_printf+2)
 13267  00001E  0100               	movlb	0	; () banked
 13268  000020  6F9E               	movwf	printf@ap& (0+255),b
 13269  000022  0E00               	movlw	high (?_printf+2)
 13270  000024  0100               	movlb	0	; () banked
 13271  000026  6F9F               	movwf	(printf@ap+1)& (0+255),b
 13272                           
 13273                           ;doprnt.c: 536: while(c = *f++) {
 13274  000028  EF1E  F006         	goto	l9348
 13275  00002C                     l9062:
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;doprnt.c: 538: if(c != '%')
 13279  00002C  0E25               	movlw	37
 13280  00002E  0100               	movlb	0	; () banked
 13281  000030  19B3               	xorwf	printf@c& (0+255),w,b
 13282  000032  B4D8               	btfsc	status,2,c
 13283  000034  D006               	goto	l9066
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;doprnt.c: 540: {
 13287                           ;doprnt.c: 541: (putch(c) );
 13288  000036  0100               	movlb	0	; () banked
 13289  000038  51B3               	movf	printf@c& (0+255),w,b
 13290  00003A  ECC8  F026         	call	_putch
 13291                           
 13292                           ;doprnt.c: 542: continue;
 13293  00003E  EF1E  F006         	goto	l9348
 13294  000042                     l9066:
 13295                           
 13296                           ;doprnt.c: 543: }
 13297                           ;doprnt.c: 546: width = 0;
 13298  000042  0E00               	movlw	0
 13299  000044  0100               	movlb	0	; () banked
 13300  000046  6FA7               	movwf	(printf@width+1)& (0+255),b
 13301  000048  0E00               	movlw	0
 13302  00004A  6FA6               	movwf	printf@width& (0+255),b
 13303                           
 13304                           ;doprnt.c: 548: flag = 0;
 13305  00004C  0E00               	movlw	0
 13306  00004E  0100               	movlb	0	; () banked
 13307  000050  6FAF               	movwf	(printf@flag+1)& (0+255),b
 13308  000052  0E00               	movlw	0
 13309  000054  6FAE               	movwf	printf@flag& (0+255),b
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;doprnt.c: 551: switch(*f) {
 13313                           
 13314                           ;doprnt.c: 550: for(;;) {
 13315  000056  D007               	goto	l9072
 13316  000058                     l9068:
 13317                           
 13318                           ;doprnt.c: 580: flag |= 0x04;
 13319  000058  0100               	movlb	0	; () banked
 13320  00005A  85AE               	bsf	printf@flag& (0+255),2,b
 13321                           
 13322                           ;doprnt.c: 581: f++;
 13323  00005C  0100               	movlb	0	; () banked
 13324  00005E  4B86               	infsnz	printf@f& (0+255),f,b
 13325  000060  2B87               	incf	(printf@f+1)& (0+255),f,b
 13326                           
 13327                           ;doprnt.c: 582: continue;
 13328  000062  D001               	goto	l9072
 13329                           
 13330                           ; BSR set to: 0
 13331                           ;doprnt.c: 584: }
 13332  000064  D00B               	goto	l9074
 13333  000066                     l9072:
 13334  000066  C086  FFF6         	movff	printf@f,tblptrl
 13335  00006A  C087  FFF7         	movff	printf@f+1,tblptrh
 13336  00006E                     	if	0	;tblptru may be non-zero
 13337  00006E                     	endif
 13338  00006E                     	if	0	;tblptru may be non-zero
 13339  00006E                     	endif
 13340  00006E  0008               	tblrd		*
 13341  000070  50F5               	movf	tablat,w,c
 13342                           
 13343                           ; Switch size 1, requested type "space"
 13344                           ; Number of cases is 1, Range of values is 48 to 48
 13345                           ; switch strategies available:
 13346                           ; Name         Instructions Cycles
 13347                           ; simple_byte            4     3 (average)
 13348                           ;	Chosen strategy is simple_byte
 13349  000072  0A30               	xorlw	48	; case 48
 13350  000074  B4D8               	btfsc	status,2,c
 13351  000076  D7F0               	goto	l9068
 13352                           
 13353                           ;doprnt.c: 585: break;
 13354  000078  D001               	goto	l9074
 13355                           
 13356                           ;doprnt.c: 586: }
 13357  00007A  D7F5               	goto	l9072
 13358  00007C                     l9074:
 13359                           
 13360                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13361  00007C  C086  FFF6         	movff	printf@f,tblptrl
 13362  000080  C087  FFF7         	movff	printf@f+1,tblptrh
 13363  000084                     	if	0	;tblptru may be non-zero
 13364  000084                     	endif
 13365  000084                     	if	0	;tblptru may be non-zero
 13366  000084                     	endif
 13367  000084  0008               	tblrd		*
 13368  000086  50F5               	movf	tablat,w,c
 13369  000088  EC68  F025         	call	_isdigit
 13370  00008C  A0D8               	btfss	status,0,c
 13371  00008E  D04D               	goto	l9092
 13372                           
 13373                           ;doprnt.c: 598: width = 0;
 13374  000090  0E00               	movlw	0
 13375  000092  0100               	movlb	0	; () banked
 13376  000094  6FA7               	movwf	(printf@width+1)& (0+255),b
 13377  000096  0E00               	movlw	0
 13378  000098  6FA6               	movwf	printf@width& (0+255),b
 13379  00009A  D000               	goto	l9078
 13380  00009C                     l9078:
 13381                           
 13382                           ;doprnt.c: 600: width *= 10;
 13383  00009C  C0A6  F011         	movff	printf@width,___wmul@multiplier
 13384  0000A0  C0A7  F012         	movff	printf@width+1,___wmul@multiplier+1
 13385  0000A4  0E00               	movlw	0
 13386  0000A6  6E14               	movwf	___wmul@multiplicand+1,c
 13387  0000A8  0E0A               	movlw	10
 13388  0000AA  6E13               	movwf	___wmul@multiplicand,c
 13389  0000AC  ECD5  F024         	call	___wmul	;wreg free
 13390  0000B0  C011  F0A6         	movff	?___wmul,printf@width
 13391  0000B4  C012  F0A7         	movff	?___wmul+1,printf@width+1
 13392                           
 13393                           ;doprnt.c: 601: width += *f++ - '0';
 13394  0000B8  0ED0               	movlw	208
 13395  0000BA  0100               	movlb	0	; () banked
 13396  0000BC  6F94               	movwf	??_printf& (0+255),b
 13397  0000BE  0EFF               	movlw	255
 13398  0000C0  0100               	movlb	0	; () banked
 13399  0000C2  6F95               	movwf	(??_printf+1)& (0+255),b
 13400  0000C4  C086  FFF6         	movff	printf@f,tblptrl
 13401  0000C8  C087  FFF7         	movff	printf@f+1,tblptrh
 13402  0000CC                     	if	0	;tblptru may be non-zero
 13403  0000CC                     	endif
 13404  0000CC                     	if	0	;tblptru may be non-zero
 13405  0000CC                     	endif
 13406  0000CC  0008               	tblrd		*
 13407  0000CE  50F5               	movf	tablat,w,c
 13408  0000D0  0100               	movlb	0	; () banked
 13409  0000D2  6F96               	movwf	(??_printf+2)& (0+255),b
 13410  0000D4  6B97               	clrf	(??_printf+3)& (0+255),b
 13411  0000D6  0100               	movlb	0	; () banked
 13412  0000D8  5194               	movf	??_printf& (0+255),w,b
 13413  0000DA  0100               	movlb	0	; () banked
 13414  0000DC  2796               	addwf	(??_printf+2)& (0+255),f,b
 13415  0000DE  0100               	movlb	0	; () banked
 13416  0000E0  5195               	movf	(??_printf+1)& (0+255),w,b
 13417  0000E2  0100               	movlb	0	; () banked
 13418  0000E4  2397               	addwfc	(??_printf+3)& (0+255),f,b
 13419  0000E6  0100               	movlb	0	; () banked
 13420  0000E8  5196               	movf	(??_printf+2)& (0+255),w,b
 13421  0000EA  0100               	movlb	0	; () banked
 13422  0000EC  27A6               	addwf	printf@width& (0+255),f,b
 13423  0000EE  0100               	movlb	0	; () banked
 13424  0000F0  5197               	movf	(??_printf+3)& (0+255),w,b
 13425  0000F2  0100               	movlb	0	; () banked
 13426  0000F4  23A7               	addwfc	(printf@width+1)& (0+255),f,b
 13427                           
 13428                           ; BSR set to: 0
 13429  0000F6  0100               	movlb	0	; () banked
 13430  0000F8  4B86               	infsnz	printf@f& (0+255),f,b
 13431  0000FA  2B87               	incf	(printf@f+1)& (0+255),f,b
 13432                           
 13433                           ; BSR set to: 0
 13434                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13435  0000FC  C086  FFF6         	movff	printf@f,tblptrl
 13436  000100  C087  FFF7         	movff	printf@f+1,tblptrh
 13437  000104                     	if	0	;tblptru may be non-zero
 13438  000104                     	endif
 13439  000104                     	if	0	;tblptru may be non-zero
 13440  000104                     	endif
 13441  000104  0008               	tblrd		*
 13442  000106  50F5               	movf	tablat,w,c
 13443  000108  EC68  F025         	call	_isdigit
 13444  00010C  A0D8               	btfss	status,0,c
 13445  00010E  D00D               	goto	l9092
 13446  000110  D7C5               	goto	l9078
 13447                           
 13448                           ;doprnt.c: 608: }
 13449                           ;doprnt.c: 635: switch(c = *f++) {
 13450  000112  D00B               	goto	l9092
 13451                           
 13452                           ;doprnt.c: 638: goto alldone;
 13453                           
 13454                           ;doprnt.c: 637: case 0:
 13455  000114  EF2F  F006         	goto	l1466
 13456  000118                     l9086:
 13457                           
 13458                           ;doprnt.c: 663: flag |= 0x400;
 13459  000118  0100               	movlb	0	; () banked
 13460  00011A  85AF               	bsf	(printf@flag+1)& (0+255),2,b
 13461                           
 13462                           ; BSR set to: 0
 13463                           ;doprnt.c: 698: case 'i':
 13464                           ;doprnt.c: 699: break;
 13465                           
 13466                           ; BSR set to: 0
 13467                           
 13468                           ;doprnt.c: 697: case 'd':
 13469                           
 13470                           ;doprnt.c: 664: break;
 13471  00011C  D024               	goto	l9094
 13472  00011E                     l9088:
 13473                           
 13474                           ; BSR set to: 0
 13475                           ;doprnt.c: 721: flag |= 0x80;
 13476  00011E  0100               	movlb	0	; () banked
 13477  000120  8FAE               	bsf	printf@flag& (0+255),7,b
 13478                           
 13479                           ;doprnt.c: 723: break;
 13480  000122  D021               	goto	l9094
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;doprnt.c: 813: continue;
 13484                           
 13485                           ;doprnt.c: 802: default:
 13486  000124  EF1E  F006         	goto	l9348
 13487                           
 13488                           ; BSR set to: 0
 13489                           ;doprnt.c: 822: }
 13490  000128  D01E               	goto	l9094
 13491  00012A                     l9092:
 13492  00012A  C086  FFF6         	movff	printf@f,tblptrl
 13493  00012E  C087  FFF7         	movff	printf@f+1,tblptrh
 13494  000132  0100               	movlb	0	; () banked
 13495  000134  4B86               	infsnz	printf@f& (0+255),f,b
 13496  000136  2B87               	incf	(printf@f+1)& (0+255),f,b
 13497  000138                     	if	0	;tblptru may be non-zero
 13498  000138                     	endif
 13499  000138                     	if	0	;tblptru may be non-zero
 13500  000138                     	endif
 13501  000138  0008               	tblrd		*
 13502  00013A  CFF5 F0B3          	movff	tablat,printf@c
 13503  00013E  0100               	movlb	0	; () banked
 13504  000140  51B3               	movf	printf@c& (0+255),w,b
 13505                           
 13506                           ; Switch size 1, requested type "space"
 13507                           ; Number of cases is 5, Range of values is 0 to 120
 13508                           ; switch strategies available:
 13509                           ; Name         Instructions Cycles
 13510                           ; simple_byte           16     9 (average)
 13511                           ;	Chosen strategy is simple_byte
 13512  000142  0A00               	xorlw	0	; case 0
 13513  000144  B4D8               	btfsc	status,2,c
 13514  000146  EF2F  F006         	goto	l1466
 13515  00014A  0A64               	xorlw	100	; case 100
 13516  00014C  B4D8               	btfsc	status,2,c
 13517  00014E  D00B               	goto	l9094
 13518  000150  0A02               	xorlw	2	; case 102
 13519  000152  B4D8               	btfsc	status,2,c
 13520  000154  D7E1               	goto	l9086
 13521  000156  0A0F               	xorlw	15	; case 105
 13522  000158  B4D8               	btfsc	status,2,c
 13523  00015A  D005               	goto	l9094
 13524  00015C  0A11               	xorlw	17	; case 120
 13525  00015E  B4D8               	btfsc	status,2,c
 13526  000160  D7DE               	goto	l9088
 13527  000162  EF1E  F006         	goto	l9348
 13528  000166                     l9094:
 13529                           
 13530                           ; BSR set to: 0
 13531                           ;doprnt.c: 825: if(flag & (0x700)) {
 13532  000166  0E07               	movlw	7
 13533  000168  0100               	movlb	0	; () banked
 13534  00016A  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 13535  00016C  B4D8               	btfsc	status,2,c
 13536  00016E  D39A               	goto	l1384
 13537                           
 13538                           ; BSR set to: 0
 13539                           ;doprnt.c: 829: prec = 6;
 13540  000170  0E00               	movlw	0
 13541  000172  0100               	movlb	0	; () banked
 13542  000174  6FA1               	movwf	(printf@prec+1)& (0+255),b
 13543  000176  0E06               	movlw	6
 13544  000178  6FA0               	movwf	printf@prec& (0+255),b
 13545                           
 13546                           ; BSR set to: 0
 13547                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13548  00017A  C09E  FFD9         	movff	printf@ap,fsr2l
 13549  00017E  C09F  FFDA         	movff	printf@ap+1,fsr2h
 13550  000182  CFDE F0B0          	movff	postinc2,printf@fval
 13551  000186  CFDE F0B1          	movff	postinc2,printf@fval+1
 13552  00018A  CFDD F0B2          	movff	postdec2,printf@fval+2
 13553                           
 13554                           ; BSR set to: 0
 13555  00018E  0E03               	movlw	3
 13556  000190  0100               	movlb	0	; () banked
 13557  000192  279E               	addwf	printf@ap& (0+255),f,b
 13558  000194  0E00               	movlw	0
 13559  000196  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;doprnt.c: 831: if(fval < 0.0) {
 13563  000198  0100               	movlb	0	; () banked
 13564  00019A  AFB2               	btfss	(printf@fval+2)& (0+255),7,b
 13565  00019C  D012               	goto	l9108
 13566                           
 13567                           ; BSR set to: 0
 13568                           ;doprnt.c: 832: fval = -fval;
 13569  00019E  C0B0  F011         	movff	printf@fval,___ftneg@f1
 13570  0001A2  C0B1  F012         	movff	printf@fval+1,___ftneg@f1+1
 13571  0001A6  C0B2  F013         	movff	printf@fval+2,___ftneg@f1+2
 13572  0001AA  EC22  F025         	call	___ftneg	;wreg free
 13573  0001AE  C011  F0B0         	movff	?___ftneg,printf@fval
 13574  0001B2  C012  F0B1         	movff	?___ftneg+1,printf@fval+1
 13575  0001B6  C013  F0B2         	movff	?___ftneg+2,printf@fval+2
 13576                           
 13577                           ;doprnt.c: 833: flag |= 0x03;
 13578  0001BA  0E03               	movlw	3
 13579  0001BC  0100               	movlb	0	; () banked
 13580  0001BE  13AE               	iorwf	printf@flag& (0+255),f,b
 13581  0001C0  D000               	goto	l9108
 13582  0001C2                     l9108:
 13583                           
 13584                           ; BSR set to: 0
 13585                           ;doprnt.c: 834: }
 13586                           ;doprnt.c: 835: exp = 0;
 13587  0001C2  0E00               	movlw	0
 13588  0001C4  0100               	movlb	0	; () banked
 13589  0001C6  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13590  0001C8  0E00               	movlw	0
 13591  0001CA  6FA8               	movwf	printf@exp& (0+255),b
 13592                           
 13593                           ; BSR set to: 0
 13594                           ;doprnt.c: 836: if( fval!=0) {
 13595  0001CC  0100               	movlb	0	; () banked
 13596  0001CE  51B0               	movf	printf@fval& (0+255),w,b
 13597  0001D0  0100               	movlb	0	; () banked
 13598  0001D2  11B1               	iorwf	(printf@fval+1)& (0+255),w,b
 13599  0001D4  0100               	movlb	0	; () banked
 13600  0001D6  11B2               	iorwf	(printf@fval+2)& (0+255),w,b
 13601  0001D8  B4D8               	btfsc	status,2,c
 13602  0001DA  D093               	goto	l9136
 13603                           
 13604                           ; BSR set to: 0
 13605                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13606  0001DC  0E82               	movlw	130
 13607  0001DE  0100               	movlb	0	; () banked
 13608  0001E0  6F94               	movwf	??_printf& (0+255),b
 13609  0001E2  0EFF               	movlw	255
 13610  0001E4  0100               	movlb	0	; () banked
 13611  0001E6  6F95               	movwf	(??_printf+1)& (0+255),b
 13612  0001E8  C0B0  F096         	movff	printf@fval,??_printf+2
 13613  0001EC  C0B1  F097         	movff	printf@fval+1,??_printf+3
 13614  0001F0  C0B2  F098         	movff	printf@fval+2,??_printf+4
 13615  0001F4  C0B3  F099         	movff	printf@fval+3,??_printf+5
 13616  0001F8  0E10               	movlw	16
 13617  0001FA  D006               	goto	u7790
 13618  0001FC                     u7795:
 13619  0001FC  0100               	movlb	0	; () banked
 13620  0001FE  90D8               	bcf	status,0,c
 13621  000200  3399               	rrcf	(??_printf+5)& (0+255),f,b
 13622  000202  3398               	rrcf	(??_printf+4)& (0+255),f,b
 13623  000204  3397               	rrcf	(??_printf+3)& (0+255),f,b
 13624  000206  3396               	rrcf	(??_printf+2)& (0+255),f,b
 13625  000208                     u7790:
 13626  000208  2EE8               	decfsz	wreg,f,c
 13627  00020A  D7F8               	goto	u7795
 13628  00020C  0100               	movlb	0	; () banked
 13629  00020E  5196               	movf	(??_printf+2)& (0+255),w,b
 13630  000210  0100               	movlb	0	; () banked
 13631  000212  2594               	addwf	??_printf& (0+255),w,b
 13632  000214  0100               	movlb	0	; () banked
 13633  000216  6FA8               	movwf	printf@exp& (0+255),b
 13634  000218  0E00               	movlw	0
 13635  00021A  0100               	movlb	0	; () banked
 13636  00021C  2195               	addwfc	(??_printf+1)& (0+255),w,b
 13637  00021E  0100               	movlb	0	; () banked
 13638  000220  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;doprnt.c: 838: exp--;
 13642  000222  0100               	movlb	0	; () banked
 13643  000224  07A8               	decf	printf@exp& (0+255),f,b
 13644  000226  A0D8               	btfss	status,0,c
 13645  000228  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13646                           
 13647                           ; BSR set to: 0
 13648                           ;doprnt.c: 839: exp *= 3;
 13649  00022A  C0A8  F011         	movff	printf@exp,___wmul@multiplier
 13650  00022E  C0A9  F012         	movff	printf@exp+1,___wmul@multiplier+1
 13651  000232  0E00               	movlw	0
 13652  000234  6E14               	movwf	___wmul@multiplicand+1,c
 13653  000236  0E03               	movlw	3
 13654  000238  6E13               	movwf	___wmul@multiplicand,c
 13655  00023A  ECD5  F024         	call	___wmul	;wreg free
 13656  00023E  C011  F0A8         	movff	?___wmul,printf@exp
 13657  000242  C012  F0A9         	movff	?___wmul+1,printf@exp+1
 13658                           
 13659                           ;doprnt.c: 840: exp /= 10;
 13660  000246  C0A8  F017         	movff	printf@exp,___awdiv@dividend
 13661  00024A  C0A9  F018         	movff	printf@exp+1,___awdiv@dividend+1
 13662  00024E  0E00               	movlw	0
 13663  000250  6E1A               	movwf	___awdiv@divisor+1,c
 13664  000252  0E0A               	movlw	10
 13665  000254  6E19               	movwf	___awdiv@divisor,c
 13666  000256  EC31  F01E         	call	___awdiv	;wreg free
 13667  00025A  C017  F0A8         	movff	?___awdiv,printf@exp
 13668  00025E  C018  F0A9         	movff	?___awdiv+1,printf@exp+1
 13669                           
 13670                           ;doprnt.c: 841: if(exp < 0)
 13671  000262  0100               	movlb	0	; () banked
 13672  000264  AFA9               	btfss	(printf@exp+1)& (0+255),7,b
 13673  000266  D005               	goto	l9124
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;doprnt.c: 842: exp--;
 13677  000268  0100               	movlb	0	; () banked
 13678  00026A  07A8               	decf	printf@exp& (0+255),f,b
 13679  00026C  A0D8               	btfss	status,0,c
 13680  00026E  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13681  000270  D000               	goto	l9124
 13682  000272                     l9124:
 13683                           
 13684                           ; BSR set to: 0
 13685                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13686  000272  0100               	movlb	0	; () banked
 13687  000274  51A8               	movf	printf@exp& (0+255),w,b
 13688  000276  0800               	sublw	0
 13689  000278  ECA5  F009         	call	_scale
 13690  00027C  C043  F0A2         	movff	?_scale,printf@tmpval
 13691  000280  C044  F0A3         	movff	?_scale+1,printf@tmpval+1
 13692  000284  C045  F0A4         	movff	?_scale+2,printf@tmpval+2
 13693                           
 13694                           ;doprnt.c: 847: tmpval.integ *= fval;
 13695  000288  C0A2  F01F         	movff	printf@tmpval,___ftmul@f1
 13696  00028C  C0A3  F020         	movff	printf@tmpval+1,___ftmul@f1+1
 13697  000290  C0A4  F021         	movff	printf@tmpval+2,___ftmul@f1+2
 13698  000294  C0B0  F022         	movff	printf@fval,___ftmul@f2
 13699  000298  C0B1  F023         	movff	printf@fval+1,___ftmul@f2+1
 13700  00029C  C0B2  F024         	movff	printf@fval+2,___ftmul@f2+2
 13701  0002A0  ECF4  F018         	call	___ftmul	;wreg free
 13702  0002A4  C01F  F0A2         	movff	?___ftmul,printf@tmpval
 13703  0002A8  C020  F0A3         	movff	?___ftmul+1,printf@tmpval+1
 13704  0002AC  C021  F0A4         	movff	?___ftmul+2,printf@tmpval+2
 13705                           
 13706                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13707  0002B0  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13708  0002B4  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13709  0002B8  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13710  0002BC  0E00               	movlw	0
 13711  0002BE  6E14               	movwf	___ftge@ff2,c
 13712  0002C0  0E80               	movlw	128
 13713  0002C2  6E15               	movwf	___ftge@ff2+1,c
 13714  0002C4  0E3F               	movlw	63
 13715  0002C6  6E16               	movwf	___ftge@ff2+2,c
 13716  0002C8  EC7C  F01E         	call	___ftge	;wreg free
 13717  0002CC  B0D8               	btfsc	status,0,c
 13718  0002CE  D005               	goto	l9132
 13719                           
 13720                           ;doprnt.c: 849: exp--;
 13721  0002D0  0100               	movlb	0	; () banked
 13722  0002D2  07A8               	decf	printf@exp& (0+255),f,b
 13723  0002D4  A0D8               	btfss	status,0,c
 13724  0002D6  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13725  0002D8  D014               	goto	l9136
 13726  0002DA                     l9132:
 13727                           
 13728                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13729  0002DA  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13730  0002DE  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13731  0002E2  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13732  0002E6  0E00               	movlw	0
 13733  0002E8  6E14               	movwf	___ftge@ff2,c
 13734  0002EA  0E20               	movlw	32
 13735  0002EC  6E15               	movwf	___ftge@ff2+1,c
 13736  0002EE  0E41               	movlw	65
 13737  0002F0  6E16               	movwf	___ftge@ff2+2,c
 13738  0002F2  EC7C  F01E         	call	___ftge	;wreg free
 13739  0002F6  A0D8               	btfss	status,0,c
 13740  0002F8  D004               	goto	l9136
 13741                           
 13742                           ;doprnt.c: 851: exp++;
 13743  0002FA  0100               	movlb	0	; () banked
 13744  0002FC  4BA8               	infsnz	printf@exp& (0+255),f,b
 13745  0002FE  2BA9               	incf	(printf@exp+1)& (0+255),f,b
 13746                           
 13747                           ; BSR set to: 0
 13748                           
 13749                           ; BSR set to: 0
 13750  000300  D000               	goto	l9136
 13751  000302                     l9136:
 13752                           
 13753                           ;doprnt.c: 852: }
 13754                           ;doprnt.c: 1112: if(prec <= 12)
 13755  000302  0100               	movlb	0	; () banked
 13756  000304  BFA1               	btfsc	(printf@prec+1)& (0+255),7,b
 13757  000306  D008               	goto	l9138
 13758  000308  0100               	movlb	0	; () banked
 13759  00030A  51A1               	movf	(printf@prec+1)& (0+255),w,b
 13760  00030C  E11E               	bnz	l9140
 13761  00030E  0E0D               	movlw	13
 13762  000310  0100               	movlb	0	; () banked
 13763  000312  5DA0               	subwf	printf@prec& (0+255),w,b
 13764  000314  B0D8               	btfsc	status,0,c
 13765  000316  D019               	goto	l9140
 13766  000318                     l9138:
 13767                           
 13768                           ; BSR set to: 0
 13769                           ;doprnt.c: 1113: fval += fround(prec);
 13770  000318  C0B0  F04D         	movff	printf@fval,___ftadd@f1
 13771  00031C  C0B1  F04E         	movff	printf@fval+1,___ftadd@f1+1
 13772  000320  C0B2  F04F         	movff	printf@fval+2,___ftadd@f1+2
 13773  000324  0100               	movlb	0	; () banked
 13774  000326  51A0               	movf	printf@prec& (0+255),w,b
 13775  000328  ECC3  F00E         	call	_fround
 13776  00032C  C043  F050         	movff	?_fround,___ftadd@f2
 13777  000330  C044  F051         	movff	?_fround+1,___ftadd@f2+1
 13778  000334  C045  F052         	movff	?_fround+2,___ftadd@f2+2
 13779  000338  ECF5  F011         	call	___ftadd	;wreg free
 13780  00033C  C04D  F0B0         	movff	?___ftadd,printf@fval
 13781  000340  C04E  F0B1         	movff	?___ftadd+1,printf@fval+1
 13782  000344  C04F  F0B2         	movff	?___ftadd+2,printf@fval+2
 13783  000348  D000               	goto	l9140
 13784  00034A                     l9140:
 13785                           
 13786                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13787  00034A  0100               	movlb	0	; () banked
 13788  00034C  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 13789  00034E  D008               	goto	l9142
 13790  000350  0100               	movlb	0	; () banked
 13791  000352  51A9               	movf	(printf@exp+1)& (0+255),w,b
 13792  000354  E128               	bnz	l9148
 13793  000356  0E0A               	movlw	10
 13794  000358  0100               	movlb	0	; () banked
 13795  00035A  5DA8               	subwf	printf@exp& (0+255),w,b
 13796  00035C  B0D8               	btfsc	status,0,c
 13797  00035E  D023               	goto	l9148
 13798  000360                     l9142:
 13799                           
 13800                           ; BSR set to: 0
 13801  000360  0100               	movlb	0	; () banked
 13802  000362  51B0               	movf	printf@fval& (0+255),w,b
 13803  000364  0100               	movlb	0	; () banked
 13804  000366  11B1               	iorwf	(printf@fval+1)& (0+255),w,b
 13805  000368  0100               	movlb	0	; () banked
 13806  00036A  11B2               	iorwf	(printf@fval+2)& (0+255),w,b
 13807  00036C  B4D8               	btfsc	status,2,c
 13808  00036E  D077               	goto	l9162
 13809                           
 13810                           ; BSR set to: 0
 13811  000370  C0B0  F02E         	movff	printf@fval,___fttol@f1
 13812  000374  C0B1  F02F         	movff	printf@fval+1,___fttol@f1+1
 13813  000378  C0B2  F030         	movff	printf@fval+2,___fttol@f1+2
 13814  00037C  EC5E  F01A         	call	___fttol	;wreg free
 13815  000380  502E               	movf	?___fttol,w,c
 13816  000382  102F               	iorwf	?___fttol+1,w,c
 13817  000384  1030               	iorwf	?___fttol+2,w,c
 13818  000386  1031               	iorwf	?___fttol+3,w,c
 13819  000388  A4D8               	btfss	status,2,c
 13820  00038A  D069               	goto	l9162
 13821  00038C  0100               	movlb	0	; () banked
 13822  00038E  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 13823  000390  D066               	goto	l9162
 13824  000392  0100               	movlb	0	; () banked
 13825  000394  51A9               	movf	(printf@exp+1)& (0+255),w,b
 13826  000396  E107               	bnz	l9148
 13827  000398  0E02               	movlw	2
 13828  00039A  0100               	movlb	0	; () banked
 13829  00039C  5DA8               	subwf	printf@exp& (0+255),w,b
 13830  00039E  B0D8               	btfsc	status,0,c
 13831  0003A0  D002               	goto	l9148
 13832  0003A2  D05D               	goto	l9162
 13833  0003A4  D000               	goto	l9148
 13834  0003A6                     l9148:
 13835                           
 13836                           ; BSR set to: 0
 13837                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13838  0003A6  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13839  0003AA  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13840  0003AE  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13841  0003B2  0E70               	movlw	112
 13842  0003B4  6E14               	movwf	___ftge@ff2,c
 13843  0003B6  0E89               	movlw	137
 13844  0003B8  6E15               	movwf	___ftge@ff2+1,c
 13845  0003BA  0E40               	movlw	64
 13846  0003BC  6E16               	movwf	___ftge@ff2+2,c
 13847  0003BE  EC7C  F01E         	call	___ftge	;wreg free
 13848  0003C2  B0D8               	btfsc	status,0,c
 13849  0003C4  D003               	goto	l9152
 13850                           
 13851                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13852  0003C6  0100               	movlb	0	; () banked
 13853  0003C8  0EF7               	movlw	247
 13854  0003CA  D002               	goto	L9
 13855  0003CC                     l9152:
 13856                           
 13857                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13858  0003CC  0100               	movlb	0	; () banked
 13859  0003CE  0EF8               	movlw	248
 13860  0003D0                     L9:
 13861  0003D0  27A8               	addwf	printf@exp& (0+255),f,b
 13862  0003D2  0EFF               	movlw	255
 13863  0003D4  23A9               	addwfc	(printf@exp+1)& (0+255),f,b
 13864  0003D6  D000               	goto	l9154
 13865  0003D8                     l9154:
 13866                           
 13867                           ; BSR set to: 0
 13868                           ;doprnt.c: 1124: }
 13869                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13870  0003D8  0100               	movlb	0	; () banked
 13871  0003DA  51A8               	movf	printf@exp& (0+255),w,b
 13872  0003DC  ECA5  F009         	call	_scale
 13873  0003E0  C043  F0A2         	movff	?_scale,printf@tmpval
 13874  0003E4  C044  F0A3         	movff	?_scale+1,printf@tmpval+1
 13875  0003E8  C045  F0A4         	movff	?_scale+2,printf@tmpval+2
 13876                           
 13877                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13878  0003EC  D017               	goto	l9158
 13879  0003EE  C0B0  F011         	movff	printf@fval,__div_to_l_@f1
 13880  0003F2  C0B1  F012         	movff	printf@fval+1,__div_to_l_@f1+1
 13881  0003F6  C0B2  F013         	movff	printf@fval+2,__div_to_l_@f1+2
 13882  0003FA  C0A2  F014         	movff	printf@tmpval,__div_to_l_@f2
 13883  0003FE  C0A3  F015         	movff	printf@tmpval+1,__div_to_l_@f2+1
 13884  000402  C0A4  F016         	movff	printf@tmpval+2,__div_to_l_@f2+2
 13885  000406  EC6F  F018         	call	__div_to_l_	;wreg free
 13886  00040A  C011  F0AA         	movff	?__div_to_l_,printf@val
 13887  00040E  C012  F0AB         	movff	?__div_to_l_+1,printf@val+1
 13888  000412  C013  F0AC         	movff	?__div_to_l_+2,printf@val+2
 13889  000416  C014  F0AD         	movff	?__div_to_l_+3,printf@val+3
 13890  00041A  D017               	goto	l9160
 13891  00041C                     l9158:
 13892  00041C  C0B0  F011         	movff	printf@fval,__tdiv_to_l_@f1
 13893  000420  C0B1  F012         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 13894  000424  C0B2  F013         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 13895  000428  C0A2  F014         	movff	printf@tmpval,__tdiv_to_l_@f2
 13896  00042C  C0A3  F015         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 13897  000430  C0A4  F016         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 13898  000434  ECE7  F017         	call	__tdiv_to_l_	;wreg free
 13899  000438  C011  F0AA         	movff	?__tdiv_to_l_,printf@val
 13900  00043C  C012  F0AB         	movff	?__tdiv_to_l_+1,printf@val+1
 13901  000440  C013  F0AC         	movff	?__tdiv_to_l_+2,printf@val+2
 13902  000444  C014  F0AD         	movff	?__tdiv_to_l_+3,printf@val+3
 13903  000448  D000               	goto	l9160
 13904  00044A                     l9160:
 13905                           
 13906                           ;doprnt.c: 1129: fval = 0.0;
 13907  00044A  0E00               	movlw	0
 13908  00044C  0100               	movlb	0	; () banked
 13909  00044E  6FB0               	movwf	printf@fval& (0+255),b
 13910  000450  0E00               	movlw	0
 13911  000452  0100               	movlb	0	; () banked
 13912  000454  6FB1               	movwf	(printf@fval+1)& (0+255),b
 13913  000456  0E00               	movlw	0
 13914  000458  0100               	movlb	0	; () banked
 13915  00045A  6FB2               	movwf	(printf@fval+2)& (0+255),b
 13916                           
 13917                           ;doprnt.c: 1130: } else {
 13918  00045C  D034               	goto	l9166
 13919  00045E                     l9162:
 13920                           
 13921                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13922  00045E  C0B0  F02E         	movff	printf@fval,___fttol@f1
 13923  000462  C0B1  F02F         	movff	printf@fval+1,___fttol@f1+1
 13924  000466  C0B2  F030         	movff	printf@fval+2,___fttol@f1+2
 13925  00046A  EC5E  F01A         	call	___fttol	;wreg free
 13926  00046E  C02E  F0AA         	movff	?___fttol,printf@val
 13927  000472  C02F  F0AB         	movff	?___fttol+1,printf@val+1
 13928  000476  C030  F0AC         	movff	?___fttol+2,printf@val+2
 13929  00047A  C031  F0AD         	movff	?___fttol+3,printf@val+3
 13930                           
 13931                           ;doprnt.c: 1132: fval -= (double)val;
 13932  00047E  C0B0  F080         	movff	printf@fval,___ftsub@f1
 13933  000482  C0B1  F081         	movff	printf@fval+1,___ftsub@f1+1
 13934  000486  C0B2  F082         	movff	printf@fval+2,___ftsub@f1+2
 13935  00048A  C0AA  F019         	movff	printf@val,___lltoft@c
 13936  00048E  C0AB  F01A         	movff	printf@val+1,___lltoft@c+1
 13937  000492  C0AC  F01B         	movff	printf@val+2,___lltoft@c+2
 13938  000496  C0AD  F01C         	movff	printf@val+3,___lltoft@c+3
 13939  00049A  ECAE  F021         	call	___lltoft	;wreg free
 13940  00049E  C019  F083         	movff	?___lltoft,___ftsub@f2
 13941  0004A2  C01A  F084         	movff	?___lltoft+1,___ftsub@f2+1
 13942  0004A6  C01B  F085         	movff	?___lltoft+2,___ftsub@f2+2
 13943  0004AA  EC8C  F022         	call	___ftsub	;wreg free
 13944  0004AE  C080  F0B0         	movff	?___ftsub,printf@fval
 13945  0004B2  C081  F0B1         	movff	?___ftsub+1,printf@fval+1
 13946  0004B6  C082  F0B2         	movff	?___ftsub+2,printf@fval+2
 13947                           
 13948                           ;doprnt.c: 1133: exp = 0;
 13949  0004BA  0E00               	movlw	0
 13950  0004BC  0100               	movlb	0	; () banked
 13951  0004BE  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13952  0004C0  0E00               	movlw	0
 13953  0004C2  6FA8               	movwf	printf@exp& (0+255),b
 13954  0004C4  D000               	goto	l9166
 13955  0004C6                     l9166:
 13956                           
 13957                           ; BSR set to: 0
 13958                           ;doprnt.c: 1134: }
 13959                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13960  0004C6  0E01               	movlw	1
 13961  0004C8  0100               	movlb	0	; () banked
 13962  0004CA  6FB3               	movwf	printf@c& (0+255),b
 13963  0004CC                     l9168:
 13964                           
 13965                           ; BSR set to: 0
 13966  0004CC  0E0A               	movlw	10
 13967  0004CE  0100               	movlb	0	; () banked
 13968  0004D0  19B3               	xorwf	printf@c& (0+255),w,b
 13969  0004D2  B4D8               	btfsc	status,2,c
 13970  0004D4  D022               	goto	l9180
 13971  0004D6  D001               	goto	l9172
 13972                           
 13973                           ; BSR set to: 0
 13974  0004D8  D020               	goto	l9180
 13975  0004DA                     l9172:
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;doprnt.c: 1137: if(val < dpowers[c])
 13979  0004DA  0100               	movlb	0	; () banked
 13980  0004DC  51B3               	movf	printf@c& (0+255),w,b
 13981  0004DE  0D04               	mullw	4
 13982  0004E0  0E9C               	movlw	low _dpowers
 13983  0004E2  24F3               	addwf	prodl,w,c
 13984  0004E4  6EF6               	movwf	tblptrl,c
 13985  0004E6  0EFD               	movlw	high _dpowers
 13986  0004E8  20F4               	addwfc	prodh,w,c
 13987  0004EA  6EF7               	movwf	tblptrh,c
 13988  0004EC                     	if	0	;There are less than 3 active tblptr bytes
 13989  0004EC                     	endif
 13990  0004EC  0009               	tblrd		*+
 13991  0004EE  50F5               	movf	tablat,w,c
 13992  0004F0  0100               	movlb	0	; () banked
 13993  0004F2  5DAA               	subwf	printf@val& (0+255),w,b
 13994  0004F4  0009               	tblrd		*+
 13995  0004F6  50F5               	movf	tablat,w,c
 13996  0004F8  0100               	movlb	0	; () banked
 13997  0004FA  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 13998  0004FC  0009               	tblrd		*+
 13999  0004FE  50F5               	movf	tablat,w,c
 14000  000500  0100               	movlb	0	; () banked
 14001  000502  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14002  000504  0009               	tblrd		*+
 14003  000506  50F5               	movf	tablat,w,c
 14004  000508  0100               	movlb	0	; () banked
 14005  00050A  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14006  00050C  A0D8               	btfss	status,0,c
 14007  00050E  D005               	goto	l9180
 14008  000510  D001               	goto	l9176
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;doprnt.c: 1138: break;
 14012  000512  D003               	goto	l9180
 14013  000514                     l9176:
 14014                           
 14015                           ; BSR set to: 0
 14016  000514  0100               	movlb	0	; () banked
 14017  000516  2BB3               	incf	printf@c& (0+255),f,b
 14018  000518  D7D9               	goto	l9168
 14019  00051A                     l9180:
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;doprnt.c: 1142: width -= prec + c + exp;
 14023  00051A  C0B3  F094         	movff	printf@c,??_printf
 14024  00051E  0100               	movlb	0	; () banked
 14025  000520  6B95               	clrf	(??_printf+1)& (0+255),b
 14026  000522  BF94               	btfsc	??_printf& (0+255),7,b
 14027  000524  0795               	decf	(??_printf+1)& (0+255),f,b
 14028  000526  0100               	movlb	0	; () banked
 14029  000528  51A0               	movf	printf@prec& (0+255),w,b
 14030  00052A  0100               	movlb	0	; () banked
 14031  00052C  2794               	addwf	??_printf& (0+255),f,b
 14032  00052E  0100               	movlb	0	; () banked
 14033  000530  51A1               	movf	(printf@prec+1)& (0+255),w,b
 14034  000532  0100               	movlb	0	; () banked
 14035  000534  2395               	addwfc	(??_printf+1)& (0+255),f,b
 14036  000536  0100               	movlb	0	; () banked
 14037  000538  51A8               	movf	printf@exp& (0+255),w,b
 14038  00053A  0100               	movlb	0	; () banked
 14039  00053C  2794               	addwf	??_printf& (0+255),f,b
 14040  00053E  0100               	movlb	0	; () banked
 14041  000540  51A9               	movf	(printf@exp+1)& (0+255),w,b
 14042  000542  0100               	movlb	0	; () banked
 14043  000544  2395               	addwfc	(??_printf+1)& (0+255),f,b
 14044  000546  0100               	movlb	0	; () banked
 14045  000548  5194               	movf	??_printf& (0+255),w,b
 14046  00054A  0100               	movlb	0	; () banked
 14047  00054C  5FA6               	subwf	printf@width& (0+255),f,b
 14048  00054E  0100               	movlb	0	; () banked
 14049  000550  5195               	movf	(??_printf+1)& (0+255),w,b
 14050  000552  0100               	movlb	0	; () banked
 14051  000554  5BA7               	subwfb	(printf@width+1)& (0+255),f,b
 14052                           
 14053                           ;doprnt.c: 1143: if(
 14054                           ;doprnt.c: 1147: prec)
 14055  000556  0100               	movlb	0	; () banked
 14056  000558  51A0               	movf	printf@prec& (0+255),w,b
 14057  00055A  0100               	movlb	0	; () banked
 14058  00055C  11A1               	iorwf	(printf@prec+1)& (0+255),w,b
 14059  00055E  B4D8               	btfsc	status,2,c
 14060  000560  D005               	goto	l9184
 14061                           
 14062                           ; BSR set to: 0
 14063                           ;doprnt.c: 1148: width--;
 14064  000562  0100               	movlb	0	; () banked
 14065  000564  07A6               	decf	printf@width& (0+255),f,b
 14066  000566  A0D8               	btfss	status,0,c
 14067  000568  07A7               	decf	(printf@width+1)& (0+255),f,b
 14068  00056A  D000               	goto	l9184
 14069  00056C                     l9184:
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;doprnt.c: 1149: if(flag & 0x03)
 14073  00056C  0E03               	movlw	3
 14074  00056E  0100               	movlb	0	; () banked
 14075  000570  15AE               	andwf	printf@flag& (0+255),w,b
 14076  000572  0100               	movlb	0	; () banked
 14077  000574  6F94               	movwf	??_printf& (0+255),b
 14078  000576  0E00               	movlw	0
 14079  000578  0100               	movlb	0	; () banked
 14080  00057A  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14081  00057C  0100               	movlb	0	; () banked
 14082  00057E  6F95               	movwf	(??_printf+1)& (0+255),b
 14083  000580  0100               	movlb	0	; () banked
 14084  000582  5194               	movf	??_printf& (0+255),w,b
 14085  000584  0100               	movlb	0	; () banked
 14086  000586  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14087  000588  B4D8               	btfsc	status,2,c
 14088  00058A  D005               	goto	l9188
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;doprnt.c: 1150: width--;
 14092  00058C  0100               	movlb	0	; () banked
 14093  00058E  07A6               	decf	printf@width& (0+255),f,b
 14094  000590  A0D8               	btfss	status,0,c
 14095  000592  07A7               	decf	(printf@width+1)& (0+255),f,b
 14096  000594  D000               	goto	l9188
 14097  000596                     l9188:
 14098                           
 14099                           ; BSR set to: 0
 14100                           ;doprnt.c: 1153: if(flag & 0x04) {
 14101  000596  0100               	movlb	0	; () banked
 14102  000598  A5AE               	btfss	printf@flag& (0+255),2,b
 14103  00059A  D031               	goto	l9204
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;doprnt.c: 1157: if(flag & 0x03)
 14107  00059C  0E03               	movlw	3
 14108  00059E  0100               	movlb	0	; () banked
 14109  0005A0  15AE               	andwf	printf@flag& (0+255),w,b
 14110  0005A2  0100               	movlb	0	; () banked
 14111  0005A4  6F94               	movwf	??_printf& (0+255),b
 14112  0005A6  0E00               	movlw	0
 14113  0005A8  0100               	movlb	0	; () banked
 14114  0005AA  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14115  0005AC  0100               	movlb	0	; () banked
 14116  0005AE  6F95               	movwf	(??_printf+1)& (0+255),b
 14117  0005B0  0100               	movlb	0	; () banked
 14118  0005B2  5194               	movf	??_printf& (0+255),w,b
 14119  0005B4  0100               	movlb	0	; () banked
 14120  0005B6  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14121  0005B8  B4D8               	btfsc	status,2,c
 14122  0005BA  D00C               	goto	l9198
 14123                           
 14124                           ; BSR set to: 0
 14125                           ;doprnt.c: 1159: (putch('-') );
 14126  0005BC  0E2D               	movlw	45
 14127  0005BE  ECC8  F026         	call	_putch
 14128                           
 14129                           ;doprnt.c: 1168: while(width > 0) {
 14130  0005C2  D008               	goto	l9198
 14131  0005C4                     l9194:
 14132                           
 14133                           ;doprnt.c: 1169: (putch('0') );
 14134  0005C4  0E30               	movlw	48
 14135  0005C6  ECC8  F026         	call	_putch
 14136                           
 14137                           ;doprnt.c: 1170: width--;
 14138  0005CA  0100               	movlb	0	; () banked
 14139  0005CC  07A6               	decf	printf@width& (0+255),f,b
 14140  0005CE  A0D8               	btfss	status,0,c
 14141  0005D0  07A7               	decf	(printf@width+1)& (0+255),f,b
 14142  0005D2  D000               	goto	l9198
 14143  0005D4                     l9198:
 14144  0005D4  0100               	movlb	0	; () banked
 14145  0005D6  BFA7               	btfsc	(printf@width+1)& (0+255),7,b
 14146  0005D8  D077               	goto	l9216
 14147  0005DA  0100               	movlb	0	; () banked
 14148  0005DC  51A7               	movf	(printf@width+1)& (0+255),w,b
 14149  0005DE  E1F2               	bnz	l9194
 14150  0005E0  0100               	movlb	0	; () banked
 14151  0005E2  05A6               	decf	printf@width& (0+255),w,b
 14152  0005E4  A0D8               	btfss	status,0,c
 14153  0005E6  D070               	goto	l9216
 14154  0005E8  D7ED               	goto	l9194
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;doprnt.c: 1171: }
 14158                           ;doprnt.c: 1173: } else
 14159  0005EA  D06E               	goto	l9216
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;doprnt.c: 1175: {
 14163                           ;doprnt.c: 1180: while(width > 0) {
 14164  0005EC  D008               	goto	l9204
 14165  0005EE                     l9200:
 14166                           
 14167                           ; BSR set to: 0
 14168                           ;doprnt.c: 1181: (putch(' ') );
 14169  0005EE  0E20               	movlw	32
 14170  0005F0  ECC8  F026         	call	_putch
 14171                           
 14172                           ;doprnt.c: 1182: width--;
 14173  0005F4  0100               	movlb	0	; () banked
 14174  0005F6  07A6               	decf	printf@width& (0+255),f,b
 14175  0005F8  A0D8               	btfss	status,0,c
 14176  0005FA  07A7               	decf	(printf@width+1)& (0+255),f,b
 14177  0005FC  D000               	goto	l9204
 14178  0005FE                     l9204:
 14179                           
 14180                           ; BSR set to: 0
 14181  0005FE  0100               	movlb	0	; () banked
 14182  000600  BFA7               	btfsc	(printf@width+1)& (0+255),7,b
 14183  000602  D007               	goto	l9206
 14184  000604  0100               	movlb	0	; () banked
 14185  000606  51A7               	movf	(printf@width+1)& (0+255),w,b
 14186  000608  E1F2               	bnz	l9200
 14187  00060A  0100               	movlb	0	; () banked
 14188  00060C  05A6               	decf	printf@width& (0+255),w,b
 14189  00060E  B0D8               	btfsc	status,0,c
 14190  000610  D7EE               	goto	l9200
 14191  000612                     l9206:
 14192                           
 14193                           ; BSR set to: 0
 14194                           ;doprnt.c: 1183: }
 14195                           ;doprnt.c: 1188: if(flag & 0x03)
 14196  000612  0E03               	movlw	3
 14197  000614  0100               	movlb	0	; () banked
 14198  000616  15AE               	andwf	printf@flag& (0+255),w,b
 14199  000618  0100               	movlb	0	; () banked
 14200  00061A  6F94               	movwf	??_printf& (0+255),b
 14201  00061C  0E00               	movlw	0
 14202  00061E  0100               	movlb	0	; () banked
 14203  000620  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14204  000622  0100               	movlb	0	; () banked
 14205  000624  6F95               	movwf	(??_printf+1)& (0+255),b
 14206  000626  0100               	movlb	0	; () banked
 14207  000628  5194               	movf	??_printf& (0+255),w,b
 14208  00062A  0100               	movlb	0	; () banked
 14209  00062C  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14210  00062E  B4D8               	btfsc	status,2,c
 14211  000630  D04B               	goto	l9216
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;doprnt.c: 1190: (putch('-') );
 14215  000632  0E2D               	movlw	45
 14216  000634  ECC8  F026         	call	_putch
 14217                           
 14218                           ;doprnt.c: 1195: }
 14219                           ;doprnt.c: 1196: while(c--) {
 14220  000638  D047               	goto	l9216
 14221  00063A                     l9210:
 14222                           
 14223                           ;doprnt.c: 1200: {
 14224                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 14225  00063A  C0AA  F011         	movff	printf@val,___lldiv@dividend
 14226  00063E  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 14227  000642  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 14228  000646  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 14229  00064A  0100               	movlb	0	; () banked
 14230  00064C  51B3               	movf	printf@c& (0+255),w,b
 14231  00064E  0D04               	mullw	4
 14232  000650  0E9C               	movlw	low _dpowers
 14233  000652  24F3               	addwf	prodl,w,c
 14234  000654  6EF6               	movwf	tblptrl,c
 14235  000656  0EFD               	movlw	high _dpowers
 14236  000658  20F4               	addwfc	prodh,w,c
 14237  00065A  6EF7               	movwf	tblptrh,c
 14238  00065C                     	if	0	;There are less than 3 active tblptr bytes
 14239  00065C                     	endif
 14240  00065C  0009               	tblrd		*+
 14241  00065E  CFF5 F015          	movff	tablat,___lldiv@divisor
 14242  000662  0009               	tblrd		*+
 14243  000664  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14244  000668  0009               	tblrd		*+
 14245  00066A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14246  00066E  000A               	tblrd		*-
 14247  000670  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14248  000674  EC55  F01F         	call	___lldiv	;wreg free
 14249  000678  C011  F0A2         	movff	?___lldiv,printf@tmpval
 14250  00067C  C012  F0A3         	movff	?___lldiv+1,printf@tmpval+1
 14251  000680  C013  F0A4         	movff	?___lldiv+2,printf@tmpval+2
 14252  000684  C014  F0A5         	movff	?___lldiv+3,printf@tmpval+3
 14253                           
 14254                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14255  000688  C0A2  F01E         	movff	printf@tmpval,___llmod@dividend
 14256  00068C  C0A3  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14257  000690  C0A4  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14258  000694  C0A5  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14259  000698  0E0A               	movlw	10
 14260  00069A  6E22               	movwf	___llmod@divisor,c
 14261  00069C  0E00               	movlw	0
 14262  00069E  6E23               	movwf	___llmod@divisor+1,c
 14263  0006A0  0E00               	movlw	0
 14264  0006A2  6E24               	movwf	___llmod@divisor+2,c
 14265  0006A4  0E00               	movlw	0
 14266  0006A6  6E25               	movwf	___llmod@divisor+3,c
 14267  0006A8  ECA3  F020         	call	___llmod	;wreg free
 14268  0006AC  C01E  F0A2         	movff	?___llmod,printf@tmpval
 14269  0006B0  C01F  F0A3         	movff	?___llmod+1,printf@tmpval+1
 14270  0006B4  C020  F0A4         	movff	?___llmod+2,printf@tmpval+2
 14271  0006B8  C021  F0A5         	movff	?___llmod+3,printf@tmpval+3
 14272                           
 14273                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14274  0006BC  0100               	movlb	0	; () banked
 14275  0006BE  51A2               	movf	printf@tmpval& (0+255),w,b
 14276  0006C0  0F30               	addlw	48
 14277  0006C2  ECC8  F026         	call	_putch
 14278  0006C6  D000               	goto	l9216
 14279  0006C8                     l9216:
 14280  0006C8  0100               	movlb	0	; () banked
 14281  0006CA  07B3               	decf	printf@c& (0+255),f,b
 14282  0006CC  0100               	movlb	0	; () banked
 14283  0006CE  29B3               	incf	printf@c& (0+255),w,b
 14284  0006D0  B4D8               	btfsc	status,2,c
 14285  0006D2  D00A               	goto	l9222
 14286  0006D4  D7B2               	goto	l9210
 14287                           
 14288                           ; BSR set to: 0
 14289                           ;doprnt.c: 1204: }
 14290                           ;doprnt.c: 1206: }
 14291                           ;doprnt.c: 1207: while(exp > 0) {
 14292  0006D6  D008               	goto	l9222
 14293  0006D8                     l9218:
 14294                           
 14295                           ; BSR set to: 0
 14296                           ;doprnt.c: 1208: (putch('0') );
 14297  0006D8  0E30               	movlw	48
 14298  0006DA  ECC8  F026         	call	_putch
 14299                           
 14300                           ;doprnt.c: 1209: exp--;
 14301  0006DE  0100               	movlb	0	; () banked
 14302  0006E0  07A8               	decf	printf@exp& (0+255),f,b
 14303  0006E2  A0D8               	btfss	status,0,c
 14304  0006E4  07A9               	decf	(printf@exp+1)& (0+255),f,b
 14305  0006E6  D000               	goto	l9222
 14306  0006E8                     l9222:
 14307                           
 14308                           ; BSR set to: 0
 14309  0006E8  0100               	movlb	0	; () banked
 14310  0006EA  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 14311  0006EC  D007               	goto	l9224
 14312  0006EE  0100               	movlb	0	; () banked
 14313  0006F0  51A9               	movf	(printf@exp+1)& (0+255),w,b
 14314  0006F2  E1F2               	bnz	l9218
 14315  0006F4  0100               	movlb	0	; () banked
 14316  0006F6  05A8               	decf	printf@exp& (0+255),w,b
 14317  0006F8  B0D8               	btfsc	status,0,c
 14318  0006FA  D7EE               	goto	l9218
 14319  0006FC                     l9224:
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;doprnt.c: 1210: }
 14323                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14324  0006FC  0100               	movlb	0	; () banked
 14325  0006FE  BFA1               	btfsc	(printf@prec+1)& (0+255),7,b
 14326  000700  D00C               	goto	l1423
 14327  000702  0100               	movlb	0	; () banked
 14328  000704  51A1               	movf	(printf@prec+1)& (0+255),w,b
 14329  000706  E105               	bnz	u8010
 14330  000708  0E09               	movlw	9
 14331  00070A  0100               	movlb	0	; () banked
 14332  00070C  5DA0               	subwf	printf@prec& (0+255),w,b
 14333  00070E  A0D8               	btfss	status,0,c
 14334  000710  D004               	goto	l1423
 14335  000712                     u8010:
 14336                           
 14337                           ; BSR set to: 0
 14338                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 14339  000712  0E08               	movlw	8
 14340  000714  0100               	movlb	0	; () banked
 14341  000716  6FB3               	movwf	printf@c& (0+255),b
 14342  000718  D003               	goto	l9228
 14343  00071A                     l1423:
 14344                           
 14345                           ; BSR set to: 0
 14346                           ;doprnt.c: 1213: else
 14347                           ;doprnt.c: 1214: c = prec;
 14348  00071A  C0A0  F0B3         	movff	printf@prec,printf@c
 14349  00071E  D000               	goto	l9228
 14350  000720                     l9228:
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;doprnt.c: 1215: prec -= c;
 14354  000720  0100               	movlb	0	; () banked
 14355  000722  51B3               	movf	printf@c& (0+255),w,b
 14356  000724  0100               	movlb	0	; () banked
 14357  000726  5FA0               	subwf	printf@prec& (0+255),f,b
 14358  000728  0E00               	movlw	0
 14359  00072A  0100               	movlb	0	; () banked
 14360  00072C  BFB3               	btfsc	printf@c& (0+255),7,b
 14361  00072E  0EFF               	movlw	255
 14362  000730  0100               	movlb	0	; () banked
 14363  000732  5BA1               	subwfb	(printf@prec+1)& (0+255),f,b
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;doprnt.c: 1219: if(c)
 14367  000734  0100               	movlb	0	; () banked
 14368  000736  51B3               	movf	printf@c& (0+255),w,b
 14369  000738  0100               	movlb	0	; () banked
 14370  00073A  B4D8               	btfsc	status,2,c
 14371  00073C  D004               	goto	l9234
 14372                           
 14373                           ; BSR set to: 0
 14374                           ;doprnt.c: 1221: (putch('.') );
 14375  00073E  0E2E               	movlw	46
 14376  000740  ECC8  F026         	call	_putch
 14377  000744  D000               	goto	l9234
 14378  000746                     l9234:
 14379                           
 14380                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14381  000746  0100               	movlb	0	; () banked
 14382  000748  51B3               	movf	printf@c& (0+255),w,b
 14383  00074A  ECA5  F009         	call	_scale
 14384  00074E  C043  F09A         	movff	?_scale,_printf$2978
 14385  000752  C044  F09B         	movff	?_scale+1,_printf$2978+1
 14386  000756  C045  F09C         	movff	?_scale+2,_printf$2978+2
 14387                           
 14388                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14389  00075A  C0B0  F022         	movff	printf@fval,___ftmul@f2
 14390  00075E  C0B1  F023         	movff	printf@fval+1,___ftmul@f2+1
 14391  000762  C0B2  F024         	movff	printf@fval+2,___ftmul@f2+2
 14392  000766  C09A  F01F         	movff	_printf$2978,___ftmul@f1
 14393  00076A  C09B  F020         	movff	_printf$2978+1,___ftmul@f1+1
 14394  00076E  C09C  F021         	movff	_printf$2978+2,___ftmul@f1+2
 14395  000772  ECF4  F018         	call	___ftmul	;wreg free
 14396  000776  C01F  F02E         	movff	?___ftmul,___fttol@f1
 14397  00077A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
 14398  00077E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
 14399  000782  EC5E  F01A         	call	___fttol	;wreg free
 14400  000786  C02E  F0AA         	movff	?___fttol,printf@val
 14401  00078A  C02F  F0AB         	movff	?___fttol+1,printf@val+1
 14402  00078E  C030  F0AC         	movff	?___fttol+2,printf@val+2
 14403  000792  C031  F0AD         	movff	?___fttol+3,printf@val+3
 14404                           
 14405                           ;doprnt.c: 1228: while(c--) {
 14406  000796  D06E               	goto	l9244
 14407  000798                     l9238:
 14408                           
 14409                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 14410  000798  C0AA  F011         	movff	printf@val,___lldiv@dividend
 14411  00079C  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 14412  0007A0  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 14413  0007A4  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 14414  0007A8  0100               	movlb	0	; () banked
 14415  0007AA  51B3               	movf	printf@c& (0+255),w,b
 14416  0007AC  0D04               	mullw	4
 14417  0007AE  0E9C               	movlw	low _dpowers
 14418  0007B0  24F3               	addwf	prodl,w,c
 14419  0007B2  6EF6               	movwf	tblptrl,c
 14420  0007B4  0EFD               	movlw	high _dpowers
 14421  0007B6  20F4               	addwfc	prodh,w,c
 14422  0007B8  6EF7               	movwf	tblptrh,c
 14423  0007BA                     	if	0	;There are less than 3 active tblptr bytes
 14424  0007BA                     	endif
 14425  0007BA  0009               	tblrd		*+
 14426  0007BC  CFF5 F015          	movff	tablat,___lldiv@divisor
 14427  0007C0  0009               	tblrd		*+
 14428  0007C2  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14429  0007C6  0009               	tblrd		*+
 14430  0007C8  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14431  0007CC  000A               	tblrd		*-
 14432  0007CE  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14433  0007D2  EC55  F01F         	call	___lldiv	;wreg free
 14434  0007D6  C011  F0A2         	movff	?___lldiv,printf@tmpval
 14435  0007DA  C012  F0A3         	movff	?___lldiv+1,printf@tmpval+1
 14436  0007DE  C013  F0A4         	movff	?___lldiv+2,printf@tmpval+2
 14437  0007E2  C014  F0A5         	movff	?___lldiv+3,printf@tmpval+3
 14438                           
 14439                           ;doprnt.c: 1230: tmpval.vd %= 10;
 14440  0007E6  C0A2  F01E         	movff	printf@tmpval,___llmod@dividend
 14441  0007EA  C0A3  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14442  0007EE  C0A4  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14443  0007F2  C0A5  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14444  0007F6  0E0A               	movlw	10
 14445  0007F8  6E22               	movwf	___llmod@divisor,c
 14446  0007FA  0E00               	movlw	0
 14447  0007FC  6E23               	movwf	___llmod@divisor+1,c
 14448  0007FE  0E00               	movlw	0
 14449  000800  6E24               	movwf	___llmod@divisor+2,c
 14450  000802  0E00               	movlw	0
 14451  000804  6E25               	movwf	___llmod@divisor+3,c
 14452  000806  ECA3  F020         	call	___llmod	;wreg free
 14453  00080A  C01E  F0A2         	movff	?___llmod,printf@tmpval
 14454  00080E  C01F  F0A3         	movff	?___llmod+1,printf@tmpval+1
 14455  000812  C020  F0A4         	movff	?___llmod+2,printf@tmpval+2
 14456  000816  C021  F0A5         	movff	?___llmod+3,printf@tmpval+3
 14457                           
 14458                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 14459  00081A  0100               	movlb	0	; () banked
 14460  00081C  51A2               	movf	printf@tmpval& (0+255),w,b
 14461  00081E  0F30               	addlw	48
 14462  000820  ECC8  F026         	call	_putch
 14463                           
 14464                           ;doprnt.c: 1232: val %= dpowers[c];
 14465  000824  C0AA  F01E         	movff	printf@val,___llmod@dividend
 14466  000828  C0AB  F01F         	movff	printf@val+1,___llmod@dividend+1
 14467  00082C  C0AC  F020         	movff	printf@val+2,___llmod@dividend+2
 14468  000830  C0AD  F021         	movff	printf@val+3,___llmod@dividend+3
 14469  000834  0100               	movlb	0	; () banked
 14470  000836  51B3               	movf	printf@c& (0+255),w,b
 14471  000838  0D04               	mullw	4
 14472  00083A  0E9C               	movlw	low _dpowers
 14473  00083C  24F3               	addwf	prodl,w,c
 14474  00083E  6EF6               	movwf	tblptrl,c
 14475  000840  0EFD               	movlw	high _dpowers
 14476  000842  20F4               	addwfc	prodh,w,c
 14477  000844  6EF7               	movwf	tblptrh,c
 14478  000846                     	if	0	;There are less than 3 active tblptr bytes
 14479  000846                     	endif
 14480  000846  0009               	tblrd		*+
 14481  000848  CFF5 F022          	movff	tablat,___llmod@divisor
 14482  00084C  0009               	tblrd		*+
 14483  00084E  CFF5 F023          	movff	tablat,___llmod@divisor+1
 14484  000852  0009               	tblrd		*+
 14485  000854  CFF5 F024          	movff	tablat,___llmod@divisor+2
 14486  000858  000A               	tblrd		*-
 14487  00085A  CFF5 F025          	movff	tablat,___llmod@divisor+3
 14488  00085E  ECA3  F020         	call	___llmod	;wreg free
 14489  000862  C01E  F0AA         	movff	?___llmod,printf@val
 14490  000866  C01F  F0AB         	movff	?___llmod+1,printf@val+1
 14491  00086A  C020  F0AC         	movff	?___llmod+2,printf@val+2
 14492  00086E  C021  F0AD         	movff	?___llmod+3,printf@val+3
 14493  000872  D000               	goto	l9244
 14494  000874                     l9244:
 14495  000874  0100               	movlb	0	; () banked
 14496  000876  07B3               	decf	printf@c& (0+255),f,b
 14497  000878  0100               	movlb	0	; () banked
 14498  00087A  29B3               	incf	printf@c& (0+255),w,b
 14499  00087C  B4D8               	btfsc	status,2,c
 14500  00087E  D00A               	goto	l9250
 14501  000880  D78B               	goto	l9238
 14502                           
 14503                           ; BSR set to: 0
 14504                           ;doprnt.c: 1233: }
 14505                           ;doprnt.c: 1235: while(prec) {
 14506  000882  D008               	goto	l9250
 14507  000884                     l9246:
 14508                           
 14509                           ; BSR set to: 0
 14510                           ;doprnt.c: 1236: (putch('0') );
 14511  000884  0E30               	movlw	48
 14512  000886  ECC8  F026         	call	_putch
 14513                           
 14514                           ;doprnt.c: 1237: prec--;
 14515  00088A  0100               	movlb	0	; () banked
 14516  00088C  07A0               	decf	printf@prec& (0+255),f,b
 14517  00088E  A0D8               	btfss	status,0,c
 14518  000890  07A1               	decf	(printf@prec+1)& (0+255),f,b
 14519  000892  D000               	goto	l9250
 14520  000894                     l9250:
 14521                           
 14522                           ; BSR set to: 0
 14523  000894  0100               	movlb	0	; () banked
 14524  000896  51A0               	movf	printf@prec& (0+255),w,b
 14525  000898  0100               	movlb	0	; () banked
 14526  00089A  11A1               	iorwf	(printf@prec+1)& (0+255),w,b
 14527  00089C  B4D8               	btfsc	status,2,c
 14528  00089E  D1CE               	goto	l9348
 14529  0008A0  D7F1               	goto	l9246
 14530                           
 14531                           ; BSR set to: 0
 14532                           ;doprnt.c: 1238: }
 14533                           ;doprnt.c: 1245: continue;
 14534  0008A2  D1CC               	goto	l9348
 14535  0008A4                     l1384:
 14536                           
 14537                           ; BSR set to: 0
 14538                           ;doprnt.c: 1246: }
 14539                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14540  0008A4  0100               	movlb	0	; () banked
 14541  0008A6  BFAE               	btfsc	printf@flag& (0+255),7,b
 14542  0008A8  D023               	goto	l9262
 14543                           
 14544                           ; BSR set to: 0
 14545                           ;doprnt.c: 1253: {
 14546                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 14547  0008AA  C09E  FFD9         	movff	printf@ap,fsr2l
 14548  0008AE  C09F  FFDA         	movff	printf@ap+1,fsr2h
 14549  0008B2  CFDE F0AA          	movff	postinc2,printf@val
 14550  0008B6  CFDD F0AB          	movff	postdec2,printf@val+1
 14551  0008BA  0100               	movlb	0	; () banked
 14552  0008BC  0E00               	movlw	0
 14553  0008BE  BFAB               	btfsc	(printf@val+1)& (0+255),7,b
 14554  0008C0  0EFF               	movlw	-1
 14555  0008C2  6FAC               	movwf	(printf@val+2)& (0+255),b
 14556  0008C4  6FAD               	movwf	(printf@val+3)& (0+255),b
 14557                           
 14558                           ; BSR set to: 0
 14559  0008C6  0E02               	movlw	2
 14560  0008C8  0100               	movlb	0	; () banked
 14561  0008CA  279E               	addwf	printf@ap& (0+255),f,b
 14562  0008CC  0E00               	movlw	0
 14563  0008CE  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;doprnt.c: 1261: if((long)val < 0) {
 14567  0008D0  0100               	movlb	0	; () banked
 14568  0008D2  AFAD               	btfss	(printf@val+3)& (0+255),7,b
 14569  0008D4  D078               	goto	l9296
 14570                           
 14571                           ; BSR set to: 0
 14572                           ;doprnt.c: 1262: flag |= 0x03;
 14573  0008D6  0E03               	movlw	3
 14574  0008D8  0100               	movlb	0	; () banked
 14575  0008DA  13AE               	iorwf	printf@flag& (0+255),f,b
 14576                           
 14577                           ; BSR set to: 0
 14578                           ;doprnt.c: 1263: val = -val;
 14579  0008DC  0100               	movlb	0	; () banked
 14580  0008DE  1FAD               	comf	(printf@val+3)& (0+255),f,b
 14581  0008E0  1FAC               	comf	(printf@val+2)& (0+255),f,b
 14582  0008E2  1FAB               	comf	(printf@val+1)& (0+255),f,b
 14583  0008E4  6DAA               	negf	printf@val& (0+255),b
 14584  0008E6  0E00               	movlw	0
 14585  0008E8  23AB               	addwfc	(printf@val+1)& (0+255),f,b
 14586  0008EA  23AC               	addwfc	(printf@val+2)& (0+255),f,b
 14587  0008EC  23AD               	addwfc	(printf@val+3)& (0+255),f,b
 14588                           
 14589                           ; BSR set to: 0
 14590                           ;doprnt.c: 1264: }
 14591                           ;doprnt.c: 1266: }
 14592  0008EE  D06B               	goto	l9296
 14593  0008F0                     l9262:
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;doprnt.c: 1268: else
 14597                           ;doprnt.c: 1273: {
 14598                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14599  0008F0  C09E  FFD9         	movff	printf@ap,fsr2l
 14600  0008F4  C09F  FFDA         	movff	printf@ap+1,fsr2h
 14601  0008F8  CFDE F094          	movff	postinc2,??_printf
 14602  0008FC  CFDD F095          	movff	postdec2,??_printf+1
 14603  000900  C094  F0AA         	movff	??_printf,printf@val
 14604  000904  C095  F0AB         	movff	??_printf+1,printf@val+1
 14605  000908  0100               	movlb	0	; () banked
 14606  00090A  6BAC               	clrf	(printf@val+2)& (0+255),b
 14607  00090C  6BAD               	clrf	(printf@val+3)& (0+255),b
 14608                           
 14609                           ; BSR set to: 0
 14610  00090E  0E02               	movlw	2
 14611  000910  0100               	movlb	0	; () banked
 14612  000912  279E               	addwf	printf@ap& (0+255),f,b
 14613  000914  0E00               	movlw	0
 14614  000916  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 14615                           
 14616                           ; BSR set to: 0
 14617                           ;doprnt.c: 1287: }
 14618                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14619  000918  D056               	goto	l9296
 14620  00091A                     l9266:
 14621                           
 14622                           ; BSR set to: 0
 14623                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14624  00091A  0E01               	movlw	1
 14625  00091C  0100               	movlb	0	; () banked
 14626  00091E  6FB3               	movwf	printf@c& (0+255),b
 14627  000920                     l9268:
 14628                           
 14629                           ; BSR set to: 0
 14630  000920  0E0A               	movlw	10
 14631  000922  0100               	movlb	0	; () banked
 14632  000924  19B3               	xorwf	printf@c& (0+255),w,b
 14633  000926  B4D8               	btfsc	status,2,c
 14634  000928  D058               	goto	l9298
 14635  00092A  D001               	goto	l9272
 14636                           
 14637                           ; BSR set to: 0
 14638  00092C  D056               	goto	l9298
 14639  00092E                     l9272:
 14640                           
 14641                           ; BSR set to: 0
 14642                           ;doprnt.c: 1306: if(val < dpowers[c])
 14643  00092E  0100               	movlb	0	; () banked
 14644  000930  51B3               	movf	printf@c& (0+255),w,b
 14645  000932  0D04               	mullw	4
 14646  000934  0E9C               	movlw	low _dpowers
 14647  000936  24F3               	addwf	prodl,w,c
 14648  000938  6EF6               	movwf	tblptrl,c
 14649  00093A  0EFD               	movlw	high _dpowers
 14650  00093C  20F4               	addwfc	prodh,w,c
 14651  00093E  6EF7               	movwf	tblptrh,c
 14652  000940                     	if	0	;There are less than 3 active tblptr bytes
 14653  000940                     	endif
 14654  000940  0009               	tblrd		*+
 14655  000942  50F5               	movf	tablat,w,c
 14656  000944  0100               	movlb	0	; () banked
 14657  000946  5DAA               	subwf	printf@val& (0+255),w,b
 14658  000948  0009               	tblrd		*+
 14659  00094A  50F5               	movf	tablat,w,c
 14660  00094C  0100               	movlb	0	; () banked
 14661  00094E  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 14662  000950  0009               	tblrd		*+
 14663  000952  50F5               	movf	tablat,w,c
 14664  000954  0100               	movlb	0	; () banked
 14665  000956  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14666  000958  0009               	tblrd		*+
 14667  00095A  50F5               	movf	tablat,w,c
 14668  00095C  0100               	movlb	0	; () banked
 14669  00095E  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14670  000960  A0D8               	btfss	status,0,c
 14671  000962  D03B               	goto	l9298
 14672  000964  D001               	goto	l9276
 14673                           
 14674                           ; BSR set to: 0
 14675                           ;doprnt.c: 1307: break;
 14676  000966  D039               	goto	l9298
 14677  000968                     l9276:
 14678                           
 14679                           ; BSR set to: 0
 14680  000968  0100               	movlb	0	; () banked
 14681  00096A  2BB3               	incf	printf@c& (0+255),f,b
 14682  00096C  D7D9               	goto	l9268
 14683                           
 14684                           ; BSR set to: 0
 14685                           ;doprnt.c: 1309: break;
 14686                           
 14687                           ; BSR set to: 0
 14688  00096E  D035               	goto	l9298
 14689  000970                     l9280:
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14693  000970  0E01               	movlw	1
 14694  000972  0100               	movlb	0	; () banked
 14695  000974  6FB3               	movwf	printf@c& (0+255),b
 14696  000976                     l9282:
 14697                           
 14698                           ; BSR set to: 0
 14699  000976  0E08               	movlw	8
 14700  000978  0100               	movlb	0	; () banked
 14701  00097A  19B3               	xorwf	printf@c& (0+255),w,b
 14702  00097C  B4D8               	btfsc	status,2,c
 14703  00097E  D02D               	goto	l9298
 14704  000980  D001               	goto	l9286
 14705                           
 14706                           ; BSR set to: 0
 14707  000982  D02B               	goto	l9298
 14708  000984                     l9286:
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14712  000984  0100               	movlb	0	; () banked
 14713  000986  51B3               	movf	printf@c& (0+255),w,b
 14714  000988  0D04               	mullw	4
 14715  00098A  0E12               	movlw	low _hexpowers
 14716  00098C  24F3               	addwf	prodl,w,c
 14717  00098E  6EF6               	movwf	tblptrl,c
 14718  000990  0EFE               	movlw	high _hexpowers
 14719  000992  20F4               	addwfc	prodh,w,c
 14720  000994  6EF7               	movwf	tblptrh,c
 14721  000996                     	if	0	;There are less than 3 active tblptr bytes
 14722  000996                     	endif
 14723  000996  0009               	tblrd		*+
 14724  000998  50F5               	movf	tablat,w,c
 14725  00099A  0100               	movlb	0	; () banked
 14726  00099C  5DAA               	subwf	printf@val& (0+255),w,b
 14727  00099E  0009               	tblrd		*+
 14728  0009A0  50F5               	movf	tablat,w,c
 14729  0009A2  0100               	movlb	0	; () banked
 14730  0009A4  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 14731  0009A6  0009               	tblrd		*+
 14732  0009A8  50F5               	movf	tablat,w,c
 14733  0009AA  0100               	movlb	0	; () banked
 14734  0009AC  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14735  0009AE  0009               	tblrd		*+
 14736  0009B0  50F5               	movf	tablat,w,c
 14737  0009B2  0100               	movlb	0	; () banked
 14738  0009B4  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14739  0009B6  A0D8               	btfss	status,0,c
 14740  0009B8  D010               	goto	l9298
 14741  0009BA  D001               	goto	l9290
 14742                           
 14743                           ; BSR set to: 0
 14744                           ;doprnt.c: 1318: break;
 14745  0009BC  D00E               	goto	l9298
 14746  0009BE                     l9290:
 14747                           
 14748                           ; BSR set to: 0
 14749  0009BE  0100               	movlb	0	; () banked
 14750  0009C0  2BB3               	incf	printf@c& (0+255),f,b
 14751  0009C2  D7D9               	goto	l9282
 14752                           
 14753                           ; BSR set to: 0
 14754                           ;doprnt.c: 1336: }
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;doprnt.c: 1320: break;
 14758                           
 14759                           ; BSR set to: 0
 14760  0009C4  D00A               	goto	l9298
 14761  0009C6                     l9296:
 14762                           
 14763                           ; BSR set to: 0
 14764  0009C6  0100               	movlb	0	; () banked
 14765  0009C8  51AE               	movf	printf@flag& (0+255),w,b
 14766  0009CA  0B80               	andlw	128
 14767                           
 14768                           ; Switch size 1, requested type "space"
 14769                           ; Number of cases is 2, Range of values is 0 to 128
 14770                           ; switch strategies available:
 14771                           ; Name         Instructions Cycles
 14772                           ; simple_byte            7     4 (average)
 14773                           ;	Chosen strategy is simple_byte
 14774  0009CC  0A00               	xorlw	0	; case 0
 14775  0009CE  B4D8               	btfsc	status,2,c
 14776  0009D0  D7A4               	goto	l9266
 14777  0009D2  0A80               	xorlw	128	; case 128
 14778  0009D4  B4D8               	btfsc	status,2,c
 14779  0009D6  D7CC               	goto	l9280
 14780  0009D8  D000               	goto	l9298
 14781  0009DA                     l9298:
 14782                           
 14783                           ; BSR set to: 0
 14784                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14785  0009DA  0100               	movlb	0	; () banked
 14786  0009DC  51A6               	movf	printf@width& (0+255),w,b
 14787  0009DE  0100               	movlb	0	; () banked
 14788  0009E0  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14789  0009E2  B4D8               	btfsc	status,2,c
 14790  0009E4  D015               	goto	l9304
 14791                           
 14792                           ; BSR set to: 0
 14793  0009E6  0E03               	movlw	3
 14794  0009E8  0100               	movlb	0	; () banked
 14795  0009EA  15AE               	andwf	printf@flag& (0+255),w,b
 14796  0009EC  0100               	movlb	0	; () banked
 14797  0009EE  6F94               	movwf	??_printf& (0+255),b
 14798  0009F0  0E00               	movlw	0
 14799  0009F2  0100               	movlb	0	; () banked
 14800  0009F4  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14801  0009F6  0100               	movlb	0	; () banked
 14802  0009F8  6F95               	movwf	(??_printf+1)& (0+255),b
 14803  0009FA  0100               	movlb	0	; () banked
 14804  0009FC  5194               	movf	??_printf& (0+255),w,b
 14805  0009FE  0100               	movlb	0	; () banked
 14806  000A00  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14807  000A02  B4D8               	btfsc	status,2,c
 14808  000A04  D005               	goto	l9304
 14809                           
 14810                           ; BSR set to: 0
 14811                           ;doprnt.c: 1346: width--;
 14812  000A06  0100               	movlb	0	; () banked
 14813  000A08  07A6               	decf	printf@width& (0+255),f,b
 14814  000A0A  A0D8               	btfss	status,0,c
 14815  000A0C  07A7               	decf	(printf@width+1)& (0+255),f,b
 14816  000A0E  D000               	goto	l9304
 14817  000A10                     l9304:
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;doprnt.c: 1381: if(width > c)
 14821  000A10  0E80               	movlw	128
 14822  000A12  0100               	movlb	0	; () banked
 14823  000A14  BFB3               	btfsc	printf@c& (0+255),7,b
 14824  000A16  0E7F               	movlw	127
 14825  000A18  0100               	movlb	0	; () banked
 14826  000A1A  6F94               	movwf	??_printf& (0+255),b
 14827  000A1C  0100               	movlb	0	; () banked
 14828  000A1E  51A6               	movf	printf@width& (0+255),w,b
 14829  000A20  0100               	movlb	0	; () banked
 14830  000A22  5DB3               	subwf	printf@c& (0+255),w,b
 14831  000A24  0100               	movlb	0	; () banked
 14832  000A26  51A7               	movf	(printf@width+1)& (0+255),w,b
 14833  000A28  0A80               	xorlw	128
 14834  000A2A  0100               	movlb	0	; () banked
 14835  000A2C  5994               	subwfb	??_printf& (0+255),w,b
 14836  000A2E  B0D8               	btfsc	status,0,c
 14837  000A30  D00B               	goto	l9308
 14838                           
 14839                           ; BSR set to: 0
 14840                           ;doprnt.c: 1382: width -= c;
 14841  000A32  0100               	movlb	0	; () banked
 14842  000A34  51B3               	movf	printf@c& (0+255),w,b
 14843  000A36  0100               	movlb	0	; () banked
 14844  000A38  5FA6               	subwf	printf@width& (0+255),f,b
 14845  000A3A  0E00               	movlw	0
 14846  000A3C  0100               	movlb	0	; () banked
 14847  000A3E  BFB3               	btfsc	printf@c& (0+255),7,b
 14848  000A40  0EFF               	movlw	255
 14849  000A42  0100               	movlb	0	; () banked
 14850  000A44  5BA7               	subwfb	(printf@width+1)& (0+255),f,b
 14851  000A46  D006               	goto	l9310
 14852  000A48                     l9308:
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;doprnt.c: 1383: else
 14856                           ;doprnt.c: 1384: width = 0;
 14857  000A48  0E00               	movlw	0
 14858  000A4A  0100               	movlb	0	; () banked
 14859  000A4C  6FA7               	movwf	(printf@width+1)& (0+255),b
 14860  000A4E  0E00               	movlw	0
 14861  000A50  6FA6               	movwf	printf@width& (0+255),b
 14862  000A52  D000               	goto	l9310
 14863  000A54                     l9310:
 14864                           
 14865                           ; BSR set to: 0
 14866                           ;doprnt.c: 1387: if(flag & 0x04) {
 14867  000A54  0100               	movlb	0	; () banked
 14868  000A56  A5AE               	btfss	printf@flag& (0+255),2,b
 14869  000A58  D029               	goto	l9322
 14870                           
 14871                           ; BSR set to: 0
 14872                           ;doprnt.c: 1392: if(flag & 0x03)
 14873  000A5A  0E03               	movlw	3
 14874  000A5C  0100               	movlb	0	; () banked
 14875  000A5E  15AE               	andwf	printf@flag& (0+255),w,b
 14876  000A60  0100               	movlb	0	; () banked
 14877  000A62  6F94               	movwf	??_printf& (0+255),b
 14878  000A64  0E00               	movlw	0
 14879  000A66  0100               	movlb	0	; () banked
 14880  000A68  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14881  000A6A  0100               	movlb	0	; () banked
 14882  000A6C  6F95               	movwf	(??_printf+1)& (0+255),b
 14883  000A6E  0100               	movlb	0	; () banked
 14884  000A70  5194               	movf	??_printf& (0+255),w,b
 14885  000A72  0100               	movlb	0	; () banked
 14886  000A74  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14887  000A76  B4D8               	btfsc	status,2,c
 14888  000A78  D004               	goto	l9316
 14889                           
 14890                           ; BSR set to: 0
 14891                           ;doprnt.c: 1393: (putch('-') );
 14892  000A7A  0E2D               	movlw	45
 14893  000A7C  ECC8  F026         	call	_putch
 14894  000A80  D000               	goto	l9316
 14895  000A82                     l9316:
 14896                           
 14897                           ;doprnt.c: 1415: if(width)
 14898  000A82  0100               	movlb	0	; () banked
 14899  000A84  51A6               	movf	printf@width& (0+255),w,b
 14900  000A86  0100               	movlb	0	; () banked
 14901  000A88  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14902  000A8A  B4D8               	btfsc	status,2,c
 14903  000A8C  D038               	goto	l9332
 14904  000A8E                     l9318:
 14905                           
 14906                           ; BSR set to: 0
 14907                           ;doprnt.c: 1417: (putch('0') );
 14908  000A8E  0E30               	movlw	48
 14909  000A90  ECC8  F026         	call	_putch
 14910                           
 14911                           ;doprnt.c: 1418: while(--width);
 14912  000A94  0100               	movlb	0	; () banked
 14913  000A96  07A6               	decf	printf@width& (0+255),f,b
 14914  000A98  A0D8               	btfss	status,0,c
 14915  000A9A  07A7               	decf	(printf@width+1)& (0+255),f,b
 14916  000A9C  0100               	movlb	0	; () banked
 14917  000A9E  51A6               	movf	printf@width& (0+255),w,b
 14918  000AA0  0100               	movlb	0	; () banked
 14919  000AA2  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14920  000AA4  B4D8               	btfsc	status,2,c
 14921  000AA6  D02B               	goto	l9332
 14922  000AA8  D7F2               	goto	l9318
 14923                           
 14924                           ; BSR set to: 0
 14925                           ;doprnt.c: 1420: } else
 14926                           
 14927                           ; BSR set to: 0
 14928  000AAA  D029               	goto	l9332
 14929  000AAC                     l9322:
 14930                           
 14931                           ; BSR set to: 0
 14932                           ;doprnt.c: 1422: {
 14933                           ;doprnt.c: 1424: if(width
 14934                           ;doprnt.c: 1428: )
 14935  000AAC  0100               	movlb	0	; () banked
 14936  000AAE  51A6               	movf	printf@width& (0+255),w,b
 14937  000AB0  0100               	movlb	0	; () banked
 14938  000AB2  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14939  000AB4  B4D8               	btfsc	status,2,c
 14940  000AB6  D00F               	goto	l9328
 14941  000AB8                     l9324:
 14942                           
 14943                           ; BSR set to: 0
 14944                           ;doprnt.c: 1430: (putch(' ') );
 14945  000AB8  0E20               	movlw	32
 14946  000ABA  ECC8  F026         	call	_putch
 14947                           
 14948                           ;doprnt.c: 1431: while(--width);
 14949  000ABE  0100               	movlb	0	; () banked
 14950  000AC0  07A6               	decf	printf@width& (0+255),f,b
 14951  000AC2  A0D8               	btfss	status,0,c
 14952  000AC4  07A7               	decf	(printf@width+1)& (0+255),f,b
 14953  000AC6  0100               	movlb	0	; () banked
 14954  000AC8  51A6               	movf	printf@width& (0+255),w,b
 14955  000ACA  0100               	movlb	0	; () banked
 14956  000ACC  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14957  000ACE  B4D8               	btfsc	status,2,c
 14958  000AD0  D002               	goto	l9328
 14959  000AD2  D7F2               	goto	l9324
 14960                           
 14961                           ; BSR set to: 0
 14962  000AD4  D000               	goto	l9328
 14963  000AD6                     l9328:
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;doprnt.c: 1438: if(flag & 0x03)
 14967  000AD6  0E03               	movlw	3
 14968  000AD8  0100               	movlb	0	; () banked
 14969  000ADA  15AE               	andwf	printf@flag& (0+255),w,b
 14970  000ADC  0100               	movlb	0	; () banked
 14971  000ADE  6F94               	movwf	??_printf& (0+255),b
 14972  000AE0  0E00               	movlw	0
 14973  000AE2  0100               	movlb	0	; () banked
 14974  000AE4  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14975  000AE6  0100               	movlb	0	; () banked
 14976  000AE8  6F95               	movwf	(??_printf+1)& (0+255),b
 14977  000AEA  0100               	movlb	0	; () banked
 14978  000AEC  5194               	movf	??_printf& (0+255),w,b
 14979  000AEE  0100               	movlb	0	; () banked
 14980  000AF0  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14981  000AF2  B4D8               	btfsc	status,2,c
 14982  000AF4  D004               	goto	l9332
 14983                           
 14984                           ; BSR set to: 0
 14985                           ;doprnt.c: 1439: (putch('-') );
 14986  000AF6  0E2D               	movlw	45
 14987  000AF8  ECC8  F026         	call	_putch
 14988  000AFC  D000               	goto	l9332
 14989  000AFE                     l9332:
 14990                           
 14991                           ;doprnt.c: 1469: }
 14992                           ;doprnt.c: 1472: prec = c;
 14993  000AFE  0100               	movlb	0	; () banked
 14994  000B00  51B3               	movf	printf@c& (0+255),w,b
 14995  000B02  0100               	movlb	0	; () banked
 14996  000B04  6FA0               	movwf	printf@prec& (0+255),b
 14997  000B06  6BA1               	clrf	(printf@prec+1)& (0+255),b
 14998  000B08  BFA0               	btfsc	printf@prec& (0+255),7,b
 14999  000B0A  07A1               	decf	(printf@prec+1)& (0+255),f,b
 15000                           
 15001                           ;doprnt.c: 1474: while(prec--) {
 15002  000B0C  D08A               	goto	l9346
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 15006  000B0E  D07A               	goto	l9342
 15007  000B10                     l9334:
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15011  000B10  C0A0  F094         	movff	printf@prec,??_printf
 15012  000B14  C0A1  F095         	movff	printf@prec+1,??_printf+1
 15013  000B18  0100               	movlb	0	; () banked
 15014  000B1A  90D8               	bcf	status,0,c
 15015  000B1C  3794               	rlcf	??_printf& (0+255),f,b
 15016  000B1E  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15017  000B20  0100               	movlb	0	; () banked
 15018  000B22  90D8               	bcf	status,0,c
 15019  000B24  3794               	rlcf	??_printf& (0+255),f,b
 15020  000B26  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15021  000B28  0E9C               	movlw	low _dpowers
 15022  000B2A  0100               	movlb	0	; () banked
 15023  000B2C  2594               	addwf	??_printf& (0+255),w,b
 15024  000B2E  6EF6               	movwf	tblptrl,c
 15025  000B30  0EFD               	movlw	high _dpowers
 15026  000B32  2195               	addwfc	(??_printf+1)& (0+255),w,b
 15027  000B34  6EF7               	movwf	tblptrh,c
 15028  000B36                     	if	0	;There are less than 3 active tblptr bytes
 15029  000B36                     	endif
 15030  000B36  0009               	tblrd		*+
 15031  000B38  CFF5 F015          	movff	tablat,___lldiv@divisor
 15032  000B3C  0009               	tblrd		*+
 15033  000B3E  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15034  000B42  0009               	tblrd		*+
 15035  000B44  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15036  000B48  000A               	tblrd		*-
 15037  000B4A  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15038  000B4E  C0AA  F011         	movff	printf@val,___lldiv@dividend
 15039  000B52  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 15040  000B56  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 15041  000B5A  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 15042  000B5E  EC55  F01F         	call	___lldiv	;wreg free
 15043  000B62  C011  F01E         	movff	?___lldiv,___llmod@dividend
 15044  000B66  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
 15045  000B6A  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
 15046  000B6E  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
 15047  000B72  0E0A               	movlw	10
 15048  000B74  6E22               	movwf	___llmod@divisor,c
 15049  000B76  0E00               	movlw	0
 15050  000B78  6E23               	movwf	___llmod@divisor+1,c
 15051  000B7A  0E00               	movlw	0
 15052  000B7C  6E24               	movwf	___llmod@divisor+2,c
 15053  000B7E  0E00               	movlw	0
 15054  000B80  6E25               	movwf	___llmod@divisor+3,c
 15055  000B82  ECA3  F020         	call	___llmod	;wreg free
 15056  000B86  501E               	movf	?___llmod,w,c
 15057  000B88  0F30               	addlw	48
 15058  000B8A  0100               	movlb	0	; () banked
 15059  000B8C  6FB3               	movwf	printf@c& (0+255),b
 15060                           
 15061                           ;doprnt.c: 1491: break;
 15062  000B8E  D044               	goto	l9344
 15063  000B90                     l9336:
 15064                           
 15065                           ; BSR set to: 0
 15066                           ;doprnt.c: 1499: {
 15067                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15068  000B90  C0AA  F011         	movff	printf@val,___lldiv@dividend
 15069  000B94  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 15070  000B98  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 15071  000B9C  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 15072  000BA0  C0A0  F094         	movff	printf@prec,??_printf
 15073  000BA4  C0A1  F095         	movff	printf@prec+1,??_printf+1
 15074  000BA8  0100               	movlb	0	; () banked
 15075  000BAA  90D8               	bcf	status,0,c
 15076  000BAC  3794               	rlcf	??_printf& (0+255),f,b
 15077  000BAE  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15078  000BB0  0100               	movlb	0	; () banked
 15079  000BB2  90D8               	bcf	status,0,c
 15080  000BB4  3794               	rlcf	??_printf& (0+255),f,b
 15081  000BB6  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15082  000BB8  0E12               	movlw	low _hexpowers
 15083  000BBA  0100               	movlb	0	; () banked
 15084  000BBC  2594               	addwf	??_printf& (0+255),w,b
 15085  000BBE  6EF6               	movwf	tblptrl,c
 15086  000BC0  0EFE               	movlw	high _hexpowers
 15087  000BC2  2195               	addwfc	(??_printf+1)& (0+255),w,b
 15088  000BC4  6EF7               	movwf	tblptrh,c
 15089  000BC6                     	if	0	;There are less than 3 active tblptr bytes
 15090  000BC6                     	endif
 15091  000BC6  0009               	tblrd		*+
 15092  000BC8  CFF5 F015          	movff	tablat,___lldiv@divisor
 15093  000BCC  0009               	tblrd		*+
 15094  000BCE  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15095  000BD2  0009               	tblrd		*+
 15096  000BD4  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15097  000BD8  000A               	tblrd		*-
 15098  000BDA  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15099  000BDE  EC55  F01F         	call	___lldiv	;wreg free
 15100  000BE2  5011               	movf	?___lldiv,w,c
 15101  000BE4  0B0F               	andlw	15
 15102  000BE6  0100               	movlb	0	; () banked
 15103  000BE8  6F9D               	movwf	printf@idx& (0+255),b
 15104                           
 15105                           ; BSR set to: 0
 15106                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15107  000BEA  0100               	movlb	0	; () banked
 15108  000BEC  519D               	movf	printf@idx& (0+255),w,b
 15109  000BEE  0D01               	mullw	1
 15110  000BF0  0E5B               	movlw	low STR_47
 15111  000BF2  24F3               	addwf	prodl,w,c
 15112  000BF4  6EF6               	movwf	tblptrl,c
 15113  000BF6  0EFF               	movlw	high STR_47
 15114  000BF8  20F4               	addwfc	prodh,w,c
 15115  000BFA  6EF7               	movwf	tblptrh,c
 15116  000BFC                     	if	0	;There are less than 3 active tblptr bytes
 15117  000BFC                     	endif
 15118  000BFC  0008               	tblrd		*
 15119  000BFE  CFF5 F0B3          	movff	tablat,printf@c
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;doprnt.c: 1523: }
 15123                           
 15124                           ;doprnt.c: 1508: }
 15125                           ;doprnt.c: 1510: break;
 15126  000C02  D00A               	goto	l9344
 15127  000C04                     l9342:
 15128                           
 15129                           ; BSR set to: 0
 15130  000C04  0100               	movlb	0	; () banked
 15131  000C06  51AE               	movf	printf@flag& (0+255),w,b
 15132  000C08  0B80               	andlw	128
 15133                           
 15134                           ; Switch size 1, requested type "space"
 15135                           ; Number of cases is 2, Range of values is 0 to 128
 15136                           ; switch strategies available:
 15137                           ; Name         Instructions Cycles
 15138                           ; simple_byte            7     4 (average)
 15139                           ;	Chosen strategy is simple_byte
 15140  000C0A  0A00               	xorlw	0	; case 0
 15141  000C0C  B4D8               	btfsc	status,2,c
 15142  000C0E  D780               	goto	l9334
 15143  000C10  0A80               	xorlw	128	; case 128
 15144  000C12  B4D8               	btfsc	status,2,c
 15145  000C14  D7BD               	goto	l9336
 15146  000C16  D000               	goto	l9344
 15147  000C18                     l9344:
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;doprnt.c: 1524: (putch(c) );
 15151  000C18  0100               	movlb	0	; () banked
 15152  000C1A  51B3               	movf	printf@c& (0+255),w,b
 15153  000C1C  ECC8  F026         	call	_putch
 15154  000C20  D000               	goto	l9346
 15155  000C22                     l9346:
 15156  000C22  0100               	movlb	0	; () banked
 15157  000C24  07A0               	decf	printf@prec& (0+255),f,b
 15158  000C26  A0D8               	btfss	status,0,c
 15159  000C28  07A1               	decf	(printf@prec+1)& (0+255),f,b
 15160  000C2A  0100               	movlb	0	; () banked
 15161  000C2C  29A0               	incf	printf@prec& (0+255),w,b
 15162  000C2E  E1EA               	bnz	l9342
 15163  000C30  0100               	movlb	0	; () banked
 15164  000C32  29A1               	incf	(printf@prec+1)& (0+255),w,b
 15165  000C34  B4D8               	btfsc	status,2,c
 15166  000C36  D002               	goto	l9348
 15167  000C38  D7E5               	goto	l9342
 15168                           
 15169                           ; BSR set to: 0
 15170  000C3A  D000               	goto	l9348
 15171  000C3C                     l9348:
 15172  000C3C  C086  FFF6         	movff	printf@f,tblptrl
 15173  000C40  C087  FFF7         	movff	printf@f+1,tblptrh
 15174  000C44  0100               	movlb	0	; () banked
 15175  000C46  4B86               	infsnz	printf@f& (0+255),f,b
 15176  000C48  2B87               	incf	(printf@f+1)& (0+255),f,b
 15177  000C4A                     	if	0	;tblptru may be non-zero
 15178  000C4A                     	endif
 15179  000C4A                     	if	0	;tblptru may be non-zero
 15180  000C4A                     	endif
 15181  000C4A  0008               	tblrd		*
 15182  000C4C  CFF5 F0B3          	movff	tablat,printf@c
 15183  000C50  0100               	movlb	0	; () banked
 15184  000C52  51B3               	movf	printf@c& (0+255),w,b
 15185  000C54  B4D8               	btfsc	status,2,c
 15186  000C56  D003               	goto	l1466
 15187  000C58  EF16  F000         	goto	l9062
 15188                           
 15189                           ; BSR set to: 0
 15190  000C5C  D000               	goto	l1466
 15191  000C5E                     l1466:
 15192  000C5E  0012               	return		;funcret
 15193  000C60                     __end_of_printf:
 15194                           	opt stack 0
 15195                           tblptru	equ	0xFF8
 15196                           tblptrh	equ	0xFF7
 15197                           tblptrl	equ	0xFF6
 15198                           tablat	equ	0xFF5
 15199                           prodh	equ	0xFF4
 15200                           prodl	equ	0xFF3
 15201                           intcon	equ	0xFF2
 15202                           intcon2	equ	0xFF1
 15203                           intcon3	equ	0xFF0
 15204                           postinc0	equ	0xFEE
 15205                           wreg	equ	0xFE8
 15206                           postdec1	equ	0xFE5
 15207                           plusw1	equ	0xFE3
 15208                           fsr1l	equ	0xFE1
 15209                           indf2	equ	0xFDF
 15210                           postinc2	equ	0xFDE
 15211                           postdec2	equ	0xFDD
 15212                           plusw2	equ	0xFDB
 15213                           fsr2h	equ	0xFDA
 15214                           fsr2l	equ	0xFD9
 15215                           status	equ	0xFD8
 15216                           
 15217 ;; *************** function _scale *****************
 15218 ;; Defined at:
 15219 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15220 ;; Parameters:    Size  Location     Type
 15221 ;;  scl             1    wreg     char 
 15222 ;; Auto vars:     Size  Location     Type
 15223 ;;  scl             1   72[COMRAM] char 
 15224 ;; Return value:  Size  Location     Type
 15225 ;;                  3   66[COMRAM] char 
 15226 ;; Registers used:
 15227 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15228 ;; Tracked objects:
 15229 ;;		On entry : 0/0
 15230 ;;		On exit  : 0/0
 15231 ;;		Unchanged: 0/0
 15232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15233 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15234 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15236 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15237 ;;Total ram usage:        7 bytes
 15238 ;; Hardware stack levels used:    1
 15239 ;; Hardware stack levels required when called:    5
 15240 ;; This function calls:
 15241 ;;		___awdiv
 15242 ;;		___awmod
 15243 ;;		___ftmul
 15244 ;;		___wmul
 15245 ;; This function is called by:
 15246 ;;		_printf
 15247 ;; This function uses a non-reentrant model
 15248 ;;
 15249                           
 15250                           	psect	text63
 15251  00134A                     __ptext63:
 15252                           	opt stack 0
 15253  00134A                     _scale:
 15254                           	opt stack 24
 15255                           
 15256                           ;incstack = 0
 15257                           ;scale@scl stored from wreg
 15258  00134A  6E49               	movwf	scale@scl,c
 15259                           
 15260                           ;doprnt.c: 428: if(scl < 0) {
 15261  00134C  AE49               	btfss	scale@scl,7,c
 15262  00134E  D0EF               	goto	l8790
 15263                           
 15264                           ;doprnt.c: 429: scl = -scl;
 15265  001350  6C49               	negf	scale@scl,c
 15266                           
 15267                           ;doprnt.c: 430: if(scl>=110)
 15268  001352  5049               	movf	scale@scl,w,c
 15269  001354  0A80               	xorlw	128
 15270  001356  0F12               	addlw	-238
 15271  001358  A0D8               	btfss	status,0,c
 15272  00135A  D08D               	goto	l8780
 15273                           
 15274                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15275  00135C  0E00               	movlw	0
 15276  00135E  6E14               	movwf	___wmul@multiplicand+1,c
 15277  001360  0E03               	movlw	3
 15278  001362  6E13               	movwf	___wmul@multiplicand,c
 15279  001364  0E00               	movlw	0
 15280  001366  6E1A               	movwf	___awdiv@divisor+1,c
 15281  001368  0E0A               	movlw	10
 15282  00136A  6E19               	movwf	___awdiv@divisor,c
 15283  00136C  0E00               	movlw	0
 15284  00136E  6E40               	movwf	___awmod@divisor+1,c
 15285  001370  0E64               	movlw	100
 15286  001372  6E3F               	movwf	___awmod@divisor,c
 15287  001374  5049               	movf	scale@scl,w,c
 15288  001376  6E3D               	movwf	___awmod@dividend,c
 15289  001378  6A3E               	clrf	___awmod@dividend+1,c
 15290  00137A  BE3D               	btfsc	___awmod@dividend,7,c
 15291  00137C  063E               	decf	___awmod@dividend+1,f,c
 15292  00137E  EC62  F020         	call	___awmod	;wreg free
 15293  001382  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15294  001386  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15295  00138A  EC31  F01E         	call	___awdiv	;wreg free
 15296  00138E  0E09               	movlw	9
 15297  001390  2417               	addwf	?___awdiv,w,c
 15298  001392  6E11               	movwf	___wmul@multiplier,c
 15299  001394  0E00               	movlw	0
 15300  001396  2018               	addwfc	?___awdiv+1,w,c
 15301  001398  6E12               	movwf	___wmul@multiplier+1,c
 15302  00139A  ECD5  F024         	call	___wmul	;wreg free
 15303  00139E  0EC4               	movlw	low __npowers_
 15304  0013A0  2411               	addwf	?___wmul,w,c
 15305  0013A2  6EF6               	movwf	tblptrl,c
 15306  0013A4  0EFD               	movlw	high __npowers_
 15307  0013A6  2012               	addwfc	?___wmul+1,w,c
 15308  0013A8  6EF7               	movwf	tblptrh,c
 15309  0013AA                     	if	0	;There are less than 3 active tblptr bytes
 15310  0013AA                     	endif
 15311  0013AA  0009               	tblrd		*+
 15312  0013AC  CFF5 F022          	movff	tablat,___ftmul@f2
 15313  0013B0  0009               	tblrd		*+
 15314  0013B2  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15315  0013B6  000A               	tblrd		*-
 15316  0013B8  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15317  0013BC  0E00               	movlw	0
 15318  0013BE  6E1A               	movwf	___awdiv@divisor+1,c
 15319  0013C0  0E64               	movlw	100
 15320  0013C2  6E19               	movwf	___awdiv@divisor,c
 15321  0013C4  5049               	movf	scale@scl,w,c
 15322  0013C6  6E17               	movwf	___awdiv@dividend,c
 15323  0013C8  6A18               	clrf	___awdiv@dividend+1,c
 15324  0013CA  BE17               	btfsc	___awdiv@dividend,7,c
 15325  0013CC  0618               	decf	___awdiv@dividend+1,f,c
 15326  0013CE  EC31  F01E         	call	___awdiv	;wreg free
 15327  0013D2  0E12               	movlw	18
 15328  0013D4  2417               	addwf	?___awdiv,w,c
 15329  0013D6  6E11               	movwf	___wmul@multiplier,c
 15330  0013D8  0E00               	movlw	0
 15331  0013DA  2018               	addwfc	?___awdiv+1,w,c
 15332  0013DC  6E12               	movwf	___wmul@multiplier+1,c
 15333  0013DE  0E00               	movlw	0
 15334  0013E0  6E14               	movwf	___wmul@multiplicand+1,c
 15335  0013E2  0E03               	movlw	3
 15336  0013E4  6E13               	movwf	___wmul@multiplicand,c
 15337  0013E6  ECD5  F024         	call	___wmul	;wreg free
 15338  0013EA  0EC4               	movlw	low __npowers_
 15339  0013EC  2411               	addwf	?___wmul,w,c
 15340  0013EE  6EF6               	movwf	tblptrl,c
 15341  0013F0  0EFD               	movlw	high __npowers_
 15342  0013F2  2012               	addwfc	?___wmul+1,w,c
 15343  0013F4  6EF7               	movwf	tblptrh,c
 15344  0013F6                     	if	0	;There are less than 3 active tblptr bytes
 15345  0013F6                     	endif
 15346  0013F6  0009               	tblrd		*+
 15347  0013F8  CFF5 F01F          	movff	tablat,___ftmul@f1
 15348  0013FC  0009               	tblrd		*+
 15349  0013FE  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15350  001402  000A               	tblrd		*-
 15351  001404  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15352  001408  ECF4  F018         	call	___ftmul	;wreg free
 15353  00140C  C01F  F046         	movff	?___ftmul,_scale$2977
 15354  001410  C020  F047         	movff	?___ftmul+1,_scale$2977+1
 15355  001414  C021  F048         	movff	?___ftmul+2,_scale$2977+2
 15356                           
 15357                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15358  001418  C046  F01F         	movff	_scale$2977,___ftmul@f1
 15359  00141C  C047  F020         	movff	_scale$2977+1,___ftmul@f1+1
 15360  001420  C048  F021         	movff	_scale$2977+2,___ftmul@f1+2
 15361  001424  0E00               	movlw	0
 15362  001426  6E14               	movwf	___wmul@multiplicand+1,c
 15363  001428  0E03               	movlw	3
 15364  00142A  6E13               	movwf	___wmul@multiplicand,c
 15365  00142C  0E00               	movlw	0
 15366  00142E  6E40               	movwf	___awmod@divisor+1,c
 15367  001430  0E0A               	movlw	10
 15368  001432  6E3F               	movwf	___awmod@divisor,c
 15369  001434  5049               	movf	scale@scl,w,c
 15370  001436  6E3D               	movwf	___awmod@dividend,c
 15371  001438  6A3E               	clrf	___awmod@dividend+1,c
 15372  00143A  BE3D               	btfsc	___awmod@dividend,7,c
 15373  00143C  063E               	decf	___awmod@dividend+1,f,c
 15374  00143E  EC62  F020         	call	___awmod	;wreg free
 15375  001442  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15376  001446  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15377  00144A  ECD5  F024         	call	___wmul	;wreg free
 15378  00144E  0EC4               	movlw	low __npowers_
 15379  001450  2411               	addwf	?___wmul,w,c
 15380  001452  6EF6               	movwf	tblptrl,c
 15381  001454  0EFD               	movlw	high __npowers_
 15382  001456  2012               	addwfc	?___wmul+1,w,c
 15383  001458  6EF7               	movwf	tblptrh,c
 15384  00145A                     	if	0	;There are less than 3 active tblptr bytes
 15385  00145A                     	endif
 15386  00145A  0009               	tblrd		*+
 15387  00145C  CFF5 F022          	movff	tablat,___ftmul@f2
 15388  001460  0009               	tblrd		*+
 15389  001462  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15390  001466  000A               	tblrd		*-
 15391  001468  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15392  00146C  ECF4  F018         	call	___ftmul	;wreg free
 15393  001470  D141               	goto	L13
 15394  001472  D15A               	goto	l1355
 15395  001474  D054               	goto	l8786
 15396  001476                     l8780:
 15397                           
 15398                           ;doprnt.c: 432: else if(scl > 10)
 15399  001476  5049               	movf	scale@scl,w,c
 15400  001478  0A80               	xorlw	128
 15401  00147A  0F75               	addlw	-139
 15402  00147C  A0D8               	btfss	status,0,c
 15403  00147E  D04F               	goto	l8786
 15404                           
 15405                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 15406  001480  0E00               	movlw	0
 15407  001482  6E1A               	movwf	___awdiv@divisor+1,c
 15408  001484  0E0A               	movlw	10
 15409  001486  6E19               	movwf	___awdiv@divisor,c
 15410  001488  5049               	movf	scale@scl,w,c
 15411  00148A  6E17               	movwf	___awdiv@dividend,c
 15412  00148C  6A18               	clrf	___awdiv@dividend+1,c
 15413  00148E  BE17               	btfsc	___awdiv@dividend,7,c
 15414  001490  0618               	decf	___awdiv@dividend+1,f,c
 15415  001492  EC31  F01E         	call	___awdiv	;wreg free
 15416  001496  0E09               	movlw	9
 15417  001498  2417               	addwf	?___awdiv,w,c
 15418  00149A  6E11               	movwf	___wmul@multiplier,c
 15419  00149C  0E00               	movlw	0
 15420  00149E  2018               	addwfc	?___awdiv+1,w,c
 15421  0014A0  6E12               	movwf	___wmul@multiplier+1,c
 15422  0014A2  0E00               	movlw	0
 15423  0014A4  6E14               	movwf	___wmul@multiplicand+1,c
 15424  0014A6  0E03               	movlw	3
 15425  0014A8  6E13               	movwf	___wmul@multiplicand,c
 15426  0014AA  ECD5  F024         	call	___wmul	;wreg free
 15427  0014AE  0EC4               	movlw	low __npowers_
 15428  0014B0  2411               	addwf	?___wmul,w,c
 15429  0014B2  6EF6               	movwf	tblptrl,c
 15430  0014B4  0EFD               	movlw	high __npowers_
 15431  0014B6  2012               	addwfc	?___wmul+1,w,c
 15432  0014B8  6EF7               	movwf	tblptrh,c
 15433  0014BA                     	if	0	;There are less than 3 active tblptr bytes
 15434  0014BA                     	endif
 15435  0014BA  0009               	tblrd		*+
 15436  0014BC  CFF5 F01F          	movff	tablat,___ftmul@f1
 15437  0014C0  0009               	tblrd		*+
 15438  0014C2  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15439  0014C6  000A               	tblrd		*-
 15440  0014C8  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15441  0014CC  0E00               	movlw	0
 15442  0014CE  6E14               	movwf	___wmul@multiplicand+1,c
 15443  0014D0  0E03               	movlw	3
 15444  0014D2  6E13               	movwf	___wmul@multiplicand,c
 15445  0014D4  0E00               	movlw	0
 15446  0014D6  6E40               	movwf	___awmod@divisor+1,c
 15447  0014D8  0E0A               	movlw	10
 15448  0014DA  6E3F               	movwf	___awmod@divisor,c
 15449  0014DC  5049               	movf	scale@scl,w,c
 15450  0014DE  6E3D               	movwf	___awmod@dividend,c
 15451  0014E0  6A3E               	clrf	___awmod@dividend+1,c
 15452  0014E2  BE3D               	btfsc	___awmod@dividend,7,c
 15453  0014E4  063E               	decf	___awmod@dividend+1,f,c
 15454  0014E6  EC62  F020         	call	___awmod	;wreg free
 15455  0014EA  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15456  0014EE  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15457  0014F2  ECD5  F024         	call	___wmul	;wreg free
 15458  0014F6  0EC4               	movlw	low __npowers_
 15459  0014F8  2411               	addwf	?___wmul,w,c
 15460  0014FA  6EF6               	movwf	tblptrl,c
 15461  0014FC  0EFD               	movlw	high __npowers_
 15462  0014FE  2012               	addwfc	?___wmul+1,w,c
 15463  001500  6EF7               	movwf	tblptrh,c
 15464  001502                     	if	0	;There are less than 3 active tblptr bytes
 15465  001502                     	endif
 15466  001502  0009               	tblrd		*+
 15467  001504  CFF5 F022          	movff	tablat,___ftmul@f2
 15468  001508  0009               	tblrd		*+
 15469  00150A  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15470  00150E  000A               	tblrd		*-
 15471  001510  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15472  001514  ECF4  F018         	call	___ftmul	;wreg free
 15473  001518  D0ED               	goto	L13
 15474  00151A  D106               	goto	l1355
 15475  00151C  D000               	goto	l8786
 15476  00151E                     l8786:
 15477                           
 15478                           ;doprnt.c: 434: return _npowers_[scl];
 15479  00151E  5049               	movf	scale@scl,w,c
 15480  001520  0D03               	mullw	3
 15481  001522  0EC4               	movlw	low __npowers_
 15482  001524  24F3               	addwf	prodl,w,c
 15483  001526  6EF6               	movwf	tblptrl,c
 15484  001528  0EFD               	movlw	high __npowers_
 15485  00152A  D0F2               	goto	L12
 15486  00152C  D0FD               	goto	l1355
 15487  00152E                     l8790:
 15488                           
 15489                           ;doprnt.c: 435: }
 15490                           ;doprnt.c: 436: if(scl>=110)
 15491  00152E  5049               	movf	scale@scl,w,c
 15492  001530  0A80               	xorlw	128
 15493  001532  0F12               	addlw	-238
 15494  001534  A0D8               	btfss	status,0,c
 15495  001536  D08D               	goto	l8798
 15496                           
 15497                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15498  001538  0E00               	movlw	0
 15499  00153A  6E14               	movwf	___wmul@multiplicand+1,c
 15500  00153C  0E03               	movlw	3
 15501  00153E  6E13               	movwf	___wmul@multiplicand,c
 15502  001540  0E00               	movlw	0
 15503  001542  6E1A               	movwf	___awdiv@divisor+1,c
 15504  001544  0E0A               	movlw	10
 15505  001546  6E19               	movwf	___awdiv@divisor,c
 15506  001548  0E00               	movlw	0
 15507  00154A  6E40               	movwf	___awmod@divisor+1,c
 15508  00154C  0E64               	movlw	100
 15509  00154E  6E3F               	movwf	___awmod@divisor,c
 15510  001550  5049               	movf	scale@scl,w,c
 15511  001552  6E3D               	movwf	___awmod@dividend,c
 15512  001554  6A3E               	clrf	___awmod@dividend+1,c
 15513  001556  BE3D               	btfsc	___awmod@dividend,7,c
 15514  001558  063E               	decf	___awmod@dividend+1,f,c
 15515  00155A  EC62  F020         	call	___awmod	;wreg free
 15516  00155E  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15517  001562  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15518  001566  EC31  F01E         	call	___awdiv	;wreg free
 15519  00156A  0E09               	movlw	9
 15520  00156C  2417               	addwf	?___awdiv,w,c
 15521  00156E  6E11               	movwf	___wmul@multiplier,c
 15522  001570  0E00               	movlw	0
 15523  001572  2018               	addwfc	?___awdiv+1,w,c
 15524  001574  6E12               	movwf	___wmul@multiplier+1,c
 15525  001576  ECD5  F024         	call	___wmul	;wreg free
 15526  00157A  0EEB               	movlw	low __powers_
 15527  00157C  2411               	addwf	?___wmul,w,c
 15528  00157E  6EF6               	movwf	tblptrl,c
 15529  001580  0EFD               	movlw	high __powers_
 15530  001582  2012               	addwfc	?___wmul+1,w,c
 15531  001584  6EF7               	movwf	tblptrh,c
 15532  001586                     	if	0	;There are less than 3 active tblptr bytes
 15533  001586                     	endif
 15534  001586  0009               	tblrd		*+
 15535  001588  CFF5 F022          	movff	tablat,___ftmul@f2
 15536  00158C  0009               	tblrd		*+
 15537  00158E  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15538  001592  000A               	tblrd		*-
 15539  001594  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15540  001598  0E00               	movlw	0
 15541  00159A  6E1A               	movwf	___awdiv@divisor+1,c
 15542  00159C  0E64               	movlw	100
 15543  00159E  6E19               	movwf	___awdiv@divisor,c
 15544  0015A0  5049               	movf	scale@scl,w,c
 15545  0015A2  6E17               	movwf	___awdiv@dividend,c
 15546  0015A4  6A18               	clrf	___awdiv@dividend+1,c
 15547  0015A6  BE17               	btfsc	___awdiv@dividend,7,c
 15548  0015A8  0618               	decf	___awdiv@dividend+1,f,c
 15549  0015AA  EC31  F01E         	call	___awdiv	;wreg free
 15550  0015AE  0E12               	movlw	18
 15551  0015B0  2417               	addwf	?___awdiv,w,c
 15552  0015B2  6E11               	movwf	___wmul@multiplier,c
 15553  0015B4  0E00               	movlw	0
 15554  0015B6  2018               	addwfc	?___awdiv+1,w,c
 15555  0015B8  6E12               	movwf	___wmul@multiplier+1,c
 15556  0015BA  0E00               	movlw	0
 15557  0015BC  6E14               	movwf	___wmul@multiplicand+1,c
 15558  0015BE  0E03               	movlw	3
 15559  0015C0  6E13               	movwf	___wmul@multiplicand,c
 15560  0015C2  ECD5  F024         	call	___wmul	;wreg free
 15561  0015C6  0EEB               	movlw	low __powers_
 15562  0015C8  2411               	addwf	?___wmul,w,c
 15563  0015CA  6EF6               	movwf	tblptrl,c
 15564  0015CC  0EFD               	movlw	high __powers_
 15565  0015CE  2012               	addwfc	?___wmul+1,w,c
 15566  0015D0  6EF7               	movwf	tblptrh,c
 15567  0015D2                     	if	0	;There are less than 3 active tblptr bytes
 15568  0015D2                     	endif
 15569  0015D2  0009               	tblrd		*+
 15570  0015D4  CFF5 F01F          	movff	tablat,___ftmul@f1
 15571  0015D8  0009               	tblrd		*+
 15572  0015DA  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15573  0015DE  000A               	tblrd		*-
 15574  0015E0  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15575  0015E4  ECF4  F018         	call	___ftmul	;wreg free
 15576  0015E8  C01F  F046         	movff	?___ftmul,_scale$2977
 15577  0015EC  C020  F047         	movff	?___ftmul+1,_scale$2977+1
 15578  0015F0  C021  F048         	movff	?___ftmul+2,_scale$2977+2
 15579                           
 15580                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15581  0015F4  C046  F01F         	movff	_scale$2977,___ftmul@f1
 15582  0015F8  C047  F020         	movff	_scale$2977+1,___ftmul@f1+1
 15583  0015FC  C048  F021         	movff	_scale$2977+2,___ftmul@f1+2
 15584  001600  0E00               	movlw	0
 15585  001602  6E14               	movwf	___wmul@multiplicand+1,c
 15586  001604  0E03               	movlw	3
 15587  001606  6E13               	movwf	___wmul@multiplicand,c
 15588  001608  0E00               	movlw	0
 15589  00160A  6E40               	movwf	___awmod@divisor+1,c
 15590  00160C  0E0A               	movlw	10
 15591  00160E  6E3F               	movwf	___awmod@divisor,c
 15592  001610  5049               	movf	scale@scl,w,c
 15593  001612  6E3D               	movwf	___awmod@dividend,c
 15594  001614  6A3E               	clrf	___awmod@dividend+1,c
 15595  001616  BE3D               	btfsc	___awmod@dividend,7,c
 15596  001618  063E               	decf	___awmod@dividend+1,f,c
 15597  00161A  EC62  F020         	call	___awmod	;wreg free
 15598  00161E  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15599  001622  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15600  001626  ECD5  F024         	call	___wmul	;wreg free
 15601  00162A  0EEB               	movlw	low __powers_
 15602  00162C  2411               	addwf	?___wmul,w,c
 15603  00162E  6EF6               	movwf	tblptrl,c
 15604  001630  0EFD               	movlw	high __powers_
 15605  001632  2012               	addwfc	?___wmul+1,w,c
 15606  001634  6EF7               	movwf	tblptrh,c
 15607  001636                     	if	0	;There are less than 3 active tblptr bytes
 15608  001636                     	endif
 15609  001636  0009               	tblrd		*+
 15610  001638  CFF5 F022          	movff	tablat,___ftmul@f2
 15611  00163C  0009               	tblrd		*+
 15612  00163E  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15613  001642  000A               	tblrd		*-
 15614  001644  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15615  001648  ECF4  F018         	call	___ftmul	;wreg free
 15616  00164C  D053               	goto	L13
 15617  00164E  D06C               	goto	l1355
 15618  001650  D059               	goto	l8804
 15619  001652                     l8798:
 15620                           
 15621                           ;doprnt.c: 438: else if(scl > 10)
 15622  001652  5049               	movf	scale@scl,w,c
 15623  001654  0A80               	xorlw	128
 15624  001656  0F75               	addlw	-139
 15625  001658  A0D8               	btfss	status,0,c
 15626  00165A  D054               	goto	l8804
 15627                           
 15628                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 15629  00165C  0E00               	movlw	0
 15630  00165E  6E1A               	movwf	___awdiv@divisor+1,c
 15631  001660  0E0A               	movlw	10
 15632  001662  6E19               	movwf	___awdiv@divisor,c
 15633  001664  5049               	movf	scale@scl,w,c
 15634  001666  6E17               	movwf	___awdiv@dividend,c
 15635  001668  6A18               	clrf	___awdiv@dividend+1,c
 15636  00166A  BE17               	btfsc	___awdiv@dividend,7,c
 15637  00166C  0618               	decf	___awdiv@dividend+1,f,c
 15638  00166E  EC31  F01E         	call	___awdiv	;wreg free
 15639  001672  0E09               	movlw	9
 15640  001674  2417               	addwf	?___awdiv,w,c
 15641  001676  6E11               	movwf	___wmul@multiplier,c
 15642  001678  0E00               	movlw	0
 15643  00167A  2018               	addwfc	?___awdiv+1,w,c
 15644  00167C  6E12               	movwf	___wmul@multiplier+1,c
 15645  00167E  0E00               	movlw	0
 15646  001680  6E14               	movwf	___wmul@multiplicand+1,c
 15647  001682  0E03               	movlw	3
 15648  001684  6E13               	movwf	___wmul@multiplicand,c
 15649  001686  ECD5  F024         	call	___wmul	;wreg free
 15650  00168A  0EEB               	movlw	low __powers_
 15651  00168C  2411               	addwf	?___wmul,w,c
 15652  00168E  6EF6               	movwf	tblptrl,c
 15653  001690  0EFD               	movlw	high __powers_
 15654  001692  2012               	addwfc	?___wmul+1,w,c
 15655  001694  6EF7               	movwf	tblptrh,c
 15656  001696                     	if	0	;There are less than 3 active tblptr bytes
 15657  001696                     	endif
 15658  001696  0009               	tblrd		*+
 15659  001698  CFF5 F01F          	movff	tablat,___ftmul@f1
 15660  00169C  0009               	tblrd		*+
 15661  00169E  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15662  0016A2  000A               	tblrd		*-
 15663  0016A4  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15664  0016A8  0E00               	movlw	0
 15665  0016AA  6E14               	movwf	___wmul@multiplicand+1,c
 15666  0016AC  0E03               	movlw	3
 15667  0016AE  6E13               	movwf	___wmul@multiplicand,c
 15668  0016B0  0E00               	movlw	0
 15669  0016B2  6E40               	movwf	___awmod@divisor+1,c
 15670  0016B4  0E0A               	movlw	10
 15671  0016B6  6E3F               	movwf	___awmod@divisor,c
 15672  0016B8  5049               	movf	scale@scl,w,c
 15673  0016BA  6E3D               	movwf	___awmod@dividend,c
 15674  0016BC  6A3E               	clrf	___awmod@dividend+1,c
 15675  0016BE  BE3D               	btfsc	___awmod@dividend,7,c
 15676  0016C0  063E               	decf	___awmod@dividend+1,f,c
 15677  0016C2  EC62  F020         	call	___awmod	;wreg free
 15678  0016C6  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15679  0016CA  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15680  0016CE  ECD5  F024         	call	___wmul	;wreg free
 15681  0016D2  0EEB               	movlw	low __powers_
 15682  0016D4  2411               	addwf	?___wmul,w,c
 15683  0016D6  6EF6               	movwf	tblptrl,c
 15684  0016D8  0EFD               	movlw	high __powers_
 15685  0016DA  2012               	addwfc	?___wmul+1,w,c
 15686  0016DC  6EF7               	movwf	tblptrh,c
 15687  0016DE                     	if	0	;There are less than 3 active tblptr bytes
 15688  0016DE                     	endif
 15689  0016DE  0009               	tblrd		*+
 15690  0016E0  CFF5 F022          	movff	tablat,___ftmul@f2
 15691  0016E4  0009               	tblrd		*+
 15692  0016E6  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15693  0016EA  000A               	tblrd		*-
 15694  0016EC  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15695  0016F0  ECF4  F018         	call	___ftmul	;wreg free
 15696  0016F4                     L13:
 15697  0016F4  C01F  F043         	movff	?___ftmul,?_scale
 15698  0016F8  C020  F044         	movff	?___ftmul+1,?_scale+1
 15699  0016FC  C021  F045         	movff	?___ftmul+2,?_scale+2
 15700  001700  D013               	goto	l1355
 15701  001702  D000               	goto	l8804
 15702  001704                     l8804:
 15703                           
 15704                           ;doprnt.c: 440: return _powers_[scl];
 15705  001704  5049               	movf	scale@scl,w,c
 15706  001706  0D03               	mullw	3
 15707  001708  0EEB               	movlw	low __powers_
 15708  00170A  24F3               	addwf	prodl,w,c
 15709  00170C  6EF6               	movwf	tblptrl,c
 15710  00170E  0EFD               	movlw	high __powers_
 15711  001710                     L12:
 15712  001710  20F4               	addwfc	prodh,w,c
 15713  001712  6EF7               	movwf	tblptrh,c
 15714  001714                     	if	0	;There are less than 3 active tblptr bytes
 15715  001714                     	endif
 15716  001714  0009               	tblrd		*+
 15717  001716  CFF5 F043          	movff	tablat,?_scale
 15718  00171A  0009               	tblrd		*+
 15719  00171C  CFF5 F044          	movff	tablat,?_scale+1
 15720  001720  000A               	tblrd		*-
 15721  001722  CFF5 F045          	movff	tablat,?_scale+2
 15722  001726  D000               	goto	l1355
 15723  001728                     l1355:
 15724  001728  0012               	return		;funcret
 15725  00172A                     __end_of_scale:
 15726                           	opt stack 0
 15727                           tblptru	equ	0xFF8
 15728                           tblptrh	equ	0xFF7
 15729                           tblptrl	equ	0xFF6
 15730                           tablat	equ	0xFF5
 15731                           prodh	equ	0xFF4
 15732                           prodl	equ	0xFF3
 15733                           intcon	equ	0xFF2
 15734                           intcon2	equ	0xFF1
 15735                           intcon3	equ	0xFF0
 15736                           postinc0	equ	0xFEE
 15737                           wreg	equ	0xFE8
 15738                           postdec1	equ	0xFE5
 15739                           plusw1	equ	0xFE3
 15740                           fsr1l	equ	0xFE1
 15741                           indf2	equ	0xFDF
 15742                           postinc2	equ	0xFDE
 15743                           postdec2	equ	0xFDD
 15744                           plusw2	equ	0xFDB
 15745                           fsr2h	equ	0xFDA
 15746                           fsr2l	equ	0xFD9
 15747                           status	equ	0xFD8
 15748                           
 15749 ;; *************** function _putch *****************
 15750 ;; Defined at:
 15751 ;;		line 190 in file "utils.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;  c               1    wreg     unsigned char 
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;  c               1   16[COMRAM] unsigned char 
 15756 ;; Return value:  Size  Location     Type
 15757 ;;		None               void
 15758 ;; Registers used:
 15759 ;;		wreg
 15760 ;; Tracked objects:
 15761 ;;		On entry : 0/0
 15762 ;;		On exit  : 0/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15769 ;;Total ram usage:        1 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; Hardware stack levels required when called:    3
 15772 ;; This function calls:
 15773 ;;		Nothing
 15774 ;; This function is called by:
 15775 ;;		_printf
 15776 ;; This function uses a non-reentrant model
 15777 ;;
 15778                           
 15779                           	psect	text64
 15780  004D90                     __ptext64:
 15781                           	opt stack 0
 15782  004D90                     _putch:
 15783                           	opt stack 26
 15784                           
 15785                           ;incstack = 0
 15786                           ;putch@c stored from wreg
 15787  004D90  6E11               	movwf	putch@c,c
 15788                           
 15789                           ;utils.c: 192: while (!TRMT);
 15790  004D92  D000               	goto	l505
 15791  004D94                     l505:
 15792  004D94  A2AC               	btfss	4012,1,c	;volatile
 15793  004D96  D7FE               	goto	l505
 15794                           
 15795                           ;utils.c: 193: TXREG = c;
 15796  004D98  C011  FFAD         	movff	putch@c,4013	;volatile
 15797  004D9C  0012               	return		;funcret
 15798  004D9E                     __end_of_putch:
 15799                           	opt stack 0
 15800                           tblptru	equ	0xFF8
 15801                           tblptrh	equ	0xFF7
 15802                           tblptrl	equ	0xFF6
 15803                           tablat	equ	0xFF5
 15804                           prodh	equ	0xFF4
 15805                           prodl	equ	0xFF3
 15806                           intcon	equ	0xFF2
 15807                           intcon2	equ	0xFF1
 15808                           intcon3	equ	0xFF0
 15809                           postinc0	equ	0xFEE
 15810                           wreg	equ	0xFE8
 15811                           postdec1	equ	0xFE5
 15812                           plusw1	equ	0xFE3
 15813                           fsr1l	equ	0xFE1
 15814                           indf2	equ	0xFDF
 15815                           postinc2	equ	0xFDE
 15816                           postdec2	equ	0xFDD
 15817                           plusw2	equ	0xFDB
 15818                           fsr2h	equ	0xFDA
 15819                           fsr2l	equ	0xFD9
 15820                           status	equ	0xFD8
 15821                           
 15822 ;; *************** function _isdigit *****************
 15823 ;; Defined at:
 15824 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15825 ;; Parameters:    Size  Location     Type
 15826 ;;  c               1    wreg     unsigned char 
 15827 ;; Auto vars:     Size  Location     Type
 15828 ;;  c               1   18[COMRAM] unsigned char 
 15829 ;; Return value:  Size  Location     Type
 15830 ;;		None               void
 15831 ;; Registers used:
 15832 ;;		wreg, status,2, status,0
 15833 ;; Tracked objects:
 15834 ;;		On entry : 0/0
 15835 ;;		On exit  : 0/0
 15836 ;;		Unchanged: 0/0
 15837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15841 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15842 ;;Total ram usage:        3 bytes
 15843 ;; Hardware stack levels used:    1
 15844 ;; Hardware stack levels required when called:    3
 15845 ;; This function calls:
 15846 ;;		Nothing
 15847 ;; This function is called by:
 15848 ;;		_printf
 15849 ;; This function uses a non-reentrant model
 15850 ;;
 15851                           
 15852                           	psect	text65
 15853  004AD0                     __ptext65:
 15854                           	opt stack 0
 15855  004AD0                     _isdigit:
 15856                           	opt stack 26
 15857                           
 15858                           ;incstack = 0
 15859                           ;isdigit@c stored from wreg
 15860  004AD0  6E13               	movwf	isdigit@c,c
 15861  004AD2  0E00               	movlw	0
 15862  004AD4  6E12               	movwf	_isdigit$2600,c
 15863  004AD6  0E3A               	movlw	58
 15864  004AD8  6013               	cpfslt	isdigit@c,c
 15865  004ADA  D006               	goto	l8816
 15866  004ADC  0E2F               	movlw	47
 15867  004ADE  6413               	cpfsgt	isdigit@c,c
 15868  004AE0  D003               	goto	l8816
 15869  004AE2  0E01               	movlw	1
 15870  004AE4  6E12               	movwf	_isdigit$2600,c
 15871  004AE6  D000               	goto	l8816
 15872  004AE8                     l8816:
 15873  004AE8  C012  F011         	movff	_isdigit$2600,??_isdigit
 15874  004AEC  3011               	rrcf	??_isdigit,w,c
 15875  004AEE  D000               	goto	l1967
 15876  004AF0                     l1967:
 15877  004AF0  0012               	return		;funcret
 15878  004AF2                     __end_of_isdigit:
 15879                           	opt stack 0
 15880                           tblptru	equ	0xFF8
 15881                           tblptrh	equ	0xFF7
 15882                           tblptrl	equ	0xFF6
 15883                           tablat	equ	0xFF5
 15884                           prodh	equ	0xFF4
 15885                           prodl	equ	0xFF3
 15886                           intcon	equ	0xFF2
 15887                           intcon2	equ	0xFF1
 15888                           intcon3	equ	0xFF0
 15889                           postinc0	equ	0xFEE
 15890                           wreg	equ	0xFE8
 15891                           postdec1	equ	0xFE5
 15892                           plusw1	equ	0xFE3
 15893                           fsr1l	equ	0xFE1
 15894                           indf2	equ	0xFDF
 15895                           postinc2	equ	0xFDE
 15896                           postdec2	equ	0xFDD
 15897                           plusw2	equ	0xFDB
 15898                           fsr2h	equ	0xFDA
 15899                           fsr2l	equ	0xFD9
 15900                           status	equ	0xFD8
 15901                           
 15902 ;; *************** function _fround *****************
 15903 ;; Defined at:
 15904 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;  prec            1    wreg     unsigned char 
 15907 ;; Auto vars:     Size  Location     Type
 15908 ;;  prec            1   75[COMRAM] unsigned char 
 15909 ;; Return value:  Size  Location     Type
 15910 ;;                  3   66[COMRAM] unsigned char 
 15911 ;; Registers used:
 15912 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15918 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15919 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15921 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15922 ;;Total ram usage:       10 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    5
 15925 ;; This function calls:
 15926 ;;		___awdiv
 15927 ;;		___awmod
 15928 ;;		___ftmul
 15929 ;;		___wmul
 15930 ;; This function is called by:
 15931 ;;		_printf
 15932 ;; This function uses a non-reentrant model
 15933 ;;
 15934                           
 15935                           	psect	text66
 15936  001D86                     __ptext66:
 15937                           	opt stack 0
 15938  001D86                     _fround:
 15939                           	opt stack 24
 15940                           
 15941                           ;incstack = 0
 15942                           ;fround@prec stored from wreg
 15943  001D86  6E4C               	movwf	fround@prec,c
 15944                           
 15945                           ;doprnt.c: 413: if(prec>=110)
 15946  001D88  0E6D               	movlw	109
 15947  001D8A  644C               	cpfsgt	fround@prec,c
 15948  001D8C  D09B               	goto	l8758
 15949                           
 15950                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15951  001D8E  0E00               	movlw	0
 15952  001D90  6E14               	movwf	___wmul@multiplicand+1,c
 15953  001D92  0E03               	movlw	3
 15954  001D94  6E13               	movwf	___wmul@multiplicand,c
 15955  001D96  0E00               	movlw	0
 15956  001D98  6E1A               	movwf	___awdiv@divisor+1,c
 15957  001D9A  0E0A               	movlw	10
 15958  001D9C  6E19               	movwf	___awdiv@divisor,c
 15959  001D9E  0E00               	movlw	0
 15960  001DA0  6E40               	movwf	___awmod@divisor+1,c
 15961  001DA2  0E64               	movlw	100
 15962  001DA4  6E3F               	movwf	___awmod@divisor,c
 15963  001DA6  C04C  F03D         	movff	fround@prec,___awmod@dividend
 15964  001DAA  6A3E               	clrf	___awmod@dividend+1,c
 15965  001DAC  EC62  F020         	call	___awmod	;wreg free
 15966  001DB0  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15967  001DB4  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15968  001DB8  EC31  F01E         	call	___awdiv	;wreg free
 15969  001DBC  0E09               	movlw	9
 15970  001DBE  2417               	addwf	?___awdiv,w,c
 15971  001DC0  6E11               	movwf	___wmul@multiplier,c
 15972  001DC2  0E00               	movlw	0
 15973  001DC4  2018               	addwfc	?___awdiv+1,w,c
 15974  001DC6  6E12               	movwf	___wmul@multiplier+1,c
 15975  001DC8  ECD5  F024         	call	___wmul	;wreg free
 15976  001DCC  0EC4               	movlw	low __npowers_
 15977  001DCE  2411               	addwf	?___wmul,w,c
 15978  001DD0  6EF6               	movwf	tblptrl,c
 15979  001DD2  0EFD               	movlw	high __npowers_
 15980  001DD4  2012               	addwfc	?___wmul+1,w,c
 15981  001DD6  6EF7               	movwf	tblptrh,c
 15982  001DD8                     	if	0	;There are less than 3 active tblptr bytes
 15983  001DD8                     	endif
 15984  001DD8  0009               	tblrd		*+
 15985  001DDA  CFF5 F022          	movff	tablat,___ftmul@f2
 15986  001DDE  0009               	tblrd		*+
 15987  001DE0  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15988  001DE4  000A               	tblrd		*-
 15989  001DE6  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15990  001DEA  0E00               	movlw	0
 15991  001DEC  6E1A               	movwf	___awdiv@divisor+1,c
 15992  001DEE  0E64               	movlw	100
 15993  001DF0  6E19               	movwf	___awdiv@divisor,c
 15994  001DF2  C04C  F017         	movff	fround@prec,___awdiv@dividend
 15995  001DF6  6A18               	clrf	___awdiv@dividend+1,c
 15996  001DF8  EC31  F01E         	call	___awdiv	;wreg free
 15997  001DFC  0E12               	movlw	18
 15998  001DFE  2417               	addwf	?___awdiv,w,c
 15999  001E00  6E11               	movwf	___wmul@multiplier,c
 16000  001E02  0E00               	movlw	0
 16001  001E04  2018               	addwfc	?___awdiv+1,w,c
 16002  001E06  6E12               	movwf	___wmul@multiplier+1,c
 16003  001E08  0E00               	movlw	0
 16004  001E0A  6E14               	movwf	___wmul@multiplicand+1,c
 16005  001E0C  0E03               	movlw	3
 16006  001E0E  6E13               	movwf	___wmul@multiplicand,c
 16007  001E10  ECD5  F024         	call	___wmul	;wreg free
 16008  001E14  0EC4               	movlw	low __npowers_
 16009  001E16  2411               	addwf	?___wmul,w,c
 16010  001E18  6EF6               	movwf	tblptrl,c
 16011  001E1A  0EFD               	movlw	high __npowers_
 16012  001E1C  2012               	addwfc	?___wmul+1,w,c
 16013  001E1E  6EF7               	movwf	tblptrh,c
 16014  001E20                     	if	0	;There are less than 3 active tblptr bytes
 16015  001E20                     	endif
 16016  001E20  0009               	tblrd		*+
 16017  001E22  CFF5 F01F          	movff	tablat,___ftmul@f1
 16018  001E26  0009               	tblrd		*+
 16019  001E28  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16020  001E2C  000A               	tblrd		*-
 16021  001E2E  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16022  001E32  ECF4  F018         	call	___ftmul	;wreg free
 16023  001E36  C01F  F049         	movff	?___ftmul,_fround$2975
 16024  001E3A  C020  F04A         	movff	?___ftmul+1,_fround$2975+1
 16025  001E3E  C021  F04B         	movff	?___ftmul+2,_fround$2975+2
 16026                           
 16027                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16028  001E42  0E00               	movlw	0
 16029  001E44  6E14               	movwf	___wmul@multiplicand+1,c
 16030  001E46  0E03               	movlw	3
 16031  001E48  6E13               	movwf	___wmul@multiplicand,c
 16032  001E4A  0E00               	movlw	0
 16033  001E4C  6E40               	movwf	___awmod@divisor+1,c
 16034  001E4E  0E0A               	movlw	10
 16035  001E50  6E3F               	movwf	___awmod@divisor,c
 16036  001E52  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16037  001E56  6A3E               	clrf	___awmod@dividend+1,c
 16038  001E58  EC62  F020         	call	___awmod	;wreg free
 16039  001E5C  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16040  001E60  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16041  001E64  ECD5  F024         	call	___wmul	;wreg free
 16042  001E68  0EC4               	movlw	low __npowers_
 16043  001E6A  2411               	addwf	?___wmul,w,c
 16044  001E6C  6EF6               	movwf	tblptrl,c
 16045  001E6E  0EFD               	movlw	high __npowers_
 16046  001E70  2012               	addwfc	?___wmul+1,w,c
 16047  001E72  6EF7               	movwf	tblptrh,c
 16048  001E74                     	if	0	;There are less than 3 active tblptr bytes
 16049  001E74                     	endif
 16050  001E74  0009               	tblrd		*+
 16051  001E76  CFF5 F022          	movff	tablat,___ftmul@f2
 16052  001E7A  0009               	tblrd		*+
 16053  001E7C  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16054  001E80  000A               	tblrd		*-
 16055  001E82  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16056  001E86  C049  F01F         	movff	_fround$2975,___ftmul@f1
 16057  001E8A  C04A  F020         	movff	_fround$2975+1,___ftmul@f1+1
 16058  001E8E  C04B  F021         	movff	_fround$2975+2,___ftmul@f1+2
 16059  001E92  ECF4  F018         	call	___ftmul	;wreg free
 16060  001E96  C01F  F046         	movff	?___ftmul,_fround$2976
 16061  001E9A  C020  F047         	movff	?___ftmul+1,_fround$2976+1
 16062  001E9E  C021  F048         	movff	?___ftmul+2,_fround$2976+2
 16063                           
 16064                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16065  001EA2  C046  F01F         	movff	_fround$2976,___ftmul@f1
 16066  001EA6  C047  F020         	movff	_fround$2976+1,___ftmul@f1+1
 16067  001EAA  C048  F021         	movff	_fround$2976+2,___ftmul@f1+2
 16068  001EAE  0E00               	movlw	0
 16069  001EB0  6E22               	movwf	___ftmul@f2,c
 16070  001EB2  0E00               	movlw	0
 16071  001EB4  6E23               	movwf	___ftmul@f2+1,c
 16072  001EB6  0E3F               	movlw	63
 16073  001EB8  6E24               	movwf	___ftmul@f2+2,c
 16074  001EBA  ECF4  F018         	call	___ftmul	;wreg free
 16075  001EBE  D07D               	goto	L15
 16076  001EC0  D083               	goto	l1348
 16077  001EC2  D062               	goto	l8766
 16078  001EC4                     l8758:
 16079                           
 16080                           ;doprnt.c: 415: else if(prec > 10)
 16081  001EC4  0E0A               	movlw	10
 16082  001EC6  644C               	cpfsgt	fround@prec,c
 16083  001EC8  D05F               	goto	l8766
 16084                           
 16085                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16086  001ECA  0E00               	movlw	0
 16087  001ECC  6E14               	movwf	___wmul@multiplicand+1,c
 16088  001ECE  0E03               	movlw	3
 16089  001ED0  6E13               	movwf	___wmul@multiplicand,c
 16090  001ED2  0E00               	movlw	0
 16091  001ED4  6E40               	movwf	___awmod@divisor+1,c
 16092  001ED6  0E0A               	movlw	10
 16093  001ED8  6E3F               	movwf	___awmod@divisor,c
 16094  001EDA  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16095  001EDE  6A3E               	clrf	___awmod@dividend+1,c
 16096  001EE0  EC62  F020         	call	___awmod	;wreg free
 16097  001EE4  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16098  001EE8  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16099  001EEC  ECD5  F024         	call	___wmul	;wreg free
 16100  001EF0  0EC4               	movlw	low __npowers_
 16101  001EF2  2411               	addwf	?___wmul,w,c
 16102  001EF4  6EF6               	movwf	tblptrl,c
 16103  001EF6  0EFD               	movlw	high __npowers_
 16104  001EF8  2012               	addwfc	?___wmul+1,w,c
 16105  001EFA  6EF7               	movwf	tblptrh,c
 16106  001EFC                     	if	0	;There are less than 3 active tblptr bytes
 16107  001EFC                     	endif
 16108  001EFC  0009               	tblrd		*+
 16109  001EFE  CFF5 F022          	movff	tablat,___ftmul@f2
 16110  001F02  0009               	tblrd		*+
 16111  001F04  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16112  001F08  000A               	tblrd		*-
 16113  001F0A  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16114  001F0E  0E00               	movlw	0
 16115  001F10  6E1A               	movwf	___awdiv@divisor+1,c
 16116  001F12  0E0A               	movlw	10
 16117  001F14  6E19               	movwf	___awdiv@divisor,c
 16118  001F16  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16119  001F1A  6A18               	clrf	___awdiv@dividend+1,c
 16120  001F1C  EC31  F01E         	call	___awdiv	;wreg free
 16121  001F20  0E09               	movlw	9
 16122  001F22  2417               	addwf	?___awdiv,w,c
 16123  001F24  6E11               	movwf	___wmul@multiplier,c
 16124  001F26  0E00               	movlw	0
 16125  001F28  2018               	addwfc	?___awdiv+1,w,c
 16126  001F2A  6E12               	movwf	___wmul@multiplier+1,c
 16127  001F2C  0E00               	movlw	0
 16128  001F2E  6E14               	movwf	___wmul@multiplicand+1,c
 16129  001F30  0E03               	movlw	3
 16130  001F32  6E13               	movwf	___wmul@multiplicand,c
 16131  001F34  ECD5  F024         	call	___wmul	;wreg free
 16132  001F38  0EC4               	movlw	low __npowers_
 16133  001F3A  2411               	addwf	?___wmul,w,c
 16134  001F3C  6EF6               	movwf	tblptrl,c
 16135  001F3E  0EFD               	movlw	high __npowers_
 16136  001F40  2012               	addwfc	?___wmul+1,w,c
 16137  001F42  6EF7               	movwf	tblptrh,c
 16138  001F44                     	if	0	;There are less than 3 active tblptr bytes
 16139  001F44                     	endif
 16140  001F44  0009               	tblrd		*+
 16141  001F46  CFF5 F01F          	movff	tablat,___ftmul@f1
 16142  001F4A  0009               	tblrd		*+
 16143  001F4C  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16144  001F50  000A               	tblrd		*-
 16145  001F52  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16146  001F56  ECF4  F018         	call	___ftmul	;wreg free
 16147  001F5A  C01F  F049         	movff	?___ftmul,_fround$2975
 16148  001F5E  C020  F04A         	movff	?___ftmul+1,_fround$2975+1
 16149  001F62  C021  F04B         	movff	?___ftmul+2,_fround$2975+2
 16150                           
 16151                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16152  001F66  C049  F01F         	movff	_fround$2975,___ftmul@f1
 16153  001F6A  C04A  F020         	movff	_fround$2975+1,___ftmul@f1+1
 16154  001F6E  C04B  F021         	movff	_fround$2975+2,___ftmul@f1+2
 16155  001F72  0E00               	movlw	0
 16156  001F74  6E22               	movwf	___ftmul@f2,c
 16157  001F76  0E00               	movlw	0
 16158  001F78  6E23               	movwf	___ftmul@f2+1,c
 16159  001F7A  0E3F               	movlw	63
 16160  001F7C  6E24               	movwf	___ftmul@f2+2,c
 16161  001F7E  ECF4  F018         	call	___ftmul	;wreg free
 16162  001F82  D01B               	goto	L15
 16163  001F84  D021               	goto	l1348
 16164  001F86  D000               	goto	l8766
 16165  001F88                     l8766:
 16166                           
 16167                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 16168  001F88  504C               	movf	fround@prec,w,c
 16169  001F8A  0D03               	mullw	3
 16170  001F8C  0EC4               	movlw	low __npowers_
 16171  001F8E  24F3               	addwf	prodl,w,c
 16172  001F90  6EF6               	movwf	tblptrl,c
 16173  001F92  0EFD               	movlw	high __npowers_
 16174  001F94  20F4               	addwfc	prodh,w,c
 16175  001F96  6EF7               	movwf	tblptrh,c
 16176  001F98                     	if	0	;There are less than 3 active tblptr bytes
 16177  001F98                     	endif
 16178  001F98  0009               	tblrd		*+
 16179  001F9A  CFF5 F01F          	movff	tablat,___ftmul@f1
 16180  001F9E  0009               	tblrd		*+
 16181  001FA0  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16182  001FA4  000A               	tblrd		*-
 16183  001FA6  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16184  001FAA  0E00               	movlw	0
 16185  001FAC  6E22               	movwf	___ftmul@f2,c
 16186  001FAE  0E00               	movlw	0
 16187  001FB0  6E23               	movwf	___ftmul@f2+1,c
 16188  001FB2  0E3F               	movlw	63
 16189  001FB4  6E24               	movwf	___ftmul@f2+2,c
 16190  001FB6  ECF4  F018         	call	___ftmul	;wreg free
 16191  001FBA                     L15:
 16192  001FBA  C01F  F043         	movff	?___ftmul,?_fround
 16193  001FBE  C020  F044         	movff	?___ftmul+1,?_fround+1
 16194  001FC2  C021  F045         	movff	?___ftmul+2,?_fround+2
 16195  001FC6  D000               	goto	l1348
 16196  001FC8                     l1348:
 16197  001FC8  0012               	return		;funcret
 16198  001FCA                     __end_of_fround:
 16199                           	opt stack 0
 16200                           tblptru	equ	0xFF8
 16201                           tblptrh	equ	0xFF7
 16202                           tblptrl	equ	0xFF6
 16203                           tablat	equ	0xFF5
 16204                           prodh	equ	0xFF4
 16205                           prodl	equ	0xFF3
 16206                           intcon	equ	0xFF2
 16207                           intcon2	equ	0xFF1
 16208                           intcon3	equ	0xFF0
 16209                           postinc0	equ	0xFEE
 16210                           wreg	equ	0xFE8
 16211                           postdec1	equ	0xFE5
 16212                           plusw1	equ	0xFE3
 16213                           fsr1l	equ	0xFE1
 16214                           indf2	equ	0xFDF
 16215                           postinc2	equ	0xFDE
 16216                           postdec2	equ	0xFDD
 16217                           plusw2	equ	0xFDB
 16218                           fsr2h	equ	0xFDA
 16219                           fsr2l	equ	0xFD9
 16220                           status	equ	0xFD8
 16221                           
 16222 ;; *************** function ___wmul *****************
 16223 ;; Defined at:
 16224 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16225 ;; Parameters:    Size  Location     Type
 16226 ;;  multiplier      2   16[COMRAM] unsigned int 
 16227 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16228 ;; Auto vars:     Size  Location     Type
 16229 ;;  product         2   20[COMRAM] unsigned int 
 16230 ;; Return value:  Size  Location     Type
 16231 ;;                  2   16[COMRAM] unsigned int 
 16232 ;; Registers used:
 16233 ;;		wreg, status,2, status,0, prodl, prodh
 16234 ;; Tracked objects:
 16235 ;;		On entry : 0/0
 16236 ;;		On exit  : 0/0
 16237 ;;		Unchanged: 0/0
 16238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16239 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16242 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16243 ;;Total ram usage:        6 bytes
 16244 ;; Hardware stack levels used:    1
 16245 ;; Hardware stack levels required when called:    3
 16246 ;; This function calls:
 16247 ;;		Nothing
 16248 ;; This function is called by:
 16249 ;;		_get_RPM
 16250 ;;		_delay_ms
 16251 ;;		_drawChar
 16252 ;;		_Read_Volt
 16253 ;;		_main
 16254 ;;		_Setup_Fan_Temp
 16255 ;;		_Do_Setup_Time
 16256 ;;		_fround
 16257 ;;		_scale
 16258 ;;		_printf
 16259 ;; This function uses a non-reentrant model
 16260 ;;
 16261                           
 16262                           	psect	text67
 16263  0049AA                     __ptext67:
 16264                           	opt stack 0
 16265  0049AA                     ___wmul:
 16266                           	opt stack 25
 16267                           
 16268                           ;incstack = 0
 16269  0049AA  5011               	movf	___wmul@multiplier,w,c
 16270  0049AC  0213               	mulwf	___wmul@multiplicand,c
 16271  0049AE  CFF3 F015          	movff	prodl,___wmul@product
 16272  0049B2  CFF4 F016          	movff	prodh,___wmul@product+1
 16273  0049B6  5011               	movf	___wmul@multiplier,w,c
 16274  0049B8  0214               	mulwf	___wmul@multiplicand+1,c
 16275  0049BA  50F3               	movf	prodl,w,c
 16276  0049BC  2616               	addwf	___wmul@product+1,f,c
 16277  0049BE  5012               	movf	___wmul@multiplier+1,w,c
 16278  0049C0  0213               	mulwf	___wmul@multiplicand,c
 16279  0049C2  50F3               	movf	prodl,w,c
 16280  0049C4  2616               	addwf	___wmul@product+1,f,c
 16281  0049C6  C015  F011         	movff	___wmul@product,?___wmul
 16282  0049CA  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16283  0049CE  D000               	goto	l1502
 16284  0049D0                     l1502:
 16285  0049D0  0012               	return		;funcret
 16286  0049D2                     __end_of___wmul:
 16287                           	opt stack 0
 16288                           tblptru	equ	0xFF8
 16289                           tblptrh	equ	0xFF7
 16290                           tblptrl	equ	0xFF6
 16291                           tablat	equ	0xFF5
 16292                           prodh	equ	0xFF4
 16293                           prodl	equ	0xFF3
 16294                           intcon	equ	0xFF2
 16295                           intcon2	equ	0xFF1
 16296                           intcon3	equ	0xFF0
 16297                           postinc0	equ	0xFEE
 16298                           wreg	equ	0xFE8
 16299                           postdec1	equ	0xFE5
 16300                           plusw1	equ	0xFE3
 16301                           fsr1l	equ	0xFE1
 16302                           indf2	equ	0xFDF
 16303                           postinc2	equ	0xFDE
 16304                           postdec2	equ	0xFDD
 16305                           plusw2	equ	0xFDB
 16306                           fsr2h	equ	0xFDA
 16307                           fsr2l	equ	0xFD9
 16308                           status	equ	0xFD8
 16309                           
 16310 ;; *************** function ___awmod *****************
 16311 ;; Defined at:
 16312 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 16313 ;; Parameters:    Size  Location     Type
 16314 ;;  dividend        2   60[COMRAM] int 
 16315 ;;  divisor         2   62[COMRAM] int 
 16316 ;; Auto vars:     Size  Location     Type
 16317 ;;  sign            1   65[COMRAM] unsigned char 
 16318 ;;  counter         1   64[COMRAM] unsigned char 
 16319 ;; Return value:  Size  Location     Type
 16320 ;;                  2   60[COMRAM] int 
 16321 ;; Registers used:
 16322 ;;		wreg, status,2, status,0
 16323 ;; Tracked objects:
 16324 ;;		On entry : 0/0
 16325 ;;		On exit  : 0/0
 16326 ;;		Unchanged: 0/0
 16327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16331 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16332 ;;Total ram usage:        6 bytes
 16333 ;; Hardware stack levels used:    1
 16334 ;; Hardware stack levels required when called:    3
 16335 ;; This function calls:
 16336 ;;		Nothing
 16337 ;; This function is called by:
 16338 ;;		_dec_2_bcd
 16339 ;;		_Update_Screen
 16340 ;;		_Update_Setup_Fan_Screen
 16341 ;;		_Update_Setup_Time_Screen
 16342 ;;		_fround
 16343 ;;		_scale
 16344 ;; This function uses a non-reentrant model
 16345 ;;
 16346                           
 16347                           	psect	text68
 16348  0040C4                     __ptext68:
 16349                           	opt stack 0
 16350  0040C4                     ___awmod:
 16351                           	opt stack 25
 16352                           
 16353                           ;incstack = 0
 16354  0040C4  0E00               	movlw	0
 16355  0040C6  6E42               	movwf	___awmod@sign,c
 16356  0040C8  AE3E               	btfss	___awmod@dividend+1,7,c
 16357  0040CA  D007               	goto	l8572
 16358  0040CC  6C3D               	negf	___awmod@dividend,c
 16359  0040CE  1E3E               	comf	___awmod@dividend+1,f,c
 16360  0040D0  B0D8               	btfsc	status,0,c
 16361  0040D2  2A3E               	incf	___awmod@dividend+1,f,c
 16362  0040D4  0E01               	movlw	1
 16363  0040D6  6E42               	movwf	___awmod@sign,c
 16364  0040D8  D000               	goto	l8572
 16365  0040DA                     l8572:
 16366  0040DA  AE40               	btfss	___awmod@divisor+1,7,c
 16367  0040DC  D005               	goto	l8576
 16368  0040DE  6C3F               	negf	___awmod@divisor,c
 16369  0040E0  1E40               	comf	___awmod@divisor+1,f,c
 16370  0040E2  B0D8               	btfsc	status,0,c
 16371  0040E4  2A40               	incf	___awmod@divisor+1,f,c
 16372  0040E6  D000               	goto	l8576
 16373  0040E8                     l8576:
 16374  0040E8  503F               	movf	___awmod@divisor,w,c
 16375  0040EA  1040               	iorwf	___awmod@divisor+1,w,c
 16376  0040EC  B4D8               	btfsc	status,2,c
 16377  0040EE  D01D               	goto	l8592
 16378  0040F0  0E01               	movlw	1
 16379  0040F2  6E41               	movwf	___awmod@counter,c
 16380  0040F4  D005               	goto	l8582
 16381  0040F6                     l8580:
 16382  0040F6  90D8               	bcf	status,0,c
 16383  0040F8  363F               	rlcf	___awmod@divisor,f,c
 16384  0040FA  3640               	rlcf	___awmod@divisor+1,f,c
 16385  0040FC  2A41               	incf	___awmod@counter,f,c
 16386  0040FE  D000               	goto	l8582
 16387  004100                     l8582:
 16388  004100  BE40               	btfsc	___awmod@divisor+1,7,c
 16389  004102  D002               	goto	l8584
 16390  004104  D7F8               	goto	l8580
 16391  004106  D000               	goto	l8584
 16392  004108                     l8584:
 16393  004108  503F               	movf	___awmod@divisor,w,c
 16394  00410A  5C3D               	subwf	___awmod@dividend,w,c
 16395  00410C  5040               	movf	___awmod@divisor+1,w,c
 16396  00410E  583E               	subwfb	___awmod@dividend+1,w,c
 16397  004110  A0D8               	btfss	status,0,c
 16398  004112  D005               	goto	l8588
 16399  004114  503F               	movf	___awmod@divisor,w,c
 16400  004116  5E3D               	subwf	___awmod@dividend,f,c
 16401  004118  5040               	movf	___awmod@divisor+1,w,c
 16402  00411A  5A3E               	subwfb	___awmod@dividend+1,f,c
 16403  00411C  D000               	goto	l8588
 16404  00411E                     l8588:
 16405  00411E  90D8               	bcf	status,0,c
 16406  004120  3240               	rrcf	___awmod@divisor+1,f,c
 16407  004122  323F               	rrcf	___awmod@divisor,f,c
 16408  004124  2E41               	decfsz	___awmod@counter,f,c
 16409  004126  D7F0               	goto	l8584
 16410  004128  D000               	goto	l8592
 16411  00412A                     l8592:
 16412  00412A  5042               	movf	___awmod@sign,w,c
 16413  00412C  B4D8               	btfsc	status,2,c
 16414  00412E  D005               	goto	l8596
 16415  004130  6C3D               	negf	___awmod@dividend,c
 16416  004132  1E3E               	comf	___awmod@dividend+1,f,c
 16417  004134  B0D8               	btfsc	status,0,c
 16418  004136  2A3E               	incf	___awmod@dividend+1,f,c
 16419  004138  D000               	goto	l8596
 16420  00413A                     l8596:
 16421  00413A  C03D  F03D         	movff	___awmod@dividend,?___awmod
 16422  00413E  C03E  F03E         	movff	___awmod@dividend+1,?___awmod+1
 16423  004142  D000               	goto	l1708
 16424  004144                     l1708:
 16425  004144  0012               	return		;funcret
 16426  004146                     __end_of___awmod:
 16427                           	opt stack 0
 16428                           tblptru	equ	0xFF8
 16429                           tblptrh	equ	0xFF7
 16430                           tblptrl	equ	0xFF6
 16431                           tablat	equ	0xFF5
 16432                           prodh	equ	0xFF4
 16433                           prodl	equ	0xFF3
 16434                           intcon	equ	0xFF2
 16435                           intcon2	equ	0xFF1
 16436                           intcon3	equ	0xFF0
 16437                           postinc0	equ	0xFEE
 16438                           wreg	equ	0xFE8
 16439                           postdec1	equ	0xFE5
 16440                           plusw1	equ	0xFE3
 16441                           fsr1l	equ	0xFE1
 16442                           indf2	equ	0xFDF
 16443                           postinc2	equ	0xFDE
 16444                           postdec2	equ	0xFDD
 16445                           plusw2	equ	0xFDB
 16446                           fsr2h	equ	0xFDA
 16447                           fsr2l	equ	0xFD9
 16448                           status	equ	0xFD8
 16449                           
 16450 ;; *************** function ___awdiv *****************
 16451 ;; Defined at:
 16452 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 16453 ;; Parameters:    Size  Location     Type
 16454 ;;  dividend        2   22[COMRAM] int 
 16455 ;;  divisor         2   24[COMRAM] int 
 16456 ;; Auto vars:     Size  Location     Type
 16457 ;;  quotient        2   28[COMRAM] int 
 16458 ;;  sign            1   27[COMRAM] unsigned char 
 16459 ;;  counter         1   26[COMRAM] unsigned char 
 16460 ;; Return value:  Size  Location     Type
 16461 ;;                  2   22[COMRAM] int 
 16462 ;; Registers used:
 16463 ;;		wreg, status,2, status,0
 16464 ;; Tracked objects:
 16465 ;;		On entry : 0/0
 16466 ;;		On exit  : 0/0
 16467 ;;		Unchanged: 0/0
 16468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16470 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16472 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16473 ;;Total ram usage:        8 bytes
 16474 ;; Hardware stack levels used:    1
 16475 ;; Hardware stack levels required when called:    3
 16476 ;; This function calls:
 16477 ;;		Nothing
 16478 ;; This function is called by:
 16479 ;;		_get_RPM
 16480 ;;		_dec_2_bcd
 16481 ;;		_main
 16482 ;;		_Set_D1_RGB
 16483 ;;		_Set_D2_RGB
 16484 ;;		_Update_Screen
 16485 ;;		_Setup_Fan_Temp
 16486 ;;		_Update_Setup_Fan_Screen
 16487 ;;		_Do_Setup_Time
 16488 ;;		_Update_Setup_Time_Screen
 16489 ;;		_fround
 16490 ;;		_scale
 16491 ;;		_printf
 16492 ;; This function uses a non-reentrant model
 16493 ;;
 16494                           
 16495                           	psect	text69
 16496  003C62                     __ptext69:
 16497                           	opt stack 0
 16498  003C62                     ___awdiv:
 16499                           	opt stack 25
 16500                           
 16501                           ;incstack = 0
 16502  003C62  0E00               	movlw	0
 16503  003C64  6E1C               	movwf	___awdiv@sign,c
 16504  003C66  AE1A               	btfss	___awdiv@divisor+1,7,c
 16505  003C68  D007               	goto	l8528
 16506  003C6A  6C19               	negf	___awdiv@divisor,c
 16507  003C6C  1E1A               	comf	___awdiv@divisor+1,f,c
 16508  003C6E  B0D8               	btfsc	status,0,c
 16509  003C70  2A1A               	incf	___awdiv@divisor+1,f,c
 16510  003C72  0E01               	movlw	1
 16511  003C74  6E1C               	movwf	___awdiv@sign,c
 16512  003C76  D000               	goto	l8528
 16513  003C78                     l8528:
 16514  003C78  AE18               	btfss	___awdiv@dividend+1,7,c
 16515  003C7A  D007               	goto	l8534
 16516  003C7C  6C17               	negf	___awdiv@dividend,c
 16517  003C7E  1E18               	comf	___awdiv@dividend+1,f,c
 16518  003C80  B0D8               	btfsc	status,0,c
 16519  003C82  2A18               	incf	___awdiv@dividend+1,f,c
 16520  003C84  0E01               	movlw	1
 16521  003C86  1A1C               	xorwf	___awdiv@sign,f,c
 16522  003C88  D000               	goto	l8534
 16523  003C8A                     l8534:
 16524  003C8A  0E00               	movlw	0
 16525  003C8C  6E1E               	movwf	___awdiv@quotient+1,c
 16526  003C8E  0E00               	movlw	0
 16527  003C90  6E1D               	movwf	___awdiv@quotient,c
 16528  003C92  5019               	movf	___awdiv@divisor,w,c
 16529  003C94  101A               	iorwf	___awdiv@divisor+1,w,c
 16530  003C96  B4D8               	btfsc	status,2,c
 16531  003C98  D021               	goto	l8556
 16532  003C9A  0E01               	movlw	1
 16533  003C9C  6E1B               	movwf	___awdiv@counter,c
 16534  003C9E  D005               	goto	l8542
 16535  003CA0                     l8540:
 16536  003CA0  90D8               	bcf	status,0,c
 16537  003CA2  3619               	rlcf	___awdiv@divisor,f,c
 16538  003CA4  361A               	rlcf	___awdiv@divisor+1,f,c
 16539  003CA6  2A1B               	incf	___awdiv@counter,f,c
 16540  003CA8  D000               	goto	l8542
 16541  003CAA                     l8542:
 16542  003CAA  BE1A               	btfsc	___awdiv@divisor+1,7,c
 16543  003CAC  D002               	goto	l8544
 16544  003CAE  D7F8               	goto	l8540
 16545  003CB0  D000               	goto	l8544
 16546  003CB2                     l8544:
 16547  003CB2  90D8               	bcf	status,0,c
 16548  003CB4  361D               	rlcf	___awdiv@quotient,f,c
 16549  003CB6  361E               	rlcf	___awdiv@quotient+1,f,c
 16550  003CB8  5019               	movf	___awdiv@divisor,w,c
 16551  003CBA  5C17               	subwf	___awdiv@dividend,w,c
 16552  003CBC  501A               	movf	___awdiv@divisor+1,w,c
 16553  003CBE  5818               	subwfb	___awdiv@dividend+1,w,c
 16554  003CC0  A0D8               	btfss	status,0,c
 16555  003CC2  D006               	goto	l8552
 16556  003CC4  5019               	movf	___awdiv@divisor,w,c
 16557  003CC6  5E17               	subwf	___awdiv@dividend,f,c
 16558  003CC8  501A               	movf	___awdiv@divisor+1,w,c
 16559  003CCA  5A18               	subwfb	___awdiv@dividend+1,f,c
 16560  003CCC  801D               	bsf	___awdiv@quotient,0,c
 16561  003CCE  D000               	goto	l8552
 16562  003CD0                     l8552:
 16563  003CD0  90D8               	bcf	status,0,c
 16564  003CD2  321A               	rrcf	___awdiv@divisor+1,f,c
 16565  003CD4  3219               	rrcf	___awdiv@divisor,f,c
 16566  003CD6  2E1B               	decfsz	___awdiv@counter,f,c
 16567  003CD8  D7EC               	goto	l8544
 16568  003CDA  D000               	goto	l8556
 16569  003CDC                     l8556:
 16570  003CDC  501C               	movf	___awdiv@sign,w,c
 16571  003CDE  B4D8               	btfsc	status,2,c
 16572  003CE0  D005               	goto	l8560
 16573  003CE2  6C1D               	negf	___awdiv@quotient,c
 16574  003CE4  1E1E               	comf	___awdiv@quotient+1,f,c
 16575  003CE6  B0D8               	btfsc	status,0,c
 16576  003CE8  2A1E               	incf	___awdiv@quotient+1,f,c
 16577  003CEA  D000               	goto	l8560
 16578  003CEC                     l8560:
 16579  003CEC  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 16580  003CF0  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 16581  003CF4  D000               	goto	l1695
 16582  003CF6                     l1695:
 16583  003CF6  0012               	return		;funcret
 16584  003CF8                     __end_of___awdiv:
 16585                           	opt stack 0
 16586                           tblptru	equ	0xFF8
 16587                           tblptrh	equ	0xFF7
 16588                           tblptrl	equ	0xFF6
 16589                           tablat	equ	0xFF5
 16590                           prodh	equ	0xFF4
 16591                           prodl	equ	0xFF3
 16592                           intcon	equ	0xFF2
 16593                           intcon2	equ	0xFF1
 16594                           intcon3	equ	0xFF0
 16595                           postinc0	equ	0xFEE
 16596                           wreg	equ	0xFE8
 16597                           postdec1	equ	0xFE5
 16598                           plusw1	equ	0xFE3
 16599                           fsr1l	equ	0xFE1
 16600                           indf2	equ	0xFDF
 16601                           postinc2	equ	0xFDE
 16602                           postdec2	equ	0xFDD
 16603                           plusw2	equ	0xFDB
 16604                           fsr2h	equ	0xFDA
 16605                           fsr2l	equ	0xFD9
 16606                           status	equ	0xFD8
 16607                           
 16608 ;; *************** function __tdiv_to_l_ *****************
 16609 ;; Defined at:
 16610 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 16611 ;; Parameters:    Size  Location     Type
 16612 ;;  f1              3   16[COMRAM] float 
 16613 ;;  f2              3   19[COMRAM] float 
 16614 ;; Auto vars:     Size  Location     Type
 16615 ;;  quot            4   25[COMRAM] unsigned long 
 16616 ;;  exp1            1   30[COMRAM] unsigned char 
 16617 ;;  cntr            1   29[COMRAM] unsigned char 
 16618 ;; Return value:  Size  Location     Type
 16619 ;;                  4   16[COMRAM] unsigned long 
 16620 ;; Registers used:
 16621 ;;		wreg, status,2, status,0
 16622 ;; Tracked objects:
 16623 ;;		On entry : 0/0
 16624 ;;		On exit  : 0/0
 16625 ;;		Unchanged: 0/0
 16626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16627 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16629 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16630 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16631 ;;Total ram usage:       15 bytes
 16632 ;; Hardware stack levels used:    1
 16633 ;; Hardware stack levels required when called:    3
 16634 ;; This function calls:
 16635 ;;		Nothing
 16636 ;; This function is called by:
 16637 ;;		_printf
 16638 ;; This function uses a non-reentrant model
 16639 ;;
 16640                           
 16641                           	psect	text70
 16642  002FCE                     __ptext70:
 16643                           	opt stack 0
 16644  002FCE                     __tdiv_to_l_:
 16645                           	opt stack 26
 16646                           
 16647                           ;incstack = 0
 16648  002FCE  C013  F017         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 16649  002FD2  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16650  002FD4  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16651  002FD6  3412               	rlcf	__tdiv_to_l_@f1+1,w,c
 16652  002FD8  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16653  002FDA  E301               	bnc	u7371
 16654  002FDC  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16655  002FDE                     u7371:
 16656  002FDE  5017               	movf	??__tdiv_to_l_,w,c
 16657  002FE0  6E1F               	movwf	__tdiv_to_l_@exp1,c
 16658  002FE2  501F               	movf	__tdiv_to_l_@exp1,w,c
 16659  002FE4  A4D8               	btfss	status,2,c
 16660  002FE6  D002               	goto	l8826
 16661  002FE8  D05D               	goto	l8868
 16662  002FEA  D078               	goto	l1907
 16663  002FEC                     l8826:
 16664  002FEC  C016  F017         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 16665  002FF0  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16666  002FF2  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16667  002FF4  3415               	rlcf	__tdiv_to_l_@f2+1,w,c
 16668  002FF6  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16669  002FF8  E301               	bnc	u7391
 16670  002FFA  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16671  002FFC                     u7391:
 16672  002FFC  5017               	movf	??__tdiv_to_l_,w,c
 16673  002FFE  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16674  003000  501E               	movf	__tdiv_to_l_@cntr,w,c
 16675  003002  A4D8               	btfss	status,2,c
 16676  003004  D002               	goto	l8832
 16677  003006  D04E               	goto	l8868
 16678  003008  D069               	goto	l1907
 16679  00300A                     l8832:
 16680  00300A  8E12               	bsf	__tdiv_to_l_@f1+1,7,c
 16681  00300C  0EFF               	movlw	255
 16682  00300E  1611               	andwf	__tdiv_to_l_@f1,f,c
 16683  003010  0EFF               	movlw	255
 16684  003012  1612               	andwf	__tdiv_to_l_@f1+1,f,c
 16685  003014  0E00               	movlw	0
 16686  003016  1613               	andwf	__tdiv_to_l_@f1+2,f,c
 16687  003018  8E15               	bsf	__tdiv_to_l_@f2+1,7,c
 16688  00301A  0EFF               	movlw	255
 16689  00301C  1614               	andwf	__tdiv_to_l_@f2,f,c
 16690  00301E  0EFF               	movlw	255
 16691  003020  1615               	andwf	__tdiv_to_l_@f2+1,f,c
 16692  003022  0E00               	movlw	0
 16693  003024  1616               	andwf	__tdiv_to_l_@f2+2,f,c
 16694  003026  0E00               	movlw	0
 16695  003028  6E1A               	movwf	__tdiv_to_l_@quot,c
 16696  00302A  0E00               	movlw	0
 16697  00302C  6E1B               	movwf	__tdiv_to_l_@quot+1,c
 16698  00302E  0E00               	movlw	0
 16699  003030  6E1C               	movwf	__tdiv_to_l_@quot+2,c
 16700  003032  0E00               	movlw	0
 16701  003034  6E1D               	movwf	__tdiv_to_l_@quot+3,c
 16702  003036  0E7F               	movlw	127
 16703  003038  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 16704  00303A  501E               	movf	__tdiv_to_l_@cntr,w,c
 16705  00303C  0F98               	addlw	152
 16706  00303E  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 16707  003040  0E18               	movlw	24
 16708  003042  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16709  003044                     l1909:
 16710  003044  90D8               	bcf	status,0,c
 16711  003046  361A               	rlcf	__tdiv_to_l_@quot,f,c
 16712  003048  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 16713  00304A  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 16714  00304C  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 16715  00304E  5014               	movf	__tdiv_to_l_@f2,w,c
 16716  003050  5C11               	subwf	__tdiv_to_l_@f1,w,c
 16717  003052  5015               	movf	__tdiv_to_l_@f2+1,w,c
 16718  003054  5812               	subwfb	__tdiv_to_l_@f1+1,w,c
 16719  003056  5016               	movf	__tdiv_to_l_@f2+2,w,c
 16720  003058  5813               	subwfb	__tdiv_to_l_@f1+2,w,c
 16721  00305A  A0D8               	btfss	status,0,c
 16722  00305C  D007               	goto	l1910
 16723  00305E  5014               	movf	__tdiv_to_l_@f2,w,c
 16724  003060  5E11               	subwf	__tdiv_to_l_@f1,f,c
 16725  003062  5015               	movf	__tdiv_to_l_@f2+1,w,c
 16726  003064  5A12               	subwfb	__tdiv_to_l_@f1+1,f,c
 16727  003066  5016               	movf	__tdiv_to_l_@f2+2,w,c
 16728  003068  5A13               	subwfb	__tdiv_to_l_@f1+2,f,c
 16729  00306A  801A               	bsf	__tdiv_to_l_@quot,0,c
 16730  00306C                     l1910:
 16731  00306C  90D8               	bcf	status,0,c
 16732  00306E  3611               	rlcf	__tdiv_to_l_@f1,f,c
 16733  003070  3612               	rlcf	__tdiv_to_l_@f1+1,f,c
 16734  003072  3613               	rlcf	__tdiv_to_l_@f1+2,f,c
 16735  003074  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
 16736  003076  D7E6               	goto	l1909
 16737  003078  D000               	goto	l8854
 16738  00307A                     l8854:
 16739  00307A  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
 16740  00307C  D010               	goto	l8866
 16741  00307E  501F               	movf	__tdiv_to_l_@exp1,w,c
 16742  003080  0A80               	xorlw	128
 16743  003082  0F97               	addlw	151
 16744  003084  B0D8               	btfsc	status,0,c
 16745  003086  D003               	goto	l8862
 16746  003088  D00D               	goto	l8868
 16747  00308A  D028               	goto	l1907
 16748  00308C  D000               	goto	l8862
 16749  00308E                     l8862:
 16750  00308E  90D8               	bcf	status,0,c
 16751  003090  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
 16752  003092  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
 16753  003094  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
 16754  003096  321A               	rrcf	__tdiv_to_l_@quot,f,c
 16755  003098  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
 16756  00309A  D7F9               	goto	l8862
 16757  00309C  D017               	goto	l1916
 16758  00309E                     l8866:
 16759  00309E  0E17               	movlw	23
 16760  0030A0  641F               	cpfsgt	__tdiv_to_l_@exp1,c
 16761  0030A2  D011               	goto	l8874
 16762  0030A4                     l8868:
 16763  0030A4  0E00               	movlw	0
 16764  0030A6  6E11               	movwf	?__tdiv_to_l_,c
 16765  0030A8  0E00               	movlw	0
 16766  0030AA  6E12               	movwf	?__tdiv_to_l_+1,c
 16767  0030AC  0E00               	movlw	0
 16768  0030AE  6E13               	movwf	?__tdiv_to_l_+2,c
 16769  0030B0  0E00               	movlw	0
 16770  0030B2  6E14               	movwf	?__tdiv_to_l_+3,c
 16771  0030B4  D013               	goto	l1907
 16772  0030B6  D007               	goto	l8874
 16773  0030B8                     l8872:
 16774  0030B8  90D8               	bcf	status,0,c
 16775  0030BA  361A               	rlcf	__tdiv_to_l_@quot,f,c
 16776  0030BC  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 16777  0030BE  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 16778  0030C0  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 16779  0030C2  061F               	decf	__tdiv_to_l_@exp1,f,c
 16780  0030C4  D000               	goto	l8874
 16781  0030C6                     l8874:
 16782  0030C6  501F               	movf	__tdiv_to_l_@exp1,w,c
 16783  0030C8  A4D8               	btfss	status,2,c
 16784  0030CA  D7F6               	goto	l8872
 16785  0030CC                     l1916:
 16786  0030CC  C01A  F011         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 16787  0030D0  C01B  F012         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 16788  0030D4  C01C  F013         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 16789  0030D8  C01D  F014         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 16790  0030DC                     l1907:
 16791  0030DC  0012               	return		;funcret
 16792  0030DE                     __end_of__tdiv_to_l_:
 16793                           	opt stack 0
 16794                           tblptru	equ	0xFF8
 16795                           tblptrh	equ	0xFF7
 16796                           tblptrl	equ	0xFF6
 16797                           tablat	equ	0xFF5
 16798                           prodh	equ	0xFF4
 16799                           prodl	equ	0xFF3
 16800                           intcon	equ	0xFF2
 16801                           intcon2	equ	0xFF1
 16802                           intcon3	equ	0xFF0
 16803                           postinc0	equ	0xFEE
 16804                           wreg	equ	0xFE8
 16805                           postdec1	equ	0xFE5
 16806                           plusw1	equ	0xFE3
 16807                           fsr1l	equ	0xFE1
 16808                           indf2	equ	0xFDF
 16809                           postinc2	equ	0xFDE
 16810                           postdec2	equ	0xFDD
 16811                           plusw2	equ	0xFDB
 16812                           fsr2h	equ	0xFDA
 16813                           fsr2l	equ	0xFD9
 16814                           status	equ	0xFD8
 16815                           
 16816 ;; *************** function __div_to_l_ *****************
 16817 ;; Defined at:
 16818 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 16819 ;; Parameters:    Size  Location     Type
 16820 ;;  f1              3   16[COMRAM] unsigned long 
 16821 ;;  f2              3   19[COMRAM] unsigned long 
 16822 ;; Auto vars:     Size  Location     Type
 16823 ;;  quot            4   22[COMRAM] unsigned long 
 16824 ;;  exp1            1   27[COMRAM] unsigned char 
 16825 ;;  cntr            1   26[COMRAM] unsigned char 
 16826 ;; Return value:  Size  Location     Type
 16827 ;;                  4   16[COMRAM] unsigned long 
 16828 ;; Registers used:
 16829 ;;		wreg, status,2, status,0
 16830 ;; Tracked objects:
 16831 ;;		On entry : 0/0
 16832 ;;		On exit  : 0/0
 16833 ;;		Unchanged: 0/0
 16834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16835 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16836 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16838 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16839 ;;Total ram usage:       12 bytes
 16840 ;; Hardware stack levels used:    1
 16841 ;; Hardware stack levels required when called:    3
 16842 ;; This function calls:
 16843 ;;		Nothing
 16844 ;; This function is called by:
 16845 ;;		_printf
 16846 ;; This function uses a non-reentrant model
 16847 ;;
 16848                           
 16849                           	psect	text71
 16850  0030DE                     __ptext71:
 16851                           	opt stack 0
 16852  0030DE                     __div_to_l_:
 16853                           	opt stack 26
 16854                           
 16855                           ;incstack = 0
 16856  0030DE  3413               	rlcf	__div_to_l_@f1+2,w,c
 16857  0030E0  3414               	rlcf	__div_to_l_@f1+3,w,c
 16858  0030E2  6E1C               	movwf	__div_to_l_@exp1,c
 16859  0030E4  501C               	movf	__div_to_l_@exp1,w,c
 16860  0030E6  A4D8               	btfss	status,2,c
 16861  0030E8  D002               	goto	l8882
 16862  0030EA  D061               	goto	l8928
 16863  0030EC  D07C               	goto	l1786
 16864  0030EE                     l8882:
 16865  0030EE  3416               	rlcf	__div_to_l_@f2+2,w,c
 16866  0030F0  3417               	rlcf	__div_to_l_@f2+3,w,c
 16867  0030F2  6E1B               	movwf	__div_to_l_@cntr,c
 16868  0030F4  501B               	movf	__div_to_l_@cntr,w,c
 16869  0030F6  A4D8               	btfss	status,2,c
 16870  0030F8  D002               	goto	l8888
 16871  0030FA  D059               	goto	l8928
 16872  0030FC  D074               	goto	l1786
 16873  0030FE                     l8888:
 16874  0030FE  8E13               	bsf	__div_to_l_@f1+2,7,c
 16875  003100  0EFF               	movlw	255
 16876  003102  1611               	andwf	__div_to_l_@f1,f,c
 16877  003104  0EFF               	movlw	255
 16878  003106  1612               	andwf	__div_to_l_@f1+1,f,c
 16879  003108  0EFF               	movlw	255
 16880  00310A  1613               	andwf	__div_to_l_@f1+2,f,c
 16881  00310C  0E00               	movlw	0
 16882  00310E  1614               	andwf	__div_to_l_@f1+3,f,c
 16883  003110  8E16               	bsf	__div_to_l_@f2+2,7,c
 16884  003112  0EFF               	movlw	255
 16885  003114  1614               	andwf	__div_to_l_@f2,f,c
 16886  003116  0EFF               	movlw	255
 16887  003118  1615               	andwf	__div_to_l_@f2+1,f,c
 16888  00311A  0EFF               	movlw	255
 16889  00311C  1616               	andwf	__div_to_l_@f2+2,f,c
 16890  00311E  0E00               	movlw	0
 16891  003120  1617               	andwf	__div_to_l_@f2+3,f,c
 16892  003122  0E00               	movlw	0
 16893  003124  6E17               	movwf	__div_to_l_@quot,c
 16894  003126  0E00               	movlw	0
 16895  003128  6E18               	movwf	__div_to_l_@quot+1,c
 16896  00312A  0E00               	movlw	0
 16897  00312C  6E19               	movwf	__div_to_l_@quot+2,c
 16898  00312E  0E00               	movlw	0
 16899  003130  6E1A               	movwf	__div_to_l_@quot+3,c
 16900  003132  0E7F               	movlw	127
 16901  003134  5E1C               	subwf	__div_to_l_@exp1,f,c
 16902  003136  501B               	movf	__div_to_l_@cntr,w,c
 16903  003138  0FA0               	addlw	160
 16904  00313A  5E1C               	subwf	__div_to_l_@exp1,f,c
 16905  00313C  0E20               	movlw	32
 16906  00313E  6E1B               	movwf	__div_to_l_@cntr,c
 16907  003140  D000               	goto	l8902
 16908  003142                     l8902:
 16909  003142  90D8               	bcf	status,0,c
 16910  003144  3617               	rlcf	__div_to_l_@quot,f,c
 16911  003146  3618               	rlcf	__div_to_l_@quot+1,f,c
 16912  003148  3619               	rlcf	__div_to_l_@quot+2,f,c
 16913  00314A  361A               	rlcf	__div_to_l_@quot+3,f,c
 16914  00314C  5014               	movf	__div_to_l_@f2,w,c
 16915  00314E  5C11               	subwf	__div_to_l_@f1,w,c
 16916  003150  5015               	movf	__div_to_l_@f2+1,w,c
 16917  003152  5812               	subwfb	__div_to_l_@f1+1,w,c
 16918  003154  5016               	movf	__div_to_l_@f2+2,w,c
 16919  003156  5813               	subwfb	__div_to_l_@f1+2,w,c
 16920  003158  5017               	movf	__div_to_l_@f2+3,w,c
 16921  00315A  5814               	subwfb	__div_to_l_@f1+3,w,c
 16922  00315C  A0D8               	btfss	status,0,c
 16923  00315E  D00A               	goto	l8910
 16924  003160  5014               	movf	__div_to_l_@f2,w,c
 16925  003162  5E11               	subwf	__div_to_l_@f1,f,c
 16926  003164  5015               	movf	__div_to_l_@f2+1,w,c
 16927  003166  5A12               	subwfb	__div_to_l_@f1+1,f,c
 16928  003168  5016               	movf	__div_to_l_@f2+2,w,c
 16929  00316A  5A13               	subwfb	__div_to_l_@f1+2,f,c
 16930  00316C  5017               	movf	__div_to_l_@f2+3,w,c
 16931  00316E  5A14               	subwfb	__div_to_l_@f1+3,f,c
 16932  003170  8017               	bsf	__div_to_l_@quot,0,c
 16933  003172  D000               	goto	l8910
 16934  003174                     l8910:
 16935  003174  90D8               	bcf	status,0,c
 16936  003176  3611               	rlcf	__div_to_l_@f1,f,c
 16937  003178  3612               	rlcf	__div_to_l_@f1+1,f,c
 16938  00317A  3613               	rlcf	__div_to_l_@f1+2,f,c
 16939  00317C  3614               	rlcf	__div_to_l_@f1+3,f,c
 16940  00317E  2E1B               	decfsz	__div_to_l_@cntr,f,c
 16941  003180  D7E0               	goto	l8902
 16942  003182  D000               	goto	l8914
 16943  003184                     l8914:
 16944  003184  AE1C               	btfss	__div_to_l_@exp1,7,c
 16945  003186  D010               	goto	l8926
 16946  003188  501C               	movf	__div_to_l_@exp1,w,c
 16947  00318A  0A80               	xorlw	128
 16948  00318C  0F9F               	addlw	159
 16949  00318E  B0D8               	btfsc	status,0,c
 16950  003190  D003               	goto	l8922
 16951  003192  D00D               	goto	l8928
 16952  003194  D028               	goto	l1786
 16953  003196  D000               	goto	l8922
 16954  003198                     l8922:
 16955  003198  90D8               	bcf	status,0,c
 16956  00319A  321A               	rrcf	__div_to_l_@quot+3,f,c
 16957  00319C  3219               	rrcf	__div_to_l_@quot+2,f,c
 16958  00319E  3218               	rrcf	__div_to_l_@quot+1,f,c
 16959  0031A0  3217               	rrcf	__div_to_l_@quot,f,c
 16960  0031A2  3E1C               	incfsz	__div_to_l_@exp1,f,c
 16961  0031A4  D7F9               	goto	l8922
 16962  0031A6  D017               	goto	l1795
 16963  0031A8                     l8926:
 16964  0031A8  0E1F               	movlw	31
 16965  0031AA  641C               	cpfsgt	__div_to_l_@exp1,c
 16966  0031AC  D011               	goto	l8934
 16967  0031AE                     l8928:
 16968  0031AE  0E00               	movlw	0
 16969  0031B0  6E11               	movwf	?__div_to_l_,c
 16970  0031B2  0E00               	movlw	0
 16971  0031B4  6E12               	movwf	?__div_to_l_+1,c
 16972  0031B6  0E00               	movlw	0
 16973  0031B8  6E13               	movwf	?__div_to_l_+2,c
 16974  0031BA  0E00               	movlw	0
 16975  0031BC  6E14               	movwf	?__div_to_l_+3,c
 16976  0031BE  D013               	goto	l1786
 16977  0031C0  D007               	goto	l8934
 16978  0031C2                     l8932:
 16979  0031C2  90D8               	bcf	status,0,c
 16980  0031C4  3617               	rlcf	__div_to_l_@quot,f,c
 16981  0031C6  3618               	rlcf	__div_to_l_@quot+1,f,c
 16982  0031C8  3619               	rlcf	__div_to_l_@quot+2,f,c
 16983  0031CA  361A               	rlcf	__div_to_l_@quot+3,f,c
 16984  0031CC  061C               	decf	__div_to_l_@exp1,f,c
 16985  0031CE  D000               	goto	l8934
 16986  0031D0                     l8934:
 16987  0031D0  501C               	movf	__div_to_l_@exp1,w,c
 16988  0031D2  A4D8               	btfss	status,2,c
 16989  0031D4  D7F6               	goto	l8932
 16990  0031D6                     l1795:
 16991  0031D6  C017  F011         	movff	__div_to_l_@quot,?__div_to_l_
 16992  0031DA  C018  F012         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 16993  0031DE  C019  F013         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 16994  0031E2  C01A  F014         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 16995  0031E6                     l1786:
 16996  0031E6  0012               	return		;funcret
 16997  0031E8                     __end_of__div_to_l_:
 16998                           	opt stack 0
 16999                           tblptru	equ	0xFF8
 17000                           tblptrh	equ	0xFF7
 17001                           tblptrl	equ	0xFF6
 17002                           tablat	equ	0xFF5
 17003                           prodh	equ	0xFF4
 17004                           prodl	equ	0xFF3
 17005                           intcon	equ	0xFF2
 17006                           intcon2	equ	0xFF1
 17007                           intcon3	equ	0xFF0
 17008                           postinc0	equ	0xFEE
 17009                           wreg	equ	0xFE8
 17010                           postdec1	equ	0xFE5
 17011                           plusw1	equ	0xFE3
 17012                           fsr1l	equ	0xFE1
 17013                           indf2	equ	0xFDF
 17014                           postinc2	equ	0xFDE
 17015                           postdec2	equ	0xFDD
 17016                           plusw2	equ	0xFDB
 17017                           fsr2h	equ	0xFDA
 17018                           fsr2l	equ	0xFD9
 17019                           status	equ	0xFD8
 17020                           
 17021 ;; *************** function ___lltoft *****************
 17022 ;; Defined at:
 17023 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 17024 ;; Parameters:    Size  Location     Type
 17025 ;;  c               4   24[COMRAM] unsigned long 
 17026 ;; Auto vars:     Size  Location     Type
 17027 ;;  exp             1   32[COMRAM] unsigned char 
 17028 ;; Return value:  Size  Location     Type
 17029 ;;                  3   24[COMRAM] float 
 17030 ;; Registers used:
 17031 ;;		wreg, status,2, status,0, cstack
 17032 ;; Tracked objects:
 17033 ;;		On entry : 0/0
 17034 ;;		On exit  : 0/0
 17035 ;;		Unchanged: 0/0
 17036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17039 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17040 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17041 ;;Total ram usage:        9 bytes
 17042 ;; Hardware stack levels used:    1
 17043 ;; Hardware stack levels required when called:    4
 17044 ;; This function calls:
 17045 ;;		___ftpack
 17046 ;; This function is called by:
 17047 ;;		_printf
 17048 ;; This function uses a non-reentrant model
 17049 ;;
 17050                           
 17051                           	psect	text72
 17052  00435C                     __ptext72:
 17053                           	opt stack 0
 17054  00435C                     ___lltoft:
 17055                           	opt stack 25
 17056                           
 17057                           ;incstack = 0
 17058  00435C  0E8E               	movlw	142
 17059  00435E  6E21               	movwf	___lltoft@exp,c
 17060  004360  D007               	goto	l9054
 17061  004362                     l9052:
 17062  004362  90D8               	bcf	status,0,c
 17063  004364  321C               	rrcf	___lltoft@c+3,f,c
 17064  004366  321B               	rrcf	___lltoft@c+2,f,c
 17065  004368  321A               	rrcf	___lltoft@c+1,f,c
 17066  00436A  3219               	rrcf	___lltoft@c,f,c
 17067  00436C  2A21               	incf	___lltoft@exp,f,c
 17068  00436E  D000               	goto	l9054
 17069  004370                     l9054:
 17070  004370  0E00               	movlw	0
 17071  004372  1419               	andwf	___lltoft@c,w,c
 17072  004374  6E1D               	movwf	??___lltoft& (0+255),c
 17073  004376  0E00               	movlw	0
 17074  004378  141A               	andwf	___lltoft@c+1,w,c
 17075  00437A  6E1E               	movwf	(??___lltoft+1)& (0+255),c
 17076  00437C  0E00               	movlw	0
 17077  00437E  141B               	andwf	___lltoft@c+2,w,c
 17078  004380  6E1F               	movwf	(??___lltoft+2)& (0+255),c
 17079  004382  0EFF               	movlw	255
 17080  004384  141C               	andwf	___lltoft@c+3,w,c
 17081  004386  6E20               	movwf	(??___lltoft+3)& (0+255),c
 17082  004388  501D               	movf	??___lltoft,w,c
 17083  00438A  101E               	iorwf	??___lltoft+1,w,c
 17084  00438C  101F               	iorwf	??___lltoft+2,w,c
 17085  00438E  1020               	iorwf	??___lltoft+3,w,c
 17086  004390  A4D8               	btfss	status,2,c
 17087  004392  D7E7               	goto	l9052
 17088  004394  C019  F011         	movff	___lltoft@c,___ftpack@arg
 17089  004398  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
 17090  00439C  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
 17091  0043A0  C021  F014         	movff	___lltoft@exp,___ftpack@exp
 17092  0043A4  0E00               	movlw	0
 17093  0043A6  6E15               	movwf	___ftpack@sign,c
 17094  0043A8  EC21  F01C         	call	___ftpack	;wreg free
 17095  0043AC  C011  F019         	movff	?___ftpack,?___lltoft
 17096  0043B0  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
 17097  0043B4  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
 17098  0043B8  D000               	goto	l2026
 17099  0043BA                     l2026:
 17100  0043BA  0012               	return		;funcret
 17101  0043BC                     __end_of___lltoft:
 17102                           	opt stack 0
 17103                           tblptru	equ	0xFF8
 17104                           tblptrh	equ	0xFF7
 17105                           tblptrl	equ	0xFF6
 17106                           tablat	equ	0xFF5
 17107                           prodh	equ	0xFF4
 17108                           prodl	equ	0xFF3
 17109                           intcon	equ	0xFF2
 17110                           intcon2	equ	0xFF1
 17111                           intcon3	equ	0xFF0
 17112                           postinc0	equ	0xFEE
 17113                           wreg	equ	0xFE8
 17114                           postdec1	equ	0xFE5
 17115                           plusw1	equ	0xFE3
 17116                           fsr1l	equ	0xFE1
 17117                           indf2	equ	0xFDF
 17118                           postinc2	equ	0xFDE
 17119                           postdec2	equ	0xFDD
 17120                           plusw2	equ	0xFDB
 17121                           fsr2h	equ	0xFDA
 17122                           fsr2l	equ	0xFD9
 17123                           status	equ	0xFD8
 17124                           
 17125 ;; *************** function ___llmod *****************
 17126 ;; Defined at:
 17127 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 17128 ;; Parameters:    Size  Location     Type
 17129 ;;  dividend        4   29[COMRAM] unsigned long 
 17130 ;;  divisor         4   33[COMRAM] unsigned long 
 17131 ;; Auto vars:     Size  Location     Type
 17132 ;;  counter         1   37[COMRAM] unsigned char 
 17133 ;; Return value:  Size  Location     Type
 17134 ;;                  4   29[COMRAM] unsigned long 
 17135 ;; Registers used:
 17136 ;;		wreg, status,2, status,0
 17137 ;; Tracked objects:
 17138 ;;		On entry : 0/0
 17139 ;;		On exit  : 0/0
 17140 ;;		Unchanged: 0/0
 17141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17142 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17145 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17146 ;;Total ram usage:        9 bytes
 17147 ;; Hardware stack levels used:    1
 17148 ;; Hardware stack levels required when called:    3
 17149 ;; This function calls:
 17150 ;;		Nothing
 17151 ;; This function is called by:
 17152 ;;		_printf
 17153 ;; This function uses a non-reentrant model
 17154 ;;
 17155                           
 17156                           	psect	text73
 17157  004146                     __ptext73:
 17158                           	opt stack 0
 17159  004146                     ___llmod:
 17160                           	opt stack 26
 17161                           
 17162                           ;incstack = 0
 17163  004146  5022               	movf	___llmod@divisor,w,c
 17164  004148  1023               	iorwf	___llmod@divisor+1,w,c
 17165  00414A  1024               	iorwf	___llmod@divisor+2,w,c
 17166  00414C  1025               	iorwf	___llmod@divisor+3,w,c
 17167  00414E  B4D8               	btfsc	status,2,c
 17168  004150  D029               	goto	l2006
 17169  004152  0E01               	movlw	1
 17170  004154  6E26               	movwf	___llmod@counter,c
 17171  004156  D007               	goto	l9040
 17172  004158                     l9038:
 17173  004158  90D8               	bcf	status,0,c
 17174  00415A  3622               	rlcf	___llmod@divisor,f,c
 17175  00415C  3623               	rlcf	___llmod@divisor+1,f,c
 17176  00415E  3624               	rlcf	___llmod@divisor+2,f,c
 17177  004160  3625               	rlcf	___llmod@divisor+3,f,c
 17178  004162  2A26               	incf	___llmod@counter,f,c
 17179  004164  D000               	goto	l9040
 17180  004166                     l9040:
 17181  004166  BE25               	btfsc	___llmod@divisor+3,7,c
 17182  004168  D002               	goto	l9042
 17183  00416A  D7F6               	goto	l9038
 17184  00416C  D000               	goto	l9042
 17185  00416E                     l9042:
 17186  00416E  5022               	movf	___llmod@divisor,w,c
 17187  004170  5C1E               	subwf	___llmod@dividend,w,c
 17188  004172  5023               	movf	___llmod@divisor+1,w,c
 17189  004174  581F               	subwfb	___llmod@dividend+1,w,c
 17190  004176  5024               	movf	___llmod@divisor+2,w,c
 17191  004178  5820               	subwfb	___llmod@dividend+2,w,c
 17192  00417A  5025               	movf	___llmod@divisor+3,w,c
 17193  00417C  5821               	subwfb	___llmod@dividend+3,w,c
 17194  00417E  A0D8               	btfss	status,0,c
 17195  004180  D009               	goto	l9046
 17196  004182  5022               	movf	___llmod@divisor,w,c
 17197  004184  5E1E               	subwf	___llmod@dividend,f,c
 17198  004186  5023               	movf	___llmod@divisor+1,w,c
 17199  004188  5A1F               	subwfb	___llmod@dividend+1,f,c
 17200  00418A  5024               	movf	___llmod@divisor+2,w,c
 17201  00418C  5A20               	subwfb	___llmod@dividend+2,f,c
 17202  00418E  5025               	movf	___llmod@divisor+3,w,c
 17203  004190  5A21               	subwfb	___llmod@dividend+3,f,c
 17204  004192  D000               	goto	l9046
 17205  004194                     l9046:
 17206  004194  90D8               	bcf	status,0,c
 17207  004196  3225               	rrcf	___llmod@divisor+3,f,c
 17208  004198  3224               	rrcf	___llmod@divisor+2,f,c
 17209  00419A  3223               	rrcf	___llmod@divisor+1,f,c
 17210  00419C  3222               	rrcf	___llmod@divisor,f,c
 17211  00419E  2E26               	decfsz	___llmod@counter,f,c
 17212  0041A0  D7E6               	goto	l9042
 17213  0041A2  D000               	goto	l2006
 17214  0041A4                     l2006:
 17215  0041A4  C01E  F01E         	movff	___llmod@dividend,?___llmod
 17216  0041A8  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
 17217  0041AC  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
 17218  0041B0  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
 17219  0041B4  0012               	return		;funcret
 17220  0041B6                     __end_of___llmod:
 17221                           	opt stack 0
 17222                           tblptru	equ	0xFF8
 17223                           tblptrh	equ	0xFF7
 17224                           tblptrl	equ	0xFF6
 17225                           tablat	equ	0xFF5
 17226                           prodh	equ	0xFF4
 17227                           prodl	equ	0xFF3
 17228                           intcon	equ	0xFF2
 17229                           intcon2	equ	0xFF1
 17230                           intcon3	equ	0xFF0
 17231                           postinc0	equ	0xFEE
 17232                           wreg	equ	0xFE8
 17233                           postdec1	equ	0xFE5
 17234                           plusw1	equ	0xFE3
 17235                           fsr1l	equ	0xFE1
 17236                           indf2	equ	0xFDF
 17237                           postinc2	equ	0xFDE
 17238                           postdec2	equ	0xFDD
 17239                           plusw2	equ	0xFDB
 17240                           fsr2h	equ	0xFDA
 17241                           fsr2l	equ	0xFD9
 17242                           status	equ	0xFD8
 17243                           
 17244 ;; *************** function ___lldiv *****************
 17245 ;; Defined at:
 17246 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 17247 ;; Parameters:    Size  Location     Type
 17248 ;;  dividend        4   16[COMRAM] unsigned long 
 17249 ;;  divisor         4   20[COMRAM] unsigned long 
 17250 ;; Auto vars:     Size  Location     Type
 17251 ;;  quotient        4   24[COMRAM] unsigned long 
 17252 ;;  counter         1   28[COMRAM] unsigned char 
 17253 ;; Return value:  Size  Location     Type
 17254 ;;                  4   16[COMRAM] unsigned long 
 17255 ;; Registers used:
 17256 ;;		wreg, status,2, status,0
 17257 ;; Tracked objects:
 17258 ;;		On entry : 0/0
 17259 ;;		On exit  : 0/0
 17260 ;;		Unchanged: 0/0
 17261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17262 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17263 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17265 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17266 ;;Total ram usage:       13 bytes
 17267 ;; Hardware stack levels used:    1
 17268 ;; Hardware stack levels required when called:    3
 17269 ;; This function calls:
 17270 ;;		Nothing
 17271 ;; This function is called by:
 17272 ;;		_printf
 17273 ;; This function uses a non-reentrant model
 17274 ;;
 17275                           
 17276                           	psect	text74
 17277  003EAA                     __ptext74:
 17278                           	opt stack 0
 17279  003EAA                     ___lldiv:
 17280                           	opt stack 26
 17281                           
 17282                           ;incstack = 0
 17283  003EAA  0E00               	movlw	0
 17284  003EAC  6E19               	movwf	___lldiv@quotient,c
 17285  003EAE  0E00               	movlw	0
 17286  003EB0  6E1A               	movwf	___lldiv@quotient+1,c
 17287  003EB2  0E00               	movlw	0
 17288  003EB4  6E1B               	movwf	___lldiv@quotient+2,c
 17289  003EB6  0E00               	movlw	0
 17290  003EB8  6E1C               	movwf	___lldiv@quotient+3,c
 17291  003EBA  5015               	movf	___lldiv@divisor,w,c
 17292  003EBC  1016               	iorwf	___lldiv@divisor+1,w,c
 17293  003EBE  1017               	iorwf	___lldiv@divisor+2,w,c
 17294  003EC0  1018               	iorwf	___lldiv@divisor+3,w,c
 17295  003EC2  B4D8               	btfsc	status,2,c
 17296  003EC4  D02F               	goto	l1996
 17297  003EC6  0E01               	movlw	1
 17298  003EC8  6E1D               	movwf	___lldiv@counter,c
 17299  003ECA  D007               	goto	l9020
 17300  003ECC                     l9018:
 17301  003ECC  90D8               	bcf	status,0,c
 17302  003ECE  3615               	rlcf	___lldiv@divisor,f,c
 17303  003ED0  3616               	rlcf	___lldiv@divisor+1,f,c
 17304  003ED2  3617               	rlcf	___lldiv@divisor+2,f,c
 17305  003ED4  3618               	rlcf	___lldiv@divisor+3,f,c
 17306  003ED6  2A1D               	incf	___lldiv@counter,f,c
 17307  003ED8  D000               	goto	l9020
 17308  003EDA                     l9020:
 17309  003EDA  BE18               	btfsc	___lldiv@divisor+3,7,c
 17310  003EDC  D002               	goto	l9022
 17311  003EDE  D7F6               	goto	l9018
 17312  003EE0  D000               	goto	l9022
 17313  003EE2                     l9022:
 17314  003EE2  90D8               	bcf	status,0,c
 17315  003EE4  3619               	rlcf	___lldiv@quotient,f,c
 17316  003EE6  361A               	rlcf	___lldiv@quotient+1,f,c
 17317  003EE8  361B               	rlcf	___lldiv@quotient+2,f,c
 17318  003EEA  361C               	rlcf	___lldiv@quotient+3,f,c
 17319  003EEC  5015               	movf	___lldiv@divisor,w,c
 17320  003EEE  5C11               	subwf	___lldiv@dividend,w,c
 17321  003EF0  5016               	movf	___lldiv@divisor+1,w,c
 17322  003EF2  5812               	subwfb	___lldiv@dividend+1,w,c
 17323  003EF4  5017               	movf	___lldiv@divisor+2,w,c
 17324  003EF6  5813               	subwfb	___lldiv@dividend+2,w,c
 17325  003EF8  5018               	movf	___lldiv@divisor+3,w,c
 17326  003EFA  5814               	subwfb	___lldiv@dividend+3,w,c
 17327  003EFC  A0D8               	btfss	status,0,c
 17328  003EFE  D00A               	goto	l9030
 17329  003F00  5015               	movf	___lldiv@divisor,w,c
 17330  003F02  5E11               	subwf	___lldiv@dividend,f,c
 17331  003F04  5016               	movf	___lldiv@divisor+1,w,c
 17332  003F06  5A12               	subwfb	___lldiv@dividend+1,f,c
 17333  003F08  5017               	movf	___lldiv@divisor+2,w,c
 17334  003F0A  5A13               	subwfb	___lldiv@dividend+2,f,c
 17335  003F0C  5018               	movf	___lldiv@divisor+3,w,c
 17336  003F0E  5A14               	subwfb	___lldiv@dividend+3,f,c
 17337  003F10  8019               	bsf	___lldiv@quotient,0,c
 17338  003F12  D000               	goto	l9030
 17339  003F14                     l9030:
 17340  003F14  90D8               	bcf	status,0,c
 17341  003F16  3218               	rrcf	___lldiv@divisor+3,f,c
 17342  003F18  3217               	rrcf	___lldiv@divisor+2,f,c
 17343  003F1A  3216               	rrcf	___lldiv@divisor+1,f,c
 17344  003F1C  3215               	rrcf	___lldiv@divisor,f,c
 17345  003F1E  2E1D               	decfsz	___lldiv@counter,f,c
 17346  003F20  D7E0               	goto	l9022
 17347  003F22  D000               	goto	l1996
 17348  003F24                     l1996:
 17349  003F24  C019  F011         	movff	___lldiv@quotient,?___lldiv
 17350  003F28  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 17351  003F2C  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 17352  003F30  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 17353  003F34  0012               	return		;funcret
 17354  003F36                     __end_of___lldiv:
 17355                           	opt stack 0
 17356                           tblptru	equ	0xFF8
 17357                           tblptrh	equ	0xFF7
 17358                           tblptrl	equ	0xFF6
 17359                           tablat	equ	0xFF5
 17360                           prodh	equ	0xFF4
 17361                           prodl	equ	0xFF3
 17362                           intcon	equ	0xFF2
 17363                           intcon2	equ	0xFF1
 17364                           intcon3	equ	0xFF0
 17365                           postinc0	equ	0xFEE
 17366                           wreg	equ	0xFE8
 17367                           postdec1	equ	0xFE5
 17368                           plusw1	equ	0xFE3
 17369                           fsr1l	equ	0xFE1
 17370                           indf2	equ	0xFDF
 17371                           postinc2	equ	0xFDE
 17372                           postdec2	equ	0xFDD
 17373                           plusw2	equ	0xFDB
 17374                           fsr2h	equ	0xFDA
 17375                           fsr2l	equ	0xFD9
 17376                           status	equ	0xFD8
 17377                           
 17378 ;; *************** function ___ftsub *****************
 17379 ;; Defined at:
 17380 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 17381 ;; Parameters:    Size  Location     Type
 17382 ;;  f1              3    0[BANK0 ] float 
 17383 ;;  f2              3    3[BANK0 ] float 
 17384 ;; Auto vars:     Size  Location     Type
 17385 ;;		None
 17386 ;; Return value:  Size  Location     Type
 17387 ;;                  3    0[BANK0 ] float 
 17388 ;; Registers used:
 17389 ;;		wreg, status,2, status,0, cstack
 17390 ;; Tracked objects:
 17391 ;;		On entry : 0/0
 17392 ;;		On exit  : 0/0
 17393 ;;		Unchanged: 0/0
 17394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17395 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17398 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17399 ;;Total ram usage:        6 bytes
 17400 ;; Hardware stack levels used:    1
 17401 ;; Hardware stack levels required when called:    5
 17402 ;; This function calls:
 17403 ;;		___ftadd
 17404 ;; This function is called by:
 17405 ;;		_printf
 17406 ;; This function uses a non-reentrant model
 17407 ;;
 17408                           
 17409                           	psect	text75
 17410  004518                     __ptext75:
 17411                           	opt stack 0
 17412  004518                     ___ftsub:
 17413                           	opt stack 24
 17414                           
 17415                           ;incstack = 0
 17416  004518  0100               	movlb	0	; () banked
 17417  00451A  5183               	movf	___ftsub@f2& (0+255),w,b
 17418  00451C  0100               	movlb	0	; () banked
 17419  00451E  1184               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17420  004520  0100               	movlb	0	; () banked
 17421  004522  1185               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17422  004524  B4D8               	btfsc	status,2,c
 17423  004526  D00A               	goto	l8940
 17424                           
 17425                           ; BSR set to: 0
 17426  004528  0E00               	movlw	0
 17427  00452A  0100               	movlb	0	; () banked
 17428  00452C  1B83               	xorwf	___ftsub@f2& (0+255),f,b
 17429  00452E  0E00               	movlw	0
 17430  004530  0100               	movlb	0	; () banked
 17431  004532  1B84               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17432  004534  0E80               	movlw	128
 17433  004536  0100               	movlb	0	; () banked
 17434  004538  1B85               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17435  00453A  D000               	goto	l8940
 17436  00453C                     l8940:
 17437                           
 17438                           ; BSR set to: 0
 17439  00453C  C080  F04D         	movff	___ftsub@f1,___ftadd@f1
 17440  004540  C081  F04E         	movff	___ftsub@f1+1,___ftadd@f1+1
 17441  004544  C082  F04F         	movff	___ftsub@f1+2,___ftadd@f1+2
 17442  004548  C083  F050         	movff	___ftsub@f2,___ftadd@f2
 17443  00454C  C084  F051         	movff	___ftsub@f2+1,___ftadd@f2+1
 17444  004550  C085  F052         	movff	___ftsub@f2+2,___ftadd@f2+2
 17445  004554  ECF5  F011         	call	___ftadd	;wreg free
 17446  004558  C04D  F080         	movff	?___ftadd,?___ftsub
 17447  00455C  C04E  F081         	movff	?___ftadd+1,?___ftsub+1
 17448  004560  C04F  F082         	movff	?___ftadd+2,?___ftsub+2
 17449  004564  D000               	goto	l1948
 17450  004566                     l1948:
 17451  004566  0012               	return		;funcret
 17452  004568                     __end_of___ftsub:
 17453                           	opt stack 0
 17454                           tblptru	equ	0xFF8
 17455                           tblptrh	equ	0xFF7
 17456                           tblptrl	equ	0xFF6
 17457                           tablat	equ	0xFF5
 17458                           prodh	equ	0xFF4
 17459                           prodl	equ	0xFF3
 17460                           intcon	equ	0xFF2
 17461                           intcon2	equ	0xFF1
 17462                           intcon3	equ	0xFF0
 17463                           postinc0	equ	0xFEE
 17464                           wreg	equ	0xFE8
 17465                           postdec1	equ	0xFE5
 17466                           plusw1	equ	0xFE3
 17467                           fsr1l	equ	0xFE1
 17468                           indf2	equ	0xFDF
 17469                           postinc2	equ	0xFDE
 17470                           postdec2	equ	0xFDD
 17471                           plusw2	equ	0xFDB
 17472                           fsr2h	equ	0xFDA
 17473                           fsr2l	equ	0xFD9
 17474                           status	equ	0xFD8
 17475                           
 17476 ;; *************** function ___ftadd *****************
 17477 ;; Defined at:
 17478 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 17479 ;; Parameters:    Size  Location     Type
 17480 ;;  f1              3   76[COMRAM] float 
 17481 ;;  f2              3   79[COMRAM] float 
 17482 ;; Auto vars:     Size  Location     Type
 17483 ;;  exp1            1   87[COMRAM] unsigned char 
 17484 ;;  exp2            1   86[COMRAM] unsigned char 
 17485 ;;  sign            1   85[COMRAM] unsigned char 
 17486 ;; Return value:  Size  Location     Type
 17487 ;;                  3   76[COMRAM] float 
 17488 ;; Registers used:
 17489 ;;		wreg, status,2, status,0, cstack
 17490 ;; Tracked objects:
 17491 ;;		On entry : 0/0
 17492 ;;		On exit  : 0/0
 17493 ;;		Unchanged: 0/0
 17494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17495 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17496 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17498 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17499 ;;Total ram usage:       12 bytes
 17500 ;; Hardware stack levels used:    1
 17501 ;; Hardware stack levels required when called:    4
 17502 ;; This function calls:
 17503 ;;		___ftpack
 17504 ;; This function is called by:
 17505 ;;		_printf
 17506 ;;		___ftsub
 17507 ;; This function uses a non-reentrant model
 17508 ;;
 17509                           
 17510                           	psect	text76
 17511  0023EA                     __ptext76:
 17512                           	opt stack 0
 17513  0023EA                     ___ftadd:
 17514                           	opt stack 24
 17515                           
 17516                           ;incstack = 0
 17517  0023EA  C04F  F053         	movff	___ftadd@f1+2,??___ftadd
 17518  0023EE  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17519  0023F0  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17520  0023F2  344E               	rlcf	___ftadd@f1+1,w,c
 17521  0023F4  3653               	rlcf	??___ftadd& (0+255),f,c
 17522  0023F6  E301               	bnc	u6741
 17523  0023F8  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17524  0023FA                     u6741:
 17525  0023FA  5053               	movf	??___ftadd,w,c
 17526  0023FC  6E58               	movwf	___ftadd@exp1,c
 17527  0023FE  C052  F053         	movff	___ftadd@f2+2,??___ftadd
 17528  002402  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17529  002404  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17530  002406  3451               	rlcf	___ftadd@f2+1,w,c
 17531  002408  3653               	rlcf	??___ftadd& (0+255),f,c
 17532  00240A  E301               	bnc	u6751
 17533  00240C  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17534  00240E                     u6751:
 17535  00240E  5053               	movf	??___ftadd,w,c
 17536  002410  6E57               	movwf	___ftadd@exp2,c
 17537  002412  5058               	movf	___ftadd@exp1,w,c
 17538  002414  B4D8               	btfsc	status,2,c
 17539  002416  D00B               	goto	l1867
 17540  002418  5057               	movf	___ftadd@exp2,w,c
 17541  00241A  5C58               	subwf	___ftadd@exp1,w,c
 17542  00241C  B0D8               	btfsc	status,0,c
 17543  00241E  D00E               	goto	l8410
 17544  002420  5058               	movf	___ftadd@exp1,w,c
 17545  002422  0800               	sublw	0
 17546  002424  2457               	addwf	___ftadd@exp2,w,c
 17547  002426  6E53               	movwf	??___ftadd& (0+255),c
 17548  002428  0E18               	movlw	24
 17549  00242A  6453               	cpfsgt	??___ftadd,c
 17550  00242C  D007               	goto	l8410
 17551  00242E                     l1867:
 17552  00242E  C050  F04D         	movff	___ftadd@f2,?___ftadd
 17553  002432  C051  F04E         	movff	___ftadd@f2+1,?___ftadd+1
 17554  002436  C052  F04F         	movff	___ftadd@f2+2,?___ftadd+2
 17555  00243A  D0B8               	goto	l1868
 17556  00243C                     l8410:
 17557  00243C  5057               	movf	___ftadd@exp2,w,c
 17558  00243E  B4D8               	btfsc	status,2,c
 17559  002440  D00B               	goto	l1871
 17560  002442  5058               	movf	___ftadd@exp1,w,c
 17561  002444  5C57               	subwf	___ftadd@exp2,w,c
 17562  002446  B0D8               	btfsc	status,0,c
 17563  002448  D00E               	goto	l8416
 17564  00244A  5057               	movf	___ftadd@exp2,w,c
 17565  00244C  0800               	sublw	0
 17566  00244E  2458               	addwf	___ftadd@exp1,w,c
 17567  002450  6E53               	movwf	??___ftadd& (0+255),c
 17568  002452  0E18               	movlw	24
 17569  002454  6453               	cpfsgt	??___ftadd,c
 17570  002456  D007               	goto	l8416
 17571  002458                     l1871:
 17572  002458  C04D  F04D         	movff	___ftadd@f1,?___ftadd
 17573  00245C  C04E  F04E         	movff	___ftadd@f1+1,?___ftadd+1
 17574  002460  C04F  F04F         	movff	___ftadd@f1+2,?___ftadd+2
 17575  002464  D0A3               	goto	l1868
 17576  002466                     l8416:
 17577  002466  0E06               	movlw	6
 17578  002468  6E56               	movwf	___ftadd@sign,c
 17579  00246A  AE4F               	btfss	___ftadd@f1+2,7,c
 17580  00246C  D002               	goto	l8422
 17581  00246E  8E56               	bsf	___ftadd@sign,7,c
 17582  002470  D000               	goto	l8422
 17583  002472                     l8422:
 17584  002472  BE52               	btfsc	___ftadd@f2+2,7,c
 17585  002474  8C56               	bsf	___ftadd@sign,6,c
 17586  002476  8E4E               	bsf	___ftadd@f1+1,7,c
 17587  002478  0EFF               	movlw	255
 17588  00247A  164D               	andwf	___ftadd@f1,f,c
 17589  00247C  0EFF               	movlw	255
 17590  00247E  164E               	andwf	___ftadd@f1+1,f,c
 17591  002480  0E00               	movlw	0
 17592  002482  164F               	andwf	___ftadd@f1+2,f,c
 17593  002484  8E51               	bsf	___ftadd@f2+1,7,c
 17594  002486  0EFF               	movlw	255
 17595  002488  1650               	andwf	___ftadd@f2,f,c
 17596  00248A  0EFF               	movlw	255
 17597  00248C  1651               	andwf	___ftadd@f2+1,f,c
 17598  00248E  0E00               	movlw	0
 17599  002490  1652               	andwf	___ftadd@f2+2,f,c
 17600  002492  5057               	movf	___ftadd@exp2,w,c
 17601  002494  5C58               	subwf	___ftadd@exp1,w,c
 17602  002496  B0D8               	btfsc	status,0,c
 17603  002498  D01E               	goto	l8442
 17604  00249A                     l8432:
 17605  00249A  90D8               	bcf	status,0,c
 17606  00249C  3650               	rlcf	___ftadd@f2,f,c
 17607  00249E  3651               	rlcf	___ftadd@f2+1,f,c
 17608  0024A0  3652               	rlcf	___ftadd@f2+2,f,c
 17609  0024A2  0657               	decf	___ftadd@exp2,f,c
 17610  0024A4  5058               	movf	___ftadd@exp1,w,c
 17611  0024A6  1857               	xorwf	___ftadd@exp2,w,c
 17612  0024A8  B4D8               	btfsc	status,2,c
 17613  0024AA  D00F               	goto	l8440
 17614  0024AC  0656               	decf	___ftadd@sign,f,c
 17615  0024AE  C056  F053         	movff	___ftadd@sign,??___ftadd
 17616  0024B2  0E07               	movlw	7
 17617  0024B4  1653               	andwf	??___ftadd,f,c
 17618  0024B6  B4D8               	btfsc	status,2,c
 17619  0024B8  D008               	goto	l8440
 17620  0024BA  D7EF               	goto	l8432
 17621  0024BC  D006               	goto	l8440
 17622  0024BE                     l8438:
 17623  0024BE  90D8               	bcf	status,0,c
 17624  0024C0  324F               	rrcf	___ftadd@f1+2,f,c
 17625  0024C2  324E               	rrcf	___ftadd@f1+1,f,c
 17626  0024C4  324D               	rrcf	___ftadd@f1,f,c
 17627  0024C6  2A58               	incf	___ftadd@exp1,f,c
 17628  0024C8  D000               	goto	l8440
 17629  0024CA                     l8440:
 17630  0024CA  5057               	movf	___ftadd@exp2,w,c
 17631  0024CC  1858               	xorwf	___ftadd@exp1,w,c
 17632  0024CE  B4D8               	btfsc	status,2,c
 17633  0024D0  D024               	goto	l1882
 17634  0024D2  D7F5               	goto	l8438
 17635  0024D4  D022               	goto	l1882
 17636  0024D6                     l8442:
 17637  0024D6  5058               	movf	___ftadd@exp1,w,c
 17638  0024D8  5C57               	subwf	___ftadd@exp2,w,c
 17639  0024DA  B0D8               	btfsc	status,0,c
 17640  0024DC  D01E               	goto	l1882
 17641  0024DE                     l8444:
 17642  0024DE  90D8               	bcf	status,0,c
 17643  0024E0  364D               	rlcf	___ftadd@f1,f,c
 17644  0024E2  364E               	rlcf	___ftadd@f1+1,f,c
 17645  0024E4  364F               	rlcf	___ftadd@f1+2,f,c
 17646  0024E6  0658               	decf	___ftadd@exp1,f,c
 17647  0024E8  5058               	movf	___ftadd@exp1,w,c
 17648  0024EA  1857               	xorwf	___ftadd@exp2,w,c
 17649  0024EC  B4D8               	btfsc	status,2,c
 17650  0024EE  D00F               	goto	l8452
 17651  0024F0  0656               	decf	___ftadd@sign,f,c
 17652  0024F2  C056  F053         	movff	___ftadd@sign,??___ftadd
 17653  0024F6  0E07               	movlw	7
 17654  0024F8  1653               	andwf	??___ftadd,f,c
 17655  0024FA  B4D8               	btfsc	status,2,c
 17656  0024FC  D008               	goto	l8452
 17657  0024FE  D7EF               	goto	l8444
 17658  002500  D006               	goto	l8452
 17659  002502                     l8450:
 17660  002502  90D8               	bcf	status,0,c
 17661  002504  3252               	rrcf	___ftadd@f2+2,f,c
 17662  002506  3251               	rrcf	___ftadd@f2+1,f,c
 17663  002508  3250               	rrcf	___ftadd@f2,f,c
 17664  00250A  2A57               	incf	___ftadd@exp2,f,c
 17665  00250C  D000               	goto	l8452
 17666  00250E                     l8452:
 17667  00250E  5057               	movf	___ftadd@exp2,w,c
 17668  002510  1858               	xorwf	___ftadd@exp1,w,c
 17669  002512  B4D8               	btfsc	status,2,c
 17670  002514  D002               	goto	l1882
 17671  002516  D7F5               	goto	l8450
 17672  002518  D000               	goto	l1882
 17673  00251A                     l1882:
 17674  00251A  AE56               	btfss	___ftadd@sign,7,c
 17675  00251C  D00C               	goto	l1891
 17676  00251E  0EFF               	movlw	255
 17677  002520  1A4D               	xorwf	___ftadd@f1,f,c
 17678  002522  0EFF               	movlw	255
 17679  002524  1A4E               	xorwf	___ftadd@f1+1,f,c
 17680  002526  0EFF               	movlw	255
 17681  002528  1A4F               	xorwf	___ftadd@f1+2,f,c
 17682  00252A  0E01               	movlw	1
 17683  00252C  264D               	addwf	___ftadd@f1,f,c
 17684  00252E  0E00               	movlw	0
 17685  002530  224E               	addwfc	___ftadd@f1+1,f,c
 17686  002532  0E00               	movlw	0
 17687  002534  224F               	addwfc	___ftadd@f1+2,f,c
 17688  002536                     l1891:
 17689  002536  AC56               	btfss	___ftadd@sign,6,c
 17690  002538  D00D               	goto	l8458
 17691  00253A  0EFF               	movlw	255
 17692  00253C  1A50               	xorwf	___ftadd@f2,f,c
 17693  00253E  0EFF               	movlw	255
 17694  002540  1A51               	xorwf	___ftadd@f2+1,f,c
 17695  002542  0EFF               	movlw	255
 17696  002544  1A52               	xorwf	___ftadd@f2+2,f,c
 17697  002546  0E01               	movlw	1
 17698  002548  2650               	addwf	___ftadd@f2,f,c
 17699  00254A  0E00               	movlw	0
 17700  00254C  2251               	addwfc	___ftadd@f2+1,f,c
 17701  00254E  0E00               	movlw	0
 17702  002550  2252               	addwfc	___ftadd@f2+2,f,c
 17703  002552  D000               	goto	l8458
 17704  002554                     l8458:
 17705  002554  0E00               	movlw	0
 17706  002556  6E56               	movwf	___ftadd@sign,c
 17707  002558  504D               	movf	___ftadd@f1,w,c
 17708  00255A  2650               	addwf	___ftadd@f2,f,c
 17709  00255C  504E               	movf	___ftadd@f1+1,w,c
 17710  00255E  2251               	addwfc	___ftadd@f2+1,f,c
 17711  002560  504F               	movf	___ftadd@f1+2,w,c
 17712  002562  2252               	addwfc	___ftadd@f2+2,f,c
 17713  002564  AE52               	btfss	___ftadd@f2+2,7,c
 17714  002566  D00F               	goto	l8468
 17715  002568  0EFF               	movlw	255
 17716  00256A  1A50               	xorwf	___ftadd@f2,f,c
 17717  00256C  0EFF               	movlw	255
 17718  00256E  1A51               	xorwf	___ftadd@f2+1,f,c
 17719  002570  0EFF               	movlw	255
 17720  002572  1A52               	xorwf	___ftadd@f2+2,f,c
 17721  002574  0E01               	movlw	1
 17722  002576  2650               	addwf	___ftadd@f2,f,c
 17723  002578  0E00               	movlw	0
 17724  00257A  2251               	addwfc	___ftadd@f2+1,f,c
 17725  00257C  0E00               	movlw	0
 17726  00257E  2252               	addwfc	___ftadd@f2+2,f,c
 17727  002580  0E01               	movlw	1
 17728  002582  6E56               	movwf	___ftadd@sign,c
 17729  002584  D000               	goto	l8468
 17730  002586                     l8468:
 17731  002586  C050  F011         	movff	___ftadd@f2,___ftpack@arg
 17732  00258A  C051  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 17733  00258E  C052  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 17734  002592  C058  F014         	movff	___ftadd@exp1,___ftpack@exp
 17735  002596  C056  F015         	movff	___ftadd@sign,___ftpack@sign
 17736  00259A  EC21  F01C         	call	___ftpack	;wreg free
 17737  00259E  C011  F04D         	movff	?___ftpack,?___ftadd
 17738  0025A2  C012  F04E         	movff	?___ftpack+1,?___ftadd+1
 17739  0025A6  C013  F04F         	movff	?___ftpack+2,?___ftadd+2
 17740  0025AA  D000               	goto	l1868
 17741  0025AC                     l1868:
 17742  0025AC  0012               	return		;funcret
 17743  0025AE                     __end_of___ftadd:
 17744                           	opt stack 0
 17745                           tblptru	equ	0xFF8
 17746                           tblptrh	equ	0xFF7
 17747                           tblptrl	equ	0xFF6
 17748                           tablat	equ	0xFF5
 17749                           prodh	equ	0xFF4
 17750                           prodl	equ	0xFF3
 17751                           intcon	equ	0xFF2
 17752                           intcon2	equ	0xFF1
 17753                           intcon3	equ	0xFF0
 17754                           postinc0	equ	0xFEE
 17755                           wreg	equ	0xFE8
 17756                           postdec1	equ	0xFE5
 17757                           plusw1	equ	0xFE3
 17758                           fsr1l	equ	0xFE1
 17759                           indf2	equ	0xFDF
 17760                           postinc2	equ	0xFDE
 17761                           postdec2	equ	0xFDD
 17762                           plusw2	equ	0xFDB
 17763                           fsr2h	equ	0xFDA
 17764                           fsr2l	equ	0xFD9
 17765                           status	equ	0xFD8
 17766                           
 17767 ;; *************** function ___ftneg *****************
 17768 ;; Defined at:
 17769 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 17770 ;; Parameters:    Size  Location     Type
 17771 ;;  f1              3   16[COMRAM] float 
 17772 ;; Auto vars:     Size  Location     Type
 17773 ;;		None
 17774 ;; Return value:  Size  Location     Type
 17775 ;;                  3   16[COMRAM] float 
 17776 ;; Registers used:
 17777 ;;		wreg, status,2, status,0
 17778 ;; Tracked objects:
 17779 ;;		On entry : 0/0
 17780 ;;		On exit  : 0/0
 17781 ;;		Unchanged: 0/0
 17782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17783 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17786 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17787 ;;Total ram usage:        3 bytes
 17788 ;; Hardware stack levels used:    1
 17789 ;; Hardware stack levels required when called:    3
 17790 ;; This function calls:
 17791 ;;		Nothing
 17792 ;; This function is called by:
 17793 ;;		_printf
 17794 ;; This function uses a non-reentrant model
 17795 ;;
 17796                           
 17797                           	psect	text77
 17798  004A44                     __ptext77:
 17799                           	opt stack 0
 17800  004A44                     ___ftneg:
 17801                           	opt stack 26
 17802                           
 17803                           ;incstack = 0
 17804  004A44  5011               	movf	___ftneg@f1,w,c
 17805  004A46  1012               	iorwf	___ftneg@f1+1,w,c
 17806  004A48  1013               	iorwf	___ftneg@f1+2,w,c
 17807  004A4A  B4D8               	btfsc	status,2,c
 17808  004A4C  D006               	goto	l1941
 17809  004A4E  0E00               	movlw	0
 17810  004A50  1A11               	xorwf	___ftneg@f1,f,c
 17811  004A52  0E00               	movlw	0
 17812  004A54  1A12               	xorwf	___ftneg@f1+1,f,c
 17813  004A56  0E80               	movlw	128
 17814  004A58  1A13               	xorwf	___ftneg@f1+2,f,c
 17815  004A5A                     l1941:
 17816  004A5A  C011  F011         	movff	___ftneg@f1,?___ftneg
 17817  004A5E  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
 17818  004A62  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
 17819  004A66  0012               	return		;funcret
 17820  004A68                     __end_of___ftneg:
 17821                           	opt stack 0
 17822                           tblptru	equ	0xFF8
 17823                           tblptrh	equ	0xFF7
 17824                           tblptrl	equ	0xFF6
 17825                           tablat	equ	0xFF5
 17826                           prodh	equ	0xFF4
 17827                           prodl	equ	0xFF3
 17828                           intcon	equ	0xFF2
 17829                           intcon2	equ	0xFF1
 17830                           intcon3	equ	0xFF0
 17831                           postinc0	equ	0xFEE
 17832                           wreg	equ	0xFE8
 17833                           postdec1	equ	0xFE5
 17834                           plusw1	equ	0xFE3
 17835                           fsr1l	equ	0xFE1
 17836                           indf2	equ	0xFDF
 17837                           postinc2	equ	0xFDE
 17838                           postdec2	equ	0xFDD
 17839                           plusw2	equ	0xFDB
 17840                           fsr2h	equ	0xFDA
 17841                           fsr2l	equ	0xFD9
 17842                           status	equ	0xFD8
 17843                           
 17844 ;; *************** function ___ftge *****************
 17845 ;; Defined at:
 17846 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 17847 ;; Parameters:    Size  Location     Type
 17848 ;;  ff1             3   16[COMRAM] float 
 17849 ;;  ff2             3   19[COMRAM] float 
 17850 ;; Auto vars:     Size  Location     Type
 17851 ;;		None
 17852 ;; Return value:  Size  Location     Type
 17853 ;;		None               void
 17854 ;; Registers used:
 17855 ;;		wreg, status,2, status,0
 17856 ;; Tracked objects:
 17857 ;;		On entry : 0/0
 17858 ;;		On exit  : 0/0
 17859 ;;		Unchanged: 0/0
 17860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17861 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17863 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17865 ;;Total ram usage:        9 bytes
 17866 ;; Hardware stack levels used:    1
 17867 ;; Hardware stack levels required when called:    3
 17868 ;; This function calls:
 17869 ;;		Nothing
 17870 ;; This function is called by:
 17871 ;;		_main
 17872 ;;		_Setup_Fan_Temp
 17873 ;;		_Do_Setup_Time
 17874 ;;		_printf
 17875 ;; This function uses a non-reentrant model
 17876 ;;
 17877                           
 17878                           	psect	text78
 17879  003CF8                     __ptext78:
 17880                           	opt stack 0
 17881  003CF8                     ___ftge:
 17882                           	opt stack 26
 17883                           
 17884                           ;incstack = 0
 17885  003CF8  AE13               	btfss	___ftge@ff1+2,7,c
 17886  003CFA  D017               	goto	l8948
 17887  003CFC  C011  F017         	movff	___ftge@ff1,??___ftge
 17888  003D00  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 17889  003D04  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 17890  003D08  1E17               	comf	??___ftge,f,c
 17891  003D0A  1E18               	comf	??___ftge+1,f,c
 17892  003D0C  1E19               	comf	??___ftge+2,f,c
 17893  003D0E  2A17               	incf	??___ftge,f,c
 17894  003D10  0E00               	movlw	0
 17895  003D12  2218               	addwfc	??___ftge+1,f,c
 17896  003D14  2219               	addwfc	??___ftge+2,f,c
 17897  003D16  0E00               	movlw	0
 17898  003D18  2417               	addwf	??___ftge,w,c
 17899  003D1A  6E11               	movwf	___ftge@ff1,c
 17900  003D1C  0E00               	movlw	0
 17901  003D1E  2018               	addwfc	??___ftge+1,w,c
 17902  003D20  6E12               	movwf	___ftge@ff1+1,c
 17903  003D22  0E80               	movlw	128
 17904  003D24  2019               	addwfc	??___ftge+2,w,c
 17905  003D26  6E13               	movwf	___ftge@ff1+2,c
 17906  003D28  D000               	goto	l8948
 17907  003D2A                     l8948:
 17908  003D2A  AE16               	btfss	___ftge@ff2+2,7,c
 17909  003D2C  D017               	goto	l8952
 17910  003D2E  C014  F017         	movff	___ftge@ff2,??___ftge
 17911  003D32  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 17912  003D36  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 17913  003D3A  1E17               	comf	??___ftge,f,c
 17914  003D3C  1E18               	comf	??___ftge+1,f,c
 17915  003D3E  1E19               	comf	??___ftge+2,f,c
 17916  003D40  2A17               	incf	??___ftge,f,c
 17917  003D42  0E00               	movlw	0
 17918  003D44  2218               	addwfc	??___ftge+1,f,c
 17919  003D46  2219               	addwfc	??___ftge+2,f,c
 17920  003D48  0E00               	movlw	0
 17921  003D4A  2417               	addwf	??___ftge,w,c
 17922  003D4C  6E14               	movwf	___ftge@ff2,c
 17923  003D4E  0E00               	movlw	0
 17924  003D50  2018               	addwfc	??___ftge+1,w,c
 17925  003D52  6E15               	movwf	___ftge@ff2+1,c
 17926  003D54  0E80               	movlw	128
 17927  003D56  2019               	addwfc	??___ftge+2,w,c
 17928  003D58  6E16               	movwf	___ftge@ff2+2,c
 17929  003D5A  D000               	goto	l8952
 17930  003D5C                     l8952:
 17931  003D5C  0E00               	movlw	0
 17932  003D5E  1A11               	xorwf	___ftge@ff1,f,c
 17933  003D60  0E00               	movlw	0
 17934  003D62  1A12               	xorwf	___ftge@ff1+1,f,c
 17935  003D64  0E80               	movlw	128
 17936  003D66  1A13               	xorwf	___ftge@ff1+2,f,c
 17937  003D68  0E00               	movlw	0
 17938  003D6A  1A14               	xorwf	___ftge@ff2,f,c
 17939  003D6C  0E00               	movlw	0
 17940  003D6E  1A15               	xorwf	___ftge@ff2+1,f,c
 17941  003D70  0E80               	movlw	128
 17942  003D72  1A16               	xorwf	___ftge@ff2+2,f,c
 17943  003D74  5014               	movf	___ftge@ff2,w,c
 17944  003D76  5C11               	subwf	___ftge@ff1,w,c
 17945  003D78  5015               	movf	___ftge@ff2+1,w,c
 17946  003D7A  5812               	subwfb	___ftge@ff1+1,w,c
 17947  003D7C  5016               	movf	___ftge@ff2+2,w,c
 17948  003D7E  5813               	subwfb	___ftge@ff1+2,w,c
 17949  003D80  B0D8               	btfsc	status,0,c
 17950  003D82  D002               	goto	l8958
 17951  003D84  90D8               	bcf	status,0,c
 17952  003D86  D002               	goto	l1925
 17953  003D88                     l8958:
 17954  003D88  80D8               	bsf	status,0,c
 17955  003D8A  D000               	goto	l1925
 17956  003D8C                     l1925:
 17957  003D8C  0012               	return		;funcret
 17958  003D8E                     __end_of___ftge:
 17959                           	opt stack 0
 17960                           tblptru	equ	0xFF8
 17961                           tblptrh	equ	0xFF7
 17962                           tblptrl	equ	0xFF6
 17963                           tablat	equ	0xFF5
 17964                           prodh	equ	0xFF4
 17965                           prodl	equ	0xFF3
 17966                           intcon	equ	0xFF2
 17967                           intcon2	equ	0xFF1
 17968                           intcon3	equ	0xFF0
 17969                           postinc0	equ	0xFEE
 17970                           wreg	equ	0xFE8
 17971                           postdec1	equ	0xFE5
 17972                           plusw1	equ	0xFE3
 17973                           fsr1l	equ	0xFE1
 17974                           indf2	equ	0xFDF
 17975                           postinc2	equ	0xFDE
 17976                           postdec2	equ	0xFDD
 17977                           plusw2	equ	0xFDB
 17978                           fsr2h	equ	0xFDA
 17979                           fsr2l	equ	0xFD9
 17980                           status	equ	0xFD8
 17981                           
 17982 ;; *************** function _Init_UART *****************
 17983 ;; Defined at:
 17984 ;;		line 182 in file "utils.c"
 17985 ;; Parameters:    Size  Location     Type
 17986 ;;		None
 17987 ;; Auto vars:     Size  Location     Type
 17988 ;;		None
 17989 ;; Return value:  Size  Location     Type
 17990 ;;		None               void
 17991 ;; Registers used:
 17992 ;;		wreg, status,2, cstack
 17993 ;; Tracked objects:
 17994 ;;		On entry : 0/0
 17995 ;;		On exit  : 0/0
 17996 ;;		Unchanged: 0/0
 17997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18002 ;;Total ram usage:        0 bytes
 18003 ;; Hardware stack levels used:    1
 18004 ;; Hardware stack levels required when called:    4
 18005 ;; This function calls:
 18006 ;;		_OpenUSART
 18007 ;; This function is called by:
 18008 ;;		_Do_Init
 18009 ;; This function uses a non-reentrant model
 18010 ;;
 18011                           
 18012                           	psect	text79
 18013  004CCE                     __ptext79:
 18014                           	opt stack 0
 18015  004CCE                     _Init_UART:
 18016                           	opt stack 25
 18017                           
 18018                           ;utils.c: 184: OpenUSART (0b01111111 & 0b10111111 &
 18019                           ;utils.c: 185: 0b11111110 & 0b11111101 & 0b11111111 &
 18020                           ;utils.c: 186: 0b11111111, 25);
 18021                           
 18022                           ;incstack = 0
 18023  004CCE  0E00               	movlw	0
 18024  004CD0  6E12               	movwf	OpenUSART@spbrg+1,c
 18025  004CD2  0E19               	movlw	25
 18026  004CD4  6E11               	movwf	OpenUSART@spbrg,c
 18027  004CD6  0E3C               	movlw	60
 18028  004CD8  ECDB  F020         	call	_OpenUSART
 18029                           
 18030                           ;utils.c: 187: OSCCON = 0x70;
 18031  004CDC  0E70               	movlw	112
 18032  004CDE  6ED3               	movwf	4051,c	;volatile
 18033  004CE0  0012               	return		;funcret
 18034  004CE2                     __end_of_Init_UART:
 18035                           	opt stack 0
 18036                           tblptru	equ	0xFF8
 18037                           tblptrh	equ	0xFF7
 18038                           tblptrl	equ	0xFF6
 18039                           tablat	equ	0xFF5
 18040                           prodh	equ	0xFF4
 18041                           prodl	equ	0xFF3
 18042                           intcon	equ	0xFF2
 18043                           intcon2	equ	0xFF1
 18044                           intcon3	equ	0xFF0
 18045                           postinc0	equ	0xFEE
 18046                           wreg	equ	0xFE8
 18047                           postdec1	equ	0xFE5
 18048                           plusw1	equ	0xFE3
 18049                           fsr1l	equ	0xFE1
 18050                           indf2	equ	0xFDF
 18051                           postinc2	equ	0xFDE
 18052                           postdec2	equ	0xFDD
 18053                           plusw2	equ	0xFDB
 18054                           fsr2h	equ	0xFDA
 18055                           fsr2l	equ	0xFD9
 18056                           status	equ	0xFD8
 18057                           
 18058 ;; *************** function _OpenUSART *****************
 18059 ;; Defined at:
 18060 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 18061 ;; Parameters:    Size  Location     Type
 18062 ;;  config          1    wreg     unsigned char 
 18063 ;;  spbrg           2   16[COMRAM] unsigned int 
 18064 ;; Auto vars:     Size  Location     Type
 18065 ;;  config          1   18[COMRAM] unsigned char 
 18066 ;; Return value:  Size  Location     Type
 18067 ;;		None               void
 18068 ;; Registers used:
 18069 ;;		wreg, status,2
 18070 ;; Tracked objects:
 18071 ;;		On entry : 0/0
 18072 ;;		On exit  : 0/0
 18073 ;;		Unchanged: 0/0
 18074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18075 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18078 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18079 ;;Total ram usage:        3 bytes
 18080 ;; Hardware stack levels used:    1
 18081 ;; Hardware stack levels required when called:    3
 18082 ;; This function calls:
 18083 ;;		Nothing
 18084 ;; This function is called by:
 18085 ;;		_Init_UART
 18086 ;; This function uses a non-reentrant model
 18087 ;;
 18088                           
 18089                           	psect	text80
 18090  0041B6                     __ptext80:
 18091                           	opt stack 0
 18092  0041B6                     _OpenUSART:
 18093                           	opt stack 25
 18094                           
 18095                           ;incstack = 0
 18096                           ;OpenUSART@config stored from wreg
 18097  0041B6  6E13               	movwf	OpenUSART@config,c
 18098  0041B8  0E00               	movlw	0
 18099  0041BA  6EAC               	movwf	4012,c	;volatile
 18100  0041BC  0E00               	movlw	0
 18101  0041BE  6EAB               	movwf	4011,c	;volatile
 18102  0041C0  A013               	btfss	OpenUSART@config,0,c
 18103  0041C2  D002               	goto	l6694
 18104  0041C4  88AC               	bsf	4012,4,c	;volatile
 18105  0041C6  D000               	goto	l6694
 18106  0041C8                     l6694:
 18107  0041C8  A213               	btfss	OpenUSART@config,1,c
 18108  0041CA  D003               	goto	l6698
 18109  0041CC  8CAC               	bsf	4012,6,c	;volatile
 18110  0041CE  8CAB               	bsf	4011,6,c	;volatile
 18111  0041D0  D000               	goto	l6698
 18112  0041D2                     l6698:
 18113  0041D2  A413               	btfss	OpenUSART@config,2,c
 18114  0041D4  D002               	goto	l6702
 18115  0041D6  8EAC               	bsf	4012,7,c	;volatile
 18116  0041D8  D000               	goto	l6702
 18117  0041DA                     l6702:
 18118  0041DA  A613               	btfss	OpenUSART@config,3,c
 18119  0041DC  D002               	goto	l1490
 18120  0041DE  88AB               	bsf	4011,4,c	;volatile
 18121  0041E0  D002               	goto	l6706
 18122  0041E2                     l1490:
 18123  0041E2  8AAB               	bsf	4011,5,c	;volatile
 18124  0041E4  D000               	goto	l6706
 18125  0041E6                     l6706:
 18126  0041E6  B813               	btfsc	OpenUSART@config,4,c
 18127  0041E8  84AC               	bsf	4012,2,c	;volatile
 18128  0041EA  989E               	bcf	3998,4,c	;volatile
 18129  0041EC  AA13               	btfss	OpenUSART@config,5,c
 18130  0041EE  D002               	goto	l6714
 18131  0041F0  86AB               	bsf	4011,3,c	;volatile
 18132  0041F2  D000               	goto	l6714
 18133  0041F4                     l6714:
 18134  0041F4  AC13               	btfss	OpenUSART@config,6,c
 18135  0041F6  D002               	goto	l1494
 18136  0041F8  8A9D               	bsf	3997,5,c	;volatile
 18137  0041FA  D001               	goto	l1495
 18138  0041FC                     l1494:
 18139  0041FC  9A9D               	bcf	3997,5,c	;volatile
 18140  0041FE                     l1495:
 18141  0041FE  9A9E               	bcf	3998,5,c	;volatile
 18142  004200  AE13               	btfss	OpenUSART@config,7,c
 18143  004202  D002               	goto	l1496
 18144  004204  889D               	bsf	3997,4,c	;volatile
 18145  004206  D001               	goto	l1497
 18146  004208                     l1496:
 18147  004208  989D               	bcf	3997,4,c	;volatile
 18148  00420A                     l1497:
 18149  00420A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 18150  00420E  5012               	movf	OpenUSART@spbrg+1,w,c
 18151  004210  6EB0               	movwf	4016,c	;volatile
 18152  004212  8AAC               	bsf	4012,5,c	;volatile
 18153  004214  8EAB               	bsf	4011,7,c	;volatile
 18154  004216  9C94               	bcf	3988,6,c	;volatile
 18155  004218  8E94               	bsf	3988,7,c	;volatile
 18156  00421A  B8AC               	btfsc	4012,4,c	;volatile
 18157  00421C  BEAC               	btfsc	4012,7,c	;volatile
 18158  00421E  D002               	goto	l1499
 18159  004220  8C94               	bsf	3988,6,c	;volatile
 18160  004222  D000               	goto	l1499
 18161  004224                     l1499:
 18162  004224  0012               	return		;funcret
 18163  004226                     __end_of_OpenUSART:
 18164                           	opt stack 0
 18165                           tblptru	equ	0xFF8
 18166                           tblptrh	equ	0xFF7
 18167                           tblptrl	equ	0xFF6
 18168                           tablat	equ	0xFF5
 18169                           prodh	equ	0xFF4
 18170                           prodl	equ	0xFF3
 18171                           intcon	equ	0xFF2
 18172                           intcon2	equ	0xFF1
 18173                           intcon3	equ	0xFF0
 18174                           postinc0	equ	0xFEE
 18175                           wreg	equ	0xFE8
 18176                           postdec1	equ	0xFE5
 18177                           plusw1	equ	0xFE3
 18178                           fsr1l	equ	0xFE1
 18179                           indf2	equ	0xFDF
 18180                           postinc2	equ	0xFDE
 18181                           postdec2	equ	0xFDD
 18182                           plusw2	equ	0xFDB
 18183                           fsr2h	equ	0xFDA
 18184                           fsr2l	equ	0xFD9
 18185                           status	equ	0xFD8
 18186                           
 18187 ;; *************** function _Init_Interrupt *****************
 18188 ;; Defined at:
 18189 ;;		line 18 in file "Interrupt.c"
 18190 ;; Parameters:    Size  Location     Type
 18191 ;;		None
 18192 ;; Auto vars:     Size  Location     Type
 18193 ;;		None
 18194 ;; Return value:  Size  Location     Type
 18195 ;;		None               void
 18196 ;; Registers used:
 18197 ;;		wreg, status,2
 18198 ;; Tracked objects:
 18199 ;;		On entry : 0/0
 18200 ;;		On exit  : 0/0
 18201 ;;		Unchanged: 0/0
 18202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18207 ;;Total ram usage:        0 bytes
 18208 ;; Hardware stack levels used:    1
 18209 ;; Hardware stack levels required when called:    3
 18210 ;; This function calls:
 18211 ;;		Nothing
 18212 ;; This function is called by:
 18213 ;;		_Do_Init
 18214 ;; This function uses a non-reentrant model
 18215 ;;
 18216                           
 18217                           	psect	text81
 18218  004A68                     __ptext81:
 18219                           	opt stack 0
 18220  004A68                     _Init_Interrupt:
 18221                           	opt stack 26
 18222                           
 18223                           ;Interrupt.c: 21: INTCONbits.INT0IF = 0 ;
 18224                           
 18225                           ;incstack = 0
 18226  004A68  92F2               	bcf	intcon,1,c	;volatile
 18227                           
 18228                           ;Interrupt.c: 22: INTCON3bits.INT1IF = 0;
 18229  004A6A  90F0               	bcf	intcon3,0,c	;volatile
 18230                           
 18231                           ;Interrupt.c: 23: INTCON3bits.INT2IF = 0;
 18232  004A6C  92F0               	bcf	intcon3,1,c	;volatile
 18233                           
 18234                           ;Interrupt.c: 25: INTCONbits.INT0IE = 1;
 18235  004A6E  88F2               	bsf	intcon,4,c	;volatile
 18236                           
 18237                           ;Interrupt.c: 26: INTCON3bits.INT1IE = 1;
 18238  004A70  86F0               	bsf	intcon3,3,c	;volatile
 18239                           
 18240                           ;Interrupt.c: 27: INTCON3bits.INT2IE = 1;
 18241  004A72  88F0               	bsf	intcon3,4,c	;volatile
 18242                           
 18243                           ;Interrupt.c: 29: INTCON2bits.INTEDG0 = 0;
 18244  004A74  9CF1               	bcf	intcon2,6,c	;volatile
 18245                           
 18246                           ;Interrupt.c: 30: INTCON2bits.INTEDG1 = 0;
 18247  004A76  9AF1               	bcf	intcon2,5,c	;volatile
 18248                           
 18249                           ;Interrupt.c: 31: INTCON2bits.INTEDG2 = 0;
 18250  004A78  98F1               	bcf	intcon2,4,c	;volatile
 18251                           
 18252                           ;Interrupt.c: 32: TMR1H = 0;
 18253  004A7A  0E00               	movlw	0
 18254  004A7C  6ECF               	movwf	4047,c	;volatile
 18255                           
 18256                           ;Interrupt.c: 33: TMR1L = 0;
 18257  004A7E  0E00               	movlw	0
 18258  004A80  6ECE               	movwf	4046,c	;volatile
 18259                           
 18260                           ;Interrupt.c: 34: PIR1bits.TMR1IF = 0;
 18261  004A82  909E               	bcf	3998,0,c	;volatile
 18262                           
 18263                           ;Interrupt.c: 35: PIE1bits.TMR1IE = 1;
 18264  004A84  809D               	bsf	3997,0,c	;volatile
 18265                           
 18266                           ;Interrupt.c: 36: INTCONbits.PEIE = 1;
 18267  004A86  8CF2               	bsf	intcon,6,c	;volatile
 18268                           
 18269                           ;Interrupt.c: 37: INTCONbits.GIE = 1;
 18270  004A88  8EF2               	bsf	intcon,7,c	;volatile
 18271  004A8A  0012               	return		;funcret
 18272  004A8C                     __end_of_Init_Interrupt:
 18273                           	opt stack 0
 18274                           tblptru	equ	0xFF8
 18275                           tblptrh	equ	0xFF7
 18276                           tblptrl	equ	0xFF6
 18277                           tablat	equ	0xFF5
 18278                           prodh	equ	0xFF4
 18279                           prodl	equ	0xFF3
 18280                           intcon	equ	0xFF2
 18281                           intcon2	equ	0xFF1
 18282                           intcon3	equ	0xFF0
 18283                           postinc0	equ	0xFEE
 18284                           wreg	equ	0xFE8
 18285                           postdec1	equ	0xFE5
 18286                           plusw1	equ	0xFE3
 18287                           fsr1l	equ	0xFE1
 18288                           indf2	equ	0xFDF
 18289                           postinc2	equ	0xFDE
 18290                           postdec2	equ	0xFDD
 18291                           plusw2	equ	0xFDB
 18292                           fsr2h	equ	0xFDA
 18293                           fsr2l	equ	0xFD9
 18294                           status	equ	0xFD8
 18295                           
 18296 ;; *************** function _Init_ADC *****************
 18297 ;; Defined at:
 18298 ;;		line 174 in file "utils.c"
 18299 ;; Parameters:    Size  Location     Type
 18300 ;;		None
 18301 ;; Auto vars:     Size  Location     Type
 18302 ;;		None
 18303 ;; Return value:  Size  Location     Type
 18304 ;;		None               void
 18305 ;; Registers used:
 18306 ;;		wreg, status,2
 18307 ;; Tracked objects:
 18308 ;;		On entry : 0/0
 18309 ;;		On exit  : 0/0
 18310 ;;		Unchanged: 0/0
 18311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18316 ;;Total ram usage:        0 bytes
 18317 ;; Hardware stack levels used:    1
 18318 ;; Hardware stack levels required when called:    3
 18319 ;; This function calls:
 18320 ;;		Nothing
 18321 ;; This function is called by:
 18322 ;;		_Do_Init
 18323 ;; This function uses a non-reentrant model
 18324 ;;
 18325                           
 18326                           	psect	text82
 18327  004D9E                     __ptext82:
 18328                           	opt stack 0
 18329  004D9E                     _Init_ADC:
 18330                           	opt stack 26
 18331                           
 18332                           ;utils.c: 176: ADCON0 = 0x01;
 18333                           
 18334                           ;incstack = 0
 18335  004D9E  0E01               	movlw	1
 18336  004DA0  6EC2               	movwf	4034,c	;volatile
 18337                           
 18338                           ;utils.c: 177: ADCON1 = 0x0E;
 18339  004DA2  0E0E               	movlw	14
 18340  004DA4  6EC1               	movwf	4033,c	;volatile
 18341                           
 18342                           ;utils.c: 178: ADCON2 = 0xA9;
 18343  004DA6  0EA9               	movlw	169
 18344  004DA8  6EC0               	movwf	4032,c	;volatile
 18345  004DAA  0012               	return		;funcret
 18346  004DAC                     __end_of_Init_ADC:
 18347                           	opt stack 0
 18348                           tblptru	equ	0xFF8
 18349                           tblptrh	equ	0xFF7
 18350                           tblptrl	equ	0xFF6
 18351                           tablat	equ	0xFF5
 18352                           prodh	equ	0xFF4
 18353                           prodl	equ	0xFF3
 18354                           intcon	equ	0xFF2
 18355                           intcon2	equ	0xFF1
 18356                           intcon3	equ	0xFF0
 18357                           postinc0	equ	0xFEE
 18358                           wreg	equ	0xFE8
 18359                           postdec1	equ	0xFE5
 18360                           plusw1	equ	0xFE3
 18361                           fsr1l	equ	0xFE1
 18362                           indf2	equ	0xFDF
 18363                           postinc2	equ	0xFDE
 18364                           postdec2	equ	0xFDD
 18365                           plusw2	equ	0xFDB
 18366                           fsr2h	equ	0xFDA
 18367                           fsr2l	equ	0xFD9
 18368                           status	equ	0xFD8
 18369                           
 18370 ;; *************** function _I2C_Init *****************
 18371 ;; Defined at:
 18372 ;;		line 10 in file "I2C_Soft.c"
 18373 ;; Parameters:    Size  Location     Type
 18374 ;;  c               4   16[COMRAM] unsigned long 
 18375 ;; Auto vars:     Size  Location     Type
 18376 ;;		None
 18377 ;; Return value:  Size  Location     Type
 18378 ;;		None               void
 18379 ;; Registers used:
 18380 ;;		wreg, cstack
 18381 ;; Tracked objects:
 18382 ;;		On entry : 0/0
 18383 ;;		On exit  : 0/0
 18384 ;;		Unchanged: 0/0
 18385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18386 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18390 ;;Total ram usage:        4 bytes
 18391 ;; Hardware stack levels used:    1
 18392 ;; Hardware stack levels required when called:    4
 18393 ;; This function calls:
 18394 ;;		_i2cHighScl
 18395 ;;		_i2cHighSda
 18396 ;; This function is called by:
 18397 ;;		_Do_Init
 18398 ;; This function uses a non-reentrant model
 18399 ;;
 18400                           
 18401                           	psect	text83
 18402  004DCE                     __ptext83:
 18403                           	opt stack 0
 18404  004DCE                     _I2C_Init:
 18405                           	opt stack 25
 18406                           
 18407                           ;I2C_Soft.c: 12: i2cHighScl();
 18408                           
 18409                           ;incstack = 0
 18410  004DCE  ECD6  F026         	call	_i2cHighScl	;wreg free
 18411                           
 18412                           ;I2C_Soft.c: 13: i2cHighSda();
 18413  004DD2  ECFA  F026         	call	_i2cHighSda	;wreg free
 18414  004DD6  0012               	return		;funcret
 18415  004DD8                     __end_of_I2C_Init:
 18416                           	opt stack 0
 18417                           tblptru	equ	0xFF8
 18418                           tblptrh	equ	0xFF7
 18419                           tblptrl	equ	0xFF6
 18420                           tablat	equ	0xFF5
 18421                           prodh	equ	0xFF4
 18422                           prodl	equ	0xFF3
 18423                           intcon	equ	0xFF2
 18424                           intcon2	equ	0xFF1
 18425                           intcon3	equ	0xFF0
 18426                           postinc0	equ	0xFEE
 18427                           wreg	equ	0xFE8
 18428                           postdec1	equ	0xFE5
 18429                           plusw1	equ	0xFE3
 18430                           fsr1l	equ	0xFE1
 18431                           indf2	equ	0xFDF
 18432                           postinc2	equ	0xFDE
 18433                           postdec2	equ	0xFDD
 18434                           plusw2	equ	0xFDB
 18435                           fsr2h	equ	0xFDA
 18436                           fsr2l	equ	0xFD9
 18437                           status	equ	0xFD8
 18438                           
 18439 ;; *************** function _DS1621_Init *****************
 18440 ;; Defined at:
 18441 ;;		line 19 in file "I2C_Support.c"
 18442 ;; Parameters:    Size  Location     Type
 18443 ;;		None
 18444 ;; Auto vars:     Size  Location     Type
 18445 ;;  Device          1   21[COMRAM] unsigned char 
 18446 ;; Return value:  Size  Location     Type
 18447 ;;		None               void
 18448 ;; Registers used:
 18449 ;;		wreg, status,2, status,0, cstack
 18450 ;; Tracked objects:
 18451 ;;		On entry : 0/0
 18452 ;;		On exit  : 0/0
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;Total ram usage:        1 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; Hardware stack levels required when called:    6
 18462 ;; This function calls:
 18463 ;;		_I2C_Write_Cmd_Only
 18464 ;;		_I2C_Write_Cmd_Write_Data
 18465 ;; This function is called by:
 18466 ;;		_Do_Init
 18467 ;; This function uses a non-reentrant model
 18468 ;;
 18469                           
 18470                           	psect	text84
 18471  004B52                     __ptext84:
 18472                           	opt stack 0
 18473  004B52                     _DS1621_Init:
 18474                           	opt stack 23
 18475                           
 18476                           ;I2C_Support.c: 22: char Device = 0x48;
 18477                           
 18478                           ;incstack = 0
 18479  004B52  0E48               	movlw	72
 18480  004B54  6E16               	movwf	DS1621_Init@Device,c
 18481                           
 18482                           ;I2C_Support.c: 23: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
 18483  004B56  0EAC               	movlw	172
 18484  004B58  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 18485  004B5A  0E02               	movlw	2
 18486  004B5C  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 18487  004B5E  5016               	movf	DS1621_Init@Device,w,c
 18488  004B60  EC99  F025         	call	_I2C_Write_Cmd_Write_Data
 18489                           
 18490                           ;I2C_Support.c: 24: I2C_Write_Cmd_Only(Device, 0xEE);
 18491  004B64  0EEE               	movlw	238
 18492  004B66  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 18493  004B68  5016               	movf	DS1621_Init@Device,w,c
 18494  004B6A  EC26  F026         	call	_I2C_Write_Cmd_Only
 18495  004B6E  0012               	return		;funcret
 18496  004B70                     __end_of_DS1621_Init:
 18497                           	opt stack 0
 18498                           tblptru	equ	0xFF8
 18499                           tblptrh	equ	0xFF7
 18500                           tblptrl	equ	0xFF6
 18501                           tablat	equ	0xFF5
 18502                           prodh	equ	0xFF4
 18503                           prodl	equ	0xFF3
 18504                           intcon	equ	0xFF2
 18505                           intcon2	equ	0xFF1
 18506                           intcon3	equ	0xFF0
 18507                           postinc0	equ	0xFEE
 18508                           wreg	equ	0xFE8
 18509                           postdec1	equ	0xFE5
 18510                           plusw1	equ	0xFE3
 18511                           fsr1l	equ	0xFE1
 18512                           indf2	equ	0xFDF
 18513                           postinc2	equ	0xFDE
 18514                           postdec2	equ	0xFDD
 18515                           plusw2	equ	0xFDB
 18516                           fsr2h	equ	0xFDA
 18517                           fsr2l	equ	0xFD9
 18518                           status	equ	0xFD8
 18519                           
 18520 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 18521 ;; Defined at:
 18522 ;;		line 148 in file "I2C_Soft.c"
 18523 ;; Parameters:    Size  Location     Type
 18524 ;;  Device          1    wreg     unsigned char 
 18525 ;;  Cmd             1   18[COMRAM] unsigned char 
 18526 ;;  Data_Out        1   19[COMRAM] unsigned char 
 18527 ;; Auto vars:     Size  Location     Type
 18528 ;;  Device          1   20[COMRAM] unsigned char 
 18529 ;; Return value:  Size  Location     Type
 18530 ;;		None               void
 18531 ;; Registers used:
 18532 ;;		wreg, status,2, status,0, cstack
 18533 ;; Tracked objects:
 18534 ;;		On entry : 0/0
 18535 ;;		On exit  : 0/0
 18536 ;;		Unchanged: 0/0
 18537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18541 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18542 ;;Total ram usage:        3 bytes
 18543 ;; Hardware stack levels used:    1
 18544 ;; Hardware stack levels required when called:    5
 18545 ;; This function calls:
 18546 ;;		_I2C_Start
 18547 ;;		_I2C_Stop
 18548 ;;		_I2C_Write
 18549 ;; This function is called by:
 18550 ;;		_DS1621_Init
 18551 ;; This function uses a non-reentrant model
 18552 ;;
 18553                           
 18554                           	psect	text85
 18555  004B32                     __ptext85:
 18556                           	opt stack 0
 18557  004B32                     _I2C_Write_Cmd_Write_Data:
 18558                           	opt stack 23
 18559                           
 18560                           ;incstack = 0
 18561                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 18562  004B32  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 18563                           
 18564                           ;I2C_Soft.c: 150: I2C_Start();
 18565  004B34  EC8C  F026         	call	_I2C_Start	;wreg free
 18566                           
 18567                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 18568  004B38  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 18569  004B3A  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 18570  004B3C  ECC4  F023         	call	_I2C_Write
 18571                           
 18572                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 18573  004B40  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 18574  004B42  ECC4  F023         	call	_I2C_Write
 18575                           
 18576                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 18577  004B46  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 18578  004B48  ECC4  F023         	call	_I2C_Write
 18579                           
 18580                           ;I2C_Soft.c: 154: I2C_Stop();
 18581  004B4C  EC83  F026         	call	_I2C_Stop	;wreg free
 18582  004B50  0012               	return		;funcret
 18583  004B52                     __end_of_I2C_Write_Cmd_Write_Data:
 18584                           	opt stack 0
 18585                           tblptru	equ	0xFF8
 18586                           tblptrh	equ	0xFF7
 18587                           tblptrl	equ	0xFF6
 18588                           tablat	equ	0xFF5
 18589                           prodh	equ	0xFF4
 18590                           prodl	equ	0xFF3
 18591                           intcon	equ	0xFF2
 18592                           intcon2	equ	0xFF1
 18593                           intcon3	equ	0xFF0
 18594                           postinc0	equ	0xFEE
 18595                           wreg	equ	0xFE8
 18596                           postdec1	equ	0xFE5
 18597                           plusw1	equ	0xFE3
 18598                           fsr1l	equ	0xFE1
 18599                           indf2	equ	0xFDF
 18600                           postinc2	equ	0xFDE
 18601                           postdec2	equ	0xFDD
 18602                           plusw2	equ	0xFDB
 18603                           fsr2h	equ	0xFDA
 18604                           fsr2l	equ	0xFD9
 18605                           status	equ	0xFD8
 18606                           
 18607 ;; *************** function _I2C_Write_Cmd_Only *****************
 18608 ;; Defined at:
 18609 ;;		line 140 in file "I2C_Soft.c"
 18610 ;; Parameters:    Size  Location     Type
 18611 ;;  Device          1    wreg     unsigned char 
 18612 ;;  Cmd             1   18[COMRAM] unsigned char 
 18613 ;; Auto vars:     Size  Location     Type
 18614 ;;  Device          1   19[COMRAM] unsigned char 
 18615 ;; Return value:  Size  Location     Type
 18616 ;;		None               void
 18617 ;; Registers used:
 18618 ;;		wreg, status,2, status,0, cstack
 18619 ;; Tracked objects:
 18620 ;;		On entry : 0/0
 18621 ;;		On exit  : 0/0
 18622 ;;		Unchanged: 0/0
 18623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18624 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18627 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18628 ;;Total ram usage:        2 bytes
 18629 ;; Hardware stack levels used:    1
 18630 ;; Hardware stack levels required when called:    5
 18631 ;; This function calls:
 18632 ;;		_I2C_Start
 18633 ;;		_I2C_Stop
 18634 ;;		_I2C_Write
 18635 ;; This function is called by:
 18636 ;;		_DS1621_Init
 18637 ;; This function uses a non-reentrant model
 18638 ;;
 18639                           
 18640                           	psect	text86
 18641  004C4C                     __ptext86:
 18642                           	opt stack 0
 18643  004C4C                     _I2C_Write_Cmd_Only:
 18644                           	opt stack 23
 18645                           
 18646                           ;incstack = 0
 18647                           ;I2C_Write_Cmd_Only@Device stored from wreg
 18648  004C4C  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 18649                           
 18650                           ;I2C_Soft.c: 142: I2C_Start();
 18651  004C4E  EC8C  F026         	call	_I2C_Start	;wreg free
 18652                           
 18653                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 18654  004C52  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 18655  004C54  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 18656  004C56  ECC4  F023         	call	_I2C_Write
 18657                           
 18658                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 18659  004C5A  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 18660  004C5C  ECC4  F023         	call	_I2C_Write
 18661                           
 18662                           ;I2C_Soft.c: 145: I2C_Stop();
 18663  004C60  EC83  F026         	call	_I2C_Stop	;wreg free
 18664  004C64  0012               	return		;funcret
 18665  004C66                     __end_of_I2C_Write_Cmd_Only:
 18666                           	opt stack 0
 18667                           tblptru	equ	0xFF8
 18668                           tblptrh	equ	0xFF7
 18669                           tblptrl	equ	0xFF6
 18670                           tablat	equ	0xFF5
 18671                           prodh	equ	0xFF4
 18672                           prodl	equ	0xFF3
 18673                           intcon	equ	0xFF2
 18674                           intcon2	equ	0xFF1
 18675                           intcon3	equ	0xFF0
 18676                           postinc0	equ	0xFEE
 18677                           wreg	equ	0xFE8
 18678                           postdec1	equ	0xFE5
 18679                           plusw1	equ	0xFE3
 18680                           fsr1l	equ	0xFE1
 18681                           indf2	equ	0xFDF
 18682                           postinc2	equ	0xFDE
 18683                           postdec2	equ	0xFDD
 18684                           plusw2	equ	0xFDB
 18685                           fsr2h	equ	0xFDA
 18686                           fsr2l	equ	0xFD9
 18687                           status	equ	0xFD8
 18688                           
 18689 ;; *************** function _I2C_Write *****************
 18690 ;; Defined at:
 18691 ;;		line 37 in file "I2C_Soft.c"
 18692 ;; Parameters:    Size  Location     Type
 18693 ;;  outByte         1    wreg     unsigned char 
 18694 ;; Auto vars:     Size  Location     Type
 18695 ;;  outByte         1   16[COMRAM] unsigned char 
 18696 ;;  n               1   17[COMRAM] unsigned char 
 18697 ;; Return value:  Size  Location     Type
 18698 ;;		None               void
 18699 ;; Registers used:
 18700 ;;		wreg, status,2, status,0, cstack
 18701 ;; Tracked objects:
 18702 ;;		On entry : 0/0
 18703 ;;		On exit  : 0/0
 18704 ;;		Unchanged: 0/0
 18705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18707 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18709 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18710 ;;Total ram usage:        2 bytes
 18711 ;; Hardware stack levels used:    1
 18712 ;; Hardware stack levels required when called:    4
 18713 ;; This function calls:
 18714 ;;		_i2cHighScl
 18715 ;;		_i2cHighSda
 18716 ;;		_i2cLowScl
 18717 ;;		_i2cLowSda
 18718 ;; This function is called by:
 18719 ;;		_I2C_Write_Cmd_Only
 18720 ;;		_I2C_Write_Cmd_Write_Data
 18721 ;;		_DS1621_Read_Temp
 18722 ;;		_DS3231_Read_Time
 18723 ;;		_DS3231_Write_Time
 18724 ;;		_I2C_Write_Address_Read_One_Byte
 18725 ;;		_I2C_Write_Address_Write_One_Byte
 18726 ;;		_I2C_Write_Cmd_Read_One_Byte
 18727 ;;		_DS3231_Init
 18728 ;; This function uses a non-reentrant model
 18729 ;;
 18730                           
 18731                           	psect	text87
 18732  004788                     __ptext87:
 18733                           	opt stack 0
 18734  004788                     _I2C_Write:
 18735                           	opt stack 23
 18736                           
 18737                           ;incstack = 0
 18738                           ;I2C_Write@outByte stored from wreg
 18739  004788  6E11               	movwf	I2C_Write@outByte,c
 18740                           
 18741                           ;I2C_Soft.c: 39: unsigned char n;
 18742                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 18743  00478A  0E00               	movlw	0
 18744  00478C  6E12               	movwf	I2C_Write@n,c
 18745  00478E                     l6438:
 18746  00478E  0E07               	movlw	7
 18747  004790  6412               	cpfsgt	I2C_Write@n,c
 18748  004792  D001               	goto	l115
 18749  004794  D011               	goto	l6456
 18750  004796                     l115:
 18751                           
 18752                           ;I2C_Soft.c: 41: {
 18753                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 18754  004796  AE11               	btfss	I2C_Write@outByte,7,c
 18755  004798  D003               	goto	l6444
 18756  00479A  ECFA  F026         	call	_i2cHighSda	;wreg free
 18757  00479E  D003               	goto	l6446
 18758  0047A0                     l6444:
 18759                           
 18760                           ;I2C_Soft.c: 43: else i2cLowSda();
 18761  0047A0  ECEC  F026         	call	_i2cLowSda	;wreg free
 18762  0047A4  D000               	goto	l6446
 18763  0047A6                     l6446:
 18764                           
 18765                           ;I2C_Soft.c: 44: i2cHighScl();
 18766  0047A6  ECD6  F026         	call	_i2cHighScl	;wreg free
 18767                           
 18768                           ;I2C_Soft.c: 45: i2cLowScl();
 18769  0047AA  ECF6  F026         	call	_i2cLowScl	;wreg free
 18770                           
 18771                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 18772  0047AE  5011               	movf	I2C_Write@outByte,w,c
 18773  0047B0  2411               	addwf	I2C_Write@outByte,w,c
 18774  0047B2  6E11               	movwf	I2C_Write@outByte,c
 18775  0047B4  2A12               	incf	I2C_Write@n,f,c
 18776  0047B6  D7EB               	goto	l6438
 18777  0047B8                     l6456:
 18778                           
 18779                           ;I2C_Soft.c: 47: }
 18780                           ;I2C_Soft.c: 48: i2cHighSda();
 18781  0047B8  ECFA  F026         	call	_i2cHighSda	;wreg free
 18782                           
 18783                           ;I2C_Soft.c: 49: i2cHighScl();
 18784  0047BC  ECD6  F026         	call	_i2cHighScl	;wreg free
 18785                           
 18786                           ;I2C_Soft.c: 50: i2cLowScl();
 18787  0047C0  ECF6  F026         	call	_i2cLowScl	;wreg free
 18788  0047C4  0012               	return		;funcret
 18789  0047C6                     __end_of_I2C_Write:
 18790                           	opt stack 0
 18791                           tblptru	equ	0xFF8
 18792                           tblptrh	equ	0xFF7
 18793                           tblptrl	equ	0xFF6
 18794                           tablat	equ	0xFF5
 18795                           prodh	equ	0xFF4
 18796                           prodl	equ	0xFF3
 18797                           intcon	equ	0xFF2
 18798                           intcon2	equ	0xFF1
 18799                           intcon3	equ	0xFF0
 18800                           postinc0	equ	0xFEE
 18801                           wreg	equ	0xFE8
 18802                           postdec1	equ	0xFE5
 18803                           plusw1	equ	0xFE3
 18804                           fsr1l	equ	0xFE1
 18805                           indf2	equ	0xFDF
 18806                           postinc2	equ	0xFDE
 18807                           postdec2	equ	0xFDD
 18808                           plusw2	equ	0xFDB
 18809                           fsr2h	equ	0xFDA
 18810                           fsr2l	equ	0xFD9
 18811                           status	equ	0xFD8
 18812                           
 18813 ;; *************** function _I2C_Stop *****************
 18814 ;; Defined at:
 18815 ;;		line 84 in file "I2C_Soft.c"
 18816 ;; Parameters:    Size  Location     Type
 18817 ;;		None
 18818 ;; Auto vars:     Size  Location     Type
 18819 ;;		None
 18820 ;; Return value:  Size  Location     Type
 18821 ;;		None               void
 18822 ;; Registers used:
 18823 ;;		wreg, cstack
 18824 ;; Tracked objects:
 18825 ;;		On entry : 0/0
 18826 ;;		On exit  : 0/0
 18827 ;;		Unchanged: 0/0
 18828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;Total ram usage:        0 bytes
 18834 ;; Hardware stack levels used:    1
 18835 ;; Hardware stack levels required when called:    4
 18836 ;; This function calls:
 18837 ;;		_i2cHighScl
 18838 ;;		_i2cHighSda
 18839 ;;		_i2cLowScl
 18840 ;;		_i2cLowSda
 18841 ;; This function is called by:
 18842 ;;		_I2C_Write_Cmd_Only
 18843 ;;		_I2C_Write_Cmd_Write_Data
 18844 ;;		_DS1621_Read_Temp
 18845 ;;		_DS3231_Read_Time
 18846 ;;		_DS3231_Write_Time
 18847 ;;		_I2C_Write_Address_Read_One_Byte
 18848 ;;		_I2C_Write_Address_Write_One_Byte
 18849 ;;		_I2C_Write_Cmd_Read_One_Byte
 18850 ;;		_DS3231_Init
 18851 ;; This function uses a non-reentrant model
 18852 ;;
 18853                           
 18854                           	psect	text88
 18855  004D06                     __ptext88:
 18856                           	opt stack 0
 18857  004D06                     _I2C_Stop:
 18858                           	opt stack 23
 18859                           
 18860                           ;I2C_Soft.c: 86: i2cLowScl();
 18861                           
 18862                           ;incstack = 0
 18863  004D06  ECF6  F026         	call	_i2cLowScl	;wreg free
 18864                           
 18865                           ;I2C_Soft.c: 87: i2cLowSda();
 18866  004D0A  ECEC  F026         	call	_i2cLowSda	;wreg free
 18867                           
 18868                           ;I2C_Soft.c: 88: i2cHighScl();
 18869  004D0E  ECD6  F026         	call	_i2cHighScl	;wreg free
 18870                           
 18871                           ;I2C_Soft.c: 89: i2cHighSda();
 18872  004D12  ECFA  F026         	call	_i2cHighSda	;wreg free
 18873  004D16  0012               	return		;funcret
 18874  004D18                     __end_of_I2C_Stop:
 18875                           	opt stack 0
 18876                           tblptru	equ	0xFF8
 18877                           tblptrh	equ	0xFF7
 18878                           tblptrl	equ	0xFF6
 18879                           tablat	equ	0xFF5
 18880                           prodh	equ	0xFF4
 18881                           prodl	equ	0xFF3
 18882                           intcon	equ	0xFF2
 18883                           intcon2	equ	0xFF1
 18884                           intcon3	equ	0xFF0
 18885                           postinc0	equ	0xFEE
 18886                           wreg	equ	0xFE8
 18887                           postdec1	equ	0xFE5
 18888                           plusw1	equ	0xFE3
 18889                           fsr1l	equ	0xFE1
 18890                           indf2	equ	0xFDF
 18891                           postinc2	equ	0xFDE
 18892                           postdec2	equ	0xFDD
 18893                           plusw2	equ	0xFDB
 18894                           fsr2h	equ	0xFDA
 18895                           fsr2l	equ	0xFD9
 18896                           status	equ	0xFD8
 18897                           
 18898 ;; *************** function _I2C_Start *****************
 18899 ;; Defined at:
 18900 ;;		line 67 in file "I2C_Soft.c"
 18901 ;; Parameters:    Size  Location     Type
 18902 ;;		None
 18903 ;; Auto vars:     Size  Location     Type
 18904 ;;		None
 18905 ;; Return value:  Size  Location     Type
 18906 ;;		None               void
 18907 ;; Registers used:
 18908 ;;		wreg, cstack
 18909 ;; Tracked objects:
 18910 ;;		On entry : 0/0
 18911 ;;		On exit  : 0/0
 18912 ;;		Unchanged: 0/0
 18913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18918 ;;Total ram usage:        0 bytes
 18919 ;; Hardware stack levels used:    1
 18920 ;; Hardware stack levels required when called:    4
 18921 ;; This function calls:
 18922 ;;		_i2cHighScl
 18923 ;;		_i2cHighSda
 18924 ;;		_i2cLowScl
 18925 ;;		_i2cLowSda
 18926 ;; This function is called by:
 18927 ;;		_I2C_Write_Cmd_Only
 18928 ;;		_I2C_Write_Cmd_Write_Data
 18929 ;;		_DS1621_Read_Temp
 18930 ;;		_DS3231_Read_Time
 18931 ;;		_DS3231_Write_Time
 18932 ;;		_I2C_Write_Address_Read_One_Byte
 18933 ;;		_I2C_Write_Address_Write_One_Byte
 18934 ;;		_I2C_Write_Cmd_Read_One_Byte
 18935 ;;		_DS3231_Init
 18936 ;; This function uses a non-reentrant model
 18937 ;;
 18938                           
 18939                           	psect	text89
 18940  004D18                     __ptext89:
 18941                           	opt stack 0
 18942  004D18                     _I2C_Start:
 18943                           	opt stack 23
 18944                           
 18945                           ;I2C_Soft.c: 69: i2cHighSda();
 18946                           
 18947                           ;incstack = 0
 18948  004D18  ECFA  F026         	call	_i2cHighSda	;wreg free
 18949                           
 18950                           ;I2C_Soft.c: 70: i2cHighScl();
 18951  004D1C  ECD6  F026         	call	_i2cHighScl	;wreg free
 18952                           
 18953                           ;I2C_Soft.c: 71: i2cLowSda();
 18954  004D20  ECEC  F026         	call	_i2cLowSda	;wreg free
 18955                           
 18956                           ;I2C_Soft.c: 72: i2cLowScl();
 18957  004D24  ECF6  F026         	call	_i2cLowScl	;wreg free
 18958  004D28  0012               	return		;funcret
 18959  004D2A                     __end_of_I2C_Start:
 18960                           	opt stack 0
 18961                           tblptru	equ	0xFF8
 18962                           tblptrh	equ	0xFF7
 18963                           tblptrl	equ	0xFF6
 18964                           tablat	equ	0xFF5
 18965                           prodh	equ	0xFF4
 18966                           prodl	equ	0xFF3
 18967                           intcon	equ	0xFF2
 18968                           intcon2	equ	0xFF1
 18969                           intcon3	equ	0xFF0
 18970                           postinc0	equ	0xFEE
 18971                           wreg	equ	0xFE8
 18972                           postdec1	equ	0xFE5
 18973                           plusw1	equ	0xFE3
 18974                           fsr1l	equ	0xFE1
 18975                           indf2	equ	0xFDF
 18976                           postinc2	equ	0xFDE
 18977                           postdec2	equ	0xFDD
 18978                           plusw2	equ	0xFDB
 18979                           fsr2h	equ	0xFDA
 18980                           fsr2l	equ	0xFD9
 18981                           status	equ	0xFD8
 18982                           
 18983 ;; *************** function _i2cLowSda *****************
 18984 ;; Defined at:
 18985 ;;		line 98 in file "I2C_Soft.c"
 18986 ;; Parameters:    Size  Location     Type
 18987 ;;		None
 18988 ;; Auto vars:     Size  Location     Type
 18989 ;;		None
 18990 ;; Return value:  Size  Location     Type
 18991 ;;		None               void
 18992 ;; Registers used:
 18993 ;;		None
 18994 ;; Tracked objects:
 18995 ;;		On entry : 0/0
 18996 ;;		On exit  : 0/0
 18997 ;;		Unchanged: 0/0
 18998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19003 ;;Total ram usage:        0 bytes
 19004 ;; Hardware stack levels used:    1
 19005 ;; Hardware stack levels required when called:    3
 19006 ;; This function calls:
 19007 ;;		Nothing
 19008 ;; This function is called by:
 19009 ;;		_I2C_Write
 19010 ;;		_i2cAck
 19011 ;;		_I2C_Start
 19012 ;;		_I2C_ReStart
 19013 ;;		_I2C_Stop
 19014 ;; This function uses a non-reentrant model
 19015 ;;
 19016                           
 19017                           	psect	text90
 19018  004DD8                     __ptext90:
 19019                           	opt stack 0
 19020  004DD8                     _i2cLowSda:
 19021                           	opt stack 23
 19022                           
 19023                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
 19024                           
 19025                           ;incstack = 0
 19026  004DD8  9A81               	bcf	3969,5,c	;volatile
 19027                           
 19028                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
 19029  004DDA  9A93               	bcf	3987,5,c	;volatile
 19030                           
 19031                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19032  004DDC  D000               	nop2		;2 cycle nop
 19033  004DDE  D000               	nop2		;2 cycle nop
 19034  004DE0  0012               	return		;funcret
 19035  004DE2                     __end_of_i2cLowSda:
 19036                           	opt stack 0
 19037                           tblptru	equ	0xFF8
 19038                           tblptrh	equ	0xFF7
 19039                           tblptrl	equ	0xFF6
 19040                           tablat	equ	0xFF5
 19041                           prodh	equ	0xFF4
 19042                           prodl	equ	0xFF3
 19043                           intcon	equ	0xFF2
 19044                           intcon2	equ	0xFF1
 19045                           intcon3	equ	0xFF0
 19046                           postinc0	equ	0xFEE
 19047                           wreg	equ	0xFE8
 19048                           postdec1	equ	0xFE5
 19049                           plusw1	equ	0xFE3
 19050                           fsr1l	equ	0xFE1
 19051                           indf2	equ	0xFDF
 19052                           postinc2	equ	0xFDE
 19053                           postdec2	equ	0xFDD
 19054                           plusw2	equ	0xFDB
 19055                           fsr2h	equ	0xFDA
 19056                           fsr2l	equ	0xFD9
 19057                           status	equ	0xFD8
 19058                           
 19059 ;; *************** function _i2cLowScl *****************
 19060 ;; Defined at:
 19061 ;;		line 111 in file "I2C_Soft.c"
 19062 ;; Parameters:    Size  Location     Type
 19063 ;;		None
 19064 ;; Auto vars:     Size  Location     Type
 19065 ;;		None
 19066 ;; Return value:  Size  Location     Type
 19067 ;;		None               void
 19068 ;; Registers used:
 19069 ;;		None
 19070 ;; Tracked objects:
 19071 ;;		On entry : 0/0
 19072 ;;		On exit  : 0/0
 19073 ;;		Unchanged: 0/0
 19074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19079 ;;Total ram usage:        0 bytes
 19080 ;; Hardware stack levels used:    1
 19081 ;; Hardware stack levels required when called:    3
 19082 ;; This function calls:
 19083 ;;		Nothing
 19084 ;; This function is called by:
 19085 ;;		_I2C_Read
 19086 ;;		_I2C_Write
 19087 ;;		_i2cNack
 19088 ;;		_i2cAck
 19089 ;;		_I2C_Start
 19090 ;;		_I2C_ReStart
 19091 ;;		_I2C_Stop
 19092 ;; This function uses a non-reentrant model
 19093 ;;
 19094                           
 19095                           	psect	text91
 19096  004DEC                     __ptext91:
 19097                           	opt stack 0
 19098  004DEC                     _i2cLowScl:
 19099                           	opt stack 23
 19100                           
 19101                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 19102                           
 19103                           ;incstack = 0
 19104  004DEC  9881               	bcf	3969,4,c	;volatile
 19105                           
 19106                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 19107  004DEE  9893               	bcf	3987,4,c	;volatile
 19108                           
 19109                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 19110  004DF0  D000               	nop2		;2 cycle nop
 19111  004DF2  0012               	return		;funcret
 19112  004DF4                     __end_of_i2cLowScl:
 19113                           	opt stack 0
 19114                           tblptru	equ	0xFF8
 19115                           tblptrh	equ	0xFF7
 19116                           tblptrl	equ	0xFF6
 19117                           tablat	equ	0xFF5
 19118                           prodh	equ	0xFF4
 19119                           prodl	equ	0xFF3
 19120                           intcon	equ	0xFF2
 19121                           intcon2	equ	0xFF1
 19122                           intcon3	equ	0xFF0
 19123                           postinc0	equ	0xFEE
 19124                           wreg	equ	0xFE8
 19125                           postdec1	equ	0xFE5
 19126                           plusw1	equ	0xFE3
 19127                           fsr1l	equ	0xFE1
 19128                           indf2	equ	0xFDF
 19129                           postinc2	equ	0xFDE
 19130                           postdec2	equ	0xFDD
 19131                           plusw2	equ	0xFDB
 19132                           fsr2h	equ	0xFDA
 19133                           fsr2l	equ	0xFD9
 19134                           status	equ	0xFD8
 19135                           
 19136 ;; *************** function _i2cHighSda *****************
 19137 ;; Defined at:
 19138 ;;		line 92 in file "I2C_Soft.c"
 19139 ;; Parameters:    Size  Location     Type
 19140 ;;		None
 19141 ;; Auto vars:     Size  Location     Type
 19142 ;;		None
 19143 ;; Return value:  Size  Location     Type
 19144 ;;		None               void
 19145 ;; Registers used:
 19146 ;;		None
 19147 ;; Tracked objects:
 19148 ;;		On entry : 0/0
 19149 ;;		On exit  : 0/0
 19150 ;;		Unchanged: 0/0
 19151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19156 ;;Total ram usage:        0 bytes
 19157 ;; Hardware stack levels used:    1
 19158 ;; Hardware stack levels required when called:    3
 19159 ;; This function calls:
 19160 ;;		Nothing
 19161 ;; This function is called by:
 19162 ;;		_I2C_Init
 19163 ;;		_I2C_Read
 19164 ;;		_I2C_Write
 19165 ;;		_i2cAck
 19166 ;;		_I2C_Start
 19167 ;;		_I2C_ReStart
 19168 ;;		_I2C_Stop
 19169 ;; This function uses a non-reentrant model
 19170 ;;
 19171                           
 19172                           	psect	text92
 19173  004DF4                     __ptext92:
 19174                           	opt stack 0
 19175  004DF4                     _i2cHighSda:
 19176                           	opt stack 23
 19177                           
 19178                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
 19179                           
 19180                           ;incstack = 0
 19181  004DF4  8A93               	bsf	3987,5,c	;volatile
 19182                           
 19183                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19184  004DF6  D000               	nop2		;2 cycle nop
 19185  004DF8  D000               	nop2		;2 cycle nop
 19186  004DFA  0012               	return		;funcret
 19187  004DFC                     __end_of_i2cHighSda:
 19188                           	opt stack 0
 19189                           tblptru	equ	0xFF8
 19190                           tblptrh	equ	0xFF7
 19191                           tblptrl	equ	0xFF6
 19192                           tablat	equ	0xFF5
 19193                           prodh	equ	0xFF4
 19194                           prodl	equ	0xFF3
 19195                           intcon	equ	0xFF2
 19196                           intcon2	equ	0xFF1
 19197                           intcon3	equ	0xFF0
 19198                           postinc0	equ	0xFEE
 19199                           wreg	equ	0xFE8
 19200                           postdec1	equ	0xFE5
 19201                           plusw1	equ	0xFE3
 19202                           fsr1l	equ	0xFE1
 19203                           indf2	equ	0xFDF
 19204                           postinc2	equ	0xFDE
 19205                           postdec2	equ	0xFDD
 19206                           plusw2	equ	0xFDB
 19207                           fsr2h	equ	0xFDA
 19208                           fsr2l	equ	0xFD9
 19209                           status	equ	0xFD8
 19210                           
 19211 ;; *************** function _i2cHighScl *****************
 19212 ;; Defined at:
 19213 ;;		line 105 in file "I2C_Soft.c"
 19214 ;; Parameters:    Size  Location     Type
 19215 ;;		None
 19216 ;; Auto vars:     Size  Location     Type
 19217 ;;		None
 19218 ;; Return value:  Size  Location     Type
 19219 ;;		None               void
 19220 ;; Registers used:
 19221 ;;		wreg
 19222 ;; Tracked objects:
 19223 ;;		On entry : 0/0
 19224 ;;		On exit  : 0/0
 19225 ;;		Unchanged: 0/0
 19226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19231 ;;Total ram usage:        0 bytes
 19232 ;; Hardware stack levels used:    1
 19233 ;; Hardware stack levels required when called:    3
 19234 ;; This function calls:
 19235 ;;		Nothing
 19236 ;; This function is called by:
 19237 ;;		_I2C_Init
 19238 ;;		_I2C_Read
 19239 ;;		_I2C_Write
 19240 ;;		_i2cNack
 19241 ;;		_i2cAck
 19242 ;;		_I2C_Start
 19243 ;;		_I2C_ReStart
 19244 ;;		_I2C_Stop
 19245 ;; This function uses a non-reentrant model
 19246 ;;
 19247                           
 19248                           	psect	text93
 19249  004DAC                     __ptext93:
 19250                           	opt stack 0
 19251  004DAC                     _i2cHighScl:
 19252                           	opt stack 23
 19253                           
 19254                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 19255                           
 19256                           ;incstack = 0
 19257  004DAC  8893               	bsf	3987,4,c	;volatile
 19258                           
 19259                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 19260  004DAE  0E06               	movlw	6
 19261  004DB0                     u9147:
 19262  004DB0  2EE8               	decfsz	wreg,f,c
 19263  004DB2  D7FE               	goto	u9147
 19264  004DB4  D000               	nop2		;nop
 19265  004DB6  0012               	return		;funcret
 19266  004DB8                     __end_of_i2cHighScl:
 19267                           	opt stack 0
 19268                           tblptru	equ	0xFF8
 19269                           tblptrh	equ	0xFF7
 19270                           tblptrl	equ	0xFF6
 19271                           tablat	equ	0xFF5
 19272                           prodh	equ	0xFF4
 19273                           prodl	equ	0xFF3
 19274                           intcon	equ	0xFF2
 19275                           intcon2	equ	0xFF1
 19276                           intcon3	equ	0xFF0
 19277                           postinc0	equ	0xFEE
 19278                           wreg	equ	0xFE8
 19279                           postdec1	equ	0xFE5
 19280                           plusw1	equ	0xFE3
 19281                           fsr1l	equ	0xFE1
 19282                           indf2	equ	0xFDF
 19283                           postinc2	equ	0xFDE
 19284                           postdec2	equ	0xFDD
 19285                           plusw2	equ	0xFDB
 19286                           fsr2h	equ	0xFDA
 19287                           fsr2l	equ	0xFD9
 19288                           status	equ	0xFD8
 19289                           
 19290 ;; *************** function _Do_Change_Fan_Timer_Mode_Plus *****************
 19291 ;; Defined at:
 19292 ;;		line 146 in file "Fan_Support.c"
 19293 ;; Parameters:    Size  Location     Type
 19294 ;;		None
 19295 ;; Auto vars:     Size  Location     Type
 19296 ;;		None
 19297 ;; Return value:  Size  Location     Type
 19298 ;;		None               void
 19299 ;; Registers used:
 19300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19301 ;; Tracked objects:
 19302 ;;		On entry : 0/0
 19303 ;;		On exit  : 0/0
 19304 ;;		Unchanged: 0/0
 19305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19310 ;;Total ram usage:        0 bytes
 19311 ;; Hardware stack levels used:    1
 19312 ;; Hardware stack levels required when called:    7
 19313 ;; This function calls:
 19314 ;;		_Do_Beep_Bad
 19315 ;;		_Do_Beep_Good
 19316 ;; This function is called by:
 19317 ;;		_main
 19318 ;; This function uses a non-reentrant model
 19319 ;;
 19320                           
 19321                           	psect	text94
 19322  0048FC                     __ptext94:
 19323                           	opt stack 0
 19324  0048FC                     _Do_Change_Fan_Timer_Mode_Plus:
 19325                           	opt stack 23
 19326                           
 19327                           ;Fan_Support.c: 148: if (FAN_TIMER_MODE < 3)
 19328                           
 19329                           ;incstack = 0
 19330  0048FC  0E03               	movlw	3
 19331  0048FE  6060               	cpfslt	_FAN_TIMER_MODE,c
 19332  004900  D00F               	goto	l9932
 19333                           
 19334                           ;Fan_Support.c: 149: {
 19335                           ;Fan_Support.c: 150: FAN_TIMER_MODE++;
 19336  004902  2A60               	incf	_FAN_TIMER_MODE,f,c
 19337                           
 19338                           ;Fan_Support.c: 151: FAN_TIMER_TIME= Timer_Table[FAN_TIMER_MODE];
 19339  004904  5060               	movf	_FAN_TIMER_MODE,w,c
 19340  004906  0D01               	mullw	1
 19341  004908  0E38               	movlw	low _Timer_Table
 19342  00490A  24F3               	addwf	prodl,w,c
 19343  00490C  6ED9               	movwf	fsr2l,c
 19344  00490E  0E01               	movlw	high _Timer_Table
 19345  004910  20F4               	addwfc	prodh,w,c
 19346  004912  6EDA               	movwf	fsr2h,c
 19347  004914  50DF               	movf	indf2,w,c
 19348  004916  0100               	movlb	0	; () banked
 19349  004918  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
 19350                           
 19351                           ; BSR set to: 0
 19352                           ;Fan_Support.c: 152: Do_Beep_Good();
 19353  00491A  ECD4  F025         	call	_Do_Beep_Good	;wreg free
 19354                           
 19355                           ;Fan_Support.c: 153: }
 19356  00491E  D003               	goto	l77
 19357  004920                     l9932:
 19358                           
 19359                           ;Fan_Support.c: 154: else Do_Beep_Bad();
 19360  004920  ECE2  F025         	call	_Do_Beep_Bad	;wreg free
 19361  004924  D000               	goto	l77
 19362  004926                     l77:
 19363  004926  0012               	return		;funcret
 19364  004928                     __end_of_Do_Change_Fan_Timer_Mode_Plus:
 19365                           	opt stack 0
 19366                           tblptru	equ	0xFF8
 19367                           tblptrh	equ	0xFF7
 19368                           tblptrl	equ	0xFF6
 19369                           tablat	equ	0xFF5
 19370                           prodh	equ	0xFF4
 19371                           prodl	equ	0xFF3
 19372                           intcon	equ	0xFF2
 19373                           intcon2	equ	0xFF1
 19374                           intcon3	equ	0xFF0
 19375                           postinc0	equ	0xFEE
 19376                           wreg	equ	0xFE8
 19377                           postdec1	equ	0xFE5
 19378                           plusw1	equ	0xFE3
 19379                           fsr1l	equ	0xFE1
 19380                           indf2	equ	0xFDF
 19381                           postinc2	equ	0xFDE
 19382                           postdec2	equ	0xFDD
 19383                           plusw2	equ	0xFDB
 19384                           fsr2h	equ	0xFDA
 19385                           fsr2l	equ	0xFD9
 19386                           status	equ	0xFD8
 19387                           
 19388 ;; *************** function _Do_Change_Fan_Timer_Mode_Minus *****************
 19389 ;; Defined at:
 19390 ;;		line 158 in file "Fan_Support.c"
 19391 ;; Parameters:    Size  Location     Type
 19392 ;;		None
 19393 ;; Auto vars:     Size  Location     Type
 19394 ;;		None
 19395 ;; Return value:  Size  Location     Type
 19396 ;;		None               void
 19397 ;; Registers used:
 19398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19399 ;; Tracked objects:
 19400 ;;		On entry : 0/0
 19401 ;;		On exit  : 0/0
 19402 ;;		Unchanged: 0/0
 19403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19408 ;;Total ram usage:        0 bytes
 19409 ;; Hardware stack levels used:    1
 19410 ;; Hardware stack levels required when called:    7
 19411 ;; This function calls:
 19412 ;;		_Do_Beep_Bad
 19413 ;;		_Do_Beep_Good
 19414 ;; This function is called by:
 19415 ;;		_main
 19416 ;; This function uses a non-reentrant model
 19417 ;;
 19418                           
 19419                           	psect	text95
 19420  004928                     __ptext95:
 19421                           	opt stack 0
 19422  004928                     _Do_Change_Fan_Timer_Mode_Minus:
 19423                           	opt stack 23
 19424                           
 19425                           ;Fan_Support.c: 160: if (FAN_TIMER_MODE == 0)
 19426                           
 19427                           ;incstack = 0
 19428  004928  5060               	movf	_FAN_TIMER_MODE,w,c
 19429  00492A  A4D8               	btfss	status,2,c
 19430  00492C  D003               	goto	l9938
 19431                           
 19432                           ;Fan_Support.c: 161: {
 19433                           ;Fan_Support.c: 162: Do_Beep_Bad();
 19434  00492E  ECE2  F025         	call	_Do_Beep_Bad	;wreg free
 19435                           
 19436                           ;Fan_Support.c: 163: }
 19437  004932  D00F               	goto	l82
 19438  004934                     l9938:
 19439                           
 19440                           ;Fan_Support.c: 164: else
 19441                           ;Fan_Support.c: 165: {
 19442                           ;Fan_Support.c: 166: FAN_TIMER_MODE--;
 19443  004934  0660               	decf	_FAN_TIMER_MODE,f,c
 19444                           
 19445                           ;Fan_Support.c: 167: FAN_TIMER_TIME= Timer_Table[FAN_TIMER_MODE];
 19446  004936  5060               	movf	_FAN_TIMER_MODE,w,c
 19447  004938  0D01               	mullw	1
 19448  00493A  0E38               	movlw	low _Timer_Table
 19449  00493C  24F3               	addwf	prodl,w,c
 19450  00493E  6ED9               	movwf	fsr2l,c
 19451  004940  0E01               	movlw	high _Timer_Table
 19452  004942  20F4               	addwfc	prodh,w,c
 19453  004944  6EDA               	movwf	fsr2h,c
 19454  004946  50DF               	movf	indf2,w,c
 19455  004948  0100               	movlb	0	; () banked
 19456  00494A  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
 19457                           
 19458                           ; BSR set to: 0
 19459                           ;Fan_Support.c: 168: Do_Beep_Good();
 19460  00494C  ECD4  F025         	call	_Do_Beep_Good	;wreg free
 19461  004950  D000               	goto	l82
 19462  004952                     l82:
 19463  004952  0012               	return		;funcret
 19464  004954                     __end_of_Do_Change_Fan_Timer_Mode_Minus:
 19465                           	opt stack 0
 19466                           tblptru	equ	0xFF8
 19467                           tblptrh	equ	0xFF7
 19468                           tblptrl	equ	0xFF6
 19469                           tablat	equ	0xFF5
 19470                           prodh	equ	0xFF4
 19471                           prodl	equ	0xFF3
 19472                           intcon	equ	0xFF2
 19473                           intcon2	equ	0xFF1
 19474                           intcon3	equ	0xFF0
 19475                           postinc0	equ	0xFEE
 19476                           wreg	equ	0xFE8
 19477                           postdec1	equ	0xFE5
 19478                           plusw1	equ	0xFE3
 19479                           fsr1l	equ	0xFE1
 19480                           indf2	equ	0xFDF
 19481                           postinc2	equ	0xFDE
 19482                           postdec2	equ	0xFDD
 19483                           plusw2	equ	0xFDB
 19484                           fsr2h	equ	0xFDA
 19485                           fsr2l	equ	0xFD9
 19486                           status	equ	0xFD8
 19487                           
 19488 ;; *************** function _Do_Beep_Good *****************
 19489 ;; Defined at:
 19490 ;;		line 77 in file "utils.c"
 19491 ;; Parameters:    Size  Location     Type
 19492 ;;		None
 19493 ;; Auto vars:     Size  Location     Type
 19494 ;;		None
 19495 ;; Return value:  Size  Location     Type
 19496 ;;		None               void
 19497 ;; Registers used:
 19498 ;;		wreg, status,2, status,0, cstack
 19499 ;; Tracked objects:
 19500 ;;		On entry : 0/0
 19501 ;;		On exit  : 0/0
 19502 ;;		Unchanged: 0/0
 19503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19508 ;;Total ram usage:        0 bytes
 19509 ;; Hardware stack levels used:    1
 19510 ;; Hardware stack levels required when called:    6
 19511 ;; This function calls:
 19512 ;;		_Activate_Buzzer_2KHz
 19513 ;;		_Deactivate_Buzzer
 19514 ;;		_Wait_Half_Sec
 19515 ;;		_do_update_pwm
 19516 ;; This function is called by:
 19517 ;;		_Do_Change_Fan_Timer_Mode_Plus
 19518 ;;		_Do_Change_Fan_Timer_Mode_Minus
 19519 ;;		_main
 19520 ;;		_Setup_Fan_Temp
 19521 ;;		_Do_Setup_Time
 19522 ;; This function uses a non-reentrant model
 19523 ;;
 19524                           
 19525                           	psect	text96
 19526  004BA8                     __ptext96:
 19527                           	opt stack 0
 19528  004BA8                     _Do_Beep_Good:
 19529                           	opt stack 23
 19530                           
 19531                           ;utils.c: 79: PORTDbits.RD3 = 1;
 19532                           
 19533                           ;incstack = 0
 19534  004BA8  8683               	bsf	3971,3,c	;volatile
 19535                           
 19536                           ;utils.c: 80: Activate_Buzzer_2KHz();
 19537  004BAA  EC95  F026         	call	_Activate_Buzzer_2KHz	;wreg free
 19538                           
 19539                           ;utils.c: 81: Wait_Half_Sec();
 19540  004BAE  ECFE  F025         	call	_Wait_Half_Sec	;wreg free
 19541                           
 19542                           ;utils.c: 82: PORTDbits.RD3 = 0;
 19543  004BB2  9683               	bcf	3971,3,c	;volatile
 19544                           
 19545                           ;utils.c: 83: Deactivate_Buzzer();
 19546  004BB4  ECFE  F026         	call	_Deactivate_Buzzer	;wreg free
 19547                           
 19548                           ;utils.c: 84: Wait_Half_Sec();
 19549  004BB8  ECFE  F025         	call	_Wait_Half_Sec	;wreg free
 19550                           
 19551                           ;utils.c: 85: do_update_pwm(duty_cycle);
 19552  004BBC  5064               	movf	_duty_cycle,w,c
 19553  004BBE  ECDF  F01C         	call	_do_update_pwm
 19554  004BC2  0012               	return		;funcret
 19555  004BC4                     __end_of_Do_Beep_Good:
 19556                           	opt stack 0
 19557                           tblptru	equ	0xFF8
 19558                           tblptrh	equ	0xFF7
 19559                           tblptrl	equ	0xFF6
 19560                           tablat	equ	0xFF5
 19561                           prodh	equ	0xFF4
 19562                           prodl	equ	0xFF3
 19563                           intcon	equ	0xFF2
 19564                           intcon2	equ	0xFF1
 19565                           intcon3	equ	0xFF0
 19566                           postinc0	equ	0xFEE
 19567                           wreg	equ	0xFE8
 19568                           postdec1	equ	0xFE5
 19569                           plusw1	equ	0xFE3
 19570                           fsr1l	equ	0xFE1
 19571                           indf2	equ	0xFDF
 19572                           postinc2	equ	0xFDE
 19573                           postdec2	equ	0xFDD
 19574                           plusw2	equ	0xFDB
 19575                           fsr2h	equ	0xFDA
 19576                           fsr2l	equ	0xFD9
 19577                           status	equ	0xFD8
 19578                           
 19579 ;; *************** function _Activate_Buzzer_2KHz *****************
 19580 ;; Defined at:
 19581 ;;		line 120 in file "utils.c"
 19582 ;; Parameters:    Size  Location     Type
 19583 ;;		None
 19584 ;; Auto vars:     Size  Location     Type
 19585 ;;		None
 19586 ;; Return value:  Size  Location     Type
 19587 ;;		None               void
 19588 ;; Registers used:
 19589 ;;		wreg, status,2
 19590 ;; Tracked objects:
 19591 ;;		On entry : 0/0
 19592 ;;		On exit  : 0/0
 19593 ;;		Unchanged: 0/0
 19594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19599 ;;Total ram usage:        0 bytes
 19600 ;; Hardware stack levels used:    1
 19601 ;; Hardware stack levels required when called:    3
 19602 ;; This function calls:
 19603 ;;		Nothing
 19604 ;; This function is called by:
 19605 ;;		_Do_Beep_Good
 19606 ;; This function uses a non-reentrant model
 19607 ;;
 19608                           
 19609                           	psect	text97
 19610  004D2A                     __ptext97:
 19611                           	opt stack 0
 19612  004D2A                     _Activate_Buzzer_2KHz:
 19613                           	opt stack 25
 19614                           
 19615                           ;utils.c: 122: PR2 = 0b11111001 ;
 19616                           
 19617                           ;incstack = 0
 19618  004D2A  0EF9               	movlw	249
 19619  004D2C  6ECB               	movwf	4043,c	;volatile
 19620                           
 19621                           ;utils.c: 123: T2CON = 0b00000101 ;
 19622  004D2E  0E05               	movlw	5
 19623  004D30  6ECA               	movwf	4042,c	;volatile
 19624                           
 19625                           ;utils.c: 124: CCPR2L = 0b01111100 ;
 19626  004D32  0E7C               	movlw	124
 19627  004D34  6EBB               	movwf	4027,c	;volatile
 19628                           
 19629                           ;utils.c: 125: CCP2CON = 0b00111100 ;
 19630  004D36  0E3C               	movlw	60
 19631  004D38  6EBA               	movwf	4026,c	;volatile
 19632  004D3A  0012               	return		;funcret
 19633  004D3C                     __end_of_Activate_Buzzer_2KHz:
 19634                           	opt stack 0
 19635                           tblptru	equ	0xFF8
 19636                           tblptrh	equ	0xFF7
 19637                           tblptrl	equ	0xFF6
 19638                           tablat	equ	0xFF5
 19639                           prodh	equ	0xFF4
 19640                           prodl	equ	0xFF3
 19641                           intcon	equ	0xFF2
 19642                           intcon2	equ	0xFF1
 19643                           intcon3	equ	0xFF0
 19644                           postinc0	equ	0xFEE
 19645                           wreg	equ	0xFE8
 19646                           postdec1	equ	0xFE5
 19647                           plusw1	equ	0xFE3
 19648                           fsr1l	equ	0xFE1
 19649                           indf2	equ	0xFDF
 19650                           postinc2	equ	0xFDE
 19651                           postdec2	equ	0xFDD
 19652                           plusw2	equ	0xFDB
 19653                           fsr2h	equ	0xFDA
 19654                           fsr2l	equ	0xFD9
 19655                           status	equ	0xFD8
 19656                           
 19657 ;; *************** function _Do_Beep_Bad *****************
 19658 ;; Defined at:
 19659 ;;		line 88 in file "utils.c"
 19660 ;; Parameters:    Size  Location     Type
 19661 ;;		None
 19662 ;; Auto vars:     Size  Location     Type
 19663 ;;		None
 19664 ;; Return value:  Size  Location     Type
 19665 ;;		None               void
 19666 ;; Registers used:
 19667 ;;		wreg, status,2, status,0, cstack
 19668 ;; Tracked objects:
 19669 ;;		On entry : 0/0
 19670 ;;		On exit  : 0/0
 19671 ;;		Unchanged: 0/0
 19672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19677 ;;Total ram usage:        0 bytes
 19678 ;; Hardware stack levels used:    1
 19679 ;; Hardware stack levels required when called:    6
 19680 ;; This function calls:
 19681 ;;		_Activate_Buzzer_500Hz
 19682 ;;		_Deactivate_Buzzer
 19683 ;;		_Wait_Half_Sec
 19684 ;;		_do_update_pwm
 19685 ;; This function is called by:
 19686 ;;		_Do_Change_Fan_Timer_Mode_Plus
 19687 ;;		_Do_Change_Fan_Timer_Mode_Minus
 19688 ;;		_main
 19689 ;;		_Setup_Fan_Temp
 19690 ;;		_Do_Setup_Time
 19691 ;; This function uses a non-reentrant model
 19692 ;;
 19693                           
 19694                           	psect	text98
 19695  004BC4                     __ptext98:
 19696                           	opt stack 0
 19697  004BC4                     _Do_Beep_Bad:
 19698                           	opt stack 23
 19699                           
 19700                           ;utils.c: 90: PORTDbits.RD3 = 1;
 19701                           
 19702                           ;incstack = 0
 19703  004BC4  8683               	bsf	3971,3,c	;volatile
 19704                           
 19705                           ;utils.c: 91: Activate_Buzzer_500Hz();
 19706  004BC6  EC9E  F026         	call	_Activate_Buzzer_500Hz	;wreg free
 19707                           
 19708                           ;utils.c: 92: Wait_Half_Sec();
 19709  004BCA  ECFE  F025         	call	_Wait_Half_Sec	;wreg free
 19710                           
 19711                           ;utils.c: 93: PORTDbits.RD3 = 0;
 19712  004BCE  9683               	bcf	3971,3,c	;volatile
 19713                           
 19714                           ;utils.c: 94: Deactivate_Buzzer();
 19715  004BD0  ECFE  F026         	call	_Deactivate_Buzzer	;wreg free
 19716                           
 19717                           ;utils.c: 95: Wait_Half_Sec();
 19718  004BD4  ECFE  F025         	call	_Wait_Half_Sec	;wreg free
 19719                           
 19720                           ;utils.c: 96: do_update_pwm(duty_cycle);
 19721  004BD8  5064               	movf	_duty_cycle,w,c
 19722  004BDA  ECDF  F01C         	call	_do_update_pwm
 19723  004BDE  0012               	return		;funcret
 19724  004BE0                     __end_of_Do_Beep_Bad:
 19725                           	opt stack 0
 19726                           tblptru	equ	0xFF8
 19727                           tblptrh	equ	0xFF7
 19728                           tblptrl	equ	0xFF6
 19729                           tablat	equ	0xFF5
 19730                           prodh	equ	0xFF4
 19731                           prodl	equ	0xFF3
 19732                           intcon	equ	0xFF2
 19733                           intcon2	equ	0xFF1
 19734                           intcon3	equ	0xFF0
 19735                           postinc0	equ	0xFEE
 19736                           wreg	equ	0xFE8
 19737                           postdec1	equ	0xFE5
 19738                           plusw1	equ	0xFE3
 19739                           fsr1l	equ	0xFE1
 19740                           indf2	equ	0xFDF
 19741                           postinc2	equ	0xFDE
 19742                           postdec2	equ	0xFDD
 19743                           plusw2	equ	0xFDB
 19744                           fsr2h	equ	0xFDA
 19745                           fsr2l	equ	0xFD9
 19746                           status	equ	0xFD8
 19747                           
 19748 ;; *************** function _Activate_Buzzer_500Hz *****************
 19749 ;; Defined at:
 19750 ;;		line 112 in file "utils.c"
 19751 ;; Parameters:    Size  Location     Type
 19752 ;;		None
 19753 ;; Auto vars:     Size  Location     Type
 19754 ;;		None
 19755 ;; Return value:  Size  Location     Type
 19756 ;;		None               void
 19757 ;; Registers used:
 19758 ;;		wreg, status,2
 19759 ;; Tracked objects:
 19760 ;;		On entry : 0/0
 19761 ;;		On exit  : 0/0
 19762 ;;		Unchanged: 0/0
 19763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19768 ;;Total ram usage:        0 bytes
 19769 ;; Hardware stack levels used:    1
 19770 ;; Hardware stack levels required when called:    3
 19771 ;; This function calls:
 19772 ;;		Nothing
 19773 ;; This function is called by:
 19774 ;;		_Do_Beep_Bad
 19775 ;; This function uses a non-reentrant model
 19776 ;;
 19777                           
 19778                           	psect	text99
 19779  004D3C                     __ptext99:
 19780                           	opt stack 0
 19781  004D3C                     _Activate_Buzzer_500Hz:
 19782                           	opt stack 25
 19783                           
 19784                           ;utils.c: 114: PR2 = 0b11111001 ;
 19785                           
 19786                           ;incstack = 0
 19787  004D3C  0EF9               	movlw	249
 19788  004D3E  6ECB               	movwf	4043,c	;volatile
 19789                           
 19790                           ;utils.c: 115: T2CON = 0b00000111 ;
 19791  004D40  0E07               	movlw	7
 19792  004D42  6ECA               	movwf	4042,c	;volatile
 19793                           
 19794                           ;utils.c: 116: CCPR2L = 0b01111100 ;
 19795  004D44  0E7C               	movlw	124
 19796  004D46  6EBB               	movwf	4027,c	;volatile
 19797                           
 19798                           ;utils.c: 117: CCP2CON = 0b00111100 ;
 19799  004D48  0E3C               	movlw	60
 19800  004D4A  6EBA               	movwf	4026,c	;volatile
 19801  004D4C  0012               	return		;funcret
 19802  004D4E                     __end_of_Activate_Buzzer_500Hz:
 19803                           	opt stack 0
 19804                           tblptru	equ	0xFF8
 19805                           tblptrh	equ	0xFF7
 19806                           tblptrl	equ	0xFF6
 19807                           tablat	equ	0xFF5
 19808                           prodh	equ	0xFF4
 19809                           prodl	equ	0xFF3
 19810                           intcon	equ	0xFF2
 19811                           intcon2	equ	0xFF1
 19812                           intcon3	equ	0xFF0
 19813                           postinc0	equ	0xFEE
 19814                           wreg	equ	0xFE8
 19815                           postdec1	equ	0xFE5
 19816                           plusw1	equ	0xFE3
 19817                           fsr1l	equ	0xFE1
 19818                           indf2	equ	0xFDF
 19819                           postinc2	equ	0xFDE
 19820                           postdec2	equ	0xFDD
 19821                           plusw2	equ	0xFDB
 19822                           fsr2h	equ	0xFDA
 19823                           fsr2l	equ	0xFD9
 19824                           status	equ	0xFD8
 19825                           
 19826 ;; *************** function _Decrease_Duty_Cycle *****************
 19827 ;; Defined at:
 19828 ;;		line 129 in file "Fan_Support.c"
 19829 ;; Parameters:    Size  Location     Type
 19830 ;;		None
 19831 ;; Auto vars:     Size  Location     Type
 19832 ;;		None
 19833 ;; Return value:  Size  Location     Type
 19834 ;;		None               void
 19835 ;; Registers used:
 19836 ;;		wreg, status,2, status,0, cstack
 19837 ;; Tracked objects:
 19838 ;;		On entry : 0/0
 19839 ;;		On exit  : 0/0
 19840 ;;		Unchanged: 0/0
 19841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19846 ;;Total ram usage:        0 bytes
 19847 ;; Hardware stack levels used:    1
 19848 ;; Hardware stack levels required when called:    7
 19849 ;; This function calls:
 19850 ;;		_Do_Beep
 19851 ;;		_do_update_pwm
 19852 ;; This function is called by:
 19853 ;;		_main
 19854 ;; This function uses a non-reentrant model
 19855 ;;
 19856                           
 19857                           	psect	text100
 19858  0049F8                     __ptext100:
 19859                           	opt stack 0
 19860  0049F8                     _Decrease_Duty_Cycle:
 19861                           	opt stack 23
 19862                           
 19863                           ;Fan_Support.c: 133: if (duty_cycle == 0)
 19864                           
 19865                           ;incstack = 0
 19866  0049F8  5064               	movf	_duty_cycle,w,c
 19867  0049FA  A4D8               	btfss	status,2,c
 19868  0049FC  D008               	goto	l9920
 19869                           
 19870                           ;Fan_Support.c: 134: {
 19871                           ;Fan_Support.c: 135: Do_Beep();
 19872  0049FE  ECF0  F025         	call	_Do_Beep	;wreg free
 19873                           
 19874                           ;Fan_Support.c: 136: Do_Beep();
 19875  004A02  ECF0  F025         	call	_Do_Beep	;wreg free
 19876                           
 19877                           ;Fan_Support.c: 137: do_update_pwm(duty_cycle);
 19878  004A06  5064               	movf	_duty_cycle,w,c
 19879  004A08  ECDF  F01C         	call	_do_update_pwm
 19880                           
 19881                           ;Fan_Support.c: 138: }
 19882  004A0C  D007               	goto	l72
 19883  004A0E                     l9920:
 19884                           
 19885                           ;Fan_Support.c: 139: else
 19886                           ;Fan_Support.c: 140: {
 19887                           ;Fan_Support.c: 141: duty_cycle = duty_cycle - 5;
 19888  004A0E  5064               	movf	_duty_cycle,w,c
 19889  004A10  0FFB               	addlw	251
 19890  004A12  6E64               	movwf	_duty_cycle,c
 19891                           
 19892                           ;Fan_Support.c: 142: do_update_pwm(duty_cycle);
 19893  004A14  5064               	movf	_duty_cycle,w,c
 19894  004A16  ECDF  F01C         	call	_do_update_pwm
 19895  004A1A  D000               	goto	l72
 19896  004A1C                     l72:
 19897  004A1C  0012               	return		;funcret
 19898  004A1E                     __end_of_Decrease_Duty_Cycle:
 19899                           	opt stack 0
 19900                           tblptru	equ	0xFF8
 19901                           tblptrh	equ	0xFF7
 19902                           tblptrl	equ	0xFF6
 19903                           tablat	equ	0xFF5
 19904                           prodh	equ	0xFF4
 19905                           prodl	equ	0xFF3
 19906                           intcon	equ	0xFF2
 19907                           intcon2	equ	0xFF1
 19908                           intcon3	equ	0xFF0
 19909                           postinc0	equ	0xFEE
 19910                           wreg	equ	0xFE8
 19911                           postdec1	equ	0xFE5
 19912                           plusw1	equ	0xFE3
 19913                           fsr1l	equ	0xFE1
 19914                           indf2	equ	0xFDF
 19915                           postinc2	equ	0xFDE
 19916                           postdec2	equ	0xFDD
 19917                           plusw2	equ	0xFDB
 19918                           fsr2h	equ	0xFDA
 19919                           fsr2l	equ	0xFD9
 19920                           status	equ	0xFD8
 19921                           
 19922 ;; *************** function _Do_Beep *****************
 19923 ;; Defined at:
 19924 ;;		line 66 in file "utils.c"
 19925 ;; Parameters:    Size  Location     Type
 19926 ;;		None
 19927 ;; Auto vars:     Size  Location     Type
 19928 ;;		None
 19929 ;; Return value:  Size  Location     Type
 19930 ;;		None               void
 19931 ;; Registers used:
 19932 ;;		wreg, status,2, status,0, cstack
 19933 ;; Tracked objects:
 19934 ;;		On entry : 0/0
 19935 ;;		On exit  : 0/0
 19936 ;;		Unchanged: 0/0
 19937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19942 ;;Total ram usage:        0 bytes
 19943 ;; Hardware stack levels used:    1
 19944 ;; Hardware stack levels required when called:    6
 19945 ;; This function calls:
 19946 ;;		_Activate_Buzzer
 19947 ;;		_Deactivate_Buzzer
 19948 ;;		_Wait_Half_Sec
 19949 ;;		_do_update_pwm
 19950 ;; This function is called by:
 19951 ;;		_Increase_Duty_Cycle
 19952 ;;		_Decrease_Duty_Cycle
 19953 ;; This function uses a non-reentrant model
 19954 ;;
 19955                           
 19956                           	psect	text101
 19957  004BE0                     __ptext101:
 19958                           	opt stack 0
 19959  004BE0                     _Do_Beep:
 19960                           	opt stack 23
 19961                           
 19962                           ;utils.c: 68: PORTDbits.RD3 = 1;
 19963                           
 19964                           ;incstack = 0
 19965  004BE0  8683               	bsf	3971,3,c	;volatile
 19966                           
 19967                           ;utils.c: 69: Activate_Buzzer();
 19968  004BE2  ECA7  F026         	call	_Activate_Buzzer	;wreg free
 19969                           
 19970                           ;utils.c: 70: Wait_Half_Sec();
 19971  004BE6  ECFE  F025         	call	_Wait_Half_Sec	;wreg free
 19972                           
 19973                           ;utils.c: 71: PORTDbits.RD3 = 0;
 19974  004BEA  9683               	bcf	3971,3,c	;volatile
 19975                           
 19976                           ;utils.c: 72: Deactivate_Buzzer();
 19977  004BEC  ECFE  F026         	call	_Deactivate_Buzzer	;wreg free
 19978                           
 19979                           ;utils.c: 73: Wait_Half_Sec();
 19980  004BF0  ECFE  F025         	call	_Wait_Half_Sec	;wreg free
 19981                           
 19982                           ;utils.c: 74: do_update_pwm(duty_cycle);
 19983  004BF4  5064               	movf	_duty_cycle,w,c
 19984  004BF6  ECDF  F01C         	call	_do_update_pwm
 19985  004BFA  0012               	return		;funcret
 19986  004BFC                     __end_of_Do_Beep:
 19987                           	opt stack 0
 19988                           tblptru	equ	0xFF8
 19989                           tblptrh	equ	0xFF7
 19990                           tblptrl	equ	0xFF6
 19991                           tablat	equ	0xFF5
 19992                           prodh	equ	0xFF4
 19993                           prodl	equ	0xFF3
 19994                           intcon	equ	0xFF2
 19995                           intcon2	equ	0xFF1
 19996                           intcon3	equ	0xFF0
 19997                           postinc0	equ	0xFEE
 19998                           wreg	equ	0xFE8
 19999                           postdec1	equ	0xFE5
 20000                           plusw1	equ	0xFE3
 20001                           fsr1l	equ	0xFE1
 20002                           indf2	equ	0xFDF
 20003                           postinc2	equ	0xFDE
 20004                           postdec2	equ	0xFDD
 20005                           plusw2	equ	0xFDB
 20006                           fsr2h	equ	0xFDA
 20007                           fsr2l	equ	0xFD9
 20008                           status	equ	0xFD8
 20009                           
 20010 ;; *************** function _do_update_pwm *****************
 20011 ;; Defined at:
 20012 ;;		line 142 in file "utils.c"
 20013 ;; Parameters:    Size  Location     Type
 20014 ;;  duty_cycle      1    wreg     unsigned char 
 20015 ;; Auto vars:     Size  Location     Type
 20016 ;;  duty_cycle      1   66[COMRAM] unsigned char 
 20017 ;;  dc_f            3   63[COMRAM] float 
 20018 ;;  dc_I            2   67[COMRAM] int 
 20019 ;; Return value:  Size  Location     Type
 20020 ;;		None               void
 20021 ;; Registers used:
 20022 ;;		wreg, status,2, status,0, cstack
 20023 ;; Tracked objects:
 20024 ;;		On entry : 0/0
 20025 ;;		On exit  : 0/0
 20026 ;;		Unchanged: 0/0
 20027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20029 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20030 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20031 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20032 ;;Total ram usage:        9 bytes
 20033 ;; Hardware stack levels used:    1
 20034 ;; Hardware stack levels required when called:    5
 20035 ;; This function calls:
 20036 ;;		___ftdiv
 20037 ;;		___ftmul
 20038 ;;		___fttol
 20039 ;;		___lbtoft
 20040 ;; This function is called by:
 20041 ;;		_Monitor_Fan
 20042 ;;		_Turn_On_Fan
 20043 ;;		_Increase_Duty_Cycle
 20044 ;;		_Decrease_Duty_Cycle
 20045 ;;		_Do_Beep
 20046 ;;		_Do_Beep_Good
 20047 ;;		_Do_Beep_Bad
 20048 ;; This function uses a non-reentrant model
 20049 ;;
 20050                           
 20051                           	psect	text102
 20052  0039BE                     __ptext102:
 20053                           	opt stack 0
 20054  0039BE                     _do_update_pwm:
 20055                           	opt stack 23
 20056                           
 20057                           ;incstack = 0
 20058                           ;do_update_pwm@duty_cycle stored from wreg
 20059  0039BE  6E43               	movwf	do_update_pwm@duty_cycle,c
 20060                           
 20061                           ;utils.c: 144: float dc_f;
 20062                           ;utils.c: 145: int dc_I;
 20063                           ;utils.c: 146: PR2 = 0b00000100 ;
 20064  0039C0  0E04               	movlw	4
 20065  0039C2  6ECB               	movwf	4043,c	;volatile
 20066                           
 20067                           ;utils.c: 147: T2CON = 0b00000111 ;
 20068  0039C4  0E07               	movlw	7
 20069  0039C6  6ECA               	movwf	4042,c	;volatile
 20070                           
 20071                           ;utils.c: 148: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 20072  0039C8  0E00               	movlw	0
 20073  0039CA  6E22               	movwf	___ftmul@f2,c
 20074  0039CC  0E80               	movlw	128
 20075  0039CE  6E23               	movwf	___ftmul@f2+1,c
 20076  0039D0  0E40               	movlw	64
 20077  0039D2  6E24               	movwf	___ftmul@f2+2,c
 20078  0039D4  5043               	movf	do_update_pwm@duty_cycle,w,c
 20079  0039D6  EC0F  F025         	call	___lbtoft
 20080  0039DA  C019  F01F         	movff	?___lbtoft,___ftmul@f1
 20081  0039DE  C01A  F020         	movff	?___lbtoft+1,___ftmul@f1+1
 20082  0039E2  C01B  F021         	movff	?___lbtoft+2,___ftmul@f1+2
 20083  0039E6  ECF4  F018         	call	___ftmul	;wreg free
 20084  0039EA  C01F  F02E         	movff	?___ftmul,___ftdiv@f1
 20085  0039EE  C020  F02F         	movff	?___ftmul+1,___ftdiv@f1+1
 20086  0039F2  C021  F030         	movff	?___ftmul+2,___ftdiv@f1+2
 20087  0039F6  0E00               	movlw	0
 20088  0039F8  6E31               	movwf	___ftdiv@f2,c
 20089  0039FA  0EA0               	movlw	160
 20090  0039FC  6E32               	movwf	___ftdiv@f2+1,c
 20091  0039FE  0E41               	movlw	65
 20092  003A00  6E33               	movwf	___ftdiv@f2+2,c
 20093  003A02  EC42  F01B         	call	___ftdiv	;wreg free
 20094  003A06  C02E  F040         	movff	?___ftdiv,do_update_pwm@dc_f
 20095  003A0A  C02F  F041         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 20096  003A0E  C030  F042         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 20097                           
 20098                           ;utils.c: 149: dc_I = (int) dc_f;
 20099  003A12  C040  F02E         	movff	do_update_pwm@dc_f,___fttol@f1
 20100  003A16  C041  F02F         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 20101  003A1A  C042  F030         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 20102  003A1E  EC5E  F01A         	call	___fttol	;wreg free
 20103  003A22  C02E  F044         	movff	?___fttol,do_update_pwm@dc_I
 20104  003A26  C02F  F045         	movff	?___fttol+1,do_update_pwm@dc_I+1
 20105                           
 20106                           ;utils.c: 150: if (dc_I > duty_cycle) dc_I++;
 20107  003A2A  5043               	movf	do_update_pwm@duty_cycle,w,c
 20108  003A2C  6E3D               	movwf	??_do_update_pwm& (0+255),c
 20109  003A2E  6A3E               	clrf	(??_do_update_pwm+1)& (0+255),c
 20110  003A30  5044               	movf	do_update_pwm@dc_I,w,c
 20111  003A32  5C3D               	subwf	??_do_update_pwm,w,c
 20112  003A34  503E               	movf	??_do_update_pwm+1,w,c
 20113  003A36  0A80               	xorlw	128
 20114  003A38  6E3F               	movwf	(??_do_update_pwm+2)& (0+255),c
 20115  003A3A  5045               	movf	do_update_pwm@dc_I+1,w,c
 20116  003A3C  0A80               	xorlw	128
 20117  003A3E  583F               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 20118  003A40  B0D8               	btfsc	status,0,c
 20119  003A42  D003               	goto	l9474
 20120  003A44  4A44               	infsnz	do_update_pwm@dc_I,f,c
 20121  003A46  2A45               	incf	do_update_pwm@dc_I+1,f,c
 20122  003A48  D000               	goto	l9474
 20123  003A4A                     l9474:
 20124                           
 20125                           ;utils.c: 151: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 20126  003A4A  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 20127  003A4E  0E03               	movlw	3
 20128  003A50  163D               	andwf	??_do_update_pwm,f,c
 20129  003A52  383D               	swapf	??_do_update_pwm,w,c
 20130  003A54  0BF0               	andlw	240
 20131  003A56  090C               	iorlw	12
 20132  003A58  6EBD               	movwf	4029,c	;volatile
 20133                           
 20134                           ;utils.c: 152: CCPR1L = (dc_I) >> 2;
 20135  003A5A  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 20136  003A5E  C045  F03E         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 20137  003A62  343E               	rlcf	??_do_update_pwm+1,w,c
 20138  003A64  323E               	rrcf	??_do_update_pwm+1,f,c
 20139  003A66  323D               	rrcf	??_do_update_pwm,f,c
 20140  003A68  343E               	rlcf	??_do_update_pwm+1,w,c
 20141  003A6A  323E               	rrcf	??_do_update_pwm+1,f,c
 20142  003A6C  323D               	rrcf	??_do_update_pwm,f,c
 20143  003A6E  503D               	movf	??_do_update_pwm,w,c
 20144  003A70  6EBE               	movwf	4030,c	;volatile
 20145  003A72  0012               	return		;funcret
 20146  003A74                     __end_of_do_update_pwm:
 20147                           	opt stack 0
 20148                           tblptru	equ	0xFF8
 20149                           tblptrh	equ	0xFF7
 20150                           tblptrl	equ	0xFF6
 20151                           tablat	equ	0xFF5
 20152                           prodh	equ	0xFF4
 20153                           prodl	equ	0xFF3
 20154                           intcon	equ	0xFF2
 20155                           intcon2	equ	0xFF1
 20156                           intcon3	equ	0xFF0
 20157                           postinc0	equ	0xFEE
 20158                           wreg	equ	0xFE8
 20159                           postdec1	equ	0xFE5
 20160                           plusw1	equ	0xFE3
 20161                           fsr1l	equ	0xFE1
 20162                           indf2	equ	0xFDF
 20163                           postinc2	equ	0xFDE
 20164                           postdec2	equ	0xFDD
 20165                           plusw2	equ	0xFDB
 20166                           fsr2h	equ	0xFDA
 20167                           fsr2l	equ	0xFD9
 20168                           status	equ	0xFD8
 20169                           
 20170 ;; *************** function ___lbtoft *****************
 20171 ;; Defined at:
 20172 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 20173 ;; Parameters:    Size  Location     Type
 20174 ;;  c               1    wreg     unsigned char 
 20175 ;; Auto vars:     Size  Location     Type
 20176 ;;  c               1   27[COMRAM] unsigned char 
 20177 ;; Return value:  Size  Location     Type
 20178 ;;                  3   24[COMRAM] float 
 20179 ;; Registers used:
 20180 ;;		wreg, status,2, status,0, cstack
 20181 ;; Tracked objects:
 20182 ;;		On entry : 0/0
 20183 ;;		On exit  : 0/0
 20184 ;;		Unchanged: 0/0
 20185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20186 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20187 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20189 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20190 ;;Total ram usage:        4 bytes
 20191 ;; Hardware stack levels used:    1
 20192 ;; Hardware stack levels required when called:    4
 20193 ;; This function calls:
 20194 ;;		___ftpack
 20195 ;; This function is called by:
 20196 ;;		_do_update_pwm
 20197 ;; This function uses a non-reentrant model
 20198 ;;
 20199                           
 20200                           	psect	text103
 20201  004A1E                     __ptext103:
 20202                           	opt stack 0
 20203  004A1E                     ___lbtoft:
 20204                           	opt stack 23
 20205                           
 20206                           ;incstack = 0
 20207                           ;___lbtoft@c stored from wreg
 20208  004A1E  6E1C               	movwf	___lbtoft@c,c
 20209  004A20  501C               	movf	___lbtoft@c,w,c
 20210  004A22  6E11               	movwf	___ftpack@arg,c
 20211  004A24  6A12               	clrf	___ftpack@arg+1,c
 20212  004A26  6A13               	clrf	___ftpack@arg+2,c
 20213  004A28  0E8E               	movlw	142
 20214  004A2A  6E14               	movwf	___ftpack@exp,c
 20215  004A2C  0E00               	movlw	0
 20216  004A2E  6E15               	movwf	___ftpack@sign,c
 20217  004A30  EC21  F01C         	call	___ftpack	;wreg free
 20218  004A34  C011  F019         	movff	?___ftpack,?___lbtoft
 20219  004A38  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 20220  004A3C  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 20221  004A40  D000               	goto	l1993
 20222  004A42                     l1993:
 20223  004A42  0012               	return		;funcret
 20224  004A44                     __end_of___lbtoft:
 20225                           	opt stack 0
 20226                           tblptru	equ	0xFF8
 20227                           tblptrh	equ	0xFF7
 20228                           tblptrl	equ	0xFF6
 20229                           tablat	equ	0xFF5
 20230                           prodh	equ	0xFF4
 20231                           prodl	equ	0xFF3
 20232                           intcon	equ	0xFF2
 20233                           intcon2	equ	0xFF1
 20234                           intcon3	equ	0xFF0
 20235                           postinc0	equ	0xFEE
 20236                           wreg	equ	0xFE8
 20237                           postdec1	equ	0xFE5
 20238                           plusw1	equ	0xFE3
 20239                           fsr1l	equ	0xFE1
 20240                           indf2	equ	0xFDF
 20241                           postinc2	equ	0xFDE
 20242                           postdec2	equ	0xFDD
 20243                           plusw2	equ	0xFDB
 20244                           fsr2h	equ	0xFDA
 20245                           fsr2l	equ	0xFD9
 20246                           status	equ	0xFD8
 20247                           
 20248 ;; *************** function ___fttol *****************
 20249 ;; Defined at:
 20250 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 20251 ;; Parameters:    Size  Location     Type
 20252 ;;  f1              3   45[COMRAM] float 
 20253 ;; Auto vars:     Size  Location     Type
 20254 ;;  lval            4   55[COMRAM] unsigned long 
 20255 ;;  exp1            1   59[COMRAM] unsigned char 
 20256 ;;  sign1           1   54[COMRAM] unsigned char 
 20257 ;; Return value:  Size  Location     Type
 20258 ;;                  4   45[COMRAM] long 
 20259 ;; Registers used:
 20260 ;;		wreg, status,2, status,0
 20261 ;; Tracked objects:
 20262 ;;		On entry : 0/0
 20263 ;;		On exit  : 0/0
 20264 ;;		Unchanged: 0/0
 20265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20267 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20268 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20269 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20270 ;;Total ram usage:       15 bytes
 20271 ;; Hardware stack levels used:    1
 20272 ;; Hardware stack levels required when called:    3
 20273 ;; This function calls:
 20274 ;;		Nothing
 20275 ;; This function is called by:
 20276 ;;		_do_update_pwm
 20277 ;;		_Update_Screen
 20278 ;;		_printf
 20279 ;; This function uses a non-reentrant model
 20280 ;;
 20281                           
 20282                           	psect	text104
 20283  0034BC                     __ptext104:
 20284                           	opt stack 0
 20285  0034BC                     ___fttol:
 20286                           	opt stack 26
 20287                           
 20288                           ;incstack = 0
 20289  0034BC  C030  F032         	movff	___fttol@f1+2,??___fttol
 20290  0034C0  6A33               	clrf	(??___fttol+1)& (0+255),c
 20291  0034C2  6A34               	clrf	(??___fttol+2)& (0+255),c
 20292  0034C4  342F               	rlcf	___fttol@f1+1,w,c
 20293  0034C6  3632               	rlcf	??___fttol& (0+255),f,c
 20294  0034C8  E301               	bnc	u7581
 20295  0034CA  8033               	bsf	(??___fttol+1)& (0+255),0,c
 20296  0034CC                     u7581:
 20297  0034CC  5032               	movf	??___fttol,w,c
 20298  0034CE  6E3C               	movwf	___fttol@exp1,c
 20299  0034D0  503C               	movf	___fttol@exp1,w,c
 20300  0034D2  A4D8               	btfss	status,2,c
 20301  0034D4  D002               	goto	l8972
 20302  0034D6  D039               	goto	l8996
 20303  0034D8  D063               	goto	l1952
 20304  0034DA                     l8972:
 20305  0034DA  0E17               	movlw	23
 20306  0034DC  6E32               	movwf	??___fttol& (0+255),c
 20307  0034DE  C02E  F033         	movff	___fttol@f1,??___fttol+1
 20308  0034E2  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
 20309  0034E6  C030  F035         	movff	___fttol@f1+2,??___fttol+3
 20310  0034EA  2832               	incf	??___fttol,w,c
 20311  0034EC  6E36               	movwf	(??___fttol+4)& (0+255),c
 20312  0034EE  D004               	goto	u7600
 20313  0034F0                     u7605:
 20314  0034F0  90D8               	bcf	status,0,c
 20315  0034F2  3235               	rrcf	??___fttol+3,f,c
 20316  0034F4  3234               	rrcf	??___fttol+2,f,c
 20317  0034F6  3233               	rrcf	??___fttol+1,f,c
 20318  0034F8                     u7600:
 20319  0034F8  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
 20320  0034FA  D7FA               	goto	u7605
 20321  0034FC  5033               	movf	??___fttol+1,w,c
 20322  0034FE  6E37               	movwf	___fttol@sign1,c
 20323  003500  8E2F               	bsf	___fttol@f1+1,7,c
 20324  003502  0EFF               	movlw	255
 20325  003504  162E               	andwf	___fttol@f1,f,c
 20326  003506  0EFF               	movlw	255
 20327  003508  162F               	andwf	___fttol@f1+1,f,c
 20328  00350A  0E00               	movlw	0
 20329  00350C  1630               	andwf	___fttol@f1+2,f,c
 20330  00350E  502E               	movf	___fttol@f1,w,c
 20331  003510  6E38               	movwf	___fttol@lval,c
 20332  003512  502F               	movf	___fttol@f1+1,w,c
 20333  003514  6E39               	movwf	___fttol@lval+1,c
 20334  003516  5030               	movf	___fttol@f1+2,w,c
 20335  003518  6E3A               	movwf	___fttol@lval+2,c
 20336  00351A  6A3B               	clrf	___fttol@lval+3,c
 20337  00351C  0E8E               	movlw	142
 20338  00351E  5E3C               	subwf	___fttol@exp1,f,c
 20339  003520  AE3C               	btfss	___fttol@exp1,7,c
 20340  003522  D010               	goto	l8994
 20341  003524  503C               	movf	___fttol@exp1,w,c
 20342  003526  0A80               	xorlw	128
 20343  003528  0F8F               	addlw	143
 20344  00352A  B0D8               	btfsc	status,0,c
 20345  00352C  D003               	goto	l8990
 20346  00352E  D00D               	goto	l8996
 20347  003530  D037               	goto	l1952
 20348  003532  D000               	goto	l8990
 20349  003534                     l8990:
 20350  003534  90D8               	bcf	status,0,c
 20351  003536  323B               	rrcf	___fttol@lval+3,f,c
 20352  003538  323A               	rrcf	___fttol@lval+2,f,c
 20353  00353A  3239               	rrcf	___fttol@lval+1,f,c
 20354  00353C  3238               	rrcf	___fttol@lval,f,c
 20355  00353E  3E3C               	incfsz	___fttol@exp1,f,c
 20356  003540  D7F9               	goto	l8990
 20357  003542  D019               	goto	l9004
 20358  003544                     l8994:
 20359  003544  0E17               	movlw	23
 20360  003546  643C               	cpfsgt	___fttol@exp1,c
 20361  003548  D011               	goto	l9002
 20362  00354A                     l8996:
 20363  00354A  0E00               	movlw	0
 20364  00354C  6E2E               	movwf	?___fttol,c
 20365  00354E  0E00               	movlw	0
 20366  003550  6E2F               	movwf	?___fttol+1,c
 20367  003552  0E00               	movlw	0
 20368  003554  6E30               	movwf	?___fttol+2,c
 20369  003556  0E00               	movlw	0
 20370  003558  6E31               	movwf	?___fttol+3,c
 20371  00355A  D022               	goto	l1952
 20372  00355C  D007               	goto	l9002
 20373  00355E                     l9000:
 20374  00355E  90D8               	bcf	status,0,c
 20375  003560  3638               	rlcf	___fttol@lval,f,c
 20376  003562  3639               	rlcf	___fttol@lval+1,f,c
 20377  003564  363A               	rlcf	___fttol@lval+2,f,c
 20378  003566  363B               	rlcf	___fttol@lval+3,f,c
 20379  003568  063C               	decf	___fttol@exp1,f,c
 20380  00356A  D000               	goto	l9002
 20381  00356C                     l9002:
 20382  00356C  503C               	movf	___fttol@exp1,w,c
 20383  00356E  B4D8               	btfsc	status,2,c
 20384  003570  D002               	goto	l9004
 20385  003572  D7F5               	goto	l9000
 20386  003574  D000               	goto	l9004
 20387  003576                     l9004:
 20388  003576  5037               	movf	___fttol@sign1,w,c
 20389  003578  B4D8               	btfsc	status,2,c
 20390  00357A  D009               	goto	l9008
 20391  00357C  1E3B               	comf	___fttol@lval+3,f,c
 20392  00357E  1E3A               	comf	___fttol@lval+2,f,c
 20393  003580  1E39               	comf	___fttol@lval+1,f,c
 20394  003582  6C38               	negf	___fttol@lval,c
 20395  003584  0E00               	movlw	0
 20396  003586  2239               	addwfc	___fttol@lval+1,f,c
 20397  003588  223A               	addwfc	___fttol@lval+2,f,c
 20398  00358A  223B               	addwfc	___fttol@lval+3,f,c
 20399  00358C  D000               	goto	l9008
 20400  00358E                     l9008:
 20401  00358E  C038  F02E         	movff	___fttol@lval,?___fttol
 20402  003592  C039  F02F         	movff	___fttol@lval+1,?___fttol+1
 20403  003596  C03A  F030         	movff	___fttol@lval+2,?___fttol+2
 20404  00359A  C03B  F031         	movff	___fttol@lval+3,?___fttol+3
 20405  00359E  D000               	goto	l1952
 20406  0035A0                     l1952:
 20407  0035A0  0012               	return		;funcret
 20408  0035A2                     __end_of___fttol:
 20409                           	opt stack 0
 20410                           tblptru	equ	0xFF8
 20411                           tblptrh	equ	0xFF7
 20412                           tblptrl	equ	0xFF6
 20413                           tablat	equ	0xFF5
 20414                           prodh	equ	0xFF4
 20415                           prodl	equ	0xFF3
 20416                           intcon	equ	0xFF2
 20417                           intcon2	equ	0xFF1
 20418                           intcon3	equ	0xFF0
 20419                           postinc0	equ	0xFEE
 20420                           wreg	equ	0xFE8
 20421                           postdec1	equ	0xFE5
 20422                           plusw1	equ	0xFE3
 20423                           fsr1l	equ	0xFE1
 20424                           indf2	equ	0xFDF
 20425                           postinc2	equ	0xFDE
 20426                           postdec2	equ	0xFDD
 20427                           plusw2	equ	0xFDB
 20428                           fsr2h	equ	0xFDA
 20429                           fsr2l	equ	0xFD9
 20430                           status	equ	0xFD8
 20431                           
 20432 ;; *************** function ___ftmul *****************
 20433 ;; Defined at:
 20434 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 20435 ;; Parameters:    Size  Location     Type
 20436 ;;  f1              3   30[COMRAM] float 
 20437 ;;  f2              3   33[COMRAM] float 
 20438 ;; Auto vars:     Size  Location     Type
 20439 ;;  f3_as_produc    3   40[COMRAM] unsigned um
 20440 ;;  sign            1   44[COMRAM] unsigned char 
 20441 ;;  cntr            1   43[COMRAM] unsigned char 
 20442 ;;  exp             1   39[COMRAM] unsigned char 
 20443 ;; Return value:  Size  Location     Type
 20444 ;;                  3   30[COMRAM] float 
 20445 ;; Registers used:
 20446 ;;		wreg, status,2, status,0, cstack
 20447 ;; Tracked objects:
 20448 ;;		On entry : 0/0
 20449 ;;		On exit  : 0/0
 20450 ;;		Unchanged: 0/0
 20451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20452 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20453 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20454 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20455 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20456 ;;Total ram usage:       15 bytes
 20457 ;; Hardware stack levels used:    1
 20458 ;; Hardware stack levels required when called:    4
 20459 ;; This function calls:
 20460 ;;		___ftpack
 20461 ;; This function is called by:
 20462 ;;		_do_update_pwm
 20463 ;;		_Update_Screen
 20464 ;;		_fround
 20465 ;;		_scale
 20466 ;;		_printf
 20467 ;; This function uses a non-reentrant model
 20468 ;;
 20469                           
 20470                           	psect	text105
 20471  0031E8                     __ptext105:
 20472                           	opt stack 0
 20473  0031E8                     ___ftmul:
 20474                           	opt stack 24
 20475                           
 20476                           ;incstack = 0
 20477  0031E8  C021  F025         	movff	___ftmul@f1+2,??___ftmul
 20478  0031EC  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20479  0031EE  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20480  0031F0  3420               	rlcf	___ftmul@f1+1,w,c
 20481  0031F2  3625               	rlcf	??___ftmul& (0+255),f,c
 20482  0031F4  E301               	bnc	u6951
 20483  0031F6  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20484  0031F8                     u6951:
 20485  0031F8  5025               	movf	??___ftmul,w,c
 20486  0031FA  6E28               	movwf	___ftmul@exp,c
 20487  0031FC  5028               	movf	___ftmul@exp,w,c
 20488  0031FE  A4D8               	btfss	status,2,c
 20489  003200  D002               	goto	l8478
 20490  003202  D00E               	goto	l8480
 20491  003204  D06C               	goto	l1931
 20492  003206                     l8478:
 20493  003206  C024  F025         	movff	___ftmul@f2+2,??___ftmul
 20494  00320A  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20495  00320C  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20496  00320E  3423               	rlcf	___ftmul@f2+1,w,c
 20497  003210  3625               	rlcf	??___ftmul& (0+255),f,c
 20498  003212  E301               	bnc	u6971
 20499  003214  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20500  003216                     u6971:
 20501  003216  5025               	movf	??___ftmul,w,c
 20502  003218  6E2D               	movwf	___ftmul@sign,c
 20503  00321A  502D               	movf	___ftmul@sign,w,c
 20504  00321C  A4D8               	btfss	status,2,c
 20505  00321E  D007               	goto	l8484
 20506  003220                     l8480:
 20507  003220  0E00               	movlw	0
 20508  003222  6E1F               	movwf	?___ftmul,c
 20509  003224  0E00               	movlw	0
 20510  003226  6E20               	movwf	?___ftmul+1,c
 20511  003228  0E00               	movlw	0
 20512  00322A  6E21               	movwf	?___ftmul+2,c
 20513  00322C  D058               	goto	l1931
 20514  00322E                     l8484:
 20515  00322E  502D               	movf	___ftmul@sign,w,c
 20516  003230  0F7B               	addlw	123
 20517  003232  2628               	addwf	___ftmul@exp,f,c
 20518  003234  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
 20519  003238  5024               	movf	___ftmul@f2+2,w,c
 20520  00323A  1A2D               	xorwf	___ftmul@sign,f,c
 20521  00323C  0E80               	movlw	128
 20522  00323E  162D               	andwf	___ftmul@sign,f,c
 20523  003240  8E20               	bsf	___ftmul@f1+1,7,c
 20524  003242  8E23               	bsf	___ftmul@f2+1,7,c
 20525  003244  0EFF               	movlw	255
 20526  003246  1622               	andwf	___ftmul@f2,f,c
 20527  003248  0EFF               	movlw	255
 20528  00324A  1623               	andwf	___ftmul@f2+1,f,c
 20529  00324C  0E00               	movlw	0
 20530  00324E  1624               	andwf	___ftmul@f2+2,f,c
 20531  003250  0E00               	movlw	0
 20532  003252  6E29               	movwf	___ftmul@f3_as_product,c
 20533  003254  0E00               	movlw	0
 20534  003256  6E2A               	movwf	___ftmul@f3_as_product+1,c
 20535  003258  0E00               	movlw	0
 20536  00325A  6E2B               	movwf	___ftmul@f3_as_product+2,c
 20537  00325C  0E07               	movlw	7
 20538  00325E  6E2C               	movwf	___ftmul@cntr,c
 20539  003260  D000               	goto	l8498
 20540  003262                     l8498:
 20541  003262  A01F               	btfss	___ftmul@f1,0,c
 20542  003264  D007               	goto	l8502
 20543  003266  5022               	movf	___ftmul@f2,w,c
 20544  003268  2629               	addwf	___ftmul@f3_as_product,f,c
 20545  00326A  5023               	movf	___ftmul@f2+1,w,c
 20546  00326C  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20547  00326E  5024               	movf	___ftmul@f2+2,w,c
 20548  003270  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20549  003272  D000               	goto	l8502
 20550  003274                     l8502:
 20551  003274  90D8               	bcf	status,0,c
 20552  003276  3221               	rrcf	___ftmul@f1+2,f,c
 20553  003278  3220               	rrcf	___ftmul@f1+1,f,c
 20554  00327A  321F               	rrcf	___ftmul@f1,f,c
 20555  00327C  90D8               	bcf	status,0,c
 20556  00327E  3622               	rlcf	___ftmul@f2,f,c
 20557  003280  3623               	rlcf	___ftmul@f2+1,f,c
 20558  003282  3624               	rlcf	___ftmul@f2+2,f,c
 20559  003284  2E2C               	decfsz	___ftmul@cntr,f,c
 20560  003286  D7ED               	goto	l8498
 20561  003288  D000               	goto	l8506
 20562  00328A                     l8506:
 20563  00328A  0E09               	movlw	9
 20564  00328C  6E2C               	movwf	___ftmul@cntr,c
 20565  00328E  D000               	goto	l8508
 20566  003290                     l8508:
 20567  003290  A01F               	btfss	___ftmul@f1,0,c
 20568  003292  D007               	goto	l8512
 20569  003294  5022               	movf	___ftmul@f2,w,c
 20570  003296  2629               	addwf	___ftmul@f3_as_product,f,c
 20571  003298  5023               	movf	___ftmul@f2+1,w,c
 20572  00329A  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20573  00329C  5024               	movf	___ftmul@f2+2,w,c
 20574  00329E  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20575  0032A0  D000               	goto	l8512
 20576  0032A2                     l8512:
 20577  0032A2  90D8               	bcf	status,0,c
 20578  0032A4  3221               	rrcf	___ftmul@f1+2,f,c
 20579  0032A6  3220               	rrcf	___ftmul@f1+1,f,c
 20580  0032A8  321F               	rrcf	___ftmul@f1,f,c
 20581  0032AA  90D8               	bcf	status,0,c
 20582  0032AC  322B               	rrcf	___ftmul@f3_as_product+2,f,c
 20583  0032AE  322A               	rrcf	___ftmul@f3_as_product+1,f,c
 20584  0032B0  3229               	rrcf	___ftmul@f3_as_product,f,c
 20585  0032B2  2E2C               	decfsz	___ftmul@cntr,f,c
 20586  0032B4  D7ED               	goto	l8508
 20587  0032B6  D000               	goto	l8516
 20588  0032B8                     l8516:
 20589  0032B8  C029  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 20590  0032BC  C02A  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 20591  0032C0  C02B  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 20592  0032C4  C028  F014         	movff	___ftmul@exp,___ftpack@exp
 20593  0032C8  C02D  F015         	movff	___ftmul@sign,___ftpack@sign
 20594  0032CC  EC21  F01C         	call	___ftpack	;wreg free
 20595  0032D0  C011  F01F         	movff	?___ftpack,?___ftmul
 20596  0032D4  C012  F020         	movff	?___ftpack+1,?___ftmul+1
 20597  0032D8  C013  F021         	movff	?___ftpack+2,?___ftmul+2
 20598  0032DC  D000               	goto	l1931
 20599  0032DE                     l1931:
 20600  0032DE  0012               	return		;funcret
 20601  0032E0                     __end_of___ftmul:
 20602                           	opt stack 0
 20603                           tblptru	equ	0xFF8
 20604                           tblptrh	equ	0xFF7
 20605                           tblptrl	equ	0xFF6
 20606                           tablat	equ	0xFF5
 20607                           prodh	equ	0xFF4
 20608                           prodl	equ	0xFF3
 20609                           intcon	equ	0xFF2
 20610                           intcon2	equ	0xFF1
 20611                           intcon3	equ	0xFF0
 20612                           postinc0	equ	0xFEE
 20613                           wreg	equ	0xFE8
 20614                           postdec1	equ	0xFE5
 20615                           plusw1	equ	0xFE3
 20616                           fsr1l	equ	0xFE1
 20617                           indf2	equ	0xFDF
 20618                           postinc2	equ	0xFDE
 20619                           postdec2	equ	0xFDD
 20620                           plusw2	equ	0xFDB
 20621                           fsr2h	equ	0xFDA
 20622                           fsr2l	equ	0xFD9
 20623                           status	equ	0xFD8
 20624                           
 20625 ;; *************** function ___ftdiv *****************
 20626 ;; Defined at:
 20627 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 20628 ;; Parameters:    Size  Location     Type
 20629 ;;  f1              3   45[COMRAM] float 
 20630 ;;  f2              3   48[COMRAM] float 
 20631 ;; Auto vars:     Size  Location     Type
 20632 ;;  f3              3   55[COMRAM] float 
 20633 ;;  sign            1   59[COMRAM] unsigned char 
 20634 ;;  exp             1   58[COMRAM] unsigned char 
 20635 ;;  cntr            1   54[COMRAM] unsigned char 
 20636 ;; Return value:  Size  Location     Type
 20637 ;;                  3   45[COMRAM] float 
 20638 ;; Registers used:
 20639 ;;		wreg, status,2, status,0, cstack
 20640 ;; Tracked objects:
 20641 ;;		On entry : 0/0
 20642 ;;		On exit  : 0/0
 20643 ;;		Unchanged: 0/0
 20644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20645 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20646 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20647 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20648 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20649 ;;Total ram usage:       15 bytes
 20650 ;; Hardware stack levels used:    1
 20651 ;; Hardware stack levels required when called:    4
 20652 ;; This function calls:
 20653 ;;		___ftpack
 20654 ;; This function is called by:
 20655 ;;		_do_update_pwm
 20656 ;;		_Read_Volt
 20657 ;; This function uses a non-reentrant model
 20658 ;;
 20659                           
 20660                           	psect	text106
 20661  003684                     __ptext106:
 20662                           	opt stack 0
 20663  003684                     ___ftdiv:
 20664                           	opt stack 23
 20665                           
 20666                           ;incstack = 0
 20667  003684  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
 20668  003688  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20669  00368A  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20670  00368C  342F               	rlcf	___ftdiv@f1+1,w,c
 20671  00368E  3634               	rlcf	??___ftdiv& (0+255),f,c
 20672  003690  E301               	bnc	u8311
 20673  003692  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20674  003694                     u8311:
 20675  003694  5034               	movf	??___ftdiv,w,c
 20676  003696  6E3B               	movwf	___ftdiv@exp,c
 20677  003698  503B               	movf	___ftdiv@exp,w,c
 20678  00369A  A4D8               	btfss	status,2,c
 20679  00369C  D002               	goto	l9420
 20680  00369E  D00E               	goto	l9422
 20681  0036A0  D061               	goto	l1899
 20682  0036A2                     l9420:
 20683  0036A2  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
 20684  0036A6  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20685  0036A8  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20686  0036AA  3432               	rlcf	___ftdiv@f2+1,w,c
 20687  0036AC  3634               	rlcf	??___ftdiv& (0+255),f,c
 20688  0036AE  E301               	bnc	u8331
 20689  0036B0  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20690  0036B2                     u8331:
 20691  0036B2  5034               	movf	??___ftdiv,w,c
 20692  0036B4  6E3C               	movwf	___ftdiv@sign,c
 20693  0036B6  503C               	movf	___ftdiv@sign,w,c
 20694  0036B8  A4D8               	btfss	status,2,c
 20695  0036BA  D007               	goto	l9426
 20696  0036BC                     l9422:
 20697  0036BC  0E00               	movlw	0
 20698  0036BE  6E2E               	movwf	?___ftdiv,c
 20699  0036C0  0E00               	movlw	0
 20700  0036C2  6E2F               	movwf	?___ftdiv+1,c
 20701  0036C4  0E00               	movlw	0
 20702  0036C6  6E30               	movwf	?___ftdiv+2,c
 20703  0036C8  D04D               	goto	l1899
 20704  0036CA                     l9426:
 20705  0036CA  0E00               	movlw	0
 20706  0036CC  6E38               	movwf	___ftdiv@f3,c
 20707  0036CE  0E00               	movlw	0
 20708  0036D0  6E39               	movwf	___ftdiv@f3+1,c
 20709  0036D2  0E00               	movlw	0
 20710  0036D4  6E3A               	movwf	___ftdiv@f3+2,c
 20711  0036D6  503C               	movf	___ftdiv@sign,w,c
 20712  0036D8  0F89               	addlw	137
 20713  0036DA  5E3B               	subwf	___ftdiv@exp,f,c
 20714  0036DC  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
 20715  0036E0  5033               	movf	___ftdiv@f2+2,w,c
 20716  0036E2  1A3C               	xorwf	___ftdiv@sign,f,c
 20717  0036E4  0E80               	movlw	128
 20718  0036E6  163C               	andwf	___ftdiv@sign,f,c
 20719  0036E8  8E2F               	bsf	___ftdiv@f1+1,7,c
 20720  0036EA  0EFF               	movlw	255
 20721  0036EC  162E               	andwf	___ftdiv@f1,f,c
 20722  0036EE  0EFF               	movlw	255
 20723  0036F0  162F               	andwf	___ftdiv@f1+1,f,c
 20724  0036F2  0E00               	movlw	0
 20725  0036F4  1630               	andwf	___ftdiv@f1+2,f,c
 20726  0036F6  8E32               	bsf	___ftdiv@f2+1,7,c
 20727  0036F8  0EFF               	movlw	255
 20728  0036FA  1631               	andwf	___ftdiv@f2,f,c
 20729  0036FC  0EFF               	movlw	255
 20730  0036FE  1632               	andwf	___ftdiv@f2+1,f,c
 20731  003700  0E00               	movlw	0
 20732  003702  1633               	andwf	___ftdiv@f2+2,f,c
 20733  003704  0E18               	movlw	24
 20734  003706  6E37               	movwf	___ftdiv@cntr,c
 20735  003708  D000               	goto	l9446
 20736  00370A                     l9446:
 20737  00370A  90D8               	bcf	status,0,c
 20738  00370C  3638               	rlcf	___ftdiv@f3,f,c
 20739  00370E  3639               	rlcf	___ftdiv@f3+1,f,c
 20740  003710  363A               	rlcf	___ftdiv@f3+2,f,c
 20741  003712  5031               	movf	___ftdiv@f2,w,c
 20742  003714  5C2E               	subwf	___ftdiv@f1,w,c
 20743  003716  5032               	movf	___ftdiv@f2+1,w,c
 20744  003718  582F               	subwfb	___ftdiv@f1+1,w,c
 20745  00371A  5033               	movf	___ftdiv@f2+2,w,c
 20746  00371C  5830               	subwfb	___ftdiv@f1+2,w,c
 20747  00371E  A0D8               	btfss	status,0,c
 20748  003720  D007               	goto	l1902
 20749  003722  5031               	movf	___ftdiv@f2,w,c
 20750  003724  5E2E               	subwf	___ftdiv@f1,f,c
 20751  003726  5032               	movf	___ftdiv@f2+1,w,c
 20752  003728  5A2F               	subwfb	___ftdiv@f1+1,f,c
 20753  00372A  5033               	movf	___ftdiv@f2+2,w,c
 20754  00372C  5A30               	subwfb	___ftdiv@f1+2,f,c
 20755  00372E  8038               	bsf	___ftdiv@f3,0,c
 20756  003730                     l1902:
 20757  003730  90D8               	bcf	status,0,c
 20758  003732  362E               	rlcf	___ftdiv@f1,f,c
 20759  003734  362F               	rlcf	___ftdiv@f1+1,f,c
 20760  003736  3630               	rlcf	___ftdiv@f1+2,f,c
 20761  003738  2E37               	decfsz	___ftdiv@cntr,f,c
 20762  00373A  D7E7               	goto	l9446
 20763  00373C  D000               	goto	l9456
 20764  00373E                     l9456:
 20765  00373E  C038  F011         	movff	___ftdiv@f3,___ftpack@arg
 20766  003742  C039  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 20767  003746  C03A  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 20768  00374A  C03B  F014         	movff	___ftdiv@exp,___ftpack@exp
 20769  00374E  C03C  F015         	movff	___ftdiv@sign,___ftpack@sign
 20770  003752  EC21  F01C         	call	___ftpack	;wreg free
 20771  003756  C011  F02E         	movff	?___ftpack,?___ftdiv
 20772  00375A  C012  F02F         	movff	?___ftpack+1,?___ftdiv+1
 20773  00375E  C013  F030         	movff	?___ftpack+2,?___ftdiv+2
 20774  003762  D000               	goto	l1899
 20775  003764                     l1899:
 20776  003764  0012               	return		;funcret
 20777  003766                     __end_of___ftdiv:
 20778                           	opt stack 0
 20779                           tblptru	equ	0xFF8
 20780                           tblptrh	equ	0xFF7
 20781                           tblptrl	equ	0xFF6
 20782                           tablat	equ	0xFF5
 20783                           prodh	equ	0xFF4
 20784                           prodl	equ	0xFF3
 20785                           intcon	equ	0xFF2
 20786                           intcon2	equ	0xFF1
 20787                           intcon3	equ	0xFF0
 20788                           postinc0	equ	0xFEE
 20789                           wreg	equ	0xFE8
 20790                           postdec1	equ	0xFE5
 20791                           plusw1	equ	0xFE3
 20792                           fsr1l	equ	0xFE1
 20793                           indf2	equ	0xFDF
 20794                           postinc2	equ	0xFDE
 20795                           postdec2	equ	0xFDD
 20796                           plusw2	equ	0xFDB
 20797                           fsr2h	equ	0xFDA
 20798                           fsr2l	equ	0xFD9
 20799                           status	equ	0xFD8
 20800                           
 20801 ;; *************** function ___ftpack *****************
 20802 ;; Defined at:
 20803 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 20804 ;; Parameters:    Size  Location     Type
 20805 ;;  arg             3   16[COMRAM] unsigned um
 20806 ;;  exp             1   19[COMRAM] unsigned char 
 20807 ;;  sign            1   20[COMRAM] unsigned char 
 20808 ;; Auto vars:     Size  Location     Type
 20809 ;;		None
 20810 ;; Return value:  Size  Location     Type
 20811 ;;                  3   16[COMRAM] float 
 20812 ;; Registers used:
 20813 ;;		wreg, status,2, status,0
 20814 ;; Tracked objects:
 20815 ;;		On entry : 0/0
 20816 ;;		On exit  : 0/0
 20817 ;;		Unchanged: 0/0
 20818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20819 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20821 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20822 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20823 ;;Total ram usage:        8 bytes
 20824 ;; Hardware stack levels used:    1
 20825 ;; Hardware stack levels required when called:    3
 20826 ;; This function calls:
 20827 ;;		Nothing
 20828 ;; This function is called by:
 20829 ;;		___awtoft
 20830 ;;		___ftadd
 20831 ;;		___ftdiv
 20832 ;;		___ftmul
 20833 ;;		___lbtoft
 20834 ;;		___lltoft
 20835 ;; This function uses a non-reentrant model
 20836 ;;
 20837                           
 20838                           	psect	text107
 20839  003842                     __ptext107:
 20840                           	opt stack 0
 20841  003842                     ___ftpack:
 20842                           	opt stack 24
 20843                           
 20844                           ;incstack = 0
 20845  003842  5014               	movf	___ftpack@exp,w,c
 20846  003844  B4D8               	btfsc	status,2,c
 20847  003846  D005               	goto	l8356
 20848  003848  5011               	movf	___ftpack@arg,w,c
 20849  00384A  1012               	iorwf	___ftpack@arg+1,w,c
 20850  00384C  1013               	iorwf	___ftpack@arg+2,w,c
 20851  00384E  A4D8               	btfss	status,2,c
 20852  003850  D00E               	goto	l8362
 20853  003852                     l8356:
 20854  003852  0E00               	movlw	0
 20855  003854  6E11               	movwf	?___ftpack,c
 20856  003856  0E00               	movlw	0
 20857  003858  6E12               	movwf	?___ftpack+1,c
 20858  00385A  0E00               	movlw	0
 20859  00385C  6E13               	movwf	?___ftpack+2,c
 20860  00385E  D053               	goto	l1827
 20861  003860  D006               	goto	l8362
 20862  003862                     l8360:
 20863  003862  2A14               	incf	___ftpack@exp,f,c
 20864  003864  90D8               	bcf	status,0,c
 20865  003866  3213               	rrcf	___ftpack@arg+2,f,c
 20866  003868  3212               	rrcf	___ftpack@arg+1,f,c
 20867  00386A  3211               	rrcf	___ftpack@arg,f,c
 20868  00386C  D000               	goto	l8362
 20869  00386E                     l8362:
 20870  00386E  0E00               	movlw	0
 20871  003870  1411               	andwf	___ftpack@arg,w,c
 20872  003872  6E16               	movwf	??___ftpack& (0+255),c
 20873  003874  0E00               	movlw	0
 20874  003876  1412               	andwf	___ftpack@arg+1,w,c
 20875  003878  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20876  00387A  0EFE               	movlw	254
 20877  00387C  1413               	andwf	___ftpack@arg+2,w,c
 20878  00387E  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20879  003880  5016               	movf	??___ftpack,w,c
 20880  003882  1017               	iorwf	??___ftpack+1,w,c
 20881  003884  1018               	iorwf	??___ftpack+2,w,c
 20882  003886  B4D8               	btfsc	status,2,c
 20883  003888  D00E               	goto	l8368
 20884  00388A  D7EB               	goto	l8360
 20885  00388C  D00C               	goto	l8368
 20886  00388E                     l8364:
 20887  00388E  2A14               	incf	___ftpack@exp,f,c
 20888  003890  0E01               	movlw	1
 20889  003892  2611               	addwf	___ftpack@arg,f,c
 20890  003894  0E00               	movlw	0
 20891  003896  2212               	addwfc	___ftpack@arg+1,f,c
 20892  003898  0E00               	movlw	0
 20893  00389A  2213               	addwfc	___ftpack@arg+2,f,c
 20894  00389C  90D8               	bcf	status,0,c
 20895  00389E  3213               	rrcf	___ftpack@arg+2,f,c
 20896  0038A0  3212               	rrcf	___ftpack@arg+1,f,c
 20897  0038A2  3211               	rrcf	___ftpack@arg,f,c
 20898  0038A4  D000               	goto	l8368
 20899  0038A6                     l8368:
 20900  0038A6  0E00               	movlw	0
 20901  0038A8  1411               	andwf	___ftpack@arg,w,c
 20902  0038AA  6E16               	movwf	??___ftpack& (0+255),c
 20903  0038AC  0E00               	movlw	0
 20904  0038AE  1412               	andwf	___ftpack@arg+1,w,c
 20905  0038B0  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20906  0038B2  0EFF               	movlw	255
 20907  0038B4  1413               	andwf	___ftpack@arg+2,w,c
 20908  0038B6  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20909  0038B8  5016               	movf	??___ftpack,w,c
 20910  0038BA  1017               	iorwf	??___ftpack+1,w,c
 20911  0038BC  1018               	iorwf	??___ftpack+2,w,c
 20912  0038BE  B4D8               	btfsc	status,2,c
 20913  0038C0  D008               	goto	l8372
 20914  0038C2  D7E5               	goto	l8364
 20915  0038C4  D006               	goto	l8372
 20916  0038C6                     l8370:
 20917  0038C6  0614               	decf	___ftpack@exp,f,c
 20918  0038C8  90D8               	bcf	status,0,c
 20919  0038CA  3611               	rlcf	___ftpack@arg,f,c
 20920  0038CC  3612               	rlcf	___ftpack@arg+1,f,c
 20921  0038CE  3613               	rlcf	___ftpack@arg+2,f,c
 20922  0038D0  D000               	goto	l8372
 20923  0038D2                     l8372:
 20924  0038D2  BE12               	btfsc	___ftpack@arg+1,7,c
 20925  0038D4  D004               	goto	l1838
 20926  0038D6  0E02               	movlw	2
 20927  0038D8  6014               	cpfslt	___ftpack@exp,c
 20928  0038DA  D7F5               	goto	l8370
 20929  0038DC  D000               	goto	l1838
 20930  0038DE                     l1838:
 20931  0038DE  B014               	btfsc	___ftpack@exp,0,c
 20932  0038E0  D002               	goto	l8378
 20933  0038E2  9E12               	bcf	___ftpack@arg+1,7,c
 20934  0038E4  D000               	goto	l8378
 20935  0038E6                     l8378:
 20936  0038E6  90D8               	bcf	status,0,c
 20937  0038E8  3214               	rrcf	___ftpack@exp,f,c
 20938  0038EA  5014               	movf	___ftpack@exp,w,c
 20939  0038EC  1213               	iorwf	___ftpack@arg+2,f,c
 20940  0038EE  5015               	movf	___ftpack@sign,w,c
 20941  0038F0  B4D8               	btfsc	status,2,c
 20942  0038F2  D002               	goto	l8384
 20943  0038F4  8E13               	bsf	___ftpack@arg+2,7,c
 20944  0038F6  D000               	goto	l8384
 20945  0038F8                     l8384:
 20946  0038F8  C011  F011         	movff	___ftpack@arg,?___ftpack
 20947  0038FC  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 20948  003900  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 20949  003904  D000               	goto	l1827
 20950  003906                     l1827:
 20951  003906  0012               	return		;funcret
 20952  003908                     __end_of___ftpack:
 20953                           	opt stack 0
 20954                           tblptru	equ	0xFF8
 20955                           tblptrh	equ	0xFF7
 20956                           tblptrl	equ	0xFF6
 20957                           tablat	equ	0xFF5
 20958                           prodh	equ	0xFF4
 20959                           prodl	equ	0xFF3
 20960                           intcon	equ	0xFF2
 20961                           intcon2	equ	0xFF1
 20962                           intcon3	equ	0xFF0
 20963                           postinc0	equ	0xFEE
 20964                           wreg	equ	0xFE8
 20965                           postdec1	equ	0xFE5
 20966                           plusw1	equ	0xFE3
 20967                           fsr1l	equ	0xFE1
 20968                           indf2	equ	0xFDF
 20969                           postinc2	equ	0xFDE
 20970                           postdec2	equ	0xFDD
 20971                           plusw2	equ	0xFDB
 20972                           fsr2h	equ	0xFDA
 20973                           fsr2l	equ	0xFD9
 20974                           status	equ	0xFD8
 20975                           
 20976 ;; *************** function _Wait_Half_Sec *****************
 20977 ;; Defined at:
 20978 ;;		line 99 in file "utils.c"
 20979 ;; Parameters:    Size  Location     Type
 20980 ;;		None
 20981 ;; Auto vars:     Size  Location     Type
 20982 ;;  k               2   16[COMRAM] unsigned int 
 20983 ;; Return value:  Size  Location     Type
 20984 ;;		None               void
 20985 ;; Registers used:
 20986 ;;		wreg, status,2, status,0
 20987 ;; Tracked objects:
 20988 ;;		On entry : 0/0
 20989 ;;		On exit  : 0/0
 20990 ;;		Unchanged: 0/0
 20991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20995 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20996 ;;Total ram usage:        2 bytes
 20997 ;; Hardware stack levels used:    1
 20998 ;; Hardware stack levels required when called:    3
 20999 ;; This function calls:
 21000 ;;		Nothing
 21001 ;; This function is called by:
 21002 ;;		_Do_Beep
 21003 ;;		_Do_Beep_Good
 21004 ;;		_Do_Beep_Bad
 21005 ;; This function uses a non-reentrant model
 21006 ;;
 21007                           
 21008                           	psect	text108
 21009  004BFC                     __ptext108:
 21010                           	opt stack 0
 21011  004BFC                     _Wait_Half_Sec:
 21012                           	opt stack 25
 21013                           
 21014                           ;utils.c: 101: for (unsigned int k=0;k<0x8000;k++);
 21015                           
 21016                           ;incstack = 0
 21017  004BFC  0E00               	movlw	0
 21018  004BFE  6E12               	movwf	Wait_Half_Sec@k+1,c
 21019  004C00  0E00               	movlw	0
 21020  004C02  6E11               	movwf	Wait_Half_Sec@k,c
 21021  004C04                     l6664:
 21022  004C04  0E80               	movlw	128
 21023  004C06  5C12               	subwf	Wait_Half_Sec@k+1,w,c
 21024  004C08  B0D8               	btfsc	status,0,c
 21025  004C0A  D005               	goto	l468
 21026  004C0C  D001               	goto	l6668
 21027  004C0E  D003               	goto	l468
 21028  004C10                     l6668:
 21029  004C10  4A11               	infsnz	Wait_Half_Sec@k,f,c
 21030  004C12  2A12               	incf	Wait_Half_Sec@k+1,f,c
 21031  004C14  D7F7               	goto	l6664
 21032  004C16                     l468:
 21033  004C16  0012               	return		;funcret
 21034  004C18                     __end_of_Wait_Half_Sec:
 21035                           	opt stack 0
 21036                           tblptru	equ	0xFF8
 21037                           tblptrh	equ	0xFF7
 21038                           tblptrl	equ	0xFF6
 21039                           tablat	equ	0xFF5
 21040                           prodh	equ	0xFF4
 21041                           prodl	equ	0xFF3
 21042                           intcon	equ	0xFF2
 21043                           intcon2	equ	0xFF1
 21044                           intcon3	equ	0xFF0
 21045                           postinc0	equ	0xFEE
 21046                           wreg	equ	0xFE8
 21047                           postdec1	equ	0xFE5
 21048                           plusw1	equ	0xFE3
 21049                           fsr1l	equ	0xFE1
 21050                           indf2	equ	0xFDF
 21051                           postinc2	equ	0xFDE
 21052                           postdec2	equ	0xFDD
 21053                           plusw2	equ	0xFDB
 21054                           fsr2h	equ	0xFDA
 21055                           fsr2l	equ	0xFD9
 21056                           status	equ	0xFD8
 21057                           
 21058 ;; *************** function _Deactivate_Buzzer *****************
 21059 ;; Defined at:
 21060 ;;		line 136 in file "utils.c"
 21061 ;; Parameters:    Size  Location     Type
 21062 ;;		None
 21063 ;; Auto vars:     Size  Location     Type
 21064 ;;		None
 21065 ;; Return value:  Size  Location     Type
 21066 ;;		None               void
 21067 ;; Registers used:
 21068 ;;		wreg, status,2
 21069 ;; Tracked objects:
 21070 ;;		On entry : 0/0
 21071 ;;		On exit  : 0/0
 21072 ;;		Unchanged: 0/0
 21073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21078 ;;Total ram usage:        0 bytes
 21079 ;; Hardware stack levels used:    1
 21080 ;; Hardware stack levels required when called:    3
 21081 ;; This function calls:
 21082 ;;		Nothing
 21083 ;; This function is called by:
 21084 ;;		_Do_Beep
 21085 ;;		_Do_Beep_Good
 21086 ;;		_Do_Beep_Bad
 21087 ;; This function uses a non-reentrant model
 21088 ;;
 21089                           
 21090                           	psect	text109
 21091  004DFC                     __ptext109:
 21092                           	opt stack 0
 21093  004DFC                     _Deactivate_Buzzer:
 21094                           	opt stack 25
 21095                           
 21096                           ;utils.c: 138: CCP2CON = 0x0;
 21097                           
 21098                           ;incstack = 0
 21099  004DFC  0E00               	movlw	0
 21100  004DFE  6EBA               	movwf	4026,c	;volatile
 21101                           
 21102                           ;utils.c: 139: PORTCbits.RC1 = 0;
 21103  004E00  9282               	bcf	3970,1,c	;volatile
 21104  004E02  0012               	return		;funcret
 21105  004E04                     __end_of_Deactivate_Buzzer:
 21106                           	opt stack 0
 21107                           tblptru	equ	0xFF8
 21108                           tblptrh	equ	0xFF7
 21109                           tblptrl	equ	0xFF6
 21110                           tablat	equ	0xFF5
 21111                           prodh	equ	0xFF4
 21112                           prodl	equ	0xFF3
 21113                           intcon	equ	0xFF2
 21114                           intcon2	equ	0xFF1
 21115                           intcon3	equ	0xFF0
 21116                           postinc0	equ	0xFEE
 21117                           wreg	equ	0xFE8
 21118                           postdec1	equ	0xFE5
 21119                           plusw1	equ	0xFE3
 21120                           fsr1l	equ	0xFE1
 21121                           indf2	equ	0xFDF
 21122                           postinc2	equ	0xFDE
 21123                           postdec2	equ	0xFDD
 21124                           plusw2	equ	0xFDB
 21125                           fsr2h	equ	0xFDA
 21126                           fsr2l	equ	0xFD9
 21127                           status	equ	0xFD8
 21128                           
 21129 ;; *************** function _Activate_Buzzer *****************
 21130 ;; Defined at:
 21131 ;;		line 104 in file "utils.c"
 21132 ;; Parameters:    Size  Location     Type
 21133 ;;		None
 21134 ;; Auto vars:     Size  Location     Type
 21135 ;;		None
 21136 ;; Return value:  Size  Location     Type
 21137 ;;		None               void
 21138 ;; Registers used:
 21139 ;;		wreg, status,2
 21140 ;; Tracked objects:
 21141 ;;		On entry : 0/0
 21142 ;;		On exit  : 0/0
 21143 ;;		Unchanged: 0/0
 21144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21149 ;;Total ram usage:        0 bytes
 21150 ;; Hardware stack levels used:    1
 21151 ;; Hardware stack levels required when called:    3
 21152 ;; This function calls:
 21153 ;;		Nothing
 21154 ;; This function is called by:
 21155 ;;		_Do_Beep
 21156 ;; This function uses a non-reentrant model
 21157 ;;
 21158                           
 21159                           	psect	text110
 21160  004D4E                     __ptext110:
 21161                           	opt stack 0
 21162  004D4E                     _Activate_Buzzer:
 21163                           	opt stack 25
 21164                           
 21165                           ;utils.c: 106: PR2 = 0b11111001 ;
 21166                           
 21167                           ;incstack = 0
 21168  004D4E  0EF9               	movlw	249
 21169  004D50  6ECB               	movwf	4043,c	;volatile
 21170                           
 21171                           ;utils.c: 107: T2CON = 0b00000101 ;
 21172  004D52  0E05               	movlw	5
 21173  004D54  6ECA               	movwf	4042,c	;volatile
 21174                           
 21175                           ;utils.c: 108: CCPR2L = 0b01001010 ;
 21176  004D56  0E4A               	movlw	74
 21177  004D58  6EBB               	movwf	4027,c	;volatile
 21178                           
 21179                           ;utils.c: 109: CCP2CON = 0b00111100 ;
 21180  004D5A  0E3C               	movlw	60
 21181  004D5C  6EBA               	movwf	4026,c	;volatile
 21182  004D5E  0012               	return		;funcret
 21183  004D60                     __end_of_Activate_Buzzer:
 21184                           	opt stack 0
 21185                           tblptru	equ	0xFF8
 21186                           tblptrh	equ	0xFF7
 21187                           tblptrl	equ	0xFF6
 21188                           tablat	equ	0xFF5
 21189                           prodh	equ	0xFF4
 21190                           prodl	equ	0xFF3
 21191                           intcon	equ	0xFF2
 21192                           intcon2	equ	0xFF1
 21193                           intcon3	equ	0xFF0
 21194                           postinc0	equ	0xFEE
 21195                           wreg	equ	0xFE8
 21196                           postdec1	equ	0xFE5
 21197                           plusw1	equ	0xFE3
 21198                           fsr1l	equ	0xFE1
 21199                           indf2	equ	0xFDF
 21200                           postinc2	equ	0xFDE
 21201                           postdec2	equ	0xFDD
 21202                           plusw2	equ	0xFDB
 21203                           fsr2h	equ	0xFDA
 21204                           fsr2l	equ	0xFD9
 21205                           status	equ	0xFD8
 21206                           
 21207 ;; *************** function _chkisr *****************
 21208 ;; Defined at:
 21209 ;;		line 41 in file "Interrupt.c"
 21210 ;; Parameters:    Size  Location     Type
 21211 ;;		None
 21212 ;; Auto vars:     Size  Location     Type
 21213 ;;		None
 21214 ;; Return value:  Size  Location     Type
 21215 ;;		None               void
 21216 ;; Registers used:
 21217 ;;		wreg, status,2, status,0, cstack
 21218 ;; Tracked objects:
 21219 ;;		On entry : 0/0
 21220 ;;		On exit  : 0/0
 21221 ;;		Unchanged: 0/0
 21222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21225 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21226 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21227 ;;Total ram usage:       14 bytes
 21228 ;; Hardware stack levels used:    1
 21229 ;; Hardware stack levels required when called:    2
 21230 ;; This function calls:
 21231 ;;		_INT0_isr
 21232 ;;		_INT1_isr
 21233 ;;		_INT2_isr
 21234 ;;		_TIMER1_isr
 21235 ;; This function is called by:
 21236 ;;		Interrupt level 2
 21237 ;; This function uses a non-reentrant model
 21238 ;;
 21239                           
 21240                           	psect	intcode
 21241  000008                     __pintcode:
 21242                           	opt stack 0
 21243  000008                     _chkisr:
 21244                           	opt stack 18
 21245                           
 21246                           ;incstack = 0
 21247  000008  CFFA F003          	movff	pclath,??_chkisr
 21248  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 21249  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 21250  000014  EDC7  F01E         	call	int_func,f	;refresh shadow registers
 21251                           pclatu	equ	0xFFB
 21252                           pclath	equ	0xFFA
 21253                           tblptru	equ	0xFF8
 21254                           tblptrh	equ	0xFF7
 21255                           tblptrl	equ	0xFF6
 21256                           tablat	equ	0xFF5
 21257                           prodh	equ	0xFF4
 21258                           prodl	equ	0xFF3
 21259                           intcon	equ	0xFF2
 21260                           intcon2	equ	0xFF1
 21261                           intcon3	equ	0xFF0
 21262                           postinc0	equ	0xFEE
 21263                           fsr0l	equ	0xFE9
 21264                           wreg	equ	0xFE8
 21265                           postdec1	equ	0xFE5
 21266                           plusw1	equ	0xFE3
 21267                           fsr1l	equ	0xFE1
 21268                           indf2	equ	0xFDF
 21269                           postinc2	equ	0xFDE
 21270                           postdec2	equ	0xFDD
 21271                           plusw2	equ	0xFDB
 21272                           fsr2h	equ	0xFDA
 21273                           fsr2l	equ	0xFD9
 21274                           status	equ	0xFD8
 21275                           
 21276                           	psect	intcode_body
 21277  003D8E                     __pintcode_body:
 21278                           	opt stack 18
 21279  003D8E                     int_func:
 21280                           	opt stack 18
 21281  003D8E  0006               	pop		; remove dummy address from shadow register refresh
 21282  003D90  CFEA F006          	movff	fsr0h,??_chkisr+3
 21283  003D94  CFE1 F007          	movff	fsr1l,??_chkisr+4
 21284  003D98  CFE2 F008          	movff	fsr1h,??_chkisr+5
 21285  003D9C  CFD9 F009          	movff	fsr2l,??_chkisr+6
 21286  003DA0  CFDA F00A          	movff	fsr2h,??_chkisr+7
 21287  003DA4  CFF3 F00B          	movff	prodl,??_chkisr+8
 21288  003DA8  CFF4 F00C          	movff	prodh,??_chkisr+9
 21289  003DAC  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 21290  003DB0  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 21291  003DB4  CFF8 F00F          	movff	tblptru,??_chkisr+12
 21292  003DB8  CFF5 F010          	movff	tablat,??_chkisr+13
 21293                           
 21294                           ;Interrupt.c: 43: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 21295  003DBC  A09E               	btfss	3998,0,c	;volatile
 21296  003DBE  D003               	goto	i2l8214
 21297  003DC0  ECDC  F026         	call	_TIMER1_isr	;wreg free
 21298  003DC4  D000               	goto	i2l8214
 21299  003DC6                     i2l8214:
 21300                           
 21301                           ;Interrupt.c: 44: if (INTCONbits.INT0IF == 1) INT0_isr();
 21302  003DC6  A2F2               	btfss	intcon,1,c	;volatile
 21303  003DC8  D003               	goto	i2l8218
 21304  003DCA  ECAA  F024         	call	_INT0_isr	;wreg free
 21305  003DCE  D000               	goto	i2l8218
 21306  003DD0                     i2l8218:
 21307                           
 21308                           ;Interrupt.c: 45: if (INTCON3bits.INT1IF == 1) INT1_isr();
 21309  003DD0  A0F0               	btfss	intcon3,0,c	;volatile
 21310  003DD2  D003               	goto	i2l8222
 21311  003DD4  ECF1  F026         	call	_INT1_isr	;wreg free
 21312  003DD8  D000               	goto	i2l8222
 21313  003DDA                     i2l8222:
 21314                           
 21315                           ;Interrupt.c: 46: if (INTCON3bits.INT2IF == 1) INT2_isr();
 21316  003DDA  A2F0               	btfss	intcon3,1,c	;volatile
 21317  003DDC  D003               	goto	i2l623
 21318  003DDE  EC8E  F014         	call	_INT2_isr	;wreg free
 21319  003DE2  D000               	goto	i2l623
 21320  003DE4                     i2l623:
 21321  003DE4  C010  FFF5         	movff	??_chkisr+13,tablat
 21322  003DE8  C00F  FFF8         	movff	??_chkisr+12,tblptru
 21323  003DEC  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 21324  003DF0  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 21325  003DF4  C00C  FFF4         	movff	??_chkisr+9,prodh
 21326  003DF8  C00B  FFF3         	movff	??_chkisr+8,prodl
 21327  003DFC  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 21328  003E00  C009  FFD9         	movff	??_chkisr+6,fsr2l
 21329  003E04  C008  FFE2         	movff	??_chkisr+5,fsr1h
 21330  003E08  C007  FFE1         	movff	??_chkisr+4,fsr1l
 21331  003E0C  C006  FFEA         	movff	??_chkisr+3,fsr0h
 21332  003E10  C005  FFE9         	movff	??_chkisr+2,fsr0l
 21333  003E14  C004  FFFB         	movff	??_chkisr+1,pclatu
 21334  003E18  C003  FFFA         	movff	??_chkisr,pclath
 21335  003E1C  0011               	retfie		f
 21336  003E1E                     __end_of_chkisr:
 21337                           	opt stack 0
 21338                           pclatu	equ	0xFFB
 21339                           pclath	equ	0xFFA
 21340                           tblptru	equ	0xFF8
 21341                           tblptrh	equ	0xFF7
 21342                           tblptrl	equ	0xFF6
 21343                           tablat	equ	0xFF5
 21344                           prodh	equ	0xFF4
 21345                           prodl	equ	0xFF3
 21346                           intcon	equ	0xFF2
 21347                           intcon2	equ	0xFF1
 21348                           intcon3	equ	0xFF0
 21349                           postinc0	equ	0xFEE
 21350                           fsr0h	equ	0xFEA
 21351                           fsr0l	equ	0xFE9
 21352                           wreg	equ	0xFE8
 21353                           postdec1	equ	0xFE5
 21354                           plusw1	equ	0xFE3
 21355                           fsr1h	equ	0xFE2
 21356                           fsr1l	equ	0xFE1
 21357                           indf2	equ	0xFDF
 21358                           postinc2	equ	0xFDE
 21359                           postdec2	equ	0xFDD
 21360                           plusw2	equ	0xFDB
 21361                           fsr2h	equ	0xFDA
 21362                           fsr2l	equ	0xFD9
 21363                           status	equ	0xFD8
 21364                           
 21365 ;; *************** function _TIMER1_isr *****************
 21366 ;; Defined at:
 21367 ;;		line 49 in file "Interrupt.c"
 21368 ;; Parameters:    Size  Location     Type
 21369 ;;		None
 21370 ;; Auto vars:     Size  Location     Type
 21371 ;;		None
 21372 ;; Return value:  Size  Location     Type
 21373 ;;		None               void
 21374 ;; Registers used:
 21375 ;;		wreg, status,2
 21376 ;; Tracked objects:
 21377 ;;		On entry : 0/0
 21378 ;;		On exit  : 0/0
 21379 ;;		Unchanged: 0/0
 21380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21385 ;;Total ram usage:        0 bytes
 21386 ;; Hardware stack levels used:    1
 21387 ;; This function calls:
 21388 ;;		Nothing
 21389 ;; This function is called by:
 21390 ;;		_chkisr
 21391 ;; This function uses a non-reentrant model
 21392 ;;
 21393                           
 21394                           	psect	text112
 21395  004DB8                     __ptext112:
 21396                           	opt stack 0
 21397  004DB8                     _TIMER1_isr:
 21398                           	opt stack 19
 21399                           
 21400                           ;Interrupt.c: 51: Nec_state = 0;
 21401                           
 21402                           ;incstack = 0
 21403  004DB8  0E00               	movlw	0
 21404  004DBA  6E61               	movwf	_Nec_state,c
 21405                           
 21406                           ;Interrupt.c: 52: INTCON2bits.INTEDG2 = 0;
 21407  004DBC  98F1               	bcf	intcon2,4,c	;volatile
 21408                           
 21409                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 0;
 21410  004DBE  90CD               	bcf	4045,0,c	;volatile
 21411                           
 21412                           ;Interrupt.c: 54: PIR1bits.TMR1IF = 0;
 21413  004DC0  909E               	bcf	3998,0,c	;volatile
 21414  004DC2  0012               	return		;funcret
 21415  004DC4                     __end_of_TIMER1_isr:
 21416                           	opt stack 0
 21417                           pclatu	equ	0xFFB
 21418                           pclath	equ	0xFFA
 21419                           tblptru	equ	0xFF8
 21420                           tblptrh	equ	0xFF7
 21421                           tblptrl	equ	0xFF6
 21422                           tablat	equ	0xFF5
 21423                           prodh	equ	0xFF4
 21424                           prodl	equ	0xFF3
 21425                           intcon	equ	0xFF2
 21426                           intcon2	equ	0xFF1
 21427                           intcon3	equ	0xFF0
 21428                           postinc0	equ	0xFEE
 21429                           fsr0h	equ	0xFEA
 21430                           fsr0l	equ	0xFE9
 21431                           wreg	equ	0xFE8
 21432                           postdec1	equ	0xFE5
 21433                           plusw1	equ	0xFE3
 21434                           fsr1h	equ	0xFE2
 21435                           fsr1l	equ	0xFE1
 21436                           indf2	equ	0xFDF
 21437                           postinc2	equ	0xFDE
 21438                           postdec2	equ	0xFDD
 21439                           plusw2	equ	0xFDB
 21440                           fsr2h	equ	0xFDA
 21441                           fsr2l	equ	0xFD9
 21442                           status	equ	0xFD8
 21443                           
 21444 ;; *************** function _INT2_isr *****************
 21445 ;; Defined at:
 21446 ;;		line 64 in file "Interrupt.c"
 21447 ;; Parameters:    Size  Location     Type
 21448 ;;		None
 21449 ;; Auto vars:     Size  Location     Type
 21450 ;;		None
 21451 ;; Return value:  Size  Location     Type
 21452 ;;		None               void
 21453 ;; Registers used:
 21454 ;;		wreg, status,2, status,0, cstack
 21455 ;; Tracked objects:
 21456 ;;		On entry : 0/0
 21457 ;;		On exit  : 0/0
 21458 ;;		Unchanged: 0/0
 21459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21462 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21463 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21464 ;;Total ram usage:        2 bytes
 21465 ;; Hardware stack levels used:    1
 21466 ;; Hardware stack levels required when called:    1
 21467 ;; This function calls:
 21468 ;;		_force_nec_state0
 21469 ;; This function is called by:
 21470 ;;		_chkisr
 21471 ;; This function uses a non-reentrant model
 21472 ;;
 21473                           
 21474                           	psect	text113
 21475  00291C                     __ptext113:
 21476                           	opt stack 0
 21477  00291C                     _INT2_isr:
 21478                           	opt stack 18
 21479                           
 21480                           ;Interrupt.c: 69: INTCON3bits.INT2IF = 0;
 21481                           
 21482                           ;incstack = 0
 21483  00291C  92F0               	bcf	intcon3,1,c	;volatile
 21484                           
 21485                           ;Interrupt.c: 70: if (Nec_state != 0)
 21486  00291E  5061               	movf	_Nec_state,w,c
 21487  002920  B4D8               	btfsc	status,2,c
 21488  002922  D0AF               	goto	i2l7542
 21489                           
 21490                           ;Interrupt.c: 71: {
 21491                           ;Interrupt.c: 72: Time_Elapsed = (TMR1H << 8) | TMR1L;
 21492  002924  50CE               	movf	4046,w,c	;volatile
 21493  002926  CFCF F001          	movff	4047,??_INT2_isr	;volatile
 21494  00292A  6A02               	clrf	(??_INT2_isr+1)& (0+255),c
 21495  00292C  C001  F002         	movff	??_INT2_isr,??_INT2_isr+1
 21496  002930  6A01               	clrf	??_INT2_isr,c
 21497  002932  1001               	iorwf	??_INT2_isr,w,c
 21498  002934  6E5A               	movwf	_Time_Elapsed,c
 21499  002936  5002               	movf	??_INT2_isr+1,w,c
 21500  002938  6E5B               	movwf	_Time_Elapsed+1,c
 21501                           
 21502                           ;Interrupt.c: 73: TMR1H = 0;
 21503  00293A  0E00               	movlw	0
 21504  00293C  6ECF               	movwf	4047,c	;volatile
 21505                           
 21506                           ;Interrupt.c: 74: TMR1L = 0;
 21507  00293E  0E00               	movlw	0
 21508  002940  6ECE               	movwf	4046,c	;volatile
 21509                           
 21510                           ;Interrupt.c: 75: }
 21511                           ;Interrupt.c: 77: switch(Nec_state)
 21512  002942  D09F               	goto	i2l7542
 21513  002944                     i2l7456:
 21514                           
 21515                           ;Interrupt.c: 80: {
 21516                           ;Interrupt.c: 83: TMR1H = 0;
 21517  002944  0E00               	movlw	0
 21518  002946  6ECF               	movwf	4047,c	;volatile
 21519                           
 21520                           ;Interrupt.c: 84: TMR1L = 0;
 21521  002948  0E00               	movlw	0
 21522  00294A  6ECE               	movwf	4046,c	;volatile
 21523                           
 21524                           ;Interrupt.c: 85: PIR1bits.TMR1IF = 0;
 21525  00294C  909E               	bcf	3998,0,c	;volatile
 21526                           
 21527                           ;Interrupt.c: 86: T1CON = 0x90;
 21528  00294E  0E90               	movlw	144
 21529  002950  6ECD               	movwf	4045,c	;volatile
 21530                           
 21531                           ;Interrupt.c: 87: T1CONbits.TMR1ON = 1;
 21532  002952  80CD               	bsf	4045,0,c	;volatile
 21533                           
 21534                           ;Interrupt.c: 88: bit_count = 0;
 21535  002954  0E00               	movlw	0
 21536  002956  0100               	movlb	0	; () banked
 21537  002958  6FCD               	movwf	_bit_count& (0+255),b
 21538                           
 21539                           ;Interrupt.c: 89: Nec_code = 0;
 21540  00295A  0E00               	movlw	0
 21541  00295C  0100               	movlb	0	; () banked
 21542  00295E  6FB4               	movwf	_Nec_code& (0+255),b
 21543  002960  0E00               	movlw	0
 21544  002962  6FB5               	movwf	(_Nec_code+1)& (0+255),b
 21545  002964  0E00               	movlw	0
 21546  002966  6FB6               	movwf	(_Nec_code+2)& (0+255),b
 21547  002968  0E00               	movlw	0
 21548  00296A  6FB7               	movwf	(_Nec_code+3)& (0+255),b
 21549                           
 21550                           ;Interrupt.c: 90: Nec_state = 1;
 21551  00296C  0E01               	movlw	1
 21552  00296E  6E61               	movwf	_Nec_state,c
 21553                           
 21554                           ; BSR set to: 0
 21555                           ;Interrupt.c: 91: INTCON2bits.INTEDG2 = 1;
 21556  002970  88F1               	bsf	intcon2,4,c	;volatile
 21557                           
 21558                           ; BSR set to: 0
 21559                           ;Interrupt.c: 92: PORTA = Nec_state;
 21560  002972  C061  FF80         	movff	_Nec_state,3968	;volatile
 21561                           
 21562                           ; BSR set to: 0
 21563                           ;Interrupt.c: 94: return;
 21564  002976  D096               	goto	i2l635
 21565  002978                     i2l7468:
 21566                           
 21567                           ;Interrupt.c: 98: {
 21568                           ;Interrupt.c: 101: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
 21569  002978  0E35               	movlw	53
 21570  00297A  5C5A               	subwf	_Time_Elapsed,w,c
 21571  00297C  0E21               	movlw	33
 21572  00297E  585B               	subwfb	_Time_Elapsed+1,w,c
 21573  002980  A0D8               	btfss	status,0,c
 21574  002982  D009               	goto	i2l7476
 21575  002984  0E1C               	movlw	28
 21576  002986  5C5A               	subwf	_Time_Elapsed,w,c
 21577  002988  0E25               	movlw	37
 21578  00298A  585B               	subwfb	_Time_Elapsed+1,w,c
 21579  00298C  B0D8               	btfsc	status,0,c
 21580  00298E  D003               	goto	i2l7476
 21581                           
 21582                           ;Interrupt.c: 102: {
 21583                           ;Interrupt.c: 104: Nec_state = 2;
 21584  002990  0E02               	movlw	2
 21585  002992  6E61               	movwf	_Nec_state,c
 21586  002994  D027               	goto	i2l7502
 21587  002996                     i2l7476:
 21588                           
 21589                           ;Interrupt.c: 109: else
 21590                           ;Interrupt.c: 110: {
 21591                           ;Interrupt.c: 112: force_nec_state0();
 21592  002996  EC02  F027         	call	_force_nec_state0	;wreg free
 21593  00299A  D02A               	goto	i2l7506
 21594  00299C  D029               	goto	i2l7506
 21595                           
 21596                           ;Interrupt.c: 116: return;
 21597                           
 21598                           ;Interrupt.c: 114: }
 21599                           ;Interrupt.c: 115: INTCON2bits.INTEDG2 = 0;
 21600  00299E  D082               	goto	i2l635
 21601  0029A0                     i2l7482:
 21602                           
 21603                           ;Interrupt.c: 120: {
 21604                           ;Interrupt.c: 122: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
 21605  0029A0  0EA1               	movlw	161
 21606  0029A2  5C5A               	subwf	_Time_Elapsed,w,c
 21607  0029A4  0E0F               	movlw	15
 21608  0029A6  585B               	subwfb	_Time_Elapsed+1,w,c
 21609  0029A8  A0D8               	btfss	status,0,c
 21610  0029AA  D009               	goto	i2l7490
 21611  0029AC  0E88               	movlw	136
 21612  0029AE  5C5A               	subwf	_Time_Elapsed,w,c
 21613  0029B0  0E13               	movlw	19
 21614  0029B2  585B               	subwfb	_Time_Elapsed+1,w,c
 21615  0029B4  B0D8               	btfsc	status,0,c
 21616  0029B6  D003               	goto	i2l7490
 21617  0029B8                     
 21618                           ;Interrupt.c: 123: {
 21619                           ;Interrupt.c: 124: Nec_state = 3;
 21620  0029B8  0E03               	movlw	3
 21621  0029BA  6E61               	movwf	_Nec_state,c
 21622  0029BC  D05A               	goto	i2l7532
 21623  0029BE                     i2l7490:
 21624                           
 21625                           ;Interrupt.c: 128: else
 21626                           ;Interrupt.c: 129: {
 21627                           ;Interrupt.c: 131: force_nec_state0();
 21628  0029BE  EC02  F027         	call	_force_nec_state0	;wreg free
 21629  0029C2  D05D               	goto	i2l7536
 21630  0029C4  D05C               	goto	i2l7536
 21631                           
 21632                           ;Interrupt.c: 135: return;
 21633                           
 21634                           ;Interrupt.c: 133: }
 21635                           ;Interrupt.c: 134: INTCON2bits.INTEDG2 = 1;
 21636  0029C6  D06E               	goto	i2l635
 21637  0029C8                     i2l7496:
 21638                           
 21639                           ;Interrupt.c: 139: {
 21640                           ;Interrupt.c: 141: if(Time_Elapsed > 400 && Time_Elapsed < 700)
 21641  0029C8  0E91               	movlw	145
 21642  0029CA  5C5A               	subwf	_Time_Elapsed,w,c
 21643  0029CC  0E01               	movlw	1
 21644  0029CE  585B               	subwfb	_Time_Elapsed+1,w,c
 21645  0029D0  A0D8               	btfss	status,0,c
 21646  0029D2  D00B               	goto	i2l7504
 21647  0029D4  0EBC               	movlw	188
 21648  0029D6  5C5A               	subwf	_Time_Elapsed,w,c
 21649  0029D8  0E02               	movlw	2
 21650  0029DA  585B               	subwfb	_Time_Elapsed+1,w,c
 21651  0029DC  B0D8               	btfsc	status,0,c
 21652  0029DE  D005               	goto	i2l7504
 21653                           
 21654                           ;Interrupt.c: 142: {
 21655                           ;Interrupt.c: 143: Nec_state = 4;
 21656  0029E0  0E04               	movlw	4
 21657  0029E2  D7D7               	goto	L16
 21658  0029E4                     i2l7502:
 21659                           
 21660                           ;Interrupt.c: 144: PORTA = Nec_state;
 21661  0029E4  C061  FF80         	movff	_Nec_state,3968	;volatile
 21662                           
 21663                           ;Interrupt.c: 146: }
 21664  0029E8  D003               	goto	i2l7506
 21665  0029EA                     i2l7504:
 21666                           
 21667                           ;Interrupt.c: 147: else
 21668                           ;Interrupt.c: 148: {
 21669                           ;Interrupt.c: 150: force_nec_state0();
 21670  0029EA  EC02  F027         	call	_force_nec_state0	;wreg free
 21671  0029EE  D000               	goto	i2l7506
 21672  0029F0                     i2l7506:
 21673                           
 21674                           ;Interrupt.c: 152: }
 21675                           ;Interrupt.c: 153: INTCON2bits.INTEDG2 = 0;
 21676  0029F0  98F1               	bcf	intcon2,4,c	;volatile
 21677                           
 21678                           ;Interrupt.c: 154: return;
 21679  0029F2  D058               	goto	i2l635
 21680  0029F4                     i2l7510:
 21681                           
 21682                           ;Interrupt.c: 158: {
 21683                           ;Interrupt.c: 160: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
 21684  0029F4  0E91               	movlw	145
 21685  0029F6  5C5A               	subwf	_Time_Elapsed,w,c
 21686  0029F8  0E01               	movlw	1
 21687  0029FA  585B               	subwfb	_Time_Elapsed+1,w,c
 21688  0029FC  A0D8               	btfss	status,0,c
 21689  0029FE  D03C               	goto	i2l7534
 21690  002A00  0E08               	movlw	8
 21691  002A02  5C5A               	subwf	_Time_Elapsed,w,c
 21692  002A04  0E07               	movlw	7
 21693  002A06  585B               	subwfb	_Time_Elapsed+1,w,c
 21694  002A08  B0D8               	btfsc	status,0,c
 21695  002A0A  D036               	goto	i2l7534
 21696                           
 21697                           ;Interrupt.c: 161: {
 21698                           ;Interrupt.c: 162: Nec_code = Nec_code << 1;
 21699  002A0C  90D8               	bcf	status,0,c
 21700  002A0E  0100               	movlb	0	; () banked
 21701  002A10  35B4               	rlcf	_Nec_code& (0+255),w,b
 21702  002A12  0100               	movlb	0	; () banked
 21703  002A14  6FB4               	movwf	_Nec_code& (0+255),b
 21704  002A16  0100               	movlb	0	; () banked
 21705  002A18  35B5               	rlcf	(_Nec_code+1)& (0+255),w,b
 21706  002A1A  0100               	movlb	0	; () banked
 21707  002A1C  6FB5               	movwf	(_Nec_code+1)& (0+255),b
 21708  002A1E  0100               	movlb	0	; () banked
 21709  002A20  35B6               	rlcf	(_Nec_code+2)& (0+255),w,b
 21710  002A22  0100               	movlb	0	; () banked
 21711  002A24  6FB6               	movwf	(_Nec_code+2)& (0+255),b
 21712  002A26  0100               	movlb	0	; () banked
 21713  002A28  35B7               	rlcf	(_Nec_code+3)& (0+255),w,b
 21714  002A2A  0100               	movlb	0	; () banked
 21715  002A2C  6FB7               	movwf	(_Nec_code+3)& (0+255),b
 21716                           
 21717                           ;Interrupt.c: 163: if (Time_Elapsed > 1000)
 21718  002A2E  0EE9               	movlw	233
 21719  002A30  5C5A               	subwf	_Time_Elapsed,w,c
 21720  002A32  0E03               	movlw	3
 21721  002A34  585B               	subwfb	_Time_Elapsed+1,w,c
 21722  002A36  A0D8               	btfss	status,0,c
 21723  002A38  D008               	goto	i2l7518
 21724                           
 21725                           ; BSR set to: 0
 21726                           ;Interrupt.c: 164: Nec_code++;
 21727  002A3A  0E01               	movlw	1
 21728  002A3C  0100               	movlb	0	; () banked
 21729  002A3E  27B4               	addwf	_Nec_code& (0+255),f,b
 21730  002A40  0E00               	movlw	0
 21731  002A42  23B5               	addwfc	(_Nec_code+1)& (0+255),f,b
 21732  002A44  23B6               	addwfc	(_Nec_code+2)& (0+255),f,b
 21733  002A46  23B7               	addwfc	(_Nec_code+3)& (0+255),f,b
 21734  002A48  D000               	goto	i2l7518
 21735  002A4A                     i2l7518:
 21736                           
 21737                           ; BSR set to: 0
 21738                           ;Interrupt.c: 165: bit_count++;
 21739  002A4A  0100               	movlb	0	; () banked
 21740  002A4C  2BCD               	incf	_bit_count& (0+255),f,b
 21741                           
 21742                           ; BSR set to: 0
 21743                           ;Interrupt.c: 166: if(bit_count > 31)
 21744  002A4E  0E1F               	movlw	31
 21745  002A50  0100               	movlb	0	; () banked
 21746  002A52  65CD               	cpfsgt	_bit_count& (0+255),b
 21747  002A54  D7B1               	goto	L17
 21748                           
 21749                           ; BSR set to: 0
 21750                           ;Interrupt.c: 167: {
 21751                           ;Interrupt.c: 168: Nec_Button = Nec_code >> 8;
 21752  002A56  C0B5  F0C9         	movff	_Nec_code+1,_Nec_Button
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;Interrupt.c: 169: Nec_state = 0;
 21756  002A5A  0E00               	movlw	0
 21757  002A5C  6E61               	movwf	_Nec_state,c
 21758                           
 21759                           ; BSR set to: 0
 21760                           ;Interrupt.c: 170: PORTA = Nec_state;
 21761  002A5E  C061  FF80         	movff	_Nec_state,3968	;volatile
 21762                           
 21763                           ;Interrupt.c: 172: Nec_ok = 1;
 21764  002A62  0E00               	movlw	0
 21765  002A64  0100               	movlb	0	; () banked
 21766  002A66  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
 21767  002A68  0E01               	movlw	1
 21768  002A6A  6FBB               	movwf	_Nec_ok& (0+255),b
 21769                           
 21770                           ; BSR set to: 0
 21771                           ;Interrupt.c: 174: INTCON3bits.INT2IE = 0;
 21772  002A6C  98F0               	bcf	intcon3,4,c	;volatile
 21773                           
 21774                           ;Interrupt.c: 175: }
 21775  002A6E  D007               	goto	i2l7536
 21776                           
 21777                           ; BSR set to: 0
 21778  002A70  D7A3               	goto	L17
 21779  002A72                     i2l7532:
 21780                           
 21781                           ; BSR set to: 0
 21782                           ;Interrupt.c: 179: PORTA = Nec_state;
 21783  002A72  C061  FF80         	movff	_Nec_state,3968	;volatile
 21784                           
 21785                           ; BSR set to: 0
 21786                           ;Interrupt.c: 181: }
 21787                           ;Interrupt.c: 182: }
 21788  002A76  D003               	goto	i2l7536
 21789  002A78                     i2l7534:
 21790                           
 21791                           ;Interrupt.c: 184: else
 21792                           ;Interrupt.c: 185: {
 21793                           ;Interrupt.c: 187: force_nec_state0();
 21794  002A78  EC02  F027         	call	_force_nec_state0	;wreg free
 21795  002A7C  D000               	goto	i2l7536
 21796  002A7E                     i2l7536:
 21797                           
 21798                           ;Interrupt.c: 189: }
 21799                           ;Interrupt.c: 190: INTCON2bits.INTEDG2 = 1;
 21800  002A7E  88F1               	bsf	intcon2,4,c	;volatile
 21801                           
 21802                           ;Interrupt.c: 192: }
 21803                           ;Interrupt.c: 193: }
 21804                           
 21805                           ;Interrupt.c: 191: return;
 21806  002A80  D011               	goto	i2l635
 21807  002A82                     i2l7542:
 21808  002A82  5061               	movf	_Nec_state,w,c
 21809                           
 21810                           ; Switch size 1, requested type "space"
 21811                           ; Number of cases is 5, Range of values is 0 to 4
 21812                           ; switch strategies available:
 21813                           ; Name         Instructions Cycles
 21814                           ; simple_byte           16     9 (average)
 21815                           ;	Chosen strategy is simple_byte
 21816  002A84  0A00               	xorlw	0	; case 0
 21817  002A86  B4D8               	btfsc	status,2,c
 21818  002A88  D75D               	goto	i2l7456
 21819  002A8A  0A01               	xorlw	1	; case 1
 21820  002A8C  B4D8               	btfsc	status,2,c
 21821  002A8E  D774               	goto	i2l7468
 21822  002A90  0A03               	xorlw	3	; case 2
 21823  002A92  B4D8               	btfsc	status,2,c
 21824  002A94  D785               	goto	i2l7482
 21825  002A96  0A01               	xorlw	1	; case 3
 21826  002A98  B4D8               	btfsc	status,2,c
 21827  002A9A  D796               	goto	i2l7496
 21828  002A9C  0A07               	xorlw	7	; case 4
 21829  002A9E  B4D8               	btfsc	status,2,c
 21830  002AA0  D7A9               	goto	i2l7510
 21831  002AA2  D000               	goto	i2l635
 21832  002AA4                     i2l635:
 21833  002AA4  0012               	return		;funcret
 21834  002AA6                     __end_of_INT2_isr:
 21835                           	opt stack 0
 21836                           pclatu	equ	0xFFB
 21837                           pclath	equ	0xFFA
 21838                           tblptru	equ	0xFF8
 21839                           tblptrh	equ	0xFF7
 21840                           tblptrl	equ	0xFF6
 21841                           tablat	equ	0xFF5
 21842                           prodh	equ	0xFF4
 21843                           prodl	equ	0xFF3
 21844                           intcon	equ	0xFF2
 21845                           intcon2	equ	0xFF1
 21846                           intcon3	equ	0xFF0
 21847                           postinc0	equ	0xFEE
 21848                           fsr0h	equ	0xFEA
 21849                           fsr0l	equ	0xFE9
 21850                           wreg	equ	0xFE8
 21851                           postdec1	equ	0xFE5
 21852                           plusw1	equ	0xFE3
 21853                           fsr1h	equ	0xFE2
 21854                           fsr1l	equ	0xFE1
 21855                           indf2	equ	0xFDF
 21856                           postinc2	equ	0xFDE
 21857                           postdec2	equ	0xFDD
 21858                           plusw2	equ	0xFDB
 21859                           fsr2h	equ	0xFDA
 21860                           fsr2l	equ	0xFD9
 21861                           status	equ	0xFD8
 21862                           
 21863 ;; *************** function _force_nec_state0 *****************
 21864 ;; Defined at:
 21865 ;;		line 57 in file "Interrupt.c"
 21866 ;; Parameters:    Size  Location     Type
 21867 ;;		None
 21868 ;; Auto vars:     Size  Location     Type
 21869 ;;		None
 21870 ;; Return value:  Size  Location     Type
 21871 ;;		None               void
 21872 ;; Registers used:
 21873 ;;		wreg, status,2
 21874 ;; Tracked objects:
 21875 ;;		On entry : 0/0
 21876 ;;		On exit  : 0/0
 21877 ;;		Unchanged: 0/0
 21878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21883 ;;Total ram usage:        0 bytes
 21884 ;; Hardware stack levels used:    1
 21885 ;; This function calls:
 21886 ;;		Nothing
 21887 ;; This function is called by:
 21888 ;;		_INT2_isr
 21889 ;; This function uses a non-reentrant model
 21890 ;;
 21891                           
 21892                           	psect	text114
 21893  004E04                     __ptext114:
 21894                           	opt stack 0
 21895  004E04                     _force_nec_state0:
 21896                           	opt stack 18
 21897                           
 21898                           ;Interrupt.c: 59: Nec_state=0;
 21899                           
 21900                           ;incstack = 0
 21901  004E04  0E00               	movlw	0
 21902  004E06  6E61               	movwf	_Nec_state,c
 21903                           
 21904                           ;Interrupt.c: 60: T1CONbits.TMR1ON = 0;
 21905  004E08  90CD               	bcf	4045,0,c	;volatile
 21906  004E0A  0012               	return		;funcret
 21907  004E0C                     __end_of_force_nec_state0:
 21908                           	opt stack 0
 21909                           pclatu	equ	0xFFB
 21910                           pclath	equ	0xFFA
 21911                           tblptru	equ	0xFF8
 21912                           tblptrh	equ	0xFF7
 21913                           tblptrl	equ	0xFF6
 21914                           tablat	equ	0xFF5
 21915                           prodh	equ	0xFF4
 21916                           prodl	equ	0xFF3
 21917                           intcon	equ	0xFF2
 21918                           intcon2	equ	0xFF1
 21919                           intcon3	equ	0xFF0
 21920                           postinc0	equ	0xFEE
 21921                           fsr0h	equ	0xFEA
 21922                           fsr0l	equ	0xFE9
 21923                           wreg	equ	0xFE8
 21924                           postdec1	equ	0xFE5
 21925                           plusw1	equ	0xFE3
 21926                           fsr1h	equ	0xFE2
 21927                           fsr1l	equ	0xFE1
 21928                           indf2	equ	0xFDF
 21929                           postinc2	equ	0xFDE
 21930                           postdec2	equ	0xFDD
 21931                           plusw2	equ	0xFDB
 21932                           fsr2h	equ	0xFDA
 21933                           fsr2l	equ	0xFD9
 21934                           status	equ	0xFD8
 21935                           
 21936 ;; *************** function _INT1_isr *****************
 21937 ;; Defined at:
 21938 ;;		line 196 in file "Interrupt.c"
 21939 ;; Parameters:    Size  Location     Type
 21940 ;;		None
 21941 ;; Auto vars:     Size  Location     Type
 21942 ;;		None
 21943 ;; Return value:  Size  Location     Type
 21944 ;;		None               void
 21945 ;; Registers used:
 21946 ;;		wreg, status,2
 21947 ;; Tracked objects:
 21948 ;;		On entry : 0/0
 21949 ;;		On exit  : 0/0
 21950 ;;		Unchanged: 0/0
 21951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21956 ;;Total ram usage:        0 bytes
 21957 ;; Hardware stack levels used:    1
 21958 ;; This function calls:
 21959 ;;		Nothing
 21960 ;; This function is called by:
 21961 ;;		_chkisr
 21962 ;; This function uses a non-reentrant model
 21963 ;;
 21964                           
 21965                           	psect	text115
 21966  004DE2                     __ptext115:
 21967                           	opt stack 0
 21968  004DE2                     _INT1_isr:
 21969                           	opt stack 19
 21970                           
 21971                           ;Interrupt.c: 198: INTCON3bits.INT1IF == 0;
 21972                           
 21973                           ;incstack = 0
 21974  004DE2  50F0               	movf	intcon3,w,c	;volatile
 21975                           
 21976                           ;Interrupt.c: 199: INT1_flag = 1;
 21977  004DE4  0E01               	movlw	1
 21978  004DE6  0100               	movlb	0	; () banked
 21979  004DE8  6FC5               	movwf	_INT1_flag& (0+255),b
 21980                           
 21981                           ; BSR set to: 0
 21982  004DEA  0012               	return		;funcret
 21983  004DEC                     __end_of_INT1_isr:
 21984                           	opt stack 0
 21985                           pclatu	equ	0xFFB
 21986                           pclath	equ	0xFFA
 21987                           tblptru	equ	0xFF8
 21988                           tblptrh	equ	0xFF7
 21989                           tblptrl	equ	0xFF6
 21990                           tablat	equ	0xFF5
 21991                           prodh	equ	0xFF4
 21992                           prodl	equ	0xFF3
 21993                           intcon	equ	0xFF2
 21994                           intcon2	equ	0xFF1
 21995                           intcon3	equ	0xFF0
 21996                           postinc0	equ	0xFEE
 21997                           fsr0h	equ	0xFEA
 21998                           fsr0l	equ	0xFE9
 21999                           wreg	equ	0xFE8
 22000                           postdec1	equ	0xFE5
 22001                           plusw1	equ	0xFE3
 22002                           fsr1h	equ	0xFE2
 22003                           fsr1l	equ	0xFE1
 22004                           indf2	equ	0xFDF
 22005                           postinc2	equ	0xFDE
 22006                           postdec2	equ	0xFDD
 22007                           plusw2	equ	0xFDB
 22008                           fsr2h	equ	0xFDA
 22009                           fsr2l	equ	0xFD9
 22010                           status	equ	0xFD8
 22011                           
 22012 ;; *************** function _INT0_isr *****************
 22013 ;; Defined at:
 22014 ;;		line 203 in file "Interrupt.c"
 22015 ;; Parameters:    Size  Location     Type
 22016 ;;		None
 22017 ;; Auto vars:     Size  Location     Type
 22018 ;;  k               2    0[COMRAM] int 
 22019 ;; Return value:  Size  Location     Type
 22020 ;;		None               void
 22021 ;; Registers used:
 22022 ;;		wreg, status,2, status,0
 22023 ;; Tracked objects:
 22024 ;;		On entry : 0/0
 22025 ;;		On exit  : 0/0
 22026 ;;		Unchanged: 0/0
 22027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22031 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22032 ;;Total ram usage:        2 bytes
 22033 ;; Hardware stack levels used:    1
 22034 ;; This function calls:
 22035 ;;		Nothing
 22036 ;; This function is called by:
 22037 ;;		_chkisr
 22038 ;; This function uses a non-reentrant model
 22039 ;;
 22040                           
 22041                           	psect	text116
 22042  004954                     __ptext116:
 22043                           	opt stack 0
 22044  004954                     _INT0_isr:
 22045                           	opt stack 19
 22046                           
 22047                           ;Interrupt.c: 205: int k;
 22048                           ;Interrupt.c: 206: for (k=0; k<20000;k++);
 22049                           
 22050                           ; BSR set to: 0
 22051                           ;incstack = 0
 22052  004954  0E00               	movlw	0
 22053  004956  6E02               	movwf	INT0_isr@k+1,c
 22054  004958  0E00               	movlw	0
 22055  00495A  6E01               	movwf	INT0_isr@k,c
 22056  00495C                     i2l7432:
 22057  00495C  BE02               	btfsc	INT0_isr@k+1,7,c
 22058  00495E  D008               	goto	i2l7436
 22059  004960  0E20               	movlw	32
 22060  004962  5C01               	subwf	INT0_isr@k,w,c
 22061  004964  0E4E               	movlw	78
 22062  004966  5802               	subwfb	INT0_isr@k+1,w,c
 22063  004968  B0D8               	btfsc	status,0,c
 22064  00496A  D005               	goto	i2l658
 22065  00496C  D001               	goto	i2l7436
 22066  00496E  D003               	goto	i2l658
 22067  004970                     i2l7436:
 22068  004970  4A01               	infsnz	INT0_isr@k,f,c
 22069  004972  2A02               	incf	INT0_isr@k+1,f,c
 22070  004974  D7F3               	goto	i2l7432
 22071  004976                     i2l658:
 22072                           
 22073                           ;Interrupt.c: 207: INTCONbits.INT0IF = 0;
 22074  004976  92F2               	bcf	intcon,1,c	;volatile
 22075                           
 22076                           ;Interrupt.c: 208: INT0_flag = 1;
 22077  004978  0E01               	movlw	1
 22078  00497A  0100               	movlb	0	; () banked
 22079  00497C  6FC4               	movwf	_INT0_flag& (0+255),b
 22080                           
 22081                           ; BSR set to: 0
 22082  00497E  0012               	return		;funcret
 22083  004980                     __end_of_INT0_isr:
 22084                           	opt stack 0
 22085                           pclatu	equ	0xFFB
 22086                           pclath	equ	0xFFA
 22087                           tblptru	equ	0xFF8
 22088                           tblptrh	equ	0xFF7
 22089                           tblptrl	equ	0xFF6
 22090                           tablat	equ	0xFF5
 22091                           prodh	equ	0xFF4
 22092                           prodl	equ	0xFF3
 22093                           intcon	equ	0xFF2
 22094                           intcon2	equ	0xFF1
 22095                           intcon3	equ	0xFF0
 22096                           postinc0	equ	0xFEE
 22097                           fsr0h	equ	0xFEA
 22098                           fsr0l	equ	0xFE9
 22099                           wreg	equ	0xFE8
 22100                           postdec1	equ	0xFE5
 22101                           plusw1	equ	0xFE3
 22102                           fsr1h	equ	0xFE2
 22103                           fsr1l	equ	0xFE1
 22104                           indf2	equ	0xFDF
 22105                           postinc2	equ	0xFDE
 22106                           postdec2	equ	0xFDD
 22107                           plusw2	equ	0xFDB
 22108                           fsr2h	equ	0xFDA
 22109                           fsr2l	equ	0xFD9
 22110                           status	equ	0xFD8
 22111                           pclatu	equ	0xFFB
 22112                           pclath	equ	0xFFA
 22113                           tblptru	equ	0xFF8
 22114                           tblptrh	equ	0xFF7
 22115                           tblptrl	equ	0xFF6
 22116                           tablat	equ	0xFF5
 22117                           prodh	equ	0xFF4
 22118                           prodl	equ	0xFF3
 22119                           intcon	equ	0xFF2
 22120                           intcon2	equ	0xFF1
 22121                           intcon3	equ	0xFF0
 22122                           postinc0	equ	0xFEE
 22123                           fsr0h	equ	0xFEA
 22124                           fsr0l	equ	0xFE9
 22125                           wreg	equ	0xFE8
 22126                           postdec1	equ	0xFE5
 22127                           plusw1	equ	0xFE3
 22128                           fsr1h	equ	0xFE2
 22129                           fsr1l	equ	0xFE1
 22130                           indf2	equ	0xFDF
 22131                           postinc2	equ	0xFDE
 22132                           postdec2	equ	0xFDD
 22133                           plusw2	equ	0xFDB
 22134                           fsr2h	equ	0xFDA
 22135                           fsr2l	equ	0xFD9
 22136                           status	equ	0xFD8
 22137                           
 22138                           	psect	rparam
 22139  0000                     pclatu	equ	0xFFB
 22140                           pclath	equ	0xFFA
 22141                           tblptru	equ	0xFF8
 22142                           tblptrh	equ	0xFF7
 22143                           tblptrl	equ	0xFF6
 22144                           tablat	equ	0xFF5
 22145                           prodh	equ	0xFF4
 22146                           prodl	equ	0xFF3
 22147                           intcon	equ	0xFF2
 22148                           intcon2	equ	0xFF1
 22149                           intcon3	equ	0xFF0
 22150                           postinc0	equ	0xFEE
 22151                           fsr0h	equ	0xFEA
 22152                           fsr0l	equ	0xFE9
 22153                           wreg	equ	0xFE8
 22154                           postdec1	equ	0xFE5
 22155                           plusw1	equ	0xFE3
 22156                           fsr1h	equ	0xFE2
 22157                           fsr1l	equ	0xFE1
 22158                           indf2	equ	0xFDF
 22159                           postinc2	equ	0xFDE
 22160                           postdec2	equ	0xFDD
 22161                           plusw2	equ	0xFDB
 22162                           fsr2h	equ	0xFDA
 22163                           fsr2l	equ	0xFD9
 22164                           status	equ	0xFD8


Data Sizes:
    Strings     460
    Constant    625
    Data        174
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     107
    BANK0           128     52     124
    BANK1           256     23     163
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_46(CODE[5]), STR_45(CODE[5]), STR_44(CODE[12]), STR_39(CODE[15]), 
		 -> STR_38(CODE[12]), STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[5]), 
		 -> STR_30(CODE[5]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[11]), STR_24(CODE[4]), STR_23(CODE[5]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[5]), STR_19(CODE[12]), 
		 -> STR_18(CODE[11]), STR_17(CODE[11]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[2]), STR_13(CODE[3]), STR_12(CODE[13]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_43(CODE[29]), STR_42(CODE[20]), STR_41(CODE[21]), STR_40(CODE[30]), 
		 -> STR_37(CODE[29]), STR_36(CODE[20]), STR_35(CODE[20]), STR_34(CODE[30]), 
		 -> STR_11(CODE[33]), STR_10(CODE[27]), STR_9(CODE[34]), STR_8(CODE[22]), 
		 -> STR_7(CODE[29]), STR_6(CODE[20]), STR_5(CODE[21]), STR_4(CODE[30]), 
		 -> STR_3(CODE[22]), STR_2(CODE[19]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 


Critical Paths under _main in COMRAM

    _main->_check_for_button_input
    _Update_Screen->_drawtext
    _Setup_Fan_Temp->_check_for_button_input
    _Initialize_Setup_Fan_Screen->_drawtext
    _Increase_Fan_Temp->_Update_Setup_Fan_Screen
    _Decrease_Fan_Temp->_Update_Setup_Fan_Screen
    _Update_Setup_Fan_Screen->_drawtext
    _Increase_Duty_Cycle->_do_update_pwm
    _Do_Setup_Time->_check_for_button_input
    _get_RPM->___awdiv
    _Set_D2_RGB->___awdiv
    _Set_D1_RGB->___awdiv
    _Read_Volt->___ftdiv
    ___awtoft->___ftpack
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Do_Save_New_Time->_DS3231_Write_Time
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _Update_Setup_Time_Screen->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _DS1621_Read_Temp->_I2C_Read
    _printf->___ftadd
    _scale->___awmod
    _fround->___awmod
    ___awmod->___fttol
    ___awdiv->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _Decrease_Duty_Cycle->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___awdiv
    ___ftdiv->___ftmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr
    _chkisr->_INT2_isr

Critical Paths under _main in BANK0

    _main->_printf
    _Turn_On_Fan->_printf
    _Setup_Fan_Temp->_printf
    _Do_Setup_Time->_printf
    _check_for_button_input->_printf
    _Turn_Off_Fan->_printf
    _printf->___ftsub

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_check_for_button_input
    _Setup_Fan_Temp->_check_for_button_input
    _Do_Setup_Time->_check_for_button_input

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1806233
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                _Decrease_Duty_Cycle
                        _Do_Beep_Bad
                       _Do_Beep_Good
     _Do_Change_Fan_Timer_Mode_Minus
      _Do_Change_Fan_Timer_Mode_Plus
                            _Do_Init
                      _Do_Setup_Time
                _Increase_Duty_Cycle
                  _Initialize_Screen
                        _Monitor_Fan
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
                     _Setup_Fan_Temp
                         _Toggle_Fan
                       _Turn_Off_Fan
                      _Update_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        6     6      0   49314
                                             73 COMRAM     6     6      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0  155874
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   83524
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Setup_Fan_Temp                                       0     0      0  427567
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _Decrease_Fan_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
               _Do_Save_New_Fan_Temp
                  _Increase_Fan_Temp
        _Initialize_Setup_Fan_Screen
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
            _Update_Setup_Fan_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Fan_Screen                          0     0      0   48935
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Fan_Temp                                    0     0      0   40516
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Fan_Temp                                 0     0      0   49230
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Fan_Temp                                    0     0      0   40516
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Fan_Screen                              3     3      0   40516
                                             73 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Increase_Duty_Cycle                                  0     0      0   22394
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  597705
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
                        _Monitor_Fan
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
           _Update_Setup_Time_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
                          _bcd_2_dec
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    9161
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                              24    24      0   72520
                                             88 COMRAM     1     1      0
                                              0 BANK1     23    23      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Set_D2_RGB                                           4     2      2    5973
                                             30 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Set_D1_RGB                                           4     4      0    5744
                                             30 COMRAM     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Read_Volt                                            9     6      3    8948
                                             60 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (3) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2386
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Monitor_Fan                                          0     0      0   83794
                       _Turn_Off_Fan
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                      10     6      4     270
                                             16 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   57703
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   40414
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0    9100
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0    9100
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0    9122
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0    9122
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   49230
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   59593
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _Initialize_Screen                                    0     0      0   48935
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    2937
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    1766
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    1585
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    9404
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    4612
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    4612
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    4522
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             4     2      2    4522
                                             22 COMRAM     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0   10363
                                             73 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2   10204
                                             66 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     3     3      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   40414
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   40414
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   30306
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   17426
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    8768
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    2442
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3367
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3     814
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      23
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   73172
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                          _Init_UART
                       _Turn_Off_Fan
 ---------------------------------------------------------------------------------
 (1) _Turn_Off_Fan                                         0     0      0   72350
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   72350
                                              6 BANK0     46    32     14
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   19263
                                             66 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   18984
                                             66 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3482
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    4463
                                             60 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    5645
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             16 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             16 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2355
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4079
                                              0 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3763
                                             76 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     978
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Change_Fan_Timer_Mode_Plus                        0     0      0   22440
                        _Do_Beep_Bad
                       _Do_Beep_Good
 ---------------------------------------------------------------------------------
 (1) _Do_Change_Fan_Timer_Mode_Minus                       0     0      0   22440
                        _Do_Beep_Bad
                       _Do_Beep_Good
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   11220
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   11220
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Decrease_Duty_Cycle                                  0     0      0   22394
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0   11220
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0   11174
                                             60 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2219
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     826
                                             45 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4976
                                             30 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2958
                                             45 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2188
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_Half_Sec                                        2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0      46
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Duty_Cycle
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_Half_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_Half_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Change_Fan_Timer_Mode_Minus
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Do_Change_Fan_Timer_Mode_Plus
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Init_UART
       _OpenUSART
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Time
     _DS1621_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Monitor_Fan
       _Turn_Off_Fan
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _get_duty_cycle
     _Read_Volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
     _Set_D1_RGB
       ___awdiv
         ___wmul (ARG)
     _Set_D2_RGB
       ___awdiv
         ___wmul (ARG)
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     ___awdiv
       ___wmul (ARG)
     ___ftge
     ___wmul
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _get_RPM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Increase_Duty_Cycle
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Fan
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   _Set_D1_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_D2_RGB
     ___awdiv
       ___wmul (ARG)
   _Setup_Fan_Temp
     _DS1621_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Fan_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Read_Volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
     _Set_D1_RGB
       ___awdiv
         ___wmul (ARG)
     _Set_D2_RGB
       ___awdiv
         ___wmul (ARG)
     _Update_Setup_Fan_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     ___awdiv
       ___wmul (ARG)
     ___ftge
     ___wmul
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _get_RPM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Turn_Off_Fan
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___ftge
   ___wmul
   _check_for_button_input
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___awdiv
       ___wmul (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
     _isdigit
     _putch
     _scale
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)

 _chkisr (ROOT)
   _INT0_isr
   _INT1_isr
   _INT2_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     17      A3       7       63.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     34      7C       5       96.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      6B       1       84.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18A      34        0.0%
DATA                 0      0     18A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 26 18:04:52 2024

                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                            l40 4040  
                                          l50 46CC                                            l47 45B2  
                                          l55 4C7A                                            l72 4A1C  
                                          l82 4952                                            l67 489E  
                                          l77 4926                                  ___awdiv@sign 001C  
                        __size_of_Turn_On_Fan 0022                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 004A                                  ___ftadd@exp1 0058  
                                ___ftadd@exp2 0057                                  ___ftadd@sign 0056  
                                         l112 468E                                           l115 4796  
                                         l311 3840                                           l208 4CC8  
                                         l312 37AC                                           l314 381C  
                                         l315 383E                                           l252 48CE  
                                         l505 4D94                                           l258 3FBC  
                                         l274 2D7E                                           l283 2CD4  
                                         l451 49A8                                           l276 2C58  
                                         l454 446E                                           l198 4742  
                                         l446 3B20                                           l560 483C  
                                         l490 4292                                           l468 4C16  
                                         l493 49D6                                           l496 49F6  
                                         l960 1AC8                                           _FAN 00C1  
                                         l979 1348                                           _PR2 000FCB  
                                         _day 0063                             _Deactivate_Buzzer 4DFC  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 00CF                                           _nbr 00BD  
                                         _rpm 005C                         __size_of_Turn_Off_Fan 001C  
                                         _rps 00BF                                           _txt 005E  
                                ___awmod@sign 0042                                           prod 000FF3  
                                         wreg 000FE8                                 _Increase_Time 3B22  
                          ?_Deactivate_Buzzer 0001               Update_Setup_Fan_Screen@dc_char1 004A  
             Update_Setup_Fan_Screen@dc_char2 004B               Update_Setup_Fan_Screen@dc_char3 004C  
                                  _Fan_SW_Txt 00E8        Update_Setup_Screen_Cursor_Forward@xinc 0030  
      Update_Setup_Screen_Cursor_Forward@yinc 002F                               ??_fillRectangle 001D  
                                __CFG_LVP$OFF 000000                       _TFT_GreenTab_Initialize 48D0  
                                ___ftdiv@cntr 0037                                  ___ftdiv@sign 003C  
                                __CFG_WDT$OFF 000000                                          l1102 34BA  
                              drawFastVLine@h 0019                                          l2006 41A4  
                                        l2102 4786                                          l1313 2766  
                                        l2026 43BA                                          l1324 291A  
                                        l1502 49D0                                          l1423 071A  
                                        l1355 1728                                          l1348 1FC8  
                              drawFastVLine@x 0022                                drawFastVLine@y 0018  
                                        l1384 08A4                                          l1720 4800  
                                        l1490 41E2                                          l1466 0C5E  
                                        l1299 2EBC                                          l1708 4144  
                                        l1902 3730                                          l1494 41FC  
                                        l1910 306C                                          l1495 41FE  
                                        l1496 4208                                          l1497 420A  
                                        l1827 3906                                          l1931 32DE  
                                        l1499 4224                                          l1907 30DC  
                                        l1916 30CC                                          l1925 3D8C  
                                        l1941 4A5A                                          l1909 3044  
                                        l1838 38DE                                          l1871 2458  
                                        l1695 3CF6                                          l1952 35A0  
                                        l5304 3FA4                                          l1882 251A  
                                        l1786 31E6                                          l5306 3FB2  
                                        l1891 2536                                          l1867 242E  
                                        l1795 31D6                                          l1868 25AC  
                                        l1948 4566                                          l1967 4AF0  
                                        l1993 4A42                                          l5290 3F46  
                                        l1899 3764                                          l1996 3F24  
                                        l6420 4670                                          l6412 465A  
                                        l7204 4B28                                          l6430 4684  
                                        l5294 3F7E                                          l5390 4624  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l9000 355E  
                                        l6432 468A                                          l6408 4652  
                                        l9002 356C                                          l6418 4668  
                                        l6426 4678                                          l5378 48B0  
                                        l5386 4608                                          l9004 3576  
                                        l6444 47A0                                          l9020 3EDA  
                                        l6612 400C                                          l6446 47A6  
                                        l6438 478E                                          l6702 41DA  
                                        l9030 3F14                                          l9022 3EE2  
                                        l5750 4754                                          l9008 358E  
                                        l6456 47B8                                          l9040 4166  
                                        l9200 05EE                                          l5752 475A  
                                        l6552 4848                                          l6616 4026  
                                        l6714 41F4                                          l6706 41E6  
                                        l8410 243C                                          l9018 3ECC  
                                        l9042 416E                                          l9210 063A  
                                        l5762 3776                                          l6554 4852  
                                        l7194 4B02                                          l9052 4362  
                                        l9204 05FE                                          l9140 034A  
                                        l9132 02DA                                          l9124 0272  
                                        l9108 01C2                                          l5780 3812  
                                        l7196 4B08                                          l8502 3274  
                                        l8422 2472                                          l9046 4194  
                                        l9038 4158                                          l9054 4370  
                                        l9310 0A54                                          l9222 06E8  
                                        l9206 0612                                          l9142 0360  
                                        l9062 002C                                          l6902 283C  
                                        l6664 4C04                                          l8360 3862  
                                        l8512 32A2                                          l8440 24CA  
                                        l8432 249A                                          l8416 2466  
                                        l9304 0A10                                          l9224 06FC  
                                        l9216 06C8                                          l9160 044A  
                                        l9152 03CC                                          l9136 0302  
                                        l9072 0066                                          l5784 3820  
                                        l5768 37E4                                          l6904 2876  
                                        l8370 38C6                                          l8362 386E  
                                        l8506 328A                                          l8450 2502  
                                        l8442 24D6                                          l9322 0AAC  
                                        l9250 0894                                          l9234 0746  
                                        l9218 06D8                                          l9154 03D8  
                                        l9162 045E                                          l9138 0318  
                                        l9074 007C                                          l9066 0042  
                                        l5794 383A                                          l6914 28F2  
                                        l6668 4C10                                          l8372 38D2  
                                        l8364 388E                                          l8356 3852  
                                        l9420 36A2                                          l8516 32B8  
                                        l8508 3290                                          l8452 250E  
                                        l8444 24DE                                          l8540 3CA0  
                                        l9324 0AB8                                          l9332 0AFE  
                                        l9316 0A82                                          l9308 0A48  
                                        l9244 0874                                          l9228 0720  
                                        l9180 051A                                          l9172 04DA  
                                        l9148 03A6                                          l9092 012A  
                                        l9068 0058                                          l5788 382A  
                                        l6908 28B6                                          l9422 36BC  
                                        l6694 41C8                                          l8438 24BE  
                                        l8542 3CAA                                          l8534 3C8A  
                                        l9334 0B10                                          l9342 0C04  
                                        l9318 0A8E                                          l9262 08F0  
                                        l9246 0884                                          l9238 0798  
                                        l9166 04C6                                          l9158 041C  
                                        l9094 0166                                          l9086 0118  
                                        l9078 009C                                          l8702 2C54  
                                        l6870 2616                                          l8384 38F8  
                                        l8368 38A6                                          l8480 3220  
                                        l8560 3CEC                                          l8552 3CD0  
                                        l8544 3CB2                                          l8528 3C78  
                                        l9336 0B90                                          l9344 0C18  
                                        l9328 0AD6                                          l9280 0970  
                                        l9272 092E                                          l9184 056C  
                                        l9176 0514                                          l9168 04CC  
                                        l9088 011E                                          l8712 2C94  
                                        l8704 2C5C                                          l6880 26C4  
                                        l6872 264C                                          l9600 458C  
                                        l8378 38E6                                          l9426 36CA  
                                        l6698 41D2                                          l8458 2554  
                                        l9346 0C22                                          l9290 09BE  
                                        l9282 0976                                          l9266 091A  
                                        l9194 05C4                                          l8714 2CC8  
                                        l9522 174A                                          l6882 26FE  
                                        l6866 25BA                                          l8484 322E  
                                        l8468 2586                                          l8556 3CDC  
                                        l8580 40F6                                          l8572 40DA  
                                        l8804 1704                                          l9276 0968  
                                        l9268 0920                                          l9188 0596  
                                        l9348 0C3C                                          l8732 2D4A  
                                        l8724 2CF6                                          l8740 2D7A  
                                        l8716 2CCC                                          l8708 2C64  
                                        l9380 362C                                          l9364 35CA  
                                        l6876 2688                                          l6892 2774  
                                        l9700 3B1C                                          l9446 370A  
                                        l8478 3206                                          l8910 3174  
                                        l8902 3142                                          l8582 4100  
                                        l9286 0984                                          l9198 05D4  
                                        l8734 2D72                                          l8726 2D1E  
                                        l9390 3676                                          l6894 27AA  
                                        l9606 45A0                                          l9456 373E  
                                        l8832 300A                                          l8584 4108  
                                        l8592 412A                                          l8576 40E8  
                                        l8816 4AE8                                          l9296 09C6  
                                        l9376 3612                                          l6888 273E  
                                        l9720 45EA                                          l8498 3262  
                                        l9474 3A4A                                          l8922 3198  
                                        l8914 3184                                          l8826 2FEC  
                                        l9298 09DA                                          l6898 27E6  
                                        l8940 453C                                          l8932 31C2  
                                        l8596 413A                                          l8588 411E  
                                        l8780 1476                                          l9388 3670  
                                        l9820 3920                                          l9564 1A8C  
                                        l9732 4512                                          l9740 33F2  
                                        l8934 31D0                                          l8926 31A8  
                                        l8862 308E                                          l8854 307A  
                                        l8766 1F88                                          l8758 1EC4  
                                        l8790 152E                                          l8694 2C3A  
                                        l9830 3946                                          l9814 390A  
                                        l9920 4A0E                                          l8952 3D5C  
                                        l8928 31AE                                          l8872 30B8  
                                        l9832 394C                                          l9824 3930  
                                        l9592 47DC                                          l9728 4500  
                                        l9672 3AAE                                          l9912 4890  
                                        l9904 4C74                                          l8882 30EE  
                                        l8874 30C6                                          l8866 309E  
                                        l8786 151E                                          l8698 2C46  
                                        l9842 3972                                          l9826 3936  
                                        l9818 391A                                          l9682 3AF2  
                                        l8972 34DA                                          l9932 4920  
                                        l8948 3D2A                                          l8868 30A4  
                                        l9844 3978                                          l9836 395C  
                                        l9852 398E                                          l9676 3AC8  
                                        l8990 3534                                          l8958 3D88  
                                        l8798 1652                                          l9838 3962  
                                        l9854 39B8                                          l9870 3B48  
                                        l9782 2DA0                                          l9686 3AFC  
                                        l9774 4C46                                          l9766 4C2C  
                                        STR_1 FF34                                          l8888 30FE  
                                        l9848 3988                                          l9864 3B3A  
                                        l9696 3B18                                          STR_2 FF48  
                                        STR_3 FEE1                                          l8994 3544  
                                        l9938 4934                                          l9882 3B74  
                                        l9858 3B24                                          STR_4 FE75  
                                        STR_5 FEF7                                          l8996 354A  
                                        l9876 3B5E                                          STR_6 FF20  
                                        STR_7 FE93                                          l9990 0CC6  
                                        STR_8 FECB                                          STR_9 FE32  
                                        l9888 3B8A                                          l9896 3B98  
                                        l9898 3BC2                                          l9996 0D0A  
                                        u4060 37A4                                          u4070 37DA  
              ?_Do_Change_Fan_Timer_Mode_Plus 0001                                          u3360 3F74  
                                printf@tmpval 00A2                                          u5300 401C  
                                        u5310 4036                                          u8010 0712  
                                        u7230 2D2C                                          u8311 3694  
                                        u7600 34F8                  __end_of_Activate_Buzzer_2KHz 4D3C  
                                        u8331 36B2                                          u7371 2FDE  
                                        u8260 35F6                                          u8500 44F6  
                                        u7605 34F0                                          u6741 23FA  
                                        u6751 240E                                          u7391 2FFC  
                                        u8431 3A7E                                          u9147 4DB0  
                                        u7581 34CC                                          _RBPU 007F8F  
                                        u6951 31F8                                          u8490 45E0  
                                        u6971 3216                                          u7790 0208  
                                        u7795 01FC                                          _TRMT 007D61  
                             Set_D1_RGB@range 0021                           ??_Deactivate_Buzzer 0011  
                                        _main 1ACA                                          _font FBC1  
     Update_Setup_Screen_Cursor_Backward@xinc 0030                                  ___ftpack@arg 0011  
     Update_Setup_Screen_Cursor_Backward@yinc 002F                                          _hour 0065  
                                ___ftpack@exp 0014                              __end_of_I2C_Init 4DD8  
                            __end_of_I2C_Read 4690                                          _year 006B  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                              ??_get_full_ADC 0013                                          fsr0l 000FE9  
                                        fsr2h 000FDA                                          fsr1l 000FE1  
                                        indf2 000FDF                                          fsr2l 000FD9  
                                        _wrap 00DE                                          _volt 00B8  
                            __end_of_I2C_Stop 4D18                                          pclat 000FFA  
                          __size_of_LCD_Reset 0012                                          prodh 000FF4  
                                        prodl 000FF3                               __end_of_Do_Beep 4BFC  
                                        start 0018                   __size_of_I2C_Write_Cmd_Only 001A  
                             __end_of_Do_Init 4418                                   _Do_Beep_Bad 4BC4  
                             ??_drawFastVLine 001C                               Set_D2_RGB@range 0021  
                                ___ftmul@cntr 002C                               __end_of_i2cNack 4DCE  
                                ___param_bank 000010                                  ___ftmul@sign 002D  
     Update_Setup_Screen_Cursor_Forward@field 002E                                  ___fttol@exp1 003C  
                       __size_of_Do_Beep_Good 001C                                  _Turn_Off_Fan 4B8C  
                                ___fttol@lval 0038                                   ?_TIMER1_isr 0001  
                            __end_of_INT0_isr 4980                              __end_of_INT1_isr 4DEC  
                                       l10200 21D2                                         l10016 0E06  
                                       l10008 0D90                              __end_of_INT2_isr 2AA6  
                                       l10210 21F8                                         l10204 21E2  
                                       l10212 21FE                                         l10052 0ED4  
                                       l10044 0E9A                                         l10222 221C  
                                       l10208 21F2                                         l10080 0FF6  
                                       l10072 0FAC                                         l10048 0EB6  
                                       l10056 0EF2                                         l10146 2020  
                                       l10234 2274                                         l10250 236C  
                                       l10074 0FC2                                         l10500 1C9E  
                                       l10158 2078                                         l10078 0FE0  
                                       l10510 1CC2                                         l10502 1CA8  
                                       l10192 21B2                                         l10176 2174  
                                       l10272 23C4                                         l10264 23A4  
                                       l10280 23E0                                         l10520 1D18  
                                       l10512 1CCA                                         l10504 1CB2  
                                       l10440 1AE0                                         l10514 1CD0  
                                       l10196 21C2                                         l10188 21A2  
                                       l10276 23D4                                         l10268 23B4  
                                       l10516 1D08                                         l10452 1B38  
                                       l10278 23DA                                         l10534 1D62  
                                       l10480 1C6C                                         l10472 1C38  
                                       l10492 1C8A                                         l10484 1C76  
                                       l10496 1C94                                         l10488 1C80  
              __size_of_Activate_Buzzer_500Hz 0012                     __end_of_Deactivate_Buzzer 4E04  
                             ??_do_update_pwm 003D                               drawFastVLine@hi 0020  
                             drawFastVLine@lo 0021                                Read_Volt@nStep 0044  
               __end_of_Activate_Buzzer_500Hz 4D4E                                         ?_main 0001  
                             __end_of___awdiv 3CF8                               __end_of___ftadd 25AE  
                                       STR_10 FEB0                                         STR_11 FE54  
                                       STR_20 FFBD                                         STR_12 FF7B  
                                       STR_21 FFFB                                         STR_13 FFF5  
                                       STR_14 FF1E                                         STR_22 FFF8  
                                       STR_30 FFCD                                         STR_15 FFC8  
                                       STR_23 FFDC                                         STR_31 FFD2  
                                       STR_40 FE75                                         STR_24 FFF1  
                                       STR_32 FFE1                                         STR_16 FFD7  
                                       STR_41 FEF7                                         STR_33 FFB3  
                                       STR_17 FFB7                                         STR_25 FFAC  
                                       STR_26 FFB3                                         STR_42 FF20  
                                       STR_34 FE75                                         STR_18 FFC2  
                                       STR_43 FE93                                         STR_27 FFE5  
                                       STR_19 FFA0                                         STR_35 FF0C  
                                       STR_36 FF20                                         STR_28 FFE9  
                                       STR_44 FF88                               __end_of___awmod 4146  
                                       STR_37 FE93                                         STR_45 FFC8  
                                       STR_29 FFED                                         STR_46 FFD7  
                                       STR_38 FF94                                         STR_39 FF6C  
                                       STR_47 FF5B                               __end_of___ftdiv 3766  
                             __end_of___ftneg 4A68                               __end_of___lldiv 3F36  
                             __end_of___ftmul 32E0                                         _T0CON 000FD5  
                             ___awdiv@divisor 0019                                         _T1CON 000FCD  
                             __end_of___llmod 41B6                               __end_of___ftsub 4568  
                             __end_of___fttol 35A2                                         _T2CON 000FCA  
            ??_Do_Change_Fan_Timer_Mode_Minus 0046               ?_Do_Change_Fan_Timer_Mode_Minus 0001  
                                       _T3CON 000FB1                                         i2l623 3DE4  
                                       i2l635 2AA4                                         i2l658 4976  
                             ___awdiv@counter 001B                                         _RCSTA 000FAB  
                                       _TMR0H 000FD7                                         _TMR1H 000FCF  
                                       _TMR0L 000FD6                                         _TMR1L 000FCE  
                                       _TMR3L 000FB2                                         _SPBRG 000FAF  
                                       _PORTA 000F80                                         _PORTD 000F83  
                                       _PORTE 000F84                                ?_Increase_Time 0001  
                                       _TRISA 000F92                                         _TRISB 000F93  
                                       _TRISC 000F94                                         _TRISD 000F95  
                                       _TRISE 000F96                         __end_of_Wait_Half_Sec 4C18  
                                       _TXREG 000FAD                                         _TXSTA 000FAC  
                             __end_of_get_RPM 46CE                                         _Rcmd1 2EBE  
                                       _Rcmd3 32E0                                  ___lltoft@exp 0021  
    Update_Setup_Screen_Cursor_Backward@field 002E                                    _Nec_Button 00C9  
               __size_of_Do_Save_New_Fan_Temp 0014                                    _i2cHighSda 4DF4  
                                  _i2cHighScl 4DAC                                  bcd_2_dec@bcd 0015  
                                bcd_2_dec@dec 0013                                 ___awtoft@sign 001C  
                             __end_of_dpowers FDC4                                         _font2 FCC0  
            __size_of_Update_Setup_Fan_Screen 0082                                         _found 00D0  
                                       _scale 134A                               __end_of_isdigit 4AF2  
                                       _tempC 0069                                         _tempF 006A  
                                       _month 0067                                 ___ftpack@sign 0015  
                                       _putch 4D90                             __end_of_I2C_Start 4D2A  
                           __end_of_I2C_Write 47C6                                __CFG_BOREN$OFF 000000  
                                       tablat 000FF5                                         plusw1 000FE3  
                                       plusw2 000FDB                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 4BA8  
             __size_of_check_for_button_input 00AE                         __end_of_Go_Next_Field 4B32  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                       _Select_Fan_Temp_Field 00CA                               __initialization 42FA  
                                __end_of_main 1D86                                  __end_of_font FCC0  
                 __end_of_Decrease_Duty_Cycle 4A1E                              __end_of_Init_ADC 4DAC  
                            get_duty_cycle@dc 0019                              __end_of_Rcmd2red 470C  
                                      ??_main 005A                                 ___fttol@sign1 0037  
                           _Decrease_Fan_Temp 4C32                                    _Set_D1_RGB 45B4  
                               __activetblptr 000002                                    _Set_D2_RGB 44C6  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 4CF4  
                        __size_of__tdiv_to_l_ 0110                         __end_of_Go_Prev_Field 4B12  
                   ??_TFT_GreenTab_Initialize 001B                            ?_Decrease_Fan_Temp 0001  
                                _Fan_Mode_Txt 017D                    ??_Update_Setup_Time_Screen 004A  
                              _Init_Interrupt 4A68                            ??_DS3231_Read_Time 0014  
                                      ?_Rcmd1 0001                                        ?_Rcmd3 0001  
                                   I2C_Init@c 0011                                     I2C_Read@n 0012  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 0016  
                            ___llmod@dividend 001E                                        ?_scale 0043  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 0017                            __size_of_i2cLowSda 000A  
                          __size_of_i2cLowScl 0008                              __end_of___awtoft 4802  
                                      ?_putch 0001                              __end_of___ftpack 3908  
                            __end_of___lbtoft 4A44                           ??_Decrease_Fan_Temp 004D  
                                   ??_Do_Beep 0046                              __end_of___lltoft 43BC  
                               ??_Monitor_Fan 0059                                        _DC_Txt 00E4  
                                   ??_Do_Init 0059                                        i2l7510 29F4  
                                      i2l7502 29E4                                        i2l8222 3DDA  
                                      i2l8214 3DC6                                        i2l7432 495C  
                                      i2l7504 29EA                                        i2l7506 29F0  
                                      i2l8218 3DD0                                        i2l7436 4970  
                                      i2l7532 2A72                                        i2l7518 2A4A  
                                      i2l7534 2A78                                        i2l7542 2A82  
                                      i2l7536 2A7E                                        i2l7456 2944  
                                      i2l7490 29BE                                        i2l7482 29A0  
                                      i2l7476 2996                                        i2l7468 2978  
                                      i2l7496 29C8                                        _OSCCON 000FD3  
                          __size_of_Init_UART 0014                           __size_of_TIMER1_isr 000C  
                                      _SPBRGH 000FB0                                        _SSPBUF 000FC9  
                                   ??_i2cNack 0011                              _force_nec_state0 4E04  
                          __size_of_Read_Volt 006E                              __end_of_delay_ms 474A  
                                      _i2cAck 4CF4                                        _Nec_ok 00BB  
                            __end_of_fillRect 4648                              __end_of_drawChar 2D80  
                            __end_of__powers_ FE12                            __size_of_OpenUSART 0070  
                                      ___ftge 3CF8                                _FAN_TIMER_MODE 0060  
                              _FAN_TIMER_TIME 00C3           __end_of_Initialize_Setup_Fan_Screen 34BC  
                 _Initialize_Setup_Fan_Screen 33D2                      __size_of_Activate_Buzzer 0012  
                                      ___wmul 49AA                                     ??___awdiv 001B  
                            __end_of_drawtext 3684                                     ??___ftadd 0053  
                                   ??___awmod 0041                                     ??___ftdiv 0034  
                           _In_Fan_Temp_Setup 00C7                                     ??___ftneg 0014  
                                   ??___lldiv 0019                                     ??___ftmul 0025  
                                   ??___llmod 0026                                     ??___ftsub 0059  
                                   ??___fttol 0032                                        _chkisr 0008  
                                      _buffer 0100                     __end_of_Decrease_Fan_Temp 4C4C  
                                      _fround 1D86                                        clear_0 4300  
                                      clear_1 430C                              ___awdiv@quotient 001D  
                                      _minute 0066                                        _second 0068  
                             ___awmod@divisor 003F                                    _Timing_Txt 013C  
                        _Activate_Buzzer_2KHz 4D2A                                     ??_get_RPM 0021  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 0041  
                                      _printf 001C                                  drawtext@size 0040  
                             ??_Increase_Time 004A                                        _strcpy 483E  
                                      _strlen 474A                         ___ftmul@f3_as_product 0029  
                      __end_of_Init_Interrupt 4A8C                                    _Toggle_Fan 4C66  
                        __end_of_get_full_ADC 49F8                        _check_for_button_input 3A74  
                            _Do_Save_New_Time 4CA6                                     ??_isdigit 0011  
                                   ?_I2C_Init 0011                                     ?_I2C_Read 0001  
                     __size_of_Setup_Fan_Temp 01E2                        get_duty_cycle@set_temp 0013  
                                   ?_I2C_Stop 0001                                  __mediumconst FBC0  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8              __end_of_I2C_Write_Cmd_Write_Data 4B52  
                                 ?_i2cHighSda 0001                                   ?_i2cHighScl 0001  
                                      putch@c 0011                              __end_of_spiwrite 4CCE  
                    __size_of_Exit_Time_Setup 0010                            __size_of_bcd_2_dec 002A  
                                  __accesstop 0080                       __end_of__initialization 4352  
                            ??_get_duty_cycle 0015                            __size_of_dec_2_bcd 0058  
                                  ___ftadd@f1 004D                                    ___ftadd@f2 0050  
                                  ___ftge@ff1 0011                                    ___ftge@ff2 0014  
                                   ?_INT0_isr 0001                                     ?_INT1_isr 0001  
                                   ?_INT2_isr 0001                                 ___rparam_used 000001  
                                  ___ftdiv@f1 002E                                    ___ftdiv@f2 0031  
                                  ___ftdiv@f3 0038                                    ___ftneg@f1 0011  
                                  ___awtoft@c 0019                                    ___lbtoft@c 001C  
                         __end_of_Monitor_Fan 45B4                                    ___ftmul@f1 001F  
                                  ___ftmul@f2 0022                                    ___ftsub@f1 0080  
                                  ___ftsub@f2 0083                                    ___fttol@f1 002E  
                               __end_of_Rcmd1 2FCE                                 __end_of_Rcmd3 33D2  
                              __pcstackCOMRAM 0001                                  __pidataBANK0 4A8C  
                                __pidataBANK1 3E1E                                    ___lltoft@c 0019  
                               __end_of_font2 FD9C                             __end_of_i2cLowSda 4DE2  
                           __end_of_i2cLowScl 4DF4                                 __end_of_scale 172A  
                               __end_of_putch 4D9E                         ?_Activate_Buzzer_2KHz 0001  
                                   INT0_isr@k 0001                             __end_of_Init_UART 4CE2  
                              drawPixel@color 0019                                  dec_2_bcd@bcd 0047  
                                dec_2_bcd@dec 0049                        __size_of_Decrease_Time 00B6  
                                 ?_Set_D1_RGB 0001                                   ?_Set_D2_RGB 001F  
                          _setup_fan_set_temp 00D4                            _setup_fan_set_text 0187  
                             ?_Init_Interrupt 0001                        __size_of_write_command 0010  
                                  __div_to_l_ 30DE                             __end_of_Read_Volt 4294  
                                  ??_I2C_Init 0015                                    ??_I2C_Read 0011  
                                  ??_I2C_Stop 0011                                       ??_Rcmd1 001B  
                                     ??_Rcmd3 001B                       _Update_Setup_Fan_Screen 4042  
                          __size_of_drawPixel 0030                             __end_of_OpenUSART 4226  
                             __div_to_l_@exp1 001C                               __div_to_l_@cntr 001B  
                 __end_of_Increase_Duty_Cycle 48A0                                       ??_scale 0046  
                        Read_Volt@ADC_Channel 0043                               __div_to_l_@quot 0017  
                                     ??_putch 0011                                    __pbssBANK0 00B4  
                                   ?_Init_ADC 0001          __end_of_Initialize_Setup_Time_Screen 2EBE  
       __size_of_Initialize_Setup_Time_Screen 013E                  _Initialize_Setup_Time_Screen 2D80  
                               ??_DS1621_Init 0016                                     ?_Rcmd2red 0001  
                             spiwrite@spidata 0012                                    ??_INT0_isr 0001  
                                  ??_INT1_isr 0001                                    ??_INT2_isr 0001  
                               __div_to_l_@f1 0011                                 __div_to_l_@f2 0014  
                                _fan_set_temp 00DC                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                                 ??_Turn_On_Fan 0059  
                              I2C_Read@inByte 0013                                       ?___ftge 0011  
                                     ?___wmul 0011                           __size_of_i2cHighSda 0008  
                         __size_of_i2cHighScl 000C                                       ?_chkisr 0001  
                      __size_of_setAddrWindow 0056                             __end_of_bcd_2_dec 49AA  
                                     _CCP1CON 000FBD              I2C_Write_Cmd_Write_Data@Data_Out 0014  
                                     _CCP2CON 000FBA                        __size_of_Do_Setup_Time 023E  
                                ??_TIMER1_isr 0001                    __size_of_Decrease_Fan_Temp 001A  
                                     ?_fround 0043                                 ??_I2C_ReStart 0011  
                                   ?___awtoft 0019                                     ?___ftpack 0011  
                                   ?___lbtoft 0019                                       _FANMODE 00C2  
                                  I2C_Write@n 0012                                       ?_printf 0086  
                                   ?___lltoft 0019                                       ?_strcpy 0011  
                                     ?_strlen 0011                             __end_of_dec_2_bcd 4470  
                                 ?_Toggle_Fan 0001                             ??_Activate_Buzzer 0011  
                               _Fan_Timer_Txt 00F4                                    _fillScreen 4B70  
                       __end_of_Update_Screen 134A                                     ?_delay_ms 0017  
                                   ?_fillRect 0023                                     ?_drawChar 002E  
                                     _SSPCON1 000FC6                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 0182                         __end_of_fillRectangle 3842  
                                     _Do_Beep 4BE0                                     ?_drawtext 0039  
                                  ??_Init_ADC 0011                                       _Do_Init 43BC  
                                 _Monitor_Fan 4568                      _I2C_Write_Cmd_Write_Data 4B32  
                  __end_of_I2C_Write_Cmd_Only 4C66                                    ??_Rcmd2red 0014  
                      DS1621_Read_Temp@Device 0018                                 _Decrease_Time 3908  
                     get_duty_cycle@diff_temp 0017                                       _i2cNack 4DC4  
                          __end_of_TIMER1_isr 4DC4                            _Fan_Timer_Mode_Txt 00F0  
               ?_Initialize_Setup_Time_Screen 0001                                 _write_command 4D80  
                                   _I2C_Start 4D18                                     _I2C_Write 4788  
                           ??_Exit_Time_Setup 004A                           __size_of_Set_D1_RGB 004A  
                         __size_of_Set_D2_RGB 0052                               __size_of_i2cAck 0012  
                           __end_of__npowers_ FDEB                                       __Hparam 0000  
                                  _scale$2977 0046                  __end_of_Do_Save_New_Fan_Temp 4CA6  
                                     __Lparam 0000                           __end_of_DS1621_Init 4B70  
                           __end_of_drawPixel 48D0                         __end_of_drawFastVLine 3FBE  
                             __size_of___ftge 0096                                       ___awdiv 3C62  
                                     ___ftadd 23EA                                       ___awmod 40C4  
                                     ___ftdiv 3684                                       ___ftneg 4A44  
                                  _light_flag 00D1                                       ___lldiv 3EAA  
                             __size_of___wmul 0028                        ??_Activate_Buzzer_2KHz 0011  
                                     ___ftmul 31E8                                       ___llmod 4146  
                                     ___ftsub 4518                                       ___fttol 34BC  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 3E16  
                                   ?_spiwrite 0001                                       __pcinit 42FA  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                               __size_of_fround 0244  
                                     __ramtop 1000                                       _get_RPM 4690  
                                  ??___lltoft 001D                                       __ptext0 1ACA  
                                     __ptext1 0C60                                       __ptext2 4C66  
                                     __ptext3 4AAE                                       __ptext4 2208  
                                     __ptext5 33D2                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 4C18                                       __ptext7 4C92  
                                     __ptext8 4C32                                       __ptext9 4042  
                             __size_of_printf 0C44                                   _Timer_Table 0138  
                         __end_of_Turn_On_Fan 4AD0                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FE32                      __end_of_force_nec_state0 4E0C  
                                   _T1CONbits 000FCD                                   ?__div_to_l_ 0011  
                   ??_Update_Setup_Fan_Screen 004A                                       _dpowers FD9C  
                       __end_of_do_update_pwm 3A74                                _Setup_Fan_Temp 2208  
                                     _isdigit 4AD0                         _Activate_Buzzer_500Hz 4D3C  
                            ___awmod@dividend 003D                                    _duty_cycle 0064  
                                  ??_delay_ms 0019                           __end_of_I2C_ReStart 4C92  
                               drawtext@_text 003A                                 drawtext@color 003C  
                                  ??_fillRect 0028                                    ??_drawChar 0035  
                                   _LCD_Reset 4CE2                             _DS3231_Write_Time 3BC8  
                               _setAddrWindow 4470                                __pintcode_body 3D8E  
                                  delay_ms@ms 0017                          end_of_initialization 4352  
                               _Do_Setup_Time 1FCA                                     _INT0_flag 00C4  
                                   _INT1_flag 00C5                                     _INT2_flag 00C6  
                                  ??_drawtext 0041                             _Increase_Fan_Temp 4C18  
                          ?_DS3231_Write_Time 0001                                ?_Decrease_Time 0001  
                              ?_write_command 0001                                 __Lmediumconst FBC0  
                   __size_of_DS3231_Read_Time 0066                                       int_func 3D8E  
                          ?_Increase_Fan_Temp 0001                       DS3231_Read_Time@Address 0014  
                    DS3231_Write_Time@Address 004B                                    ?_I2C_Start 0001  
                                  ?_I2C_Write 0001                                    get_RPM@RPS 0021  
                    __end_of_Do_Save_New_Time 4CBA                                  _get_full_ADC 49D2  
                         __size_of_Toggle_Fan 0016                               ___lldiv@divisor 0015  
                         ??_DS3231_Write_Time 004A                               ___lldiv@counter 001D  
                     check_for_button_input@j 01A1                                    _tempSecond 00DD  
                      __size_of_Wait_Half_Sec 001C                                     _RCSTAbits 000FAB  
                                     printf@c 00B3                                       printf@f 0086  
                         ??_Increase_Fan_Temp 004D                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                                __tdiv_to_l_@f1 0011  
                              __tdiv_to_l_@f2 0014                                    ??_spiwrite 0011  
                     ?_check_for_button_input 0001                                       strlen@s 0011  
                               ??__tdiv_to_l_ 0017                   I2C_Write_Cmd_Write_Data@Cmd 0013  
                      __end_of_Setup_Fan_Temp 23EA                              drawtext@cursor_x 0049  
                            drawtext@cursor_y 0048                                     _PORTBbits 000F81  
                                   _PORTCbits 000F82                                     _PORTDbits 000F83  
                            I2C_Write@outByte 0011                                    _setup_date 015C  
                                 ?_fillScreen 0024                  __size_of_Decrease_Duty_Cycle 0026  
                                  _setup_hour 00D5                                    _setup_time 0165  
                                  _setup_year 00D9                                    drawChar@bg 0032  
                   __end_of_DS3231_Write_Time 3C62                                     _TRISBbits 000F93  
                                   _TRISCbits 000F94          __size_of_Initialize_Setup_Fan_Screen 00EA  
                      __size_of_Go_Next_Field 0020                                  ??_i2cHighSda 0011  
                                ??_i2cHighScl 0011                             __size_of_I2C_Init 000A  
                           __size_of_I2C_Read 0048                     __end_of_Increase_Fan_Temp 4C32  
                           __size_of_I2C_Stop 0012                                ?_setAddrWindow 0014  
                                  ?_LCD_Reset 0001                                ?_Do_Setup_Time 0001  
                            drawtext@textsize 0044                                     _SYSTEM_ON 0062  
                                  drawPixel@x 001B                                    drawPixel@y 0018  
                                 _DS1621_Init 4B52                                   ___ftdiv@exp 003B  
                                 printf@width 00A6                                     _TXSTAbits 000FAC  
           __size_of_Update_Setup_Time_Screen 0184                            get_full_ADC@result 0015  
                         __size_of__div_to_l_ 010A                     ?_Update_Setup_Time_Screen 0001  
                           __size_of_INT0_isr 002C                             __size_of_INT1_isr 000A  
                           __size_of_INT2_isr 018A                                __end_of_i2cAck 4D06  
                                 ___ftmul@exp 0028                        __size_of_Go_Prev_Field 0020  
              ??_Initialize_Setup_Time_Screen 004A                          __size_of_Do_Beep_Bad 001C  
                    DS1621_Read_Temp@Data_Ret 0017                                   _Turn_On_Fan 4AAE  
              __end_of_check_for_button_input 3B22                              ??_Init_Interrupt 0011  
                          __end_of_i2cHighSda 4DFC                                __end_of___ftge 3D8E  
                          __end_of_i2cHighScl 4DB8                                 Read_Volt@volt 0040  
                              __end_of___wmul 49D2                                 delay_ms@count 0019  
                                  _write_data 4D70                                __end_of_chkisr 3E1E  
                    ?_TFT_GreenTab_Initialize 0001                                   _I2C_ReStart 4C7C  
                             ?_Setup_Fan_Temp 0001                                    drawtext@bg 003E  
                              __end_of_fround 1FCA                                  ??_Set_D1_RGB 001F  
                                ??_Set_D2_RGB 0021                        ?_Activate_Buzzer_500Hz 0001  
                                   _i2cLowSda 4DD8                                     _i2cLowScl 4DEC  
                              __end_of_printf 0C60                         __end_of_Increase_Time 3BC8  
                              __end_of_strcpy 4870                                __end_of_strlen 4788  
                                   _Nec_state 0061                           start_initialization 42FA  
                                   _Init_UART 4CCE                                 _Wait_Half_Sec 4BFC  
                         __end_of__tdiv_to_l_ 30DE                          _Do_Save_New_Fan_Temp 4C92  
                      Update_Screen@neg_tempC 004C                        Update_Screen@neg_tempF 004E  
                                   _Read_Volt 4226                               ??_Decrease_Time 004A  
                          get_duty_cycle@temp 0011                               ??_write_command 0013  
                        Set_D1_RGB@duty_cycle 0020                                     _OpenUSART 41B6  
                             ___llmod@divisor 0022                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                             ___llmod@counter 0026                                   ??_I2C_Write 0011  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C                            __end_of_Set_D1_RGB 45FE  
                          __end_of_Set_D2_RGB 4518                                 _Go_Next_Field 4B12  
                             _Activate_Buzzer 4D4E                                      ??___ftge 0017  
                                    ??___wmul 0015                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 0003                                   __pdataBANK0 00DA  
                                 __pdataBANK1 0100                                      ??_fround 0046  
                             setAddrWindow@x0 0017                               setAddrWindow@x1 0015  
                             setAddrWindow@y0 0014                               setAddrWindow@y1 0016  
                                    ??_printf 0094                              _DS1621_Read_Temp 4802  
                                    ??_strcpy 0015                                      ??_strlen 0013  
                                ??_Toggle_Fan 0059                                    ?_i2cLowSda 0001  
                                  ?_i2cLowScl 0001                                     _bcd_2_dec 4980  
                                  fround@prec 004C                             __size_of___awtoft 003C  
                           __size_of___ftpack 00C6                             __size_of___lbtoft 0026  
                              ?_Wait_Half_Sec 0001                             __size_of___lltoft 0060  
                                 __pbssCOMRAM 005A                    ??_I2C_Write_Cmd_Write_Data 0015  
                  __size_of_DS3231_Write_Time 009A                                    ?_Init_UART 0001  
                             ??_setAddrWindow 0017                                 __pcstackBANK0 0080  
                               __pcstackBANK1 018C                                 _Go_Prev_Field 4AF2  
                             ??_Do_Setup_Time 005A                         ?_Do_Save_New_Fan_Temp 0001  
                                   _dec_2_bcd 4418                               _Exit_Time_Setup 4D60  
                                  ?_Read_Volt 003D                    __size_of_Increase_Fan_Temp 001A  
                                 ??_LCD_Reset 001B                                  _isdigit$2600 0012  
                           __size_of_delay_ms 003E                                      ?_Do_Beep 0001  
                                    ?_Do_Init 0001                                  ?_Monitor_Fan 0001  
                           __size_of_fillRect 004A                             __size_of_drawChar 0156  
                                  ?_OpenUSART 0011                              _DS3231_Read_Time 4294  
                                    ?_i2cNack 0001                             __size_of_drawtext 00E2  
                               ?_Do_Beep_Good 0001   __end_of_Update_Setup_Screen_Cursor_Backward 291C  
__size_of_Update_Setup_Screen_Cursor_Backward 01B4         ??_Update_Setup_Screen_Cursor_Backward 002E  
        ?_Update_Setup_Screen_Cursor_Backward 0001           _Update_Setup_Screen_Cursor_Backward 2768  
                __size_of_Increase_Duty_Cycle 0030                                ?_Go_Next_Field 0001  
                          __end_of_Toggle_Fan 4C7C                                   I2C_Read@ack 0011  
                                   _bit_count 00CD                                     __pintcode 0008  
             __end_of_TFT_GreenTab_Initialize 48FC                                ??_Turn_Off_Fan 0059  
                               __pmediumconst FBC0                                      ?___awdiv 0017  
                                   __ptext100 49F8                                     __ptext101 4BE0  
                                   __ptext110 4D4E                                     __ptext102 39BE  
                                   __ptext103 4A1E                                     __ptext112 4DB8  
                                   __ptext104 34BC                                     __ptext113 291C  
                                   __ptext105 31E8                                     __ptext114 4E04  
                                   __ptext106 3684                                     __ptext115 4DE2  
                                   __ptext107 3842                                     __ptext116 4954  
                                   __ptext108 4BFC                                     __ptext109 4DFC  
                                    ?___ftadd 004D                                      ?___awmod 003D  
                                    ?___ftdiv 002E                                      ?___ftneg 0011  
                                    ?___lldiv 0011                                      ?___ftmul 001F  
                                    ?___llmod 001E                                      ?___ftsub 0080  
                                   __npowers_ FDC4                                      ?___fttol 002E  
                     __size_of_get_duty_cycle 0084                                     __tft_type 00CC  
                          _I2C_Write_Cmd_Only 4C4C                            drawFastVLine@color 001A  
                                 ?_write_data 0001                                     _drawPixel 48A0  
                                    ?_get_RPM 001F                                   __tdiv_to_l_ 2FCE  
                           __size_of_spiwrite 0014                                  ??__div_to_l_ 0017  
                                  ?_bcd_2_dec 0001                           ?_I2C_Write_Cmd_Only 0013  
                           ?_force_nec_state0 0001                                      ?_isdigit 0001  
                                    _I2C_Init 4DCE                                      _I2C_Read 4648  
                              ?_Go_Prev_Field 0001                                      _I2C_Stop 4D06  
                           _Initialize_Screen 172A                                __size_of_Rcmd1 0110  
                              __size_of_Rcmd3 00F2                                    ?_dec_2_bcd 0043  
                          ??_force_nec_state0 0001                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FE12                            ?_Initialize_Screen 0001  
                              __size_of_scale 03E0                                __size_of_putch 000E  
                     __end_of_Activate_Buzzer 4D60                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0046                           ??_Initialize_Screen 004A  
                                _Select_Field 00CB                                      _INT0_isr 4954  
                                    _INT1_isr 4DE2                                      _INT2_isr 291C  
                         _Decrease_Duty_Cycle 49F8                          ??_I2C_Write_Cmd_Only 0014  
                                    _PIE1bits 000F9D                                     _tempC_Txt 00F8  
                                   _tempF_Txt 00DF                             ?_Do_Save_New_Time 0001  
                      __size_of_Update_Screen 06EA                        DS3231_Read_Time@Device 0015  
                     DS3231_Write_Time@Device 004A                                      _PIR1bits 000F9E  
                          __end_of__div_to_l_ 31E8                                 _In_Time_Setup 00C8  
                          ??_Do_Save_New_Time 004C                              _Fan_Set_Temp_Txt 00EC  
                ?_Initialize_Setup_Fan_Screen 0001                                     _setup_day 00D3  
                           DS1621_Init@Device 0016                                     fillRect@h 0025  
                                   fillRect@i 002C                                     fillRect@w 0024  
                                   fillRect@x 002B                                     fillRect@y 0023  
                                   drawChar@c 002F                                     drawChar@i 0038  
                                   drawChar@j 0037                                     drawChar@x 0036  
                                   drawChar@y 002E                 __size_of_Activate_Buzzer_2KHz 0012  
             ??_Do_Change_Fan_Timer_Mode_Plus 0046                                    ?_drawPixel 0018  
                      __size_of_fillRectangle 00DC                                    _ADCON0bits 000FC2  
                             ??_Wait_Half_Sec 0011                       __end_of_Exit_Time_Setup 4D70  
                           ___wmul@multiplier 0011                     __end_of_Initialize_Screen 1ACA  
                                 ??_i2cLowSda 0011                                   ??_i2cLowScl 0011  
                        ?_Decrease_Duty_Cycle 0001                                  ??_fillScreen 0026  
                                  printf@flag 00AE                                    printf@fval 00B0  
                                  printf@prec 00A0                        ??_Do_Save_New_Fan_Temp 004A  
                                 ??_Init_UART 0014                                 Set_D2_RGB@rpm 001F  
            __end_of_Update_Setup_Time_Screen 2C2A                                   ??_Read_Volt 0040  
                                 _INTCON2bits 000FF1                                   _INTCON3bits 000FF0  
                                   copy_data0 4326                                     copy_data1 4346  
                                   drawtext@i 0046                        __size_of_drawFastVLine 0088  
                                   drawtext@x 0043                                     drawtext@y 0039  
                                    _Nec_code 00B4                                      _Init_ADC 4D9E  
                           write_command@cmd_ 0013                                   ??_OpenUSART 0013  
                            __size_of_Do_Beep 001C                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 46CE                              __size_of_Do_Init 005C  
                         __size_of_write_data 0010                               ??_Go_Next_Field 0031  
                             OpenUSART@config 0013                                  _Time_Elapsed 005A  
                            __size_of_i2cNack 000A                                 _RTC_ALARM_Txt 00DA  
      __end_of_Do_Change_Fan_Timer_Mode_Minus 4954       __size_of_Do_Change_Fan_Timer_Mode_Minus 002C  
              _Do_Change_Fan_Timer_Mode_Minus 4928                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00B6                                Wait_Half_Sec@k 0011  
                          __end_of_fillScreen 4B8C                                      __Lrparam 0000  
                            ??_Setup_Fan_Temp 005A                                  ?_Turn_On_Fan 0001  
                     ??_Activate_Buzzer_500Hz 0011                              __size_of___awdiv 0096  
                            __size_of___ftadd 01C4                      ?_Update_Setup_Fan_Screen 0001  
                            __size_of___awmod 0082                              __size_of___ftdiv 00E2  
                            __size_of___ftneg 0024                              __size_of___lldiv 008C  
                            __size_of___ftmul 00F8                              __size_of___llmod 0070  
                            __size_of___ftsub 0050                              __size_of___fttol 00E6  
                                    _Volt_Txt 0177                 ??_Initialize_Setup_Fan_Screen 004A  
                                    ___awtoft 47C6                                      ___ftpack 3842  
                                    ___lbtoft 4A1E                                  ?_I2C_ReStart 0001  
                                 _fround$2975 0049                                   _fround$2976 0046  
                                    ___lltoft 435C                         ??_Decrease_Duty_Cycle 0046  
                             ??_Go_Prev_Field 0031                              __size_of_get_RPM 003E  
                                 ??_bcd_2_dec 0011                                 _Update_Screen 0C60  
                                    _date_Txt 0153                              __size_of_isdigit 0022  
                                    _delay_ms 470C                                   ??_dec_2_bcd 0045  
                                    __ptext10 4870                                      __ptext11 1FCA  
                                    __ptext20 4568                                      __ptext12 4690  
                                    __ptext21 3FBE                                      __ptext13 3A74  
                                    __ptext30 172A                                      __ptext22 2D80  
                                    __ptext14 4980                                      __ptext31 483E  
                                    __ptext23 3B22                                      __ptext15 44C6  
                                    __ptext40 3BC8                                      __ptext32 4B70  
                                    __ptext24 4AF2                                      __ptext16 45B4  
                                    __ptext41 4418                                      __ptext33 3766  
                                    __ptext25 2768                                      __ptext17 4226  
                                    __ptext50 48A0                                      __ptext42 4294  
                                    __ptext34 48D0                                      __ptext26 4B12  
                                    __ptext18 49D2                                      __ptext51 4470  
                                    __ptext43 3908                                      __ptext35 32E0  
                                    __ptext27 25AE                                      __ptext19 47C6  
                                    __ptext60 43BC                                      __ptext52 4D70  
                                    __ptext44 2AA6                                      __ptext36 46CE  
                                    __ptext28 4D60                                      __ptext61 4B8C  
                                    __ptext53 4D80                                      __ptext45 35A2  
                                    __ptext37 2EBE                                      __ptext29 4CA6  
                                    __ptext70 2FCE                                      __ptext62 001C  
                                    __ptext54 4CBA                                      __ptext46 474A  
                                    __ptext38 4CE2                                      __ptext71 30DE  
                                    __ptext63 134A                                      __ptext55 4802  
                                    __ptext47 2C2A                                      __ptext39 470C  
                                    __ptext80 41B6                                      __ptext72 435C  
                                    __ptext64 4D90                                      __ptext56 4648  
                                    __ptext48 45FE                                      __ptext81 4A68  
                                    __ptext73 4146                                      __ptext65 4AD0  
                                    __ptext57 4DC4                                      __ptext49 3F36  
                                    __ptext90 4DD8                                      __ptext82 4D9E  
                                    __ptext74 3EAA                                      __ptext66 1D86  
                                    __ptext58 4CF4                                      __ptext91 4DEC  
                                    __ptext83 4DCE                                      __ptext75 4518  
                                    __ptext67 49AA                                      __ptext59 4C7C  
                                    __ptext92 4DF4                                      __ptext84 4B52  
                                    __ptext76 23EA                                      __ptext68 40C4  
                                    __ptext93 4DAC                                      __ptext85 4B32  
                                    __ptext77 4A44                                      __ptext69 3C62  
                                    __ptext94 48FC                                      __ptext86 4C4C  
                                    __ptext78 3CF8                                      __ptext95 4928  
                                    __ptext87 4788                                      __ptext79 4CCE  
                                    __ptext96 4BA8                                      __ptext88 4D06  
                                    __ptext97 4D2A                                      __ptext89 4D18  
                                    __ptext98 4BC4                                      __ptext99 4D3C  
                                    _fillRect 45FE                                      _drawChar 2C2A  
                                    __powers_ FDEB                          __end_of_Turn_Off_Fan 4BA8  
            __size_of_TFT_GreenTab_Initialize 002C    __end_of_Update_Setup_Screen_Cursor_Forward 2768  
 __size_of_Update_Setup_Screen_Cursor_Forward 01BA          ??_Update_Setup_Screen_Cursor_Forward 002E  
         ?_Update_Setup_Screen_Cursor_Forward 0001            _Update_Setup_Screen_Cursor_Forward 25AE  
                                    _colstart 00CE                                      _drawtext 35A2  
                                  strcpy@from 0013                                 _fillRectangle 3766  
                    __end_of_DS1621_Read_Temp 483E                              ?_Activate_Buzzer 0001  
                               __size_of_main 02BC                          __size_of_Monitor_Fan 004C  
                               ??_Do_Beep_Bad 0046                                      _time_Txt 016E  
                             fillRectangle@hi 0021                               fillRectangle@lo 0022  
                              _get_duty_cycle 3FBE                                 _drawFastVLine 3F36  
                                   printf@idx 009D                                     printf@exp 00A8  
                                    _spiwrite 4CBA                                     printf@val 00AA  
                                 ??_drawPixel 001B                                      _rowstart 00D2  
                    __end_of_DS3231_Read_Time 42FA                    __size_of_Initialize_Screen 03A0  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 4BC4  
                         _Increase_Duty_Cycle 4870                                ?_Update_Screen 0001  
                                  _INTCONbits 000FF2                                 _do_update_pwm 39BE  
       __end_of_Do_Change_Fan_Timer_Mode_Plus 4928        __size_of_Do_Change_Fan_Timer_Mode_Plus 002C  
               _Do_Change_Fan_Timer_Mode_Plus 48FC                                OpenUSART@spbrg 0011  
                                    isdigit@c 0013                                      scale@scl 0049  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                              __tdiv_to_l_@exp1 001F  
                            __tdiv_to_l_@cntr 001E                              __tdiv_to_l_@quot 001A  
                check_for_button_input@array1 018C                         __end_of_Decrease_Time 39BE  
                    _Update_Setup_Time_Screen 2AA6                         __end_of_write_command 4D90  
                            ___lldiv@dividend 0011                          ?_Increase_Duty_Cycle 0001  
                             fillScreen@color 0024                       do_update_pwm@duty_cycle 0043  
                      __end_of_get_duty_cycle 4042                        __size_of_Increase_Time 00A6  
             __end_of_Update_Setup_Fan_Screen 40C4                                fillRectangle@h 001A  
                              fillRectangle@w 0019                                fillRectangle@x 0023  
                              fillRectangle@y 0018                   check_for_button_input@F4236 0123  
                              ?_drawFastVLine 0018                                      printf@ap 009E  
                         __end_of_Do_Beep_Bad 4BE0                                  ??_write_data 0013  
                                  _TIMER1_isr 4DB8                                 fillRect@color 0026  
                                ?__tdiv_to_l_ 0011                                   _printf$2978 009A  
                              ?_do_update_pwm 0001                              ___lldiv@quotient 0019  
                                    strcpy@cp 0015                                      strlen@cp 0015  
                                    strcpy@to 0011                         I2C_Write_Cmd_Only@Cmd 0013  
                                _setup_minute 00D6                                  _setup_second 00D8  
                     __size_of_Init_Interrupt 0024                         __end_of_setAddrWindow 44C6  
                       __end_of_Do_Setup_Time 2208                            fillRectangle@color 001B  
                           do_update_pwm@dc_I 0044                             do_update_pwm@dc_f 0040  
                               drawChar@color 0030                                   _setup_month 00D7  
                       ??_Increase_Duty_Cycle 0046                            __end_of_write_data 4D80  
                   __size_of_force_nec_state0 0008                                  drawChar@line 0035  
                               ?_get_full_ADC 0011                      ??_check_for_button_input 0059  
                                drawChar@size 0034             __size_of_I2C_Write_Cmd_Write_Data 0020  
                        __size_of_DS1621_Init 001E                     ?_I2C_Write_Cmd_Write_Data 0013  
                             ?_get_duty_cycle 0011  
