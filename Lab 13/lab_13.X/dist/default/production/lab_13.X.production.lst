

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Dec 03 11:08:05 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	text107,global,reloc=2,class=CODE,delta=1
   124                           	psect	text108,global,reloc=2,class=CODE,delta=1
   125                           	psect	text109,global,reloc=2,class=CODE,delta=1
   126                           	psect	text110,global,reloc=2,class=CODE,delta=1
   127                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   128                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   129                           	psect	text112,global,reloc=2,class=CODE,delta=1
   130                           	psect	text113,global,reloc=2,class=CODE,delta=1
   131                           	psect	text114,global,reloc=2,class=CODE,delta=1
   132                           	psect	text115,global,reloc=2,class=CODE,delta=1
   133                           	psect	text116,global,reloc=2,class=CODE,delta=1
   134                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   135                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   136  0000                     
   137                           	psect	idataBANK0
   138  004AB4                     __pidataBANK0:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _RTC_ALARM_Txt
   142  004AB4  30                 	db	48
   143  004AB5  00                 	db	0
   144                           
   145                           ;initializer for _fan_set_temp
   146  004AB6  10                 	db	16
   147                           
   148                           ;initializer for _tempSecond
   149  004AB7  FF                 	db	255
   150                           
   151                           ;initializer for _wrap
   152  004AB8  01                 	db	1
   153                           
   154                           ;initializer for _tempF_Txt
   155  004AB9  2B                 	db	43
   156  004ABA  30                 	db	48
   157  004ABB  37                 	db	55
   158  004ABC  37                 	db	55
   159  004ABD  00                 	db	0
   160                           
   161                           ;initializer for _DC_Txt
   162  004ABE  30                 	db	48
   163  004ABF  30                 	db	48
   164  004AC0  30                 	db	48
   165  004AC1  00                 	db	0
   166                           
   167                           ;initializer for _Fan_SW_Txt
   168  004AC2  4F                 	db	79
   169  004AC3  46                 	db	70
   170  004AC4  46                 	db	70
   171  004AC5  00                 	db	0
   172                           
   173                           ;initializer for _Fan_Set_Temp_Txt
   174  004AC6  37                 	db	55
   175  004AC7  37                 	db	55
   176  004AC8  46                 	db	70
   177  004AC9  00                 	db	0
   178                           
   179                           ;initializer for _Fan_Timer_Mode_Txt
   180  004ACA  4F                 	db	79
   181  004ACB  46                 	db	70
   182  004ACC  46                 	db	70
   183  004ACD  00                 	db	0
   184                           
   185                           ;initializer for _Fan_Timer_Txt
   186  004ACE  30                 	db	48
   187  004ACF  30                 	db	48
   188  004AD0  30                 	db	48
   189  004AD1  00                 	db	0
   190                           
   191                           ;initializer for _tempC_Txt
   192  004AD2  2B                 	db	43
   193  004AD3  32                 	db	50
   194  004AD4  35                 	db	53
   195  004AD5  00                 	db	0
   196                           
   197                           	psect	idataBANK1
   198  003E46                     __pidataBANK1:
   199                           	opt stack 0
   200                           
   201                           ;initializer for _buffer
   202  003E46  20                 	db	32
   203  003E47  20                 	db	32
   204  003E48  20                 	db	32
   205  003E49  20                 	db	32
   206  003E4A  20                 	db	32
   207  003E4B  20                 	db	32
   208  003E4C  20                 	db	32
   209  003E4D  20                 	db	32
   210  003E4E  20                 	db	32
   211  003E4F  20                 	db	32
   212  003E50  20                 	db	32
   213  003E51  20                 	db	32
   214  003E52  20                 	db	32
   215  003E53  20                 	db	32
   216  003E54  20                 	db	32
   217  003E55  20                 	db	32
   218  003E56  20                 	db	32
   219  003E57  20                 	db	32
   220  003E58  20                 	db	32
   221  003E59  20                 	db	32
   222  003E5A  20                 	db	32
   223  003E5B  00                 	db	0
   224  003E5C  00                 	db	0
   225  003E5D  00                 	db	0
   226  003E5E  00                 	db	0
   227  003E5F  00                 	db	0
   228  003E60  00                 	db	0
   229  003E61  00                 	db	0
   230  003E62  00                 	db	0
   231  003E63  00                 	db	0
   232  003E64  00                 	db	0
   233  003E65  00                 	db	0
   234  003E66  00                 	db	0
   235  003E67  00                 	db	0
   236  003E68  00                 	db	0
   237                           
   238                           ;initializer for check_for_button_input@F4236
   239  003E69  A2                 	db	162
   240  003E6A  62                 	db	98
   241  003E6B  E2                 	db	226
   242  003E6C  22                 	db	34
   243  003E6D  02                 	db	2
   244  003E6E  C2                 	db	194
   245  003E6F  E0                 	db	224
   246  003E70  A8                 	db	168
   247  003E71  90                 	db	144
   248  003E72  68                 	db	104
   249  003E73  98                 	db	152
   250  003E74  B0                 	db	176
   251  003E75  30                 	db	48
   252  003E76  18                 	db	24
   253  003E77  7A                 	db	122
   254  003E78  10                 	db	16
   255  003E79  38                 	db	56
   256  003E7A  5A                 	db	90
   257  003E7B  42                 	db	66
   258  003E7C  4A                 	db	74
   259  003E7D  52                 	db	82
   260                           
   261                           ;initializer for _Timer_Table
   262  003E7E  00                 	db	0
   263  003E7F  05                 	db	5
   264  003E80  0A                 	db	10
   265  003E81  14                 	db	20
   266                           
   267                           ;initializer for _Timing_Txt
   268  003E82  45                 	db	69
   269  003E83  43                 	db	67
   270  003E84  45                 	db	69
   271  003E85  33                 	db	51
   272  003E86  33                 	db	51
   273  003E87  30                 	db	48
   274  003E88  31                 	db	49
   275  003E89  4C                 	db	76
   276  003E8A  20                 	db	32
   277  003E8B  46                 	db	70
   278  003E8C  69                 	db	105
   279  003E8D  6E                 	db	110
   280  003E8E  46                 	db	70
   281  003E8F  61                 	db	97
   282  003E90  32                 	db	50
   283  003E91  34                 	db	52
   284  003E92  2F                 	db	47
   285  003E93  31                 	db	49
   286  003E94  2F                 	db	47
   287  003E95  30                 	db	48
   288  003E96  31                 	db	49
   289  003E97  00                 	db	0
   290  003E98  00                 	db	0
   291                           
   292                           ;initializer for _date_Txt
   293  003E99  30                 	db	48
   294  003E9A  30                 	db	48
   295  003E9B  2F                 	db	47
   296  003E9C  30                 	db	48
   297  003E9D  30                 	db	48
   298  003E9E  2F                 	db	47
   299  003E9F  30                 	db	48
   300  003EA0  30                 	db	48
   301  003EA1  00                 	db	0
   302                           
   303                           ;initializer for _setup_date
   304  003EA2  30                 	db	48
   305  003EA3  31                 	db	49
   306  003EA4  2F                 	db	47
   307  003EA5  30                 	db	48
   308  003EA6  31                 	db	49
   309  003EA7  2F                 	db	47
   310  003EA8  30                 	db	48
   311  003EA9  30                 	db	48
   312  003EAA  00                 	db	0
   313                           
   314                           ;initializer for _setup_time
   315  003EAB  30                 	db	48
   316  003EAC  30                 	db	48
   317  003EAD  3A                 	db	58
   318  003EAE  30                 	db	48
   319  003EAF  30                 	db	48
   320  003EB0  3A                 	db	58
   321  003EB1  30                 	db	48
   322  003EB2  30                 	db	48
   323  003EB3  00                 	db	0
   324                           
   325                           ;initializer for _time_Txt
   326  003EB4  30                 	db	48
   327  003EB5  30                 	db	48
   328  003EB6  3A                 	db	58
   329  003EB7  30                 	db	48
   330  003EB8  30                 	db	48
   331  003EB9  3A                 	db	58
   332  003EBA  30                 	db	48
   333  003EBB  30                 	db	48
   334  003EBC  00                 	db	0
   335                           
   336                           ;initializer for _Volt_Txt
   337  003EBD  30                 	db	48
   338  003EBE  2E                 	db	46
   339  003EBF  30                 	db	48
   340  003EC0  30                 	db	48
   341  003EC1  56                 	db	86
   342  003EC2  00                 	db	0
   343                           
   344                           ;initializer for _Fan_Mode_Txt
   345  003EC3  4D                 	db	77
   346  003EC4  41                 	db	65
   347  003EC5  4E                 	db	78
   348  003EC6  55                 	db	85
   349  003EC7  00                 	db	0
   350                           
   351                           ;initializer for _RPM_Txt
   352  003EC8  30                 	db	48
   353  003EC9  30                 	db	48
   354  003ECA  30                 	db	48
   355  003ECB  30                 	db	48
   356  003ECC  00                 	db	0
   357                           
   358                           ;initializer for _setup_fan_set_text
   359  003ECD  30                 	db	48
   360  003ECE  37                 	db	55
   361  003ECF  37                 	db	55
   362  003ED0  46                 	db	70
   363  003ED1  00                 	db	0
   364                           
   365                           	psect	mediumconst
   366  00FBC0                     __pmediumconst:
   367                           	opt stack 0
   368  00FBC0  00                 	db	0
   369  00FBC1                     _font:
   370                           	opt stack 0
   371  00FBC1  00                 	db	0
   372  00FBC2  00                 	db	0
   373  00FBC3  00                 	db	0
   374  00FBC4  00                 	db	0
   375  00FBC5  00                 	db	0
   376  00FBC6  00                 	db	0
   377  00FBC7  00                 	db	0
   378  00FBC8  5F                 	db	95
   379  00FBC9  00                 	db	0
   380  00FBCA  00                 	db	0
   381  00FBCB  00                 	db	0
   382  00FBCC  07                 	db	7
   383  00FBCD  00                 	db	0
   384  00FBCE  07                 	db	7
   385  00FBCF  00                 	db	0
   386  00FBD0  14                 	db	20
   387  00FBD1  7F                 	db	127
   388  00FBD2  14                 	db	20
   389  00FBD3  7F                 	db	127
   390  00FBD4  14                 	db	20
   391  00FBD5  24                 	db	36
   392  00FBD6  2A                 	db	42
   393  00FBD7  7F                 	db	127
   394  00FBD8  2A                 	db	42
   395  00FBD9  12                 	db	18
   396  00FBDA  23                 	db	35
   397  00FBDB  13                 	db	19
   398  00FBDC  08                 	db	8
   399  00FBDD  64                 	db	100
   400  00FBDE  62                 	db	98
   401  00FBDF  36                 	db	54
   402  00FBE0  49                 	db	73
   403  00FBE1  56                 	db	86
   404  00FBE2  20                 	db	32
   405  00FBE3  50                 	db	80
   406  00FBE4  00                 	db	0
   407  00FBE5  08                 	db	8
   408  00FBE6  07                 	db	7
   409  00FBE7  03                 	db	3
   410  00FBE8  00                 	db	0
   411  00FBE9  00                 	db	0
   412  00FBEA  1C                 	db	28
   413  00FBEB  22                 	db	34
   414  00FBEC  41                 	db	65
   415  00FBED  00                 	db	0
   416  00FBEE  00                 	db	0
   417  00FBEF  41                 	db	65
   418  00FBF0  22                 	db	34
   419  00FBF1  1C                 	db	28
   420  00FBF2  00                 	db	0
   421  00FBF3  2A                 	db	42
   422  00FBF4  1C                 	db	28
   423  00FBF5  7F                 	db	127
   424  00FBF6  1C                 	db	28
   425  00FBF7  2A                 	db	42
   426  00FBF8  08                 	db	8
   427  00FBF9  08                 	db	8
   428  00FBFA  3E                 	db	62
   429  00FBFB  08                 	db	8
   430  00FBFC  08                 	db	8
   431  00FBFD  00                 	db	0
   432  00FBFE  80                 	db	128
   433  00FBFF  70                 	db	112
   434  00FC00  30                 	db	48
   435  00FC01  00                 	db	0
   436  00FC02  08                 	db	8
   437  00FC03  08                 	db	8
   438  00FC04  08                 	db	8
   439  00FC05  08                 	db	8
   440  00FC06  08                 	db	8
   441  00FC07  00                 	db	0
   442  00FC08  00                 	db	0
   443  00FC09  60                 	db	96
   444  00FC0A  60                 	db	96
   445  00FC0B  00                 	db	0
   446  00FC0C  20                 	db	32
   447  00FC0D  10                 	db	16
   448  00FC0E  08                 	db	8
   449  00FC0F  04                 	db	4
   450  00FC10  02                 	db	2
   451  00FC11  3E                 	db	62
   452  00FC12  51                 	db	81
   453  00FC13  49                 	db	73
   454  00FC14  45                 	db	69
   455  00FC15  3E                 	db	62
   456  00FC16  00                 	db	0
   457  00FC17  42                 	db	66
   458  00FC18  7F                 	db	127
   459  00FC19  40                 	db	64
   460  00FC1A  00                 	db	0
   461  00FC1B  72                 	db	114
   462  00FC1C  49                 	db	73
   463  00FC1D  49                 	db	73
   464  00FC1E  49                 	db	73
   465  00FC1F  46                 	db	70
   466  00FC20  21                 	db	33
   467  00FC21  41                 	db	65
   468  00FC22  49                 	db	73
   469  00FC23  4D                 	db	77
   470  00FC24  33                 	db	51
   471  00FC25  18                 	db	24
   472  00FC26  14                 	db	20
   473  00FC27  12                 	db	18
   474  00FC28  7F                 	db	127
   475  00FC29  10                 	db	16
   476  00FC2A  27                 	db	39
   477  00FC2B  45                 	db	69
   478  00FC2C  45                 	db	69
   479  00FC2D  45                 	db	69
   480  00FC2E  39                 	db	57
   481  00FC2F  3C                 	db	60
   482  00FC30  4A                 	db	74
   483  00FC31  49                 	db	73
   484  00FC32  49                 	db	73
   485  00FC33  31                 	db	49
   486  00FC34  41                 	db	65
   487  00FC35  21                 	db	33
   488  00FC36  11                 	db	17
   489  00FC37  09                 	db	9
   490  00FC38  07                 	db	7
   491  00FC39  36                 	db	54
   492  00FC3A  49                 	db	73
   493  00FC3B  49                 	db	73
   494  00FC3C  49                 	db	73
   495  00FC3D  36                 	db	54
   496  00FC3E  46                 	db	70
   497  00FC3F  49                 	db	73
   498  00FC40  49                 	db	73
   499  00FC41  29                 	db	41
   500  00FC42  1E                 	db	30
   501  00FC43  00                 	db	0
   502  00FC44  00                 	db	0
   503  00FC45  14                 	db	20
   504  00FC46  00                 	db	0
   505  00FC47  00                 	db	0
   506  00FC48  00                 	db	0
   507  00FC49  40                 	db	64
   508  00FC4A  34                 	db	52
   509  00FC4B  00                 	db	0
   510  00FC4C  00                 	db	0
   511  00FC4D  00                 	db	0
   512  00FC4E  08                 	db	8
   513  00FC4F  14                 	db	20
   514  00FC50  22                 	db	34
   515  00FC51  41                 	db	65
   516  00FC52  14                 	db	20
   517  00FC53  14                 	db	20
   518  00FC54  14                 	db	20
   519  00FC55  14                 	db	20
   520  00FC56  14                 	db	20
   521  00FC57  00                 	db	0
   522  00FC58  41                 	db	65
   523  00FC59  22                 	db	34
   524  00FC5A  14                 	db	20
   525  00FC5B  08                 	db	8
   526  00FC5C  02                 	db	2
   527  00FC5D  01                 	db	1
   528  00FC5E  59                 	db	89
   529  00FC5F  09                 	db	9
   530  00FC60  06                 	db	6
   531  00FC61  3E                 	db	62
   532  00FC62  41                 	db	65
   533  00FC63  5D                 	db	93
   534  00FC64  59                 	db	89
   535  00FC65  4E                 	db	78
   536  00FC66  7C                 	db	124
   537  00FC67  12                 	db	18
   538  00FC68  11                 	db	17
   539  00FC69  12                 	db	18
   540  00FC6A  7C                 	db	124
   541  00FC6B  7F                 	db	127
   542  00FC6C  49                 	db	73
   543  00FC6D  49                 	db	73
   544  00FC6E  49                 	db	73
   545  00FC6F  36                 	db	54
   546  00FC70  3E                 	db	62
   547  00FC71  41                 	db	65
   548  00FC72  41                 	db	65
   549  00FC73  41                 	db	65
   550  00FC74  22                 	db	34
   551  00FC75  7F                 	db	127
   552  00FC76  41                 	db	65
   553  00FC77  41                 	db	65
   554  00FC78  41                 	db	65
   555  00FC79  3E                 	db	62
   556  00FC7A  7F                 	db	127
   557  00FC7B  49                 	db	73
   558  00FC7C  49                 	db	73
   559  00FC7D  49                 	db	73
   560  00FC7E  41                 	db	65
   561  00FC7F  7F                 	db	127
   562  00FC80  09                 	db	9
   563  00FC81  09                 	db	9
   564  00FC82  09                 	db	9
   565  00FC83  01                 	db	1
   566  00FC84  3E                 	db	62
   567  00FC85  41                 	db	65
   568  00FC86  41                 	db	65
   569  00FC87  51                 	db	81
   570  00FC88  73                 	db	115
   571  00FC89  7F                 	db	127
   572  00FC8A  08                 	db	8
   573  00FC8B  08                 	db	8
   574  00FC8C  08                 	db	8
   575  00FC8D  7F                 	db	127
   576  00FC8E  00                 	db	0
   577  00FC8F  41                 	db	65
   578  00FC90  7F                 	db	127
   579  00FC91  41                 	db	65
   580  00FC92  00                 	db	0
   581  00FC93  20                 	db	32
   582  00FC94  40                 	db	64
   583  00FC95  41                 	db	65
   584  00FC96  3F                 	db	63
   585  00FC97  01                 	db	1
   586  00FC98  7F                 	db	127
   587  00FC99  08                 	db	8
   588  00FC9A  14                 	db	20
   589  00FC9B  22                 	db	34
   590  00FC9C  41                 	db	65
   591  00FC9D  7F                 	db	127
   592  00FC9E  40                 	db	64
   593  00FC9F  40                 	db	64
   594  00FCA0  40                 	db	64
   595  00FCA1  40                 	db	64
   596  00FCA2  7F                 	db	127
   597  00FCA3  02                 	db	2
   598  00FCA4  1C                 	db	28
   599  00FCA5  02                 	db	2
   600  00FCA6  7F                 	db	127
   601  00FCA7  7F                 	db	127
   602  00FCA8  04                 	db	4
   603  00FCA9  08                 	db	8
   604  00FCAA  10                 	db	16
   605  00FCAB  7F                 	db	127
   606  00FCAC  3E                 	db	62
   607  00FCAD  41                 	db	65
   608  00FCAE  41                 	db	65
   609  00FCAF  41                 	db	65
   610  00FCB0  3E                 	db	62
   611  00FCB1  7F                 	db	127
   612  00FCB2  09                 	db	9
   613  00FCB3  09                 	db	9
   614  00FCB4  09                 	db	9
   615  00FCB5  06                 	db	6
   616  00FCB6  3E                 	db	62
   617  00FCB7  41                 	db	65
   618  00FCB8  51                 	db	81
   619  00FCB9  21                 	db	33
   620  00FCBA  5E                 	db	94
   621  00FCBB  7F                 	db	127
   622  00FCBC  09                 	db	9
   623  00FCBD  19                 	db	25
   624  00FCBE  29                 	db	41
   625  00FCBF  46                 	db	70
   626  00FCC0                     __end_of_font:
   627                           	opt stack 0
   628  00FCC0                     _font2:
   629                           	opt stack 0
   630  00FCC0  26                 	db	38
   631  00FCC1  49                 	db	73
   632  00FCC2  49                 	db	73
   633  00FCC3  49                 	db	73
   634  00FCC4  32                 	db	50
   635  00FCC5  03                 	db	3
   636  00FCC6  01                 	db	1
   637  00FCC7  7F                 	db	127
   638  00FCC8  01                 	db	1
   639  00FCC9  03                 	db	3
   640  00FCCA  3F                 	db	63
   641  00FCCB  40                 	db	64
   642  00FCCC  40                 	db	64
   643  00FCCD  40                 	db	64
   644  00FCCE  3F                 	db	63
   645  00FCCF  1F                 	db	31
   646  00FCD0  20                 	db	32
   647  00FCD1  40                 	db	64
   648  00FCD2  20                 	db	32
   649  00FCD3  1F                 	db	31
   650  00FCD4  3F                 	db	63
   651  00FCD5  40                 	db	64
   652  00FCD6  38                 	db	56
   653  00FCD7  40                 	db	64
   654  00FCD8  3F                 	db	63
   655  00FCD9  63                 	db	99
   656  00FCDA  14                 	db	20
   657  00FCDB  08                 	db	8
   658  00FCDC  14                 	db	20
   659  00FCDD  63                 	db	99
   660  00FCDE  03                 	db	3
   661  00FCDF  04                 	db	4
   662  00FCE0  78                 	db	120
   663  00FCE1  04                 	db	4
   664  00FCE2  03                 	db	3
   665  00FCE3  61                 	db	97
   666  00FCE4  59                 	db	89
   667  00FCE5  49                 	db	73
   668  00FCE6  4D                 	db	77
   669  00FCE7  43                 	db	67
   670  00FCE8  00                 	db	0
   671  00FCE9  7F                 	db	127
   672  00FCEA  41                 	db	65
   673  00FCEB  41                 	db	65
   674  00FCEC  41                 	db	65
   675  00FCED  02                 	db	2
   676  00FCEE  04                 	db	4
   677  00FCEF  08                 	db	8
   678  00FCF0  10                 	db	16
   679  00FCF1  20                 	db	32
   680  00FCF2  00                 	db	0
   681  00FCF3  41                 	db	65
   682  00FCF4  41                 	db	65
   683  00FCF5  41                 	db	65
   684  00FCF6  7F                 	db	127
   685  00FCF7  04                 	db	4
   686  00FCF8  02                 	db	2
   687  00FCF9  01                 	db	1
   688  00FCFA  02                 	db	2
   689  00FCFB  04                 	db	4
   690  00FCFC  40                 	db	64
   691  00FCFD  40                 	db	64
   692  00FCFE  40                 	db	64
   693  00FCFF  40                 	db	64
   694  00FD00  40                 	db	64
   695  00FD01  00                 	db	0
   696  00FD02  03                 	db	3
   697  00FD03  07                 	db	7
   698  00FD04  08                 	db	8
   699  00FD05  00                 	db	0
   700  00FD06  20                 	db	32
   701  00FD07  54                 	db	84
   702  00FD08  54                 	db	84
   703  00FD09  78                 	db	120
   704  00FD0A  40                 	db	64
   705  00FD0B  7F                 	db	127
   706  00FD0C  28                 	db	40
   707  00FD0D  44                 	db	68
   708  00FD0E  44                 	db	68
   709  00FD0F  38                 	db	56
   710  00FD10  38                 	db	56
   711  00FD11  44                 	db	68
   712  00FD12  44                 	db	68
   713  00FD13  44                 	db	68
   714  00FD14  28                 	db	40
   715  00FD15  38                 	db	56
   716  00FD16  44                 	db	68
   717  00FD17  44                 	db	68
   718  00FD18  28                 	db	40
   719  00FD19  7F                 	db	127
   720  00FD1A  38                 	db	56
   721  00FD1B  54                 	db	84
   722  00FD1C  54                 	db	84
   723  00FD1D  54                 	db	84
   724  00FD1E  18                 	db	24
   725  00FD1F  00                 	db	0
   726  00FD20  08                 	db	8
   727  00FD21  7E                 	db	126
   728  00FD22  09                 	db	9
   729  00FD23  02                 	db	2
   730  00FD24  18                 	db	24
   731  00FD25  A4                 	db	164
   732  00FD26  A4                 	db	164
   733  00FD27  9C                 	db	156
   734  00FD28  78                 	db	120
   735  00FD29  7F                 	db	127
   736  00FD2A  08                 	db	8
   737  00FD2B  04                 	db	4
   738  00FD2C  04                 	db	4
   739  00FD2D  78                 	db	120
   740  00FD2E  00                 	db	0
   741  00FD2F  44                 	db	68
   742  00FD30  7D                 	db	125
   743  00FD31  40                 	db	64
   744  00FD32  00                 	db	0
   745  00FD33  20                 	db	32
   746  00FD34  40                 	db	64
   747  00FD35  40                 	db	64
   748  00FD36  3D                 	db	61
   749  00FD37  00                 	db	0
   750  00FD38  7F                 	db	127
   751  00FD39  10                 	db	16
   752  00FD3A  28                 	db	40
   753  00FD3B  44                 	db	68
   754  00FD3C  00                 	db	0
   755  00FD3D  00                 	db	0
   756  00FD3E  41                 	db	65
   757  00FD3F  7F                 	db	127
   758  00FD40  40                 	db	64
   759  00FD41  00                 	db	0
   760  00FD42  7C                 	db	124
   761  00FD43  04                 	db	4
   762  00FD44  78                 	db	120
   763  00FD45  04                 	db	4
   764  00FD46  78                 	db	120
   765  00FD47  7C                 	db	124
   766  00FD48  08                 	db	8
   767  00FD49  04                 	db	4
   768  00FD4A  04                 	db	4
   769  00FD4B  78                 	db	120
   770  00FD4C  38                 	db	56
   771  00FD4D  44                 	db	68
   772  00FD4E  44                 	db	68
   773  00FD4F  44                 	db	68
   774  00FD50  38                 	db	56
   775  00FD51  FC                 	db	252
   776  00FD52  18                 	db	24
   777  00FD53  24                 	db	36
   778  00FD54  24                 	db	36
   779  00FD55  18                 	db	24
   780  00FD56  18                 	db	24
   781  00FD57  24                 	db	36
   782  00FD58  24                 	db	36
   783  00FD59  18                 	db	24
   784  00FD5A  FC                 	db	252
   785  00FD5B  7C                 	db	124
   786  00FD5C  08                 	db	8
   787  00FD5D  04                 	db	4
   788  00FD5E  04                 	db	4
   789  00FD5F  08                 	db	8
   790  00FD60  48                 	db	72
   791  00FD61  54                 	db	84
   792  00FD62  54                 	db	84
   793  00FD63  54                 	db	84
   794  00FD64  24                 	db	36
   795  00FD65  04                 	db	4
   796  00FD66  04                 	db	4
   797  00FD67  3F                 	db	63
   798  00FD68  44                 	db	68
   799  00FD69  24                 	db	36
   800  00FD6A  3C                 	db	60
   801  00FD6B  40                 	db	64
   802  00FD6C  40                 	db	64
   803  00FD6D  20                 	db	32
   804  00FD6E  7C                 	db	124
   805  00FD6F  1C                 	db	28
   806  00FD70  20                 	db	32
   807  00FD71  40                 	db	64
   808  00FD72  20                 	db	32
   809  00FD73  1C                 	db	28
   810  00FD74  3C                 	db	60
   811  00FD75  40                 	db	64
   812  00FD76  30                 	db	48
   813  00FD77  40                 	db	64
   814  00FD78  3C                 	db	60
   815  00FD79  44                 	db	68
   816  00FD7A  28                 	db	40
   817  00FD7B  10                 	db	16
   818  00FD7C  28                 	db	40
   819  00FD7D  44                 	db	68
   820  00FD7E  4C                 	db	76
   821  00FD7F  90                 	db	144
   822  00FD80  90                 	db	144
   823  00FD81  90                 	db	144
   824  00FD82  7C                 	db	124
   825  00FD83  44                 	db	68
   826  00FD84  64                 	db	100
   827  00FD85  54                 	db	84
   828  00FD86  4C                 	db	76
   829  00FD87  44                 	db	68
   830  00FD88  00                 	db	0
   831  00FD89  08                 	db	8
   832  00FD8A  36                 	db	54
   833  00FD8B  41                 	db	65
   834  00FD8C  00                 	db	0
   835  00FD8D  00                 	db	0
   836  00FD8E  00                 	db	0
   837  00FD8F  77                 	db	119
   838  00FD90  00                 	db	0
   839  00FD91  00                 	db	0
   840  00FD92  00                 	db	0
   841  00FD93  41                 	db	65
   842  00FD94  36                 	db	54
   843  00FD95  08                 	db	8
   844  00FD96  00                 	db	0
   845  00FD97  02                 	db	2
   846  00FD98  01                 	db	1
   847  00FD99  02                 	db	2
   848  00FD9A  04                 	db	4
   849  00FD9B  02                 	db	2
   850  00FD9C                     __end_of_font2:
   851                           	opt stack 0
   852  00FD9C                     _dpowers:
   853                           	opt stack 0
   854  00FD9C  0001               	dw	1
   855  00FD9E  0000               	dw	0
   856  00FDA0  000A               	dw	10
   857  00FDA2  0000               	dw	0
   858  00FDA4  0064               	dw	100
   859  00FDA6  0000               	dw	0
   860  00FDA8  03E8               	dw	1000
   861  00FDAA  0000               	dw	0
   862  00FDAC  2710               	dw	10000
   863  00FDAE  0000               	dw	0
   864  00FDB0  86A0               	dw	34464
   865  00FDB2  0001               	dw	1
   866  00FDB4  4240               	dw	16960
   867  00FDB6  000F               	dw	15
   868  00FDB8  9680               	dw	38528
   869  00FDBA  0098               	dw	152
   870  00FDBC  E100               	dw	57600
   871  00FDBE  05F5               	dw	1525
   872  00FDC0  CA00               	dw	51712
   873  00FDC2  3B9A               	dw	15258
   874  00FDC4                     __end_of_dpowers:
   875                           	opt stack 0
   876  00FDC4                     __npowers_:
   877                           	opt stack 0
   878  00FDC4  00                 	db	0
   879  00FDC5  80                 	db	128
   880  00FDC6  3F                 	db	63
   881  00FDC7  CD                 	db	205
   882  00FDC8  CC                 	db	204
   883  00FDC9  3D                 	db	61
   884  00FDCA  D7                 	db	215
   885  00FDCB  23                 	db	35
   886  00FDCC  3C                 	db	60
   887  00FDCD  12                 	db	18
   888  00FDCE  83                 	db	131
   889  00FDCF  3A                 	db	58
   890  00FDD0  B7                 	db	183
   891  00FDD1  D1                 	db	209
   892  00FDD2  38                 	db	56
   893  00FDD3  C6                 	db	198
   894  00FDD4  27                 	db	39
   895  00FDD5  37                 	db	55
   896  00FDD6  38                 	db	56
   897  00FDD7  86                 	db	134
   898  00FDD8  35                 	db	53
   899  00FDD9  C0                 	db	192
   900  00FDDA  D6                 	db	214
   901  00FDDB  33                 	db	51
   902  00FDDC  CC                 	db	204
   903  00FDDD  2B                 	db	43
   904  00FDDE  32                 	db	50
   905  00FDDF  70                 	db	112
   906  00FDE0  89                 	db	137
   907  00FDE1  30                 	db	48
   908  00FDE2  E7                 	db	231
   909  00FDE3  DB                 	db	219
   910  00FDE4  2E                 	db	46
   911  00FDE5  E5                 	db	229
   912  00FDE6  3C                 	db	60
   913  00FDE7  1E                 	db	30
   914  00FDE8  42                 	db	66
   915  00FDE9  A2                 	db	162
   916  00FDEA  0D                 	db	13
   917  00FDEB                     __end_of__npowers_:
   918                           	opt stack 0
   919  00FDEB                     __powers_:
   920                           	opt stack 0
   921  00FDEB  00                 	db	0
   922  00FDEC  80                 	db	128
   923  00FDED  3F                 	db	63
   924  00FDEE  00                 	db	0
   925  00FDEF  20                 	db	32
   926  00FDF0  41                 	db	65
   927  00FDF1  00                 	db	0
   928  00FDF2  C8                 	db	200
   929  00FDF3  42                 	db	66
   930  00FDF4  00                 	db	0
   931  00FDF5  7A                 	db	122
   932  00FDF6  44                 	db	68
   933  00FDF7  40                 	db	64
   934  00FDF8  1C                 	db	28
   935  00FDF9  46                 	db	70
   936  00FDFA  50                 	db	80
   937  00FDFB  C3                 	db	195
   938  00FDFC  47                 	db	71
   939  00FDFD  24                 	db	36
   940  00FDFE  74                 	db	116
   941  00FDFF  49                 	db	73
   942  00FE00  97                 	db	151
   943  00FE01  18                 	db	24
   944  00FE02  4B                 	db	75
   945  00FE03  BC                 	db	188
   946  00FE04  BE                 	db	190
   947  00FE05  4C                 	db	76
   948  00FE06  6B                 	db	107
   949  00FE07  6E                 	db	110
   950  00FE08  4E                 	db	78
   951  00FE09  03                 	db	3
   952  00FE0A  15                 	db	21
   953  00FE0B  50                 	db	80
   954  00FE0C  79                 	db	121
   955  00FE0D  AD                 	db	173
   956  00FE0E  60                 	db	96
   957  00FE0F  F3                 	db	243
   958  00FE10  49                 	db	73
   959  00FE11  71                 	db	113
   960  00FE12                     __end_of__powers_:
   961                           	opt stack 0
   962  00FE12                     _hexpowers:
   963                           	opt stack 0
   964  00FE12  0001               	dw	1
   965  00FE14  0000               	dw	0
   966  00FE16  0010               	dw	16
   967  00FE18  0000               	dw	0
   968  00FE1A  0100               	dw	256
   969  00FE1C  0000               	dw	0
   970  00FE1E  1000               	dw	4096
   971  00FE20  0000               	dw	0
   972  00FE22  0000               	dw	0
   973  00FE24  0001               	dw	1
   974  00FE26  0000               	dw	0
   975  00FE28  0010               	dw	16
   976  00FE2A  0000               	dw	0
   977  00FE2C  0100               	dw	256
   978  00FE2E  0000               	dw	0
   979  00FE30  1000               	dw	4096
   980  00FE32                     __end_of_hexpowers:
   981                           	opt stack 0
   982  0000                     _ADCON0	set	4034
   983  0000                     _ADCON0bits	set	4034
   984  0000                     _ADCON1	set	4033
   985  0000                     _ADCON2	set	4032
   986  0000                     _ADRESH	set	4036
   987  0000                     _ADRESL	set	4035
   988  0000                     _CCP1CON	set	4029
   989  0000                     _CCP2CON	set	4026
   990  0000                     _CCPR1L	set	4030
   991  0000                     _CCPR2L	set	4027
   992  0000                     _INTCON2bits	set	4081
   993  0000                     _INTCON3bits	set	4080
   994  0000                     _INTCONbits	set	4082
   995  0000                     _OSCCON	set	4051
   996  0000                     _PIE1bits	set	3997
   997  0000                     _PIR1bits	set	3998
   998  0000                     _PORTA	set	3968
   999  0000                     _PORTBbits	set	3969
  1000  0000                     _PORTCbits	set	3970
  1001  0000                     _PORTD	set	3971
  1002  0000                     _PORTDbits	set	3971
  1003  0000                     _PORTE	set	3972
  1004  0000                     _PR2	set	4043
  1005  0000                     _RCSTA	set	4011
  1006  0000                     _RCSTAbits	set	4011
  1007  0000                     _SPBRG	set	4015
  1008  0000                     _SPBRGH	set	4016
  1009  0000                     _SSPBUF	set	4041
  1010  0000                     _SSPCON1	set	4038
  1011  0000                     _SSPSTAT	set	4039
  1012  0000                     _SSPSTATbits	set	4039
  1013  0000                     _T0CON	set	4053
  1014  0000                     _T0CONbits	set	4053
  1015  0000                     _T1CON	set	4045
  1016  0000                     _T1CONbits	set	4045
  1017  0000                     _T2CON	set	4042
  1018  0000                     _T3CON	set	4017
  1019  0000                     _TMR0H	set	4055
  1020  0000                     _TMR0L	set	4054
  1021  0000                     _TMR1H	set	4047
  1022  0000                     _TMR1L	set	4046
  1023  0000                     _TMR3L	set	4018
  1024  0000                     _TRISA	set	3986
  1025  0000                     _TRISB	set	3987
  1026  0000                     _TRISBbits	set	3987
  1027  0000                     _TRISC	set	3988
  1028  0000                     _TRISCbits	set	3988
  1029  0000                     _TRISD	set	3989
  1030  0000                     _TRISE	set	3990
  1031  0000                     _TXREG	set	4013
  1032  0000                     _TXSTA	set	4012
  1033  0000                     _TXSTAbits	set	4012
  1034  0000                     _RBPU	set	32655
  1035  0000                     _TRMT	set	32097
  1036  00FE32                     STR_9:
  1037                           
  1038                           ; BSR set to: 0
  1039  00FE32  54                 	db	84	;'T'
  1040  00FE33  68                 	db	104	;'h'
  1041  00FE34  65                 	db	101	;'e'
  1042  00FE35  20                 	db	32
  1043  00FE36  73                 	db	115	;'s'
  1044  00FE37  79                 	db	121	;'y'
  1045  00FE38  73                 	db	115	;'s'
  1046  00FE39  74                 	db	116	;'t'
  1047  00FE3A  65                 	db	101	;'e'
  1048  00FE3B  6D                 	db	109	;'m'
  1049  00FE3C  20                 	db	32
  1050  00FE3D  77                 	db	119	;'w'
  1051  00FE3E  69                 	db	105	;'i'
  1052  00FE3F  6C                 	db	108	;'l'
  1053  00FE40  6C                 	db	108	;'l'
  1054  00FE41  20                 	db	32
  1055  00FE42  6E                 	db	110	;'n'
  1056  00FE43  6F                 	db	111	;'o'
  1057  00FE44  77                 	db	119	;'w'
  1058  00FE45  20                 	db	32
  1059  00FE46  74                 	db	116	;'t'
  1060  00FE47  75                 	db	117	;'u'
  1061  00FE48  72                 	db	114	;'r'
  1062  00FE49  6E                 	db	110	;'n'
  1063  00FE4A  20                 	db	32
  1064  00FE4B  6F                 	db	111	;'o'
  1065  00FE4C  66                 	db	102	;'f'
  1066  00FE4D  66                 	db	102	;'f'
  1067  00FE4E  2E                 	db	46
  1068  00FE4F  20                 	db	32
  1069  00FE50  0D                 	db	13
  1070  00FE51  0A                 	db	10
  1071  00FE52  0A                 	db	10
  1072  00FE53  00                 	db	0
  1073  00FE54                     STR_11:
  1074                           
  1075                           ; BSR set to: 0
  1076  00FE54  54                 	db	84	;'T'
  1077  00FE55  68                 	db	104	;'h'
  1078  00FE56  65                 	db	101	;'e'
  1079  00FE57  20                 	db	32
  1080  00FE58  73                 	db	115	;'s'
  1081  00FE59  79                 	db	121	;'y'
  1082  00FE5A  73                 	db	115	;'s'
  1083  00FE5B  74                 	db	116	;'t'
  1084  00FE5C  65                 	db	101	;'e'
  1085  00FE5D  6D                 	db	109	;'m'
  1086  00FE5E  20                 	db	32
  1087  00FE5F  77                 	db	119	;'w'
  1088  00FE60  69                 	db	105	;'i'
  1089  00FE61  6C                 	db	108	;'l'
  1090  00FE62  6C                 	db	108	;'l'
  1091  00FE63  20                 	db	32
  1092  00FE64  6E                 	db	110	;'n'
  1093  00FE65  6F                 	db	111	;'o'
  1094  00FE66  77                 	db	119	;'w'
  1095  00FE67  20                 	db	32
  1096  00FE68  74                 	db	116	;'t'
  1097  00FE69  75                 	db	117	;'u'
  1098  00FE6A  72                 	db	114	;'r'
  1099  00FE6B  6E                 	db	110	;'n'
  1100  00FE6C  20                 	db	32
  1101  00FE6D  6F                 	db	111	;'o'
  1102  00FE6E  6E                 	db	110	;'n'
  1103  00FE6F  2E                 	db	46
  1104  00FE70  20                 	db	32
  1105  00FE71  0D                 	db	13
  1106  00FE72  0A                 	db	10
  1107  00FE73  0A                 	db	10
  1108  00FE74  00                 	db	0
  1109  00FE75                     STR_4:
  1110                           
  1111                           ; BSR set to: 0
  1112  00FE75  25                 	db	37
  1113  00FE76  30                 	db	48	;'0'
  1114  00FE77  32                 	db	50	;'2'
  1115  00FE78  78                 	db	120	;'x'
  1116  00FE79  3A                 	db	58	;':'
  1117  00FE7A  25                 	db	37
  1118  00FE7B  30                 	db	48	;'0'
  1119  00FE7C  32                 	db	50	;'2'
  1120  00FE7D  78                 	db	120	;'x'
  1121  00FE7E  3A                 	db	58	;':'
  1122  00FE7F  25                 	db	37
  1123  00FE80  30                 	db	48	;'0'
  1124  00FE81  32                 	db	50	;'2'
  1125  00FE82  78                 	db	120	;'x'
  1126  00FE83  20                 	db	32
  1127  00FE84  25                 	db	37
  1128  00FE85  30                 	db	48	;'0'
  1129  00FE86  32                 	db	50	;'2'
  1130  00FE87  78                 	db	120	;'x'
  1131  00FE88  2F                 	db	47
  1132  00FE89  25                 	db	37
  1133  00FE8A  30                 	db	48	;'0'
  1134  00FE8B  32                 	db	50	;'2'
  1135  00FE8C  78                 	db	120	;'x'
  1136  00FE8D  2F                 	db	47
  1137  00FE8E  25                 	db	37
  1138  00FE8F  30                 	db	48	;'0'
  1139  00FE90  32                 	db	50	;'2'
  1140  00FE91  78                 	db	120	;'x'
  1141  00FE92  00                 	db	0
  1142  00FE93                     STR_7:
  1143                           
  1144                           ; BSR set to: 0
  1145  00FE93  20                 	db	32
  1146  00FE94  52                 	db	82	;'R'
  1147  00FE95  50                 	db	80	;'P'
  1148  00FE96  4D                 	db	77	;'M'
  1149  00FE97  20                 	db	32
  1150  00FE98  3D                 	db	61	;'='
  1151  00FE99  20                 	db	32
  1152  00FE9A  25                 	db	37
  1153  00FE9B  64                 	db	100	;'d'
  1154  00FE9C  20                 	db	32
  1155  00FE9D  20                 	db	32
  1156  00FE9E  64                 	db	100	;'d'
  1157  00FE9F  63                 	db	99	;'c'
  1158  00FEA0  20                 	db	32
  1159  00FEA1  3D                 	db	61	;'='
  1160  00FEA2  20                 	db	32
  1161  00FEA3  25                 	db	37
  1162  00FEA4  64                 	db	100	;'d'
  1163  00FEA5  20                 	db	32
  1164  00FEA6  6C                 	db	108	;'l'
  1165  00FEA7  73                 	db	115	;'s'
  1166  00FEA8  20                 	db	32
  1167  00FEA9  3D                 	db	61	;'='
  1168  00FEAA  20                 	db	32
  1169  00FEAB  25                 	db	37
  1170  00FEAC  64                 	db	100	;'d'
  1171  00FEAD  0D                 	db	13
  1172  00FEAE  0A                 	db	10
  1173  00FEAF  00                 	db	0
  1174  00FEB0                     STR_10:
  1175                           
  1176                           ; BSR set to: 0
  1177  00FEB0  54                 	db	84	;'T'
  1178  00FEB1  68                 	db	104	;'h'
  1179  00FEB2  65                 	db	101	;'e'
  1180  00FEB3  20                 	db	32
  1181  00FEB4  73                 	db	115	;'s'
  1182  00FEB5  79                 	db	121	;'y'
  1183  00FEB6  73                 	db	115	;'s'
  1184  00FEB7  74                 	db	116	;'t'
  1185  00FEB8  65                 	db	101	;'e'
  1186  00FEB9  6D                 	db	109	;'m'
  1187  00FEBA  20                 	db	32
  1188  00FEBB  69                 	db	105	;'i'
  1189  00FEBC  73                 	db	115	;'s'
  1190  00FEBD  20                 	db	32
  1191  00FEBE  6E                 	db	110	;'n'
  1192  00FEBF  6F                 	db	111	;'o'
  1193  00FEC0  77                 	db	119	;'w'
  1194  00FEC1  20                 	db	32
  1195  00FEC2  4F                 	db	79	;'O'
  1196  00FEC3  46                 	db	70	;'F'
  1197  00FEC4  46                 	db	70	;'F'
  1198  00FEC5  2E                 	db	46
  1199  00FEC6  20                 	db	32
  1200  00FEC7  0D                 	db	13
  1201  00FEC8  0A                 	db	10
  1202  00FEC9  0A                 	db	10
  1203  00FECA  00                 	db	0
  1204  00FECB                     STR_8:
  1205                           
  1206                           ; BSR set to: 0
  1207  00FECB  4B                 	db	75	;'K'
  1208  00FECC  65                 	db	101	;'e'
  1209  00FECD  79                 	db	121	;'y'
  1210  00FECE  20                 	db	32
  1211  00FECF  4C                 	db	76	;'L'
  1212  00FED0  6F                 	db	111	;'o'
  1213  00FED1  63                 	db	99	;'c'
  1214  00FED2  61                 	db	97	;'a'
  1215  00FED3  74                 	db	116	;'t'
  1216  00FED4  69                 	db	105	;'i'
  1217  00FED5  6F                 	db	111	;'o'
  1218  00FED6  6E                 	db	110	;'n'
  1219  00FED7  20                 	db	32
  1220  00FED8  3D                 	db	61	;'='
  1221  00FED9  20                 	db	32
  1222  00FEDA  25                 	db	37
  1223  00FEDB  64                 	db	100	;'d'
  1224  00FEDC  20                 	db	32
  1225  00FEDD  0D                 	db	13
  1226  00FEDE  0A                 	db	10
  1227  00FEDF  0A                 	db	10
  1228  00FEE0  00                 	db	0
  1229  00FEE1                     STR_3:
  1230                           
  1231                           ; BSR set to: 0
  1232  00FEE1  43                 	db	67	;'C'
  1233  00FEE2  61                 	db	97	;'a'
  1234  00FEE3  6E                 	db	110	;'n'
  1235  00FEE4  6E                 	db	110	;'n'
  1236  00FEE5  6F                 	db	111	;'o'
  1237  00FEE6  74                 	db	116	;'t'
  1238  00FEE7  20                 	db	32
  1239  00FEE8  66                 	db	102	;'f'
  1240  00FEE9  69                 	db	105	;'i'
  1241  00FEEA  6E                 	db	110	;'n'
  1242  00FEEB  64                 	db	100	;'d'
  1243  00FEEC  20                 	db	32
  1244  00FEED  62                 	db	98	;'b'
  1245  00FEEE  75                 	db	117	;'u'
  1246  00FEEF  74                 	db	116	;'t'
  1247  00FEF0  74                 	db	116	;'t'
  1248  00FEF1  6F                 	db	111	;'o'
  1249  00FEF2  6E                 	db	110	;'n'
  1250  00FEF3  20                 	db	32
  1251  00FEF4  0D                 	db	13
  1252  00FEF5  0A                 	db	10
  1253  00FEF6  00                 	db	0
  1254  00FEF7                     STR_5:
  1255                           
  1256                           ; BSR set to: 0
  1257  00FEF7  20                 	db	32
  1258  00FEF8  54                 	db	84	;'T'
  1259  00FEF9  65                 	db	101	;'e'
  1260  00FEFA  6D                 	db	109	;'m'
  1261  00FEFB  70                 	db	112	;'p'
  1262  00FEFC  20                 	db	32
  1263  00FEFD  3D                 	db	61	;'='
  1264  00FEFE  20                 	db	32
  1265  00FEFF  25                 	db	37
  1266  00FF00  64                 	db	100	;'d'
  1267  00FF01  20                 	db	32
  1268  00FF02  43                 	db	67	;'C'
  1269  00FF03  20                 	db	32
  1270  00FF04  3D                 	db	61	;'='
  1271  00FF05  20                 	db	32
  1272  00FF06  25                 	db	37
  1273  00FF07  64                 	db	100	;'d'
  1274  00FF08  20                 	db	32
  1275  00FF09  46                 	db	70	;'F'
  1276  00FF0A  20                 	db	32
  1277  00FF0B  00                 	db	0
  1278  00FF0C                     STR_35:
  1279                           
  1280                           ; BSR set to: 0
  1281  00FF0C  20                 	db	32
  1282  00FF0D  54                 	db	84	;'T'
  1283  00FF0E  65                 	db	101	;'e'
  1284  00FF0F  6D                 	db	109	;'m'
  1285  00FF10  70                 	db	112	;'p'
  1286  00FF11  20                 	db	32
  1287  00FF12  3D                 	db	61	;'='
  1288  00FF13  20                 	db	32
  1289  00FF14  25                 	db	37
  1290  00FF15  64                 	db	100	;'d'
  1291  00FF16  20                 	db	32
  1292  00FF17  43                 	db	67	;'C'
  1293  00FF18  20                 	db	32
  1294  00FF19  3D                 	db	61	;'='
  1295  00FF1A  20                 	db	32
  1296  00FF1B  25                 	db	37
  1297  00FF1C  64                 	db	100	;'d'
  1298  00FF1D  20                 	db	32
  1299  00FF1E  46                 	db	70	;'F'
  1300  00FF1F  00                 	db	0
  1301  00FF20                     STR_6:
  1302                           
  1303                           ; BSR set to: 0
  1304  00FF20  4C                 	db	76	;'L'
  1305  00FF21  69                 	db	105	;'i'
  1306  00FF22  67                 	db	103	;'g'
  1307  00FF23  68                 	db	104	;'h'
  1308  00FF24  74                 	db	116	;'t'
  1309  00FF25  20                 	db	32
  1310  00FF26  53                 	db	83	;'S'
  1311  00FF27  65                 	db	101	;'e'
  1312  00FF28  6E                 	db	110	;'n'
  1313  00FF29  73                 	db	115	;'s'
  1314  00FF2A  6F                 	db	111	;'o'
  1315  00FF2B  72                 	db	114	;'r'
  1316  00FF2C  20                 	db	32
  1317  00FF2D  3D                 	db	61	;'='
  1318  00FF2E  20                 	db	32
  1319  00FF2F  25                 	db	37
  1320  00FF30  66                 	db	102	;'f'
  1321  00FF31  20                 	db	32
  1322  00FF32  56                 	db	86	;'V'
  1323  00FF33  00                 	db	0
  1324  00FF34                     STR_1:
  1325                           
  1326                           ; BSR set to: 0
  1327  00FF34  46                 	db	70	;'F'
  1328  00FF35  61                 	db	97	;'a'
  1329  00FF36  6E                 	db	110	;'n'
  1330  00FF37  20                 	db	32
  1331  00FF38  69                 	db	105	;'i'
  1332  00FF39  73                 	db	115	;'s'
  1333  00FF3A  20                 	db	32
  1334  00FF3B  74                 	db	116	;'t'
  1335  00FF3C  75                 	db	117	;'u'
  1336  00FF3D  72                 	db	114	;'r'
  1337  00FF3E  6E                 	db	110	;'n'
  1338  00FF3F  65                 	db	101	;'e'
  1339  00FF40  64                 	db	100	;'d'
  1340  00FF41  20                 	db	32
  1341  00FF42  6F                 	db	111	;'o'
  1342  00FF43  66                 	db	102	;'f'
  1343  00FF44  66                 	db	102	;'f'
  1344  00FF45  0D                 	db	13
  1345  00FF46  0A                 	db	10
  1346  00FF47  00                 	db	0
  1347  00FF48                     STR_2:
  1348                           
  1349                           ; BSR set to: 0
  1350  00FF48  46                 	db	70	;'F'
  1351  00FF49  61                 	db	97	;'a'
  1352  00FF4A  6E                 	db	110	;'n'
  1353  00FF4B  20                 	db	32
  1354  00FF4C  69                 	db	105	;'i'
  1355  00FF4D  73                 	db	115	;'s'
  1356  00FF4E  20                 	db	32
  1357  00FF4F  74                 	db	116	;'t'
  1358  00FF50  75                 	db	117	;'u'
  1359  00FF51  72                 	db	114	;'r'
  1360  00FF52  6E                 	db	110	;'n'
  1361  00FF53  65                 	db	101	;'e'
  1362  00FF54  64                 	db	100	;'d'
  1363  00FF55  20                 	db	32
  1364  00FF56  6F                 	db	111	;'o'
  1365  00FF57  6E                 	db	110	;'n'
  1366  00FF58  0D                 	db	13
  1367  00FF59  0A                 	db	10
  1368  00FF5A  00                 	db	0
  1369  00FF5B                     STR_47:
  1370                           
  1371                           ; BSR set to: 0
  1372  00FF5B  30                 	db	48	;'0'
  1373  00FF5C  31                 	db	49	;'1'
  1374  00FF5D  32                 	db	50	;'2'
  1375  00FF5E  33                 	db	51	;'3'
  1376  00FF5F  34                 	db	52	;'4'
  1377  00FF60  35                 	db	53	;'5'
  1378  00FF61  36                 	db	54	;'6'
  1379  00FF62  37                 	db	55	;'7'
  1380  00FF63  38                 	db	56	;'8'
  1381  00FF64  39                 	db	57	;'9'
  1382  00FF65  61                 	db	97	;'a'
  1383  00FF66  62                 	db	98	;'b'
  1384  00FF67  63                 	db	99	;'c'
  1385  00FF68  64                 	db	100	;'d'
  1386  00FF69  65                 	db	101	;'e'
  1387  00FF6A  66                 	db	102	;'f'
  1388  00FF6B  00                 	db	0
  1389  00FF6C                     STR_39:
  1390                           
  1391                           ; BSR set to: 0
  1392  00FF6C  20                 	db	32
  1393  00FF6D  20                 	db	32
  1394  00FF6E  53                 	db	83	;'S'
  1395  00FF6F  65                 	db	101	;'e'
  1396  00FF70  74                 	db	116	;'t'
  1397  00FF71  20                 	db	32
  1398  00FF72  46                 	db	70	;'F'
  1399  00FF73  61                 	db	97	;'a'
  1400  00FF74  6E                 	db	110	;'n'
  1401  00FF75  20                 	db	32
  1402  00FF76  54                 	db	84	;'T'
  1403  00FF77  65                 	db	101	;'e'
  1404  00FF78  6D                 	db	109	;'m'
  1405  00FF79  70                 	db	112	;'p'
  1406  00FF7A  00                 	db	0
  1407  00FF7B                     STR_12:
  1408                           
  1409                           ; BSR set to: 0
  1410  00FF7B  54                 	db	84	;'T'
  1411  00FF7C  65                 	db	101	;'e'
  1412  00FF7D  6D                 	db	109	;'m'
  1413  00FF7E  70                 	db	112	;'p'
  1414  00FF7F  65                 	db	101	;'e'
  1415  00FF80  72                 	db	114	;'r'
  1416  00FF81  61                 	db	97	;'a'
  1417  00FF82  74                 	db	116	;'t'
  1418  00FF83  75                 	db	117	;'u'
  1419  00FF84  72                 	db	114	;'r'
  1420  00FF85  65                 	db	101	;'e'
  1421  00FF86  3A                 	db	58	;':'
  1422  00FF87  00                 	db	0
  1423  00FF88                     STR_44:
  1424                           
  1425                           ; BSR set to: 0
  1426  00FF88  54                 	db	84	;'T'
  1427  00FF89  69                 	db	105	;'i'
  1428  00FF8A  6D                 	db	109	;'m'
  1429  00FF8B  65                 	db	101	;'e'
  1430  00FF8C  20                 	db	32
  1431  00FF8D  53                 	db	83	;'S'
  1432  00FF8E  65                 	db	101	;'e'
  1433  00FF8F  74                 	db	116	;'t'
  1434  00FF90  75                 	db	117	;'u'
  1435  00FF91  70                 	db	112	;'p'
  1436  00FF92  00                 	db	0
  1437  00FF93  00                 	db	0
  1438  00FF94                     STR_38:
  1439                           
  1440                           ; BSR set to: 0
  1441  00FF94  20                 	db	32
  1442  00FF95  46                 	db	70	;'F'
  1443  00FF96  61                 	db	97	;'a'
  1444  00FF97  6E                 	db	110	;'n'
  1445  00FF98  20                 	db	32
  1446  00FF99  53                 	db	83	;'S'
  1447  00FF9A  65                 	db	101	;'e'
  1448  00FF9B  74                 	db	116	;'t'
  1449  00FF9C  75                 	db	117	;'u'
  1450  00FF9D  70                 	db	112	;'p'
  1451  00FF9E  00                 	db	0
  1452  00FF9F  00                 	db	0
  1453  00FFA0                     STR_19:
  1454                           
  1455                           ; BSR set to: 0
  1456  00FFA0  46                 	db	70	;'F'
  1457  00FFA1  41                 	db	65	;'A'
  1458  00FFA2  4E                 	db	78	;'N'
  1459  00FFA3  20                 	db	32
  1460  00FFA4  53                 	db	83	;'S'
  1461  00FFA5  65                 	db	101	;'e'
  1462  00FFA6  74                 	db	116	;'t'
  1463  00FFA7  54                 	db	84	;'T'
  1464  00FFA8  65                 	db	101	;'e'
  1465  00FFA9  6D                 	db	109	;'m'
  1466  00FFAA  70                 	db	112	;'p'
  1467  00FFAB  00                 	db	0
  1468  00FFAC                     STR_25:
  1469                           
  1470                           ; BSR set to: 0
  1471  00FFAC  53                 	db	83	;'S'
  1472  00FFAD  59                 	db	89	;'Y'
  1473  00FFAE  53                 	db	83	;'S'
  1474  00FFAF  54                 	db	84	;'T'
  1475  00FFB0  45                 	db	69	;'E'
  1476  00FFB1  4D                 	db	77	;'M'
  1477  00FFB2  20                 	db	32
  1478  00FFB3  4F                 	db	79	;'O'
  1479  00FFB4  46                 	db	70	;'F'
  1480  00FFB5  46                 	db	70	;'F'
  1481  00FFB6  00                 	db	0
  1482  00FFB7                     STR_17:
  1483                           
  1484                           ; BSR set to: 0
  1485  00FFB7  54                 	db	84	;'T'
  1486  00FFB8  69                 	db	105	;'i'
  1487  00FFB9  6D                 	db	109	;'m'
  1488  00FFBA  65                 	db	101	;'e'
  1489  00FFBB  72                 	db	114	;'r'
  1490  00FFBC  20                 	db	32
  1491  00FFBD  4D                 	db	77	;'M'
  1492  00FFBE  6F                 	db	111	;'o'
  1493  00FFBF  64                 	db	100	;'d'
  1494  00FFC0  65                 	db	101	;'e'
  1495  00FFC1  00                 	db	0
  1496  00FFC2                     STR_18:
  1497                           
  1498                           ; BSR set to: 0
  1499  00FFC2  54                 	db	84	;'T'
  1500  00FFC3  69                 	db	105	;'i'
  1501  00FFC4  6D                 	db	109	;'m'
  1502  00FFC5  65                 	db	101	;'e'
  1503  00FFC6  72                 	db	114	;'r'
  1504  00FFC7  20                 	db	32
  1505  00FFC8  54                 	db	84	;'T'
  1506  00FFC9  69                 	db	105	;'i'
  1507  00FFCA  6D                 	db	109	;'m'
  1508  00FFCB  65                 	db	101	;'e'
  1509  00FFCC  00                 	db	0
  1510  00FFCD                     STR_30:
  1511                           
  1512                           ; BSR set to: 0
  1513  00FFCD  41                 	db	65	;'A'
  1514  00FFCE  55                 	db	85	;'U'
  1515  00FFCF  54                 	db	84	;'T'
  1516  00FFD0  4F                 	db	79	;'O'
  1517  00FFD1  00                 	db	0
  1518  00FFD2                     STR_31:
  1519                           
  1520                           ; BSR set to: 0
  1521  00FFD2  4D                 	db	77	;'M'
  1522  00FFD3  41                 	db	65	;'A'
  1523  00FFD4  4E                 	db	78	;'N'
  1524  00FFD5  55                 	db	85	;'U'
  1525  00FFD6  00                 	db	0
  1526  00FFD7                     STR_16:
  1527                           
  1528                           ; BSR set to: 0
  1529  00FFD7  44                 	db	68	;'D'
  1530  00FFD8  61                 	db	97	;'a'
  1531  00FFD9  74                 	db	116	;'t'
  1532  00FFDA  65                 	db	101	;'e'
  1533  00FFDB  00                 	db	0
  1534  00FFDC                     STR_23:
  1535                           
  1536                           ; BSR set to: 0
  1537  00FFDC  56                 	db	86	;'V'
  1538  00FFDD  6F                 	db	111	;'o'
  1539  00FFDE  6C                 	db	108	;'l'
  1540  00FFDF  74                 	db	116	;'t'
  1541  00FFE0  00                 	db	0
  1542  00FFE1                     STR_32:
  1543                           
  1544                           ; BSR set to: 0
  1545  00FFE1  4F                 	db	79	;'O'
  1546  00FFE2  4E                 	db	78	;'N'
  1547  00FFE3  20                 	db	32
  1548  00FFE4  00                 	db	0
  1549  00FFE5                     STR_27:
  1550                           
  1551                           ; BSR set to: 0
  1552  00FFE5  54                 	db	84	;'T'
  1553  00FFE6  4D                 	db	77	;'M'
  1554  00FFE7  31                 	db	49	;'1'
  1555  00FFE8  00                 	db	0
  1556  00FFE9                     STR_28:
  1557                           
  1558                           ; BSR set to: 0
  1559  00FFE9  54                 	db	84	;'T'
  1560  00FFEA  4D                 	db	77	;'M'
  1561  00FFEB  32                 	db	50	;'2'
  1562  00FFEC  00                 	db	0
  1563  00FFED                     STR_29:
  1564                           
  1565                           ; BSR set to: 0
  1566  00FFED  54                 	db	84	;'T'
  1567  00FFEE  4D                 	db	77	;'M'
  1568  00FFEF  33                 	db	51	;'3'
  1569  00FFF0  00                 	db	0
  1570  00FFF1                     STR_24:
  1571                           
  1572                           ; BSR set to: 0
  1573  00FFF1  52                 	db	82	;'R'
  1574  00FFF2  50                 	db	80	;'P'
  1575  00FFF3  4D                 	db	77	;'M'
  1576  00FFF4  00                 	db	0
  1577  00FFF5                     STR_13:
  1578                           
  1579                           ; BSR set to: 0
  1580  00FFF5  43                 	db	67	;'C'
  1581  00FFF6  2F                 	db	47
  1582  00FFF7  00                 	db	0
  1583  00FFF8                     STR_22:
  1584                           
  1585                           ; BSR set to: 0
  1586  00FFF8  44                 	db	68	;'D'
  1587  00FFF9  43                 	db	67	;'C'
  1588  00FFFA  00                 	db	0
  1589  00FFFB                     STR_21:
  1590                           
  1591                           ; BSR set to: 0
  1592  00FFFB  53                 	db	83	;'S'
  1593  00FFFC  57                 	db	87	;'W'
  1594  00FFFD  00                 	db	0
  1595  0000                     
  1596                           ; #config settings
  1597  00FFFE  00                 	db	0	; dummy byte at the end
  1598  0000                     
  1599                           	psect	cinit
  1600  00431E                     __pcinit:
  1601                           	opt stack 0
  1602  00431E                     start_initialization:
  1603                           	opt stack 0
  1604  00431E                     __initialization:
  1605                           	opt stack 0
  1606                           
  1607                           ; Clear objects allocated to BANK0 (38 bytes)
  1608  00431E  EE00  F0B4         	lfsr	0,__pbssBANK0
  1609  004322  0E26               	movlw	38
  1610  004324                     clear_0:
  1611  004324  6AEE               	clrf	postinc0,c
  1612  004326  06E8               	decf	wreg,f,c
  1613  004328  E1FD               	bnz	clear_0
  1614                           
  1615                           ; Clear objects allocated to COMRAM (18 bytes)
  1616  00432A  EE00  F05A         	lfsr	0,__pbssCOMRAM
  1617  00432E  0E12               	movlw	18
  1618  004330                     clear_1:
  1619  004330  6AEE               	clrf	postinc0,c
  1620  004332  06E8               	decf	wreg,f,c
  1621  004334  E1FD               	bnz	clear_1
  1622                           
  1623                           ; Initialize objects allocated to BANK1 (140 bytes)
  1624                           ; load TBLPTR registers with __pidataBANK1
  1625  004336  0E46               	movlw	low __pidataBANK1
  1626  004338  6EF6               	movwf	tblptrl,c
  1627  00433A  0E3E               	movlw	high __pidataBANK1
  1628  00433C  6EF7               	movwf	tblptrh,c
  1629  00433E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1630  004340  6EF8               	movwf	tblptru,c
  1631  004342  EE01  F000         	lfsr	0,__pdataBANK1
  1632  004346  EE10 F08C          	lfsr	1,140
  1633  00434A                     copy_data0:
  1634  00434A  0009               	tblrd		*+
  1635  00434C  CFF5 FFEE          	movff	tablat,postinc0
  1636  004350  50E5               	movf	postdec1,w,c
  1637  004352  50E1               	movf	fsr1l,w,c
  1638  004354  E1FA               	bnz	copy_data0
  1639                           
  1640                           ; Initialize objects allocated to BANK0 (34 bytes)
  1641                           ; load TBLPTR registers with __pidataBANK0
  1642  004356  0EB4               	movlw	low __pidataBANK0
  1643  004358  6EF6               	movwf	tblptrl,c
  1644  00435A  0E4A               	movlw	high __pidataBANK0
  1645  00435C  6EF7               	movwf	tblptrh,c
  1646  00435E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1647  004360  6EF8               	movwf	tblptru,c
  1648  004362  EE00  F0DA         	lfsr	0,__pdataBANK0
  1649  004366  EE10 F022          	lfsr	1,34
  1650  00436A                     copy_data1:
  1651  00436A  0009               	tblrd		*+
  1652  00436C  CFF5 FFEE          	movff	tablat,postinc0
  1653  004370  50E5               	movf	postdec1,w,c
  1654  004372  50E1               	movf	fsr1l,w,c
  1655  004374  E1FA               	bnz	copy_data1
  1656  004376                     end_of_initialization:
  1657                           	opt stack 0
  1658  004376                     __end_of__initialization:
  1659                           	opt stack 0
  1660  004376  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1661  004378  6EF8               	movwf	tblptru,c
  1662  00437A  0100               	movlb	0
  1663  00437C  EF6F  F00D         	goto	_main	;jump to C main() function
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postdec1	equ	0xFE5
  1671                           fsr1l	equ	0xFE1
  1672                           
  1673                           	psect	bssCOMRAM
  1674  00005A                     __pbssCOMRAM:
  1675                           	opt stack 0
  1676  00005A                     _Time_Elapsed:
  1677                           	opt stack 0
  1678  00005A                     	ds	2
  1679  00005C                     _rpm:
  1680                           	opt stack 0
  1681  00005C                     	ds	2
  1682  00005E                     _txt:
  1683                           	opt stack 0
  1684  00005E                     	ds	2
  1685  000060                     _FAN_TIMER_MODE:
  1686                           	opt stack 0
  1687  000060                     	ds	1
  1688  000061                     _Nec_state:
  1689                           	opt stack 0
  1690  000061                     	ds	1
  1691  000062                     _SYSTEM_ON:
  1692                           	opt stack 0
  1693  000062                     	ds	1
  1694  000063                     _day:
  1695                           	opt stack 0
  1696  000063                     	ds	1
  1697  000064                     _duty_cycle:
  1698                           	opt stack 0
  1699  000064                     	ds	1
  1700  000065                     _hour:
  1701                           	opt stack 0
  1702  000065                     	ds	1
  1703  000066                     _minute:
  1704                           	opt stack 0
  1705  000066                     	ds	1
  1706  000067                     _month:
  1707                           	opt stack 0
  1708  000067                     	ds	1
  1709  000068                     _second:
  1710                           	opt stack 0
  1711  000068                     	ds	1
  1712  000069                     _tempC:
  1713                           	opt stack 0
  1714  000069                     	ds	1
  1715  00006A                     _tempF:
  1716                           	opt stack 0
  1717  00006A                     	ds	1
  1718  00006B                     _year:
  1719                           	opt stack 0
  1720  00006B                     	ds	1
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1l	equ	0xFE1
  1729                           
  1730                           	psect	bssBANK0
  1731  0000B4                     __pbssBANK0:
  1732                           	opt stack 0
  1733  0000B4                     _Nec_code:
  1734                           	opt stack 0
  1735  0000B4                     	ds	4
  1736  0000B8                     _volt:
  1737                           	opt stack 0
  1738  0000B8                     	ds	3
  1739  0000BB                     _Nec_ok:
  1740                           	opt stack 0
  1741  0000BB                     	ds	2
  1742  0000BD                     _nbr:
  1743                           	opt stack 0
  1744  0000BD                     	ds	2
  1745  0000BF                     _rps:
  1746                           	opt stack 0
  1747  0000BF                     	ds	2
  1748  0000C1                     _FAN:
  1749                           	opt stack 0
  1750  0000C1                     	ds	1
  1751  0000C2                     _FANMODE:
  1752                           	opt stack 0
  1753  0000C2                     	ds	1
  1754  0000C3                     _FAN_TIMER_TIME:
  1755                           	opt stack 0
  1756  0000C3                     	ds	1
  1757  0000C4                     _INT0_flag:
  1758                           	opt stack 0
  1759  0000C4                     	ds	1
  1760  0000C5                     _INT1_flag:
  1761                           	opt stack 0
  1762  0000C5                     	ds	1
  1763  0000C6                     _INT2_flag:
  1764                           	opt stack 0
  1765  0000C6                     	ds	1
  1766  0000C7                     _In_Fan_Temp_Setup:
  1767                           	opt stack 0
  1768  0000C7                     	ds	1
  1769  0000C8                     _In_Time_Setup:
  1770                           	opt stack 0
  1771  0000C8                     	ds	1
  1772  0000C9                     _Nec_Button:
  1773                           	opt stack 0
  1774  0000C9                     	ds	1
  1775  0000CA                     _Select_Fan_Temp_Field:
  1776                           	opt stack 0
  1777  0000CA                     	ds	1
  1778  0000CB                     _Select_Field:
  1779                           	opt stack 0
  1780  0000CB                     	ds	1
  1781  0000CC                     __tft_type:
  1782                           	opt stack 0
  1783  0000CC                     	ds	1
  1784  0000CD                     _bit_count:
  1785                           	opt stack 0
  1786  0000CD                     	ds	1
  1787  0000CE                     _colstart:
  1788                           	opt stack 0
  1789  0000CE                     	ds	1
  1790  0000CF                     _dow:
  1791                           	opt stack 0
  1792  0000CF                     	ds	1
  1793  0000D0                     _found:
  1794                           	opt stack 0
  1795  0000D0                     	ds	1
  1796  0000D1                     _light_flag:
  1797                           	opt stack 0
  1798  0000D1                     	ds	1
  1799  0000D2                     _rowstart:
  1800                           	opt stack 0
  1801  0000D2                     	ds	1
  1802  0000D3                     _setup_day:
  1803                           	opt stack 0
  1804  0000D3                     	ds	1
  1805  0000D4                     _setup_fan_set_temp:
  1806                           	opt stack 0
  1807  0000D4                     	ds	1
  1808  0000D5                     _setup_hour:
  1809                           	opt stack 0
  1810  0000D5                     	ds	1
  1811  0000D6                     _setup_minute:
  1812                           	opt stack 0
  1813  0000D6                     	ds	1
  1814  0000D7                     _setup_month:
  1815                           	opt stack 0
  1816  0000D7                     	ds	1
  1817  0000D8                     _setup_second:
  1818                           	opt stack 0
  1819  0000D8                     	ds	1
  1820  0000D9                     _setup_year:
  1821                           	opt stack 0
  1822  0000D9                     	ds	1
  1823                           tblptru	equ	0xFF8
  1824                           tblptrh	equ	0xFF7
  1825                           tblptrl	equ	0xFF6
  1826                           tablat	equ	0xFF5
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           postdec1	equ	0xFE5
  1830                           fsr1l	equ	0xFE1
  1831                           
  1832                           	psect	dataBANK0
  1833  0000DA                     __pdataBANK0:
  1834                           	opt stack 0
  1835  0000DA                     _RTC_ALARM_Txt:
  1836                           	opt stack 0
  1837  0000DA                     	ds	2
  1838  0000DC                     _fan_set_temp:
  1839                           	opt stack 0
  1840  0000DC                     	ds	1
  1841  0000DD                     _tempSecond:
  1842                           	opt stack 0
  1843  0000DD                     	ds	1
  1844  0000DE                     _wrap:
  1845                           	opt stack 0
  1846  0000DE                     	ds	1
  1847  0000DF                     _tempF_Txt:
  1848                           	opt stack 0
  1849  0000DF                     	ds	5
  1850  0000E4                     _DC_Txt:
  1851                           	opt stack 0
  1852  0000E4                     	ds	4
  1853  0000E8                     _Fan_SW_Txt:
  1854                           	opt stack 0
  1855  0000E8                     	ds	4
  1856  0000EC                     _Fan_Set_Temp_Txt:
  1857                           	opt stack 0
  1858  0000EC                     	ds	4
  1859  0000F0                     _Fan_Timer_Mode_Txt:
  1860                           	opt stack 0
  1861  0000F0                     	ds	4
  1862  0000F4                     _Fan_Timer_Txt:
  1863                           	opt stack 0
  1864  0000F4                     	ds	4
  1865  0000F8                     _tempC_Txt:
  1866                           	opt stack 0
  1867  0000F8                     	ds	4
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           
  1877                           	psect	dataBANK1
  1878  000100                     __pdataBANK1:
  1879                           	opt stack 0
  1880  000100                     _buffer:
  1881                           	opt stack 0
  1882  000100                     	ds	35
  1883  000123                     check_for_button_input@F4236:
  1884                           	opt stack 0
  1885  000123                     	ds	21
  1886  000138                     _Timer_Table:
  1887                           	opt stack 0
  1888  000138                     	ds	4
  1889  00013C                     _Timing_Txt:
  1890                           	opt stack 0
  1891  00013C                     	ds	23
  1892  000153                     _date_Txt:
  1893                           	opt stack 0
  1894  000153                     	ds	9
  1895  00015C                     _setup_date:
  1896                           	opt stack 0
  1897  00015C                     	ds	9
  1898  000165                     _setup_time:
  1899                           	opt stack 0
  1900  000165                     	ds	9
  1901  00016E                     _time_Txt:
  1902                           	opt stack 0
  1903  00016E                     	ds	9
  1904  000177                     _Volt_Txt:
  1905                           	opt stack 0
  1906  000177                     	ds	6
  1907  00017D                     _Fan_Mode_Txt:
  1908                           	opt stack 0
  1909  00017D                     	ds	5
  1910  000182                     _RPM_Txt:
  1911                           	opt stack 0
  1912  000182                     	ds	5
  1913  000187                     _setup_fan_set_text:
  1914                           	opt stack 0
  1915  000187                     	ds	5
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postdec1	equ	0xFE5
  1923                           fsr1l	equ	0xFE1
  1924                           
  1925                           	psect	cstackBANK1
  1926  00018C                     __pcstackBANK1:
  1927                           	opt stack 0
  1928  00018C                     check_for_button_input@array1:
  1929                           	opt stack 0
  1930                           
  1931                           ; 21 bytes @ 0x0
  1932  00018C                     	ds	21
  1933  0001A1                     check_for_button_input@j:
  1934                           	opt stack 0
  1935                           
  1936                           ; 2 bytes @ 0x15
  1937  0001A1                     	ds	2
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           postdec1	equ	0xFE5
  1945                           fsr1l	equ	0xFE1
  1946                           
  1947                           	psect	cstackBANK0
  1948  000080                     __pcstackBANK0:
  1949                           	opt stack 0
  1950  000080                     ?___ftsub:
  1951                           	opt stack 0
  1952  000080                     ___ftsub@f1:
  1953                           	opt stack 0
  1954                           
  1955                           ; 3 bytes @ 0x0
  1956  000080                     	ds	3
  1957  000083                     ___ftsub@f2:
  1958                           	opt stack 0
  1959                           
  1960                           ; 3 bytes @ 0x3
  1961  000083                     	ds	3
  1962  000086                     ?_printf:
  1963                           	opt stack 0
  1964  000086                     printf@f:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x6
  1968  000086                     	ds	14
  1969  000094                     ??_printf:
  1970                           
  1971                           ; 0 bytes @ 0x14
  1972  000094                     	ds	6
  1973  00009A                     _printf$2979:
  1974                           	opt stack 0
  1975                           
  1976                           ; 3 bytes @ 0x1A
  1977  00009A                     	ds	3
  1978  00009D                     printf@idx:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x1D
  1982  00009D                     	ds	1
  1983  00009E                     printf@ap:
  1984                           	opt stack 0
  1985                           
  1986                           ; 2 bytes @ 0x1E
  1987  00009E                     	ds	2
  1988  0000A0                     printf@prec:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x20
  1992  0000A0                     	ds	2
  1993  0000A2                     printf@tmpval:
  1994                           	opt stack 0
  1995                           
  1996                           ; 4 bytes @ 0x22
  1997  0000A2                     	ds	4
  1998  0000A6                     printf@width:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x26
  2002  0000A6                     	ds	2
  2003  0000A8                     printf@exp:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x28
  2007  0000A8                     	ds	2
  2008  0000AA                     printf@val:
  2009                           	opt stack 0
  2010                           
  2011                           ; 4 bytes @ 0x2A
  2012  0000AA                     	ds	4
  2013  0000AE                     printf@flag:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0x2E
  2017  0000AE                     	ds	2
  2018  0000B0                     printf@fval:
  2019                           	opt stack 0
  2020                           
  2021                           ; 3 bytes @ 0x30
  2022  0000B0                     	ds	3
  2023  0000B3                     printf@c:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x33
  2027  0000B3                     	ds	1
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037                           	psect	cstackCOMRAM
  2038  000001                     __pcstackCOMRAM:
  2039                           	opt stack 0
  2040  000001                     ??_INT2_isr:
  2041  000001                     INT0_isr@k:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x0
  2045  000001                     	ds	2
  2046  000003                     ??_chkisr:
  2047                           
  2048                           ; 0 bytes @ 0x2
  2049  000003                     	ds	14
  2050  000011                     ??_isdigit:
  2051  000011                     ??_bcd_2_dec:
  2052  000011                     ?_strlen:
  2053                           	opt stack 0
  2054  000011                     ?_get_full_ADC:
  2055                           	opt stack 0
  2056  000011                     ?_get_duty_cycle:
  2057                           	opt stack 0
  2058  000011                     ?___wmul:
  2059                           	opt stack 0
  2060  000011                     ?___ftpack:
  2061                           	opt stack 0
  2062  000011                     ?___ftneg:
  2063                           	opt stack 0
  2064  000011                     ?__tdiv_to_l_:
  2065                           	opt stack 0
  2066  000011                     ?__div_to_l_:
  2067                           	opt stack 0
  2068  000011                     ?___lldiv:
  2069                           	opt stack 0
  2070  000011                     I2C_Read@ack:
  2071                           	opt stack 0
  2072  000011                     I2C_Write@outByte:
  2073                           	opt stack 0
  2074  000011                     spiwrite@x:
  2075                           	opt stack 0
  2076  000011                     putch@c:
  2077                           	opt stack 0
  2078  000011                     get_duty_cycle@temp:
  2079                           	opt stack 0
  2080  000011                     Wait_Half_Sec@k:
  2081                           	opt stack 0
  2082  000011                     OpenUSART@spbrg:
  2083                           	opt stack 0
  2084  000011                     ___wmul@multiplier:
  2085                           	opt stack 0
  2086  000011                     strcpy@to:
  2087                           	opt stack 0
  2088  000011                     strlen@s:
  2089                           	opt stack 0
  2090  000011                     __div_to_l_@f1:
  2091                           	opt stack 0
  2092  000011                     ___ftpack@arg:
  2093                           	opt stack 0
  2094  000011                     __tdiv_to_l_@f1:
  2095                           	opt stack 0
  2096  000011                     ___ftge@ff1:
  2097                           	opt stack 0
  2098  000011                     ___ftneg@f1:
  2099                           	opt stack 0
  2100  000011                     I2C_Init@c:
  2101                           	opt stack 0
  2102  000011                     ___lldiv@dividend:
  2103                           	opt stack 0
  2104                           
  2105                           ; 4 bytes @ 0x10
  2106  000011                     	ds	1
  2107  000012                     I2C_Read@n:
  2108                           	opt stack 0
  2109  000012                     I2C_Write@n:
  2110                           	opt stack 0
  2111  000012                     spiwrite@spidata:
  2112                           	opt stack 0
  2113  000012                     _isdigit$2601:
  2114                           	opt stack 0
  2115                           
  2116                           ; 1 bytes @ 0x11
  2117  000012                     	ds	1
  2118  000013                     ??_strlen:
  2119  000013                     ??_get_full_ADC:
  2120  000013                     I2C_Read@inByte:
  2121                           	opt stack 0
  2122  000013                     I2C_Write_Cmd_Only@Cmd:
  2123                           	opt stack 0
  2124  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  2125                           	opt stack 0
  2126  000013                     write_command@cmd_:
  2127                           	opt stack 0
  2128  000013                     write_data@data_:
  2129                           	opt stack 0
  2130  000013                     OpenUSART@config:
  2131                           	opt stack 0
  2132  000013                     isdigit@c:
  2133                           	opt stack 0
  2134  000013                     get_duty_cycle@set_temp:
  2135                           	opt stack 0
  2136  000013                     bcd_2_dec@dec:
  2137                           	opt stack 0
  2138  000013                     ___wmul@multiplicand:
  2139                           	opt stack 0
  2140  000013                     strcpy@from:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x12
  2144  000013                     	ds	1
  2145  000014                     ?_DS1621_Read_Temp:
  2146                           	opt stack 0
  2147  000014                     I2C_Write_Cmd_Only@Device:
  2148                           	opt stack 0
  2149  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  2150                           	opt stack 0
  2151  000014                     setAddrWindow@y0:
  2152                           	opt stack 0
  2153  000014                     DS3231_Read_Time@Address:
  2154                           	opt stack 0
  2155  000014                     ___ftpack@exp:
  2156                           	opt stack 0
  2157  000014                     __div_to_l_@f2:
  2158                           	opt stack 0
  2159  000014                     __tdiv_to_l_@f2:
  2160                           	opt stack 0
  2161  000014                     ___ftge@ff2:
  2162                           	opt stack 0
  2163                           
  2164                           ; 3 bytes @ 0x13
  2165  000014                     	ds	1
  2166  000015                     ??_get_duty_cycle:
  2167  000015                     I2C_Write_Cmd_Write_Data@Device:
  2168                           	opt stack 0
  2169  000015                     setAddrWindow@x1:
  2170                           	opt stack 0
  2171  000015                     bcd_2_dec@bcd:
  2172                           	opt stack 0
  2173  000015                     DS3231_Read_Time@Device:
  2174                           	opt stack 0
  2175  000015                     ___ftpack@sign:
  2176                           	opt stack 0
  2177  000015                     get_full_ADC@result:
  2178                           	opt stack 0
  2179  000015                     ___wmul@product:
  2180                           	opt stack 0
  2181  000015                     strcpy@cp:
  2182                           	opt stack 0
  2183  000015                     strlen@cp:
  2184                           	opt stack 0
  2185  000015                     ___lldiv@divisor:
  2186                           	opt stack 0
  2187                           
  2188                           ; 4 bytes @ 0x14
  2189  000015                     	ds	1
  2190  000016                     ??___ftpack:
  2191  000016                     setAddrWindow@y1:
  2192                           	opt stack 0
  2193  000016                     DS1621_Init@Device:
  2194                           	opt stack 0
  2195  000016                     DS1621_Read_Temp@Cmd:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x15
  2199  000016                     	ds	1
  2200  000017                     ??__tdiv_to_l_:
  2201  000017                     ??___ftge:
  2202  000017                     ?___awdiv:
  2203                           	opt stack 0
  2204  000017                     setAddrWindow@x0:
  2205                           	opt stack 0
  2206  000017                     DS1621_Read_Temp@Data_Ret:
  2207                           	opt stack 0
  2208  000017                     get_duty_cycle@diff_temp:
  2209                           	opt stack 0
  2210  000017                     delay_ms@ms:
  2211                           	opt stack 0
  2212  000017                     ___awdiv@dividend:
  2213                           	opt stack 0
  2214  000017                     __div_to_l_@quot:
  2215                           	opt stack 0
  2216                           
  2217                           ; 4 bytes @ 0x16
  2218  000017                     	ds	1
  2219  000018                     drawPixel@y:
  2220                           	opt stack 0
  2221  000018                     drawFastVLine@y:
  2222                           	opt stack 0
  2223  000018                     fillRectangle@y:
  2224                           	opt stack 0
  2225  000018                     DS1621_Read_Temp@Device:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x17
  2229  000018                     	ds	1
  2230  000019                     ?___awtoft:
  2231                           	opt stack 0
  2232  000019                     ?___lbtoft:
  2233                           	opt stack 0
  2234  000019                     ?___lltoft:
  2235                           	opt stack 0
  2236  000019                     drawFastVLine@h:
  2237                           	opt stack 0
  2238  000019                     fillRectangle@w:
  2239                           	opt stack 0
  2240  000019                     get_duty_cycle@dc:
  2241                           	opt stack 0
  2242  000019                     delay_ms@count:
  2243                           	opt stack 0
  2244  000019                     drawPixel@color:
  2245                           	opt stack 0
  2246  000019                     ___awdiv@divisor:
  2247                           	opt stack 0
  2248  000019                     ___awtoft@c:
  2249                           	opt stack 0
  2250  000019                     ___lldiv@quotient:
  2251                           	opt stack 0
  2252  000019                     ___lltoft@c:
  2253                           	opt stack 0
  2254                           
  2255                           ; 4 bytes @ 0x18
  2256  000019                     	ds	1
  2257  00001A                     fillRectangle@h:
  2258                           	opt stack 0
  2259  00001A                     drawFastVLine@color:
  2260                           	opt stack 0
  2261  00001A                     __tdiv_to_l_@quot:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0x19
  2265  00001A                     	ds	1
  2266  00001B                     drawPixel@x:
  2267                           	opt stack 0
  2268  00001B                     ___awdiv@counter:
  2269                           	opt stack 0
  2270  00001B                     __div_to_l_@cntr:
  2271                           	opt stack 0
  2272  00001B                     fillRectangle@color:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x1A
  2276  00001B                     	ds	1
  2277  00001C                     ??_drawFastVLine:
  2278  00001C                     ___awdiv@sign:
  2279                           	opt stack 0
  2280  00001C                     ___awtoft@sign:
  2281                           	opt stack 0
  2282  00001C                     __div_to_l_@exp1:
  2283                           	opt stack 0
  2284  00001C                     ___lbtoft@c:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x1B
  2288  00001C                     	ds	1
  2289  00001D                     ??_fillRectangle:
  2290  00001D                     ??___lltoft:
  2291  00001D                     ___lldiv@counter:
  2292                           	opt stack 0
  2293  00001D                     ___awdiv@quotient:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x1C
  2297  00001D                     	ds	1
  2298  00001E                     ?___llmod:
  2299                           	opt stack 0
  2300  00001E                     __tdiv_to_l_@cntr:
  2301                           	opt stack 0
  2302  00001E                     ___llmod@dividend:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x1D
  2306  00001E                     	ds	1
  2307  00001F                     ??_Set_D1_RGB:
  2308  00001F                     ?_get_RPM:
  2309                           	opt stack 0
  2310  00001F                     ?___ftmul:
  2311                           	opt stack 0
  2312  00001F                     __tdiv_to_l_@exp1:
  2313                           	opt stack 0
  2314  00001F                     Set_D2_RGB@rpm:
  2315                           	opt stack 0
  2316  00001F                     ___ftmul@f1:
  2317                           	opt stack 0
  2318                           
  2319                           ; 3 bytes @ 0x1E
  2320  00001F                     	ds	1
  2321  000020                     drawFastVLine@hi:
  2322                           	opt stack 0
  2323  000020                     Set_D1_RGB@duty_cycle:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x1F
  2327  000020                     	ds	1
  2328  000021                     drawFastVLine@lo:
  2329                           	opt stack 0
  2330  000021                     fillRectangle@hi:
  2331                           	opt stack 0
  2332  000021                     ___lltoft@exp:
  2333                           	opt stack 0
  2334  000021                     get_RPM@RPS:
  2335                           	opt stack 0
  2336  000021                     Set_D1_RGB@range:
  2337                           	opt stack 0
  2338  000021                     Set_D2_RGB@range:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x20
  2342  000021                     	ds	1
  2343  000022                     drawFastVLine@x:
  2344                           	opt stack 0
  2345  000022                     fillRectangle@lo:
  2346                           	opt stack 0
  2347  000022                     ___ftmul@f2:
  2348                           	opt stack 0
  2349  000022                     ___llmod@divisor:
  2350                           	opt stack 0
  2351                           
  2352                           ; 4 bytes @ 0x21
  2353  000022                     	ds	1
  2354  000023                     fillRect@y:
  2355                           	opt stack 0
  2356  000023                     fillRectangle@x:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x22
  2360  000023                     	ds	1
  2361  000024                     fillRect@w:
  2362                           	opt stack 0
  2363  000024                     fillScreen@color:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x23
  2367  000024                     	ds	1
  2368  000025                     ??___ftmul:
  2369  000025                     fillRect@h:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x24
  2373  000025                     	ds	1
  2374  000026                     ___llmod@counter:
  2375                           	opt stack 0
  2376  000026                     fillRect@color:
  2377                           	opt stack 0
  2378                           
  2379                           ; 2 bytes @ 0x25
  2380  000026                     	ds	2
  2381  000028                     ??_fillRect:
  2382  000028                     ___ftmul@exp:
  2383                           	opt stack 0
  2384                           
  2385                           ; 1 bytes @ 0x27
  2386  000028                     	ds	1
  2387  000029                     ___ftmul@f3_as_product:
  2388                           	opt stack 0
  2389                           
  2390                           ; 3 bytes @ 0x28
  2391  000029                     	ds	2
  2392  00002B                     fillRect@x:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x2A
  2396  00002B                     	ds	1
  2397  00002C                     ___ftmul@cntr:
  2398                           	opt stack 0
  2399  00002C                     fillRect@i:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x2B
  2403  00002C                     	ds	1
  2404  00002D                     ___ftmul@sign:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x2C
  2408  00002D                     	ds	1
  2409  00002E                     ?___ftdiv:
  2410                           	opt stack 0
  2411  00002E                     ?___fttol:
  2412                           	opt stack 0
  2413  00002E                     drawChar@y:
  2414                           	opt stack 0
  2415  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2416                           	opt stack 0
  2417  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2418                           	opt stack 0
  2419  00002E                     ___ftdiv@f1:
  2420                           	opt stack 0
  2421  00002E                     ___fttol@f1:
  2422                           	opt stack 0
  2423                           
  2424                           ; 3 bytes @ 0x2D
  2425  00002E                     	ds	1
  2426  00002F                     drawChar@c:
  2427                           	opt stack 0
  2428  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2429                           	opt stack 0
  2430  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x2E
  2434  00002F                     	ds	1
  2435  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2436                           	opt stack 0
  2437  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2438                           	opt stack 0
  2439  000030                     drawChar@color:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x2F
  2443  000030                     	ds	1
  2444  000031                     ___ftdiv@f2:
  2445                           	opt stack 0
  2446                           
  2447                           ; 3 bytes @ 0x30
  2448  000031                     	ds	1
  2449  000032                     ??___fttol:
  2450  000032                     drawChar@bg:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x31
  2454  000032                     	ds	2
  2455  000034                     ??___ftdiv:
  2456  000034                     drawChar@size:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0x33
  2460  000034                     	ds	1
  2461  000035                     drawChar@line:
  2462                           	opt stack 0
  2463                           
  2464                           ; 1 bytes @ 0x34
  2465  000035                     	ds	1
  2466  000036                     drawChar@x:
  2467                           	opt stack 0
  2468                           
  2469                           ; 1 bytes @ 0x35
  2470  000036                     	ds	1
  2471  000037                     drawChar@j:
  2472                           	opt stack 0
  2473  000037                     ___ftdiv@cntr:
  2474                           	opt stack 0
  2475  000037                     ___fttol@sign1:
  2476                           	opt stack 0
  2477                           
  2478                           ; 1 bytes @ 0x36
  2479  000037                     	ds	1
  2480  000038                     drawChar@i:
  2481                           	opt stack 0
  2482  000038                     ___ftdiv@f3:
  2483                           	opt stack 0
  2484  000038                     ___fttol@lval:
  2485                           	opt stack 0
  2486                           
  2487                           ; 4 bytes @ 0x37
  2488  000038                     	ds	1
  2489  000039                     drawtext@y:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0x38
  2493  000039                     	ds	1
  2494  00003A                     drawtext@_text:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x39
  2498  00003A                     	ds	1
  2499  00003B                     ___ftdiv@exp:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x3A
  2503  00003B                     	ds	1
  2504  00003C                     ___ftdiv@sign:
  2505                           	opt stack 0
  2506  00003C                     ___fttol@exp1:
  2507                           	opt stack 0
  2508  00003C                     drawtext@color:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x3B
  2512  00003C                     	ds	1
  2513  00003D                     ??_do_update_pwm:
  2514  00003D                     ?___awmod:
  2515                           	opt stack 0
  2516  00003D                     ?_Read_Volt:
  2517                           	opt stack 0
  2518  00003D                     ___awmod@dividend:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x3C
  2522  00003D                     	ds	1
  2523  00003E                     drawtext@bg:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x3D
  2527  00003E                     	ds	1
  2528  00003F                     ___awmod@divisor:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0x3E
  2532  00003F                     	ds	1
  2533  000040                     drawtext@size:
  2534                           	opt stack 0
  2535  000040                     do_update_pwm@dc_f:
  2536                           	opt stack 0
  2537  000040                     Read_Volt@volt:
  2538                           	opt stack 0
  2539                           
  2540                           ; 3 bytes @ 0x3F
  2541  000040                     	ds	1
  2542  000041                     ??_drawtext:
  2543  000041                     ___awmod@counter:
  2544                           	opt stack 0
  2545                           
  2546                           ; 1 bytes @ 0x40
  2547  000041                     	ds	1
  2548  000042                     ___awmod@sign:
  2549                           	opt stack 0
  2550                           
  2551                           ; 1 bytes @ 0x41
  2552  000042                     	ds	1
  2553  000043                     ?_dec_2_bcd:
  2554                           	opt stack 0
  2555  000043                     ?_fround:
  2556                           	opt stack 0
  2557  000043                     ?_scale:
  2558                           	opt stack 0
  2559  000043                     drawtext@x:
  2560                           	opt stack 0
  2561  000043                     do_update_pwm@duty_cycle:
  2562                           	opt stack 0
  2563  000043                     Read_Volt@ADC_Channel:
  2564                           	opt stack 0
  2565                           
  2566                           ; 1 bytes @ 0x42
  2567  000043                     	ds	1
  2568  000044                     drawtext@textsize:
  2569                           	opt stack 0
  2570  000044                     do_update_pwm@dc_I:
  2571                           	opt stack 0
  2572  000044                     Read_Volt@nStep:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x43
  2576  000044                     	ds	1
  2577  000045                     ??_dec_2_bcd:
  2578                           
  2579                           ; 0 bytes @ 0x44
  2580  000045                     	ds	1
  2581  000046                     drawtext@i:
  2582                           	opt stack 0
  2583  000046                     _fround$2977:
  2584                           	opt stack 0
  2585  000046                     _scale$2978:
  2586                           	opt stack 0
  2587                           
  2588                           ; 3 bytes @ 0x45
  2589  000046                     	ds	1
  2590  000047                     dec_2_bcd@bcd:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x46
  2594  000047                     	ds	1
  2595  000048                     drawtext@cursor_y:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x47
  2599  000048                     	ds	1
  2600  000049                     drawtext@cursor_x:
  2601                           	opt stack 0
  2602  000049                     dec_2_bcd@dec:
  2603                           	opt stack 0
  2604  000049                     scale@scl:
  2605                           	opt stack 0
  2606  000049                     _fround$2976:
  2607                           	opt stack 0
  2608                           
  2609                           ; 3 bytes @ 0x48
  2610  000049                     	ds	1
  2611  00004A                     ??_Update_Screen:
  2612  00004A                     DS3231_Write_Time@Device:
  2613                           	opt stack 0
  2614  00004A                     Update_Setup_Fan_Screen@dc_char1:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x49
  2618  00004A                     	ds	1
  2619  00004B                     DS3231_Write_Time@Address:
  2620                           	opt stack 0
  2621  00004B                     Update_Setup_Fan_Screen@dc_char2:
  2622                           	opt stack 0
  2623                           
  2624                           ; 1 bytes @ 0x4A
  2625  00004B                     	ds	1
  2626  00004C                     Update_Setup_Fan_Screen@dc_char3:
  2627                           	opt stack 0
  2628  00004C                     fround@prec:
  2629                           	opt stack 0
  2630  00004C                     Update_Screen@neg_tempC:
  2631                           	opt stack 0
  2632                           
  2633                           ; 2 bytes @ 0x4B
  2634  00004C                     	ds	1
  2635  00004D                     ?___ftadd:
  2636                           	opt stack 0
  2637  00004D                     ___ftadd@f1:
  2638                           	opt stack 0
  2639                           
  2640                           ; 3 bytes @ 0x4C
  2641  00004D                     	ds	1
  2642  00004E                     Update_Screen@neg_tempF:
  2643                           	opt stack 0
  2644                           
  2645                           ; 2 bytes @ 0x4D
  2646  00004E                     	ds	2
  2647  000050                     ___ftadd@f2:
  2648                           	opt stack 0
  2649                           
  2650                           ; 3 bytes @ 0x4F
  2651  000050                     	ds	3
  2652  000053                     ??___ftadd:
  2653                           
  2654                           ; 0 bytes @ 0x52
  2655  000053                     	ds	3
  2656  000056                     ___ftadd@sign:
  2657                           	opt stack 0
  2658                           
  2659                           ; 1 bytes @ 0x55
  2660  000056                     	ds	1
  2661  000057                     ___ftadd@exp2:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0x56
  2665  000057                     	ds	1
  2666  000058                     ___ftadd@exp1:
  2667                           	opt stack 0
  2668                           
  2669                           ; 1 bytes @ 0x57
  2670  000058                     	ds	1
  2671  000059                     
  2672                           ; 0 bytes @ 0x58
  2673  000059                     	ds	1
  2674  00005A                     tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           postinc0	equ	0xFEE
  2679                           wreg	equ	0xFE8
  2680                           postdec1	equ	0xFE5
  2681                           fsr1l	equ	0xFE1
  2682                           
  2683                           ; 0 bytes @ 0x59
  2684 ;;
  2685 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2686 ;;
  2687 ;; *************** function _main *****************
  2688 ;; Defined at:
  2689 ;;		line 113 in file "Main.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;Total ram usage:        0 bytes
  2708 ;; Hardware stack levels required when called:   13
  2709 ;; This function calls:
  2710 ;;		_DS1621_Read_Temp
  2711 ;;		_DS3231_Read_Time
  2712 ;;		_Deactivate_Buzzer
  2713 ;;		_Decrease_Duty_Cycle
  2714 ;;		_Do_Beep_Bad
  2715 ;;		_Do_Beep_Good
  2716 ;;		_Do_Change_Fan_Timer_Mode_Minus
  2717 ;;		_Do_Change_Fan_Timer_Mode_Plus
  2718 ;;		_Do_Init
  2719 ;;		_Do_Setup_Time
  2720 ;;		_Increase_Duty_Cycle
  2721 ;;		_Initialize_Screen
  2722 ;;		_Monitor_Fan
  2723 ;;		_Read_Volt
  2724 ;;		_Set_D1_RGB
  2725 ;;		_Set_D2_RGB
  2726 ;;		_Setup_Fan_Temp
  2727 ;;		_Toggle_Fan
  2728 ;;		_Turn_Off_Fan
  2729 ;;		_Update_Screen
  2730 ;;		___awdiv
  2731 ;;		___ftge
  2732 ;;		___wmul
  2733 ;;		_check_for_button_input
  2734 ;;		_get_RPM
  2735 ;;		_printf
  2736 ;; This function is called by:
  2737 ;;		Startup code after reset
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text0
  2742  001ADE                     __ptext0:
  2743                           	opt stack 0
  2744  001ADE                     _main:
  2745                           	opt stack 18
  2746                           
  2747                           ;Main.c: 115: Do_Init();
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;incstack = 0
  2751  001ADE  ECF0  F021         	call	_Do_Init	;wreg free
  2752                           
  2753                           ;Main.c: 117: Initialize_Screen();
  2754  001AE2  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  2755                           
  2756                           ;Main.c: 119: TMR3L = 0x00;
  2757  001AE6  0E00               	movlw	0
  2758  001AE8  6EB2               	movwf	4018,c	;volatile
  2759                           
  2760                           ;Main.c: 120: T3CON = 0x03;
  2761  001AEA  0E03               	movlw	3
  2762  001AEC  6EB1               	movwf	4017,c	;volatile
  2763                           
  2764                           ;Main.c: 122: Deactivate_Buzzer();
  2765  001AEE  EC12  F027         	call	_Deactivate_Buzzer	;wreg free
  2766                           
  2767                           ;Main.c: 124: tempSecond = 0xff;
  2768  001AF2  0100               	movlb	0	; () banked
  2769  001AF4  69DD               	setf	_tempSecond& (0+255),b
  2770  001AF6  D000               	goto	l10452
  2771  001AF8                     l10452:
  2772                           
  2773                           ;Main.c: 127: {
  2774                           ;Main.c: 128: DS3231_Read_Time();
  2775  001AF8  EC5C  F021         	call	_DS3231_Read_Time	;wreg free
  2776                           
  2777                           ;Main.c: 130: if(tempSecond != second)
  2778  001AFC  5068               	movf	_second,w,c
  2779  001AFE  0100               	movlb	0	; () banked
  2780  001B00  19DD               	xorwf	_tempSecond& (0+255),w,b
  2781  001B02  B4D8               	btfsc	status,2,c
  2782  001B04  D0A5               	goto	l10484
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;Main.c: 131: {
  2786                           ;Main.c: 132: tempSecond = second;
  2787  001B06  C068  F0DD         	movff	_second,_tempSecond
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;Main.c: 133: rpm = get_RPM();
  2791  001B0A  EC5C  F023         	call	_get_RPM	;wreg free
  2792  001B0E  C01F  F05C         	movff	?_get_RPM,_rpm
  2793  001B12  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  2794                           
  2795                           ;Main.c: 136: volt = Read_Volt(1);
  2796  001B16  0E01               	movlw	1
  2797  001B18  EC25  F021         	call	_Read_Volt
  2798  001B1C  C03D  F0B8         	movff	?_Read_Volt,_volt
  2799  001B20  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  2800  001B24  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  2801                           
  2802                           ;Main.c: 137: if (volt > 3.000) light_flag = 1;
  2803  001B28  0E00               	movlw	0
  2804  001B2A  6E11               	movwf	___ftge@ff1,c
  2805  001B2C  0E40               	movlw	64
  2806  001B2E  6E12               	movwf	___ftge@ff1+1,c
  2807  001B30  0E40               	movlw	64
  2808  001B32  6E13               	movwf	___ftge@ff1+2,c
  2809  001B34  C0B8  F014         	movff	_volt,___ftge@ff2
  2810  001B38  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  2811  001B3C  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  2812  001B40  EC90  F01E         	call	___ftge	;wreg free
  2813  001B44  B0D8               	btfsc	status,0,c
  2814  001B46  D004               	goto	l10464
  2815  001B48  0E01               	movlw	1
  2816  001B4A  0100               	movlb	0	; () banked
  2817  001B4C  6FD1               	movwf	_light_flag& (0+255),b
  2818  001B4E  D000               	goto	l10464
  2819  001B50                     l10464:
  2820                           
  2821                           ;Main.c: 138: tempC = DS1621_Read_Temp();
  2822  001B50  EC15  F024         	call	_DS1621_Read_Temp	;wreg free
  2823  001B54  5014               	movf	?_DS1621_Read_Temp,w,c
  2824  001B56  6E69               	movwf	_tempC,c
  2825                           
  2826                           ;Main.c: 139: tempF = (tempC * 9 / 5) + 32;
  2827  001B58  5069               	movf	_tempC,w,c
  2828  001B5A  6E11               	movwf	___wmul@multiplier,c
  2829  001B5C  6A12               	clrf	___wmul@multiplier+1,c
  2830  001B5E  BE11               	btfsc	___wmul@multiplier,7,c
  2831  001B60  0612               	decf	___wmul@multiplier+1,f,c
  2832  001B62  0E00               	movlw	0
  2833  001B64  6E14               	movwf	___wmul@multiplicand+1,c
  2834  001B66  0E09               	movlw	9
  2835  001B68  6E13               	movwf	___wmul@multiplicand,c
  2836  001B6A  ECE9  F024         	call	___wmul	;wreg free
  2837  001B6E  C011  F017         	movff	?___wmul,___awdiv@dividend
  2838  001B72  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2839  001B76  0E00               	movlw	0
  2840  001B78  6E1A               	movwf	___awdiv@divisor+1,c
  2841  001B7A  0E05               	movlw	5
  2842  001B7C  6E19               	movwf	___awdiv@divisor,c
  2843  001B7E  EC45  F01E         	call	___awdiv	;wreg free
  2844  001B82  5017               	movf	?___awdiv,w,c
  2845  001B84  0F20               	addlw	32
  2846  001B86  6E6A               	movwf	_tempF,c
  2847                           
  2848                           ;Main.c: 140: Set_D1_RGB(duty_cycle);
  2849  001B88  5064               	movf	_duty_cycle,w,c
  2850  001B8A  ECEE  F022         	call	_Set_D1_RGB
  2851                           
  2852                           ;Main.c: 141: Set_D2_RGB(rpm);
  2853  001B8E  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  2854  001B92  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  2855  001B96  EC75  F022         	call	_Set_D2_RGB	;wreg free
  2856                           
  2857                           ;Main.c: 143: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2858  001B9A  0E75               	movlw	low STR_4
  2859  001B9C  0100               	movlb	0	; () banked
  2860  001B9E  6F86               	movwf	printf@f& (0+255),b
  2861  001BA0  0EFE               	movlw	high STR_4
  2862  001BA2  0100               	movlb	0	; () banked
  2863  001BA4  6F87               	movwf	(printf@f+1)& (0+255),b
  2864  001BA6  C065  F088         	movff	_hour,?_printf+2
  2865  001BAA  0100               	movlb	0	; () banked
  2866  001BAC  6B89               	clrf	(?_printf+3)& (0+255),b
  2867  001BAE  C066  F08A         	movff	_minute,?_printf+4
  2868  001BB2  0100               	movlb	0	; () banked
  2869  001BB4  6B8B               	clrf	(?_printf+5)& (0+255),b
  2870  001BB6  C068  F08C         	movff	_second,?_printf+6
  2871  001BBA  0100               	movlb	0	; () banked
  2872  001BBC  6B8D               	clrf	(?_printf+7)& (0+255),b
  2873  001BBE  C067  F08E         	movff	_month,?_printf+8
  2874  001BC2  0100               	movlb	0	; () banked
  2875  001BC4  6B8F               	clrf	(?_printf+9)& (0+255),b
  2876  001BC6  C063  F090         	movff	_day,?_printf+10
  2877  001BCA  0100               	movlb	0	; () banked
  2878  001BCC  6B91               	clrf	(?_printf+11)& (0+255),b
  2879  001BCE  C06B  F092         	movff	_year,?_printf+12
  2880  001BD2  0100               	movlb	0	; () banked
  2881  001BD4  6B93               	clrf	(?_printf+13)& (0+255),b
  2882  001BD6  EC0E  F000         	call	_printf	;wreg free
  2883                           
  2884                           ;Main.c: 144: printf (" Temp = %d C = %d F ", tempC, tempF);
  2885  001BDA  0EF7               	movlw	low STR_5
  2886  001BDC  0100               	movlb	0	; () banked
  2887  001BDE  6F86               	movwf	printf@f& (0+255),b
  2888  001BE0  0EFE               	movlw	high STR_5
  2889  001BE2  0100               	movlb	0	; () banked
  2890  001BE4  6F87               	movwf	(printf@f+1)& (0+255),b
  2891  001BE6  5069               	movf	_tempC,w,c
  2892  001BE8  0100               	movlb	0	; () banked
  2893  001BEA  6F88               	movwf	(?_printf+2)& (0+255),b
  2894  001BEC  6B89               	clrf	(?_printf+3)& (0+255),b
  2895  001BEE  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  2896  001BF0  0789               	decf	(?_printf+3)& (0+255),f,b
  2897  001BF2  506A               	movf	_tempF,w,c
  2898  001BF4  0100               	movlb	0	; () banked
  2899  001BF6  6F8A               	movwf	(?_printf+4)& (0+255),b
  2900  001BF8  6B8B               	clrf	(?_printf+5)& (0+255),b
  2901  001BFA  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  2902  001BFC  078B               	decf	(?_printf+5)& (0+255),f,b
  2903  001BFE  EC0E  F000         	call	_printf	;wreg free
  2904                           
  2905                           ;Main.c: 145: printf ("Light Sensor = %f V", volt);
  2906  001C02  0E20               	movlw	low STR_6
  2907  001C04  0100               	movlb	0	; () banked
  2908  001C06  6F86               	movwf	printf@f& (0+255),b
  2909  001C08  0EFF               	movlw	high STR_6
  2910  001C0A  0100               	movlb	0	; () banked
  2911  001C0C  6F87               	movwf	(printf@f+1)& (0+255),b
  2912  001C0E  C0B8  F088         	movff	_volt,?_printf+2
  2913  001C12  C0B9  F089         	movff	_volt+1,?_printf+3
  2914  001C16  C0BA  F08A         	movff	_volt+2,?_printf+4
  2915  001C1A  EC0E  F000         	call	_printf	;wreg free
  2916                           
  2917                           ;Main.c: 146: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_flag);
  2918  001C1E  0E93               	movlw	low STR_7
  2919  001C20  0100               	movlb	0	; () banked
  2920  001C22  6F86               	movwf	printf@f& (0+255),b
  2921  001C24  0EFE               	movlw	high STR_7
  2922  001C26  0100               	movlb	0	; () banked
  2923  001C28  6F87               	movwf	(printf@f+1)& (0+255),b
  2924  001C2A  C05C  F088         	movff	_rpm,?_printf+2
  2925  001C2E  C05D  F089         	movff	_rpm+1,?_printf+3
  2926  001C32  C064  F08A         	movff	_duty_cycle,?_printf+4
  2927  001C36  0100               	movlb	0	; () banked
  2928  001C38  6B8B               	clrf	(?_printf+5)& (0+255),b
  2929  001C3A  C0D1  F08C         	movff	_light_flag,?_printf+6
  2930  001C3E  0100               	movlb	0	; () banked
  2931  001C40  6B8D               	clrf	(?_printf+7)& (0+255),b
  2932  001C42  EC0E  F000         	call	_printf	;wreg free
  2933                           
  2934                           ;Main.c: 148: Monitor_Fan();
  2935  001C46  EC9E  F022         	call	_Monitor_Fan	;wreg free
  2936                           
  2937                           ;Main.c: 150: Update_Screen();
  2938  001C4A  EC30  F006         	call	_Update_Screen	;wreg free
  2939  001C4E  D000               	goto	l10484
  2940  001C50                     l10484:
  2941                           
  2942                           ;Main.c: 151: }
  2943                           ;Main.c: 159: if (check_for_button_input()==1 && SYSTEM_ON == 1)
  2944  001C50  ECA1  F01D         	call	_check_for_button_input	;wreg free
  2945  001C54  06E8               	decf	wreg,f,c
  2946  001C56  A4D8               	btfss	status,2,c
  2947  001C58  D063               	goto	l10528
  2948  001C5A  0462               	decf	_SYSTEM_ON,w,c
  2949  001C5C  A4D8               	btfss	status,2,c
  2950  001C5E  D060               	goto	l10528
  2951                           
  2952                           ;Main.c: 160: {
  2953                           ;Main.c: 162: printf("Key Location = %d \r\n\n", found);
  2954  001C60  0ECB               	movlw	low STR_8
  2955  001C62  0100               	movlb	0	; () banked
  2956  001C64  6F86               	movwf	printf@f& (0+255),b
  2957  001C66  0EFE               	movlw	high STR_8
  2958  001C68  0100               	movlb	0	; () banked
  2959  001C6A  6F87               	movwf	(printf@f+1)& (0+255),b
  2960  001C6C  C0D0  F088         	movff	_found,?_printf+2
  2961  001C70  0100               	movlb	0	; () banked
  2962  001C72  6B89               	clrf	(?_printf+3)& (0+255),b
  2963  001C74  EC0E  F000         	call	_printf	;wreg free
  2964                           
  2965                           ;Main.c: 164: Nec_ok = 0;
  2966  001C78  0E00               	movlw	0
  2967  001C7A  0100               	movlb	0	; () banked
  2968  001C7C  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  2969  001C7E  0E00               	movlw	0
  2970  001C80  6FBB               	movwf	_Nec_ok& (0+255),b
  2971                           
  2972                           ;Main.c: 166: switch(found)
  2973  001C82  D032               	goto	l10526
  2974  001C84                     l10492:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;Main.c: 170: Do_Beep_Good();
  2978  001C84  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  2979                           
  2980                           ;Main.c: 171: Do_Setup_Time();
  2981  001C88  ECF1  F00F         	call	_Do_Setup_Time	;wreg free
  2982                           
  2983                           ;Main.c: 172: break;
  2984  001C8C  D049               	goto	l10528
  2985  001C8E                     l10496:
  2986                           
  2987                           ;Main.c: 175: Do_Beep_Good();
  2988  001C8E  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  2989                           
  2990                           ;Main.c: 176: Setup_Fan_Temp();
  2991  001C92  EC10  F011         	call	_Setup_Fan_Temp	;wreg free
  2992                           
  2993                           ;Main.c: 177: break;
  2994  001C96  D044               	goto	l10528
  2995  001C98                     l10500:
  2996                           
  2997                           ;Main.c: 180: Do_Beep_Good();
  2998  001C98  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  2999                           
  3000                           ;Main.c: 181: Do_Change_Fan_Timer_Mode_Minus();
  3001  001C9C  ECA8  F024         	call	_Do_Change_Fan_Timer_Mode_Minus	;wreg free
  3002                           
  3003                           ;Main.c: 182: break;
  3004  001CA0  D03F               	goto	l10528
  3005  001CA2                     l10504:
  3006                           
  3007                           ;Main.c: 185: Do_Beep_Good();
  3008  001CA2  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  3009                           
  3010                           ;Main.c: 186: Do_Change_Fan_Timer_Mode_Plus();
  3011  001CA6  EC92  F024         	call	_Do_Change_Fan_Timer_Mode_Plus	;wreg free
  3012                           
  3013                           ;Main.c: 187: break;
  3014  001CAA  D03A               	goto	l10528
  3015  001CAC                     l10508:
  3016                           
  3017                           ;Main.c: 190: Do_Beep_Good();
  3018  001CAC  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  3019                           
  3020                           ;Main.c: 191: Toggle_Fan();
  3021  001CB0  EC47  F026         	call	_Toggle_Fan	;wreg free
  3022                           
  3023                           ;Main.c: 192: break;
  3024  001CB4  D035               	goto	l10528
  3025  001CB6                     l10512:
  3026                           
  3027                           ;Main.c: 195: Do_Beep_Good();
  3028  001CB6  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  3029                           
  3030                           ;Main.c: 196: Decrease_Duty_Cycle();
  3031  001CBA  EC10  F025         	call	_Decrease_Duty_Cycle	;wreg free
  3032                           
  3033                           ;Main.c: 197: break;
  3034  001CBE  D030               	goto	l10528
  3035  001CC0                     l10514:
  3036                           
  3037                           ;Main.c: 200: Do_Beep_Good();
  3038  001CC0  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  3039                           
  3040                           ;Main.c: 201: Increase_Duty_Cycle();
  3041  001CC4  EC4C  F024         	call	_Increase_Duty_Cycle	;wreg free
  3042                           
  3043                           ;Main.c: 202: break;
  3044  001CC8  D02B               	goto	l10528
  3045  001CCA                     l10516:
  3046                           
  3047                           ;Main.c: 205: Do_Beep_Good();
  3048  001CCA  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  3049                           
  3050                           ;Main.c: 206: if (FANMODE == 1)
  3051  001CCE  0100               	movlb	0	; () banked
  3052  001CD0  05C2               	decf	_FANMODE& (0+255),w,b
  3053  001CD2  A4D8               	btfss	status,2,c
  3054  001CD4  D002               	goto	l10522
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Main.c: 207: FANMODE = 0;
  3058  001CD6  0E00               	movlw	0
  3059  001CD8  D001               	goto	L1
  3060  001CDA                     l10522:
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;Main.c: 208: else
  3064                           ;Main.c: 209: FANMODE = 1;
  3065  001CDA  0E01               	movlw	1
  3066  001CDC                     L1:
  3067  001CDC  0100               	movlb	0	; () banked
  3068  001CDE  6FC2               	movwf	_FANMODE& (0+255),b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;Main.c: 210: break;
  3072  001CE0  D01F               	goto	l10528
  3073  001CE2                     l10524:
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;Main.c: 213: Do_Beep_Bad();
  3077  001CE2  ECF6  F025         	call	_Do_Beep_Bad	;wreg free
  3078                           
  3079                           ;Main.c: 214: }
  3080  001CE6  D01C               	goto	l10528
  3081  001CE8                     l10526:
  3082  001CE8  0100               	movlb	0	; () banked
  3083  001CEA  51D0               	movf	_found& (0+255),w,b
  3084                           
  3085                           ; Switch size 1, requested type "space"
  3086                           ; Number of cases is 8, Range of values is 0 to 8
  3087                           ; switch strategies available:
  3088                           ; Name         Instructions Cycles
  3089                           ; simple_byte           25    13 (average)
  3090                           ;	Chosen strategy is simple_byte
  3091  001CEC  0A00               	xorlw	0	; case 0
  3092  001CEE  B4D8               	btfsc	status,2,c
  3093  001CF0  D7C9               	goto	l10492
  3094  001CF2  0A01               	xorlw	1	; case 1
  3095  001CF4  B4D8               	btfsc	status,2,c
  3096  001CF6  D7CB               	goto	l10496
  3097  001CF8  0A02               	xorlw	2	; case 3
  3098  001CFA  B4D8               	btfsc	status,2,c
  3099  001CFC  D7CD               	goto	l10500
  3100  001CFE  0A07               	xorlw	7	; case 4
  3101  001D00  B4D8               	btfsc	status,2,c
  3102  001D02  D7CF               	goto	l10504
  3103  001D04  0A01               	xorlw	1	; case 5
  3104  001D06  B4D8               	btfsc	status,2,c
  3105  001D08  D7D1               	goto	l10508
  3106  001D0A  0A03               	xorlw	3	; case 6
  3107  001D0C  B4D8               	btfsc	status,2,c
  3108  001D0E  D7D3               	goto	l10512
  3109  001D10  0A01               	xorlw	1	; case 7
  3110  001D12  B4D8               	btfsc	status,2,c
  3111  001D14  D7D5               	goto	l10514
  3112  001D16  0A0F               	xorlw	15	; case 8
  3113  001D18  B4D8               	btfsc	status,2,c
  3114  001D1A  D7D7               	goto	l10516
  3115  001D1C  D7E2               	goto	l10524
  3116                           
  3117                           ; BSR set to: 0
  3118  001D1E  D000               	goto	l10528
  3119  001D20                     l10528:
  3120                           
  3121                           ;Main.c: 215: }
  3122                           ;Main.c: 223: if (INT0_flag == 1 || light_flag == 1)
  3123  001D20  0100               	movlb	0	; () banked
  3124  001D22  05C4               	decf	_INT0_flag& (0+255),w,b
  3125  001D24  B4D8               	btfsc	status,2,c
  3126  001D26  D004               	goto	l10532
  3127                           
  3128                           ; BSR set to: 0
  3129  001D28  0100               	movlb	0	; () banked
  3130  001D2A  05D1               	decf	_light_flag& (0+255),w,b
  3131  001D2C  A4D8               	btfss	status,2,c
  3132  001D2E  D6E4               	goto	l10452
  3133  001D30                     l10532:
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;Main.c: 224: {
  3137                           ;Main.c: 225: INT0_flag = 0;
  3138  001D30  0E00               	movlw	0
  3139  001D32  0100               	movlb	0	; () banked
  3140  001D34  6FC4               	movwf	_INT0_flag& (0+255),b
  3141                           
  3142                           ;Main.c: 226: light_flag = 0;
  3143  001D36  0E00               	movlw	0
  3144  001D38  0100               	movlb	0	; () banked
  3145  001D3A  6FD1               	movwf	_light_flag& (0+255),b
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;Main.c: 228: if (SYSTEM_ON == 1)
  3149  001D3C  0462               	decf	_SYSTEM_ON,w,c
  3150  001D3E  A4D8               	btfss	status,2,c
  3151  001D40  D01C               	goto	l10546
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;Main.c: 229: {
  3155                           ;Main.c: 230: printf ("The system will now turn off. \r\n\n");
  3156  001D42  0E32               	movlw	low STR_9
  3157  001D44  0100               	movlb	0	; () banked
  3158  001D46  6F86               	movwf	printf@f& (0+255),b
  3159  001D48  0EFE               	movlw	high STR_9
  3160  001D4A  0100               	movlb	0	; () banked
  3161  001D4C  6F87               	movwf	(printf@f+1)& (0+255),b
  3162  001D4E  EC0E  F000         	call	_printf	;wreg free
  3163                           
  3164                           ;Main.c: 231: SYSTEM_ON = 0;
  3165  001D52  0E00               	movlw	0
  3166  001D54  6E62               	movwf	_SYSTEM_ON,c
  3167                           
  3168                           ;Main.c: 232: Turn_Off_Fan();
  3169  001D56  ECDA  F025         	call	_Turn_Off_Fan	;wreg free
  3170                           
  3171                           ;Main.c: 233: FAN_TIMER_MODE = 0;
  3172  001D5A  0E00               	movlw	0
  3173  001D5C  6E60               	movwf	_FAN_TIMER_MODE,c
  3174                           
  3175                           ;Main.c: 234: FAN_TIMER_TIME = 0;
  3176  001D5E  0E00               	movlw	0
  3177  001D60  0100               	movlb	0	; () banked
  3178  001D62  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;Main.c: 235: printf ("The system is now OFF. \r\n\n");
  3182  001D64  0EB0               	movlw	low STR_10
  3183  001D66  0100               	movlb	0	; () banked
  3184  001D68  6F86               	movwf	printf@f& (0+255),b
  3185  001D6A  0EFE               	movlw	high STR_10
  3186  001D6C  0100               	movlb	0	; () banked
  3187  001D6E  6F87               	movwf	(printf@f+1)& (0+255),b
  3188  001D70  EC0E  F000         	call	_printf	;wreg free
  3189                           
  3190                           ;Main.c: 236: Initialize_Screen();
  3191  001D74  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  3192                           
  3193                           ;Main.c: 237: }
  3194  001D78  D6BF               	goto	l10452
  3195  001D7A                     l10546:
  3196                           
  3197                           ;Main.c: 238: else if (SYSTEM_ON == 0)
  3198  001D7A  5062               	movf	_SYSTEM_ON,w,c
  3199  001D7C  A4D8               	btfss	status,2,c
  3200  001D7E  D6BC               	goto	l10452
  3201                           
  3202                           ;Main.c: 239: {
  3203                           ;Main.c: 240: printf ("The system will now turn on. \r\n\n");
  3204  001D80  0E54               	movlw	low STR_11
  3205  001D82  0100               	movlb	0	; () banked
  3206  001D84  6F86               	movwf	printf@f& (0+255),b
  3207  001D86  0EFE               	movlw	high STR_11
  3208  001D88  0100               	movlb	0	; () banked
  3209  001D8A  6F87               	movwf	(printf@f+1)& (0+255),b
  3210  001D8C  EC0E  F000         	call	_printf	;wreg free
  3211                           
  3212                           ;Main.c: 241: SYSTEM_ON = 1;
  3213  001D90  0E01               	movlw	1
  3214  001D92  6E62               	movwf	_SYSTEM_ON,c
  3215                           
  3216                           ;Main.c: 242: Initialize_Screen();
  3217  001D94  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  3218  001D98  D6AF               	goto	l10452
  3219  001D9A  EF0C  F000         	goto	start
  3220  001D9E                     __end_of_main:
  3221                           	opt stack 0
  3222                           tblptru	equ	0xFF8
  3223                           tblptrh	equ	0xFF7
  3224                           tblptrl	equ	0xFF6
  3225                           tablat	equ	0xFF5
  3226                           postinc0	equ	0xFEE
  3227                           wreg	equ	0xFE8
  3228                           postdec1	equ	0xFE5
  3229                           fsr1l	equ	0xFE1
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function _Update_Screen *****************
  3233 ;; Defined at:
  3234 ;;		line 100 in file "Main_Screen.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;		None
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  neg_tempF       2   77[COMRAM] int 
  3239 ;;  neg_tempC       2   75[COMRAM] int 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;		None               void
  3242 ;; Registers used:
  3243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;Total ram usage:        6 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:   10
  3256 ;; This function calls:
  3257 ;;		___awdiv
  3258 ;;		___awmod
  3259 ;;		___ftmul
  3260 ;;		___fttol
  3261 ;;		_drawtext
  3262 ;;		_strcpy
  3263 ;; This function is called by:
  3264 ;;		_main
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text1
  3269  000C60                     __ptext1:
  3270                           	opt stack 0
  3271  000C60                     _Update_Screen:
  3272                           	opt stack 20
  3273                           
  3274                           ;Main_Screen.c: 102: if (SYSTEM_ON == 1)
  3275                           
  3276                           ;incstack = 0
  3277  000C60  0462               	decf	_SYSTEM_ON,w,c
  3278  000C62  A4D8               	btfss	status,2,c
  3279  000C64  D37B               	goto	l981
  3280                           
  3281                           ;Main_Screen.c: 103: {
  3282                           ;Main_Screen.c: 104: if ((tempC & 0x80) == 0x80)
  3283  000C66  C069  F04A         	movff	_tempC,??_Update_Screen
  3284  000C6A  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3285  000C6C  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3286  000C6E  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3287  000C70  AE4A               	btfss	??_Update_Screen,7,c
  3288  000C72  D029               	goto	l10000
  3289                           
  3290                           ;Main_Screen.c: 105: {
  3291                           ;Main_Screen.c: 106: tempC_Txt[0] = '-';
  3292  000C74  0E2D               	movlw	45
  3293  000C76  0100               	movlb	0	; () banked
  3294  000C78  6FF8               	movwf	_tempC_Txt& (0+255),b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;Main_Screen.c: 107: int neg_tempC = -tempC;
  3298  000C7A  C069  F04A         	movff	_tempC,??_Update_Screen
  3299  000C7E  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3300  000C80  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3301  000C82  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3302  000C84  1E4A               	comf	??_Update_Screen,f,c
  3303  000C86  1E4B               	comf	??_Update_Screen+1,f,c
  3304  000C88  4A4A               	infsnz	??_Update_Screen,f,c
  3305  000C8A  2A4B               	incf	??_Update_Screen+1,f,c
  3306  000C8C  C04A  F04C         	movff	??_Update_Screen,Update_Screen@neg_tempC
  3307  000C90  C04B  F04D         	movff	??_Update_Screen+1,Update_Screen@neg_tempC+1
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;Main_Screen.c: 108: tempC_Txt[1] = (neg_tempC & 0x7f)/10 + '0';
  3311  000C94  0E7F               	movlw	127
  3312  000C96  144C               	andwf	Update_Screen@neg_tempC,w,c
  3313  000C98  6E17               	movwf	___awdiv@dividend,c
  3314  000C9A  6A18               	clrf	___awdiv@dividend+1,c
  3315  000C9C  0E00               	movlw	0
  3316  000C9E  6E1A               	movwf	___awdiv@divisor+1,c
  3317  000CA0  0E0A               	movlw	10
  3318  000CA2  6E19               	movwf	___awdiv@divisor,c
  3319  000CA4  EC45  F01E         	call	___awdiv	;wreg free
  3320  000CA8  5017               	movf	?___awdiv,w,c
  3321  000CAA  0F30               	addlw	48
  3322  000CAC  0100               	movlb	0	; () banked
  3323  000CAE  6FF9               	movwf	(_tempC_Txt+1)& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;Main_Screen.c: 109: tempC_Txt[2] = (neg_tempC & 0x7f)%10 + '0';
  3327  000CB0  0E7F               	movlw	127
  3328  000CB2  144C               	andwf	Update_Screen@neg_tempC,w,c
  3329  000CB4  6E3D               	movwf	___awmod@dividend,c
  3330  000CB6  6A3E               	clrf	___awmod@dividend+1,c
  3331  000CB8  0E00               	movlw	0
  3332  000CBA  6E40               	movwf	___awmod@divisor+1,c
  3333  000CBC  0E0A               	movlw	10
  3334  000CBE  6E3F               	movwf	___awmod@divisor,c
  3335  000CC0  EC34  F020         	call	___awmod	;wreg free
  3336  000CC4  D01D               	goto	L2
  3337  000CC6                     l10000:
  3338                           
  3339                           ;Main_Screen.c: 111: else
  3340                           ;Main_Screen.c: 112: {
  3341                           ;Main_Screen.c: 113: tempC_Txt[0] = '+';
  3342  000CC6  0E2B               	movlw	43
  3343  000CC8  0100               	movlb	0	; () banked
  3344  000CCA  6FF8               	movwf	_tempC_Txt& (0+255),b
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;Main_Screen.c: 114: tempC_Txt[1] = tempC/10 + '0';
  3348  000CCC  5069               	movf	_tempC,w,c
  3349  000CCE  6E17               	movwf	___awdiv@dividend,c
  3350  000CD0  6A18               	clrf	___awdiv@dividend+1,c
  3351  000CD2  BE17               	btfsc	___awdiv@dividend,7,c
  3352  000CD4  0618               	decf	___awdiv@dividend+1,f,c
  3353  000CD6  0E00               	movlw	0
  3354  000CD8  6E1A               	movwf	___awdiv@divisor+1,c
  3355  000CDA  0E0A               	movlw	10
  3356  000CDC  6E19               	movwf	___awdiv@divisor,c
  3357  000CDE  EC45  F01E         	call	___awdiv	;wreg free
  3358  000CE2  5017               	movf	?___awdiv,w,c
  3359  000CE4  0F30               	addlw	48
  3360  000CE6  0100               	movlb	0	; () banked
  3361  000CE8  6FF9               	movwf	(_tempC_Txt+1)& (0+255),b
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;Main_Screen.c: 115: tempC_Txt[2] = tempC%10 + '0';
  3365  000CEA  5069               	movf	_tempC,w,c
  3366  000CEC  6E3D               	movwf	___awmod@dividend,c
  3367  000CEE  6A3E               	clrf	___awmod@dividend+1,c
  3368  000CF0  BE3D               	btfsc	___awmod@dividend,7,c
  3369  000CF2  063E               	decf	___awmod@dividend+1,f,c
  3370  000CF4  0E00               	movlw	0
  3371  000CF6  6E40               	movwf	___awmod@divisor+1,c
  3372  000CF8  0E0A               	movlw	10
  3373  000CFA  6E3F               	movwf	___awmod@divisor,c
  3374  000CFC  EC34  F020         	call	___awmod	;wreg free
  3375  000D00                     L2:
  3376  000D00  503D               	movf	?___awmod,w,c
  3377  000D02  0F30               	addlw	48
  3378  000D04  0100               	movlb	0	; () banked
  3379  000D06  6FFA               	movwf	(_tempC_Txt+2)& (0+255),b
  3380  000D08  D000               	goto	l10006
  3381  000D0A                     l10006:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;Main_Screen.c: 116: }
  3385                           ;Main_Screen.c: 118: if (tempF < 0)
  3386  000D0A  AE6A               	btfss	_tempF,7,c
  3387  000D0C  D041               	goto	l10018
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;Main_Screen.c: 119: {
  3391                           ;Main_Screen.c: 120: tempF_Txt[0] = '-';
  3392  000D0E  0E2D               	movlw	45
  3393  000D10  0100               	movlb	0	; () banked
  3394  000D12  6FDF               	movwf	_tempF_Txt& (0+255),b
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;Main_Screen.c: 121: int neg_tempF = -tempF;
  3398  000D14  C06A  F04A         	movff	_tempF,??_Update_Screen
  3399  000D18  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3400  000D1A  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3401  000D1C  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3402  000D1E  1E4A               	comf	??_Update_Screen,f,c
  3403  000D20  1E4B               	comf	??_Update_Screen+1,f,c
  3404  000D22  4A4A               	infsnz	??_Update_Screen,f,c
  3405  000D24  2A4B               	incf	??_Update_Screen+1,f,c
  3406  000D26  C04A  F04E         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3407  000D2A  C04B  F04F         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;Main_Screen.c: 122: tempF_Txt[1] = neg_tempF/100 + '0';
  3411  000D2E  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3412  000D32  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3413  000D36  0E00               	movlw	0
  3414  000D38  6E1A               	movwf	___awdiv@divisor+1,c
  3415  000D3A  0E64               	movlw	100
  3416  000D3C  6E19               	movwf	___awdiv@divisor,c
  3417  000D3E  EC45  F01E         	call	___awdiv	;wreg free
  3418  000D42  5017               	movf	?___awdiv,w,c
  3419  000D44  0F30               	addlw	48
  3420  000D46  0100               	movlb	0	; () banked
  3421  000D48  6FE0               	movwf	(_tempF_Txt+1)& (0+255),b
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;Main_Screen.c: 123: tempF_Txt[2] = (neg_tempF/10)%10 + '0';
  3425  000D4A  0E00               	movlw	0
  3426  000D4C  6E1A               	movwf	___awdiv@divisor+1,c
  3427  000D4E  0E0A               	movlw	10
  3428  000D50  6E19               	movwf	___awdiv@divisor,c
  3429  000D52  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3430  000D56  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3431  000D5A  EC45  F01E         	call	___awdiv	;wreg free
  3432  000D5E  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3433  000D62  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3434  000D66  0E00               	movlw	0
  3435  000D68  6E40               	movwf	___awmod@divisor+1,c
  3436  000D6A  0E0A               	movlw	10
  3437  000D6C  6E3F               	movwf	___awmod@divisor,c
  3438  000D6E  EC34  F020         	call	___awmod	;wreg free
  3439  000D72  503D               	movf	?___awmod,w,c
  3440  000D74  0F30               	addlw	48
  3441  000D76  0100               	movlb	0	; () banked
  3442  000D78  6FE1               	movwf	(_tempF_Txt+2)& (0+255),b
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;Main_Screen.c: 124: tempF_Txt[3] = neg_tempF%10 + '0';
  3446  000D7A  C04E  F03D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3447  000D7E  C04F  F03E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3448  000D82  0E00               	movlw	0
  3449  000D84  6E40               	movwf	___awmod@divisor+1,c
  3450  000D86  0E0A               	movlw	10
  3451  000D88  6E3F               	movwf	___awmod@divisor,c
  3452  000D8A  EC34  F020         	call	___awmod	;wreg free
  3453  000D8E  D036               	goto	L3
  3454  000D90                     l10018:
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;Main_Screen.c: 126: else
  3458                           ;Main_Screen.c: 127: {
  3459                           ;Main_Screen.c: 128: tempF_Txt[0] = '+';
  3460  000D90  0E2B               	movlw	43
  3461  000D92  0100               	movlb	0	; () banked
  3462  000D94  6FDF               	movwf	_tempF_Txt& (0+255),b
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;Main_Screen.c: 129: tempF_Txt[1] = tempF/100 + '0';
  3466  000D96  506A               	movf	_tempF,w,c
  3467  000D98  6E17               	movwf	___awdiv@dividend,c
  3468  000D9A  6A18               	clrf	___awdiv@dividend+1,c
  3469  000D9C  BE17               	btfsc	___awdiv@dividend,7,c
  3470  000D9E  0618               	decf	___awdiv@dividend+1,f,c
  3471  000DA0  0E00               	movlw	0
  3472  000DA2  6E1A               	movwf	___awdiv@divisor+1,c
  3473  000DA4  0E64               	movlw	100
  3474  000DA6  6E19               	movwf	___awdiv@divisor,c
  3475  000DA8  EC45  F01E         	call	___awdiv	;wreg free
  3476  000DAC  5017               	movf	?___awdiv,w,c
  3477  000DAE  0F30               	addlw	48
  3478  000DB0  0100               	movlb	0	; () banked
  3479  000DB2  6FE0               	movwf	(_tempF_Txt+1)& (0+255),b
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;Main_Screen.c: 130: tempF_Txt[2] = (tempF/10)%10 + '0';
  3483  000DB4  0E00               	movlw	0
  3484  000DB6  6E1A               	movwf	___awdiv@divisor+1,c
  3485  000DB8  0E0A               	movlw	10
  3486  000DBA  6E19               	movwf	___awdiv@divisor,c
  3487  000DBC  506A               	movf	_tempF,w,c
  3488  000DBE  6E17               	movwf	___awdiv@dividend,c
  3489  000DC0  6A18               	clrf	___awdiv@dividend+1,c
  3490  000DC2  BE17               	btfsc	___awdiv@dividend,7,c
  3491  000DC4  0618               	decf	___awdiv@dividend+1,f,c
  3492  000DC6  EC45  F01E         	call	___awdiv	;wreg free
  3493  000DCA  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3494  000DCE  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3495  000DD2  0E00               	movlw	0
  3496  000DD4  6E40               	movwf	___awmod@divisor+1,c
  3497  000DD6  0E0A               	movlw	10
  3498  000DD8  6E3F               	movwf	___awmod@divisor,c
  3499  000DDA  EC34  F020         	call	___awmod	;wreg free
  3500  000DDE  503D               	movf	?___awmod,w,c
  3501  000DE0  0F30               	addlw	48
  3502  000DE2  0100               	movlb	0	; () banked
  3503  000DE4  6FE1               	movwf	(_tempF_Txt+2)& (0+255),b
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;Main_Screen.c: 131: tempF_Txt[3] = tempF%10 + '0';
  3507  000DE6  506A               	movf	_tempF,w,c
  3508  000DE8  6E3D               	movwf	___awmod@dividend,c
  3509  000DEA  6A3E               	clrf	___awmod@dividend+1,c
  3510  000DEC  BE3D               	btfsc	___awmod@dividend,7,c
  3511  000DEE  063E               	decf	___awmod@dividend+1,f,c
  3512  000DF0  0E00               	movlw	0
  3513  000DF2  6E40               	movwf	___awmod@divisor+1,c
  3514  000DF4  0E0A               	movlw	10
  3515  000DF6  6E3F               	movwf	___awmod@divisor,c
  3516  000DF8  EC34  F020         	call	___awmod	;wreg free
  3517  000DFC                     L3:
  3518  000DFC  503D               	movf	?___awmod,w,c
  3519  000DFE  0F30               	addlw	48
  3520  000E00  0100               	movlb	0	; () banked
  3521  000E02  6FE2               	movwf	(_tempF_Txt+3)& (0+255),b
  3522  000E04  D000               	goto	l10026
  3523  000E06                     l10026:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;Main_Screen.c: 132: }
  3527                           ;Main_Screen.c: 134: time_Txt[0] = (hour>>4) + '0';
  3528  000E06  3865               	swapf	_hour,w,c
  3529  000E08  0B0F               	andlw	15
  3530  000E0A  0F30               	addlw	48
  3531  000E0C  0101               	movlb	1	; () banked
  3532  000E0E  6F6E               	movwf	_time_Txt& (0+255),b
  3533                           
  3534                           ; BSR set to: 1
  3535                           ;Main_Screen.c: 135: time_Txt[1] = (hour & 0x0f)+ '0';
  3536  000E10  5065               	movf	_hour,w,c
  3537  000E12  0B0F               	andlw	15
  3538  000E14  0F30               	addlw	48
  3539  000E16  0101               	movlb	1	; () banked
  3540  000E18  6F6F               	movwf	(_time_Txt+1)& (0+255),b
  3541                           
  3542                           ; BSR set to: 1
  3543                           ;Main_Screen.c: 136: time_Txt[3] = (minute>>4) + '0';
  3544  000E1A  3866               	swapf	_minute,w,c
  3545  000E1C  0B0F               	andlw	15
  3546  000E1E  0F30               	addlw	48
  3547  000E20  0101               	movlb	1	; () banked
  3548  000E22  6F71               	movwf	(_time_Txt+3)& (0+255),b
  3549                           
  3550                           ; BSR set to: 1
  3551                           ;Main_Screen.c: 137: time_Txt[4] = (minute & 0x0f) + '0';
  3552  000E24  5066               	movf	_minute,w,c
  3553  000E26  0B0F               	andlw	15
  3554  000E28  0F30               	addlw	48
  3555  000E2A  0101               	movlb	1	; () banked
  3556  000E2C  6F72               	movwf	(_time_Txt+4)& (0+255),b
  3557                           
  3558                           ; BSR set to: 1
  3559                           ;Main_Screen.c: 138: time_Txt[6] = (second>>4) + '0';
  3560  000E2E  3868               	swapf	_second,w,c
  3561  000E30  0B0F               	andlw	15
  3562  000E32  0F30               	addlw	48
  3563  000E34  0101               	movlb	1	; () banked
  3564  000E36  6F74               	movwf	(_time_Txt+6)& (0+255),b
  3565                           
  3566                           ; BSR set to: 1
  3567                           ;Main_Screen.c: 139: time_Txt[7] = (second & 0x0f) + '0';
  3568  000E38  5068               	movf	_second,w,c
  3569  000E3A  0B0F               	andlw	15
  3570  000E3C  0F30               	addlw	48
  3571  000E3E  0101               	movlb	1	; () banked
  3572  000E40  6F75               	movwf	(_time_Txt+7)& (0+255),b
  3573                           
  3574                           ; BSR set to: 1
  3575                           ;Main_Screen.c: 140: date_Txt[0] = (month>>4) + '0';
  3576  000E42  3867               	swapf	_month,w,c
  3577  000E44  0B0F               	andlw	15
  3578  000E46  0F30               	addlw	48
  3579  000E48  0101               	movlb	1	; () banked
  3580  000E4A  6F53               	movwf	_date_Txt& (0+255),b
  3581                           
  3582                           ; BSR set to: 1
  3583                           ;Main_Screen.c: 141: date_Txt[1] = (month & 0x0f) + '0';
  3584  000E4C  5067               	movf	_month,w,c
  3585  000E4E  0B0F               	andlw	15
  3586  000E50  0F30               	addlw	48
  3587  000E52  0101               	movlb	1	; () banked
  3588  000E54  6F54               	movwf	(_date_Txt+1)& (0+255),b
  3589                           
  3590                           ; BSR set to: 1
  3591                           ;Main_Screen.c: 142: date_Txt[3] = (day>>4) + '0';
  3592  000E56  3863               	swapf	_day,w,c
  3593  000E58  0B0F               	andlw	15
  3594  000E5A  0F30               	addlw	48
  3595  000E5C  0101               	movlb	1	; () banked
  3596  000E5E  6F56               	movwf	(_date_Txt+3)& (0+255),b
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;Main_Screen.c: 143: date_Txt[4] = (day & 0x0f) + '0';
  3600  000E60  5063               	movf	_day,w,c
  3601  000E62  0B0F               	andlw	15
  3602  000E64  0F30               	addlw	48
  3603  000E66  0101               	movlb	1	; () banked
  3604  000E68  6F57               	movwf	(_date_Txt+4)& (0+255),b
  3605                           
  3606                           ; BSR set to: 1
  3607                           ;Main_Screen.c: 144: date_Txt[6] = (year>>4) + '0';
  3608  000E6A  386B               	swapf	_year,w,c
  3609  000E6C  0B0F               	andlw	15
  3610  000E6E  0F30               	addlw	48
  3611  000E70  0101               	movlb	1	; () banked
  3612  000E72  6F59               	movwf	(_date_Txt+6)& (0+255),b
  3613                           
  3614                           ; BSR set to: 1
  3615                           ;Main_Screen.c: 145: date_Txt[7] = (year & 0x0f) + '0';
  3616  000E74  506B               	movf	_year,w,c
  3617  000E76  0B0F               	andlw	15
  3618  000E78  0F30               	addlw	48
  3619  000E7A  0101               	movlb	1	; () banked
  3620  000E7C  6F5A               	movwf	(_date_Txt+7)& (0+255),b
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;Main_Screen.c: 147: if (FAN_TIMER_MODE == 0)
  3624  000E7E  5060               	movf	_FAN_TIMER_MODE,w,c
  3625  000E80  A4D8               	btfss	status,2,c
  3626  000E82  D00B               	goto	l10054
  3627                           
  3628                           ; BSR set to: 1
  3629                           ;Main_Screen.c: 148: {
  3630                           ;Main_Screen.c: 149: strcpy(Fan_Timer_Mode_Txt, "OFF");
  3631  000E84  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3632  000E86  6E11               	movwf	strcpy@to,c
  3633  000E88  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3634  000E8A  6E12               	movwf	strcpy@to+1,c
  3635  000E8C  0EB3               	movlw	low (STR_25+7)
  3636  000E8E  6E13               	movwf	strcpy@from,c
  3637  000E90  0EFF               	movlw	high (STR_25+7)
  3638  000E92  6E14               	movwf	strcpy@from+1,c
  3639  000E94  EC33  F024         	call	_strcpy	;wreg free
  3640                           
  3641                           ;Main_Screen.c: 150: }
  3642  000E98  D02C               	goto	l10066
  3643  000E9A                     l10054:
  3644                           
  3645                           ;Main_Screen.c: 151: else if (FAN_TIMER_MODE == 1)
  3646  000E9A  0460               	decf	_FAN_TIMER_MODE,w,c
  3647  000E9C  A4D8               	btfss	status,2,c
  3648  000E9E  D00B               	goto	l10058
  3649                           
  3650                           ;Main_Screen.c: 152: {
  3651                           ;Main_Screen.c: 153: strcpy(Fan_Timer_Mode_Txt, "TM1");
  3652  000EA0  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3653  000EA2  6E11               	movwf	strcpy@to,c
  3654  000EA4  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3655  000EA6  6E12               	movwf	strcpy@to+1,c
  3656  000EA8  0EE5               	movlw	low STR_27
  3657  000EAA  6E13               	movwf	strcpy@from,c
  3658  000EAC  0EFF               	movlw	high STR_27
  3659  000EAE  6E14               	movwf	strcpy@from+1,c
  3660  000EB0  EC33  F024         	call	_strcpy	;wreg free
  3661                           
  3662                           ;Main_Screen.c: 154: }
  3663  000EB4  D01E               	goto	l10066
  3664  000EB6                     l10058:
  3665                           
  3666                           ;Main_Screen.c: 155: else if (FAN_TIMER_MODE == 2)
  3667  000EB6  0E02               	movlw	2
  3668  000EB8  1860               	xorwf	_FAN_TIMER_MODE,w,c
  3669  000EBA  A4D8               	btfss	status,2,c
  3670  000EBC  D00B               	goto	l10062
  3671                           
  3672                           ;Main_Screen.c: 156: {
  3673                           ;Main_Screen.c: 157: strcpy(Fan_Timer_Mode_Txt, "TM2");
  3674  000EBE  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3675  000EC0  6E11               	movwf	strcpy@to,c
  3676  000EC2  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3677  000EC4  6E12               	movwf	strcpy@to+1,c
  3678  000EC6  0EE9               	movlw	low STR_28
  3679  000EC8  6E13               	movwf	strcpy@from,c
  3680  000ECA  0EFF               	movlw	high STR_28
  3681  000ECC  6E14               	movwf	strcpy@from+1,c
  3682  000ECE  EC33  F024         	call	_strcpy	;wreg free
  3683                           
  3684                           ;Main_Screen.c: 158: }
  3685  000ED2  D00F               	goto	l10066
  3686  000ED4                     l10062:
  3687                           
  3688                           ;Main_Screen.c: 159: else if (FAN_TIMER_MODE == 3)
  3689  000ED4  0E03               	movlw	3
  3690  000ED6  1860               	xorwf	_FAN_TIMER_MODE,w,c
  3691  000ED8  A4D8               	btfss	status,2,c
  3692  000EDA  D00B               	goto	l10066
  3693                           
  3694                           ;Main_Screen.c: 160: {
  3695                           ;Main_Screen.c: 161: strcpy(Fan_Timer_Mode_Txt, "TM3");
  3696  000EDC  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3697  000EDE  6E11               	movwf	strcpy@to,c
  3698  000EE0  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3699  000EE2  6E12               	movwf	strcpy@to+1,c
  3700  000EE4  0EED               	movlw	low STR_29
  3701  000EE6  6E13               	movwf	strcpy@from,c
  3702  000EE8  0EFF               	movlw	high STR_29
  3703  000EEA  6E14               	movwf	strcpy@from+1,c
  3704  000EEC  EC33  F024         	call	_strcpy	;wreg free
  3705  000EF0  D000               	goto	l10066
  3706  000EF2                     l10066:
  3707                           
  3708                           ;Main_Screen.c: 162: }
  3709                           ;Main_Screen.c: 164: Fan_Timer_Txt[0] = FAN_TIMER_TIME/100 + '0';
  3710  000EF2  C0C3  F017         	movff	_FAN_TIMER_TIME,___awdiv@dividend
  3711  000EF6  6A18               	clrf	___awdiv@dividend+1,c
  3712  000EF8  0E00               	movlw	0
  3713  000EFA  6E1A               	movwf	___awdiv@divisor+1,c
  3714  000EFC  0E64               	movlw	100
  3715  000EFE  6E19               	movwf	___awdiv@divisor,c
  3716  000F00  EC45  F01E         	call	___awdiv	;wreg free
  3717  000F04  5017               	movf	?___awdiv,w,c
  3718  000F06  0F30               	addlw	48
  3719  000F08  0100               	movlb	0	; () banked
  3720  000F0A  6FF4               	movwf	_Fan_Timer_Txt& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Main_Screen.c: 165: Fan_Timer_Txt[1] = FAN_TIMER_TIME/10 + '0';
  3724  000F0C  C0C3  F017         	movff	_FAN_TIMER_TIME,___awdiv@dividend
  3725  000F10  6A18               	clrf	___awdiv@dividend+1,c
  3726  000F12  0E00               	movlw	0
  3727  000F14  6E1A               	movwf	___awdiv@divisor+1,c
  3728  000F16  0E0A               	movlw	10
  3729  000F18  6E19               	movwf	___awdiv@divisor,c
  3730  000F1A  EC45  F01E         	call	___awdiv	;wreg free
  3731  000F1E  5017               	movf	?___awdiv,w,c
  3732  000F20  0F30               	addlw	48
  3733  000F22  0100               	movlb	0	; () banked
  3734  000F24  6FF5               	movwf	(_Fan_Timer_Txt+1)& (0+255),b
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;Main_Screen.c: 166: Fan_Timer_Txt[2] = FAN_TIMER_TIME%10 + '0';
  3738  000F26  C0C3  F03D         	movff	_FAN_TIMER_TIME,___awmod@dividend
  3739  000F2A  6A3E               	clrf	___awmod@dividend+1,c
  3740  000F2C  0E00               	movlw	0
  3741  000F2E  6E40               	movwf	___awmod@divisor+1,c
  3742  000F30  0E0A               	movlw	10
  3743  000F32  6E3F               	movwf	___awmod@divisor,c
  3744  000F34  EC34  F020         	call	___awmod	;wreg free
  3745  000F38  503D               	movf	?___awmod,w,c
  3746  000F3A  0F30               	addlw	48
  3747  000F3C  0100               	movlb	0	; () banked
  3748  000F3E  6FF6               	movwf	(_Fan_Timer_Txt+2)& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;Main_Screen.c: 168: Fan_Set_Temp_Txt[0] = fan_set_temp/100 + '0';
  3752  000F40  C0DC  F017         	movff	_fan_set_temp,___awdiv@dividend
  3753  000F44  6A18               	clrf	___awdiv@dividend+1,c
  3754  000F46  0E00               	movlw	0
  3755  000F48  6E1A               	movwf	___awdiv@divisor+1,c
  3756  000F4A  0E64               	movlw	100
  3757  000F4C  6E19               	movwf	___awdiv@divisor,c
  3758  000F4E  EC45  F01E         	call	___awdiv	;wreg free
  3759  000F52  5017               	movf	?___awdiv,w,c
  3760  000F54  0F30               	addlw	48
  3761  000F56  0100               	movlb	0	; () banked
  3762  000F58  6FEC               	movwf	_Fan_Set_Temp_Txt& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;Main_Screen.c: 169: Fan_Set_Temp_Txt[1] = fan_set_temp/10 + '0';
  3766  000F5A  C0DC  F017         	movff	_fan_set_temp,___awdiv@dividend
  3767  000F5E  6A18               	clrf	___awdiv@dividend+1,c
  3768  000F60  0E00               	movlw	0
  3769  000F62  6E1A               	movwf	___awdiv@divisor+1,c
  3770  000F64  0E0A               	movlw	10
  3771  000F66  6E19               	movwf	___awdiv@divisor,c
  3772  000F68  EC45  F01E         	call	___awdiv	;wreg free
  3773  000F6C  5017               	movf	?___awdiv,w,c
  3774  000F6E  0F30               	addlw	48
  3775  000F70  0100               	movlb	0	; () banked
  3776  000F72  6FED               	movwf	(_Fan_Set_Temp_Txt+1)& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;Main_Screen.c: 170: Fan_Set_Temp_Txt[2] = fan_set_temp%10 + '0';
  3780  000F74  C0DC  F03D         	movff	_fan_set_temp,___awmod@dividend
  3781  000F78  6A3E               	clrf	___awmod@dividend+1,c
  3782  000F7A  0E00               	movlw	0
  3783  000F7C  6E40               	movwf	___awmod@divisor+1,c
  3784  000F7E  0E0A               	movlw	10
  3785  000F80  6E3F               	movwf	___awmod@divisor,c
  3786  000F82  EC34  F020         	call	___awmod	;wreg free
  3787  000F86  503D               	movf	?___awmod,w,c
  3788  000F88  0F30               	addlw	48
  3789  000F8A  0100               	movlb	0	; () banked
  3790  000F8C  6FEE               	movwf	(_Fan_Set_Temp_Txt+2)& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;Main_Screen.c: 172: if (FANMODE == 1)
  3794  000F8E  0100               	movlb	0	; () banked
  3795  000F90  05C2               	decf	_FANMODE& (0+255),w,b
  3796  000F92  A4D8               	btfss	status,2,c
  3797  000F94  D00B               	goto	l10082
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;Main_Screen.c: 173: {
  3801                           ;Main_Screen.c: 174: strcpy(Fan_Mode_Txt, "AUTO");
  3802  000F96  0E7D               	movlw	low _Fan_Mode_Txt
  3803  000F98  6E11               	movwf	strcpy@to,c
  3804  000F9A  0E01               	movlw	high _Fan_Mode_Txt
  3805  000F9C  6E12               	movwf	strcpy@to+1,c
  3806  000F9E  0ECD               	movlw	low STR_30
  3807  000FA0  6E13               	movwf	strcpy@from,c
  3808  000FA2  0EFF               	movlw	high STR_30
  3809  000FA4  6E14               	movwf	strcpy@from+1,c
  3810  000FA6  EC33  F024         	call	_strcpy	;wreg free
  3811                           
  3812                           ;Main_Screen.c: 175: }
  3813  000FAA  D00B               	goto	l10084
  3814  000FAC                     l10082:
  3815                           
  3816                           ;Main_Screen.c: 176: else
  3817                           ;Main_Screen.c: 177: {
  3818                           ;Main_Screen.c: 178: strcpy(Fan_Mode_Txt, "MANU");
  3819  000FAC  0E7D               	movlw	low _Fan_Mode_Txt
  3820  000FAE  6E11               	movwf	strcpy@to,c
  3821  000FB0  0E01               	movlw	high _Fan_Mode_Txt
  3822  000FB2  6E12               	movwf	strcpy@to+1,c
  3823  000FB4  0ED2               	movlw	low STR_31
  3824  000FB6  6E13               	movwf	strcpy@from,c
  3825  000FB8  0EFF               	movlw	high STR_31
  3826  000FBA  6E14               	movwf	strcpy@from+1,c
  3827  000FBC  EC33  F024         	call	_strcpy	;wreg free
  3828  000FC0  D000               	goto	l10084
  3829  000FC2                     l10084:
  3830                           
  3831                           ;Main_Screen.c: 179: }
  3832                           ;Main_Screen.c: 181: if (FAN == 1)
  3833  000FC2  0100               	movlb	0	; () banked
  3834  000FC4  05C1               	decf	_FAN& (0+255),w,b
  3835  000FC6  A4D8               	btfss	status,2,c
  3836  000FC8  D00B               	goto	l10088
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;Main_Screen.c: 182: {
  3840                           ;Main_Screen.c: 183: strcpy(Fan_SW_Txt, "ON ");
  3841  000FCA  0EE8               	movlw	low _Fan_SW_Txt
  3842  000FCC  6E11               	movwf	strcpy@to,c
  3843  000FCE  0E00               	movlw	high _Fan_SW_Txt
  3844  000FD0  6E12               	movwf	strcpy@to+1,c
  3845  000FD2  0EE1               	movlw	low STR_32
  3846  000FD4  6E13               	movwf	strcpy@from,c
  3847  000FD6  0EFF               	movlw	high STR_32
  3848  000FD8  6E14               	movwf	strcpy@from+1,c
  3849  000FDA  EC33  F024         	call	_strcpy	;wreg free
  3850                           
  3851                           ;Main_Screen.c: 184: }
  3852  000FDE  D00B               	goto	l10090
  3853  000FE0                     l10088:
  3854                           
  3855                           ;Main_Screen.c: 185: else
  3856                           ;Main_Screen.c: 186: {
  3857                           ;Main_Screen.c: 187: strcpy(Fan_SW_Txt, "OFF");
  3858  000FE0  0EE8               	movlw	low _Fan_SW_Txt
  3859  000FE2  6E11               	movwf	strcpy@to,c
  3860  000FE4  0E00               	movlw	high _Fan_SW_Txt
  3861  000FE6  6E12               	movwf	strcpy@to+1,c
  3862  000FE8  0EB3               	movlw	low (STR_25+7)
  3863  000FEA  6E13               	movwf	strcpy@from,c
  3864  000FEC  0EFF               	movlw	high (STR_25+7)
  3865  000FEE  6E14               	movwf	strcpy@from+1,c
  3866  000FF0  EC33  F024         	call	_strcpy	;wreg free
  3867  000FF4  D000               	goto	l10090
  3868  000FF6                     l10090:
  3869                           
  3870                           ;Main_Screen.c: 188: }
  3871                           ;Main_Screen.c: 191: DC_Txt[0] = duty_cycle/100 + '0';
  3872  000FF6  C064  F017         	movff	_duty_cycle,___awdiv@dividend
  3873  000FFA  6A18               	clrf	___awdiv@dividend+1,c
  3874  000FFC  0E00               	movlw	0
  3875  000FFE  6E1A               	movwf	___awdiv@divisor+1,c
  3876  001000  0E64               	movlw	100
  3877  001002  6E19               	movwf	___awdiv@divisor,c
  3878  001004  EC45  F01E         	call	___awdiv	;wreg free
  3879  001008  5017               	movf	?___awdiv,w,c
  3880  00100A  0F30               	addlw	48
  3881  00100C  0100               	movlb	0	; () banked
  3882  00100E  6FE4               	movwf	_DC_Txt& (0+255),b
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;Main_Screen.c: 192: DC_Txt[1] = (duty_cycle/10)%10 + '0';
  3886  001010  0E00               	movlw	0
  3887  001012  6E1A               	movwf	___awdiv@divisor+1,c
  3888  001014  0E0A               	movlw	10
  3889  001016  6E19               	movwf	___awdiv@divisor,c
  3890  001018  C064  F017         	movff	_duty_cycle,___awdiv@dividend
  3891  00101C  6A18               	clrf	___awdiv@dividend+1,c
  3892  00101E  EC45  F01E         	call	___awdiv	;wreg free
  3893  001022  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3894  001026  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3895  00102A  0E00               	movlw	0
  3896  00102C  6E40               	movwf	___awmod@divisor+1,c
  3897  00102E  0E0A               	movlw	10
  3898  001030  6E3F               	movwf	___awmod@divisor,c
  3899  001032  EC34  F020         	call	___awmod	;wreg free
  3900  001036  503D               	movf	?___awmod,w,c
  3901  001038  0F30               	addlw	48
  3902  00103A  0100               	movlb	0	; () banked
  3903  00103C  6FE5               	movwf	(_DC_Txt+1)& (0+255),b
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;Main_Screen.c: 193: DC_Txt[2] = duty_cycle%10 + '0';
  3907  00103E  C064  F03D         	movff	_duty_cycle,___awmod@dividend
  3908  001042  6A3E               	clrf	___awmod@dividend+1,c
  3909  001044  0E00               	movlw	0
  3910  001046  6E40               	movwf	___awmod@divisor+1,c
  3911  001048  0E0A               	movlw	10
  3912  00104A  6E3F               	movwf	___awmod@divisor,c
  3913  00104C  EC34  F020         	call	___awmod	;wreg free
  3914  001050  503D               	movf	?___awmod,w,c
  3915  001052  0F30               	addlw	48
  3916  001054  0100               	movlb	0	; () banked
  3917  001056  6FE6               	movwf	(_DC_Txt+2)& (0+255),b
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;Main_Screen.c: 195: Volt_Txt[0] = ((int) volt ) + '0';
  3921  001058  C0B8  F02E         	movff	_volt,___fttol@f1
  3922  00105C  C0B9  F02F         	movff	_volt+1,___fttol@f1+1
  3923  001060  C0BA  F030         	movff	_volt+2,___fttol@f1+2
  3924  001064  EC6A  F01A         	call	___fttol	;wreg free
  3925  001068  502E               	movf	?___fttol,w,c
  3926  00106A  0F30               	addlw	48
  3927  00106C  0101               	movlb	1	; () banked
  3928  00106E  6F77               	movwf	_Volt_Txt& (0+255),b
  3929                           
  3930                           ; BSR set to: 1
  3931                           ;Main_Screen.c: 196: Volt_Txt[2] = (( (int) (volt*10 ) )%10) + '0';
  3932  001070  0E00               	movlw	0
  3933  001072  6E22               	movwf	___ftmul@f2,c
  3934  001074  0E20               	movlw	32
  3935  001076  6E23               	movwf	___ftmul@f2+1,c
  3936  001078  0E41               	movlw	65
  3937  00107A  6E24               	movwf	___ftmul@f2+2,c
  3938  00107C  C0B8  F01F         	movff	_volt,___ftmul@f1
  3939  001080  C0B9  F020         	movff	_volt+1,___ftmul@f1+1
  3940  001084  C0BA  F021         	movff	_volt+2,___ftmul@f1+2
  3941  001088  EC00  F019         	call	___ftmul	;wreg free
  3942  00108C  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3943  001090  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3944  001094  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3945  001098  EC6A  F01A         	call	___fttol	;wreg free
  3946  00109C  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3947  0010A0  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3948  0010A4  0E00               	movlw	0
  3949  0010A6  6E40               	movwf	___awmod@divisor+1,c
  3950  0010A8  0E0A               	movlw	10
  3951  0010AA  6E3F               	movwf	___awmod@divisor,c
  3952  0010AC  EC34  F020         	call	___awmod	;wreg free
  3953  0010B0  503D               	movf	?___awmod,w,c
  3954  0010B2  0F30               	addlw	48
  3955  0010B4  0101               	movlb	1	; () banked
  3956  0010B6  6F79               	movwf	(_Volt_Txt+2)& (0+255),b
  3957                           
  3958                           ; BSR set to: 1
  3959                           ;Main_Screen.c: 197: Volt_Txt[3] = (( (int) (volt*100) )%10) + '0';
  3960  0010B8  0E00               	movlw	0
  3961  0010BA  6E22               	movwf	___ftmul@f2,c
  3962  0010BC  0EC8               	movlw	200
  3963  0010BE  6E23               	movwf	___ftmul@f2+1,c
  3964  0010C0  0E42               	movlw	66
  3965  0010C2  6E24               	movwf	___ftmul@f2+2,c
  3966  0010C4  C0B8  F01F         	movff	_volt,___ftmul@f1
  3967  0010C8  C0B9  F020         	movff	_volt+1,___ftmul@f1+1
  3968  0010CC  C0BA  F021         	movff	_volt+2,___ftmul@f1+2
  3969  0010D0  EC00  F019         	call	___ftmul	;wreg free
  3970  0010D4  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3971  0010D8  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3972  0010DC  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3973  0010E0  EC6A  F01A         	call	___fttol	;wreg free
  3974  0010E4  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3975  0010E8  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3976  0010EC  0E00               	movlw	0
  3977  0010EE  6E40               	movwf	___awmod@divisor+1,c
  3978  0010F0  0E0A               	movlw	10
  3979  0010F2  6E3F               	movwf	___awmod@divisor,c
  3980  0010F4  EC34  F020         	call	___awmod	;wreg free
  3981  0010F8  503D               	movf	?___awmod,w,c
  3982  0010FA  0F30               	addlw	48
  3983  0010FC  0101               	movlb	1	; () banked
  3984  0010FE  6F7A               	movwf	(_Volt_Txt+3)& (0+255),b
  3985                           
  3986                           ; BSR set to: 1
  3987                           ;Main_Screen.c: 199: RPM_Txt[0] = rpm/1000 + '0';
  3988  001100  C05C  F017         	movff	_rpm,___awdiv@dividend
  3989  001104  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  3990  001108  0E03               	movlw	3
  3991  00110A  6E1A               	movwf	___awdiv@divisor+1,c
  3992  00110C  0EE8               	movlw	232
  3993  00110E  6E19               	movwf	___awdiv@divisor,c
  3994  001110  EC45  F01E         	call	___awdiv	;wreg free
  3995  001114  5017               	movf	?___awdiv,w,c
  3996  001116  0F30               	addlw	48
  3997  001118  0101               	movlb	1	; () banked
  3998  00111A  6F82               	movwf	_RPM_Txt& (0+255),b
  3999                           
  4000                           ; BSR set to: 1
  4001                           ;Main_Screen.c: 200: RPM_Txt[1] = (rpm/100)%10 + '0';
  4002  00111C  0E00               	movlw	0
  4003  00111E  6E1A               	movwf	___awdiv@divisor+1,c
  4004  001120  0E64               	movlw	100
  4005  001122  6E19               	movwf	___awdiv@divisor,c
  4006  001124  C05C  F017         	movff	_rpm,___awdiv@dividend
  4007  001128  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4008  00112C  EC45  F01E         	call	___awdiv	;wreg free
  4009  001130  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4010  001134  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4011  001138  0E00               	movlw	0
  4012  00113A  6E40               	movwf	___awmod@divisor+1,c
  4013  00113C  0E0A               	movlw	10
  4014  00113E  6E3F               	movwf	___awmod@divisor,c
  4015  001140  EC34  F020         	call	___awmod	;wreg free
  4016  001144  503D               	movf	?___awmod,w,c
  4017  001146  0F30               	addlw	48
  4018  001148  0101               	movlb	1	; () banked
  4019  00114A  6F83               	movwf	(_RPM_Txt+1)& (0+255),b
  4020                           
  4021                           ; BSR set to: 1
  4022                           ;Main_Screen.c: 201: RPM_Txt[2] = (rpm/10)%10 + '0';
  4023  00114C  0E00               	movlw	0
  4024  00114E  6E1A               	movwf	___awdiv@divisor+1,c
  4025  001150  0E0A               	movlw	10
  4026  001152  6E19               	movwf	___awdiv@divisor,c
  4027  001154  C05C  F017         	movff	_rpm,___awdiv@dividend
  4028  001158  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4029  00115C  EC45  F01E         	call	___awdiv	;wreg free
  4030  001160  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4031  001164  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4032  001168  0E00               	movlw	0
  4033  00116A  6E40               	movwf	___awmod@divisor+1,c
  4034  00116C  0E0A               	movlw	10
  4035  00116E  6E3F               	movwf	___awmod@divisor,c
  4036  001170  EC34  F020         	call	___awmod	;wreg free
  4037  001174  503D               	movf	?___awmod,w,c
  4038  001176  0F30               	addlw	48
  4039  001178  0101               	movlb	1	; () banked
  4040  00117A  6F84               	movwf	(_RPM_Txt+2)& (0+255),b
  4041                           
  4042                           ; BSR set to: 1
  4043                           ;Main_Screen.c: 202: RPM_Txt[3] = rpm%10 + '0';
  4044  00117C  C05C  F03D         	movff	_rpm,___awmod@dividend
  4045  001180  C05D  F03E         	movff	_rpm+1,___awmod@dividend+1
  4046  001184  0E00               	movlw	0
  4047  001186  6E40               	movwf	___awmod@divisor+1,c
  4048  001188  0E0A               	movlw	10
  4049  00118A  6E3F               	movwf	___awmod@divisor,c
  4050  00118C  EC34  F020         	call	___awmod	;wreg free
  4051  001190  503D               	movf	?___awmod,w,c
  4052  001192  0F30               	addlw	48
  4053  001194  0101               	movlb	1	; () banked
  4054  001196  6F85               	movwf	(_RPM_Txt+3)& (0+255),b
  4055                           
  4056                           ; BSR set to: 1
  4057                           ;Main_Screen.c: 204: drawtext(1, 23, tempC_Txt , 0xFFE0 , 0x0000 , 2);
  4058  001198  0E17               	movlw	23
  4059  00119A  6E39               	movwf	drawtext@y,c
  4060  00119C  0EF8               	movlw	low _tempC_Txt
  4061  00119E  6E3A               	movwf	drawtext@_text,c
  4062  0011A0  0E00               	movlw	high _tempC_Txt
  4063  0011A2  6E3B               	movwf	drawtext@_text+1,c
  4064  0011A4  0EFF               	movlw	255
  4065  0011A6  6E3D               	movwf	drawtext@color+1,c
  4066  0011A8  0EE0               	movlw	224
  4067  0011AA  6E3C               	movwf	drawtext@color,c
  4068  0011AC  0E00               	movlw	0
  4069  0011AE  6E3F               	movwf	drawtext@bg+1,c
  4070  0011B0  0E00               	movlw	0
  4071  0011B2  6E3E               	movwf	drawtext@bg,c
  4072  0011B4  0E02               	movlw	2
  4073  0011B6  6E40               	movwf	drawtext@size,c
  4074  0011B8  0E01               	movlw	1
  4075  0011BA  ECDD  F01A         	call	_drawtext
  4076                           
  4077                           ;Main_Screen.c: 205: drawtext(60, 23, tempF_Txt , 0xFFE0 , 0x0000 , 2);
  4078  0011BE  0E17               	movlw	23
  4079  0011C0  6E39               	movwf	drawtext@y,c
  4080  0011C2  0EDF               	movlw	low _tempF_Txt
  4081  0011C4  6E3A               	movwf	drawtext@_text,c
  4082  0011C6  0E00               	movlw	high _tempF_Txt
  4083  0011C8  6E3B               	movwf	drawtext@_text+1,c
  4084  0011CA  0EFF               	movlw	255
  4085  0011CC  6E3D               	movwf	drawtext@color+1,c
  4086  0011CE  0EE0               	movlw	224
  4087  0011D0  6E3C               	movwf	drawtext@color,c
  4088  0011D2  0E00               	movlw	0
  4089  0011D4  6E3F               	movwf	drawtext@bg+1,c
  4090  0011D6  0E00               	movlw	0
  4091  0011D8  6E3E               	movwf	drawtext@bg,c
  4092  0011DA  0E02               	movlw	2
  4093  0011DC  6E40               	movwf	drawtext@size,c
  4094  0011DE  0E3C               	movlw	60
  4095  0011E0  ECDD  F01A         	call	_drawtext
  4096                           
  4097                           ;Main_Screen.c: 206: drawtext(15 , 52 , time_Txt , 0x07FF , 0x0000 , 2);
  4098  0011E4  0E34               	movlw	52
  4099  0011E6  6E39               	movwf	drawtext@y,c
  4100  0011E8  0E6E               	movlw	low _time_Txt
  4101  0011EA  6E3A               	movwf	drawtext@_text,c
  4102  0011EC  0E01               	movlw	high _time_Txt
  4103  0011EE  6E3B               	movwf	drawtext@_text+1,c
  4104  0011F0  0E07               	movlw	7
  4105  0011F2  6E3D               	movwf	drawtext@color+1,c
  4106  0011F4  683C               	setf	drawtext@color,c
  4107  0011F6  0E00               	movlw	0
  4108  0011F8  6E3F               	movwf	drawtext@bg+1,c
  4109  0011FA  0E00               	movlw	0
  4110  0011FC  6E3E               	movwf	drawtext@bg,c
  4111  0011FE  0E02               	movlw	2
  4112  001200  6E40               	movwf	drawtext@size,c
  4113  001202  0E0F               	movlw	15
  4114  001204  ECDD  F01A         	call	_drawtext
  4115                           
  4116                           ;Main_Screen.c: 207: drawtext(15 , 82 , date_Txt , 0x07E0 , 0x0000 , 2);
  4117  001208  0E52               	movlw	82
  4118  00120A  6E39               	movwf	drawtext@y,c
  4119  00120C  0E53               	movlw	low _date_Txt
  4120  00120E  6E3A               	movwf	drawtext@_text,c
  4121  001210  0E01               	movlw	high _date_Txt
  4122  001212  6E3B               	movwf	drawtext@_text+1,c
  4123  001214  0E07               	movlw	7
  4124  001216  6E3D               	movwf	drawtext@color+1,c
  4125  001218  0EE0               	movlw	224
  4126  00121A  6E3C               	movwf	drawtext@color,c
  4127  00121C  0E00               	movlw	0
  4128  00121E  6E3F               	movwf	drawtext@bg+1,c
  4129  001220  0E00               	movlw	0
  4130  001222  6E3E               	movwf	drawtext@bg,c
  4131  001224  0E02               	movlw	2
  4132  001226  6E40               	movwf	drawtext@size,c
  4133  001228  0E0F               	movlw	15
  4134  00122A  ECDD  F01A         	call	_drawtext
  4135                           
  4136                           ;Main_Screen.c: 208: drawtext(25 , 110 , Fan_Timer_Mode_Txt , 0x07FF , 0x0000 , 1);
  4137  00122E  0E6E               	movlw	110
  4138  001230  6E39               	movwf	drawtext@y,c
  4139  001232  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  4140  001234  6E3A               	movwf	drawtext@_text,c
  4141  001236  0E00               	movlw	high _Fan_Timer_Mode_Txt
  4142  001238  6E3B               	movwf	drawtext@_text+1,c
  4143  00123A  0E07               	movlw	7
  4144  00123C  6E3D               	movwf	drawtext@color+1,c
  4145  00123E  683C               	setf	drawtext@color,c
  4146  001240  0E00               	movlw	0
  4147  001242  6E3F               	movwf	drawtext@bg+1,c
  4148  001244  0E00               	movlw	0
  4149  001246  6E3E               	movwf	drawtext@bg,c
  4150  001248  0E01               	movlw	1
  4151  00124A  6E40               	movwf	drawtext@size,c
  4152  00124C  0E19               	movlw	25
  4153  00124E  ECDD  F01A         	call	_drawtext
  4154                           
  4155                           ;Main_Screen.c: 209: drawtext(90 , 110 , Fan_Timer_Txt , 0x07FF , 0x0000 , 1);
  4156  001252  0E6E               	movlw	110
  4157  001254  6E39               	movwf	drawtext@y,c
  4158  001256  0EF4               	movlw	low _Fan_Timer_Txt
  4159  001258  6E3A               	movwf	drawtext@_text,c
  4160  00125A  0E00               	movlw	high _Fan_Timer_Txt
  4161  00125C  6E3B               	movwf	drawtext@_text+1,c
  4162  00125E  0E07               	movlw	7
  4163  001260  6E3D               	movwf	drawtext@color+1,c
  4164  001262  683C               	setf	drawtext@color,c
  4165  001264  0E00               	movlw	0
  4166  001266  6E3F               	movwf	drawtext@bg+1,c
  4167  001268  0E00               	movlw	0
  4168  00126A  6E3E               	movwf	drawtext@bg,c
  4169  00126C  0E01               	movlw	1
  4170  00126E  6E40               	movwf	drawtext@size,c
  4171  001270  0E5A               	movlw	90
  4172  001272  ECDD  F01A         	call	_drawtext
  4173                           
  4174                           ;Main_Screen.c: 210: drawtext(35, 130 ,Fan_Set_Temp_Txt, 0xF800, 0x0000, 1);
  4175  001276  0E82               	movlw	130
  4176  001278  6E39               	movwf	drawtext@y,c
  4177  00127A  0EEC               	movlw	low _Fan_Set_Temp_Txt
  4178  00127C  6E3A               	movwf	drawtext@_text,c
  4179  00127E  0E00               	movlw	high _Fan_Set_Temp_Txt
  4180  001280  6E3B               	movwf	drawtext@_text+1,c
  4181  001282  0EF8               	movlw	248
  4182  001284  6E3D               	movwf	drawtext@color+1,c
  4183  001286  0E00               	movlw	0
  4184  001288  6E3C               	movwf	drawtext@color,c
  4185  00128A  0E00               	movlw	0
  4186  00128C  6E3F               	movwf	drawtext@bg+1,c
  4187  00128E  0E00               	movlw	0
  4188  001290  6E3E               	movwf	drawtext@bg,c
  4189  001292  0E01               	movlw	1
  4190  001294  6E40               	movwf	drawtext@size,c
  4191  001296  0E23               	movlw	35
  4192  001298  ECDD  F01A         	call	_drawtext
  4193                           
  4194                           ;Main_Screen.c: 211: drawtext(75, 130, Fan_Mode_Txt, 0xF800 , 0x0000 , 1);
  4195  00129C  0E82               	movlw	130
  4196  00129E  6E39               	movwf	drawtext@y,c
  4197  0012A0  0E7D               	movlw	low _Fan_Mode_Txt
  4198  0012A2  6E3A               	movwf	drawtext@_text,c
  4199  0012A4  0E01               	movlw	high _Fan_Mode_Txt
  4200  0012A6  6E3B               	movwf	drawtext@_text+1,c
  4201  0012A8  0EF8               	movlw	248
  4202  0012AA  6E3D               	movwf	drawtext@color+1,c
  4203  0012AC  0E00               	movlw	0
  4204  0012AE  6E3C               	movwf	drawtext@color,c
  4205  0012B0  0E00               	movlw	0
  4206  0012B2  6E3F               	movwf	drawtext@bg+1,c
  4207  0012B4  0E00               	movlw	0
  4208  0012B6  6E3E               	movwf	drawtext@bg,c
  4209  0012B8  0E01               	movlw	1
  4210  0012BA  6E40               	movwf	drawtext@size,c
  4211  0012BC  0E4B               	movlw	75
  4212  0012BE  ECDD  F01A         	call	_drawtext
  4213                           
  4214                           ;Main_Screen.c: 212: drawtext(105, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4215  0012C2  0E82               	movlw	130
  4216  0012C4  6E39               	movwf	drawtext@y,c
  4217  0012C6  0EE8               	movlw	low _Fan_SW_Txt
  4218  0012C8  6E3A               	movwf	drawtext@_text,c
  4219  0012CA  0E00               	movlw	high _Fan_SW_Txt
  4220  0012CC  6E3B               	movwf	drawtext@_text+1,c
  4221  0012CE  0EF8               	movlw	248
  4222  0012D0  6E3D               	movwf	drawtext@color+1,c
  4223  0012D2  0E00               	movlw	0
  4224  0012D4  6E3C               	movwf	drawtext@color,c
  4225  0012D6  0E00               	movlw	0
  4226  0012D8  6E3F               	movwf	drawtext@bg+1,c
  4227  0012DA  0E00               	movlw	0
  4228  0012DC  6E3E               	movwf	drawtext@bg,c
  4229  0012DE  0E01               	movlw	1
  4230  0012E0  6E40               	movwf	drawtext@size,c
  4231  0012E2  0E69               	movlw	105
  4232  0012E4  ECDD  F01A         	call	_drawtext
  4233                           
  4234                           ;Main_Screen.c: 213: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4235  0012E8  0E96               	movlw	150
  4236  0012EA  6E39               	movwf	drawtext@y,c
  4237  0012EC  0EE4               	movlw	low _DC_Txt
  4238  0012EE  6E3A               	movwf	drawtext@_text,c
  4239  0012F0  0E00               	movlw	high _DC_Txt
  4240  0012F2  6E3B               	movwf	drawtext@_text+1,c
  4241  0012F4  0E07               	movlw	7
  4242  0012F6  6E3D               	movwf	drawtext@color+1,c
  4243  0012F8  0EE0               	movlw	224
  4244  0012FA  6E3C               	movwf	drawtext@color,c
  4245  0012FC  0E00               	movlw	0
  4246  0012FE  6E3F               	movwf	drawtext@bg+1,c
  4247  001300  0E00               	movlw	0
  4248  001302  6E3E               	movwf	drawtext@bg,c
  4249  001304  0E01               	movlw	1
  4250  001306  6E40               	movwf	drawtext@size,c
  4251  001308  0E0A               	movlw	10
  4252  00130A  ECDD  F01A         	call	_drawtext
  4253                           
  4254                           ;Main_Screen.c: 215: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4255  00130E  0E96               	movlw	150
  4256  001310  6E39               	movwf	drawtext@y,c
  4257  001312  0E77               	movlw	low _Volt_Txt
  4258  001314  6E3A               	movwf	drawtext@_text,c
  4259  001316  0E01               	movlw	high _Volt_Txt
  4260  001318  6E3B               	movwf	drawtext@_text+1,c
  4261  00131A  0E07               	movlw	7
  4262  00131C  6E3D               	movwf	drawtext@color+1,c
  4263  00131E  0EE0               	movlw	224
  4264  001320  6E3C               	movwf	drawtext@color,c
  4265  001322  0E00               	movlw	0
  4266  001324  6E3F               	movwf	drawtext@bg+1,c
  4267  001326  0E00               	movlw	0
  4268  001328  6E3E               	movwf	drawtext@bg,c
  4269  00132A  0E01               	movlw	1
  4270  00132C  6E40               	movwf	drawtext@size,c
  4271  00132E  0E32               	movlw	50
  4272  001330  ECDD  F01A         	call	_drawtext
  4273                           
  4274                           ;Main_Screen.c: 216: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4275  001334  0E96               	movlw	150
  4276  001336  6E39               	movwf	drawtext@y,c
  4277  001338  0E82               	movlw	low _RPM_Txt
  4278  00133A  6E3A               	movwf	drawtext@_text,c
  4279  00133C  0E01               	movlw	high _RPM_Txt
  4280  00133E  6E3B               	movwf	drawtext@_text+1,c
  4281  001340  0E07               	movlw	7
  4282  001342  6E3D               	movwf	drawtext@color+1,c
  4283  001344  0EE0               	movlw	224
  4284  001346  6E3C               	movwf	drawtext@color,c
  4285  001348  0E00               	movlw	0
  4286  00134A  6E3F               	movwf	drawtext@bg+1,c
  4287  00134C  0E00               	movlw	0
  4288  00134E  6E3E               	movwf	drawtext@bg,c
  4289  001350  0E01               	movlw	1
  4290  001352  6E40               	movwf	drawtext@size,c
  4291  001354  0E5D               	movlw	93
  4292  001356  ECDD  F01A         	call	_drawtext
  4293  00135A  D000               	goto	l981
  4294  00135C                     l981:
  4295  00135C  0012               	return		;funcret
  4296  00135E                     __end_of_Update_Screen:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           postinc0	equ	0xFEE
  4303                           wreg	equ	0xFE8
  4304                           postdec1	equ	0xFE5
  4305                           fsr1l	equ	0xFE1
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _Toggle_Fan *****************
  4309 ;; Defined at:
  4310 ;;		line 77 in file "Fan_Support.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;		None
  4315 ;; Return value:  Size  Location     Type
  4316 ;;		None               void
  4317 ;; Registers used:
  4318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;Total ram usage:        0 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    8
  4331 ;; This function calls:
  4332 ;;		_Turn_Off_Fan
  4333 ;;		_Turn_On_Fan
  4334 ;; This function is called by:
  4335 ;;		_main
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text2
  4340  004C8E                     __ptext2:
  4341                           	opt stack 0
  4342  004C8E                     _Toggle_Fan:
  4343                           	opt stack 22
  4344                           
  4345                           ;Fan_Support.c: 81: if (FAN == 1)
  4346                           
  4347                           ;incstack = 0
  4348  004C8E  0100               	movlb	0	; () banked
  4349  004C90  05C1               	decf	_FAN& (0+255),w,b
  4350  004C92  A4D8               	btfss	status,2,c
  4351  004C94  D003               	goto	l9914
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;Fan_Support.c: 82: Turn_Off_Fan();
  4355  004C96  ECDA  F025         	call	_Turn_Off_Fan	;wreg free
  4356  004C9A  D003               	goto	l55
  4357  004C9C                     l9914:
  4358                           
  4359                           ;Fan_Support.c: 83: else
  4360                           ;Fan_Support.c: 84: Turn_On_Fan();
  4361  004C9C  EC6B  F025         	call	_Turn_On_Fan	;wreg free
  4362  004CA0  D000               	goto	l55
  4363  004CA2                     l55:
  4364  004CA2  0012               	return		;funcret
  4365  004CA4                     __end_of_Toggle_Fan:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           postinc0	equ	0xFEE
  4372                           wreg	equ	0xFE8
  4373                           postdec1	equ	0xFE5
  4374                           fsr1l	equ	0xFE1
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _Turn_On_Fan *****************
  4378 ;; Defined at:
  4379 ;;		line 96 in file "Fan_Support.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;		None               void
  4386 ;; Registers used:
  4387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;Total ram usage:        0 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    7
  4400 ;; This function calls:
  4401 ;;		_do_update_pwm
  4402 ;;		_printf
  4403 ;; This function is called by:
  4404 ;;		_Toggle_Fan
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text3
  4409  004AD6                     __ptext3:
  4410                           	opt stack 0
  4411  004AD6                     _Turn_On_Fan:
  4412                           	opt stack 22
  4413                           
  4414                           ;Fan_Support.c: 98: printf ("Fan is turned on\r\n");
  4415                           
  4416                           ;incstack = 0
  4417  004AD6  0E48               	movlw	low STR_2
  4418  004AD8  0100               	movlb	0	; () banked
  4419  004ADA  6F86               	movwf	printf@f& (0+255),b
  4420  004ADC  0EFF               	movlw	high STR_2
  4421  004ADE  0100               	movlb	0	; () banked
  4422  004AE0  6F87               	movwf	(printf@f+1)& (0+255),b
  4423  004AE2  EC0E  F000         	call	_printf	;wreg free
  4424                           
  4425                           ;Fan_Support.c: 100: FAN = 1;
  4426  004AE6  0E01               	movlw	1
  4427  004AE8  0100               	movlb	0	; () banked
  4428  004AEA  6FC1               	movwf	_FAN& (0+255),b
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;Fan_Support.c: 101: PORTDbits.RD1 = 1;
  4432  004AEC  8283               	bsf	3971,1,c	;volatile
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;Fan_Support.c: 102: PORTDbits.RD2 = 1;
  4436  004AEE  8483               	bsf	3971,2,c	;volatile
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;Fan_Support.c: 103: do_update_pwm(duty_cycle);
  4440  004AF0  5064               	movf	_duty_cycle,w,c
  4441  004AF2  EC46  F01D         	call	_do_update_pwm
  4442  004AF6  0012               	return		;funcret
  4443  004AF8                     __end_of_Turn_On_Fan:
  4444                           	opt stack 0
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           postinc0	equ	0xFEE
  4450                           wreg	equ	0xFE8
  4451                           postdec1	equ	0xFE5
  4452                           fsr1l	equ	0xFE1
  4453                           status	equ	0xFD8
  4454                           
  4455 ;; *************** function _Setup_Fan_Temp *****************
  4456 ;; Defined at:
  4457 ;;		line 36 in file "Setup_Fan_Temp.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;		None               void
  4464 ;; Registers used:
  4465 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;Total ram usage:        0 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:   12
  4478 ;; This function calls:
  4479 ;;		_DS1621_Read_Temp
  4480 ;;		_DS3231_Read_Time
  4481 ;;		_Decrease_Fan_Temp
  4482 ;;		_Do_Beep_Bad
  4483 ;;		_Do_Beep_Good
  4484 ;;		_Do_Save_New_Fan_Temp
  4485 ;;		_Increase_Fan_Temp
  4486 ;;		_Initialize_Setup_Fan_Screen
  4487 ;;		_Read_Volt
  4488 ;;		_Set_D1_RGB
  4489 ;;		_Set_D2_RGB
  4490 ;;		_Update_Setup_Fan_Screen
  4491 ;;		___awdiv
  4492 ;;		___ftge
  4493 ;;		___wmul
  4494 ;;		_check_for_button_input
  4495 ;;		_get_RPM
  4496 ;;		_printf
  4497 ;; This function is called by:
  4498 ;;		_main
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text4
  4503  002220                     __ptext4:
  4504                           	opt stack 0
  4505  002220                     _Setup_Fan_Temp:
  4506                           	opt stack 18
  4507                           
  4508                           ;Setup_Fan_Temp.c: 39: In_Fan_Temp_Setup = 1;
  4509                           
  4510                           ;incstack = 0
  4511  002220  0E01               	movlw	1
  4512  002222  0100               	movlb	0	; () banked
  4513  002224  6FC7               	movwf	_In_Fan_Temp_Setup& (0+255),b
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;Setup_Fan_Temp.c: 40: setup_fan_set_temp = fan_set_temp;
  4517  002226  C0DC  F0D4         	movff	_fan_set_temp,_setup_fan_set_temp
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;Setup_Fan_Temp.c: 41: Initialize_Setup_Fan_Screen();
  4521  00222A  ECF5  F019         	call	_Initialize_Setup_Fan_Screen	;wreg free
  4522                           
  4523                           ;Setup_Fan_Temp.c: 42: Update_Setup_Fan_Screen();
  4524  00222E  ECF3  F01F         	call	_Update_Setup_Fan_Screen	;wreg free
  4525                           
  4526                           ;Setup_Fan_Temp.c: 44: while (In_Fan_Temp_Setup == 1)
  4527  002232  D0E2               	goto	l10290
  4528  002234                     l10232:
  4529                           
  4530                           ;Setup_Fan_Temp.c: 45: {
  4531                           ;Setup_Fan_Temp.c: 46: DS3231_Read_Time();
  4532  002234  EC5C  F021         	call	_DS3231_Read_Time	;wreg free
  4533                           
  4534                           ;Setup_Fan_Temp.c: 48: if(tempSecond != second)
  4535  002238  5068               	movf	_second,w,c
  4536  00223A  0100               	movlb	0	; () banked
  4537  00223C  19DD               	xorwf	_tempSecond& (0+255),w,b
  4538  00223E  B4D8               	btfsc	status,2,c
  4539  002240  D0A1               	goto	l10260
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;Setup_Fan_Temp.c: 49: {
  4543                           ;Setup_Fan_Temp.c: 50: tempSecond = second;
  4544  002242  C068  F0DD         	movff	_second,_tempSecond
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;Setup_Fan_Temp.c: 51: rpm = get_RPM();
  4548  002246  EC5C  F023         	call	_get_RPM	;wreg free
  4549  00224A  C01F  F05C         	movff	?_get_RPM,_rpm
  4550  00224E  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  4551                           
  4552                           ;Setup_Fan_Temp.c: 53: volt = Read_Volt(0);
  4553  002252  0E00               	movlw	0
  4554  002254  EC25  F021         	call	_Read_Volt
  4555  002258  C03D  F0B8         	movff	?_Read_Volt,_volt
  4556  00225C  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  4557  002260  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  4558                           
  4559                           ;Setup_Fan_Temp.c: 54: if (volt > 3.000) light_flag = 1;
  4560  002264  0E00               	movlw	0
  4561  002266  6E11               	movwf	___ftge@ff1,c
  4562  002268  0E40               	movlw	64
  4563  00226A  6E12               	movwf	___ftge@ff1+1,c
  4564  00226C  0E40               	movlw	64
  4565  00226E  6E13               	movwf	___ftge@ff1+2,c
  4566  002270  C0B8  F014         	movff	_volt,___ftge@ff2
  4567  002274  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  4568  002278  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  4569  00227C  EC90  F01E         	call	___ftge	;wreg free
  4570  002280  B0D8               	btfsc	status,0,c
  4571  002282  D004               	goto	l10244
  4572  002284  0E01               	movlw	1
  4573  002286  0100               	movlb	0	; () banked
  4574  002288  6FD1               	movwf	_light_flag& (0+255),b
  4575  00228A  D000               	goto	l10244
  4576  00228C                     l10244:
  4577                           
  4578                           ;Setup_Fan_Temp.c: 55: tempC = DS1621_Read_Temp();
  4579  00228C  EC15  F024         	call	_DS1621_Read_Temp	;wreg free
  4580  002290  5014               	movf	?_DS1621_Read_Temp,w,c
  4581  002292  6E69               	movwf	_tempC,c
  4582                           
  4583                           ;Setup_Fan_Temp.c: 56: tempF = (tempC * 9 / 5) + 32;
  4584  002294  5069               	movf	_tempC,w,c
  4585  002296  6E11               	movwf	___wmul@multiplier,c
  4586  002298  6A12               	clrf	___wmul@multiplier+1,c
  4587  00229A  BE11               	btfsc	___wmul@multiplier,7,c
  4588  00229C  0612               	decf	___wmul@multiplier+1,f,c
  4589  00229E  0E00               	movlw	0
  4590  0022A0  6E14               	movwf	___wmul@multiplicand+1,c
  4591  0022A2  0E09               	movlw	9
  4592  0022A4  6E13               	movwf	___wmul@multiplicand,c
  4593  0022A6  ECE9  F024         	call	___wmul	;wreg free
  4594  0022AA  C011  F017         	movff	?___wmul,___awdiv@dividend
  4595  0022AE  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  4596  0022B2  0E00               	movlw	0
  4597  0022B4  6E1A               	movwf	___awdiv@divisor+1,c
  4598  0022B6  0E05               	movlw	5
  4599  0022B8  6E19               	movwf	___awdiv@divisor,c
  4600  0022BA  EC45  F01E         	call	___awdiv	;wreg free
  4601  0022BE  5017               	movf	?___awdiv,w,c
  4602  0022C0  0F20               	addlw	32
  4603  0022C2  6E6A               	movwf	_tempF,c
  4604                           
  4605                           ;Setup_Fan_Temp.c: 57: Set_D1_RGB(duty_cycle);
  4606  0022C4  5064               	movf	_duty_cycle,w,c
  4607  0022C6  ECEE  F022         	call	_Set_D1_RGB
  4608                           
  4609                           ;Setup_Fan_Temp.c: 58: Set_D2_RGB(rpm);
  4610  0022CA  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  4611  0022CE  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  4612  0022D2  EC75  F022         	call	_Set_D2_RGB	;wreg free
  4613                           
  4614                           ;Setup_Fan_Temp.c: 60: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,
      +                          day,year);
  4615  0022D6  0E75               	movlw	low STR_4
  4616  0022D8  0100               	movlb	0	; () banked
  4617  0022DA  6F86               	movwf	printf@f& (0+255),b
  4618  0022DC  0EFE               	movlw	high STR_4
  4619  0022DE  0100               	movlb	0	; () banked
  4620  0022E0  6F87               	movwf	(printf@f+1)& (0+255),b
  4621  0022E2  C065  F088         	movff	_hour,?_printf+2
  4622  0022E6  0100               	movlb	0	; () banked
  4623  0022E8  6B89               	clrf	(?_printf+3)& (0+255),b
  4624  0022EA  C066  F08A         	movff	_minute,?_printf+4
  4625  0022EE  0100               	movlb	0	; () banked
  4626  0022F0  6B8B               	clrf	(?_printf+5)& (0+255),b
  4627  0022F2  C068  F08C         	movff	_second,?_printf+6
  4628  0022F6  0100               	movlb	0	; () banked
  4629  0022F8  6B8D               	clrf	(?_printf+7)& (0+255),b
  4630  0022FA  C067  F08E         	movff	_month,?_printf+8
  4631  0022FE  0100               	movlb	0	; () banked
  4632  002300  6B8F               	clrf	(?_printf+9)& (0+255),b
  4633  002302  C063  F090         	movff	_day,?_printf+10
  4634  002306  0100               	movlb	0	; () banked
  4635  002308  6B91               	clrf	(?_printf+11)& (0+255),b
  4636  00230A  C06B  F092         	movff	_year,?_printf+12
  4637  00230E  0100               	movlb	0	; () banked
  4638  002310  6B93               	clrf	(?_printf+13)& (0+255),b
  4639  002312  EC0E  F000         	call	_printf	;wreg free
  4640                           
  4641                           ;Setup_Fan_Temp.c: 61: printf (" Temp = %d C = %d F", tempC, tempF);
  4642  002316  0E0C               	movlw	low STR_35
  4643  002318  0100               	movlb	0	; () banked
  4644  00231A  6F86               	movwf	printf@f& (0+255),b
  4645  00231C  0EFF               	movlw	high STR_35
  4646  00231E  0100               	movlb	0	; () banked
  4647  002320  6F87               	movwf	(printf@f+1)& (0+255),b
  4648  002322  5069               	movf	_tempC,w,c
  4649  002324  0100               	movlb	0	; () banked
  4650  002326  6F88               	movwf	(?_printf+2)& (0+255),b
  4651  002328  6B89               	clrf	(?_printf+3)& (0+255),b
  4652  00232A  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  4653  00232C  0789               	decf	(?_printf+3)& (0+255),f,b
  4654  00232E  506A               	movf	_tempF,w,c
  4655  002330  0100               	movlb	0	; () banked
  4656  002332  6F8A               	movwf	(?_printf+4)& (0+255),b
  4657  002334  6B8B               	clrf	(?_printf+5)& (0+255),b
  4658  002336  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  4659  002338  078B               	decf	(?_printf+5)& (0+255),f,b
  4660  00233A  EC0E  F000         	call	_printf	;wreg free
  4661                           
  4662                           ;Setup_Fan_Temp.c: 62: printf ("Light Sensor = %f V", volt);
  4663  00233E  0E20               	movlw	low STR_6
  4664  002340  0100               	movlb	0	; () banked
  4665  002342  6F86               	movwf	printf@f& (0+255),b
  4666  002344  0EFF               	movlw	high STR_6
  4667  002346  0100               	movlb	0	; () banked
  4668  002348  6F87               	movwf	(printf@f+1)& (0+255),b
  4669  00234A  C0B8  F088         	movff	_volt,?_printf+2
  4670  00234E  C0B9  F089         	movff	_volt+1,?_printf+3
  4671  002352  C0BA  F08A         	movff	_volt+2,?_printf+4
  4672  002356  EC0E  F000         	call	_printf	;wreg free
  4673                           
  4674                           ;Setup_Fan_Temp.c: 63: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_
      +                          flag);
  4675  00235A  0E93               	movlw	low STR_7
  4676  00235C  0100               	movlb	0	; () banked
  4677  00235E  6F86               	movwf	printf@f& (0+255),b
  4678  002360  0EFE               	movlw	high STR_7
  4679  002362  0100               	movlb	0	; () banked
  4680  002364  6F87               	movwf	(printf@f+1)& (0+255),b
  4681  002366  C05C  F088         	movff	_rpm,?_printf+2
  4682  00236A  C05D  F089         	movff	_rpm+1,?_printf+3
  4683  00236E  C064  F08A         	movff	_duty_cycle,?_printf+4
  4684  002372  0100               	movlb	0	; () banked
  4685  002374  6B8B               	clrf	(?_printf+5)& (0+255),b
  4686  002376  C0D1  F08C         	movff	_light_flag,?_printf+6
  4687  00237A  0100               	movlb	0	; () banked
  4688  00237C  6B8D               	clrf	(?_printf+7)& (0+255),b
  4689  00237E  EC0E  F000         	call	_printf	;wreg free
  4690  002382  D000               	goto	l10260
  4691  002384                     l10260:
  4692                           
  4693                           ;Setup_Fan_Temp.c: 64: }
  4694                           ;Setup_Fan_Temp.c: 65: if (check_for_button_input() == 1)
  4695  002384  ECA1  F01D         	call	_check_for_button_input	;wreg free
  4696  002388  06E8               	decf	wreg,f,c
  4697  00238A  A4D8               	btfss	status,2,c
  4698  00238C  D035               	goto	l10290
  4699                           
  4700                           ;Setup_Fan_Temp.c: 66: {
  4701                           ;Setup_Fan_Temp.c: 67: Nec_ok = 0;
  4702  00238E  0E00               	movlw	0
  4703  002390  0100               	movlb	0	; () banked
  4704  002392  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  4705  002394  0E00               	movlw	0
  4706  002396  6FBB               	movwf	_Nec_ok& (0+255),b
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;Setup_Fan_Temp.c: 68: if (found >= 5 && found <= 8)
  4710  002398  0E04               	movlw	4
  4711  00239A  0100               	movlb	0	; () banked
  4712  00239C  65D0               	cpfsgt	_found& (0+255),b
  4713  00239E  D029               	goto	l10288
  4714                           
  4715                           ; BSR set to: 0
  4716  0023A0  0E09               	movlw	9
  4717  0023A2  0100               	movlb	0	; () banked
  4718  0023A4  61D0               	cpfslt	_found& (0+255),b
  4719  0023A6  D025               	goto	l10288
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;Setup_Fan_Temp.c: 69: {
  4723                           ;Setup_Fan_Temp.c: 70: Do_Beep_Good();
  4724  0023A8  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  4725                           
  4726                           ;Setup_Fan_Temp.c: 71: if (found == 5) Do_Save_New_Fan_Temp();
  4727  0023AC  0E05               	movlw	5
  4728  0023AE  0100               	movlb	0	; () banked
  4729  0023B0  19D0               	xorwf	_found& (0+255),w,b
  4730  0023B2  A4D8               	btfss	status,2,c
  4731  0023B4  D003               	goto	l10274
  4732                           
  4733                           ; BSR set to: 0
  4734  0023B6  EC5D  F026         	call	_Do_Save_New_Fan_Temp	;wreg free
  4735  0023BA  D000               	goto	l10274
  4736  0023BC                     l10274:
  4737                           
  4738                           ;Setup_Fan_Temp.c: 74: if (found == 8)
  4739  0023BC  0E08               	movlw	8
  4740  0023BE  0100               	movlb	0	; () banked
  4741  0023C0  19D0               	xorwf	_found& (0+255),w,b
  4742  0023C2  A4D8               	btfss	status,2,c
  4743  0023C4  D003               	goto	l10278
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;Setup_Fan_Temp.c: 75: Increase_Fan_Temp();
  4747  0023C6  EC20  F026         	call	_Increase_Fan_Temp	;wreg free
  4748  0023CA  D000               	goto	l10278
  4749  0023CC                     l10278:
  4750                           
  4751                           ;Setup_Fan_Temp.c: 76: if (found == 6)
  4752  0023CC  0E06               	movlw	6
  4753  0023CE  0100               	movlb	0	; () banked
  4754  0023D0  19D0               	xorwf	_found& (0+255),w,b
  4755  0023D2  A4D8               	btfss	status,2,c
  4756  0023D4  D003               	goto	l10282
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;Setup_Fan_Temp.c: 77: Decrease_Fan_Temp();
  4760  0023D6  EC2D  F026         	call	_Decrease_Fan_Temp	;wreg free
  4761  0023DA  D000               	goto	l10282
  4762  0023DC                     l10282:
  4763                           
  4764                           ;Setup_Fan_Temp.c: 78: if (found == 7)
  4765  0023DC  0E07               	movlw	7
  4766  0023DE  0100               	movlb	0	; () banked
  4767  0023E0  19D0               	xorwf	_found& (0+255),w,b
  4768  0023E2  A4D8               	btfss	status,2,c
  4769  0023E4  D003               	goto	l10286
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;Setup_Fan_Temp.c: 79: Increase_Fan_Temp();
  4773  0023E6  EC20  F026         	call	_Increase_Fan_Temp	;wreg free
  4774  0023EA  D000               	goto	l10286
  4775  0023EC                     l10286:
  4776                           
  4777                           ;Setup_Fan_Temp.c: 83: found = 0xff;
  4778  0023EC  0100               	movlb	0	; () banked
  4779  0023EE  69D0               	setf	_found& (0+255),b
  4780                           
  4781                           ;Setup_Fan_Temp.c: 84: }
  4782  0023F0  D003               	goto	l10290
  4783  0023F2                     l10288:
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;Setup_Fan_Temp.c: 85: else
  4787                           ;Setup_Fan_Temp.c: 86: {
  4788                           ;Setup_Fan_Temp.c: 87: Do_Beep_Bad();
  4789  0023F2  ECF6  F025         	call	_Do_Beep_Bad	;wreg free
  4790  0023F6  D000               	goto	l10290
  4791  0023F8                     l10290:
  4792  0023F8  0100               	movlb	0	; () banked
  4793  0023FA  05C7               	decf	_In_Fan_Temp_Setup& (0+255),w,b
  4794  0023FC  B4D8               	btfsc	status,2,c
  4795  0023FE  D71A               	goto	l10232
  4796                           
  4797                           ; BSR set to: 0
  4798                           
  4799                           ; BSR set to: 0
  4800  002400  0012               	return		;funcret
  4801  002402                     __end_of_Setup_Fan_Temp:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           postinc0	equ	0xFEE
  4808                           wreg	equ	0xFE8
  4809                           postdec1	equ	0xFE5
  4810                           fsr1l	equ	0xFE1
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _Initialize_Setup_Fan_Screen *****************
  4814 ;; Defined at:
  4815 ;;		line 132 in file "Setup_Fan_Temp.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;		None               void
  4822 ;; Registers used:
  4823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;Total ram usage:        0 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:   10
  4836 ;; This function calls:
  4837 ;;		_LCD_Reset
  4838 ;;		_TFT_GreenTab_Initialize
  4839 ;;		_drawtext
  4840 ;;		_fillScreen
  4841 ;;		_strcpy
  4842 ;; This function is called by:
  4843 ;;		_Setup_Fan_Temp
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text5
  4848  0033EA                     __ptext5:
  4849                           	opt stack 0
  4850  0033EA                     _Initialize_Setup_Fan_Screen:
  4851                           	opt stack 19
  4852                           
  4853                           ;Setup_Fan_Temp.c: 134: LCD_Reset();
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;incstack = 0
  4857  0033EA  EC85  F026         	call	_LCD_Reset	;wreg free
  4858                           
  4859                           ;Setup_Fan_Temp.c: 135: TFT_GreenTab_Initialize();
  4860  0033EE  EC7C  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  4861                           
  4862                           ;Setup_Fan_Temp.c: 136: fillScreen(0x0000);
  4863  0033F2  0E00               	movlw	0
  4864  0033F4  6E25               	movwf	fillScreen@color+1,c
  4865  0033F6  0E00               	movlw	0
  4866  0033F8  6E24               	movwf	fillScreen@color,c
  4867  0033FA  ECCC  F025         	call	_fillScreen	;wreg free
  4868                           
  4869                           ;Setup_Fan_Temp.c: 137: if (1 == 0)
  4870  0033FE  D005               	goto	l9750
  4871                           
  4872                           ;Setup_Fan_Temp.c: 138: {
  4873                           ;Setup_Fan_Temp.c: 139: Timing_Txt[12] = 'S';
  4874  003400  0E53               	movlw	83
  4875  003402  0101               	movlb	1	; () banked
  4876  003404  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  4877                           
  4878                           ;Setup_Fan_Temp.c: 140: Timing_Txt[13] = 'P';
  4879  003406  0E50               	movlw	80
  4880  003408  D004               	goto	L4
  4881  00340A                     l9750:
  4882                           
  4883                           ;Setup_Fan_Temp.c: 142: else
  4884                           ;Setup_Fan_Temp.c: 143: {
  4885                           ;Setup_Fan_Temp.c: 144: Timing_Txt[12] = 'F';
  4886  00340A  0E46               	movlw	70
  4887  00340C  0101               	movlb	1	; () banked
  4888  00340E  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  4889                           
  4890                           ;Setup_Fan_Temp.c: 145: Timing_Txt[13] = 'A';
  4891  003410  0E41               	movlw	65
  4892  003412                     L4:
  4893  003412  0101               	movlb	1	; () banked
  4894  003414  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  4895                           
  4896                           ; BSR set to: 1
  4897                           ;Setup_Fan_Temp.c: 146: }
  4898                           ;Setup_Fan_Temp.c: 147: Timing_Txt[14] = 24/10 + '0';
  4899  003416  0E32               	movlw	50
  4900  003418  0101               	movlb	1	; () banked
  4901  00341A  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  4902                           
  4903                           ;Setup_Fan_Temp.c: 148: Timing_Txt[15] = 24%10 + '0';
  4904  00341C  0E34               	movlw	52
  4905  00341E  0101               	movlb	1	; () banked
  4906  003420  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  4907                           
  4908                           ;Setup_Fan_Temp.c: 149: Timing_Txt[17] = 3%10 + '0';
  4909  003422  0E33               	movlw	51
  4910  003424  0101               	movlb	1	; () banked
  4911  003426  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  4912                           
  4913                           ;Setup_Fan_Temp.c: 150: Timing_Txt[19] = 13/10 + '0';
  4914  003428  0E31               	movlw	49
  4915  00342A  0101               	movlb	1	; () banked
  4916  00342C  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  4917                           
  4918                           ;Setup_Fan_Temp.c: 151: Timing_Txt[20] = 13%10 + '0';
  4919  00342E  0E33               	movlw	51
  4920  003430  0101               	movlb	1	; () banked
  4921  003432  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  4922                           
  4923                           ; BSR set to: 1
  4924                           ;Setup_Fan_Temp.c: 153: if (SYSTEM_ON == 1)
  4925  003434  0462               	decf	_SYSTEM_ON,w,c
  4926  003436  A4D8               	btfss	status,2,c
  4927  003438  D04C               	goto	l1104
  4928                           
  4929                           ; BSR set to: 1
  4930                           ;Setup_Fan_Temp.c: 154: {
  4931                           ;Setup_Fan_Temp.c: 155: drawtext(1 , 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  4932  00343A  0E01               	movlw	1
  4933  00343C  6E39               	movwf	drawtext@y,c
  4934  00343E  0E3C               	movlw	low _Timing_Txt
  4935  003440  6E3A               	movwf	drawtext@_text,c
  4936  003442  0E01               	movlw	high _Timing_Txt
  4937  003444  6E3B               	movwf	drawtext@_text+1,c
  4938  003446  0EFF               	movlw	255
  4939  003448  6E3D               	movwf	drawtext@color+1,c
  4940  00344A  683C               	setf	drawtext@color,c
  4941  00344C  0E00               	movlw	0
  4942  00344E  6E3F               	movwf	drawtext@bg+1,c
  4943  003450  0E00               	movlw	0
  4944  003452  6E3E               	movwf	drawtext@bg,c
  4945  003454  0E01               	movlw	1
  4946  003456  6E40               	movwf	drawtext@size,c
  4947  003458  0E01               	movlw	1
  4948  00345A  ECDD  F01A         	call	_drawtext
  4949                           
  4950                           ;Setup_Fan_Temp.c: 158: strcpy(txt, " Fan Setup\0");
  4951  00345E  C05E  F011         	movff	_txt,strcpy@to
  4952  003462  C05F  F012         	movff	_txt+1,strcpy@to+1
  4953  003466  0E94               	movlw	low STR_38
  4954  003468  6E13               	movwf	strcpy@from,c
  4955  00346A  0EFF               	movlw	high STR_38
  4956  00346C  6E14               	movwf	strcpy@from+1,c
  4957  00346E  EC33  F024         	call	_strcpy	;wreg free
  4958                           
  4959                           ;Setup_Fan_Temp.c: 159: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  4960  003472  0E1A               	movlw	26
  4961  003474  6E39               	movwf	drawtext@y,c
  4962  003476  C05E  F03A         	movff	_txt,drawtext@_text
  4963  00347A  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  4964  00347E  0EFF               	movlw	255
  4965  003480  6E3D               	movwf	drawtext@color+1,c
  4966  003482  0EE0               	movlw	224
  4967  003484  6E3C               	movwf	drawtext@color,c
  4968  003486  0E00               	movlw	0
  4969  003488  6E3F               	movwf	drawtext@bg+1,c
  4970  00348A  0E00               	movlw	0
  4971  00348C  6E3E               	movwf	drawtext@bg,c
  4972  00348E  0E02               	movlw	2
  4973  003490  6E40               	movwf	drawtext@size,c
  4974  003492  0E01               	movlw	1
  4975  003494  ECDD  F01A         	call	_drawtext
  4976                           
  4977                           ;Setup_Fan_Temp.c: 161: strcpy(txt, "  Set Fan Temp");
  4978  003498  C05E  F011         	movff	_txt,strcpy@to
  4979  00349C  C05F  F012         	movff	_txt+1,strcpy@to+1
  4980  0034A0  0E6C               	movlw	low STR_39
  4981  0034A2  6E13               	movwf	strcpy@from,c
  4982  0034A4  0EFF               	movlw	high STR_39
  4983  0034A6  6E14               	movwf	strcpy@from+1,c
  4984  0034A8  EC33  F024         	call	_strcpy	;wreg free
  4985                           
  4986                           ;Setup_Fan_Temp.c: 162: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  4987  0034AC  0E3C               	movlw	60
  4988  0034AE  6E39               	movwf	drawtext@y,c
  4989  0034B0  C05E  F03A         	movff	_txt,drawtext@_text
  4990  0034B4  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  4991  0034B8  0E07               	movlw	7
  4992  0034BA  6E3D               	movwf	drawtext@color+1,c
  4993  0034BC  683C               	setf	drawtext@color,c
  4994  0034BE  0E00               	movlw	0
  4995  0034C0  6E3F               	movwf	drawtext@bg+1,c
  4996  0034C2  0E00               	movlw	0
  4997  0034C4  6E3E               	movwf	drawtext@bg,c
  4998  0034C6  0E01               	movlw	1
  4999  0034C8  6E40               	movwf	drawtext@size,c
  5000  0034CA  0E0F               	movlw	15
  5001  0034CC  ECDD  F01A         	call	_drawtext
  5002  0034D0  D000               	goto	l1104
  5003  0034D2                     l1104:
  5004  0034D2  0012               	return		;funcret
  5005  0034D4                     __end_of_Initialize_Setup_Fan_Screen:
  5006                           	opt stack 0
  5007                           tblptru	equ	0xFF8
  5008                           tblptrh	equ	0xFF7
  5009                           tblptrl	equ	0xFF6
  5010                           tablat	equ	0xFF5
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           postdec1	equ	0xFE5
  5014                           fsr1l	equ	0xFE1
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function _Increase_Fan_Temp *****************
  5018 ;; Defined at:
  5019 ;;		line 93 in file "Setup_Fan_Temp.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;		None               void
  5026 ;; Registers used:
  5027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:   11
  5040 ;; This function calls:
  5041 ;;		_Update_Setup_Fan_Screen
  5042 ;; This function is called by:
  5043 ;;		_Setup_Fan_Temp
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text6
  5048  004C40                     __ptext6:
  5049                           	opt stack 0
  5050  004C40                     _Increase_Fan_Temp:
  5051                           	opt stack 18
  5052                           
  5053                           ;Setup_Fan_Temp.c: 97: setup_fan_set_temp++;
  5054                           
  5055                           ;incstack = 0
  5056  004C40  0100               	movlb	0	; () banked
  5057  004C42  2BD4               	incf	_setup_fan_set_temp& (0+255),f,b
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;Setup_Fan_Temp.c: 98: if (setup_fan_set_temp > 110)
  5061  004C44  0E6E               	movlw	110
  5062  004C46  0100               	movlb	0	; () banked
  5063  004C48  65D4               	cpfsgt	_setup_fan_set_temp& (0+255),b
  5064  004C4A  D004               	goto	l9776
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;Setup_Fan_Temp.c: 99: setup_fan_set_temp = 110;
  5068  004C4C  0E6E               	movlw	110
  5069  004C4E  0100               	movlb	0	; () banked
  5070  004C50  6FD4               	movwf	_setup_fan_set_temp& (0+255),b
  5071  004C52  D000               	goto	l9776
  5072  004C54                     l9776:
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;Setup_Fan_Temp.c: 101: Update_Setup_Fan_Screen();
  5076  004C54  ECF3  F01F         	call	_Update_Setup_Fan_Screen	;wreg free
  5077  004C58  0012               	return		;funcret
  5078  004C5A                     __end_of_Increase_Fan_Temp:
  5079                           	opt stack 0
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           postinc0	equ	0xFEE
  5085                           wreg	equ	0xFE8
  5086                           postdec1	equ	0xFE5
  5087                           fsr1l	equ	0xFE1
  5088                           status	equ	0xFD8
  5089                           
  5090 ;; *************** function _Do_Save_New_Fan_Temp *****************
  5091 ;; Defined at:
  5092 ;;		line 116 in file "Setup_Fan_Temp.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;		None
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;		None               void
  5099 ;; Registers used:
  5100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;Total ram usage:        0 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:   11
  5113 ;; This function calls:
  5114 ;;		_DS3231_Read_Time
  5115 ;;		_Initialize_Screen
  5116 ;; This function is called by:
  5117 ;;		_Setup_Fan_Temp
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text7
  5122  004CBA                     __ptext7:
  5123                           	opt stack 0
  5124  004CBA                     _Do_Save_New_Fan_Temp:
  5125                           	opt stack 18
  5126                           
  5127                           ;Setup_Fan_Temp.c: 118: fan_set_temp = setup_fan_set_temp;
  5128                           
  5129                           ;incstack = 0
  5130  004CBA  C0D4  F0DC         	movff	_setup_fan_set_temp,_fan_set_temp
  5131                           
  5132                           ;Setup_Fan_Temp.c: 119: DS3231_Read_Time();
  5133  004CBE  EC5C  F021         	call	_DS3231_Read_Time	;wreg free
  5134                           
  5135                           ;Setup_Fan_Temp.c: 120: Initialize_Screen();
  5136  004CC2  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  5137                           
  5138                           ;Setup_Fan_Temp.c: 121: In_Fan_Temp_Setup = 0;
  5139  004CC6  0E00               	movlw	0
  5140  004CC8  0100               	movlb	0	; () banked
  5141  004CCA  6FC7               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5142                           
  5143                           ; BSR set to: 0
  5144  004CCC  0012               	return		;funcret
  5145  004CCE                     __end_of_Do_Save_New_Fan_Temp:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           postinc0	equ	0xFEE
  5152                           wreg	equ	0xFE8
  5153                           postdec1	equ	0xFE5
  5154                           fsr1l	equ	0xFE1
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _Decrease_Fan_Temp *****************
  5158 ;; Defined at:
  5159 ;;		line 105 in file "Setup_Fan_Temp.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;		None
  5164 ;; Return value:  Size  Location     Type
  5165 ;;		None               void
  5166 ;; Registers used:
  5167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;Total ram usage:        0 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:   11
  5180 ;; This function calls:
  5181 ;;		_Update_Setup_Fan_Screen
  5182 ;; This function is called by:
  5183 ;;		_Setup_Fan_Temp
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text8
  5188  004C5A                     __ptext8:
  5189                           	opt stack 0
  5190  004C5A                     _Decrease_Fan_Temp:
  5191                           	opt stack 18
  5192                           
  5193                           ;Setup_Fan_Temp.c: 109: setup_fan_set_temp--;
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;incstack = 0
  5197  004C5A  0100               	movlb	0	; () banked
  5198  004C5C  07D4               	decf	_setup_fan_set_temp& (0+255),f,b
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;Setup_Fan_Temp.c: 110: if (setup_fan_set_temp < 50)
  5202  004C5E  0E32               	movlw	50
  5203  004C60  0100               	movlb	0	; () banked
  5204  004C62  61D4               	cpfslt	_setup_fan_set_temp& (0+255),b
  5205  004C64  D004               	goto	l9784
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;Setup_Fan_Temp.c: 111: setup_fan_set_temp = 50;
  5209  004C66  0E32               	movlw	50
  5210  004C68  0100               	movlb	0	; () banked
  5211  004C6A  6FD4               	movwf	_setup_fan_set_temp& (0+255),b
  5212  004C6C  D000               	goto	l9784
  5213  004C6E                     l9784:
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;Setup_Fan_Temp.c: 113: Update_Setup_Fan_Screen();
  5217  004C6E  ECF3  F01F         	call	_Update_Setup_Fan_Screen	;wreg free
  5218  004C72  0012               	return		;funcret
  5219  004C74                     __end_of_Decrease_Fan_Temp:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           postinc0	equ	0xFEE
  5226                           wreg	equ	0xFE8
  5227                           postdec1	equ	0xFE5
  5228                           fsr1l	equ	0xFE1
  5229                           status	equ	0xFD8
  5230                           
  5231 ;; *************** function _Update_Setup_Fan_Screen *****************
  5232 ;; Defined at:
  5233 ;;		line 166 in file "Setup_Fan_Temp.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;  dc_char3        1   75[COMRAM] unsigned char 
  5238 ;;  dc_char2        1   74[COMRAM] unsigned char 
  5239 ;;  dc_char1        1   73[COMRAM] unsigned char 
  5240 ;; Return value:  Size  Location     Type
  5241 ;;		None               void
  5242 ;; Registers used:
  5243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;Total ram usage:        3 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:   10
  5256 ;; This function calls:
  5257 ;;		___awdiv
  5258 ;;		___awmod
  5259 ;;		_drawtext
  5260 ;; This function is called by:
  5261 ;;		_Setup_Fan_Temp
  5262 ;;		_Increase_Fan_Temp
  5263 ;;		_Decrease_Fan_Temp
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text9
  5268  003FE6                     __ptext9:
  5269                           	opt stack 0
  5270  003FE6                     _Update_Setup_Fan_Screen:
  5271                           	opt stack 19
  5272                           
  5273                           ;Setup_Fan_Temp.c: 168: char dc_char1 = (setup_fan_set_temp/100);
  5274                           
  5275                           ;incstack = 0
  5276  003FE6  C0D4  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5277  003FEA  6A18               	clrf	___awdiv@dividend+1,c
  5278  003FEC  0E00               	movlw	0
  5279  003FEE  6E1A               	movwf	___awdiv@divisor+1,c
  5280  003FF0  0E64               	movlw	100
  5281  003FF2  6E19               	movwf	___awdiv@divisor,c
  5282  003FF4  EC45  F01E         	call	___awdiv	;wreg free
  5283  003FF8  5017               	movf	?___awdiv,w,c
  5284  003FFA  6E4A               	movwf	Update_Setup_Fan_Screen@dc_char1,c
  5285                           
  5286                           ;Setup_Fan_Temp.c: 169: char dc_char2 = (setup_fan_set_temp/10);
  5287  003FFC  C0D4  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5288  004000  6A18               	clrf	___awdiv@dividend+1,c
  5289  004002  0E00               	movlw	0
  5290  004004  6E1A               	movwf	___awdiv@divisor+1,c
  5291  004006  0E0A               	movlw	10
  5292  004008  6E19               	movwf	___awdiv@divisor,c
  5293  00400A  EC45  F01E         	call	___awdiv	;wreg free
  5294  00400E  5017               	movf	?___awdiv,w,c
  5295  004010  6E4B               	movwf	Update_Setup_Fan_Screen@dc_char2,c
  5296                           
  5297                           ;Setup_Fan_Temp.c: 170: char dc_char3 = (setup_fan_set_temp%10);
  5298  004012  C0D4  F03D         	movff	_setup_fan_set_temp,___awmod@dividend
  5299  004016  6A3E               	clrf	___awmod@dividend+1,c
  5300  004018  0E00               	movlw	0
  5301  00401A  6E40               	movwf	___awmod@divisor+1,c
  5302  00401C  0E0A               	movlw	10
  5303  00401E  6E3F               	movwf	___awmod@divisor,c
  5304  004020  EC34  F020         	call	___awmod	;wreg free
  5305  004024  503D               	movf	?___awmod,w,c
  5306  004026  6E4C               	movwf	Update_Setup_Fan_Screen@dc_char3,c
  5307                           
  5308                           ;Setup_Fan_Temp.c: 173: setup_fan_set_text[0] = dc_char1 + '0';
  5309  004028  504A               	movf	Update_Setup_Fan_Screen@dc_char1,w,c
  5310  00402A  0F30               	addlw	48
  5311  00402C  0101               	movlb	1	; () banked
  5312  00402E  6F87               	movwf	_setup_fan_set_text& (0+255),b
  5313                           
  5314                           ; BSR set to: 1
  5315                           ;Setup_Fan_Temp.c: 174: setup_fan_set_text[1] = dc_char2 + '0';
  5316  004030  504B               	movf	Update_Setup_Fan_Screen@dc_char2,w,c
  5317  004032  0F30               	addlw	48
  5318  004034  0101               	movlb	1	; () banked
  5319  004036  6F88               	movwf	(_setup_fan_set_text+1)& (0+255),b
  5320                           
  5321                           ; BSR set to: 1
  5322                           ;Setup_Fan_Temp.c: 175: setup_fan_set_text[2] = dc_char3 + '0';
  5323  004038  504C               	movf	Update_Setup_Fan_Screen@dc_char3,w,c
  5324  00403A  0F30               	addlw	48
  5325  00403C  0101               	movlb	1	; () banked
  5326  00403E  6F89               	movwf	(_setup_fan_set_text+2)& (0+255),b
  5327                           
  5328                           ; BSR set to: 1
  5329                           ;Setup_Fan_Temp.c: 177: drawtext(40, 74 ,setup_fan_set_text, 0xF800, 0x0000, 2);
  5330  004040  0E4A               	movlw	74
  5331  004042  6E39               	movwf	drawtext@y,c
  5332  004044  0E87               	movlw	low _setup_fan_set_text
  5333  004046  6E3A               	movwf	drawtext@_text,c
  5334  004048  0E01               	movlw	high _setup_fan_set_text
  5335  00404A  6E3B               	movwf	drawtext@_text+1,c
  5336  00404C  0EF8               	movlw	248
  5337  00404E  6E3D               	movwf	drawtext@color+1,c
  5338  004050  0E00               	movlw	0
  5339  004052  6E3C               	movwf	drawtext@color,c
  5340  004054  0E00               	movlw	0
  5341  004056  6E3F               	movwf	drawtext@bg+1,c
  5342  004058  0E00               	movlw	0
  5343  00405A  6E3E               	movwf	drawtext@bg,c
  5344  00405C  0E02               	movlw	2
  5345  00405E  6E40               	movwf	drawtext@size,c
  5346  004060  0E28               	movlw	40
  5347  004062  ECDD  F01A         	call	_drawtext
  5348  004066  0012               	return		;funcret
  5349  004068                     __end_of_Update_Setup_Fan_Screen:
  5350                           	opt stack 0
  5351                           tblptru	equ	0xFF8
  5352                           tblptrh	equ	0xFF7
  5353                           tblptrl	equ	0xFF6
  5354                           tablat	equ	0xFF5
  5355                           postinc0	equ	0xFEE
  5356                           wreg	equ	0xFE8
  5357                           postdec1	equ	0xFE5
  5358                           fsr1l	equ	0xFE1
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _Increase_Duty_Cycle *****************
  5362 ;; Defined at:
  5363 ;;		line 107 in file "Fan_Support.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;		None
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		wreg, status,2, status,0, cstack
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;Total ram usage:        0 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    7
  5384 ;; This function calls:
  5385 ;;		_Do_Beep
  5386 ;;		_do_update_pwm
  5387 ;; This function is called by:
  5388 ;;		_main
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           	psect	text10
  5393  004898                     __ptext10:
  5394                           	opt stack 0
  5395  004898                     _Increase_Duty_Cycle:
  5396                           	opt stack 23
  5397                           
  5398                           ;Fan_Support.c: 109: if (FANMODE == 0)
  5399                           
  5400                           ;incstack = 0
  5401  004898  0100               	movlb	0	; () banked
  5402  00489A  51C2               	movf	_FANMODE& (0+255),w,b
  5403  00489C  A4D8               	btfss	status,2,c
  5404  00489E  D013               	goto	l67
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;Fan_Support.c: 110: {
  5408                           ;Fan_Support.c: 113: if (duty_cycle == 100)
  5409  0048A0  0E64               	movlw	100
  5410  0048A2  1864               	xorwf	_duty_cycle,w,c
  5411  0048A4  A4D8               	btfss	status,2,c
  5412  0048A6  D008               	goto	l9922
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;Fan_Support.c: 114: {
  5416                           ;Fan_Support.c: 115: Do_Beep();
  5417  0048A8  EC04  F026         	call	_Do_Beep	;wreg free
  5418                           
  5419                           ;Fan_Support.c: 116: Do_Beep();
  5420  0048AC  EC04  F026         	call	_Do_Beep	;wreg free
  5421                           
  5422                           ;Fan_Support.c: 117: do_update_pwm(duty_cycle);
  5423  0048B0  5064               	movf	_duty_cycle,w,c
  5424  0048B2  EC46  F01D         	call	_do_update_pwm
  5425                           
  5426                           ;Fan_Support.c: 118: }
  5427  0048B6  D007               	goto	l67
  5428  0048B8                     l9922:
  5429                           
  5430                           ;Fan_Support.c: 119: else
  5431                           ;Fan_Support.c: 120: {
  5432                           ;Fan_Support.c: 121: duty_cycle = duty_cycle + 5;
  5433  0048B8  5064               	movf	_duty_cycle,w,c
  5434  0048BA  0F05               	addlw	5
  5435  0048BC  6E64               	movwf	_duty_cycle,c
  5436                           
  5437                           ;Fan_Support.c: 122: do_update_pwm(duty_cycle);
  5438  0048BE  5064               	movf	_duty_cycle,w,c
  5439  0048C0  EC46  F01D         	call	_do_update_pwm
  5440  0048C4  D000               	goto	l67
  5441  0048C6                     l67:
  5442  0048C6  0012               	return		;funcret
  5443  0048C8                     __end_of_Increase_Duty_Cycle:
  5444                           	opt stack 0
  5445                           tblptru	equ	0xFF8
  5446                           tblptrh	equ	0xFF7
  5447                           tblptrl	equ	0xFF6
  5448                           tablat	equ	0xFF5
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           postdec1	equ	0xFE5
  5452                           fsr1l	equ	0xFE1
  5453                           status	equ	0xFD8
  5454                           
  5455 ;; *************** function _Do_Setup_Time *****************
  5456 ;; Defined at:
  5457 ;;		line 41 in file "Setup_Time.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;		None               void
  5464 ;; Registers used:
  5465 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:   12
  5478 ;; This function calls:
  5479 ;;		_DS1621_Read_Temp
  5480 ;;		_DS3231_Read_Time
  5481 ;;		_Decrease_Time
  5482 ;;		_Do_Beep_Bad
  5483 ;;		_Do_Beep_Good
  5484 ;;		_Do_Save_New_Time
  5485 ;;		_Exit_Time_Setup
  5486 ;;		_Go_Next_Field
  5487 ;;		_Go_Prev_Field
  5488 ;;		_Increase_Time
  5489 ;;		_Initialize_Setup_Time_Screen
  5490 ;;		_Monitor_Fan
  5491 ;;		_Read_Volt
  5492 ;;		_Set_D1_RGB
  5493 ;;		_Set_D2_RGB
  5494 ;;		_Update_Setup_Time_Screen
  5495 ;;		___awdiv
  5496 ;;		___ftge
  5497 ;;		___wmul
  5498 ;;		_bcd_2_dec
  5499 ;;		_check_for_button_input
  5500 ;;		_get_RPM
  5501 ;;		_printf
  5502 ;; This function is called by:
  5503 ;;		_main
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text11
  5508  001FE2                     __ptext11:
  5509                           	opt stack 0
  5510  001FE2                     _Do_Setup_Time:
  5511                           	opt stack 18
  5512                           
  5513                           ;Setup_Time.c: 44: Select_Field = 0;
  5514                           
  5515                           ;incstack = 0
  5516  001FE2  0E00               	movlw	0
  5517  001FE4  0100               	movlb	0	; () banked
  5518  001FE6  6FCB               	movwf	_Select_Field& (0+255),b
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;Setup_Time.c: 46: DS3231_Read_Time();
  5522  001FE8  EC5C  F021         	call	_DS3231_Read_Time	;wreg free
  5523                           
  5524                           ;Setup_Time.c: 47: setup_second = bcd_2_dec(second);
  5525  001FEC  5068               	movf	_second,w,c
  5526  001FEE  ECD4  F024         	call	_bcd_2_dec
  5527  001FF2  0100               	movlb	0	; () banked
  5528  001FF4  6FD8               	movwf	_setup_second& (0+255),b
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;Setup_Time.c: 48: setup_minute = bcd_2_dec(minute);
  5532  001FF6  5066               	movf	_minute,w,c
  5533  001FF8  ECD4  F024         	call	_bcd_2_dec
  5534  001FFC  0100               	movlb	0	; () banked
  5535  001FFE  6FD6               	movwf	_setup_minute& (0+255),b
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;Setup_Time.c: 49: setup_hour = bcd_2_dec(hour);
  5539  002000  5065               	movf	_hour,w,c
  5540  002002  ECD4  F024         	call	_bcd_2_dec
  5541  002006  0100               	movlb	0	; () banked
  5542  002008  6FD5               	movwf	_setup_hour& (0+255),b
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;Setup_Time.c: 50: setup_day = bcd_2_dec(day);
  5546  00200A  5063               	movf	_day,w,c
  5547  00200C  ECD4  F024         	call	_bcd_2_dec
  5548  002010  0100               	movlb	0	; () banked
  5549  002012  6FD3               	movwf	_setup_day& (0+255),b
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;Setup_Time.c: 51: setup_month = bcd_2_dec(month);
  5553  002014  5067               	movf	_month,w,c
  5554  002016  ECD4  F024         	call	_bcd_2_dec
  5555  00201A  0100               	movlb	0	; () banked
  5556  00201C  6FD7               	movwf	_setup_month& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;Setup_Time.c: 52: setup_year = bcd_2_dec(year);
  5560  00201E  506B               	movf	_year,w,c
  5561  002020  ECD4  F024         	call	_bcd_2_dec
  5562  002024  0100               	movlb	0	; () banked
  5563  002026  6FD9               	movwf	_setup_year& (0+255),b
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;Setup_Time.c: 54: Initialize_Setup_Time_Screen();
  5567  002028  ECCC  F016         	call	_Initialize_Setup_Time_Screen	;wreg free
  5568                           
  5569                           ;Setup_Time.c: 55: Update_Setup_Time_Screen();
  5570  00202C  EC5F  F015         	call	_Update_Setup_Time_Screen	;wreg free
  5571                           
  5572                           ;Setup_Time.c: 56: In_Time_Setup = 1;
  5573  002030  0E01               	movlw	1
  5574  002032  0100               	movlb	0	; () banked
  5575  002034  6FC8               	movwf	_In_Time_Setup& (0+255),b
  5576                           
  5577                           ;Setup_Time.c: 58: while (In_Time_Setup == 1)
  5578  002036  D0EF               	goto	l10222
  5579  002038                     l10156:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;Setup_Time.c: 59: {
  5583                           ;Setup_Time.c: 60: DS3231_Read_Time();
  5584  002038  EC5C  F021         	call	_DS3231_Read_Time	;wreg free
  5585                           
  5586                           ;Setup_Time.c: 63: if(tempSecond != second)
  5587  00203C  5068               	movf	_second,w,c
  5588  00203E  0100               	movlb	0	; () banked
  5589  002040  19DD               	xorwf	_tempSecond& (0+255),w,b
  5590  002042  B4D8               	btfsc	status,2,c
  5591  002044  D0A3               	goto	l10186
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;Setup_Time.c: 64: {
  5595                           ;Setup_Time.c: 65: tempSecond = second;
  5596  002046  C068  F0DD         	movff	_second,_tempSecond
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;Setup_Time.c: 66: rpm = get_RPM();
  5600  00204A  EC5C  F023         	call	_get_RPM	;wreg free
  5601  00204E  C01F  F05C         	movff	?_get_RPM,_rpm
  5602  002052  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  5603                           
  5604                           ;Setup_Time.c: 68: volt = Read_Volt(0);
  5605  002056  0E00               	movlw	0
  5606  002058  EC25  F021         	call	_Read_Volt
  5607  00205C  C03D  F0B8         	movff	?_Read_Volt,_volt
  5608  002060  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  5609  002064  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  5610                           
  5611                           ;Setup_Time.c: 69: if (volt > 3.000) light_flag = 1;
  5612  002068  0E00               	movlw	0
  5613  00206A  6E11               	movwf	___ftge@ff1,c
  5614  00206C  0E40               	movlw	64
  5615  00206E  6E12               	movwf	___ftge@ff1+1,c
  5616  002070  0E40               	movlw	64
  5617  002072  6E13               	movwf	___ftge@ff1+2,c
  5618  002074  C0B8  F014         	movff	_volt,___ftge@ff2
  5619  002078  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  5620  00207C  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  5621  002080  EC90  F01E         	call	___ftge	;wreg free
  5622  002084  B0D8               	btfsc	status,0,c
  5623  002086  D004               	goto	l10168
  5624  002088  0E01               	movlw	1
  5625  00208A  0100               	movlb	0	; () banked
  5626  00208C  6FD1               	movwf	_light_flag& (0+255),b
  5627  00208E  D000               	goto	l10168
  5628  002090                     l10168:
  5629                           
  5630                           ;Setup_Time.c: 70: tempC = DS1621_Read_Temp();
  5631  002090  EC15  F024         	call	_DS1621_Read_Temp	;wreg free
  5632  002094  5014               	movf	?_DS1621_Read_Temp,w,c
  5633  002096  6E69               	movwf	_tempC,c
  5634                           
  5635                           ;Setup_Time.c: 71: tempF = (tempC * 9 / 5) + 32;
  5636  002098  5069               	movf	_tempC,w,c
  5637  00209A  6E11               	movwf	___wmul@multiplier,c
  5638  00209C  6A12               	clrf	___wmul@multiplier+1,c
  5639  00209E  BE11               	btfsc	___wmul@multiplier,7,c
  5640  0020A0  0612               	decf	___wmul@multiplier+1,f,c
  5641  0020A2  0E00               	movlw	0
  5642  0020A4  6E14               	movwf	___wmul@multiplicand+1,c
  5643  0020A6  0E09               	movlw	9
  5644  0020A8  6E13               	movwf	___wmul@multiplicand,c
  5645  0020AA  ECE9  F024         	call	___wmul	;wreg free
  5646  0020AE  C011  F017         	movff	?___wmul,___awdiv@dividend
  5647  0020B2  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  5648  0020B6  0E00               	movlw	0
  5649  0020B8  6E1A               	movwf	___awdiv@divisor+1,c
  5650  0020BA  0E05               	movlw	5
  5651  0020BC  6E19               	movwf	___awdiv@divisor,c
  5652  0020BE  EC45  F01E         	call	___awdiv	;wreg free
  5653  0020C2  5017               	movf	?___awdiv,w,c
  5654  0020C4  0F20               	addlw	32
  5655  0020C6  6E6A               	movwf	_tempF,c
  5656                           
  5657                           ;Setup_Time.c: 72: Set_D1_RGB(duty_cycle);
  5658  0020C8  5064               	movf	_duty_cycle,w,c
  5659  0020CA  ECEE  F022         	call	_Set_D1_RGB
  5660                           
  5661                           ;Setup_Time.c: 73: Set_D2_RGB(rpm);
  5662  0020CE  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  5663  0020D2  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  5664  0020D6  EC75  F022         	call	_Set_D2_RGB	;wreg free
  5665                           
  5666                           ;Setup_Time.c: 75: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,
      +                          year);
  5667  0020DA  0E75               	movlw	low STR_4
  5668  0020DC  0100               	movlb	0	; () banked
  5669  0020DE  6F86               	movwf	printf@f& (0+255),b
  5670  0020E0  0EFE               	movlw	high STR_4
  5671  0020E2  0100               	movlb	0	; () banked
  5672  0020E4  6F87               	movwf	(printf@f+1)& (0+255),b
  5673  0020E6  C065  F088         	movff	_hour,?_printf+2
  5674  0020EA  0100               	movlb	0	; () banked
  5675  0020EC  6B89               	clrf	(?_printf+3)& (0+255),b
  5676  0020EE  C066  F08A         	movff	_minute,?_printf+4
  5677  0020F2  0100               	movlb	0	; () banked
  5678  0020F4  6B8B               	clrf	(?_printf+5)& (0+255),b
  5679  0020F6  C068  F08C         	movff	_second,?_printf+6
  5680  0020FA  0100               	movlb	0	; () banked
  5681  0020FC  6B8D               	clrf	(?_printf+7)& (0+255),b
  5682  0020FE  C067  F08E         	movff	_month,?_printf+8
  5683  002102  0100               	movlb	0	; () banked
  5684  002104  6B8F               	clrf	(?_printf+9)& (0+255),b
  5685  002106  C063  F090         	movff	_day,?_printf+10
  5686  00210A  0100               	movlb	0	; () banked
  5687  00210C  6B91               	clrf	(?_printf+11)& (0+255),b
  5688  00210E  C06B  F092         	movff	_year,?_printf+12
  5689  002112  0100               	movlb	0	; () banked
  5690  002114  6B93               	clrf	(?_printf+13)& (0+255),b
  5691  002116  EC0E  F000         	call	_printf	;wreg free
  5692                           
  5693                           ;Setup_Time.c: 76: printf (" Temp = %d C = %d F ", tempC, tempF);
  5694  00211A  0EF7               	movlw	low STR_5
  5695  00211C  0100               	movlb	0	; () banked
  5696  00211E  6F86               	movwf	printf@f& (0+255),b
  5697  002120  0EFE               	movlw	high STR_5
  5698  002122  0100               	movlb	0	; () banked
  5699  002124  6F87               	movwf	(printf@f+1)& (0+255),b
  5700  002126  5069               	movf	_tempC,w,c
  5701  002128  0100               	movlb	0	; () banked
  5702  00212A  6F88               	movwf	(?_printf+2)& (0+255),b
  5703  00212C  6B89               	clrf	(?_printf+3)& (0+255),b
  5704  00212E  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  5705  002130  0789               	decf	(?_printf+3)& (0+255),f,b
  5706  002132  506A               	movf	_tempF,w,c
  5707  002134  0100               	movlb	0	; () banked
  5708  002136  6F8A               	movwf	(?_printf+4)& (0+255),b
  5709  002138  6B8B               	clrf	(?_printf+5)& (0+255),b
  5710  00213A  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  5711  00213C  078B               	decf	(?_printf+5)& (0+255),f,b
  5712  00213E  EC0E  F000         	call	_printf	;wreg free
  5713                           
  5714                           ;Setup_Time.c: 77: printf ("Light Sensor = %f V", volt);
  5715  002142  0E20               	movlw	low STR_6
  5716  002144  0100               	movlb	0	; () banked
  5717  002146  6F86               	movwf	printf@f& (0+255),b
  5718  002148  0EFF               	movlw	high STR_6
  5719  00214A  0100               	movlb	0	; () banked
  5720  00214C  6F87               	movwf	(printf@f+1)& (0+255),b
  5721  00214E  C0B8  F088         	movff	_volt,?_printf+2
  5722  002152  C0B9  F089         	movff	_volt+1,?_printf+3
  5723  002156  C0BA  F08A         	movff	_volt+2,?_printf+4
  5724  00215A  EC0E  F000         	call	_printf	;wreg free
  5725                           
  5726                           ;Setup_Time.c: 78: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_flag
      +                          );
  5727  00215E  0E93               	movlw	low STR_7
  5728  002160  0100               	movlb	0	; () banked
  5729  002162  6F86               	movwf	printf@f& (0+255),b
  5730  002164  0EFE               	movlw	high STR_7
  5731  002166  0100               	movlb	0	; () banked
  5732  002168  6F87               	movwf	(printf@f+1)& (0+255),b
  5733  00216A  C05C  F088         	movff	_rpm,?_printf+2
  5734  00216E  C05D  F089         	movff	_rpm+1,?_printf+3
  5735  002172  C064  F08A         	movff	_duty_cycle,?_printf+4
  5736  002176  0100               	movlb	0	; () banked
  5737  002178  6B8B               	clrf	(?_printf+5)& (0+255),b
  5738  00217A  C0D1  F08C         	movff	_light_flag,?_printf+6
  5739  00217E  0100               	movlb	0	; () banked
  5740  002180  6B8D               	clrf	(?_printf+7)& (0+255),b
  5741  002182  EC0E  F000         	call	_printf	;wreg free
  5742                           
  5743                           ;Setup_Time.c: 79: Monitor_Fan();
  5744  002186  EC9E  F022         	call	_Monitor_Fan	;wreg free
  5745  00218A  D000               	goto	l10186
  5746  00218C                     l10186:
  5747                           
  5748                           ;Setup_Time.c: 81: }
  5749                           ;Setup_Time.c: 82: if (check_for_button_input() == 1)
  5750  00218C  ECA1  F01D         	call	_check_for_button_input	;wreg free
  5751  002190  06E8               	decf	wreg,f,c
  5752  002192  A4D8               	btfss	status,2,c
  5753  002194  D040               	goto	l10222
  5754                           
  5755                           ;Setup_Time.c: 83: {
  5756                           ;Setup_Time.c: 85: if (found >= 3 && found <= 8)
  5757  002196  0E02               	movlw	2
  5758  002198  0100               	movlb	0	; () banked
  5759  00219A  65D0               	cpfsgt	_found& (0+255),b
  5760  00219C  D039               	goto	l10220
  5761                           
  5762                           ; BSR set to: 0
  5763  00219E  0E09               	movlw	9
  5764  0021A0  0100               	movlb	0	; () banked
  5765  0021A2  61D0               	cpfslt	_found& (0+255),b
  5766  0021A4  D035               	goto	l10220
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;Setup_Time.c: 86: {
  5770                           ;Setup_Time.c: 87: Do_Beep_Good();
  5771  0021A6  ECE8  F025         	call	_Do_Beep_Good	;wreg free
  5772                           
  5773                           ;Setup_Time.c: 88: if (found == 3)
  5774  0021AA  0E03               	movlw	3
  5775  0021AC  0100               	movlb	0	; () banked
  5776  0021AE  19D0               	xorwf	_found& (0+255),w,b
  5777  0021B0  A4D8               	btfss	status,2,c
  5778  0021B2  D003               	goto	l10198
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;Setup_Time.c: 89: Go_Prev_Field();
  5782  0021B4  EC8D  F025         	call	_Go_Prev_Field	;wreg free
  5783  0021B8  D000               	goto	l10198
  5784  0021BA                     l10198:
  5785                           
  5786                           ;Setup_Time.c: 90: if (found == 4)
  5787  0021BA  0E04               	movlw	4
  5788  0021BC  0100               	movlb	0	; () banked
  5789  0021BE  19D0               	xorwf	_found& (0+255),w,b
  5790  0021C0  A4D8               	btfss	status,2,c
  5791  0021C2  D003               	goto	l10202
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;Setup_Time.c: 91: Go_Next_Field();
  5795  0021C4  EC9D  F025         	call	_Go_Next_Field	;wreg free
  5796  0021C8  D000               	goto	l10202
  5797  0021CA                     l10202:
  5798                           
  5799                           ;Setup_Time.c: 92: if (found == 5)
  5800  0021CA  0E05               	movlw	5
  5801  0021CC  0100               	movlb	0	; () banked
  5802  0021CE  19D0               	xorwf	_found& (0+255),w,b
  5803  0021D0  A4D8               	btfss	status,2,c
  5804  0021D2  D003               	goto	l10206
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;Setup_Time.c: 93: Do_Save_New_Time();
  5808  0021D4  EC67  F026         	call	_Do_Save_New_Time	;wreg free
  5809  0021D8  D000               	goto	l10206
  5810  0021DA                     l10206:
  5811                           
  5812                           ;Setup_Time.c: 94: if (found == 8)
  5813  0021DA  0E08               	movlw	8
  5814  0021DC  0100               	movlb	0	; () banked
  5815  0021DE  19D0               	xorwf	_found& (0+255),w,b
  5816  0021E0  A4D8               	btfss	status,2,c
  5817  0021E2  D003               	goto	l10210
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;Setup_Time.c: 95: Exit_Time_Setup();
  5821  0021E4  ECC4  F026         	call	_Exit_Time_Setup	;wreg free
  5822  0021E8  D000               	goto	l10210
  5823  0021EA                     l10210:
  5824                           
  5825                           ;Setup_Time.c: 96: if (found == 6)
  5826  0021EA  0E06               	movlw	6
  5827  0021EC  0100               	movlb	0	; () banked
  5828  0021EE  19D0               	xorwf	_found& (0+255),w,b
  5829  0021F0  A4D8               	btfss	status,2,c
  5830  0021F2  D003               	goto	l10214
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;Setup_Time.c: 97: Decrease_Time();
  5834  0021F4  ECEB  F01C         	call	_Decrease_Time	;wreg free
  5835  0021F8  D000               	goto	l10214
  5836  0021FA                     l10214:
  5837                           
  5838                           ;Setup_Time.c: 98: if (found == 7)
  5839  0021FA  0E07               	movlw	7
  5840  0021FC  0100               	movlb	0	; () banked
  5841  0021FE  19D0               	xorwf	_found& (0+255),w,b
  5842  002200  A4D8               	btfss	status,2,c
  5843  002202  D003               	goto	l10218
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;Setup_Time.c: 99: Increase_Time();
  5847  002204  EC90  F01C         	call	_Increase_Time	;wreg free
  5848  002208  D000               	goto	l10218
  5849  00220A                     l10218:
  5850                           
  5851                           ;Setup_Time.c: 100: found = 0xff;
  5852  00220A  0100               	movlb	0	; () banked
  5853  00220C  69D0               	setf	_found& (0+255),b
  5854                           
  5855                           ;Setup_Time.c: 101: }
  5856  00220E  D003               	goto	l10222
  5857  002210                     l10220:
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;Setup_Time.c: 102: else
  5861                           ;Setup_Time.c: 103: {
  5862                           ;Setup_Time.c: 104: Do_Beep_Bad();
  5863  002210  ECF6  F025         	call	_Do_Beep_Bad	;wreg free
  5864  002214  D000               	goto	l10222
  5865  002216                     l10222:
  5866  002216  0100               	movlb	0	; () banked
  5867  002218  05C8               	decf	_In_Time_Setup& (0+255),w,b
  5868  00221A  B4D8               	btfsc	status,2,c
  5869  00221C  D70D               	goto	l10156
  5870                           
  5871                           ; BSR set to: 0
  5872                           
  5873                           ; BSR set to: 0
  5874  00221E  0012               	return		;funcret
  5875  002220                     __end_of_Do_Setup_Time:
  5876                           	opt stack 0
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           postinc0	equ	0xFEE
  5882                           wreg	equ	0xFE8
  5883                           postdec1	equ	0xFE5
  5884                           fsr1l	equ	0xFE1
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function _get_RPM *****************
  5888 ;; Defined at:
  5889 ;;		line 68 in file "Fan_Support.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;		None
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;  RPS             2   32[COMRAM] int 
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  2   30[COMRAM] int 
  5896 ;; Registers used:
  5897 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;Total ram usage:        4 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    4
  5910 ;; This function calls:
  5911 ;;		___awdiv
  5912 ;;		___wmul
  5913 ;; This function is called by:
  5914 ;;		_main
  5915 ;;		_Setup_Fan_Temp
  5916 ;;		_Do_Setup_Time
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text12
  5921  0046B8                     __ptext12:
  5922                           	opt stack 0
  5923  0046B8                     _get_RPM:
  5924                           	opt stack 26
  5925                           
  5926                           ;Fan_Support.c: 71: int RPS = TMR3L / 2;
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;incstack = 0
  5930  0046B8  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  5931  0046BC  6A18               	clrf	___awdiv@dividend+1,c
  5932  0046BE  0E00               	movlw	0
  5933  0046C0  6E1A               	movwf	___awdiv@divisor+1,c
  5934  0046C2  0E02               	movlw	2
  5935  0046C4  6E19               	movwf	___awdiv@divisor,c
  5936  0046C6  EC45  F01E         	call	___awdiv	;wreg free
  5937  0046CA  C017  F021         	movff	?___awdiv,get_RPM@RPS
  5938  0046CE  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  5939                           
  5940                           ;Fan_Support.c: 73: TMR3L = 0;
  5941  0046D2  0E00               	movlw	0
  5942  0046D4  6EB2               	movwf	4018,c	;volatile
  5943                           
  5944                           ;Fan_Support.c: 74: return (RPS * 60);
  5945  0046D6  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  5946  0046DA  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  5947  0046DE  0E00               	movlw	0
  5948  0046E0  6E14               	movwf	___wmul@multiplicand+1,c
  5949  0046E2  0E3C               	movlw	60
  5950  0046E4  6E13               	movwf	___wmul@multiplicand,c
  5951  0046E6  ECE9  F024         	call	___wmul	;wreg free
  5952  0046EA  C011  F01F         	movff	?___wmul,?_get_RPM
  5953  0046EE  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  5954  0046F2  D000               	goto	l50
  5955  0046F4                     l50:
  5956  0046F4  0012               	return		;funcret
  5957  0046F6                     __end_of_get_RPM:
  5958                           	opt stack 0
  5959                           tblptru	equ	0xFF8
  5960                           tblptrh	equ	0xFF7
  5961                           tblptrl	equ	0xFF6
  5962                           tablat	equ	0xFF5
  5963                           postinc0	equ	0xFEE
  5964                           wreg	equ	0xFE8
  5965                           postdec1	equ	0xFE5
  5966                           fsr1l	equ	0xFE1
  5967                           status	equ	0xFD8
  5968                           
  5969 ;; *************** function _check_for_button_input *****************
  5970 ;; Defined at:
  5971 ;;		line 14 in file "utils.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;		None
  5974 ;; Auto vars:     Size  Location     Type
  5975 ;;  j               2   21[BANK1 ] int 
  5976 ;;  array1         21    0[BANK1 ] unsigned char [21]
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      unsigned char 
  5979 ;; Registers used:
  5980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Totals:         1       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;Total ram usage:       24 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    7
  5993 ;; This function calls:
  5994 ;;		_printf
  5995 ;; This function is called by:
  5996 ;;		_main
  5997 ;;		_Setup_Fan_Temp
  5998 ;;		_Do_Setup_Time
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text13
  6003  003B42                     __ptext13:
  6004                           	opt stack 0
  6005  003B42                     _check_for_button_input:
  6006                           	opt stack 23
  6007                           
  6008                           ;utils.c: 16: char array1[21]={0xa2,0x62,0xe2,0x22,0x02,0xc2,0xe0,0xa8,0x90,0x68,0x98,0x
      +                          b0,0x30,0x18,0x7a,0x10,0x38,0x5a,0x42,0x4a,0x52};
  6009                           
  6010                           ;incstack = 0
  6011  003B42  EE21  F023         	lfsr	2,check_for_button_input@F4236
  6012  003B46  EE11  F08C         	lfsr	1,check_for_button_input@array1
  6013  003B4A  0E14               	movlw	20
  6014  003B4C                     u8431:
  6015  003B4C  CFDB FFE3          	movff	plusw2,plusw1
  6016  003B50  06E8               	decf	wreg,f,c
  6017  003B52  E2FC               	bc	u8431
  6018                           
  6019                           ;utils.c: 18: if (Nec_ok == 1)
  6020  003B54  0100               	movlb	0	; () banked
  6021  003B56  05BB               	decf	_Nec_ok& (0+255),w,b
  6022  003B58  0100               	movlb	0	; () banked
  6023  003B5A  11BC               	iorwf	(_Nec_ok+1)& (0+255),w,b
  6024  003B5C  A4D8               	btfss	status,2,c
  6025  003B5E  D045               	goto	l9710
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;utils.c: 19: {
  6029                           ;utils.c: 20: Nec_ok = 0;
  6030  003B60  0E00               	movlw	0
  6031  003B62  0100               	movlb	0	; () banked
  6032  003B64  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  6033  003B66  0E00               	movlw	0
  6034  003B68  6FBB               	movwf	_Nec_ok& (0+255),b
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;utils.c: 24: INTCON3bits.INT2IE = 1;
  6038  003B6A  88F0               	bsf	intcon3,4,c	;volatile
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;utils.c: 25: INTCON2bits.INTEDG2 = 0;
  6042  003B6C  98F1               	bcf	intcon2,4,c	;volatile
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;utils.c: 27: found = 0xff;
  6046  003B6E  0100               	movlb	0	; () banked
  6047  003B70  69D0               	setf	_found& (0+255),b
  6048                           
  6049                           ;utils.c: 28: for (int j=0; j< 21; j++)
  6050  003B72  0E00               	movlw	0
  6051  003B74  0101               	movlb	1	; () banked
  6052  003B76  6FA2               	movwf	(check_for_button_input@j+1)& (0+255),b
  6053  003B78  0E00               	movlw	0
  6054  003B7A  6FA1               	movwf	check_for_button_input@j& (0+255),b
  6055  003B7C                     l9682:
  6056                           
  6057                           ; BSR set to: 1
  6058  003B7C  0101               	movlb	1	; () banked
  6059  003B7E  BFA2               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  6060  003B80  D00A               	goto	l9686
  6061  003B82  0101               	movlb	1	; () banked
  6062  003B84  51A2               	movf	(check_for_button_input@j+1)& (0+255),w,b
  6063  003B86  E121               	bnz	l9696
  6064  003B88  0E15               	movlw	21
  6065  003B8A  0101               	movlb	1	; () banked
  6066  003B8C  5DA1               	subwf	check_for_button_input@j& (0+255),w,b
  6067  003B8E  B0D8               	btfsc	status,0,c
  6068  003B90  D01C               	goto	l9696
  6069  003B92  D001               	goto	l9686
  6070                           
  6071                           ; BSR set to: 1
  6072  003B94  D01A               	goto	l9696
  6073  003B96                     l9686:
  6074                           
  6075                           ; BSR set to: 1
  6076                           ;utils.c: 29: {
  6077                           ;utils.c: 31: if (Nec_Button == array1[j])
  6078  003B96  0E8C               	movlw	low check_for_button_input@array1
  6079  003B98  0101               	movlb	1	; () banked
  6080  003B9A  25A1               	addwf	check_for_button_input@j& (0+255),w,b
  6081  003B9C  6ED9               	movwf	fsr2l,c
  6082  003B9E  0E01               	movlw	high check_for_button_input@array1
  6083  003BA0  0101               	movlb	1	; () banked
  6084  003BA2  21A2               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  6085  003BA4  6EDA               	movwf	fsr2h,c
  6086  003BA6  0100               	movlb	0	; () banked
  6087  003BA8  51C9               	movf	_Nec_Button& (0+255),w,b
  6088  003BAA  18DE               	xorwf	postinc2,w,c
  6089  003BAC  A4D8               	btfss	status,2,c
  6090  003BAE  D008               	goto	l9692
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;utils.c: 32: {
  6094                           ;utils.c: 33: found = j;
  6095  003BB0  C1A1  F0D0         	movff	check_for_button_input@j,_found
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;utils.c: 34: j = 21;
  6099  003BB4  0E00               	movlw	0
  6100  003BB6  0101               	movlb	1	; () banked
  6101  003BB8  6FA2               	movwf	(check_for_button_input@j+1)& (0+255),b
  6102  003BBA  0E15               	movlw	21
  6103  003BBC  6FA1               	movwf	check_for_button_input@j& (0+255),b
  6104  003BBE  D000               	goto	l9692
  6105  003BC0                     l9692:
  6106  003BC0  0101               	movlb	1	; () banked
  6107  003BC2  4BA1               	infsnz	check_for_button_input@j& (0+255),f,b
  6108  003BC4  2BA2               	incf	(check_for_button_input@j+1)& (0+255),f,b
  6109  003BC6  D7DA               	goto	l9682
  6110                           
  6111                           ; BSR set to: 1
  6112  003BC8  D000               	goto	l9696
  6113  003BCA                     l9696:
  6114                           
  6115                           ; BSR set to: 1
  6116                           ;utils.c: 35: }
  6117                           ;utils.c: 36: }
  6118                           ;utils.c: 38: if (found == 0xff)
  6119  003BCA  0100               	movlb	0	; () banked
  6120  003BCC  29D0               	incf	_found& (0+255),w,b
  6121  003BCE  A4D8               	btfss	status,2,c
  6122  003BD0  D00A               	goto	l9706
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;utils.c: 39: {
  6126                           ;utils.c: 40: printf ("Cannot find button \r\n");
  6127  003BD2  0EE1               	movlw	low STR_3
  6128  003BD4  0100               	movlb	0	; () banked
  6129  003BD6  6F86               	movwf	printf@f& (0+255),b
  6130  003BD8  0EFE               	movlw	high STR_3
  6131  003BDA  0100               	movlb	0	; () banked
  6132  003BDC  6F87               	movwf	(printf@f+1)& (0+255),b
  6133  003BDE  EC0E  F000         	call	_printf	;wreg free
  6134  003BE2  D003               	goto	l9710
  6135                           
  6136                           ;utils.c: 42: }
  6137                           
  6138                           ;utils.c: 41: return (0);
  6139  003BE4  D004               	goto	l446
  6140  003BE6                     l9706:
  6141                           
  6142                           ;utils.c: 43: else
  6143                           ;utils.c: 44: {
  6144                           ;utils.c: 45: return (1);
  6145  003BE6  0E01               	movlw	1
  6146                           
  6147                           ;utils.c: 46: }
  6148                           ;utils.c: 47: }
  6149  003BE8  D002               	goto	l446
  6150  003BEA                     l9710:
  6151                           
  6152                           ;utils.c: 48: else {return (0);}
  6153  003BEA  0E00               	movlw	0
  6154  003BEC  D000               	goto	l446
  6155  003BEE                     l446:
  6156  003BEE  0012               	return		;funcret
  6157  003BF0                     __end_of_check_for_button_input:
  6158                           	opt stack 0
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           intcon2	equ	0xFF1
  6164                           intcon3	equ	0xFF0
  6165                           postinc0	equ	0xFEE
  6166                           wreg	equ	0xFE8
  6167                           postdec1	equ	0xFE5
  6168                           plusw1	equ	0xFE3
  6169                           fsr1l	equ	0xFE1
  6170                           postinc2	equ	0xFDE
  6171                           plusw2	equ	0xFDB
  6172                           fsr2h	equ	0xFDA
  6173                           fsr2l	equ	0xFD9
  6174                           status	equ	0xFD8
  6175                           
  6176 ;; *************** function _bcd_2_dec *****************
  6177 ;; Defined at:
  6178 ;;		line 52 in file "utils.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  bcd             1    wreg     unsigned char 
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;  bcd             1   20[COMRAM] unsigned char 
  6183 ;;  dec             2   18[COMRAM] int 
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      unsigned char 
  6186 ;; Registers used:
  6187 ;;		wreg, status,2, status,0, prodl, prodh
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;Total ram usage:        5 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    3
  6200 ;; This function calls:
  6201 ;;		Nothing
  6202 ;; This function is called by:
  6203 ;;		_Do_Setup_Time
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           	psect	text14
  6208  0049A8                     __ptext14:
  6209                           	opt stack 0
  6210  0049A8                     _bcd_2_dec:
  6211                           	opt stack 26
  6212                           
  6213                           ;incstack = 0
  6214                           ;bcd_2_dec@bcd stored from wreg
  6215  0049A8  6E15               	movwf	bcd_2_dec@bcd,c
  6216                           
  6217                           ;utils.c: 54: int dec;
  6218                           ;utils.c: 55: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  6219  0049AA  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  6220  0049AE  0E0F               	movlw	15
  6221  0049B0  1611               	andwf	??_bcd_2_dec,f,c
  6222  0049B2  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  6223  0049B6  3A12               	swapf	??_bcd_2_dec+1,f,c
  6224  0049B8  0E0F               	movlw	15
  6225  0049BA  1612               	andwf	??_bcd_2_dec+1,f,c
  6226  0049BC  5012               	movf	??_bcd_2_dec+1,w,c
  6227  0049BE  0D0A               	mullw	10
  6228  0049C0  5011               	movf	??_bcd_2_dec,w,c
  6229  0049C2  24F3               	addwf	prodl,w,c
  6230  0049C4  6E13               	movwf	bcd_2_dec@dec,c
  6231  0049C6  0E00               	movlw	0
  6232  0049C8  20F4               	addwfc	prodh,w,c
  6233  0049CA  6E14               	movwf	bcd_2_dec@dec+1,c
  6234                           
  6235                           ;utils.c: 56: return dec;
  6236  0049CC  5013               	movf	bcd_2_dec@dec,w,c
  6237  0049CE  D000               	goto	l451
  6238  0049D0                     l451:
  6239  0049D0  0012               	return		;funcret
  6240  0049D2                     __end_of_bcd_2_dec:
  6241                           	opt stack 0
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           prodh	equ	0xFF4
  6247                           prodl	equ	0xFF3
  6248                           intcon2	equ	0xFF1
  6249                           intcon3	equ	0xFF0
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           postdec1	equ	0xFE5
  6253                           plusw1	equ	0xFE3
  6254                           fsr1l	equ	0xFE1
  6255                           postinc2	equ	0xFDE
  6256                           plusw2	equ	0xFDB
  6257                           fsr2h	equ	0xFDA
  6258                           fsr2l	equ	0xFD9
  6259                           status	equ	0xFD8
  6260                           
  6261 ;; *************** function _Set_D2_RGB *****************
  6262 ;; Defined at:
  6263 ;;		line 258 in file "Main.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;  rpm             2   30[COMRAM] int 
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  range           2   32[COMRAM] int 
  6268 ;; Return value:  Size  Location     Type
  6269 ;;		None               void
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6277 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6278 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;Total ram usage:        4 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    4
  6284 ;; This function calls:
  6285 ;;		___awdiv
  6286 ;; This function is called by:
  6287 ;;		_main
  6288 ;;		_Setup_Fan_Temp
  6289 ;;		_Do_Setup_Time
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           	psect	text15
  6294  0044EA                     __ptext15:
  6295                           	opt stack 0
  6296  0044EA                     _Set_D2_RGB:
  6297                           	opt stack 25
  6298                           
  6299                           ;Main.c: 261: int range = (rpm/500)+1;
  6300                           
  6301                           ;incstack = 0
  6302  0044EA  C01F  F017         	movff	Set_D2_RGB@rpm,___awdiv@dividend
  6303  0044EE  C020  F018         	movff	Set_D2_RGB@rpm+1,___awdiv@dividend+1
  6304  0044F2  0E01               	movlw	1
  6305  0044F4  6E1A               	movwf	___awdiv@divisor+1,c
  6306  0044F6  0EF4               	movlw	244
  6307  0044F8  6E19               	movwf	___awdiv@divisor,c
  6308  0044FA  EC45  F01E         	call	___awdiv	;wreg free
  6309  0044FE  0E01               	movlw	1
  6310  004500  2417               	addwf	?___awdiv,w,c
  6311  004502  6E21               	movwf	Set_D2_RGB@range,c
  6312  004504  0E00               	movlw	0
  6313  004506  2018               	addwfc	?___awdiv+1,w,c
  6314  004508  6E22               	movwf	Set_D2_RGB@range+1,c
  6315                           
  6316                           ;Main.c: 262: if (range > 7)
  6317  00450A  BE22               	btfsc	Set_D2_RGB@range+1,7,c
  6318  00450C  D00B               	goto	l9738
  6319  00450E  5022               	movf	Set_D2_RGB@range+1,w,c
  6320  004510  E104               	bnz	u8500
  6321  004512  0E08               	movlw	8
  6322  004514  5C21               	subwf	Set_D2_RGB@range,w,c
  6323  004516  A0D8               	btfss	status,0,c
  6324  004518  D005               	goto	l9738
  6325  00451A                     u8500:
  6326                           
  6327                           ;Main.c: 263: range = 7;
  6328  00451A  0E00               	movlw	0
  6329  00451C  6E22               	movwf	Set_D2_RGB@range+1,c
  6330  00451E  0E07               	movlw	7
  6331  004520  6E21               	movwf	Set_D2_RGB@range,c
  6332  004522  D000               	goto	l9738
  6333  004524                     l9738:
  6334                           
  6335                           ;Main.c: 264: if (rpm == 0)
  6336  004524  501F               	movf	Set_D2_RGB@rpm,w,c
  6337  004526  1020               	iorwf	Set_D2_RGB@rpm+1,w,c
  6338  004528  A4D8               	btfss	status,2,c
  6339  00452A  D005               	goto	l9742
  6340                           
  6341                           ;Main.c: 265: range = 0;
  6342  00452C  0E00               	movlw	0
  6343  00452E  6E22               	movwf	Set_D2_RGB@range+1,c
  6344  004530  0E00               	movlw	0
  6345  004532  6E21               	movwf	Set_D2_RGB@range,c
  6346  004534  D000               	goto	l9742
  6347  004536                     l9742:
  6348                           
  6349                           ;Main.c: 266: PORTE = range;
  6350  004536  C021  FF84         	movff	Set_D2_RGB@range,3972	;volatile
  6351  00453A  0012               	return		;funcret
  6352  00453C                     __end_of_Set_D2_RGB:
  6353                           	opt stack 0
  6354                           tblptru	equ	0xFF8
  6355                           tblptrh	equ	0xFF7
  6356                           tblptrl	equ	0xFF6
  6357                           tablat	equ	0xFF5
  6358                           prodh	equ	0xFF4
  6359                           prodl	equ	0xFF3
  6360                           intcon2	equ	0xFF1
  6361                           intcon3	equ	0xFF0
  6362                           postinc0	equ	0xFEE
  6363                           wreg	equ	0xFE8
  6364                           postdec1	equ	0xFE5
  6365                           plusw1	equ	0xFE3
  6366                           fsr1l	equ	0xFE1
  6367                           postinc2	equ	0xFDE
  6368                           plusw2	equ	0xFDB
  6369                           fsr2h	equ	0xFDA
  6370                           fsr2l	equ	0xFD9
  6371                           status	equ	0xFD8
  6372                           
  6373 ;; *************** function _Set_D1_RGB *****************
  6374 ;; Defined at:
  6375 ;;		line 249 in file "Main.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  duty_cycle      1    wreg     unsigned char 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  duty_cycle      1   31[COMRAM] unsigned char 
  6380 ;;  range           2   32[COMRAM] int 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;		None               void
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;Total ram usage:        4 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    4
  6397 ;; This function calls:
  6398 ;;		___awdiv
  6399 ;; This function is called by:
  6400 ;;		_main
  6401 ;;		_Setup_Fan_Temp
  6402 ;;		_Do_Setup_Time
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text16
  6407  0045DC                     __ptext16:
  6408                           	opt stack 0
  6409  0045DC                     _Set_D1_RGB:
  6410                           	opt stack 25
  6411                           
  6412                           ;incstack = 0
  6413                           ;Set_D1_RGB@duty_cycle stored from wreg
  6414  0045DC  6E20               	movwf	Set_D1_RGB@duty_cycle,c
  6415                           
  6416                           ;Main.c: 252: int range = duty_cycle/10;
  6417  0045DE  C020  F017         	movff	Set_D1_RGB@duty_cycle,___awdiv@dividend
  6418  0045E2  6A18               	clrf	___awdiv@dividend+1,c
  6419  0045E4  0E00               	movlw	0
  6420  0045E6  6E1A               	movwf	___awdiv@divisor+1,c
  6421  0045E8  0E0A               	movlw	10
  6422  0045EA  6E19               	movwf	___awdiv@divisor,c
  6423  0045EC  EC45  F01E         	call	___awdiv	;wreg free
  6424  0045F0  C017  F021         	movff	?___awdiv,Set_D1_RGB@range
  6425  0045F4  C018  F022         	movff	?___awdiv+1,Set_D1_RGB@range+1
  6426                           
  6427                           ;Main.c: 253: if (range > 7)
  6428  0045F8  BE22               	btfsc	Set_D1_RGB@range+1,7,c
  6429  0045FA  D00B               	goto	l9730
  6430  0045FC  5022               	movf	Set_D1_RGB@range+1,w,c
  6431  0045FE  E104               	bnz	u8490
  6432  004600  0E08               	movlw	8
  6433  004602  5C21               	subwf	Set_D1_RGB@range,w,c
  6434  004604  A0D8               	btfss	status,0,c
  6435  004606  D005               	goto	l9730
  6436  004608                     u8490:
  6437                           
  6438                           ;Main.c: 254: range = 7;
  6439  004608  0E00               	movlw	0
  6440  00460A  6E22               	movwf	Set_D1_RGB@range+1,c
  6441  00460C  0E07               	movlw	7
  6442  00460E  6E21               	movwf	Set_D1_RGB@range,c
  6443  004610  D000               	goto	l9730
  6444  004612                     l9730:
  6445                           
  6446                           ;Main.c: 255: PORTD = (PORTD & 0x8F) | (range<<4);
  6447  004612  C021  F01F         	movff	Set_D1_RGB@range,??_Set_D1_RGB
  6448  004616  3A1F               	swapf	??_Set_D1_RGB,f,c
  6449  004618  0EF0               	movlw	240
  6450  00461A  161F               	andwf	??_Set_D1_RGB,f,c
  6451  00461C  5083               	movf	3971,w,c	;volatile
  6452  00461E  0B8F               	andlw	143
  6453  004620  101F               	iorwf	??_Set_D1_RGB,w,c
  6454  004622  6E83               	movwf	3971,c	;volatile
  6455  004624  0012               	return		;funcret
  6456  004626                     __end_of_Set_D1_RGB:
  6457                           	opt stack 0
  6458                           tblptru	equ	0xFF8
  6459                           tblptrh	equ	0xFF7
  6460                           tblptrl	equ	0xFF6
  6461                           tablat	equ	0xFF5
  6462                           prodh	equ	0xFF4
  6463                           prodl	equ	0xFF3
  6464                           intcon2	equ	0xFF1
  6465                           intcon3	equ	0xFF0
  6466                           postinc0	equ	0xFEE
  6467                           wreg	equ	0xFE8
  6468                           postdec1	equ	0xFE5
  6469                           plusw1	equ	0xFE3
  6470                           fsr1l	equ	0xFE1
  6471                           postinc2	equ	0xFDE
  6472                           plusw2	equ	0xFDB
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _Read_Volt *****************
  6478 ;; Defined at:
  6479 ;;		line 156 in file "utils.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  ADC_Channel     1    wreg     unsigned char 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  ADC_Channel     1   66[COMRAM] unsigned char 
  6484 ;;  volt            3   63[COMRAM] float 
  6485 ;;  nStep           2   67[COMRAM] int 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  3   60[COMRAM] float 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6495 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;Total ram usage:        9 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    5
  6502 ;; This function calls:
  6503 ;;		___awtoft
  6504 ;;		___ftdiv
  6505 ;;		___wmul
  6506 ;;		_get_full_ADC
  6507 ;; This function is called by:
  6508 ;;		_main
  6509 ;;		_Setup_Fan_Temp
  6510 ;;		_Do_Setup_Time
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text17
  6515  00424A                     __ptext17:
  6516                           	opt stack 0
  6517  00424A                     _Read_Volt:
  6518                           	opt stack 24
  6519                           
  6520                           ;incstack = 0
  6521                           ;Read_Volt@ADC_Channel stored from wreg
  6522  00424A  6E43               	movwf	Read_Volt@ADC_Channel,c
  6523                           
  6524                           ;utils.c: 158: ADCON0 = ADC_Channel * 4 + 1;
  6525  00424C  5043               	movf	Read_Volt@ADC_Channel,w,c
  6526  00424E  0D04               	mullw	4
  6527  004250  28F3               	incf	prodl,w,c
  6528  004252  6EC2               	movwf	4034,c	;volatile
  6529                           
  6530                           ;utils.c: 159: int nStep = get_full_ADC();
  6531  004254  ECFD  F024         	call	_get_full_ADC	;wreg free
  6532  004258  C011  F044         	movff	?_get_full_ADC,Read_Volt@nStep
  6533  00425C  C012  F045         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  6534                           
  6535                           ;utils.c: 160: float volt = nStep * 5 /1024.0;
  6536  004260  C044  F011         	movff	Read_Volt@nStep,___wmul@multiplier
  6537  004264  C045  F012         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  6538  004268  0E00               	movlw	0
  6539  00426A  6E14               	movwf	___wmul@multiplicand+1,c
  6540  00426C  0E05               	movlw	5
  6541  00426E  6E13               	movwf	___wmul@multiplicand,c
  6542  004270  ECE9  F024         	call	___wmul	;wreg free
  6543  004274  C011  F019         	movff	?___wmul,___awtoft@c
  6544  004278  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  6545  00427C  ECF7  F023         	call	___awtoft	;wreg free
  6546  004280  C019  F02E         	movff	?___awtoft,___ftdiv@f1
  6547  004284  C01A  F02F         	movff	?___awtoft+1,___ftdiv@f1+1
  6548  004288  C01B  F030         	movff	?___awtoft+2,___ftdiv@f1+2
  6549  00428C  0E00               	movlw	0
  6550  00428E  6E31               	movwf	___ftdiv@f2,c
  6551  004290  0E80               	movlw	128
  6552  004292  6E32               	movwf	___ftdiv@f2+1,c
  6553  004294  0E44               	movlw	68
  6554  004296  6E33               	movwf	___ftdiv@f2+2,c
  6555  004298  EC4E  F01B         	call	___ftdiv	;wreg free
  6556  00429C  C02E  F040         	movff	?___ftdiv,Read_Volt@volt
  6557  0042A0  C02F  F041         	movff	?___ftdiv+1,Read_Volt@volt+1
  6558  0042A4  C030  F042         	movff	?___ftdiv+2,Read_Volt@volt+2
  6559                           
  6560                           ;utils.c: 161: return (volt);
  6561  0042A8  C040  F03D         	movff	Read_Volt@volt,?_Read_Volt
  6562  0042AC  C041  F03E         	movff	Read_Volt@volt+1,?_Read_Volt+1
  6563  0042B0  C042  F03F         	movff	Read_Volt@volt+2,?_Read_Volt+2
  6564  0042B4  D000               	goto	l490
  6565  0042B6                     l490:
  6566  0042B6  0012               	return		;funcret
  6567  0042B8                     __end_of_Read_Volt:
  6568                           	opt stack 0
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon2	equ	0xFF1
  6576                           intcon3	equ	0xFF0
  6577                           postinc0	equ	0xFEE
  6578                           wreg	equ	0xFE8
  6579                           postdec1	equ	0xFE5
  6580                           plusw1	equ	0xFE3
  6581                           fsr1l	equ	0xFE1
  6582                           postinc2	equ	0xFDE
  6583                           plusw2	equ	0xFDB
  6584                           fsr2h	equ	0xFDA
  6585                           fsr2l	equ	0xFD9
  6586                           status	equ	0xFD8
  6587                           
  6588 ;; *************** function _get_full_ADC *****************
  6589 ;; Defined at:
  6590 ;;		line 164 in file "utils.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;  result          2   20[COMRAM] unsigned int 
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  2   16[COMRAM] unsigned int 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;Total ram usage:        6 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    3
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_Read_Volt
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text18
  6619  0049FA                     __ptext18:
  6620                           	opt stack 0
  6621  0049FA                     _get_full_ADC:
  6622                           	opt stack 25
  6623                           
  6624                           ;utils.c: 166: unsigned int result;
  6625                           ;utils.c: 167: ADCON0bits.GO=1;
  6626                           
  6627                           ;incstack = 0
  6628  0049FA  82C2               	bsf	4034,1,c	;volatile
  6629                           
  6630                           ;utils.c: 168: while(ADCON0bits.DONE==1);
  6631  0049FC  D000               	goto	l493
  6632  0049FE                     l493:
  6633  0049FE  B2C2               	btfsc	4034,1,c	;volatile
  6634  004A00  D7FE               	goto	l493
  6635                           
  6636                           ;utils.c: 169: result = (ADRESH * 0x100) + ADRESL;
  6637  004A02  50C4               	movf	4036,w,c	;volatile
  6638  004A04  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  6639  004A06  6A13               	clrf	??_get_full_ADC& (0+255),c
  6640  004A08  50C3               	movf	4035,w,c	;volatile
  6641  004A0A  2413               	addwf	??_get_full_ADC,w,c
  6642  004A0C  6E15               	movwf	get_full_ADC@result,c
  6643  004A0E  0E00               	movlw	0
  6644  004A10  2014               	addwfc	??_get_full_ADC+1,w,c
  6645  004A12  6E16               	movwf	get_full_ADC@result+1,c
  6646                           
  6647                           ;utils.c: 171: return result;
  6648  004A14  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  6649  004A18  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  6650  004A1C  D000               	goto	l496
  6651  004A1E                     l496:
  6652  004A1E  0012               	return		;funcret
  6653  004A20                     __end_of_get_full_ADC:
  6654                           	opt stack 0
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           intcon2	equ	0xFF1
  6662                           intcon3	equ	0xFF0
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           postdec1	equ	0xFE5
  6666                           plusw1	equ	0xFE3
  6667                           fsr1l	equ	0xFE1
  6668                           postinc2	equ	0xFDE
  6669                           plusw2	equ	0xFDB
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function ___awtoft *****************
  6675 ;; Defined at:
  6676 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  c               2   24[COMRAM] int 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  sign            1   27[COMRAM] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  3   24[COMRAM] float 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6690 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;Total ram usage:        4 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    4
  6697 ;; This function calls:
  6698 ;;		___ftpack
  6699 ;; This function is called by:
  6700 ;;		_Read_Volt
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           	psect	text19
  6705  0047EE                     __ptext19:
  6706                           	opt stack 0
  6707  0047EE                     ___awtoft:
  6708                           	opt stack 24
  6709                           
  6710                           ;incstack = 0
  6711  0047EE  0E00               	movlw	0
  6712  0047F0  6E1C               	movwf	___awtoft@sign,c
  6713  0047F2  AE1A               	btfss	___awtoft@c+1,7,c
  6714  0047F4  D007               	goto	l9602
  6715  0047F6  6C19               	negf	___awtoft@c,c
  6716  0047F8  1E1A               	comf	___awtoft@c+1,f,c
  6717  0047FA  B0D8               	btfsc	status,0,c
  6718  0047FC  2A1A               	incf	___awtoft@c+1,f,c
  6719  0047FE  0E01               	movlw	1
  6720  004800  6E1C               	movwf	___awtoft@sign,c
  6721  004802  D000               	goto	l9602
  6722  004804                     l9602:
  6723  004804  C019  F011         	movff	___awtoft@c,___ftpack@arg
  6724  004808  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  6725  00480C  6A13               	clrf	___ftpack@arg+2,c
  6726  00480E  0E8E               	movlw	142
  6727  004810  6E14               	movwf	___ftpack@exp,c
  6728  004812  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  6729  004816  EC2D  F01C         	call	___ftpack	;wreg free
  6730  00481A  C011  F019         	movff	?___ftpack,?___awtoft
  6731  00481E  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  6732  004822  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  6733  004826  D000               	goto	l1722
  6734  004828                     l1722:
  6735  004828  0012               	return		;funcret
  6736  00482A                     __end_of___awtoft:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodh	equ	0xFF4
  6743                           prodl	equ	0xFF3
  6744                           intcon2	equ	0xFF1
  6745                           intcon3	equ	0xFF0
  6746                           postinc0	equ	0xFEE
  6747                           wreg	equ	0xFE8
  6748                           postdec1	equ	0xFE5
  6749                           plusw1	equ	0xFE3
  6750                           fsr1l	equ	0xFE1
  6751                           postinc2	equ	0xFDE
  6752                           plusw2	equ	0xFDB
  6753                           fsr2h	equ	0xFDA
  6754                           fsr2l	equ	0xFD9
  6755                           status	equ	0xFD8
  6756                           
  6757 ;; *************** function _Monitor_Fan *****************
  6758 ;; Defined at:
  6759 ;;		line 36 in file "Fan_Support.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;		None               void
  6766 ;; Registers used:
  6767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;Total ram usage:        0 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    8
  6780 ;; This function calls:
  6781 ;;		_Turn_Off_Fan
  6782 ;;		_do_update_pwm
  6783 ;;		_get_duty_cycle
  6784 ;; This function is called by:
  6785 ;;		_main
  6786 ;;		_Do_Setup_Time
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text20
  6791  00453C                     __ptext20:
  6792                           	opt stack 0
  6793  00453C                     _Monitor_Fan:
  6794                           	opt stack 22
  6795                           
  6796                           ;Fan_Support.c: 43: if (FANMODE == 1)
  6797                           
  6798                           ;incstack = 0
  6799  00453C  0100               	movlb	0	; () banked
  6800  00453E  05C2               	decf	_FANMODE& (0+255),w,b
  6801  004540  A4D8               	btfss	status,2,c
  6802  004542  D010               	goto	l9610
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;Fan_Support.c: 44: {
  6806                           ;Fan_Support.c: 45: duty_cycle = get_duty_cycle (tempF, fan_set_temp);
  6807  004544  506A               	movf	_tempF,w,c
  6808  004546  6E11               	movwf	get_duty_cycle@temp,c
  6809  004548  6A12               	clrf	get_duty_cycle@temp+1,c
  6810  00454A  BE11               	btfsc	get_duty_cycle@temp,7,c
  6811  00454C  0612               	decf	get_duty_cycle@temp+1,f,c
  6812  00454E  C0DC  F013         	movff	_fan_set_temp,get_duty_cycle@set_temp
  6813  004552  6A14               	clrf	get_duty_cycle@set_temp+1,c
  6814  004554  EC75  F020         	call	_get_duty_cycle	;wreg free
  6815  004558  5011               	movf	?_get_duty_cycle,w,c
  6816  00455A  6E64               	movwf	_duty_cycle,c
  6817                           
  6818                           ;Fan_Support.c: 46: do_update_pwm(duty_cycle);
  6819  00455C  5064               	movf	_duty_cycle,w,c
  6820  00455E  EC46  F01D         	call	_do_update_pwm
  6821  004562  D000               	goto	l9610
  6822  004564                     l9610:
  6823                           
  6824                           ;Fan_Support.c: 47: }
  6825                           ;Fan_Support.c: 55: if (FAN_TIMER_MODE != 0)
  6826  004564  5060               	movf	_FAN_TIMER_MODE,w,c
  6827  004566  B4D8               	btfsc	status,2,c
  6828  004568  D010               	goto	l47
  6829                           
  6830                           ;Fan_Support.c: 56: {
  6831                           ;Fan_Support.c: 57: if (FAN_TIMER_TIME != 0)
  6832  00456A  0100               	movlb	0	; () banked
  6833  00456C  51C3               	movf	_FAN_TIMER_TIME& (0+255),w,b
  6834  00456E  B4D8               	btfsc	status,2,c
  6835  004570  D003               	goto	l9616
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;Fan_Support.c: 58: FAN_TIMER_TIME--;
  6839  004572  0100               	movlb	0	; () banked
  6840  004574  07C3               	decf	_FAN_TIMER_TIME& (0+255),f,b
  6841  004576  D000               	goto	l9616
  6842  004578                     l9616:
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;Fan_Support.c: 59: if (FAN_TIMER_TIME == 0)
  6846  004578  0100               	movlb	0	; () banked
  6847  00457A  51C3               	movf	_FAN_TIMER_TIME& (0+255),w,b
  6848  00457C  A4D8               	btfss	status,2,c
  6849  00457E  D005               	goto	l47
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;Fan_Support.c: 60: {
  6853                           ;Fan_Support.c: 61: FAN_TIMER_MODE = 0;
  6854  004580  0E00               	movlw	0
  6855  004582  6E60               	movwf	_FAN_TIMER_MODE,c
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;Fan_Support.c: 62: Turn_Off_Fan();
  6859  004584  ECDA  F025         	call	_Turn_Off_Fan	;wreg free
  6860  004588  D000               	goto	l47
  6861  00458A                     l47:
  6862  00458A  0012               	return		;funcret
  6863  00458C                     __end_of_Monitor_Fan:
  6864                           	opt stack 0
  6865                           tblptru	equ	0xFF8
  6866                           tblptrh	equ	0xFF7
  6867                           tblptrl	equ	0xFF6
  6868                           tablat	equ	0xFF5
  6869                           prodh	equ	0xFF4
  6870                           prodl	equ	0xFF3
  6871                           intcon2	equ	0xFF1
  6872                           intcon3	equ	0xFF0
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           postdec1	equ	0xFE5
  6876                           plusw1	equ	0xFE3
  6877                           fsr1l	equ	0xFE1
  6878                           postinc2	equ	0xFDE
  6879                           plusw2	equ	0xFDB
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _get_duty_cycle *****************
  6885 ;; Defined at:
  6886 ;;		line 16 in file "Fan_Support.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  temp            2   16[COMRAM] unsigned int 
  6889 ;;  set_temp        2   18[COMRAM] unsigned int 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  diff_temp       2   22[COMRAM] int 
  6892 ;;  dc              2   24[COMRAM] int 
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  2   16[COMRAM] int 
  6895 ;; Registers used:
  6896 ;;		wreg, status,2, status,0
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6906 ;;Total ram usage:       10 bytes
  6907 ;; Hardware stack levels used:    1
  6908 ;; Hardware stack levels required when called:    3
  6909 ;; This function calls:
  6910 ;;		Nothing
  6911 ;; This function is called by:
  6912 ;;		_Monitor_Fan
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text21
  6917  0040EA                     __ptext21:
  6918                           	opt stack 0
  6919  0040EA                     _get_duty_cycle:
  6920                           	opt stack 26
  6921                           
  6922                           ;Fan_Support.c: 18: int dc;
  6923                           ;Fan_Support.c: 23: if (temp >= set_temp)
  6924                           
  6925                           ;incstack = 0
  6926  0040EA  5013               	movf	get_duty_cycle@set_temp,w,c
  6927  0040EC  5C11               	subwf	get_duty_cycle@temp,w,c
  6928  0040EE  5014               	movf	get_duty_cycle@set_temp+1,w,c
  6929  0040F0  5812               	subwfb	get_duty_cycle@temp+1,w,c
  6930  0040F2  A0D8               	btfss	status,0,c
  6931  0040F4  D029               	goto	l6622
  6932                           
  6933                           ;Fan_Support.c: 24: {
  6934                           ;Fan_Support.c: 25: int diff_temp = (temp-set_temp);
  6935  0040F6  C013  F015         	movff	get_duty_cycle@set_temp,??_get_duty_cycle
  6936  0040FA  C014  F016         	movff	get_duty_cycle@set_temp+1,??_get_duty_cycle+1
  6937  0040FE  1E15               	comf	??_get_duty_cycle,f,c
  6938  004100  1E16               	comf	??_get_duty_cycle+1,f,c
  6939  004102  4A15               	infsnz	??_get_duty_cycle,f,c
  6940  004104  2A16               	incf	??_get_duty_cycle+1,f,c
  6941  004106  5011               	movf	get_duty_cycle@temp,w,c
  6942  004108  2415               	addwf	??_get_duty_cycle,w,c
  6943  00410A  6E17               	movwf	get_duty_cycle@diff_temp,c
  6944  00410C  5012               	movf	get_duty_cycle@temp+1,w,c
  6945  00410E  2016               	addwfc	??_get_duty_cycle+1,w,c
  6946  004110  6E18               	movwf	get_duty_cycle@diff_temp+1,c
  6947                           
  6948                           ;Fan_Support.c: 26: dc = diff_temp * 4;
  6949  004112  C017  F015         	movff	get_duty_cycle@diff_temp,??_get_duty_cycle
  6950  004116  C018  F016         	movff	get_duty_cycle@diff_temp+1,??_get_duty_cycle+1
  6951  00411A  90D8               	bcf	status,0,c
  6952  00411C  3615               	rlcf	??_get_duty_cycle,f,c
  6953  00411E  3616               	rlcf	??_get_duty_cycle+1,f,c
  6954  004120  90D8               	bcf	status,0,c
  6955  004122  3615               	rlcf	??_get_duty_cycle,f,c
  6956  004124  3616               	rlcf	??_get_duty_cycle+1,f,c
  6957  004126  C015  F019         	movff	??_get_duty_cycle,get_duty_cycle@dc
  6958  00412A  C016  F01A         	movff	??_get_duty_cycle+1,get_duty_cycle@dc+1
  6959                           
  6960                           ;Fan_Support.c: 27: if (dc > 100)
  6961  00412E  BE1A               	btfsc	get_duty_cycle@dc+1,7,c
  6962  004130  D00B               	goto	l6622
  6963  004132  501A               	movf	get_duty_cycle@dc+1,w,c
  6964  004134  E104               	bnz	u5300
  6965  004136  0E65               	movlw	101
  6966  004138  5C19               	subwf	get_duty_cycle@dc,w,c
  6967  00413A  A0D8               	btfss	status,0,c
  6968  00413C  D005               	goto	l6622
  6969  00413E                     u5300:
  6970                           
  6971                           ;Fan_Support.c: 28: dc = 100;
  6972  00413E  0E00               	movlw	0
  6973  004140  6E1A               	movwf	get_duty_cycle@dc+1,c
  6974  004142  0E64               	movlw	100
  6975  004144  6E19               	movwf	get_duty_cycle@dc,c
  6976  004146  D000               	goto	l6622
  6977  004148                     l6622:
  6978                           
  6979                           ;Fan_Support.c: 29: }
  6980                           ;Fan_Support.c: 30: if (temp < set_temp)
  6981  004148  5013               	movf	get_duty_cycle@set_temp,w,c
  6982  00414A  5C11               	subwf	get_duty_cycle@temp,w,c
  6983  00414C  5014               	movf	get_duty_cycle@set_temp+1,w,c
  6984  00414E  5812               	subwfb	get_duty_cycle@temp+1,w,c
  6985  004150  B0D8               	btfsc	status,0,c
  6986  004152  D005               	goto	l6626
  6987                           
  6988                           ;Fan_Support.c: 31: dc = 0;
  6989  004154  0E00               	movlw	0
  6990  004156  6E1A               	movwf	get_duty_cycle@dc+1,c
  6991  004158  0E00               	movlw	0
  6992  00415A  6E19               	movwf	get_duty_cycle@dc,c
  6993  00415C  D000               	goto	l6626
  6994  00415E                     l6626:
  6995                           
  6996                           ;Fan_Support.c: 33: return (dc);
  6997  00415E  C019  F011         	movff	get_duty_cycle@dc,?_get_duty_cycle
  6998  004162  C01A  F012         	movff	get_duty_cycle@dc+1,?_get_duty_cycle+1
  6999  004166  D000               	goto	l40
  7000  004168                     l40:
  7001  004168  0012               	return		;funcret
  7002  00416A                     __end_of_get_duty_cycle:
  7003                           	opt stack 0
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           intcon2	equ	0xFF1
  7011                           intcon3	equ	0xFF0
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           postdec1	equ	0xFE5
  7015                           plusw1	equ	0xFE3
  7016                           fsr1l	equ	0xFE1
  7017                           postinc2	equ	0xFDE
  7018                           plusw2	equ	0xFDB
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function _Initialize_Setup_Time_Screen *****************
  7024 ;; Defined at:
  7025 ;;		line 229 in file "Setup_Time.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;		None               void
  7032 ;; Registers used:
  7033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;Total ram usage:        0 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:   10
  7046 ;; This function calls:
  7047 ;;		_LCD_Reset
  7048 ;;		_TFT_GreenTab_Initialize
  7049 ;;		_drawtext
  7050 ;;		_fillRect
  7051 ;;		_fillScreen
  7052 ;;		_strcpy
  7053 ;; This function is called by:
  7054 ;;		_Do_Setup_Time
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text22
  7059  002D98                     __ptext22:
  7060                           	opt stack 0
  7061  002D98                     _Initialize_Setup_Time_Screen:
  7062                           	opt stack 19
  7063                           
  7064                           ;Setup_Time.c: 231: LCD_Reset();
  7065                           
  7066                           ;incstack = 0
  7067  002D98  EC85  F026         	call	_LCD_Reset	;wreg free
  7068                           
  7069                           ;Setup_Time.c: 232: TFT_GreenTab_Initialize();
  7070  002D9C  EC7C  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  7071                           
  7072                           ;Setup_Time.c: 233: fillScreen(0x0000);
  7073  002DA0  0E00               	movlw	0
  7074  002DA2  6E25               	movwf	fillScreen@color+1,c
  7075  002DA4  0E00               	movlw	0
  7076  002DA6  6E24               	movwf	fillScreen@color,c
  7077  002DA8  ECCC  F025         	call	_fillScreen	;wreg free
  7078                           
  7079                           ;Setup_Time.c: 234: if (1 == 0)
  7080  002DAC  D005               	goto	l9792
  7081                           
  7082                           ;Setup_Time.c: 235: {
  7083                           ;Setup_Time.c: 236: Timing_Txt[12] = 'S';
  7084  002DAE  0E53               	movlw	83
  7085  002DB0  0101               	movlb	1	; () banked
  7086  002DB2  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  7087                           
  7088                           ;Setup_Time.c: 237: Timing_Txt[13] = 'P';
  7089  002DB4  0E50               	movlw	80
  7090  002DB6  D004               	goto	L5
  7091  002DB8                     l9792:
  7092                           
  7093                           ;Setup_Time.c: 239: else
  7094                           ;Setup_Time.c: 240: {
  7095                           ;Setup_Time.c: 241: Timing_Txt[12] = 'F';
  7096  002DB8  0E46               	movlw	70
  7097  002DBA  0101               	movlb	1	; () banked
  7098  002DBC  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  7099                           
  7100                           ;Setup_Time.c: 242: Timing_Txt[13] = 'A';
  7101  002DBE  0E41               	movlw	65
  7102  002DC0                     L5:
  7103  002DC0  0101               	movlb	1	; () banked
  7104  002DC2  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  7105                           
  7106                           ; BSR set to: 1
  7107                           ;Setup_Time.c: 243: }
  7108                           ;Setup_Time.c: 244: Timing_Txt[14] = 24/10 + '0';
  7109  002DC4  0E32               	movlw	50
  7110  002DC6  0101               	movlb	1	; () banked
  7111  002DC8  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  7112                           
  7113                           ;Setup_Time.c: 245: Timing_Txt[15] = 24%10 + '0';
  7114  002DCA  0E34               	movlw	52
  7115  002DCC  0101               	movlb	1	; () banked
  7116  002DCE  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  7117                           
  7118                           ;Setup_Time.c: 246: Timing_Txt[17] = 3%10 + '0';
  7119  002DD0  0E33               	movlw	51
  7120  002DD2  0101               	movlb	1	; () banked
  7121  002DD4  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  7122                           
  7123                           ;Setup_Time.c: 247: Timing_Txt[19] = 13/10 + '0';
  7124  002DD6  0E31               	movlw	49
  7125  002DD8  0101               	movlb	1	; () banked
  7126  002DDA  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  7127                           
  7128                           ;Setup_Time.c: 248: Timing_Txt[20] = 13%10 + '0';
  7129  002DDC  0E33               	movlw	51
  7130  002DDE  0101               	movlb	1	; () banked
  7131  002DE0  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  7132                           
  7133                           ; BSR set to: 1
  7134                           ;Setup_Time.c: 250: if (SYSTEM_ON == 1)
  7135  002DE2  0462               	decf	_SYSTEM_ON,w,c
  7136  002DE4  A4D8               	btfss	status,2,c
  7137  002DE6  D076               	goto	l1301
  7138                           
  7139                           ; BSR set to: 1
  7140                           ;Setup_Time.c: 251: {
  7141                           ;Setup_Time.c: 252: drawtext(1 , 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  7142  002DE8  0E01               	movlw	1
  7143  002DEA  6E39               	movwf	drawtext@y,c
  7144  002DEC  0E3C               	movlw	low _Timing_Txt
  7145  002DEE  6E3A               	movwf	drawtext@_text,c
  7146  002DF0  0E01               	movlw	high _Timing_Txt
  7147  002DF2  6E3B               	movwf	drawtext@_text+1,c
  7148  002DF4  0EFF               	movlw	255
  7149  002DF6  6E3D               	movwf	drawtext@color+1,c
  7150  002DF8  683C               	setf	drawtext@color,c
  7151  002DFA  0E00               	movlw	0
  7152  002DFC  6E3F               	movwf	drawtext@bg+1,c
  7153  002DFE  0E00               	movlw	0
  7154  002E00  6E3E               	movwf	drawtext@bg,c
  7155  002E02  0E01               	movlw	1
  7156  002E04  6E40               	movwf	drawtext@size,c
  7157  002E06  0E01               	movlw	1
  7158  002E08  ECDD  F01A         	call	_drawtext
  7159                           
  7160                           ;Setup_Time.c: 254: strcpy(txt, "Time Setup\0");
  7161  002E0C  C05E  F011         	movff	_txt,strcpy@to
  7162  002E10  C05F  F012         	movff	_txt+1,strcpy@to+1
  7163  002E14  0E88               	movlw	low STR_44
  7164  002E16  6E13               	movwf	strcpy@from,c
  7165  002E18  0EFF               	movlw	high STR_44
  7166  002E1A  6E14               	movwf	strcpy@from+1,c
  7167  002E1C  EC33  F024         	call	_strcpy	;wreg free
  7168                           
  7169                           ;Setup_Time.c: 255: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  7170  002E20  0E10               	movlw	16
  7171  002E22  6E39               	movwf	drawtext@y,c
  7172  002E24  C05E  F03A         	movff	_txt,drawtext@_text
  7173  002E28  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7174  002E2C  0EF8               	movlw	248
  7175  002E2E  6E3D               	movwf	drawtext@color+1,c
  7176  002E30  0E1F               	movlw	31
  7177  002E32  6E3C               	movwf	drawtext@color,c
  7178  002E34  0E00               	movlw	0
  7179  002E36  6E3F               	movwf	drawtext@bg+1,c
  7180  002E38  0E00               	movlw	0
  7181  002E3A  6E3E               	movwf	drawtext@bg,c
  7182  002E3C  0E02               	movlw	2
  7183  002E3E  6E40               	movwf	drawtext@size,c
  7184  002E40  0E04               	movlw	4
  7185  002E42  ECDD  F01A         	call	_drawtext
  7186                           
  7187                           ;Setup_Time.c: 257: strcpy(txt, "Time");
  7188  002E46  C05E  F011         	movff	_txt,strcpy@to
  7189  002E4A  C05F  F012         	movff	_txt+1,strcpy@to+1
  7190  002E4E  0EC8               	movlw	low (STR_18+6)
  7191  002E50  6E13               	movwf	strcpy@from,c
  7192  002E52  0EFF               	movlw	high (STR_18+6)
  7193  002E54  6E14               	movwf	strcpy@from+1,c
  7194  002E56  EC33  F024         	call	_strcpy	;wreg free
  7195                           
  7196                           ;Setup_Time.c: 258: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  7197  002E5A  0E28               	movlw	40
  7198  002E5C  6E39               	movwf	drawtext@y,c
  7199  002E5E  C05E  F03A         	movff	_txt,drawtext@_text
  7200  002E62  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7201  002E66  0E00               	movlw	0
  7202  002E68  6E3D               	movwf	drawtext@color+1,c
  7203  002E6A  0E1F               	movlw	31
  7204  002E6C  6E3C               	movwf	drawtext@color,c
  7205  002E6E  0E00               	movlw	0
  7206  002E70  6E3F               	movwf	drawtext@bg+1,c
  7207  002E72  0E00               	movlw	0
  7208  002E74  6E3E               	movwf	drawtext@bg,c
  7209  002E76  0E01               	movlw	1
  7210  002E78  6E40               	movwf	drawtext@size,c
  7211  002E7A  0E32               	movlw	50
  7212  002E7C  ECDD  F01A         	call	_drawtext
  7213                           
  7214                           ;Setup_Time.c: 260: fillRect(15-1, 52+16, 25,2,0x07FF);
  7215  002E80  0E44               	movlw	68
  7216  002E82  6E23               	movwf	fillRect@y,c
  7217  002E84  0E19               	movlw	25
  7218  002E86  6E24               	movwf	fillRect@w,c
  7219  002E88  0E02               	movlw	2
  7220  002E8A  6E25               	movwf	fillRect@h,c
  7221  002E8C  0E07               	movlw	7
  7222  002E8E  6E27               	movwf	fillRect@color+1,c
  7223  002E90  6826               	setf	fillRect@color,c
  7224  002E92  0E0E               	movlw	14
  7225  002E94  EC13  F023         	call	_fillRect
  7226                           
  7227                           ;Setup_Time.c: 261: strcpy(txt, "Date");
  7228  002E98  C05E  F011         	movff	_txt,strcpy@to
  7229  002E9C  C05F  F012         	movff	_txt+1,strcpy@to+1
  7230  002EA0  0ED7               	movlw	low STR_16
  7231  002EA2  6E13               	movwf	strcpy@from,c
  7232  002EA4  0EFF               	movlw	high STR_16
  7233  002EA6  6E14               	movwf	strcpy@from+1,c
  7234  002EA8  EC33  F024         	call	_strcpy	;wreg free
  7235                           
  7236                           ;Setup_Time.c: 262: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  7237  002EAC  0E47               	movlw	71
  7238  002EAE  6E39               	movwf	drawtext@y,c
  7239  002EB0  C05E  F03A         	movff	_txt,drawtext@_text
  7240  002EB4  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7241  002EB8  0EF8               	movlw	248
  7242  002EBA  6E3D               	movwf	drawtext@color+1,c
  7243  002EBC  0E00               	movlw	0
  7244  002EBE  6E3C               	movwf	drawtext@color,c
  7245  002EC0  0E00               	movlw	0
  7246  002EC2  6E3F               	movwf	drawtext@bg+1,c
  7247  002EC4  0E00               	movlw	0
  7248  002EC6  6E3E               	movwf	drawtext@bg,c
  7249  002EC8  0E01               	movlw	1
  7250  002ECA  6E40               	movwf	drawtext@size,c
  7251  002ECC  0E32               	movlw	50
  7252  002ECE  ECDD  F01A         	call	_drawtext
  7253  002ED2  D000               	goto	l1301
  7254  002ED4                     l1301:
  7255  002ED4  0012               	return		;funcret
  7256  002ED6                     __end_of_Initialize_Setup_Time_Screen:
  7257                           	opt stack 0
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodh	equ	0xFF4
  7263                           prodl	equ	0xFF3
  7264                           intcon2	equ	0xFF1
  7265                           intcon3	equ	0xFF0
  7266                           postinc0	equ	0xFEE
  7267                           wreg	equ	0xFE8
  7268                           postdec1	equ	0xFE5
  7269                           plusw1	equ	0xFE3
  7270                           fsr1l	equ	0xFE1
  7271                           postinc2	equ	0xFDE
  7272                           plusw2	equ	0xFDB
  7273                           fsr2h	equ	0xFDA
  7274                           fsr2l	equ	0xFD9
  7275                           status	equ	0xFD8
  7276                           
  7277 ;; *************** function _Increase_Time *****************
  7278 ;; Defined at:
  7279 ;;		line 110 in file "Setup_Time.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;		None
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;		None
  7284 ;; Return value:  Size  Location     Type
  7285 ;;		None               void
  7286 ;; Registers used:
  7287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;Total ram usage:        0 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:   11
  7300 ;; This function calls:
  7301 ;;		_Update_Setup_Time_Screen
  7302 ;; This function is called by:
  7303 ;;		_Do_Setup_Time
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           	psect	text23
  7308  003920                     __ptext23:
  7309                           	opt stack 0
  7310  003920                     _Increase_Time:
  7311                           	opt stack 18
  7312                           
  7313                           ;Setup_Time.c: 112: switch (Select_Field)
  7314                           
  7315                           ;incstack = 0
  7316  003920  D042               	goto	l9906
  7317  003922                     l9868:
  7318                           
  7319                           ;Setup_Time.c: 115: setup_hour++;
  7320  003922  0100               	movlb	0	; () banked
  7321  003924  2BD5               	incf	_setup_hour& (0+255),f,b
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;Setup_Time.c: 116: if (setup_hour == 24) setup_hour = 0;
  7325  003926  0E18               	movlw	24
  7326  003928  0100               	movlb	0	; () banked
  7327  00392A  19D5               	xorwf	_setup_hour& (0+255),w,b
  7328  00392C  A4D8               	btfss	status,2,c
  7329  00392E  D050               	goto	l9908
  7330                           
  7331                           ; BSR set to: 0
  7332  003930  0E00               	movlw	0
  7333  003932  0100               	movlb	0	; () banked
  7334  003934  6FD5               	movwf	_setup_hour& (0+255),b
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;Setup_Time.c: 117: break;
  7338  003936  D04C               	goto	l9908
  7339  003938                     l9874:
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;Setup_Time.c: 121: setup_minute++;
  7343  003938  0100               	movlb	0	; () banked
  7344  00393A  2BD6               	incf	_setup_minute& (0+255),f,b
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;Setup_Time.c: 122: if (setup_minute == 60) setup_minute = 0;
  7348  00393C  0E3C               	movlw	60
  7349  00393E  0100               	movlb	0	; () banked
  7350  003940  19D6               	xorwf	_setup_minute& (0+255),w,b
  7351  003942  A4D8               	btfss	status,2,c
  7352  003944  D045               	goto	l9908
  7353                           
  7354                           ; BSR set to: 0
  7355  003946  0E00               	movlw	0
  7356  003948  0100               	movlb	0	; () banked
  7357  00394A  6FD6               	movwf	_setup_minute& (0+255),b
  7358                           
  7359                           ; BSR set to: 0
  7360                           ;Setup_Time.c: 123: break;
  7361  00394C  D041               	goto	l9908
  7362  00394E                     l9880:
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;Setup_Time.c: 127: setup_second++;
  7366  00394E  0100               	movlb	0	; () banked
  7367  003950  2BD8               	incf	_setup_second& (0+255),f,b
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;Setup_Time.c: 128: if (setup_second == 60) setup_second = 0;
  7371  003952  0E3C               	movlw	60
  7372  003954  0100               	movlb	0	; () banked
  7373  003956  19D8               	xorwf	_setup_second& (0+255),w,b
  7374  003958  A4D8               	btfss	status,2,c
  7375  00395A  D03A               	goto	l9908
  7376                           
  7377                           ; BSR set to: 0
  7378  00395C  0E00               	movlw	0
  7379  00395E  0100               	movlb	0	; () banked
  7380  003960  6FD8               	movwf	_setup_second& (0+255),b
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;Setup_Time.c: 129: break;
  7384  003962  D036               	goto	l9908
  7385  003964                     l9886:
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;Setup_Time.c: 133: setup_month++;
  7389  003964  0100               	movlb	0	; () banked
  7390  003966  2BD7               	incf	_setup_month& (0+255),f,b
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;Setup_Time.c: 134: if (setup_month == 13) setup_month = 1;
  7394  003968  0E0D               	movlw	13
  7395  00396A  0100               	movlb	0	; () banked
  7396  00396C  19D7               	xorwf	_setup_month& (0+255),w,b
  7397  00396E  A4D8               	btfss	status,2,c
  7398  003970  D02F               	goto	l9908
  7399                           
  7400                           ; BSR set to: 0
  7401  003972  0E01               	movlw	1
  7402  003974  0100               	movlb	0	; () banked
  7403  003976  6FD7               	movwf	_setup_month& (0+255),b
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;Setup_Time.c: 135: break;
  7407  003978  D02B               	goto	l9908
  7408  00397A                     l9892:
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;Setup_Time.c: 139: setup_day++;
  7412  00397A  0100               	movlb	0	; () banked
  7413  00397C  2BD3               	incf	_setup_day& (0+255),f,b
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;Setup_Time.c: 140: if (setup_day == 32) setup_day = 1;
  7417  00397E  0E20               	movlw	32
  7418  003980  0100               	movlb	0	; () banked
  7419  003982  19D3               	xorwf	_setup_day& (0+255),w,b
  7420  003984  A4D8               	btfss	status,2,c
  7421  003986  D024               	goto	l9908
  7422                           
  7423                           ; BSR set to: 0
  7424  003988  0E01               	movlw	1
  7425  00398A  0100               	movlb	0	; () banked
  7426  00398C  6FD3               	movwf	_setup_day& (0+255),b
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;Setup_Time.c: 141: break;
  7430  00398E  D020               	goto	l9908
  7431  003990                     l9898:
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;Setup_Time.c: 145: setup_year++;
  7435  003990  0100               	movlb	0	; () banked
  7436  003992  2BD9               	incf	_setup_year& (0+255),f,b
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;Setup_Time.c: 146: if (setup_year == 100) setup_year = 0;
  7440  003994  0E64               	movlw	100
  7441  003996  0100               	movlb	0	; () banked
  7442  003998  19D9               	xorwf	_setup_year& (0+255),w,b
  7443  00399A  A4D8               	btfss	status,2,c
  7444  00399C  D019               	goto	l9908
  7445                           
  7446                           ; BSR set to: 0
  7447  00399E  0E00               	movlw	0
  7448  0039A0  0100               	movlb	0	; () banked
  7449  0039A2  6FD9               	movwf	_setup_year& (0+255),b
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;Setup_Time.c: 151: }
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;Setup_Time.c: 150: break;
  7456                           
  7457                           ;Setup_Time.c: 149: default:
  7458                           
  7459                           ; BSR set to: 0
  7460                           ;Setup_Time.c: 147: break;
  7461  0039A4  D015               	goto	l9908
  7462  0039A6                     l9906:
  7463  0039A6  0100               	movlb	0	; () banked
  7464  0039A8  51CB               	movf	_Select_Field& (0+255),w,b
  7465                           
  7466                           ; Switch size 1, requested type "space"
  7467                           ; Number of cases is 6, Range of values is 0 to 5
  7468                           ; switch strategies available:
  7469                           ; Name         Instructions Cycles
  7470                           ; simple_byte           19    10 (average)
  7471                           ;	Chosen strategy is simple_byte
  7472  0039AA  0A00               	xorlw	0	; case 0
  7473  0039AC  B4D8               	btfsc	status,2,c
  7474  0039AE  D7B9               	goto	l9868
  7475  0039B0  0A01               	xorlw	1	; case 1
  7476  0039B2  B4D8               	btfsc	status,2,c
  7477  0039B4  D7C1               	goto	l9874
  7478  0039B6  0A03               	xorlw	3	; case 2
  7479  0039B8  B4D8               	btfsc	status,2,c
  7480  0039BA  D7C9               	goto	l9880
  7481  0039BC  0A01               	xorlw	1	; case 3
  7482  0039BE  B4D8               	btfsc	status,2,c
  7483  0039C0  D7D1               	goto	l9886
  7484  0039C2  0A07               	xorlw	7	; case 4
  7485  0039C4  B4D8               	btfsc	status,2,c
  7486  0039C6  D7D9               	goto	l9892
  7487  0039C8  0A01               	xorlw	1	; case 5
  7488  0039CA  B4D8               	btfsc	status,2,c
  7489  0039CC  D7E1               	goto	l9898
  7490  0039CE  D000               	goto	l9908
  7491  0039D0                     l9908:
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;Setup_Time.c: 152: Update_Setup_Time_Screen();
  7495  0039D0  EC5F  F015         	call	_Update_Setup_Time_Screen	;wreg free
  7496  0039D4  0012               	return		;funcret
  7497  0039D6                     __end_of_Increase_Time:
  7498                           	opt stack 0
  7499                           tblptru	equ	0xFF8
  7500                           tblptrh	equ	0xFF7
  7501                           tblptrl	equ	0xFF6
  7502                           tablat	equ	0xFF5
  7503                           prodh	equ	0xFF4
  7504                           prodl	equ	0xFF3
  7505                           intcon2	equ	0xFF1
  7506                           intcon3	equ	0xFF0
  7507                           postinc0	equ	0xFEE
  7508                           wreg	equ	0xFE8
  7509                           postdec1	equ	0xFE5
  7510                           plusw1	equ	0xFE3
  7511                           fsr1l	equ	0xFE1
  7512                           postinc2	equ	0xFDE
  7513                           plusw2	equ	0xFDB
  7514                           fsr2h	equ	0xFDA
  7515                           fsr2l	equ	0xFD9
  7516                           status	equ	0xFD8
  7517                           
  7518 ;; *************** function _Go_Prev_Field *****************
  7519 ;; Defined at:
  7520 ;;		line 207 in file "Setup_Time.c"
  7521 ;; Parameters:    Size  Location     Type
  7522 ;;		None
  7523 ;; Auto vars:     Size  Location     Type
  7524 ;;		None
  7525 ;; Return value:  Size  Location     Type
  7526 ;;		None               void
  7527 ;; Registers used:
  7528 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;Total ram usage:        0 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; Hardware stack levels required when called:    9
  7541 ;; This function calls:
  7542 ;;		_Update_Setup_Screen_Cursor_Backward
  7543 ;; This function is called by:
  7544 ;;		_Do_Setup_Time
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           	psect	text24
  7549  004B1A                     __ptext24:
  7550                           	opt stack 0
  7551  004B1A                     _Go_Prev_Field:
  7552                           	opt stack 20
  7553                           
  7554                           ;Setup_Time.c: 209: if (Select_Field == 0) Select_Field = 5;
  7555                           
  7556                           ;incstack = 0
  7557  004B1A  0100               	movlb	0	; () banked
  7558  004B1C  51CB               	movf	_Select_Field& (0+255),w,b
  7559  004B1E  A4D8               	btfss	status,2,c
  7560  004B20  D004               	goto	l7202
  7561                           
  7562                           ; BSR set to: 0
  7563  004B22  0E05               	movlw	5
  7564  004B24  0100               	movlb	0	; () banked
  7565  004B26  6FCB               	movwf	_Select_Field& (0+255),b
  7566  004B28  D003               	goto	l7204
  7567  004B2A                     l7202:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;Setup_Time.c: 210: else Select_Field--;
  7571  004B2A  0100               	movlb	0	; () banked
  7572  004B2C  07CB               	decf	_Select_Field& (0+255),f,b
  7573  004B2E  D000               	goto	l7204
  7574  004B30                     l7204:
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;Setup_Time.c: 211: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7578  004B30  0100               	movlb	0	; () banked
  7579  004B32  51CB               	movf	_Select_Field& (0+255),w,b
  7580  004B34  ECC0  F013         	call	_Update_Setup_Screen_Cursor_Backward
  7581  004B38  0012               	return		;funcret
  7582  004B3A                     __end_of_Go_Prev_Field:
  7583                           	opt stack 0
  7584                           tblptru	equ	0xFF8
  7585                           tblptrh	equ	0xFF7
  7586                           tblptrl	equ	0xFF6
  7587                           tablat	equ	0xFF5
  7588                           prodh	equ	0xFF4
  7589                           prodl	equ	0xFF3
  7590                           intcon2	equ	0xFF1
  7591                           intcon3	equ	0xFF0
  7592                           postinc0	equ	0xFEE
  7593                           wreg	equ	0xFE8
  7594                           postdec1	equ	0xFE5
  7595                           plusw1	equ	0xFE3
  7596                           fsr1l	equ	0xFE1
  7597                           postinc2	equ	0xFDE
  7598                           plusw2	equ	0xFDB
  7599                           fsr2h	equ	0xFDA
  7600                           fsr2l	equ	0xFD9
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  7604 ;; Defined at:
  7605 ;;		line 330 in file "Setup_Time.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  field           1    wreg     unsigned char 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  field           1   45[COMRAM] unsigned char 
  7610 ;;  xinc            1   47[COMRAM] unsigned char 
  7611 ;;  yinc            1   46[COMRAM] unsigned char 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;		None               void
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;Total ram usage:        3 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    8
  7628 ;; This function calls:
  7629 ;;		_fillRect
  7630 ;; This function is called by:
  7631 ;;		_Go_Prev_Field
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text25
  7636  002780                     __ptext25:
  7637                           	opt stack 0
  7638  002780                     _Update_Setup_Screen_Cursor_Backward:
  7639                           	opt stack 20
  7640                           
  7641                           ;incstack = 0
  7642                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  7643  002780  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  7644                           
  7645                           ;Setup_Time.c: 332: char xinc = 36;
  7646  002782  0E24               	movlw	36
  7647  002784  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  7648                           
  7649                           ;Setup_Time.c: 333: char yinc = 30;
  7650  002786  0E1E               	movlw	30
  7651  002788  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  7652                           
  7653                           ;Setup_Time.c: 334: switch (field)
  7654  00278A  D0BF               	goto	l6922
  7655  00278C                     l6900:
  7656                           
  7657                           ;Setup_Time.c: 337: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  7658  00278C  0E44               	movlw	68
  7659  00278E  6E23               	movwf	fillRect@y,c
  7660  002790  0E19               	movlw	25
  7661  002792  6E24               	movwf	fillRect@w,c
  7662  002794  0E02               	movlw	2
  7663  002796  6E25               	movwf	fillRect@h,c
  7664  002798  0E00               	movlw	0
  7665  00279A  6E27               	movwf	fillRect@color+1,c
  7666  00279C  0E00               	movlw	0
  7667  00279E  6E26               	movwf	fillRect@color,c
  7668  0027A0  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7669  0027A2  0F0E               	addlw	14
  7670  0027A4  EC13  F023         	call	_fillRect
  7671                           
  7672                           ;Setup_Time.c: 338: fillRect(15-1, 52+16, 25,2,0x07FF);
  7673  0027A8  0E44               	movlw	68
  7674  0027AA  6E23               	movwf	fillRect@y,c
  7675  0027AC  0E19               	movlw	25
  7676  0027AE  6E24               	movwf	fillRect@w,c
  7677  0027B0  0E02               	movlw	2
  7678  0027B2  6E25               	movwf	fillRect@h,c
  7679  0027B4  0E07               	movlw	7
  7680  0027B6  6E27               	movwf	fillRect@color+1,c
  7681  0027B8  6826               	setf	fillRect@color,c
  7682  0027BA  0E0E               	movlw	14
  7683  0027BC  EC13  F023         	call	_fillRect
  7684                           
  7685                           ;Setup_Time.c: 339: break;
  7686  0027C0  D0B8               	goto	l1326
  7687  0027C2                     l6902:
  7688                           
  7689                           ;Setup_Time.c: 342: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  7690  0027C2  0E44               	movlw	68
  7691  0027C4  6E23               	movwf	fillRect@y,c
  7692  0027C6  0E19               	movlw	25
  7693  0027C8  6E24               	movwf	fillRect@w,c
  7694  0027CA  0E02               	movlw	2
  7695  0027CC  6E25               	movwf	fillRect@h,c
  7696  0027CE  0E00               	movlw	0
  7697  0027D0  6E27               	movwf	fillRect@color+1,c
  7698  0027D2  0E00               	movlw	0
  7699  0027D4  6E26               	movwf	fillRect@color,c
  7700  0027D6  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7701  0027D8  0D02               	mullw	2
  7702  0027DA  50F3               	movf	prodl,w,c
  7703  0027DC  0F0E               	addlw	14
  7704  0027DE  EC13  F023         	call	_fillRect
  7705                           
  7706                           ;Setup_Time.c: 343: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  7707  0027E2  0E44               	movlw	68
  7708  0027E4  6E23               	movwf	fillRect@y,c
  7709  0027E6  0E19               	movlw	25
  7710  0027E8  6E24               	movwf	fillRect@w,c
  7711  0027EA  0E02               	movlw	2
  7712  0027EC  6E25               	movwf	fillRect@h,c
  7713  0027EE  0E07               	movlw	7
  7714  0027F0  6E27               	movwf	fillRect@color+1,c
  7715  0027F2  6826               	setf	fillRect@color,c
  7716  0027F4  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7717  0027F6  0F0E               	addlw	14
  7718  0027F8  EC13  F023         	call	_fillRect
  7719                           
  7720                           ;Setup_Time.c: 344: break;
  7721  0027FC  D09A               	goto	l1326
  7722  0027FE                     l6906:
  7723                           
  7724                           ;Setup_Time.c: 347: fillRect(15-1, 52+16, 25,2,0x0000);
  7725  0027FE  0E44               	movlw	68
  7726  002800  6E23               	movwf	fillRect@y,c
  7727  002802  0E19               	movlw	25
  7728  002804  6E24               	movwf	fillRect@w,c
  7729  002806  0E02               	movlw	2
  7730  002808  6E25               	movwf	fillRect@h,c
  7731  00280A  0E00               	movlw	0
  7732  00280C  6E27               	movwf	fillRect@color+1,c
  7733  00280E  0E00               	movlw	0
  7734  002810  6E26               	movwf	fillRect@color,c
  7735  002812  0E0E               	movlw	14
  7736  002814  EC13  F023         	call	_fillRect
  7737                           
  7738                           ;Setup_Time.c: 348: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  7739  002818  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7740  00281A  0F44               	addlw	68
  7741  00281C  6E23               	movwf	fillRect@y,c
  7742  00281E  0E19               	movlw	25
  7743  002820  6E24               	movwf	fillRect@w,c
  7744  002822  0E02               	movlw	2
  7745  002824  6E25               	movwf	fillRect@h,c
  7746  002826  0E00               	movlw	0
  7747  002828  6E27               	movwf	fillRect@color+1,c
  7748  00282A  0E00               	movlw	0
  7749  00282C  6E26               	movwf	fillRect@color,c
  7750  00282E  0E0E               	movlw	14
  7751  002830  EC13  F023         	call	_fillRect
  7752                           
  7753                           ;Setup_Time.c: 349: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  7754  002834  0E44               	movlw	68
  7755  002836  6E23               	movwf	fillRect@y,c
  7756  002838  0E19               	movlw	25
  7757  00283A  6E24               	movwf	fillRect@w,c
  7758  00283C  0E02               	movlw	2
  7759  00283E  6E25               	movwf	fillRect@h,c
  7760  002840  0E07               	movlw	7
  7761  002842  6E27               	movwf	fillRect@color+1,c
  7762  002844  6826               	setf	fillRect@color,c
  7763  002846  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7764  002848  0D02               	mullw	2
  7765  00284A  50F3               	movf	prodl,w,c
  7766  00284C  0F0E               	addlw	14
  7767  00284E  EC13  F023         	call	_fillRect
  7768                           
  7769                           ;Setup_Time.c: 350: break;
  7770  002852  D06F               	goto	l1326
  7771  002854                     l6910:
  7772                           
  7773                           ;Setup_Time.c: 353: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  7774  002854  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7775  002856  0F44               	addlw	68
  7776  002858  6E23               	movwf	fillRect@y,c
  7777  00285A  0E19               	movlw	25
  7778  00285C  6E24               	movwf	fillRect@w,c
  7779  00285E  0E02               	movlw	2
  7780  002860  6E25               	movwf	fillRect@h,c
  7781  002862  0E00               	movlw	0
  7782  002864  6E27               	movwf	fillRect@color+1,c
  7783  002866  0E00               	movlw	0
  7784  002868  6E26               	movwf	fillRect@color,c
  7785  00286A  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7786  00286C  0F0E               	addlw	14
  7787  00286E  EC13  F023         	call	_fillRect
  7788                           
  7789                           ;Setup_Time.c: 354: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  7790  002872  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7791  002874  0F44               	addlw	68
  7792  002876  6E23               	movwf	fillRect@y,c
  7793  002878  0E19               	movlw	25
  7794  00287A  6E24               	movwf	fillRect@w,c
  7795  00287C  0E02               	movlw	2
  7796  00287E  6E25               	movwf	fillRect@h,c
  7797  002880  0E07               	movlw	7
  7798  002882  6E27               	movwf	fillRect@color+1,c
  7799  002884  6826               	setf	fillRect@color,c
  7800  002886  0E0E               	movlw	14
  7801  002888  EC13  F023         	call	_fillRect
  7802                           
  7803                           ;Setup_Time.c: 355: break;
  7804  00288C  D052               	goto	l1326
  7805  00288E                     l6912:
  7806                           
  7807                           ;Setup_Time.c: 358: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  7808  00288E  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7809  002890  0F44               	addlw	68
  7810  002892  6E23               	movwf	fillRect@y,c
  7811  002894  0E19               	movlw	25
  7812  002896  6E24               	movwf	fillRect@w,c
  7813  002898  0E02               	movlw	2
  7814  00289A  6E25               	movwf	fillRect@h,c
  7815  00289C  0E00               	movlw	0
  7816  00289E  6E27               	movwf	fillRect@color+1,c
  7817  0028A0  0E00               	movlw	0
  7818  0028A2  6E26               	movwf	fillRect@color,c
  7819  0028A4  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7820  0028A6  0D02               	mullw	2
  7821  0028A8  50F3               	movf	prodl,w,c
  7822  0028AA  0F0E               	addlw	14
  7823  0028AC  EC13  F023         	call	_fillRect
  7824                           
  7825                           ;Setup_Time.c: 359: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  7826  0028B0  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7827  0028B2  0F44               	addlw	68
  7828  0028B4  6E23               	movwf	fillRect@y,c
  7829  0028B6  0E19               	movlw	25
  7830  0028B8  6E24               	movwf	fillRect@w,c
  7831  0028BA  0E02               	movlw	2
  7832  0028BC  6E25               	movwf	fillRect@h,c
  7833  0028BE  0E07               	movlw	7
  7834  0028C0  6E27               	movwf	fillRect@color+1,c
  7835  0028C2  6826               	setf	fillRect@color,c
  7836  0028C4  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7837  0028C6  0F0E               	addlw	14
  7838  0028C8  EC13  F023         	call	_fillRect
  7839                           
  7840                           ;Setup_Time.c: 360: break;
  7841  0028CC  D032               	goto	l1326
  7842  0028CE                     l6916:
  7843                           
  7844                           ;Setup_Time.c: 363: fillRect(15-1, 52+16, 25,2,0x0000);
  7845  0028CE  0E44               	movlw	68
  7846  0028D0  6E23               	movwf	fillRect@y,c
  7847  0028D2  0E19               	movlw	25
  7848  0028D4  6E24               	movwf	fillRect@w,c
  7849  0028D6  0E02               	movlw	2
  7850  0028D8  6E25               	movwf	fillRect@h,c
  7851  0028DA  0E00               	movlw	0
  7852  0028DC  6E27               	movwf	fillRect@color+1,c
  7853  0028DE  0E00               	movlw	0
  7854  0028E0  6E26               	movwf	fillRect@color,c
  7855  0028E2  0E0E               	movlw	14
  7856  0028E4  EC13  F023         	call	_fillRect
  7857                           
  7858                           ;Setup_Time.c: 364: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  7859  0028E8  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7860  0028EA  0F44               	addlw	68
  7861  0028EC  6E23               	movwf	fillRect@y,c
  7862  0028EE  0E19               	movlw	25
  7863  0028F0  6E24               	movwf	fillRect@w,c
  7864  0028F2  0E02               	movlw	2
  7865  0028F4  6E25               	movwf	fillRect@h,c
  7866  0028F6  0E07               	movlw	7
  7867  0028F8  6E27               	movwf	fillRect@color+1,c
  7868  0028FA  6826               	setf	fillRect@color,c
  7869  0028FC  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7870  0028FE  0D02               	mullw	2
  7871  002900  50F3               	movf	prodl,w,c
  7872  002902  0F0E               	addlw	14
  7873  002904  EC13  F023         	call	_fillRect
  7874                           
  7875                           ;Setup_Time.c: 366: }
  7876                           
  7877                           ;Setup_Time.c: 365: break;
  7878  002908  D014               	goto	l1326
  7879  00290A                     l6922:
  7880  00290A  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  7881                           
  7882                           ; Switch size 1, requested type "space"
  7883                           ; Number of cases is 6, Range of values is 0 to 5
  7884                           ; switch strategies available:
  7885                           ; Name         Instructions Cycles
  7886                           ; simple_byte           19    10 (average)
  7887                           ;	Chosen strategy is simple_byte
  7888  00290C  0A00               	xorlw	0	; case 0
  7889  00290E  B4D8               	btfsc	status,2,c
  7890  002910  D73D               	goto	l6900
  7891  002912  0A01               	xorlw	1	; case 1
  7892  002914  B4D8               	btfsc	status,2,c
  7893  002916  D755               	goto	l6902
  7894  002918  0A03               	xorlw	3	; case 2
  7895  00291A  B4D8               	btfsc	status,2,c
  7896  00291C  D770               	goto	l6906
  7897  00291E  0A01               	xorlw	1	; case 3
  7898  002920  B4D8               	btfsc	status,2,c
  7899  002922  D798               	goto	l6910
  7900  002924  0A07               	xorlw	7	; case 4
  7901  002926  B4D8               	btfsc	status,2,c
  7902  002928  D7B2               	goto	l6912
  7903  00292A  0A01               	xorlw	1	; case 5
  7904  00292C  B4D8               	btfsc	status,2,c
  7905  00292E  D7CF               	goto	l6916
  7906  002930  D000               	goto	l1326
  7907  002932                     l1326:
  7908  002932  0012               	return		;funcret
  7909  002934                     __end_of_Update_Setup_Screen_Cursor_Backward:
  7910                           	opt stack 0
  7911                           tblptru	equ	0xFF8
  7912                           tblptrh	equ	0xFF7
  7913                           tblptrl	equ	0xFF6
  7914                           tablat	equ	0xFF5
  7915                           prodh	equ	0xFF4
  7916                           prodl	equ	0xFF3
  7917                           intcon2	equ	0xFF1
  7918                           intcon3	equ	0xFF0
  7919                           postinc0	equ	0xFEE
  7920                           wreg	equ	0xFE8
  7921                           postdec1	equ	0xFE5
  7922                           plusw1	equ	0xFE3
  7923                           fsr1l	equ	0xFE1
  7924                           postinc2	equ	0xFDE
  7925                           plusw2	equ	0xFDB
  7926                           fsr2h	equ	0xFDA
  7927                           fsr2l	equ	0xFD9
  7928                           status	equ	0xFD8
  7929                           
  7930 ;; *************** function _Go_Next_Field *****************
  7931 ;; Defined at:
  7932 ;;		line 199 in file "Setup_Time.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;		None
  7935 ;; Auto vars:     Size  Location     Type
  7936 ;;		None
  7937 ;; Return value:  Size  Location     Type
  7938 ;;		None               void
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;Total ram usage:        0 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    9
  7953 ;; This function calls:
  7954 ;;		_Update_Setup_Screen_Cursor_Forward
  7955 ;; This function is called by:
  7956 ;;		_Do_Setup_Time
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           	psect	text26
  7961  004B3A                     __ptext26:
  7962                           	opt stack 0
  7963  004B3A                     _Go_Next_Field:
  7964                           	opt stack 20
  7965                           
  7966                           ;Setup_Time.c: 201: Select_Field++;
  7967                           
  7968                           ;incstack = 0
  7969  004B3A  0100               	movlb	0	; () banked
  7970  004B3C  2BCB               	incf	_Select_Field& (0+255),f,b
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;Setup_Time.c: 202: if (Select_Field == 6) Select_Field = 0;
  7974  004B3E  0E06               	movlw	6
  7975  004B40  0100               	movlb	0	; () banked
  7976  004B42  19CB               	xorwf	_Select_Field& (0+255),w,b
  7977  004B44  A4D8               	btfss	status,2,c
  7978  004B46  D004               	goto	l7212
  7979                           
  7980                           ; BSR set to: 0
  7981  004B48  0E00               	movlw	0
  7982  004B4A  0100               	movlb	0	; () banked
  7983  004B4C  6FCB               	movwf	_Select_Field& (0+255),b
  7984  004B4E  D000               	goto	l7212
  7985  004B50                     l7212:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;Setup_Time.c: 203: Update_Setup_Screen_Cursor_Forward(Select_Field);
  7989  004B50  0100               	movlb	0	; () banked
  7990  004B52  51CB               	movf	_Select_Field& (0+255),w,b
  7991  004B54  ECE3  F012         	call	_Update_Setup_Screen_Cursor_Forward
  7992  004B58  0012               	return		;funcret
  7993  004B5A                     __end_of_Go_Next_Field:
  7994                           	opt stack 0
  7995                           tblptru	equ	0xFF8
  7996                           tblptrh	equ	0xFF7
  7997                           tblptrl	equ	0xFF6
  7998                           tablat	equ	0xFF5
  7999                           prodh	equ	0xFF4
  8000                           prodl	equ	0xFF3
  8001                           intcon2	equ	0xFF1
  8002                           intcon3	equ	0xFF0
  8003                           postinc0	equ	0xFEE
  8004                           wreg	equ	0xFE8
  8005                           postdec1	equ	0xFE5
  8006                           plusw1	equ	0xFE3
  8007                           fsr1l	equ	0xFE1
  8008                           postinc2	equ	0xFDE
  8009                           plusw2	equ	0xFDB
  8010                           fsr2h	equ	0xFDA
  8011                           fsr2l	equ	0xFD9
  8012                           status	equ	0xFD8
  8013                           
  8014 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  8015 ;; Defined at:
  8016 ;;		line 290 in file "Setup_Time.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  field           1    wreg     unsigned char 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  field           1   45[COMRAM] unsigned char 
  8021 ;;  xinc            1   47[COMRAM] unsigned char 
  8022 ;;  yinc            1   46[COMRAM] unsigned char 
  8023 ;; Return value:  Size  Location     Type
  8024 ;;		None               void
  8025 ;; Registers used:
  8026 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8033 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;Total ram usage:        3 bytes
  8037 ;; Hardware stack levels used:    1
  8038 ;; Hardware stack levels required when called:    8
  8039 ;; This function calls:
  8040 ;;		_fillRect
  8041 ;; This function is called by:
  8042 ;;		_Go_Next_Field
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           	psect	text27
  8047  0025C6                     __ptext27:
  8048                           	opt stack 0
  8049  0025C6                     _Update_Setup_Screen_Cursor_Forward:
  8050                           	opt stack 20
  8051                           
  8052                           ;incstack = 0
  8053                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  8054  0025C6  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  8055                           
  8056                           ;Setup_Time.c: 292: char xinc = 36;
  8057  0025C8  0E24               	movlw	36
  8058  0025CA  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  8059                           
  8060                           ;Setup_Time.c: 293: char yinc = 30;
  8061  0025CC  0E1E               	movlw	30
  8062  0025CE  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  8063                           
  8064                           ;Setup_Time.c: 294: switch (field)
  8065  0025D0  D0C2               	goto	l6896
  8066  0025D2                     l6874:
  8067                           
  8068                           ;Setup_Time.c: 297: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  8069  0025D2  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8070  0025D4  0F44               	addlw	68
  8071  0025D6  6E23               	movwf	fillRect@y,c
  8072  0025D8  0E19               	movlw	25
  8073  0025DA  6E24               	movwf	fillRect@w,c
  8074  0025DC  0E02               	movlw	2
  8075  0025DE  6E25               	movwf	fillRect@h,c
  8076  0025E0  0E00               	movlw	0
  8077  0025E2  6E27               	movwf	fillRect@color+1,c
  8078  0025E4  0E00               	movlw	0
  8079  0025E6  6E26               	movwf	fillRect@color,c
  8080  0025E8  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8081  0025EA  0D02               	mullw	2
  8082  0025EC  50F3               	movf	prodl,w,c
  8083  0025EE  0F0E               	addlw	14
  8084  0025F0  EC13  F023         	call	_fillRect
  8085                           
  8086                           ;Setup_Time.c: 298: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8087  0025F4  0E44               	movlw	68
  8088  0025F6  6E23               	movwf	fillRect@y,c
  8089  0025F8  0E19               	movlw	25
  8090  0025FA  6E24               	movwf	fillRect@w,c
  8091  0025FC  0E02               	movlw	2
  8092  0025FE  6E25               	movwf	fillRect@h,c
  8093  002600  0E00               	movlw	0
  8094  002602  6E27               	movwf	fillRect@color+1,c
  8095  002604  0E00               	movlw	0
  8096  002606  6E26               	movwf	fillRect@color,c
  8097  002608  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8098  00260A  0D02               	mullw	2
  8099  00260C  50F3               	movf	prodl,w,c
  8100  00260E  0F0E               	addlw	14
  8101  002610  EC13  F023         	call	_fillRect
  8102                           
  8103                           ;Setup_Time.c: 299: fillRect(15-1, 52+16, 25,2,0x07FF);
  8104  002614  0E44               	movlw	68
  8105  002616  6E23               	movwf	fillRect@y,c
  8106  002618  0E19               	movlw	25
  8107  00261A  6E24               	movwf	fillRect@w,c
  8108  00261C  0E02               	movlw	2
  8109  00261E  6E25               	movwf	fillRect@h,c
  8110  002620  0E07               	movlw	7
  8111  002622  6E27               	movwf	fillRect@color+1,c
  8112  002624  6826               	setf	fillRect@color,c
  8113  002626  0E0E               	movlw	14
  8114  002628  EC13  F023         	call	_fillRect
  8115                           
  8116                           ;Setup_Time.c: 300: break;
  8117  00262C  D0A8               	goto	l1315
  8118  00262E                     l6878:
  8119                           
  8120                           ;Setup_Time.c: 303: fillRect(15-1, 52+16, 25,2,0x0000);
  8121  00262E  0E44               	movlw	68
  8122  002630  6E23               	movwf	fillRect@y,c
  8123  002632  0E19               	movlw	25
  8124  002634  6E24               	movwf	fillRect@w,c
  8125  002636  0E02               	movlw	2
  8126  002638  6E25               	movwf	fillRect@h,c
  8127  00263A  0E00               	movlw	0
  8128  00263C  6E27               	movwf	fillRect@color+1,c
  8129  00263E  0E00               	movlw	0
  8130  002640  6E26               	movwf	fillRect@color,c
  8131  002642  0E0E               	movlw	14
  8132  002644  EC13  F023         	call	_fillRect
  8133                           
  8134                           ;Setup_Time.c: 304: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  8135  002648  0E44               	movlw	68
  8136  00264A  6E23               	movwf	fillRect@y,c
  8137  00264C  0E19               	movlw	25
  8138  00264E  6E24               	movwf	fillRect@w,c
  8139  002650  0E02               	movlw	2
  8140  002652  6E25               	movwf	fillRect@h,c
  8141  002654  0E07               	movlw	7
  8142  002656  6E27               	movwf	fillRect@color+1,c
  8143  002658  6826               	setf	fillRect@color,c
  8144  00265A  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8145  00265C  0F0E               	addlw	14
  8146  00265E  EC13  F023         	call	_fillRect
  8147                           
  8148                           ;Setup_Time.c: 305: break;
  8149  002662  D08D               	goto	l1315
  8150  002664                     l6880:
  8151                           
  8152                           ;Setup_Time.c: 309: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  8153  002664  0E44               	movlw	68
  8154  002666  6E23               	movwf	fillRect@y,c
  8155  002668  0E19               	movlw	25
  8156  00266A  6E24               	movwf	fillRect@w,c
  8157  00266C  0E02               	movlw	2
  8158  00266E  6E25               	movwf	fillRect@h,c
  8159  002670  0E00               	movlw	0
  8160  002672  6E27               	movwf	fillRect@color+1,c
  8161  002674  0E00               	movlw	0
  8162  002676  6E26               	movwf	fillRect@color,c
  8163  002678  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8164  00267A  0F0E               	addlw	14
  8165  00267C  EC13  F023         	call	_fillRect
  8166                           
  8167                           ;Setup_Time.c: 310: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  8168  002680  0E44               	movlw	68
  8169  002682  6E23               	movwf	fillRect@y,c
  8170  002684  0E19               	movlw	25
  8171  002686  6E24               	movwf	fillRect@w,c
  8172  002688  0E02               	movlw	2
  8173  00268A  6E25               	movwf	fillRect@h,c
  8174  00268C  0E07               	movlw	7
  8175  00268E  6E27               	movwf	fillRect@color+1,c
  8176  002690  6826               	setf	fillRect@color,c
  8177  002692  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8178  002694  0D02               	mullw	2
  8179  002696  50F3               	movf	prodl,w,c
  8180  002698  0F0E               	addlw	14
  8181  00269A  EC13  F023         	call	_fillRect
  8182                           
  8183                           ;Setup_Time.c: 311: break;
  8184  00269E  D06F               	goto	l1315
  8185  0026A0                     l6884:
  8186                           
  8187                           ;Setup_Time.c: 314: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8188  0026A0  0E44               	movlw	68
  8189  0026A2  6E23               	movwf	fillRect@y,c
  8190  0026A4  0E19               	movlw	25
  8191  0026A6  6E24               	movwf	fillRect@w,c
  8192  0026A8  0E02               	movlw	2
  8193  0026AA  6E25               	movwf	fillRect@h,c
  8194  0026AC  0E00               	movlw	0
  8195  0026AE  6E27               	movwf	fillRect@color+1,c
  8196  0026B0  0E00               	movlw	0
  8197  0026B2  6E26               	movwf	fillRect@color,c
  8198  0026B4  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8199  0026B6  0D02               	mullw	2
  8200  0026B8  50F3               	movf	prodl,w,c
  8201  0026BA  0F0E               	addlw	14
  8202  0026BC  EC13  F023         	call	_fillRect
  8203                           
  8204                           ;Setup_Time.c: 315: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  8205  0026C0  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8206  0026C2  0F44               	addlw	68
  8207  0026C4  6E23               	movwf	fillRect@y,c
  8208  0026C6  0E19               	movlw	25
  8209  0026C8  6E24               	movwf	fillRect@w,c
  8210  0026CA  0E02               	movlw	2
  8211  0026CC  6E25               	movwf	fillRect@h,c
  8212  0026CE  0E07               	movlw	7
  8213  0026D0  6E27               	movwf	fillRect@color+1,c
  8214  0026D2  6826               	setf	fillRect@color,c
  8215  0026D4  0E0E               	movlw	14
  8216  0026D6  EC13  F023         	call	_fillRect
  8217                           
  8218                           ;Setup_Time.c: 316: break;
  8219  0026DA  D051               	goto	l1315
  8220  0026DC                     l6888:
  8221                           
  8222                           ;Setup_Time.c: 319: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  8223  0026DC  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8224  0026DE  0F44               	addlw	68
  8225  0026E0  6E23               	movwf	fillRect@y,c
  8226  0026E2  0E19               	movlw	25
  8227  0026E4  6E24               	movwf	fillRect@w,c
  8228  0026E6  0E02               	movlw	2
  8229  0026E8  6E25               	movwf	fillRect@h,c
  8230  0026EA  0E00               	movlw	0
  8231  0026EC  6E27               	movwf	fillRect@color+1,c
  8232  0026EE  0E00               	movlw	0
  8233  0026F0  6E26               	movwf	fillRect@color,c
  8234  0026F2  0E0E               	movlw	14
  8235  0026F4  EC13  F023         	call	_fillRect
  8236                           
  8237                           ;Setup_Time.c: 320: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  8238  0026F8  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8239  0026FA  0F44               	addlw	68
  8240  0026FC  6E23               	movwf	fillRect@y,c
  8241  0026FE  0E19               	movlw	25
  8242  002700  6E24               	movwf	fillRect@w,c
  8243  002702  0E02               	movlw	2
  8244  002704  6E25               	movwf	fillRect@h,c
  8245  002706  0E07               	movlw	7
  8246  002708  6E27               	movwf	fillRect@color+1,c
  8247  00270A  6826               	setf	fillRect@color,c
  8248  00270C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8249  00270E  0F0E               	addlw	14
  8250  002710  EC13  F023         	call	_fillRect
  8251                           
  8252                           ;Setup_Time.c: 321: break;
  8253  002714  D034               	goto	l1315
  8254  002716                     l6890:
  8255                           
  8256                           ;Setup_Time.c: 324: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  8257  002716  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8258  002718  0F44               	addlw	68
  8259  00271A  6E23               	movwf	fillRect@y,c
  8260  00271C  0E19               	movlw	25
  8261  00271E  6E24               	movwf	fillRect@w,c
  8262  002720  0E02               	movlw	2
  8263  002722  6E25               	movwf	fillRect@h,c
  8264  002724  0E00               	movlw	0
  8265  002726  6E27               	movwf	fillRect@color+1,c
  8266  002728  0E00               	movlw	0
  8267  00272A  6E26               	movwf	fillRect@color,c
  8268  00272C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8269  00272E  0F0E               	addlw	14
  8270  002730  EC13  F023         	call	_fillRect
  8271                           
  8272                           ;Setup_Time.c: 325: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  8273  002734  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8274  002736  0F44               	addlw	68
  8275  002738  6E23               	movwf	fillRect@y,c
  8276  00273A  0E19               	movlw	25
  8277  00273C  6E24               	movwf	fillRect@w,c
  8278  00273E  0E02               	movlw	2
  8279  002740  6E25               	movwf	fillRect@h,c
  8280  002742  0E07               	movlw	7
  8281  002744  6E27               	movwf	fillRect@color+1,c
  8282  002746  6826               	setf	fillRect@color,c
  8283  002748  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8284  00274A  0D02               	mullw	2
  8285  00274C  50F3               	movf	prodl,w,c
  8286  00274E  0F0E               	addlw	14
  8287  002750  EC13  F023         	call	_fillRect
  8288                           
  8289                           ;Setup_Time.c: 327: }
  8290                           
  8291                           ;Setup_Time.c: 326: break;
  8292  002754  D014               	goto	l1315
  8293  002756                     l6896:
  8294  002756  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  8295                           
  8296                           ; Switch size 1, requested type "space"
  8297                           ; Number of cases is 6, Range of values is 0 to 5
  8298                           ; switch strategies available:
  8299                           ; Name         Instructions Cycles
  8300                           ; simple_byte           19    10 (average)
  8301                           ;	Chosen strategy is simple_byte
  8302  002758  0A00               	xorlw	0	; case 0
  8303  00275A  B4D8               	btfsc	status,2,c
  8304  00275C  D73A               	goto	l6874
  8305  00275E  0A01               	xorlw	1	; case 1
  8306  002760  B4D8               	btfsc	status,2,c
  8307  002762  D765               	goto	l6878
  8308  002764  0A03               	xorlw	3	; case 2
  8309  002766  B4D8               	btfsc	status,2,c
  8310  002768  D77D               	goto	l6880
  8311  00276A  0A01               	xorlw	1	; case 3
  8312  00276C  B4D8               	btfsc	status,2,c
  8313  00276E  D798               	goto	l6884
  8314  002770  0A07               	xorlw	7	; case 4
  8315  002772  B4D8               	btfsc	status,2,c
  8316  002774  D7B3               	goto	l6888
  8317  002776  0A01               	xorlw	1	; case 5
  8318  002778  B4D8               	btfsc	status,2,c
  8319  00277A  D7CD               	goto	l6890
  8320  00277C  D000               	goto	l1315
  8321  00277E                     l1315:
  8322  00277E  0012               	return		;funcret
  8323  002780                     __end_of_Update_Setup_Screen_Cursor_Forward:
  8324                           	opt stack 0
  8325                           tblptru	equ	0xFF8
  8326                           tblptrh	equ	0xFF7
  8327                           tblptrl	equ	0xFF6
  8328                           tablat	equ	0xFF5
  8329                           prodh	equ	0xFF4
  8330                           prodl	equ	0xFF3
  8331                           intcon2	equ	0xFF1
  8332                           intcon3	equ	0xFF0
  8333                           postinc0	equ	0xFEE
  8334                           wreg	equ	0xFE8
  8335                           postdec1	equ	0xFE5
  8336                           plusw1	equ	0xFE3
  8337                           fsr1l	equ	0xFE1
  8338                           postinc2	equ	0xFDE
  8339                           plusw2	equ	0xFDB
  8340                           fsr2h	equ	0xFDA
  8341                           fsr2l	equ	0xFD9
  8342                           status	equ	0xFD8
  8343                           
  8344 ;; *************** function _Exit_Time_Setup *****************
  8345 ;; Defined at:
  8346 ;;		line 222 in file "Setup_Time.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;		None
  8349 ;; Auto vars:     Size  Location     Type
  8350 ;;		None
  8351 ;; Return value:  Size  Location     Type
  8352 ;;		None               void
  8353 ;; Registers used:
  8354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;Total ram usage:        0 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:   11
  8367 ;; This function calls:
  8368 ;;		_DS3231_Read_Time
  8369 ;;		_Initialize_Screen
  8370 ;; This function is called by:
  8371 ;;		_Do_Setup_Time
  8372 ;; This function uses a non-reentrant model
  8373 ;;
  8374                           
  8375                           	psect	text28
  8376  004D88                     __ptext28:
  8377                           	opt stack 0
  8378  004D88                     _Exit_Time_Setup:
  8379                           	opt stack 18
  8380                           
  8381                           ;Setup_Time.c: 224: DS3231_Read_Time();
  8382                           
  8383                           ;incstack = 0
  8384  004D88  EC5C  F021         	call	_DS3231_Read_Time	;wreg free
  8385                           
  8386                           ;Setup_Time.c: 225: Initialize_Screen();
  8387  004D8C  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  8388                           
  8389                           ;Setup_Time.c: 226: In_Time_Setup = 0;
  8390  004D90  0E00               	movlw	0
  8391  004D92  0100               	movlb	0	; () banked
  8392  004D94  6FC8               	movwf	_In_Time_Setup& (0+255),b
  8393                           
  8394                           ; BSR set to: 0
  8395  004D96  0012               	return		;funcret
  8396  004D98                     __end_of_Exit_Time_Setup:
  8397                           	opt stack 0
  8398                           tblptru	equ	0xFF8
  8399                           tblptrh	equ	0xFF7
  8400                           tblptrl	equ	0xFF6
  8401                           tablat	equ	0xFF5
  8402                           prodh	equ	0xFF4
  8403                           prodl	equ	0xFF3
  8404                           intcon2	equ	0xFF1
  8405                           intcon3	equ	0xFF0
  8406                           postinc0	equ	0xFEE
  8407                           wreg	equ	0xFE8
  8408                           postdec1	equ	0xFE5
  8409                           plusw1	equ	0xFE3
  8410                           fsr1l	equ	0xFE1
  8411                           postinc2	equ	0xFDE
  8412                           plusw2	equ	0xFDB
  8413                           fsr2h	equ	0xFDA
  8414                           fsr2l	equ	0xFD9
  8415                           status	equ	0xFD8
  8416                           
  8417 ;; *************** function _Do_Save_New_Time *****************
  8418 ;; Defined at:
  8419 ;;		line 214 in file "Setup_Time.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;		None
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;		None               void
  8426 ;; Registers used:
  8427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;Total ram usage:        0 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:   11
  8440 ;; This function calls:
  8441 ;;		_DS3231_Read_Time
  8442 ;;		_DS3231_Write_Time
  8443 ;;		_Initialize_Screen
  8444 ;; This function is called by:
  8445 ;;		_Do_Setup_Time
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           	psect	text29
  8450  004CCE                     __ptext29:
  8451                           	opt stack 0
  8452  004CCE                     _Do_Save_New_Time:
  8453                           	opt stack 18
  8454                           
  8455                           ;Setup_Time.c: 216: DS3231_Write_Time();
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;incstack = 0
  8459  004CCE  ECF8  F01D         	call	_DS3231_Write_Time	;wreg free
  8460                           
  8461                           ;Setup_Time.c: 217: DS3231_Read_Time();
  8462  004CD2  EC5C  F021         	call	_DS3231_Read_Time	;wreg free
  8463                           
  8464                           ;Setup_Time.c: 218: Initialize_Screen();
  8465  004CD6  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  8466                           
  8467                           ;Setup_Time.c: 219: In_Time_Setup = 0;
  8468  004CDA  0E00               	movlw	0
  8469  004CDC  0100               	movlb	0	; () banked
  8470  004CDE  6FC8               	movwf	_In_Time_Setup& (0+255),b
  8471                           
  8472                           ; BSR set to: 0
  8473  004CE0  0012               	return		;funcret
  8474  004CE2                     __end_of_Do_Save_New_Time:
  8475                           	opt stack 0
  8476                           tblptru	equ	0xFF8
  8477                           tblptrh	equ	0xFF7
  8478                           tblptrl	equ	0xFF6
  8479                           tablat	equ	0xFF5
  8480                           prodh	equ	0xFF4
  8481                           prodl	equ	0xFF3
  8482                           intcon2	equ	0xFF1
  8483                           intcon3	equ	0xFF0
  8484                           postinc0	equ	0xFEE
  8485                           wreg	equ	0xFE8
  8486                           postdec1	equ	0xFE5
  8487                           plusw1	equ	0xFE3
  8488                           fsr1l	equ	0xFE1
  8489                           postinc2	equ	0xFDE
  8490                           plusw2	equ	0xFDB
  8491                           fsr2h	equ	0xFDA
  8492                           fsr2l	equ	0xFD9
  8493                           status	equ	0xFD8
  8494                           
  8495 ;; *************** function _Initialize_Screen *****************
  8496 ;; Defined at:
  8497 ;;		line 41 in file "Main_Screen.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;		None
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;		None
  8502 ;; Return value:  Size  Location     Type
  8503 ;;		None               void
  8504 ;; Registers used:
  8505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;Total ram usage:        0 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:   10
  8518 ;; This function calls:
  8519 ;;		_LCD_Reset
  8520 ;;		_TFT_GreenTab_Initialize
  8521 ;;		_drawtext
  8522 ;;		_fillScreen
  8523 ;;		_strcpy
  8524 ;; This function is called by:
  8525 ;;		_main
  8526 ;;		_Do_Save_New_Fan_Temp
  8527 ;;		_Do_Save_New_Time
  8528 ;;		_Exit_Time_Setup
  8529 ;;		_Exit_Setup_Fan_Temp
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text30
  8534  00173E                     __ptext30:
  8535                           	opt stack 0
  8536  00173E                     _Initialize_Screen:
  8537                           	opt stack 18
  8538                           
  8539                           ;Main_Screen.c: 43: LCD_Reset();
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;incstack = 0
  8543  00173E  EC85  F026         	call	_LCD_Reset	;wreg free
  8544                           
  8545                           ;Main_Screen.c: 44: TFT_GreenTab_Initialize();
  8546  001742  EC7C  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  8547                           
  8548                           ;Main_Screen.c: 45: fillScreen(0x0000);
  8549  001746  0E00               	movlw	0
  8550  001748  6E25               	movwf	fillScreen@color+1,c
  8551  00174A  0E00               	movlw	0
  8552  00174C  6E24               	movwf	fillScreen@color,c
  8553  00174E  ECCC  F025         	call	_fillScreen	;wreg free
  8554                           
  8555                           ;Main_Screen.c: 46: if (1 == 0)
  8556  001752  D005               	goto	l9532
  8557                           
  8558                           ;Main_Screen.c: 47: {
  8559                           ;Main_Screen.c: 48: Timing_Txt[12] = 'S';
  8560  001754  0E53               	movlw	83
  8561  001756  0101               	movlb	1	; () banked
  8562  001758  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  8563                           
  8564                           ;Main_Screen.c: 49: Timing_Txt[13] = 'P';
  8565  00175A  0E50               	movlw	80
  8566  00175C  D004               	goto	L6
  8567  00175E                     l9532:
  8568                           
  8569                           ;Main_Screen.c: 51: else
  8570                           ;Main_Screen.c: 52: {
  8571                           ;Main_Screen.c: 53: Timing_Txt[12] = 'F';
  8572  00175E  0E46               	movlw	70
  8573  001760  0101               	movlb	1	; () banked
  8574  001762  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  8575                           
  8576                           ;Main_Screen.c: 54: Timing_Txt[13] = 'A';
  8577  001764  0E41               	movlw	65
  8578  001766                     L6:
  8579  001766  0101               	movlb	1	; () banked
  8580  001768  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  8581                           
  8582                           ; BSR set to: 1
  8583                           ;Main_Screen.c: 55: }
  8584                           ;Main_Screen.c: 56: Timing_Txt[14] = 24/10 + '0';
  8585  00176A  0E32               	movlw	50
  8586  00176C  0101               	movlb	1	; () banked
  8587  00176E  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  8588                           
  8589                           ;Main_Screen.c: 57: Timing_Txt[15] = 24%10 + '0';
  8590  001770  0E34               	movlw	52
  8591  001772  0101               	movlb	1	; () banked
  8592  001774  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  8593                           
  8594                           ;Main_Screen.c: 58: Timing_Txt[17] = 3%10 + '0';
  8595  001776  0E33               	movlw	51
  8596  001778  0101               	movlb	1	; () banked
  8597  00177A  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  8598                           
  8599                           ;Main_Screen.c: 59: Timing_Txt[19] = 13/10 + '0';
  8600  00177C  0E31               	movlw	49
  8601  00177E  0101               	movlb	1	; () banked
  8602  001780  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  8603                           
  8604                           ;Main_Screen.c: 60: Timing_Txt[20] = 13%10 + '0';
  8605  001782  0E33               	movlw	51
  8606  001784  0101               	movlb	1	; () banked
  8607  001786  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  8608                           
  8609                           ; BSR set to: 1
  8610                           ;Main_Screen.c: 62: if (SYSTEM_ON == 1)
  8611  001788  0462               	decf	_SYSTEM_ON,w,c
  8612  00178A  A4D8               	btfss	status,2,c
  8613  00178C  D189               	goto	l9574
  8614                           
  8615                           ; BSR set to: 1
  8616                           ;Main_Screen.c: 63: {
  8617                           ;Main_Screen.c: 64: drawtext(1, 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  8618  00178E  0E01               	movlw	1
  8619  001790  6E39               	movwf	drawtext@y,c
  8620  001792  0E3C               	movlw	low _Timing_Txt
  8621  001794  6E3A               	movwf	drawtext@_text,c
  8622  001796  0E01               	movlw	high _Timing_Txt
  8623  001798  6E3B               	movwf	drawtext@_text+1,c
  8624  00179A  0EFF               	movlw	255
  8625  00179C  6E3D               	movwf	drawtext@color+1,c
  8626  00179E  683C               	setf	drawtext@color,c
  8627  0017A0  0E00               	movlw	0
  8628  0017A2  6E3F               	movwf	drawtext@bg+1,c
  8629  0017A4  0E00               	movlw	0
  8630  0017A6  6E3E               	movwf	drawtext@bg,c
  8631  0017A8  0E01               	movlw	1
  8632  0017AA  6E40               	movwf	drawtext@size,c
  8633  0017AC  0E01               	movlw	1
  8634  0017AE  ECDD  F01A         	call	_drawtext
  8635                           
  8636                           ;Main_Screen.c: 66: strcpy(txt, "Temperature:");
  8637  0017B2  C05E  F011         	movff	_txt,strcpy@to
  8638  0017B6  C05F  F012         	movff	_txt+1,strcpy@to+1
  8639  0017BA  0E7B               	movlw	low STR_12
  8640  0017BC  6E13               	movwf	strcpy@from,c
  8641  0017BE  0EFF               	movlw	high STR_12
  8642  0017C0  6E14               	movwf	strcpy@from+1,c
  8643  0017C2  EC33  F024         	call	_strcpy	;wreg free
  8644                           
  8645                           ;Main_Screen.c: 67: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  8646  0017C6  0E0B               	movlw	11
  8647  0017C8  6E39               	movwf	drawtext@y,c
  8648  0017CA  C05E  F03A         	movff	_txt,drawtext@_text
  8649  0017CE  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8650  0017D2  0EF8               	movlw	248
  8651  0017D4  6E3D               	movwf	drawtext@color+1,c
  8652  0017D6  0E1F               	movlw	31
  8653  0017D8  6E3C               	movwf	drawtext@color,c
  8654  0017DA  0E00               	movlw	0
  8655  0017DC  6E3F               	movwf	drawtext@bg+1,c
  8656  0017DE  0E00               	movlw	0
  8657  0017E0  6E3E               	movwf	drawtext@bg,c
  8658  0017E2  0E01               	movlw	1
  8659  0017E4  6E40               	movwf	drawtext@size,c
  8660  0017E6  0E18               	movlw	24
  8661  0017E8  ECDD  F01A         	call	_drawtext
  8662                           
  8663                           ;Main_Screen.c: 68: strcpy(txt, "C/");
  8664  0017EC  C05E  F011         	movff	_txt,strcpy@to
  8665  0017F0  C05F  F012         	movff	_txt+1,strcpy@to+1
  8666  0017F4  0EF5               	movlw	low STR_13
  8667  0017F6  6E13               	movwf	strcpy@from,c
  8668  0017F8  0EFF               	movlw	high STR_13
  8669  0017FA  6E14               	movwf	strcpy@from+1,c
  8670  0017FC  EC33  F024         	call	_strcpy	;wreg free
  8671                           
  8672                           ;Main_Screen.c: 69: drawtext(38 , 23, txt, 0xFFE0 , 0x0000, 2);
  8673  001800  0E17               	movlw	23
  8674  001802  6E39               	movwf	drawtext@y,c
  8675  001804  C05E  F03A         	movff	_txt,drawtext@_text
  8676  001808  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8677  00180C  0EFF               	movlw	255
  8678  00180E  6E3D               	movwf	drawtext@color+1,c
  8679  001810  0EE0               	movlw	224
  8680  001812  6E3C               	movwf	drawtext@color,c
  8681  001814  0E00               	movlw	0
  8682  001816  6E3F               	movwf	drawtext@bg+1,c
  8683  001818  0E00               	movlw	0
  8684  00181A  6E3E               	movwf	drawtext@bg,c
  8685  00181C  0E02               	movlw	2
  8686  00181E  6E40               	movwf	drawtext@size,c
  8687  001820  0E26               	movlw	38
  8688  001822  ECDD  F01A         	call	_drawtext
  8689                           
  8690                           ;Main_Screen.c: 70: strcpy(txt, "F");
  8691  001826  C05E  F011         	movff	_txt,strcpy@to
  8692  00182A  C05F  F012         	movff	_txt+1,strcpy@to+1
  8693  00182E  0E1E               	movlw	low (STR_35+18)
  8694  001830  6E13               	movwf	strcpy@from,c
  8695  001832  0EFF               	movlw	high (STR_35+18)
  8696  001834  6E14               	movwf	strcpy@from+1,c
  8697  001836  EC33  F024         	call	_strcpy	;wreg free
  8698                           
  8699                           ;Main_Screen.c: 71: drawtext(110 , 23, txt, 0xFFE0 , 0x0000, 2);
  8700  00183A  0E17               	movlw	23
  8701  00183C  6E39               	movwf	drawtext@y,c
  8702  00183E  C05E  F03A         	movff	_txt,drawtext@_text
  8703  001842  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8704  001846  0EFF               	movlw	255
  8705  001848  6E3D               	movwf	drawtext@color+1,c
  8706  00184A  0EE0               	movlw	224
  8707  00184C  6E3C               	movwf	drawtext@color,c
  8708  00184E  0E00               	movlw	0
  8709  001850  6E3F               	movwf	drawtext@bg+1,c
  8710  001852  0E00               	movlw	0
  8711  001854  6E3E               	movwf	drawtext@bg,c
  8712  001856  0E02               	movlw	2
  8713  001858  6E40               	movwf	drawtext@size,c
  8714  00185A  0E6E               	movlw	110
  8715  00185C  ECDD  F01A         	call	_drawtext
  8716                           
  8717                           ;Main_Screen.c: 72: strcpy(txt, "Time");
  8718  001860  C05E  F011         	movff	_txt,strcpy@to
  8719  001864  C05F  F012         	movff	_txt+1,strcpy@to+1
  8720  001868  0EC8               	movlw	low (STR_18+6)
  8721  00186A  6E13               	movwf	strcpy@from,c
  8722  00186C  0EFF               	movlw	high (STR_18+6)
  8723  00186E  6E14               	movwf	strcpy@from+1,c
  8724  001870  EC33  F024         	call	_strcpy	;wreg free
  8725                           
  8726                           ;Main_Screen.c: 73: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8727  001874  0E28               	movlw	40
  8728  001876  6E39               	movwf	drawtext@y,c
  8729  001878  C05E  F03A         	movff	_txt,drawtext@_text
  8730  00187C  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8731  001880  0E00               	movlw	0
  8732  001882  6E3D               	movwf	drawtext@color+1,c
  8733  001884  0E1F               	movlw	31
  8734  001886  6E3C               	movwf	drawtext@color,c
  8735  001888  0E00               	movlw	0
  8736  00188A  6E3F               	movwf	drawtext@bg+1,c
  8737  00188C  0E00               	movlw	0
  8738  00188E  6E3E               	movwf	drawtext@bg,c
  8739  001890  0E01               	movlw	1
  8740  001892  6E40               	movwf	drawtext@size,c
  8741  001894  0E32               	movlw	50
  8742  001896  ECDD  F01A         	call	_drawtext
  8743                           
  8744                           ;Main_Screen.c: 74: strcpy(txt, "Date");
  8745  00189A  C05E  F011         	movff	_txt,strcpy@to
  8746  00189E  C05F  F012         	movff	_txt+1,strcpy@to+1
  8747  0018A2  0ED7               	movlw	low STR_16
  8748  0018A4  6E13               	movwf	strcpy@from,c
  8749  0018A6  0EFF               	movlw	high STR_16
  8750  0018A8  6E14               	movwf	strcpy@from+1,c
  8751  0018AA  EC33  F024         	call	_strcpy	;wreg free
  8752                           
  8753                           ;Main_Screen.c: 75: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  8754  0018AE  0E47               	movlw	71
  8755  0018B0  6E39               	movwf	drawtext@y,c
  8756  0018B2  C05E  F03A         	movff	_txt,drawtext@_text
  8757  0018B6  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8758  0018BA  0EF8               	movlw	248
  8759  0018BC  6E3D               	movwf	drawtext@color+1,c
  8760  0018BE  0E00               	movlw	0
  8761  0018C0  6E3C               	movwf	drawtext@color,c
  8762  0018C2  0E00               	movlw	0
  8763  0018C4  6E3F               	movwf	drawtext@bg+1,c
  8764  0018C6  0E00               	movlw	0
  8765  0018C8  6E3E               	movwf	drawtext@bg,c
  8766  0018CA  0E01               	movlw	1
  8767  0018CC  6E40               	movwf	drawtext@size,c
  8768  0018CE  0E32               	movlw	50
  8769  0018D0  ECDD  F01A         	call	_drawtext
  8770                           
  8771                           ;Main_Screen.c: 76: strcpy(txt, "Timer Mode");
  8772  0018D4  C05E  F011         	movff	_txt,strcpy@to
  8773  0018D8  C05F  F012         	movff	_txt+1,strcpy@to+1
  8774  0018DC  0EB7               	movlw	low STR_17
  8775  0018DE  6E13               	movwf	strcpy@from,c
  8776  0018E0  0EFF               	movlw	high STR_17
  8777  0018E2  6E14               	movwf	strcpy@from+1,c
  8778  0018E4  EC33  F024         	call	_strcpy	;wreg free
  8779                           
  8780                           ;Main_Screen.c: 77: drawtext(1 , 100 , txt, 0xFFE0, 0x0000, 1);
  8781  0018E8  0E64               	movlw	100
  8782  0018EA  6E39               	movwf	drawtext@y,c
  8783  0018EC  C05E  F03A         	movff	_txt,drawtext@_text
  8784  0018F0  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8785  0018F4  0EFF               	movlw	255
  8786  0018F6  6E3D               	movwf	drawtext@color+1,c
  8787  0018F8  0EE0               	movlw	224
  8788  0018FA  6E3C               	movwf	drawtext@color,c
  8789  0018FC  0E00               	movlw	0
  8790  0018FE  6E3F               	movwf	drawtext@bg+1,c
  8791  001900  0E00               	movlw	0
  8792  001902  6E3E               	movwf	drawtext@bg,c
  8793  001904  0E01               	movlw	1
  8794  001906  6E40               	movwf	drawtext@size,c
  8795  001908  0E01               	movlw	1
  8796  00190A  ECDD  F01A         	call	_drawtext
  8797                           
  8798                           ;Main_Screen.c: 78: strcpy(txt, "Timer Time");
  8799  00190E  C05E  F011         	movff	_txt,strcpy@to
  8800  001912  C05F  F012         	movff	_txt+1,strcpy@to+1
  8801  001916  0EC2               	movlw	low STR_18
  8802  001918  6E13               	movwf	strcpy@from,c
  8803  00191A  0EFF               	movlw	high STR_18
  8804  00191C  6E14               	movwf	strcpy@from+1,c
  8805  00191E  EC33  F024         	call	_strcpy	;wreg free
  8806                           
  8807                           ;Main_Screen.c: 79: drawtext(65 , 100 , txt, 0xFFE0, 0x0000, 1);
  8808  001922  0E64               	movlw	100
  8809  001924  6E39               	movwf	drawtext@y,c
  8810  001926  C05E  F03A         	movff	_txt,drawtext@_text
  8811  00192A  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8812  00192E  0EFF               	movlw	255
  8813  001930  6E3D               	movwf	drawtext@color+1,c
  8814  001932  0EE0               	movlw	224
  8815  001934  6E3C               	movwf	drawtext@color,c
  8816  001936  0E00               	movlw	0
  8817  001938  6E3F               	movwf	drawtext@bg+1,c
  8818  00193A  0E00               	movlw	0
  8819  00193C  6E3E               	movwf	drawtext@bg,c
  8820  00193E  0E01               	movlw	1
  8821  001940  6E40               	movwf	drawtext@size,c
  8822  001942  0E41               	movlw	65
  8823  001944  ECDD  F01A         	call	_drawtext
  8824                           
  8825                           ;Main_Screen.c: 80: strcpy(txt, "FAN SetTemp");
  8826  001948  C05E  F011         	movff	_txt,strcpy@to
  8827  00194C  C05F  F012         	movff	_txt+1,strcpy@to+1
  8828  001950  0EA0               	movlw	low STR_19
  8829  001952  6E13               	movwf	strcpy@from,c
  8830  001954  0EFF               	movlw	high STR_19
  8831  001956  6E14               	movwf	strcpy@from+1,c
  8832  001958  EC33  F024         	call	_strcpy	;wreg free
  8833                           
  8834                           ;Main_Screen.c: 81: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
  8835  00195C  0E78               	movlw	120
  8836  00195E  6E39               	movwf	drawtext@y,c
  8837  001960  C05E  F03A         	movff	_txt,drawtext@_text
  8838  001964  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8839  001968  0E00               	movlw	0
  8840  00196A  6E3D               	movwf	drawtext@color+1,c
  8841  00196C  0E1F               	movlw	31
  8842  00196E  6E3C               	movwf	drawtext@color,c
  8843  001970  0E00               	movlw	0
  8844  001972  6E3F               	movwf	drawtext@bg+1,c
  8845  001974  0E00               	movlw	0
  8846  001976  6E3E               	movwf	drawtext@bg,c
  8847  001978  0E01               	movlw	1
  8848  00197A  6E40               	movwf	drawtext@size,c
  8849  00197C  0E06               	movlw	6
  8850  00197E  ECDD  F01A         	call	_drawtext
  8851                           
  8852                           ;Main_Screen.c: 82: strcpy(txt, "Mode");
  8853  001982  C05E  F011         	movff	_txt,strcpy@to
  8854  001986  C05F  F012         	movff	_txt+1,strcpy@to+1
  8855  00198A  0EBD               	movlw	low (STR_17+6)
  8856  00198C  6E13               	movwf	strcpy@from,c
  8857  00198E  0EFF               	movlw	high (STR_17+6)
  8858  001990  6E14               	movwf	strcpy@from+1,c
  8859  001992  EC33  F024         	call	_strcpy	;wreg free
  8860                           
  8861                           ;Main_Screen.c: 83: drawtext(75, 120, txt, 0x001F , 0x0000, 1);
  8862  001996  0E78               	movlw	120
  8863  001998  6E39               	movwf	drawtext@y,c
  8864  00199A  C05E  F03A         	movff	_txt,drawtext@_text
  8865  00199E  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8866  0019A2  0E00               	movlw	0
  8867  0019A4  6E3D               	movwf	drawtext@color+1,c
  8868  0019A6  0E1F               	movlw	31
  8869  0019A8  6E3C               	movwf	drawtext@color,c
  8870  0019AA  0E00               	movlw	0
  8871  0019AC  6E3F               	movwf	drawtext@bg+1,c
  8872  0019AE  0E00               	movlw	0
  8873  0019B0  6E3E               	movwf	drawtext@bg,c
  8874  0019B2  0E01               	movlw	1
  8875  0019B4  6E40               	movwf	drawtext@size,c
  8876  0019B6  0E4B               	movlw	75
  8877  0019B8  ECDD  F01A         	call	_drawtext
  8878                           
  8879                           ;Main_Screen.c: 84: strcpy(txt, "SW");
  8880  0019BC  C05E  F011         	movff	_txt,strcpy@to
  8881  0019C0  C05F  F012         	movff	_txt+1,strcpy@to+1
  8882  0019C4  0EFB               	movlw	low STR_21
  8883  0019C6  6E13               	movwf	strcpy@from,c
  8884  0019C8  0EFF               	movlw	high STR_21
  8885  0019CA  6E14               	movwf	strcpy@from+1,c
  8886  0019CC  EC33  F024         	call	_strcpy	;wreg free
  8887                           
  8888                           ;Main_Screen.c: 85: drawtext(105, 120, txt, 0x001F , 0x0000, 1);
  8889  0019D0  0E78               	movlw	120
  8890  0019D2  6E39               	movwf	drawtext@y,c
  8891  0019D4  C05E  F03A         	movff	_txt,drawtext@_text
  8892  0019D8  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8893  0019DC  0E00               	movlw	0
  8894  0019DE  6E3D               	movwf	drawtext@color+1,c
  8895  0019E0  0E1F               	movlw	31
  8896  0019E2  6E3C               	movwf	drawtext@color,c
  8897  0019E4  0E00               	movlw	0
  8898  0019E6  6E3F               	movwf	drawtext@bg+1,c
  8899  0019E8  0E00               	movlw	0
  8900  0019EA  6E3E               	movwf	drawtext@bg,c
  8901  0019EC  0E01               	movlw	1
  8902  0019EE  6E40               	movwf	drawtext@size,c
  8903  0019F0  0E69               	movlw	105
  8904  0019F2  ECDD  F01A         	call	_drawtext
  8905                           
  8906                           ;Main_Screen.c: 86: strcpy(txt, "DC");
  8907  0019F6  C05E  F011         	movff	_txt,strcpy@to
  8908  0019FA  C05F  F012         	movff	_txt+1,strcpy@to+1
  8909  0019FE  0EF8               	movlw	low STR_22
  8910  001A00  6E13               	movwf	strcpy@from,c
  8911  001A02  0EFF               	movlw	high STR_22
  8912  001A04  6E14               	movwf	strcpy@from+1,c
  8913  001A06  EC33  F024         	call	_strcpy	;wreg free
  8914                           
  8915                           ;Main_Screen.c: 87: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  8916  001A0A  0E8C               	movlw	140
  8917  001A0C  6E39               	movwf	drawtext@y,c
  8918  001A0E  C05E  F03A         	movff	_txt,drawtext@_text
  8919  001A12  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8920  001A16  0EFF               	movlw	255
  8921  001A18  6E3D               	movwf	drawtext@color+1,c
  8922  001A1A  683C               	setf	drawtext@color,c
  8923  001A1C  0E00               	movlw	0
  8924  001A1E  6E3F               	movwf	drawtext@bg+1,c
  8925  001A20  0E00               	movlw	0
  8926  001A22  6E3E               	movwf	drawtext@bg,c
  8927  001A24  0E01               	movlw	1
  8928  001A26  6E40               	movwf	drawtext@size,c
  8929  001A28  0E0C               	movlw	12
  8930  001A2A  ECDD  F01A         	call	_drawtext
  8931                           
  8932                           ;Main_Screen.c: 88: strcpy(txt, "Volt");
  8933  001A2E  C05E  F011         	movff	_txt,strcpy@to
  8934  001A32  C05F  F012         	movff	_txt+1,strcpy@to+1
  8935  001A36  0EDC               	movlw	low STR_23
  8936  001A38  6E13               	movwf	strcpy@from,c
  8937  001A3A  0EFF               	movlw	high STR_23
  8938  001A3C  6E14               	movwf	strcpy@from+1,c
  8939  001A3E  EC33  F024         	call	_strcpy	;wreg free
  8940                           
  8941                           ;Main_Screen.c: 89: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
  8942  001A42  0E8C               	movlw	140
  8943  001A44  6E39               	movwf	drawtext@y,c
  8944  001A46  C05E  F03A         	movff	_txt,drawtext@_text
  8945  001A4A  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8946  001A4E  0EFF               	movlw	255
  8947  001A50  6E3D               	movwf	drawtext@color+1,c
  8948  001A52  683C               	setf	drawtext@color,c
  8949  001A54  0E00               	movlw	0
  8950  001A56  6E3F               	movwf	drawtext@bg+1,c
  8951  001A58  0E00               	movlw	0
  8952  001A5A  6E3E               	movwf	drawtext@bg,c
  8953  001A5C  0E01               	movlw	1
  8954  001A5E  6E40               	movwf	drawtext@size,c
  8955  001A60  0E32               	movlw	50
  8956  001A62  ECDD  F01A         	call	_drawtext
  8957                           
  8958                           ;Main_Screen.c: 90: strcpy(txt, "RPM");
  8959  001A66  C05E  F011         	movff	_txt,strcpy@to
  8960  001A6A  C05F  F012         	movff	_txt+1,strcpy@to+1
  8961  001A6E  0EF1               	movlw	low STR_24
  8962  001A70  6E13               	movwf	strcpy@from,c
  8963  001A72  0EFF               	movlw	high STR_24
  8964  001A74  6E14               	movwf	strcpy@from+1,c
  8965  001A76  EC33  F024         	call	_strcpy	;wreg free
  8966                           
  8967                           ;Main_Screen.c: 91: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  8968  001A7A  0E8C               	movlw	140
  8969  001A7C  6E39               	movwf	drawtext@y,c
  8970  001A7E  C05E  F03A         	movff	_txt,drawtext@_text
  8971  001A82  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8972  001A86  0EFF               	movlw	255
  8973  001A88  6E3D               	movwf	drawtext@color+1,c
  8974  001A8A  683C               	setf	drawtext@color,c
  8975  001A8C  0E00               	movlw	0
  8976  001A8E  6E3F               	movwf	drawtext@bg+1,c
  8977  001A90  0E00               	movlw	0
  8978  001A92  6E3E               	movwf	drawtext@bg,c
  8979  001A94  0E01               	movlw	1
  8980  001A96  6E40               	movwf	drawtext@size,c
  8981  001A98  0E5F               	movlw	95
  8982  001A9A  ECDD  F01A         	call	_drawtext
  8983                           
  8984                           ;Main_Screen.c: 92: }
  8985  001A9E  D01E               	goto	l962
  8986  001AA0                     l9574:
  8987                           
  8988                           ;Main_Screen.c: 93: else
  8989                           ;Main_Screen.c: 94: {
  8990                           ;Main_Screen.c: 95: strcpy(txt, "SYSTEM OFF");
  8991  001AA0  C05E  F011         	movff	_txt,strcpy@to
  8992  001AA4  C05F  F012         	movff	_txt+1,strcpy@to+1
  8993  001AA8  0EAC               	movlw	low STR_25
  8994  001AAA  6E13               	movwf	strcpy@from,c
  8995  001AAC  0EFF               	movlw	high STR_25
  8996  001AAE  6E14               	movwf	strcpy@from+1,c
  8997  001AB0  EC33  F024         	call	_strcpy	;wreg free
  8998                           
  8999                           ;Main_Screen.c: 96: drawtext(5 , 80 , txt, 0xF81F, 0x0000, 2);
  9000  001AB4  0E50               	movlw	80
  9001  001AB6  6E39               	movwf	drawtext@y,c
  9002  001AB8  C05E  F03A         	movff	_txt,drawtext@_text
  9003  001ABC  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  9004  001AC0  0EF8               	movlw	248
  9005  001AC2  6E3D               	movwf	drawtext@color+1,c
  9006  001AC4  0E1F               	movlw	31
  9007  001AC6  6E3C               	movwf	drawtext@color,c
  9008  001AC8  0E00               	movlw	0
  9009  001ACA  6E3F               	movwf	drawtext@bg+1,c
  9010  001ACC  0E00               	movlw	0
  9011  001ACE  6E3E               	movwf	drawtext@bg,c
  9012  001AD0  0E02               	movlw	2
  9013  001AD2  6E40               	movwf	drawtext@size,c
  9014  001AD4  0E05               	movlw	5
  9015  001AD6  ECDD  F01A         	call	_drawtext
  9016  001ADA  D000               	goto	l962
  9017  001ADC                     l962:
  9018  001ADC  0012               	return		;funcret
  9019  001ADE                     __end_of_Initialize_Screen:
  9020                           	opt stack 0
  9021                           tblptru	equ	0xFF8
  9022                           tblptrh	equ	0xFF7
  9023                           tblptrl	equ	0xFF6
  9024                           tablat	equ	0xFF5
  9025                           prodh	equ	0xFF4
  9026                           prodl	equ	0xFF3
  9027                           intcon2	equ	0xFF1
  9028                           intcon3	equ	0xFF0
  9029                           postinc0	equ	0xFEE
  9030                           wreg	equ	0xFE8
  9031                           postdec1	equ	0xFE5
  9032                           plusw1	equ	0xFE3
  9033                           fsr1l	equ	0xFE1
  9034                           postinc2	equ	0xFDE
  9035                           plusw2	equ	0xFDB
  9036                           fsr2h	equ	0xFDA
  9037                           fsr2l	equ	0xFD9
  9038                           status	equ	0xFD8
  9039                           
  9040 ;; *************** function _strcpy *****************
  9041 ;; Defined at:
  9042 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;  to              2   16[COMRAM] PTR unsigned char 
  9045 ;;		 -> NULL(0), Fan_SW_Txt(4), Fan_Mode_Txt(5), Fan_Timer_Mode_Txt(4), 
  9046 ;;  from            2   18[COMRAM] PTR const unsigned char 
  9047 ;;		 -> STR_46(5), STR_45(5), STR_44(12), STR_39(15), 
  9048 ;;		 -> STR_38(12), STR_33(4), STR_32(4), STR_31(5), 
  9049 ;;		 -> STR_30(5), STR_29(4), STR_28(4), STR_27(4), 
  9050 ;;		 -> STR_26(4), STR_25(11), STR_24(4), STR_23(5), 
  9051 ;;		 -> STR_22(3), STR_21(3), STR_20(5), STR_19(12), 
  9052 ;;		 -> STR_18(11), STR_17(11), STR_16(5), STR_15(5), 
  9053 ;;		 -> STR_14(2), STR_13(3), STR_12(13), 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  cp              2   20[COMRAM] PTR unsigned char 
  9056 ;;		 -> NULL(0), Fan_SW_Txt(4), Fan_Mode_Txt(5), Fan_Timer_Mode_Txt(4), 
  9057 ;; Return value:  Size  Location     Type
  9058 ;;                  2   16[COMRAM] PTR unsigned char 
  9059 ;; Registers used:
  9060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9061 ;; Tracked objects:
  9062 ;;		On entry : 0/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9070 ;;Total ram usage:        6 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    3
  9073 ;; This function calls:
  9074 ;;		Nothing
  9075 ;; This function is called by:
  9076 ;;		_Initialize_Screen
  9077 ;;		_Update_Screen
  9078 ;;		_Initialize_Setup_Fan_Screen
  9079 ;;		_Initialize_Setup_Time_Screen
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           	psect	text31
  9084  004866                     __ptext31:
  9085                           	opt stack 0
  9086  004866                     _strcpy:
  9087                           	opt stack 26
  9088                           
  9089                           ;incstack = 0
  9090  004866  C011  F015         	movff	strcpy@to,strcpy@cp
  9091  00486A  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  9092  00486E  D005               	goto	l6560
  9093  004870                     l6558:
  9094  004870  4A15               	infsnz	strcpy@cp,f,c
  9095  004872  2A16               	incf	strcpy@cp+1,f,c
  9096  004874  4A13               	infsnz	strcpy@from,f,c
  9097  004876  2A14               	incf	strcpy@from+1,f,c
  9098  004878  D000               	goto	l6560
  9099  00487A                     l6560:
  9100  00487A  C013  FFF6         	movff	strcpy@from,tblptrl
  9101  00487E  C014  FFF7         	movff	strcpy@from+1,tblptrh
  9102  004882                     	if	0	;tblptru may be non-zero
  9103  004882                     	endif
  9104  004882                     	if	0	;tblptru may be non-zero
  9105  004882                     	endif
  9106  004882  C015  FFD9         	movff	strcpy@cp,fsr2l
  9107  004886  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  9108  00488A  0008               	tblrd		*
  9109  00488C  CFF5 FFDF          	movff	tablat,indf2
  9110  004890  50DF               	movf	indf2,w,c
  9111  004892  A4D8               	btfss	status,2,c
  9112  004894  D7ED               	goto	l6558
  9113                           
  9114                           ;	Return value of _strcpy is never used
  9115  004896  0012               	return		;funcret
  9116  004898                     __end_of_strcpy:
  9117                           	opt stack 0
  9118                           tblptru	equ	0xFF8
  9119                           tblptrh	equ	0xFF7
  9120                           tblptrl	equ	0xFF6
  9121                           tablat	equ	0xFF5
  9122                           prodh	equ	0xFF4
  9123                           prodl	equ	0xFF3
  9124                           intcon2	equ	0xFF1
  9125                           intcon3	equ	0xFF0
  9126                           postinc0	equ	0xFEE
  9127                           wreg	equ	0xFE8
  9128                           postdec1	equ	0xFE5
  9129                           plusw1	equ	0xFE3
  9130                           fsr1l	equ	0xFE1
  9131                           indf2	equ	0xFDF
  9132                           postinc2	equ	0xFDE
  9133                           plusw2	equ	0xFDB
  9134                           fsr2h	equ	0xFDA
  9135                           fsr2l	equ	0xFD9
  9136                           status	equ	0xFD8
  9137                           
  9138 ;; *************** function _fillScreen *****************
  9139 ;; Defined at:
  9140 ;;		line 567 in file "ST7735_TFT.c"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;  color           2   35[COMRAM] unsigned int 
  9143 ;; Auto vars:     Size  Location     Type
  9144 ;;		None
  9145 ;; Return value:  Size  Location     Type
  9146 ;;		None               void
  9147 ;; Registers used:
  9148 ;;		wreg, status,2, status,0, cstack
  9149 ;; Tracked objects:
  9150 ;;		On entry : 0/0
  9151 ;;		On exit  : 0/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9158 ;;Total ram usage:        2 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:    7
  9161 ;; This function calls:
  9162 ;;		_fillRectangle
  9163 ;; This function is called by:
  9164 ;;		_Initialize_Screen
  9165 ;;		_Initialize_Setup_Fan_Screen
  9166 ;;		_Initialize_Setup_Time_Screen
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text32
  9171  004B98                     __ptext32:
  9172                           	opt stack 0
  9173  004B98                     _fillScreen:
  9174                           	opt stack 21
  9175                           
  9176                           ;ST7735_TFT.c: 569: fillRectangle(0, 0, 128, 160, color);
  9177                           
  9178                           ;incstack = 0
  9179  004B98  0E00               	movlw	0
  9180  004B9A  6E18               	movwf	fillRectangle@y,c
  9181  004B9C  0E80               	movlw	128
  9182  004B9E  6E19               	movwf	fillRectangle@w,c
  9183  004BA0  0EA0               	movlw	160
  9184  004BA2  6E1A               	movwf	fillRectangle@h,c
  9185  004BA4  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  9186  004BA8  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  9187  004BAC  0E00               	movlw	0
  9188  004BAE  ECBF  F01B         	call	_fillRectangle
  9189  004BB2  0012               	return		;funcret
  9190  004BB4                     __end_of_fillScreen:
  9191                           	opt stack 0
  9192                           tblptru	equ	0xFF8
  9193                           tblptrh	equ	0xFF7
  9194                           tblptrl	equ	0xFF6
  9195                           tablat	equ	0xFF5
  9196                           prodh	equ	0xFF4
  9197                           prodl	equ	0xFF3
  9198                           intcon2	equ	0xFF1
  9199                           intcon3	equ	0xFF0
  9200                           postinc0	equ	0xFEE
  9201                           wreg	equ	0xFE8
  9202                           postdec1	equ	0xFE5
  9203                           plusw1	equ	0xFE3
  9204                           fsr1l	equ	0xFE1
  9205                           indf2	equ	0xFDF
  9206                           postinc2	equ	0xFDE
  9207                           plusw2	equ	0xFDB
  9208                           fsr2h	equ	0xFDA
  9209                           fsr2l	equ	0xFD9
  9210                           status	equ	0xFD8
  9211                           
  9212 ;; *************** function _fillRectangle *****************
  9213 ;; Defined at:
  9214 ;;		line 451 in file "ST7735_TFT.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  x               1    wreg     unsigned char 
  9217 ;;  y               1   23[COMRAM] unsigned char 
  9218 ;;  w               1   24[COMRAM] unsigned char 
  9219 ;;  h               1   25[COMRAM] unsigned char 
  9220 ;;  color           2   26[COMRAM] unsigned int 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  x               1   34[COMRAM] unsigned char 
  9223 ;;  lo              1   33[COMRAM] unsigned char 
  9224 ;;  hi              1   32[COMRAM] unsigned char 
  9225 ;; Return value:  Size  Location     Type
  9226 ;;		None               void
  9227 ;; Registers used:
  9228 ;;		wreg, status,2, status,0, cstack
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9234 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;Total ram usage:       12 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    6
  9241 ;; This function calls:
  9242 ;;		_setAddrWindow
  9243 ;;		_spiwrite
  9244 ;; This function is called by:
  9245 ;;		_fillScreen
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text33
  9250  00377E                     __ptext33:
  9251                           	opt stack 0
  9252  00377E                     _fillRectangle:
  9253                           	opt stack 21
  9254                           
  9255                           ;incstack = 0
  9256                           ;fillRectangle@x stored from wreg
  9257  00377E  6E23               	movwf	fillRectangle@x,c
  9258                           
  9259                           ;ST7735_TFT.c: 453: unsigned char hi, lo;
  9260                           ;ST7735_TFT.c: 454: if((x >= 128) || (y >= 160))
  9261  003780  0E80               	movlw	128
  9262  003782  6023               	cpfslt	fillRectangle@x,c
  9263  003784  D069               	goto	l311
  9264  003786  0E9F               	movlw	159
  9265  003788  6418               	cpfsgt	fillRectangle@y,c
  9266  00378A  D001               	goto	l5768
  9267                           
  9268                           ;ST7735_TFT.c: 455: return;
  9269  00378C  D065               	goto	l311
  9270  00378E                     l5768:
  9271                           
  9272                           ;ST7735_TFT.c: 456: if((x + w - 1) >= 128)
  9273  00378E  0EFF               	movlw	255
  9274  003790  6E1D               	movwf	??_fillRectangle& (0+255),c
  9275  003792  0EFF               	movlw	255
  9276  003794  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9277  003796  5019               	movf	fillRectangle@w,w,c
  9278  003798  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  9279  00379C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9280  00379E  261F               	addwf	??_fillRectangle+2,f,c
  9281  0037A0  0E00               	movlw	0
  9282  0037A2  2220               	addwfc	??_fillRectangle+3,f,c
  9283  0037A4  501D               	movf	??_fillRectangle,w,c
  9284  0037A6  261F               	addwf	??_fillRectangle+2,f,c
  9285  0037A8  501E               	movf	??_fillRectangle+1,w,c
  9286  0037AA  2220               	addwfc	??_fillRectangle+3,f,c
  9287  0037AC  BE20               	btfsc	??_fillRectangle+3,7,c
  9288  0037AE  D00A               	goto	l312
  9289  0037B0  5020               	movf	??_fillRectangle+3,w,c
  9290  0037B2  E104               	bnz	u4060
  9291  0037B4  0E80               	movlw	128
  9292  0037B6  5C1F               	subwf	??_fillRectangle+2,w,c
  9293  0037B8  A0D8               	btfss	status,0,c
  9294  0037BA  D004               	goto	l312
  9295  0037BC                     u4060:
  9296                           
  9297                           ;ST7735_TFT.c: 457: w = 128 - x;
  9298  0037BC  5023               	movf	fillRectangle@x,w,c
  9299  0037BE  0800               	sublw	0
  9300  0037C0  0F80               	addlw	128
  9301  0037C2  6E19               	movwf	fillRectangle@w,c
  9302  0037C4                     l312:
  9303                           
  9304                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  9305  0037C4  0EFF               	movlw	255
  9306  0037C6  6E1D               	movwf	??_fillRectangle& (0+255),c
  9307  0037C8  0EFF               	movlw	255
  9308  0037CA  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9309  0037CC  501A               	movf	fillRectangle@h,w,c
  9310  0037CE  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  9311  0037D2  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9312  0037D4  261F               	addwf	??_fillRectangle+2,f,c
  9313  0037D6  0E00               	movlw	0
  9314  0037D8  2220               	addwfc	??_fillRectangle+3,f,c
  9315  0037DA  501D               	movf	??_fillRectangle,w,c
  9316  0037DC  261F               	addwf	??_fillRectangle+2,f,c
  9317  0037DE  501E               	movf	??_fillRectangle+1,w,c
  9318  0037E0  2220               	addwfc	??_fillRectangle+3,f,c
  9319  0037E2  BE20               	btfsc	??_fillRectangle+3,7,c
  9320  0037E4  D00B               	goto	l5774
  9321  0037E6  5020               	movf	??_fillRectangle+3,w,c
  9322  0037E8  E104               	bnz	u4070
  9323  0037EA  0EA0               	movlw	160
  9324  0037EC  5C1F               	subwf	??_fillRectangle+2,w,c
  9325  0037EE  A0D8               	btfss	status,0,c
  9326  0037F0  D005               	goto	l5774
  9327  0037F2                     u4070:
  9328                           
  9329                           ;ST7735_TFT.c: 459: h = 160 - y;
  9330  0037F2  5018               	movf	fillRectangle@y,w,c
  9331  0037F4  0800               	sublw	0
  9332  0037F6  0FA0               	addlw	160
  9333  0037F8  6E1A               	movwf	fillRectangle@h,c
  9334  0037FA  D000               	goto	l5774
  9335  0037FC                     l5774:
  9336                           
  9337                           ;ST7735_TFT.c: 460: setAddrWindow(x, y, x+w-1, y+h-1);
  9338  0037FC  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  9339  003800  5023               	movf	fillRectangle@x,w,c
  9340  003802  2419               	addwf	fillRectangle@w,w,c
  9341  003804  6E1D               	movwf	??_fillRectangle& (0+255),c
  9342  003806  041D               	decf	??_fillRectangle,w,c
  9343  003808  6E15               	movwf	setAddrWindow@x1,c
  9344  00380A  5018               	movf	fillRectangle@y,w,c
  9345  00380C  241A               	addwf	fillRectangle@h,w,c
  9346  00380E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9347  003810  041E               	decf	??_fillRectangle+1,w,c
  9348  003812  6E16               	movwf	setAddrWindow@y1,c
  9349  003814  5023               	movf	fillRectangle@x,w,c
  9350  003816  EC4A  F022         	call	_setAddrWindow
  9351                           
  9352                           ;ST7735_TFT.c: 461: hi = color >> 8; lo = color;
  9353  00381A  501C               	movf	fillRectangle@color+1,w,c
  9354  00381C  6E21               	movwf	fillRectangle@hi,c
  9355  00381E  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  9356                           
  9357                           ;ST7735_TFT.c: 462: PORTDbits.RD7 = 1;
  9358  003822  8E83               	bsf	3971,7,c	;volatile
  9359                           
  9360                           ;ST7735_TFT.c: 463: PORTCbits.RC4 = 0;
  9361  003824  9882               	bcf	3970,4,c	;volatile
  9362                           
  9363                           ;ST7735_TFT.c: 465: for(y=h; y>0; y--) {
  9364  003826  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  9365  00382A                     l5786:
  9366  00382A  5018               	movf	fillRectangle@y,w,c
  9367  00382C  B4D8               	btfsc	status,2,c
  9368  00382E  D013               	goto	l315
  9369  003830  D001               	goto	l314
  9370  003832  D011               	goto	l315
  9371  003834                     l314:
  9372                           
  9373                           ;ST7735_TFT.c: 466: for(x = w; x > 0; x--) {
  9374  003834  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  9375  003838                     l5790:
  9376  003838  5023               	movf	fillRectangle@x,w,c
  9377  00383A  B4D8               	btfsc	status,2,c
  9378  00383C  D00A               	goto	l5800
  9379  00383E  D001               	goto	l5794
  9380  003840  D008               	goto	l5800
  9381  003842                     l5794:
  9382                           
  9383                           ;ST7735_TFT.c: 467: spiwrite(hi);
  9384  003842  5021               	movf	fillRectangle@hi,w,c
  9385  003844  EC71  F026         	call	_spiwrite
  9386                           
  9387                           ;ST7735_TFT.c: 468: spiwrite(lo);
  9388  003848  5022               	movf	fillRectangle@lo,w,c
  9389  00384A  EC71  F026         	call	_spiwrite
  9390  00384E  0623               	decf	fillRectangle@x,f,c
  9391  003850  D7F3               	goto	l5790
  9392  003852                     l5800:
  9393  003852  0618               	decf	fillRectangle@y,f,c
  9394  003854  D7EA               	goto	l5786
  9395  003856                     l315:
  9396                           
  9397                           ;ST7735_TFT.c: 469: }
  9398                           ;ST7735_TFT.c: 470: }
  9399                           ;ST7735_TFT.c: 471: PORTCbits.RC4 = 1;
  9400  003856  8882               	bsf	3970,4,c	;volatile
  9401  003858                     l311:
  9402  003858  0012               	return		;funcret
  9403  00385A                     __end_of_fillRectangle:
  9404                           	opt stack 0
  9405                           tblptru	equ	0xFF8
  9406                           tblptrh	equ	0xFF7
  9407                           tblptrl	equ	0xFF6
  9408                           tablat	equ	0xFF5
  9409                           prodh	equ	0xFF4
  9410                           prodl	equ	0xFF3
  9411                           intcon2	equ	0xFF1
  9412                           intcon3	equ	0xFF0
  9413                           postinc0	equ	0xFEE
  9414                           wreg	equ	0xFE8
  9415                           postdec1	equ	0xFE5
  9416                           plusw1	equ	0xFE3
  9417                           fsr1l	equ	0xFE1
  9418                           indf2	equ	0xFDF
  9419                           postinc2	equ	0xFDE
  9420                           plusw2	equ	0xFDB
  9421                           fsr2h	equ	0xFDA
  9422                           fsr2l	equ	0xFD9
  9423                           status	equ	0xFD8
  9424                           
  9425 ;; *************** function _TFT_GreenTab_Initialize *****************
  9426 ;; Defined at:
  9427 ;;		line 592 in file "ST7735_TFT.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;		None
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;		None
  9432 ;; Return value:  Size  Location     Type
  9433 ;;		None               void
  9434 ;; Registers used:
  9435 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/0
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9445 ;;Total ram usage:        0 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    6
  9448 ;; This function calls:
  9449 ;;		_Rcmd1
  9450 ;;		_Rcmd2red
  9451 ;;		_Rcmd3
  9452 ;;		_write_command
  9453 ;;		_write_data
  9454 ;; This function is called by:
  9455 ;;		_Initialize_Screen
  9456 ;;		_Initialize_Setup_Fan_Screen
  9457 ;;		_Initialize_Setup_Time_Screen
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           	psect	text34
  9462  0048F8                     __ptext34:
  9463                           	opt stack 0
  9464  0048F8                     _TFT_GreenTab_Initialize:
  9465                           	opt stack 22
  9466                           
  9467                           ;ST7735_TFT.c: 594: PORTCbits.RC4 = 1;
  9468                           
  9469                           ;incstack = 0
  9470  0048F8  8882               	bsf	3970,4,c	;volatile
  9471                           
  9472                           ;ST7735_TFT.c: 595: PORTDbits.RD7 = 0;
  9473  0048FA  9E83               	bcf	3971,7,c	;volatile
  9474                           
  9475                           ;ST7735_TFT.c: 597: SSPSTAT=0x80;
  9476  0048FC  0E80               	movlw	128
  9477  0048FE  6EC7               	movwf	4039,c	;volatile
  9478                           
  9479                           ;ST7735_TFT.c: 598: SSPCON1=0x30;
  9480  004900  0E30               	movlw	48
  9481  004902  6EC6               	movwf	4038,c	;volatile
  9482                           
  9483                           ;ST7735_TFT.c: 601: Rcmd1();
  9484  004904  EC6B  F017         	call	_Rcmd1	;wreg free
  9485                           
  9486                           ;ST7735_TFT.c: 602: Rcmd2red();
  9487  004908  EC7B  F023         	call	_Rcmd2red	;wreg free
  9488                           
  9489                           ;ST7735_TFT.c: 603: Rcmd3();
  9490  00490C  EC7C  F019         	call	_Rcmd3	;wreg free
  9491                           
  9492                           ;ST7735_TFT.c: 604: write_command(0x36);
  9493  004910  0E36               	movlw	54
  9494  004912  ECD4  F026         	call	_write_command
  9495                           
  9496                           ;ST7735_TFT.c: 605: write_data(0xC0);
  9497  004916  0EC0               	movlw	192
  9498  004918  ECCC  F026         	call	_write_data
  9499                           
  9500                           ;ST7735_TFT.c: 606: _tft_type = 1;
  9501  00491C  0E01               	movlw	1
  9502  00491E  0100               	movlb	0	; () banked
  9503  004920  6FCC               	movwf	__tft_type& (0+255),b
  9504                           
  9505                           ; BSR set to: 0
  9506  004922  0012               	return		;funcret
  9507  004924                     __end_of_TFT_GreenTab_Initialize:
  9508                           	opt stack 0
  9509                           tblptru	equ	0xFF8
  9510                           tblptrh	equ	0xFF7
  9511                           tblptrl	equ	0xFF6
  9512                           tablat	equ	0xFF5
  9513                           prodh	equ	0xFF4
  9514                           prodl	equ	0xFF3
  9515                           intcon2	equ	0xFF1
  9516                           intcon3	equ	0xFF0
  9517                           postinc0	equ	0xFEE
  9518                           wreg	equ	0xFE8
  9519                           postdec1	equ	0xFE5
  9520                           plusw1	equ	0xFE3
  9521                           fsr1l	equ	0xFE1
  9522                           indf2	equ	0xFDF
  9523                           postinc2	equ	0xFDE
  9524                           plusw2	equ	0xFDB
  9525                           fsr2h	equ	0xFDA
  9526                           fsr2l	equ	0xFD9
  9527                           status	equ	0xFD8
  9528                           
  9529 ;; *************** function _Rcmd3 *****************
  9530 ;; Defined at:
  9531 ;;		line 286 in file "ST7735_TFT.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;		None
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;		None
  9536 ;; Return value:  Size  Location     Type
  9537 ;;		None               void
  9538 ;; Registers used:
  9539 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;Total ram usage:        0 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    5
  9552 ;; This function calls:
  9553 ;;		_delay_ms
  9554 ;;		_write_command
  9555 ;;		_write_data
  9556 ;; This function is called by:
  9557 ;;		_TFT_GreenTab_Initialize
  9558 ;;		_TFT_BlackTab_Initialize
  9559 ;; This function uses a non-reentrant model
  9560 ;;
  9561                           
  9562                           	psect	text35
  9563  0032F8                     __ptext35:
  9564                           	opt stack 0
  9565  0032F8                     _Rcmd3:
  9566                           	opt stack 22
  9567                           
  9568                           ;ST7735_TFT.c: 288: write_command(0xE0);
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;incstack = 0
  9572  0032F8  0EE0               	movlw	224
  9573  0032FA  ECD4  F026         	call	_write_command
  9574                           
  9575                           ;ST7735_TFT.c: 289: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  9576  0032FE  0E02               	movlw	2
  9577  003300  ECCC  F026         	call	_write_data
  9578  003304  0E1C               	movlw	28
  9579  003306  ECCC  F026         	call	_write_data
  9580  00330A  0E07               	movlw	7
  9581  00330C  ECCC  F026         	call	_write_data
  9582  003310  0E12               	movlw	18
  9583  003312  ECCC  F026         	call	_write_data
  9584                           
  9585                           ;ST7735_TFT.c: 290: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  9586  003316  0E37               	movlw	55
  9587  003318  ECCC  F026         	call	_write_data
  9588  00331C  0E32               	movlw	50
  9589  00331E  ECCC  F026         	call	_write_data
  9590  003322  0E29               	movlw	41
  9591  003324  ECCC  F026         	call	_write_data
  9592  003328  0E2D               	movlw	45
  9593  00332A  ECCC  F026         	call	_write_data
  9594                           
  9595                           ;ST7735_TFT.c: 291: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  9596  00332E  0E29               	movlw	41
  9597  003330  ECCC  F026         	call	_write_data
  9598  003334  0E25               	movlw	37
  9599  003336  ECCC  F026         	call	_write_data
  9600  00333A  0E2B               	movlw	43
  9601  00333C  ECCC  F026         	call	_write_data
  9602  003340  0E39               	movlw	57
  9603  003342  ECCC  F026         	call	_write_data
  9604                           
  9605                           ;ST7735_TFT.c: 292: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  9606  003346  0E00               	movlw	0
  9607  003348  ECCC  F026         	call	_write_data
  9608  00334C  0E01               	movlw	1
  9609  00334E  ECCC  F026         	call	_write_data
  9610  003352  0E03               	movlw	3
  9611  003354  ECCC  F026         	call	_write_data
  9612  003358  0E10               	movlw	16
  9613  00335A  ECCC  F026         	call	_write_data
  9614                           
  9615                           ;ST7735_TFT.c: 293: write_command(0xE1);
  9616  00335E  0EE1               	movlw	225
  9617  003360  ECD4  F026         	call	_write_command
  9618                           
  9619                           ;ST7735_TFT.c: 294: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  9620  003364  0E03               	movlw	3
  9621  003366  ECCC  F026         	call	_write_data
  9622  00336A  0E1D               	movlw	29
  9623  00336C  ECCC  F026         	call	_write_data
  9624  003370  0E07               	movlw	7
  9625  003372  ECCC  F026         	call	_write_data
  9626  003376  0E06               	movlw	6
  9627  003378  ECCC  F026         	call	_write_data
  9628                           
  9629                           ;ST7735_TFT.c: 295: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  9630  00337C  0E2E               	movlw	46
  9631  00337E  ECCC  F026         	call	_write_data
  9632  003382  0E2C               	movlw	44
  9633  003384  ECCC  F026         	call	_write_data
  9634  003388  0E29               	movlw	41
  9635  00338A  ECCC  F026         	call	_write_data
  9636  00338E  0E2D               	movlw	45
  9637  003390  ECCC  F026         	call	_write_data
  9638                           
  9639                           ;ST7735_TFT.c: 296: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  9640  003394  0E2E               	movlw	46
  9641  003396  ECCC  F026         	call	_write_data
  9642  00339A  0E2E               	movlw	46
  9643  00339C  ECCC  F026         	call	_write_data
  9644  0033A0  0E37               	movlw	55
  9645  0033A2  ECCC  F026         	call	_write_data
  9646  0033A6  0E3F               	movlw	63
  9647  0033A8  ECCC  F026         	call	_write_data
  9648                           
  9649                           ;ST7735_TFT.c: 297: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  9650  0033AC  0E00               	movlw	0
  9651  0033AE  ECCC  F026         	call	_write_data
  9652  0033B2  0E00               	movlw	0
  9653  0033B4  ECCC  F026         	call	_write_data
  9654  0033B8  0E02               	movlw	2
  9655  0033BA  ECCC  F026         	call	_write_data
  9656  0033BE  0E10               	movlw	16
  9657  0033C0  ECCC  F026         	call	_write_data
  9658                           
  9659                           ;ST7735_TFT.c: 298: write_command(0x13);
  9660  0033C4  0E13               	movlw	19
  9661  0033C6  ECD4  F026         	call	_write_command
  9662                           
  9663                           ;ST7735_TFT.c: 299: delay_ms(10);
  9664  0033CA  0E00               	movlw	0
  9665  0033CC  6E18               	movwf	delay_ms@ms+1,c
  9666  0033CE  0E0A               	movlw	10
  9667  0033D0  6E17               	movwf	delay_ms@ms,c
  9668  0033D2  EC9A  F023         	call	_delay_ms	;wreg free
  9669                           
  9670                           ;ST7735_TFT.c: 300: write_command(0x29);
  9671  0033D6  0E29               	movlw	41
  9672  0033D8  ECD4  F026         	call	_write_command
  9673                           
  9674                           ;ST7735_TFT.c: 301: delay_ms(100);
  9675  0033DC  0E00               	movlw	0
  9676  0033DE  6E18               	movwf	delay_ms@ms+1,c
  9677  0033E0  0E64               	movlw	100
  9678  0033E2  6E17               	movwf	delay_ms@ms,c
  9679  0033E4  EC9A  F023         	call	_delay_ms	;wreg free
  9680  0033E8  0012               	return		;funcret
  9681  0033EA                     __end_of_Rcmd3:
  9682                           	opt stack 0
  9683                           tblptru	equ	0xFF8
  9684                           tblptrh	equ	0xFF7
  9685                           tblptrl	equ	0xFF6
  9686                           tablat	equ	0xFF5
  9687                           prodh	equ	0xFF4
  9688                           prodl	equ	0xFF3
  9689                           intcon2	equ	0xFF1
  9690                           intcon3	equ	0xFF0
  9691                           postinc0	equ	0xFEE
  9692                           wreg	equ	0xFE8
  9693                           postdec1	equ	0xFE5
  9694                           plusw1	equ	0xFE3
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           plusw2	equ	0xFDB
  9699                           fsr2h	equ	0xFDA
  9700                           fsr2l	equ	0xFD9
  9701                           status	equ	0xFD8
  9702                           
  9703 ;; *************** function _Rcmd2red *****************
  9704 ;; Defined at:
  9705 ;;		line 276 in file "ST7735_TFT.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;		None
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;		None
  9710 ;; Return value:  Size  Location     Type
  9711 ;;		None               void
  9712 ;; Registers used:
  9713 ;;		wreg, status,2, cstack
  9714 ;; Tracked objects:
  9715 ;;		On entry : 0/0
  9716 ;;		On exit  : 0/0
  9717 ;;		Unchanged: 0/0
  9718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;Total ram usage:        0 bytes
  9724 ;; Hardware stack levels used:    1
  9725 ;; Hardware stack levels required when called:    5
  9726 ;; This function calls:
  9727 ;;		_write_command
  9728 ;;		_write_data
  9729 ;; This function is called by:
  9730 ;;		_TFT_GreenTab_Initialize
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           	psect	text36
  9735  0046F6                     __ptext36:
  9736                           	opt stack 0
  9737  0046F6                     _Rcmd2red:
  9738                           	opt stack 22
  9739                           
  9740                           ;ST7735_TFT.c: 278: write_command(0x2A);
  9741                           
  9742                           ;incstack = 0
  9743  0046F6  0E2A               	movlw	42
  9744  0046F8  ECD4  F026         	call	_write_command
  9745                           
  9746                           ;ST7735_TFT.c: 279: write_data(0x00); write_data(0x00);
  9747  0046FC  0E00               	movlw	0
  9748  0046FE  ECCC  F026         	call	_write_data
  9749  004702  0E00               	movlw	0
  9750  004704  ECCC  F026         	call	_write_data
  9751                           
  9752                           ;ST7735_TFT.c: 280: write_data(0x00); write_data(0x7F);
  9753  004708  0E00               	movlw	0
  9754  00470A  ECCC  F026         	call	_write_data
  9755  00470E  0E7F               	movlw	127
  9756  004710  ECCC  F026         	call	_write_data
  9757                           
  9758                           ;ST7735_TFT.c: 281: write_command(0x2B);
  9759  004714  0E2B               	movlw	43
  9760  004716  ECD4  F026         	call	_write_command
  9761                           
  9762                           ;ST7735_TFT.c: 282: write_data(0x00); write_data(0x00);
  9763  00471A  0E00               	movlw	0
  9764  00471C  ECCC  F026         	call	_write_data
  9765  004720  0E00               	movlw	0
  9766  004722  ECCC  F026         	call	_write_data
  9767                           
  9768                           ;ST7735_TFT.c: 283: write_data(0x00); write_data(0x9F);
  9769  004726  0E00               	movlw	0
  9770  004728  ECCC  F026         	call	_write_data
  9771  00472C  0E9F               	movlw	159
  9772  00472E  ECCC  F026         	call	_write_data
  9773  004732  0012               	return		;funcret
  9774  004734                     __end_of_Rcmd2red:
  9775                           	opt stack 0
  9776                           tblptru	equ	0xFF8
  9777                           tblptrh	equ	0xFF7
  9778                           tblptrl	equ	0xFF6
  9779                           tablat	equ	0xFF5
  9780                           prodh	equ	0xFF4
  9781                           prodl	equ	0xFF3
  9782                           intcon2	equ	0xFF1
  9783                           intcon3	equ	0xFF0
  9784                           postinc0	equ	0xFEE
  9785                           wreg	equ	0xFE8
  9786                           postdec1	equ	0xFE5
  9787                           plusw1	equ	0xFE3
  9788                           fsr1l	equ	0xFE1
  9789                           indf2	equ	0xFDF
  9790                           postinc2	equ	0xFDE
  9791                           plusw2	equ	0xFDB
  9792                           fsr2h	equ	0xFDA
  9793                           fsr2l	equ	0xFD9
  9794                           status	equ	0xFD8
  9795                           
  9796 ;; *************** function _Rcmd1 *****************
  9797 ;; Defined at:
  9798 ;;		line 229 in file "ST7735_TFT.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;		None               void
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;Total ram usage:        0 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    5
  9819 ;; This function calls:
  9820 ;;		_delay_ms
  9821 ;;		_write_command
  9822 ;;		_write_data
  9823 ;; This function is called by:
  9824 ;;		_TFT_GreenTab_Initialize
  9825 ;;		_TFT_BlackTab_Initialize
  9826 ;; This function uses a non-reentrant model
  9827 ;;
  9828                           
  9829                           	psect	text37
  9830  002ED6                     __ptext37:
  9831                           	opt stack 0
  9832  002ED6                     _Rcmd1:
  9833                           	opt stack 22
  9834                           
  9835                           ;ST7735_TFT.c: 231: write_command(0x01);
  9836                           
  9837                           ;incstack = 0
  9838  002ED6  0E01               	movlw	1
  9839  002ED8  ECD4  F026         	call	_write_command
  9840                           
  9841                           ;ST7735_TFT.c: 232: delay_ms(150);
  9842  002EDC  0E00               	movlw	0
  9843  002EDE  6E18               	movwf	delay_ms@ms+1,c
  9844  002EE0  0E96               	movlw	150
  9845  002EE2  6E17               	movwf	delay_ms@ms,c
  9846  002EE4  EC9A  F023         	call	_delay_ms	;wreg free
  9847                           
  9848                           ;ST7735_TFT.c: 233: write_command(0x11);
  9849  002EE8  0E11               	movlw	17
  9850  002EEA  ECD4  F026         	call	_write_command
  9851                           
  9852                           ;ST7735_TFT.c: 234: delay_ms(500);
  9853  002EEE  0E01               	movlw	1
  9854  002EF0  6E18               	movwf	delay_ms@ms+1,c
  9855  002EF2  0EF4               	movlw	244
  9856  002EF4  6E17               	movwf	delay_ms@ms,c
  9857  002EF6  EC9A  F023         	call	_delay_ms	;wreg free
  9858                           
  9859                           ;ST7735_TFT.c: 235: write_command(0xB1);
  9860  002EFA  0EB1               	movlw	177
  9861  002EFC  ECD4  F026         	call	_write_command
  9862                           
  9863                           ;ST7735_TFT.c: 236: write_data(0x01);
  9864  002F00  0E01               	movlw	1
  9865  002F02  ECCC  F026         	call	_write_data
  9866                           
  9867                           ;ST7735_TFT.c: 237: write_data(0x2C);
  9868  002F06  0E2C               	movlw	44
  9869  002F08  ECCC  F026         	call	_write_data
  9870                           
  9871                           ;ST7735_TFT.c: 238: write_data(0x2D);
  9872  002F0C  0E2D               	movlw	45
  9873  002F0E  ECCC  F026         	call	_write_data
  9874                           
  9875                           ;ST7735_TFT.c: 239: write_command(0xB2);
  9876  002F12  0EB2               	movlw	178
  9877  002F14  ECD4  F026         	call	_write_command
  9878                           
  9879                           ;ST7735_TFT.c: 240: write_data(0x01);
  9880  002F18  0E01               	movlw	1
  9881  002F1A  ECCC  F026         	call	_write_data
  9882                           
  9883                           ;ST7735_TFT.c: 241: write_data(0x2C);
  9884  002F1E  0E2C               	movlw	44
  9885  002F20  ECCC  F026         	call	_write_data
  9886                           
  9887                           ;ST7735_TFT.c: 242: write_data(0x2D);
  9888  002F24  0E2D               	movlw	45
  9889  002F26  ECCC  F026         	call	_write_data
  9890                           
  9891                           ;ST7735_TFT.c: 243: write_command(0xB3);
  9892  002F2A  0EB3               	movlw	179
  9893  002F2C  ECD4  F026         	call	_write_command
  9894                           
  9895                           ;ST7735_TFT.c: 244: write_data(0x01);
  9896  002F30  0E01               	movlw	1
  9897  002F32  ECCC  F026         	call	_write_data
  9898                           
  9899                           ;ST7735_TFT.c: 245: write_data(0x2C);
  9900  002F36  0E2C               	movlw	44
  9901  002F38  ECCC  F026         	call	_write_data
  9902                           
  9903                           ;ST7735_TFT.c: 246: write_data(0x2D);
  9904  002F3C  0E2D               	movlw	45
  9905  002F3E  ECCC  F026         	call	_write_data
  9906                           
  9907                           ;ST7735_TFT.c: 247: write_data(0x01);
  9908  002F42  0E01               	movlw	1
  9909  002F44  ECCC  F026         	call	_write_data
  9910                           
  9911                           ;ST7735_TFT.c: 248: write_data(0x2C);
  9912  002F48  0E2C               	movlw	44
  9913  002F4A  ECCC  F026         	call	_write_data
  9914                           
  9915                           ;ST7735_TFT.c: 249: write_data(0x2D);
  9916  002F4E  0E2D               	movlw	45
  9917  002F50  ECCC  F026         	call	_write_data
  9918                           
  9919                           ;ST7735_TFT.c: 250: write_command(0xB4);
  9920  002F54  0EB4               	movlw	180
  9921  002F56  ECD4  F026         	call	_write_command
  9922                           
  9923                           ;ST7735_TFT.c: 251: write_data(0x07);
  9924  002F5A  0E07               	movlw	7
  9925  002F5C  ECCC  F026         	call	_write_data
  9926                           
  9927                           ;ST7735_TFT.c: 252: write_command(0xC0);
  9928  002F60  0EC0               	movlw	192
  9929  002F62  ECD4  F026         	call	_write_command
  9930                           
  9931                           ;ST7735_TFT.c: 253: write_data(0xA2);
  9932  002F66  0EA2               	movlw	162
  9933  002F68  ECCC  F026         	call	_write_data
  9934                           
  9935                           ;ST7735_TFT.c: 254: write_data(0x02);
  9936  002F6C  0E02               	movlw	2
  9937  002F6E  ECCC  F026         	call	_write_data
  9938                           
  9939                           ;ST7735_TFT.c: 255: write_data(0x84);
  9940  002F72  0E84               	movlw	132
  9941  002F74  ECCC  F026         	call	_write_data
  9942                           
  9943                           ;ST7735_TFT.c: 256: write_command(0xC1);
  9944  002F78  0EC1               	movlw	193
  9945  002F7A  ECD4  F026         	call	_write_command
  9946                           
  9947                           ;ST7735_TFT.c: 257: write_data(0xC5);
  9948  002F7E  0EC5               	movlw	197
  9949  002F80  ECCC  F026         	call	_write_data
  9950                           
  9951                           ;ST7735_TFT.c: 258: write_command(0xC2);
  9952  002F84  0EC2               	movlw	194
  9953  002F86  ECD4  F026         	call	_write_command
  9954                           
  9955                           ;ST7735_TFT.c: 259: write_data(0x0A);
  9956  002F8A  0E0A               	movlw	10
  9957  002F8C  ECCC  F026         	call	_write_data
  9958                           
  9959                           ;ST7735_TFT.c: 260: write_data(0x00);
  9960  002F90  0E00               	movlw	0
  9961  002F92  ECCC  F026         	call	_write_data
  9962                           
  9963                           ;ST7735_TFT.c: 261: write_command(0xC3);
  9964  002F96  0EC3               	movlw	195
  9965  002F98  ECD4  F026         	call	_write_command
  9966                           
  9967                           ;ST7735_TFT.c: 262: write_data(0x8A);
  9968  002F9C  0E8A               	movlw	138
  9969  002F9E  ECCC  F026         	call	_write_data
  9970                           
  9971                           ;ST7735_TFT.c: 263: write_data(0x2A);
  9972  002FA2  0E2A               	movlw	42
  9973  002FA4  ECCC  F026         	call	_write_data
  9974                           
  9975                           ;ST7735_TFT.c: 264: write_command(0xC4);
  9976  002FA8  0EC4               	movlw	196
  9977  002FAA  ECD4  F026         	call	_write_command
  9978                           
  9979                           ;ST7735_TFT.c: 265: write_data(0x8A);
  9980  002FAE  0E8A               	movlw	138
  9981  002FB0  ECCC  F026         	call	_write_data
  9982                           
  9983                           ;ST7735_TFT.c: 266: write_data(0xEE);
  9984  002FB4  0EEE               	movlw	238
  9985  002FB6  ECCC  F026         	call	_write_data
  9986                           
  9987                           ;ST7735_TFT.c: 267: write_command(0xC5);
  9988  002FBA  0EC5               	movlw	197
  9989  002FBC  ECD4  F026         	call	_write_command
  9990                           
  9991                           ;ST7735_TFT.c: 268: write_data(0x0E);
  9992  002FC0  0E0E               	movlw	14
  9993  002FC2  ECCC  F026         	call	_write_data
  9994                           
  9995                           ;ST7735_TFT.c: 269: write_command(0x20);
  9996  002FC6  0E20               	movlw	32
  9997  002FC8  ECD4  F026         	call	_write_command
  9998                           
  9999                           ;ST7735_TFT.c: 270: write_command(0x36);
 10000  002FCC  0E36               	movlw	54
 10001  002FCE  ECD4  F026         	call	_write_command
 10002                           
 10003                           ;ST7735_TFT.c: 271: write_data(0xC8);
 10004  002FD2  0EC8               	movlw	200
 10005  002FD4  ECCC  F026         	call	_write_data
 10006                           
 10007                           ;ST7735_TFT.c: 272: write_command(0x3A);
 10008  002FD8  0E3A               	movlw	58
 10009  002FDA  ECD4  F026         	call	_write_command
 10010                           
 10011                           ;ST7735_TFT.c: 273: write_data(0x05);
 10012  002FDE  0E05               	movlw	5
 10013  002FE0  ECCC  F026         	call	_write_data
 10014  002FE4  0012               	return		;funcret
 10015  002FE6                     __end_of_Rcmd1:
 10016                           	opt stack 0
 10017                           tblptru	equ	0xFF8
 10018                           tblptrh	equ	0xFF7
 10019                           tblptrl	equ	0xFF6
 10020                           tablat	equ	0xFF5
 10021                           prodh	equ	0xFF4
 10022                           prodl	equ	0xFF3
 10023                           intcon2	equ	0xFF1
 10024                           intcon3	equ	0xFF0
 10025                           postinc0	equ	0xFEE
 10026                           wreg	equ	0xFE8
 10027                           postdec1	equ	0xFE5
 10028                           plusw1	equ	0xFE3
 10029                           fsr1l	equ	0xFE1
 10030                           indf2	equ	0xFDF
 10031                           postinc2	equ	0xFDE
 10032                           plusw2	equ	0xFDB
 10033                           fsr2h	equ	0xFDA
 10034                           fsr2l	equ	0xFD9
 10035                           status	equ	0xFD8
 10036                           
 10037 ;; *************** function _LCD_Reset *****************
 10038 ;; Defined at:
 10039 ;;		line 165 in file "ST7735_TFT.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;		None
 10042 ;; Auto vars:     Size  Location     Type
 10043 ;;		None
 10044 ;; Return value:  Size  Location     Type
 10045 ;;		None               void
 10046 ;; Registers used:
 10047 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;Total ram usage:        0 bytes
 10058 ;; Hardware stack levels used:    1
 10059 ;; Hardware stack levels required when called:    5
 10060 ;; This function calls:
 10061 ;;		_delay_ms
 10062 ;; This function is called by:
 10063 ;;		_Initialize_Screen
 10064 ;;		_Initialize_Setup_Fan_Screen
 10065 ;;		_Initialize_Setup_Time_Screen
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           	psect	text38
 10070  004D0A                     __ptext38:
 10071                           	opt stack 0
 10072  004D0A                     _LCD_Reset:
 10073                           	opt stack 23
 10074                           
 10075                           ;ST7735_TFT.c: 167: PORTDbits.RD0 = 0;
 10076                           
 10077                           ;incstack = 0
 10078  004D0A  9083               	bcf	3971,0,c	;volatile
 10079                           
 10080                           ;ST7735_TFT.c: 168: delay_ms(100);
 10081  004D0C  0E00               	movlw	0
 10082  004D0E  6E18               	movwf	delay_ms@ms+1,c
 10083  004D10  0E64               	movlw	100
 10084  004D12  6E17               	movwf	delay_ms@ms,c
 10085  004D14  EC9A  F023         	call	_delay_ms	;wreg free
 10086                           
 10087                           ;ST7735_TFT.c: 169: PORTDbits.RD0 = 1;
 10088  004D18  8083               	bsf	3971,0,c	;volatile
 10089  004D1A  0012               	return		;funcret
 10090  004D1C                     __end_of_LCD_Reset:
 10091                           	opt stack 0
 10092                           tblptru	equ	0xFF8
 10093                           tblptrh	equ	0xFF7
 10094                           tblptrl	equ	0xFF6
 10095                           tablat	equ	0xFF5
 10096                           prodh	equ	0xFF4
 10097                           prodl	equ	0xFF3
 10098                           intcon2	equ	0xFF1
 10099                           intcon3	equ	0xFF0
 10100                           postinc0	equ	0xFEE
 10101                           wreg	equ	0xFE8
 10102                           postdec1	equ	0xFE5
 10103                           plusw1	equ	0xFE3
 10104                           fsr1l	equ	0xFE1
 10105                           indf2	equ	0xFDF
 10106                           postinc2	equ	0xFDE
 10107                           plusw2	equ	0xFDB
 10108                           fsr2h	equ	0xFDA
 10109                           fsr2l	equ	0xFD9
 10110                           status	equ	0xFD8
 10111                           
 10112 ;; *************** function _delay_ms *****************
 10113 ;; Defined at:
 10114 ;;		line 12 in file "ST7735_TFT.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  ms              2   22[COMRAM] int 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  count           2   24[COMRAM] int 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;		None               void
 10121 ;; Registers used:
 10122 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;Total ram usage:        4 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    4
 10135 ;; This function calls:
 10136 ;;		___wmul
 10137 ;; This function is called by:
 10138 ;;		_LCD_Reset
 10139 ;;		_Rcmd1
 10140 ;;		_Rcmd3
 10141 ;;		_Bcmd
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text39
 10146  004734                     __ptext39:
 10147                           	opt stack 0
 10148  004734                     _delay_ms:
 10149                           	opt stack 22
 10150                           
 10151                           ;ST7735_TFT.c: 18: int count;
 10152                           ;ST7735_TFT.c: 19: count = 8000000/4000/8 * ms;
 10153                           
 10154                           ;incstack = 0
 10155  004734  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 10156  004738  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 10157  00473C  0E00               	movlw	0
 10158  00473E  6E14               	movwf	___wmul@multiplicand+1,c
 10159  004740  0EFA               	movlw	250
 10160  004742  6E13               	movwf	___wmul@multiplicand,c
 10161  004744  ECE9  F024         	call	___wmul	;wreg free
 10162  004748  C011  F019         	movff	?___wmul,delay_ms@count
 10163  00474C  C012  F01A         	movff	?___wmul+1,delay_ms@count+1
 10164                           
 10165                           ;ST7735_TFT.c: 20: count = (0xffff - count)+1;
 10166  004750  6C19               	negf	delay_ms@count,c
 10167  004752  1E1A               	comf	delay_ms@count+1,f,c
 10168  004754  B0D8               	btfsc	status,0,c
 10169  004756  2A1A               	incf	delay_ms@count+1,f,c
 10170                           
 10171                           ;ST7735_TFT.c: 22: T0CON = 0x02;
 10172  004758  0E02               	movlw	2
 10173  00475A  6ED5               	movwf	4053,c	;volatile
 10174                           
 10175                           ;ST7735_TFT.c: 23: TMR0H = count >> 8;
 10176  00475C  501A               	movf	delay_ms@count+1,w,c
 10177  00475E  6ED7               	movwf	4055,c	;volatile
 10178                           
 10179                           ;ST7735_TFT.c: 24: TMR0L = count & 0x00ff;
 10180  004760  C019  FFD6         	movff	delay_ms@count,4054	;volatile
 10181                           
 10182                           ;ST7735_TFT.c: 27: INTCONbits.TMR0IF = 0;
 10183  004764  94F2               	bcf	intcon,2,c	;volatile
 10184                           
 10185                           ;ST7735_TFT.c: 28: T0CONbits.TMR0ON = 1;
 10186  004766  8ED5               	bsf	4053,7,c	;volatile
 10187                           
 10188                           ;ST7735_TFT.c: 30: while (INTCONbits.TMR0IF == 0);
 10189  004768  D000               	goto	l198
 10190  00476A                     l198:
 10191  00476A  A4F2               	btfss	intcon,2,c	;volatile
 10192  00476C  D7FE               	goto	l198
 10193                           
 10194                           ;ST7735_TFT.c: 31: T0CONbits.TMR0ON = 0;
 10195  00476E  9ED5               	bcf	4053,7,c	;volatile
 10196  004770  0012               	return		;funcret
 10197  004772                     __end_of_delay_ms:
 10198                           	opt stack 0
 10199                           tblptru	equ	0xFF8
 10200                           tblptrh	equ	0xFF7
 10201                           tblptrl	equ	0xFF6
 10202                           tablat	equ	0xFF5
 10203                           prodh	equ	0xFF4
 10204                           prodl	equ	0xFF3
 10205                           intcon	equ	0xFF2
 10206                           intcon2	equ	0xFF1
 10207                           intcon3	equ	0xFF0
 10208                           postinc0	equ	0xFEE
 10209                           wreg	equ	0xFE8
 10210                           postdec1	equ	0xFE5
 10211                           plusw1	equ	0xFE3
 10212                           fsr1l	equ	0xFE1
 10213                           indf2	equ	0xFDF
 10214                           postinc2	equ	0xFDE
 10215                           plusw2	equ	0xFDB
 10216                           fsr2h	equ	0xFDA
 10217                           fsr2l	equ	0xFD9
 10218                           status	equ	0xFD8
 10219                           
 10220 ;; *************** function _DS3231_Write_Time *****************
 10221 ;; Defined at:
 10222 ;;		line 64 in file "I2C_Support.c"
 10223 ;; Parameters:    Size  Location     Type
 10224 ;;		None
 10225 ;; Auto vars:     Size  Location     Type
 10226 ;;  Address         1   74[COMRAM] unsigned char 
 10227 ;;  Device          1   73[COMRAM] unsigned char 
 10228 ;; Return value:  Size  Location     Type
 10229 ;;		None               void
 10230 ;; Registers used:
 10231 ;;		wreg, status,2, status,0, cstack
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;Total ram usage:        2 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    5
 10244 ;; This function calls:
 10245 ;;		_I2C_Start
 10246 ;;		_I2C_Stop
 10247 ;;		_I2C_Write
 10248 ;;		_dec_2_bcd
 10249 ;; This function is called by:
 10250 ;;		_Do_Save_New_Time
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           	psect	text40
 10255  003BF0                     __ptext40:
 10256                           	opt stack 0
 10257  003BF0                     _DS3231_Write_Time:
 10258                           	opt stack 23
 10259                           
 10260                           ;I2C_Support.c: 66: char Device = 0x68;
 10261                           
 10262                           ;incstack = 0
 10263  003BF0  0E68               	movlw	104
 10264  003BF2  6E4A               	movwf	DS3231_Write_Time@Device,c
 10265                           
 10266                           ;I2C_Support.c: 67: char Address = 0x00;
 10267  003BF4  0E00               	movlw	0
 10268  003BF6  6E4B               	movwf	DS3231_Write_Time@Address,c
 10269                           
 10270                           ;I2C_Support.c: 68: second = dec_2_bcd(setup_second);
 10271  003BF8  0100               	movlb	0	; () banked
 10272  003BFA  51D8               	movf	_setup_second& (0+255),w,b
 10273  003BFC  EC1E  F022         	call	_dec_2_bcd
 10274  003C00  5043               	movf	?_dec_2_bcd,w,c
 10275  003C02  6E68               	movwf	_second,c
 10276                           
 10277                           ;I2C_Support.c: 69: minute = dec_2_bcd(setup_minute);
 10278  003C04  0100               	movlb	0	; () banked
 10279  003C06  51D6               	movf	_setup_minute& (0+255),w,b
 10280  003C08  EC1E  F022         	call	_dec_2_bcd
 10281  003C0C  5043               	movf	?_dec_2_bcd,w,c
 10282  003C0E  6E66               	movwf	_minute,c
 10283                           
 10284                           ;I2C_Support.c: 70: hour = dec_2_bcd(setup_hour);
 10285  003C10  0100               	movlb	0	; () banked
 10286  003C12  51D5               	movf	_setup_hour& (0+255),w,b
 10287  003C14  EC1E  F022         	call	_dec_2_bcd
 10288  003C18  5043               	movf	?_dec_2_bcd,w,c
 10289  003C1A  6E65               	movwf	_hour,c
 10290                           
 10291                           ;I2C_Support.c: 71: dow = 0x01;
 10292  003C1C  0E01               	movlw	1
 10293  003C1E  0100               	movlb	0	; () banked
 10294  003C20  6FCF               	movwf	_dow& (0+255),b
 10295                           
 10296                           ;I2C_Support.c: 72: day = dec_2_bcd(setup_day);
 10297  003C22  0100               	movlb	0	; () banked
 10298  003C24  51D3               	movf	_setup_day& (0+255),w,b
 10299  003C26  EC1E  F022         	call	_dec_2_bcd
 10300  003C2A  5043               	movf	?_dec_2_bcd,w,c
 10301  003C2C  6E63               	movwf	_day,c
 10302                           
 10303                           ;I2C_Support.c: 73: month = dec_2_bcd(setup_month);
 10304  003C2E  0100               	movlb	0	; () banked
 10305  003C30  51D7               	movf	_setup_month& (0+255),w,b
 10306  003C32  EC1E  F022         	call	_dec_2_bcd
 10307  003C36  5043               	movf	?_dec_2_bcd,w,c
 10308  003C38  6E67               	movwf	_month,c
 10309                           
 10310                           ;I2C_Support.c: 74: year = dec_2_bcd(setup_year);
 10311  003C3A  0100               	movlb	0	; () banked
 10312  003C3C  51D9               	movf	_setup_year& (0+255),w,b
 10313  003C3E  EC1E  F022         	call	_dec_2_bcd
 10314  003C42  5043               	movf	?_dec_2_bcd,w,c
 10315  003C44  6E6B               	movwf	_year,c
 10316                           
 10317                           ;I2C_Support.c: 75: I2C_Start();
 10318  003C46  ECA0  F026         	call	_I2C_Start	;wreg free
 10319                           
 10320                           ;I2C_Support.c: 76: I2C_Write((Device << 1) | 0);
 10321  003C4A  504A               	movf	DS3231_Write_Time@Device,w,c
 10322  003C4C  244A               	addwf	DS3231_Write_Time@Device,w,c
 10323  003C4E  ECD8  F023         	call	_I2C_Write
 10324                           
 10325                           ;I2C_Support.c: 77: I2C_Write(Address);
 10326  003C52  504B               	movf	DS3231_Write_Time@Address,w,c
 10327  003C54  ECD8  F023         	call	_I2C_Write
 10328                           
 10329                           ;I2C_Support.c: 78: I2C_Write(second);
 10330  003C58  5068               	movf	_second,w,c
 10331  003C5A  ECD8  F023         	call	_I2C_Write
 10332                           
 10333                           ;I2C_Support.c: 79: I2C_Write(minute);
 10334  003C5E  5066               	movf	_minute,w,c
 10335  003C60  ECD8  F023         	call	_I2C_Write
 10336                           
 10337                           ;I2C_Support.c: 80: I2C_Write(hour);
 10338  003C64  5065               	movf	_hour,w,c
 10339  003C66  ECD8  F023         	call	_I2C_Write
 10340                           
 10341                           ;I2C_Support.c: 81: I2C_Write(dow);
 10342  003C6A  0100               	movlb	0	; () banked
 10343  003C6C  51CF               	movf	_dow& (0+255),w,b
 10344  003C6E  ECD8  F023         	call	_I2C_Write
 10345                           
 10346                           ;I2C_Support.c: 82: I2C_Write(day);
 10347  003C72  5063               	movf	_day,w,c
 10348  003C74  ECD8  F023         	call	_I2C_Write
 10349                           
 10350                           ;I2C_Support.c: 83: I2C_Write(month);
 10351  003C78  5067               	movf	_month,w,c
 10352  003C7A  ECD8  F023         	call	_I2C_Write
 10353                           
 10354                           ;I2C_Support.c: 84: I2C_Write(year);
 10355  003C7E  506B               	movf	_year,w,c
 10356  003C80  ECD8  F023         	call	_I2C_Write
 10357                           
 10358                           ;I2C_Support.c: 85: I2C_Stop();
 10359  003C84  EC97  F026         	call	_I2C_Stop	;wreg free
 10360  003C88  0012               	return		;funcret
 10361  003C8A                     __end_of_DS3231_Write_Time:
 10362                           	opt stack 0
 10363                           tblptru	equ	0xFF8
 10364                           tblptrh	equ	0xFF7
 10365                           tblptrl	equ	0xFF6
 10366                           tablat	equ	0xFF5
 10367                           prodh	equ	0xFF4
 10368                           prodl	equ	0xFF3
 10369                           intcon	equ	0xFF2
 10370                           intcon2	equ	0xFF1
 10371                           intcon3	equ	0xFF0
 10372                           postinc0	equ	0xFEE
 10373                           wreg	equ	0xFE8
 10374                           postdec1	equ	0xFE5
 10375                           plusw1	equ	0xFE3
 10376                           fsr1l	equ	0xFE1
 10377                           indf2	equ	0xFDF
 10378                           postinc2	equ	0xFDE
 10379                           plusw2	equ	0xFDB
 10380                           fsr2h	equ	0xFDA
 10381                           fsr2l	equ	0xFD9
 10382                           status	equ	0xFD8
 10383                           
 10384 ;; *************** function _dec_2_bcd *****************
 10385 ;; Defined at:
 10386 ;;		line 59 in file "utils.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;  dec             1    wreg     unsigned char 
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;  dec             1   72[COMRAM] unsigned char 
 10391 ;;  bcd             2   70[COMRAM] int 
 10392 ;; Return value:  Size  Location     Type
 10393 ;;                  2   66[COMRAM] int 
 10394 ;; Registers used:
 10395 ;;		wreg, status,2, status,0, cstack
 10396 ;; Tracked objects:
 10397 ;;		On entry : 0/0
 10398 ;;		On exit  : 0/0
 10399 ;;		Unchanged: 0/0
 10400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10401 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10403 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;Total ram usage:        7 bytes
 10406 ;; Hardware stack levels used:    1
 10407 ;; Hardware stack levels required when called:    4
 10408 ;; This function calls:
 10409 ;;		___awdiv
 10410 ;;		___awmod
 10411 ;; This function is called by:
 10412 ;;		_DS3231_Write_Time
 10413 ;; This function uses a non-reentrant model
 10414 ;;
 10415                           
 10416                           	psect	text41
 10417  00443C                     __ptext41:
 10418                           	opt stack 0
 10419  00443C                     _dec_2_bcd:
 10420                           	opt stack 23
 10421                           
 10422                           ;incstack = 0
 10423                           ;dec_2_bcd@dec stored from wreg
 10424  00443C  6E49               	movwf	dec_2_bcd@dec,c
 10425                           
 10426                           ;utils.c: 61: int bcd;
 10427                           ;utils.c: 62: bcd = ((dec / 10) << 4) + (dec % 10);
 10428  00443E  C049  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 10429  004442  6A18               	clrf	___awdiv@dividend+1,c
 10430  004444  0E00               	movlw	0
 10431  004446  6E1A               	movwf	___awdiv@divisor+1,c
 10432  004448  0E0A               	movlw	10
 10433  00444A  6E19               	movwf	___awdiv@divisor,c
 10434  00444C  EC45  F01E         	call	___awdiv	;wreg free
 10435  004450  C017  F045         	movff	?___awdiv,??_dec_2_bcd
 10436  004454  C018  F046         	movff	?___awdiv+1,??_dec_2_bcd+1
 10437  004458  3A45               	swapf	??_dec_2_bcd,f,c
 10438  00445A  3A46               	swapf	??_dec_2_bcd+1,f,c
 10439  00445C  0EF0               	movlw	240
 10440  00445E  1646               	andwf	??_dec_2_bcd+1,f,c
 10441  004460  5045               	movf	??_dec_2_bcd,w,c
 10442  004462  0B0F               	andlw	15
 10443  004464  1246               	iorwf	??_dec_2_bcd+1,f,c
 10444  004466  0EF0               	movlw	240
 10445  004468  1645               	andwf	??_dec_2_bcd,f,c
 10446  00446A  C049  F03D         	movff	dec_2_bcd@dec,___awmod@dividend
 10447  00446E  6A3E               	clrf	___awmod@dividend+1,c
 10448  004470  0E00               	movlw	0
 10449  004472  6E40               	movwf	___awmod@divisor+1,c
 10450  004474  0E0A               	movlw	10
 10451  004476  6E3F               	movwf	___awmod@divisor,c
 10452  004478  EC34  F020         	call	___awmod	;wreg free
 10453  00447C  503D               	movf	?___awmod,w,c
 10454  00447E  2445               	addwf	??_dec_2_bcd,w,c
 10455  004480  6E47               	movwf	dec_2_bcd@bcd,c
 10456  004482  503E               	movf	?___awmod+1,w,c
 10457  004484  2046               	addwfc	??_dec_2_bcd+1,w,c
 10458  004486  6E48               	movwf	dec_2_bcd@bcd+1,c
 10459                           
 10460                           ;utils.c: 63: return bcd;
 10461  004488  C047  F043         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 10462  00448C  C048  F044         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 10463  004490  D000               	goto	l454
 10464  004492                     l454:
 10465  004492  0012               	return		;funcret
 10466  004494                     __end_of_dec_2_bcd:
 10467                           	opt stack 0
 10468                           tblptru	equ	0xFF8
 10469                           tblptrh	equ	0xFF7
 10470                           tblptrl	equ	0xFF6
 10471                           tablat	equ	0xFF5
 10472                           prodh	equ	0xFF4
 10473                           prodl	equ	0xFF3
 10474                           intcon	equ	0xFF2
 10475                           intcon2	equ	0xFF1
 10476                           intcon3	equ	0xFF0
 10477                           postinc0	equ	0xFEE
 10478                           wreg	equ	0xFE8
 10479                           postdec1	equ	0xFE5
 10480                           plusw1	equ	0xFE3
 10481                           fsr1l	equ	0xFE1
 10482                           indf2	equ	0xFDF
 10483                           postinc2	equ	0xFDE
 10484                           plusw2	equ	0xFDB
 10485                           fsr2h	equ	0xFDA
 10486                           fsr2l	equ	0xFD9
 10487                           status	equ	0xFD8
 10488                           
 10489 ;; *************** function _DS3231_Read_Time *****************
 10490 ;; Defined at:
 10491 ;;		line 43 in file "I2C_Support.c"
 10492 ;; Parameters:    Size  Location     Type
 10493 ;;		None
 10494 ;; Auto vars:     Size  Location     Type
 10495 ;;  Device          1   20[COMRAM] unsigned char 
 10496 ;;  Address         1   19[COMRAM] unsigned char 
 10497 ;;  Data_Ret        1    0        unsigned char 
 10498 ;; Return value:  Size  Location     Type
 10499 ;;		None               void
 10500 ;; Registers used:
 10501 ;;		wreg, status,2, status,0, cstack
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;Total ram usage:        2 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; Hardware stack levels required when called:    6
 10514 ;; This function calls:
 10515 ;;		_I2C_ReStart
 10516 ;;		_I2C_Read
 10517 ;;		_I2C_Start
 10518 ;;		_I2C_Stop
 10519 ;;		_I2C_Write
 10520 ;; This function is called by:
 10521 ;;		_main
 10522 ;;		_Setup_Fan_Temp
 10523 ;;		_Do_Save_New_Fan_Temp
 10524 ;;		_Do_Setup_Time
 10525 ;;		_Do_Save_New_Time
 10526 ;;		_Exit_Time_Setup
 10527 ;;		_Exit_Setup_Fan_Temp
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           	psect	text42
 10532  0042B8                     __ptext42:
 10533                           	opt stack 0
 10534  0042B8                     _DS3231_Read_Time:
 10535                           	opt stack 22
 10536                           
 10537                           ;I2C_Support.c: 46: char Device = 0x68;
 10538                           
 10539                           ;incstack = 0
 10540  0042B8  0E68               	movlw	104
 10541  0042BA  6E15               	movwf	DS3231_Read_Time@Device,c
 10542                           
 10543                           ;I2C_Support.c: 47: char Address = 0x00;
 10544  0042BC  0E00               	movlw	0
 10545  0042BE  6E14               	movwf	DS3231_Read_Time@Address,c
 10546                           
 10547                           ;I2C_Support.c: 48: char Data_Ret;
 10548                           ;I2C_Support.c: 49: I2C_Start();
 10549  0042C0  ECA0  F026         	call	_I2C_Start	;wreg free
 10550                           
 10551                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
 10552  0042C4  5015               	movf	DS3231_Read_Time@Device,w,c
 10553  0042C6  2415               	addwf	DS3231_Read_Time@Device,w,c
 10554  0042C8  ECD8  F023         	call	_I2C_Write
 10555                           
 10556                           ;I2C_Support.c: 51: I2C_Write(Address);
 10557  0042CC  5014               	movf	DS3231_Read_Time@Address,w,c
 10558  0042CE  ECD8  F023         	call	_I2C_Write
 10559                           
 10560                           ;I2C_Support.c: 52: I2C_ReStart();
 10561  0042D2  EC52  F026         	call	_I2C_ReStart	;wreg free
 10562                           
 10563                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
 10564  0042D6  80D8               	bsf	status,0,c
 10565  0042D8  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10566  0042DA  ECD8  F023         	call	_I2C_Write
 10567                           
 10568                           ;I2C_Support.c: 54: second = I2C_Read(1);
 10569  0042DE  0E01               	movlw	1
 10570  0042E0  EC38  F023         	call	_I2C_Read
 10571  0042E4  6E68               	movwf	_second,c
 10572                           
 10573                           ;I2C_Support.c: 55: minute = I2C_Read(1);
 10574  0042E6  0E01               	movlw	1
 10575  0042E8  EC38  F023         	call	_I2C_Read
 10576  0042EC  6E66               	movwf	_minute,c
 10577                           
 10578                           ;I2C_Support.c: 56: hour = I2C_Read(1);
 10579  0042EE  0E01               	movlw	1
 10580  0042F0  EC38  F023         	call	_I2C_Read
 10581  0042F4  6E65               	movwf	_hour,c
 10582                           
 10583                           ;I2C_Support.c: 57: dow = I2C_Read(1);
 10584  0042F6  0E01               	movlw	1
 10585  0042F8  EC38  F023         	call	_I2C_Read
 10586  0042FC  0100               	movlb	0	; () banked
 10587  0042FE  6FCF               	movwf	_dow& (0+255),b
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;I2C_Support.c: 58: day = I2C_Read(1);
 10591  004300  0E01               	movlw	1
 10592  004302  EC38  F023         	call	_I2C_Read
 10593  004306  6E63               	movwf	_day,c
 10594                           
 10595                           ;I2C_Support.c: 59: month = I2C_Read(1);
 10596  004308  0E01               	movlw	1
 10597  00430A  EC38  F023         	call	_I2C_Read
 10598  00430E  6E67               	movwf	_month,c
 10599                           
 10600                           ;I2C_Support.c: 60: year = I2C_Read(0);
 10601  004310  0E00               	movlw	0
 10602  004312  EC38  F023         	call	_I2C_Read
 10603  004316  6E6B               	movwf	_year,c
 10604                           
 10605                           ;I2C_Support.c: 61: I2C_Stop();
 10606  004318  EC97  F026         	call	_I2C_Stop	;wreg free
 10607  00431C  0012               	return		;funcret
 10608  00431E                     __end_of_DS3231_Read_Time:
 10609                           	opt stack 0
 10610                           tblptru	equ	0xFF8
 10611                           tblptrh	equ	0xFF7
 10612                           tblptrl	equ	0xFF6
 10613                           tablat	equ	0xFF5
 10614                           prodh	equ	0xFF4
 10615                           prodl	equ	0xFF3
 10616                           intcon	equ	0xFF2
 10617                           intcon2	equ	0xFF1
 10618                           intcon3	equ	0xFF0
 10619                           postinc0	equ	0xFEE
 10620                           wreg	equ	0xFE8
 10621                           postdec1	equ	0xFE5
 10622                           plusw1	equ	0xFE3
 10623                           fsr1l	equ	0xFE1
 10624                           indf2	equ	0xFDF
 10625                           postinc2	equ	0xFDE
 10626                           plusw2	equ	0xFDB
 10627                           fsr2h	equ	0xFDA
 10628                           fsr2l	equ	0xFD9
 10629                           status	equ	0xFD8
 10630                           
 10631 ;; *************** function _Decrease_Time *****************
 10632 ;; Defined at:
 10633 ;;		line 155 in file "Setup_Time.c"
 10634 ;; Parameters:    Size  Location     Type
 10635 ;;		None
 10636 ;; Auto vars:     Size  Location     Type
 10637 ;;		None
 10638 ;; Return value:  Size  Location     Type
 10639 ;;		None               void
 10640 ;; Registers used:
 10641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;Total ram usage:        0 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:   11
 10654 ;; This function calls:
 10655 ;;		_Update_Setup_Time_Screen
 10656 ;; This function is called by:
 10657 ;;		_Do_Setup_Time
 10658 ;; This function uses a non-reentrant model
 10659 ;;
 10660                           
 10661                           	psect	text43
 10662  0039D6                     __ptext43:
 10663                           	opt stack 0
 10664  0039D6                     _Decrease_Time:
 10665                           	opt stack 18
 10666                           
 10667                           ;Setup_Time.c: 157: switch (Select_Field)
 10668                           
 10669                           ;incstack = 0
 10670  0039D6  D042               	goto	l9862
 10671  0039D8                     l9824:
 10672                           
 10673                           ;Setup_Time.c: 160: if (setup_hour == 0) setup_hour = 23;
 10674  0039D8  0100               	movlb	0	; () banked
 10675  0039DA  51D5               	movf	_setup_hour& (0+255),w,b
 10676  0039DC  A4D8               	btfss	status,2,c
 10677  0039DE  D004               	goto	l9828
 10678                           
 10679                           ; BSR set to: 0
 10680  0039E0  0E17               	movlw	23
 10681  0039E2  0100               	movlb	0	; () banked
 10682  0039E4  6FD5               	movwf	_setup_hour& (0+255),b
 10683  0039E6  D04F               	goto	l9864
 10684  0039E8                     l9828:
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;Setup_Time.c: 161: else --setup_hour;
 10688  0039E8  0100               	movlb	0	; () banked
 10689  0039EA  07D5               	decf	_setup_hour& (0+255),f,b
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;Setup_Time.c: 162: break;
 10693  0039EC  D04C               	goto	l9864
 10694  0039EE                     l9830:
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;Setup_Time.c: 165: if (setup_minute == 0) setup_minute = 59;
 10698  0039EE  0100               	movlb	0	; () banked
 10699  0039F0  51D6               	movf	_setup_minute& (0+255),w,b
 10700  0039F2  A4D8               	btfss	status,2,c
 10701  0039F4  D004               	goto	l9834
 10702                           
 10703                           ; BSR set to: 0
 10704  0039F6  0E3B               	movlw	59
 10705  0039F8  0100               	movlb	0	; () banked
 10706  0039FA  6FD6               	movwf	_setup_minute& (0+255),b
 10707  0039FC  D044               	goto	l9864
 10708  0039FE                     l9834:
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;Setup_Time.c: 166: else --setup_minute;
 10712  0039FE  0100               	movlb	0	; () banked
 10713  003A00  07D6               	decf	_setup_minute& (0+255),f,b
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;Setup_Time.c: 167: break;
 10717  003A02  D041               	goto	l9864
 10718  003A04                     l9836:
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;Setup_Time.c: 171: if (setup_second == 0) setup_second = 59;
 10722  003A04  0100               	movlb	0	; () banked
 10723  003A06  51D8               	movf	_setup_second& (0+255),w,b
 10724  003A08  A4D8               	btfss	status,2,c
 10725  003A0A  D004               	goto	l9840
 10726                           
 10727                           ; BSR set to: 0
 10728  003A0C  0E3B               	movlw	59
 10729  003A0E  0100               	movlb	0	; () banked
 10730  003A10  6FD8               	movwf	_setup_second& (0+255),b
 10731  003A12  D039               	goto	l9864
 10732  003A14                     l9840:
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;Setup_Time.c: 172: else --setup_second;
 10736  003A14  0100               	movlb	0	; () banked
 10737  003A16  07D8               	decf	_setup_second& (0+255),f,b
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;Setup_Time.c: 173: break;
 10741  003A18  D036               	goto	l9864
 10742  003A1A                     l9842:
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;Setup_Time.c: 177: if (setup_month == 1) setup_month = 12;
 10746  003A1A  0100               	movlb	0	; () banked
 10747  003A1C  05D7               	decf	_setup_month& (0+255),w,b
 10748  003A1E  A4D8               	btfss	status,2,c
 10749  003A20  D004               	goto	l9846
 10750                           
 10751                           ; BSR set to: 0
 10752  003A22  0E0C               	movlw	12
 10753  003A24  0100               	movlb	0	; () banked
 10754  003A26  6FD7               	movwf	_setup_month& (0+255),b
 10755  003A28  D02E               	goto	l9864
 10756  003A2A                     l9846:
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;Setup_Time.c: 178: else --setup_month;
 10760  003A2A  0100               	movlb	0	; () banked
 10761  003A2C  07D7               	decf	_setup_month& (0+255),f,b
 10762                           
 10763                           ; BSR set to: 0
 10764                           ;Setup_Time.c: 179: break;
 10765  003A2E  D02B               	goto	l9864
 10766  003A30                     l9848:
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;Setup_Time.c: 183: if (setup_day == 1) setup_day = 31;
 10770  003A30  0100               	movlb	0	; () banked
 10771  003A32  05D3               	decf	_setup_day& (0+255),w,b
 10772  003A34  A4D8               	btfss	status,2,c
 10773  003A36  D004               	goto	l9852
 10774                           
 10775                           ; BSR set to: 0
 10776  003A38  0E1F               	movlw	31
 10777  003A3A  0100               	movlb	0	; () banked
 10778  003A3C  6FD3               	movwf	_setup_day& (0+255),b
 10779  003A3E  D023               	goto	l9864
 10780  003A40                     l9852:
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;Setup_Time.c: 184: else --setup_day;
 10784  003A40  0100               	movlb	0	; () banked
 10785  003A42  07D3               	decf	_setup_day& (0+255),f,b
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;Setup_Time.c: 185: break;
 10789  003A44  D020               	goto	l9864
 10790  003A46                     l9854:
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;Setup_Time.c: 189: if (setup_year == 00) setup_year = 99;
 10794  003A46  0100               	movlb	0	; () banked
 10795  003A48  51D9               	movf	_setup_year& (0+255),w,b
 10796  003A4A  A4D8               	btfss	status,2,c
 10797  003A4C  D004               	goto	l9858
 10798                           
 10799                           ; BSR set to: 0
 10800  003A4E  0E63               	movlw	99
 10801  003A50  0100               	movlb	0	; () banked
 10802  003A52  6FD9               	movwf	_setup_year& (0+255),b
 10803  003A54  D018               	goto	l9864
 10804  003A56                     l9858:
 10805                           
 10806                           ; BSR set to: 0
 10807                           ;Setup_Time.c: 190: else --setup_year;
 10808  003A56  0100               	movlb	0	; () banked
 10809  003A58  07D9               	decf	_setup_year& (0+255),f,b
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;Setup_Time.c: 195: }
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;Setup_Time.c: 194: break;
 10816                           
 10817                           ;Setup_Time.c: 193: default:
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;Setup_Time.c: 191: break;
 10821  003A5A  D015               	goto	l9864
 10822  003A5C                     l9862:
 10823  003A5C  0100               	movlb	0	; () banked
 10824  003A5E  51CB               	movf	_Select_Field& (0+255),w,b
 10825                           
 10826                           ; Switch size 1, requested type "space"
 10827                           ; Number of cases is 6, Range of values is 0 to 5
 10828                           ; switch strategies available:
 10829                           ; Name         Instructions Cycles
 10830                           ; simple_byte           19    10 (average)
 10831                           ;	Chosen strategy is simple_byte
 10832  003A60  0A00               	xorlw	0	; case 0
 10833  003A62  B4D8               	btfsc	status,2,c
 10834  003A64  D7B9               	goto	l9824
 10835  003A66  0A01               	xorlw	1	; case 1
 10836  003A68  B4D8               	btfsc	status,2,c
 10837  003A6A  D7C1               	goto	l9830
 10838  003A6C  0A03               	xorlw	3	; case 2
 10839  003A6E  B4D8               	btfsc	status,2,c
 10840  003A70  D7C9               	goto	l9836
 10841  003A72  0A01               	xorlw	1	; case 3
 10842  003A74  B4D8               	btfsc	status,2,c
 10843  003A76  D7D1               	goto	l9842
 10844  003A78  0A07               	xorlw	7	; case 4
 10845  003A7A  B4D8               	btfsc	status,2,c
 10846  003A7C  D7D9               	goto	l9848
 10847  003A7E  0A01               	xorlw	1	; case 5
 10848  003A80  B4D8               	btfsc	status,2,c
 10849  003A82  D7E1               	goto	l9854
 10850  003A84  D000               	goto	l9864
 10851  003A86                     l9864:
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;Setup_Time.c: 196: Update_Setup_Time_Screen();
 10855  003A86  EC5F  F015         	call	_Update_Setup_Time_Screen	;wreg free
 10856  003A8A  0012               	return		;funcret
 10857  003A8C                     __end_of_Decrease_Time:
 10858                           	opt stack 0
 10859                           tblptru	equ	0xFF8
 10860                           tblptrh	equ	0xFF7
 10861                           tblptrl	equ	0xFF6
 10862                           tablat	equ	0xFF5
 10863                           prodh	equ	0xFF4
 10864                           prodl	equ	0xFF3
 10865                           intcon	equ	0xFF2
 10866                           intcon2	equ	0xFF1
 10867                           intcon3	equ	0xFF0
 10868                           postinc0	equ	0xFEE
 10869                           wreg	equ	0xFE8
 10870                           postdec1	equ	0xFE5
 10871                           plusw1	equ	0xFE3
 10872                           fsr1l	equ	0xFE1
 10873                           indf2	equ	0xFDF
 10874                           postinc2	equ	0xFDE
 10875                           plusw2	equ	0xFDB
 10876                           fsr2h	equ	0xFDA
 10877                           fsr2l	equ	0xFD9
 10878                           status	equ	0xFD8
 10879                           
 10880 ;; *************** function _Update_Setup_Time_Screen *****************
 10881 ;; Defined at:
 10882 ;;		line 266 in file "Setup_Time.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;		None
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;		None
 10887 ;; Return value:  Size  Location     Type
 10888 ;;		None               void
 10889 ;; Registers used:
 10890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;Total ram usage:        0 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:   10
 10903 ;; This function calls:
 10904 ;;		___awdiv
 10905 ;;		___awmod
 10906 ;;		_drawtext
 10907 ;; This function is called by:
 10908 ;;		_Do_Setup_Time
 10909 ;;		_Increase_Time
 10910 ;;		_Decrease_Time
 10911 ;; This function uses a non-reentrant model
 10912 ;;
 10913                           
 10914                           	psect	text44
 10915  002ABE                     __ptext44:
 10916                           	opt stack 0
 10917  002ABE                     _Update_Setup_Time_Screen:
 10918                           	opt stack 19
 10919                           
 10920                           ;Setup_Time.c: 268: setup_time[0] = (setup_hour/10) + '0';
 10921                           
 10922                           ;incstack = 0
 10923  002ABE  C0D5  F017         	movff	_setup_hour,___awdiv@dividend
 10924  002AC2  6A18               	clrf	___awdiv@dividend+1,c
 10925  002AC4  0E00               	movlw	0
 10926  002AC6  6E1A               	movwf	___awdiv@divisor+1,c
 10927  002AC8  0E0A               	movlw	10
 10928  002ACA  6E19               	movwf	___awdiv@divisor,c
 10929  002ACC  EC45  F01E         	call	___awdiv	;wreg free
 10930  002AD0  5017               	movf	?___awdiv,w,c
 10931  002AD2  0F30               	addlw	48
 10932  002AD4  0101               	movlb	1	; () banked
 10933  002AD6  6F65               	movwf	_setup_time& (0+255),b
 10934                           
 10935                           ;Setup_Time.c: 269: setup_time[1] = (setup_hour%10) + '0';
 10936  002AD8  C0D5  F03D         	movff	_setup_hour,___awmod@dividend
 10937  002ADC  6A3E               	clrf	___awmod@dividend+1,c
 10938  002ADE  0E00               	movlw	0
 10939  002AE0  6E40               	movwf	___awmod@divisor+1,c
 10940  002AE2  0E0A               	movlw	10
 10941  002AE4  6E3F               	movwf	___awmod@divisor,c
 10942  002AE6  EC34  F020         	call	___awmod	;wreg free
 10943  002AEA  503D               	movf	?___awmod,w,c
 10944  002AEC  0F30               	addlw	48
 10945  002AEE  0101               	movlb	1	; () banked
 10946  002AF0  6F66               	movwf	(_setup_time+1)& (0+255),b
 10947                           
 10948                           ;Setup_Time.c: 271: setup_time[3] = (setup_minute/10) + '0';
 10949  002AF2  C0D6  F017         	movff	_setup_minute,___awdiv@dividend
 10950  002AF6  6A18               	clrf	___awdiv@dividend+1,c
 10951  002AF8  0E00               	movlw	0
 10952  002AFA  6E1A               	movwf	___awdiv@divisor+1,c
 10953  002AFC  0E0A               	movlw	10
 10954  002AFE  6E19               	movwf	___awdiv@divisor,c
 10955  002B00  EC45  F01E         	call	___awdiv	;wreg free
 10956  002B04  5017               	movf	?___awdiv,w,c
 10957  002B06  0F30               	addlw	48
 10958  002B08  0101               	movlb	1	; () banked
 10959  002B0A  6F68               	movwf	(_setup_time+3)& (0+255),b
 10960                           
 10961                           ;Setup_Time.c: 272: setup_time[4] = (setup_minute%10) + '0';
 10962  002B0C  C0D6  F03D         	movff	_setup_minute,___awmod@dividend
 10963  002B10  6A3E               	clrf	___awmod@dividend+1,c
 10964  002B12  0E00               	movlw	0
 10965  002B14  6E40               	movwf	___awmod@divisor+1,c
 10966  002B16  0E0A               	movlw	10
 10967  002B18  6E3F               	movwf	___awmod@divisor,c
 10968  002B1A  EC34  F020         	call	___awmod	;wreg free
 10969  002B1E  503D               	movf	?___awmod,w,c
 10970  002B20  0F30               	addlw	48
 10971  002B22  0101               	movlb	1	; () banked
 10972  002B24  6F69               	movwf	(_setup_time+4)& (0+255),b
 10973                           
 10974                           ;Setup_Time.c: 274: setup_time[6] = (setup_second/10) + '0';
 10975  002B26  C0D8  F017         	movff	_setup_second,___awdiv@dividend
 10976  002B2A  6A18               	clrf	___awdiv@dividend+1,c
 10977  002B2C  0E00               	movlw	0
 10978  002B2E  6E1A               	movwf	___awdiv@divisor+1,c
 10979  002B30  0E0A               	movlw	10
 10980  002B32  6E19               	movwf	___awdiv@divisor,c
 10981  002B34  EC45  F01E         	call	___awdiv	;wreg free
 10982  002B38  5017               	movf	?___awdiv,w,c
 10983  002B3A  0F30               	addlw	48
 10984  002B3C  0101               	movlb	1	; () banked
 10985  002B3E  6F6B               	movwf	(_setup_time+6)& (0+255),b
 10986                           
 10987                           ;Setup_Time.c: 275: setup_time[7] = (setup_second%10) + '0';
 10988  002B40  C0D8  F03D         	movff	_setup_second,___awmod@dividend
 10989  002B44  6A3E               	clrf	___awmod@dividend+1,c
 10990  002B46  0E00               	movlw	0
 10991  002B48  6E40               	movwf	___awmod@divisor+1,c
 10992  002B4A  0E0A               	movlw	10
 10993  002B4C  6E3F               	movwf	___awmod@divisor,c
 10994  002B4E  EC34  F020         	call	___awmod	;wreg free
 10995  002B52  503D               	movf	?___awmod,w,c
 10996  002B54  0F30               	addlw	48
 10997  002B56  0101               	movlb	1	; () banked
 10998  002B58  6F6C               	movwf	(_setup_time+7)& (0+255),b
 10999                           
 11000                           ;Setup_Time.c: 277: setup_date[0] = (setup_month/10) + '0';
 11001  002B5A  C0D7  F017         	movff	_setup_month,___awdiv@dividend
 11002  002B5E  6A18               	clrf	___awdiv@dividend+1,c
 11003  002B60  0E00               	movlw	0
 11004  002B62  6E1A               	movwf	___awdiv@divisor+1,c
 11005  002B64  0E0A               	movlw	10
 11006  002B66  6E19               	movwf	___awdiv@divisor,c
 11007  002B68  EC45  F01E         	call	___awdiv	;wreg free
 11008  002B6C  5017               	movf	?___awdiv,w,c
 11009  002B6E  0F30               	addlw	48
 11010  002B70  0101               	movlb	1	; () banked
 11011  002B72  6F5C               	movwf	_setup_date& (0+255),b
 11012                           
 11013                           ;Setup_Time.c: 278: setup_date[1] = (setup_month%10) + '0';
 11014  002B74  C0D7  F03D         	movff	_setup_month,___awmod@dividend
 11015  002B78  6A3E               	clrf	___awmod@dividend+1,c
 11016  002B7A  0E00               	movlw	0
 11017  002B7C  6E40               	movwf	___awmod@divisor+1,c
 11018  002B7E  0E0A               	movlw	10
 11019  002B80  6E3F               	movwf	___awmod@divisor,c
 11020  002B82  EC34  F020         	call	___awmod	;wreg free
 11021  002B86  503D               	movf	?___awmod,w,c
 11022  002B88  0F30               	addlw	48
 11023  002B8A  0101               	movlb	1	; () banked
 11024  002B8C  6F5D               	movwf	(_setup_date+1)& (0+255),b
 11025                           
 11026                           ;Setup_Time.c: 280: setup_date[3] = (setup_day/10) + '0';
 11027  002B8E  C0D3  F017         	movff	_setup_day,___awdiv@dividend
 11028  002B92  6A18               	clrf	___awdiv@dividend+1,c
 11029  002B94  0E00               	movlw	0
 11030  002B96  6E1A               	movwf	___awdiv@divisor+1,c
 11031  002B98  0E0A               	movlw	10
 11032  002B9A  6E19               	movwf	___awdiv@divisor,c
 11033  002B9C  EC45  F01E         	call	___awdiv	;wreg free
 11034  002BA0  5017               	movf	?___awdiv,w,c
 11035  002BA2  0F30               	addlw	48
 11036  002BA4  0101               	movlb	1	; () banked
 11037  002BA6  6F5F               	movwf	(_setup_date+3)& (0+255),b
 11038                           
 11039                           ;Setup_Time.c: 281: setup_date[4] = (setup_day%10) + '0';
 11040  002BA8  C0D3  F03D         	movff	_setup_day,___awmod@dividend
 11041  002BAC  6A3E               	clrf	___awmod@dividend+1,c
 11042  002BAE  0E00               	movlw	0
 11043  002BB0  6E40               	movwf	___awmod@divisor+1,c
 11044  002BB2  0E0A               	movlw	10
 11045  002BB4  6E3F               	movwf	___awmod@divisor,c
 11046  002BB6  EC34  F020         	call	___awmod	;wreg free
 11047  002BBA  503D               	movf	?___awmod,w,c
 11048  002BBC  0F30               	addlw	48
 11049  002BBE  0101               	movlb	1	; () banked
 11050  002BC0  6F60               	movwf	(_setup_date+4)& (0+255),b
 11051                           
 11052                           ;Setup_Time.c: 283: setup_date[6] = (setup_year/10) + '0';
 11053  002BC2  C0D9  F017         	movff	_setup_year,___awdiv@dividend
 11054  002BC6  6A18               	clrf	___awdiv@dividend+1,c
 11055  002BC8  0E00               	movlw	0
 11056  002BCA  6E1A               	movwf	___awdiv@divisor+1,c
 11057  002BCC  0E0A               	movlw	10
 11058  002BCE  6E19               	movwf	___awdiv@divisor,c
 11059  002BD0  EC45  F01E         	call	___awdiv	;wreg free
 11060  002BD4  5017               	movf	?___awdiv,w,c
 11061  002BD6  0F30               	addlw	48
 11062  002BD8  0101               	movlb	1	; () banked
 11063  002BDA  6F62               	movwf	(_setup_date+6)& (0+255),b
 11064                           
 11065                           ;Setup_Time.c: 284: setup_date[7] = (setup_year%10) + '0';
 11066  002BDC  C0D9  F03D         	movff	_setup_year,___awmod@dividend
 11067  002BE0  6A3E               	clrf	___awmod@dividend+1,c
 11068  002BE2  0E00               	movlw	0
 11069  002BE4  6E40               	movwf	___awmod@divisor+1,c
 11070  002BE6  0E0A               	movlw	10
 11071  002BE8  6E3F               	movwf	___awmod@divisor,c
 11072  002BEA  EC34  F020         	call	___awmod	;wreg free
 11073  002BEE  503D               	movf	?___awmod,w,c
 11074  002BF0  0F30               	addlw	48
 11075  002BF2  0101               	movlb	1	; () banked
 11076  002BF4  6F63               	movwf	(_setup_date+7)& (0+255),b
 11077                           
 11078                           ; BSR set to: 1
 11079                           ;Setup_Time.c: 286: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
 11080  002BF6  0E34               	movlw	52
 11081  002BF8  6E39               	movwf	drawtext@y,c
 11082  002BFA  0E65               	movlw	low _setup_time
 11083  002BFC  6E3A               	movwf	drawtext@_text,c
 11084  002BFE  0E01               	movlw	high _setup_time
 11085  002C00  6E3B               	movwf	drawtext@_text+1,c
 11086  002C02  0E07               	movlw	7
 11087  002C04  6E3D               	movwf	drawtext@color+1,c
 11088  002C06  683C               	setf	drawtext@color,c
 11089  002C08  0E00               	movlw	0
 11090  002C0A  6E3F               	movwf	drawtext@bg+1,c
 11091  002C0C  0E00               	movlw	0
 11092  002C0E  6E3E               	movwf	drawtext@bg,c
 11093  002C10  0E02               	movlw	2
 11094  002C12  6E40               	movwf	drawtext@size,c
 11095  002C14  0E0F               	movlw	15
 11096  002C16  ECDD  F01A         	call	_drawtext
 11097                           
 11098                           ;Setup_Time.c: 287: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
 11099  002C1A  0E52               	movlw	82
 11100  002C1C  6E39               	movwf	drawtext@y,c
 11101  002C1E  0E5C               	movlw	low _setup_date
 11102  002C20  6E3A               	movwf	drawtext@_text,c
 11103  002C22  0E01               	movlw	high _setup_date
 11104  002C24  6E3B               	movwf	drawtext@_text+1,c
 11105  002C26  0E07               	movlw	7
 11106  002C28  6E3D               	movwf	drawtext@color+1,c
 11107  002C2A  0EE0               	movlw	224
 11108  002C2C  6E3C               	movwf	drawtext@color,c
 11109  002C2E  0E00               	movlw	0
 11110  002C30  6E3F               	movwf	drawtext@bg+1,c
 11111  002C32  0E00               	movlw	0
 11112  002C34  6E3E               	movwf	drawtext@bg,c
 11113  002C36  0E02               	movlw	2
 11114  002C38  6E40               	movwf	drawtext@size,c
 11115  002C3A  0E0F               	movlw	15
 11116  002C3C  ECDD  F01A         	call	_drawtext
 11117  002C40  0012               	return		;funcret
 11118  002C42                     __end_of_Update_Setup_Time_Screen:
 11119                           	opt stack 0
 11120                           tblptru	equ	0xFF8
 11121                           tblptrh	equ	0xFF7
 11122                           tblptrl	equ	0xFF6
 11123                           tablat	equ	0xFF5
 11124                           prodh	equ	0xFF4
 11125                           prodl	equ	0xFF3
 11126                           intcon	equ	0xFF2
 11127                           intcon2	equ	0xFF1
 11128                           intcon3	equ	0xFF0
 11129                           postinc0	equ	0xFEE
 11130                           wreg	equ	0xFE8
 11131                           postdec1	equ	0xFE5
 11132                           plusw1	equ	0xFE3
 11133                           fsr1l	equ	0xFE1
 11134                           indf2	equ	0xFDF
 11135                           postinc2	equ	0xFDE
 11136                           plusw2	equ	0xFDB
 11137                           fsr2h	equ	0xFDA
 11138                           fsr2l	equ	0xFD9
 11139                           status	equ	0xFD8
 11140                           
 11141 ;; *************** function _drawtext *****************
 11142 ;; Defined at:
 11143 ;;		line 422 in file "ST7735_TFT.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;  x               1    wreg     unsigned char 
 11146 ;;  y               1   56[COMRAM] unsigned char 
 11147 ;;  _text           2   57[COMRAM] PTR unsigned char 
 11148 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11149 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11150 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11151 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11152 ;;		 -> Timing_Txt(23), 
 11153 ;;  color           2   59[COMRAM] unsigned int 
 11154 ;;  bg              2   61[COMRAM] unsigned int 
 11155 ;;  size            1   63[COMRAM] unsigned char 
 11156 ;; Auto vars:     Size  Location     Type
 11157 ;;  x               1   66[COMRAM] unsigned char 
 11158 ;;  i               2   69[COMRAM] unsigned int 
 11159 ;;  textsize        2   67[COMRAM] unsigned int 
 11160 ;;  cursor_x        1   72[COMRAM] unsigned char 
 11161 ;;  cursor_y        1   71[COMRAM] unsigned char 
 11162 ;; Return value:  Size  Location     Type
 11163 ;;		None               void
 11164 ;; Registers used:
 11165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/0
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11171 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;Total ram usage:       17 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:    9
 11178 ;; This function calls:
 11179 ;;		_drawChar
 11180 ;;		_strlen
 11181 ;; This function is called by:
 11182 ;;		_Initialize_Screen
 11183 ;;		_Update_Screen
 11184 ;;		_Initialize_Setup_Fan_Screen
 11185 ;;		_Update_Setup_Fan_Screen
 11186 ;;		_Initialize_Setup_Time_Screen
 11187 ;;		_Update_Setup_Time_Screen
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           	psect	text45
 11192  0035BA                     __ptext45:
 11193                           	opt stack 0
 11194  0035BA                     _drawtext:
 11195                           	opt stack 20
 11196                           
 11197                           ;incstack = 0
 11198                           ;drawtext@x stored from wreg
 11199  0035BA  6E43               	movwf	drawtext@x,c
 11200                           
 11201                           ;ST7735_TFT.c: 424: unsigned char cursor_x, cursor_y;
 11202                           ;ST7735_TFT.c: 425: unsigned int textsize, i;
 11203                           ;ST7735_TFT.c: 426: cursor_x = x, cursor_y = y;
 11204  0035BC  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 11205  0035C0  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 11206                           
 11207                           ;ST7735_TFT.c: 427: textsize = strlen(_text);
 11208  0035C4  C03A  F011         	movff	drawtext@_text,strlen@s
 11209  0035C8  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 11210  0035CC  ECB9  F023         	call	_strlen	;wreg free
 11211  0035D0  C011  F044         	movff	?_strlen,drawtext@textsize
 11212  0035D4  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 11213                           
 11214                           ;ST7735_TFT.c: 428: for(i = 0; i < textsize; i++){
 11215  0035D8  0E00               	movlw	0
 11216  0035DA  6E47               	movwf	drawtext@i+1,c
 11217  0035DC  0E00               	movlw	0
 11218  0035DE  6E46               	movwf	drawtext@i,c
 11219  0035E0  D056               	goto	l9400
 11220  0035E2                     l9374:
 11221                           
 11222                           ;ST7735_TFT.c: 429: if(wrap && ((cursor_x + size * 5) > 128)){
 11223  0035E2  0100               	movlb	0	; () banked
 11224  0035E4  51DE               	movf	_wrap& (0+255),w,b
 11225  0035E6  0100               	movlb	0	; () banked
 11226  0035E8  B4D8               	btfsc	status,2,c
 11227  0035EA  D02C               	goto	l9390
 11228                           
 11229                           ; BSR set to: 0
 11230  0035EC  5040               	movf	drawtext@size,w,c
 11231  0035EE  0D05               	mullw	5
 11232  0035F0  5049               	movf	drawtext@cursor_x,w,c
 11233  0035F2  6E41               	movwf	??_drawtext& (0+255),c
 11234  0035F4  6A42               	clrf	(??_drawtext+1)& (0+255),c
 11235  0035F6  50F3               	movf	prodl,w,c
 11236  0035F8  2641               	addwf	??_drawtext,f,c
 11237  0035FA  50F4               	movf	prodh,w,c
 11238  0035FC  2242               	addwfc	??_drawtext+1,f,c
 11239  0035FE  BE42               	btfsc	??_drawtext+1,7,c
 11240  003600  D021               	goto	l9390
 11241  003602  5042               	movf	??_drawtext+1,w,c
 11242  003604  E104               	bnz	u8260
 11243  003606  0E81               	movlw	129
 11244  003608  5C41               	subwf	??_drawtext,w,c
 11245  00360A  A0D8               	btfss	status,0,c
 11246  00360C  D01B               	goto	l9390
 11247  00360E                     u8260:
 11248                           
 11249                           ; BSR set to: 0
 11250                           ;ST7735_TFT.c: 430: cursor_x = 0;
 11251  00360E  0E00               	movlw	0
 11252  003610  6E49               	movwf	drawtext@cursor_x,c
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;ST7735_TFT.c: 431: cursor_y = cursor_y + size * 7 + 3 ;
 11256  003612  5040               	movf	drawtext@size,w,c
 11257  003614  0D07               	mullw	7
 11258  003616  50F3               	movf	prodl,w,c
 11259  003618  2448               	addwf	drawtext@cursor_y,w,c
 11260  00361A  0F03               	addlw	3
 11261  00361C  6E48               	movwf	drawtext@cursor_y,c
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;ST7735_TFT.c: 432: if(cursor_y > 160) cursor_y = 160;
 11265  00361E  0EA0               	movlw	160
 11266  003620  6448               	cpfsgt	drawtext@cursor_y,c
 11267  003622  D003               	goto	l9386
 11268                           
 11269                           ; BSR set to: 0
 11270  003624  0EA0               	movlw	160
 11271  003626  6E48               	movwf	drawtext@cursor_y,c
 11272  003628  D000               	goto	l9386
 11273  00362A                     l9386:
 11274                           
 11275                           ; BSR set to: 0
 11276                           ;ST7735_TFT.c: 433: if(_text[i] == 0x20) goto _skip; }
 11277  00362A  5046               	movf	drawtext@i,w,c
 11278  00362C  243A               	addwf	drawtext@_text,w,c
 11279  00362E  6ED9               	movwf	fsr2l,c
 11280  003630  5047               	movf	drawtext@i+1,w,c
 11281  003632  203B               	addwfc	drawtext@_text+1,w,c
 11282  003634  6EDA               	movwf	fsr2h,c
 11283  003636  0E20               	movlw	32
 11284  003638  18DE               	xorwf	postinc2,w,c
 11285  00363A  B4D8               	btfsc	status,2,c
 11286  00363C  D025               	goto	l9398
 11287  00363E  D002               	goto	l9390
 11288                           
 11289                           ; BSR set to: 0
 11290  003640  D023               	goto	l9398
 11291                           
 11292                           ; BSR set to: 0
 11293  003642  D000               	goto	l9390
 11294  003644                     l9390:
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;ST7735_TFT.c: 434: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 11298  003644  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 11299  003648  5046               	movf	drawtext@i,w,c
 11300  00364A  243A               	addwf	drawtext@_text,w,c
 11301  00364C  6ED9               	movwf	fsr2l,c
 11302  00364E  5047               	movf	drawtext@i+1,w,c
 11303  003650  203B               	addwfc	drawtext@_text+1,w,c
 11304  003652  6EDA               	movwf	fsr2h,c
 11305  003654  50DF               	movf	indf2,w,c
 11306  003656  6E2F               	movwf	drawChar@c,c
 11307  003658  C03C  F030         	movff	drawtext@color,drawChar@color
 11308  00365C  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 11309  003660  C03E  F032         	movff	drawtext@bg,drawChar@bg
 11310  003664  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 11311  003668  C040  F034         	movff	drawtext@size,drawChar@size
 11312  00366C  5049               	movf	drawtext@cursor_x,w,c
 11313  00366E  EC21  F016         	call	_drawChar
 11314                           
 11315                           ;ST7735_TFT.c: 435: cursor_x = cursor_x + size * 6;
 11316  003672  5040               	movf	drawtext@size,w,c
 11317  003674  0D06               	mullw	6
 11318  003676  50F3               	movf	prodl,w,c
 11319  003678  2449               	addwf	drawtext@cursor_x,w,c
 11320  00367A  6E49               	movwf	drawtext@cursor_x,c
 11321                           
 11322                           ;ST7735_TFT.c: 436: if(cursor_x > 128) cursor_x = 128;
 11323  00367C  0E80               	movlw	128
 11324  00367E  6449               	cpfsgt	drawtext@cursor_x,c
 11325  003680  D003               	goto	l9398
 11326  003682  0E80               	movlw	128
 11327  003684  6E49               	movwf	drawtext@cursor_x,c
 11328  003686  D000               	goto	l9398
 11329  003688                     l9398:
 11330  003688  4A46               	infsnz	drawtext@i,f,c
 11331  00368A  2A47               	incf	drawtext@i+1,f,c
 11332  00368C  D000               	goto	l9400
 11333  00368E                     l9400:
 11334  00368E  5044               	movf	drawtext@textsize,w,c
 11335  003690  5C46               	subwf	drawtext@i,w,c
 11336  003692  5045               	movf	drawtext@textsize+1,w,c
 11337  003694  5847               	subwfb	drawtext@i+1,w,c
 11338  003696  A0D8               	btfss	status,0,c
 11339  003698  D7A4               	goto	l9374
 11340  00369A  0012               	return		;funcret
 11341  00369C                     __end_of_drawtext:
 11342                           	opt stack 0
 11343                           tblptru	equ	0xFF8
 11344                           tblptrh	equ	0xFF7
 11345                           tblptrl	equ	0xFF6
 11346                           tablat	equ	0xFF5
 11347                           prodh	equ	0xFF4
 11348                           prodl	equ	0xFF3
 11349                           intcon	equ	0xFF2
 11350                           intcon2	equ	0xFF1
 11351                           intcon3	equ	0xFF0
 11352                           postinc0	equ	0xFEE
 11353                           wreg	equ	0xFE8
 11354                           postdec1	equ	0xFE5
 11355                           plusw1	equ	0xFE3
 11356                           fsr1l	equ	0xFE1
 11357                           indf2	equ	0xFDF
 11358                           postinc2	equ	0xFDE
 11359                           plusw2	equ	0xFDB
 11360                           fsr2h	equ	0xFDA
 11361                           fsr2l	equ	0xFD9
 11362                           status	equ	0xFD8
 11363                           
 11364 ;; *************** function _strlen *****************
 11365 ;; Defined at:
 11366 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;  s               2   16[COMRAM] PTR const unsigned char 
 11369 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11370 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11371 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11372 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11373 ;;		 -> Timing_Txt(23), 
 11374 ;; Auto vars:     Size  Location     Type
 11375 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 11376 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11377 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11378 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11379 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11380 ;;		 -> Timing_Txt(23), 
 11381 ;; Return value:  Size  Location     Type
 11382 ;;                  2   16[COMRAM] unsigned int 
 11383 ;; Registers used:
 11384 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11385 ;; Tracked objects:
 11386 ;;		On entry : 0/0
 11387 ;;		On exit  : 0/0
 11388 ;;		Unchanged: 0/0
 11389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11392 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11393 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;Total ram usage:        6 bytes
 11395 ;; Hardware stack levels used:    1
 11396 ;; Hardware stack levels required when called:    3
 11397 ;; This function calls:
 11398 ;;		Nothing
 11399 ;; This function is called by:
 11400 ;;		_drawtext
 11401 ;; This function uses a non-reentrant model
 11402 ;;
 11403                           
 11404                           	psect	text46
 11405  004772                     __ptext46:
 11406                           	opt stack 0
 11407  004772                     _strlen:
 11408                           	opt stack 25
 11409                           
 11410                           ;incstack = 0
 11411  004772  C011  F015         	movff	strlen@s,strlen@cp
 11412  004776  C012  F016         	movff	strlen@s+1,strlen@cp+1
 11413  00477A  D003               	goto	l5758
 11414  00477C                     l5756:
 11415  00477C  4A15               	infsnz	strlen@cp,f,c
 11416  00477E  2A16               	incf	strlen@cp+1,f,c
 11417  004780  D000               	goto	l5758
 11418  004782                     l5758:
 11419  004782  C015  FFD9         	movff	strlen@cp,fsr2l
 11420  004786  C016  FFDA         	movff	strlen@cp+1,fsr2h
 11421  00478A  50DF               	movf	indf2,w,c
 11422  00478C  A4D8               	btfss	status,2,c
 11423  00478E  D7F6               	goto	l5756
 11424  004790  C011  F013         	movff	strlen@s,??_strlen
 11425  004794  C012  F014         	movff	strlen@s+1,??_strlen+1
 11426  004798  1E13               	comf	??_strlen,f,c
 11427  00479A  1E14               	comf	??_strlen+1,f,c
 11428  00479C  4A13               	infsnz	??_strlen,f,c
 11429  00479E  2A14               	incf	??_strlen+1,f,c
 11430  0047A0  5015               	movf	strlen@cp,w,c
 11431  0047A2  2413               	addwf	??_strlen,w,c
 11432  0047A4  6E11               	movwf	?_strlen,c
 11433  0047A6  5016               	movf	strlen@cp+1,w,c
 11434  0047A8  2014               	addwfc	??_strlen+1,w,c
 11435  0047AA  6E12               	movwf	?_strlen+1,c
 11436  0047AC  D000               	goto	l2104
 11437  0047AE                     l2104:
 11438  0047AE  0012               	return		;funcret
 11439  0047B0                     __end_of_strlen:
 11440                           	opt stack 0
 11441                           tblptru	equ	0xFF8
 11442                           tblptrh	equ	0xFF7
 11443                           tblptrl	equ	0xFF6
 11444                           tablat	equ	0xFF5
 11445                           prodh	equ	0xFF4
 11446                           prodl	equ	0xFF3
 11447                           intcon	equ	0xFF2
 11448                           intcon2	equ	0xFF1
 11449                           intcon3	equ	0xFF0
 11450                           postinc0	equ	0xFEE
 11451                           wreg	equ	0xFE8
 11452                           postdec1	equ	0xFE5
 11453                           plusw1	equ	0xFE3
 11454                           fsr1l	equ	0xFE1
 11455                           indf2	equ	0xFDF
 11456                           postinc2	equ	0xFDE
 11457                           plusw2	equ	0xFDB
 11458                           fsr2h	equ	0xFDA
 11459                           fsr2l	equ	0xFD9
 11460                           status	equ	0xFD8
 11461                           
 11462 ;; *************** function _drawChar *****************
 11463 ;; Defined at:
 11464 ;;		line 395 in file "ST7735_TFT.c"
 11465 ;; Parameters:    Size  Location     Type
 11466 ;;  x               1    wreg     unsigned char 
 11467 ;;  y               1   45[COMRAM] unsigned char 
 11468 ;;  c               1   46[COMRAM] unsigned char 
 11469 ;;  color           2   47[COMRAM] unsigned int 
 11470 ;;  bg              2   49[COMRAM] unsigned int 
 11471 ;;  size            1   51[COMRAM] unsigned char 
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;  x               1   53[COMRAM] unsigned char 
 11474 ;;  line            1   52[COMRAM] unsigned char 
 11475 ;;  i               1   55[COMRAM] unsigned char 
 11476 ;;  j               1   54[COMRAM] unsigned char 
 11477 ;; Return value:  Size  Location     Type
 11478 ;;		None               void
 11479 ;; Registers used:
 11480 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11486 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;Total ram usage:       11 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    8
 11493 ;; This function calls:
 11494 ;;		___wmul
 11495 ;;		_drawPixel
 11496 ;;		_fillRect
 11497 ;; This function is called by:
 11498 ;;		_drawtext
 11499 ;; This function uses a non-reentrant model
 11500 ;;
 11501                           
 11502                           	psect	text47
 11503  002C42                     __ptext47:
 11504                           	opt stack 0
 11505  002C42                     _drawChar:
 11506                           	opt stack 20
 11507                           
 11508                           ;incstack = 0
 11509                           ;drawChar@x stored from wreg
 11510  002C42  6E36               	movwf	drawChar@x,c
 11511                           
 11512                           ;ST7735_TFT.c: 397: char i, j;
 11513                           ;ST7735_TFT.c: 398: if((x >= 128) || (y >= 160))
 11514  002C44  0E80               	movlw	128
 11515  002C46  6036               	cpfslt	drawChar@x,c
 11516  002C48  D0A6               	goto	l274
 11517  002C4A  0E9F               	movlw	159
 11518  002C4C  642E               	cpfsgt	drawChar@y,c
 11519  002C4E  D001               	goto	l8704
 11520                           
 11521                           ;ST7735_TFT.c: 399: return;
 11522  002C50  D0A2               	goto	l274
 11523  002C52                     l8704:
 11524                           
 11525                           ;ST7735_TFT.c: 400: if(size < 1) size = 1;
 11526  002C52  5034               	movf	drawChar@size,w,c
 11527  002C54  A4D8               	btfss	status,2,c
 11528  002C56  D003               	goto	l8708
 11529  002C58  0E01               	movlw	1
 11530  002C5A  6E34               	movwf	drawChar@size,c
 11531  002C5C  D000               	goto	l8708
 11532  002C5E                     l8708:
 11533                           
 11534                           ;ST7735_TFT.c: 401: if((c < ' ') || (c > '~'))
 11535  002C5E  0E1F               	movlw	31
 11536  002C60  642F               	cpfsgt	drawChar@c,c
 11537  002C62  D004               	goto	l8712
 11538  002C64  0E7E               	movlw	126
 11539  002C66  642F               	cpfsgt	drawChar@c,c
 11540  002C68  D003               	goto	l276
 11541  002C6A  D000               	goto	l8712
 11542  002C6C                     l8712:
 11543                           
 11544                           ;ST7735_TFT.c: 402: c = '?';
 11545  002C6C  0E3F               	movlw	63
 11546  002C6E  6E2F               	movwf	drawChar@c,c
 11547  002C70                     l276:
 11548                           
 11549                           ;ST7735_TFT.c: 403: for(i=0; i<5; i++ ) {
 11550  002C70  0E00               	movlw	0
 11551  002C72  6E38               	movwf	drawChar@i,c
 11552  002C74                     l8714:
 11553  002C74  0E04               	movlw	4
 11554  002C76  6438               	cpfsgt	drawChar@i,c
 11555  002C78  D001               	goto	l8718
 11556  002C7A  D08D               	goto	l274
 11557  002C7C                     l8718:
 11558                           
 11559                           ;ST7735_TFT.c: 404: unsigned char line;
 11560                           ;ST7735_TFT.c: 405: if(c < 'S')
 11561  002C7C  0E53               	movlw	83
 11562  002C7E  602F               	cpfslt	drawChar@c,c
 11563  002C80  D015               	goto	l8722
 11564                           
 11565                           ;ST7735_TFT.c: 406: line = font[(c - 32)*5 + i];
 11566  002C82  0EE0               	movlw	224
 11567  002C84  242F               	addwf	drawChar@c,w,c
 11568  002C86  6E11               	movwf	___wmul@multiplier,c
 11569  002C88  6A12               	clrf	___wmul@multiplier+1,c
 11570  002C8A  0EFF               	movlw	255
 11571  002C8C  2212               	addwfc	___wmul@multiplier+1,f,c
 11572  002C8E  0E00               	movlw	0
 11573  002C90  6E14               	movwf	___wmul@multiplicand+1,c
 11574  002C92  0E05               	movlw	5
 11575  002C94  6E13               	movwf	___wmul@multiplicand,c
 11576  002C96  ECE9  F024         	call	___wmul	;wreg free
 11577  002C9A  5038               	movf	drawChar@i,w,c
 11578  002C9C  2611               	addwf	?___wmul,f,c
 11579  002C9E  0E00               	movlw	0
 11580  002CA0  2212               	addwfc	?___wmul+1,f,c
 11581  002CA2  0EC1               	movlw	low _font
 11582  002CA4  2411               	addwf	?___wmul,w,c
 11583  002CA6  6EF6               	movwf	tblptrl,c
 11584  002CA8  0EFB               	movlw	high _font
 11585  002CAA  D014               	goto	L7
 11586  002CAC                     l8722:
 11587                           
 11588                           ;ST7735_TFT.c: 407: else
 11589                           ;ST7735_TFT.c: 408: line = font2[(c - 'S')*5 + i];
 11590  002CAC  0EAD               	movlw	173
 11591  002CAE  242F               	addwf	drawChar@c,w,c
 11592  002CB0  6E11               	movwf	___wmul@multiplier,c
 11593  002CB2  6A12               	clrf	___wmul@multiplier+1,c
 11594  002CB4  0EFF               	movlw	255
 11595  002CB6  2212               	addwfc	___wmul@multiplier+1,f,c
 11596  002CB8  0E00               	movlw	0
 11597  002CBA  6E14               	movwf	___wmul@multiplicand+1,c
 11598  002CBC  0E05               	movlw	5
 11599  002CBE  6E13               	movwf	___wmul@multiplicand,c
 11600  002CC0  ECE9  F024         	call	___wmul	;wreg free
 11601  002CC4  5038               	movf	drawChar@i,w,c
 11602  002CC6  2611               	addwf	?___wmul,f,c
 11603  002CC8  0E00               	movlw	0
 11604  002CCA  2212               	addwfc	?___wmul+1,f,c
 11605  002CCC  0EC0               	movlw	low _font2
 11606  002CCE  2411               	addwf	?___wmul,w,c
 11607  002CD0  6EF6               	movwf	tblptrl,c
 11608  002CD2  0EFC               	movlw	high _font2
 11609  002CD4                     L7:
 11610  002CD4  2012               	addwfc	?___wmul+1,w,c
 11611  002CD6  6EF7               	movwf	tblptrh,c
 11612  002CD8                     	if	0	;There are less than 3 active tblptr bytes
 11613  002CD8                     	endif
 11614  002CD8  0008               	tblrd		*
 11615  002CDA  CFF5 F035          	movff	tablat,drawChar@line
 11616  002CDE  D000               	goto	l8724
 11617  002CE0                     l8724:
 11618                           
 11619                           ;ST7735_TFT.c: 409: for(j=0; j<7; j++, line >>= 1) {
 11620  002CE0  0E00               	movlw	0
 11621  002CE2  6E37               	movwf	drawChar@j,c
 11622  002CE4                     l8726:
 11623  002CE4  0E06               	movlw	6
 11624  002CE6  6437               	cpfsgt	drawChar@j,c
 11625  002CE8  D001               	goto	l283
 11626  002CEA  D053               	goto	l8750
 11627  002CEC                     l283:
 11628                           
 11629                           ;ST7735_TFT.c: 410: if(line & 0x01) {
 11630  002CEC  A035               	btfss	drawChar@line,0,c
 11631  002CEE  D023               	goto	l8736
 11632                           
 11633                           ;ST7735_TFT.c: 411: if(size == 1) drawPixel(x+i, y+j, color);
 11634  002CF0  0434               	decf	drawChar@size,w,c
 11635  002CF2  A4D8               	btfss	status,2,c
 11636  002CF4  D00C               	goto	l8734
 11637  002CF6  502E               	movf	drawChar@y,w,c
 11638  002CF8  2437               	addwf	drawChar@j,w,c
 11639  002CFA  6E18               	movwf	drawPixel@y,c
 11640  002CFC  C030  F019         	movff	drawChar@color,drawPixel@color
 11641  002D00  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 11642  002D04  5036               	movf	drawChar@x,w,c
 11643  002D06  2438               	addwf	drawChar@i,w,c
 11644  002D08  EC64  F024         	call	_drawPixel
 11645  002D0C  D03E               	goto	l8744
 11646  002D0E                     l8734:
 11647                           
 11648                           ;ST7735_TFT.c: 412: else fillRect(x+(i*size), y+(j*size), size, size, color);
 11649  002D0E  5037               	movf	drawChar@j,w,c
 11650  002D10  0234               	mulwf	drawChar@size,c
 11651  002D12  50F3               	movf	prodl,w,c
 11652  002D14  242E               	addwf	drawChar@y,w,c
 11653  002D16  6E23               	movwf	fillRect@y,c
 11654  002D18  C034  F024         	movff	drawChar@size,fillRect@w
 11655  002D1C  C034  F025         	movff	drawChar@size,fillRect@h
 11656  002D20  C030  F026         	movff	drawChar@color,fillRect@color
 11657  002D24  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 11658  002D28  5038               	movf	drawChar@i,w,c
 11659  002D2A  0234               	mulwf	drawChar@size,c
 11660  002D2C  50F3               	movf	prodl,w,c
 11661  002D2E  2436               	addwf	drawChar@x,w,c
 11662  002D30  EC13  F023         	call	_fillRect
 11663                           
 11664                           ;ST7735_TFT.c: 413: }
 11665  002D34  D02A               	goto	l8744
 11666  002D36                     l8736:
 11667                           
 11668                           ;ST7735_TFT.c: 414: else if(bg != color) {
 11669  002D36  5030               	movf	drawChar@color,w,c
 11670  002D38  1832               	xorwf	drawChar@bg,w,c
 11671  002D3A  E104               	bnz	u7230
 11672  002D3C  5031               	movf	drawChar@color+1,w,c
 11673  002D3E  1833               	xorwf	drawChar@bg+1,w,c
 11674  002D40  B4D8               	btfsc	status,2,c
 11675  002D42  D023               	goto	l8744
 11676  002D44                     u7230:
 11677                           
 11678                           ;ST7735_TFT.c: 415: if(size == 1) drawPixel(x+i, y+j, bg);
 11679  002D44  0434               	decf	drawChar@size,w,c
 11680  002D46  A4D8               	btfss	status,2,c
 11681  002D48  D00C               	goto	l8742
 11682  002D4A  502E               	movf	drawChar@y,w,c
 11683  002D4C  2437               	addwf	drawChar@j,w,c
 11684  002D4E  6E18               	movwf	drawPixel@y,c
 11685  002D50  C032  F019         	movff	drawChar@bg,drawPixel@color
 11686  002D54  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 11687  002D58  5036               	movf	drawChar@x,w,c
 11688  002D5A  2438               	addwf	drawChar@i,w,c
 11689  002D5C  EC64  F024         	call	_drawPixel
 11690  002D60  D014               	goto	l8744
 11691  002D62                     l8742:
 11692                           
 11693                           ;ST7735_TFT.c: 416: else fillRect(x+i*size, y+j*size, size, size, bg);
 11694  002D62  5037               	movf	drawChar@j,w,c
 11695  002D64  0234               	mulwf	drawChar@size,c
 11696  002D66  50F3               	movf	prodl,w,c
 11697  002D68  242E               	addwf	drawChar@y,w,c
 11698  002D6A  6E23               	movwf	fillRect@y,c
 11699  002D6C  C034  F024         	movff	drawChar@size,fillRect@w
 11700  002D70  C034  F025         	movff	drawChar@size,fillRect@h
 11701  002D74  C032  F026         	movff	drawChar@bg,fillRect@color
 11702  002D78  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 11703  002D7C  5038               	movf	drawChar@i,w,c
 11704  002D7E  0234               	mulwf	drawChar@size,c
 11705  002D80  50F3               	movf	prodl,w,c
 11706  002D82  2436               	addwf	drawChar@x,w,c
 11707  002D84  EC13  F023         	call	_fillRect
 11708  002D88  D000               	goto	l8744
 11709  002D8A                     l8744:
 11710  002D8A  2A37               	incf	drawChar@j,f,c
 11711  002D8C  90D8               	bcf	status,0,c
 11712  002D8E  3235               	rrcf	drawChar@line,f,c
 11713  002D90  D7A9               	goto	l8726
 11714  002D92                     l8750:
 11715  002D92  2A38               	incf	drawChar@i,f,c
 11716  002D94  D76F               	goto	l8714
 11717  002D96                     l274:
 11718  002D96  0012               	return		;funcret
 11719  002D98                     __end_of_drawChar:
 11720                           	opt stack 0
 11721                           tblptru	equ	0xFF8
 11722                           tblptrh	equ	0xFF7
 11723                           tblptrl	equ	0xFF6
 11724                           tablat	equ	0xFF5
 11725                           prodh	equ	0xFF4
 11726                           prodl	equ	0xFF3
 11727                           intcon	equ	0xFF2
 11728                           intcon2	equ	0xFF1
 11729                           intcon3	equ	0xFF0
 11730                           postinc0	equ	0xFEE
 11731                           wreg	equ	0xFE8
 11732                           postdec1	equ	0xFE5
 11733                           plusw1	equ	0xFE3
 11734                           fsr1l	equ	0xFE1
 11735                           indf2	equ	0xFDF
 11736                           postinc2	equ	0xFDE
 11737                           plusw2	equ	0xFDB
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function _fillRect *****************
 11743 ;; Defined at:
 11744 ;;		line 385 in file "ST7735_TFT.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  x               1    wreg     unsigned char 
 11747 ;;  y               1   34[COMRAM] unsigned char 
 11748 ;;  w               1   35[COMRAM] unsigned char 
 11749 ;;  h               1   36[COMRAM] unsigned char 
 11750 ;;  color           2   37[COMRAM] unsigned int 
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;  x               1   42[COMRAM] unsigned char 
 11753 ;;  i               2   43[COMRAM] int 
 11754 ;; Return value:  Size  Location     Type
 11755 ;;		None               void
 11756 ;; Registers used:
 11757 ;;		wreg, status,2, status,0, cstack
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11763 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11765 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11766 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11767 ;;Total ram usage:       11 bytes
 11768 ;; Hardware stack levels used:    1
 11769 ;; Hardware stack levels required when called:    7
 11770 ;; This function calls:
 11771 ;;		_drawFastVLine
 11772 ;; This function is called by:
 11773 ;;		_drawChar
 11774 ;;		_Initialize_Setup_Time_Screen
 11775 ;;		_Update_Setup_Screen_Cursor_Forward
 11776 ;;		_Update_Setup_Screen_Cursor_Backward
 11777 ;; This function uses a non-reentrant model
 11778 ;;
 11779                           
 11780                           	psect	text48
 11781  004626                     __ptext48:
 11782                           	opt stack 0
 11783  004626                     _fillRect:
 11784                           	opt stack 20
 11785                           
 11786                           ;incstack = 0
 11787                           ;fillRect@x stored from wreg
 11788  004626  6E2B               	movwf	fillRect@x,c
 11789                           
 11790                           ;ST7735_TFT.c: 387: signed int i;
 11791                           ;ST7735_TFT.c: 389: for (i = x; i < x + w; i++)
 11792  004628  C02B  F02C         	movff	fillRect@x,fillRect@i
 11793  00462C  6A2D               	clrf	fillRect@i+1,c
 11794  00462E  D00E               	goto	l5396
 11795  004630                     l5392:
 11796                           
 11797                           ;ST7735_TFT.c: 390: {
 11798                           ;ST7735_TFT.c: 391: drawFastVLine(i, y, h, color);
 11799  004630  C023  F018         	movff	fillRect@y,drawFastVLine@y
 11800  004634  C025  F019         	movff	fillRect@h,drawFastVLine@h
 11801  004638  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 11802  00463C  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 11803  004640  502C               	movf	fillRect@i,w,c
 11804  004642  ECAF  F01F         	call	_drawFastVLine
 11805  004646  4A2C               	infsnz	fillRect@i,f,c
 11806  004648  2A2D               	incf	fillRect@i+1,f,c
 11807  00464A  D000               	goto	l5396
 11808  00464C                     l5396:
 11809  00464C  5024               	movf	fillRect@w,w,c
 11810  00464E  C02B  F028         	movff	fillRect@x,??_fillRect
 11811  004652  6A29               	clrf	(??_fillRect+1)& (0+255),c
 11812  004654  2628               	addwf	??_fillRect,f,c
 11813  004656  0E00               	movlw	0
 11814  004658  2229               	addwfc	??_fillRect+1,f,c
 11815  00465A  5028               	movf	??_fillRect,w,c
 11816  00465C  5C2C               	subwf	fillRect@i,w,c
 11817  00465E  502D               	movf	fillRect@i+1,w,c
 11818  004660  0A80               	xorlw	128
 11819  004662  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 11820  004664  5029               	movf	??_fillRect+1,w,c
 11821  004666  0A80               	xorlw	128
 11822  004668  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 11823  00466A  A0D8               	btfss	status,0,c
 11824  00466C  D7E1               	goto	l5392
 11825  00466E  0012               	return		;funcret
 11826  004670                     __end_of_fillRect:
 11827                           	opt stack 0
 11828                           tblptru	equ	0xFF8
 11829                           tblptrh	equ	0xFF7
 11830                           tblptrl	equ	0xFF6
 11831                           tablat	equ	0xFF5
 11832                           prodh	equ	0xFF4
 11833                           prodl	equ	0xFF3
 11834                           intcon	equ	0xFF2
 11835                           intcon2	equ	0xFF1
 11836                           intcon3	equ	0xFF0
 11837                           postinc0	equ	0xFEE
 11838                           wreg	equ	0xFE8
 11839                           postdec1	equ	0xFE5
 11840                           plusw1	equ	0xFE3
 11841                           fsr1l	equ	0xFE1
 11842                           indf2	equ	0xFDF
 11843                           postinc2	equ	0xFDE
 11844                           plusw2	equ	0xFDB
 11845                           fsr2h	equ	0xFDA
 11846                           fsr2l	equ	0xFD9
 11847                           status	equ	0xFD8
 11848                           
 11849 ;; *************** function _drawFastVLine *****************
 11850 ;; Defined at:
 11851 ;;		line 364 in file "ST7735_TFT.c"
 11852 ;; Parameters:    Size  Location     Type
 11853 ;;  x               1    wreg     unsigned char 
 11854 ;;  y               1   23[COMRAM] unsigned char 
 11855 ;;  h               1   24[COMRAM] unsigned char 
 11856 ;;  color           2   25[COMRAM] unsigned int 
 11857 ;; Auto vars:     Size  Location     Type
 11858 ;;  x               1   33[COMRAM] unsigned char 
 11859 ;;  lo              1   32[COMRAM] unsigned char 
 11860 ;;  hi              1   31[COMRAM] unsigned char 
 11861 ;; Return value:  Size  Location     Type
 11862 ;;		None               void
 11863 ;; Registers used:
 11864 ;;		wreg, status,2, status,0, cstack
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/0
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11870 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11871 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11872 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11873 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11874 ;;Total ram usage:       11 bytes
 11875 ;; Hardware stack levels used:    1
 11876 ;; Hardware stack levels required when called:    6
 11877 ;; This function calls:
 11878 ;;		_setAddrWindow
 11879 ;;		_spiwrite
 11880 ;; This function is called by:
 11881 ;;		_fillRect
 11882 ;;		_fillCircleHelper
 11883 ;;		_fillCircle
 11884 ;;		_drawRect
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           	psect	text49
 11889  003F5E                     __ptext49:
 11890                           	opt stack 0
 11891  003F5E                     _drawFastVLine:
 11892                           	opt stack 20
 11893                           
 11894                           ;incstack = 0
 11895                           ;drawFastVLine@x stored from wreg
 11896  003F5E  6E22               	movwf	drawFastVLine@x,c
 11897                           
 11898                           ;ST7735_TFT.c: 366: unsigned char hi, lo;
 11899                           ;ST7735_TFT.c: 367: if((x >= 128) || (y >= 160))
 11900  003F60  0E80               	movlw	128
 11901  003F62  6022               	cpfslt	drawFastVLine@x,c
 11902  003F64  D03F               	goto	l258
 11903  003F66  0E9F               	movlw	159
 11904  003F68  6418               	cpfsgt	drawFastVLine@y,c
 11905  003F6A  D001               	goto	l5296
 11906                           
 11907                           ;ST7735_TFT.c: 368: return;
 11908  003F6C  D03B               	goto	l258
 11909  003F6E                     l5296:
 11910                           
 11911                           ;ST7735_TFT.c: 369: if((y + h - 1) >= 160)
 11912  003F6E  0EFF               	movlw	255
 11913  003F70  6E1C               	movwf	??_drawFastVLine& (0+255),c
 11914  003F72  0EFF               	movlw	255
 11915  003F74  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 11916  003F76  5019               	movf	drawFastVLine@h,w,c
 11917  003F78  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 11918  003F7C  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 11919  003F7E  261E               	addwf	??_drawFastVLine+2,f,c
 11920  003F80  0E00               	movlw	0
 11921  003F82  221F               	addwfc	??_drawFastVLine+3,f,c
 11922  003F84  501C               	movf	??_drawFastVLine,w,c
 11923  003F86  261E               	addwf	??_drawFastVLine+2,f,c
 11924  003F88  501D               	movf	??_drawFastVLine+1,w,c
 11925  003F8A  221F               	addwfc	??_drawFastVLine+3,f,c
 11926  003F8C  BE1F               	btfsc	??_drawFastVLine+3,7,c
 11927  003F8E  D00B               	goto	l5300
 11928  003F90  501F               	movf	??_drawFastVLine+3,w,c
 11929  003F92  E104               	bnz	u3360
 11930  003F94  0EA0               	movlw	160
 11931  003F96  5C1E               	subwf	??_drawFastVLine+2,w,c
 11932  003F98  A0D8               	btfss	status,0,c
 11933  003F9A  D005               	goto	l5300
 11934  003F9C                     u3360:
 11935                           
 11936                           ;ST7735_TFT.c: 370: h = 160 - y;
 11937  003F9C  5018               	movf	drawFastVLine@y,w,c
 11938  003F9E  0800               	sublw	0
 11939  003FA0  0FA0               	addlw	160
 11940  003FA2  6E19               	movwf	drawFastVLine@h,c
 11941  003FA4  D000               	goto	l5300
 11942  003FA6                     l5300:
 11943                           
 11944                           ;ST7735_TFT.c: 371: hi = color >> 8; lo = color;
 11945  003FA6  501B               	movf	drawFastVLine@color+1,w,c
 11946  003FA8  6E20               	movwf	drawFastVLine@hi,c
 11947  003FAA  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 11948                           
 11949                           ;ST7735_TFT.c: 372: setAddrWindow(x, y, x, y + h - 1);
 11950  003FAE  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 11951  003FB2  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 11952  003FB6  5018               	movf	drawFastVLine@y,w,c
 11953  003FB8  2419               	addwf	drawFastVLine@h,w,c
 11954  003FBA  6E1C               	movwf	??_drawFastVLine& (0+255),c
 11955  003FBC  041C               	decf	??_drawFastVLine,w,c
 11956  003FBE  6E16               	movwf	setAddrWindow@y1,c
 11957  003FC0  5022               	movf	drawFastVLine@x,w,c
 11958  003FC2  EC4A  F022         	call	_setAddrWindow
 11959                           
 11960                           ;ST7735_TFT.c: 373: PORTDbits.RD7 = 1;
 11961  003FC6  8E83               	bsf	3971,7,c	;volatile
 11962                           
 11963                           ;ST7735_TFT.c: 374: PORTCbits.RC4 = 0;
 11964  003FC8  9882               	bcf	3970,4,c	;volatile
 11965                           
 11966                           ;ST7735_TFT.c: 376: while (h--) {
 11967  003FCA  D007               	goto	l5312
 11968  003FCC                     l5310:
 11969                           
 11970                           ;ST7735_TFT.c: 377: spiwrite(hi);
 11971  003FCC  5020               	movf	drawFastVLine@hi,w,c
 11972  003FCE  EC71  F026         	call	_spiwrite
 11973                           
 11974                           ;ST7735_TFT.c: 378: spiwrite(lo);
 11975  003FD2  5021               	movf	drawFastVLine@lo,w,c
 11976  003FD4  EC71  F026         	call	_spiwrite
 11977  003FD8  D000               	goto	l5312
 11978  003FDA                     l5312:
 11979  003FDA  0619               	decf	drawFastVLine@h,f,c
 11980  003FDC  2819               	incf	drawFastVLine@h,w,c
 11981  003FDE  A4D8               	btfss	status,2,c
 11982  003FE0  D7F5               	goto	l5310
 11983                           
 11984                           ;ST7735_TFT.c: 379: }
 11985                           ;ST7735_TFT.c: 380: PORTCbits.RC4 = 1;
 11986  003FE2  8882               	bsf	3970,4,c	;volatile
 11987  003FE4                     l258:
 11988  003FE4  0012               	return		;funcret
 11989  003FE6                     __end_of_drawFastVLine:
 11990                           	opt stack 0
 11991                           tblptru	equ	0xFF8
 11992                           tblptrh	equ	0xFF7
 11993                           tblptrl	equ	0xFF6
 11994                           tablat	equ	0xFF5
 11995                           prodh	equ	0xFF4
 11996                           prodl	equ	0xFF3
 11997                           intcon	equ	0xFF2
 11998                           intcon2	equ	0xFF1
 11999                           intcon3	equ	0xFF0
 12000                           postinc0	equ	0xFEE
 12001                           wreg	equ	0xFE8
 12002                           postdec1	equ	0xFE5
 12003                           plusw1	equ	0xFE3
 12004                           fsr1l	equ	0xFE1
 12005                           indf2	equ	0xFDF
 12006                           postinc2	equ	0xFDE
 12007                           plusw2	equ	0xFDB
 12008                           fsr2h	equ	0xFDA
 12009                           fsr2l	equ	0xFD9
 12010                           status	equ	0xFD8
 12011                           
 12012 ;; *************** function _drawPixel *****************
 12013 ;; Defined at:
 12014 ;;		line 355 in file "ST7735_TFT.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;  x               1    wreg     unsigned char 
 12017 ;;  y               1   23[COMRAM] unsigned char 
 12018 ;;  color           2   24[COMRAM] unsigned int 
 12019 ;; Auto vars:     Size  Location     Type
 12020 ;;  x               1   26[COMRAM] unsigned char 
 12021 ;; Return value:  Size  Location     Type
 12022 ;;		None               void
 12023 ;; Registers used:
 12024 ;;		wreg, status,2, status,0, cstack
 12025 ;; Tracked objects:
 12026 ;;		On entry : 0/0
 12027 ;;		On exit  : 0/0
 12028 ;;		Unchanged: 0/0
 12029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12030 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12033 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12034 ;;Total ram usage:        4 bytes
 12035 ;; Hardware stack levels used:    1
 12036 ;; Hardware stack levels required when called:    6
 12037 ;; This function calls:
 12038 ;;		_setAddrWindow
 12039 ;;		_write_data
 12040 ;; This function is called by:
 12041 ;;		_drawChar
 12042 ;;		_drawCircle
 12043 ;;		_drawCircleHelper
 12044 ;; This function uses a non-reentrant model
 12045 ;;
 12046                           
 12047                           	psect	text50
 12048  0048C8                     __ptext50:
 12049                           	opt stack 0
 12050  0048C8                     _drawPixel:
 12051                           	opt stack 21
 12052                           
 12053                           ;incstack = 0
 12054                           ;drawPixel@x stored from wreg
 12055  0048C8  6E1B               	movwf	drawPixel@x,c
 12056                           
 12057                           ;ST7735_TFT.c: 357: if((x >= 128) || (y >= 160))
 12058  0048CA  0E80               	movlw	128
 12059  0048CC  601B               	cpfslt	drawPixel@x,c
 12060  0048CE  D013               	goto	l252
 12061  0048D0  0E9F               	movlw	159
 12062  0048D2  6418               	cpfsgt	drawPixel@y,c
 12063  0048D4  D001               	goto	l5384
 12064                           
 12065                           ;ST7735_TFT.c: 358: return;
 12066  0048D6  D00F               	goto	l252
 12067  0048D8                     l5384:
 12068                           
 12069                           ;ST7735_TFT.c: 359: setAddrWindow(x,y,x+1,y+1);
 12070  0048D8  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 12071  0048DC  281B               	incf	drawPixel@x,w,c
 12072  0048DE  6E15               	movwf	setAddrWindow@x1,c
 12073  0048E0  2818               	incf	drawPixel@y,w,c
 12074  0048E2  6E16               	movwf	setAddrWindow@y1,c
 12075  0048E4  501B               	movf	drawPixel@x,w,c
 12076  0048E6  EC4A  F022         	call	_setAddrWindow
 12077                           
 12078                           ;ST7735_TFT.c: 360: write_data(color >> 8);
 12079  0048EA  501A               	movf	drawPixel@color+1,w,c
 12080  0048EC  ECCC  F026         	call	_write_data
 12081                           
 12082                           ;ST7735_TFT.c: 361: write_data(color & 0xFF);
 12083  0048F0  5019               	movf	drawPixel@color,w,c
 12084  0048F2  ECCC  F026         	call	_write_data
 12085  0048F6                     l252:
 12086  0048F6  0012               	return		;funcret
 12087  0048F8                     __end_of_drawPixel:
 12088                           	opt stack 0
 12089                           tblptru	equ	0xFF8
 12090                           tblptrh	equ	0xFF7
 12091                           tblptrl	equ	0xFF6
 12092                           tablat	equ	0xFF5
 12093                           prodh	equ	0xFF4
 12094                           prodl	equ	0xFF3
 12095                           intcon	equ	0xFF2
 12096                           intcon2	equ	0xFF1
 12097                           intcon3	equ	0xFF0
 12098                           postinc0	equ	0xFEE
 12099                           wreg	equ	0xFE8
 12100                           postdec1	equ	0xFE5
 12101                           plusw1	equ	0xFE3
 12102                           fsr1l	equ	0xFE1
 12103                           indf2	equ	0xFDF
 12104                           postinc2	equ	0xFDE
 12105                           plusw2	equ	0xFDB
 12106                           fsr2h	equ	0xFDA
 12107                           fsr2l	equ	0xFD9
 12108                           status	equ	0xFD8
 12109                           
 12110 ;; *************** function _setAddrWindow *****************
 12111 ;; Defined at:
 12112 ;;		line 340 in file "ST7735_TFT.c"
 12113 ;; Parameters:    Size  Location     Type
 12114 ;;  x0              1    wreg     unsigned char 
 12115 ;;  y0              1   19[COMRAM] unsigned char 
 12116 ;;  x1              1   20[COMRAM] unsigned char 
 12117 ;;  y1              1   21[COMRAM] unsigned char 
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;  x0              1   22[COMRAM] unsigned char 
 12120 ;; Return value:  Size  Location     Type
 12121 ;;		None               void
 12122 ;; Registers used:
 12123 ;;		wreg, status,2, status,0, cstack
 12124 ;; Tracked objects:
 12125 ;;		On entry : 0/0
 12126 ;;		On exit  : 0/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12129 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12133 ;;Total ram usage:        4 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:    5
 12136 ;; This function calls:
 12137 ;;		_write_command
 12138 ;;		_write_data
 12139 ;; This function is called by:
 12140 ;;		_drawPixel
 12141 ;;		_drawFastVLine
 12142 ;;		_fillRectangle
 12143 ;;		_drawFastHLine
 12144 ;; This function uses a non-reentrant model
 12145 ;;
 12146                           
 12147                           	psect	text51
 12148  004494                     __ptext51:
 12149                           	opt stack 0
 12150  004494                     _setAddrWindow:
 12151                           	opt stack 20
 12152                           
 12153                           ;incstack = 0
 12154                           ;setAddrWindow@x0 stored from wreg
 12155  004494  6E17               	movwf	setAddrWindow@x0,c
 12156                           
 12157                           ;ST7735_TFT.c: 342: write_command(0x2A);
 12158  004496  0E2A               	movlw	42
 12159  004498  ECD4  F026         	call	_write_command
 12160                           
 12161                           ;ST7735_TFT.c: 343: write_data(0);
 12162  00449C  0E00               	movlw	0
 12163  00449E  ECCC  F026         	call	_write_data
 12164                           
 12165                           ;ST7735_TFT.c: 344: write_data(x0 + colstart);
 12166  0044A2  5017               	movf	setAddrWindow@x0,w,c
 12167  0044A4  0100               	movlb	0	; () banked
 12168  0044A6  25CE               	addwf	_colstart& (0+255),w,b
 12169  0044A8  ECCC  F026         	call	_write_data
 12170                           
 12171                           ;ST7735_TFT.c: 345: write_data(0);
 12172  0044AC  0E00               	movlw	0
 12173  0044AE  ECCC  F026         	call	_write_data
 12174                           
 12175                           ;ST7735_TFT.c: 346: write_data(x1 + colstart);
 12176  0044B2  5015               	movf	setAddrWindow@x1,w,c
 12177  0044B4  0100               	movlb	0	; () banked
 12178  0044B6  25CE               	addwf	_colstart& (0+255),w,b
 12179  0044B8  ECCC  F026         	call	_write_data
 12180                           
 12181                           ;ST7735_TFT.c: 347: write_command(0x2B);
 12182  0044BC  0E2B               	movlw	43
 12183  0044BE  ECD4  F026         	call	_write_command
 12184                           
 12185                           ;ST7735_TFT.c: 348: write_data(0);
 12186  0044C2  0E00               	movlw	0
 12187  0044C4  ECCC  F026         	call	_write_data
 12188                           
 12189                           ;ST7735_TFT.c: 349: write_data(y0 + rowstart);
 12190  0044C8  5014               	movf	setAddrWindow@y0,w,c
 12191  0044CA  0100               	movlb	0	; () banked
 12192  0044CC  25D2               	addwf	_rowstart& (0+255),w,b
 12193  0044CE  ECCC  F026         	call	_write_data
 12194                           
 12195                           ;ST7735_TFT.c: 350: write_data(0);
 12196  0044D2  0E00               	movlw	0
 12197  0044D4  ECCC  F026         	call	_write_data
 12198                           
 12199                           ;ST7735_TFT.c: 351: write_data(y1 + rowstart);
 12200  0044D8  5016               	movf	setAddrWindow@y1,w,c
 12201  0044DA  0100               	movlb	0	; () banked
 12202  0044DC  25D2               	addwf	_rowstart& (0+255),w,b
 12203  0044DE  ECCC  F026         	call	_write_data
 12204                           
 12205                           ;ST7735_TFT.c: 352: write_command(0x2C);
 12206  0044E2  0E2C               	movlw	44
 12207  0044E4  ECD4  F026         	call	_write_command
 12208  0044E8  0012               	return		;funcret
 12209  0044EA                     __end_of_setAddrWindow:
 12210                           	opt stack 0
 12211                           tblptru	equ	0xFF8
 12212                           tblptrh	equ	0xFF7
 12213                           tblptrl	equ	0xFF6
 12214                           tablat	equ	0xFF5
 12215                           prodh	equ	0xFF4
 12216                           prodl	equ	0xFF3
 12217                           intcon	equ	0xFF2
 12218                           intcon2	equ	0xFF1
 12219                           intcon3	equ	0xFF0
 12220                           postinc0	equ	0xFEE
 12221                           wreg	equ	0xFE8
 12222                           postdec1	equ	0xFE5
 12223                           plusw1	equ	0xFE3
 12224                           fsr1l	equ	0xFE1
 12225                           indf2	equ	0xFDF
 12226                           postinc2	equ	0xFDE
 12227                           plusw2	equ	0xFDB
 12228                           fsr2h	equ	0xFDA
 12229                           fsr2l	equ	0xFD9
 12230                           status	equ	0xFD8
 12231                           
 12232 ;; *************** function _write_data *****************
 12233 ;; Defined at:
 12234 ;;		line 157 in file "ST7735_TFT.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;  data_           1    wreg     unsigned char 
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;  data_           1   18[COMRAM] unsigned char 
 12239 ;; Return value:  Size  Location     Type
 12240 ;;		None               void
 12241 ;; Registers used:
 12242 ;;		wreg, status,2, cstack
 12243 ;; Tracked objects:
 12244 ;;		On entry : 0/0
 12245 ;;		On exit  : 0/0
 12246 ;;		Unchanged: 0/0
 12247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12252 ;;Total ram usage:        1 bytes
 12253 ;; Hardware stack levels used:    1
 12254 ;; Hardware stack levels required when called:    4
 12255 ;; This function calls:
 12256 ;;		_spiwrite
 12257 ;; This function is called by:
 12258 ;;		_Rcmd1
 12259 ;;		_Rcmd2red
 12260 ;;		_Rcmd3
 12261 ;;		_setAddrWindow
 12262 ;;		_drawPixel
 12263 ;;		_TFT_GreenTab_Initialize
 12264 ;;		_Bcmd
 12265 ;;		_setScrollDefinition
 12266 ;;		_Rcmd2green
 12267 ;;		_VerticalScroll
 12268 ;; This function uses a non-reentrant model
 12269 ;;
 12270                           
 12271                           	psect	text52
 12272  004D98                     __ptext52:
 12273                           	opt stack 0
 12274  004D98                     _write_data:
 12275                           	opt stack 20
 12276                           
 12277                           ;incstack = 0
 12278                           ;write_data@data_ stored from wreg
 12279  004D98  6E13               	movwf	write_data@data_,c
 12280                           
 12281                           ;ST7735_TFT.c: 159: PORTCbits.RC4 = 0;
 12282  004D9A  9882               	bcf	3970,4,c	;volatile
 12283                           
 12284                           ;ST7735_TFT.c: 160: PORTDbits.RD7 = 1;
 12285  004D9C  8E83               	bsf	3971,7,c	;volatile
 12286                           
 12287                           ;ST7735_TFT.c: 161: spiwrite(data_);
 12288  004D9E  5013               	movf	write_data@data_,w,c
 12289  004DA0  EC71  F026         	call	_spiwrite
 12290                           
 12291                           ;ST7735_TFT.c: 162: PORTCbits.RC4 = 1;
 12292  004DA4  8882               	bsf	3970,4,c	;volatile
 12293  004DA6  0012               	return		;funcret
 12294  004DA8                     __end_of_write_data:
 12295                           	opt stack 0
 12296                           tblptru	equ	0xFF8
 12297                           tblptrh	equ	0xFF7
 12298                           tblptrl	equ	0xFF6
 12299                           tablat	equ	0xFF5
 12300                           prodh	equ	0xFF4
 12301                           prodl	equ	0xFF3
 12302                           intcon	equ	0xFF2
 12303                           intcon2	equ	0xFF1
 12304                           intcon3	equ	0xFF0
 12305                           postinc0	equ	0xFEE
 12306                           wreg	equ	0xFE8
 12307                           postdec1	equ	0xFE5
 12308                           plusw1	equ	0xFE3
 12309                           fsr1l	equ	0xFE1
 12310                           indf2	equ	0xFDF
 12311                           postinc2	equ	0xFDE
 12312                           plusw2	equ	0xFDB
 12313                           fsr2h	equ	0xFDA
 12314                           fsr2l	equ	0xFD9
 12315                           status	equ	0xFD8
 12316                           
 12317 ;; *************** function _write_command *****************
 12318 ;; Defined at:
 12319 ;;		line 146 in file "ST7735_TFT.c"
 12320 ;; Parameters:    Size  Location     Type
 12321 ;;  cmd_            1    wreg     unsigned char 
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;  cmd_            1   18[COMRAM] unsigned char 
 12324 ;; Return value:  Size  Location     Type
 12325 ;;		None               void
 12326 ;; Registers used:
 12327 ;;		wreg, status,2, cstack
 12328 ;; Tracked objects:
 12329 ;;		On entry : 0/0
 12330 ;;		On exit  : 0/0
 12331 ;;		Unchanged: 0/0
 12332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12336 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;Total ram usage:        1 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; Hardware stack levels required when called:    4
 12340 ;; This function calls:
 12341 ;;		_spiwrite
 12342 ;; This function is called by:
 12343 ;;		_Rcmd1
 12344 ;;		_Rcmd2red
 12345 ;;		_Rcmd3
 12346 ;;		_setAddrWindow
 12347 ;;		_TFT_GreenTab_Initialize
 12348 ;;		_Bcmd
 12349 ;;		_setScrollDefinition
 12350 ;;		_Rcmd2green
 12351 ;;		_VerticalScroll
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           	psect	text53
 12356  004DA8                     __ptext53:
 12357                           	opt stack 0
 12358  004DA8                     _write_command:
 12359                           	opt stack 20
 12360                           
 12361                           ;incstack = 0
 12362                           ;write_command@cmd_ stored from wreg
 12363  004DA8  6E13               	movwf	write_command@cmd_,c
 12364                           
 12365                           ;ST7735_TFT.c: 148: PORTCbits.RC4 = 0;
 12366  004DAA  9882               	bcf	3970,4,c	;volatile
 12367                           
 12368                           ;ST7735_TFT.c: 150: PORTDbits.RD7 = 0;
 12369  004DAC  9E83               	bcf	3971,7,c	;volatile
 12370                           
 12371                           ;ST7735_TFT.c: 151: spiwrite(cmd_);
 12372  004DAE  5013               	movf	write_command@cmd_,w,c
 12373  004DB0  EC71  F026         	call	_spiwrite
 12374                           
 12375                           ;ST7735_TFT.c: 153: PORTCbits.RC4 = 1;
 12376  004DB4  8882               	bsf	3970,4,c	;volatile
 12377  004DB6  0012               	return		;funcret
 12378  004DB8                     __end_of_write_command:
 12379                           	opt stack 0
 12380                           tblptru	equ	0xFF8
 12381                           tblptrh	equ	0xFF7
 12382                           tblptrl	equ	0xFF6
 12383                           tablat	equ	0xFF5
 12384                           prodh	equ	0xFF4
 12385                           prodl	equ	0xFF3
 12386                           intcon	equ	0xFF2
 12387                           intcon2	equ	0xFF1
 12388                           intcon3	equ	0xFF0
 12389                           postinc0	equ	0xFEE
 12390                           wreg	equ	0xFE8
 12391                           postdec1	equ	0xFE5
 12392                           plusw1	equ	0xFE3
 12393                           fsr1l	equ	0xFE1
 12394                           indf2	equ	0xFDF
 12395                           postinc2	equ	0xFDE
 12396                           plusw2	equ	0xFDB
 12397                           fsr2h	equ	0xFDA
 12398                           fsr2l	equ	0xFD9
 12399                           status	equ	0xFD8
 12400                           
 12401 ;; *************** function _spiwrite *****************
 12402 ;; Defined at:
 12403 ;;		line 137 in file "ST7735_TFT.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;  spidata         1    wreg     unsigned char 
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;  spidata         1   17[COMRAM] unsigned char 
 12408 ;;  x               1   16[COMRAM] unsigned char 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;		None               void
 12411 ;; Registers used:
 12412 ;;		wreg
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12421 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;Total ram usage:        2 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    3
 12425 ;; This function calls:
 12426 ;;		Nothing
 12427 ;; This function is called by:
 12428 ;;		_write_command
 12429 ;;		_write_data
 12430 ;;		_drawFastVLine
 12431 ;;		_fillRectangle
 12432 ;;		_drawFastHLine
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text54
 12437  004CE2                     __ptext54:
 12438                           	opt stack 0
 12439  004CE2                     _spiwrite:
 12440                           	opt stack 22
 12441                           
 12442                           ;incstack = 0
 12443                           ;spiwrite@spidata stored from wreg
 12444  004CE2  6E12               	movwf	spiwrite@spidata,c
 12445                           
 12446                           ;ST7735_TFT.c: 139: char x;
 12447                           ;ST7735_TFT.c: 140: PIR1bits.SSPIF = 0;
 12448  004CE4  969E               	bcf	3998,3,c	;volatile
 12449                           
 12450                           ;ST7735_TFT.c: 141: x = SSPBUF;
 12451  004CE6  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 12452                           
 12453                           ;ST7735_TFT.c: 142: SSPBUF = spidata;
 12454  004CEA  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 12455                           
 12456                           ;ST7735_TFT.c: 143: while (!SSPSTATbits.BF);
 12457  004CEE  D000               	goto	l208
 12458  004CF0                     l208:
 12459  004CF0  A0C7               	btfss	4039,0,c	;volatile
 12460  004CF2  D7FE               	goto	l208
 12461  004CF4  0012               	return		;funcret
 12462  004CF6                     __end_of_spiwrite:
 12463                           	opt stack 0
 12464                           tblptru	equ	0xFF8
 12465                           tblptrh	equ	0xFF7
 12466                           tblptrl	equ	0xFF6
 12467                           tablat	equ	0xFF5
 12468                           prodh	equ	0xFF4
 12469                           prodl	equ	0xFF3
 12470                           intcon	equ	0xFF2
 12471                           intcon2	equ	0xFF1
 12472                           intcon3	equ	0xFF0
 12473                           postinc0	equ	0xFEE
 12474                           wreg	equ	0xFE8
 12475                           postdec1	equ	0xFE5
 12476                           plusw1	equ	0xFE3
 12477                           fsr1l	equ	0xFE1
 12478                           indf2	equ	0xFDF
 12479                           postinc2	equ	0xFDE
 12480                           plusw2	equ	0xFDB
 12481                           fsr2h	equ	0xFDA
 12482                           fsr2l	equ	0xFD9
 12483                           status	equ	0xFD8
 12484                           
 12485 ;; *************** function _DS1621_Read_Temp *****************
 12486 ;; Defined at:
 12487 ;;		line 27 in file "I2C_Support.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;		None
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;  Device          1   23[COMRAM] unsigned char 
 12492 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 12493 ;;  Cmd             1   21[COMRAM] unsigned char 
 12494 ;; Return value:  Size  Location     Type
 12495 ;;                  2   19[COMRAM] int 
 12496 ;; Registers used:
 12497 ;;		wreg, status,2, status,0, cstack
 12498 ;; Tracked objects:
 12499 ;;		On entry : 0/0
 12500 ;;		On exit  : 0/0
 12501 ;;		Unchanged: 0/0
 12502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12504 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12506 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12507 ;;Total ram usage:        5 bytes
 12508 ;; Hardware stack levels used:    1
 12509 ;; Hardware stack levels required when called:    6
 12510 ;; This function calls:
 12511 ;;		_I2C_ReStart
 12512 ;;		_I2C_Read
 12513 ;;		_I2C_Start
 12514 ;;		_I2C_Stop
 12515 ;;		_I2C_Write
 12516 ;; This function is called by:
 12517 ;;		_main
 12518 ;;		_Setup_Fan_Temp
 12519 ;;		_Do_Setup_Time
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523                           	psect	text55
 12524  00482A                     __ptext55:
 12525                           	opt stack 0
 12526  00482A                     _DS1621_Read_Temp:
 12527                           	opt stack 23
 12528                           
 12529                           ;I2C_Support.c: 30: char Device = 0x48;
 12530                           
 12531                           ;incstack = 0
 12532  00482A  0E48               	movlw	72
 12533  00482C  6E18               	movwf	DS1621_Read_Temp@Device,c
 12534                           
 12535                           ;I2C_Support.c: 31: char Cmd = 0xAA;
 12536  00482E  0EAA               	movlw	170
 12537  004830  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 12538                           
 12539                           ;I2C_Support.c: 32: char Data_Ret;
 12540                           ;I2C_Support.c: 33: I2C_Start();
 12541  004832  ECA0  F026         	call	_I2C_Start	;wreg free
 12542                           
 12543                           ;I2C_Support.c: 34: I2C_Write((Device << 1) | 0);
 12544  004836  5018               	movf	DS1621_Read_Temp@Device,w,c
 12545  004838  2418               	addwf	DS1621_Read_Temp@Device,w,c
 12546  00483A  ECD8  F023         	call	_I2C_Write
 12547                           
 12548                           ;I2C_Support.c: 35: I2C_Write(Cmd);
 12549  00483E  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 12550  004840  ECD8  F023         	call	_I2C_Write
 12551                           
 12552                           ;I2C_Support.c: 36: I2C_ReStart();
 12553  004844  EC52  F026         	call	_I2C_ReStart	;wreg free
 12554                           
 12555                           ;I2C_Support.c: 37: I2C_Write((Device << 1) | 1);
 12556  004848  80D8               	bsf	status,0,c
 12557  00484A  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 12558  00484C  ECD8  F023         	call	_I2C_Write
 12559                           
 12560                           ;I2C_Support.c: 38: Data_Ret = I2C_Read(0);
 12561  004850  0E00               	movlw	0
 12562  004852  EC38  F023         	call	_I2C_Read
 12563  004856  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 12564                           
 12565                           ;I2C_Support.c: 39: I2C_Stop();
 12566  004858  EC97  F026         	call	_I2C_Stop	;wreg free
 12567                           
 12568                           ;I2C_Support.c: 40: return Data_Ret;
 12569  00485C  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 12570  004860  6A15               	clrf	?_DS1621_Read_Temp+1,c
 12571  004862  D000               	goto	l560
 12572  004864                     l560:
 12573  004864  0012               	return		;funcret
 12574  004866                     __end_of_DS1621_Read_Temp:
 12575                           	opt stack 0
 12576                           tblptru	equ	0xFF8
 12577                           tblptrh	equ	0xFF7
 12578                           tblptrl	equ	0xFF6
 12579                           tablat	equ	0xFF5
 12580                           prodh	equ	0xFF4
 12581                           prodl	equ	0xFF3
 12582                           intcon	equ	0xFF2
 12583                           intcon2	equ	0xFF1
 12584                           intcon3	equ	0xFF0
 12585                           postinc0	equ	0xFEE
 12586                           wreg	equ	0xFE8
 12587                           postdec1	equ	0xFE5
 12588                           plusw1	equ	0xFE3
 12589                           fsr1l	equ	0xFE1
 12590                           indf2	equ	0xFDF
 12591                           postinc2	equ	0xFDE
 12592                           plusw2	equ	0xFDB
 12593                           fsr2h	equ	0xFDA
 12594                           fsr2l	equ	0xFD9
 12595                           status	equ	0xFD8
 12596                           
 12597 ;; *************** function _I2C_Read *****************
 12598 ;; Defined at:
 12599 ;;		line 16 in file "I2C_Soft.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;  ack             1    wreg     unsigned char 
 12602 ;; Auto vars:     Size  Location     Type
 12603 ;;  ack             1   16[COMRAM] unsigned char 
 12604 ;;  inByte          1   18[COMRAM] unsigned char 
 12605 ;;  n               1   17[COMRAM] unsigned char 
 12606 ;; Return value:  Size  Location     Type
 12607 ;;                  1    wreg      unsigned char 
 12608 ;; Registers used:
 12609 ;;		wreg, status,2, status,0, cstack
 12610 ;; Tracked objects:
 12611 ;;		On entry : 0/0
 12612 ;;		On exit  : 0/0
 12613 ;;		Unchanged: 0/0
 12614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12616 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12618 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12619 ;;Total ram usage:        3 bytes
 12620 ;; Hardware stack levels used:    1
 12621 ;; Hardware stack levels required when called:    5
 12622 ;; This function calls:
 12623 ;;		_i2cAck
 12624 ;;		_i2cHighScl
 12625 ;;		_i2cHighSda
 12626 ;;		_i2cLowScl
 12627 ;;		_i2cNack
 12628 ;; This function is called by:
 12629 ;;		_DS1621_Read_Temp
 12630 ;;		_DS3231_Read_Time
 12631 ;;		_I2C_Write_Address_Read_One_Byte
 12632 ;;		_I2C_Write_Cmd_Read_One_Byte
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           	psect	text56
 12637  004670                     __ptext56:
 12638                           	opt stack 0
 12639  004670                     _I2C_Read:
 12640                           	opt stack 22
 12641                           
 12642                           ;incstack = 0
 12643                           ;I2C_Read@ack stored from wreg
 12644  004670  6E11               	movwf	I2C_Read@ack,c
 12645                           
 12646                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 12647                           ;I2C_Soft.c: 19: i2cHighSda();
 12648  004672  EC0E  F027         	call	_i2cHighSda	;wreg free
 12649                           
 12650                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 12651  004676  0E00               	movlw	0
 12652  004678  6E12               	movwf	I2C_Read@n,c
 12653  00467A                     l6414:
 12654  00467A  0E07               	movlw	7
 12655  00467C  6412               	cpfsgt	I2C_Read@n,c
 12656  00467E  D001               	goto	l6418
 12657  004680  D00F               	goto	l6432
 12658  004682                     l6418:
 12659                           
 12660                           ;I2C_Soft.c: 21: {
 12661                           ;I2C_Soft.c: 22: i2cHighScl();
 12662  004682  ECEA  F026         	call	_i2cHighScl	;wreg free
 12663                           
 12664                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
 12665  004686  AA81               	btfss	3969,5,c	;volatile
 12666  004688  D003               	goto	l6424
 12667                           
 12668                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 12669  00468A  80D8               	bsf	status,0,c
 12670  00468C  3613               	rlcf	I2C_Read@inByte,f,c
 12671  00468E  D004               	goto	l6426
 12672  004690                     l6424:
 12673                           
 12674                           ;I2C_Soft.c: 26: else
 12675                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 12676  004690  5013               	movf	I2C_Read@inByte,w,c
 12677  004692  2413               	addwf	I2C_Read@inByte,w,c
 12678  004694  6E13               	movwf	I2C_Read@inByte,c
 12679  004696  D000               	goto	l6426
 12680  004698                     l6426:
 12681                           
 12682                           ;I2C_Soft.c: 28: i2cLowScl();
 12683  004698  EC0A  F027         	call	_i2cLowScl	;wreg free
 12684  00469C  2A12               	incf	I2C_Read@n,f,c
 12685  00469E  D7ED               	goto	l6414
 12686  0046A0                     l6432:
 12687                           
 12688                           ;I2C_Soft.c: 29: }
 12689                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 12690  0046A0  5011               	movf	I2C_Read@ack,w,c
 12691  0046A2  B4D8               	btfsc	status,2,c
 12692  0046A4  D003               	goto	l6436
 12693  0046A6  EC8E  F026         	call	_i2cAck	;wreg free
 12694  0046AA  D003               	goto	l6438
 12695  0046AC                     l6436:
 12696                           
 12697                           ;I2C_Soft.c: 31: else i2cNack();
 12698  0046AC  ECF6  F026         	call	_i2cNack	;wreg free
 12699  0046B0  D000               	goto	l6438
 12700  0046B2                     l6438:
 12701                           
 12702                           ;I2C_Soft.c: 34: return(inByte);
 12703  0046B2  5013               	movf	I2C_Read@inByte,w,c
 12704  0046B4  D000               	goto	l112
 12705  0046B6                     l112:
 12706  0046B6  0012               	return		;funcret
 12707  0046B8                     __end_of_I2C_Read:
 12708                           	opt stack 0
 12709                           tblptru	equ	0xFF8
 12710                           tblptrh	equ	0xFF7
 12711                           tblptrl	equ	0xFF6
 12712                           tablat	equ	0xFF5
 12713                           prodh	equ	0xFF4
 12714                           prodl	equ	0xFF3
 12715                           intcon	equ	0xFF2
 12716                           intcon2	equ	0xFF1
 12717                           intcon3	equ	0xFF0
 12718                           postinc0	equ	0xFEE
 12719                           wreg	equ	0xFE8
 12720                           postdec1	equ	0xFE5
 12721                           plusw1	equ	0xFE3
 12722                           fsr1l	equ	0xFE1
 12723                           indf2	equ	0xFDF
 12724                           postinc2	equ	0xFDE
 12725                           plusw2	equ	0xFDB
 12726                           fsr2h	equ	0xFDA
 12727                           fsr2l	equ	0xFD9
 12728                           status	equ	0xFD8
 12729                           
 12730 ;; *************** function _i2cNack *****************
 12731 ;; Defined at:
 12732 ;;		line 53 in file "I2C_Soft.c"
 12733 ;; Parameters:    Size  Location     Type
 12734 ;;		None
 12735 ;; Auto vars:     Size  Location     Type
 12736 ;;		None
 12737 ;; Return value:  Size  Location     Type
 12738 ;;		None               void
 12739 ;; Registers used:
 12740 ;;		wreg, cstack
 12741 ;; Tracked objects:
 12742 ;;		On entry : 0/0
 12743 ;;		On exit  : 0/0
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;Total ram usage:        0 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:    4
 12753 ;; This function calls:
 12754 ;;		_i2cHighScl
 12755 ;;		_i2cLowScl
 12756 ;; This function is called by:
 12757 ;;		_I2C_Read
 12758 ;; This function uses a non-reentrant model
 12759 ;;
 12760                           
 12761                           	psect	text57
 12762  004DEC                     __ptext57:
 12763                           	opt stack 0
 12764  004DEC                     _i2cNack:
 12765                           	opt stack 22
 12766                           
 12767                           ;I2C_Soft.c: 55: i2cHighScl();
 12768                           
 12769                           ;incstack = 0
 12770  004DEC  ECEA  F026         	call	_i2cHighScl	;wreg free
 12771                           
 12772                           ;I2C_Soft.c: 56: i2cLowScl();
 12773  004DF0  EC0A  F027         	call	_i2cLowScl	;wreg free
 12774  004DF4  0012               	return		;funcret
 12775  004DF6                     __end_of_i2cNack:
 12776                           	opt stack 0
 12777                           tblptru	equ	0xFF8
 12778                           tblptrh	equ	0xFF7
 12779                           tblptrl	equ	0xFF6
 12780                           tablat	equ	0xFF5
 12781                           prodh	equ	0xFF4
 12782                           prodl	equ	0xFF3
 12783                           intcon	equ	0xFF2
 12784                           intcon2	equ	0xFF1
 12785                           intcon3	equ	0xFF0
 12786                           postinc0	equ	0xFEE
 12787                           wreg	equ	0xFE8
 12788                           postdec1	equ	0xFE5
 12789                           plusw1	equ	0xFE3
 12790                           fsr1l	equ	0xFE1
 12791                           indf2	equ	0xFDF
 12792                           postinc2	equ	0xFDE
 12793                           plusw2	equ	0xFDB
 12794                           fsr2h	equ	0xFDA
 12795                           fsr2l	equ	0xFD9
 12796                           status	equ	0xFD8
 12797                           
 12798 ;; *************** function _i2cAck *****************
 12799 ;; Defined at:
 12800 ;;		line 59 in file "I2C_Soft.c"
 12801 ;; Parameters:    Size  Location     Type
 12802 ;;		None
 12803 ;; Auto vars:     Size  Location     Type
 12804 ;;		None
 12805 ;; Return value:  Size  Location     Type
 12806 ;;		None               void
 12807 ;; Registers used:
 12808 ;;		wreg, cstack
 12809 ;; Tracked objects:
 12810 ;;		On entry : 0/0
 12811 ;;		On exit  : 0/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;Total ram usage:        0 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; Hardware stack levels required when called:    4
 12821 ;; This function calls:
 12822 ;;		_i2cHighScl
 12823 ;;		_i2cHighSda
 12824 ;;		_i2cLowScl
 12825 ;;		_i2cLowSda
 12826 ;; This function is called by:
 12827 ;;		_I2C_Read
 12828 ;; This function uses a non-reentrant model
 12829 ;;
 12830                           
 12831                           	psect	text58
 12832  004D1C                     __ptext58:
 12833                           	opt stack 0
 12834  004D1C                     _i2cAck:
 12835                           	opt stack 22
 12836                           
 12837                           ;I2C_Soft.c: 61: i2cLowSda();
 12838                           
 12839                           ;incstack = 0
 12840  004D1C  EC00  F027         	call	_i2cLowSda	;wreg free
 12841                           
 12842                           ;I2C_Soft.c: 62: i2cHighScl();
 12843  004D20  ECEA  F026         	call	_i2cHighScl	;wreg free
 12844                           
 12845                           ;I2C_Soft.c: 63: i2cLowScl();
 12846  004D24  EC0A  F027         	call	_i2cLowScl	;wreg free
 12847                           
 12848                           ;I2C_Soft.c: 64: i2cHighSda();
 12849  004D28  EC0E  F027         	call	_i2cHighSda	;wreg free
 12850  004D2C  0012               	return		;funcret
 12851  004D2E                     __end_of_i2cAck:
 12852                           	opt stack 0
 12853                           tblptru	equ	0xFF8
 12854                           tblptrh	equ	0xFF7
 12855                           tblptrl	equ	0xFF6
 12856                           tablat	equ	0xFF5
 12857                           prodh	equ	0xFF4
 12858                           prodl	equ	0xFF3
 12859                           intcon	equ	0xFF2
 12860                           intcon2	equ	0xFF1
 12861                           intcon3	equ	0xFF0
 12862                           postinc0	equ	0xFEE
 12863                           wreg	equ	0xFE8
 12864                           postdec1	equ	0xFE5
 12865                           plusw1	equ	0xFE3
 12866                           fsr1l	equ	0xFE1
 12867                           indf2	equ	0xFDF
 12868                           postinc2	equ	0xFDE
 12869                           plusw2	equ	0xFDB
 12870                           fsr2h	equ	0xFDA
 12871                           fsr2l	equ	0xFD9
 12872                           status	equ	0xFD8
 12873                           
 12874 ;; *************** function _I2C_ReStart *****************
 12875 ;; Defined at:
 12876 ;;		line 75 in file "I2C_Soft.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;		None
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;		None
 12881 ;; Return value:  Size  Location     Type
 12882 ;;		None               void
 12883 ;; Registers used:
 12884 ;;		wreg, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;Total ram usage:        0 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    4
 12897 ;; This function calls:
 12898 ;;		_i2cHighScl
 12899 ;;		_i2cHighSda
 12900 ;;		_i2cLowScl
 12901 ;;		_i2cLowSda
 12902 ;; This function is called by:
 12903 ;;		_DS1621_Read_Temp
 12904 ;;		_DS3231_Read_Time
 12905 ;;		_I2C_Write_Address_Read_One_Byte
 12906 ;;		_I2C_Write_Cmd_Read_One_Byte
 12907 ;;		_DS3231_Init
 12908 ;; This function uses a non-reentrant model
 12909 ;;
 12910                           
 12911                           	psect	text59
 12912  004CA4                     __ptext59:
 12913                           	opt stack 0
 12914  004CA4                     _I2C_ReStart:
 12915                           	opt stack 23
 12916                           
 12917                           ;I2C_Soft.c: 77: i2cLowScl();
 12918                           
 12919                           ;incstack = 0
 12920  004CA4  EC0A  F027         	call	_i2cLowScl	;wreg free
 12921                           
 12922                           ;I2C_Soft.c: 78: i2cHighSda();
 12923  004CA8  EC0E  F027         	call	_i2cHighSda	;wreg free
 12924                           
 12925                           ;I2C_Soft.c: 79: i2cHighScl();
 12926  004CAC  ECEA  F026         	call	_i2cHighScl	;wreg free
 12927                           
 12928                           ;I2C_Soft.c: 80: i2cLowSda();
 12929  004CB0  EC00  F027         	call	_i2cLowSda	;wreg free
 12930                           
 12931                           ;I2C_Soft.c: 81: i2cLowScl();
 12932  004CB4  EC0A  F027         	call	_i2cLowScl	;wreg free
 12933  004CB8  0012               	return		;funcret
 12934  004CBA                     __end_of_I2C_ReStart:
 12935                           	opt stack 0
 12936                           tblptru	equ	0xFF8
 12937                           tblptrh	equ	0xFF7
 12938                           tblptrl	equ	0xFF6
 12939                           tablat	equ	0xFF5
 12940                           prodh	equ	0xFF4
 12941                           prodl	equ	0xFF3
 12942                           intcon	equ	0xFF2
 12943                           intcon2	equ	0xFF1
 12944                           intcon3	equ	0xFF0
 12945                           postinc0	equ	0xFEE
 12946                           wreg	equ	0xFE8
 12947                           postdec1	equ	0xFE5
 12948                           plusw1	equ	0xFE3
 12949                           fsr1l	equ	0xFE1
 12950                           indf2	equ	0xFDF
 12951                           postinc2	equ	0xFDE
 12952                           plusw2	equ	0xFDB
 12953                           fsr2h	equ	0xFDA
 12954                           fsr2l	equ	0xFD9
 12955                           status	equ	0xFD8
 12956                           
 12957 ;; *************** function _Do_Init *****************
 12958 ;; Defined at:
 12959 ;;		line 86 in file "Main.c"
 12960 ;; Parameters:    Size  Location     Type
 12961 ;;		None
 12962 ;; Auto vars:     Size  Location     Type
 12963 ;;		None
 12964 ;; Return value:  Size  Location     Type
 12965 ;;		None               void
 12966 ;; Registers used:
 12967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12968 ;; Tracked objects:
 12969 ;;		On entry : 0/0
 12970 ;;		On exit  : 0/0
 12971 ;;		Unchanged: 0/0
 12972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12977 ;;Total ram usage:        0 bytes
 12978 ;; Hardware stack levels used:    1
 12979 ;; Hardware stack levels required when called:    8
 12980 ;; This function calls:
 12981 ;;		_DS1621_Init
 12982 ;;		_I2C_Init
 12983 ;;		_Init_ADC
 12984 ;;		_Init_Interrupt
 12985 ;;		_Init_UART
 12986 ;;		_Turn_Off_Fan
 12987 ;; This function is called by:
 12988 ;;		_main
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           	psect	text60
 12993  0043E0                     __ptext60:
 12994                           	opt stack 0
 12995  0043E0                     _Do_Init:
 12996                           	opt stack 22
 12997                           
 12998                           ;Main.c: 88: Init_UART();
 12999                           
 13000                           ;incstack = 0
 13001  0043E0  EC7B  F026         	call	_Init_UART	;wreg free
 13002                           
 13003                           ;Main.c: 89: Init_ADC();
 13004  0043E4  ECE3  F026         	call	_Init_ADC	;wreg free
 13005                           
 13006                           ;Main.c: 90: OSCCON=0x70;
 13007  0043E8  0E70               	movlw	112
 13008  0043EA  6ED3               	movwf	4051,c	;volatile
 13009                           
 13010                           ;Main.c: 92: ADCON1= 0x0E;
 13011  0043EC  0E0E               	movlw	14
 13012  0043EE  6EC1               	movwf	4033,c	;volatile
 13013                           
 13014                           ;Main.c: 93: TRISA = 0x03;
 13015  0043F0  0E03               	movlw	3
 13016  0043F2  6E92               	movwf	3986,c	;volatile
 13017                           
 13018                           ;Main.c: 94: TRISB = 0x07;
 13019  0043F4  0E07               	movlw	7
 13020  0043F6  6E93               	movwf	3987,c	;volatile
 13021                           
 13022                           ;Main.c: 95: TRISC = 0x01;
 13023  0043F8  0E01               	movlw	1
 13024  0043FA  6E94               	movwf	3988,c	;volatile
 13025                           
 13026                           ;Main.c: 96: TRISD = 0x00;
 13027  0043FC  0E00               	movlw	0
 13028  0043FE  6E95               	movwf	3989,c	;volatile
 13029                           
 13030                           ;Main.c: 97: TRISE = 0x00;
 13031  004400  0E00               	movlw	0
 13032  004402  6E96               	movwf	3990,c	;volatile
 13033                           
 13034                           ;Main.c: 98: PORTE = 0x00;
 13035  004404  0E00               	movlw	0
 13036  004406  6E84               	movwf	3972,c	;volatile
 13037                           
 13038                           ;Main.c: 100: FAN = 0;
 13039  004408  0E00               	movlw	0
 13040  00440A  0100               	movlb	0	; () banked
 13041  00440C  6FC1               	movwf	_FAN& (0+255),b
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;Main.c: 101: RBPU =0;
 13045  00440E  9EF1               	bcf	intcon2,7,c	;volatile
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;Main.c: 103: I2C_Init(100000);
 13049  004410  0EA0               	movlw	160
 13050  004412  6E11               	movwf	I2C_Init@c,c
 13051  004414  0E86               	movlw	134
 13052  004416  6E12               	movwf	I2C_Init@c+1,c
 13053  004418  0E01               	movlw	1
 13054  00441A  6E13               	movwf	I2C_Init@c+2,c
 13055  00441C  0E00               	movlw	0
 13056  00441E  6E14               	movwf	I2C_Init@c+3,c
 13057  004420  ECFB  F026         	call	_I2C_Init	;wreg free
 13058                           
 13059                           ;Main.c: 105: DS1621_Init();
 13060  004424  ECBD  F025         	call	_DS1621_Init	;wreg free
 13061                           
 13062                           ;Main.c: 106: Init_Interrupt();
 13063  004428  EC48  F025         	call	_Init_Interrupt	;wreg free
 13064                           
 13065                           ;Main.c: 107: duty_cycle = 50;
 13066  00442C  0E32               	movlw	50
 13067  00442E  6E64               	movwf	_duty_cycle,c
 13068                           
 13069                           ;Main.c: 108: Turn_Off_Fan();
 13070  004430  ECDA  F025         	call	_Turn_Off_Fan	;wreg free
 13071                           
 13072                           ;Main.c: 109: fan_set_temp = 77;
 13073  004434  0E4D               	movlw	77
 13074  004436  0100               	movlb	0	; () banked
 13075  004438  6FDC               	movwf	_fan_set_temp& (0+255),b
 13076                           
 13077                           ; BSR set to: 0
 13078  00443A  0012               	return		;funcret
 13079  00443C                     __end_of_Do_Init:
 13080                           	opt stack 0
 13081                           tblptru	equ	0xFF8
 13082                           tblptrh	equ	0xFF7
 13083                           tblptrl	equ	0xFF6
 13084                           tablat	equ	0xFF5
 13085                           prodh	equ	0xFF4
 13086                           prodl	equ	0xFF3
 13087                           intcon	equ	0xFF2
 13088                           intcon2	equ	0xFF1
 13089                           intcon3	equ	0xFF0
 13090                           postinc0	equ	0xFEE
 13091                           wreg	equ	0xFE8
 13092                           postdec1	equ	0xFE5
 13093                           plusw1	equ	0xFE3
 13094                           fsr1l	equ	0xFE1
 13095                           indf2	equ	0xFDF
 13096                           postinc2	equ	0xFDE
 13097                           plusw2	equ	0xFDB
 13098                           fsr2h	equ	0xFDA
 13099                           fsr2l	equ	0xFD9
 13100                           status	equ	0xFD8
 13101                           
 13102 ;; *************** function _Turn_Off_Fan *****************
 13103 ;; Defined at:
 13104 ;;		line 87 in file "Fan_Support.c"
 13105 ;; Parameters:    Size  Location     Type
 13106 ;;		None
 13107 ;; Auto vars:     Size  Location     Type
 13108 ;;		None
 13109 ;; Return value:  Size  Location     Type
 13110 ;;		None               void
 13111 ;; Registers used:
 13112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13113 ;; Tracked objects:
 13114 ;;		On entry : 0/0
 13115 ;;		On exit  : 0/0
 13116 ;;		Unchanged: 0/0
 13117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13122 ;;Total ram usage:        0 bytes
 13123 ;; Hardware stack levels used:    1
 13124 ;; Hardware stack levels required when called:    7
 13125 ;; This function calls:
 13126 ;;		_printf
 13127 ;; This function is called by:
 13128 ;;		_Monitor_Fan
 13129 ;;		_Toggle_Fan
 13130 ;;		_Do_Init
 13131 ;;		_main
 13132 ;; This function uses a non-reentrant model
 13133 ;;
 13134                           
 13135                           	psect	text61
 13136  004BB4                     __ptext61:
 13137                           	opt stack 0
 13138  004BB4                     _Turn_Off_Fan:
 13139                           	opt stack 23
 13140                           
 13141                           ;Fan_Support.c: 89: printf ("Fan is turned off\r\n");
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;incstack = 0
 13145  004BB4  0E34               	movlw	low STR_1
 13146  004BB6  0100               	movlb	0	; () banked
 13147  004BB8  6F86               	movwf	printf@f& (0+255),b
 13148  004BBA  0EFF               	movlw	high STR_1
 13149  004BBC  0100               	movlb	0	; () banked
 13150  004BBE  6F87               	movwf	(printf@f+1)& (0+255),b
 13151  004BC0  EC0E  F000         	call	_printf	;wreg free
 13152                           
 13153                           ;Fan_Support.c: 91: FAN = 0;
 13154  004BC4  0E00               	movlw	0
 13155  004BC6  0100               	movlb	0	; () banked
 13156  004BC8  6FC1               	movwf	_FAN& (0+255),b
 13157                           
 13158                           ; BSR set to: 0
 13159                           ;Fan_Support.c: 92: PORTDbits.RD1 = 0;
 13160  004BCA  9283               	bcf	3971,1,c	;volatile
 13161                           
 13162                           ; BSR set to: 0
 13163                           ;Fan_Support.c: 93: PORTDbits.RD2 = 0;
 13164  004BCC  9483               	bcf	3971,2,c	;volatile
 13165                           
 13166                           ; BSR set to: 0
 13167  004BCE  0012               	return		;funcret
 13168  004BD0                     __end_of_Turn_Off_Fan:
 13169                           	opt stack 0
 13170                           tblptru	equ	0xFF8
 13171                           tblptrh	equ	0xFF7
 13172                           tblptrl	equ	0xFF6
 13173                           tablat	equ	0xFF5
 13174                           prodh	equ	0xFF4
 13175                           prodl	equ	0xFF3
 13176                           intcon	equ	0xFF2
 13177                           intcon2	equ	0xFF1
 13178                           intcon3	equ	0xFF0
 13179                           postinc0	equ	0xFEE
 13180                           wreg	equ	0xFE8
 13181                           postdec1	equ	0xFE5
 13182                           plusw1	equ	0xFE3
 13183                           fsr1l	equ	0xFE1
 13184                           indf2	equ	0xFDF
 13185                           postinc2	equ	0xFDE
 13186                           plusw2	equ	0xFDB
 13187                           fsr2h	equ	0xFDA
 13188                           fsr2l	equ	0xFD9
 13189                           status	equ	0xFD8
 13190                           
 13191 ;; *************** function _printf *****************
 13192 ;; Defined at:
 13193 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 13194 ;; Parameters:    Size  Location     Type
 13195 ;;  f               2    6[BANK0 ] PTR const unsigned char 
 13196 ;;		 -> STR_43(29), STR_42(20), STR_41(21), STR_40(30), 
 13197 ;;		 -> STR_37(29), STR_36(20), STR_35(20), STR_34(30), 
 13198 ;;		 -> STR_11(33), STR_10(27), STR_9(34), STR_8(22), 
 13199 ;;		 -> STR_7(29), STR_6(20), STR_5(21), STR_4(30), 
 13200 ;;		 -> STR_3(22), STR_2(19), STR_1(20), 
 13201 ;; Auto vars:     Size  Location     Type
 13202 ;;  idx             1   29[BANK0 ] unsigned char 
 13203 ;;  val             4   42[BANK0 ] unsigned long 
 13204 ;;  tmpval          4   34[BANK0 ] struct .
 13205 ;;  fval            3   48[BANK0 ] struct .
 13206 ;;  cp              3    0        PTR const unsigned char 
 13207 ;;  flag            2   46[BANK0 ] unsigned short 
 13208 ;;  exp             2   40[BANK0 ] int 
 13209 ;;  width           2   38[BANK0 ] int 
 13210 ;;  prec            2   32[BANK0 ] int 
 13211 ;;  ap              2   30[BANK0 ] PTR void [1]
 13212 ;;		 -> ?_printf(2), 
 13213 ;;  len             2    0        unsigned int 
 13214 ;;  c               1   51[BANK0 ] char 
 13215 ;;  d               1    0        unsigned char 
 13216 ;; Return value:  Size  Location     Type
 13217 ;;                  2    6[BANK0 ] int 
 13218 ;; Registers used:
 13219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13220 ;; Tracked objects:
 13221 ;;		On entry : 0/0
 13222 ;;		On exit  : 0/0
 13223 ;;		Unchanged: 0/0
 13224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13225 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13227 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13228 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13229 ;;Total ram usage:       46 bytes
 13230 ;; Hardware stack levels used:    1
 13231 ;; Hardware stack levels required when called:    6
 13232 ;; This function calls:
 13233 ;;		___awdiv
 13234 ;;		___ftadd
 13235 ;;		___ftge
 13236 ;;		___ftmul
 13237 ;;		___ftneg
 13238 ;;		___ftsub
 13239 ;;		___fttol
 13240 ;;		___lldiv
 13241 ;;		___llmod
 13242 ;;		___lltoft
 13243 ;;		___wmul
 13244 ;;		__div_to_l_
 13245 ;;		__tdiv_to_l_
 13246 ;;		_fround
 13247 ;;		_isdigit
 13248 ;;		_putch
 13249 ;;		_scale
 13250 ;; This function is called by:
 13251 ;;		_Turn_Off_Fan
 13252 ;;		_Turn_On_Fan
 13253 ;;		_check_for_button_input
 13254 ;;		_main
 13255 ;;		_Setup_Fan_Temp
 13256 ;;		_Do_Setup_Time
 13257 ;; This function uses a non-reentrant model
 13258 ;;
 13259                           
 13260                           	psect	text62
 13261  00001C                     __ptext62:
 13262                           	opt stack 0
 13263  00001C                     _printf:
 13264                           	opt stack 24
 13265                           
 13266                           ;doprnt.c: 466: va_list ap;
 13267                           ;doprnt.c: 499: signed char c;
 13268                           ;doprnt.c: 501: int width;
 13269                           ;doprnt.c: 504: int prec;
 13270                           ;doprnt.c: 508: unsigned short flag;
 13271                           ;doprnt.c: 515: char d;
 13272                           ;doprnt.c: 516: double fval;
 13273                           ;doprnt.c: 517: int exp;
 13274                           ;doprnt.c: 523: union {
 13275                           ;doprnt.c: 524: unsigned long vd;
 13276                           ;doprnt.c: 525: double integ;
 13277                           ;doprnt.c: 526: } tmpval;
 13278                           ;doprnt.c: 528: unsigned long val;
 13279                           ;doprnt.c: 529: unsigned len;
 13280                           ;doprnt.c: 530: const char * cp;
 13281                           ;doprnt.c: 533: *ap = __va_start();
 13282                           
 13283                           ; BSR set to: 0
 13284                           ;incstack = 0
 13285  00001C  0E88               	movlw	low (?_printf+2)
 13286  00001E  0100               	movlb	0	; () banked
 13287  000020  6F9E               	movwf	printf@ap& (0+255),b
 13288  000022  0E00               	movlw	high (?_printf+2)
 13289  000024  0100               	movlb	0	; () banked
 13290  000026  6F9F               	movwf	(printf@ap+1)& (0+255),b
 13291                           
 13292                           ;doprnt.c: 536: while(c = *f++) {
 13293  000028  EF1E  F006         	goto	l9358
 13294  00002C                     l9072:
 13295                           
 13296                           ; BSR set to: 0
 13297                           ;doprnt.c: 538: if(c != '%')
 13298  00002C  0E25               	movlw	37
 13299  00002E  0100               	movlb	0	; () banked
 13300  000030  19B3               	xorwf	printf@c& (0+255),w,b
 13301  000032  B4D8               	btfsc	status,2,c
 13302  000034  D006               	goto	l9076
 13303                           
 13304                           ; BSR set to: 0
 13305                           ;doprnt.c: 540: {
 13306                           ;doprnt.c: 541: (putch(c) );
 13307  000036  0100               	movlb	0	; () banked
 13308  000038  51B3               	movf	printf@c& (0+255),w,b
 13309  00003A  ECDC  F026         	call	_putch
 13310                           
 13311                           ;doprnt.c: 542: continue;
 13312  00003E  EF1E  F006         	goto	l9358
 13313  000042                     l9076:
 13314                           
 13315                           ;doprnt.c: 543: }
 13316                           ;doprnt.c: 546: width = 0;
 13317  000042  0E00               	movlw	0
 13318  000044  0100               	movlb	0	; () banked
 13319  000046  6FA7               	movwf	(printf@width+1)& (0+255),b
 13320  000048  0E00               	movlw	0
 13321  00004A  6FA6               	movwf	printf@width& (0+255),b
 13322                           
 13323                           ;doprnt.c: 548: flag = 0;
 13324  00004C  0E00               	movlw	0
 13325  00004E  0100               	movlb	0	; () banked
 13326  000050  6FAF               	movwf	(printf@flag+1)& (0+255),b
 13327  000052  0E00               	movlw	0
 13328  000054  6FAE               	movwf	printf@flag& (0+255),b
 13329                           
 13330                           ; BSR set to: 0
 13331                           ;doprnt.c: 551: switch(*f) {
 13332                           
 13333                           ;doprnt.c: 550: for(;;) {
 13334  000056  D007               	goto	l9082
 13335  000058                     l9078:
 13336                           
 13337                           ;doprnt.c: 580: flag |= 0x04;
 13338  000058  0100               	movlb	0	; () banked
 13339  00005A  85AE               	bsf	printf@flag& (0+255),2,b
 13340                           
 13341                           ;doprnt.c: 581: f++;
 13342  00005C  0100               	movlb	0	; () banked
 13343  00005E  4B86               	infsnz	printf@f& (0+255),f,b
 13344  000060  2B87               	incf	(printf@f+1)& (0+255),f,b
 13345                           
 13346                           ;doprnt.c: 582: continue;
 13347  000062  D001               	goto	l9082
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;doprnt.c: 584: }
 13351  000064  D00B               	goto	l9084
 13352  000066                     l9082:
 13353  000066  C086  FFF6         	movff	printf@f,tblptrl
 13354  00006A  C087  FFF7         	movff	printf@f+1,tblptrh
 13355  00006E                     	if	0	;tblptru may be non-zero
 13356  00006E                     	endif
 13357  00006E                     	if	0	;tblptru may be non-zero
 13358  00006E                     	endif
 13359  00006E  0008               	tblrd		*
 13360  000070  50F5               	movf	tablat,w,c
 13361                           
 13362                           ; Switch size 1, requested type "space"
 13363                           ; Number of cases is 1, Range of values is 48 to 48
 13364                           ; switch strategies available:
 13365                           ; Name         Instructions Cycles
 13366                           ; simple_byte            4     3 (average)
 13367                           ;	Chosen strategy is simple_byte
 13368  000072  0A30               	xorlw	48	; case 48
 13369  000074  B4D8               	btfsc	status,2,c
 13370  000076  D7F0               	goto	l9078
 13371                           
 13372                           ;doprnt.c: 585: break;
 13373  000078  D001               	goto	l9084
 13374                           
 13375                           ;doprnt.c: 586: }
 13376  00007A  D7F5               	goto	l9082
 13377  00007C                     l9084:
 13378                           
 13379                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13380  00007C  C086  FFF6         	movff	printf@f,tblptrl
 13381  000080  C087  FFF7         	movff	printf@f+1,tblptrh
 13382  000084                     	if	0	;tblptru may be non-zero
 13383  000084                     	endif
 13384  000084                     	if	0	;tblptru may be non-zero
 13385  000084                     	endif
 13386  000084  0008               	tblrd		*
 13387  000086  50F5               	movf	tablat,w,c
 13388  000088  EC7C  F025         	call	_isdigit
 13389  00008C  A0D8               	btfss	status,0,c
 13390  00008E  D04D               	goto	l9102
 13391                           
 13392                           ;doprnt.c: 598: width = 0;
 13393  000090  0E00               	movlw	0
 13394  000092  0100               	movlb	0	; () banked
 13395  000094  6FA7               	movwf	(printf@width+1)& (0+255),b
 13396  000096  0E00               	movlw	0
 13397  000098  6FA6               	movwf	printf@width& (0+255),b
 13398  00009A  D000               	goto	l9088
 13399  00009C                     l9088:
 13400                           
 13401                           ;doprnt.c: 600: width *= 10;
 13402  00009C  C0A6  F011         	movff	printf@width,___wmul@multiplier
 13403  0000A0  C0A7  F012         	movff	printf@width+1,___wmul@multiplier+1
 13404  0000A4  0E00               	movlw	0
 13405  0000A6  6E14               	movwf	___wmul@multiplicand+1,c
 13406  0000A8  0E0A               	movlw	10
 13407  0000AA  6E13               	movwf	___wmul@multiplicand,c
 13408  0000AC  ECE9  F024         	call	___wmul	;wreg free
 13409  0000B0  C011  F0A6         	movff	?___wmul,printf@width
 13410  0000B4  C012  F0A7         	movff	?___wmul+1,printf@width+1
 13411                           
 13412                           ;doprnt.c: 601: width += *f++ - '0';
 13413  0000B8  0ED0               	movlw	208
 13414  0000BA  0100               	movlb	0	; () banked
 13415  0000BC  6F94               	movwf	??_printf& (0+255),b
 13416  0000BE  0EFF               	movlw	255
 13417  0000C0  0100               	movlb	0	; () banked
 13418  0000C2  6F95               	movwf	(??_printf+1)& (0+255),b
 13419  0000C4  C086  FFF6         	movff	printf@f,tblptrl
 13420  0000C8  C087  FFF7         	movff	printf@f+1,tblptrh
 13421  0000CC                     	if	0	;tblptru may be non-zero
 13422  0000CC                     	endif
 13423  0000CC                     	if	0	;tblptru may be non-zero
 13424  0000CC                     	endif
 13425  0000CC  0008               	tblrd		*
 13426  0000CE  50F5               	movf	tablat,w,c
 13427  0000D0  0100               	movlb	0	; () banked
 13428  0000D2  6F96               	movwf	(??_printf+2)& (0+255),b
 13429  0000D4  6B97               	clrf	(??_printf+3)& (0+255),b
 13430  0000D6  0100               	movlb	0	; () banked
 13431  0000D8  5194               	movf	??_printf& (0+255),w,b
 13432  0000DA  0100               	movlb	0	; () banked
 13433  0000DC  2796               	addwf	(??_printf+2)& (0+255),f,b
 13434  0000DE  0100               	movlb	0	; () banked
 13435  0000E0  5195               	movf	(??_printf+1)& (0+255),w,b
 13436  0000E2  0100               	movlb	0	; () banked
 13437  0000E4  2397               	addwfc	(??_printf+3)& (0+255),f,b
 13438  0000E6  0100               	movlb	0	; () banked
 13439  0000E8  5196               	movf	(??_printf+2)& (0+255),w,b
 13440  0000EA  0100               	movlb	0	; () banked
 13441  0000EC  27A6               	addwf	printf@width& (0+255),f,b
 13442  0000EE  0100               	movlb	0	; () banked
 13443  0000F0  5197               	movf	(??_printf+3)& (0+255),w,b
 13444  0000F2  0100               	movlb	0	; () banked
 13445  0000F4  23A7               	addwfc	(printf@width+1)& (0+255),f,b
 13446                           
 13447                           ; BSR set to: 0
 13448  0000F6  0100               	movlb	0	; () banked
 13449  0000F8  4B86               	infsnz	printf@f& (0+255),f,b
 13450  0000FA  2B87               	incf	(printf@f+1)& (0+255),f,b
 13451                           
 13452                           ; BSR set to: 0
 13453                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13454  0000FC  C086  FFF6         	movff	printf@f,tblptrl
 13455  000100  C087  FFF7         	movff	printf@f+1,tblptrh
 13456  000104                     	if	0	;tblptru may be non-zero
 13457  000104                     	endif
 13458  000104                     	if	0	;tblptru may be non-zero
 13459  000104                     	endif
 13460  000104  0008               	tblrd		*
 13461  000106  50F5               	movf	tablat,w,c
 13462  000108  EC7C  F025         	call	_isdigit
 13463  00010C  A0D8               	btfss	status,0,c
 13464  00010E  D00D               	goto	l9102
 13465  000110  D7C5               	goto	l9088
 13466                           
 13467                           ;doprnt.c: 608: }
 13468                           ;doprnt.c: 635: switch(c = *f++) {
 13469  000112  D00B               	goto	l9102
 13470                           
 13471                           ;doprnt.c: 638: goto alldone;
 13472                           
 13473                           ;doprnt.c: 637: case 0:
 13474  000114  EF2F  F006         	goto	l1468
 13475  000118                     l9096:
 13476                           
 13477                           ;doprnt.c: 663: flag |= 0x400;
 13478  000118  0100               	movlb	0	; () banked
 13479  00011A  85AF               	bsf	(printf@flag+1)& (0+255),2,b
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;doprnt.c: 698: case 'i':
 13483                           ;doprnt.c: 699: break;
 13484                           
 13485                           ; BSR set to: 0
 13486                           
 13487                           ;doprnt.c: 697: case 'd':
 13488                           
 13489                           ;doprnt.c: 664: break;
 13490  00011C  D024               	goto	l9104
 13491  00011E                     l9098:
 13492                           
 13493                           ; BSR set to: 0
 13494                           ;doprnt.c: 721: flag |= 0x80;
 13495  00011E  0100               	movlb	0	; () banked
 13496  000120  8FAE               	bsf	printf@flag& (0+255),7,b
 13497                           
 13498                           ;doprnt.c: 723: break;
 13499  000122  D021               	goto	l9104
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;doprnt.c: 813: continue;
 13503                           
 13504                           ;doprnt.c: 802: default:
 13505  000124  EF1E  F006         	goto	l9358
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;doprnt.c: 822: }
 13509  000128  D01E               	goto	l9104
 13510  00012A                     l9102:
 13511  00012A  C086  FFF6         	movff	printf@f,tblptrl
 13512  00012E  C087  FFF7         	movff	printf@f+1,tblptrh
 13513  000132  0100               	movlb	0	; () banked
 13514  000134  4B86               	infsnz	printf@f& (0+255),f,b
 13515  000136  2B87               	incf	(printf@f+1)& (0+255),f,b
 13516  000138                     	if	0	;tblptru may be non-zero
 13517  000138                     	endif
 13518  000138                     	if	0	;tblptru may be non-zero
 13519  000138                     	endif
 13520  000138  0008               	tblrd		*
 13521  00013A  CFF5 F0B3          	movff	tablat,printf@c
 13522  00013E  0100               	movlb	0	; () banked
 13523  000140  51B3               	movf	printf@c& (0+255),w,b
 13524                           
 13525                           ; Switch size 1, requested type "space"
 13526                           ; Number of cases is 5, Range of values is 0 to 120
 13527                           ; switch strategies available:
 13528                           ; Name         Instructions Cycles
 13529                           ; simple_byte           16     9 (average)
 13530                           ;	Chosen strategy is simple_byte
 13531  000142  0A00               	xorlw	0	; case 0
 13532  000144  B4D8               	btfsc	status,2,c
 13533  000146  EF2F  F006         	goto	l1468
 13534  00014A  0A64               	xorlw	100	; case 100
 13535  00014C  B4D8               	btfsc	status,2,c
 13536  00014E  D00B               	goto	l9104
 13537  000150  0A02               	xorlw	2	; case 102
 13538  000152  B4D8               	btfsc	status,2,c
 13539  000154  D7E1               	goto	l9096
 13540  000156  0A0F               	xorlw	15	; case 105
 13541  000158  B4D8               	btfsc	status,2,c
 13542  00015A  D005               	goto	l9104
 13543  00015C  0A11               	xorlw	17	; case 120
 13544  00015E  B4D8               	btfsc	status,2,c
 13545  000160  D7DE               	goto	l9098
 13546  000162  EF1E  F006         	goto	l9358
 13547  000166                     l9104:
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;doprnt.c: 825: if(flag & (0x700)) {
 13551  000166  0E07               	movlw	7
 13552  000168  0100               	movlb	0	; () banked
 13553  00016A  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 13554  00016C  B4D8               	btfsc	status,2,c
 13555  00016E  D39A               	goto	l1386
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;doprnt.c: 829: prec = 6;
 13559  000170  0E00               	movlw	0
 13560  000172  0100               	movlb	0	; () banked
 13561  000174  6FA1               	movwf	(printf@prec+1)& (0+255),b
 13562  000176  0E06               	movlw	6
 13563  000178  6FA0               	movwf	printf@prec& (0+255),b
 13564                           
 13565                           ; BSR set to: 0
 13566                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13567  00017A  C09E  FFD9         	movff	printf@ap,fsr2l
 13568  00017E  C09F  FFDA         	movff	printf@ap+1,fsr2h
 13569  000182  CFDE F0B0          	movff	postinc2,printf@fval
 13570  000186  CFDE F0B1          	movff	postinc2,printf@fval+1
 13571  00018A  CFDD F0B2          	movff	postdec2,printf@fval+2
 13572                           
 13573                           ; BSR set to: 0
 13574  00018E  0E03               	movlw	3
 13575  000190  0100               	movlb	0	; () banked
 13576  000192  279E               	addwf	printf@ap& (0+255),f,b
 13577  000194  0E00               	movlw	0
 13578  000196  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;doprnt.c: 831: if(fval < 0.0) {
 13582  000198  0100               	movlb	0	; () banked
 13583  00019A  AFB2               	btfss	(printf@fval+2)& (0+255),7,b
 13584  00019C  D012               	goto	l9118
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;doprnt.c: 832: fval = -fval;
 13588  00019E  C0B0  F011         	movff	printf@fval,___ftneg@f1
 13589  0001A2  C0B1  F012         	movff	printf@fval+1,___ftneg@f1+1
 13590  0001A6  C0B2  F013         	movff	printf@fval+2,___ftneg@f1+2
 13591  0001AA  EC36  F025         	call	___ftneg	;wreg free
 13592  0001AE  C011  F0B0         	movff	?___ftneg,printf@fval
 13593  0001B2  C012  F0B1         	movff	?___ftneg+1,printf@fval+1
 13594  0001B6  C013  F0B2         	movff	?___ftneg+2,printf@fval+2
 13595                           
 13596                           ;doprnt.c: 833: flag |= 0x03;
 13597  0001BA  0E03               	movlw	3
 13598  0001BC  0100               	movlb	0	; () banked
 13599  0001BE  13AE               	iorwf	printf@flag& (0+255),f,b
 13600  0001C0  D000               	goto	l9118
 13601  0001C2                     l9118:
 13602                           
 13603                           ; BSR set to: 0
 13604                           ;doprnt.c: 834: }
 13605                           ;doprnt.c: 835: exp = 0;
 13606  0001C2  0E00               	movlw	0
 13607  0001C4  0100               	movlb	0	; () banked
 13608  0001C6  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13609  0001C8  0E00               	movlw	0
 13610  0001CA  6FA8               	movwf	printf@exp& (0+255),b
 13611                           
 13612                           ; BSR set to: 0
 13613                           ;doprnt.c: 836: if( fval!=0) {
 13614  0001CC  0100               	movlb	0	; () banked
 13615  0001CE  51B0               	movf	printf@fval& (0+255),w,b
 13616  0001D0  0100               	movlb	0	; () banked
 13617  0001D2  11B1               	iorwf	(printf@fval+1)& (0+255),w,b
 13618  0001D4  0100               	movlb	0	; () banked
 13619  0001D6  11B2               	iorwf	(printf@fval+2)& (0+255),w,b
 13620  0001D8  B4D8               	btfsc	status,2,c
 13621  0001DA  D093               	goto	l9146
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13625  0001DC  0E82               	movlw	130
 13626  0001DE  0100               	movlb	0	; () banked
 13627  0001E0  6F94               	movwf	??_printf& (0+255),b
 13628  0001E2  0EFF               	movlw	255
 13629  0001E4  0100               	movlb	0	; () banked
 13630  0001E6  6F95               	movwf	(??_printf+1)& (0+255),b
 13631  0001E8  C0B0  F096         	movff	printf@fval,??_printf+2
 13632  0001EC  C0B1  F097         	movff	printf@fval+1,??_printf+3
 13633  0001F0  C0B2  F098         	movff	printf@fval+2,??_printf+4
 13634  0001F4  C0B3  F099         	movff	printf@fval+3,??_printf+5
 13635  0001F8  0E10               	movlw	16
 13636  0001FA  D006               	goto	u7790
 13637  0001FC                     u7795:
 13638  0001FC  0100               	movlb	0	; () banked
 13639  0001FE  90D8               	bcf	status,0,c
 13640  000200  3399               	rrcf	(??_printf+5)& (0+255),f,b
 13641  000202  3398               	rrcf	(??_printf+4)& (0+255),f,b
 13642  000204  3397               	rrcf	(??_printf+3)& (0+255),f,b
 13643  000206  3396               	rrcf	(??_printf+2)& (0+255),f,b
 13644  000208                     u7790:
 13645  000208  2EE8               	decfsz	wreg,f,c
 13646  00020A  D7F8               	goto	u7795
 13647  00020C  0100               	movlb	0	; () banked
 13648  00020E  5196               	movf	(??_printf+2)& (0+255),w,b
 13649  000210  0100               	movlb	0	; () banked
 13650  000212  2594               	addwf	??_printf& (0+255),w,b
 13651  000214  0100               	movlb	0	; () banked
 13652  000216  6FA8               	movwf	printf@exp& (0+255),b
 13653  000218  0E00               	movlw	0
 13654  00021A  0100               	movlb	0	; () banked
 13655  00021C  2195               	addwfc	(??_printf+1)& (0+255),w,b
 13656  00021E  0100               	movlb	0	; () banked
 13657  000220  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13658                           
 13659                           ; BSR set to: 0
 13660                           ;doprnt.c: 838: exp--;
 13661  000222  0100               	movlb	0	; () banked
 13662  000224  07A8               	decf	printf@exp& (0+255),f,b
 13663  000226  A0D8               	btfss	status,0,c
 13664  000228  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13665                           
 13666                           ; BSR set to: 0
 13667                           ;doprnt.c: 839: exp *= 3;
 13668  00022A  C0A8  F011         	movff	printf@exp,___wmul@multiplier
 13669  00022E  C0A9  F012         	movff	printf@exp+1,___wmul@multiplier+1
 13670  000232  0E00               	movlw	0
 13671  000234  6E14               	movwf	___wmul@multiplicand+1,c
 13672  000236  0E03               	movlw	3
 13673  000238  6E13               	movwf	___wmul@multiplicand,c
 13674  00023A  ECE9  F024         	call	___wmul	;wreg free
 13675  00023E  C011  F0A8         	movff	?___wmul,printf@exp
 13676  000242  C012  F0A9         	movff	?___wmul+1,printf@exp+1
 13677                           
 13678                           ;doprnt.c: 840: exp /= 10;
 13679  000246  C0A8  F017         	movff	printf@exp,___awdiv@dividend
 13680  00024A  C0A9  F018         	movff	printf@exp+1,___awdiv@dividend+1
 13681  00024E  0E00               	movlw	0
 13682  000250  6E1A               	movwf	___awdiv@divisor+1,c
 13683  000252  0E0A               	movlw	10
 13684  000254  6E19               	movwf	___awdiv@divisor,c
 13685  000256  EC45  F01E         	call	___awdiv	;wreg free
 13686  00025A  C017  F0A8         	movff	?___awdiv,printf@exp
 13687  00025E  C018  F0A9         	movff	?___awdiv+1,printf@exp+1
 13688                           
 13689                           ;doprnt.c: 841: if(exp < 0)
 13690  000262  0100               	movlb	0	; () banked
 13691  000264  AFA9               	btfss	(printf@exp+1)& (0+255),7,b
 13692  000266  D005               	goto	l9134
 13693                           
 13694                           ; BSR set to: 0
 13695                           ;doprnt.c: 842: exp--;
 13696  000268  0100               	movlb	0	; () banked
 13697  00026A  07A8               	decf	printf@exp& (0+255),f,b
 13698  00026C  A0D8               	btfss	status,0,c
 13699  00026E  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13700  000270  D000               	goto	l9134
 13701  000272                     l9134:
 13702                           
 13703                           ; BSR set to: 0
 13704                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13705  000272  0100               	movlb	0	; () banked
 13706  000274  51A8               	movf	printf@exp& (0+255),w,b
 13707  000276  0800               	sublw	0
 13708  000278  ECAF  F009         	call	_scale
 13709  00027C  C043  F0A2         	movff	?_scale,printf@tmpval
 13710  000280  C044  F0A3         	movff	?_scale+1,printf@tmpval+1
 13711  000284  C045  F0A4         	movff	?_scale+2,printf@tmpval+2
 13712                           
 13713                           ;doprnt.c: 847: tmpval.integ *= fval;
 13714  000288  C0A2  F01F         	movff	printf@tmpval,___ftmul@f1
 13715  00028C  C0A3  F020         	movff	printf@tmpval+1,___ftmul@f1+1
 13716  000290  C0A4  F021         	movff	printf@tmpval+2,___ftmul@f1+2
 13717  000294  C0B0  F022         	movff	printf@fval,___ftmul@f2
 13718  000298  C0B1  F023         	movff	printf@fval+1,___ftmul@f2+1
 13719  00029C  C0B2  F024         	movff	printf@fval+2,___ftmul@f2+2
 13720  0002A0  EC00  F019         	call	___ftmul	;wreg free
 13721  0002A4  C01F  F0A2         	movff	?___ftmul,printf@tmpval
 13722  0002A8  C020  F0A3         	movff	?___ftmul+1,printf@tmpval+1
 13723  0002AC  C021  F0A4         	movff	?___ftmul+2,printf@tmpval+2
 13724                           
 13725                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13726  0002B0  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13727  0002B4  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13728  0002B8  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13729  0002BC  0E00               	movlw	0
 13730  0002BE  6E14               	movwf	___ftge@ff2,c
 13731  0002C0  0E80               	movlw	128
 13732  0002C2  6E15               	movwf	___ftge@ff2+1,c
 13733  0002C4  0E3F               	movlw	63
 13734  0002C6  6E16               	movwf	___ftge@ff2+2,c
 13735  0002C8  EC90  F01E         	call	___ftge	;wreg free
 13736  0002CC  B0D8               	btfsc	status,0,c
 13737  0002CE  D005               	goto	l9142
 13738                           
 13739                           ;doprnt.c: 849: exp--;
 13740  0002D0  0100               	movlb	0	; () banked
 13741  0002D2  07A8               	decf	printf@exp& (0+255),f,b
 13742  0002D4  A0D8               	btfss	status,0,c
 13743  0002D6  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13744  0002D8  D014               	goto	l9146
 13745  0002DA                     l9142:
 13746                           
 13747                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13748  0002DA  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13749  0002DE  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13750  0002E2  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13751  0002E6  0E00               	movlw	0
 13752  0002E8  6E14               	movwf	___ftge@ff2,c
 13753  0002EA  0E20               	movlw	32
 13754  0002EC  6E15               	movwf	___ftge@ff2+1,c
 13755  0002EE  0E41               	movlw	65
 13756  0002F0  6E16               	movwf	___ftge@ff2+2,c
 13757  0002F2  EC90  F01E         	call	___ftge	;wreg free
 13758  0002F6  A0D8               	btfss	status,0,c
 13759  0002F8  D004               	goto	l9146
 13760                           
 13761                           ;doprnt.c: 851: exp++;
 13762  0002FA  0100               	movlb	0	; () banked
 13763  0002FC  4BA8               	infsnz	printf@exp& (0+255),f,b
 13764  0002FE  2BA9               	incf	(printf@exp+1)& (0+255),f,b
 13765                           
 13766                           ; BSR set to: 0
 13767                           
 13768                           ; BSR set to: 0
 13769  000300  D000               	goto	l9146
 13770  000302                     l9146:
 13771                           
 13772                           ;doprnt.c: 852: }
 13773                           ;doprnt.c: 1112: if(prec <= 12)
 13774  000302  0100               	movlb	0	; () banked
 13775  000304  BFA1               	btfsc	(printf@prec+1)& (0+255),7,b
 13776  000306  D008               	goto	l9148
 13777  000308  0100               	movlb	0	; () banked
 13778  00030A  51A1               	movf	(printf@prec+1)& (0+255),w,b
 13779  00030C  E11E               	bnz	l9150
 13780  00030E  0E0D               	movlw	13
 13781  000310  0100               	movlb	0	; () banked
 13782  000312  5DA0               	subwf	printf@prec& (0+255),w,b
 13783  000314  B0D8               	btfsc	status,0,c
 13784  000316  D019               	goto	l9150
 13785  000318                     l9148:
 13786                           
 13787                           ; BSR set to: 0
 13788                           ;doprnt.c: 1113: fval += fround(prec);
 13789  000318  C0B0  F04D         	movff	printf@fval,___ftadd@f1
 13790  00031C  C0B1  F04E         	movff	printf@fval+1,___ftadd@f1+1
 13791  000320  C0B2  F04F         	movff	printf@fval+2,___ftadd@f1+2
 13792  000324  0100               	movlb	0	; () banked
 13793  000326  51A0               	movf	printf@prec& (0+255),w,b
 13794  000328  ECCF  F00E         	call	_fround
 13795  00032C  C043  F050         	movff	?_fround,___ftadd@f2
 13796  000330  C044  F051         	movff	?_fround+1,___ftadd@f2+1
 13797  000334  C045  F052         	movff	?_fround+2,___ftadd@f2+2
 13798  000338  EC01  F012         	call	___ftadd	;wreg free
 13799  00033C  C04D  F0B0         	movff	?___ftadd,printf@fval
 13800  000340  C04E  F0B1         	movff	?___ftadd+1,printf@fval+1
 13801  000344  C04F  F0B2         	movff	?___ftadd+2,printf@fval+2
 13802  000348  D000               	goto	l9150
 13803  00034A                     l9150:
 13804                           
 13805                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13806  00034A  0100               	movlb	0	; () banked
 13807  00034C  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 13808  00034E  D008               	goto	l9152
 13809  000350  0100               	movlb	0	; () banked
 13810  000352  51A9               	movf	(printf@exp+1)& (0+255),w,b
 13811  000354  E128               	bnz	l9158
 13812  000356  0E0A               	movlw	10
 13813  000358  0100               	movlb	0	; () banked
 13814  00035A  5DA8               	subwf	printf@exp& (0+255),w,b
 13815  00035C  B0D8               	btfsc	status,0,c
 13816  00035E  D023               	goto	l9158
 13817  000360                     l9152:
 13818                           
 13819                           ; BSR set to: 0
 13820  000360  0100               	movlb	0	; () banked
 13821  000362  51B0               	movf	printf@fval& (0+255),w,b
 13822  000364  0100               	movlb	0	; () banked
 13823  000366  11B1               	iorwf	(printf@fval+1)& (0+255),w,b
 13824  000368  0100               	movlb	0	; () banked
 13825  00036A  11B2               	iorwf	(printf@fval+2)& (0+255),w,b
 13826  00036C  B4D8               	btfsc	status,2,c
 13827  00036E  D077               	goto	l9172
 13828                           
 13829                           ; BSR set to: 0
 13830  000370  C0B0  F02E         	movff	printf@fval,___fttol@f1
 13831  000374  C0B1  F02F         	movff	printf@fval+1,___fttol@f1+1
 13832  000378  C0B2  F030         	movff	printf@fval+2,___fttol@f1+2
 13833  00037C  EC6A  F01A         	call	___fttol	;wreg free
 13834  000380  502E               	movf	?___fttol,w,c
 13835  000382  102F               	iorwf	?___fttol+1,w,c
 13836  000384  1030               	iorwf	?___fttol+2,w,c
 13837  000386  1031               	iorwf	?___fttol+3,w,c
 13838  000388  A4D8               	btfss	status,2,c
 13839  00038A  D069               	goto	l9172
 13840  00038C  0100               	movlb	0	; () banked
 13841  00038E  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 13842  000390  D066               	goto	l9172
 13843  000392  0100               	movlb	0	; () banked
 13844  000394  51A9               	movf	(printf@exp+1)& (0+255),w,b
 13845  000396  E107               	bnz	l9158
 13846  000398  0E02               	movlw	2
 13847  00039A  0100               	movlb	0	; () banked
 13848  00039C  5DA8               	subwf	printf@exp& (0+255),w,b
 13849  00039E  B0D8               	btfsc	status,0,c
 13850  0003A0  D002               	goto	l9158
 13851  0003A2  D05D               	goto	l9172
 13852  0003A4  D000               	goto	l9158
 13853  0003A6                     l9158:
 13854                           
 13855                           ; BSR set to: 0
 13856                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13857  0003A6  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13858  0003AA  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13859  0003AE  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13860  0003B2  0E70               	movlw	112
 13861  0003B4  6E14               	movwf	___ftge@ff2,c
 13862  0003B6  0E89               	movlw	137
 13863  0003B8  6E15               	movwf	___ftge@ff2+1,c
 13864  0003BA  0E40               	movlw	64
 13865  0003BC  6E16               	movwf	___ftge@ff2+2,c
 13866  0003BE  EC90  F01E         	call	___ftge	;wreg free
 13867  0003C2  B0D8               	btfsc	status,0,c
 13868  0003C4  D003               	goto	l9162
 13869                           
 13870                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13871  0003C6  0100               	movlb	0	; () banked
 13872  0003C8  0EF7               	movlw	247
 13873  0003CA  D002               	goto	L8
 13874  0003CC                     l9162:
 13875                           
 13876                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13877  0003CC  0100               	movlb	0	; () banked
 13878  0003CE  0EF8               	movlw	248
 13879  0003D0                     L8:
 13880  0003D0  27A8               	addwf	printf@exp& (0+255),f,b
 13881  0003D2  0EFF               	movlw	255
 13882  0003D4  23A9               	addwfc	(printf@exp+1)& (0+255),f,b
 13883  0003D6  D000               	goto	l9164
 13884  0003D8                     l9164:
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;doprnt.c: 1124: }
 13888                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13889  0003D8  0100               	movlb	0	; () banked
 13890  0003DA  51A8               	movf	printf@exp& (0+255),w,b
 13891  0003DC  ECAF  F009         	call	_scale
 13892  0003E0  C043  F0A2         	movff	?_scale,printf@tmpval
 13893  0003E4  C044  F0A3         	movff	?_scale+1,printf@tmpval+1
 13894  0003E8  C045  F0A4         	movff	?_scale+2,printf@tmpval+2
 13895                           
 13896                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13897  0003EC  D017               	goto	l9168
 13898  0003EE  C0B0  F011         	movff	printf@fval,__div_to_l_@f1
 13899  0003F2  C0B1  F012         	movff	printf@fval+1,__div_to_l_@f1+1
 13900  0003F6  C0B2  F013         	movff	printf@fval+2,__div_to_l_@f1+2
 13901  0003FA  C0A2  F014         	movff	printf@tmpval,__div_to_l_@f2
 13902  0003FE  C0A3  F015         	movff	printf@tmpval+1,__div_to_l_@f2+1
 13903  000402  C0A4  F016         	movff	printf@tmpval+2,__div_to_l_@f2+2
 13904  000406  EC7B  F018         	call	__div_to_l_	;wreg free
 13905  00040A  C011  F0AA         	movff	?__div_to_l_,printf@val
 13906  00040E  C012  F0AB         	movff	?__div_to_l_+1,printf@val+1
 13907  000412  C013  F0AC         	movff	?__div_to_l_+2,printf@val+2
 13908  000416  C014  F0AD         	movff	?__div_to_l_+3,printf@val+3
 13909  00041A  D017               	goto	l9170
 13910  00041C                     l9168:
 13911  00041C  C0B0  F011         	movff	printf@fval,__tdiv_to_l_@f1
 13912  000420  C0B1  F012         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 13913  000424  C0B2  F013         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 13914  000428  C0A2  F014         	movff	printf@tmpval,__tdiv_to_l_@f2
 13915  00042C  C0A3  F015         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 13916  000430  C0A4  F016         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 13917  000434  ECF3  F017         	call	__tdiv_to_l_	;wreg free
 13918  000438  C011  F0AA         	movff	?__tdiv_to_l_,printf@val
 13919  00043C  C012  F0AB         	movff	?__tdiv_to_l_+1,printf@val+1
 13920  000440  C013  F0AC         	movff	?__tdiv_to_l_+2,printf@val+2
 13921  000444  C014  F0AD         	movff	?__tdiv_to_l_+3,printf@val+3
 13922  000448  D000               	goto	l9170
 13923  00044A                     l9170:
 13924                           
 13925                           ;doprnt.c: 1129: fval = 0.0;
 13926  00044A  0E00               	movlw	0
 13927  00044C  0100               	movlb	0	; () banked
 13928  00044E  6FB0               	movwf	printf@fval& (0+255),b
 13929  000450  0E00               	movlw	0
 13930  000452  0100               	movlb	0	; () banked
 13931  000454  6FB1               	movwf	(printf@fval+1)& (0+255),b
 13932  000456  0E00               	movlw	0
 13933  000458  0100               	movlb	0	; () banked
 13934  00045A  6FB2               	movwf	(printf@fval+2)& (0+255),b
 13935                           
 13936                           ;doprnt.c: 1130: } else {
 13937  00045C  D034               	goto	l9176
 13938  00045E                     l9172:
 13939                           
 13940                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13941  00045E  C0B0  F02E         	movff	printf@fval,___fttol@f1
 13942  000462  C0B1  F02F         	movff	printf@fval+1,___fttol@f1+1
 13943  000466  C0B2  F030         	movff	printf@fval+2,___fttol@f1+2
 13944  00046A  EC6A  F01A         	call	___fttol	;wreg free
 13945  00046E  C02E  F0AA         	movff	?___fttol,printf@val
 13946  000472  C02F  F0AB         	movff	?___fttol+1,printf@val+1
 13947  000476  C030  F0AC         	movff	?___fttol+2,printf@val+2
 13948  00047A  C031  F0AD         	movff	?___fttol+3,printf@val+3
 13949                           
 13950                           ;doprnt.c: 1132: fval -= (double)val;
 13951  00047E  C0B0  F080         	movff	printf@fval,___ftsub@f1
 13952  000482  C0B1  F081         	movff	printf@fval+1,___ftsub@f1+1
 13953  000486  C0B2  F082         	movff	printf@fval+2,___ftsub@f1+2
 13954  00048A  C0AA  F019         	movff	printf@val,___lltoft@c
 13955  00048E  C0AB  F01A         	movff	printf@val+1,___lltoft@c+1
 13956  000492  C0AC  F01B         	movff	printf@val+2,___lltoft@c+2
 13957  000496  C0AD  F01C         	movff	printf@val+3,___lltoft@c+3
 13958  00049A  ECC0  F021         	call	___lltoft	;wreg free
 13959  00049E  C019  F083         	movff	?___lltoft,___ftsub@f2
 13960  0004A2  C01A  F084         	movff	?___lltoft+1,___ftsub@f2+1
 13961  0004A6  C01B  F085         	movff	?___lltoft+2,___ftsub@f2+2
 13962  0004AA  ECC6  F022         	call	___ftsub	;wreg free
 13963  0004AE  C080  F0B0         	movff	?___ftsub,printf@fval
 13964  0004B2  C081  F0B1         	movff	?___ftsub+1,printf@fval+1
 13965  0004B6  C082  F0B2         	movff	?___ftsub+2,printf@fval+2
 13966                           
 13967                           ;doprnt.c: 1133: exp = 0;
 13968  0004BA  0E00               	movlw	0
 13969  0004BC  0100               	movlb	0	; () banked
 13970  0004BE  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13971  0004C0  0E00               	movlw	0
 13972  0004C2  6FA8               	movwf	printf@exp& (0+255),b
 13973  0004C4  D000               	goto	l9176
 13974  0004C6                     l9176:
 13975                           
 13976                           ; BSR set to: 0
 13977                           ;doprnt.c: 1134: }
 13978                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13979  0004C6  0E01               	movlw	1
 13980  0004C8  0100               	movlb	0	; () banked
 13981  0004CA  6FB3               	movwf	printf@c& (0+255),b
 13982  0004CC                     l9178:
 13983                           
 13984                           ; BSR set to: 0
 13985  0004CC  0E0A               	movlw	10
 13986  0004CE  0100               	movlb	0	; () banked
 13987  0004D0  19B3               	xorwf	printf@c& (0+255),w,b
 13988  0004D2  B4D8               	btfsc	status,2,c
 13989  0004D4  D022               	goto	l9190
 13990  0004D6  D001               	goto	l9182
 13991                           
 13992                           ; BSR set to: 0
 13993  0004D8  D020               	goto	l9190
 13994  0004DA                     l9182:
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;doprnt.c: 1137: if(val < dpowers[c])
 13998  0004DA  0100               	movlb	0	; () banked
 13999  0004DC  51B3               	movf	printf@c& (0+255),w,b
 14000  0004DE  0D04               	mullw	4
 14001  0004E0  0E9C               	movlw	low _dpowers
 14002  0004E2  24F3               	addwf	prodl,w,c
 14003  0004E4  6EF6               	movwf	tblptrl,c
 14004  0004E6  0EFD               	movlw	high _dpowers
 14005  0004E8  20F4               	addwfc	prodh,w,c
 14006  0004EA  6EF7               	movwf	tblptrh,c
 14007  0004EC                     	if	0	;There are less than 3 active tblptr bytes
 14008  0004EC                     	endif
 14009  0004EC  0009               	tblrd		*+
 14010  0004EE  50F5               	movf	tablat,w,c
 14011  0004F0  0100               	movlb	0	; () banked
 14012  0004F2  5DAA               	subwf	printf@val& (0+255),w,b
 14013  0004F4  0009               	tblrd		*+
 14014  0004F6  50F5               	movf	tablat,w,c
 14015  0004F8  0100               	movlb	0	; () banked
 14016  0004FA  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 14017  0004FC  0009               	tblrd		*+
 14018  0004FE  50F5               	movf	tablat,w,c
 14019  000500  0100               	movlb	0	; () banked
 14020  000502  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14021  000504  0009               	tblrd		*+
 14022  000506  50F5               	movf	tablat,w,c
 14023  000508  0100               	movlb	0	; () banked
 14024  00050A  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14025  00050C  A0D8               	btfss	status,0,c
 14026  00050E  D005               	goto	l9190
 14027  000510  D001               	goto	l9186
 14028                           
 14029                           ; BSR set to: 0
 14030                           ;doprnt.c: 1138: break;
 14031  000512  D003               	goto	l9190
 14032  000514                     l9186:
 14033                           
 14034                           ; BSR set to: 0
 14035  000514  0100               	movlb	0	; () banked
 14036  000516  2BB3               	incf	printf@c& (0+255),f,b
 14037  000518  D7D9               	goto	l9178
 14038  00051A                     l9190:
 14039                           
 14040                           ; BSR set to: 0
 14041                           ;doprnt.c: 1142: width -= prec + c + exp;
 14042  00051A  C0B3  F094         	movff	printf@c,??_printf
 14043  00051E  0100               	movlb	0	; () banked
 14044  000520  6B95               	clrf	(??_printf+1)& (0+255),b
 14045  000522  BF94               	btfsc	??_printf& (0+255),7,b
 14046  000524  0795               	decf	(??_printf+1)& (0+255),f,b
 14047  000526  0100               	movlb	0	; () banked
 14048  000528  51A0               	movf	printf@prec& (0+255),w,b
 14049  00052A  0100               	movlb	0	; () banked
 14050  00052C  2794               	addwf	??_printf& (0+255),f,b
 14051  00052E  0100               	movlb	0	; () banked
 14052  000530  51A1               	movf	(printf@prec+1)& (0+255),w,b
 14053  000532  0100               	movlb	0	; () banked
 14054  000534  2395               	addwfc	(??_printf+1)& (0+255),f,b
 14055  000536  0100               	movlb	0	; () banked
 14056  000538  51A8               	movf	printf@exp& (0+255),w,b
 14057  00053A  0100               	movlb	0	; () banked
 14058  00053C  2794               	addwf	??_printf& (0+255),f,b
 14059  00053E  0100               	movlb	0	; () banked
 14060  000540  51A9               	movf	(printf@exp+1)& (0+255),w,b
 14061  000542  0100               	movlb	0	; () banked
 14062  000544  2395               	addwfc	(??_printf+1)& (0+255),f,b
 14063  000546  0100               	movlb	0	; () banked
 14064  000548  5194               	movf	??_printf& (0+255),w,b
 14065  00054A  0100               	movlb	0	; () banked
 14066  00054C  5FA6               	subwf	printf@width& (0+255),f,b
 14067  00054E  0100               	movlb	0	; () banked
 14068  000550  5195               	movf	(??_printf+1)& (0+255),w,b
 14069  000552  0100               	movlb	0	; () banked
 14070  000554  5BA7               	subwfb	(printf@width+1)& (0+255),f,b
 14071                           
 14072                           ;doprnt.c: 1143: if(
 14073                           ;doprnt.c: 1147: prec)
 14074  000556  0100               	movlb	0	; () banked
 14075  000558  51A0               	movf	printf@prec& (0+255),w,b
 14076  00055A  0100               	movlb	0	; () banked
 14077  00055C  11A1               	iorwf	(printf@prec+1)& (0+255),w,b
 14078  00055E  B4D8               	btfsc	status,2,c
 14079  000560  D005               	goto	l9194
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;doprnt.c: 1148: width--;
 14083  000562  0100               	movlb	0	; () banked
 14084  000564  07A6               	decf	printf@width& (0+255),f,b
 14085  000566  A0D8               	btfss	status,0,c
 14086  000568  07A7               	decf	(printf@width+1)& (0+255),f,b
 14087  00056A  D000               	goto	l9194
 14088  00056C                     l9194:
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;doprnt.c: 1149: if(flag & 0x03)
 14092  00056C  0E03               	movlw	3
 14093  00056E  0100               	movlb	0	; () banked
 14094  000570  15AE               	andwf	printf@flag& (0+255),w,b
 14095  000572  0100               	movlb	0	; () banked
 14096  000574  6F94               	movwf	??_printf& (0+255),b
 14097  000576  0E00               	movlw	0
 14098  000578  0100               	movlb	0	; () banked
 14099  00057A  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14100  00057C  0100               	movlb	0	; () banked
 14101  00057E  6F95               	movwf	(??_printf+1)& (0+255),b
 14102  000580  0100               	movlb	0	; () banked
 14103  000582  5194               	movf	??_printf& (0+255),w,b
 14104  000584  0100               	movlb	0	; () banked
 14105  000586  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14106  000588  B4D8               	btfsc	status,2,c
 14107  00058A  D005               	goto	l9198
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;doprnt.c: 1150: width--;
 14111  00058C  0100               	movlb	0	; () banked
 14112  00058E  07A6               	decf	printf@width& (0+255),f,b
 14113  000590  A0D8               	btfss	status,0,c
 14114  000592  07A7               	decf	(printf@width+1)& (0+255),f,b
 14115  000594  D000               	goto	l9198
 14116  000596                     l9198:
 14117                           
 14118                           ; BSR set to: 0
 14119                           ;doprnt.c: 1153: if(flag & 0x04) {
 14120  000596  0100               	movlb	0	; () banked
 14121  000598  A5AE               	btfss	printf@flag& (0+255),2,b
 14122  00059A  D031               	goto	l9214
 14123                           
 14124                           ; BSR set to: 0
 14125                           ;doprnt.c: 1157: if(flag & 0x03)
 14126  00059C  0E03               	movlw	3
 14127  00059E  0100               	movlb	0	; () banked
 14128  0005A0  15AE               	andwf	printf@flag& (0+255),w,b
 14129  0005A2  0100               	movlb	0	; () banked
 14130  0005A4  6F94               	movwf	??_printf& (0+255),b
 14131  0005A6  0E00               	movlw	0
 14132  0005A8  0100               	movlb	0	; () banked
 14133  0005AA  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14134  0005AC  0100               	movlb	0	; () banked
 14135  0005AE  6F95               	movwf	(??_printf+1)& (0+255),b
 14136  0005B0  0100               	movlb	0	; () banked
 14137  0005B2  5194               	movf	??_printf& (0+255),w,b
 14138  0005B4  0100               	movlb	0	; () banked
 14139  0005B6  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14140  0005B8  B4D8               	btfsc	status,2,c
 14141  0005BA  D00C               	goto	l9208
 14142                           
 14143                           ; BSR set to: 0
 14144                           ;doprnt.c: 1159: (putch('-') );
 14145  0005BC  0E2D               	movlw	45
 14146  0005BE  ECDC  F026         	call	_putch
 14147                           
 14148                           ;doprnt.c: 1168: while(width > 0) {
 14149  0005C2  D008               	goto	l9208
 14150  0005C4                     l9204:
 14151                           
 14152                           ;doprnt.c: 1169: (putch('0') );
 14153  0005C4  0E30               	movlw	48
 14154  0005C6  ECDC  F026         	call	_putch
 14155                           
 14156                           ;doprnt.c: 1170: width--;
 14157  0005CA  0100               	movlb	0	; () banked
 14158  0005CC  07A6               	decf	printf@width& (0+255),f,b
 14159  0005CE  A0D8               	btfss	status,0,c
 14160  0005D0  07A7               	decf	(printf@width+1)& (0+255),f,b
 14161  0005D2  D000               	goto	l9208
 14162  0005D4                     l9208:
 14163  0005D4  0100               	movlb	0	; () banked
 14164  0005D6  BFA7               	btfsc	(printf@width+1)& (0+255),7,b
 14165  0005D8  D077               	goto	l9226
 14166  0005DA  0100               	movlb	0	; () banked
 14167  0005DC  51A7               	movf	(printf@width+1)& (0+255),w,b
 14168  0005DE  E1F2               	bnz	l9204
 14169  0005E0  0100               	movlb	0	; () banked
 14170  0005E2  05A6               	decf	printf@width& (0+255),w,b
 14171  0005E4  A0D8               	btfss	status,0,c
 14172  0005E6  D070               	goto	l9226
 14173  0005E8  D7ED               	goto	l9204
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;doprnt.c: 1171: }
 14177                           ;doprnt.c: 1173: } else
 14178  0005EA  D06E               	goto	l9226
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;doprnt.c: 1175: {
 14182                           ;doprnt.c: 1180: while(width > 0) {
 14183  0005EC  D008               	goto	l9214
 14184  0005EE                     l9210:
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;doprnt.c: 1181: (putch(' ') );
 14188  0005EE  0E20               	movlw	32
 14189  0005F0  ECDC  F026         	call	_putch
 14190                           
 14191                           ;doprnt.c: 1182: width--;
 14192  0005F4  0100               	movlb	0	; () banked
 14193  0005F6  07A6               	decf	printf@width& (0+255),f,b
 14194  0005F8  A0D8               	btfss	status,0,c
 14195  0005FA  07A7               	decf	(printf@width+1)& (0+255),f,b
 14196  0005FC  D000               	goto	l9214
 14197  0005FE                     l9214:
 14198                           
 14199                           ; BSR set to: 0
 14200  0005FE  0100               	movlb	0	; () banked
 14201  000600  BFA7               	btfsc	(printf@width+1)& (0+255),7,b
 14202  000602  D007               	goto	l9216
 14203  000604  0100               	movlb	0	; () banked
 14204  000606  51A7               	movf	(printf@width+1)& (0+255),w,b
 14205  000608  E1F2               	bnz	l9210
 14206  00060A  0100               	movlb	0	; () banked
 14207  00060C  05A6               	decf	printf@width& (0+255),w,b
 14208  00060E  B0D8               	btfsc	status,0,c
 14209  000610  D7EE               	goto	l9210
 14210  000612                     l9216:
 14211                           
 14212                           ; BSR set to: 0
 14213                           ;doprnt.c: 1183: }
 14214                           ;doprnt.c: 1188: if(flag & 0x03)
 14215  000612  0E03               	movlw	3
 14216  000614  0100               	movlb	0	; () banked
 14217  000616  15AE               	andwf	printf@flag& (0+255),w,b
 14218  000618  0100               	movlb	0	; () banked
 14219  00061A  6F94               	movwf	??_printf& (0+255),b
 14220  00061C  0E00               	movlw	0
 14221  00061E  0100               	movlb	0	; () banked
 14222  000620  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14223  000622  0100               	movlb	0	; () banked
 14224  000624  6F95               	movwf	(??_printf+1)& (0+255),b
 14225  000626  0100               	movlb	0	; () banked
 14226  000628  5194               	movf	??_printf& (0+255),w,b
 14227  00062A  0100               	movlb	0	; () banked
 14228  00062C  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14229  00062E  B4D8               	btfsc	status,2,c
 14230  000630  D04B               	goto	l9226
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;doprnt.c: 1190: (putch('-') );
 14234  000632  0E2D               	movlw	45
 14235  000634  ECDC  F026         	call	_putch
 14236                           
 14237                           ;doprnt.c: 1195: }
 14238                           ;doprnt.c: 1196: while(c--) {
 14239  000638  D047               	goto	l9226
 14240  00063A                     l9220:
 14241                           
 14242                           ;doprnt.c: 1200: {
 14243                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 14244  00063A  C0AA  F011         	movff	printf@val,___lldiv@dividend
 14245  00063E  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 14246  000642  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 14247  000646  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 14248  00064A  0100               	movlb	0	; () banked
 14249  00064C  51B3               	movf	printf@c& (0+255),w,b
 14250  00064E  0D04               	mullw	4
 14251  000650  0E9C               	movlw	low _dpowers
 14252  000652  24F3               	addwf	prodl,w,c
 14253  000654  6EF6               	movwf	tblptrl,c
 14254  000656  0EFD               	movlw	high _dpowers
 14255  000658  20F4               	addwfc	prodh,w,c
 14256  00065A  6EF7               	movwf	tblptrh,c
 14257  00065C                     	if	0	;There are less than 3 active tblptr bytes
 14258  00065C                     	endif
 14259  00065C  0009               	tblrd		*+
 14260  00065E  CFF5 F015          	movff	tablat,___lldiv@divisor
 14261  000662  0009               	tblrd		*+
 14262  000664  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14263  000668  0009               	tblrd		*+
 14264  00066A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14265  00066E  000A               	tblrd		*-
 14266  000670  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14267  000674  EC69  F01F         	call	___lldiv	;wreg free
 14268  000678  C011  F0A2         	movff	?___lldiv,printf@tmpval
 14269  00067C  C012  F0A3         	movff	?___lldiv+1,printf@tmpval+1
 14270  000680  C013  F0A4         	movff	?___lldiv+2,printf@tmpval+2
 14271  000684  C014  F0A5         	movff	?___lldiv+3,printf@tmpval+3
 14272                           
 14273                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14274  000688  C0A2  F01E         	movff	printf@tmpval,___llmod@dividend
 14275  00068C  C0A3  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14276  000690  C0A4  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14277  000694  C0A5  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14278  000698  0E0A               	movlw	10
 14279  00069A  6E22               	movwf	___llmod@divisor,c
 14280  00069C  0E00               	movlw	0
 14281  00069E  6E23               	movwf	___llmod@divisor+1,c
 14282  0006A0  0E00               	movlw	0
 14283  0006A2  6E24               	movwf	___llmod@divisor+2,c
 14284  0006A4  0E00               	movlw	0
 14285  0006A6  6E25               	movwf	___llmod@divisor+3,c
 14286  0006A8  ECB5  F020         	call	___llmod	;wreg free
 14287  0006AC  C01E  F0A2         	movff	?___llmod,printf@tmpval
 14288  0006B0  C01F  F0A3         	movff	?___llmod+1,printf@tmpval+1
 14289  0006B4  C020  F0A4         	movff	?___llmod+2,printf@tmpval+2
 14290  0006B8  C021  F0A5         	movff	?___llmod+3,printf@tmpval+3
 14291                           
 14292                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14293  0006BC  0100               	movlb	0	; () banked
 14294  0006BE  51A2               	movf	printf@tmpval& (0+255),w,b
 14295  0006C0  0F30               	addlw	48
 14296  0006C2  ECDC  F026         	call	_putch
 14297  0006C6  D000               	goto	l9226
 14298  0006C8                     l9226:
 14299  0006C8  0100               	movlb	0	; () banked
 14300  0006CA  07B3               	decf	printf@c& (0+255),f,b
 14301  0006CC  0100               	movlb	0	; () banked
 14302  0006CE  29B3               	incf	printf@c& (0+255),w,b
 14303  0006D0  B4D8               	btfsc	status,2,c
 14304  0006D2  D00A               	goto	l9232
 14305  0006D4  D7B2               	goto	l9220
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;doprnt.c: 1204: }
 14309                           ;doprnt.c: 1206: }
 14310                           ;doprnt.c: 1207: while(exp > 0) {
 14311  0006D6  D008               	goto	l9232
 14312  0006D8                     l9228:
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;doprnt.c: 1208: (putch('0') );
 14316  0006D8  0E30               	movlw	48
 14317  0006DA  ECDC  F026         	call	_putch
 14318                           
 14319                           ;doprnt.c: 1209: exp--;
 14320  0006DE  0100               	movlb	0	; () banked
 14321  0006E0  07A8               	decf	printf@exp& (0+255),f,b
 14322  0006E2  A0D8               	btfss	status,0,c
 14323  0006E4  07A9               	decf	(printf@exp+1)& (0+255),f,b
 14324  0006E6  D000               	goto	l9232
 14325  0006E8                     l9232:
 14326                           
 14327                           ; BSR set to: 0
 14328  0006E8  0100               	movlb	0	; () banked
 14329  0006EA  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 14330  0006EC  D007               	goto	l9234
 14331  0006EE  0100               	movlb	0	; () banked
 14332  0006F0  51A9               	movf	(printf@exp+1)& (0+255),w,b
 14333  0006F2  E1F2               	bnz	l9228
 14334  0006F4  0100               	movlb	0	; () banked
 14335  0006F6  05A8               	decf	printf@exp& (0+255),w,b
 14336  0006F8  B0D8               	btfsc	status,0,c
 14337  0006FA  D7EE               	goto	l9228
 14338  0006FC                     l9234:
 14339                           
 14340                           ; BSR set to: 0
 14341                           ;doprnt.c: 1210: }
 14342                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14343  0006FC  0100               	movlb	0	; () banked
 14344  0006FE  BFA1               	btfsc	(printf@prec+1)& (0+255),7,b
 14345  000700  D00C               	goto	l1425
 14346  000702  0100               	movlb	0	; () banked
 14347  000704  51A1               	movf	(printf@prec+1)& (0+255),w,b
 14348  000706  E105               	bnz	u8010
 14349  000708  0E09               	movlw	9
 14350  00070A  0100               	movlb	0	; () banked
 14351  00070C  5DA0               	subwf	printf@prec& (0+255),w,b
 14352  00070E  A0D8               	btfss	status,0,c
 14353  000710  D004               	goto	l1425
 14354  000712                     u8010:
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 14358  000712  0E08               	movlw	8
 14359  000714  0100               	movlb	0	; () banked
 14360  000716  6FB3               	movwf	printf@c& (0+255),b
 14361  000718  D003               	goto	l9238
 14362  00071A                     l1425:
 14363                           
 14364                           ; BSR set to: 0
 14365                           ;doprnt.c: 1213: else
 14366                           ;doprnt.c: 1214: c = prec;
 14367  00071A  C0A0  F0B3         	movff	printf@prec,printf@c
 14368  00071E  D000               	goto	l9238
 14369  000720                     l9238:
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;doprnt.c: 1215: prec -= c;
 14373  000720  0100               	movlb	0	; () banked
 14374  000722  51B3               	movf	printf@c& (0+255),w,b
 14375  000724  0100               	movlb	0	; () banked
 14376  000726  5FA0               	subwf	printf@prec& (0+255),f,b
 14377  000728  0E00               	movlw	0
 14378  00072A  0100               	movlb	0	; () banked
 14379  00072C  BFB3               	btfsc	printf@c& (0+255),7,b
 14380  00072E  0EFF               	movlw	255
 14381  000730  0100               	movlb	0	; () banked
 14382  000732  5BA1               	subwfb	(printf@prec+1)& (0+255),f,b
 14383                           
 14384                           ; BSR set to: 0
 14385                           ;doprnt.c: 1219: if(c)
 14386  000734  0100               	movlb	0	; () banked
 14387  000736  51B3               	movf	printf@c& (0+255),w,b
 14388  000738  0100               	movlb	0	; () banked
 14389  00073A  B4D8               	btfsc	status,2,c
 14390  00073C  D004               	goto	l9244
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;doprnt.c: 1221: (putch('.') );
 14394  00073E  0E2E               	movlw	46
 14395  000740  ECDC  F026         	call	_putch
 14396  000744  D000               	goto	l9244
 14397  000746                     l9244:
 14398                           
 14399                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14400  000746  0100               	movlb	0	; () banked
 14401  000748  51B3               	movf	printf@c& (0+255),w,b
 14402  00074A  ECAF  F009         	call	_scale
 14403  00074E  C043  F09A         	movff	?_scale,_printf$2979
 14404  000752  C044  F09B         	movff	?_scale+1,_printf$2979+1
 14405  000756  C045  F09C         	movff	?_scale+2,_printf$2979+2
 14406                           
 14407                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14408  00075A  C0B0  F022         	movff	printf@fval,___ftmul@f2
 14409  00075E  C0B1  F023         	movff	printf@fval+1,___ftmul@f2+1
 14410  000762  C0B2  F024         	movff	printf@fval+2,___ftmul@f2+2
 14411  000766  C09A  F01F         	movff	_printf$2979,___ftmul@f1
 14412  00076A  C09B  F020         	movff	_printf$2979+1,___ftmul@f1+1
 14413  00076E  C09C  F021         	movff	_printf$2979+2,___ftmul@f1+2
 14414  000772  EC00  F019         	call	___ftmul	;wreg free
 14415  000776  C01F  F02E         	movff	?___ftmul,___fttol@f1
 14416  00077A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
 14417  00077E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
 14418  000782  EC6A  F01A         	call	___fttol	;wreg free
 14419  000786  C02E  F0AA         	movff	?___fttol,printf@val
 14420  00078A  C02F  F0AB         	movff	?___fttol+1,printf@val+1
 14421  00078E  C030  F0AC         	movff	?___fttol+2,printf@val+2
 14422  000792  C031  F0AD         	movff	?___fttol+3,printf@val+3
 14423                           
 14424                           ;doprnt.c: 1228: while(c--) {
 14425  000796  D06E               	goto	l9254
 14426  000798                     l9248:
 14427                           
 14428                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 14429  000798  C0AA  F011         	movff	printf@val,___lldiv@dividend
 14430  00079C  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 14431  0007A0  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 14432  0007A4  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 14433  0007A8  0100               	movlb	0	; () banked
 14434  0007AA  51B3               	movf	printf@c& (0+255),w,b
 14435  0007AC  0D04               	mullw	4
 14436  0007AE  0E9C               	movlw	low _dpowers
 14437  0007B0  24F3               	addwf	prodl,w,c
 14438  0007B2  6EF6               	movwf	tblptrl,c
 14439  0007B4  0EFD               	movlw	high _dpowers
 14440  0007B6  20F4               	addwfc	prodh,w,c
 14441  0007B8  6EF7               	movwf	tblptrh,c
 14442  0007BA                     	if	0	;There are less than 3 active tblptr bytes
 14443  0007BA                     	endif
 14444  0007BA  0009               	tblrd		*+
 14445  0007BC  CFF5 F015          	movff	tablat,___lldiv@divisor
 14446  0007C0  0009               	tblrd		*+
 14447  0007C2  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14448  0007C6  0009               	tblrd		*+
 14449  0007C8  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14450  0007CC  000A               	tblrd		*-
 14451  0007CE  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14452  0007D2  EC69  F01F         	call	___lldiv	;wreg free
 14453  0007D6  C011  F0A2         	movff	?___lldiv,printf@tmpval
 14454  0007DA  C012  F0A3         	movff	?___lldiv+1,printf@tmpval+1
 14455  0007DE  C013  F0A4         	movff	?___lldiv+2,printf@tmpval+2
 14456  0007E2  C014  F0A5         	movff	?___lldiv+3,printf@tmpval+3
 14457                           
 14458                           ;doprnt.c: 1230: tmpval.vd %= 10;
 14459  0007E6  C0A2  F01E         	movff	printf@tmpval,___llmod@dividend
 14460  0007EA  C0A3  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14461  0007EE  C0A4  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14462  0007F2  C0A5  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14463  0007F6  0E0A               	movlw	10
 14464  0007F8  6E22               	movwf	___llmod@divisor,c
 14465  0007FA  0E00               	movlw	0
 14466  0007FC  6E23               	movwf	___llmod@divisor+1,c
 14467  0007FE  0E00               	movlw	0
 14468  000800  6E24               	movwf	___llmod@divisor+2,c
 14469  000802  0E00               	movlw	0
 14470  000804  6E25               	movwf	___llmod@divisor+3,c
 14471  000806  ECB5  F020         	call	___llmod	;wreg free
 14472  00080A  C01E  F0A2         	movff	?___llmod,printf@tmpval
 14473  00080E  C01F  F0A3         	movff	?___llmod+1,printf@tmpval+1
 14474  000812  C020  F0A4         	movff	?___llmod+2,printf@tmpval+2
 14475  000816  C021  F0A5         	movff	?___llmod+3,printf@tmpval+3
 14476                           
 14477                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 14478  00081A  0100               	movlb	0	; () banked
 14479  00081C  51A2               	movf	printf@tmpval& (0+255),w,b
 14480  00081E  0F30               	addlw	48
 14481  000820  ECDC  F026         	call	_putch
 14482                           
 14483                           ;doprnt.c: 1232: val %= dpowers[c];
 14484  000824  C0AA  F01E         	movff	printf@val,___llmod@dividend
 14485  000828  C0AB  F01F         	movff	printf@val+1,___llmod@dividend+1
 14486  00082C  C0AC  F020         	movff	printf@val+2,___llmod@dividend+2
 14487  000830  C0AD  F021         	movff	printf@val+3,___llmod@dividend+3
 14488  000834  0100               	movlb	0	; () banked
 14489  000836  51B3               	movf	printf@c& (0+255),w,b
 14490  000838  0D04               	mullw	4
 14491  00083A  0E9C               	movlw	low _dpowers
 14492  00083C  24F3               	addwf	prodl,w,c
 14493  00083E  6EF6               	movwf	tblptrl,c
 14494  000840  0EFD               	movlw	high _dpowers
 14495  000842  20F4               	addwfc	prodh,w,c
 14496  000844  6EF7               	movwf	tblptrh,c
 14497  000846                     	if	0	;There are less than 3 active tblptr bytes
 14498  000846                     	endif
 14499  000846  0009               	tblrd		*+
 14500  000848  CFF5 F022          	movff	tablat,___llmod@divisor
 14501  00084C  0009               	tblrd		*+
 14502  00084E  CFF5 F023          	movff	tablat,___llmod@divisor+1
 14503  000852  0009               	tblrd		*+
 14504  000854  CFF5 F024          	movff	tablat,___llmod@divisor+2
 14505  000858  000A               	tblrd		*-
 14506  00085A  CFF5 F025          	movff	tablat,___llmod@divisor+3
 14507  00085E  ECB5  F020         	call	___llmod	;wreg free
 14508  000862  C01E  F0AA         	movff	?___llmod,printf@val
 14509  000866  C01F  F0AB         	movff	?___llmod+1,printf@val+1
 14510  00086A  C020  F0AC         	movff	?___llmod+2,printf@val+2
 14511  00086E  C021  F0AD         	movff	?___llmod+3,printf@val+3
 14512  000872  D000               	goto	l9254
 14513  000874                     l9254:
 14514  000874  0100               	movlb	0	; () banked
 14515  000876  07B3               	decf	printf@c& (0+255),f,b
 14516  000878  0100               	movlb	0	; () banked
 14517  00087A  29B3               	incf	printf@c& (0+255),w,b
 14518  00087C  B4D8               	btfsc	status,2,c
 14519  00087E  D00A               	goto	l9260
 14520  000880  D78B               	goto	l9248
 14521                           
 14522                           ; BSR set to: 0
 14523                           ;doprnt.c: 1233: }
 14524                           ;doprnt.c: 1235: while(prec) {
 14525  000882  D008               	goto	l9260
 14526  000884                     l9256:
 14527                           
 14528                           ; BSR set to: 0
 14529                           ;doprnt.c: 1236: (putch('0') );
 14530  000884  0E30               	movlw	48
 14531  000886  ECDC  F026         	call	_putch
 14532                           
 14533                           ;doprnt.c: 1237: prec--;
 14534  00088A  0100               	movlb	0	; () banked
 14535  00088C  07A0               	decf	printf@prec& (0+255),f,b
 14536  00088E  A0D8               	btfss	status,0,c
 14537  000890  07A1               	decf	(printf@prec+1)& (0+255),f,b
 14538  000892  D000               	goto	l9260
 14539  000894                     l9260:
 14540                           
 14541                           ; BSR set to: 0
 14542  000894  0100               	movlb	0	; () banked
 14543  000896  51A0               	movf	printf@prec& (0+255),w,b
 14544  000898  0100               	movlb	0	; () banked
 14545  00089A  11A1               	iorwf	(printf@prec+1)& (0+255),w,b
 14546  00089C  B4D8               	btfsc	status,2,c
 14547  00089E  D1CE               	goto	l9358
 14548  0008A0  D7F1               	goto	l9256
 14549                           
 14550                           ; BSR set to: 0
 14551                           ;doprnt.c: 1238: }
 14552                           ;doprnt.c: 1245: continue;
 14553  0008A2  D1CC               	goto	l9358
 14554  0008A4                     l1386:
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;doprnt.c: 1246: }
 14558                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14559  0008A4  0100               	movlb	0	; () banked
 14560  0008A6  BFAE               	btfsc	printf@flag& (0+255),7,b
 14561  0008A8  D023               	goto	l9272
 14562                           
 14563                           ; BSR set to: 0
 14564                           ;doprnt.c: 1253: {
 14565                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 14566  0008AA  C09E  FFD9         	movff	printf@ap,fsr2l
 14567  0008AE  C09F  FFDA         	movff	printf@ap+1,fsr2h
 14568  0008B2  CFDE F0AA          	movff	postinc2,printf@val
 14569  0008B6  CFDD F0AB          	movff	postdec2,printf@val+1
 14570  0008BA  0100               	movlb	0	; () banked
 14571  0008BC  0E00               	movlw	0
 14572  0008BE  BFAB               	btfsc	(printf@val+1)& (0+255),7,b
 14573  0008C0  0EFF               	movlw	-1
 14574  0008C2  6FAC               	movwf	(printf@val+2)& (0+255),b
 14575  0008C4  6FAD               	movwf	(printf@val+3)& (0+255),b
 14576                           
 14577                           ; BSR set to: 0
 14578  0008C6  0E02               	movlw	2
 14579  0008C8  0100               	movlb	0	; () banked
 14580  0008CA  279E               	addwf	printf@ap& (0+255),f,b
 14581  0008CC  0E00               	movlw	0
 14582  0008CE  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 14583                           
 14584                           ; BSR set to: 0
 14585                           ;doprnt.c: 1261: if((long)val < 0) {
 14586  0008D0  0100               	movlb	0	; () banked
 14587  0008D2  AFAD               	btfss	(printf@val+3)& (0+255),7,b
 14588  0008D4  D078               	goto	l9306
 14589                           
 14590                           ; BSR set to: 0
 14591                           ;doprnt.c: 1262: flag |= 0x03;
 14592  0008D6  0E03               	movlw	3
 14593  0008D8  0100               	movlb	0	; () banked
 14594  0008DA  13AE               	iorwf	printf@flag& (0+255),f,b
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;doprnt.c: 1263: val = -val;
 14598  0008DC  0100               	movlb	0	; () banked
 14599  0008DE  1FAD               	comf	(printf@val+3)& (0+255),f,b
 14600  0008E0  1FAC               	comf	(printf@val+2)& (0+255),f,b
 14601  0008E2  1FAB               	comf	(printf@val+1)& (0+255),f,b
 14602  0008E4  6DAA               	negf	printf@val& (0+255),b
 14603  0008E6  0E00               	movlw	0
 14604  0008E8  23AB               	addwfc	(printf@val+1)& (0+255),f,b
 14605  0008EA  23AC               	addwfc	(printf@val+2)& (0+255),f,b
 14606  0008EC  23AD               	addwfc	(printf@val+3)& (0+255),f,b
 14607                           
 14608                           ; BSR set to: 0
 14609                           ;doprnt.c: 1264: }
 14610                           ;doprnt.c: 1266: }
 14611  0008EE  D06B               	goto	l9306
 14612  0008F0                     l9272:
 14613                           
 14614                           ; BSR set to: 0
 14615                           ;doprnt.c: 1268: else
 14616                           ;doprnt.c: 1273: {
 14617                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14618  0008F0  C09E  FFD9         	movff	printf@ap,fsr2l
 14619  0008F4  C09F  FFDA         	movff	printf@ap+1,fsr2h
 14620  0008F8  CFDE F094          	movff	postinc2,??_printf
 14621  0008FC  CFDD F095          	movff	postdec2,??_printf+1
 14622  000900  C094  F0AA         	movff	??_printf,printf@val
 14623  000904  C095  F0AB         	movff	??_printf+1,printf@val+1
 14624  000908  0100               	movlb	0	; () banked
 14625  00090A  6BAC               	clrf	(printf@val+2)& (0+255),b
 14626  00090C  6BAD               	clrf	(printf@val+3)& (0+255),b
 14627                           
 14628                           ; BSR set to: 0
 14629  00090E  0E02               	movlw	2
 14630  000910  0100               	movlb	0	; () banked
 14631  000912  279E               	addwf	printf@ap& (0+255),f,b
 14632  000914  0E00               	movlw	0
 14633  000916  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;doprnt.c: 1287: }
 14637                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14638  000918  D056               	goto	l9306
 14639  00091A                     l9276:
 14640                           
 14641                           ; BSR set to: 0
 14642                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14643  00091A  0E01               	movlw	1
 14644  00091C  0100               	movlb	0	; () banked
 14645  00091E  6FB3               	movwf	printf@c& (0+255),b
 14646  000920                     l9278:
 14647                           
 14648                           ; BSR set to: 0
 14649  000920  0E0A               	movlw	10
 14650  000922  0100               	movlb	0	; () banked
 14651  000924  19B3               	xorwf	printf@c& (0+255),w,b
 14652  000926  B4D8               	btfsc	status,2,c
 14653  000928  D058               	goto	l9308
 14654  00092A  D001               	goto	l9282
 14655                           
 14656                           ; BSR set to: 0
 14657  00092C  D056               	goto	l9308
 14658  00092E                     l9282:
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;doprnt.c: 1306: if(val < dpowers[c])
 14662  00092E  0100               	movlb	0	; () banked
 14663  000930  51B3               	movf	printf@c& (0+255),w,b
 14664  000932  0D04               	mullw	4
 14665  000934  0E9C               	movlw	low _dpowers
 14666  000936  24F3               	addwf	prodl,w,c
 14667  000938  6EF6               	movwf	tblptrl,c
 14668  00093A  0EFD               	movlw	high _dpowers
 14669  00093C  20F4               	addwfc	prodh,w,c
 14670  00093E  6EF7               	movwf	tblptrh,c
 14671  000940                     	if	0	;There are less than 3 active tblptr bytes
 14672  000940                     	endif
 14673  000940  0009               	tblrd		*+
 14674  000942  50F5               	movf	tablat,w,c
 14675  000944  0100               	movlb	0	; () banked
 14676  000946  5DAA               	subwf	printf@val& (0+255),w,b
 14677  000948  0009               	tblrd		*+
 14678  00094A  50F5               	movf	tablat,w,c
 14679  00094C  0100               	movlb	0	; () banked
 14680  00094E  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 14681  000950  0009               	tblrd		*+
 14682  000952  50F5               	movf	tablat,w,c
 14683  000954  0100               	movlb	0	; () banked
 14684  000956  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14685  000958  0009               	tblrd		*+
 14686  00095A  50F5               	movf	tablat,w,c
 14687  00095C  0100               	movlb	0	; () banked
 14688  00095E  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14689  000960  A0D8               	btfss	status,0,c
 14690  000962  D03B               	goto	l9308
 14691  000964  D001               	goto	l9286
 14692                           
 14693                           ; BSR set to: 0
 14694                           ;doprnt.c: 1307: break;
 14695  000966  D039               	goto	l9308
 14696  000968                     l9286:
 14697                           
 14698                           ; BSR set to: 0
 14699  000968  0100               	movlb	0	; () banked
 14700  00096A  2BB3               	incf	printf@c& (0+255),f,b
 14701  00096C  D7D9               	goto	l9278
 14702                           
 14703                           ; BSR set to: 0
 14704                           ;doprnt.c: 1309: break;
 14705                           
 14706                           ; BSR set to: 0
 14707  00096E  D035               	goto	l9308
 14708  000970                     l9290:
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14712  000970  0E01               	movlw	1
 14713  000972  0100               	movlb	0	; () banked
 14714  000974  6FB3               	movwf	printf@c& (0+255),b
 14715  000976                     l9292:
 14716                           
 14717                           ; BSR set to: 0
 14718  000976  0E08               	movlw	8
 14719  000978  0100               	movlb	0	; () banked
 14720  00097A  19B3               	xorwf	printf@c& (0+255),w,b
 14721  00097C  B4D8               	btfsc	status,2,c
 14722  00097E  D02D               	goto	l9308
 14723  000980  D001               	goto	l9296
 14724                           
 14725                           ; BSR set to: 0
 14726  000982  D02B               	goto	l9308
 14727  000984                     l9296:
 14728                           
 14729                           ; BSR set to: 0
 14730                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14731  000984  0100               	movlb	0	; () banked
 14732  000986  51B3               	movf	printf@c& (0+255),w,b
 14733  000988  0D04               	mullw	4
 14734  00098A  0E12               	movlw	low _hexpowers
 14735  00098C  24F3               	addwf	prodl,w,c
 14736  00098E  6EF6               	movwf	tblptrl,c
 14737  000990  0EFE               	movlw	high _hexpowers
 14738  000992  20F4               	addwfc	prodh,w,c
 14739  000994  6EF7               	movwf	tblptrh,c
 14740  000996                     	if	0	;There are less than 3 active tblptr bytes
 14741  000996                     	endif
 14742  000996  0009               	tblrd		*+
 14743  000998  50F5               	movf	tablat,w,c
 14744  00099A  0100               	movlb	0	; () banked
 14745  00099C  5DAA               	subwf	printf@val& (0+255),w,b
 14746  00099E  0009               	tblrd		*+
 14747  0009A0  50F5               	movf	tablat,w,c
 14748  0009A2  0100               	movlb	0	; () banked
 14749  0009A4  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 14750  0009A6  0009               	tblrd		*+
 14751  0009A8  50F5               	movf	tablat,w,c
 14752  0009AA  0100               	movlb	0	; () banked
 14753  0009AC  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14754  0009AE  0009               	tblrd		*+
 14755  0009B0  50F5               	movf	tablat,w,c
 14756  0009B2  0100               	movlb	0	; () banked
 14757  0009B4  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14758  0009B6  A0D8               	btfss	status,0,c
 14759  0009B8  D010               	goto	l9308
 14760  0009BA  D001               	goto	l9300
 14761                           
 14762                           ; BSR set to: 0
 14763                           ;doprnt.c: 1318: break;
 14764  0009BC  D00E               	goto	l9308
 14765  0009BE                     l9300:
 14766                           
 14767                           ; BSR set to: 0
 14768  0009BE  0100               	movlb	0	; () banked
 14769  0009C0  2BB3               	incf	printf@c& (0+255),f,b
 14770  0009C2  D7D9               	goto	l9292
 14771                           
 14772                           ; BSR set to: 0
 14773                           ;doprnt.c: 1336: }
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;doprnt.c: 1320: break;
 14777                           
 14778                           ; BSR set to: 0
 14779  0009C4  D00A               	goto	l9308
 14780  0009C6                     l9306:
 14781                           
 14782                           ; BSR set to: 0
 14783  0009C6  0100               	movlb	0	; () banked
 14784  0009C8  51AE               	movf	printf@flag& (0+255),w,b
 14785  0009CA  0B80               	andlw	128
 14786                           
 14787                           ; Switch size 1, requested type "space"
 14788                           ; Number of cases is 2, Range of values is 0 to 128
 14789                           ; switch strategies available:
 14790                           ; Name         Instructions Cycles
 14791                           ; simple_byte            7     4 (average)
 14792                           ;	Chosen strategy is simple_byte
 14793  0009CC  0A00               	xorlw	0	; case 0
 14794  0009CE  B4D8               	btfsc	status,2,c
 14795  0009D0  D7A4               	goto	l9276
 14796  0009D2  0A80               	xorlw	128	; case 128
 14797  0009D4  B4D8               	btfsc	status,2,c
 14798  0009D6  D7CC               	goto	l9290
 14799  0009D8  D000               	goto	l9308
 14800  0009DA                     l9308:
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14804  0009DA  0100               	movlb	0	; () banked
 14805  0009DC  51A6               	movf	printf@width& (0+255),w,b
 14806  0009DE  0100               	movlb	0	; () banked
 14807  0009E0  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14808  0009E2  B4D8               	btfsc	status,2,c
 14809  0009E4  D015               	goto	l9314
 14810                           
 14811                           ; BSR set to: 0
 14812  0009E6  0E03               	movlw	3
 14813  0009E8  0100               	movlb	0	; () banked
 14814  0009EA  15AE               	andwf	printf@flag& (0+255),w,b
 14815  0009EC  0100               	movlb	0	; () banked
 14816  0009EE  6F94               	movwf	??_printf& (0+255),b
 14817  0009F0  0E00               	movlw	0
 14818  0009F2  0100               	movlb	0	; () banked
 14819  0009F4  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14820  0009F6  0100               	movlb	0	; () banked
 14821  0009F8  6F95               	movwf	(??_printf+1)& (0+255),b
 14822  0009FA  0100               	movlb	0	; () banked
 14823  0009FC  5194               	movf	??_printf& (0+255),w,b
 14824  0009FE  0100               	movlb	0	; () banked
 14825  000A00  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14826  000A02  B4D8               	btfsc	status,2,c
 14827  000A04  D005               	goto	l9314
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;doprnt.c: 1346: width--;
 14831  000A06  0100               	movlb	0	; () banked
 14832  000A08  07A6               	decf	printf@width& (0+255),f,b
 14833  000A0A  A0D8               	btfss	status,0,c
 14834  000A0C  07A7               	decf	(printf@width+1)& (0+255),f,b
 14835  000A0E  D000               	goto	l9314
 14836  000A10                     l9314:
 14837                           
 14838                           ; BSR set to: 0
 14839                           ;doprnt.c: 1381: if(width > c)
 14840  000A10  0E80               	movlw	128
 14841  000A12  0100               	movlb	0	; () banked
 14842  000A14  BFB3               	btfsc	printf@c& (0+255),7,b
 14843  000A16  0E7F               	movlw	127
 14844  000A18  0100               	movlb	0	; () banked
 14845  000A1A  6F94               	movwf	??_printf& (0+255),b
 14846  000A1C  0100               	movlb	0	; () banked
 14847  000A1E  51A6               	movf	printf@width& (0+255),w,b
 14848  000A20  0100               	movlb	0	; () banked
 14849  000A22  5DB3               	subwf	printf@c& (0+255),w,b
 14850  000A24  0100               	movlb	0	; () banked
 14851  000A26  51A7               	movf	(printf@width+1)& (0+255),w,b
 14852  000A28  0A80               	xorlw	128
 14853  000A2A  0100               	movlb	0	; () banked
 14854  000A2C  5994               	subwfb	??_printf& (0+255),w,b
 14855  000A2E  B0D8               	btfsc	status,0,c
 14856  000A30  D00B               	goto	l9318
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;doprnt.c: 1382: width -= c;
 14860  000A32  0100               	movlb	0	; () banked
 14861  000A34  51B3               	movf	printf@c& (0+255),w,b
 14862  000A36  0100               	movlb	0	; () banked
 14863  000A38  5FA6               	subwf	printf@width& (0+255),f,b
 14864  000A3A  0E00               	movlw	0
 14865  000A3C  0100               	movlb	0	; () banked
 14866  000A3E  BFB3               	btfsc	printf@c& (0+255),7,b
 14867  000A40  0EFF               	movlw	255
 14868  000A42  0100               	movlb	0	; () banked
 14869  000A44  5BA7               	subwfb	(printf@width+1)& (0+255),f,b
 14870  000A46  D006               	goto	l9320
 14871  000A48                     l9318:
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;doprnt.c: 1383: else
 14875                           ;doprnt.c: 1384: width = 0;
 14876  000A48  0E00               	movlw	0
 14877  000A4A  0100               	movlb	0	; () banked
 14878  000A4C  6FA7               	movwf	(printf@width+1)& (0+255),b
 14879  000A4E  0E00               	movlw	0
 14880  000A50  6FA6               	movwf	printf@width& (0+255),b
 14881  000A52  D000               	goto	l9320
 14882  000A54                     l9320:
 14883                           
 14884                           ; BSR set to: 0
 14885                           ;doprnt.c: 1387: if(flag & 0x04) {
 14886  000A54  0100               	movlb	0	; () banked
 14887  000A56  A5AE               	btfss	printf@flag& (0+255),2,b
 14888  000A58  D029               	goto	l9332
 14889                           
 14890                           ; BSR set to: 0
 14891                           ;doprnt.c: 1392: if(flag & 0x03)
 14892  000A5A  0E03               	movlw	3
 14893  000A5C  0100               	movlb	0	; () banked
 14894  000A5E  15AE               	andwf	printf@flag& (0+255),w,b
 14895  000A60  0100               	movlb	0	; () banked
 14896  000A62  6F94               	movwf	??_printf& (0+255),b
 14897  000A64  0E00               	movlw	0
 14898  000A66  0100               	movlb	0	; () banked
 14899  000A68  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14900  000A6A  0100               	movlb	0	; () banked
 14901  000A6C  6F95               	movwf	(??_printf+1)& (0+255),b
 14902  000A6E  0100               	movlb	0	; () banked
 14903  000A70  5194               	movf	??_printf& (0+255),w,b
 14904  000A72  0100               	movlb	0	; () banked
 14905  000A74  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14906  000A76  B4D8               	btfsc	status,2,c
 14907  000A78  D004               	goto	l9326
 14908                           
 14909                           ; BSR set to: 0
 14910                           ;doprnt.c: 1393: (putch('-') );
 14911  000A7A  0E2D               	movlw	45
 14912  000A7C  ECDC  F026         	call	_putch
 14913  000A80  D000               	goto	l9326
 14914  000A82                     l9326:
 14915                           
 14916                           ;doprnt.c: 1415: if(width)
 14917  000A82  0100               	movlb	0	; () banked
 14918  000A84  51A6               	movf	printf@width& (0+255),w,b
 14919  000A86  0100               	movlb	0	; () banked
 14920  000A88  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14921  000A8A  B4D8               	btfsc	status,2,c
 14922  000A8C  D038               	goto	l9342
 14923  000A8E                     l9328:
 14924                           
 14925                           ; BSR set to: 0
 14926                           ;doprnt.c: 1417: (putch('0') );
 14927  000A8E  0E30               	movlw	48
 14928  000A90  ECDC  F026         	call	_putch
 14929                           
 14930                           ;doprnt.c: 1418: while(--width);
 14931  000A94  0100               	movlb	0	; () banked
 14932  000A96  07A6               	decf	printf@width& (0+255),f,b
 14933  000A98  A0D8               	btfss	status,0,c
 14934  000A9A  07A7               	decf	(printf@width+1)& (0+255),f,b
 14935  000A9C  0100               	movlb	0	; () banked
 14936  000A9E  51A6               	movf	printf@width& (0+255),w,b
 14937  000AA0  0100               	movlb	0	; () banked
 14938  000AA2  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14939  000AA4  B4D8               	btfsc	status,2,c
 14940  000AA6  D02B               	goto	l9342
 14941  000AA8  D7F2               	goto	l9328
 14942                           
 14943                           ; BSR set to: 0
 14944                           ;doprnt.c: 1420: } else
 14945                           
 14946                           ; BSR set to: 0
 14947  000AAA  D029               	goto	l9342
 14948  000AAC                     l9332:
 14949                           
 14950                           ; BSR set to: 0
 14951                           ;doprnt.c: 1422: {
 14952                           ;doprnt.c: 1424: if(width
 14953                           ;doprnt.c: 1428: )
 14954  000AAC  0100               	movlb	0	; () banked
 14955  000AAE  51A6               	movf	printf@width& (0+255),w,b
 14956  000AB0  0100               	movlb	0	; () banked
 14957  000AB2  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14958  000AB4  B4D8               	btfsc	status,2,c
 14959  000AB6  D00F               	goto	l9338
 14960  000AB8                     l9334:
 14961                           
 14962                           ; BSR set to: 0
 14963                           ;doprnt.c: 1430: (putch(' ') );
 14964  000AB8  0E20               	movlw	32
 14965  000ABA  ECDC  F026         	call	_putch
 14966                           
 14967                           ;doprnt.c: 1431: while(--width);
 14968  000ABE  0100               	movlb	0	; () banked
 14969  000AC0  07A6               	decf	printf@width& (0+255),f,b
 14970  000AC2  A0D8               	btfss	status,0,c
 14971  000AC4  07A7               	decf	(printf@width+1)& (0+255),f,b
 14972  000AC6  0100               	movlb	0	; () banked
 14973  000AC8  51A6               	movf	printf@width& (0+255),w,b
 14974  000ACA  0100               	movlb	0	; () banked
 14975  000ACC  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14976  000ACE  B4D8               	btfsc	status,2,c
 14977  000AD0  D002               	goto	l9338
 14978  000AD2  D7F2               	goto	l9334
 14979                           
 14980                           ; BSR set to: 0
 14981  000AD4  D000               	goto	l9338
 14982  000AD6                     l9338:
 14983                           
 14984                           ; BSR set to: 0
 14985                           ;doprnt.c: 1438: if(flag & 0x03)
 14986  000AD6  0E03               	movlw	3
 14987  000AD8  0100               	movlb	0	; () banked
 14988  000ADA  15AE               	andwf	printf@flag& (0+255),w,b
 14989  000ADC  0100               	movlb	0	; () banked
 14990  000ADE  6F94               	movwf	??_printf& (0+255),b
 14991  000AE0  0E00               	movlw	0
 14992  000AE2  0100               	movlb	0	; () banked
 14993  000AE4  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14994  000AE6  0100               	movlb	0	; () banked
 14995  000AE8  6F95               	movwf	(??_printf+1)& (0+255),b
 14996  000AEA  0100               	movlb	0	; () banked
 14997  000AEC  5194               	movf	??_printf& (0+255),w,b
 14998  000AEE  0100               	movlb	0	; () banked
 14999  000AF0  1195               	iorwf	(??_printf+1)& (0+255),w,b
 15000  000AF2  B4D8               	btfsc	status,2,c
 15001  000AF4  D004               	goto	l9342
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;doprnt.c: 1439: (putch('-') );
 15005  000AF6  0E2D               	movlw	45
 15006  000AF8  ECDC  F026         	call	_putch
 15007  000AFC  D000               	goto	l9342
 15008  000AFE                     l9342:
 15009                           
 15010                           ;doprnt.c: 1469: }
 15011                           ;doprnt.c: 1472: prec = c;
 15012  000AFE  0100               	movlb	0	; () banked
 15013  000B00  51B3               	movf	printf@c& (0+255),w,b
 15014  000B02  0100               	movlb	0	; () banked
 15015  000B04  6FA0               	movwf	printf@prec& (0+255),b
 15016  000B06  6BA1               	clrf	(printf@prec+1)& (0+255),b
 15017  000B08  BFA0               	btfsc	printf@prec& (0+255),7,b
 15018  000B0A  07A1               	decf	(printf@prec+1)& (0+255),f,b
 15019                           
 15020                           ;doprnt.c: 1474: while(prec--) {
 15021  000B0C  D08A               	goto	l9356
 15022                           
 15023                           ; BSR set to: 0
 15024                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 15025  000B0E  D07A               	goto	l9352
 15026  000B10                     l9344:
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15030  000B10  C0A0  F094         	movff	printf@prec,??_printf
 15031  000B14  C0A1  F095         	movff	printf@prec+1,??_printf+1
 15032  000B18  0100               	movlb	0	; () banked
 15033  000B1A  90D8               	bcf	status,0,c
 15034  000B1C  3794               	rlcf	??_printf& (0+255),f,b
 15035  000B1E  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15036  000B20  0100               	movlb	0	; () banked
 15037  000B22  90D8               	bcf	status,0,c
 15038  000B24  3794               	rlcf	??_printf& (0+255),f,b
 15039  000B26  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15040  000B28  0E9C               	movlw	low _dpowers
 15041  000B2A  0100               	movlb	0	; () banked
 15042  000B2C  2594               	addwf	??_printf& (0+255),w,b
 15043  000B2E  6EF6               	movwf	tblptrl,c
 15044  000B30  0EFD               	movlw	high _dpowers
 15045  000B32  2195               	addwfc	(??_printf+1)& (0+255),w,b
 15046  000B34  6EF7               	movwf	tblptrh,c
 15047  000B36                     	if	0	;There are less than 3 active tblptr bytes
 15048  000B36                     	endif
 15049  000B36  0009               	tblrd		*+
 15050  000B38  CFF5 F015          	movff	tablat,___lldiv@divisor
 15051  000B3C  0009               	tblrd		*+
 15052  000B3E  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15053  000B42  0009               	tblrd		*+
 15054  000B44  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15055  000B48  000A               	tblrd		*-
 15056  000B4A  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15057  000B4E  C0AA  F011         	movff	printf@val,___lldiv@dividend
 15058  000B52  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 15059  000B56  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 15060  000B5A  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 15061  000B5E  EC69  F01F         	call	___lldiv	;wreg free
 15062  000B62  C011  F01E         	movff	?___lldiv,___llmod@dividend
 15063  000B66  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
 15064  000B6A  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
 15065  000B6E  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
 15066  000B72  0E0A               	movlw	10
 15067  000B74  6E22               	movwf	___llmod@divisor,c
 15068  000B76  0E00               	movlw	0
 15069  000B78  6E23               	movwf	___llmod@divisor+1,c
 15070  000B7A  0E00               	movlw	0
 15071  000B7C  6E24               	movwf	___llmod@divisor+2,c
 15072  000B7E  0E00               	movlw	0
 15073  000B80  6E25               	movwf	___llmod@divisor+3,c
 15074  000B82  ECB5  F020         	call	___llmod	;wreg free
 15075  000B86  501E               	movf	?___llmod,w,c
 15076  000B88  0F30               	addlw	48
 15077  000B8A  0100               	movlb	0	; () banked
 15078  000B8C  6FB3               	movwf	printf@c& (0+255),b
 15079                           
 15080                           ;doprnt.c: 1491: break;
 15081  000B8E  D044               	goto	l9354
 15082  000B90                     l9346:
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;doprnt.c: 1499: {
 15086                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15087  000B90  C0AA  F011         	movff	printf@val,___lldiv@dividend
 15088  000B94  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 15089  000B98  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 15090  000B9C  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 15091  000BA0  C0A0  F094         	movff	printf@prec,??_printf
 15092  000BA4  C0A1  F095         	movff	printf@prec+1,??_printf+1
 15093  000BA8  0100               	movlb	0	; () banked
 15094  000BAA  90D8               	bcf	status,0,c
 15095  000BAC  3794               	rlcf	??_printf& (0+255),f,b
 15096  000BAE  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15097  000BB0  0100               	movlb	0	; () banked
 15098  000BB2  90D8               	bcf	status,0,c
 15099  000BB4  3794               	rlcf	??_printf& (0+255),f,b
 15100  000BB6  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15101  000BB8  0E12               	movlw	low _hexpowers
 15102  000BBA  0100               	movlb	0	; () banked
 15103  000BBC  2594               	addwf	??_printf& (0+255),w,b
 15104  000BBE  6EF6               	movwf	tblptrl,c
 15105  000BC0  0EFE               	movlw	high _hexpowers
 15106  000BC2  2195               	addwfc	(??_printf+1)& (0+255),w,b
 15107  000BC4  6EF7               	movwf	tblptrh,c
 15108  000BC6                     	if	0	;There are less than 3 active tblptr bytes
 15109  000BC6                     	endif
 15110  000BC6  0009               	tblrd		*+
 15111  000BC8  CFF5 F015          	movff	tablat,___lldiv@divisor
 15112  000BCC  0009               	tblrd		*+
 15113  000BCE  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15114  000BD2  0009               	tblrd		*+
 15115  000BD4  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15116  000BD8  000A               	tblrd		*-
 15117  000BDA  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15118  000BDE  EC69  F01F         	call	___lldiv	;wreg free
 15119  000BE2  5011               	movf	?___lldiv,w,c
 15120  000BE4  0B0F               	andlw	15
 15121  000BE6  0100               	movlb	0	; () banked
 15122  000BE8  6F9D               	movwf	printf@idx& (0+255),b
 15123                           
 15124                           ; BSR set to: 0
 15125                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15126  000BEA  0100               	movlb	0	; () banked
 15127  000BEC  519D               	movf	printf@idx& (0+255),w,b
 15128  000BEE  0D01               	mullw	1
 15129  000BF0  0E5B               	movlw	low STR_47
 15130  000BF2  24F3               	addwf	prodl,w,c
 15131  000BF4  6EF6               	movwf	tblptrl,c
 15132  000BF6  0EFF               	movlw	high STR_47
 15133  000BF8  20F4               	addwfc	prodh,w,c
 15134  000BFA  6EF7               	movwf	tblptrh,c
 15135  000BFC                     	if	0	;There are less than 3 active tblptr bytes
 15136  000BFC                     	endif
 15137  000BFC  0008               	tblrd		*
 15138  000BFE  CFF5 F0B3          	movff	tablat,printf@c
 15139                           
 15140                           ; BSR set to: 0
 15141                           ;doprnt.c: 1523: }
 15142                           
 15143                           ;doprnt.c: 1508: }
 15144                           ;doprnt.c: 1510: break;
 15145  000C02  D00A               	goto	l9354
 15146  000C04                     l9352:
 15147                           
 15148                           ; BSR set to: 0
 15149  000C04  0100               	movlb	0	; () banked
 15150  000C06  51AE               	movf	printf@flag& (0+255),w,b
 15151  000C08  0B80               	andlw	128
 15152                           
 15153                           ; Switch size 1, requested type "space"
 15154                           ; Number of cases is 2, Range of values is 0 to 128
 15155                           ; switch strategies available:
 15156                           ; Name         Instructions Cycles
 15157                           ; simple_byte            7     4 (average)
 15158                           ;	Chosen strategy is simple_byte
 15159  000C0A  0A00               	xorlw	0	; case 0
 15160  000C0C  B4D8               	btfsc	status,2,c
 15161  000C0E  D780               	goto	l9344
 15162  000C10  0A80               	xorlw	128	; case 128
 15163  000C12  B4D8               	btfsc	status,2,c
 15164  000C14  D7BD               	goto	l9346
 15165  000C16  D000               	goto	l9354
 15166  000C18                     l9354:
 15167                           
 15168                           ; BSR set to: 0
 15169                           ;doprnt.c: 1524: (putch(c) );
 15170  000C18  0100               	movlb	0	; () banked
 15171  000C1A  51B3               	movf	printf@c& (0+255),w,b
 15172  000C1C  ECDC  F026         	call	_putch
 15173  000C20  D000               	goto	l9356
 15174  000C22                     l9356:
 15175  000C22  0100               	movlb	0	; () banked
 15176  000C24  07A0               	decf	printf@prec& (0+255),f,b
 15177  000C26  A0D8               	btfss	status,0,c
 15178  000C28  07A1               	decf	(printf@prec+1)& (0+255),f,b
 15179  000C2A  0100               	movlb	0	; () banked
 15180  000C2C  29A0               	incf	printf@prec& (0+255),w,b
 15181  000C2E  E1EA               	bnz	l9352
 15182  000C30  0100               	movlb	0	; () banked
 15183  000C32  29A1               	incf	(printf@prec+1)& (0+255),w,b
 15184  000C34  B4D8               	btfsc	status,2,c
 15185  000C36  D002               	goto	l9358
 15186  000C38  D7E5               	goto	l9352
 15187                           
 15188                           ; BSR set to: 0
 15189  000C3A  D000               	goto	l9358
 15190  000C3C                     l9358:
 15191  000C3C  C086  FFF6         	movff	printf@f,tblptrl
 15192  000C40  C087  FFF7         	movff	printf@f+1,tblptrh
 15193  000C44  0100               	movlb	0	; () banked
 15194  000C46  4B86               	infsnz	printf@f& (0+255),f,b
 15195  000C48  2B87               	incf	(printf@f+1)& (0+255),f,b
 15196  000C4A                     	if	0	;tblptru may be non-zero
 15197  000C4A                     	endif
 15198  000C4A                     	if	0	;tblptru may be non-zero
 15199  000C4A                     	endif
 15200  000C4A  0008               	tblrd		*
 15201  000C4C  CFF5 F0B3          	movff	tablat,printf@c
 15202  000C50  0100               	movlb	0	; () banked
 15203  000C52  51B3               	movf	printf@c& (0+255),w,b
 15204  000C54  B4D8               	btfsc	status,2,c
 15205  000C56  D003               	goto	l1468
 15206  000C58  EF16  F000         	goto	l9072
 15207                           
 15208                           ; BSR set to: 0
 15209  000C5C  D000               	goto	l1468
 15210  000C5E                     l1468:
 15211  000C5E  0012               	return		;funcret
 15212  000C60                     __end_of_printf:
 15213                           	opt stack 0
 15214                           tblptru	equ	0xFF8
 15215                           tblptrh	equ	0xFF7
 15216                           tblptrl	equ	0xFF6
 15217                           tablat	equ	0xFF5
 15218                           prodh	equ	0xFF4
 15219                           prodl	equ	0xFF3
 15220                           intcon	equ	0xFF2
 15221                           intcon2	equ	0xFF1
 15222                           intcon3	equ	0xFF0
 15223                           postinc0	equ	0xFEE
 15224                           wreg	equ	0xFE8
 15225                           postdec1	equ	0xFE5
 15226                           plusw1	equ	0xFE3
 15227                           fsr1l	equ	0xFE1
 15228                           indf2	equ	0xFDF
 15229                           postinc2	equ	0xFDE
 15230                           postdec2	equ	0xFDD
 15231                           plusw2	equ	0xFDB
 15232                           fsr2h	equ	0xFDA
 15233                           fsr2l	equ	0xFD9
 15234                           status	equ	0xFD8
 15235                           
 15236 ;; *************** function _scale *****************
 15237 ;; Defined at:
 15238 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;  scl             1    wreg     char 
 15241 ;; Auto vars:     Size  Location     Type
 15242 ;;  scl             1   72[COMRAM] char 
 15243 ;; Return value:  Size  Location     Type
 15244 ;;                  3   66[COMRAM] char 
 15245 ;; Registers used:
 15246 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15247 ;; Tracked objects:
 15248 ;;		On entry : 0/0
 15249 ;;		On exit  : 0/0
 15250 ;;		Unchanged: 0/0
 15251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15252 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15253 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15255 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15256 ;;Total ram usage:        7 bytes
 15257 ;; Hardware stack levels used:    1
 15258 ;; Hardware stack levels required when called:    5
 15259 ;; This function calls:
 15260 ;;		___awdiv
 15261 ;;		___awmod
 15262 ;;		___ftmul
 15263 ;;		___wmul
 15264 ;; This function is called by:
 15265 ;;		_printf
 15266 ;; This function uses a non-reentrant model
 15267 ;;
 15268                           
 15269                           	psect	text63
 15270  00135E                     __ptext63:
 15271                           	opt stack 0
 15272  00135E                     _scale:
 15273                           	opt stack 24
 15274                           
 15275                           ;incstack = 0
 15276                           ;scale@scl stored from wreg
 15277  00135E  6E49               	movwf	scale@scl,c
 15278                           
 15279                           ;doprnt.c: 428: if(scl < 0) {
 15280  001360  AE49               	btfss	scale@scl,7,c
 15281  001362  D0EF               	goto	l8800
 15282                           
 15283                           ;doprnt.c: 429: scl = -scl;
 15284  001364  6C49               	negf	scale@scl,c
 15285                           
 15286                           ;doprnt.c: 430: if(scl>=110)
 15287  001366  5049               	movf	scale@scl,w,c
 15288  001368  0A80               	xorlw	128
 15289  00136A  0F12               	addlw	-238
 15290  00136C  A0D8               	btfss	status,0,c
 15291  00136E  D08D               	goto	l8790
 15292                           
 15293                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15294  001370  0E00               	movlw	0
 15295  001372  6E14               	movwf	___wmul@multiplicand+1,c
 15296  001374  0E03               	movlw	3
 15297  001376  6E13               	movwf	___wmul@multiplicand,c
 15298  001378  0E00               	movlw	0
 15299  00137A  6E1A               	movwf	___awdiv@divisor+1,c
 15300  00137C  0E0A               	movlw	10
 15301  00137E  6E19               	movwf	___awdiv@divisor,c
 15302  001380  0E00               	movlw	0
 15303  001382  6E40               	movwf	___awmod@divisor+1,c
 15304  001384  0E64               	movlw	100
 15305  001386  6E3F               	movwf	___awmod@divisor,c
 15306  001388  5049               	movf	scale@scl,w,c
 15307  00138A  6E3D               	movwf	___awmod@dividend,c
 15308  00138C  6A3E               	clrf	___awmod@dividend+1,c
 15309  00138E  BE3D               	btfsc	___awmod@dividend,7,c
 15310  001390  063E               	decf	___awmod@dividend+1,f,c
 15311  001392  EC34  F020         	call	___awmod	;wreg free
 15312  001396  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15313  00139A  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15314  00139E  EC45  F01E         	call	___awdiv	;wreg free
 15315  0013A2  0E09               	movlw	9
 15316  0013A4  2417               	addwf	?___awdiv,w,c
 15317  0013A6  6E11               	movwf	___wmul@multiplier,c
 15318  0013A8  0E00               	movlw	0
 15319  0013AA  2018               	addwfc	?___awdiv+1,w,c
 15320  0013AC  6E12               	movwf	___wmul@multiplier+1,c
 15321  0013AE  ECE9  F024         	call	___wmul	;wreg free
 15322  0013B2  0EC4               	movlw	low __npowers_
 15323  0013B4  2411               	addwf	?___wmul,w,c
 15324  0013B6  6EF6               	movwf	tblptrl,c
 15325  0013B8  0EFD               	movlw	high __npowers_
 15326  0013BA  2012               	addwfc	?___wmul+1,w,c
 15327  0013BC  6EF7               	movwf	tblptrh,c
 15328  0013BE                     	if	0	;There are less than 3 active tblptr bytes
 15329  0013BE                     	endif
 15330  0013BE  0009               	tblrd		*+
 15331  0013C0  CFF5 F022          	movff	tablat,___ftmul@f2
 15332  0013C4  0009               	tblrd		*+
 15333  0013C6  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15334  0013CA  000A               	tblrd		*-
 15335  0013CC  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15336  0013D0  0E00               	movlw	0
 15337  0013D2  6E1A               	movwf	___awdiv@divisor+1,c
 15338  0013D4  0E64               	movlw	100
 15339  0013D6  6E19               	movwf	___awdiv@divisor,c
 15340  0013D8  5049               	movf	scale@scl,w,c
 15341  0013DA  6E17               	movwf	___awdiv@dividend,c
 15342  0013DC  6A18               	clrf	___awdiv@dividend+1,c
 15343  0013DE  BE17               	btfsc	___awdiv@dividend,7,c
 15344  0013E0  0618               	decf	___awdiv@dividend+1,f,c
 15345  0013E2  EC45  F01E         	call	___awdiv	;wreg free
 15346  0013E6  0E12               	movlw	18
 15347  0013E8  2417               	addwf	?___awdiv,w,c
 15348  0013EA  6E11               	movwf	___wmul@multiplier,c
 15349  0013EC  0E00               	movlw	0
 15350  0013EE  2018               	addwfc	?___awdiv+1,w,c
 15351  0013F0  6E12               	movwf	___wmul@multiplier+1,c
 15352  0013F2  0E00               	movlw	0
 15353  0013F4  6E14               	movwf	___wmul@multiplicand+1,c
 15354  0013F6  0E03               	movlw	3
 15355  0013F8  6E13               	movwf	___wmul@multiplicand,c
 15356  0013FA  ECE9  F024         	call	___wmul	;wreg free
 15357  0013FE  0EC4               	movlw	low __npowers_
 15358  001400  2411               	addwf	?___wmul,w,c
 15359  001402  6EF6               	movwf	tblptrl,c
 15360  001404  0EFD               	movlw	high __npowers_
 15361  001406  2012               	addwfc	?___wmul+1,w,c
 15362  001408  6EF7               	movwf	tblptrh,c
 15363  00140A                     	if	0	;There are less than 3 active tblptr bytes
 15364  00140A                     	endif
 15365  00140A  0009               	tblrd		*+
 15366  00140C  CFF5 F01F          	movff	tablat,___ftmul@f1
 15367  001410  0009               	tblrd		*+
 15368  001412  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15369  001416  000A               	tblrd		*-
 15370  001418  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15371  00141C  EC00  F019         	call	___ftmul	;wreg free
 15372  001420  C01F  F046         	movff	?___ftmul,_scale$2978
 15373  001424  C020  F047         	movff	?___ftmul+1,_scale$2978+1
 15374  001428  C021  F048         	movff	?___ftmul+2,_scale$2978+2
 15375                           
 15376                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15377  00142C  C046  F01F         	movff	_scale$2978,___ftmul@f1
 15378  001430  C047  F020         	movff	_scale$2978+1,___ftmul@f1+1
 15379  001434  C048  F021         	movff	_scale$2978+2,___ftmul@f1+2
 15380  001438  0E00               	movlw	0
 15381  00143A  6E14               	movwf	___wmul@multiplicand+1,c
 15382  00143C  0E03               	movlw	3
 15383  00143E  6E13               	movwf	___wmul@multiplicand,c
 15384  001440  0E00               	movlw	0
 15385  001442  6E40               	movwf	___awmod@divisor+1,c
 15386  001444  0E0A               	movlw	10
 15387  001446  6E3F               	movwf	___awmod@divisor,c
 15388  001448  5049               	movf	scale@scl,w,c
 15389  00144A  6E3D               	movwf	___awmod@dividend,c
 15390  00144C  6A3E               	clrf	___awmod@dividend+1,c
 15391  00144E  BE3D               	btfsc	___awmod@dividend,7,c
 15392  001450  063E               	decf	___awmod@dividend+1,f,c
 15393  001452  EC34  F020         	call	___awmod	;wreg free
 15394  001456  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15395  00145A  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15396  00145E  ECE9  F024         	call	___wmul	;wreg free
 15397  001462  0EC4               	movlw	low __npowers_
 15398  001464  2411               	addwf	?___wmul,w,c
 15399  001466  6EF6               	movwf	tblptrl,c
 15400  001468  0EFD               	movlw	high __npowers_
 15401  00146A  2012               	addwfc	?___wmul+1,w,c
 15402  00146C  6EF7               	movwf	tblptrh,c
 15403  00146E                     	if	0	;There are less than 3 active tblptr bytes
 15404  00146E                     	endif
 15405  00146E  0009               	tblrd		*+
 15406  001470  CFF5 F022          	movff	tablat,___ftmul@f2
 15407  001474  0009               	tblrd		*+
 15408  001476  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15409  00147A  000A               	tblrd		*-
 15410  00147C  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15411  001480  EC00  F019         	call	___ftmul	;wreg free
 15412  001484  D141               	goto	L12
 15413  001486  D15A               	goto	l1357
 15414  001488  D054               	goto	l8796
 15415  00148A                     l8790:
 15416                           
 15417                           ;doprnt.c: 432: else if(scl > 10)
 15418  00148A  5049               	movf	scale@scl,w,c
 15419  00148C  0A80               	xorlw	128
 15420  00148E  0F75               	addlw	-139
 15421  001490  A0D8               	btfss	status,0,c
 15422  001492  D04F               	goto	l8796
 15423                           
 15424                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 15425  001494  0E00               	movlw	0
 15426  001496  6E1A               	movwf	___awdiv@divisor+1,c
 15427  001498  0E0A               	movlw	10
 15428  00149A  6E19               	movwf	___awdiv@divisor,c
 15429  00149C  5049               	movf	scale@scl,w,c
 15430  00149E  6E17               	movwf	___awdiv@dividend,c
 15431  0014A0  6A18               	clrf	___awdiv@dividend+1,c
 15432  0014A2  BE17               	btfsc	___awdiv@dividend,7,c
 15433  0014A4  0618               	decf	___awdiv@dividend+1,f,c
 15434  0014A6  EC45  F01E         	call	___awdiv	;wreg free
 15435  0014AA  0E09               	movlw	9
 15436  0014AC  2417               	addwf	?___awdiv,w,c
 15437  0014AE  6E11               	movwf	___wmul@multiplier,c
 15438  0014B0  0E00               	movlw	0
 15439  0014B2  2018               	addwfc	?___awdiv+1,w,c
 15440  0014B4  6E12               	movwf	___wmul@multiplier+1,c
 15441  0014B6  0E00               	movlw	0
 15442  0014B8  6E14               	movwf	___wmul@multiplicand+1,c
 15443  0014BA  0E03               	movlw	3
 15444  0014BC  6E13               	movwf	___wmul@multiplicand,c
 15445  0014BE  ECE9  F024         	call	___wmul	;wreg free
 15446  0014C2  0EC4               	movlw	low __npowers_
 15447  0014C4  2411               	addwf	?___wmul,w,c
 15448  0014C6  6EF6               	movwf	tblptrl,c
 15449  0014C8  0EFD               	movlw	high __npowers_
 15450  0014CA  2012               	addwfc	?___wmul+1,w,c
 15451  0014CC  6EF7               	movwf	tblptrh,c
 15452  0014CE                     	if	0	;There are less than 3 active tblptr bytes
 15453  0014CE                     	endif
 15454  0014CE  0009               	tblrd		*+
 15455  0014D0  CFF5 F01F          	movff	tablat,___ftmul@f1
 15456  0014D4  0009               	tblrd		*+
 15457  0014D6  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15458  0014DA  000A               	tblrd		*-
 15459  0014DC  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15460  0014E0  0E00               	movlw	0
 15461  0014E2  6E14               	movwf	___wmul@multiplicand+1,c
 15462  0014E4  0E03               	movlw	3
 15463  0014E6  6E13               	movwf	___wmul@multiplicand,c
 15464  0014E8  0E00               	movlw	0
 15465  0014EA  6E40               	movwf	___awmod@divisor+1,c
 15466  0014EC  0E0A               	movlw	10
 15467  0014EE  6E3F               	movwf	___awmod@divisor,c
 15468  0014F0  5049               	movf	scale@scl,w,c
 15469  0014F2  6E3D               	movwf	___awmod@dividend,c
 15470  0014F4  6A3E               	clrf	___awmod@dividend+1,c
 15471  0014F6  BE3D               	btfsc	___awmod@dividend,7,c
 15472  0014F8  063E               	decf	___awmod@dividend+1,f,c
 15473  0014FA  EC34  F020         	call	___awmod	;wreg free
 15474  0014FE  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15475  001502  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15476  001506  ECE9  F024         	call	___wmul	;wreg free
 15477  00150A  0EC4               	movlw	low __npowers_
 15478  00150C  2411               	addwf	?___wmul,w,c
 15479  00150E  6EF6               	movwf	tblptrl,c
 15480  001510  0EFD               	movlw	high __npowers_
 15481  001512  2012               	addwfc	?___wmul+1,w,c
 15482  001514  6EF7               	movwf	tblptrh,c
 15483  001516                     	if	0	;There are less than 3 active tblptr bytes
 15484  001516                     	endif
 15485  001516  0009               	tblrd		*+
 15486  001518  CFF5 F022          	movff	tablat,___ftmul@f2
 15487  00151C  0009               	tblrd		*+
 15488  00151E  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15489  001522  000A               	tblrd		*-
 15490  001524  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15491  001528  EC00  F019         	call	___ftmul	;wreg free
 15492  00152C  D0ED               	goto	L12
 15493  00152E  D106               	goto	l1357
 15494  001530  D000               	goto	l8796
 15495  001532                     l8796:
 15496                           
 15497                           ;doprnt.c: 434: return _npowers_[scl];
 15498  001532  5049               	movf	scale@scl,w,c
 15499  001534  0D03               	mullw	3
 15500  001536  0EC4               	movlw	low __npowers_
 15501  001538  24F3               	addwf	prodl,w,c
 15502  00153A  6EF6               	movwf	tblptrl,c
 15503  00153C  0EFD               	movlw	high __npowers_
 15504  00153E  D0F2               	goto	L11
 15505  001540  D0FD               	goto	l1357
 15506  001542                     l8800:
 15507                           
 15508                           ;doprnt.c: 435: }
 15509                           ;doprnt.c: 436: if(scl>=110)
 15510  001542  5049               	movf	scale@scl,w,c
 15511  001544  0A80               	xorlw	128
 15512  001546  0F12               	addlw	-238
 15513  001548  A0D8               	btfss	status,0,c
 15514  00154A  D08D               	goto	l8808
 15515                           
 15516                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15517  00154C  0E00               	movlw	0
 15518  00154E  6E14               	movwf	___wmul@multiplicand+1,c
 15519  001550  0E03               	movlw	3
 15520  001552  6E13               	movwf	___wmul@multiplicand,c
 15521  001554  0E00               	movlw	0
 15522  001556  6E1A               	movwf	___awdiv@divisor+1,c
 15523  001558  0E0A               	movlw	10
 15524  00155A  6E19               	movwf	___awdiv@divisor,c
 15525  00155C  0E00               	movlw	0
 15526  00155E  6E40               	movwf	___awmod@divisor+1,c
 15527  001560  0E64               	movlw	100
 15528  001562  6E3F               	movwf	___awmod@divisor,c
 15529  001564  5049               	movf	scale@scl,w,c
 15530  001566  6E3D               	movwf	___awmod@dividend,c
 15531  001568  6A3E               	clrf	___awmod@dividend+1,c
 15532  00156A  BE3D               	btfsc	___awmod@dividend,7,c
 15533  00156C  063E               	decf	___awmod@dividend+1,f,c
 15534  00156E  EC34  F020         	call	___awmod	;wreg free
 15535  001572  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15536  001576  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15537  00157A  EC45  F01E         	call	___awdiv	;wreg free
 15538  00157E  0E09               	movlw	9
 15539  001580  2417               	addwf	?___awdiv,w,c
 15540  001582  6E11               	movwf	___wmul@multiplier,c
 15541  001584  0E00               	movlw	0
 15542  001586  2018               	addwfc	?___awdiv+1,w,c
 15543  001588  6E12               	movwf	___wmul@multiplier+1,c
 15544  00158A  ECE9  F024         	call	___wmul	;wreg free
 15545  00158E  0EEB               	movlw	low __powers_
 15546  001590  2411               	addwf	?___wmul,w,c
 15547  001592  6EF6               	movwf	tblptrl,c
 15548  001594  0EFD               	movlw	high __powers_
 15549  001596  2012               	addwfc	?___wmul+1,w,c
 15550  001598  6EF7               	movwf	tblptrh,c
 15551  00159A                     	if	0	;There are less than 3 active tblptr bytes
 15552  00159A                     	endif
 15553  00159A  0009               	tblrd		*+
 15554  00159C  CFF5 F022          	movff	tablat,___ftmul@f2
 15555  0015A0  0009               	tblrd		*+
 15556  0015A2  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15557  0015A6  000A               	tblrd		*-
 15558  0015A8  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15559  0015AC  0E00               	movlw	0
 15560  0015AE  6E1A               	movwf	___awdiv@divisor+1,c
 15561  0015B0  0E64               	movlw	100
 15562  0015B2  6E19               	movwf	___awdiv@divisor,c
 15563  0015B4  5049               	movf	scale@scl,w,c
 15564  0015B6  6E17               	movwf	___awdiv@dividend,c
 15565  0015B8  6A18               	clrf	___awdiv@dividend+1,c
 15566  0015BA  BE17               	btfsc	___awdiv@dividend,7,c
 15567  0015BC  0618               	decf	___awdiv@dividend+1,f,c
 15568  0015BE  EC45  F01E         	call	___awdiv	;wreg free
 15569  0015C2  0E12               	movlw	18
 15570  0015C4  2417               	addwf	?___awdiv,w,c
 15571  0015C6  6E11               	movwf	___wmul@multiplier,c
 15572  0015C8  0E00               	movlw	0
 15573  0015CA  2018               	addwfc	?___awdiv+1,w,c
 15574  0015CC  6E12               	movwf	___wmul@multiplier+1,c
 15575  0015CE  0E00               	movlw	0
 15576  0015D0  6E14               	movwf	___wmul@multiplicand+1,c
 15577  0015D2  0E03               	movlw	3
 15578  0015D4  6E13               	movwf	___wmul@multiplicand,c
 15579  0015D6  ECE9  F024         	call	___wmul	;wreg free
 15580  0015DA  0EEB               	movlw	low __powers_
 15581  0015DC  2411               	addwf	?___wmul,w,c
 15582  0015DE  6EF6               	movwf	tblptrl,c
 15583  0015E0  0EFD               	movlw	high __powers_
 15584  0015E2  2012               	addwfc	?___wmul+1,w,c
 15585  0015E4  6EF7               	movwf	tblptrh,c
 15586  0015E6                     	if	0	;There are less than 3 active tblptr bytes
 15587  0015E6                     	endif
 15588  0015E6  0009               	tblrd		*+
 15589  0015E8  CFF5 F01F          	movff	tablat,___ftmul@f1
 15590  0015EC  0009               	tblrd		*+
 15591  0015EE  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15592  0015F2  000A               	tblrd		*-
 15593  0015F4  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15594  0015F8  EC00  F019         	call	___ftmul	;wreg free
 15595  0015FC  C01F  F046         	movff	?___ftmul,_scale$2978
 15596  001600  C020  F047         	movff	?___ftmul+1,_scale$2978+1
 15597  001604  C021  F048         	movff	?___ftmul+2,_scale$2978+2
 15598                           
 15599                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15600  001608  C046  F01F         	movff	_scale$2978,___ftmul@f1
 15601  00160C  C047  F020         	movff	_scale$2978+1,___ftmul@f1+1
 15602  001610  C048  F021         	movff	_scale$2978+2,___ftmul@f1+2
 15603  001614  0E00               	movlw	0
 15604  001616  6E14               	movwf	___wmul@multiplicand+1,c
 15605  001618  0E03               	movlw	3
 15606  00161A  6E13               	movwf	___wmul@multiplicand,c
 15607  00161C  0E00               	movlw	0
 15608  00161E  6E40               	movwf	___awmod@divisor+1,c
 15609  001620  0E0A               	movlw	10
 15610  001622  6E3F               	movwf	___awmod@divisor,c
 15611  001624  5049               	movf	scale@scl,w,c
 15612  001626  6E3D               	movwf	___awmod@dividend,c
 15613  001628  6A3E               	clrf	___awmod@dividend+1,c
 15614  00162A  BE3D               	btfsc	___awmod@dividend,7,c
 15615  00162C  063E               	decf	___awmod@dividend+1,f,c
 15616  00162E  EC34  F020         	call	___awmod	;wreg free
 15617  001632  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15618  001636  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15619  00163A  ECE9  F024         	call	___wmul	;wreg free
 15620  00163E  0EEB               	movlw	low __powers_
 15621  001640  2411               	addwf	?___wmul,w,c
 15622  001642  6EF6               	movwf	tblptrl,c
 15623  001644  0EFD               	movlw	high __powers_
 15624  001646  2012               	addwfc	?___wmul+1,w,c
 15625  001648  6EF7               	movwf	tblptrh,c
 15626  00164A                     	if	0	;There are less than 3 active tblptr bytes
 15627  00164A                     	endif
 15628  00164A  0009               	tblrd		*+
 15629  00164C  CFF5 F022          	movff	tablat,___ftmul@f2
 15630  001650  0009               	tblrd		*+
 15631  001652  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15632  001656  000A               	tblrd		*-
 15633  001658  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15634  00165C  EC00  F019         	call	___ftmul	;wreg free
 15635  001660  D053               	goto	L12
 15636  001662  D06C               	goto	l1357
 15637  001664  D059               	goto	l8814
 15638  001666                     l8808:
 15639                           
 15640                           ;doprnt.c: 438: else if(scl > 10)
 15641  001666  5049               	movf	scale@scl,w,c
 15642  001668  0A80               	xorlw	128
 15643  00166A  0F75               	addlw	-139
 15644  00166C  A0D8               	btfss	status,0,c
 15645  00166E  D054               	goto	l8814
 15646                           
 15647                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 15648  001670  0E00               	movlw	0
 15649  001672  6E1A               	movwf	___awdiv@divisor+1,c
 15650  001674  0E0A               	movlw	10
 15651  001676  6E19               	movwf	___awdiv@divisor,c
 15652  001678  5049               	movf	scale@scl,w,c
 15653  00167A  6E17               	movwf	___awdiv@dividend,c
 15654  00167C  6A18               	clrf	___awdiv@dividend+1,c
 15655  00167E  BE17               	btfsc	___awdiv@dividend,7,c
 15656  001680  0618               	decf	___awdiv@dividend+1,f,c
 15657  001682  EC45  F01E         	call	___awdiv	;wreg free
 15658  001686  0E09               	movlw	9
 15659  001688  2417               	addwf	?___awdiv,w,c
 15660  00168A  6E11               	movwf	___wmul@multiplier,c
 15661  00168C  0E00               	movlw	0
 15662  00168E  2018               	addwfc	?___awdiv+1,w,c
 15663  001690  6E12               	movwf	___wmul@multiplier+1,c
 15664  001692  0E00               	movlw	0
 15665  001694  6E14               	movwf	___wmul@multiplicand+1,c
 15666  001696  0E03               	movlw	3
 15667  001698  6E13               	movwf	___wmul@multiplicand,c
 15668  00169A  ECE9  F024         	call	___wmul	;wreg free
 15669  00169E  0EEB               	movlw	low __powers_
 15670  0016A0  2411               	addwf	?___wmul,w,c
 15671  0016A2  6EF6               	movwf	tblptrl,c
 15672  0016A4  0EFD               	movlw	high __powers_
 15673  0016A6  2012               	addwfc	?___wmul+1,w,c
 15674  0016A8  6EF7               	movwf	tblptrh,c
 15675  0016AA                     	if	0	;There are less than 3 active tblptr bytes
 15676  0016AA                     	endif
 15677  0016AA  0009               	tblrd		*+
 15678  0016AC  CFF5 F01F          	movff	tablat,___ftmul@f1
 15679  0016B0  0009               	tblrd		*+
 15680  0016B2  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15681  0016B6  000A               	tblrd		*-
 15682  0016B8  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15683  0016BC  0E00               	movlw	0
 15684  0016BE  6E14               	movwf	___wmul@multiplicand+1,c
 15685  0016C0  0E03               	movlw	3
 15686  0016C2  6E13               	movwf	___wmul@multiplicand,c
 15687  0016C4  0E00               	movlw	0
 15688  0016C6  6E40               	movwf	___awmod@divisor+1,c
 15689  0016C8  0E0A               	movlw	10
 15690  0016CA  6E3F               	movwf	___awmod@divisor,c
 15691  0016CC  5049               	movf	scale@scl,w,c
 15692  0016CE  6E3D               	movwf	___awmod@dividend,c
 15693  0016D0  6A3E               	clrf	___awmod@dividend+1,c
 15694  0016D2  BE3D               	btfsc	___awmod@dividend,7,c
 15695  0016D4  063E               	decf	___awmod@dividend+1,f,c
 15696  0016D6  EC34  F020         	call	___awmod	;wreg free
 15697  0016DA  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15698  0016DE  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15699  0016E2  ECE9  F024         	call	___wmul	;wreg free
 15700  0016E6  0EEB               	movlw	low __powers_
 15701  0016E8  2411               	addwf	?___wmul,w,c
 15702  0016EA  6EF6               	movwf	tblptrl,c
 15703  0016EC  0EFD               	movlw	high __powers_
 15704  0016EE  2012               	addwfc	?___wmul+1,w,c
 15705  0016F0  6EF7               	movwf	tblptrh,c
 15706  0016F2                     	if	0	;There are less than 3 active tblptr bytes
 15707  0016F2                     	endif
 15708  0016F2  0009               	tblrd		*+
 15709  0016F4  CFF5 F022          	movff	tablat,___ftmul@f2
 15710  0016F8  0009               	tblrd		*+
 15711  0016FA  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15712  0016FE  000A               	tblrd		*-
 15713  001700  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15714  001704  EC00  F019         	call	___ftmul	;wreg free
 15715  001708                     L12:
 15716  001708  C01F  F043         	movff	?___ftmul,?_scale
 15717  00170C  C020  F044         	movff	?___ftmul+1,?_scale+1
 15718  001710  C021  F045         	movff	?___ftmul+2,?_scale+2
 15719  001714  D013               	goto	l1357
 15720  001716  D000               	goto	l8814
 15721  001718                     l8814:
 15722                           
 15723                           ;doprnt.c: 440: return _powers_[scl];
 15724  001718  5049               	movf	scale@scl,w,c
 15725  00171A  0D03               	mullw	3
 15726  00171C  0EEB               	movlw	low __powers_
 15727  00171E  24F3               	addwf	prodl,w,c
 15728  001720  6EF6               	movwf	tblptrl,c
 15729  001722  0EFD               	movlw	high __powers_
 15730  001724                     L11:
 15731  001724  20F4               	addwfc	prodh,w,c
 15732  001726  6EF7               	movwf	tblptrh,c
 15733  001728                     	if	0	;There are less than 3 active tblptr bytes
 15734  001728                     	endif
 15735  001728  0009               	tblrd		*+
 15736  00172A  CFF5 F043          	movff	tablat,?_scale
 15737  00172E  0009               	tblrd		*+
 15738  001730  CFF5 F044          	movff	tablat,?_scale+1
 15739  001734  000A               	tblrd		*-
 15740  001736  CFF5 F045          	movff	tablat,?_scale+2
 15741  00173A  D000               	goto	l1357
 15742  00173C                     l1357:
 15743  00173C  0012               	return		;funcret
 15744  00173E                     __end_of_scale:
 15745                           	opt stack 0
 15746                           tblptru	equ	0xFF8
 15747                           tblptrh	equ	0xFF7
 15748                           tblptrl	equ	0xFF6
 15749                           tablat	equ	0xFF5
 15750                           prodh	equ	0xFF4
 15751                           prodl	equ	0xFF3
 15752                           intcon	equ	0xFF2
 15753                           intcon2	equ	0xFF1
 15754                           intcon3	equ	0xFF0
 15755                           postinc0	equ	0xFEE
 15756                           wreg	equ	0xFE8
 15757                           postdec1	equ	0xFE5
 15758                           plusw1	equ	0xFE3
 15759                           fsr1l	equ	0xFE1
 15760                           indf2	equ	0xFDF
 15761                           postinc2	equ	0xFDE
 15762                           postdec2	equ	0xFDD
 15763                           plusw2	equ	0xFDB
 15764                           fsr2h	equ	0xFDA
 15765                           fsr2l	equ	0xFD9
 15766                           status	equ	0xFD8
 15767                           
 15768 ;; *************** function _putch *****************
 15769 ;; Defined at:
 15770 ;;		line 190 in file "utils.c"
 15771 ;; Parameters:    Size  Location     Type
 15772 ;;  c               1    wreg     unsigned char 
 15773 ;; Auto vars:     Size  Location     Type
 15774 ;;  c               1   16[COMRAM] unsigned char 
 15775 ;; Return value:  Size  Location     Type
 15776 ;;		None               void
 15777 ;; Registers used:
 15778 ;;		wreg
 15779 ;; Tracked objects:
 15780 ;;		On entry : 0/0
 15781 ;;		On exit  : 0/0
 15782 ;;		Unchanged: 0/0
 15783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15787 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15788 ;;Total ram usage:        1 bytes
 15789 ;; Hardware stack levels used:    1
 15790 ;; Hardware stack levels required when called:    3
 15791 ;; This function calls:
 15792 ;;		Nothing
 15793 ;; This function is called by:
 15794 ;;		_printf
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           	psect	text64
 15799  004DB8                     __ptext64:
 15800                           	opt stack 0
 15801  004DB8                     _putch:
 15802                           	opt stack 26
 15803                           
 15804                           ;incstack = 0
 15805                           ;putch@c stored from wreg
 15806  004DB8  6E11               	movwf	putch@c,c
 15807                           
 15808                           ;utils.c: 192: while (!TRMT);
 15809  004DBA  D000               	goto	l505
 15810  004DBC                     l505:
 15811  004DBC  A2AC               	btfss	4012,1,c	;volatile
 15812  004DBE  D7FE               	goto	l505
 15813                           
 15814                           ;utils.c: 193: TXREG = c;
 15815  004DC0  C011  FFAD         	movff	putch@c,4013	;volatile
 15816  004DC4  0012               	return		;funcret
 15817  004DC6                     __end_of_putch:
 15818                           	opt stack 0
 15819                           tblptru	equ	0xFF8
 15820                           tblptrh	equ	0xFF7
 15821                           tblptrl	equ	0xFF6
 15822                           tablat	equ	0xFF5
 15823                           prodh	equ	0xFF4
 15824                           prodl	equ	0xFF3
 15825                           intcon	equ	0xFF2
 15826                           intcon2	equ	0xFF1
 15827                           intcon3	equ	0xFF0
 15828                           postinc0	equ	0xFEE
 15829                           wreg	equ	0xFE8
 15830                           postdec1	equ	0xFE5
 15831                           plusw1	equ	0xFE3
 15832                           fsr1l	equ	0xFE1
 15833                           indf2	equ	0xFDF
 15834                           postinc2	equ	0xFDE
 15835                           postdec2	equ	0xFDD
 15836                           plusw2	equ	0xFDB
 15837                           fsr2h	equ	0xFDA
 15838                           fsr2l	equ	0xFD9
 15839                           status	equ	0xFD8
 15840                           
 15841 ;; *************** function _isdigit *****************
 15842 ;; Defined at:
 15843 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15844 ;; Parameters:    Size  Location     Type
 15845 ;;  c               1    wreg     unsigned char 
 15846 ;; Auto vars:     Size  Location     Type
 15847 ;;  c               1   18[COMRAM] unsigned char 
 15848 ;; Return value:  Size  Location     Type
 15849 ;;		None               void
 15850 ;; Registers used:
 15851 ;;		wreg, status,2, status,0
 15852 ;; Tracked objects:
 15853 ;;		On entry : 0/0
 15854 ;;		On exit  : 0/0
 15855 ;;		Unchanged: 0/0
 15856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15859 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;Total ram usage:        3 bytes
 15862 ;; Hardware stack levels used:    1
 15863 ;; Hardware stack levels required when called:    3
 15864 ;; This function calls:
 15865 ;;		Nothing
 15866 ;; This function is called by:
 15867 ;;		_printf
 15868 ;; This function uses a non-reentrant model
 15869 ;;
 15870                           
 15871                           	psect	text65
 15872  004AF8                     __ptext65:
 15873                           	opt stack 0
 15874  004AF8                     _isdigit:
 15875                           	opt stack 26
 15876                           
 15877                           ;incstack = 0
 15878                           ;isdigit@c stored from wreg
 15879  004AF8  6E13               	movwf	isdigit@c,c
 15880  004AFA  0E00               	movlw	0
 15881  004AFC  6E12               	movwf	_isdigit$2601,c
 15882  004AFE  0E3A               	movlw	58
 15883  004B00  6013               	cpfslt	isdigit@c,c
 15884  004B02  D006               	goto	l8826
 15885  004B04  0E2F               	movlw	47
 15886  004B06  6413               	cpfsgt	isdigit@c,c
 15887  004B08  D003               	goto	l8826
 15888  004B0A  0E01               	movlw	1
 15889  004B0C  6E12               	movwf	_isdigit$2601,c
 15890  004B0E  D000               	goto	l8826
 15891  004B10                     l8826:
 15892  004B10  C012  F011         	movff	_isdigit$2601,??_isdigit
 15893  004B14  3011               	rrcf	??_isdigit,w,c
 15894  004B16  D000               	goto	l1969
 15895  004B18                     l1969:
 15896  004B18  0012               	return		;funcret
 15897  004B1A                     __end_of_isdigit:
 15898                           	opt stack 0
 15899                           tblptru	equ	0xFF8
 15900                           tblptrh	equ	0xFF7
 15901                           tblptrl	equ	0xFF6
 15902                           tablat	equ	0xFF5
 15903                           prodh	equ	0xFF4
 15904                           prodl	equ	0xFF3
 15905                           intcon	equ	0xFF2
 15906                           intcon2	equ	0xFF1
 15907                           intcon3	equ	0xFF0
 15908                           postinc0	equ	0xFEE
 15909                           wreg	equ	0xFE8
 15910                           postdec1	equ	0xFE5
 15911                           plusw1	equ	0xFE3
 15912                           fsr1l	equ	0xFE1
 15913                           indf2	equ	0xFDF
 15914                           postinc2	equ	0xFDE
 15915                           postdec2	equ	0xFDD
 15916                           plusw2	equ	0xFDB
 15917                           fsr2h	equ	0xFDA
 15918                           fsr2l	equ	0xFD9
 15919                           status	equ	0xFD8
 15920                           
 15921 ;; *************** function _fround *****************
 15922 ;; Defined at:
 15923 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15924 ;; Parameters:    Size  Location     Type
 15925 ;;  prec            1    wreg     unsigned char 
 15926 ;; Auto vars:     Size  Location     Type
 15927 ;;  prec            1   75[COMRAM] unsigned char 
 15928 ;; Return value:  Size  Location     Type
 15929 ;;                  3   66[COMRAM] unsigned char 
 15930 ;; Registers used:
 15931 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15932 ;; Tracked objects:
 15933 ;;		On entry : 0/0
 15934 ;;		On exit  : 0/0
 15935 ;;		Unchanged: 0/0
 15936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15937 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15938 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15940 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15941 ;;Total ram usage:       10 bytes
 15942 ;; Hardware stack levels used:    1
 15943 ;; Hardware stack levels required when called:    5
 15944 ;; This function calls:
 15945 ;;		___awdiv
 15946 ;;		___awmod
 15947 ;;		___ftmul
 15948 ;;		___wmul
 15949 ;; This function is called by:
 15950 ;;		_printf
 15951 ;; This function uses a non-reentrant model
 15952 ;;
 15953                           
 15954                           	psect	text66
 15955  001D9E                     __ptext66:
 15956                           	opt stack 0
 15957  001D9E                     _fround:
 15958                           	opt stack 24
 15959                           
 15960                           ;incstack = 0
 15961                           ;fround@prec stored from wreg
 15962  001D9E  6E4C               	movwf	fround@prec,c
 15963                           
 15964                           ;doprnt.c: 413: if(prec>=110)
 15965  001DA0  0E6D               	movlw	109
 15966  001DA2  644C               	cpfsgt	fround@prec,c
 15967  001DA4  D09B               	goto	l8768
 15968                           
 15969                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15970  001DA6  0E00               	movlw	0
 15971  001DA8  6E14               	movwf	___wmul@multiplicand+1,c
 15972  001DAA  0E03               	movlw	3
 15973  001DAC  6E13               	movwf	___wmul@multiplicand,c
 15974  001DAE  0E00               	movlw	0
 15975  001DB0  6E1A               	movwf	___awdiv@divisor+1,c
 15976  001DB2  0E0A               	movlw	10
 15977  001DB4  6E19               	movwf	___awdiv@divisor,c
 15978  001DB6  0E00               	movlw	0
 15979  001DB8  6E40               	movwf	___awmod@divisor+1,c
 15980  001DBA  0E64               	movlw	100
 15981  001DBC  6E3F               	movwf	___awmod@divisor,c
 15982  001DBE  C04C  F03D         	movff	fround@prec,___awmod@dividend
 15983  001DC2  6A3E               	clrf	___awmod@dividend+1,c
 15984  001DC4  EC34  F020         	call	___awmod	;wreg free
 15985  001DC8  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15986  001DCC  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15987  001DD0  EC45  F01E         	call	___awdiv	;wreg free
 15988  001DD4  0E09               	movlw	9
 15989  001DD6  2417               	addwf	?___awdiv,w,c
 15990  001DD8  6E11               	movwf	___wmul@multiplier,c
 15991  001DDA  0E00               	movlw	0
 15992  001DDC  2018               	addwfc	?___awdiv+1,w,c
 15993  001DDE  6E12               	movwf	___wmul@multiplier+1,c
 15994  001DE0  ECE9  F024         	call	___wmul	;wreg free
 15995  001DE4  0EC4               	movlw	low __npowers_
 15996  001DE6  2411               	addwf	?___wmul,w,c
 15997  001DE8  6EF6               	movwf	tblptrl,c
 15998  001DEA  0EFD               	movlw	high __npowers_
 15999  001DEC  2012               	addwfc	?___wmul+1,w,c
 16000  001DEE  6EF7               	movwf	tblptrh,c
 16001  001DF0                     	if	0	;There are less than 3 active tblptr bytes
 16002  001DF0                     	endif
 16003  001DF0  0009               	tblrd		*+
 16004  001DF2  CFF5 F022          	movff	tablat,___ftmul@f2
 16005  001DF6  0009               	tblrd		*+
 16006  001DF8  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16007  001DFC  000A               	tblrd		*-
 16008  001DFE  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16009  001E02  0E00               	movlw	0
 16010  001E04  6E1A               	movwf	___awdiv@divisor+1,c
 16011  001E06  0E64               	movlw	100
 16012  001E08  6E19               	movwf	___awdiv@divisor,c
 16013  001E0A  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16014  001E0E  6A18               	clrf	___awdiv@dividend+1,c
 16015  001E10  EC45  F01E         	call	___awdiv	;wreg free
 16016  001E14  0E12               	movlw	18
 16017  001E16  2417               	addwf	?___awdiv,w,c
 16018  001E18  6E11               	movwf	___wmul@multiplier,c
 16019  001E1A  0E00               	movlw	0
 16020  001E1C  2018               	addwfc	?___awdiv+1,w,c
 16021  001E1E  6E12               	movwf	___wmul@multiplier+1,c
 16022  001E20  0E00               	movlw	0
 16023  001E22  6E14               	movwf	___wmul@multiplicand+1,c
 16024  001E24  0E03               	movlw	3
 16025  001E26  6E13               	movwf	___wmul@multiplicand,c
 16026  001E28  ECE9  F024         	call	___wmul	;wreg free
 16027  001E2C  0EC4               	movlw	low __npowers_
 16028  001E2E  2411               	addwf	?___wmul,w,c
 16029  001E30  6EF6               	movwf	tblptrl,c
 16030  001E32  0EFD               	movlw	high __npowers_
 16031  001E34  2012               	addwfc	?___wmul+1,w,c
 16032  001E36  6EF7               	movwf	tblptrh,c
 16033  001E38                     	if	0	;There are less than 3 active tblptr bytes
 16034  001E38                     	endif
 16035  001E38  0009               	tblrd		*+
 16036  001E3A  CFF5 F01F          	movff	tablat,___ftmul@f1
 16037  001E3E  0009               	tblrd		*+
 16038  001E40  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16039  001E44  000A               	tblrd		*-
 16040  001E46  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16041  001E4A  EC00  F019         	call	___ftmul	;wreg free
 16042  001E4E  C01F  F049         	movff	?___ftmul,_fround$2976
 16043  001E52  C020  F04A         	movff	?___ftmul+1,_fround$2976+1
 16044  001E56  C021  F04B         	movff	?___ftmul+2,_fround$2976+2
 16045                           
 16046                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16047  001E5A  0E00               	movlw	0
 16048  001E5C  6E14               	movwf	___wmul@multiplicand+1,c
 16049  001E5E  0E03               	movlw	3
 16050  001E60  6E13               	movwf	___wmul@multiplicand,c
 16051  001E62  0E00               	movlw	0
 16052  001E64  6E40               	movwf	___awmod@divisor+1,c
 16053  001E66  0E0A               	movlw	10
 16054  001E68  6E3F               	movwf	___awmod@divisor,c
 16055  001E6A  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16056  001E6E  6A3E               	clrf	___awmod@dividend+1,c
 16057  001E70  EC34  F020         	call	___awmod	;wreg free
 16058  001E74  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16059  001E78  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16060  001E7C  ECE9  F024         	call	___wmul	;wreg free
 16061  001E80  0EC4               	movlw	low __npowers_
 16062  001E82  2411               	addwf	?___wmul,w,c
 16063  001E84  6EF6               	movwf	tblptrl,c
 16064  001E86  0EFD               	movlw	high __npowers_
 16065  001E88  2012               	addwfc	?___wmul+1,w,c
 16066  001E8A  6EF7               	movwf	tblptrh,c
 16067  001E8C                     	if	0	;There are less than 3 active tblptr bytes
 16068  001E8C                     	endif
 16069  001E8C  0009               	tblrd		*+
 16070  001E8E  CFF5 F022          	movff	tablat,___ftmul@f2
 16071  001E92  0009               	tblrd		*+
 16072  001E94  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16073  001E98  000A               	tblrd		*-
 16074  001E9A  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16075  001E9E  C049  F01F         	movff	_fround$2976,___ftmul@f1
 16076  001EA2  C04A  F020         	movff	_fround$2976+1,___ftmul@f1+1
 16077  001EA6  C04B  F021         	movff	_fround$2976+2,___ftmul@f1+2
 16078  001EAA  EC00  F019         	call	___ftmul	;wreg free
 16079  001EAE  C01F  F046         	movff	?___ftmul,_fround$2977
 16080  001EB2  C020  F047         	movff	?___ftmul+1,_fround$2977+1
 16081  001EB6  C021  F048         	movff	?___ftmul+2,_fround$2977+2
 16082                           
 16083                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16084  001EBA  C046  F01F         	movff	_fround$2977,___ftmul@f1
 16085  001EBE  C047  F020         	movff	_fround$2977+1,___ftmul@f1+1
 16086  001EC2  C048  F021         	movff	_fround$2977+2,___ftmul@f1+2
 16087  001EC6  0E00               	movlw	0
 16088  001EC8  6E22               	movwf	___ftmul@f2,c
 16089  001ECA  0E00               	movlw	0
 16090  001ECC  6E23               	movwf	___ftmul@f2+1,c
 16091  001ECE  0E3F               	movlw	63
 16092  001ED0  6E24               	movwf	___ftmul@f2+2,c
 16093  001ED2  EC00  F019         	call	___ftmul	;wreg free
 16094  001ED6  D07D               	goto	L14
 16095  001ED8  D083               	goto	l1350
 16096  001EDA  D062               	goto	l8776
 16097  001EDC                     l8768:
 16098                           
 16099                           ;doprnt.c: 415: else if(prec > 10)
 16100  001EDC  0E0A               	movlw	10
 16101  001EDE  644C               	cpfsgt	fround@prec,c
 16102  001EE0  D05F               	goto	l8776
 16103                           
 16104                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16105  001EE2  0E00               	movlw	0
 16106  001EE4  6E14               	movwf	___wmul@multiplicand+1,c
 16107  001EE6  0E03               	movlw	3
 16108  001EE8  6E13               	movwf	___wmul@multiplicand,c
 16109  001EEA  0E00               	movlw	0
 16110  001EEC  6E40               	movwf	___awmod@divisor+1,c
 16111  001EEE  0E0A               	movlw	10
 16112  001EF0  6E3F               	movwf	___awmod@divisor,c
 16113  001EF2  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16114  001EF6  6A3E               	clrf	___awmod@dividend+1,c
 16115  001EF8  EC34  F020         	call	___awmod	;wreg free
 16116  001EFC  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16117  001F00  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16118  001F04  ECE9  F024         	call	___wmul	;wreg free
 16119  001F08  0EC4               	movlw	low __npowers_
 16120  001F0A  2411               	addwf	?___wmul,w,c
 16121  001F0C  6EF6               	movwf	tblptrl,c
 16122  001F0E  0EFD               	movlw	high __npowers_
 16123  001F10  2012               	addwfc	?___wmul+1,w,c
 16124  001F12  6EF7               	movwf	tblptrh,c
 16125  001F14                     	if	0	;There are less than 3 active tblptr bytes
 16126  001F14                     	endif
 16127  001F14  0009               	tblrd		*+
 16128  001F16  CFF5 F022          	movff	tablat,___ftmul@f2
 16129  001F1A  0009               	tblrd		*+
 16130  001F1C  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16131  001F20  000A               	tblrd		*-
 16132  001F22  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16133  001F26  0E00               	movlw	0
 16134  001F28  6E1A               	movwf	___awdiv@divisor+1,c
 16135  001F2A  0E0A               	movlw	10
 16136  001F2C  6E19               	movwf	___awdiv@divisor,c
 16137  001F2E  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16138  001F32  6A18               	clrf	___awdiv@dividend+1,c
 16139  001F34  EC45  F01E         	call	___awdiv	;wreg free
 16140  001F38  0E09               	movlw	9
 16141  001F3A  2417               	addwf	?___awdiv,w,c
 16142  001F3C  6E11               	movwf	___wmul@multiplier,c
 16143  001F3E  0E00               	movlw	0
 16144  001F40  2018               	addwfc	?___awdiv+1,w,c
 16145  001F42  6E12               	movwf	___wmul@multiplier+1,c
 16146  001F44  0E00               	movlw	0
 16147  001F46  6E14               	movwf	___wmul@multiplicand+1,c
 16148  001F48  0E03               	movlw	3
 16149  001F4A  6E13               	movwf	___wmul@multiplicand,c
 16150  001F4C  ECE9  F024         	call	___wmul	;wreg free
 16151  001F50  0EC4               	movlw	low __npowers_
 16152  001F52  2411               	addwf	?___wmul,w,c
 16153  001F54  6EF6               	movwf	tblptrl,c
 16154  001F56  0EFD               	movlw	high __npowers_
 16155  001F58  2012               	addwfc	?___wmul+1,w,c
 16156  001F5A  6EF7               	movwf	tblptrh,c
 16157  001F5C                     	if	0	;There are less than 3 active tblptr bytes
 16158  001F5C                     	endif
 16159  001F5C  0009               	tblrd		*+
 16160  001F5E  CFF5 F01F          	movff	tablat,___ftmul@f1
 16161  001F62  0009               	tblrd		*+
 16162  001F64  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16163  001F68  000A               	tblrd		*-
 16164  001F6A  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16165  001F6E  EC00  F019         	call	___ftmul	;wreg free
 16166  001F72  C01F  F049         	movff	?___ftmul,_fround$2976
 16167  001F76  C020  F04A         	movff	?___ftmul+1,_fround$2976+1
 16168  001F7A  C021  F04B         	movff	?___ftmul+2,_fround$2976+2
 16169                           
 16170                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16171  001F7E  C049  F01F         	movff	_fround$2976,___ftmul@f1
 16172  001F82  C04A  F020         	movff	_fround$2976+1,___ftmul@f1+1
 16173  001F86  C04B  F021         	movff	_fround$2976+2,___ftmul@f1+2
 16174  001F8A  0E00               	movlw	0
 16175  001F8C  6E22               	movwf	___ftmul@f2,c
 16176  001F8E  0E00               	movlw	0
 16177  001F90  6E23               	movwf	___ftmul@f2+1,c
 16178  001F92  0E3F               	movlw	63
 16179  001F94  6E24               	movwf	___ftmul@f2+2,c
 16180  001F96  EC00  F019         	call	___ftmul	;wreg free
 16181  001F9A  D01B               	goto	L14
 16182  001F9C  D021               	goto	l1350
 16183  001F9E  D000               	goto	l8776
 16184  001FA0                     l8776:
 16185                           
 16186                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 16187  001FA0  504C               	movf	fround@prec,w,c
 16188  001FA2  0D03               	mullw	3
 16189  001FA4  0EC4               	movlw	low __npowers_
 16190  001FA6  24F3               	addwf	prodl,w,c
 16191  001FA8  6EF6               	movwf	tblptrl,c
 16192  001FAA  0EFD               	movlw	high __npowers_
 16193  001FAC  20F4               	addwfc	prodh,w,c
 16194  001FAE  6EF7               	movwf	tblptrh,c
 16195  001FB0                     	if	0	;There are less than 3 active tblptr bytes
 16196  001FB0                     	endif
 16197  001FB0  0009               	tblrd		*+
 16198  001FB2  CFF5 F01F          	movff	tablat,___ftmul@f1
 16199  001FB6  0009               	tblrd		*+
 16200  001FB8  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16201  001FBC  000A               	tblrd		*-
 16202  001FBE  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16203  001FC2  0E00               	movlw	0
 16204  001FC4  6E22               	movwf	___ftmul@f2,c
 16205  001FC6  0E00               	movlw	0
 16206  001FC8  6E23               	movwf	___ftmul@f2+1,c
 16207  001FCA  0E3F               	movlw	63
 16208  001FCC  6E24               	movwf	___ftmul@f2+2,c
 16209  001FCE  EC00  F019         	call	___ftmul	;wreg free
 16210  001FD2                     L14:
 16211  001FD2  C01F  F043         	movff	?___ftmul,?_fround
 16212  001FD6  C020  F044         	movff	?___ftmul+1,?_fround+1
 16213  001FDA  C021  F045         	movff	?___ftmul+2,?_fround+2
 16214  001FDE  D000               	goto	l1350
 16215  001FE0                     l1350:
 16216  001FE0  0012               	return		;funcret
 16217  001FE2                     __end_of_fround:
 16218                           	opt stack 0
 16219                           tblptru	equ	0xFF8
 16220                           tblptrh	equ	0xFF7
 16221                           tblptrl	equ	0xFF6
 16222                           tablat	equ	0xFF5
 16223                           prodh	equ	0xFF4
 16224                           prodl	equ	0xFF3
 16225                           intcon	equ	0xFF2
 16226                           intcon2	equ	0xFF1
 16227                           intcon3	equ	0xFF0
 16228                           postinc0	equ	0xFEE
 16229                           wreg	equ	0xFE8
 16230                           postdec1	equ	0xFE5
 16231                           plusw1	equ	0xFE3
 16232                           fsr1l	equ	0xFE1
 16233                           indf2	equ	0xFDF
 16234                           postinc2	equ	0xFDE
 16235                           postdec2	equ	0xFDD
 16236                           plusw2	equ	0xFDB
 16237                           fsr2h	equ	0xFDA
 16238                           fsr2l	equ	0xFD9
 16239                           status	equ	0xFD8
 16240                           
 16241 ;; *************** function ___wmul *****************
 16242 ;; Defined at:
 16243 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;  multiplier      2   16[COMRAM] unsigned int 
 16246 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16247 ;; Auto vars:     Size  Location     Type
 16248 ;;  product         2   20[COMRAM] unsigned int 
 16249 ;; Return value:  Size  Location     Type
 16250 ;;                  2   16[COMRAM] unsigned int 
 16251 ;; Registers used:
 16252 ;;		wreg, status,2, status,0, prodl, prodh
 16253 ;; Tracked objects:
 16254 ;;		On entry : 0/0
 16255 ;;		On exit  : 0/0
 16256 ;;		Unchanged: 0/0
 16257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16261 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16262 ;;Total ram usage:        6 bytes
 16263 ;; Hardware stack levels used:    1
 16264 ;; Hardware stack levels required when called:    3
 16265 ;; This function calls:
 16266 ;;		Nothing
 16267 ;; This function is called by:
 16268 ;;		_get_RPM
 16269 ;;		_delay_ms
 16270 ;;		_drawChar
 16271 ;;		_Read_Volt
 16272 ;;		_main
 16273 ;;		_Setup_Fan_Temp
 16274 ;;		_Do_Setup_Time
 16275 ;;		_fround
 16276 ;;		_scale
 16277 ;;		_printf
 16278 ;; This function uses a non-reentrant model
 16279 ;;
 16280                           
 16281                           	psect	text67
 16282  0049D2                     __ptext67:
 16283                           	opt stack 0
 16284  0049D2                     ___wmul:
 16285                           	opt stack 25
 16286                           
 16287                           ;incstack = 0
 16288  0049D2  5011               	movf	___wmul@multiplier,w,c
 16289  0049D4  0213               	mulwf	___wmul@multiplicand,c
 16290  0049D6  CFF3 F015          	movff	prodl,___wmul@product
 16291  0049DA  CFF4 F016          	movff	prodh,___wmul@product+1
 16292  0049DE  5011               	movf	___wmul@multiplier,w,c
 16293  0049E0  0214               	mulwf	___wmul@multiplicand+1,c
 16294  0049E2  50F3               	movf	prodl,w,c
 16295  0049E4  2616               	addwf	___wmul@product+1,f,c
 16296  0049E6  5012               	movf	___wmul@multiplier+1,w,c
 16297  0049E8  0213               	mulwf	___wmul@multiplicand,c
 16298  0049EA  50F3               	movf	prodl,w,c
 16299  0049EC  2616               	addwf	___wmul@product+1,f,c
 16300  0049EE  C015  F011         	movff	___wmul@product,?___wmul
 16301  0049F2  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16302  0049F6  D000               	goto	l1504
 16303  0049F8                     l1504:
 16304  0049F8  0012               	return		;funcret
 16305  0049FA                     __end_of___wmul:
 16306                           	opt stack 0
 16307                           tblptru	equ	0xFF8
 16308                           tblptrh	equ	0xFF7
 16309                           tblptrl	equ	0xFF6
 16310                           tablat	equ	0xFF5
 16311                           prodh	equ	0xFF4
 16312                           prodl	equ	0xFF3
 16313                           intcon	equ	0xFF2
 16314                           intcon2	equ	0xFF1
 16315                           intcon3	equ	0xFF0
 16316                           postinc0	equ	0xFEE
 16317                           wreg	equ	0xFE8
 16318                           postdec1	equ	0xFE5
 16319                           plusw1	equ	0xFE3
 16320                           fsr1l	equ	0xFE1
 16321                           indf2	equ	0xFDF
 16322                           postinc2	equ	0xFDE
 16323                           postdec2	equ	0xFDD
 16324                           plusw2	equ	0xFDB
 16325                           fsr2h	equ	0xFDA
 16326                           fsr2l	equ	0xFD9
 16327                           status	equ	0xFD8
 16328                           
 16329 ;; *************** function ___awmod *****************
 16330 ;; Defined at:
 16331 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 16332 ;; Parameters:    Size  Location     Type
 16333 ;;  dividend        2   60[COMRAM] int 
 16334 ;;  divisor         2   62[COMRAM] int 
 16335 ;; Auto vars:     Size  Location     Type
 16336 ;;  sign            1   65[COMRAM] unsigned char 
 16337 ;;  counter         1   64[COMRAM] unsigned char 
 16338 ;; Return value:  Size  Location     Type
 16339 ;;                  2   60[COMRAM] int 
 16340 ;; Registers used:
 16341 ;;		wreg, status,2, status,0
 16342 ;; Tracked objects:
 16343 ;;		On entry : 0/0
 16344 ;;		On exit  : 0/0
 16345 ;;		Unchanged: 0/0
 16346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16348 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16350 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16351 ;;Total ram usage:        6 bytes
 16352 ;; Hardware stack levels used:    1
 16353 ;; Hardware stack levels required when called:    3
 16354 ;; This function calls:
 16355 ;;		Nothing
 16356 ;; This function is called by:
 16357 ;;		_dec_2_bcd
 16358 ;;		_Update_Screen
 16359 ;;		_Update_Setup_Fan_Screen
 16360 ;;		_Update_Setup_Time_Screen
 16361 ;;		_fround
 16362 ;;		_scale
 16363 ;; This function uses a non-reentrant model
 16364 ;;
 16365                           
 16366                           	psect	text68
 16367  004068                     __ptext68:
 16368                           	opt stack 0
 16369  004068                     ___awmod:
 16370                           	opt stack 25
 16371                           
 16372                           ;incstack = 0
 16373  004068  0E00               	movlw	0
 16374  00406A  6E42               	movwf	___awmod@sign,c
 16375  00406C  AE3E               	btfss	___awmod@dividend+1,7,c
 16376  00406E  D007               	goto	l8582
 16377  004070  6C3D               	negf	___awmod@dividend,c
 16378  004072  1E3E               	comf	___awmod@dividend+1,f,c
 16379  004074  B0D8               	btfsc	status,0,c
 16380  004076  2A3E               	incf	___awmod@dividend+1,f,c
 16381  004078  0E01               	movlw	1
 16382  00407A  6E42               	movwf	___awmod@sign,c
 16383  00407C  D000               	goto	l8582
 16384  00407E                     l8582:
 16385  00407E  AE40               	btfss	___awmod@divisor+1,7,c
 16386  004080  D005               	goto	l8586
 16387  004082  6C3F               	negf	___awmod@divisor,c
 16388  004084  1E40               	comf	___awmod@divisor+1,f,c
 16389  004086  B0D8               	btfsc	status,0,c
 16390  004088  2A40               	incf	___awmod@divisor+1,f,c
 16391  00408A  D000               	goto	l8586
 16392  00408C                     l8586:
 16393  00408C  503F               	movf	___awmod@divisor,w,c
 16394  00408E  1040               	iorwf	___awmod@divisor+1,w,c
 16395  004090  B4D8               	btfsc	status,2,c
 16396  004092  D01D               	goto	l8602
 16397  004094  0E01               	movlw	1
 16398  004096  6E41               	movwf	___awmod@counter,c
 16399  004098  D005               	goto	l8592
 16400  00409A                     l8590:
 16401  00409A  90D8               	bcf	status,0,c
 16402  00409C  363F               	rlcf	___awmod@divisor,f,c
 16403  00409E  3640               	rlcf	___awmod@divisor+1,f,c
 16404  0040A0  2A41               	incf	___awmod@counter,f,c
 16405  0040A2  D000               	goto	l8592
 16406  0040A4                     l8592:
 16407  0040A4  BE40               	btfsc	___awmod@divisor+1,7,c
 16408  0040A6  D002               	goto	l8594
 16409  0040A8  D7F8               	goto	l8590
 16410  0040AA  D000               	goto	l8594
 16411  0040AC                     l8594:
 16412  0040AC  503F               	movf	___awmod@divisor,w,c
 16413  0040AE  5C3D               	subwf	___awmod@dividend,w,c
 16414  0040B0  5040               	movf	___awmod@divisor+1,w,c
 16415  0040B2  583E               	subwfb	___awmod@dividend+1,w,c
 16416  0040B4  A0D8               	btfss	status,0,c
 16417  0040B6  D005               	goto	l8598
 16418  0040B8  503F               	movf	___awmod@divisor,w,c
 16419  0040BA  5E3D               	subwf	___awmod@dividend,f,c
 16420  0040BC  5040               	movf	___awmod@divisor+1,w,c
 16421  0040BE  5A3E               	subwfb	___awmod@dividend+1,f,c
 16422  0040C0  D000               	goto	l8598
 16423  0040C2                     l8598:
 16424  0040C2  90D8               	bcf	status,0,c
 16425  0040C4  3240               	rrcf	___awmod@divisor+1,f,c
 16426  0040C6  323F               	rrcf	___awmod@divisor,f,c
 16427  0040C8  2E41               	decfsz	___awmod@counter,f,c
 16428  0040CA  D7F0               	goto	l8594
 16429  0040CC  D000               	goto	l8602
 16430  0040CE                     l8602:
 16431  0040CE  5042               	movf	___awmod@sign,w,c
 16432  0040D0  B4D8               	btfsc	status,2,c
 16433  0040D2  D005               	goto	l8606
 16434  0040D4  6C3D               	negf	___awmod@dividend,c
 16435  0040D6  1E3E               	comf	___awmod@dividend+1,f,c
 16436  0040D8  B0D8               	btfsc	status,0,c
 16437  0040DA  2A3E               	incf	___awmod@dividend+1,f,c
 16438  0040DC  D000               	goto	l8606
 16439  0040DE                     l8606:
 16440  0040DE  C03D  F03D         	movff	___awmod@dividend,?___awmod
 16441  0040E2  C03E  F03E         	movff	___awmod@dividend+1,?___awmod+1
 16442  0040E6  D000               	goto	l1710
 16443  0040E8                     l1710:
 16444  0040E8  0012               	return		;funcret
 16445  0040EA                     __end_of___awmod:
 16446                           	opt stack 0
 16447                           tblptru	equ	0xFF8
 16448                           tblptrh	equ	0xFF7
 16449                           tblptrl	equ	0xFF6
 16450                           tablat	equ	0xFF5
 16451                           prodh	equ	0xFF4
 16452                           prodl	equ	0xFF3
 16453                           intcon	equ	0xFF2
 16454                           intcon2	equ	0xFF1
 16455                           intcon3	equ	0xFF0
 16456                           postinc0	equ	0xFEE
 16457                           wreg	equ	0xFE8
 16458                           postdec1	equ	0xFE5
 16459                           plusw1	equ	0xFE3
 16460                           fsr1l	equ	0xFE1
 16461                           indf2	equ	0xFDF
 16462                           postinc2	equ	0xFDE
 16463                           postdec2	equ	0xFDD
 16464                           plusw2	equ	0xFDB
 16465                           fsr2h	equ	0xFDA
 16466                           fsr2l	equ	0xFD9
 16467                           status	equ	0xFD8
 16468                           
 16469 ;; *************** function ___awdiv *****************
 16470 ;; Defined at:
 16471 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 16472 ;; Parameters:    Size  Location     Type
 16473 ;;  dividend        2   22[COMRAM] int 
 16474 ;;  divisor         2   24[COMRAM] int 
 16475 ;; Auto vars:     Size  Location     Type
 16476 ;;  quotient        2   28[COMRAM] int 
 16477 ;;  sign            1   27[COMRAM] unsigned char 
 16478 ;;  counter         1   26[COMRAM] unsigned char 
 16479 ;; Return value:  Size  Location     Type
 16480 ;;                  2   22[COMRAM] int 
 16481 ;; Registers used:
 16482 ;;		wreg, status,2, status,0
 16483 ;; Tracked objects:
 16484 ;;		On entry : 0/0
 16485 ;;		On exit  : 0/0
 16486 ;;		Unchanged: 0/0
 16487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16491 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16492 ;;Total ram usage:        8 bytes
 16493 ;; Hardware stack levels used:    1
 16494 ;; Hardware stack levels required when called:    3
 16495 ;; This function calls:
 16496 ;;		Nothing
 16497 ;; This function is called by:
 16498 ;;		_get_RPM
 16499 ;;		_dec_2_bcd
 16500 ;;		_main
 16501 ;;		_Set_D1_RGB
 16502 ;;		_Set_D2_RGB
 16503 ;;		_Update_Screen
 16504 ;;		_Setup_Fan_Temp
 16505 ;;		_Update_Setup_Fan_Screen
 16506 ;;		_Do_Setup_Time
 16507 ;;		_Update_Setup_Time_Screen
 16508 ;;		_fround
 16509 ;;		_scale
 16510 ;;		_printf
 16511 ;; This function uses a non-reentrant model
 16512 ;;
 16513                           
 16514                           	psect	text69
 16515  003C8A                     __ptext69:
 16516                           	opt stack 0
 16517  003C8A                     ___awdiv:
 16518                           	opt stack 25
 16519                           
 16520                           ;incstack = 0
 16521  003C8A  0E00               	movlw	0
 16522  003C8C  6E1C               	movwf	___awdiv@sign,c
 16523  003C8E  AE1A               	btfss	___awdiv@divisor+1,7,c
 16524  003C90  D007               	goto	l8538
 16525  003C92  6C19               	negf	___awdiv@divisor,c
 16526  003C94  1E1A               	comf	___awdiv@divisor+1,f,c
 16527  003C96  B0D8               	btfsc	status,0,c
 16528  003C98  2A1A               	incf	___awdiv@divisor+1,f,c
 16529  003C9A  0E01               	movlw	1
 16530  003C9C  6E1C               	movwf	___awdiv@sign,c
 16531  003C9E  D000               	goto	l8538
 16532  003CA0                     l8538:
 16533  003CA0  AE18               	btfss	___awdiv@dividend+1,7,c
 16534  003CA2  D007               	goto	l8544
 16535  003CA4  6C17               	negf	___awdiv@dividend,c
 16536  003CA6  1E18               	comf	___awdiv@dividend+1,f,c
 16537  003CA8  B0D8               	btfsc	status,0,c
 16538  003CAA  2A18               	incf	___awdiv@dividend+1,f,c
 16539  003CAC  0E01               	movlw	1
 16540  003CAE  1A1C               	xorwf	___awdiv@sign,f,c
 16541  003CB0  D000               	goto	l8544
 16542  003CB2                     l8544:
 16543  003CB2  0E00               	movlw	0
 16544  003CB4  6E1E               	movwf	___awdiv@quotient+1,c
 16545  003CB6  0E00               	movlw	0
 16546  003CB8  6E1D               	movwf	___awdiv@quotient,c
 16547  003CBA  5019               	movf	___awdiv@divisor,w,c
 16548  003CBC  101A               	iorwf	___awdiv@divisor+1,w,c
 16549  003CBE  B4D8               	btfsc	status,2,c
 16550  003CC0  D021               	goto	l8566
 16551  003CC2  0E01               	movlw	1
 16552  003CC4  6E1B               	movwf	___awdiv@counter,c
 16553  003CC6  D005               	goto	l8552
 16554  003CC8                     l8550:
 16555  003CC8  90D8               	bcf	status,0,c
 16556  003CCA  3619               	rlcf	___awdiv@divisor,f,c
 16557  003CCC  361A               	rlcf	___awdiv@divisor+1,f,c
 16558  003CCE  2A1B               	incf	___awdiv@counter,f,c
 16559  003CD0  D000               	goto	l8552
 16560  003CD2                     l8552:
 16561  003CD2  BE1A               	btfsc	___awdiv@divisor+1,7,c
 16562  003CD4  D002               	goto	l8554
 16563  003CD6  D7F8               	goto	l8550
 16564  003CD8  D000               	goto	l8554
 16565  003CDA                     l8554:
 16566  003CDA  90D8               	bcf	status,0,c
 16567  003CDC  361D               	rlcf	___awdiv@quotient,f,c
 16568  003CDE  361E               	rlcf	___awdiv@quotient+1,f,c
 16569  003CE0  5019               	movf	___awdiv@divisor,w,c
 16570  003CE2  5C17               	subwf	___awdiv@dividend,w,c
 16571  003CE4  501A               	movf	___awdiv@divisor+1,w,c
 16572  003CE6  5818               	subwfb	___awdiv@dividend+1,w,c
 16573  003CE8  A0D8               	btfss	status,0,c
 16574  003CEA  D006               	goto	l8562
 16575  003CEC  5019               	movf	___awdiv@divisor,w,c
 16576  003CEE  5E17               	subwf	___awdiv@dividend,f,c
 16577  003CF0  501A               	movf	___awdiv@divisor+1,w,c
 16578  003CF2  5A18               	subwfb	___awdiv@dividend+1,f,c
 16579  003CF4  801D               	bsf	___awdiv@quotient,0,c
 16580  003CF6  D000               	goto	l8562
 16581  003CF8                     l8562:
 16582  003CF8  90D8               	bcf	status,0,c
 16583  003CFA  321A               	rrcf	___awdiv@divisor+1,f,c
 16584  003CFC  3219               	rrcf	___awdiv@divisor,f,c
 16585  003CFE  2E1B               	decfsz	___awdiv@counter,f,c
 16586  003D00  D7EC               	goto	l8554
 16587  003D02  D000               	goto	l8566
 16588  003D04                     l8566:
 16589  003D04  501C               	movf	___awdiv@sign,w,c
 16590  003D06  B4D8               	btfsc	status,2,c
 16591  003D08  D005               	goto	l8570
 16592  003D0A  6C1D               	negf	___awdiv@quotient,c
 16593  003D0C  1E1E               	comf	___awdiv@quotient+1,f,c
 16594  003D0E  B0D8               	btfsc	status,0,c
 16595  003D10  2A1E               	incf	___awdiv@quotient+1,f,c
 16596  003D12  D000               	goto	l8570
 16597  003D14                     l8570:
 16598  003D14  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 16599  003D18  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 16600  003D1C  D000               	goto	l1697
 16601  003D1E                     l1697:
 16602  003D1E  0012               	return		;funcret
 16603  003D20                     __end_of___awdiv:
 16604                           	opt stack 0
 16605                           tblptru	equ	0xFF8
 16606                           tblptrh	equ	0xFF7
 16607                           tblptrl	equ	0xFF6
 16608                           tablat	equ	0xFF5
 16609                           prodh	equ	0xFF4
 16610                           prodl	equ	0xFF3
 16611                           intcon	equ	0xFF2
 16612                           intcon2	equ	0xFF1
 16613                           intcon3	equ	0xFF0
 16614                           postinc0	equ	0xFEE
 16615                           wreg	equ	0xFE8
 16616                           postdec1	equ	0xFE5
 16617                           plusw1	equ	0xFE3
 16618                           fsr1l	equ	0xFE1
 16619                           indf2	equ	0xFDF
 16620                           postinc2	equ	0xFDE
 16621                           postdec2	equ	0xFDD
 16622                           plusw2	equ	0xFDB
 16623                           fsr2h	equ	0xFDA
 16624                           fsr2l	equ	0xFD9
 16625                           status	equ	0xFD8
 16626                           
 16627 ;; *************** function __tdiv_to_l_ *****************
 16628 ;; Defined at:
 16629 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 16630 ;; Parameters:    Size  Location     Type
 16631 ;;  f1              3   16[COMRAM] float 
 16632 ;;  f2              3   19[COMRAM] float 
 16633 ;; Auto vars:     Size  Location     Type
 16634 ;;  quot            4   25[COMRAM] unsigned long 
 16635 ;;  exp1            1   30[COMRAM] unsigned char 
 16636 ;;  cntr            1   29[COMRAM] unsigned char 
 16637 ;; Return value:  Size  Location     Type
 16638 ;;                  4   16[COMRAM] unsigned long 
 16639 ;; Registers used:
 16640 ;;		wreg, status,2, status,0
 16641 ;; Tracked objects:
 16642 ;;		On entry : 0/0
 16643 ;;		On exit  : 0/0
 16644 ;;		Unchanged: 0/0
 16645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16646 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16647 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16648 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16649 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16650 ;;Total ram usage:       15 bytes
 16651 ;; Hardware stack levels used:    1
 16652 ;; Hardware stack levels required when called:    3
 16653 ;; This function calls:
 16654 ;;		Nothing
 16655 ;; This function is called by:
 16656 ;;		_printf
 16657 ;; This function uses a non-reentrant model
 16658 ;;
 16659                           
 16660                           	psect	text70
 16661  002FE6                     __ptext70:
 16662                           	opt stack 0
 16663  002FE6                     __tdiv_to_l_:
 16664                           	opt stack 26
 16665                           
 16666                           ;incstack = 0
 16667  002FE6  C013  F017         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 16668  002FEA  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16669  002FEC  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16670  002FEE  3412               	rlcf	__tdiv_to_l_@f1+1,w,c
 16671  002FF0  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16672  002FF2  E301               	bnc	u7371
 16673  002FF4  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16674  002FF6                     u7371:
 16675  002FF6  5017               	movf	??__tdiv_to_l_,w,c
 16676  002FF8  6E1F               	movwf	__tdiv_to_l_@exp1,c
 16677  002FFA  501F               	movf	__tdiv_to_l_@exp1,w,c
 16678  002FFC  A4D8               	btfss	status,2,c
 16679  002FFE  D002               	goto	l8836
 16680  003000  D05D               	goto	l8878
 16681  003002  D078               	goto	l1909
 16682  003004                     l8836:
 16683  003004  C016  F017         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 16684  003008  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16685  00300A  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16686  00300C  3415               	rlcf	__tdiv_to_l_@f2+1,w,c
 16687  00300E  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16688  003010  E301               	bnc	u7391
 16689  003012  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16690  003014                     u7391:
 16691  003014  5017               	movf	??__tdiv_to_l_,w,c
 16692  003016  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16693  003018  501E               	movf	__tdiv_to_l_@cntr,w,c
 16694  00301A  A4D8               	btfss	status,2,c
 16695  00301C  D002               	goto	l8842
 16696  00301E  D04E               	goto	l8878
 16697  003020  D069               	goto	l1909
 16698  003022                     l8842:
 16699  003022  8E12               	bsf	__tdiv_to_l_@f1+1,7,c
 16700  003024  0EFF               	movlw	255
 16701  003026  1611               	andwf	__tdiv_to_l_@f1,f,c
 16702  003028  0EFF               	movlw	255
 16703  00302A  1612               	andwf	__tdiv_to_l_@f1+1,f,c
 16704  00302C  0E00               	movlw	0
 16705  00302E  1613               	andwf	__tdiv_to_l_@f1+2,f,c
 16706  003030  8E15               	bsf	__tdiv_to_l_@f2+1,7,c
 16707  003032  0EFF               	movlw	255
 16708  003034  1614               	andwf	__tdiv_to_l_@f2,f,c
 16709  003036  0EFF               	movlw	255
 16710  003038  1615               	andwf	__tdiv_to_l_@f2+1,f,c
 16711  00303A  0E00               	movlw	0
 16712  00303C  1616               	andwf	__tdiv_to_l_@f2+2,f,c
 16713  00303E  0E00               	movlw	0
 16714  003040  6E1A               	movwf	__tdiv_to_l_@quot,c
 16715  003042  0E00               	movlw	0
 16716  003044  6E1B               	movwf	__tdiv_to_l_@quot+1,c
 16717  003046  0E00               	movlw	0
 16718  003048  6E1C               	movwf	__tdiv_to_l_@quot+2,c
 16719  00304A  0E00               	movlw	0
 16720  00304C  6E1D               	movwf	__tdiv_to_l_@quot+3,c
 16721  00304E  0E7F               	movlw	127
 16722  003050  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 16723  003052  501E               	movf	__tdiv_to_l_@cntr,w,c
 16724  003054  0F98               	addlw	152
 16725  003056  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 16726  003058  0E18               	movlw	24
 16727  00305A  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16728  00305C                     l1911:
 16729  00305C  90D8               	bcf	status,0,c
 16730  00305E  361A               	rlcf	__tdiv_to_l_@quot,f,c
 16731  003060  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 16732  003062  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 16733  003064  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 16734  003066  5014               	movf	__tdiv_to_l_@f2,w,c
 16735  003068  5C11               	subwf	__tdiv_to_l_@f1,w,c
 16736  00306A  5015               	movf	__tdiv_to_l_@f2+1,w,c
 16737  00306C  5812               	subwfb	__tdiv_to_l_@f1+1,w,c
 16738  00306E  5016               	movf	__tdiv_to_l_@f2+2,w,c
 16739  003070  5813               	subwfb	__tdiv_to_l_@f1+2,w,c
 16740  003072  A0D8               	btfss	status,0,c
 16741  003074  D007               	goto	l1912
 16742  003076  5014               	movf	__tdiv_to_l_@f2,w,c
 16743  003078  5E11               	subwf	__tdiv_to_l_@f1,f,c
 16744  00307A  5015               	movf	__tdiv_to_l_@f2+1,w,c
 16745  00307C  5A12               	subwfb	__tdiv_to_l_@f1+1,f,c
 16746  00307E  5016               	movf	__tdiv_to_l_@f2+2,w,c
 16747  003080  5A13               	subwfb	__tdiv_to_l_@f1+2,f,c
 16748  003082  801A               	bsf	__tdiv_to_l_@quot,0,c
 16749  003084                     l1912:
 16750  003084  90D8               	bcf	status,0,c
 16751  003086  3611               	rlcf	__tdiv_to_l_@f1,f,c
 16752  003088  3612               	rlcf	__tdiv_to_l_@f1+1,f,c
 16753  00308A  3613               	rlcf	__tdiv_to_l_@f1+2,f,c
 16754  00308C  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
 16755  00308E  D7E6               	goto	l1911
 16756  003090  D000               	goto	l8864
 16757  003092                     l8864:
 16758  003092  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
 16759  003094  D010               	goto	l8876
 16760  003096  501F               	movf	__tdiv_to_l_@exp1,w,c
 16761  003098  0A80               	xorlw	128
 16762  00309A  0F97               	addlw	151
 16763  00309C  B0D8               	btfsc	status,0,c
 16764  00309E  D003               	goto	l8872
 16765  0030A0  D00D               	goto	l8878
 16766  0030A2  D028               	goto	l1909
 16767  0030A4  D000               	goto	l8872
 16768  0030A6                     l8872:
 16769  0030A6  90D8               	bcf	status,0,c
 16770  0030A8  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
 16771  0030AA  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
 16772  0030AC  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
 16773  0030AE  321A               	rrcf	__tdiv_to_l_@quot,f,c
 16774  0030B0  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
 16775  0030B2  D7F9               	goto	l8872
 16776  0030B4  D017               	goto	l1918
 16777  0030B6                     l8876:
 16778  0030B6  0E17               	movlw	23
 16779  0030B8  641F               	cpfsgt	__tdiv_to_l_@exp1,c
 16780  0030BA  D011               	goto	l8884
 16781  0030BC                     l8878:
 16782  0030BC  0E00               	movlw	0
 16783  0030BE  6E11               	movwf	?__tdiv_to_l_,c
 16784  0030C0  0E00               	movlw	0
 16785  0030C2  6E12               	movwf	?__tdiv_to_l_+1,c
 16786  0030C4  0E00               	movlw	0
 16787  0030C6  6E13               	movwf	?__tdiv_to_l_+2,c
 16788  0030C8  0E00               	movlw	0
 16789  0030CA  6E14               	movwf	?__tdiv_to_l_+3,c
 16790  0030CC  D013               	goto	l1909
 16791  0030CE  D007               	goto	l8884
 16792  0030D0                     l8882:
 16793  0030D0  90D8               	bcf	status,0,c
 16794  0030D2  361A               	rlcf	__tdiv_to_l_@quot,f,c
 16795  0030D4  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 16796  0030D6  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 16797  0030D8  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 16798  0030DA  061F               	decf	__tdiv_to_l_@exp1,f,c
 16799  0030DC  D000               	goto	l8884
 16800  0030DE                     l8884:
 16801  0030DE  501F               	movf	__tdiv_to_l_@exp1,w,c
 16802  0030E0  A4D8               	btfss	status,2,c
 16803  0030E2  D7F6               	goto	l8882
 16804  0030E4                     l1918:
 16805  0030E4  C01A  F011         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 16806  0030E8  C01B  F012         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 16807  0030EC  C01C  F013         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 16808  0030F0  C01D  F014         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 16809  0030F4                     l1909:
 16810  0030F4  0012               	return		;funcret
 16811  0030F6                     __end_of__tdiv_to_l_:
 16812                           	opt stack 0
 16813                           tblptru	equ	0xFF8
 16814                           tblptrh	equ	0xFF7
 16815                           tblptrl	equ	0xFF6
 16816                           tablat	equ	0xFF5
 16817                           prodh	equ	0xFF4
 16818                           prodl	equ	0xFF3
 16819                           intcon	equ	0xFF2
 16820                           intcon2	equ	0xFF1
 16821                           intcon3	equ	0xFF0
 16822                           postinc0	equ	0xFEE
 16823                           wreg	equ	0xFE8
 16824                           postdec1	equ	0xFE5
 16825                           plusw1	equ	0xFE3
 16826                           fsr1l	equ	0xFE1
 16827                           indf2	equ	0xFDF
 16828                           postinc2	equ	0xFDE
 16829                           postdec2	equ	0xFDD
 16830                           plusw2	equ	0xFDB
 16831                           fsr2h	equ	0xFDA
 16832                           fsr2l	equ	0xFD9
 16833                           status	equ	0xFD8
 16834                           
 16835 ;; *************** function __div_to_l_ *****************
 16836 ;; Defined at:
 16837 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 16838 ;; Parameters:    Size  Location     Type
 16839 ;;  f1              3   16[COMRAM] unsigned long 
 16840 ;;  f2              3   19[COMRAM] unsigned long 
 16841 ;; Auto vars:     Size  Location     Type
 16842 ;;  quot            4   22[COMRAM] unsigned long 
 16843 ;;  exp1            1   27[COMRAM] unsigned char 
 16844 ;;  cntr            1   26[COMRAM] unsigned char 
 16845 ;; Return value:  Size  Location     Type
 16846 ;;                  4   16[COMRAM] unsigned long 
 16847 ;; Registers used:
 16848 ;;		wreg, status,2, status,0
 16849 ;; Tracked objects:
 16850 ;;		On entry : 0/0
 16851 ;;		On exit  : 0/0
 16852 ;;		Unchanged: 0/0
 16853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16854 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16855 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16857 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;Total ram usage:       12 bytes
 16859 ;; Hardware stack levels used:    1
 16860 ;; Hardware stack levels required when called:    3
 16861 ;; This function calls:
 16862 ;;		Nothing
 16863 ;; This function is called by:
 16864 ;;		_printf
 16865 ;; This function uses a non-reentrant model
 16866 ;;
 16867                           
 16868                           	psect	text71
 16869  0030F6                     __ptext71:
 16870                           	opt stack 0
 16871  0030F6                     __div_to_l_:
 16872                           	opt stack 26
 16873                           
 16874                           ;incstack = 0
 16875  0030F6  3413               	rlcf	__div_to_l_@f1+2,w,c
 16876  0030F8  3414               	rlcf	__div_to_l_@f1+3,w,c
 16877  0030FA  6E1C               	movwf	__div_to_l_@exp1,c
 16878  0030FC  501C               	movf	__div_to_l_@exp1,w,c
 16879  0030FE  A4D8               	btfss	status,2,c
 16880  003100  D002               	goto	l8892
 16881  003102  D061               	goto	l8938
 16882  003104  D07C               	goto	l1788
 16883  003106                     l8892:
 16884  003106  3416               	rlcf	__div_to_l_@f2+2,w,c
 16885  003108  3417               	rlcf	__div_to_l_@f2+3,w,c
 16886  00310A  6E1B               	movwf	__div_to_l_@cntr,c
 16887  00310C  501B               	movf	__div_to_l_@cntr,w,c
 16888  00310E  A4D8               	btfss	status,2,c
 16889  003110  D002               	goto	l8898
 16890  003112  D059               	goto	l8938
 16891  003114  D074               	goto	l1788
 16892  003116                     l8898:
 16893  003116  8E13               	bsf	__div_to_l_@f1+2,7,c
 16894  003118  0EFF               	movlw	255
 16895  00311A  1611               	andwf	__div_to_l_@f1,f,c
 16896  00311C  0EFF               	movlw	255
 16897  00311E  1612               	andwf	__div_to_l_@f1+1,f,c
 16898  003120  0EFF               	movlw	255
 16899  003122  1613               	andwf	__div_to_l_@f1+2,f,c
 16900  003124  0E00               	movlw	0
 16901  003126  1614               	andwf	__div_to_l_@f1+3,f,c
 16902  003128  8E16               	bsf	__div_to_l_@f2+2,7,c
 16903  00312A  0EFF               	movlw	255
 16904  00312C  1614               	andwf	__div_to_l_@f2,f,c
 16905  00312E  0EFF               	movlw	255
 16906  003130  1615               	andwf	__div_to_l_@f2+1,f,c
 16907  003132  0EFF               	movlw	255
 16908  003134  1616               	andwf	__div_to_l_@f2+2,f,c
 16909  003136  0E00               	movlw	0
 16910  003138  1617               	andwf	__div_to_l_@f2+3,f,c
 16911  00313A  0E00               	movlw	0
 16912  00313C  6E17               	movwf	__div_to_l_@quot,c
 16913  00313E  0E00               	movlw	0
 16914  003140  6E18               	movwf	__div_to_l_@quot+1,c
 16915  003142  0E00               	movlw	0
 16916  003144  6E19               	movwf	__div_to_l_@quot+2,c
 16917  003146  0E00               	movlw	0
 16918  003148  6E1A               	movwf	__div_to_l_@quot+3,c
 16919  00314A  0E7F               	movlw	127
 16920  00314C  5E1C               	subwf	__div_to_l_@exp1,f,c
 16921  00314E  501B               	movf	__div_to_l_@cntr,w,c
 16922  003150  0FA0               	addlw	160
 16923  003152  5E1C               	subwf	__div_to_l_@exp1,f,c
 16924  003154  0E20               	movlw	32
 16925  003156  6E1B               	movwf	__div_to_l_@cntr,c
 16926  003158  D000               	goto	l8912
 16927  00315A                     l8912:
 16928  00315A  90D8               	bcf	status,0,c
 16929  00315C  3617               	rlcf	__div_to_l_@quot,f,c
 16930  00315E  3618               	rlcf	__div_to_l_@quot+1,f,c
 16931  003160  3619               	rlcf	__div_to_l_@quot+2,f,c
 16932  003162  361A               	rlcf	__div_to_l_@quot+3,f,c
 16933  003164  5014               	movf	__div_to_l_@f2,w,c
 16934  003166  5C11               	subwf	__div_to_l_@f1,w,c
 16935  003168  5015               	movf	__div_to_l_@f2+1,w,c
 16936  00316A  5812               	subwfb	__div_to_l_@f1+1,w,c
 16937  00316C  5016               	movf	__div_to_l_@f2+2,w,c
 16938  00316E  5813               	subwfb	__div_to_l_@f1+2,w,c
 16939  003170  5017               	movf	__div_to_l_@f2+3,w,c
 16940  003172  5814               	subwfb	__div_to_l_@f1+3,w,c
 16941  003174  A0D8               	btfss	status,0,c
 16942  003176  D00A               	goto	l8920
 16943  003178  5014               	movf	__div_to_l_@f2,w,c
 16944  00317A  5E11               	subwf	__div_to_l_@f1,f,c
 16945  00317C  5015               	movf	__div_to_l_@f2+1,w,c
 16946  00317E  5A12               	subwfb	__div_to_l_@f1+1,f,c
 16947  003180  5016               	movf	__div_to_l_@f2+2,w,c
 16948  003182  5A13               	subwfb	__div_to_l_@f1+2,f,c
 16949  003184  5017               	movf	__div_to_l_@f2+3,w,c
 16950  003186  5A14               	subwfb	__div_to_l_@f1+3,f,c
 16951  003188  8017               	bsf	__div_to_l_@quot,0,c
 16952  00318A  D000               	goto	l8920
 16953  00318C                     l8920:
 16954  00318C  90D8               	bcf	status,0,c
 16955  00318E  3611               	rlcf	__div_to_l_@f1,f,c
 16956  003190  3612               	rlcf	__div_to_l_@f1+1,f,c
 16957  003192  3613               	rlcf	__div_to_l_@f1+2,f,c
 16958  003194  3614               	rlcf	__div_to_l_@f1+3,f,c
 16959  003196  2E1B               	decfsz	__div_to_l_@cntr,f,c
 16960  003198  D7E0               	goto	l8912
 16961  00319A  D000               	goto	l8924
 16962  00319C                     l8924:
 16963  00319C  AE1C               	btfss	__div_to_l_@exp1,7,c
 16964  00319E  D010               	goto	l8936
 16965  0031A0  501C               	movf	__div_to_l_@exp1,w,c
 16966  0031A2  0A80               	xorlw	128
 16967  0031A4  0F9F               	addlw	159
 16968  0031A6  B0D8               	btfsc	status,0,c
 16969  0031A8  D003               	goto	l8932
 16970  0031AA  D00D               	goto	l8938
 16971  0031AC  D028               	goto	l1788
 16972  0031AE  D000               	goto	l8932
 16973  0031B0                     l8932:
 16974  0031B0  90D8               	bcf	status,0,c
 16975  0031B2  321A               	rrcf	__div_to_l_@quot+3,f,c
 16976  0031B4  3219               	rrcf	__div_to_l_@quot+2,f,c
 16977  0031B6  3218               	rrcf	__div_to_l_@quot+1,f,c
 16978  0031B8  3217               	rrcf	__div_to_l_@quot,f,c
 16979  0031BA  3E1C               	incfsz	__div_to_l_@exp1,f,c
 16980  0031BC  D7F9               	goto	l8932
 16981  0031BE  D017               	goto	l1797
 16982  0031C0                     l8936:
 16983  0031C0  0E1F               	movlw	31
 16984  0031C2  641C               	cpfsgt	__div_to_l_@exp1,c
 16985  0031C4  D011               	goto	l8944
 16986  0031C6                     l8938:
 16987  0031C6  0E00               	movlw	0
 16988  0031C8  6E11               	movwf	?__div_to_l_,c
 16989  0031CA  0E00               	movlw	0
 16990  0031CC  6E12               	movwf	?__div_to_l_+1,c
 16991  0031CE  0E00               	movlw	0
 16992  0031D0  6E13               	movwf	?__div_to_l_+2,c
 16993  0031D2  0E00               	movlw	0
 16994  0031D4  6E14               	movwf	?__div_to_l_+3,c
 16995  0031D6  D013               	goto	l1788
 16996  0031D8  D007               	goto	l8944
 16997  0031DA                     l8942:
 16998  0031DA  90D8               	bcf	status,0,c
 16999  0031DC  3617               	rlcf	__div_to_l_@quot,f,c
 17000  0031DE  3618               	rlcf	__div_to_l_@quot+1,f,c
 17001  0031E0  3619               	rlcf	__div_to_l_@quot+2,f,c
 17002  0031E2  361A               	rlcf	__div_to_l_@quot+3,f,c
 17003  0031E4  061C               	decf	__div_to_l_@exp1,f,c
 17004  0031E6  D000               	goto	l8944
 17005  0031E8                     l8944:
 17006  0031E8  501C               	movf	__div_to_l_@exp1,w,c
 17007  0031EA  A4D8               	btfss	status,2,c
 17008  0031EC  D7F6               	goto	l8942
 17009  0031EE                     l1797:
 17010  0031EE  C017  F011         	movff	__div_to_l_@quot,?__div_to_l_
 17011  0031F2  C018  F012         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 17012  0031F6  C019  F013         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 17013  0031FA  C01A  F014         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 17014  0031FE                     l1788:
 17015  0031FE  0012               	return		;funcret
 17016  003200                     __end_of__div_to_l_:
 17017                           	opt stack 0
 17018                           tblptru	equ	0xFF8
 17019                           tblptrh	equ	0xFF7
 17020                           tblptrl	equ	0xFF6
 17021                           tablat	equ	0xFF5
 17022                           prodh	equ	0xFF4
 17023                           prodl	equ	0xFF3
 17024                           intcon	equ	0xFF2
 17025                           intcon2	equ	0xFF1
 17026                           intcon3	equ	0xFF0
 17027                           postinc0	equ	0xFEE
 17028                           wreg	equ	0xFE8
 17029                           postdec1	equ	0xFE5
 17030                           plusw1	equ	0xFE3
 17031                           fsr1l	equ	0xFE1
 17032                           indf2	equ	0xFDF
 17033                           postinc2	equ	0xFDE
 17034                           postdec2	equ	0xFDD
 17035                           plusw2	equ	0xFDB
 17036                           fsr2h	equ	0xFDA
 17037                           fsr2l	equ	0xFD9
 17038                           status	equ	0xFD8
 17039                           
 17040 ;; *************** function ___lltoft *****************
 17041 ;; Defined at:
 17042 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 17043 ;; Parameters:    Size  Location     Type
 17044 ;;  c               4   24[COMRAM] unsigned long 
 17045 ;; Auto vars:     Size  Location     Type
 17046 ;;  exp             1   32[COMRAM] unsigned char 
 17047 ;; Return value:  Size  Location     Type
 17048 ;;                  3   24[COMRAM] float 
 17049 ;; Registers used:
 17050 ;;		wreg, status,2, status,0, cstack
 17051 ;; Tracked objects:
 17052 ;;		On entry : 0/0
 17053 ;;		On exit  : 0/0
 17054 ;;		Unchanged: 0/0
 17055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17056 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17058 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17059 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17060 ;;Total ram usage:        9 bytes
 17061 ;; Hardware stack levels used:    1
 17062 ;; Hardware stack levels required when called:    4
 17063 ;; This function calls:
 17064 ;;		___ftpack
 17065 ;; This function is called by:
 17066 ;;		_printf
 17067 ;; This function uses a non-reentrant model
 17068 ;;
 17069                           
 17070                           	psect	text72
 17071  004380                     __ptext72:
 17072                           	opt stack 0
 17073  004380                     ___lltoft:
 17074                           	opt stack 25
 17075                           
 17076                           ;incstack = 0
 17077  004380  0E8E               	movlw	142
 17078  004382  6E21               	movwf	___lltoft@exp,c
 17079  004384  D007               	goto	l9064
 17080  004386                     l9062:
 17081  004386  90D8               	bcf	status,0,c
 17082  004388  321C               	rrcf	___lltoft@c+3,f,c
 17083  00438A  321B               	rrcf	___lltoft@c+2,f,c
 17084  00438C  321A               	rrcf	___lltoft@c+1,f,c
 17085  00438E  3219               	rrcf	___lltoft@c,f,c
 17086  004390  2A21               	incf	___lltoft@exp,f,c
 17087  004392  D000               	goto	l9064
 17088  004394                     l9064:
 17089  004394  0E00               	movlw	0
 17090  004396  1419               	andwf	___lltoft@c,w,c
 17091  004398  6E1D               	movwf	??___lltoft& (0+255),c
 17092  00439A  0E00               	movlw	0
 17093  00439C  141A               	andwf	___lltoft@c+1,w,c
 17094  00439E  6E1E               	movwf	(??___lltoft+1)& (0+255),c
 17095  0043A0  0E00               	movlw	0
 17096  0043A2  141B               	andwf	___lltoft@c+2,w,c
 17097  0043A4  6E1F               	movwf	(??___lltoft+2)& (0+255),c
 17098  0043A6  0EFF               	movlw	255
 17099  0043A8  141C               	andwf	___lltoft@c+3,w,c
 17100  0043AA  6E20               	movwf	(??___lltoft+3)& (0+255),c
 17101  0043AC  501D               	movf	??___lltoft,w,c
 17102  0043AE  101E               	iorwf	??___lltoft+1,w,c
 17103  0043B0  101F               	iorwf	??___lltoft+2,w,c
 17104  0043B2  1020               	iorwf	??___lltoft+3,w,c
 17105  0043B4  A4D8               	btfss	status,2,c
 17106  0043B6  D7E7               	goto	l9062
 17107  0043B8  C019  F011         	movff	___lltoft@c,___ftpack@arg
 17108  0043BC  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
 17109  0043C0  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
 17110  0043C4  C021  F014         	movff	___lltoft@exp,___ftpack@exp
 17111  0043C8  0E00               	movlw	0
 17112  0043CA  6E15               	movwf	___ftpack@sign,c
 17113  0043CC  EC2D  F01C         	call	___ftpack	;wreg free
 17114  0043D0  C011  F019         	movff	?___ftpack,?___lltoft
 17115  0043D4  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
 17116  0043D8  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
 17117  0043DC  D000               	goto	l2028
 17118  0043DE                     l2028:
 17119  0043DE  0012               	return		;funcret
 17120  0043E0                     __end_of___lltoft:
 17121                           	opt stack 0
 17122                           tblptru	equ	0xFF8
 17123                           tblptrh	equ	0xFF7
 17124                           tblptrl	equ	0xFF6
 17125                           tablat	equ	0xFF5
 17126                           prodh	equ	0xFF4
 17127                           prodl	equ	0xFF3
 17128                           intcon	equ	0xFF2
 17129                           intcon2	equ	0xFF1
 17130                           intcon3	equ	0xFF0
 17131                           postinc0	equ	0xFEE
 17132                           wreg	equ	0xFE8
 17133                           postdec1	equ	0xFE5
 17134                           plusw1	equ	0xFE3
 17135                           fsr1l	equ	0xFE1
 17136                           indf2	equ	0xFDF
 17137                           postinc2	equ	0xFDE
 17138                           postdec2	equ	0xFDD
 17139                           plusw2	equ	0xFDB
 17140                           fsr2h	equ	0xFDA
 17141                           fsr2l	equ	0xFD9
 17142                           status	equ	0xFD8
 17143                           
 17144 ;; *************** function ___llmod *****************
 17145 ;; Defined at:
 17146 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 17147 ;; Parameters:    Size  Location     Type
 17148 ;;  dividend        4   29[COMRAM] unsigned long 
 17149 ;;  divisor         4   33[COMRAM] unsigned long 
 17150 ;; Auto vars:     Size  Location     Type
 17151 ;;  counter         1   37[COMRAM] unsigned char 
 17152 ;; Return value:  Size  Location     Type
 17153 ;;                  4   29[COMRAM] unsigned long 
 17154 ;; Registers used:
 17155 ;;		wreg, status,2, status,0
 17156 ;; Tracked objects:
 17157 ;;		On entry : 0/0
 17158 ;;		On exit  : 0/0
 17159 ;;		Unchanged: 0/0
 17160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17161 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17164 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17165 ;;Total ram usage:        9 bytes
 17166 ;; Hardware stack levels used:    1
 17167 ;; Hardware stack levels required when called:    3
 17168 ;; This function calls:
 17169 ;;		Nothing
 17170 ;; This function is called by:
 17171 ;;		_printf
 17172 ;; This function uses a non-reentrant model
 17173 ;;
 17174                           
 17175                           	psect	text73
 17176  00416A                     __ptext73:
 17177                           	opt stack 0
 17178  00416A                     ___llmod:
 17179                           	opt stack 26
 17180                           
 17181                           ;incstack = 0
 17182  00416A  5022               	movf	___llmod@divisor,w,c
 17183  00416C  1023               	iorwf	___llmod@divisor+1,w,c
 17184  00416E  1024               	iorwf	___llmod@divisor+2,w,c
 17185  004170  1025               	iorwf	___llmod@divisor+3,w,c
 17186  004172  B4D8               	btfsc	status,2,c
 17187  004174  D029               	goto	l2008
 17188  004176  0E01               	movlw	1
 17189  004178  6E26               	movwf	___llmod@counter,c
 17190  00417A  D007               	goto	l9050
 17191  00417C                     l9048:
 17192  00417C  90D8               	bcf	status,0,c
 17193  00417E  3622               	rlcf	___llmod@divisor,f,c
 17194  004180  3623               	rlcf	___llmod@divisor+1,f,c
 17195  004182  3624               	rlcf	___llmod@divisor+2,f,c
 17196  004184  3625               	rlcf	___llmod@divisor+3,f,c
 17197  004186  2A26               	incf	___llmod@counter,f,c
 17198  004188  D000               	goto	l9050
 17199  00418A                     l9050:
 17200  00418A  BE25               	btfsc	___llmod@divisor+3,7,c
 17201  00418C  D002               	goto	l9052
 17202  00418E  D7F6               	goto	l9048
 17203  004190  D000               	goto	l9052
 17204  004192                     l9052:
 17205  004192  5022               	movf	___llmod@divisor,w,c
 17206  004194  5C1E               	subwf	___llmod@dividend,w,c
 17207  004196  5023               	movf	___llmod@divisor+1,w,c
 17208  004198  581F               	subwfb	___llmod@dividend+1,w,c
 17209  00419A  5024               	movf	___llmod@divisor+2,w,c
 17210  00419C  5820               	subwfb	___llmod@dividend+2,w,c
 17211  00419E  5025               	movf	___llmod@divisor+3,w,c
 17212  0041A0  5821               	subwfb	___llmod@dividend+3,w,c
 17213  0041A2  A0D8               	btfss	status,0,c
 17214  0041A4  D009               	goto	l9056
 17215  0041A6  5022               	movf	___llmod@divisor,w,c
 17216  0041A8  5E1E               	subwf	___llmod@dividend,f,c
 17217  0041AA  5023               	movf	___llmod@divisor+1,w,c
 17218  0041AC  5A1F               	subwfb	___llmod@dividend+1,f,c
 17219  0041AE  5024               	movf	___llmod@divisor+2,w,c
 17220  0041B0  5A20               	subwfb	___llmod@dividend+2,f,c
 17221  0041B2  5025               	movf	___llmod@divisor+3,w,c
 17222  0041B4  5A21               	subwfb	___llmod@dividend+3,f,c
 17223  0041B6  D000               	goto	l9056
 17224  0041B8                     l9056:
 17225  0041B8  90D8               	bcf	status,0,c
 17226  0041BA  3225               	rrcf	___llmod@divisor+3,f,c
 17227  0041BC  3224               	rrcf	___llmod@divisor+2,f,c
 17228  0041BE  3223               	rrcf	___llmod@divisor+1,f,c
 17229  0041C0  3222               	rrcf	___llmod@divisor,f,c
 17230  0041C2  2E26               	decfsz	___llmod@counter,f,c
 17231  0041C4  D7E6               	goto	l9052
 17232  0041C6  D000               	goto	l2008
 17233  0041C8                     l2008:
 17234  0041C8  C01E  F01E         	movff	___llmod@dividend,?___llmod
 17235  0041CC  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
 17236  0041D0  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
 17237  0041D4  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
 17238  0041D8  0012               	return		;funcret
 17239  0041DA                     __end_of___llmod:
 17240                           	opt stack 0
 17241                           tblptru	equ	0xFF8
 17242                           tblptrh	equ	0xFF7
 17243                           tblptrl	equ	0xFF6
 17244                           tablat	equ	0xFF5
 17245                           prodh	equ	0xFF4
 17246                           prodl	equ	0xFF3
 17247                           intcon	equ	0xFF2
 17248                           intcon2	equ	0xFF1
 17249                           intcon3	equ	0xFF0
 17250                           postinc0	equ	0xFEE
 17251                           wreg	equ	0xFE8
 17252                           postdec1	equ	0xFE5
 17253                           plusw1	equ	0xFE3
 17254                           fsr1l	equ	0xFE1
 17255                           indf2	equ	0xFDF
 17256                           postinc2	equ	0xFDE
 17257                           postdec2	equ	0xFDD
 17258                           plusw2	equ	0xFDB
 17259                           fsr2h	equ	0xFDA
 17260                           fsr2l	equ	0xFD9
 17261                           status	equ	0xFD8
 17262                           
 17263 ;; *************** function ___lldiv *****************
 17264 ;; Defined at:
 17265 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 17266 ;; Parameters:    Size  Location     Type
 17267 ;;  dividend        4   16[COMRAM] unsigned long 
 17268 ;;  divisor         4   20[COMRAM] unsigned long 
 17269 ;; Auto vars:     Size  Location     Type
 17270 ;;  quotient        4   24[COMRAM] unsigned long 
 17271 ;;  counter         1   28[COMRAM] unsigned char 
 17272 ;; Return value:  Size  Location     Type
 17273 ;;                  4   16[COMRAM] unsigned long 
 17274 ;; Registers used:
 17275 ;;		wreg, status,2, status,0
 17276 ;; Tracked objects:
 17277 ;;		On entry : 0/0
 17278 ;;		On exit  : 0/0
 17279 ;;		Unchanged: 0/0
 17280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17281 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17284 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17285 ;;Total ram usage:       13 bytes
 17286 ;; Hardware stack levels used:    1
 17287 ;; Hardware stack levels required when called:    3
 17288 ;; This function calls:
 17289 ;;		Nothing
 17290 ;; This function is called by:
 17291 ;;		_printf
 17292 ;; This function uses a non-reentrant model
 17293 ;;
 17294                           
 17295                           	psect	text74
 17296  003ED2                     __ptext74:
 17297                           	opt stack 0
 17298  003ED2                     ___lldiv:
 17299                           	opt stack 26
 17300                           
 17301                           ;incstack = 0
 17302  003ED2  0E00               	movlw	0
 17303  003ED4  6E19               	movwf	___lldiv@quotient,c
 17304  003ED6  0E00               	movlw	0
 17305  003ED8  6E1A               	movwf	___lldiv@quotient+1,c
 17306  003EDA  0E00               	movlw	0
 17307  003EDC  6E1B               	movwf	___lldiv@quotient+2,c
 17308  003EDE  0E00               	movlw	0
 17309  003EE0  6E1C               	movwf	___lldiv@quotient+3,c
 17310  003EE2  5015               	movf	___lldiv@divisor,w,c
 17311  003EE4  1016               	iorwf	___lldiv@divisor+1,w,c
 17312  003EE6  1017               	iorwf	___lldiv@divisor+2,w,c
 17313  003EE8  1018               	iorwf	___lldiv@divisor+3,w,c
 17314  003EEA  B4D8               	btfsc	status,2,c
 17315  003EEC  D02F               	goto	l1998
 17316  003EEE  0E01               	movlw	1
 17317  003EF0  6E1D               	movwf	___lldiv@counter,c
 17318  003EF2  D007               	goto	l9030
 17319  003EF4                     l9028:
 17320  003EF4  90D8               	bcf	status,0,c
 17321  003EF6  3615               	rlcf	___lldiv@divisor,f,c
 17322  003EF8  3616               	rlcf	___lldiv@divisor+1,f,c
 17323  003EFA  3617               	rlcf	___lldiv@divisor+2,f,c
 17324  003EFC  3618               	rlcf	___lldiv@divisor+3,f,c
 17325  003EFE  2A1D               	incf	___lldiv@counter,f,c
 17326  003F00  D000               	goto	l9030
 17327  003F02                     l9030:
 17328  003F02  BE18               	btfsc	___lldiv@divisor+3,7,c
 17329  003F04  D002               	goto	l9032
 17330  003F06  D7F6               	goto	l9028
 17331  003F08  D000               	goto	l9032
 17332  003F0A                     l9032:
 17333  003F0A  90D8               	bcf	status,0,c
 17334  003F0C  3619               	rlcf	___lldiv@quotient,f,c
 17335  003F0E  361A               	rlcf	___lldiv@quotient+1,f,c
 17336  003F10  361B               	rlcf	___lldiv@quotient+2,f,c
 17337  003F12  361C               	rlcf	___lldiv@quotient+3,f,c
 17338  003F14  5015               	movf	___lldiv@divisor,w,c
 17339  003F16  5C11               	subwf	___lldiv@dividend,w,c
 17340  003F18  5016               	movf	___lldiv@divisor+1,w,c
 17341  003F1A  5812               	subwfb	___lldiv@dividend+1,w,c
 17342  003F1C  5017               	movf	___lldiv@divisor+2,w,c
 17343  003F1E  5813               	subwfb	___lldiv@dividend+2,w,c
 17344  003F20  5018               	movf	___lldiv@divisor+3,w,c
 17345  003F22  5814               	subwfb	___lldiv@dividend+3,w,c
 17346  003F24  A0D8               	btfss	status,0,c
 17347  003F26  D00A               	goto	l9040
 17348  003F28  5015               	movf	___lldiv@divisor,w,c
 17349  003F2A  5E11               	subwf	___lldiv@dividend,f,c
 17350  003F2C  5016               	movf	___lldiv@divisor+1,w,c
 17351  003F2E  5A12               	subwfb	___lldiv@dividend+1,f,c
 17352  003F30  5017               	movf	___lldiv@divisor+2,w,c
 17353  003F32  5A13               	subwfb	___lldiv@dividend+2,f,c
 17354  003F34  5018               	movf	___lldiv@divisor+3,w,c
 17355  003F36  5A14               	subwfb	___lldiv@dividend+3,f,c
 17356  003F38  8019               	bsf	___lldiv@quotient,0,c
 17357  003F3A  D000               	goto	l9040
 17358  003F3C                     l9040:
 17359  003F3C  90D8               	bcf	status,0,c
 17360  003F3E  3218               	rrcf	___lldiv@divisor+3,f,c
 17361  003F40  3217               	rrcf	___lldiv@divisor+2,f,c
 17362  003F42  3216               	rrcf	___lldiv@divisor+1,f,c
 17363  003F44  3215               	rrcf	___lldiv@divisor,f,c
 17364  003F46  2E1D               	decfsz	___lldiv@counter,f,c
 17365  003F48  D7E0               	goto	l9032
 17366  003F4A  D000               	goto	l1998
 17367  003F4C                     l1998:
 17368  003F4C  C019  F011         	movff	___lldiv@quotient,?___lldiv
 17369  003F50  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 17370  003F54  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 17371  003F58  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 17372  003F5C  0012               	return		;funcret
 17373  003F5E                     __end_of___lldiv:
 17374                           	opt stack 0
 17375                           tblptru	equ	0xFF8
 17376                           tblptrh	equ	0xFF7
 17377                           tblptrl	equ	0xFF6
 17378                           tablat	equ	0xFF5
 17379                           prodh	equ	0xFF4
 17380                           prodl	equ	0xFF3
 17381                           intcon	equ	0xFF2
 17382                           intcon2	equ	0xFF1
 17383                           intcon3	equ	0xFF0
 17384                           postinc0	equ	0xFEE
 17385                           wreg	equ	0xFE8
 17386                           postdec1	equ	0xFE5
 17387                           plusw1	equ	0xFE3
 17388                           fsr1l	equ	0xFE1
 17389                           indf2	equ	0xFDF
 17390                           postinc2	equ	0xFDE
 17391                           postdec2	equ	0xFDD
 17392                           plusw2	equ	0xFDB
 17393                           fsr2h	equ	0xFDA
 17394                           fsr2l	equ	0xFD9
 17395                           status	equ	0xFD8
 17396                           
 17397 ;; *************** function ___ftsub *****************
 17398 ;; Defined at:
 17399 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 17400 ;; Parameters:    Size  Location     Type
 17401 ;;  f1              3    0[BANK0 ] float 
 17402 ;;  f2              3    3[BANK0 ] float 
 17403 ;; Auto vars:     Size  Location     Type
 17404 ;;		None
 17405 ;; Return value:  Size  Location     Type
 17406 ;;                  3    0[BANK0 ] float 
 17407 ;; Registers used:
 17408 ;;		wreg, status,2, status,0, cstack
 17409 ;; Tracked objects:
 17410 ;;		On entry : 0/0
 17411 ;;		On exit  : 0/0
 17412 ;;		Unchanged: 0/0
 17413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17414 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17417 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17418 ;;Total ram usage:        6 bytes
 17419 ;; Hardware stack levels used:    1
 17420 ;; Hardware stack levels required when called:    5
 17421 ;; This function calls:
 17422 ;;		___ftadd
 17423 ;; This function is called by:
 17424 ;;		_printf
 17425 ;; This function uses a non-reentrant model
 17426 ;;
 17427                           
 17428                           	psect	text75
 17429  00458C                     __ptext75:
 17430                           	opt stack 0
 17431  00458C                     ___ftsub:
 17432                           	opt stack 24
 17433                           
 17434                           ;incstack = 0
 17435  00458C  0100               	movlb	0	; () banked
 17436  00458E  5183               	movf	___ftsub@f2& (0+255),w,b
 17437  004590  0100               	movlb	0	; () banked
 17438  004592  1184               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17439  004594  0100               	movlb	0	; () banked
 17440  004596  1185               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17441  004598  B4D8               	btfsc	status,2,c
 17442  00459A  D00A               	goto	l8950
 17443                           
 17444                           ; BSR set to: 0
 17445  00459C  0E00               	movlw	0
 17446  00459E  0100               	movlb	0	; () banked
 17447  0045A0  1B83               	xorwf	___ftsub@f2& (0+255),f,b
 17448  0045A2  0E00               	movlw	0
 17449  0045A4  0100               	movlb	0	; () banked
 17450  0045A6  1B84               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17451  0045A8  0E80               	movlw	128
 17452  0045AA  0100               	movlb	0	; () banked
 17453  0045AC  1B85               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17454  0045AE  D000               	goto	l8950
 17455  0045B0                     l8950:
 17456                           
 17457                           ; BSR set to: 0
 17458  0045B0  C080  F04D         	movff	___ftsub@f1,___ftadd@f1
 17459  0045B4  C081  F04E         	movff	___ftsub@f1+1,___ftadd@f1+1
 17460  0045B8  C082  F04F         	movff	___ftsub@f1+2,___ftadd@f1+2
 17461  0045BC  C083  F050         	movff	___ftsub@f2,___ftadd@f2
 17462  0045C0  C084  F051         	movff	___ftsub@f2+1,___ftadd@f2+1
 17463  0045C4  C085  F052         	movff	___ftsub@f2+2,___ftadd@f2+2
 17464  0045C8  EC01  F012         	call	___ftadd	;wreg free
 17465  0045CC  C04D  F080         	movff	?___ftadd,?___ftsub
 17466  0045D0  C04E  F081         	movff	?___ftadd+1,?___ftsub+1
 17467  0045D4  C04F  F082         	movff	?___ftadd+2,?___ftsub+2
 17468  0045D8  D000               	goto	l1950
 17469  0045DA                     l1950:
 17470  0045DA  0012               	return		;funcret
 17471  0045DC                     __end_of___ftsub:
 17472                           	opt stack 0
 17473                           tblptru	equ	0xFF8
 17474                           tblptrh	equ	0xFF7
 17475                           tblptrl	equ	0xFF6
 17476                           tablat	equ	0xFF5
 17477                           prodh	equ	0xFF4
 17478                           prodl	equ	0xFF3
 17479                           intcon	equ	0xFF2
 17480                           intcon2	equ	0xFF1
 17481                           intcon3	equ	0xFF0
 17482                           postinc0	equ	0xFEE
 17483                           wreg	equ	0xFE8
 17484                           postdec1	equ	0xFE5
 17485                           plusw1	equ	0xFE3
 17486                           fsr1l	equ	0xFE1
 17487                           indf2	equ	0xFDF
 17488                           postinc2	equ	0xFDE
 17489                           postdec2	equ	0xFDD
 17490                           plusw2	equ	0xFDB
 17491                           fsr2h	equ	0xFDA
 17492                           fsr2l	equ	0xFD9
 17493                           status	equ	0xFD8
 17494                           
 17495 ;; *************** function ___ftadd *****************
 17496 ;; Defined at:
 17497 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 17498 ;; Parameters:    Size  Location     Type
 17499 ;;  f1              3   76[COMRAM] float 
 17500 ;;  f2              3   79[COMRAM] float 
 17501 ;; Auto vars:     Size  Location     Type
 17502 ;;  exp1            1   87[COMRAM] unsigned char 
 17503 ;;  exp2            1   86[COMRAM] unsigned char 
 17504 ;;  sign            1   85[COMRAM] unsigned char 
 17505 ;; Return value:  Size  Location     Type
 17506 ;;                  3   76[COMRAM] float 
 17507 ;; Registers used:
 17508 ;;		wreg, status,2, status,0, cstack
 17509 ;; Tracked objects:
 17510 ;;		On entry : 0/0
 17511 ;;		On exit  : 0/0
 17512 ;;		Unchanged: 0/0
 17513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17514 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17515 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17516 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17517 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17518 ;;Total ram usage:       12 bytes
 17519 ;; Hardware stack levels used:    1
 17520 ;; Hardware stack levels required when called:    4
 17521 ;; This function calls:
 17522 ;;		___ftpack
 17523 ;; This function is called by:
 17524 ;;		_printf
 17525 ;;		___ftsub
 17526 ;; This function uses a non-reentrant model
 17527 ;;
 17528                           
 17529                           	psect	text76
 17530  002402                     __ptext76:
 17531                           	opt stack 0
 17532  002402                     ___ftadd:
 17533                           	opt stack 24
 17534                           
 17535                           ;incstack = 0
 17536  002402  C04F  F053         	movff	___ftadd@f1+2,??___ftadd
 17537  002406  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17538  002408  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17539  00240A  344E               	rlcf	___ftadd@f1+1,w,c
 17540  00240C  3653               	rlcf	??___ftadd& (0+255),f,c
 17541  00240E  E301               	bnc	u6741
 17542  002410  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17543  002412                     u6741:
 17544  002412  5053               	movf	??___ftadd,w,c
 17545  002414  6E58               	movwf	___ftadd@exp1,c
 17546  002416  C052  F053         	movff	___ftadd@f2+2,??___ftadd
 17547  00241A  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17548  00241C  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17549  00241E  3451               	rlcf	___ftadd@f2+1,w,c
 17550  002420  3653               	rlcf	??___ftadd& (0+255),f,c
 17551  002422  E301               	bnc	u6751
 17552  002424  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17553  002426                     u6751:
 17554  002426  5053               	movf	??___ftadd,w,c
 17555  002428  6E57               	movwf	___ftadd@exp2,c
 17556  00242A  5058               	movf	___ftadd@exp1,w,c
 17557  00242C  B4D8               	btfsc	status,2,c
 17558  00242E  D00B               	goto	l1869
 17559  002430  5057               	movf	___ftadd@exp2,w,c
 17560  002432  5C58               	subwf	___ftadd@exp1,w,c
 17561  002434  B0D8               	btfsc	status,0,c
 17562  002436  D00E               	goto	l8420
 17563  002438  5058               	movf	___ftadd@exp1,w,c
 17564  00243A  0800               	sublw	0
 17565  00243C  2457               	addwf	___ftadd@exp2,w,c
 17566  00243E  6E53               	movwf	??___ftadd& (0+255),c
 17567  002440  0E18               	movlw	24
 17568  002442  6453               	cpfsgt	??___ftadd,c
 17569  002444  D007               	goto	l8420
 17570  002446                     l1869:
 17571  002446  C050  F04D         	movff	___ftadd@f2,?___ftadd
 17572  00244A  C051  F04E         	movff	___ftadd@f2+1,?___ftadd+1
 17573  00244E  C052  F04F         	movff	___ftadd@f2+2,?___ftadd+2
 17574  002452  D0B8               	goto	l1870
 17575  002454                     l8420:
 17576  002454  5057               	movf	___ftadd@exp2,w,c
 17577  002456  B4D8               	btfsc	status,2,c
 17578  002458  D00B               	goto	l1873
 17579  00245A  5058               	movf	___ftadd@exp1,w,c
 17580  00245C  5C57               	subwf	___ftadd@exp2,w,c
 17581  00245E  B0D8               	btfsc	status,0,c
 17582  002460  D00E               	goto	l8426
 17583  002462  5057               	movf	___ftadd@exp2,w,c
 17584  002464  0800               	sublw	0
 17585  002466  2458               	addwf	___ftadd@exp1,w,c
 17586  002468  6E53               	movwf	??___ftadd& (0+255),c
 17587  00246A  0E18               	movlw	24
 17588  00246C  6453               	cpfsgt	??___ftadd,c
 17589  00246E  D007               	goto	l8426
 17590  002470                     l1873:
 17591  002470  C04D  F04D         	movff	___ftadd@f1,?___ftadd
 17592  002474  C04E  F04E         	movff	___ftadd@f1+1,?___ftadd+1
 17593  002478  C04F  F04F         	movff	___ftadd@f1+2,?___ftadd+2
 17594  00247C  D0A3               	goto	l1870
 17595  00247E                     l8426:
 17596  00247E  0E06               	movlw	6
 17597  002480  6E56               	movwf	___ftadd@sign,c
 17598  002482  AE4F               	btfss	___ftadd@f1+2,7,c
 17599  002484  D002               	goto	l8432
 17600  002486  8E56               	bsf	___ftadd@sign,7,c
 17601  002488  D000               	goto	l8432
 17602  00248A                     l8432:
 17603  00248A  BE52               	btfsc	___ftadd@f2+2,7,c
 17604  00248C  8C56               	bsf	___ftadd@sign,6,c
 17605  00248E  8E4E               	bsf	___ftadd@f1+1,7,c
 17606  002490  0EFF               	movlw	255
 17607  002492  164D               	andwf	___ftadd@f1,f,c
 17608  002494  0EFF               	movlw	255
 17609  002496  164E               	andwf	___ftadd@f1+1,f,c
 17610  002498  0E00               	movlw	0
 17611  00249A  164F               	andwf	___ftadd@f1+2,f,c
 17612  00249C  8E51               	bsf	___ftadd@f2+1,7,c
 17613  00249E  0EFF               	movlw	255
 17614  0024A0  1650               	andwf	___ftadd@f2,f,c
 17615  0024A2  0EFF               	movlw	255
 17616  0024A4  1651               	andwf	___ftadd@f2+1,f,c
 17617  0024A6  0E00               	movlw	0
 17618  0024A8  1652               	andwf	___ftadd@f2+2,f,c
 17619  0024AA  5057               	movf	___ftadd@exp2,w,c
 17620  0024AC  5C58               	subwf	___ftadd@exp1,w,c
 17621  0024AE  B0D8               	btfsc	status,0,c
 17622  0024B0  D01E               	goto	l8452
 17623  0024B2                     l8442:
 17624  0024B2  90D8               	bcf	status,0,c
 17625  0024B4  3650               	rlcf	___ftadd@f2,f,c
 17626  0024B6  3651               	rlcf	___ftadd@f2+1,f,c
 17627  0024B8  3652               	rlcf	___ftadd@f2+2,f,c
 17628  0024BA  0657               	decf	___ftadd@exp2,f,c
 17629  0024BC  5058               	movf	___ftadd@exp1,w,c
 17630  0024BE  1857               	xorwf	___ftadd@exp2,w,c
 17631  0024C0  B4D8               	btfsc	status,2,c
 17632  0024C2  D00F               	goto	l8450
 17633  0024C4  0656               	decf	___ftadd@sign,f,c
 17634  0024C6  C056  F053         	movff	___ftadd@sign,??___ftadd
 17635  0024CA  0E07               	movlw	7
 17636  0024CC  1653               	andwf	??___ftadd,f,c
 17637  0024CE  B4D8               	btfsc	status,2,c
 17638  0024D0  D008               	goto	l8450
 17639  0024D2  D7EF               	goto	l8442
 17640  0024D4  D006               	goto	l8450
 17641  0024D6                     l8448:
 17642  0024D6  90D8               	bcf	status,0,c
 17643  0024D8  324F               	rrcf	___ftadd@f1+2,f,c
 17644  0024DA  324E               	rrcf	___ftadd@f1+1,f,c
 17645  0024DC  324D               	rrcf	___ftadd@f1,f,c
 17646  0024DE  2A58               	incf	___ftadd@exp1,f,c
 17647  0024E0  D000               	goto	l8450
 17648  0024E2                     l8450:
 17649  0024E2  5057               	movf	___ftadd@exp2,w,c
 17650  0024E4  1858               	xorwf	___ftadd@exp1,w,c
 17651  0024E6  B4D8               	btfsc	status,2,c
 17652  0024E8  D024               	goto	l1884
 17653  0024EA  D7F5               	goto	l8448
 17654  0024EC  D022               	goto	l1884
 17655  0024EE                     l8452:
 17656  0024EE  5058               	movf	___ftadd@exp1,w,c
 17657  0024F0  5C57               	subwf	___ftadd@exp2,w,c
 17658  0024F2  B0D8               	btfsc	status,0,c
 17659  0024F4  D01E               	goto	l1884
 17660  0024F6                     l8454:
 17661  0024F6  90D8               	bcf	status,0,c
 17662  0024F8  364D               	rlcf	___ftadd@f1,f,c
 17663  0024FA  364E               	rlcf	___ftadd@f1+1,f,c
 17664  0024FC  364F               	rlcf	___ftadd@f1+2,f,c
 17665  0024FE  0658               	decf	___ftadd@exp1,f,c
 17666  002500  5058               	movf	___ftadd@exp1,w,c
 17667  002502  1857               	xorwf	___ftadd@exp2,w,c
 17668  002504  B4D8               	btfsc	status,2,c
 17669  002506  D00F               	goto	l8462
 17670  002508  0656               	decf	___ftadd@sign,f,c
 17671  00250A  C056  F053         	movff	___ftadd@sign,??___ftadd
 17672  00250E  0E07               	movlw	7
 17673  002510  1653               	andwf	??___ftadd,f,c
 17674  002512  B4D8               	btfsc	status,2,c
 17675  002514  D008               	goto	l8462
 17676  002516  D7EF               	goto	l8454
 17677  002518  D006               	goto	l8462
 17678  00251A                     l8460:
 17679  00251A  90D8               	bcf	status,0,c
 17680  00251C  3252               	rrcf	___ftadd@f2+2,f,c
 17681  00251E  3251               	rrcf	___ftadd@f2+1,f,c
 17682  002520  3250               	rrcf	___ftadd@f2,f,c
 17683  002522  2A57               	incf	___ftadd@exp2,f,c
 17684  002524  D000               	goto	l8462
 17685  002526                     l8462:
 17686  002526  5057               	movf	___ftadd@exp2,w,c
 17687  002528  1858               	xorwf	___ftadd@exp1,w,c
 17688  00252A  B4D8               	btfsc	status,2,c
 17689  00252C  D002               	goto	l1884
 17690  00252E  D7F5               	goto	l8460
 17691  002530  D000               	goto	l1884
 17692  002532                     l1884:
 17693  002532  AE56               	btfss	___ftadd@sign,7,c
 17694  002534  D00C               	goto	l1893
 17695  002536  0EFF               	movlw	255
 17696  002538  1A4D               	xorwf	___ftadd@f1,f,c
 17697  00253A  0EFF               	movlw	255
 17698  00253C  1A4E               	xorwf	___ftadd@f1+1,f,c
 17699  00253E  0EFF               	movlw	255
 17700  002540  1A4F               	xorwf	___ftadd@f1+2,f,c
 17701  002542  0E01               	movlw	1
 17702  002544  264D               	addwf	___ftadd@f1,f,c
 17703  002546  0E00               	movlw	0
 17704  002548  224E               	addwfc	___ftadd@f1+1,f,c
 17705  00254A  0E00               	movlw	0
 17706  00254C  224F               	addwfc	___ftadd@f1+2,f,c
 17707  00254E                     l1893:
 17708  00254E  AC56               	btfss	___ftadd@sign,6,c
 17709  002550  D00D               	goto	l8468
 17710  002552  0EFF               	movlw	255
 17711  002554  1A50               	xorwf	___ftadd@f2,f,c
 17712  002556  0EFF               	movlw	255
 17713  002558  1A51               	xorwf	___ftadd@f2+1,f,c
 17714  00255A  0EFF               	movlw	255
 17715  00255C  1A52               	xorwf	___ftadd@f2+2,f,c
 17716  00255E  0E01               	movlw	1
 17717  002560  2650               	addwf	___ftadd@f2,f,c
 17718  002562  0E00               	movlw	0
 17719  002564  2251               	addwfc	___ftadd@f2+1,f,c
 17720  002566  0E00               	movlw	0
 17721  002568  2252               	addwfc	___ftadd@f2+2,f,c
 17722  00256A  D000               	goto	l8468
 17723  00256C                     l8468:
 17724  00256C  0E00               	movlw	0
 17725  00256E  6E56               	movwf	___ftadd@sign,c
 17726  002570  504D               	movf	___ftadd@f1,w,c
 17727  002572  2650               	addwf	___ftadd@f2,f,c
 17728  002574  504E               	movf	___ftadd@f1+1,w,c
 17729  002576  2251               	addwfc	___ftadd@f2+1,f,c
 17730  002578  504F               	movf	___ftadd@f1+2,w,c
 17731  00257A  2252               	addwfc	___ftadd@f2+2,f,c
 17732  00257C  AE52               	btfss	___ftadd@f2+2,7,c
 17733  00257E  D00F               	goto	l8478
 17734  002580  0EFF               	movlw	255
 17735  002582  1A50               	xorwf	___ftadd@f2,f,c
 17736  002584  0EFF               	movlw	255
 17737  002586  1A51               	xorwf	___ftadd@f2+1,f,c
 17738  002588  0EFF               	movlw	255
 17739  00258A  1A52               	xorwf	___ftadd@f2+2,f,c
 17740  00258C  0E01               	movlw	1
 17741  00258E  2650               	addwf	___ftadd@f2,f,c
 17742  002590  0E00               	movlw	0
 17743  002592  2251               	addwfc	___ftadd@f2+1,f,c
 17744  002594  0E00               	movlw	0
 17745  002596  2252               	addwfc	___ftadd@f2+2,f,c
 17746  002598  0E01               	movlw	1
 17747  00259A  6E56               	movwf	___ftadd@sign,c
 17748  00259C  D000               	goto	l8478
 17749  00259E                     l8478:
 17750  00259E  C050  F011         	movff	___ftadd@f2,___ftpack@arg
 17751  0025A2  C051  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 17752  0025A6  C052  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 17753  0025AA  C058  F014         	movff	___ftadd@exp1,___ftpack@exp
 17754  0025AE  C056  F015         	movff	___ftadd@sign,___ftpack@sign
 17755  0025B2  EC2D  F01C         	call	___ftpack	;wreg free
 17756  0025B6  C011  F04D         	movff	?___ftpack,?___ftadd
 17757  0025BA  C012  F04E         	movff	?___ftpack+1,?___ftadd+1
 17758  0025BE  C013  F04F         	movff	?___ftpack+2,?___ftadd+2
 17759  0025C2  D000               	goto	l1870
 17760  0025C4                     l1870:
 17761  0025C4  0012               	return		;funcret
 17762  0025C6                     __end_of___ftadd:
 17763                           	opt stack 0
 17764                           tblptru	equ	0xFF8
 17765                           tblptrh	equ	0xFF7
 17766                           tblptrl	equ	0xFF6
 17767                           tablat	equ	0xFF5
 17768                           prodh	equ	0xFF4
 17769                           prodl	equ	0xFF3
 17770                           intcon	equ	0xFF2
 17771                           intcon2	equ	0xFF1
 17772                           intcon3	equ	0xFF0
 17773                           postinc0	equ	0xFEE
 17774                           wreg	equ	0xFE8
 17775                           postdec1	equ	0xFE5
 17776                           plusw1	equ	0xFE3
 17777                           fsr1l	equ	0xFE1
 17778                           indf2	equ	0xFDF
 17779                           postinc2	equ	0xFDE
 17780                           postdec2	equ	0xFDD
 17781                           plusw2	equ	0xFDB
 17782                           fsr2h	equ	0xFDA
 17783                           fsr2l	equ	0xFD9
 17784                           status	equ	0xFD8
 17785                           
 17786 ;; *************** function ___ftneg *****************
 17787 ;; Defined at:
 17788 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 17789 ;; Parameters:    Size  Location     Type
 17790 ;;  f1              3   16[COMRAM] float 
 17791 ;; Auto vars:     Size  Location     Type
 17792 ;;		None
 17793 ;; Return value:  Size  Location     Type
 17794 ;;                  3   16[COMRAM] float 
 17795 ;; Registers used:
 17796 ;;		wreg, status,2, status,0
 17797 ;; Tracked objects:
 17798 ;;		On entry : 0/0
 17799 ;;		On exit  : 0/0
 17800 ;;		Unchanged: 0/0
 17801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17802 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17805 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17806 ;;Total ram usage:        3 bytes
 17807 ;; Hardware stack levels used:    1
 17808 ;; Hardware stack levels required when called:    3
 17809 ;; This function calls:
 17810 ;;		Nothing
 17811 ;; This function is called by:
 17812 ;;		_printf
 17813 ;; This function uses a non-reentrant model
 17814 ;;
 17815                           
 17816                           	psect	text77
 17817  004A6C                     __ptext77:
 17818                           	opt stack 0
 17819  004A6C                     ___ftneg:
 17820                           	opt stack 26
 17821                           
 17822                           ;incstack = 0
 17823  004A6C  5011               	movf	___ftneg@f1,w,c
 17824  004A6E  1012               	iorwf	___ftneg@f1+1,w,c
 17825  004A70  1013               	iorwf	___ftneg@f1+2,w,c
 17826  004A72  B4D8               	btfsc	status,2,c
 17827  004A74  D006               	goto	l1943
 17828  004A76  0E00               	movlw	0
 17829  004A78  1A11               	xorwf	___ftneg@f1,f,c
 17830  004A7A  0E00               	movlw	0
 17831  004A7C  1A12               	xorwf	___ftneg@f1+1,f,c
 17832  004A7E  0E80               	movlw	128
 17833  004A80  1A13               	xorwf	___ftneg@f1+2,f,c
 17834  004A82                     l1943:
 17835  004A82  C011  F011         	movff	___ftneg@f1,?___ftneg
 17836  004A86  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
 17837  004A8A  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
 17838  004A8E  0012               	return		;funcret
 17839  004A90                     __end_of___ftneg:
 17840                           	opt stack 0
 17841                           tblptru	equ	0xFF8
 17842                           tblptrh	equ	0xFF7
 17843                           tblptrl	equ	0xFF6
 17844                           tablat	equ	0xFF5
 17845                           prodh	equ	0xFF4
 17846                           prodl	equ	0xFF3
 17847                           intcon	equ	0xFF2
 17848                           intcon2	equ	0xFF1
 17849                           intcon3	equ	0xFF0
 17850                           postinc0	equ	0xFEE
 17851                           wreg	equ	0xFE8
 17852                           postdec1	equ	0xFE5
 17853                           plusw1	equ	0xFE3
 17854                           fsr1l	equ	0xFE1
 17855                           indf2	equ	0xFDF
 17856                           postinc2	equ	0xFDE
 17857                           postdec2	equ	0xFDD
 17858                           plusw2	equ	0xFDB
 17859                           fsr2h	equ	0xFDA
 17860                           fsr2l	equ	0xFD9
 17861                           status	equ	0xFD8
 17862                           
 17863 ;; *************** function ___ftge *****************
 17864 ;; Defined at:
 17865 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 17866 ;; Parameters:    Size  Location     Type
 17867 ;;  ff1             3   16[COMRAM] float 
 17868 ;;  ff2             3   19[COMRAM] float 
 17869 ;; Auto vars:     Size  Location     Type
 17870 ;;		None
 17871 ;; Return value:  Size  Location     Type
 17872 ;;		None               void
 17873 ;; Registers used:
 17874 ;;		wreg, status,2, status,0
 17875 ;; Tracked objects:
 17876 ;;		On entry : 0/0
 17877 ;;		On exit  : 0/0
 17878 ;;		Unchanged: 0/0
 17879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17880 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17882 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17883 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17884 ;;Total ram usage:        9 bytes
 17885 ;; Hardware stack levels used:    1
 17886 ;; Hardware stack levels required when called:    3
 17887 ;; This function calls:
 17888 ;;		Nothing
 17889 ;; This function is called by:
 17890 ;;		_main
 17891 ;;		_Setup_Fan_Temp
 17892 ;;		_Do_Setup_Time
 17893 ;;		_printf
 17894 ;; This function uses a non-reentrant model
 17895 ;;
 17896                           
 17897                           	psect	text78
 17898  003D20                     __ptext78:
 17899                           	opt stack 0
 17900  003D20                     ___ftge:
 17901                           	opt stack 26
 17902                           
 17903                           ;incstack = 0
 17904  003D20  AE13               	btfss	___ftge@ff1+2,7,c
 17905  003D22  D017               	goto	l8958
 17906  003D24  C011  F017         	movff	___ftge@ff1,??___ftge
 17907  003D28  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 17908  003D2C  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 17909  003D30  1E17               	comf	??___ftge,f,c
 17910  003D32  1E18               	comf	??___ftge+1,f,c
 17911  003D34  1E19               	comf	??___ftge+2,f,c
 17912  003D36  2A17               	incf	??___ftge,f,c
 17913  003D38  0E00               	movlw	0
 17914  003D3A  2218               	addwfc	??___ftge+1,f,c
 17915  003D3C  2219               	addwfc	??___ftge+2,f,c
 17916  003D3E  0E00               	movlw	0
 17917  003D40  2417               	addwf	??___ftge,w,c
 17918  003D42  6E11               	movwf	___ftge@ff1,c
 17919  003D44  0E00               	movlw	0
 17920  003D46  2018               	addwfc	??___ftge+1,w,c
 17921  003D48  6E12               	movwf	___ftge@ff1+1,c
 17922  003D4A  0E80               	movlw	128
 17923  003D4C  2019               	addwfc	??___ftge+2,w,c
 17924  003D4E  6E13               	movwf	___ftge@ff1+2,c
 17925  003D50  D000               	goto	l8958
 17926  003D52                     l8958:
 17927  003D52  AE16               	btfss	___ftge@ff2+2,7,c
 17928  003D54  D017               	goto	l8962
 17929  003D56  C014  F017         	movff	___ftge@ff2,??___ftge
 17930  003D5A  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 17931  003D5E  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 17932  003D62  1E17               	comf	??___ftge,f,c
 17933  003D64  1E18               	comf	??___ftge+1,f,c
 17934  003D66  1E19               	comf	??___ftge+2,f,c
 17935  003D68  2A17               	incf	??___ftge,f,c
 17936  003D6A  0E00               	movlw	0
 17937  003D6C  2218               	addwfc	??___ftge+1,f,c
 17938  003D6E  2219               	addwfc	??___ftge+2,f,c
 17939  003D70  0E00               	movlw	0
 17940  003D72  2417               	addwf	??___ftge,w,c
 17941  003D74  6E14               	movwf	___ftge@ff2,c
 17942  003D76  0E00               	movlw	0
 17943  003D78  2018               	addwfc	??___ftge+1,w,c
 17944  003D7A  6E15               	movwf	___ftge@ff2+1,c
 17945  003D7C  0E80               	movlw	128
 17946  003D7E  2019               	addwfc	??___ftge+2,w,c
 17947  003D80  6E16               	movwf	___ftge@ff2+2,c
 17948  003D82  D000               	goto	l8962
 17949  003D84                     l8962:
 17950  003D84  0E00               	movlw	0
 17951  003D86  1A11               	xorwf	___ftge@ff1,f,c
 17952  003D88  0E00               	movlw	0
 17953  003D8A  1A12               	xorwf	___ftge@ff1+1,f,c
 17954  003D8C  0E80               	movlw	128
 17955  003D8E  1A13               	xorwf	___ftge@ff1+2,f,c
 17956  003D90  0E00               	movlw	0
 17957  003D92  1A14               	xorwf	___ftge@ff2,f,c
 17958  003D94  0E00               	movlw	0
 17959  003D96  1A15               	xorwf	___ftge@ff2+1,f,c
 17960  003D98  0E80               	movlw	128
 17961  003D9A  1A16               	xorwf	___ftge@ff2+2,f,c
 17962  003D9C  5014               	movf	___ftge@ff2,w,c
 17963  003D9E  5C11               	subwf	___ftge@ff1,w,c
 17964  003DA0  5015               	movf	___ftge@ff2+1,w,c
 17965  003DA2  5812               	subwfb	___ftge@ff1+1,w,c
 17966  003DA4  5016               	movf	___ftge@ff2+2,w,c
 17967  003DA6  5813               	subwfb	___ftge@ff1+2,w,c
 17968  003DA8  B0D8               	btfsc	status,0,c
 17969  003DAA  D002               	goto	l8968
 17970  003DAC  90D8               	bcf	status,0,c
 17971  003DAE  D002               	goto	l1927
 17972  003DB0                     l8968:
 17973  003DB0  80D8               	bsf	status,0,c
 17974  003DB2  D000               	goto	l1927
 17975  003DB4                     l1927:
 17976  003DB4  0012               	return		;funcret
 17977  003DB6                     __end_of___ftge:
 17978                           	opt stack 0
 17979                           tblptru	equ	0xFF8
 17980                           tblptrh	equ	0xFF7
 17981                           tblptrl	equ	0xFF6
 17982                           tablat	equ	0xFF5
 17983                           prodh	equ	0xFF4
 17984                           prodl	equ	0xFF3
 17985                           intcon	equ	0xFF2
 17986                           intcon2	equ	0xFF1
 17987                           intcon3	equ	0xFF0
 17988                           postinc0	equ	0xFEE
 17989                           wreg	equ	0xFE8
 17990                           postdec1	equ	0xFE5
 17991                           plusw1	equ	0xFE3
 17992                           fsr1l	equ	0xFE1
 17993                           indf2	equ	0xFDF
 17994                           postinc2	equ	0xFDE
 17995                           postdec2	equ	0xFDD
 17996                           plusw2	equ	0xFDB
 17997                           fsr2h	equ	0xFDA
 17998                           fsr2l	equ	0xFD9
 17999                           status	equ	0xFD8
 18000                           
 18001 ;; *************** function _Init_UART *****************
 18002 ;; Defined at:
 18003 ;;		line 182 in file "utils.c"
 18004 ;; Parameters:    Size  Location     Type
 18005 ;;		None
 18006 ;; Auto vars:     Size  Location     Type
 18007 ;;		None
 18008 ;; Return value:  Size  Location     Type
 18009 ;;		None               void
 18010 ;; Registers used:
 18011 ;;		wreg, status,2, cstack
 18012 ;; Tracked objects:
 18013 ;;		On entry : 0/0
 18014 ;;		On exit  : 0/0
 18015 ;;		Unchanged: 0/0
 18016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18021 ;;Total ram usage:        0 bytes
 18022 ;; Hardware stack levels used:    1
 18023 ;; Hardware stack levels required when called:    4
 18024 ;; This function calls:
 18025 ;;		_OpenUSART
 18026 ;; This function is called by:
 18027 ;;		_Do_Init
 18028 ;; This function uses a non-reentrant model
 18029 ;;
 18030                           
 18031                           	psect	text79
 18032  004CF6                     __ptext79:
 18033                           	opt stack 0
 18034  004CF6                     _Init_UART:
 18035                           	opt stack 25
 18036                           
 18037                           ;utils.c: 184: OpenUSART (0b01111111 & 0b10111111 &
 18038                           ;utils.c: 185: 0b11111110 & 0b11111101 & 0b11111111 &
 18039                           ;utils.c: 186: 0b11111111, 25);
 18040                           
 18041                           ;incstack = 0
 18042  004CF6  0E00               	movlw	0
 18043  004CF8  6E12               	movwf	OpenUSART@spbrg+1,c
 18044  004CFA  0E19               	movlw	25
 18045  004CFC  6E11               	movwf	OpenUSART@spbrg,c
 18046  004CFE  0E3C               	movlw	60
 18047  004D00  ECED  F020         	call	_OpenUSART
 18048                           
 18049                           ;utils.c: 187: OSCCON = 0x70;
 18050  004D04  0E70               	movlw	112
 18051  004D06  6ED3               	movwf	4051,c	;volatile
 18052  004D08  0012               	return		;funcret
 18053  004D0A                     __end_of_Init_UART:
 18054                           	opt stack 0
 18055                           tblptru	equ	0xFF8
 18056                           tblptrh	equ	0xFF7
 18057                           tblptrl	equ	0xFF6
 18058                           tablat	equ	0xFF5
 18059                           prodh	equ	0xFF4
 18060                           prodl	equ	0xFF3
 18061                           intcon	equ	0xFF2
 18062                           intcon2	equ	0xFF1
 18063                           intcon3	equ	0xFF0
 18064                           postinc0	equ	0xFEE
 18065                           wreg	equ	0xFE8
 18066                           postdec1	equ	0xFE5
 18067                           plusw1	equ	0xFE3
 18068                           fsr1l	equ	0xFE1
 18069                           indf2	equ	0xFDF
 18070                           postinc2	equ	0xFDE
 18071                           postdec2	equ	0xFDD
 18072                           plusw2	equ	0xFDB
 18073                           fsr2h	equ	0xFDA
 18074                           fsr2l	equ	0xFD9
 18075                           status	equ	0xFD8
 18076                           
 18077 ;; *************** function _OpenUSART *****************
 18078 ;; Defined at:
 18079 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 18080 ;; Parameters:    Size  Location     Type
 18081 ;;  config          1    wreg     unsigned char 
 18082 ;;  spbrg           2   16[COMRAM] unsigned int 
 18083 ;; Auto vars:     Size  Location     Type
 18084 ;;  config          1   18[COMRAM] unsigned char 
 18085 ;; Return value:  Size  Location     Type
 18086 ;;		None               void
 18087 ;; Registers used:
 18088 ;;		wreg, status,2
 18089 ;; Tracked objects:
 18090 ;;		On entry : 0/0
 18091 ;;		On exit  : 0/0
 18092 ;;		Unchanged: 0/0
 18093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18094 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18097 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18098 ;;Total ram usage:        3 bytes
 18099 ;; Hardware stack levels used:    1
 18100 ;; Hardware stack levels required when called:    3
 18101 ;; This function calls:
 18102 ;;		Nothing
 18103 ;; This function is called by:
 18104 ;;		_Init_UART
 18105 ;; This function uses a non-reentrant model
 18106 ;;
 18107                           
 18108                           	psect	text80
 18109  0041DA                     __ptext80:
 18110                           	opt stack 0
 18111  0041DA                     _OpenUSART:
 18112                           	opt stack 25
 18113                           
 18114                           ;incstack = 0
 18115                           ;OpenUSART@config stored from wreg
 18116  0041DA  6E13               	movwf	OpenUSART@config,c
 18117  0041DC  0E00               	movlw	0
 18118  0041DE  6EAC               	movwf	4012,c	;volatile
 18119  0041E0  0E00               	movlw	0
 18120  0041E2  6EAB               	movwf	4011,c	;volatile
 18121  0041E4  A013               	btfss	OpenUSART@config,0,c
 18122  0041E6  D002               	goto	l6702
 18123  0041E8  88AC               	bsf	4012,4,c	;volatile
 18124  0041EA  D000               	goto	l6702
 18125  0041EC                     l6702:
 18126  0041EC  A213               	btfss	OpenUSART@config,1,c
 18127  0041EE  D003               	goto	l6706
 18128  0041F0  8CAC               	bsf	4012,6,c	;volatile
 18129  0041F2  8CAB               	bsf	4011,6,c	;volatile
 18130  0041F4  D000               	goto	l6706
 18131  0041F6                     l6706:
 18132  0041F6  A413               	btfss	OpenUSART@config,2,c
 18133  0041F8  D002               	goto	l6710
 18134  0041FA  8EAC               	bsf	4012,7,c	;volatile
 18135  0041FC  D000               	goto	l6710
 18136  0041FE                     l6710:
 18137  0041FE  A613               	btfss	OpenUSART@config,3,c
 18138  004200  D002               	goto	l1492
 18139  004202  88AB               	bsf	4011,4,c	;volatile
 18140  004204  D002               	goto	l6714
 18141  004206                     l1492:
 18142  004206  8AAB               	bsf	4011,5,c	;volatile
 18143  004208  D000               	goto	l6714
 18144  00420A                     l6714:
 18145  00420A  B813               	btfsc	OpenUSART@config,4,c
 18146  00420C  84AC               	bsf	4012,2,c	;volatile
 18147  00420E  989E               	bcf	3998,4,c	;volatile
 18148  004210  AA13               	btfss	OpenUSART@config,5,c
 18149  004212  D002               	goto	l6722
 18150  004214  86AB               	bsf	4011,3,c	;volatile
 18151  004216  D000               	goto	l6722
 18152  004218                     l6722:
 18153  004218  AC13               	btfss	OpenUSART@config,6,c
 18154  00421A  D002               	goto	l1496
 18155  00421C  8A9D               	bsf	3997,5,c	;volatile
 18156  00421E  D001               	goto	l1497
 18157  004220                     l1496:
 18158  004220  9A9D               	bcf	3997,5,c	;volatile
 18159  004222                     l1497:
 18160  004222  9A9E               	bcf	3998,5,c	;volatile
 18161  004224  AE13               	btfss	OpenUSART@config,7,c
 18162  004226  D002               	goto	l1498
 18163  004228  889D               	bsf	3997,4,c	;volatile
 18164  00422A  D001               	goto	l1499
 18165  00422C                     l1498:
 18166  00422C  989D               	bcf	3997,4,c	;volatile
 18167  00422E                     l1499:
 18168  00422E  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 18169  004232  5012               	movf	OpenUSART@spbrg+1,w,c
 18170  004234  6EB0               	movwf	4016,c	;volatile
 18171  004236  8AAC               	bsf	4012,5,c	;volatile
 18172  004238  8EAB               	bsf	4011,7,c	;volatile
 18173  00423A  9C94               	bcf	3988,6,c	;volatile
 18174  00423C  8E94               	bsf	3988,7,c	;volatile
 18175  00423E  B8AC               	btfsc	4012,4,c	;volatile
 18176  004240  BEAC               	btfsc	4012,7,c	;volatile
 18177  004242  D002               	goto	l1501
 18178  004244  8C94               	bsf	3988,6,c	;volatile
 18179  004246  D000               	goto	l1501
 18180  004248                     l1501:
 18181  004248  0012               	return		;funcret
 18182  00424A                     __end_of_OpenUSART:
 18183                           	opt stack 0
 18184                           tblptru	equ	0xFF8
 18185                           tblptrh	equ	0xFF7
 18186                           tblptrl	equ	0xFF6
 18187                           tablat	equ	0xFF5
 18188                           prodh	equ	0xFF4
 18189                           prodl	equ	0xFF3
 18190                           intcon	equ	0xFF2
 18191                           intcon2	equ	0xFF1
 18192                           intcon3	equ	0xFF0
 18193                           postinc0	equ	0xFEE
 18194                           wreg	equ	0xFE8
 18195                           postdec1	equ	0xFE5
 18196                           plusw1	equ	0xFE3
 18197                           fsr1l	equ	0xFE1
 18198                           indf2	equ	0xFDF
 18199                           postinc2	equ	0xFDE
 18200                           postdec2	equ	0xFDD
 18201                           plusw2	equ	0xFDB
 18202                           fsr2h	equ	0xFDA
 18203                           fsr2l	equ	0xFD9
 18204                           status	equ	0xFD8
 18205                           
 18206 ;; *************** function _Init_Interrupt *****************
 18207 ;; Defined at:
 18208 ;;		line 18 in file "Interrupt.c"
 18209 ;; Parameters:    Size  Location     Type
 18210 ;;		None
 18211 ;; Auto vars:     Size  Location     Type
 18212 ;;		None
 18213 ;; Return value:  Size  Location     Type
 18214 ;;		None               void
 18215 ;; Registers used:
 18216 ;;		wreg, status,2
 18217 ;; Tracked objects:
 18218 ;;		On entry : 0/0
 18219 ;;		On exit  : 0/0
 18220 ;;		Unchanged: 0/0
 18221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;Total ram usage:        0 bytes
 18227 ;; Hardware stack levels used:    1
 18228 ;; Hardware stack levels required when called:    3
 18229 ;; This function calls:
 18230 ;;		Nothing
 18231 ;; This function is called by:
 18232 ;;		_Do_Init
 18233 ;; This function uses a non-reentrant model
 18234 ;;
 18235                           
 18236                           	psect	text81
 18237  004A90                     __ptext81:
 18238                           	opt stack 0
 18239  004A90                     _Init_Interrupt:
 18240                           	opt stack 26
 18241                           
 18242                           ;Interrupt.c: 21: INTCONbits.INT0IF = 0 ;
 18243                           
 18244                           ;incstack = 0
 18245  004A90  92F2               	bcf	intcon,1,c	;volatile
 18246                           
 18247                           ;Interrupt.c: 22: INTCON3bits.INT1IF = 0;
 18248  004A92  90F0               	bcf	intcon3,0,c	;volatile
 18249                           
 18250                           ;Interrupt.c: 23: INTCON3bits.INT2IF = 0;
 18251  004A94  92F0               	bcf	intcon3,1,c	;volatile
 18252                           
 18253                           ;Interrupt.c: 25: INTCONbits.INT0IE = 1;
 18254  004A96  88F2               	bsf	intcon,4,c	;volatile
 18255                           
 18256                           ;Interrupt.c: 26: INTCON3bits.INT1IE = 1;
 18257  004A98  86F0               	bsf	intcon3,3,c	;volatile
 18258                           
 18259                           ;Interrupt.c: 27: INTCON3bits.INT2IE = 1;
 18260  004A9A  88F0               	bsf	intcon3,4,c	;volatile
 18261                           
 18262                           ;Interrupt.c: 29: INTCON2bits.INTEDG0 = 0;
 18263  004A9C  9CF1               	bcf	intcon2,6,c	;volatile
 18264                           
 18265                           ;Interrupt.c: 30: INTCON2bits.INTEDG1 = 0;
 18266  004A9E  9AF1               	bcf	intcon2,5,c	;volatile
 18267                           
 18268                           ;Interrupt.c: 31: INTCON2bits.INTEDG2 = 0;
 18269  004AA0  98F1               	bcf	intcon2,4,c	;volatile
 18270                           
 18271                           ;Interrupt.c: 32: TMR1H = 0;
 18272  004AA2  0E00               	movlw	0
 18273  004AA4  6ECF               	movwf	4047,c	;volatile
 18274                           
 18275                           ;Interrupt.c: 33: TMR1L = 0;
 18276  004AA6  0E00               	movlw	0
 18277  004AA8  6ECE               	movwf	4046,c	;volatile
 18278                           
 18279                           ;Interrupt.c: 34: PIR1bits.TMR1IF = 0;
 18280  004AAA  909E               	bcf	3998,0,c	;volatile
 18281                           
 18282                           ;Interrupt.c: 35: PIE1bits.TMR1IE = 1;
 18283  004AAC  809D               	bsf	3997,0,c	;volatile
 18284                           
 18285                           ;Interrupt.c: 36: INTCONbits.PEIE = 1;
 18286  004AAE  8CF2               	bsf	intcon,6,c	;volatile
 18287                           
 18288                           ;Interrupt.c: 37: INTCONbits.GIE = 1;
 18289  004AB0  8EF2               	bsf	intcon,7,c	;volatile
 18290  004AB2  0012               	return		;funcret
 18291  004AB4                     __end_of_Init_Interrupt:
 18292                           	opt stack 0
 18293                           tblptru	equ	0xFF8
 18294                           tblptrh	equ	0xFF7
 18295                           tblptrl	equ	0xFF6
 18296                           tablat	equ	0xFF5
 18297                           prodh	equ	0xFF4
 18298                           prodl	equ	0xFF3
 18299                           intcon	equ	0xFF2
 18300                           intcon2	equ	0xFF1
 18301                           intcon3	equ	0xFF0
 18302                           postinc0	equ	0xFEE
 18303                           wreg	equ	0xFE8
 18304                           postdec1	equ	0xFE5
 18305                           plusw1	equ	0xFE3
 18306                           fsr1l	equ	0xFE1
 18307                           indf2	equ	0xFDF
 18308                           postinc2	equ	0xFDE
 18309                           postdec2	equ	0xFDD
 18310                           plusw2	equ	0xFDB
 18311                           fsr2h	equ	0xFDA
 18312                           fsr2l	equ	0xFD9
 18313                           status	equ	0xFD8
 18314                           
 18315 ;; *************** function _Init_ADC *****************
 18316 ;; Defined at:
 18317 ;;		line 174 in file "utils.c"
 18318 ;; Parameters:    Size  Location     Type
 18319 ;;		None
 18320 ;; Auto vars:     Size  Location     Type
 18321 ;;		None
 18322 ;; Return value:  Size  Location     Type
 18323 ;;		None               void
 18324 ;; Registers used:
 18325 ;;		wreg, status,2
 18326 ;; Tracked objects:
 18327 ;;		On entry : 0/0
 18328 ;;		On exit  : 0/0
 18329 ;;		Unchanged: 0/0
 18330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18335 ;;Total ram usage:        0 bytes
 18336 ;; Hardware stack levels used:    1
 18337 ;; Hardware stack levels required when called:    3
 18338 ;; This function calls:
 18339 ;;		Nothing
 18340 ;; This function is called by:
 18341 ;;		_Do_Init
 18342 ;; This function uses a non-reentrant model
 18343 ;;
 18344                           
 18345                           	psect	text82
 18346  004DC6                     __ptext82:
 18347                           	opt stack 0
 18348  004DC6                     _Init_ADC:
 18349                           	opt stack 26
 18350                           
 18351                           ;utils.c: 176: ADCON0 = 0x01;
 18352                           
 18353                           ;incstack = 0
 18354  004DC6  0E01               	movlw	1
 18355  004DC8  6EC2               	movwf	4034,c	;volatile
 18356                           
 18357                           ;utils.c: 177: ADCON1 = 0x0E;
 18358  004DCA  0E0E               	movlw	14
 18359  004DCC  6EC1               	movwf	4033,c	;volatile
 18360                           
 18361                           ;utils.c: 178: ADCON2 = 0xA9;
 18362  004DCE  0EA9               	movlw	169
 18363  004DD0  6EC0               	movwf	4032,c	;volatile
 18364  004DD2  0012               	return		;funcret
 18365  004DD4                     __end_of_Init_ADC:
 18366                           	opt stack 0
 18367                           tblptru	equ	0xFF8
 18368                           tblptrh	equ	0xFF7
 18369                           tblptrl	equ	0xFF6
 18370                           tablat	equ	0xFF5
 18371                           prodh	equ	0xFF4
 18372                           prodl	equ	0xFF3
 18373                           intcon	equ	0xFF2
 18374                           intcon2	equ	0xFF1
 18375                           intcon3	equ	0xFF0
 18376                           postinc0	equ	0xFEE
 18377                           wreg	equ	0xFE8
 18378                           postdec1	equ	0xFE5
 18379                           plusw1	equ	0xFE3
 18380                           fsr1l	equ	0xFE1
 18381                           indf2	equ	0xFDF
 18382                           postinc2	equ	0xFDE
 18383                           postdec2	equ	0xFDD
 18384                           plusw2	equ	0xFDB
 18385                           fsr2h	equ	0xFDA
 18386                           fsr2l	equ	0xFD9
 18387                           status	equ	0xFD8
 18388                           
 18389 ;; *************** function _I2C_Init *****************
 18390 ;; Defined at:
 18391 ;;		line 10 in file "I2C_Soft.c"
 18392 ;; Parameters:    Size  Location     Type
 18393 ;;  c               4   16[COMRAM] unsigned long 
 18394 ;; Auto vars:     Size  Location     Type
 18395 ;;		None
 18396 ;; Return value:  Size  Location     Type
 18397 ;;		None               void
 18398 ;; Registers used:
 18399 ;;		wreg, cstack
 18400 ;; Tracked objects:
 18401 ;;		On entry : 0/0
 18402 ;;		On exit  : 0/0
 18403 ;;		Unchanged: 0/0
 18404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18405 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18408 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18409 ;;Total ram usage:        4 bytes
 18410 ;; Hardware stack levels used:    1
 18411 ;; Hardware stack levels required when called:    4
 18412 ;; This function calls:
 18413 ;;		_i2cHighScl
 18414 ;;		_i2cHighSda
 18415 ;; This function is called by:
 18416 ;;		_Do_Init
 18417 ;; This function uses a non-reentrant model
 18418 ;;
 18419                           
 18420                           	psect	text83
 18421  004DF6                     __ptext83:
 18422                           	opt stack 0
 18423  004DF6                     _I2C_Init:
 18424                           	opt stack 25
 18425                           
 18426                           ;I2C_Soft.c: 12: i2cHighScl();
 18427                           
 18428                           ;incstack = 0
 18429  004DF6  ECEA  F026         	call	_i2cHighScl	;wreg free
 18430                           
 18431                           ;I2C_Soft.c: 13: i2cHighSda();
 18432  004DFA  EC0E  F027         	call	_i2cHighSda	;wreg free
 18433  004DFE  0012               	return		;funcret
 18434  004E00                     __end_of_I2C_Init:
 18435                           	opt stack 0
 18436                           tblptru	equ	0xFF8
 18437                           tblptrh	equ	0xFF7
 18438                           tblptrl	equ	0xFF6
 18439                           tablat	equ	0xFF5
 18440                           prodh	equ	0xFF4
 18441                           prodl	equ	0xFF3
 18442                           intcon	equ	0xFF2
 18443                           intcon2	equ	0xFF1
 18444                           intcon3	equ	0xFF0
 18445                           postinc0	equ	0xFEE
 18446                           wreg	equ	0xFE8
 18447                           postdec1	equ	0xFE5
 18448                           plusw1	equ	0xFE3
 18449                           fsr1l	equ	0xFE1
 18450                           indf2	equ	0xFDF
 18451                           postinc2	equ	0xFDE
 18452                           postdec2	equ	0xFDD
 18453                           plusw2	equ	0xFDB
 18454                           fsr2h	equ	0xFDA
 18455                           fsr2l	equ	0xFD9
 18456                           status	equ	0xFD8
 18457                           
 18458 ;; *************** function _DS1621_Init *****************
 18459 ;; Defined at:
 18460 ;;		line 19 in file "I2C_Support.c"
 18461 ;; Parameters:    Size  Location     Type
 18462 ;;		None
 18463 ;; Auto vars:     Size  Location     Type
 18464 ;;  Device          1   21[COMRAM] unsigned char 
 18465 ;; Return value:  Size  Location     Type
 18466 ;;		None               void
 18467 ;; Registers used:
 18468 ;;		wreg, status,2, status,0, cstack
 18469 ;; Tracked objects:
 18470 ;;		On entry : 0/0
 18471 ;;		On exit  : 0/0
 18472 ;;		Unchanged: 0/0
 18473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18475 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18477 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18478 ;;Total ram usage:        1 bytes
 18479 ;; Hardware stack levels used:    1
 18480 ;; Hardware stack levels required when called:    6
 18481 ;; This function calls:
 18482 ;;		_I2C_Write_Cmd_Only
 18483 ;;		_I2C_Write_Cmd_Write_Data
 18484 ;; This function is called by:
 18485 ;;		_Do_Init
 18486 ;; This function uses a non-reentrant model
 18487 ;;
 18488                           
 18489                           	psect	text84
 18490  004B7A                     __ptext84:
 18491                           	opt stack 0
 18492  004B7A                     _DS1621_Init:
 18493                           	opt stack 23
 18494                           
 18495                           ;I2C_Support.c: 22: char Device = 0x48;
 18496                           
 18497                           ;incstack = 0
 18498  004B7A  0E48               	movlw	72
 18499  004B7C  6E16               	movwf	DS1621_Init@Device,c
 18500                           
 18501                           ;I2C_Support.c: 23: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
 18502  004B7E  0EAC               	movlw	172
 18503  004B80  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 18504  004B82  0E02               	movlw	2
 18505  004B84  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 18506  004B86  5016               	movf	DS1621_Init@Device,w,c
 18507  004B88  ECAD  F025         	call	_I2C_Write_Cmd_Write_Data
 18508                           
 18509                           ;I2C_Support.c: 24: I2C_Write_Cmd_Only(Device, 0xEE);
 18510  004B8C  0EEE               	movlw	238
 18511  004B8E  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 18512  004B90  5016               	movf	DS1621_Init@Device,w,c
 18513  004B92  EC3A  F026         	call	_I2C_Write_Cmd_Only
 18514  004B96  0012               	return		;funcret
 18515  004B98                     __end_of_DS1621_Init:
 18516                           	opt stack 0
 18517                           tblptru	equ	0xFF8
 18518                           tblptrh	equ	0xFF7
 18519                           tblptrl	equ	0xFF6
 18520                           tablat	equ	0xFF5
 18521                           prodh	equ	0xFF4
 18522                           prodl	equ	0xFF3
 18523                           intcon	equ	0xFF2
 18524                           intcon2	equ	0xFF1
 18525                           intcon3	equ	0xFF0
 18526                           postinc0	equ	0xFEE
 18527                           wreg	equ	0xFE8
 18528                           postdec1	equ	0xFE5
 18529                           plusw1	equ	0xFE3
 18530                           fsr1l	equ	0xFE1
 18531                           indf2	equ	0xFDF
 18532                           postinc2	equ	0xFDE
 18533                           postdec2	equ	0xFDD
 18534                           plusw2	equ	0xFDB
 18535                           fsr2h	equ	0xFDA
 18536                           fsr2l	equ	0xFD9
 18537                           status	equ	0xFD8
 18538                           
 18539 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 18540 ;; Defined at:
 18541 ;;		line 148 in file "I2C_Soft.c"
 18542 ;; Parameters:    Size  Location     Type
 18543 ;;  Device          1    wreg     unsigned char 
 18544 ;;  Cmd             1   18[COMRAM] unsigned char 
 18545 ;;  Data_Out        1   19[COMRAM] unsigned char 
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;  Device          1   20[COMRAM] unsigned char 
 18548 ;; Return value:  Size  Location     Type
 18549 ;;		None               void
 18550 ;; Registers used:
 18551 ;;		wreg, status,2, status,0, cstack
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18557 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18560 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18561 ;;Total ram usage:        3 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    5
 18564 ;; This function calls:
 18565 ;;		_I2C_Start
 18566 ;;		_I2C_Stop
 18567 ;;		_I2C_Write
 18568 ;; This function is called by:
 18569 ;;		_DS1621_Init
 18570 ;; This function uses a non-reentrant model
 18571 ;;
 18572                           
 18573                           	psect	text85
 18574  004B5A                     __ptext85:
 18575                           	opt stack 0
 18576  004B5A                     _I2C_Write_Cmd_Write_Data:
 18577                           	opt stack 23
 18578                           
 18579                           ;incstack = 0
 18580                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 18581  004B5A  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 18582                           
 18583                           ;I2C_Soft.c: 150: I2C_Start();
 18584  004B5C  ECA0  F026         	call	_I2C_Start	;wreg free
 18585                           
 18586                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 18587  004B60  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 18588  004B62  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 18589  004B64  ECD8  F023         	call	_I2C_Write
 18590                           
 18591                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 18592  004B68  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 18593  004B6A  ECD8  F023         	call	_I2C_Write
 18594                           
 18595                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 18596  004B6E  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 18597  004B70  ECD8  F023         	call	_I2C_Write
 18598                           
 18599                           ;I2C_Soft.c: 154: I2C_Stop();
 18600  004B74  EC97  F026         	call	_I2C_Stop	;wreg free
 18601  004B78  0012               	return		;funcret
 18602  004B7A                     __end_of_I2C_Write_Cmd_Write_Data:
 18603                           	opt stack 0
 18604                           tblptru	equ	0xFF8
 18605                           tblptrh	equ	0xFF7
 18606                           tblptrl	equ	0xFF6
 18607                           tablat	equ	0xFF5
 18608                           prodh	equ	0xFF4
 18609                           prodl	equ	0xFF3
 18610                           intcon	equ	0xFF2
 18611                           intcon2	equ	0xFF1
 18612                           intcon3	equ	0xFF0
 18613                           postinc0	equ	0xFEE
 18614                           wreg	equ	0xFE8
 18615                           postdec1	equ	0xFE5
 18616                           plusw1	equ	0xFE3
 18617                           fsr1l	equ	0xFE1
 18618                           indf2	equ	0xFDF
 18619                           postinc2	equ	0xFDE
 18620                           postdec2	equ	0xFDD
 18621                           plusw2	equ	0xFDB
 18622                           fsr2h	equ	0xFDA
 18623                           fsr2l	equ	0xFD9
 18624                           status	equ	0xFD8
 18625                           
 18626 ;; *************** function _I2C_Write_Cmd_Only *****************
 18627 ;; Defined at:
 18628 ;;		line 140 in file "I2C_Soft.c"
 18629 ;; Parameters:    Size  Location     Type
 18630 ;;  Device          1    wreg     unsigned char 
 18631 ;;  Cmd             1   18[COMRAM] unsigned char 
 18632 ;; Auto vars:     Size  Location     Type
 18633 ;;  Device          1   19[COMRAM] unsigned char 
 18634 ;; Return value:  Size  Location     Type
 18635 ;;		None               void
 18636 ;; Registers used:
 18637 ;;		wreg, status,2, status,0, cstack
 18638 ;; Tracked objects:
 18639 ;;		On entry : 0/0
 18640 ;;		On exit  : 0/0
 18641 ;;		Unchanged: 0/0
 18642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18643 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18646 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18647 ;;Total ram usage:        2 bytes
 18648 ;; Hardware stack levels used:    1
 18649 ;; Hardware stack levels required when called:    5
 18650 ;; This function calls:
 18651 ;;		_I2C_Start
 18652 ;;		_I2C_Stop
 18653 ;;		_I2C_Write
 18654 ;; This function is called by:
 18655 ;;		_DS1621_Init
 18656 ;; This function uses a non-reentrant model
 18657 ;;
 18658                           
 18659                           	psect	text86
 18660  004C74                     __ptext86:
 18661                           	opt stack 0
 18662  004C74                     _I2C_Write_Cmd_Only:
 18663                           	opt stack 23
 18664                           
 18665                           ;incstack = 0
 18666                           ;I2C_Write_Cmd_Only@Device stored from wreg
 18667  004C74  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 18668                           
 18669                           ;I2C_Soft.c: 142: I2C_Start();
 18670  004C76  ECA0  F026         	call	_I2C_Start	;wreg free
 18671                           
 18672                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 18673  004C7A  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 18674  004C7C  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 18675  004C7E  ECD8  F023         	call	_I2C_Write
 18676                           
 18677                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 18678  004C82  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 18679  004C84  ECD8  F023         	call	_I2C_Write
 18680                           
 18681                           ;I2C_Soft.c: 145: I2C_Stop();
 18682  004C88  EC97  F026         	call	_I2C_Stop	;wreg free
 18683  004C8C  0012               	return		;funcret
 18684  004C8E                     __end_of_I2C_Write_Cmd_Only:
 18685                           	opt stack 0
 18686                           tblptru	equ	0xFF8
 18687                           tblptrh	equ	0xFF7
 18688                           tblptrl	equ	0xFF6
 18689                           tablat	equ	0xFF5
 18690                           prodh	equ	0xFF4
 18691                           prodl	equ	0xFF3
 18692                           intcon	equ	0xFF2
 18693                           intcon2	equ	0xFF1
 18694                           intcon3	equ	0xFF0
 18695                           postinc0	equ	0xFEE
 18696                           wreg	equ	0xFE8
 18697                           postdec1	equ	0xFE5
 18698                           plusw1	equ	0xFE3
 18699                           fsr1l	equ	0xFE1
 18700                           indf2	equ	0xFDF
 18701                           postinc2	equ	0xFDE
 18702                           postdec2	equ	0xFDD
 18703                           plusw2	equ	0xFDB
 18704                           fsr2h	equ	0xFDA
 18705                           fsr2l	equ	0xFD9
 18706                           status	equ	0xFD8
 18707                           
 18708 ;; *************** function _I2C_Write *****************
 18709 ;; Defined at:
 18710 ;;		line 37 in file "I2C_Soft.c"
 18711 ;; Parameters:    Size  Location     Type
 18712 ;;  outByte         1    wreg     unsigned char 
 18713 ;; Auto vars:     Size  Location     Type
 18714 ;;  outByte         1   16[COMRAM] unsigned char 
 18715 ;;  n               1   17[COMRAM] unsigned char 
 18716 ;; Return value:  Size  Location     Type
 18717 ;;		None               void
 18718 ;; Registers used:
 18719 ;;		wreg, status,2, status,0, cstack
 18720 ;; Tracked objects:
 18721 ;;		On entry : 0/0
 18722 ;;		On exit  : 0/0
 18723 ;;		Unchanged: 0/0
 18724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18729 ;;Total ram usage:        2 bytes
 18730 ;; Hardware stack levels used:    1
 18731 ;; Hardware stack levels required when called:    4
 18732 ;; This function calls:
 18733 ;;		_i2cHighScl
 18734 ;;		_i2cHighSda
 18735 ;;		_i2cLowScl
 18736 ;;		_i2cLowSda
 18737 ;; This function is called by:
 18738 ;;		_I2C_Write_Cmd_Only
 18739 ;;		_I2C_Write_Cmd_Write_Data
 18740 ;;		_DS1621_Read_Temp
 18741 ;;		_DS3231_Read_Time
 18742 ;;		_DS3231_Write_Time
 18743 ;;		_I2C_Write_Address_Read_One_Byte
 18744 ;;		_I2C_Write_Address_Write_One_Byte
 18745 ;;		_I2C_Write_Cmd_Read_One_Byte
 18746 ;;		_DS3231_Init
 18747 ;; This function uses a non-reentrant model
 18748 ;;
 18749                           
 18750                           	psect	text87
 18751  0047B0                     __ptext87:
 18752                           	opt stack 0
 18753  0047B0                     _I2C_Write:
 18754                           	opt stack 23
 18755                           
 18756                           ;incstack = 0
 18757                           ;I2C_Write@outByte stored from wreg
 18758  0047B0  6E11               	movwf	I2C_Write@outByte,c
 18759                           
 18760                           ;I2C_Soft.c: 39: unsigned char n;
 18761                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 18762  0047B2  0E00               	movlw	0
 18763  0047B4  6E12               	movwf	I2C_Write@n,c
 18764  0047B6                     l6444:
 18765  0047B6  0E07               	movlw	7
 18766  0047B8  6412               	cpfsgt	I2C_Write@n,c
 18767  0047BA  D001               	goto	l115
 18768  0047BC  D011               	goto	l6462
 18769  0047BE                     l115:
 18770                           
 18771                           ;I2C_Soft.c: 41: {
 18772                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 18773  0047BE  AE11               	btfss	I2C_Write@outByte,7,c
 18774  0047C0  D003               	goto	l6450
 18775  0047C2  EC0E  F027         	call	_i2cHighSda	;wreg free
 18776  0047C6  D003               	goto	l6452
 18777  0047C8                     l6450:
 18778                           
 18779                           ;I2C_Soft.c: 43: else i2cLowSda();
 18780  0047C8  EC00  F027         	call	_i2cLowSda	;wreg free
 18781  0047CC  D000               	goto	l6452
 18782  0047CE                     l6452:
 18783                           
 18784                           ;I2C_Soft.c: 44: i2cHighScl();
 18785  0047CE  ECEA  F026         	call	_i2cHighScl	;wreg free
 18786                           
 18787                           ;I2C_Soft.c: 45: i2cLowScl();
 18788  0047D2  EC0A  F027         	call	_i2cLowScl	;wreg free
 18789                           
 18790                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 18791  0047D6  5011               	movf	I2C_Write@outByte,w,c
 18792  0047D8  2411               	addwf	I2C_Write@outByte,w,c
 18793  0047DA  6E11               	movwf	I2C_Write@outByte,c
 18794  0047DC  2A12               	incf	I2C_Write@n,f,c
 18795  0047DE  D7EB               	goto	l6444
 18796  0047E0                     l6462:
 18797                           
 18798                           ;I2C_Soft.c: 47: }
 18799                           ;I2C_Soft.c: 48: i2cHighSda();
 18800  0047E0  EC0E  F027         	call	_i2cHighSda	;wreg free
 18801                           
 18802                           ;I2C_Soft.c: 49: i2cHighScl();
 18803  0047E4  ECEA  F026         	call	_i2cHighScl	;wreg free
 18804                           
 18805                           ;I2C_Soft.c: 50: i2cLowScl();
 18806  0047E8  EC0A  F027         	call	_i2cLowScl	;wreg free
 18807  0047EC  0012               	return		;funcret
 18808  0047EE                     __end_of_I2C_Write:
 18809                           	opt stack 0
 18810                           tblptru	equ	0xFF8
 18811                           tblptrh	equ	0xFF7
 18812                           tblptrl	equ	0xFF6
 18813                           tablat	equ	0xFF5
 18814                           prodh	equ	0xFF4
 18815                           prodl	equ	0xFF3
 18816                           intcon	equ	0xFF2
 18817                           intcon2	equ	0xFF1
 18818                           intcon3	equ	0xFF0
 18819                           postinc0	equ	0xFEE
 18820                           wreg	equ	0xFE8
 18821                           postdec1	equ	0xFE5
 18822                           plusw1	equ	0xFE3
 18823                           fsr1l	equ	0xFE1
 18824                           indf2	equ	0xFDF
 18825                           postinc2	equ	0xFDE
 18826                           postdec2	equ	0xFDD
 18827                           plusw2	equ	0xFDB
 18828                           fsr2h	equ	0xFDA
 18829                           fsr2l	equ	0xFD9
 18830                           status	equ	0xFD8
 18831                           
 18832 ;; *************** function _I2C_Stop *****************
 18833 ;; Defined at:
 18834 ;;		line 84 in file "I2C_Soft.c"
 18835 ;; Parameters:    Size  Location     Type
 18836 ;;		None
 18837 ;; Auto vars:     Size  Location     Type
 18838 ;;		None
 18839 ;; Return value:  Size  Location     Type
 18840 ;;		None               void
 18841 ;; Registers used:
 18842 ;;		wreg, cstack
 18843 ;; Tracked objects:
 18844 ;;		On entry : 0/0
 18845 ;;		On exit  : 0/0
 18846 ;;		Unchanged: 0/0
 18847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18852 ;;Total ram usage:        0 bytes
 18853 ;; Hardware stack levels used:    1
 18854 ;; Hardware stack levels required when called:    4
 18855 ;; This function calls:
 18856 ;;		_i2cHighScl
 18857 ;;		_i2cHighSda
 18858 ;;		_i2cLowScl
 18859 ;;		_i2cLowSda
 18860 ;; This function is called by:
 18861 ;;		_I2C_Write_Cmd_Only
 18862 ;;		_I2C_Write_Cmd_Write_Data
 18863 ;;		_DS1621_Read_Temp
 18864 ;;		_DS3231_Read_Time
 18865 ;;		_DS3231_Write_Time
 18866 ;;		_I2C_Write_Address_Read_One_Byte
 18867 ;;		_I2C_Write_Address_Write_One_Byte
 18868 ;;		_I2C_Write_Cmd_Read_One_Byte
 18869 ;;		_DS3231_Init
 18870 ;; This function uses a non-reentrant model
 18871 ;;
 18872                           
 18873                           	psect	text88
 18874  004D2E                     __ptext88:
 18875                           	opt stack 0
 18876  004D2E                     _I2C_Stop:
 18877                           	opt stack 23
 18878                           
 18879                           ;I2C_Soft.c: 86: i2cLowScl();
 18880                           
 18881                           ;incstack = 0
 18882  004D2E  EC0A  F027         	call	_i2cLowScl	;wreg free
 18883                           
 18884                           ;I2C_Soft.c: 87: i2cLowSda();
 18885  004D32  EC00  F027         	call	_i2cLowSda	;wreg free
 18886                           
 18887                           ;I2C_Soft.c: 88: i2cHighScl();
 18888  004D36  ECEA  F026         	call	_i2cHighScl	;wreg free
 18889                           
 18890                           ;I2C_Soft.c: 89: i2cHighSda();
 18891  004D3A  EC0E  F027         	call	_i2cHighSda	;wreg free
 18892  004D3E  0012               	return		;funcret
 18893  004D40                     __end_of_I2C_Stop:
 18894                           	opt stack 0
 18895                           tblptru	equ	0xFF8
 18896                           tblptrh	equ	0xFF7
 18897                           tblptrl	equ	0xFF6
 18898                           tablat	equ	0xFF5
 18899                           prodh	equ	0xFF4
 18900                           prodl	equ	0xFF3
 18901                           intcon	equ	0xFF2
 18902                           intcon2	equ	0xFF1
 18903                           intcon3	equ	0xFF0
 18904                           postinc0	equ	0xFEE
 18905                           wreg	equ	0xFE8
 18906                           postdec1	equ	0xFE5
 18907                           plusw1	equ	0xFE3
 18908                           fsr1l	equ	0xFE1
 18909                           indf2	equ	0xFDF
 18910                           postinc2	equ	0xFDE
 18911                           postdec2	equ	0xFDD
 18912                           plusw2	equ	0xFDB
 18913                           fsr2h	equ	0xFDA
 18914                           fsr2l	equ	0xFD9
 18915                           status	equ	0xFD8
 18916                           
 18917 ;; *************** function _I2C_Start *****************
 18918 ;; Defined at:
 18919 ;;		line 67 in file "I2C_Soft.c"
 18920 ;; Parameters:    Size  Location     Type
 18921 ;;		None
 18922 ;; Auto vars:     Size  Location     Type
 18923 ;;		None
 18924 ;; Return value:  Size  Location     Type
 18925 ;;		None               void
 18926 ;; Registers used:
 18927 ;;		wreg, cstack
 18928 ;; Tracked objects:
 18929 ;;		On entry : 0/0
 18930 ;;		On exit  : 0/0
 18931 ;;		Unchanged: 0/0
 18932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18937 ;;Total ram usage:        0 bytes
 18938 ;; Hardware stack levels used:    1
 18939 ;; Hardware stack levels required when called:    4
 18940 ;; This function calls:
 18941 ;;		_i2cHighScl
 18942 ;;		_i2cHighSda
 18943 ;;		_i2cLowScl
 18944 ;;		_i2cLowSda
 18945 ;; This function is called by:
 18946 ;;		_I2C_Write_Cmd_Only
 18947 ;;		_I2C_Write_Cmd_Write_Data
 18948 ;;		_DS1621_Read_Temp
 18949 ;;		_DS3231_Read_Time
 18950 ;;		_DS3231_Write_Time
 18951 ;;		_I2C_Write_Address_Read_One_Byte
 18952 ;;		_I2C_Write_Address_Write_One_Byte
 18953 ;;		_I2C_Write_Cmd_Read_One_Byte
 18954 ;;		_DS3231_Init
 18955 ;; This function uses a non-reentrant model
 18956 ;;
 18957                           
 18958                           	psect	text89
 18959  004D40                     __ptext89:
 18960                           	opt stack 0
 18961  004D40                     _I2C_Start:
 18962                           	opt stack 23
 18963                           
 18964                           ;I2C_Soft.c: 69: i2cHighSda();
 18965                           
 18966                           ;incstack = 0
 18967  004D40  EC0E  F027         	call	_i2cHighSda	;wreg free
 18968                           
 18969                           ;I2C_Soft.c: 70: i2cHighScl();
 18970  004D44  ECEA  F026         	call	_i2cHighScl	;wreg free
 18971                           
 18972                           ;I2C_Soft.c: 71: i2cLowSda();
 18973  004D48  EC00  F027         	call	_i2cLowSda	;wreg free
 18974                           
 18975                           ;I2C_Soft.c: 72: i2cLowScl();
 18976  004D4C  EC0A  F027         	call	_i2cLowScl	;wreg free
 18977  004D50  0012               	return		;funcret
 18978  004D52                     __end_of_I2C_Start:
 18979                           	opt stack 0
 18980                           tblptru	equ	0xFF8
 18981                           tblptrh	equ	0xFF7
 18982                           tblptrl	equ	0xFF6
 18983                           tablat	equ	0xFF5
 18984                           prodh	equ	0xFF4
 18985                           prodl	equ	0xFF3
 18986                           intcon	equ	0xFF2
 18987                           intcon2	equ	0xFF1
 18988                           intcon3	equ	0xFF0
 18989                           postinc0	equ	0xFEE
 18990                           wreg	equ	0xFE8
 18991                           postdec1	equ	0xFE5
 18992                           plusw1	equ	0xFE3
 18993                           fsr1l	equ	0xFE1
 18994                           indf2	equ	0xFDF
 18995                           postinc2	equ	0xFDE
 18996                           postdec2	equ	0xFDD
 18997                           plusw2	equ	0xFDB
 18998                           fsr2h	equ	0xFDA
 18999                           fsr2l	equ	0xFD9
 19000                           status	equ	0xFD8
 19001                           
 19002 ;; *************** function _i2cLowSda *****************
 19003 ;; Defined at:
 19004 ;;		line 98 in file "I2C_Soft.c"
 19005 ;; Parameters:    Size  Location     Type
 19006 ;;		None
 19007 ;; Auto vars:     Size  Location     Type
 19008 ;;		None
 19009 ;; Return value:  Size  Location     Type
 19010 ;;		None               void
 19011 ;; Registers used:
 19012 ;;		None
 19013 ;; Tracked objects:
 19014 ;;		On entry : 0/0
 19015 ;;		On exit  : 0/0
 19016 ;;		Unchanged: 0/0
 19017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19022 ;;Total ram usage:        0 bytes
 19023 ;; Hardware stack levels used:    1
 19024 ;; Hardware stack levels required when called:    3
 19025 ;; This function calls:
 19026 ;;		Nothing
 19027 ;; This function is called by:
 19028 ;;		_I2C_Write
 19029 ;;		_i2cAck
 19030 ;;		_I2C_Start
 19031 ;;		_I2C_ReStart
 19032 ;;		_I2C_Stop
 19033 ;; This function uses a non-reentrant model
 19034 ;;
 19035                           
 19036                           	psect	text90
 19037  004E00                     __ptext90:
 19038                           	opt stack 0
 19039  004E00                     _i2cLowSda:
 19040                           	opt stack 23
 19041                           
 19042                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
 19043                           
 19044                           ;incstack = 0
 19045  004E00  9A81               	bcf	3969,5,c	;volatile
 19046                           
 19047                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
 19048  004E02  9A93               	bcf	3987,5,c	;volatile
 19049                           
 19050                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19051  004E04  D000               	nop2		;2 cycle nop
 19052  004E06  D000               	nop2		;2 cycle nop
 19053  004E08  0012               	return		;funcret
 19054  004E0A                     __end_of_i2cLowSda:
 19055                           	opt stack 0
 19056                           tblptru	equ	0xFF8
 19057                           tblptrh	equ	0xFF7
 19058                           tblptrl	equ	0xFF6
 19059                           tablat	equ	0xFF5
 19060                           prodh	equ	0xFF4
 19061                           prodl	equ	0xFF3
 19062                           intcon	equ	0xFF2
 19063                           intcon2	equ	0xFF1
 19064                           intcon3	equ	0xFF0
 19065                           postinc0	equ	0xFEE
 19066                           wreg	equ	0xFE8
 19067                           postdec1	equ	0xFE5
 19068                           plusw1	equ	0xFE3
 19069                           fsr1l	equ	0xFE1
 19070                           indf2	equ	0xFDF
 19071                           postinc2	equ	0xFDE
 19072                           postdec2	equ	0xFDD
 19073                           plusw2	equ	0xFDB
 19074                           fsr2h	equ	0xFDA
 19075                           fsr2l	equ	0xFD9
 19076                           status	equ	0xFD8
 19077                           
 19078 ;; *************** function _i2cLowScl *****************
 19079 ;; Defined at:
 19080 ;;		line 111 in file "I2C_Soft.c"
 19081 ;; Parameters:    Size  Location     Type
 19082 ;;		None
 19083 ;; Auto vars:     Size  Location     Type
 19084 ;;		None
 19085 ;; Return value:  Size  Location     Type
 19086 ;;		None               void
 19087 ;; Registers used:
 19088 ;;		None
 19089 ;; Tracked objects:
 19090 ;;		On entry : 0/0
 19091 ;;		On exit  : 0/0
 19092 ;;		Unchanged: 0/0
 19093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19098 ;;Total ram usage:        0 bytes
 19099 ;; Hardware stack levels used:    1
 19100 ;; Hardware stack levels required when called:    3
 19101 ;; This function calls:
 19102 ;;		Nothing
 19103 ;; This function is called by:
 19104 ;;		_I2C_Read
 19105 ;;		_I2C_Write
 19106 ;;		_i2cNack
 19107 ;;		_i2cAck
 19108 ;;		_I2C_Start
 19109 ;;		_I2C_ReStart
 19110 ;;		_I2C_Stop
 19111 ;; This function uses a non-reentrant model
 19112 ;;
 19113                           
 19114                           	psect	text91
 19115  004E14                     __ptext91:
 19116                           	opt stack 0
 19117  004E14                     _i2cLowScl:
 19118                           	opt stack 23
 19119                           
 19120                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 19121                           
 19122                           ;incstack = 0
 19123  004E14  9881               	bcf	3969,4,c	;volatile
 19124                           
 19125                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 19126  004E16  9893               	bcf	3987,4,c	;volatile
 19127                           
 19128                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 19129  004E18  D000               	nop2		;2 cycle nop
 19130  004E1A  0012               	return		;funcret
 19131  004E1C                     __end_of_i2cLowScl:
 19132                           	opt stack 0
 19133                           tblptru	equ	0xFF8
 19134                           tblptrh	equ	0xFF7
 19135                           tblptrl	equ	0xFF6
 19136                           tablat	equ	0xFF5
 19137                           prodh	equ	0xFF4
 19138                           prodl	equ	0xFF3
 19139                           intcon	equ	0xFF2
 19140                           intcon2	equ	0xFF1
 19141                           intcon3	equ	0xFF0
 19142                           postinc0	equ	0xFEE
 19143                           wreg	equ	0xFE8
 19144                           postdec1	equ	0xFE5
 19145                           plusw1	equ	0xFE3
 19146                           fsr1l	equ	0xFE1
 19147                           indf2	equ	0xFDF
 19148                           postinc2	equ	0xFDE
 19149                           postdec2	equ	0xFDD
 19150                           plusw2	equ	0xFDB
 19151                           fsr2h	equ	0xFDA
 19152                           fsr2l	equ	0xFD9
 19153                           status	equ	0xFD8
 19154                           
 19155 ;; *************** function _i2cHighSda *****************
 19156 ;; Defined at:
 19157 ;;		line 92 in file "I2C_Soft.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;		None
 19160 ;; Auto vars:     Size  Location     Type
 19161 ;;		None
 19162 ;; Return value:  Size  Location     Type
 19163 ;;		None               void
 19164 ;; Registers used:
 19165 ;;		None
 19166 ;; Tracked objects:
 19167 ;;		On entry : 0/0
 19168 ;;		On exit  : 0/0
 19169 ;;		Unchanged: 0/0
 19170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;Total ram usage:        0 bytes
 19176 ;; Hardware stack levels used:    1
 19177 ;; Hardware stack levels required when called:    3
 19178 ;; This function calls:
 19179 ;;		Nothing
 19180 ;; This function is called by:
 19181 ;;		_I2C_Init
 19182 ;;		_I2C_Read
 19183 ;;		_I2C_Write
 19184 ;;		_i2cAck
 19185 ;;		_I2C_Start
 19186 ;;		_I2C_ReStart
 19187 ;;		_I2C_Stop
 19188 ;; This function uses a non-reentrant model
 19189 ;;
 19190                           
 19191                           	psect	text92
 19192  004E1C                     __ptext92:
 19193                           	opt stack 0
 19194  004E1C                     _i2cHighSda:
 19195                           	opt stack 23
 19196                           
 19197                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
 19198                           
 19199                           ;incstack = 0
 19200  004E1C  8A93               	bsf	3987,5,c	;volatile
 19201                           
 19202                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19203  004E1E  D000               	nop2		;2 cycle nop
 19204  004E20  D000               	nop2		;2 cycle nop
 19205  004E22  0012               	return		;funcret
 19206  004E24                     __end_of_i2cHighSda:
 19207                           	opt stack 0
 19208                           tblptru	equ	0xFF8
 19209                           tblptrh	equ	0xFF7
 19210                           tblptrl	equ	0xFF6
 19211                           tablat	equ	0xFF5
 19212                           prodh	equ	0xFF4
 19213                           prodl	equ	0xFF3
 19214                           intcon	equ	0xFF2
 19215                           intcon2	equ	0xFF1
 19216                           intcon3	equ	0xFF0
 19217                           postinc0	equ	0xFEE
 19218                           wreg	equ	0xFE8
 19219                           postdec1	equ	0xFE5
 19220                           plusw1	equ	0xFE3
 19221                           fsr1l	equ	0xFE1
 19222                           indf2	equ	0xFDF
 19223                           postinc2	equ	0xFDE
 19224                           postdec2	equ	0xFDD
 19225                           plusw2	equ	0xFDB
 19226                           fsr2h	equ	0xFDA
 19227                           fsr2l	equ	0xFD9
 19228                           status	equ	0xFD8
 19229                           
 19230 ;; *************** function _i2cHighScl *****************
 19231 ;; Defined at:
 19232 ;;		line 105 in file "I2C_Soft.c"
 19233 ;; Parameters:    Size  Location     Type
 19234 ;;		None
 19235 ;; Auto vars:     Size  Location     Type
 19236 ;;		None
 19237 ;; Return value:  Size  Location     Type
 19238 ;;		None               void
 19239 ;; Registers used:
 19240 ;;		wreg
 19241 ;; Tracked objects:
 19242 ;;		On entry : 0/0
 19243 ;;		On exit  : 0/0
 19244 ;;		Unchanged: 0/0
 19245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19250 ;;Total ram usage:        0 bytes
 19251 ;; Hardware stack levels used:    1
 19252 ;; Hardware stack levels required when called:    3
 19253 ;; This function calls:
 19254 ;;		Nothing
 19255 ;; This function is called by:
 19256 ;;		_I2C_Init
 19257 ;;		_I2C_Read
 19258 ;;		_I2C_Write
 19259 ;;		_i2cNack
 19260 ;;		_i2cAck
 19261 ;;		_I2C_Start
 19262 ;;		_I2C_ReStart
 19263 ;;		_I2C_Stop
 19264 ;; This function uses a non-reentrant model
 19265 ;;
 19266                           
 19267                           	psect	text93
 19268  004DD4                     __ptext93:
 19269                           	opt stack 0
 19270  004DD4                     _i2cHighScl:
 19271                           	opt stack 23
 19272                           
 19273                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 19274                           
 19275                           ;incstack = 0
 19276  004DD4  8893               	bsf	3987,4,c	;volatile
 19277                           
 19278                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 19279  004DD6  0E06               	movlw	6
 19280  004DD8                     u9147:
 19281  004DD8  2EE8               	decfsz	wreg,f,c
 19282  004DDA  D7FE               	goto	u9147
 19283  004DDC  D000               	nop2		;nop
 19284  004DDE  0012               	return		;funcret
 19285  004DE0                     __end_of_i2cHighScl:
 19286                           	opt stack 0
 19287                           tblptru	equ	0xFF8
 19288                           tblptrh	equ	0xFF7
 19289                           tblptrl	equ	0xFF6
 19290                           tablat	equ	0xFF5
 19291                           prodh	equ	0xFF4
 19292                           prodl	equ	0xFF3
 19293                           intcon	equ	0xFF2
 19294                           intcon2	equ	0xFF1
 19295                           intcon3	equ	0xFF0
 19296                           postinc0	equ	0xFEE
 19297                           wreg	equ	0xFE8
 19298                           postdec1	equ	0xFE5
 19299                           plusw1	equ	0xFE3
 19300                           fsr1l	equ	0xFE1
 19301                           indf2	equ	0xFDF
 19302                           postinc2	equ	0xFDE
 19303                           postdec2	equ	0xFDD
 19304                           plusw2	equ	0xFDB
 19305                           fsr2h	equ	0xFDA
 19306                           fsr2l	equ	0xFD9
 19307                           status	equ	0xFD8
 19308                           
 19309 ;; *************** function _Do_Change_Fan_Timer_Mode_Plus *****************
 19310 ;; Defined at:
 19311 ;;		line 144 in file "Fan_Support.c"
 19312 ;; Parameters:    Size  Location     Type
 19313 ;;		None
 19314 ;; Auto vars:     Size  Location     Type
 19315 ;;		None
 19316 ;; Return value:  Size  Location     Type
 19317 ;;		None               void
 19318 ;; Registers used:
 19319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19320 ;; Tracked objects:
 19321 ;;		On entry : 0/0
 19322 ;;		On exit  : 0/0
 19323 ;;		Unchanged: 0/0
 19324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19329 ;;Total ram usage:        0 bytes
 19330 ;; Hardware stack levels used:    1
 19331 ;; Hardware stack levels required when called:    7
 19332 ;; This function calls:
 19333 ;;		_Do_Beep_Bad
 19334 ;;		_Do_Beep_Good
 19335 ;; This function is called by:
 19336 ;;		_main
 19337 ;; This function uses a non-reentrant model
 19338 ;;
 19339                           
 19340                           	psect	text94
 19341  004924                     __ptext94:
 19342                           	opt stack 0
 19343  004924                     _Do_Change_Fan_Timer_Mode_Plus:
 19344                           	opt stack 23
 19345                           
 19346                           ;Fan_Support.c: 146: if (FAN_TIMER_MODE < 3)
 19347                           
 19348                           ;incstack = 0
 19349  004924  0E03               	movlw	3
 19350  004926  6060               	cpfslt	_FAN_TIMER_MODE,c
 19351  004928  D00F               	goto	l9942
 19352                           
 19353                           ;Fan_Support.c: 147: {
 19354                           ;Fan_Support.c: 148: FAN_TIMER_MODE++;
 19355  00492A  2A60               	incf	_FAN_TIMER_MODE,f,c
 19356                           
 19357                           ;Fan_Support.c: 149: FAN_TIMER_TIME= Timer_Table[FAN_TIMER_MODE];
 19358  00492C  5060               	movf	_FAN_TIMER_MODE,w,c
 19359  00492E  0D01               	mullw	1
 19360  004930  0E38               	movlw	low _Timer_Table
 19361  004932  24F3               	addwf	prodl,w,c
 19362  004934  6ED9               	movwf	fsr2l,c
 19363  004936  0E01               	movlw	high _Timer_Table
 19364  004938  20F4               	addwfc	prodh,w,c
 19365  00493A  6EDA               	movwf	fsr2h,c
 19366  00493C  50DF               	movf	indf2,w,c
 19367  00493E  0100               	movlb	0	; () banked
 19368  004940  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;Fan_Support.c: 150: Do_Beep_Good();
 19372  004942  ECE8  F025         	call	_Do_Beep_Good	;wreg free
 19373                           
 19374                           ;Fan_Support.c: 151: }
 19375  004946  D003               	goto	l77
 19376  004948                     l9942:
 19377                           
 19378                           ;Fan_Support.c: 152: else Do_Beep_Bad();
 19379  004948  ECF6  F025         	call	_Do_Beep_Bad	;wreg free
 19380  00494C  D000               	goto	l77
 19381  00494E                     l77:
 19382  00494E  0012               	return		;funcret
 19383  004950                     __end_of_Do_Change_Fan_Timer_Mode_Plus:
 19384                           	opt stack 0
 19385                           tblptru	equ	0xFF8
 19386                           tblptrh	equ	0xFF7
 19387                           tblptrl	equ	0xFF6
 19388                           tablat	equ	0xFF5
 19389                           prodh	equ	0xFF4
 19390                           prodl	equ	0xFF3
 19391                           intcon	equ	0xFF2
 19392                           intcon2	equ	0xFF1
 19393                           intcon3	equ	0xFF0
 19394                           postinc0	equ	0xFEE
 19395                           wreg	equ	0xFE8
 19396                           postdec1	equ	0xFE5
 19397                           plusw1	equ	0xFE3
 19398                           fsr1l	equ	0xFE1
 19399                           indf2	equ	0xFDF
 19400                           postinc2	equ	0xFDE
 19401                           postdec2	equ	0xFDD
 19402                           plusw2	equ	0xFDB
 19403                           fsr2h	equ	0xFDA
 19404                           fsr2l	equ	0xFD9
 19405                           status	equ	0xFD8
 19406                           
 19407 ;; *************** function _Do_Change_Fan_Timer_Mode_Minus *****************
 19408 ;; Defined at:
 19409 ;;		line 156 in file "Fan_Support.c"
 19410 ;; Parameters:    Size  Location     Type
 19411 ;;		None
 19412 ;; Auto vars:     Size  Location     Type
 19413 ;;		None
 19414 ;; Return value:  Size  Location     Type
 19415 ;;		None               void
 19416 ;; Registers used:
 19417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19418 ;; Tracked objects:
 19419 ;;		On entry : 0/0
 19420 ;;		On exit  : 0/0
 19421 ;;		Unchanged: 0/0
 19422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19427 ;;Total ram usage:        0 bytes
 19428 ;; Hardware stack levels used:    1
 19429 ;; Hardware stack levels required when called:    7
 19430 ;; This function calls:
 19431 ;;		_Do_Beep_Bad
 19432 ;;		_Do_Beep_Good
 19433 ;; This function is called by:
 19434 ;;		_main
 19435 ;; This function uses a non-reentrant model
 19436 ;;
 19437                           
 19438                           	psect	text95
 19439  004950                     __ptext95:
 19440                           	opt stack 0
 19441  004950                     _Do_Change_Fan_Timer_Mode_Minus:
 19442                           	opt stack 23
 19443                           
 19444                           ;Fan_Support.c: 158: if (FAN_TIMER_MODE == 0)
 19445                           
 19446                           ;incstack = 0
 19447  004950  5060               	movf	_FAN_TIMER_MODE,w,c
 19448  004952  A4D8               	btfss	status,2,c
 19449  004954  D003               	goto	l9948
 19450                           
 19451                           ;Fan_Support.c: 159: {
 19452                           ;Fan_Support.c: 160: Do_Beep_Bad();
 19453  004956  ECF6  F025         	call	_Do_Beep_Bad	;wreg free
 19454                           
 19455                           ;Fan_Support.c: 161: }
 19456  00495A  D00F               	goto	l82
 19457  00495C                     l9948:
 19458                           
 19459                           ;Fan_Support.c: 162: else
 19460                           ;Fan_Support.c: 163: {
 19461                           ;Fan_Support.c: 164: FAN_TIMER_MODE--;
 19462  00495C  0660               	decf	_FAN_TIMER_MODE,f,c
 19463                           
 19464                           ;Fan_Support.c: 165: FAN_TIMER_TIME= Timer_Table[FAN_TIMER_MODE];
 19465  00495E  5060               	movf	_FAN_TIMER_MODE,w,c
 19466  004960  0D01               	mullw	1
 19467  004962  0E38               	movlw	low _Timer_Table
 19468  004964  24F3               	addwf	prodl,w,c
 19469  004966  6ED9               	movwf	fsr2l,c
 19470  004968  0E01               	movlw	high _Timer_Table
 19471  00496A  20F4               	addwfc	prodh,w,c
 19472  00496C  6EDA               	movwf	fsr2h,c
 19473  00496E  50DF               	movf	indf2,w,c
 19474  004970  0100               	movlb	0	; () banked
 19475  004972  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
 19476                           
 19477                           ; BSR set to: 0
 19478                           ;Fan_Support.c: 166: Do_Beep_Good();
 19479  004974  ECE8  F025         	call	_Do_Beep_Good	;wreg free
 19480  004978  D000               	goto	l82
 19481  00497A                     l82:
 19482  00497A  0012               	return		;funcret
 19483  00497C                     __end_of_Do_Change_Fan_Timer_Mode_Minus:
 19484                           	opt stack 0
 19485                           tblptru	equ	0xFF8
 19486                           tblptrh	equ	0xFF7
 19487                           tblptrl	equ	0xFF6
 19488                           tablat	equ	0xFF5
 19489                           prodh	equ	0xFF4
 19490                           prodl	equ	0xFF3
 19491                           intcon	equ	0xFF2
 19492                           intcon2	equ	0xFF1
 19493                           intcon3	equ	0xFF0
 19494                           postinc0	equ	0xFEE
 19495                           wreg	equ	0xFE8
 19496                           postdec1	equ	0xFE5
 19497                           plusw1	equ	0xFE3
 19498                           fsr1l	equ	0xFE1
 19499                           indf2	equ	0xFDF
 19500                           postinc2	equ	0xFDE
 19501                           postdec2	equ	0xFDD
 19502                           plusw2	equ	0xFDB
 19503                           fsr2h	equ	0xFDA
 19504                           fsr2l	equ	0xFD9
 19505                           status	equ	0xFD8
 19506                           
 19507 ;; *************** function _Do_Beep_Good *****************
 19508 ;; Defined at:
 19509 ;;		line 77 in file "utils.c"
 19510 ;; Parameters:    Size  Location     Type
 19511 ;;		None
 19512 ;; Auto vars:     Size  Location     Type
 19513 ;;		None
 19514 ;; Return value:  Size  Location     Type
 19515 ;;		None               void
 19516 ;; Registers used:
 19517 ;;		wreg, status,2, status,0, cstack
 19518 ;; Tracked objects:
 19519 ;;		On entry : 0/0
 19520 ;;		On exit  : 0/0
 19521 ;;		Unchanged: 0/0
 19522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19527 ;;Total ram usage:        0 bytes
 19528 ;; Hardware stack levels used:    1
 19529 ;; Hardware stack levels required when called:    6
 19530 ;; This function calls:
 19531 ;;		_Activate_Buzzer_2KHz
 19532 ;;		_Deactivate_Buzzer
 19533 ;;		_Wait_Half_Sec
 19534 ;;		_do_update_pwm
 19535 ;; This function is called by:
 19536 ;;		_Do_Change_Fan_Timer_Mode_Plus
 19537 ;;		_Do_Change_Fan_Timer_Mode_Minus
 19538 ;;		_main
 19539 ;;		_Setup_Fan_Temp
 19540 ;;		_Do_Setup_Time
 19541 ;; This function uses a non-reentrant model
 19542 ;;
 19543                           
 19544                           	psect	text96
 19545  004BD0                     __ptext96:
 19546                           	opt stack 0
 19547  004BD0                     _Do_Beep_Good:
 19548                           	opt stack 23
 19549                           
 19550                           ;utils.c: 79: PORTDbits.RD3 = 1;
 19551                           
 19552                           ;incstack = 0
 19553  004BD0  8683               	bsf	3971,3,c	;volatile
 19554                           
 19555                           ;utils.c: 80: Activate_Buzzer_2KHz();
 19556  004BD2  ECA9  F026         	call	_Activate_Buzzer_2KHz	;wreg free
 19557                           
 19558                           ;utils.c: 81: Wait_Half_Sec();
 19559  004BD6  EC12  F026         	call	_Wait_Half_Sec	;wreg free
 19560                           
 19561                           ;utils.c: 82: PORTDbits.RD3 = 0;
 19562  004BDA  9683               	bcf	3971,3,c	;volatile
 19563                           
 19564                           ;utils.c: 83: Deactivate_Buzzer();
 19565  004BDC  EC12  F027         	call	_Deactivate_Buzzer	;wreg free
 19566                           
 19567                           ;utils.c: 84: Wait_Half_Sec();
 19568  004BE0  EC12  F026         	call	_Wait_Half_Sec	;wreg free
 19569                           
 19570                           ;utils.c: 85: do_update_pwm(duty_cycle);
 19571  004BE4  5064               	movf	_duty_cycle,w,c
 19572  004BE6  EC46  F01D         	call	_do_update_pwm
 19573  004BEA  0012               	return		;funcret
 19574  004BEC                     __end_of_Do_Beep_Good:
 19575                           	opt stack 0
 19576                           tblptru	equ	0xFF8
 19577                           tblptrh	equ	0xFF7
 19578                           tblptrl	equ	0xFF6
 19579                           tablat	equ	0xFF5
 19580                           prodh	equ	0xFF4
 19581                           prodl	equ	0xFF3
 19582                           intcon	equ	0xFF2
 19583                           intcon2	equ	0xFF1
 19584                           intcon3	equ	0xFF0
 19585                           postinc0	equ	0xFEE
 19586                           wreg	equ	0xFE8
 19587                           postdec1	equ	0xFE5
 19588                           plusw1	equ	0xFE3
 19589                           fsr1l	equ	0xFE1
 19590                           indf2	equ	0xFDF
 19591                           postinc2	equ	0xFDE
 19592                           postdec2	equ	0xFDD
 19593                           plusw2	equ	0xFDB
 19594                           fsr2h	equ	0xFDA
 19595                           fsr2l	equ	0xFD9
 19596                           status	equ	0xFD8
 19597                           
 19598 ;; *************** function _Activate_Buzzer_2KHz *****************
 19599 ;; Defined at:
 19600 ;;		line 120 in file "utils.c"
 19601 ;; Parameters:    Size  Location     Type
 19602 ;;		None
 19603 ;; Auto vars:     Size  Location     Type
 19604 ;;		None
 19605 ;; Return value:  Size  Location     Type
 19606 ;;		None               void
 19607 ;; Registers used:
 19608 ;;		wreg, status,2
 19609 ;; Tracked objects:
 19610 ;;		On entry : 0/0
 19611 ;;		On exit  : 0/0
 19612 ;;		Unchanged: 0/0
 19613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19618 ;;Total ram usage:        0 bytes
 19619 ;; Hardware stack levels used:    1
 19620 ;; Hardware stack levels required when called:    3
 19621 ;; This function calls:
 19622 ;;		Nothing
 19623 ;; This function is called by:
 19624 ;;		_Do_Beep_Good
 19625 ;; This function uses a non-reentrant model
 19626 ;;
 19627                           
 19628                           	psect	text97
 19629  004D52                     __ptext97:
 19630                           	opt stack 0
 19631  004D52                     _Activate_Buzzer_2KHz:
 19632                           	opt stack 25
 19633                           
 19634                           ;utils.c: 122: PR2 = 0b11111001 ;
 19635                           
 19636                           ;incstack = 0
 19637  004D52  0EF9               	movlw	249
 19638  004D54  6ECB               	movwf	4043,c	;volatile
 19639                           
 19640                           ;utils.c: 123: T2CON = 0b00000101 ;
 19641  004D56  0E05               	movlw	5
 19642  004D58  6ECA               	movwf	4042,c	;volatile
 19643                           
 19644                           ;utils.c: 124: CCPR2L = 0b01111100 ;
 19645  004D5A  0E7C               	movlw	124
 19646  004D5C  6EBB               	movwf	4027,c	;volatile
 19647                           
 19648                           ;utils.c: 125: CCP2CON = 0b00111100 ;
 19649  004D5E  0E3C               	movlw	60
 19650  004D60  6EBA               	movwf	4026,c	;volatile
 19651  004D62  0012               	return		;funcret
 19652  004D64                     __end_of_Activate_Buzzer_2KHz:
 19653                           	opt stack 0
 19654                           tblptru	equ	0xFF8
 19655                           tblptrh	equ	0xFF7
 19656                           tblptrl	equ	0xFF6
 19657                           tablat	equ	0xFF5
 19658                           prodh	equ	0xFF4
 19659                           prodl	equ	0xFF3
 19660                           intcon	equ	0xFF2
 19661                           intcon2	equ	0xFF1
 19662                           intcon3	equ	0xFF0
 19663                           postinc0	equ	0xFEE
 19664                           wreg	equ	0xFE8
 19665                           postdec1	equ	0xFE5
 19666                           plusw1	equ	0xFE3
 19667                           fsr1l	equ	0xFE1
 19668                           indf2	equ	0xFDF
 19669                           postinc2	equ	0xFDE
 19670                           postdec2	equ	0xFDD
 19671                           plusw2	equ	0xFDB
 19672                           fsr2h	equ	0xFDA
 19673                           fsr2l	equ	0xFD9
 19674                           status	equ	0xFD8
 19675                           
 19676 ;; *************** function _Do_Beep_Bad *****************
 19677 ;; Defined at:
 19678 ;;		line 88 in file "utils.c"
 19679 ;; Parameters:    Size  Location     Type
 19680 ;;		None
 19681 ;; Auto vars:     Size  Location     Type
 19682 ;;		None
 19683 ;; Return value:  Size  Location     Type
 19684 ;;		None               void
 19685 ;; Registers used:
 19686 ;;		wreg, status,2, status,0, cstack
 19687 ;; Tracked objects:
 19688 ;;		On entry : 0/0
 19689 ;;		On exit  : 0/0
 19690 ;;		Unchanged: 0/0
 19691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19696 ;;Total ram usage:        0 bytes
 19697 ;; Hardware stack levels used:    1
 19698 ;; Hardware stack levels required when called:    6
 19699 ;; This function calls:
 19700 ;;		_Activate_Buzzer_500Hz
 19701 ;;		_Deactivate_Buzzer
 19702 ;;		_Wait_Half_Sec
 19703 ;;		_do_update_pwm
 19704 ;; This function is called by:
 19705 ;;		_Do_Change_Fan_Timer_Mode_Plus
 19706 ;;		_Do_Change_Fan_Timer_Mode_Minus
 19707 ;;		_main
 19708 ;;		_Setup_Fan_Temp
 19709 ;;		_Do_Setup_Time
 19710 ;; This function uses a non-reentrant model
 19711 ;;
 19712                           
 19713                           	psect	text98
 19714  004BEC                     __ptext98:
 19715                           	opt stack 0
 19716  004BEC                     _Do_Beep_Bad:
 19717                           	opt stack 23
 19718                           
 19719                           ;utils.c: 90: PORTDbits.RD3 = 1;
 19720                           
 19721                           ;incstack = 0
 19722  004BEC  8683               	bsf	3971,3,c	;volatile
 19723                           
 19724                           ;utils.c: 91: Activate_Buzzer_500Hz();
 19725  004BEE  ECB2  F026         	call	_Activate_Buzzer_500Hz	;wreg free
 19726                           
 19727                           ;utils.c: 92: Wait_Half_Sec();
 19728  004BF2  EC12  F026         	call	_Wait_Half_Sec	;wreg free
 19729                           
 19730                           ;utils.c: 93: PORTDbits.RD3 = 0;
 19731  004BF6  9683               	bcf	3971,3,c	;volatile
 19732                           
 19733                           ;utils.c: 94: Deactivate_Buzzer();
 19734  004BF8  EC12  F027         	call	_Deactivate_Buzzer	;wreg free
 19735                           
 19736                           ;utils.c: 95: Wait_Half_Sec();
 19737  004BFC  EC12  F026         	call	_Wait_Half_Sec	;wreg free
 19738                           
 19739                           ;utils.c: 96: do_update_pwm(duty_cycle);
 19740  004C00  5064               	movf	_duty_cycle,w,c
 19741  004C02  EC46  F01D         	call	_do_update_pwm
 19742  004C06  0012               	return		;funcret
 19743  004C08                     __end_of_Do_Beep_Bad:
 19744                           	opt stack 0
 19745                           tblptru	equ	0xFF8
 19746                           tblptrh	equ	0xFF7
 19747                           tblptrl	equ	0xFF6
 19748                           tablat	equ	0xFF5
 19749                           prodh	equ	0xFF4
 19750                           prodl	equ	0xFF3
 19751                           intcon	equ	0xFF2
 19752                           intcon2	equ	0xFF1
 19753                           intcon3	equ	0xFF0
 19754                           postinc0	equ	0xFEE
 19755                           wreg	equ	0xFE8
 19756                           postdec1	equ	0xFE5
 19757                           plusw1	equ	0xFE3
 19758                           fsr1l	equ	0xFE1
 19759                           indf2	equ	0xFDF
 19760                           postinc2	equ	0xFDE
 19761                           postdec2	equ	0xFDD
 19762                           plusw2	equ	0xFDB
 19763                           fsr2h	equ	0xFDA
 19764                           fsr2l	equ	0xFD9
 19765                           status	equ	0xFD8
 19766                           
 19767 ;; *************** function _Activate_Buzzer_500Hz *****************
 19768 ;; Defined at:
 19769 ;;		line 112 in file "utils.c"
 19770 ;; Parameters:    Size  Location     Type
 19771 ;;		None
 19772 ;; Auto vars:     Size  Location     Type
 19773 ;;		None
 19774 ;; Return value:  Size  Location     Type
 19775 ;;		None               void
 19776 ;; Registers used:
 19777 ;;		wreg, status,2
 19778 ;; Tracked objects:
 19779 ;;		On entry : 0/0
 19780 ;;		On exit  : 0/0
 19781 ;;		Unchanged: 0/0
 19782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19787 ;;Total ram usage:        0 bytes
 19788 ;; Hardware stack levels used:    1
 19789 ;; Hardware stack levels required when called:    3
 19790 ;; This function calls:
 19791 ;;		Nothing
 19792 ;; This function is called by:
 19793 ;;		_Do_Beep_Bad
 19794 ;; This function uses a non-reentrant model
 19795 ;;
 19796                           
 19797                           	psect	text99
 19798  004D64                     __ptext99:
 19799                           	opt stack 0
 19800  004D64                     _Activate_Buzzer_500Hz:
 19801                           	opt stack 25
 19802                           
 19803                           ;utils.c: 114: PR2 = 0b11111001 ;
 19804                           
 19805                           ;incstack = 0
 19806  004D64  0EF9               	movlw	249
 19807  004D66  6ECB               	movwf	4043,c	;volatile
 19808                           
 19809                           ;utils.c: 115: T2CON = 0b00000111 ;
 19810  004D68  0E07               	movlw	7
 19811  004D6A  6ECA               	movwf	4042,c	;volatile
 19812                           
 19813                           ;utils.c: 116: CCPR2L = 0b01111100 ;
 19814  004D6C  0E7C               	movlw	124
 19815  004D6E  6EBB               	movwf	4027,c	;volatile
 19816                           
 19817                           ;utils.c: 117: CCP2CON = 0b00111100 ;
 19818  004D70  0E3C               	movlw	60
 19819  004D72  6EBA               	movwf	4026,c	;volatile
 19820  004D74  0012               	return		;funcret
 19821  004D76                     __end_of_Activate_Buzzer_500Hz:
 19822                           	opt stack 0
 19823                           tblptru	equ	0xFF8
 19824                           tblptrh	equ	0xFF7
 19825                           tblptrl	equ	0xFF6
 19826                           tablat	equ	0xFF5
 19827                           prodh	equ	0xFF4
 19828                           prodl	equ	0xFF3
 19829                           intcon	equ	0xFF2
 19830                           intcon2	equ	0xFF1
 19831                           intcon3	equ	0xFF0
 19832                           postinc0	equ	0xFEE
 19833                           wreg	equ	0xFE8
 19834                           postdec1	equ	0xFE5
 19835                           plusw1	equ	0xFE3
 19836                           fsr1l	equ	0xFE1
 19837                           indf2	equ	0xFDF
 19838                           postinc2	equ	0xFDE
 19839                           postdec2	equ	0xFDD
 19840                           plusw2	equ	0xFDB
 19841                           fsr2h	equ	0xFDA
 19842                           fsr2l	equ	0xFD9
 19843                           status	equ	0xFD8
 19844                           
 19845 ;; *************** function _Decrease_Duty_Cycle *****************
 19846 ;; Defined at:
 19847 ;;		line 127 in file "Fan_Support.c"
 19848 ;; Parameters:    Size  Location     Type
 19849 ;;		None
 19850 ;; Auto vars:     Size  Location     Type
 19851 ;;		None
 19852 ;; Return value:  Size  Location     Type
 19853 ;;		None               void
 19854 ;; Registers used:
 19855 ;;		wreg, status,2, status,0, cstack
 19856 ;; Tracked objects:
 19857 ;;		On entry : 0/0
 19858 ;;		On exit  : 0/0
 19859 ;;		Unchanged: 0/0
 19860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19865 ;;Total ram usage:        0 bytes
 19866 ;; Hardware stack levels used:    1
 19867 ;; Hardware stack levels required when called:    7
 19868 ;; This function calls:
 19869 ;;		_Do_Beep
 19870 ;;		_do_update_pwm
 19871 ;; This function is called by:
 19872 ;;		_main
 19873 ;; This function uses a non-reentrant model
 19874 ;;
 19875                           
 19876                           	psect	text100
 19877  004A20                     __ptext100:
 19878                           	opt stack 0
 19879  004A20                     _Decrease_Duty_Cycle:
 19880                           	opt stack 23
 19881                           
 19882                           ;Fan_Support.c: 131: if (duty_cycle == 0)
 19883                           
 19884                           ;incstack = 0
 19885  004A20  5064               	movf	_duty_cycle,w,c
 19886  004A22  A4D8               	btfss	status,2,c
 19887  004A24  D008               	goto	l9930
 19888                           
 19889                           ;Fan_Support.c: 132: {
 19890                           ;Fan_Support.c: 133: Do_Beep();
 19891  004A26  EC04  F026         	call	_Do_Beep	;wreg free
 19892                           
 19893                           ;Fan_Support.c: 134: Do_Beep();
 19894  004A2A  EC04  F026         	call	_Do_Beep	;wreg free
 19895                           
 19896                           ;Fan_Support.c: 135: do_update_pwm(duty_cycle);
 19897  004A2E  5064               	movf	_duty_cycle,w,c
 19898  004A30  EC46  F01D         	call	_do_update_pwm
 19899                           
 19900                           ;Fan_Support.c: 136: }
 19901  004A34  D007               	goto	l72
 19902  004A36                     l9930:
 19903                           
 19904                           ;Fan_Support.c: 137: else
 19905                           ;Fan_Support.c: 138: {
 19906                           ;Fan_Support.c: 139: duty_cycle = duty_cycle - 5;
 19907  004A36  5064               	movf	_duty_cycle,w,c
 19908  004A38  0FFB               	addlw	251
 19909  004A3A  6E64               	movwf	_duty_cycle,c
 19910                           
 19911                           ;Fan_Support.c: 140: do_update_pwm(duty_cycle);
 19912  004A3C  5064               	movf	_duty_cycle,w,c
 19913  004A3E  EC46  F01D         	call	_do_update_pwm
 19914  004A42  D000               	goto	l72
 19915  004A44                     l72:
 19916  004A44  0012               	return		;funcret
 19917  004A46                     __end_of_Decrease_Duty_Cycle:
 19918                           	opt stack 0
 19919                           tblptru	equ	0xFF8
 19920                           tblptrh	equ	0xFF7
 19921                           tblptrl	equ	0xFF6
 19922                           tablat	equ	0xFF5
 19923                           prodh	equ	0xFF4
 19924                           prodl	equ	0xFF3
 19925                           intcon	equ	0xFF2
 19926                           intcon2	equ	0xFF1
 19927                           intcon3	equ	0xFF0
 19928                           postinc0	equ	0xFEE
 19929                           wreg	equ	0xFE8
 19930                           postdec1	equ	0xFE5
 19931                           plusw1	equ	0xFE3
 19932                           fsr1l	equ	0xFE1
 19933                           indf2	equ	0xFDF
 19934                           postinc2	equ	0xFDE
 19935                           postdec2	equ	0xFDD
 19936                           plusw2	equ	0xFDB
 19937                           fsr2h	equ	0xFDA
 19938                           fsr2l	equ	0xFD9
 19939                           status	equ	0xFD8
 19940                           
 19941 ;; *************** function _Do_Beep *****************
 19942 ;; Defined at:
 19943 ;;		line 66 in file "utils.c"
 19944 ;; Parameters:    Size  Location     Type
 19945 ;;		None
 19946 ;; Auto vars:     Size  Location     Type
 19947 ;;		None
 19948 ;; Return value:  Size  Location     Type
 19949 ;;		None               void
 19950 ;; Registers used:
 19951 ;;		wreg, status,2, status,0, cstack
 19952 ;; Tracked objects:
 19953 ;;		On entry : 0/0
 19954 ;;		On exit  : 0/0
 19955 ;;		Unchanged: 0/0
 19956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19961 ;;Total ram usage:        0 bytes
 19962 ;; Hardware stack levels used:    1
 19963 ;; Hardware stack levels required when called:    6
 19964 ;; This function calls:
 19965 ;;		_Activate_Buzzer
 19966 ;;		_Deactivate_Buzzer
 19967 ;;		_Wait_Half_Sec
 19968 ;;		_do_update_pwm
 19969 ;; This function is called by:
 19970 ;;		_Increase_Duty_Cycle
 19971 ;;		_Decrease_Duty_Cycle
 19972 ;; This function uses a non-reentrant model
 19973 ;;
 19974                           
 19975                           	psect	text101
 19976  004C08                     __ptext101:
 19977                           	opt stack 0
 19978  004C08                     _Do_Beep:
 19979                           	opt stack 23
 19980                           
 19981                           ;utils.c: 68: PORTDbits.RD3 = 1;
 19982                           
 19983                           ;incstack = 0
 19984  004C08  8683               	bsf	3971,3,c	;volatile
 19985                           
 19986                           ;utils.c: 69: Activate_Buzzer();
 19987  004C0A  ECBB  F026         	call	_Activate_Buzzer	;wreg free
 19988                           
 19989                           ;utils.c: 70: Wait_Half_Sec();
 19990  004C0E  EC12  F026         	call	_Wait_Half_Sec	;wreg free
 19991                           
 19992                           ;utils.c: 71: PORTDbits.RD3 = 0;
 19993  004C12  9683               	bcf	3971,3,c	;volatile
 19994                           
 19995                           ;utils.c: 72: Deactivate_Buzzer();
 19996  004C14  EC12  F027         	call	_Deactivate_Buzzer	;wreg free
 19997                           
 19998                           ;utils.c: 73: Wait_Half_Sec();
 19999  004C18  EC12  F026         	call	_Wait_Half_Sec	;wreg free
 20000                           
 20001                           ;utils.c: 74: do_update_pwm(duty_cycle);
 20002  004C1C  5064               	movf	_duty_cycle,w,c
 20003  004C1E  EC46  F01D         	call	_do_update_pwm
 20004  004C22  0012               	return		;funcret
 20005  004C24                     __end_of_Do_Beep:
 20006                           	opt stack 0
 20007                           tblptru	equ	0xFF8
 20008                           tblptrh	equ	0xFF7
 20009                           tblptrl	equ	0xFF6
 20010                           tablat	equ	0xFF5
 20011                           prodh	equ	0xFF4
 20012                           prodl	equ	0xFF3
 20013                           intcon	equ	0xFF2
 20014                           intcon2	equ	0xFF1
 20015                           intcon3	equ	0xFF0
 20016                           postinc0	equ	0xFEE
 20017                           wreg	equ	0xFE8
 20018                           postdec1	equ	0xFE5
 20019                           plusw1	equ	0xFE3
 20020                           fsr1l	equ	0xFE1
 20021                           indf2	equ	0xFDF
 20022                           postinc2	equ	0xFDE
 20023                           postdec2	equ	0xFDD
 20024                           plusw2	equ	0xFDB
 20025                           fsr2h	equ	0xFDA
 20026                           fsr2l	equ	0xFD9
 20027                           status	equ	0xFD8
 20028                           
 20029 ;; *************** function _do_update_pwm *****************
 20030 ;; Defined at:
 20031 ;;		line 142 in file "utils.c"
 20032 ;; Parameters:    Size  Location     Type
 20033 ;;  duty_cycle      1    wreg     unsigned char 
 20034 ;; Auto vars:     Size  Location     Type
 20035 ;;  duty_cycle      1   66[COMRAM] unsigned char 
 20036 ;;  dc_f            3   63[COMRAM] float 
 20037 ;;  dc_I            2   67[COMRAM] int 
 20038 ;; Return value:  Size  Location     Type
 20039 ;;		None               void
 20040 ;; Registers used:
 20041 ;;		wreg, status,2, status,0, cstack
 20042 ;; Tracked objects:
 20043 ;;		On entry : 0/0
 20044 ;;		On exit  : 0/0
 20045 ;;		Unchanged: 0/0
 20046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20048 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20049 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20050 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20051 ;;Total ram usage:        9 bytes
 20052 ;; Hardware stack levels used:    1
 20053 ;; Hardware stack levels required when called:    5
 20054 ;; This function calls:
 20055 ;;		___ftdiv
 20056 ;;		___ftmul
 20057 ;;		___fttol
 20058 ;;		___lbtoft
 20059 ;; This function is called by:
 20060 ;;		_Monitor_Fan
 20061 ;;		_Turn_On_Fan
 20062 ;;		_Increase_Duty_Cycle
 20063 ;;		_Decrease_Duty_Cycle
 20064 ;;		_Do_Beep
 20065 ;;		_Do_Beep_Good
 20066 ;;		_Do_Beep_Bad
 20067 ;; This function uses a non-reentrant model
 20068 ;;
 20069                           
 20070                           	psect	text102
 20071  003A8C                     __ptext102:
 20072                           	opt stack 0
 20073  003A8C                     _do_update_pwm:
 20074                           	opt stack 23
 20075                           
 20076                           ;incstack = 0
 20077                           ;do_update_pwm@duty_cycle stored from wreg
 20078  003A8C  6E43               	movwf	do_update_pwm@duty_cycle,c
 20079                           
 20080                           ;utils.c: 144: float dc_f;
 20081                           ;utils.c: 145: int dc_I;
 20082                           ;utils.c: 146: PR2 = 0b00000100 ;
 20083  003A8E  0E04               	movlw	4
 20084  003A90  6ECB               	movwf	4043,c	;volatile
 20085                           
 20086                           ;utils.c: 147: T2CON = 0b00000111 ;
 20087  003A92  0E07               	movlw	7
 20088  003A94  6ECA               	movwf	4042,c	;volatile
 20089                           
 20090                           ;utils.c: 148: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 20091  003A96  0E00               	movlw	0
 20092  003A98  6E22               	movwf	___ftmul@f2,c
 20093  003A9A  0E80               	movlw	128
 20094  003A9C  6E23               	movwf	___ftmul@f2+1,c
 20095  003A9E  0E40               	movlw	64
 20096  003AA0  6E24               	movwf	___ftmul@f2+2,c
 20097  003AA2  5043               	movf	do_update_pwm@duty_cycle,w,c
 20098  003AA4  EC23  F025         	call	___lbtoft
 20099  003AA8  C019  F01F         	movff	?___lbtoft,___ftmul@f1
 20100  003AAC  C01A  F020         	movff	?___lbtoft+1,___ftmul@f1+1
 20101  003AB0  C01B  F021         	movff	?___lbtoft+2,___ftmul@f1+2
 20102  003AB4  EC00  F019         	call	___ftmul	;wreg free
 20103  003AB8  C01F  F02E         	movff	?___ftmul,___ftdiv@f1
 20104  003ABC  C020  F02F         	movff	?___ftmul+1,___ftdiv@f1+1
 20105  003AC0  C021  F030         	movff	?___ftmul+2,___ftdiv@f1+2
 20106  003AC4  0E00               	movlw	0
 20107  003AC6  6E31               	movwf	___ftdiv@f2,c
 20108  003AC8  0EA0               	movlw	160
 20109  003ACA  6E32               	movwf	___ftdiv@f2+1,c
 20110  003ACC  0E41               	movlw	65
 20111  003ACE  6E33               	movwf	___ftdiv@f2+2,c
 20112  003AD0  EC4E  F01B         	call	___ftdiv	;wreg free
 20113  003AD4  C02E  F040         	movff	?___ftdiv,do_update_pwm@dc_f
 20114  003AD8  C02F  F041         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 20115  003ADC  C030  F042         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 20116                           
 20117                           ;utils.c: 149: dc_I = (int) dc_f;
 20118  003AE0  C040  F02E         	movff	do_update_pwm@dc_f,___fttol@f1
 20119  003AE4  C041  F02F         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 20120  003AE8  C042  F030         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 20121  003AEC  EC6A  F01A         	call	___fttol	;wreg free
 20122  003AF0  C02E  F044         	movff	?___fttol,do_update_pwm@dc_I
 20123  003AF4  C02F  F045         	movff	?___fttol+1,do_update_pwm@dc_I+1
 20124                           
 20125                           ;utils.c: 150: if (dc_I > duty_cycle) dc_I++;
 20126  003AF8  5043               	movf	do_update_pwm@duty_cycle,w,c
 20127  003AFA  6E3D               	movwf	??_do_update_pwm& (0+255),c
 20128  003AFC  6A3E               	clrf	(??_do_update_pwm+1)& (0+255),c
 20129  003AFE  5044               	movf	do_update_pwm@dc_I,w,c
 20130  003B00  5C3D               	subwf	??_do_update_pwm,w,c
 20131  003B02  503E               	movf	??_do_update_pwm+1,w,c
 20132  003B04  0A80               	xorlw	128
 20133  003B06  6E3F               	movwf	(??_do_update_pwm+2)& (0+255),c
 20134  003B08  5045               	movf	do_update_pwm@dc_I+1,w,c
 20135  003B0A  0A80               	xorlw	128
 20136  003B0C  583F               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 20137  003B0E  B0D8               	btfsc	status,0,c
 20138  003B10  D003               	goto	l9484
 20139  003B12  4A44               	infsnz	do_update_pwm@dc_I,f,c
 20140  003B14  2A45               	incf	do_update_pwm@dc_I+1,f,c
 20141  003B16  D000               	goto	l9484
 20142  003B18                     l9484:
 20143                           
 20144                           ;utils.c: 151: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 20145  003B18  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 20146  003B1C  0E03               	movlw	3
 20147  003B1E  163D               	andwf	??_do_update_pwm,f,c
 20148  003B20  383D               	swapf	??_do_update_pwm,w,c
 20149  003B22  0BF0               	andlw	240
 20150  003B24  090C               	iorlw	12
 20151  003B26  6EBD               	movwf	4029,c	;volatile
 20152                           
 20153                           ;utils.c: 152: CCPR1L = (dc_I) >> 2;
 20154  003B28  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 20155  003B2C  C045  F03E         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 20156  003B30  343E               	rlcf	??_do_update_pwm+1,w,c
 20157  003B32  323E               	rrcf	??_do_update_pwm+1,f,c
 20158  003B34  323D               	rrcf	??_do_update_pwm,f,c
 20159  003B36  343E               	rlcf	??_do_update_pwm+1,w,c
 20160  003B38  323E               	rrcf	??_do_update_pwm+1,f,c
 20161  003B3A  323D               	rrcf	??_do_update_pwm,f,c
 20162  003B3C  503D               	movf	??_do_update_pwm,w,c
 20163  003B3E  6EBE               	movwf	4030,c	;volatile
 20164  003B40  0012               	return		;funcret
 20165  003B42                     __end_of_do_update_pwm:
 20166                           	opt stack 0
 20167                           tblptru	equ	0xFF8
 20168                           tblptrh	equ	0xFF7
 20169                           tblptrl	equ	0xFF6
 20170                           tablat	equ	0xFF5
 20171                           prodh	equ	0xFF4
 20172                           prodl	equ	0xFF3
 20173                           intcon	equ	0xFF2
 20174                           intcon2	equ	0xFF1
 20175                           intcon3	equ	0xFF0
 20176                           postinc0	equ	0xFEE
 20177                           wreg	equ	0xFE8
 20178                           postdec1	equ	0xFE5
 20179                           plusw1	equ	0xFE3
 20180                           fsr1l	equ	0xFE1
 20181                           indf2	equ	0xFDF
 20182                           postinc2	equ	0xFDE
 20183                           postdec2	equ	0xFDD
 20184                           plusw2	equ	0xFDB
 20185                           fsr2h	equ	0xFDA
 20186                           fsr2l	equ	0xFD9
 20187                           status	equ	0xFD8
 20188                           
 20189 ;; *************** function ___lbtoft *****************
 20190 ;; Defined at:
 20191 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 20192 ;; Parameters:    Size  Location     Type
 20193 ;;  c               1    wreg     unsigned char 
 20194 ;; Auto vars:     Size  Location     Type
 20195 ;;  c               1   27[COMRAM] unsigned char 
 20196 ;; Return value:  Size  Location     Type
 20197 ;;                  3   24[COMRAM] float 
 20198 ;; Registers used:
 20199 ;;		wreg, status,2, status,0, cstack
 20200 ;; Tracked objects:
 20201 ;;		On entry : 0/0
 20202 ;;		On exit  : 0/0
 20203 ;;		Unchanged: 0/0
 20204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20205 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20206 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20208 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20209 ;;Total ram usage:        4 bytes
 20210 ;; Hardware stack levels used:    1
 20211 ;; Hardware stack levels required when called:    4
 20212 ;; This function calls:
 20213 ;;		___ftpack
 20214 ;; This function is called by:
 20215 ;;		_do_update_pwm
 20216 ;; This function uses a non-reentrant model
 20217 ;;
 20218                           
 20219                           	psect	text103
 20220  004A46                     __ptext103:
 20221                           	opt stack 0
 20222  004A46                     ___lbtoft:
 20223                           	opt stack 23
 20224                           
 20225                           ;incstack = 0
 20226                           ;___lbtoft@c stored from wreg
 20227  004A46  6E1C               	movwf	___lbtoft@c,c
 20228  004A48  501C               	movf	___lbtoft@c,w,c
 20229  004A4A  6E11               	movwf	___ftpack@arg,c
 20230  004A4C  6A12               	clrf	___ftpack@arg+1,c
 20231  004A4E  6A13               	clrf	___ftpack@arg+2,c
 20232  004A50  0E8E               	movlw	142
 20233  004A52  6E14               	movwf	___ftpack@exp,c
 20234  004A54  0E00               	movlw	0
 20235  004A56  6E15               	movwf	___ftpack@sign,c
 20236  004A58  EC2D  F01C         	call	___ftpack	;wreg free
 20237  004A5C  C011  F019         	movff	?___ftpack,?___lbtoft
 20238  004A60  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 20239  004A64  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 20240  004A68  D000               	goto	l1995
 20241  004A6A                     l1995:
 20242  004A6A  0012               	return		;funcret
 20243  004A6C                     __end_of___lbtoft:
 20244                           	opt stack 0
 20245                           tblptru	equ	0xFF8
 20246                           tblptrh	equ	0xFF7
 20247                           tblptrl	equ	0xFF6
 20248                           tablat	equ	0xFF5
 20249                           prodh	equ	0xFF4
 20250                           prodl	equ	0xFF3
 20251                           intcon	equ	0xFF2
 20252                           intcon2	equ	0xFF1
 20253                           intcon3	equ	0xFF0
 20254                           postinc0	equ	0xFEE
 20255                           wreg	equ	0xFE8
 20256                           postdec1	equ	0xFE5
 20257                           plusw1	equ	0xFE3
 20258                           fsr1l	equ	0xFE1
 20259                           indf2	equ	0xFDF
 20260                           postinc2	equ	0xFDE
 20261                           postdec2	equ	0xFDD
 20262                           plusw2	equ	0xFDB
 20263                           fsr2h	equ	0xFDA
 20264                           fsr2l	equ	0xFD9
 20265                           status	equ	0xFD8
 20266                           
 20267 ;; *************** function ___fttol *****************
 20268 ;; Defined at:
 20269 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 20270 ;; Parameters:    Size  Location     Type
 20271 ;;  f1              3   45[COMRAM] float 
 20272 ;; Auto vars:     Size  Location     Type
 20273 ;;  lval            4   55[COMRAM] unsigned long 
 20274 ;;  exp1            1   59[COMRAM] unsigned char 
 20275 ;;  sign1           1   54[COMRAM] unsigned char 
 20276 ;; Return value:  Size  Location     Type
 20277 ;;                  4   45[COMRAM] long 
 20278 ;; Registers used:
 20279 ;;		wreg, status,2, status,0
 20280 ;; Tracked objects:
 20281 ;;		On entry : 0/0
 20282 ;;		On exit  : 0/0
 20283 ;;		Unchanged: 0/0
 20284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20285 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20286 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20287 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20288 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20289 ;;Total ram usage:       15 bytes
 20290 ;; Hardware stack levels used:    1
 20291 ;; Hardware stack levels required when called:    3
 20292 ;; This function calls:
 20293 ;;		Nothing
 20294 ;; This function is called by:
 20295 ;;		_do_update_pwm
 20296 ;;		_Update_Screen
 20297 ;;		_printf
 20298 ;; This function uses a non-reentrant model
 20299 ;;
 20300                           
 20301                           	psect	text104
 20302  0034D4                     __ptext104:
 20303                           	opt stack 0
 20304  0034D4                     ___fttol:
 20305                           	opt stack 26
 20306                           
 20307                           ;incstack = 0
 20308  0034D4  C030  F032         	movff	___fttol@f1+2,??___fttol
 20309  0034D8  6A33               	clrf	(??___fttol+1)& (0+255),c
 20310  0034DA  6A34               	clrf	(??___fttol+2)& (0+255),c
 20311  0034DC  342F               	rlcf	___fttol@f1+1,w,c
 20312  0034DE  3632               	rlcf	??___fttol& (0+255),f,c
 20313  0034E0  E301               	bnc	u7581
 20314  0034E2  8033               	bsf	(??___fttol+1)& (0+255),0,c
 20315  0034E4                     u7581:
 20316  0034E4  5032               	movf	??___fttol,w,c
 20317  0034E6  6E3C               	movwf	___fttol@exp1,c
 20318  0034E8  503C               	movf	___fttol@exp1,w,c
 20319  0034EA  A4D8               	btfss	status,2,c
 20320  0034EC  D002               	goto	l8982
 20321  0034EE  D039               	goto	l9006
 20322  0034F0  D063               	goto	l1954
 20323  0034F2                     l8982:
 20324  0034F2  0E17               	movlw	23
 20325  0034F4  6E32               	movwf	??___fttol& (0+255),c
 20326  0034F6  C02E  F033         	movff	___fttol@f1,??___fttol+1
 20327  0034FA  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
 20328  0034FE  C030  F035         	movff	___fttol@f1+2,??___fttol+3
 20329  003502  2832               	incf	??___fttol,w,c
 20330  003504  6E36               	movwf	(??___fttol+4)& (0+255),c
 20331  003506  D004               	goto	u7600
 20332  003508                     u7605:
 20333  003508  90D8               	bcf	status,0,c
 20334  00350A  3235               	rrcf	??___fttol+3,f,c
 20335  00350C  3234               	rrcf	??___fttol+2,f,c
 20336  00350E  3233               	rrcf	??___fttol+1,f,c
 20337  003510                     u7600:
 20338  003510  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
 20339  003512  D7FA               	goto	u7605
 20340  003514  5033               	movf	??___fttol+1,w,c
 20341  003516  6E37               	movwf	___fttol@sign1,c
 20342  003518  8E2F               	bsf	___fttol@f1+1,7,c
 20343  00351A  0EFF               	movlw	255
 20344  00351C  162E               	andwf	___fttol@f1,f,c
 20345  00351E  0EFF               	movlw	255
 20346  003520  162F               	andwf	___fttol@f1+1,f,c
 20347  003522  0E00               	movlw	0
 20348  003524  1630               	andwf	___fttol@f1+2,f,c
 20349  003526  502E               	movf	___fttol@f1,w,c
 20350  003528  6E38               	movwf	___fttol@lval,c
 20351  00352A  502F               	movf	___fttol@f1+1,w,c
 20352  00352C  6E39               	movwf	___fttol@lval+1,c
 20353  00352E  5030               	movf	___fttol@f1+2,w,c
 20354  003530  6E3A               	movwf	___fttol@lval+2,c
 20355  003532  6A3B               	clrf	___fttol@lval+3,c
 20356  003534  0E8E               	movlw	142
 20357  003536  5E3C               	subwf	___fttol@exp1,f,c
 20358  003538  AE3C               	btfss	___fttol@exp1,7,c
 20359  00353A  D010               	goto	l9004
 20360  00353C  503C               	movf	___fttol@exp1,w,c
 20361  00353E  0A80               	xorlw	128
 20362  003540  0F8F               	addlw	143
 20363  003542  B0D8               	btfsc	status,0,c
 20364  003544  D003               	goto	l9000
 20365  003546  D00D               	goto	l9006
 20366  003548  D037               	goto	l1954
 20367  00354A  D000               	goto	l9000
 20368  00354C                     l9000:
 20369  00354C  90D8               	bcf	status,0,c
 20370  00354E  323B               	rrcf	___fttol@lval+3,f,c
 20371  003550  323A               	rrcf	___fttol@lval+2,f,c
 20372  003552  3239               	rrcf	___fttol@lval+1,f,c
 20373  003554  3238               	rrcf	___fttol@lval,f,c
 20374  003556  3E3C               	incfsz	___fttol@exp1,f,c
 20375  003558  D7F9               	goto	l9000
 20376  00355A  D019               	goto	l9014
 20377  00355C                     l9004:
 20378  00355C  0E17               	movlw	23
 20379  00355E  643C               	cpfsgt	___fttol@exp1,c
 20380  003560  D011               	goto	l9012
 20381  003562                     l9006:
 20382  003562  0E00               	movlw	0
 20383  003564  6E2E               	movwf	?___fttol,c
 20384  003566  0E00               	movlw	0
 20385  003568  6E2F               	movwf	?___fttol+1,c
 20386  00356A  0E00               	movlw	0
 20387  00356C  6E30               	movwf	?___fttol+2,c
 20388  00356E  0E00               	movlw	0
 20389  003570  6E31               	movwf	?___fttol+3,c
 20390  003572  D022               	goto	l1954
 20391  003574  D007               	goto	l9012
 20392  003576                     l9010:
 20393  003576  90D8               	bcf	status,0,c
 20394  003578  3638               	rlcf	___fttol@lval,f,c
 20395  00357A  3639               	rlcf	___fttol@lval+1,f,c
 20396  00357C  363A               	rlcf	___fttol@lval+2,f,c
 20397  00357E  363B               	rlcf	___fttol@lval+3,f,c
 20398  003580  063C               	decf	___fttol@exp1,f,c
 20399  003582  D000               	goto	l9012
 20400  003584                     l9012:
 20401  003584  503C               	movf	___fttol@exp1,w,c
 20402  003586  B4D8               	btfsc	status,2,c
 20403  003588  D002               	goto	l9014
 20404  00358A  D7F5               	goto	l9010
 20405  00358C  D000               	goto	l9014
 20406  00358E                     l9014:
 20407  00358E  5037               	movf	___fttol@sign1,w,c
 20408  003590  B4D8               	btfsc	status,2,c
 20409  003592  D009               	goto	l9018
 20410  003594  1E3B               	comf	___fttol@lval+3,f,c
 20411  003596  1E3A               	comf	___fttol@lval+2,f,c
 20412  003598  1E39               	comf	___fttol@lval+1,f,c
 20413  00359A  6C38               	negf	___fttol@lval,c
 20414  00359C  0E00               	movlw	0
 20415  00359E  2239               	addwfc	___fttol@lval+1,f,c
 20416  0035A0  223A               	addwfc	___fttol@lval+2,f,c
 20417  0035A2  223B               	addwfc	___fttol@lval+3,f,c
 20418  0035A4  D000               	goto	l9018
 20419  0035A6                     l9018:
 20420  0035A6  C038  F02E         	movff	___fttol@lval,?___fttol
 20421  0035AA  C039  F02F         	movff	___fttol@lval+1,?___fttol+1
 20422  0035AE  C03A  F030         	movff	___fttol@lval+2,?___fttol+2
 20423  0035B2  C03B  F031         	movff	___fttol@lval+3,?___fttol+3
 20424  0035B6  D000               	goto	l1954
 20425  0035B8                     l1954:
 20426  0035B8  0012               	return		;funcret
 20427  0035BA                     __end_of___fttol:
 20428                           	opt stack 0
 20429                           tblptru	equ	0xFF8
 20430                           tblptrh	equ	0xFF7
 20431                           tblptrl	equ	0xFF6
 20432                           tablat	equ	0xFF5
 20433                           prodh	equ	0xFF4
 20434                           prodl	equ	0xFF3
 20435                           intcon	equ	0xFF2
 20436                           intcon2	equ	0xFF1
 20437                           intcon3	equ	0xFF0
 20438                           postinc0	equ	0xFEE
 20439                           wreg	equ	0xFE8
 20440                           postdec1	equ	0xFE5
 20441                           plusw1	equ	0xFE3
 20442                           fsr1l	equ	0xFE1
 20443                           indf2	equ	0xFDF
 20444                           postinc2	equ	0xFDE
 20445                           postdec2	equ	0xFDD
 20446                           plusw2	equ	0xFDB
 20447                           fsr2h	equ	0xFDA
 20448                           fsr2l	equ	0xFD9
 20449                           status	equ	0xFD8
 20450                           
 20451 ;; *************** function ___ftmul *****************
 20452 ;; Defined at:
 20453 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 20454 ;; Parameters:    Size  Location     Type
 20455 ;;  f1              3   30[COMRAM] float 
 20456 ;;  f2              3   33[COMRAM] float 
 20457 ;; Auto vars:     Size  Location     Type
 20458 ;;  f3_as_produc    3   40[COMRAM] unsigned um
 20459 ;;  sign            1   44[COMRAM] unsigned char 
 20460 ;;  cntr            1   43[COMRAM] unsigned char 
 20461 ;;  exp             1   39[COMRAM] unsigned char 
 20462 ;; Return value:  Size  Location     Type
 20463 ;;                  3   30[COMRAM] float 
 20464 ;; Registers used:
 20465 ;;		wreg, status,2, status,0, cstack
 20466 ;; Tracked objects:
 20467 ;;		On entry : 0/0
 20468 ;;		On exit  : 0/0
 20469 ;;		Unchanged: 0/0
 20470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20471 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20472 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20473 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20474 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20475 ;;Total ram usage:       15 bytes
 20476 ;; Hardware stack levels used:    1
 20477 ;; Hardware stack levels required when called:    4
 20478 ;; This function calls:
 20479 ;;		___ftpack
 20480 ;; This function is called by:
 20481 ;;		_do_update_pwm
 20482 ;;		_Update_Screen
 20483 ;;		_fround
 20484 ;;		_scale
 20485 ;;		_printf
 20486 ;; This function uses a non-reentrant model
 20487 ;;
 20488                           
 20489                           	psect	text105
 20490  003200                     __ptext105:
 20491                           	opt stack 0
 20492  003200                     ___ftmul:
 20493                           	opt stack 24
 20494                           
 20495                           ;incstack = 0
 20496  003200  C021  F025         	movff	___ftmul@f1+2,??___ftmul
 20497  003204  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20498  003206  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20499  003208  3420               	rlcf	___ftmul@f1+1,w,c
 20500  00320A  3625               	rlcf	??___ftmul& (0+255),f,c
 20501  00320C  E301               	bnc	u6951
 20502  00320E  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20503  003210                     u6951:
 20504  003210  5025               	movf	??___ftmul,w,c
 20505  003212  6E28               	movwf	___ftmul@exp,c
 20506  003214  5028               	movf	___ftmul@exp,w,c
 20507  003216  A4D8               	btfss	status,2,c
 20508  003218  D002               	goto	l8488
 20509  00321A  D00E               	goto	l8490
 20510  00321C  D06C               	goto	l1933
 20511  00321E                     l8488:
 20512  00321E  C024  F025         	movff	___ftmul@f2+2,??___ftmul
 20513  003222  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20514  003224  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20515  003226  3423               	rlcf	___ftmul@f2+1,w,c
 20516  003228  3625               	rlcf	??___ftmul& (0+255),f,c
 20517  00322A  E301               	bnc	u6971
 20518  00322C  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20519  00322E                     u6971:
 20520  00322E  5025               	movf	??___ftmul,w,c
 20521  003230  6E2D               	movwf	___ftmul@sign,c
 20522  003232  502D               	movf	___ftmul@sign,w,c
 20523  003234  A4D8               	btfss	status,2,c
 20524  003236  D007               	goto	l8494
 20525  003238                     l8490:
 20526  003238  0E00               	movlw	0
 20527  00323A  6E1F               	movwf	?___ftmul,c
 20528  00323C  0E00               	movlw	0
 20529  00323E  6E20               	movwf	?___ftmul+1,c
 20530  003240  0E00               	movlw	0
 20531  003242  6E21               	movwf	?___ftmul+2,c
 20532  003244  D058               	goto	l1933
 20533  003246                     l8494:
 20534  003246  502D               	movf	___ftmul@sign,w,c
 20535  003248  0F7B               	addlw	123
 20536  00324A  2628               	addwf	___ftmul@exp,f,c
 20537  00324C  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
 20538  003250  5024               	movf	___ftmul@f2+2,w,c
 20539  003252  1A2D               	xorwf	___ftmul@sign,f,c
 20540  003254  0E80               	movlw	128
 20541  003256  162D               	andwf	___ftmul@sign,f,c
 20542  003258  8E20               	bsf	___ftmul@f1+1,7,c
 20543  00325A  8E23               	bsf	___ftmul@f2+1,7,c
 20544  00325C  0EFF               	movlw	255
 20545  00325E  1622               	andwf	___ftmul@f2,f,c
 20546  003260  0EFF               	movlw	255
 20547  003262  1623               	andwf	___ftmul@f2+1,f,c
 20548  003264  0E00               	movlw	0
 20549  003266  1624               	andwf	___ftmul@f2+2,f,c
 20550  003268  0E00               	movlw	0
 20551  00326A  6E29               	movwf	___ftmul@f3_as_product,c
 20552  00326C  0E00               	movlw	0
 20553  00326E  6E2A               	movwf	___ftmul@f3_as_product+1,c
 20554  003270  0E00               	movlw	0
 20555  003272  6E2B               	movwf	___ftmul@f3_as_product+2,c
 20556  003274  0E07               	movlw	7
 20557  003276  6E2C               	movwf	___ftmul@cntr,c
 20558  003278  D000               	goto	l8508
 20559  00327A                     l8508:
 20560  00327A  A01F               	btfss	___ftmul@f1,0,c
 20561  00327C  D007               	goto	l8512
 20562  00327E  5022               	movf	___ftmul@f2,w,c
 20563  003280  2629               	addwf	___ftmul@f3_as_product,f,c
 20564  003282  5023               	movf	___ftmul@f2+1,w,c
 20565  003284  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20566  003286  5024               	movf	___ftmul@f2+2,w,c
 20567  003288  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20568  00328A  D000               	goto	l8512
 20569  00328C                     l8512:
 20570  00328C  90D8               	bcf	status,0,c
 20571  00328E  3221               	rrcf	___ftmul@f1+2,f,c
 20572  003290  3220               	rrcf	___ftmul@f1+1,f,c
 20573  003292  321F               	rrcf	___ftmul@f1,f,c
 20574  003294  90D8               	bcf	status,0,c
 20575  003296  3622               	rlcf	___ftmul@f2,f,c
 20576  003298  3623               	rlcf	___ftmul@f2+1,f,c
 20577  00329A  3624               	rlcf	___ftmul@f2+2,f,c
 20578  00329C  2E2C               	decfsz	___ftmul@cntr,f,c
 20579  00329E  D7ED               	goto	l8508
 20580  0032A0  D000               	goto	l8516
 20581  0032A2                     l8516:
 20582  0032A2  0E09               	movlw	9
 20583  0032A4  6E2C               	movwf	___ftmul@cntr,c
 20584  0032A6  D000               	goto	l8518
 20585  0032A8                     l8518:
 20586  0032A8  A01F               	btfss	___ftmul@f1,0,c
 20587  0032AA  D007               	goto	l8522
 20588  0032AC  5022               	movf	___ftmul@f2,w,c
 20589  0032AE  2629               	addwf	___ftmul@f3_as_product,f,c
 20590  0032B0  5023               	movf	___ftmul@f2+1,w,c
 20591  0032B2  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20592  0032B4  5024               	movf	___ftmul@f2+2,w,c
 20593  0032B6  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20594  0032B8  D000               	goto	l8522
 20595  0032BA                     l8522:
 20596  0032BA  90D8               	bcf	status,0,c
 20597  0032BC  3221               	rrcf	___ftmul@f1+2,f,c
 20598  0032BE  3220               	rrcf	___ftmul@f1+1,f,c
 20599  0032C0  321F               	rrcf	___ftmul@f1,f,c
 20600  0032C2  90D8               	bcf	status,0,c
 20601  0032C4  322B               	rrcf	___ftmul@f3_as_product+2,f,c
 20602  0032C6  322A               	rrcf	___ftmul@f3_as_product+1,f,c
 20603  0032C8  3229               	rrcf	___ftmul@f3_as_product,f,c
 20604  0032CA  2E2C               	decfsz	___ftmul@cntr,f,c
 20605  0032CC  D7ED               	goto	l8518
 20606  0032CE  D000               	goto	l8526
 20607  0032D0                     l8526:
 20608  0032D0  C029  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 20609  0032D4  C02A  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 20610  0032D8  C02B  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 20611  0032DC  C028  F014         	movff	___ftmul@exp,___ftpack@exp
 20612  0032E0  C02D  F015         	movff	___ftmul@sign,___ftpack@sign
 20613  0032E4  EC2D  F01C         	call	___ftpack	;wreg free
 20614  0032E8  C011  F01F         	movff	?___ftpack,?___ftmul
 20615  0032EC  C012  F020         	movff	?___ftpack+1,?___ftmul+1
 20616  0032F0  C013  F021         	movff	?___ftpack+2,?___ftmul+2
 20617  0032F4  D000               	goto	l1933
 20618  0032F6                     l1933:
 20619  0032F6  0012               	return		;funcret
 20620  0032F8                     __end_of___ftmul:
 20621                           	opt stack 0
 20622                           tblptru	equ	0xFF8
 20623                           tblptrh	equ	0xFF7
 20624                           tblptrl	equ	0xFF6
 20625                           tablat	equ	0xFF5
 20626                           prodh	equ	0xFF4
 20627                           prodl	equ	0xFF3
 20628                           intcon	equ	0xFF2
 20629                           intcon2	equ	0xFF1
 20630                           intcon3	equ	0xFF0
 20631                           postinc0	equ	0xFEE
 20632                           wreg	equ	0xFE8
 20633                           postdec1	equ	0xFE5
 20634                           plusw1	equ	0xFE3
 20635                           fsr1l	equ	0xFE1
 20636                           indf2	equ	0xFDF
 20637                           postinc2	equ	0xFDE
 20638                           postdec2	equ	0xFDD
 20639                           plusw2	equ	0xFDB
 20640                           fsr2h	equ	0xFDA
 20641                           fsr2l	equ	0xFD9
 20642                           status	equ	0xFD8
 20643                           
 20644 ;; *************** function ___ftdiv *****************
 20645 ;; Defined at:
 20646 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 20647 ;; Parameters:    Size  Location     Type
 20648 ;;  f1              3   45[COMRAM] float 
 20649 ;;  f2              3   48[COMRAM] float 
 20650 ;; Auto vars:     Size  Location     Type
 20651 ;;  f3              3   55[COMRAM] float 
 20652 ;;  sign            1   59[COMRAM] unsigned char 
 20653 ;;  exp             1   58[COMRAM] unsigned char 
 20654 ;;  cntr            1   54[COMRAM] unsigned char 
 20655 ;; Return value:  Size  Location     Type
 20656 ;;                  3   45[COMRAM] float 
 20657 ;; Registers used:
 20658 ;;		wreg, status,2, status,0, cstack
 20659 ;; Tracked objects:
 20660 ;;		On entry : 0/0
 20661 ;;		On exit  : 0/0
 20662 ;;		Unchanged: 0/0
 20663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20664 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20665 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20666 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20667 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20668 ;;Total ram usage:       15 bytes
 20669 ;; Hardware stack levels used:    1
 20670 ;; Hardware stack levels required when called:    4
 20671 ;; This function calls:
 20672 ;;		___ftpack
 20673 ;; This function is called by:
 20674 ;;		_do_update_pwm
 20675 ;;		_Read_Volt
 20676 ;; This function uses a non-reentrant model
 20677 ;;
 20678                           
 20679                           	psect	text106
 20680  00369C                     __ptext106:
 20681                           	opt stack 0
 20682  00369C                     ___ftdiv:
 20683                           	opt stack 23
 20684                           
 20685                           ;incstack = 0
 20686  00369C  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
 20687  0036A0  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20688  0036A2  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20689  0036A4  342F               	rlcf	___ftdiv@f1+1,w,c
 20690  0036A6  3634               	rlcf	??___ftdiv& (0+255),f,c
 20691  0036A8  E301               	bnc	u8311
 20692  0036AA  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20693  0036AC                     u8311:
 20694  0036AC  5034               	movf	??___ftdiv,w,c
 20695  0036AE  6E3B               	movwf	___ftdiv@exp,c
 20696  0036B0  503B               	movf	___ftdiv@exp,w,c
 20697  0036B2  A4D8               	btfss	status,2,c
 20698  0036B4  D002               	goto	l9430
 20699  0036B6  D00E               	goto	l9432
 20700  0036B8  D061               	goto	l1901
 20701  0036BA                     l9430:
 20702  0036BA  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
 20703  0036BE  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20704  0036C0  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20705  0036C2  3432               	rlcf	___ftdiv@f2+1,w,c
 20706  0036C4  3634               	rlcf	??___ftdiv& (0+255),f,c
 20707  0036C6  E301               	bnc	u8331
 20708  0036C8  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20709  0036CA                     u8331:
 20710  0036CA  5034               	movf	??___ftdiv,w,c
 20711  0036CC  6E3C               	movwf	___ftdiv@sign,c
 20712  0036CE  503C               	movf	___ftdiv@sign,w,c
 20713  0036D0  A4D8               	btfss	status,2,c
 20714  0036D2  D007               	goto	l9436
 20715  0036D4                     l9432:
 20716  0036D4  0E00               	movlw	0
 20717  0036D6  6E2E               	movwf	?___ftdiv,c
 20718  0036D8  0E00               	movlw	0
 20719  0036DA  6E2F               	movwf	?___ftdiv+1,c
 20720  0036DC  0E00               	movlw	0
 20721  0036DE  6E30               	movwf	?___ftdiv+2,c
 20722  0036E0  D04D               	goto	l1901
 20723  0036E2                     l9436:
 20724  0036E2  0E00               	movlw	0
 20725  0036E4  6E38               	movwf	___ftdiv@f3,c
 20726  0036E6  0E00               	movlw	0
 20727  0036E8  6E39               	movwf	___ftdiv@f3+1,c
 20728  0036EA  0E00               	movlw	0
 20729  0036EC  6E3A               	movwf	___ftdiv@f3+2,c
 20730  0036EE  503C               	movf	___ftdiv@sign,w,c
 20731  0036F0  0F89               	addlw	137
 20732  0036F2  5E3B               	subwf	___ftdiv@exp,f,c
 20733  0036F4  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
 20734  0036F8  5033               	movf	___ftdiv@f2+2,w,c
 20735  0036FA  1A3C               	xorwf	___ftdiv@sign,f,c
 20736  0036FC  0E80               	movlw	128
 20737  0036FE  163C               	andwf	___ftdiv@sign,f,c
 20738  003700  8E2F               	bsf	___ftdiv@f1+1,7,c
 20739  003702  0EFF               	movlw	255
 20740  003704  162E               	andwf	___ftdiv@f1,f,c
 20741  003706  0EFF               	movlw	255
 20742  003708  162F               	andwf	___ftdiv@f1+1,f,c
 20743  00370A  0E00               	movlw	0
 20744  00370C  1630               	andwf	___ftdiv@f1+2,f,c
 20745  00370E  8E32               	bsf	___ftdiv@f2+1,7,c
 20746  003710  0EFF               	movlw	255
 20747  003712  1631               	andwf	___ftdiv@f2,f,c
 20748  003714  0EFF               	movlw	255
 20749  003716  1632               	andwf	___ftdiv@f2+1,f,c
 20750  003718  0E00               	movlw	0
 20751  00371A  1633               	andwf	___ftdiv@f2+2,f,c
 20752  00371C  0E18               	movlw	24
 20753  00371E  6E37               	movwf	___ftdiv@cntr,c
 20754  003720  D000               	goto	l9456
 20755  003722                     l9456:
 20756  003722  90D8               	bcf	status,0,c
 20757  003724  3638               	rlcf	___ftdiv@f3,f,c
 20758  003726  3639               	rlcf	___ftdiv@f3+1,f,c
 20759  003728  363A               	rlcf	___ftdiv@f3+2,f,c
 20760  00372A  5031               	movf	___ftdiv@f2,w,c
 20761  00372C  5C2E               	subwf	___ftdiv@f1,w,c
 20762  00372E  5032               	movf	___ftdiv@f2+1,w,c
 20763  003730  582F               	subwfb	___ftdiv@f1+1,w,c
 20764  003732  5033               	movf	___ftdiv@f2+2,w,c
 20765  003734  5830               	subwfb	___ftdiv@f1+2,w,c
 20766  003736  A0D8               	btfss	status,0,c
 20767  003738  D007               	goto	l1904
 20768  00373A  5031               	movf	___ftdiv@f2,w,c
 20769  00373C  5E2E               	subwf	___ftdiv@f1,f,c
 20770  00373E  5032               	movf	___ftdiv@f2+1,w,c
 20771  003740  5A2F               	subwfb	___ftdiv@f1+1,f,c
 20772  003742  5033               	movf	___ftdiv@f2+2,w,c
 20773  003744  5A30               	subwfb	___ftdiv@f1+2,f,c
 20774  003746  8038               	bsf	___ftdiv@f3,0,c
 20775  003748                     l1904:
 20776  003748  90D8               	bcf	status,0,c
 20777  00374A  362E               	rlcf	___ftdiv@f1,f,c
 20778  00374C  362F               	rlcf	___ftdiv@f1+1,f,c
 20779  00374E  3630               	rlcf	___ftdiv@f1+2,f,c
 20780  003750  2E37               	decfsz	___ftdiv@cntr,f,c
 20781  003752  D7E7               	goto	l9456
 20782  003754  D000               	goto	l9466
 20783  003756                     l9466:
 20784  003756  C038  F011         	movff	___ftdiv@f3,___ftpack@arg
 20785  00375A  C039  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 20786  00375E  C03A  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 20787  003762  C03B  F014         	movff	___ftdiv@exp,___ftpack@exp
 20788  003766  C03C  F015         	movff	___ftdiv@sign,___ftpack@sign
 20789  00376A  EC2D  F01C         	call	___ftpack	;wreg free
 20790  00376E  C011  F02E         	movff	?___ftpack,?___ftdiv
 20791  003772  C012  F02F         	movff	?___ftpack+1,?___ftdiv+1
 20792  003776  C013  F030         	movff	?___ftpack+2,?___ftdiv+2
 20793  00377A  D000               	goto	l1901
 20794  00377C                     l1901:
 20795  00377C  0012               	return		;funcret
 20796  00377E                     __end_of___ftdiv:
 20797                           	opt stack 0
 20798                           tblptru	equ	0xFF8
 20799                           tblptrh	equ	0xFF7
 20800                           tblptrl	equ	0xFF6
 20801                           tablat	equ	0xFF5
 20802                           prodh	equ	0xFF4
 20803                           prodl	equ	0xFF3
 20804                           intcon	equ	0xFF2
 20805                           intcon2	equ	0xFF1
 20806                           intcon3	equ	0xFF0
 20807                           postinc0	equ	0xFEE
 20808                           wreg	equ	0xFE8
 20809                           postdec1	equ	0xFE5
 20810                           plusw1	equ	0xFE3
 20811                           fsr1l	equ	0xFE1
 20812                           indf2	equ	0xFDF
 20813                           postinc2	equ	0xFDE
 20814                           postdec2	equ	0xFDD
 20815                           plusw2	equ	0xFDB
 20816                           fsr2h	equ	0xFDA
 20817                           fsr2l	equ	0xFD9
 20818                           status	equ	0xFD8
 20819                           
 20820 ;; *************** function ___ftpack *****************
 20821 ;; Defined at:
 20822 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 20823 ;; Parameters:    Size  Location     Type
 20824 ;;  arg             3   16[COMRAM] unsigned um
 20825 ;;  exp             1   19[COMRAM] unsigned char 
 20826 ;;  sign            1   20[COMRAM] unsigned char 
 20827 ;; Auto vars:     Size  Location     Type
 20828 ;;		None
 20829 ;; Return value:  Size  Location     Type
 20830 ;;                  3   16[COMRAM] float 
 20831 ;; Registers used:
 20832 ;;		wreg, status,2, status,0
 20833 ;; Tracked objects:
 20834 ;;		On entry : 0/0
 20835 ;;		On exit  : 0/0
 20836 ;;		Unchanged: 0/0
 20837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20838 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20840 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20841 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20842 ;;Total ram usage:        8 bytes
 20843 ;; Hardware stack levels used:    1
 20844 ;; Hardware stack levels required when called:    3
 20845 ;; This function calls:
 20846 ;;		Nothing
 20847 ;; This function is called by:
 20848 ;;		___awtoft
 20849 ;;		___ftadd
 20850 ;;		___ftdiv
 20851 ;;		___ftmul
 20852 ;;		___lbtoft
 20853 ;;		___lltoft
 20854 ;; This function uses a non-reentrant model
 20855 ;;
 20856                           
 20857                           	psect	text107
 20858  00385A                     __ptext107:
 20859                           	opt stack 0
 20860  00385A                     ___ftpack:
 20861                           	opt stack 24
 20862                           
 20863                           ;incstack = 0
 20864  00385A  5014               	movf	___ftpack@exp,w,c
 20865  00385C  B4D8               	btfsc	status,2,c
 20866  00385E  D005               	goto	l8366
 20867  003860  5011               	movf	___ftpack@arg,w,c
 20868  003862  1012               	iorwf	___ftpack@arg+1,w,c
 20869  003864  1013               	iorwf	___ftpack@arg+2,w,c
 20870  003866  A4D8               	btfss	status,2,c
 20871  003868  D00E               	goto	l8372
 20872  00386A                     l8366:
 20873  00386A  0E00               	movlw	0
 20874  00386C  6E11               	movwf	?___ftpack,c
 20875  00386E  0E00               	movlw	0
 20876  003870  6E12               	movwf	?___ftpack+1,c
 20877  003872  0E00               	movlw	0
 20878  003874  6E13               	movwf	?___ftpack+2,c
 20879  003876  D053               	goto	l1829
 20880  003878  D006               	goto	l8372
 20881  00387A                     l8370:
 20882  00387A  2A14               	incf	___ftpack@exp,f,c
 20883  00387C  90D8               	bcf	status,0,c
 20884  00387E  3213               	rrcf	___ftpack@arg+2,f,c
 20885  003880  3212               	rrcf	___ftpack@arg+1,f,c
 20886  003882  3211               	rrcf	___ftpack@arg,f,c
 20887  003884  D000               	goto	l8372
 20888  003886                     l8372:
 20889  003886  0E00               	movlw	0
 20890  003888  1411               	andwf	___ftpack@arg,w,c
 20891  00388A  6E16               	movwf	??___ftpack& (0+255),c
 20892  00388C  0E00               	movlw	0
 20893  00388E  1412               	andwf	___ftpack@arg+1,w,c
 20894  003890  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20895  003892  0EFE               	movlw	254
 20896  003894  1413               	andwf	___ftpack@arg+2,w,c
 20897  003896  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20898  003898  5016               	movf	??___ftpack,w,c
 20899  00389A  1017               	iorwf	??___ftpack+1,w,c
 20900  00389C  1018               	iorwf	??___ftpack+2,w,c
 20901  00389E  B4D8               	btfsc	status,2,c
 20902  0038A0  D00E               	goto	l8378
 20903  0038A2  D7EB               	goto	l8370
 20904  0038A4  D00C               	goto	l8378
 20905  0038A6                     l8374:
 20906  0038A6  2A14               	incf	___ftpack@exp,f,c
 20907  0038A8  0E01               	movlw	1
 20908  0038AA  2611               	addwf	___ftpack@arg,f,c
 20909  0038AC  0E00               	movlw	0
 20910  0038AE  2212               	addwfc	___ftpack@arg+1,f,c
 20911  0038B0  0E00               	movlw	0
 20912  0038B2  2213               	addwfc	___ftpack@arg+2,f,c
 20913  0038B4  90D8               	bcf	status,0,c
 20914  0038B6  3213               	rrcf	___ftpack@arg+2,f,c
 20915  0038B8  3212               	rrcf	___ftpack@arg+1,f,c
 20916  0038BA  3211               	rrcf	___ftpack@arg,f,c
 20917  0038BC  D000               	goto	l8378
 20918  0038BE                     l8378:
 20919  0038BE  0E00               	movlw	0
 20920  0038C0  1411               	andwf	___ftpack@arg,w,c
 20921  0038C2  6E16               	movwf	??___ftpack& (0+255),c
 20922  0038C4  0E00               	movlw	0
 20923  0038C6  1412               	andwf	___ftpack@arg+1,w,c
 20924  0038C8  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20925  0038CA  0EFF               	movlw	255
 20926  0038CC  1413               	andwf	___ftpack@arg+2,w,c
 20927  0038CE  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20928  0038D0  5016               	movf	??___ftpack,w,c
 20929  0038D2  1017               	iorwf	??___ftpack+1,w,c
 20930  0038D4  1018               	iorwf	??___ftpack+2,w,c
 20931  0038D6  B4D8               	btfsc	status,2,c
 20932  0038D8  D008               	goto	l8382
 20933  0038DA  D7E5               	goto	l8374
 20934  0038DC  D006               	goto	l8382
 20935  0038DE                     l8380:
 20936  0038DE  0614               	decf	___ftpack@exp,f,c
 20937  0038E0  90D8               	bcf	status,0,c
 20938  0038E2  3611               	rlcf	___ftpack@arg,f,c
 20939  0038E4  3612               	rlcf	___ftpack@arg+1,f,c
 20940  0038E6  3613               	rlcf	___ftpack@arg+2,f,c
 20941  0038E8  D000               	goto	l8382
 20942  0038EA                     l8382:
 20943  0038EA  BE12               	btfsc	___ftpack@arg+1,7,c
 20944  0038EC  D004               	goto	l1840
 20945  0038EE  0E02               	movlw	2
 20946  0038F0  6014               	cpfslt	___ftpack@exp,c
 20947  0038F2  D7F5               	goto	l8380
 20948  0038F4  D000               	goto	l1840
 20949  0038F6                     l1840:
 20950  0038F6  B014               	btfsc	___ftpack@exp,0,c
 20951  0038F8  D002               	goto	l8388
 20952  0038FA  9E12               	bcf	___ftpack@arg+1,7,c
 20953  0038FC  D000               	goto	l8388
 20954  0038FE                     l8388:
 20955  0038FE  90D8               	bcf	status,0,c
 20956  003900  3214               	rrcf	___ftpack@exp,f,c
 20957  003902  5014               	movf	___ftpack@exp,w,c
 20958  003904  1213               	iorwf	___ftpack@arg+2,f,c
 20959  003906  5015               	movf	___ftpack@sign,w,c
 20960  003908  B4D8               	btfsc	status,2,c
 20961  00390A  D002               	goto	l8394
 20962  00390C  8E13               	bsf	___ftpack@arg+2,7,c
 20963  00390E  D000               	goto	l8394
 20964  003910                     l8394:
 20965  003910  C011  F011         	movff	___ftpack@arg,?___ftpack
 20966  003914  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 20967  003918  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 20968  00391C  D000               	goto	l1829
 20969  00391E                     l1829:
 20970  00391E  0012               	return		;funcret
 20971  003920                     __end_of___ftpack:
 20972                           	opt stack 0
 20973                           tblptru	equ	0xFF8
 20974                           tblptrh	equ	0xFF7
 20975                           tblptrl	equ	0xFF6
 20976                           tablat	equ	0xFF5
 20977                           prodh	equ	0xFF4
 20978                           prodl	equ	0xFF3
 20979                           intcon	equ	0xFF2
 20980                           intcon2	equ	0xFF1
 20981                           intcon3	equ	0xFF0
 20982                           postinc0	equ	0xFEE
 20983                           wreg	equ	0xFE8
 20984                           postdec1	equ	0xFE5
 20985                           plusw1	equ	0xFE3
 20986                           fsr1l	equ	0xFE1
 20987                           indf2	equ	0xFDF
 20988                           postinc2	equ	0xFDE
 20989                           postdec2	equ	0xFDD
 20990                           plusw2	equ	0xFDB
 20991                           fsr2h	equ	0xFDA
 20992                           fsr2l	equ	0xFD9
 20993                           status	equ	0xFD8
 20994                           
 20995 ;; *************** function _Wait_Half_Sec *****************
 20996 ;; Defined at:
 20997 ;;		line 99 in file "utils.c"
 20998 ;; Parameters:    Size  Location     Type
 20999 ;;		None
 21000 ;; Auto vars:     Size  Location     Type
 21001 ;;  k               2   16[COMRAM] unsigned int 
 21002 ;; Return value:  Size  Location     Type
 21003 ;;		None               void
 21004 ;; Registers used:
 21005 ;;		wreg, status,2, status,0
 21006 ;; Tracked objects:
 21007 ;;		On entry : 0/0
 21008 ;;		On exit  : 0/0
 21009 ;;		Unchanged: 0/0
 21010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21014 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21015 ;;Total ram usage:        2 bytes
 21016 ;; Hardware stack levels used:    1
 21017 ;; Hardware stack levels required when called:    3
 21018 ;; This function calls:
 21019 ;;		Nothing
 21020 ;; This function is called by:
 21021 ;;		_Do_Beep
 21022 ;;		_Do_Beep_Good
 21023 ;;		_Do_Beep_Bad
 21024 ;; This function uses a non-reentrant model
 21025 ;;
 21026                           
 21027                           	psect	text108
 21028  004C24                     __ptext108:
 21029                           	opt stack 0
 21030  004C24                     _Wait_Half_Sec:
 21031                           	opt stack 25
 21032                           
 21033                           ;utils.c: 101: for (unsigned int k=0;k<0x8000;k++);
 21034                           
 21035                           ;incstack = 0
 21036  004C24  0E00               	movlw	0
 21037  004C26  6E12               	movwf	Wait_Half_Sec@k+1,c
 21038  004C28  0E00               	movlw	0
 21039  004C2A  6E11               	movwf	Wait_Half_Sec@k,c
 21040  004C2C                     l6672:
 21041  004C2C  0E80               	movlw	128
 21042  004C2E  5C12               	subwf	Wait_Half_Sec@k+1,w,c
 21043  004C30  B0D8               	btfsc	status,0,c
 21044  004C32  D005               	goto	l468
 21045  004C34  D001               	goto	l6676
 21046  004C36  D003               	goto	l468
 21047  004C38                     l6676:
 21048  004C38  4A11               	infsnz	Wait_Half_Sec@k,f,c
 21049  004C3A  2A12               	incf	Wait_Half_Sec@k+1,f,c
 21050  004C3C  D7F7               	goto	l6672
 21051  004C3E                     l468:
 21052  004C3E  0012               	return		;funcret
 21053  004C40                     __end_of_Wait_Half_Sec:
 21054                           	opt stack 0
 21055                           tblptru	equ	0xFF8
 21056                           tblptrh	equ	0xFF7
 21057                           tblptrl	equ	0xFF6
 21058                           tablat	equ	0xFF5
 21059                           prodh	equ	0xFF4
 21060                           prodl	equ	0xFF3
 21061                           intcon	equ	0xFF2
 21062                           intcon2	equ	0xFF1
 21063                           intcon3	equ	0xFF0
 21064                           postinc0	equ	0xFEE
 21065                           wreg	equ	0xFE8
 21066                           postdec1	equ	0xFE5
 21067                           plusw1	equ	0xFE3
 21068                           fsr1l	equ	0xFE1
 21069                           indf2	equ	0xFDF
 21070                           postinc2	equ	0xFDE
 21071                           postdec2	equ	0xFDD
 21072                           plusw2	equ	0xFDB
 21073                           fsr2h	equ	0xFDA
 21074                           fsr2l	equ	0xFD9
 21075                           status	equ	0xFD8
 21076                           
 21077 ;; *************** function _Deactivate_Buzzer *****************
 21078 ;; Defined at:
 21079 ;;		line 136 in file "utils.c"
 21080 ;; Parameters:    Size  Location     Type
 21081 ;;		None
 21082 ;; Auto vars:     Size  Location     Type
 21083 ;;		None
 21084 ;; Return value:  Size  Location     Type
 21085 ;;		None               void
 21086 ;; Registers used:
 21087 ;;		wreg, status,2
 21088 ;; Tracked objects:
 21089 ;;		On entry : 0/0
 21090 ;;		On exit  : 0/0
 21091 ;;		Unchanged: 0/0
 21092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21097 ;;Total ram usage:        0 bytes
 21098 ;; Hardware stack levels used:    1
 21099 ;; Hardware stack levels required when called:    3
 21100 ;; This function calls:
 21101 ;;		Nothing
 21102 ;; This function is called by:
 21103 ;;		_Do_Beep
 21104 ;;		_Do_Beep_Good
 21105 ;;		_Do_Beep_Bad
 21106 ;;		_main
 21107 ;; This function uses a non-reentrant model
 21108 ;;
 21109                           
 21110                           	psect	text109
 21111  004E24                     __ptext109:
 21112                           	opt stack 0
 21113  004E24                     _Deactivate_Buzzer:
 21114                           	opt stack 25
 21115                           
 21116                           ;utils.c: 138: CCP2CON = 0x0;
 21117                           
 21118                           ;incstack = 0
 21119  004E24  0E00               	movlw	0
 21120  004E26  6EBA               	movwf	4026,c	;volatile
 21121                           
 21122                           ;utils.c: 139: PORTCbits.RC1 = 0;
 21123  004E28  9282               	bcf	3970,1,c	;volatile
 21124  004E2A  0012               	return		;funcret
 21125  004E2C                     __end_of_Deactivate_Buzzer:
 21126                           	opt stack 0
 21127                           tblptru	equ	0xFF8
 21128                           tblptrh	equ	0xFF7
 21129                           tblptrl	equ	0xFF6
 21130                           tablat	equ	0xFF5
 21131                           prodh	equ	0xFF4
 21132                           prodl	equ	0xFF3
 21133                           intcon	equ	0xFF2
 21134                           intcon2	equ	0xFF1
 21135                           intcon3	equ	0xFF0
 21136                           postinc0	equ	0xFEE
 21137                           wreg	equ	0xFE8
 21138                           postdec1	equ	0xFE5
 21139                           plusw1	equ	0xFE3
 21140                           fsr1l	equ	0xFE1
 21141                           indf2	equ	0xFDF
 21142                           postinc2	equ	0xFDE
 21143                           postdec2	equ	0xFDD
 21144                           plusw2	equ	0xFDB
 21145                           fsr2h	equ	0xFDA
 21146                           fsr2l	equ	0xFD9
 21147                           status	equ	0xFD8
 21148                           
 21149 ;; *************** function _Activate_Buzzer *****************
 21150 ;; Defined at:
 21151 ;;		line 104 in file "utils.c"
 21152 ;; Parameters:    Size  Location     Type
 21153 ;;		None
 21154 ;; Auto vars:     Size  Location     Type
 21155 ;;		None
 21156 ;; Return value:  Size  Location     Type
 21157 ;;		None               void
 21158 ;; Registers used:
 21159 ;;		wreg, status,2
 21160 ;; Tracked objects:
 21161 ;;		On entry : 0/0
 21162 ;;		On exit  : 0/0
 21163 ;;		Unchanged: 0/0
 21164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21169 ;;Total ram usage:        0 bytes
 21170 ;; Hardware stack levels used:    1
 21171 ;; Hardware stack levels required when called:    3
 21172 ;; This function calls:
 21173 ;;		Nothing
 21174 ;; This function is called by:
 21175 ;;		_Do_Beep
 21176 ;; This function uses a non-reentrant model
 21177 ;;
 21178                           
 21179                           	psect	text110
 21180  004D76                     __ptext110:
 21181                           	opt stack 0
 21182  004D76                     _Activate_Buzzer:
 21183                           	opt stack 25
 21184                           
 21185                           ;utils.c: 106: PR2 = 0b11111001 ;
 21186                           
 21187                           ;incstack = 0
 21188  004D76  0EF9               	movlw	249
 21189  004D78  6ECB               	movwf	4043,c	;volatile
 21190                           
 21191                           ;utils.c: 107: T2CON = 0b00000101 ;
 21192  004D7A  0E05               	movlw	5
 21193  004D7C  6ECA               	movwf	4042,c	;volatile
 21194                           
 21195                           ;utils.c: 108: CCPR2L = 0b01001010 ;
 21196  004D7E  0E4A               	movlw	74
 21197  004D80  6EBB               	movwf	4027,c	;volatile
 21198                           
 21199                           ;utils.c: 109: CCP2CON = 0b00111100 ;
 21200  004D82  0E3C               	movlw	60
 21201  004D84  6EBA               	movwf	4026,c	;volatile
 21202  004D86  0012               	return		;funcret
 21203  004D88                     __end_of_Activate_Buzzer:
 21204                           	opt stack 0
 21205                           tblptru	equ	0xFF8
 21206                           tblptrh	equ	0xFF7
 21207                           tblptrl	equ	0xFF6
 21208                           tablat	equ	0xFF5
 21209                           prodh	equ	0xFF4
 21210                           prodl	equ	0xFF3
 21211                           intcon	equ	0xFF2
 21212                           intcon2	equ	0xFF1
 21213                           intcon3	equ	0xFF0
 21214                           postinc0	equ	0xFEE
 21215                           wreg	equ	0xFE8
 21216                           postdec1	equ	0xFE5
 21217                           plusw1	equ	0xFE3
 21218                           fsr1l	equ	0xFE1
 21219                           indf2	equ	0xFDF
 21220                           postinc2	equ	0xFDE
 21221                           postdec2	equ	0xFDD
 21222                           plusw2	equ	0xFDB
 21223                           fsr2h	equ	0xFDA
 21224                           fsr2l	equ	0xFD9
 21225                           status	equ	0xFD8
 21226                           
 21227 ;; *************** function _chkisr *****************
 21228 ;; Defined at:
 21229 ;;		line 41 in file "Interrupt.c"
 21230 ;; Parameters:    Size  Location     Type
 21231 ;;		None
 21232 ;; Auto vars:     Size  Location     Type
 21233 ;;		None
 21234 ;; Return value:  Size  Location     Type
 21235 ;;		None               void
 21236 ;; Registers used:
 21237 ;;		wreg, status,2, status,0, cstack
 21238 ;; Tracked objects:
 21239 ;;		On entry : 0/0
 21240 ;;		On exit  : 0/0
 21241 ;;		Unchanged: 0/0
 21242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21245 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21246 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21247 ;;Total ram usage:       14 bytes
 21248 ;; Hardware stack levels used:    1
 21249 ;; Hardware stack levels required when called:    2
 21250 ;; This function calls:
 21251 ;;		_INT0_isr
 21252 ;;		_INT1_isr
 21253 ;;		_INT2_isr
 21254 ;;		_TIMER1_isr
 21255 ;; This function is called by:
 21256 ;;		Interrupt level 2
 21257 ;; This function uses a non-reentrant model
 21258 ;;
 21259                           
 21260                           	psect	intcode
 21261  000008                     __pintcode:
 21262                           	opt stack 0
 21263  000008                     _chkisr:
 21264                           	opt stack 18
 21265                           
 21266                           ;incstack = 0
 21267  000008  CFFA F003          	movff	pclath,??_chkisr
 21268  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 21269  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 21270  000014  EDDB  F01E         	call	int_func,f	;refresh shadow registers
 21271                           pclatu	equ	0xFFB
 21272                           pclath	equ	0xFFA
 21273                           tblptru	equ	0xFF8
 21274                           tblptrh	equ	0xFF7
 21275                           tblptrl	equ	0xFF6
 21276                           tablat	equ	0xFF5
 21277                           prodh	equ	0xFF4
 21278                           prodl	equ	0xFF3
 21279                           intcon	equ	0xFF2
 21280                           intcon2	equ	0xFF1
 21281                           intcon3	equ	0xFF0
 21282                           postinc0	equ	0xFEE
 21283                           fsr0l	equ	0xFE9
 21284                           wreg	equ	0xFE8
 21285                           postdec1	equ	0xFE5
 21286                           plusw1	equ	0xFE3
 21287                           fsr1l	equ	0xFE1
 21288                           indf2	equ	0xFDF
 21289                           postinc2	equ	0xFDE
 21290                           postdec2	equ	0xFDD
 21291                           plusw2	equ	0xFDB
 21292                           fsr2h	equ	0xFDA
 21293                           fsr2l	equ	0xFD9
 21294                           status	equ	0xFD8
 21295                           
 21296                           	psect	intcode_body
 21297  003DB6                     __pintcode_body:
 21298                           	opt stack 18
 21299  003DB6                     int_func:
 21300                           	opt stack 18
 21301  003DB6  0006               	pop		; remove dummy address from shadow register refresh
 21302  003DB8  CFEA F006          	movff	fsr0h,??_chkisr+3
 21303  003DBC  CFE1 F007          	movff	fsr1l,??_chkisr+4
 21304  003DC0  CFE2 F008          	movff	fsr1h,??_chkisr+5
 21305  003DC4  CFD9 F009          	movff	fsr2l,??_chkisr+6
 21306  003DC8  CFDA F00A          	movff	fsr2h,??_chkisr+7
 21307  003DCC  CFF3 F00B          	movff	prodl,??_chkisr+8
 21308  003DD0  CFF4 F00C          	movff	prodh,??_chkisr+9
 21309  003DD4  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 21310  003DD8  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 21311  003DDC  CFF8 F00F          	movff	tblptru,??_chkisr+12
 21312  003DE0  CFF5 F010          	movff	tablat,??_chkisr+13
 21313                           
 21314                           ;Interrupt.c: 43: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 21315  003DE4  A09E               	btfss	3998,0,c	;volatile
 21316  003DE6  D003               	goto	i2l8222
 21317  003DE8  ECF0  F026         	call	_TIMER1_isr	;wreg free
 21318  003DEC  D000               	goto	i2l8222
 21319  003DEE                     i2l8222:
 21320                           
 21321                           ;Interrupt.c: 44: if (INTCONbits.INT0IF == 1) INT0_isr();
 21322  003DEE  A2F2               	btfss	intcon,1,c	;volatile
 21323  003DF0  D003               	goto	i2l8226
 21324  003DF2  ECBE  F024         	call	_INT0_isr	;wreg free
 21325  003DF6  D000               	goto	i2l8226
 21326  003DF8                     i2l8226:
 21327                           
 21328                           ;Interrupt.c: 45: if (INTCON3bits.INT1IF == 1) INT1_isr();
 21329  003DF8  A0F0               	btfss	intcon3,0,c	;volatile
 21330  003DFA  D003               	goto	i2l8230
 21331  003DFC  EC05  F027         	call	_INT1_isr	;wreg free
 21332  003E00  D000               	goto	i2l8230
 21333  003E02                     i2l8230:
 21334                           
 21335                           ;Interrupt.c: 46: if (INTCON3bits.INT2IF == 1) INT2_isr();
 21336  003E02  A2F0               	btfss	intcon3,1,c	;volatile
 21337  003E04  D003               	goto	i2l623
 21338  003E06  EC9A  F014         	call	_INT2_isr	;wreg free
 21339  003E0A  D000               	goto	i2l623
 21340  003E0C                     i2l623:
 21341  003E0C  C010  FFF5         	movff	??_chkisr+13,tablat
 21342  003E10  C00F  FFF8         	movff	??_chkisr+12,tblptru
 21343  003E14  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 21344  003E18  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 21345  003E1C  C00C  FFF4         	movff	??_chkisr+9,prodh
 21346  003E20  C00B  FFF3         	movff	??_chkisr+8,prodl
 21347  003E24  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 21348  003E28  C009  FFD9         	movff	??_chkisr+6,fsr2l
 21349  003E2C  C008  FFE2         	movff	??_chkisr+5,fsr1h
 21350  003E30  C007  FFE1         	movff	??_chkisr+4,fsr1l
 21351  003E34  C006  FFEA         	movff	??_chkisr+3,fsr0h
 21352  003E38  C005  FFE9         	movff	??_chkisr+2,fsr0l
 21353  003E3C  C004  FFFB         	movff	??_chkisr+1,pclatu
 21354  003E40  C003  FFFA         	movff	??_chkisr,pclath
 21355  003E44  0011               	retfie		f
 21356  003E46                     __end_of_chkisr:
 21357                           	opt stack 0
 21358                           pclatu	equ	0xFFB
 21359                           pclath	equ	0xFFA
 21360                           tblptru	equ	0xFF8
 21361                           tblptrh	equ	0xFF7
 21362                           tblptrl	equ	0xFF6
 21363                           tablat	equ	0xFF5
 21364                           prodh	equ	0xFF4
 21365                           prodl	equ	0xFF3
 21366                           intcon	equ	0xFF2
 21367                           intcon2	equ	0xFF1
 21368                           intcon3	equ	0xFF0
 21369                           postinc0	equ	0xFEE
 21370                           fsr0h	equ	0xFEA
 21371                           fsr0l	equ	0xFE9
 21372                           wreg	equ	0xFE8
 21373                           postdec1	equ	0xFE5
 21374                           plusw1	equ	0xFE3
 21375                           fsr1h	equ	0xFE2
 21376                           fsr1l	equ	0xFE1
 21377                           indf2	equ	0xFDF
 21378                           postinc2	equ	0xFDE
 21379                           postdec2	equ	0xFDD
 21380                           plusw2	equ	0xFDB
 21381                           fsr2h	equ	0xFDA
 21382                           fsr2l	equ	0xFD9
 21383                           status	equ	0xFD8
 21384                           
 21385 ;; *************** function _TIMER1_isr *****************
 21386 ;; Defined at:
 21387 ;;		line 49 in file "Interrupt.c"
 21388 ;; Parameters:    Size  Location     Type
 21389 ;;		None
 21390 ;; Auto vars:     Size  Location     Type
 21391 ;;		None
 21392 ;; Return value:  Size  Location     Type
 21393 ;;		None               void
 21394 ;; Registers used:
 21395 ;;		wreg, status,2
 21396 ;; Tracked objects:
 21397 ;;		On entry : 0/0
 21398 ;;		On exit  : 0/0
 21399 ;;		Unchanged: 0/0
 21400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;Total ram usage:        0 bytes
 21406 ;; Hardware stack levels used:    1
 21407 ;; This function calls:
 21408 ;;		Nothing
 21409 ;; This function is called by:
 21410 ;;		_chkisr
 21411 ;; This function uses a non-reentrant model
 21412 ;;
 21413                           
 21414                           	psect	text112
 21415  004DE0                     __ptext112:
 21416                           	opt stack 0
 21417  004DE0                     _TIMER1_isr:
 21418                           	opt stack 19
 21419                           
 21420                           ;Interrupt.c: 51: Nec_state = 0;
 21421                           
 21422                           ;incstack = 0
 21423  004DE0  0E00               	movlw	0
 21424  004DE2  6E61               	movwf	_Nec_state,c
 21425                           
 21426                           ;Interrupt.c: 52: INTCON2bits.INTEDG2 = 0;
 21427  004DE4  98F1               	bcf	intcon2,4,c	;volatile
 21428                           
 21429                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 0;
 21430  004DE6  90CD               	bcf	4045,0,c	;volatile
 21431                           
 21432                           ;Interrupt.c: 54: PIR1bits.TMR1IF = 0;
 21433  004DE8  909E               	bcf	3998,0,c	;volatile
 21434  004DEA  0012               	return		;funcret
 21435  004DEC                     __end_of_TIMER1_isr:
 21436                           	opt stack 0
 21437                           pclatu	equ	0xFFB
 21438                           pclath	equ	0xFFA
 21439                           tblptru	equ	0xFF8
 21440                           tblptrh	equ	0xFF7
 21441                           tblptrl	equ	0xFF6
 21442                           tablat	equ	0xFF5
 21443                           prodh	equ	0xFF4
 21444                           prodl	equ	0xFF3
 21445                           intcon	equ	0xFF2
 21446                           intcon2	equ	0xFF1
 21447                           intcon3	equ	0xFF0
 21448                           postinc0	equ	0xFEE
 21449                           fsr0h	equ	0xFEA
 21450                           fsr0l	equ	0xFE9
 21451                           wreg	equ	0xFE8
 21452                           postdec1	equ	0xFE5
 21453                           plusw1	equ	0xFE3
 21454                           fsr1h	equ	0xFE2
 21455                           fsr1l	equ	0xFE1
 21456                           indf2	equ	0xFDF
 21457                           postinc2	equ	0xFDE
 21458                           postdec2	equ	0xFDD
 21459                           plusw2	equ	0xFDB
 21460                           fsr2h	equ	0xFDA
 21461                           fsr2l	equ	0xFD9
 21462                           status	equ	0xFD8
 21463                           
 21464 ;; *************** function _INT2_isr *****************
 21465 ;; Defined at:
 21466 ;;		line 64 in file "Interrupt.c"
 21467 ;; Parameters:    Size  Location     Type
 21468 ;;		None
 21469 ;; Auto vars:     Size  Location     Type
 21470 ;;		None
 21471 ;; Return value:  Size  Location     Type
 21472 ;;		None               void
 21473 ;; Registers used:
 21474 ;;		wreg, status,2, status,0, cstack
 21475 ;; Tracked objects:
 21476 ;;		On entry : 0/0
 21477 ;;		On exit  : 0/0
 21478 ;;		Unchanged: 0/0
 21479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21483 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21484 ;;Total ram usage:        2 bytes
 21485 ;; Hardware stack levels used:    1
 21486 ;; Hardware stack levels required when called:    1
 21487 ;; This function calls:
 21488 ;;		_force_nec_state0
 21489 ;; This function is called by:
 21490 ;;		_chkisr
 21491 ;; This function uses a non-reentrant model
 21492 ;;
 21493                           
 21494                           	psect	text113
 21495  002934                     __ptext113:
 21496                           	opt stack 0
 21497  002934                     _INT2_isr:
 21498                           	opt stack 18
 21499                           
 21500                           ;Interrupt.c: 69: INTCON3bits.INT2IF = 0;
 21501                           
 21502                           ;incstack = 0
 21503  002934  92F0               	bcf	intcon3,1,c	;volatile
 21504                           
 21505                           ;Interrupt.c: 70: if (Nec_state != 0)
 21506  002936  5061               	movf	_Nec_state,w,c
 21507  002938  B4D8               	btfsc	status,2,c
 21508  00293A  D0AF               	goto	i2l7550
 21509                           
 21510                           ;Interrupt.c: 71: {
 21511                           ;Interrupt.c: 72: Time_Elapsed = (TMR1H << 8) | TMR1L;
 21512  00293C  50CE               	movf	4046,w,c	;volatile
 21513  00293E  CFCF F001          	movff	4047,??_INT2_isr	;volatile
 21514  002942  6A02               	clrf	(??_INT2_isr+1)& (0+255),c
 21515  002944  C001  F002         	movff	??_INT2_isr,??_INT2_isr+1
 21516  002948  6A01               	clrf	??_INT2_isr,c
 21517  00294A  1001               	iorwf	??_INT2_isr,w,c
 21518  00294C  6E5A               	movwf	_Time_Elapsed,c
 21519  00294E  5002               	movf	??_INT2_isr+1,w,c
 21520  002950  6E5B               	movwf	_Time_Elapsed+1,c
 21521                           
 21522                           ;Interrupt.c: 73: TMR1H = 0;
 21523  002952  0E00               	movlw	0
 21524  002954  6ECF               	movwf	4047,c	;volatile
 21525                           
 21526                           ;Interrupt.c: 74: TMR1L = 0;
 21527  002956  0E00               	movlw	0
 21528  002958  6ECE               	movwf	4046,c	;volatile
 21529                           
 21530                           ;Interrupt.c: 75: }
 21531                           ;Interrupt.c: 77: switch(Nec_state)
 21532  00295A  D09F               	goto	i2l7550
 21533  00295C                     i2l7464:
 21534                           
 21535                           ;Interrupt.c: 80: {
 21536                           ;Interrupt.c: 83: TMR1H = 0;
 21537  00295C  0E00               	movlw	0
 21538  00295E  6ECF               	movwf	4047,c	;volatile
 21539                           
 21540                           ;Interrupt.c: 84: TMR1L = 0;
 21541  002960  0E00               	movlw	0
 21542  002962  6ECE               	movwf	4046,c	;volatile
 21543                           
 21544                           ;Interrupt.c: 85: PIR1bits.TMR1IF = 0;
 21545  002964  909E               	bcf	3998,0,c	;volatile
 21546                           
 21547                           ;Interrupt.c: 86: T1CON = 0x90;
 21548  002966  0E90               	movlw	144
 21549  002968  6ECD               	movwf	4045,c	;volatile
 21550                           
 21551                           ;Interrupt.c: 87: T1CONbits.TMR1ON = 1;
 21552  00296A  80CD               	bsf	4045,0,c	;volatile
 21553                           
 21554                           ;Interrupt.c: 88: bit_count = 0;
 21555  00296C  0E00               	movlw	0
 21556  00296E  0100               	movlb	0	; () banked
 21557  002970  6FCD               	movwf	_bit_count& (0+255),b
 21558                           
 21559                           ;Interrupt.c: 89: Nec_code = 0;
 21560  002972  0E00               	movlw	0
 21561  002974  0100               	movlb	0	; () banked
 21562  002976  6FB4               	movwf	_Nec_code& (0+255),b
 21563  002978  0E00               	movlw	0
 21564  00297A  6FB5               	movwf	(_Nec_code+1)& (0+255),b
 21565  00297C  0E00               	movlw	0
 21566  00297E  6FB6               	movwf	(_Nec_code+2)& (0+255),b
 21567  002980  0E00               	movlw	0
 21568  002982  6FB7               	movwf	(_Nec_code+3)& (0+255),b
 21569                           
 21570                           ;Interrupt.c: 90: Nec_state = 1;
 21571  002984  0E01               	movlw	1
 21572  002986  6E61               	movwf	_Nec_state,c
 21573                           
 21574                           ; BSR set to: 0
 21575                           ;Interrupt.c: 91: INTCON2bits.INTEDG2 = 1;
 21576  002988  88F1               	bsf	intcon2,4,c	;volatile
 21577                           
 21578                           ; BSR set to: 0
 21579                           ;Interrupt.c: 92: PORTA = Nec_state;
 21580  00298A  C061  FF80         	movff	_Nec_state,3968	;volatile
 21581                           
 21582                           ; BSR set to: 0
 21583                           ;Interrupt.c: 94: return;
 21584  00298E  D096               	goto	i2l635
 21585  002990                     i2l7476:
 21586                           
 21587                           ;Interrupt.c: 98: {
 21588                           ;Interrupt.c: 101: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
 21589  002990  0E35               	movlw	53
 21590  002992  5C5A               	subwf	_Time_Elapsed,w,c
 21591  002994  0E21               	movlw	33
 21592  002996  585B               	subwfb	_Time_Elapsed+1,w,c
 21593  002998  A0D8               	btfss	status,0,c
 21594  00299A  D009               	goto	i2l7484
 21595  00299C  0E1C               	movlw	28
 21596  00299E  5C5A               	subwf	_Time_Elapsed,w,c
 21597  0029A0  0E25               	movlw	37
 21598  0029A2  585B               	subwfb	_Time_Elapsed+1,w,c
 21599  0029A4  B0D8               	btfsc	status,0,c
 21600  0029A6  D003               	goto	i2l7484
 21601                           
 21602                           ;Interrupt.c: 102: {
 21603                           ;Interrupt.c: 104: Nec_state = 2;
 21604  0029A8  0E02               	movlw	2
 21605  0029AA  6E61               	movwf	_Nec_state,c
 21606  0029AC  D027               	goto	i2l7510
 21607  0029AE                     i2l7484:
 21608                           
 21609                           ;Interrupt.c: 109: else
 21610                           ;Interrupt.c: 110: {
 21611                           ;Interrupt.c: 112: force_nec_state0();
 21612  0029AE  EC16  F027         	call	_force_nec_state0	;wreg free
 21613  0029B2  D02A               	goto	i2l7514
 21614  0029B4  D029               	goto	i2l7514
 21615                           
 21616                           ;Interrupt.c: 116: return;
 21617                           
 21618                           ;Interrupt.c: 114: }
 21619                           ;Interrupt.c: 115: INTCON2bits.INTEDG2 = 0;
 21620  0029B6  D082               	goto	i2l635
 21621  0029B8                     i2l7490:
 21622                           
 21623                           ;Interrupt.c: 120: {
 21624                           ;Interrupt.c: 122: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
 21625  0029B8  0EA1               	movlw	161
 21626  0029BA  5C5A               	subwf	_Time_Elapsed,w,c
 21627  0029BC  0E0F               	movlw	15
 21628  0029BE  585B               	subwfb	_Time_Elapsed+1,w,c
 21629  0029C0  A0D8               	btfss	status,0,c
 21630  0029C2  D009               	goto	i2l7498
 21631  0029C4  0E88               	movlw	136
 21632  0029C6  5C5A               	subwf	_Time_Elapsed,w,c
 21633  0029C8  0E13               	movlw	19
 21634  0029CA  585B               	subwfb	_Time_Elapsed+1,w,c
 21635  0029CC  B0D8               	btfsc	status,0,c
 21636  0029CE  D003               	goto	i2l7498
 21637  0029D0                     
 21638                           ;Interrupt.c: 123: {
 21639                           ;Interrupt.c: 124: Nec_state = 3;
 21640  0029D0  0E03               	movlw	3
 21641  0029D2  6E61               	movwf	_Nec_state,c
 21642  0029D4  D05A               	goto	i2l7540
 21643  0029D6                     i2l7498:
 21644                           
 21645                           ;Interrupt.c: 128: else
 21646                           ;Interrupt.c: 129: {
 21647                           ;Interrupt.c: 131: force_nec_state0();
 21648  0029D6  EC16  F027         	call	_force_nec_state0	;wreg free
 21649  0029DA  D05D               	goto	i2l7544
 21650  0029DC  D05C               	goto	i2l7544
 21651                           
 21652                           ;Interrupt.c: 135: return;
 21653                           
 21654                           ;Interrupt.c: 133: }
 21655                           ;Interrupt.c: 134: INTCON2bits.INTEDG2 = 1;
 21656  0029DE  D06E               	goto	i2l635
 21657  0029E0                     i2l7504:
 21658                           
 21659                           ;Interrupt.c: 139: {
 21660                           ;Interrupt.c: 141: if(Time_Elapsed > 400 && Time_Elapsed < 700)
 21661  0029E0  0E91               	movlw	145
 21662  0029E2  5C5A               	subwf	_Time_Elapsed,w,c
 21663  0029E4  0E01               	movlw	1
 21664  0029E6  585B               	subwfb	_Time_Elapsed+1,w,c
 21665  0029E8  A0D8               	btfss	status,0,c
 21666  0029EA  D00B               	goto	i2l7512
 21667  0029EC  0EBC               	movlw	188
 21668  0029EE  5C5A               	subwf	_Time_Elapsed,w,c
 21669  0029F0  0E02               	movlw	2
 21670  0029F2  585B               	subwfb	_Time_Elapsed+1,w,c
 21671  0029F4  B0D8               	btfsc	status,0,c
 21672  0029F6  D005               	goto	i2l7512
 21673                           
 21674                           ;Interrupt.c: 142: {
 21675                           ;Interrupt.c: 143: Nec_state = 4;
 21676  0029F8  0E04               	movlw	4
 21677  0029FA  D7D7               	goto	L15
 21678  0029FC                     i2l7510:
 21679                           
 21680                           ;Interrupt.c: 144: PORTA = Nec_state;
 21681  0029FC  C061  FF80         	movff	_Nec_state,3968	;volatile
 21682                           
 21683                           ;Interrupt.c: 146: }
 21684  002A00  D003               	goto	i2l7514
 21685  002A02                     i2l7512:
 21686                           
 21687                           ;Interrupt.c: 147: else
 21688                           ;Interrupt.c: 148: {
 21689                           ;Interrupt.c: 150: force_nec_state0();
 21690  002A02  EC16  F027         	call	_force_nec_state0	;wreg free
 21691  002A06  D000               	goto	i2l7514
 21692  002A08                     i2l7514:
 21693                           
 21694                           ;Interrupt.c: 152: }
 21695                           ;Interrupt.c: 153: INTCON2bits.INTEDG2 = 0;
 21696  002A08  98F1               	bcf	intcon2,4,c	;volatile
 21697                           
 21698                           ;Interrupt.c: 154: return;
 21699  002A0A  D058               	goto	i2l635
 21700  002A0C                     i2l7518:
 21701                           
 21702                           ;Interrupt.c: 158: {
 21703                           ;Interrupt.c: 160: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
 21704  002A0C  0E91               	movlw	145
 21705  002A0E  5C5A               	subwf	_Time_Elapsed,w,c
 21706  002A10  0E01               	movlw	1
 21707  002A12  585B               	subwfb	_Time_Elapsed+1,w,c
 21708  002A14  A0D8               	btfss	status,0,c
 21709  002A16  D03C               	goto	i2l7542
 21710  002A18  0E08               	movlw	8
 21711  002A1A  5C5A               	subwf	_Time_Elapsed,w,c
 21712  002A1C  0E07               	movlw	7
 21713  002A1E  585B               	subwfb	_Time_Elapsed+1,w,c
 21714  002A20  B0D8               	btfsc	status,0,c
 21715  002A22  D036               	goto	i2l7542
 21716                           
 21717                           ;Interrupt.c: 161: {
 21718                           ;Interrupt.c: 162: Nec_code = Nec_code << 1;
 21719  002A24  90D8               	bcf	status,0,c
 21720  002A26  0100               	movlb	0	; () banked
 21721  002A28  35B4               	rlcf	_Nec_code& (0+255),w,b
 21722  002A2A  0100               	movlb	0	; () banked
 21723  002A2C  6FB4               	movwf	_Nec_code& (0+255),b
 21724  002A2E  0100               	movlb	0	; () banked
 21725  002A30  35B5               	rlcf	(_Nec_code+1)& (0+255),w,b
 21726  002A32  0100               	movlb	0	; () banked
 21727  002A34  6FB5               	movwf	(_Nec_code+1)& (0+255),b
 21728  002A36  0100               	movlb	0	; () banked
 21729  002A38  35B6               	rlcf	(_Nec_code+2)& (0+255),w,b
 21730  002A3A  0100               	movlb	0	; () banked
 21731  002A3C  6FB6               	movwf	(_Nec_code+2)& (0+255),b
 21732  002A3E  0100               	movlb	0	; () banked
 21733  002A40  35B7               	rlcf	(_Nec_code+3)& (0+255),w,b
 21734  002A42  0100               	movlb	0	; () banked
 21735  002A44  6FB7               	movwf	(_Nec_code+3)& (0+255),b
 21736                           
 21737                           ;Interrupt.c: 163: if (Time_Elapsed > 1000)
 21738  002A46  0EE9               	movlw	233
 21739  002A48  5C5A               	subwf	_Time_Elapsed,w,c
 21740  002A4A  0E03               	movlw	3
 21741  002A4C  585B               	subwfb	_Time_Elapsed+1,w,c
 21742  002A4E  A0D8               	btfss	status,0,c
 21743  002A50  D008               	goto	i2l7526
 21744                           
 21745                           ; BSR set to: 0
 21746                           ;Interrupt.c: 164: Nec_code++;
 21747  002A52  0E01               	movlw	1
 21748  002A54  0100               	movlb	0	; () banked
 21749  002A56  27B4               	addwf	_Nec_code& (0+255),f,b
 21750  002A58  0E00               	movlw	0
 21751  002A5A  23B5               	addwfc	(_Nec_code+1)& (0+255),f,b
 21752  002A5C  23B6               	addwfc	(_Nec_code+2)& (0+255),f,b
 21753  002A5E  23B7               	addwfc	(_Nec_code+3)& (0+255),f,b
 21754  002A60  D000               	goto	i2l7526
 21755  002A62                     i2l7526:
 21756                           
 21757                           ; BSR set to: 0
 21758                           ;Interrupt.c: 165: bit_count++;
 21759  002A62  0100               	movlb	0	; () banked
 21760  002A64  2BCD               	incf	_bit_count& (0+255),f,b
 21761                           
 21762                           ; BSR set to: 0
 21763                           ;Interrupt.c: 166: if(bit_count > 31)
 21764  002A66  0E1F               	movlw	31
 21765  002A68  0100               	movlb	0	; () banked
 21766  002A6A  65CD               	cpfsgt	_bit_count& (0+255),b
 21767  002A6C  D7B1               	goto	L16
 21768                           
 21769                           ; BSR set to: 0
 21770                           ;Interrupt.c: 167: {
 21771                           ;Interrupt.c: 168: Nec_Button = Nec_code >> 8;
 21772  002A6E  C0B5  F0C9         	movff	_Nec_code+1,_Nec_Button
 21773                           
 21774                           ; BSR set to: 0
 21775                           ;Interrupt.c: 169: Nec_state = 0;
 21776  002A72  0E00               	movlw	0
 21777  002A74  6E61               	movwf	_Nec_state,c
 21778                           
 21779                           ; BSR set to: 0
 21780                           ;Interrupt.c: 170: PORTA = Nec_state;
 21781  002A76  C061  FF80         	movff	_Nec_state,3968	;volatile
 21782                           
 21783                           ;Interrupt.c: 172: Nec_ok = 1;
 21784  002A7A  0E00               	movlw	0
 21785  002A7C  0100               	movlb	0	; () banked
 21786  002A7E  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
 21787  002A80  0E01               	movlw	1
 21788  002A82  6FBB               	movwf	_Nec_ok& (0+255),b
 21789                           
 21790                           ; BSR set to: 0
 21791                           ;Interrupt.c: 174: INTCON3bits.INT2IE = 0;
 21792  002A84  98F0               	bcf	intcon3,4,c	;volatile
 21793                           
 21794                           ;Interrupt.c: 175: }
 21795  002A86  D007               	goto	i2l7544
 21796                           
 21797                           ; BSR set to: 0
 21798  002A88  D7A3               	goto	L16
 21799  002A8A                     i2l7540:
 21800                           
 21801                           ; BSR set to: 0
 21802                           ;Interrupt.c: 179: PORTA = Nec_state;
 21803  002A8A  C061  FF80         	movff	_Nec_state,3968	;volatile
 21804                           
 21805                           ; BSR set to: 0
 21806                           ;Interrupt.c: 181: }
 21807                           ;Interrupt.c: 182: }
 21808  002A8E  D003               	goto	i2l7544
 21809  002A90                     i2l7542:
 21810                           
 21811                           ;Interrupt.c: 184: else
 21812                           ;Interrupt.c: 185: {
 21813                           ;Interrupt.c: 187: force_nec_state0();
 21814  002A90  EC16  F027         	call	_force_nec_state0	;wreg free
 21815  002A94  D000               	goto	i2l7544
 21816  002A96                     i2l7544:
 21817                           
 21818                           ;Interrupt.c: 189: }
 21819                           ;Interrupt.c: 190: INTCON2bits.INTEDG2 = 1;
 21820  002A96  88F1               	bsf	intcon2,4,c	;volatile
 21821                           
 21822                           ;Interrupt.c: 192: }
 21823                           ;Interrupt.c: 193: }
 21824                           
 21825                           ;Interrupt.c: 191: return;
 21826  002A98  D011               	goto	i2l635
 21827  002A9A                     i2l7550:
 21828  002A9A  5061               	movf	_Nec_state,w,c
 21829                           
 21830                           ; Switch size 1, requested type "space"
 21831                           ; Number of cases is 5, Range of values is 0 to 4
 21832                           ; switch strategies available:
 21833                           ; Name         Instructions Cycles
 21834                           ; simple_byte           16     9 (average)
 21835                           ;	Chosen strategy is simple_byte
 21836  002A9C  0A00               	xorlw	0	; case 0
 21837  002A9E  B4D8               	btfsc	status,2,c
 21838  002AA0  D75D               	goto	i2l7464
 21839  002AA2  0A01               	xorlw	1	; case 1
 21840  002AA4  B4D8               	btfsc	status,2,c
 21841  002AA6  D774               	goto	i2l7476
 21842  002AA8  0A03               	xorlw	3	; case 2
 21843  002AAA  B4D8               	btfsc	status,2,c
 21844  002AAC  D785               	goto	i2l7490
 21845  002AAE  0A01               	xorlw	1	; case 3
 21846  002AB0  B4D8               	btfsc	status,2,c
 21847  002AB2  D796               	goto	i2l7504
 21848  002AB4  0A07               	xorlw	7	; case 4
 21849  002AB6  B4D8               	btfsc	status,2,c
 21850  002AB8  D7A9               	goto	i2l7518
 21851  002ABA  D000               	goto	i2l635
 21852  002ABC                     i2l635:
 21853  002ABC  0012               	return		;funcret
 21854  002ABE                     __end_of_INT2_isr:
 21855                           	opt stack 0
 21856                           pclatu	equ	0xFFB
 21857                           pclath	equ	0xFFA
 21858                           tblptru	equ	0xFF8
 21859                           tblptrh	equ	0xFF7
 21860                           tblptrl	equ	0xFF6
 21861                           tablat	equ	0xFF5
 21862                           prodh	equ	0xFF4
 21863                           prodl	equ	0xFF3
 21864                           intcon	equ	0xFF2
 21865                           intcon2	equ	0xFF1
 21866                           intcon3	equ	0xFF0
 21867                           postinc0	equ	0xFEE
 21868                           fsr0h	equ	0xFEA
 21869                           fsr0l	equ	0xFE9
 21870                           wreg	equ	0xFE8
 21871                           postdec1	equ	0xFE5
 21872                           plusw1	equ	0xFE3
 21873                           fsr1h	equ	0xFE2
 21874                           fsr1l	equ	0xFE1
 21875                           indf2	equ	0xFDF
 21876                           postinc2	equ	0xFDE
 21877                           postdec2	equ	0xFDD
 21878                           plusw2	equ	0xFDB
 21879                           fsr2h	equ	0xFDA
 21880                           fsr2l	equ	0xFD9
 21881                           status	equ	0xFD8
 21882                           
 21883 ;; *************** function _force_nec_state0 *****************
 21884 ;; Defined at:
 21885 ;;		line 57 in file "Interrupt.c"
 21886 ;; Parameters:    Size  Location     Type
 21887 ;;		None
 21888 ;; Auto vars:     Size  Location     Type
 21889 ;;		None
 21890 ;; Return value:  Size  Location     Type
 21891 ;;		None               void
 21892 ;; Registers used:
 21893 ;;		wreg, status,2
 21894 ;; Tracked objects:
 21895 ;;		On entry : 0/0
 21896 ;;		On exit  : 0/0
 21897 ;;		Unchanged: 0/0
 21898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21903 ;;Total ram usage:        0 bytes
 21904 ;; Hardware stack levels used:    1
 21905 ;; This function calls:
 21906 ;;		Nothing
 21907 ;; This function is called by:
 21908 ;;		_INT2_isr
 21909 ;; This function uses a non-reentrant model
 21910 ;;
 21911                           
 21912                           	psect	text114
 21913  004E2C                     __ptext114:
 21914                           	opt stack 0
 21915  004E2C                     _force_nec_state0:
 21916                           	opt stack 18
 21917                           
 21918                           ;Interrupt.c: 59: Nec_state=0;
 21919                           
 21920                           ;incstack = 0
 21921  004E2C  0E00               	movlw	0
 21922  004E2E  6E61               	movwf	_Nec_state,c
 21923                           
 21924                           ;Interrupt.c: 60: T1CONbits.TMR1ON = 0;
 21925  004E30  90CD               	bcf	4045,0,c	;volatile
 21926  004E32  0012               	return		;funcret
 21927  004E34                     __end_of_force_nec_state0:
 21928                           	opt stack 0
 21929                           pclatu	equ	0xFFB
 21930                           pclath	equ	0xFFA
 21931                           tblptru	equ	0xFF8
 21932                           tblptrh	equ	0xFF7
 21933                           tblptrl	equ	0xFF6
 21934                           tablat	equ	0xFF5
 21935                           prodh	equ	0xFF4
 21936                           prodl	equ	0xFF3
 21937                           intcon	equ	0xFF2
 21938                           intcon2	equ	0xFF1
 21939                           intcon3	equ	0xFF0
 21940                           postinc0	equ	0xFEE
 21941                           fsr0h	equ	0xFEA
 21942                           fsr0l	equ	0xFE9
 21943                           wreg	equ	0xFE8
 21944                           postdec1	equ	0xFE5
 21945                           plusw1	equ	0xFE3
 21946                           fsr1h	equ	0xFE2
 21947                           fsr1l	equ	0xFE1
 21948                           indf2	equ	0xFDF
 21949                           postinc2	equ	0xFDE
 21950                           postdec2	equ	0xFDD
 21951                           plusw2	equ	0xFDB
 21952                           fsr2h	equ	0xFDA
 21953                           fsr2l	equ	0xFD9
 21954                           status	equ	0xFD8
 21955                           
 21956 ;; *************** function _INT1_isr *****************
 21957 ;; Defined at:
 21958 ;;		line 196 in file "Interrupt.c"
 21959 ;; Parameters:    Size  Location     Type
 21960 ;;		None
 21961 ;; Auto vars:     Size  Location     Type
 21962 ;;		None
 21963 ;; Return value:  Size  Location     Type
 21964 ;;		None               void
 21965 ;; Registers used:
 21966 ;;		wreg, status,2
 21967 ;; Tracked objects:
 21968 ;;		On entry : 0/0
 21969 ;;		On exit  : 0/0
 21970 ;;		Unchanged: 0/0
 21971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21976 ;;Total ram usage:        0 bytes
 21977 ;; Hardware stack levels used:    1
 21978 ;; This function calls:
 21979 ;;		Nothing
 21980 ;; This function is called by:
 21981 ;;		_chkisr
 21982 ;; This function uses a non-reentrant model
 21983 ;;
 21984                           
 21985                           	psect	text115
 21986  004E0A                     __ptext115:
 21987                           	opt stack 0
 21988  004E0A                     _INT1_isr:
 21989                           	opt stack 19
 21990                           
 21991                           ;Interrupt.c: 198: INTCON3bits.INT1IF == 0;
 21992                           
 21993                           ;incstack = 0
 21994  004E0A  50F0               	movf	intcon3,w,c	;volatile
 21995                           
 21996                           ;Interrupt.c: 199: INT1_flag = 1;
 21997  004E0C  0E01               	movlw	1
 21998  004E0E  0100               	movlb	0	; () banked
 21999  004E10  6FC5               	movwf	_INT1_flag& (0+255),b
 22000                           
 22001                           ; BSR set to: 0
 22002  004E12  0012               	return		;funcret
 22003  004E14                     __end_of_INT1_isr:
 22004                           	opt stack 0
 22005                           pclatu	equ	0xFFB
 22006                           pclath	equ	0xFFA
 22007                           tblptru	equ	0xFF8
 22008                           tblptrh	equ	0xFF7
 22009                           tblptrl	equ	0xFF6
 22010                           tablat	equ	0xFF5
 22011                           prodh	equ	0xFF4
 22012                           prodl	equ	0xFF3
 22013                           intcon	equ	0xFF2
 22014                           intcon2	equ	0xFF1
 22015                           intcon3	equ	0xFF0
 22016                           postinc0	equ	0xFEE
 22017                           fsr0h	equ	0xFEA
 22018                           fsr0l	equ	0xFE9
 22019                           wreg	equ	0xFE8
 22020                           postdec1	equ	0xFE5
 22021                           plusw1	equ	0xFE3
 22022                           fsr1h	equ	0xFE2
 22023                           fsr1l	equ	0xFE1
 22024                           indf2	equ	0xFDF
 22025                           postinc2	equ	0xFDE
 22026                           postdec2	equ	0xFDD
 22027                           plusw2	equ	0xFDB
 22028                           fsr2h	equ	0xFDA
 22029                           fsr2l	equ	0xFD9
 22030                           status	equ	0xFD8
 22031                           
 22032 ;; *************** function _INT0_isr *****************
 22033 ;; Defined at:
 22034 ;;		line 203 in file "Interrupt.c"
 22035 ;; Parameters:    Size  Location     Type
 22036 ;;		None
 22037 ;; Auto vars:     Size  Location     Type
 22038 ;;  k               2    0[COMRAM] int 
 22039 ;; Return value:  Size  Location     Type
 22040 ;;		None               void
 22041 ;; Registers used:
 22042 ;;		wreg, status,2, status,0
 22043 ;; Tracked objects:
 22044 ;;		On entry : 0/0
 22045 ;;		On exit  : 0/0
 22046 ;;		Unchanged: 0/0
 22047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22051 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22052 ;;Total ram usage:        2 bytes
 22053 ;; Hardware stack levels used:    1
 22054 ;; This function calls:
 22055 ;;		Nothing
 22056 ;; This function is called by:
 22057 ;;		_chkisr
 22058 ;; This function uses a non-reentrant model
 22059 ;;
 22060                           
 22061                           	psect	text116
 22062  00497C                     __ptext116:
 22063                           	opt stack 0
 22064  00497C                     _INT0_isr:
 22065                           	opt stack 19
 22066                           
 22067                           ;Interrupt.c: 205: int k;
 22068                           ;Interrupt.c: 206: for (k=0; k<20000;k++);
 22069                           
 22070                           ; BSR set to: 0
 22071                           ;incstack = 0
 22072  00497C  0E00               	movlw	0
 22073  00497E  6E02               	movwf	INT0_isr@k+1,c
 22074  004980  0E00               	movlw	0
 22075  004982  6E01               	movwf	INT0_isr@k,c
 22076  004984                     i2l7440:
 22077  004984  BE02               	btfsc	INT0_isr@k+1,7,c
 22078  004986  D008               	goto	i2l7444
 22079  004988  0E20               	movlw	32
 22080  00498A  5C01               	subwf	INT0_isr@k,w,c
 22081  00498C  0E4E               	movlw	78
 22082  00498E  5802               	subwfb	INT0_isr@k+1,w,c
 22083  004990  B0D8               	btfsc	status,0,c
 22084  004992  D005               	goto	i2l658
 22085  004994  D001               	goto	i2l7444
 22086  004996  D003               	goto	i2l658
 22087  004998                     i2l7444:
 22088  004998  4A01               	infsnz	INT0_isr@k,f,c
 22089  00499A  2A02               	incf	INT0_isr@k+1,f,c
 22090  00499C  D7F3               	goto	i2l7440
 22091  00499E                     i2l658:
 22092                           
 22093                           ;Interrupt.c: 207: INTCONbits.INT0IF = 0;
 22094  00499E  92F2               	bcf	intcon,1,c	;volatile
 22095                           
 22096                           ;Interrupt.c: 208: INT0_flag = 1;
 22097  0049A0  0E01               	movlw	1
 22098  0049A2  0100               	movlb	0	; () banked
 22099  0049A4  6FC4               	movwf	_INT0_flag& (0+255),b
 22100                           
 22101                           ; BSR set to: 0
 22102  0049A6  0012               	return		;funcret
 22103  0049A8                     __end_of_INT0_isr:
 22104                           	opt stack 0
 22105                           pclatu	equ	0xFFB
 22106                           pclath	equ	0xFFA
 22107                           tblptru	equ	0xFF8
 22108                           tblptrh	equ	0xFF7
 22109                           tblptrl	equ	0xFF6
 22110                           tablat	equ	0xFF5
 22111                           prodh	equ	0xFF4
 22112                           prodl	equ	0xFF3
 22113                           intcon	equ	0xFF2
 22114                           intcon2	equ	0xFF1
 22115                           intcon3	equ	0xFF0
 22116                           postinc0	equ	0xFEE
 22117                           fsr0h	equ	0xFEA
 22118                           fsr0l	equ	0xFE9
 22119                           wreg	equ	0xFE8
 22120                           postdec1	equ	0xFE5
 22121                           plusw1	equ	0xFE3
 22122                           fsr1h	equ	0xFE2
 22123                           fsr1l	equ	0xFE1
 22124                           indf2	equ	0xFDF
 22125                           postinc2	equ	0xFDE
 22126                           postdec2	equ	0xFDD
 22127                           plusw2	equ	0xFDB
 22128                           fsr2h	equ	0xFDA
 22129                           fsr2l	equ	0xFD9
 22130                           status	equ	0xFD8
 22131                           pclatu	equ	0xFFB
 22132                           pclath	equ	0xFFA
 22133                           tblptru	equ	0xFF8
 22134                           tblptrh	equ	0xFF7
 22135                           tblptrl	equ	0xFF6
 22136                           tablat	equ	0xFF5
 22137                           prodh	equ	0xFF4
 22138                           prodl	equ	0xFF3
 22139                           intcon	equ	0xFF2
 22140                           intcon2	equ	0xFF1
 22141                           intcon3	equ	0xFF0
 22142                           postinc0	equ	0xFEE
 22143                           fsr0h	equ	0xFEA
 22144                           fsr0l	equ	0xFE9
 22145                           wreg	equ	0xFE8
 22146                           postdec1	equ	0xFE5
 22147                           plusw1	equ	0xFE3
 22148                           fsr1h	equ	0xFE2
 22149                           fsr1l	equ	0xFE1
 22150                           indf2	equ	0xFDF
 22151                           postinc2	equ	0xFDE
 22152                           postdec2	equ	0xFDD
 22153                           plusw2	equ	0xFDB
 22154                           fsr2h	equ	0xFDA
 22155                           fsr2l	equ	0xFD9
 22156                           status	equ	0xFD8
 22157                           
 22158                           	psect	rparam
 22159  0000                     pclatu	equ	0xFFB
 22160                           pclath	equ	0xFFA
 22161                           tblptru	equ	0xFF8
 22162                           tblptrh	equ	0xFF7
 22163                           tblptrl	equ	0xFF6
 22164                           tablat	equ	0xFF5
 22165                           prodh	equ	0xFF4
 22166                           prodl	equ	0xFF3
 22167                           intcon	equ	0xFF2
 22168                           intcon2	equ	0xFF1
 22169                           intcon3	equ	0xFF0
 22170                           postinc0	equ	0xFEE
 22171                           fsr0h	equ	0xFEA
 22172                           fsr0l	equ	0xFE9
 22173                           wreg	equ	0xFE8
 22174                           postdec1	equ	0xFE5
 22175                           plusw1	equ	0xFE3
 22176                           fsr1h	equ	0xFE2
 22177                           fsr1l	equ	0xFE1
 22178                           indf2	equ	0xFDF
 22179                           postinc2	equ	0xFDE
 22180                           postdec2	equ	0xFDD
 22181                           plusw2	equ	0xFDB
 22182                           fsr2h	equ	0xFDA
 22183                           fsr2l	equ	0xFD9
 22184                           status	equ	0xFD8


Data Sizes:
    Strings     460
    Constant    625
    Data        174
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     107
    BANK0           128     52     124
    BANK1           256     23     163
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_46(CODE[5]), STR_45(CODE[5]), STR_44(CODE[12]), STR_39(CODE[15]), 
		 -> STR_38(CODE[12]), STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[5]), 
		 -> STR_30(CODE[5]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[11]), STR_24(CODE[4]), STR_23(CODE[5]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[5]), STR_19(CODE[12]), 
		 -> STR_18(CODE[11]), STR_17(CODE[11]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[2]), STR_13(CODE[3]), STR_12(CODE[13]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_43(CODE[29]), STR_42(CODE[20]), STR_41(CODE[21]), STR_40(CODE[30]), 
		 -> STR_37(CODE[29]), STR_36(CODE[20]), STR_35(CODE[20]), STR_34(CODE[30]), 
		 -> STR_11(CODE[33]), STR_10(CODE[27]), STR_9(CODE[34]), STR_8(CODE[22]), 
		 -> STR_7(CODE[29]), STR_6(CODE[20]), STR_5(CODE[21]), STR_4(CODE[30]), 
		 -> STR_3(CODE[22]), STR_2(CODE[19]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 


Critical Paths under _main in COMRAM

    _main->_check_for_button_input
    _Update_Screen->_drawtext
    _Setup_Fan_Temp->_check_for_button_input
    _Initialize_Setup_Fan_Screen->_drawtext
    _Increase_Fan_Temp->_Update_Setup_Fan_Screen
    _Decrease_Fan_Temp->_Update_Setup_Fan_Screen
    _Update_Setup_Fan_Screen->_drawtext
    _Increase_Duty_Cycle->_do_update_pwm
    _Do_Setup_Time->_check_for_button_input
    _get_RPM->___awdiv
    _Set_D2_RGB->___awdiv
    _Set_D1_RGB->___awdiv
    _Read_Volt->___ftdiv
    ___awtoft->___ftpack
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Do_Save_New_Time->_DS3231_Write_Time
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _Update_Setup_Time_Screen->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _DS1621_Read_Temp->_I2C_Read
    _printf->___ftadd
    _scale->___awmod
    _fround->___awmod
    ___awmod->___fttol
    ___awdiv->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _Decrease_Duty_Cycle->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___awdiv
    ___ftdiv->___ftmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr
    _chkisr->_INT2_isr

Critical Paths under _main in BANK0

    _main->_printf
    _Turn_On_Fan->_printf
    _Setup_Fan_Temp->_printf
    _Do_Setup_Time->_printf
    _check_for_button_input->_printf
    _Turn_Off_Fan->_printf
    _printf->___ftsub

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_check_for_button_input
    _Setup_Fan_Temp->_check_for_button_input
    _Do_Setup_Time->_check_for_button_input

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1810469
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _Deactivate_Buzzer
                _Decrease_Duty_Cycle
                        _Do_Beep_Bad
                       _Do_Beep_Good
     _Do_Change_Fan_Timer_Mode_Minus
      _Do_Change_Fan_Timer_Mode_Plus
                            _Do_Init
                      _Do_Setup_Time
                _Increase_Duty_Cycle
                  _Initialize_Screen
                        _Monitor_Fan
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
                     _Setup_Fan_Temp
                         _Toggle_Fan
                       _Turn_Off_Fan
                      _Update_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        6     6      0   49444
                                             73 COMRAM     6     6      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0  156394
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   83784
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Setup_Fan_Temp                                       0     0      0  428477
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _Decrease_Fan_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
               _Do_Save_New_Fan_Temp
                  _Increase_Fan_Temp
        _Initialize_Setup_Fan_Screen
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
            _Update_Setup_Fan_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Fan_Screen                          0     0      0   48935
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Fan_Temp                                    0     0      0   40646
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Fan_Temp                                 0     0      0   49230
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Fan_Temp                                    0     0      0   40646
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Fan_Screen                              3     3      0   40646
                                             73 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Increase_Duty_Cycle                                  0     0      0   22394
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  599043
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
                        _Monitor_Fan
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
           _Update_Setup_Time_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
                          _bcd_2_dec
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    9161
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                              24    24      0   72780
                                             88 COMRAM     1     1      0
                                              0 BANK1     23    23      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Set_D2_RGB                                           4     2      2    5973
                                             30 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Set_D1_RGB                                           4     4      0    5744
                                             30 COMRAM     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Read_Volt                                            9     6      3    8948
                                             60 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (3) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2386
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Monitor_Fan                                          0     0      0   84092
                       _Turn_Off_Fan
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                      10     6      4     308
                                             16 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   57703
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   40544
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0    9100
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0    9100
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0    9122
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0    9122
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   49230
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   59723
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _Initialize_Screen                                    0     0      0   48935
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    2937
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    1766
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    1585
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    9404
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    4612
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    4612
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    4522
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             4     2      2    4522
                                             22 COMRAM     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0   10493
                                             73 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2   10334
                                             66 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     3     3      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   40544
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   40544
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   30306
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   17426
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    8768
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    2442
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3367
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3     814
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      23
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   73432
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                          _Init_UART
                       _Turn_Off_Fan
 ---------------------------------------------------------------------------------
 (1) _Turn_Off_Fan                                         0     0      0   72610
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   72610
                                              6 BANK0     46    32     14
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   19393
                                             66 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   19114
                                             66 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3482
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    4593
                                             60 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    5645
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             16 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             16 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2355
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4079
                                              0 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3763
                                             76 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     978
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Change_Fan_Timer_Mode_Plus                        0     0      0   22440
                        _Do_Beep_Bad
                       _Do_Beep_Good
 ---------------------------------------------------------------------------------
 (1) _Do_Change_Fan_Timer_Mode_Minus                       0     0      0   22440
                        _Do_Beep_Bad
                       _Do_Beep_Good
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   11220
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   11220
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Decrease_Duty_Cycle                                  0     0      0   22394
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0   11220
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0   11174
                                             60 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2219
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     826
                                             45 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4976
                                             30 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2958
                                             45 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2188
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_Half_Sec                                        2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0      46
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Decrease_Duty_Cycle
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_Half_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_Half_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Change_Fan_Timer_Mode_Minus
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Do_Change_Fan_Timer_Mode_Plus
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Init_UART
       _OpenUSART
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Time
     _DS1621_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Monitor_Fan
       _Turn_Off_Fan
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _get_duty_cycle
     _Read_Volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
     _Set_D1_RGB
       ___awdiv
         ___wmul (ARG)
     _Set_D2_RGB
       ___awdiv
         ___wmul (ARG)
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     ___awdiv
       ___wmul (ARG)
     ___ftge
     ___wmul
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _get_RPM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Increase_Duty_Cycle
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Fan
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   _Set_D1_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_D2_RGB
     ___awdiv
       ___wmul (ARG)
   _Setup_Fan_Temp
     _DS1621_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Fan_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Read_Volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
     _Set_D1_RGB
       ___awdiv
         ___wmul (ARG)
     _Set_D2_RGB
       ___awdiv
         ___wmul (ARG)
     _Update_Setup_Fan_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     ___awdiv
       ___wmul (ARG)
     ___ftge
     ___wmul
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _get_RPM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Turn_Off_Fan
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___ftge
   ___wmul
   _check_for_button_input
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___awdiv
       ___wmul (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
     _isdigit
     _putch
     _scale
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)

 _chkisr (ROOT)
   _INT0_isr
   _INT1_isr
   _INT2_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     17      A3       7       63.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     34      7C       5       96.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      6B       1       84.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18A      34        0.0%
DATA                 0      0     18A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Dec 03 11:08:05 2024

                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                            l40 4168  
                                          l50 46F4                                            l47 458A  
                                          l55 4CA2                                            l72 4A44  
                                          l82 497A                                            l67 48C6  
                                          l77 494E                                  ___awdiv@sign 001C  
                        __size_of_Turn_On_Fan 0022                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 004A                                  ___ftadd@exp1 0058  
                                ___ftadd@exp2 0057                                  ___ftadd@sign 0056  
                                         l112 46B6                                           l115 47BE  
                                         l311 3858                                           l208 4CF0  
                                         l312 37C4                                           l314 3834  
                                         l315 3856                                           l252 48F6  
                                         l505 4DBC                                           l258 3FE4  
                                         l274 2D96                                           l283 2CEC  
                                         l451 49D0                                           l276 2C70  
                                         l454 4492                                           l198 476A  
                                         l446 3BEE                                           l560 4864  
                                         l490 42B6                                           l468 4C3E  
                                         l493 49FE                                           l496 4A1E  
                                         _FAN 00C1                                           l962 1ADC  
                                         l981 135C                                           _PR2 000FCB  
                                         _day 0063                             _Deactivate_Buzzer 4E24  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 00CF                                           _nbr 00BD  
                                         _rpm 005C                         __size_of_Turn_Off_Fan 001C  
                                         _rps 00BF                                           _txt 005E  
                                ___awmod@sign 0042                                           prod 000FF3  
                                         wreg 000FE8                                 _Increase_Time 3920  
                          ?_Deactivate_Buzzer 0001               Update_Setup_Fan_Screen@dc_char1 004A  
             Update_Setup_Fan_Screen@dc_char2 004B               Update_Setup_Fan_Screen@dc_char3 004C  
                                  _Fan_SW_Txt 00E8        Update_Setup_Screen_Cursor_Forward@xinc 0030  
      Update_Setup_Screen_Cursor_Forward@yinc 002F                               ??_fillRectangle 001D  
                                __CFG_LVP$OFF 000000                       _TFT_GreenTab_Initialize 48F8  
                                ___ftdiv@cntr 0037                                  ___ftdiv@sign 003C  
                                __CFG_WDT$OFF 000000                                          l1104 34D2  
                              drawFastVLine@h 0019                                          l1301 2ED4  
                                        l2008 41C8                                          l2104 47AE  
                                        l1315 277E                                          l2028 43DE  
                                        l1501 4248                                          l1350 1FE0  
                                        l1326 2932                                          l1504 49F8  
                                        l1425 071A                                drawFastVLine@x 0022  
                                        l1357 173C                                drawFastVLine@y 0018  
                                        l1710 40E8                                          l1386 08A4  
                                        l1722 4828                                          l1492 4206  
                                        l1468 0C5E                                          l1901 377C  
                                        l1911 305C                                          l1840 38F6  
                                        l1904 3748                                          l1496 4220  
                                        l1912 3084                                          l1497 4222  
                                        l1498 422C                                          l1499 422E  
                                        l5300 3FA6                                          l1829 391E  
                                        l1933 32F6                                          l1909 30F4  
                                        l1870 25C4                                          l1950 45DA  
                                        l1918 30E4                                          l5310 3FCC  
                                        l1927 3DB4                                          l1943 4A82  
                                        l5312 3FDA                                          l1873 2470  
                                        l1697 3D1E                                          l1954 35B8  
                                        l1884 2532                                          l1788 31FE  
                                        l1893 254E                                          l1869 2446  
                                        l1797 31EE                                          l1969 4B18  
                                        l7202 4B2A                                          l1995 4A6A  
                                        l7212 4B50                                          l7204 4B30  
                                        l1998 3F4C                                          l6414 467A  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l9000 354C  
                                        l6424 4690                                          l6432 46A0  
                                        l5384 48D8                                          l5296 3F6E  
                                        l5392 4630                                          l5800 3852  
                                        l9010 3576                                          l6450 47C8  
                                        l6426 4698                                          l6418 4682  
                                        l9012 3584                                          l9004 355C  
                                        l6452 47CE                                          l6444 47B6  
                                        l6436 46AC                                          l5396 464C  
                                        l9006 3562                                          l9014 358E  
                                        l6462 47E0                                          l6710 41FE  
                                        l6702 41EC                                          l9030 3F02  
                                        l9102 012A                                          l6438 46B2  
                                        l6622 4148                                          l9040 3F3C  
                                        l9032 3F0A                                          l9104 0166  
                                        l6560 487A                                          l9018 35A6  
                                        l6722 4218                                          l6714 420A  
                                        l6706 41F6                                          l9050 418A  
                                        l9210 05EE                                          l6626 415E  
                                        l8420 2454                                          l9028 3EF4  
                                        l9052 4192                                          l9300 09BE  
                                        l9220 063A                                          l9204 05C4  
                                        l5756 477C                                          l6900 278C  
                                        l9062 4386                                          l9214 05FE  
                                        l9150 034A                                          l9142 02DA  
                                        l9134 0272                                          l9118 01C2  
                                        l5758 4782                                          l5790 3838  
                                        l5774 37FC                                          l6558 4870  
                                        l6910 2854                                          l6902 27C2  
                                        l6672 4C2C                                          l8512 328C  
                                        l8432 248A                                          l9056 41B8  
                                        l9048 417C                                          l9064 4394  
                                        l9320 0A54                                          l9232 06E8  
                                        l9216 0612                                          l9208 05D4  
                                        l9152 0360                                          l9072 002C  
                                        l9400 368E                                          l5768 378E  
                                        l6912 288E                                          l8370 387A  
                                        l8522 32BA                                          l8450 24E2  
                                        l8442 24B2                                          l8426 247E  
                                        l8602 40CE                                          l9314 0A10  
                                        l9306 09C6                                          l9234 06FC  
                                        l9226 06C8                                          l9170 044A  
                                        l9162 03CC                                          l9146 0302  
                                        l9082 0066                                          l5794 3842  
                                        l5786 382A                                          l6906 27FE  
                                        l6922 290A                                          l6676 4C38  
                                        l8380 38DE                                          l8372 3886  
                                        l8516 32A2                                          l8508 327A  
                                        l8460 251A                                          l8452 24EE  
                                        l9332 0AAC                                          l9308 09DA  
                                        l9260 0894                                          l9244 0746  
                                        l9228 06D8                                          l9164 03D8  
                                        l9172 045E                                          l9148 0318  
                                        l9084 007C                                          l9076 0042  
                                        l6916 28CE                                          l8382 38EA  
                                        l8374 38A6                                          l8366 386A  
                                        l9430 36BA                                          l8526 32D0  
                                        l8518 32A8                                          l8462 2526  
                                        l8454 24F6                                          l8550 3CC8  
                                        l8606 40DE                                          l9334 0AB8  
                                        l9342 0AFE                                          l9326 0A82  
                                        l9318 0A48                                          l9254 0874  
                                        l9238 0720                                          l9190 051A  
                                        l9182 04DA                                          l9158 03A6  
                                        l9078 0058                                          l9432 36D4  
                                        l8448 24D6                                          l8552 3CD2  
                                        l8544 3CB2                                          l8800 1542  
                                        l9344 0B10                                          l9352 0C04  
                                        l9328 0A8E                                          l9272 08F0  
                                        l9256 0884                                          l9248 0798  
                                        l9176 04C6                                          l9168 041C  
                                        l9096 0118                                          l9088 009C  
                                        l8712 2C6C                                          l8704 2C52  
                                        l6880 2664                                          l8394 3910  
                                        l8378 38BE                                          l8490 3238  
                                        l8570 3D14                                          l8562 3CF8  
                                        l8554 3CDA                                          l8538 3CA0  
                                        l9346 0B90                                          l9354 0C18  
                                        l9338 0AD6                                          l9290 0970  
                                        l9282 092E                                          l9194 056C  
                                        l9186 0514                                          l9178 04CC  
                                        l9098 011E                                          l8722 2CAC  
                                        l8714 2C74                                          l6890 2716  
                                        l6874 25D2                                          l9610 4564  
                                        l9602 4804                                          l8388 38FE  
                                        l9436 36E2                                          l8468 256C  
                                        l9356 0C22                                          l9292 0976  
                                        l9276 091A                                          l8724 2CE0  
                                        l8708 2C5E                                          l9532 175E  
                                        l6884 26A0                                          l8494 3246  
                                        l8478 259E                                          l8566 3D04  
                                        l8590 409A                                          l8582 407E  
                                        l8814 1718                                          l9286 0968  
                                        l9278 0920                                          l9198 0596  
                                        l9358 0C3C                                          l8742 2D62  
                                        l8734 2D0E                                          l8750 2D92  
                                        l8726 2CE4                                          l8718 2C7C  
                                        l9390 3644                                          l9374 35E2  
                                        l6878 262E                                          l9710 3BEA  
                                        l9456 3722                                          l8488 321E  
                                        l8920 318C                                          l8912 315A  
                                        l8592 40A4                                          l8808 1666  
                                        l9296 0984                                          l8744 2D8A  
                                        l8736 2D36                                          l6888 26DC  
                                        l6896 2756                                          l9616 4578  
                                        l9466 3756                                          l8842 3022  
                                        l8594 40AC                                          l8586 408C  
                                        l8826 4B10                                          l9386 362A  
                                        l9730 4612                                          l9706 3BE6  
                                        l9484 3B18                                          l8932 31B0  
                                        l8924 319C                                          l8836 3004  
                                        l8950 45B0                                          l8942 31DA  
                                        l8598 40C2                                          l8790 148A  
                                        l9398 3688                                          l9830 39EE  
                                        l9574 1AA0                                          l9742 4536  
                                        l9750 340A                                          l8944 31E8  
                                        l8936 31C0                                          l8872 30A6  
                                        l8864 3092                                          l8776 1FA0  
                                        l8768 1EDC                                          l9840 3A14  
                                        l9824 39D8                                          l9930 4A36  
                                        l8962 3D84                                          l8938 31C6  
                                        l8882 30D0                                          l9842 3A1A  
                                        l9834 39FE                                          l9906 39A6  
                                        l9738 4524                                          l9682 3B7C  
                                        l9922 48B8                                          l9914 4C9C  
                                        l8892 3106                                          l8884 30DE  
                                        l8876 30B6                                          l8796 1532  
                                        l9852 3A40                                          l9836 3A04  
                                        l9828 39E8                                          l9908 39D0  
                                        l9692 3BC0                                          l8982 34F2  
                                        l9942 4948                                          l8958 3D52  
                                        l8878 30BC                                          l9854 3A46  
                                        l9846 3A2A                                          l9862 3A5C  
                                        l9686 3B96                                          STR_1 FF34  
                                        l8968 3DB0                                          l9848 3A30  
                                        l9864 3A86                                          l9880 394E  
                                        l9792 2DB8                                          l9696 3BCA  
                                        l9784 4C6E                                          l9776 4C54  
                                        STR_2 FF48                                          STR_3 FEE1  
                                        l8898 3116                                          l9858 3A56  
                                        l9874 3938                                          STR_4 FE75  
                                        STR_5 FEF7                                          l9948 495C  
                                        l9892 397A                                          l9868 3922  
                                        STR_6 FF20                                          STR_7 FE93  
                                        l9886 3964                                          STR_8 FECB  
                                        STR_9 FE32                                          l9898 3990  
                                        u4060 37BC                                          u4070 37F2  
              ?_Do_Change_Fan_Timer_Mode_Plus 0001                                          u3360 3F9C  
                                printf@tmpval 00A2                                          u5300 413E  
                                        u8010 0712                                          u7230 2D44  
                                        u8311 36AC                                          u7600 3510  
                __end_of_Activate_Buzzer_2KHz 4D64                                          u8331 36CA  
                                        u7371 2FF6                                          u8260 360E  
                                        u8500 451A                                          u7605 3508  
                                        u6741 2412                                          u6751 2426  
                                        u7391 3014                                          u8431 3B4C  
                                        u9147 4DD8                                          u7581 34E4  
                                        _RBPU 007F8F                                          u6951 3210  
                                        u8490 4608                                          u6971 322E  
                                        u7790 0208                                          u7795 01FC  
                                        _TRMT 007D61                               Set_D1_RGB@range 0021  
                         ??_Deactivate_Buzzer 0011                                          _main 1ADE  
                                        _font FBC1       Update_Setup_Screen_Cursor_Backward@xinc 0030  
                                ___ftpack@arg 0011       Update_Setup_Screen_Cursor_Backward@yinc 002F  
                                        _hour 0065                                  ___ftpack@exp 0014  
                            __end_of_I2C_Init 4E00                              __end_of_I2C_Read 46B8  
                                        _year 006B                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                ??_get_full_ADC 0013  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 00DE  
                                        _volt 00B8                              __end_of_I2C_Stop 4D40  
                                        pclat 000FFA                            __size_of_LCD_Reset 0012  
                                        prodh 000FF4                                          prodl 000FF3  
                             __end_of_Do_Beep 4C24                                          start 0018  
                 __size_of_I2C_Write_Cmd_Only 001A                               __end_of_Do_Init 443C  
                                 _Do_Beep_Bad 4BEC                               ??_drawFastVLine 001C  
                             Set_D2_RGB@range 0021                                  ___ftmul@cntr 002C  
                             __end_of_i2cNack 4DF6                                  ___param_bank 000010  
                                ___ftmul@sign 002D       Update_Setup_Screen_Cursor_Forward@field 002E  
                                ___fttol@exp1 003C                         __size_of_Do_Beep_Good 001C  
                                _Turn_Off_Fan 4BB4                                  ___fttol@lval 0038  
                                 ?_TIMER1_isr 0001                              __end_of_INT0_isr 49A8  
                            __end_of_INT1_isr 4E14                                         l10000 0CC6  
                                       l10006 0D0A                              __end_of_INT2_isr 2ABE  
                                       l10210 21EA                                         l10202 21CA  
                                       l10026 0E06                                         l10018 0D90  
                                       l10220 2210                                         l10214 21FA  
                                       l10206 21DA                                         l10222 2216  
                                       l10062 0ED4                                         l10054 0E9A  
                                       l10232 2234                                         l10218 220A  
                                       l10090 0FF6                                         l10082 0FAC  
                                       l10058 0EB6                                         l10066 0EF2  
                                       l10156 2038                                         l10244 228C  
                                       l10260 2384                                         l10084 0FC2  
                                       l10500 1C98                                         l10168 2090  
                                       l10088 0FE0                                         l10512 1CB6  
                                       l10504 1CA2                                         l10186 218C  
                                       l10282 23DC                                         l10274 23BC  
                                       l10290 23F8                                         l10522 1CDA  
                                       l10514 1CC0                                         l10532 1D30  
                                       l10524 1CE2                                         l10516 1CCA  
                                       l10508 1CAC                                         l10452 1AF8  
                                       l10198 21BA                                         l10286 23EC  
                                       l10278 23CC                                         l10526 1CE8  
                                       l10288 23F2                                         l10528 1D20  
                                       l10464 1B50                                         l10546 1D7A  
                                       l10492 1C84                                         l10484 1C50  
                                       l10496 1C8E                __size_of_Activate_Buzzer_500Hz 0012  
                   __end_of_Deactivate_Buzzer 4E2C                               ??_do_update_pwm 003D  
                             drawFastVLine@hi 0020                               drawFastVLine@lo 0021  
                              Read_Volt@nStep 0044                 __end_of_Activate_Buzzer_500Hz 4D76  
                                       ?_main 0001                               __end_of___awdiv 3D20  
                             __end_of___ftadd 25C6                                         STR_10 FEB0  
                                       STR_11 FE54                                         STR_20 FFBD  
                                       STR_12 FF7B                                         STR_21 FFFB  
                                       STR_13 FFF5                                         STR_14 FF1E  
                                       STR_22 FFF8                                         STR_30 FFCD  
                                       STR_15 FFC8                                         STR_23 FFDC  
                                       STR_31 FFD2                                         STR_40 FE75  
                                       STR_24 FFF1                                         STR_32 FFE1  
                                       STR_16 FFD7                                         STR_41 FEF7  
                                       STR_33 FFB3                                         STR_17 FFB7  
                                       STR_25 FFAC                                         STR_26 FFB3  
                                       STR_42 FF20                                         STR_34 FE75  
                                       STR_18 FFC2                                         STR_43 FE93  
                                       STR_27 FFE5                                         STR_19 FFA0  
                                       STR_35 FF0C                                         STR_36 FF20  
                                       STR_28 FFE9                                         STR_44 FF88  
                             __end_of___awmod 40EA                                         STR_37 FE93  
                                       STR_45 FFC8                                         STR_29 FFED  
                                       STR_46 FFD7                                         STR_38 FF94  
                                       STR_39 FF6C                                         STR_47 FF5B  
                             __end_of___ftdiv 377E                               __end_of___ftneg 4A90  
                             __end_of___lldiv 3F5E                               __end_of___ftmul 32F8  
                                       _T0CON 000FD5                               ___awdiv@divisor 0019  
                                       _T1CON 000FCD                               __end_of___llmod 41DA  
                             __end_of___ftsub 45DC                               __end_of___fttol 35BA  
                                       _T2CON 000FCA              ??_Do_Change_Fan_Timer_Mode_Minus 0046  
             ?_Do_Change_Fan_Timer_Mode_Minus 0001                                         _T3CON 000FB1  
                                       i2l623 3E0C                                         i2l635 2ABC  
                                       i2l658 499E                               ___awdiv@counter 001B  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTA 000F80  
                                       _PORTD 000F83                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                       __end_of_Wait_Half_Sec 4C40                                         _TXREG 000FAD  
                                       _TXSTA 000FAC                               __end_of_get_RPM 46F6  
                                       _Rcmd1 2ED6                                         _Rcmd3 32F8  
                                ___lltoft@exp 0021      Update_Setup_Screen_Cursor_Backward@field 002E  
                                  _Nec_Button 00C9                 __size_of_Do_Save_New_Fan_Temp 0014  
                                  _i2cHighSda 4E1C                                    _i2cHighScl 4DD4  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                               ___awtoft@sign 001C                               __end_of_dpowers FDC4  
                                       _font2 FCC0              __size_of_Update_Setup_Fan_Screen 0082  
                                       _found 00D0                                         _scale 135E  
                             __end_of_isdigit 4B1A                                         _tempC 0069  
                                       _tempF 006A                                         _month 0067  
                               ___ftpack@sign 0015                                         _putch 4DB8  
                           __end_of_I2C_Start 4D52                             __end_of_I2C_Write 47EE  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                                       plusw1 000FE3                                         plusw2 000FDB  
                                       status 000FD8                             ?_DS1621_Read_Temp 0014  
                                _Do_Beep_Good 4BD0               __size_of_check_for_button_input 00AE  
                       __end_of_Go_Next_Field 4B5A                               write_data@data_ 0013  
                          ??_DS1621_Read_Temp 0016                         _Select_Fan_Temp_Field 00CA  
                             __initialization 431E                                  __end_of_main 1D9E  
                                __end_of_font FCC0                   __end_of_Decrease_Duty_Cycle 4A46  
                            __end_of_Init_ADC 4DD4                              get_duty_cycle@dc 0019  
                            __end_of_Rcmd2red 4734                                        ??_main 005A  
                               ___fttol@sign1 0037                             _Decrease_Fan_Temp 4C5A  
                                  _Set_D1_RGB 45DC                                 __activetblptr 000002  
                                  _Set_D2_RGB 44EA                             ?_DS3231_Read_Time 0001  
                           __end_of_LCD_Reset 4D1C                          __size_of__tdiv_to_l_ 0110  
                       __end_of_Go_Prev_Field 4B3A                     ??_TFT_GreenTab_Initialize 001B  
                          ?_Decrease_Fan_Temp 0001                                  _Fan_Mode_Txt 017D  
                  ??_Update_Setup_Time_Screen 004A                                _Init_Interrupt 4A90  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                                     I2C_Init@c 0011  
                                   I2C_Read@n 0012                                        _ADCON0 000FC2  
                                      _ADCON1 000FC1                                        _ADCON2 000FC0  
                         DS1621_Read_Temp@Cmd 0016                              ___llmod@dividend 001E  
                                      ?_scale 0043                                        _ADRESH 000FC4  
                                      _ADRESL 000FC3                                        _CCPR1L 000FBE  
                                      _CCPR2L 000FBB                              ___awdiv@dividend 0017  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 482A                                        ?_putch 0001  
                            __end_of___ftpack 3920                              __end_of___lbtoft 4A6C  
                         ??_Decrease_Fan_Temp 004D                                     ??_Do_Beep 0046  
                            __end_of___lltoft 43E0                                 ??_Monitor_Fan 0059  
                                      _DC_Txt 00E4                                     ??_Do_Init 0059  
                                      i2l7510 29FC                                        i2l8230 3E02  
                                      i2l8222 3DEE                                        i2l7440 4984  
                                      i2l7512 2A02                                        i2l7504 29E0  
                                      i2l7514 2A08                                        i2l8226 3DF8  
                                      i2l7444 4998                                        i2l7540 2A8A  
                                      i2l7526 2A62                                        i2l7542 2A90  
                                      i2l7518 2A0C                                        i2l7550 2A9A  
                                      i2l7544 2A96                                        i2l7464 295C  
                                      i2l7490 29B8                                        i2l7484 29AE  
                                      i2l7476 2990                                        i2l7498 29D6  
                                      _OSCCON 000FD3                            __size_of_Init_UART 0014  
                         __size_of_TIMER1_isr 000C                                        _SPBRGH 000FB0  
                                      _SSPBUF 000FC9                                     ??_i2cNack 0011  
                            _force_nec_state0 4E2C                            __size_of_Read_Volt 006E  
                            __end_of_delay_ms 4772                                        _i2cAck 4D1C  
                                      _Nec_ok 00BB                              __end_of_fillRect 4670  
                            __end_of_drawChar 2D98                              __end_of__powers_ FE12  
                          __size_of_OpenUSART 0070                                        ___ftge 3D20  
                              _FAN_TIMER_MODE 0060                                _FAN_TIMER_TIME 00C3  
         __end_of_Initialize_Setup_Fan_Screen 34D4                   _Initialize_Setup_Fan_Screen 33EA  
                    __size_of_Activate_Buzzer 0012                                        ___wmul 49D2  
                                   ??___awdiv 001B                              __end_of_drawtext 369C  
                                   ??___ftadd 0053                                     ??___awmod 0041  
                                   ??___ftdiv 0034                             _In_Fan_Temp_Setup 00C7  
                                   ??___ftneg 0014                                     ??___lldiv 0019  
                                   ??___ftmul 0025                                     ??___llmod 0026  
                                   ??___ftsub 0059                                     ??___fttol 0032  
                                      _chkisr 0008                                        _buffer 0100  
                   __end_of_Decrease_Fan_Temp 4C74                                        _fround 1D9E  
                                      clear_0 4324                                        clear_1 4330  
                            ___awdiv@quotient 001D                                        _minute 0066  
                                      _second 0068                               ___awmod@divisor 003F  
                                  _Timing_Txt 013C                          _Activate_Buzzer_2KHz 4D52  
                                   ??_get_RPM 0021                    __size_of_Deactivate_Buzzer 0008  
                             ___awmod@counter 0041                                        _printf 001C  
                                drawtext@size 0040                               ??_Increase_Time 004A  
                                      _strcpy 4866                                        _strlen 4772  
                       ___ftmul@f3_as_product 0029                        __end_of_Init_Interrupt 4AB4  
                                  _Toggle_Fan 4C8E                          __end_of_get_full_ADC 4A20  
                      _check_for_button_input 3B42                              _Do_Save_New_Time 4CCE  
                                   ??_isdigit 0011                                     ?_I2C_Init 0011  
                                   ?_I2C_Read 0001                       __size_of_Setup_Fan_Temp 01E2  
                      get_duty_cycle@set_temp 0013                                     ?_I2C_Stop 0001  
                                __mediumconst FBC0                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 4B7A                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                            __end_of_spiwrite 4CF6                      __size_of_Exit_Time_Setup 0010  
                          __size_of_bcd_2_dec 002A                                    __accesstop 0080  
                     __end_of__initialization 4376                              ??_get_duty_cycle 0015  
                          __size_of_dec_2_bcd 0058                                    ___ftadd@f1 004D  
                                  ___ftadd@f2 0050                                    ___ftge@ff1 0011  
                                  ___ftge@ff2 0014                                     ?_INT0_isr 0001  
                                   ?_INT1_isr 0001                                     ?_INT2_isr 0001  
                               ___rparam_used 000001                                    ___ftdiv@f1 002E  
                                  ___ftdiv@f2 0031                                    ___ftdiv@f3 0038  
                                  ___ftneg@f1 0011                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           __end_of_Monitor_Fan 458C  
                                  ___ftmul@f1 001F                                    ___ftmul@f2 0022  
                                  ___ftsub@f1 0080                                    ___ftsub@f2 0083  
                                  ___fttol@f1 002E                                 __end_of_Rcmd1 2FE6  
                               __end_of_Rcmd3 33EA                                __pcstackCOMRAM 0001  
                                __pidataBANK0 4AB4                                  __pidataBANK1 3E46  
                                  ___lltoft@c 0019                                 __end_of_font2 FD9C  
                           __end_of_i2cLowSda 4E0A                             __end_of_i2cLowScl 4E1C  
                               __end_of_scale 173E                                 __end_of_putch 4DC6  
                       ?_Activate_Buzzer_2KHz 0001                                     INT0_isr@k 0001  
                           __end_of_Init_UART 4D0A                                drawPixel@color 0019  
                                dec_2_bcd@bcd 0047                                  dec_2_bcd@dec 0049  
                      __size_of_Decrease_Time 00B6                                   ?_Set_D1_RGB 0001  
                                 ?_Set_D2_RGB 001F                            _setup_fan_set_temp 00D4  
                          _setup_fan_set_text 0187                               ?_Init_Interrupt 0001  
                      __size_of_write_command 0010                                    __div_to_l_ 30F6  
                           __end_of_Read_Volt 42B8                                    ??_I2C_Init 0015  
                                  ??_I2C_Read 0011                                    ??_I2C_Stop 0011  
                                     ??_Rcmd1 001B                                       ??_Rcmd3 001B  
                     _Update_Setup_Fan_Screen 3FE6                            __size_of_drawPixel 0030  
                           __end_of_OpenUSART 424A                               __div_to_l_@exp1 001C  
                             __div_to_l_@cntr 001B                   __end_of_Increase_Duty_Cycle 48C8  
                                     ??_scale 0046                          Read_Volt@ADC_Channel 0043  
                             __div_to_l_@quot 0017                                       ??_putch 0011  
                                  __pbssBANK0 00B4                                     ?_Init_ADC 0001  
        __end_of_Initialize_Setup_Time_Screen 2ED6         __size_of_Initialize_Setup_Time_Screen 013E  
                _Initialize_Setup_Time_Screen 2D98                                 ??_DS1621_Init 0016  
                                   ?_Rcmd2red 0001                               spiwrite@spidata 0012  
                                  ??_INT0_isr 0001                                    ??_INT1_isr 0001  
                                  ??_INT2_isr 0001                                 __div_to_l_@f1 0011  
                               __div_to_l_@f2 0014                                  _fan_set_temp 00DC  
                                     ?_i2cAck 0001                                  ?_Do_Beep_Bad 0001  
                               ??_Turn_On_Fan 0059                                I2C_Read@inByte 0013  
                                     ?___ftge 0011                                       ?___wmul 0011  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                                     ?_chkisr 0001                        __size_of_setAddrWindow 0056  
                           __end_of_bcd_2_dec 49D2                                       _CCP1CON 000FBD  
            I2C_Write_Cmd_Write_Data@Data_Out 0014                                       _CCP2CON 000FBA  
                      __size_of_Do_Setup_Time 023E                                  ??_TIMER1_isr 0001  
                  __size_of_Decrease_Fan_Temp 001A                                       ?_fround 0043  
                               ??_I2C_ReStart 0011                                     ?___awtoft 0019  
                                   ?___ftpack 0011                                     ?___lbtoft 0019  
                                     _FANMODE 00C2                                    I2C_Write@n 0012  
                                     ?_printf 0086                                     ?___lltoft 0019  
                                     ?_strcpy 0011                                       ?_strlen 0011  
                           __end_of_dec_2_bcd 4494                                   ?_Toggle_Fan 0001  
                           ??_Activate_Buzzer 0011                                 _Fan_Timer_Txt 00F4  
                                  _fillScreen 4B98                         __end_of_Update_Screen 135E  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                                     _SSPSTAT 000FC7                                       _RPM_Txt 0182  
                       __end_of_fillRectangle 385A                                       _Do_Beep 4C08  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 43E0                                   _Monitor_Fan 453C  
                    _I2C_Write_Cmd_Write_Data 4B5A                    __end_of_I2C_Write_Cmd_Only 4C8E  
                                  ??_Rcmd2red 0014                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 39D6                       get_duty_cycle@diff_temp 0017  
                                     _i2cNack 4DEC                            __end_of_TIMER1_isr 4DEC  
                          _Fan_Timer_Mode_Txt 00F0                 ?_Initialize_Setup_Time_Screen 0001  
                               _write_command 4DA8                                     _I2C_Start 4D40  
                                   _I2C_Write 47B0                             ??_Exit_Time_Setup 004A  
                         __size_of_Set_D1_RGB 004A                           __size_of_Set_D2_RGB 0052  
                             __size_of_i2cAck 0012                             __end_of__npowers_ FDEB  
                                     __Hparam 0000                                    _scale$2978 0046  
                __end_of_Do_Save_New_Fan_Temp 4CCE                                       __Lparam 0000  
                         __end_of_DS1621_Init 4B98                             __end_of_drawPixel 48F8  
                       __end_of_drawFastVLine 3FE6                               __size_of___ftge 0096  
                                     ___awdiv 3C8A                                       ___ftadd 2402  
                                     ___awmod 4068                                       ___ftdiv 369C  
                                     ___ftneg 4A6C                                    _light_flag 00D1  
                                     ___lldiv 3ED2                               __size_of___wmul 0028  
                      ??_Activate_Buzzer_2KHz 0011                                       ___ftmul 3200  
                                     ___llmod 416A                                       ___ftsub 458C  
                                     ___fttol 34D4                         __size_of_get_full_ADC 0026  
                             __size_of_chkisr 3E3E                                     ?_spiwrite 0001  
                                     __pcinit 431E                                    ??___awtoft 001C  
                                  ??___ftpack 0016                                    ??___lbtoft 001C  
                             __size_of_fround 0244                                       __ramtop 1000  
                                     _get_RPM 46B8                                    ??___lltoft 001D  
                                     __ptext0 1ADE                                       __ptext1 0C60  
                                     __ptext2 4C8E                                       __ptext3 4AD6  
                                     __ptext4 2220                                       __ptext5 33EA  
                   __size_of_DS1621_Read_Temp 003C                                       __ptext6 4C40  
                                     __ptext7 4CBA                                       __ptext8 4C5A  
                                     __ptext9 3FE6                               __size_of_printf 0C44  
                                 _Timer_Table 0138                           __end_of_Turn_On_Fan 4AF8  
                                   _T0CONbits 000FD5                               __size_of_strcpy 0032  
                             __size_of_strlen 003E                             __end_of_hexpowers FE32  
                    __end_of_force_nec_state0 4E34                                     _T1CONbits 000FCD  
                                 ?__div_to_l_ 0011                     ??_Update_Setup_Fan_Screen 004A  
                                     _dpowers FD9C                         __end_of_do_update_pwm 3B42  
                              _Setup_Fan_Temp 2220                                       _isdigit 4AF8  
                       _Activate_Buzzer_500Hz 4D64                              ___awmod@dividend 003D  
                                  _duty_cycle 0064                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 4CBA                                 drawtext@_text 003A  
                               drawtext@color 003C                                    ??_fillRect 0028  
                                  ??_drawChar 0035                                     _LCD_Reset 4D0A  
                           _DS3231_Write_Time 3BF0                                 _setAddrWindow 4494  
                              __pintcode_body 3DB6                                    delay_ms@ms 0017  
                        end_of_initialization 4376                                 _Do_Setup_Time 1FE2  
                                   _INT0_flag 00C4                                     _INT1_flag 00C5  
                                   _INT2_flag 00C6                                    ??_drawtext 0041  
                           _Increase_Fan_Temp 4C40                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                                ?_write_command 0001  
                               __Lmediumconst FBC0                     __size_of_DS3231_Read_Time 0066  
                                     int_func 3DB6                            ?_Increase_Fan_Temp 0001  
                     DS3231_Read_Time@Address 0014                      DS3231_Write_Time@Address 004B  
                                  ?_I2C_Start 0001                                    ?_I2C_Write 0001  
                                  get_RPM@RPS 0021                      __end_of_Do_Save_New_Time 4CE2  
                                _get_full_ADC 49FA                           __size_of_Toggle_Fan 0016  
                             ___lldiv@divisor 0015                           ??_DS3231_Write_Time 004A  
                             ___lldiv@counter 001D                       check_for_button_input@j 01A1  
                                  _tempSecond 00DD                        __size_of_Wait_Half_Sec 001C  
                                   _RCSTAbits 000FAB                                       printf@c 00B3  
                                     printf@f 0086                           ??_Increase_Fan_Temp 004D  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                              __tdiv_to_l_@f1 0011                                __tdiv_to_l_@f2 0014  
                                  ??_spiwrite 0011                       ?_check_for_button_input 0001  
                                     strlen@s 0011                                 ??__tdiv_to_l_ 0017  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                        __end_of_Setup_Fan_Temp 2402  
                            drawtext@cursor_x 0049                              drawtext@cursor_y 0048  
                                   _PORTBbits 000F81                                     _PORTCbits 000F82  
                                   _PORTDbits 000F83                              I2C_Write@outByte 0011  
                                  _setup_date 015C                                   ?_fillScreen 0024  
                __size_of_Decrease_Duty_Cycle 0026                                    _setup_hour 00D5  
                                  _setup_time 0165                                    _setup_year 00D9  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 3C8A  
                                   _TRISBbits 000F93                                     _TRISCbits 000F94  
        __size_of_Initialize_Setup_Fan_Screen 00EA                        __size_of_Go_Next_Field 0020  
                                ??_i2cHighSda 0011                                  ??_i2cHighScl 0011  
                           __size_of_I2C_Init 000A                             __size_of_I2C_Read 0048  
                   __end_of_Increase_Fan_Temp 4C5A                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 0014                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                              drawtext@textsize 0044  
                                   _SYSTEM_ON 0062                                    drawPixel@x 001B  
                                  drawPixel@y 0018                                   _DS1621_Init 4B7A  
                                 ___ftdiv@exp 003B                                   printf@width 00A6  
                                   _TXSTAbits 000FAC             __size_of_Update_Setup_Time_Screen 0184  
                          get_full_ADC@result 0015                           __size_of__div_to_l_ 010A  
                   ?_Update_Setup_Time_Screen 0001                             __size_of_INT0_isr 002C  
                           __size_of_INT1_isr 000A                             __size_of_INT2_isr 018A  
                              __end_of_i2cAck 4D2E                                   ___ftmul@exp 0028  
                      __size_of_Go_Prev_Field 0020                ??_Initialize_Setup_Time_Screen 004A  
                        __size_of_Do_Beep_Bad 001C                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 4AD6                __end_of_check_for_button_input 3BF0  
                            ??_Init_Interrupt 0011                            __end_of_i2cHighSda 4E24  
                              __end_of___ftge 3DB6                            __end_of_i2cHighScl 4DE0  
                               Read_Volt@volt 0040                                __end_of___wmul 49FA  
                               delay_ms@count 0019                                    _write_data 4D98  
                              __end_of_chkisr 3E46                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 4CA4                               ?_Setup_Fan_Temp 0001  
                                  drawtext@bg 003E                                __end_of_fround 1FE2  
                                ??_Set_D1_RGB 001F                                  ??_Set_D2_RGB 0021  
                      ?_Activate_Buzzer_500Hz 0001                                     _i2cLowSda 4E00  
                                   _i2cLowScl 4E14                                __end_of_printf 0C60  
                       __end_of_Increase_Time 39D6                                __end_of_strcpy 4898  
                              __end_of_strlen 47B0                                     _Nec_state 0061  
                         start_initialization 431E                                     _Init_UART 4CF6  
                               _Wait_Half_Sec 4C24                           __end_of__tdiv_to_l_ 30F6  
                        _Do_Save_New_Fan_Temp 4CBA                        Update_Screen@neg_tempC 004C  
                      Update_Screen@neg_tempF 004E                                     _Read_Volt 424A  
                             ??_Decrease_Time 004A                            get_duty_cycle@temp 0011  
                             ??_write_command 0013                          Set_D1_RGB@duty_cycle 0020  
                                   _OpenUSART 41DA                               ___llmod@divisor 0022  
                            __CFG_OSC$INTIO67 000000                                   ??_I2C_Start 0011  
                           __size_of_Init_ADC 000E                               ___llmod@counter 0026  
                                 ??_I2C_Write 0011                                      ??_i2cAck 0011  
                           __size_of_Rcmd2red 003E                           __size_of_fillScreen 001C  
                          __end_of_Set_D1_RGB 4626                            __end_of_Set_D2_RGB 453C  
                               _Go_Next_Field 4B3A                               _Activate_Buzzer 4D76  
                                    ??___ftge 0017                                      ??___wmul 0015  
                               ?_Turn_Off_Fan 0001                                      ??_chkisr 0003  
                                 __pdataBANK0 00DA                                   __pdataBANK1 0100  
                                    ??_fround 0046                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 0094  
                            _DS1621_Read_Temp 482A                                      ??_strcpy 0015  
                                    ??_strlen 0013                                  ??_Toggle_Fan 0059  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                                   _bcd_2_dec 49A8                                    fround@prec 004C  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                                ?_Wait_Half_Sec 0001  
                           __size_of___lltoft 0060                                   __pbssCOMRAM 005A  
                  ??_I2C_Write_Cmd_Write_Data 0015                    __size_of_DS3231_Write_Time 009A  
                                  ?_Init_UART 0001                               ??_setAddrWindow 0017  
                               __pcstackBANK0 0080                                 __pcstackBANK1 018C  
                               _Go_Prev_Field 4B1A                               ??_Do_Setup_Time 005A  
                       ?_Do_Save_New_Fan_Temp 0001                                     _dec_2_bcd 443C  
                             _Exit_Time_Setup 4D88                                    ?_Read_Volt 003D  
                  __size_of_Increase_Fan_Temp 001A                                   ??_LCD_Reset 001B  
                                _isdigit$2601 0012                             __size_of_delay_ms 003E  
                                    ?_Do_Beep 0001                                      ?_Do_Init 0001  
                                ?_Monitor_Fan 0001                             __size_of_fillRect 004A  
                           __size_of_drawChar 0156                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 42B8                                      ?_i2cNack 0001  
                           __size_of_drawtext 00E2                                 ?_Do_Beep_Good 0001  
 __end_of_Update_Setup_Screen_Cursor_Backward 2934  __size_of_Update_Setup_Screen_Cursor_Backward 01B4  
       ??_Update_Setup_Screen_Cursor_Backward 002E          ?_Update_Setup_Screen_Cursor_Backward 0001  
         _Update_Setup_Screen_Cursor_Backward 2780                  __size_of_Increase_Duty_Cycle 0030  
                              ?_Go_Next_Field 0001                            __end_of_Toggle_Fan 4CA4  
                                 I2C_Read@ack 0011                                     _bit_count 00CD  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 4924  
                              ??_Turn_Off_Fan 0059                                 __pmediumconst FBC0  
                                    ?___awdiv 0017                                     __ptext100 4A20  
                                   __ptext101 4C08                                     __ptext110 4D76  
                                   __ptext102 3A8C                                     __ptext103 4A46  
                                   __ptext112 4DE0                                     __ptext104 34D4  
                                   __ptext113 2934                                     __ptext105 3200  
                                   __ptext114 4E2C                                     __ptext106 369C  
                                   __ptext115 4E0A                                     __ptext107 385A  
                                   __ptext116 497C                                     __ptext108 4C24  
                                   __ptext109 4E24                                      ?___ftadd 004D  
                                    ?___awmod 003D                                      ?___ftdiv 002E  
                                    ?___ftneg 0011                                      ?___lldiv 0011  
                                    ?___ftmul 001F                                      ?___llmod 001E  
                                    ?___ftsub 0080                                     __npowers_ FDC4  
                                    ?___fttol 002E                       __size_of_get_duty_cycle 0080  
                                   __tft_type 00CC                            _I2C_Write_Cmd_Only 4C74  
                          drawFastVLine@color 001A                                   ?_write_data 0001  
                                   _drawPixel 48C8                                      ?_get_RPM 001F  
                                 __tdiv_to_l_ 2FE6                             __size_of_spiwrite 0014  
                                ??__div_to_l_ 0017                                    ?_bcd_2_dec 0001  
                         ?_I2C_Write_Cmd_Only 0013                             ?_force_nec_state0 0001  
                                    ?_isdigit 0001                                      _I2C_Init 4DF6  
                                    _I2C_Read 4670                                ?_Go_Prev_Field 0001  
                                    _I2C_Stop 4D2E                             _Initialize_Screen 173E  
                              __size_of_Rcmd1 0110                                __size_of_Rcmd3 00F2  
                                  ?_dec_2_bcd 0043                            ??_force_nec_state0 0001  
                    I2C_Write_Cmd_Only@Device 0014                                     _hexpowers FE12  
                          ?_Initialize_Screen 0001                                __size_of_scale 03E0  
                              __size_of_putch 000E                       __end_of_Activate_Buzzer 4D88  
                              ___wmul@product 0015                                ??_Do_Beep_Good 0046  
                         ??_Initialize_Screen 004A                                  _Select_Field 00CB  
                                    _INT0_isr 497C                                      _INT1_isr 4E0A  
                                    _INT2_isr 2934                           _Decrease_Duty_Cycle 4A20  
                        ??_I2C_Write_Cmd_Only 0014                                      _PIE1bits 000F9D  
                                   _tempC_Txt 00F8                                     _tempF_Txt 00DF  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 06FE  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 004A  
                                    _PIR1bits 000F9E                            __end_of__div_to_l_ 3200  
                               _In_Time_Setup 00C8                            ??_Do_Save_New_Time 004C  
                            _Fan_Set_Temp_Txt 00EC                  ?_Initialize_Setup_Fan_Screen 0001  
                                   _setup_day 00D3                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                                     drawChar@c 002F  
                                   drawChar@i 0038                                     drawChar@j 0037  
                                   drawChar@x 0036                                     drawChar@y 002E  
               __size_of_Activate_Buzzer_2KHz 0012               ??_Do_Change_Fan_Timer_Mode_Plus 0046  
                                  ?_drawPixel 0018                        __size_of_fillRectangle 00DC  
                                  _ADCON0bits 000FC2                               ??_Wait_Half_Sec 0011  
                     __end_of_Exit_Time_Setup 4D98                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 1ADE                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                          ?_Decrease_Duty_Cycle 0001  
                                ??_fillScreen 0026                                    printf@flag 00AE  
                                  printf@fval 00B0                                    printf@prec 00A0  
                      ??_Do_Save_New_Fan_Temp 004A                                   ??_Init_UART 0014  
                               Set_D2_RGB@rpm 001F              __end_of_Update_Setup_Time_Screen 2C42  
                                 ??_Read_Volt 0040                                   _INTCON2bits 000FF1  
                                 _INTCON3bits 000FF0                                     copy_data0 434A  
                                   copy_data1 436A                                     drawtext@i 0046  
                      __size_of_drawFastVLine 0088                                     drawtext@x 0043  
                                   drawtext@y 0039                                      _Nec_code 00B4  
                                    _Init_ADC 4DC6                             write_command@cmd_ 0013  
                                 ??_OpenUSART 0013                              __size_of_Do_Beep 001C  
                                ?_DS1621_Init 0001                                      _Rcmd2red 46F6  
                            __size_of_Do_Init 005C                           __size_of_write_data 0010  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
                                _Time_Elapsed 005A                              __size_of_i2cNack 000A  
                               _RTC_ALARM_Txt 00DA        __end_of_Do_Change_Fan_Timer_Mode_Minus 497C  
     __size_of_Do_Change_Fan_Timer_Mode_Minus 002C                _Do_Change_Fan_Timer_Mode_Minus 4950  
                                    __Hrparam 0000                        __size_of_do_update_pwm 00B6  
                              Wait_Half_Sec@k 0011                            __end_of_fillScreen 4BB4  
                                    __Lrparam 0000                              ??_Setup_Fan_Temp 005A  
                                ?_Turn_On_Fan 0001                       ??_Activate_Buzzer_500Hz 0011  
                            __size_of___awdiv 0096                              __size_of___ftadd 01C4  
                    ?_Update_Setup_Fan_Screen 0001                              __size_of___awmod 0082  
                            __size_of___ftdiv 00E2                              __size_of___ftneg 0024  
                            __size_of___lldiv 008C                              __size_of___ftmul 00F8  
                            __size_of___llmod 0070                              __size_of___ftsub 0050  
                            __size_of___fttol 00E6                                      _Volt_Txt 0177  
               ??_Initialize_Setup_Fan_Screen 004A                                      ___awtoft 47EE  
                                    ___ftpack 385A                                      ___lbtoft 4A46  
                                ?_I2C_ReStart 0001                                   _fround$2976 0049  
                                 _fround$2977 0046                                      ___lltoft 4380  
                       ??_Decrease_Duty_Cycle 0046                               ??_Go_Prev_Field 0031  
                            __size_of_get_RPM 003E                                   ??_bcd_2_dec 0011  
                               _Update_Screen 0C60                                      _date_Txt 0153  
                            __size_of_isdigit 0022                                      _delay_ms 4734  
                                 ??_dec_2_bcd 0045                                      __ptext10 4898  
                                    __ptext11 1FE2                                      __ptext20 453C  
                                    __ptext12 46B8                                      __ptext21 40EA  
                                    __ptext13 3B42                                      __ptext30 173E  
                                    __ptext22 2D98                                      __ptext14 49A8  
                                    __ptext31 4866                                      __ptext23 3920  
                                    __ptext15 44EA                                      __ptext40 3BF0  
                                    __ptext32 4B98                                      __ptext24 4B1A  
                                    __ptext16 45DC                                      __ptext41 443C  
                                    __ptext33 377E                                      __ptext25 2780  
                                    __ptext17 424A                                      __ptext50 48C8  
                                    __ptext42 42B8                                      __ptext34 48F8  
                                    __ptext26 4B3A                                      __ptext18 49FA  
                                    __ptext51 4494                                      __ptext43 39D6  
                                    __ptext35 32F8                                      __ptext27 25C6  
                                    __ptext19 47EE                                      __ptext60 43E0  
                                    __ptext52 4D98                                      __ptext44 2ABE  
                                    __ptext36 46F6                                      __ptext28 4D88  
                                    __ptext61 4BB4                                      __ptext53 4DA8  
                                    __ptext45 35BA                                      __ptext37 2ED6  
                                    __ptext29 4CCE                                      __ptext70 2FE6  
                                    __ptext62 001C                                      __ptext54 4CE2  
                                    __ptext46 4772                                      __ptext38 4D0A  
                                    __ptext71 30F6                                      __ptext63 135E  
                                    __ptext55 482A                                      __ptext47 2C42  
                                    __ptext39 4734                                      __ptext80 41DA  
                                    __ptext72 4380                                      __ptext64 4DB8  
                                    __ptext56 4670                                      __ptext48 4626  
                                    __ptext81 4A90                                      __ptext73 416A  
                                    __ptext65 4AF8                                      __ptext57 4DEC  
                                    __ptext49 3F5E                                      __ptext90 4E00  
                                    __ptext82 4DC6                                      __ptext74 3ED2  
                                    __ptext66 1D9E                                      __ptext58 4D1C  
                                    __ptext91 4E14                                      __ptext83 4DF6  
                                    __ptext75 458C                                      __ptext67 49D2  
                                    __ptext59 4CA4                                      __ptext92 4E1C  
                                    __ptext84 4B7A                                      __ptext76 2402  
                                    __ptext68 4068                                      __ptext93 4DD4  
                                    __ptext85 4B5A                                      __ptext77 4A6C  
                                    __ptext69 3C8A                                      __ptext94 4924  
                                    __ptext86 4C74                                      __ptext78 3D20  
                                    __ptext95 4950                                      __ptext87 47B0  
                                    __ptext79 4CF6                                      __ptext96 4BD0  
                                    __ptext88 4D2E                                      __ptext97 4D52  
                                    __ptext89 4D40                                      __ptext98 4BEC  
                                    __ptext99 4D64                                      _fillRect 4626  
                                    _drawChar 2C42                                      __powers_ FDEB  
                        __end_of_Turn_Off_Fan 4BD0              __size_of_TFT_GreenTab_Initialize 002C  
  __end_of_Update_Setup_Screen_Cursor_Forward 2780   __size_of_Update_Setup_Screen_Cursor_Forward 01BA  
        ??_Update_Setup_Screen_Cursor_Forward 002E           ?_Update_Setup_Screen_Cursor_Forward 0001  
          _Update_Setup_Screen_Cursor_Forward 25C6                                      _colstart 00CE  
                                    _drawtext 35BA                                    strcpy@from 0013  
                               _fillRectangle 377E                      __end_of_DS1621_Read_Temp 4866  
                            ?_Activate_Buzzer 0001                                 __size_of_main 02C0  
                        __size_of_Monitor_Fan 0050                                 ??_Do_Beep_Bad 0046  
                                    _time_Txt 016E                               fillRectangle@hi 0021  
                             fillRectangle@lo 0022                                _get_duty_cycle 40EA  
                               _drawFastVLine 3F5E                                     printf@idx 009D  
                                   printf@exp 00A8                                      _spiwrite 4CE2  
                                   printf@val 00AA                                   ??_drawPixel 001B  
                                    _rowstart 00D2                      __end_of_DS3231_Read_Time 431E  
                  __size_of_Initialize_Screen 03A0                              ?_Exit_Time_Setup 0001  
                        __end_of_Do_Beep_Good 4BEC                           _Increase_Duty_Cycle 4898  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
                               _do_update_pwm 3A8C         __end_of_Do_Change_Fan_Timer_Mode_Plus 4950  
      __size_of_Do_Change_Fan_Timer_Mode_Plus 002C                 _Do_Change_Fan_Timer_Mode_Plus 4924  
                              OpenUSART@spbrg 0011                                      isdigit@c 0013  
                                    scale@scl 0049                                     spiwrite@x 0011  
                                    intlevel2 0000                                ?_fillRectangle 0018  
                            __tdiv_to_l_@exp1 001F                              __tdiv_to_l_@cntr 001E  
                            __tdiv_to_l_@quot 001A                  check_for_button_input@array1 018C  
                       __end_of_Decrease_Time 3A8C                      _Update_Setup_Time_Screen 2ABE  
                       __end_of_write_command 4DB8                              ___lldiv@dividend 0011  
                        ?_Increase_Duty_Cycle 0001                               fillScreen@color 0024  
                     do_update_pwm@duty_cycle 0043                        __end_of_get_duty_cycle 416A  
                      __size_of_Increase_Time 00B6               __end_of_Update_Setup_Fan_Screen 4068  
                              fillRectangle@h 001A                                fillRectangle@w 0019  
                              fillRectangle@x 0023                                fillRectangle@y 0018  
                 check_for_button_input@F4236 0123                                ?_drawFastVLine 0018  
                                    printf@ap 009E                           __end_of_Do_Beep_Bad 4C08  
                                ??_write_data 0013                                    _TIMER1_isr 4DE0  
                               fillRect@color 0026                                  ?__tdiv_to_l_ 0011  
                                 _printf$2979 009A                                ?_do_update_pwm 0001  
                            ___lldiv@quotient 0019                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                                  _setup_minute 00D6  
                                _setup_second 00D8                       __size_of_Init_Interrupt 0024  
                       __end_of_setAddrWindow 44EA                         __end_of_Do_Setup_Time 2220  
                          fillRectangle@color 001B                             do_update_pwm@dc_I 0044  
                           do_update_pwm@dc_f 0040                                 drawChar@color 0030  
                                 _setup_month 00D7                         ??_Increase_Duty_Cycle 0046  
                          __end_of_write_data 4DA8                     __size_of_force_nec_state0 0008  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 0059                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                               ?_get_duty_cycle 0011  
