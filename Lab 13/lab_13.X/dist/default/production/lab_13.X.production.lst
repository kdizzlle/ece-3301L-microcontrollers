

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Nov 25 16:57:04 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1
   115                           	psect	text98,global,reloc=2,class=CODE,delta=1
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1
   118                           	psect	text101,global,reloc=2,class=CODE,delta=1
   119                           	psect	text102,global,reloc=2,class=CODE,delta=1
   120                           	psect	text103,global,reloc=2,class=CODE,delta=1
   121                           	psect	text104,global,reloc=2,class=CODE,delta=1
   122                           	psect	text105,global,reloc=2,class=CODE,delta=1
   123                           	psect	text106,global,reloc=2,class=CODE,delta=1
   124                           	psect	text107,global,reloc=2,class=CODE,delta=1
   125                           	psect	text108,global,reloc=2,class=CODE,delta=1
   126                           	psect	text109,global,reloc=2,class=CODE,delta=1
   127                           	psect	text110,global,reloc=2,class=CODE,delta=1
   128                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   129                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   130                           	psect	text112,global,reloc=2,class=CODE,delta=1
   131                           	psect	text113,global,reloc=2,class=CODE,delta=1
   132                           	psect	text114,global,reloc=2,class=CODE,delta=1
   133                           	psect	text115,global,reloc=2,class=CODE,delta=1
   134                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   135                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   136  0000                     
   137                           	psect	idataBANK0
   138  00482A                     __pidataBANK0:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _Timer_Table
   142  00482A  00                 	db	0
   143  00482B  05                 	db	5
   144  00482C  0A                 	db	10
   145  00482D  14                 	db	20
   146                           
   147                           ;initializer for _RTC_ALARM_Txt
   148  00482E  30                 	db	48
   149  00482F  00                 	db	0
   150                           
   151                           ;initializer for _fan_set_temp
   152  004830  10                 	db	16
   153                           
   154                           ;initializer for _tempSecond
   155  004831  FF                 	db	255
   156                           
   157                           ;initializer for _wrap
   158  004832  01                 	db	1
   159                           
   160                           ;initializer for _tempF_Txt
   161  004833  2B                 	db	43
   162  004834  30                 	db	48
   163  004835  37                 	db	55
   164  004836  37                 	db	55
   165  004837  00                 	db	0
   166                           
   167                           ;initializer for _DC_Txt
   168  004838  30                 	db	48
   169  004839  30                 	db	48
   170  00483A  30                 	db	48
   171  00483B  00                 	db	0
   172                           
   173                           ;initializer for _Fan_SW_Txt
   174  00483C  4F                 	db	79
   175  00483D  46                 	db	70
   176  00483E  46                 	db	70
   177  00483F  00                 	db	0
   178                           
   179                           ;initializer for _Fan_Set_Temp_Txt
   180  004840  37                 	db	55
   181  004841  37                 	db	55
   182  004842  46                 	db	70
   183  004843  00                 	db	0
   184                           
   185                           ;initializer for _Fan_Timer_Mode_Txt
   186  004844  4F                 	db	79
   187  004845  46                 	db	70
   188  004846  46                 	db	70
   189  004847  00                 	db	0
   190                           
   191                           ;initializer for _Fan_Timer_Txt
   192  004848  30                 	db	48
   193  004849  30                 	db	48
   194  00484A  30                 	db	48
   195  00484B  00                 	db	0
   196                           
   197                           ;initializer for _tempC_Txt
   198  00484C  2B                 	db	43
   199  00484D  32                 	db	50
   200  00484E  35                 	db	53
   201  00484F  00                 	db	0
   202                           
   203                           	psect	idataBANK1
   204  003D0A                     __pidataBANK1:
   205                           	opt stack 0
   206                           
   207                           ;initializer for _buffer
   208  003D0A  20                 	db	32
   209  003D0B  20                 	db	32
   210  003D0C  20                 	db	32
   211  003D0D  20                 	db	32
   212  003D0E  20                 	db	32
   213  003D0F  20                 	db	32
   214  003D10  20                 	db	32
   215  003D11  20                 	db	32
   216  003D12  20                 	db	32
   217  003D13  20                 	db	32
   218  003D14  20                 	db	32
   219  003D15  20                 	db	32
   220  003D16  20                 	db	32
   221  003D17  20                 	db	32
   222  003D18  20                 	db	32
   223  003D19  20                 	db	32
   224  003D1A  20                 	db	32
   225  003D1B  20                 	db	32
   226  003D1C  20                 	db	32
   227  003D1D  20                 	db	32
   228  003D1E  20                 	db	32
   229  003D1F  00                 	db	0
   230  003D20  00                 	db	0
   231  003D21  00                 	db	0
   232  003D22  00                 	db	0
   233  003D23  00                 	db	0
   234  003D24  00                 	db	0
   235  003D25  00                 	db	0
   236  003D26  00                 	db	0
   237  003D27  00                 	db	0
   238  003D28  00                 	db	0
   239  003D29  00                 	db	0
   240  003D2A  00                 	db	0
   241  003D2B  00                 	db	0
   242  003D2C  00                 	db	0
   243                           
   244                           ;initializer for check_for_button_input@F4236
   245  003D2D  A2                 	db	162
   246  003D2E  62                 	db	98
   247  003D2F  E2                 	db	226
   248  003D30  22                 	db	34
   249  003D31  02                 	db	2
   250  003D32  C2                 	db	194
   251  003D33  E0                 	db	224
   252  003D34  A8                 	db	168
   253  003D35  90                 	db	144
   254  003D36  68                 	db	104
   255  003D37  98                 	db	152
   256  003D38  B0                 	db	176
   257  003D39  30                 	db	48
   258  003D3A  18                 	db	24
   259  003D3B  7A                 	db	122
   260  003D3C  10                 	db	16
   261  003D3D  38                 	db	56
   262  003D3E  5A                 	db	90
   263  003D3F  42                 	db	66
   264  003D40  4A                 	db	74
   265  003D41  52                 	db	82
   266                           
   267                           ;initializer for _Timing_Txt
   268  003D42  45                 	db	69
   269  003D43  43                 	db	67
   270  003D44  45                 	db	69
   271  003D45  33                 	db	51
   272  003D46  33                 	db	51
   273  003D47  30                 	db	48
   274  003D48  31                 	db	49
   275  003D49  4C                 	db	76
   276  003D4A  20                 	db	32
   277  003D4B  46                 	db	70
   278  003D4C  69                 	db	105
   279  003D4D  6E                 	db	110
   280  003D4E  46                 	db	70
   281  003D4F  61                 	db	97
   282  003D50  32                 	db	50
   283  003D51  34                 	db	52
   284  003D52  2F                 	db	47
   285  003D53  31                 	db	49
   286  003D54  2F                 	db	47
   287  003D55  30                 	db	48
   288  003D56  31                 	db	49
   289  003D57  00                 	db	0
   290  003D58  00                 	db	0
   291                           
   292                           ;initializer for _date_Txt
   293  003D59  30                 	db	48
   294  003D5A  30                 	db	48
   295  003D5B  2F                 	db	47
   296  003D5C  30                 	db	48
   297  003D5D  30                 	db	48
   298  003D5E  2F                 	db	47
   299  003D5F  30                 	db	48
   300  003D60  30                 	db	48
   301  003D61  00                 	db	0
   302                           
   303                           ;initializer for _setup_date
   304  003D62  30                 	db	48
   305  003D63  31                 	db	49
   306  003D64  2F                 	db	47
   307  003D65  30                 	db	48
   308  003D66  31                 	db	49
   309  003D67  2F                 	db	47
   310  003D68  30                 	db	48
   311  003D69  30                 	db	48
   312  003D6A  00                 	db	0
   313                           
   314                           ;initializer for _setup_time
   315  003D6B  30                 	db	48
   316  003D6C  30                 	db	48
   317  003D6D  3A                 	db	58
   318  003D6E  30                 	db	48
   319  003D6F  30                 	db	48
   320  003D70  3A                 	db	58
   321  003D71  30                 	db	48
   322  003D72  30                 	db	48
   323  003D73  00                 	db	0
   324                           
   325                           ;initializer for _time_Txt
   326  003D74  30                 	db	48
   327  003D75  30                 	db	48
   328  003D76  3A                 	db	58
   329  003D77  30                 	db	48
   330  003D78  30                 	db	48
   331  003D79  3A                 	db	58
   332  003D7A  30                 	db	48
   333  003D7B  30                 	db	48
   334  003D7C  00                 	db	0
   335                           
   336                           ;initializer for _Volt_Txt
   337  003D7D  30                 	db	48
   338  003D7E  2E                 	db	46
   339  003D7F  30                 	db	48
   340  003D80  30                 	db	48
   341  003D81  56                 	db	86
   342  003D82  00                 	db	0
   343                           
   344                           ;initializer for _Fan_Mode_Txt
   345  003D83  4D                 	db	77
   346  003D84  41                 	db	65
   347  003D85  4E                 	db	78
   348  003D86  55                 	db	85
   349  003D87  00                 	db	0
   350                           
   351                           ;initializer for _RPM_Txt
   352  003D88  30                 	db	48
   353  003D89  30                 	db	48
   354  003D8A  30                 	db	48
   355  003D8B  30                 	db	48
   356  003D8C  00                 	db	0
   357                           
   358                           ;initializer for _setup_fan_set_text
   359  003D8D  30                 	db	48
   360  003D8E  37                 	db	55
   361  003D8F  37                 	db	55
   362  003D90  46                 	db	70
   363  003D91  00                 	db	0
   364                           
   365                           	psect	mediumconst
   366  00FBC0                     __pmediumconst:
   367                           	opt stack 0
   368  00FBC0  00                 	db	0
   369  00FBC1                     _font:
   370                           	opt stack 0
   371  00FBC1  00                 	db	0
   372  00FBC2  00                 	db	0
   373  00FBC3  00                 	db	0
   374  00FBC4  00                 	db	0
   375  00FBC5  00                 	db	0
   376  00FBC6  00                 	db	0
   377  00FBC7  00                 	db	0
   378  00FBC8  5F                 	db	95
   379  00FBC9  00                 	db	0
   380  00FBCA  00                 	db	0
   381  00FBCB  00                 	db	0
   382  00FBCC  07                 	db	7
   383  00FBCD  00                 	db	0
   384  00FBCE  07                 	db	7
   385  00FBCF  00                 	db	0
   386  00FBD0  14                 	db	20
   387  00FBD1  7F                 	db	127
   388  00FBD2  14                 	db	20
   389  00FBD3  7F                 	db	127
   390  00FBD4  14                 	db	20
   391  00FBD5  24                 	db	36
   392  00FBD6  2A                 	db	42
   393  00FBD7  7F                 	db	127
   394  00FBD8  2A                 	db	42
   395  00FBD9  12                 	db	18
   396  00FBDA  23                 	db	35
   397  00FBDB  13                 	db	19
   398  00FBDC  08                 	db	8
   399  00FBDD  64                 	db	100
   400  00FBDE  62                 	db	98
   401  00FBDF  36                 	db	54
   402  00FBE0  49                 	db	73
   403  00FBE1  56                 	db	86
   404  00FBE2  20                 	db	32
   405  00FBE3  50                 	db	80
   406  00FBE4  00                 	db	0
   407  00FBE5  08                 	db	8
   408  00FBE6  07                 	db	7
   409  00FBE7  03                 	db	3
   410  00FBE8  00                 	db	0
   411  00FBE9  00                 	db	0
   412  00FBEA  1C                 	db	28
   413  00FBEB  22                 	db	34
   414  00FBEC  41                 	db	65
   415  00FBED  00                 	db	0
   416  00FBEE  00                 	db	0
   417  00FBEF  41                 	db	65
   418  00FBF0  22                 	db	34
   419  00FBF1  1C                 	db	28
   420  00FBF2  00                 	db	0
   421  00FBF3  2A                 	db	42
   422  00FBF4  1C                 	db	28
   423  00FBF5  7F                 	db	127
   424  00FBF6  1C                 	db	28
   425  00FBF7  2A                 	db	42
   426  00FBF8  08                 	db	8
   427  00FBF9  08                 	db	8
   428  00FBFA  3E                 	db	62
   429  00FBFB  08                 	db	8
   430  00FBFC  08                 	db	8
   431  00FBFD  00                 	db	0
   432  00FBFE  80                 	db	128
   433  00FBFF  70                 	db	112
   434  00FC00  30                 	db	48
   435  00FC01  00                 	db	0
   436  00FC02  08                 	db	8
   437  00FC03  08                 	db	8
   438  00FC04  08                 	db	8
   439  00FC05  08                 	db	8
   440  00FC06  08                 	db	8
   441  00FC07  00                 	db	0
   442  00FC08  00                 	db	0
   443  00FC09  60                 	db	96
   444  00FC0A  60                 	db	96
   445  00FC0B  00                 	db	0
   446  00FC0C  20                 	db	32
   447  00FC0D  10                 	db	16
   448  00FC0E  08                 	db	8
   449  00FC0F  04                 	db	4
   450  00FC10  02                 	db	2
   451  00FC11  3E                 	db	62
   452  00FC12  51                 	db	81
   453  00FC13  49                 	db	73
   454  00FC14  45                 	db	69
   455  00FC15  3E                 	db	62
   456  00FC16  00                 	db	0
   457  00FC17  42                 	db	66
   458  00FC18  7F                 	db	127
   459  00FC19  40                 	db	64
   460  00FC1A  00                 	db	0
   461  00FC1B  72                 	db	114
   462  00FC1C  49                 	db	73
   463  00FC1D  49                 	db	73
   464  00FC1E  49                 	db	73
   465  00FC1F  46                 	db	70
   466  00FC20  21                 	db	33
   467  00FC21  41                 	db	65
   468  00FC22  49                 	db	73
   469  00FC23  4D                 	db	77
   470  00FC24  33                 	db	51
   471  00FC25  18                 	db	24
   472  00FC26  14                 	db	20
   473  00FC27  12                 	db	18
   474  00FC28  7F                 	db	127
   475  00FC29  10                 	db	16
   476  00FC2A  27                 	db	39
   477  00FC2B  45                 	db	69
   478  00FC2C  45                 	db	69
   479  00FC2D  45                 	db	69
   480  00FC2E  39                 	db	57
   481  00FC2F  3C                 	db	60
   482  00FC30  4A                 	db	74
   483  00FC31  49                 	db	73
   484  00FC32  49                 	db	73
   485  00FC33  31                 	db	49
   486  00FC34  41                 	db	65
   487  00FC35  21                 	db	33
   488  00FC36  11                 	db	17
   489  00FC37  09                 	db	9
   490  00FC38  07                 	db	7
   491  00FC39  36                 	db	54
   492  00FC3A  49                 	db	73
   493  00FC3B  49                 	db	73
   494  00FC3C  49                 	db	73
   495  00FC3D  36                 	db	54
   496  00FC3E  46                 	db	70
   497  00FC3F  49                 	db	73
   498  00FC40  49                 	db	73
   499  00FC41  29                 	db	41
   500  00FC42  1E                 	db	30
   501  00FC43  00                 	db	0
   502  00FC44  00                 	db	0
   503  00FC45  14                 	db	20
   504  00FC46  00                 	db	0
   505  00FC47  00                 	db	0
   506  00FC48  00                 	db	0
   507  00FC49  40                 	db	64
   508  00FC4A  34                 	db	52
   509  00FC4B  00                 	db	0
   510  00FC4C  00                 	db	0
   511  00FC4D  00                 	db	0
   512  00FC4E  08                 	db	8
   513  00FC4F  14                 	db	20
   514  00FC50  22                 	db	34
   515  00FC51  41                 	db	65
   516  00FC52  14                 	db	20
   517  00FC53  14                 	db	20
   518  00FC54  14                 	db	20
   519  00FC55  14                 	db	20
   520  00FC56  14                 	db	20
   521  00FC57  00                 	db	0
   522  00FC58  41                 	db	65
   523  00FC59  22                 	db	34
   524  00FC5A  14                 	db	20
   525  00FC5B  08                 	db	8
   526  00FC5C  02                 	db	2
   527  00FC5D  01                 	db	1
   528  00FC5E  59                 	db	89
   529  00FC5F  09                 	db	9
   530  00FC60  06                 	db	6
   531  00FC61  3E                 	db	62
   532  00FC62  41                 	db	65
   533  00FC63  5D                 	db	93
   534  00FC64  59                 	db	89
   535  00FC65  4E                 	db	78
   536  00FC66  7C                 	db	124
   537  00FC67  12                 	db	18
   538  00FC68  11                 	db	17
   539  00FC69  12                 	db	18
   540  00FC6A  7C                 	db	124
   541  00FC6B  7F                 	db	127
   542  00FC6C  49                 	db	73
   543  00FC6D  49                 	db	73
   544  00FC6E  49                 	db	73
   545  00FC6F  36                 	db	54
   546  00FC70  3E                 	db	62
   547  00FC71  41                 	db	65
   548  00FC72  41                 	db	65
   549  00FC73  41                 	db	65
   550  00FC74  22                 	db	34
   551  00FC75  7F                 	db	127
   552  00FC76  41                 	db	65
   553  00FC77  41                 	db	65
   554  00FC78  41                 	db	65
   555  00FC79  3E                 	db	62
   556  00FC7A  7F                 	db	127
   557  00FC7B  49                 	db	73
   558  00FC7C  49                 	db	73
   559  00FC7D  49                 	db	73
   560  00FC7E  41                 	db	65
   561  00FC7F  7F                 	db	127
   562  00FC80  09                 	db	9
   563  00FC81  09                 	db	9
   564  00FC82  09                 	db	9
   565  00FC83  01                 	db	1
   566  00FC84  3E                 	db	62
   567  00FC85  41                 	db	65
   568  00FC86  41                 	db	65
   569  00FC87  51                 	db	81
   570  00FC88  73                 	db	115
   571  00FC89  7F                 	db	127
   572  00FC8A  08                 	db	8
   573  00FC8B  08                 	db	8
   574  00FC8C  08                 	db	8
   575  00FC8D  7F                 	db	127
   576  00FC8E  00                 	db	0
   577  00FC8F  41                 	db	65
   578  00FC90  7F                 	db	127
   579  00FC91  41                 	db	65
   580  00FC92  00                 	db	0
   581  00FC93  20                 	db	32
   582  00FC94  40                 	db	64
   583  00FC95  41                 	db	65
   584  00FC96  3F                 	db	63
   585  00FC97  01                 	db	1
   586  00FC98  7F                 	db	127
   587  00FC99  08                 	db	8
   588  00FC9A  14                 	db	20
   589  00FC9B  22                 	db	34
   590  00FC9C  41                 	db	65
   591  00FC9D  7F                 	db	127
   592  00FC9E  40                 	db	64
   593  00FC9F  40                 	db	64
   594  00FCA0  40                 	db	64
   595  00FCA1  40                 	db	64
   596  00FCA2  7F                 	db	127
   597  00FCA3  02                 	db	2
   598  00FCA4  1C                 	db	28
   599  00FCA5  02                 	db	2
   600  00FCA6  7F                 	db	127
   601  00FCA7  7F                 	db	127
   602  00FCA8  04                 	db	4
   603  00FCA9  08                 	db	8
   604  00FCAA  10                 	db	16
   605  00FCAB  7F                 	db	127
   606  00FCAC  3E                 	db	62
   607  00FCAD  41                 	db	65
   608  00FCAE  41                 	db	65
   609  00FCAF  41                 	db	65
   610  00FCB0  3E                 	db	62
   611  00FCB1  7F                 	db	127
   612  00FCB2  09                 	db	9
   613  00FCB3  09                 	db	9
   614  00FCB4  09                 	db	9
   615  00FCB5  06                 	db	6
   616  00FCB6  3E                 	db	62
   617  00FCB7  41                 	db	65
   618  00FCB8  51                 	db	81
   619  00FCB9  21                 	db	33
   620  00FCBA  5E                 	db	94
   621  00FCBB  7F                 	db	127
   622  00FCBC  09                 	db	9
   623  00FCBD  19                 	db	25
   624  00FCBE  29                 	db	41
   625  00FCBF  46                 	db	70
   626  00FCC0                     __end_of_font:
   627                           	opt stack 0
   628  00FCC0                     _font2:
   629                           	opt stack 0
   630  00FCC0  26                 	db	38
   631  00FCC1  49                 	db	73
   632  00FCC2  49                 	db	73
   633  00FCC3  49                 	db	73
   634  00FCC4  32                 	db	50
   635  00FCC5  03                 	db	3
   636  00FCC6  01                 	db	1
   637  00FCC7  7F                 	db	127
   638  00FCC8  01                 	db	1
   639  00FCC9  03                 	db	3
   640  00FCCA  3F                 	db	63
   641  00FCCB  40                 	db	64
   642  00FCCC  40                 	db	64
   643  00FCCD  40                 	db	64
   644  00FCCE  3F                 	db	63
   645  00FCCF  1F                 	db	31
   646  00FCD0  20                 	db	32
   647  00FCD1  40                 	db	64
   648  00FCD2  20                 	db	32
   649  00FCD3  1F                 	db	31
   650  00FCD4  3F                 	db	63
   651  00FCD5  40                 	db	64
   652  00FCD6  38                 	db	56
   653  00FCD7  40                 	db	64
   654  00FCD8  3F                 	db	63
   655  00FCD9  63                 	db	99
   656  00FCDA  14                 	db	20
   657  00FCDB  08                 	db	8
   658  00FCDC  14                 	db	20
   659  00FCDD  63                 	db	99
   660  00FCDE  03                 	db	3
   661  00FCDF  04                 	db	4
   662  00FCE0  78                 	db	120
   663  00FCE1  04                 	db	4
   664  00FCE2  03                 	db	3
   665  00FCE3  61                 	db	97
   666  00FCE4  59                 	db	89
   667  00FCE5  49                 	db	73
   668  00FCE6  4D                 	db	77
   669  00FCE7  43                 	db	67
   670  00FCE8  00                 	db	0
   671  00FCE9  7F                 	db	127
   672  00FCEA  41                 	db	65
   673  00FCEB  41                 	db	65
   674  00FCEC  41                 	db	65
   675  00FCED  02                 	db	2
   676  00FCEE  04                 	db	4
   677  00FCEF  08                 	db	8
   678  00FCF0  10                 	db	16
   679  00FCF1  20                 	db	32
   680  00FCF2  00                 	db	0
   681  00FCF3  41                 	db	65
   682  00FCF4  41                 	db	65
   683  00FCF5  41                 	db	65
   684  00FCF6  7F                 	db	127
   685  00FCF7  04                 	db	4
   686  00FCF8  02                 	db	2
   687  00FCF9  01                 	db	1
   688  00FCFA  02                 	db	2
   689  00FCFB  04                 	db	4
   690  00FCFC  40                 	db	64
   691  00FCFD  40                 	db	64
   692  00FCFE  40                 	db	64
   693  00FCFF  40                 	db	64
   694  00FD00  40                 	db	64
   695  00FD01  00                 	db	0
   696  00FD02  03                 	db	3
   697  00FD03  07                 	db	7
   698  00FD04  08                 	db	8
   699  00FD05  00                 	db	0
   700  00FD06  20                 	db	32
   701  00FD07  54                 	db	84
   702  00FD08  54                 	db	84
   703  00FD09  78                 	db	120
   704  00FD0A  40                 	db	64
   705  00FD0B  7F                 	db	127
   706  00FD0C  28                 	db	40
   707  00FD0D  44                 	db	68
   708  00FD0E  44                 	db	68
   709  00FD0F  38                 	db	56
   710  00FD10  38                 	db	56
   711  00FD11  44                 	db	68
   712  00FD12  44                 	db	68
   713  00FD13  44                 	db	68
   714  00FD14  28                 	db	40
   715  00FD15  38                 	db	56
   716  00FD16  44                 	db	68
   717  00FD17  44                 	db	68
   718  00FD18  28                 	db	40
   719  00FD19  7F                 	db	127
   720  00FD1A  38                 	db	56
   721  00FD1B  54                 	db	84
   722  00FD1C  54                 	db	84
   723  00FD1D  54                 	db	84
   724  00FD1E  18                 	db	24
   725  00FD1F  00                 	db	0
   726  00FD20  08                 	db	8
   727  00FD21  7E                 	db	126
   728  00FD22  09                 	db	9
   729  00FD23  02                 	db	2
   730  00FD24  18                 	db	24
   731  00FD25  A4                 	db	164
   732  00FD26  A4                 	db	164
   733  00FD27  9C                 	db	156
   734  00FD28  78                 	db	120
   735  00FD29  7F                 	db	127
   736  00FD2A  08                 	db	8
   737  00FD2B  04                 	db	4
   738  00FD2C  04                 	db	4
   739  00FD2D  78                 	db	120
   740  00FD2E  00                 	db	0
   741  00FD2F  44                 	db	68
   742  00FD30  7D                 	db	125
   743  00FD31  40                 	db	64
   744  00FD32  00                 	db	0
   745  00FD33  20                 	db	32
   746  00FD34  40                 	db	64
   747  00FD35  40                 	db	64
   748  00FD36  3D                 	db	61
   749  00FD37  00                 	db	0
   750  00FD38  7F                 	db	127
   751  00FD39  10                 	db	16
   752  00FD3A  28                 	db	40
   753  00FD3B  44                 	db	68
   754  00FD3C  00                 	db	0
   755  00FD3D  00                 	db	0
   756  00FD3E  41                 	db	65
   757  00FD3F  7F                 	db	127
   758  00FD40  40                 	db	64
   759  00FD41  00                 	db	0
   760  00FD42  7C                 	db	124
   761  00FD43  04                 	db	4
   762  00FD44  78                 	db	120
   763  00FD45  04                 	db	4
   764  00FD46  78                 	db	120
   765  00FD47  7C                 	db	124
   766  00FD48  08                 	db	8
   767  00FD49  04                 	db	4
   768  00FD4A  04                 	db	4
   769  00FD4B  78                 	db	120
   770  00FD4C  38                 	db	56
   771  00FD4D  44                 	db	68
   772  00FD4E  44                 	db	68
   773  00FD4F  44                 	db	68
   774  00FD50  38                 	db	56
   775  00FD51  FC                 	db	252
   776  00FD52  18                 	db	24
   777  00FD53  24                 	db	36
   778  00FD54  24                 	db	36
   779  00FD55  18                 	db	24
   780  00FD56  18                 	db	24
   781  00FD57  24                 	db	36
   782  00FD58  24                 	db	36
   783  00FD59  18                 	db	24
   784  00FD5A  FC                 	db	252
   785  00FD5B  7C                 	db	124
   786  00FD5C  08                 	db	8
   787  00FD5D  04                 	db	4
   788  00FD5E  04                 	db	4
   789  00FD5F  08                 	db	8
   790  00FD60  48                 	db	72
   791  00FD61  54                 	db	84
   792  00FD62  54                 	db	84
   793  00FD63  54                 	db	84
   794  00FD64  24                 	db	36
   795  00FD65  04                 	db	4
   796  00FD66  04                 	db	4
   797  00FD67  3F                 	db	63
   798  00FD68  44                 	db	68
   799  00FD69  24                 	db	36
   800  00FD6A  3C                 	db	60
   801  00FD6B  40                 	db	64
   802  00FD6C  40                 	db	64
   803  00FD6D  20                 	db	32
   804  00FD6E  7C                 	db	124
   805  00FD6F  1C                 	db	28
   806  00FD70  20                 	db	32
   807  00FD71  40                 	db	64
   808  00FD72  20                 	db	32
   809  00FD73  1C                 	db	28
   810  00FD74  3C                 	db	60
   811  00FD75  40                 	db	64
   812  00FD76  30                 	db	48
   813  00FD77  40                 	db	64
   814  00FD78  3C                 	db	60
   815  00FD79  44                 	db	68
   816  00FD7A  28                 	db	40
   817  00FD7B  10                 	db	16
   818  00FD7C  28                 	db	40
   819  00FD7D  44                 	db	68
   820  00FD7E  4C                 	db	76
   821  00FD7F  90                 	db	144
   822  00FD80  90                 	db	144
   823  00FD81  90                 	db	144
   824  00FD82  7C                 	db	124
   825  00FD83  44                 	db	68
   826  00FD84  64                 	db	100
   827  00FD85  54                 	db	84
   828  00FD86  4C                 	db	76
   829  00FD87  44                 	db	68
   830  00FD88  00                 	db	0
   831  00FD89  08                 	db	8
   832  00FD8A  36                 	db	54
   833  00FD8B  41                 	db	65
   834  00FD8C  00                 	db	0
   835  00FD8D  00                 	db	0
   836  00FD8E  00                 	db	0
   837  00FD8F  77                 	db	119
   838  00FD90  00                 	db	0
   839  00FD91  00                 	db	0
   840  00FD92  00                 	db	0
   841  00FD93  41                 	db	65
   842  00FD94  36                 	db	54
   843  00FD95  08                 	db	8
   844  00FD96  00                 	db	0
   845  00FD97  02                 	db	2
   846  00FD98  01                 	db	1
   847  00FD99  02                 	db	2
   848  00FD9A  04                 	db	4
   849  00FD9B  02                 	db	2
   850  00FD9C                     __end_of_font2:
   851                           	opt stack 0
   852  00FD9C                     _dpowers:
   853                           	opt stack 0
   854  00FD9C  0001               	dw	1
   855  00FD9E  0000               	dw	0
   856  00FDA0  000A               	dw	10
   857  00FDA2  0000               	dw	0
   858  00FDA4  0064               	dw	100
   859  00FDA6  0000               	dw	0
   860  00FDA8  03E8               	dw	1000
   861  00FDAA  0000               	dw	0
   862  00FDAC  2710               	dw	10000
   863  00FDAE  0000               	dw	0
   864  00FDB0  86A0               	dw	34464
   865  00FDB2  0001               	dw	1
   866  00FDB4  4240               	dw	16960
   867  00FDB6  000F               	dw	15
   868  00FDB8  9680               	dw	38528
   869  00FDBA  0098               	dw	152
   870  00FDBC  E100               	dw	57600
   871  00FDBE  05F5               	dw	1525
   872  00FDC0  CA00               	dw	51712
   873  00FDC2  3B9A               	dw	15258
   874  00FDC4                     __end_of_dpowers:
   875                           	opt stack 0
   876  00FDC4                     __npowers_:
   877                           	opt stack 0
   878  00FDC4  00                 	db	0
   879  00FDC5  80                 	db	128
   880  00FDC6  3F                 	db	63
   881  00FDC7  CD                 	db	205
   882  00FDC8  CC                 	db	204
   883  00FDC9  3D                 	db	61
   884  00FDCA  D7                 	db	215
   885  00FDCB  23                 	db	35
   886  00FDCC  3C                 	db	60
   887  00FDCD  12                 	db	18
   888  00FDCE  83                 	db	131
   889  00FDCF  3A                 	db	58
   890  00FDD0  B7                 	db	183
   891  00FDD1  D1                 	db	209
   892  00FDD2  38                 	db	56
   893  00FDD3  C6                 	db	198
   894  00FDD4  27                 	db	39
   895  00FDD5  37                 	db	55
   896  00FDD6  38                 	db	56
   897  00FDD7  86                 	db	134
   898  00FDD8  35                 	db	53
   899  00FDD9  C0                 	db	192
   900  00FDDA  D6                 	db	214
   901  00FDDB  33                 	db	51
   902  00FDDC  CC                 	db	204
   903  00FDDD  2B                 	db	43
   904  00FDDE  32                 	db	50
   905  00FDDF  70                 	db	112
   906  00FDE0  89                 	db	137
   907  00FDE1  30                 	db	48
   908  00FDE2  E7                 	db	231
   909  00FDE3  DB                 	db	219
   910  00FDE4  2E                 	db	46
   911  00FDE5  E5                 	db	229
   912  00FDE6  3C                 	db	60
   913  00FDE7  1E                 	db	30
   914  00FDE8  42                 	db	66
   915  00FDE9  A2                 	db	162
   916  00FDEA  0D                 	db	13
   917  00FDEB                     __end_of__npowers_:
   918                           	opt stack 0
   919  00FDEB                     __powers_:
   920                           	opt stack 0
   921  00FDEB  00                 	db	0
   922  00FDEC  80                 	db	128
   923  00FDED  3F                 	db	63
   924  00FDEE  00                 	db	0
   925  00FDEF  20                 	db	32
   926  00FDF0  41                 	db	65
   927  00FDF1  00                 	db	0
   928  00FDF2  C8                 	db	200
   929  00FDF3  42                 	db	66
   930  00FDF4  00                 	db	0
   931  00FDF5  7A                 	db	122
   932  00FDF6  44                 	db	68
   933  00FDF7  40                 	db	64
   934  00FDF8  1C                 	db	28
   935  00FDF9  46                 	db	70
   936  00FDFA  50                 	db	80
   937  00FDFB  C3                 	db	195
   938  00FDFC  47                 	db	71
   939  00FDFD  24                 	db	36
   940  00FDFE  74                 	db	116
   941  00FDFF  49                 	db	73
   942  00FE00  97                 	db	151
   943  00FE01  18                 	db	24
   944  00FE02  4B                 	db	75
   945  00FE03  BC                 	db	188
   946  00FE04  BE                 	db	190
   947  00FE05  4C                 	db	76
   948  00FE06  6B                 	db	107
   949  00FE07  6E                 	db	110
   950  00FE08  4E                 	db	78
   951  00FE09  03                 	db	3
   952  00FE0A  15                 	db	21
   953  00FE0B  50                 	db	80
   954  00FE0C  79                 	db	121
   955  00FE0D  AD                 	db	173
   956  00FE0E  60                 	db	96
   957  00FE0F  F3                 	db	243
   958  00FE10  49                 	db	73
   959  00FE11  71                 	db	113
   960  00FE12                     __end_of__powers_:
   961                           	opt stack 0
   962  00FE12                     _hexpowers:
   963                           	opt stack 0
   964  00FE12  0001               	dw	1
   965  00FE14  0000               	dw	0
   966  00FE16  0010               	dw	16
   967  00FE18  0000               	dw	0
   968  00FE1A  0100               	dw	256
   969  00FE1C  0000               	dw	0
   970  00FE1E  1000               	dw	4096
   971  00FE20  0000               	dw	0
   972  00FE22  0000               	dw	0
   973  00FE24  0001               	dw	1
   974  00FE26  0000               	dw	0
   975  00FE28  0010               	dw	16
   976  00FE2A  0000               	dw	0
   977  00FE2C  0100               	dw	256
   978  00FE2E  0000               	dw	0
   979  00FE30  1000               	dw	4096
   980  00FE32                     __end_of_hexpowers:
   981                           	opt stack 0
   982  0000                     _ADCON0	set	4034
   983  0000                     _ADCON0bits	set	4034
   984  0000                     _ADCON1	set	4033
   985  0000                     _ADCON2	set	4032
   986  0000                     _ADRESH	set	4036
   987  0000                     _ADRESL	set	4035
   988  0000                     _CCP1CON	set	4029
   989  0000                     _CCP2CON	set	4026
   990  0000                     _CCPR1L	set	4030
   991  0000                     _CCPR2L	set	4027
   992  0000                     _INTCON2bits	set	4081
   993  0000                     _INTCON3bits	set	4080
   994  0000                     _INTCONbits	set	4082
   995  0000                     _OSCCON	set	4051
   996  0000                     _PIE1bits	set	3997
   997  0000                     _PIR1bits	set	3998
   998  0000                     _PORTBbits	set	3969
   999  0000                     _PORTCbits	set	3970
  1000  0000                     _PORTD	set	3971
  1001  0000                     _PORTDbits	set	3971
  1002  0000                     _PORTE	set	3972
  1003  0000                     _PR2	set	4043
  1004  0000                     _RCSTA	set	4011
  1005  0000                     _RCSTAbits	set	4011
  1006  0000                     _SPBRG	set	4015
  1007  0000                     _SPBRGH	set	4016
  1008  0000                     _SSPBUF	set	4041
  1009  0000                     _SSPCON1	set	4038
  1010  0000                     _SSPSTAT	set	4039
  1011  0000                     _SSPSTATbits	set	4039
  1012  0000                     _T0CON	set	4053
  1013  0000                     _T0CONbits	set	4053
  1014  0000                     _T1CONbits	set	4045
  1015  0000                     _T2CON	set	4042
  1016  0000                     _T3CON	set	4017
  1017  0000                     _TMR0H	set	4055
  1018  0000                     _TMR0L	set	4054
  1019  0000                     _TMR1H	set	4047
  1020  0000                     _TMR1L	set	4046
  1021  0000                     _TMR3L	set	4018
  1022  0000                     _TRISA	set	3986
  1023  0000                     _TRISB	set	3987
  1024  0000                     _TRISBbits	set	3987
  1025  0000                     _TRISC	set	3988
  1026  0000                     _TRISCbits	set	3988
  1027  0000                     _TRISD	set	3989
  1028  0000                     _TRISE	set	3990
  1029  0000                     _TXREG	set	4013
  1030  0000                     _TXSTA	set	4012
  1031  0000                     _TXSTAbits	set	4012
  1032  0000                     _RBPU	set	32655
  1033  0000                     _TRMT	set	32097
  1034  00FE32                     STR_9:
  1035                           
  1036                           ; BSR set to: 0
  1037  00FE32  54                 	db	84	;'T'
  1038  00FE33  68                 	db	104	;'h'
  1039  00FE34  65                 	db	101	;'e'
  1040  00FE35  20                 	db	32
  1041  00FE36  73                 	db	115	;'s'
  1042  00FE37  79                 	db	121	;'y'
  1043  00FE38  73                 	db	115	;'s'
  1044  00FE39  74                 	db	116	;'t'
  1045  00FE3A  65                 	db	101	;'e'
  1046  00FE3B  6D                 	db	109	;'m'
  1047  00FE3C  20                 	db	32
  1048  00FE3D  77                 	db	119	;'w'
  1049  00FE3E  69                 	db	105	;'i'
  1050  00FE3F  6C                 	db	108	;'l'
  1051  00FE40  6C                 	db	108	;'l'
  1052  00FE41  20                 	db	32
  1053  00FE42  6E                 	db	110	;'n'
  1054  00FE43  6F                 	db	111	;'o'
  1055  00FE44  77                 	db	119	;'w'
  1056  00FE45  20                 	db	32
  1057  00FE46  74                 	db	116	;'t'
  1058  00FE47  75                 	db	117	;'u'
  1059  00FE48  72                 	db	114	;'r'
  1060  00FE49  6E                 	db	110	;'n'
  1061  00FE4A  20                 	db	32
  1062  00FE4B  6F                 	db	111	;'o'
  1063  00FE4C  66                 	db	102	;'f'
  1064  00FE4D  66                 	db	102	;'f'
  1065  00FE4E  2E                 	db	46
  1066  00FE4F  20                 	db	32
  1067  00FE50  0D                 	db	13
  1068  00FE51  0A                 	db	10
  1069  00FE52  0A                 	db	10
  1070  00FE53  00                 	db	0
  1071  00FE54                     STR_11:
  1072                           
  1073                           ; BSR set to: 0
  1074  00FE54  54                 	db	84	;'T'
  1075  00FE55  68                 	db	104	;'h'
  1076  00FE56  65                 	db	101	;'e'
  1077  00FE57  20                 	db	32
  1078  00FE58  73                 	db	115	;'s'
  1079  00FE59  79                 	db	121	;'y'
  1080  00FE5A  73                 	db	115	;'s'
  1081  00FE5B  74                 	db	116	;'t'
  1082  00FE5C  65                 	db	101	;'e'
  1083  00FE5D  6D                 	db	109	;'m'
  1084  00FE5E  20                 	db	32
  1085  00FE5F  77                 	db	119	;'w'
  1086  00FE60  69                 	db	105	;'i'
  1087  00FE61  6C                 	db	108	;'l'
  1088  00FE62  6C                 	db	108	;'l'
  1089  00FE63  20                 	db	32
  1090  00FE64  6E                 	db	110	;'n'
  1091  00FE65  6F                 	db	111	;'o'
  1092  00FE66  77                 	db	119	;'w'
  1093  00FE67  20                 	db	32
  1094  00FE68  74                 	db	116	;'t'
  1095  00FE69  75                 	db	117	;'u'
  1096  00FE6A  72                 	db	114	;'r'
  1097  00FE6B  6E                 	db	110	;'n'
  1098  00FE6C  20                 	db	32
  1099  00FE6D  6F                 	db	111	;'o'
  1100  00FE6E  6E                 	db	110	;'n'
  1101  00FE6F  2E                 	db	46
  1102  00FE70  20                 	db	32
  1103  00FE71  0D                 	db	13
  1104  00FE72  0A                 	db	10
  1105  00FE73  0A                 	db	10
  1106  00FE74  00                 	db	0
  1107  00FE75                     STR_4:
  1108                           
  1109                           ; BSR set to: 0
  1110  00FE75  25                 	db	37
  1111  00FE76  30                 	db	48	;'0'
  1112  00FE77  32                 	db	50	;'2'
  1113  00FE78  78                 	db	120	;'x'
  1114  00FE79  3A                 	db	58	;':'
  1115  00FE7A  25                 	db	37
  1116  00FE7B  30                 	db	48	;'0'
  1117  00FE7C  32                 	db	50	;'2'
  1118  00FE7D  78                 	db	120	;'x'
  1119  00FE7E  3A                 	db	58	;':'
  1120  00FE7F  25                 	db	37
  1121  00FE80  30                 	db	48	;'0'
  1122  00FE81  32                 	db	50	;'2'
  1123  00FE82  78                 	db	120	;'x'
  1124  00FE83  20                 	db	32
  1125  00FE84  25                 	db	37
  1126  00FE85  30                 	db	48	;'0'
  1127  00FE86  32                 	db	50	;'2'
  1128  00FE87  78                 	db	120	;'x'
  1129  00FE88  2F                 	db	47
  1130  00FE89  25                 	db	37
  1131  00FE8A  30                 	db	48	;'0'
  1132  00FE8B  32                 	db	50	;'2'
  1133  00FE8C  78                 	db	120	;'x'
  1134  00FE8D  2F                 	db	47
  1135  00FE8E  25                 	db	37
  1136  00FE8F  30                 	db	48	;'0'
  1137  00FE90  32                 	db	50	;'2'
  1138  00FE91  78                 	db	120	;'x'
  1139  00FE92  00                 	db	0
  1140  00FE93                     STR_7:
  1141                           
  1142                           ; BSR set to: 0
  1143  00FE93  20                 	db	32
  1144  00FE94  52                 	db	82	;'R'
  1145  00FE95  50                 	db	80	;'P'
  1146  00FE96  4D                 	db	77	;'M'
  1147  00FE97  20                 	db	32
  1148  00FE98  3D                 	db	61	;'='
  1149  00FE99  20                 	db	32
  1150  00FE9A  25                 	db	37
  1151  00FE9B  64                 	db	100	;'d'
  1152  00FE9C  20                 	db	32
  1153  00FE9D  20                 	db	32
  1154  00FE9E  64                 	db	100	;'d'
  1155  00FE9F  63                 	db	99	;'c'
  1156  00FEA0  20                 	db	32
  1157  00FEA1  3D                 	db	61	;'='
  1158  00FEA2  20                 	db	32
  1159  00FEA3  25                 	db	37
  1160  00FEA4  64                 	db	100	;'d'
  1161  00FEA5  20                 	db	32
  1162  00FEA6  6C                 	db	108	;'l'
  1163  00FEA7  73                 	db	115	;'s'
  1164  00FEA8  20                 	db	32
  1165  00FEA9  3D                 	db	61	;'='
  1166  00FEAA  20                 	db	32
  1167  00FEAB  25                 	db	37
  1168  00FEAC  64                 	db	100	;'d'
  1169  00FEAD  0D                 	db	13
  1170  00FEAE  0A                 	db	10
  1171  00FEAF  00                 	db	0
  1172  00FEB0                     STR_10:
  1173                           
  1174                           ; BSR set to: 0
  1175  00FEB0  54                 	db	84	;'T'
  1176  00FEB1  68                 	db	104	;'h'
  1177  00FEB2  65                 	db	101	;'e'
  1178  00FEB3  20                 	db	32
  1179  00FEB4  73                 	db	115	;'s'
  1180  00FEB5  79                 	db	121	;'y'
  1181  00FEB6  73                 	db	115	;'s'
  1182  00FEB7  74                 	db	116	;'t'
  1183  00FEB8  65                 	db	101	;'e'
  1184  00FEB9  6D                 	db	109	;'m'
  1185  00FEBA  20                 	db	32
  1186  00FEBB  69                 	db	105	;'i'
  1187  00FEBC  73                 	db	115	;'s'
  1188  00FEBD  20                 	db	32
  1189  00FEBE  6E                 	db	110	;'n'
  1190  00FEBF  6F                 	db	111	;'o'
  1191  00FEC0  77                 	db	119	;'w'
  1192  00FEC1  20                 	db	32
  1193  00FEC2  4F                 	db	79	;'O'
  1194  00FEC3  46                 	db	70	;'F'
  1195  00FEC4  46                 	db	70	;'F'
  1196  00FEC5  2E                 	db	46
  1197  00FEC6  20                 	db	32
  1198  00FEC7  0D                 	db	13
  1199  00FEC8  0A                 	db	10
  1200  00FEC9  0A                 	db	10
  1201  00FECA  00                 	db	0
  1202  00FECB                     STR_8:
  1203                           
  1204                           ; BSR set to: 0
  1205  00FECB  4B                 	db	75	;'K'
  1206  00FECC  65                 	db	101	;'e'
  1207  00FECD  79                 	db	121	;'y'
  1208  00FECE  20                 	db	32
  1209  00FECF  4C                 	db	76	;'L'
  1210  00FED0  6F                 	db	111	;'o'
  1211  00FED1  63                 	db	99	;'c'
  1212  00FED2  61                 	db	97	;'a'
  1213  00FED3  74                 	db	116	;'t'
  1214  00FED4  69                 	db	105	;'i'
  1215  00FED5  6F                 	db	111	;'o'
  1216  00FED6  6E                 	db	110	;'n'
  1217  00FED7  20                 	db	32
  1218  00FED8  3D                 	db	61	;'='
  1219  00FED9  20                 	db	32
  1220  00FEDA  25                 	db	37
  1221  00FEDB  64                 	db	100	;'d'
  1222  00FEDC  20                 	db	32
  1223  00FEDD  0D                 	db	13
  1224  00FEDE  0A                 	db	10
  1225  00FEDF  0A                 	db	10
  1226  00FEE0  00                 	db	0
  1227  00FEE1                     STR_3:
  1228                           
  1229                           ; BSR set to: 0
  1230  00FEE1  43                 	db	67	;'C'
  1231  00FEE2  61                 	db	97	;'a'
  1232  00FEE3  6E                 	db	110	;'n'
  1233  00FEE4  6E                 	db	110	;'n'
  1234  00FEE5  6F                 	db	111	;'o'
  1235  00FEE6  74                 	db	116	;'t'
  1236  00FEE7  20                 	db	32
  1237  00FEE8  66                 	db	102	;'f'
  1238  00FEE9  69                 	db	105	;'i'
  1239  00FEEA  6E                 	db	110	;'n'
  1240  00FEEB  64                 	db	100	;'d'
  1241  00FEEC  20                 	db	32
  1242  00FEED  62                 	db	98	;'b'
  1243  00FEEE  75                 	db	117	;'u'
  1244  00FEEF  74                 	db	116	;'t'
  1245  00FEF0  74                 	db	116	;'t'
  1246  00FEF1  6F                 	db	111	;'o'
  1247  00FEF2  6E                 	db	110	;'n'
  1248  00FEF3  20                 	db	32
  1249  00FEF4  0D                 	db	13
  1250  00FEF5  0A                 	db	10
  1251  00FEF6  00                 	db	0
  1252  00FEF7                     STR_5:
  1253                           
  1254                           ; BSR set to: 0
  1255  00FEF7  20                 	db	32
  1256  00FEF8  54                 	db	84	;'T'
  1257  00FEF9  65                 	db	101	;'e'
  1258  00FEFA  6D                 	db	109	;'m'
  1259  00FEFB  70                 	db	112	;'p'
  1260  00FEFC  20                 	db	32
  1261  00FEFD  3D                 	db	61	;'='
  1262  00FEFE  20                 	db	32
  1263  00FEFF  25                 	db	37
  1264  00FF00  64                 	db	100	;'d'
  1265  00FF01  20                 	db	32
  1266  00FF02  43                 	db	67	;'C'
  1267  00FF03  20                 	db	32
  1268  00FF04  3D                 	db	61	;'='
  1269  00FF05  20                 	db	32
  1270  00FF06  25                 	db	37
  1271  00FF07  64                 	db	100	;'d'
  1272  00FF08  20                 	db	32
  1273  00FF09  46                 	db	70	;'F'
  1274  00FF0A  20                 	db	32
  1275  00FF0B  00                 	db	0
  1276  00FF0C                     STR_35:
  1277                           
  1278                           ; BSR set to: 0
  1279  00FF0C  20                 	db	32
  1280  00FF0D  54                 	db	84	;'T'
  1281  00FF0E  65                 	db	101	;'e'
  1282  00FF0F  6D                 	db	109	;'m'
  1283  00FF10  70                 	db	112	;'p'
  1284  00FF11  20                 	db	32
  1285  00FF12  3D                 	db	61	;'='
  1286  00FF13  20                 	db	32
  1287  00FF14  25                 	db	37
  1288  00FF15  64                 	db	100	;'d'
  1289  00FF16  20                 	db	32
  1290  00FF17  43                 	db	67	;'C'
  1291  00FF18  20                 	db	32
  1292  00FF19  3D                 	db	61	;'='
  1293  00FF1A  20                 	db	32
  1294  00FF1B  25                 	db	37
  1295  00FF1C  64                 	db	100	;'d'
  1296  00FF1D  20                 	db	32
  1297  00FF1E  46                 	db	70	;'F'
  1298  00FF1F  00                 	db	0
  1299  00FF20                     STR_6:
  1300                           
  1301                           ; BSR set to: 0
  1302  00FF20  4C                 	db	76	;'L'
  1303  00FF21  69                 	db	105	;'i'
  1304  00FF22  67                 	db	103	;'g'
  1305  00FF23  68                 	db	104	;'h'
  1306  00FF24  74                 	db	116	;'t'
  1307  00FF25  20                 	db	32
  1308  00FF26  53                 	db	83	;'S'
  1309  00FF27  65                 	db	101	;'e'
  1310  00FF28  6E                 	db	110	;'n'
  1311  00FF29  73                 	db	115	;'s'
  1312  00FF2A  6F                 	db	111	;'o'
  1313  00FF2B  72                 	db	114	;'r'
  1314  00FF2C  20                 	db	32
  1315  00FF2D  3D                 	db	61	;'='
  1316  00FF2E  20                 	db	32
  1317  00FF2F  25                 	db	37
  1318  00FF30  66                 	db	102	;'f'
  1319  00FF31  20                 	db	32
  1320  00FF32  56                 	db	86	;'V'
  1321  00FF33  00                 	db	0
  1322  00FF34                     STR_1:
  1323                           
  1324                           ; BSR set to: 0
  1325  00FF34  46                 	db	70	;'F'
  1326  00FF35  61                 	db	97	;'a'
  1327  00FF36  6E                 	db	110	;'n'
  1328  00FF37  20                 	db	32
  1329  00FF38  69                 	db	105	;'i'
  1330  00FF39  73                 	db	115	;'s'
  1331  00FF3A  20                 	db	32
  1332  00FF3B  74                 	db	116	;'t'
  1333  00FF3C  75                 	db	117	;'u'
  1334  00FF3D  72                 	db	114	;'r'
  1335  00FF3E  6E                 	db	110	;'n'
  1336  00FF3F  65                 	db	101	;'e'
  1337  00FF40  64                 	db	100	;'d'
  1338  00FF41  20                 	db	32
  1339  00FF42  6F                 	db	111	;'o'
  1340  00FF43  66                 	db	102	;'f'
  1341  00FF44  66                 	db	102	;'f'
  1342  00FF45  0D                 	db	13
  1343  00FF46  0A                 	db	10
  1344  00FF47  00                 	db	0
  1345  00FF48                     STR_2:
  1346                           
  1347                           ; BSR set to: 0
  1348  00FF48  46                 	db	70	;'F'
  1349  00FF49  61                 	db	97	;'a'
  1350  00FF4A  6E                 	db	110	;'n'
  1351  00FF4B  20                 	db	32
  1352  00FF4C  69                 	db	105	;'i'
  1353  00FF4D  73                 	db	115	;'s'
  1354  00FF4E  20                 	db	32
  1355  00FF4F  74                 	db	116	;'t'
  1356  00FF50  75                 	db	117	;'u'
  1357  00FF51  72                 	db	114	;'r'
  1358  00FF52  6E                 	db	110	;'n'
  1359  00FF53  65                 	db	101	;'e'
  1360  00FF54  64                 	db	100	;'d'
  1361  00FF55  20                 	db	32
  1362  00FF56  6F                 	db	111	;'o'
  1363  00FF57  6E                 	db	110	;'n'
  1364  00FF58  0D                 	db	13
  1365  00FF59  0A                 	db	10
  1366  00FF5A  00                 	db	0
  1367  00FF5B                     STR_47:
  1368                           
  1369                           ; BSR set to: 0
  1370  00FF5B  30                 	db	48	;'0'
  1371  00FF5C  31                 	db	49	;'1'
  1372  00FF5D  32                 	db	50	;'2'
  1373  00FF5E  33                 	db	51	;'3'
  1374  00FF5F  34                 	db	52	;'4'
  1375  00FF60  35                 	db	53	;'5'
  1376  00FF61  36                 	db	54	;'6'
  1377  00FF62  37                 	db	55	;'7'
  1378  00FF63  38                 	db	56	;'8'
  1379  00FF64  39                 	db	57	;'9'
  1380  00FF65  61                 	db	97	;'a'
  1381  00FF66  62                 	db	98	;'b'
  1382  00FF67  63                 	db	99	;'c'
  1383  00FF68  64                 	db	100	;'d'
  1384  00FF69  65                 	db	101	;'e'
  1385  00FF6A  66                 	db	102	;'f'
  1386  00FF6B  00                 	db	0
  1387  00FF6C                     STR_39:
  1388                           
  1389                           ; BSR set to: 0
  1390  00FF6C  20                 	db	32
  1391  00FF6D  20                 	db	32
  1392  00FF6E  53                 	db	83	;'S'
  1393  00FF6F  65                 	db	101	;'e'
  1394  00FF70  74                 	db	116	;'t'
  1395  00FF71  20                 	db	32
  1396  00FF72  46                 	db	70	;'F'
  1397  00FF73  61                 	db	97	;'a'
  1398  00FF74  6E                 	db	110	;'n'
  1399  00FF75  20                 	db	32
  1400  00FF76  54                 	db	84	;'T'
  1401  00FF77  65                 	db	101	;'e'
  1402  00FF78  6D                 	db	109	;'m'
  1403  00FF79  70                 	db	112	;'p'
  1404  00FF7A  00                 	db	0
  1405  00FF7B                     STR_12:
  1406                           
  1407                           ; BSR set to: 0
  1408  00FF7B  54                 	db	84	;'T'
  1409  00FF7C  65                 	db	101	;'e'
  1410  00FF7D  6D                 	db	109	;'m'
  1411  00FF7E  70                 	db	112	;'p'
  1412  00FF7F  65                 	db	101	;'e'
  1413  00FF80  72                 	db	114	;'r'
  1414  00FF81  61                 	db	97	;'a'
  1415  00FF82  74                 	db	116	;'t'
  1416  00FF83  75                 	db	117	;'u'
  1417  00FF84  72                 	db	114	;'r'
  1418  00FF85  65                 	db	101	;'e'
  1419  00FF86  3A                 	db	58	;':'
  1420  00FF87  00                 	db	0
  1421  00FF88                     STR_44:
  1422                           
  1423                           ; BSR set to: 0
  1424  00FF88  54                 	db	84	;'T'
  1425  00FF89  69                 	db	105	;'i'
  1426  00FF8A  6D                 	db	109	;'m'
  1427  00FF8B  65                 	db	101	;'e'
  1428  00FF8C  20                 	db	32
  1429  00FF8D  53                 	db	83	;'S'
  1430  00FF8E  65                 	db	101	;'e'
  1431  00FF8F  74                 	db	116	;'t'
  1432  00FF90  75                 	db	117	;'u'
  1433  00FF91  70                 	db	112	;'p'
  1434  00FF92  00                 	db	0
  1435  00FF93  00                 	db	0
  1436  00FF94                     STR_38:
  1437                           
  1438                           ; BSR set to: 0
  1439  00FF94  20                 	db	32
  1440  00FF95  46                 	db	70	;'F'
  1441  00FF96  61                 	db	97	;'a'
  1442  00FF97  6E                 	db	110	;'n'
  1443  00FF98  20                 	db	32
  1444  00FF99  53                 	db	83	;'S'
  1445  00FF9A  65                 	db	101	;'e'
  1446  00FF9B  74                 	db	116	;'t'
  1447  00FF9C  75                 	db	117	;'u'
  1448  00FF9D  70                 	db	112	;'p'
  1449  00FF9E  00                 	db	0
  1450  00FF9F  00                 	db	0
  1451  00FFA0                     STR_19:
  1452                           
  1453                           ; BSR set to: 0
  1454  00FFA0  46                 	db	70	;'F'
  1455  00FFA1  41                 	db	65	;'A'
  1456  00FFA2  4E                 	db	78	;'N'
  1457  00FFA3  20                 	db	32
  1458  00FFA4  53                 	db	83	;'S'
  1459  00FFA5  65                 	db	101	;'e'
  1460  00FFA6  74                 	db	116	;'t'
  1461  00FFA7  54                 	db	84	;'T'
  1462  00FFA8  65                 	db	101	;'e'
  1463  00FFA9  6D                 	db	109	;'m'
  1464  00FFAA  70                 	db	112	;'p'
  1465  00FFAB  00                 	db	0
  1466  00FFAC                     STR_25:
  1467                           
  1468                           ; BSR set to: 0
  1469  00FFAC  53                 	db	83	;'S'
  1470  00FFAD  59                 	db	89	;'Y'
  1471  00FFAE  53                 	db	83	;'S'
  1472  00FFAF  54                 	db	84	;'T'
  1473  00FFB0  45                 	db	69	;'E'
  1474  00FFB1  4D                 	db	77	;'M'
  1475  00FFB2  20                 	db	32
  1476  00FFB3  4F                 	db	79	;'O'
  1477  00FFB4  46                 	db	70	;'F'
  1478  00FFB5  46                 	db	70	;'F'
  1479  00FFB6  00                 	db	0
  1480  00FFB7                     STR_17:
  1481                           
  1482                           ; BSR set to: 0
  1483  00FFB7  54                 	db	84	;'T'
  1484  00FFB8  69                 	db	105	;'i'
  1485  00FFB9  6D                 	db	109	;'m'
  1486  00FFBA  65                 	db	101	;'e'
  1487  00FFBB  72                 	db	114	;'r'
  1488  00FFBC  20                 	db	32
  1489  00FFBD  4D                 	db	77	;'M'
  1490  00FFBE  6F                 	db	111	;'o'
  1491  00FFBF  64                 	db	100	;'d'
  1492  00FFC0  65                 	db	101	;'e'
  1493  00FFC1  00                 	db	0
  1494  00FFC2                     STR_18:
  1495                           
  1496                           ; BSR set to: 0
  1497  00FFC2  54                 	db	84	;'T'
  1498  00FFC3  69                 	db	105	;'i'
  1499  00FFC4  6D                 	db	109	;'m'
  1500  00FFC5  65                 	db	101	;'e'
  1501  00FFC6  72                 	db	114	;'r'
  1502  00FFC7  20                 	db	32
  1503  00FFC8  54                 	db	84	;'T'
  1504  00FFC9  69                 	db	105	;'i'
  1505  00FFCA  6D                 	db	109	;'m'
  1506  00FFCB  65                 	db	101	;'e'
  1507  00FFCC  00                 	db	0
  1508  00FFCD                     STR_30:
  1509                           
  1510                           ; BSR set to: 0
  1511  00FFCD  41                 	db	65	;'A'
  1512  00FFCE  55                 	db	85	;'U'
  1513  00FFCF  54                 	db	84	;'T'
  1514  00FFD0  4F                 	db	79	;'O'
  1515  00FFD1  00                 	db	0
  1516  00FFD2                     STR_31:
  1517                           
  1518                           ; BSR set to: 0
  1519  00FFD2  4D                 	db	77	;'M'
  1520  00FFD3  41                 	db	65	;'A'
  1521  00FFD4  4E                 	db	78	;'N'
  1522  00FFD5  55                 	db	85	;'U'
  1523  00FFD6  00                 	db	0
  1524  00FFD7                     STR_16:
  1525                           
  1526                           ; BSR set to: 0
  1527  00FFD7  44                 	db	68	;'D'
  1528  00FFD8  61                 	db	97	;'a'
  1529  00FFD9  74                 	db	116	;'t'
  1530  00FFDA  65                 	db	101	;'e'
  1531  00FFDB  00                 	db	0
  1532  00FFDC                     STR_23:
  1533                           
  1534                           ; BSR set to: 0
  1535  00FFDC  56                 	db	86	;'V'
  1536  00FFDD  6F                 	db	111	;'o'
  1537  00FFDE  6C                 	db	108	;'l'
  1538  00FFDF  74                 	db	116	;'t'
  1539  00FFE0  00                 	db	0
  1540  00FFE1                     STR_32:
  1541                           
  1542                           ; BSR set to: 0
  1543  00FFE1  4F                 	db	79	;'O'
  1544  00FFE2  4E                 	db	78	;'N'
  1545  00FFE3  20                 	db	32
  1546  00FFE4  00                 	db	0
  1547  00FFE5                     STR_27:
  1548                           
  1549                           ; BSR set to: 0
  1550  00FFE5  54                 	db	84	;'T'
  1551  00FFE6  4D                 	db	77	;'M'
  1552  00FFE7  31                 	db	49	;'1'
  1553  00FFE8  00                 	db	0
  1554  00FFE9                     STR_28:
  1555                           
  1556                           ; BSR set to: 0
  1557  00FFE9  54                 	db	84	;'T'
  1558  00FFEA  4D                 	db	77	;'M'
  1559  00FFEB  32                 	db	50	;'2'
  1560  00FFEC  00                 	db	0
  1561  00FFED                     STR_29:
  1562                           
  1563                           ; BSR set to: 0
  1564  00FFED  54                 	db	84	;'T'
  1565  00FFEE  4D                 	db	77	;'M'
  1566  00FFEF  33                 	db	51	;'3'
  1567  00FFF0  00                 	db	0
  1568  00FFF1                     STR_24:
  1569                           
  1570                           ; BSR set to: 0
  1571  00FFF1  52                 	db	82	;'R'
  1572  00FFF2  50                 	db	80	;'P'
  1573  00FFF3  4D                 	db	77	;'M'
  1574  00FFF4  00                 	db	0
  1575  00FFF5                     STR_13:
  1576                           
  1577                           ; BSR set to: 0
  1578  00FFF5  43                 	db	67	;'C'
  1579  00FFF6  2F                 	db	47
  1580  00FFF7  00                 	db	0
  1581  00FFF8                     STR_22:
  1582                           
  1583                           ; BSR set to: 0
  1584  00FFF8  44                 	db	68	;'D'
  1585  00FFF9  43                 	db	67	;'C'
  1586  00FFFA  00                 	db	0
  1587  00FFFB                     STR_21:
  1588                           
  1589                           ; BSR set to: 0
  1590  00FFFB  53                 	db	83	;'S'
  1591  00FFFC  57                 	db	87	;'W'
  1592  00FFFD  00                 	db	0
  1593  0000                     
  1594                           ; #config settings
  1595  00FFFE  00                 	db	0	; dummy byte at the end
  1596  0000                     
  1597                           	psect	cinit
  1598  0040F0                     __pcinit:
  1599                           	opt stack 0
  1600  0040F0                     start_initialization:
  1601                           	opt stack 0
  1602  0040F0                     __initialization:
  1603                           	opt stack 0
  1604                           
  1605                           ; Clear objects allocated to BANK1 (4 bytes)
  1606  0040F0  0101               	movlb	1
  1607  0040F2  6BA2               	clrf	(__pbssBANK1+3)& (0+255),b
  1608  0040F4  6BA1               	clrf	(__pbssBANK1+2)& (0+255),b
  1609  0040F6  6BA0               	clrf	(__pbssBANK1+1)& (0+255),b
  1610  0040F8  6B9F               	clrf	__pbssBANK1& (0+255),b
  1611                           
  1612                           ; Clear objects allocated to BANK0 (35 bytes)
  1613  0040FA  EE00  F0D6         	lfsr	0,__pbssBANK0
  1614  0040FE  0E23               	movlw	35
  1615  004100                     clear_0:
  1616  004100  6AEE               	clrf	postinc0,c
  1617  004102  06E8               	decf	wreg,f,c
  1618  004104  E1FD               	bnz	clear_0
  1619                           
  1620                           ; Clear objects allocated to COMRAM (17 bytes)
  1621  004106  EE00  F05F         	lfsr	0,__pbssCOMRAM
  1622  00410A  0E11               	movlw	17
  1623  00410C                     clear_1:
  1624  00410C  6AEE               	clrf	postinc0,c
  1625  00410E  06E8               	decf	wreg,f,c
  1626  004110  E1FD               	bnz	clear_1
  1627                           
  1628                           ; Initialize objects allocated to BANK1 (136 bytes)
  1629                           ; load TBLPTR registers with __pidataBANK1
  1630  004112  0E0A               	movlw	low __pidataBANK1
  1631  004114  6EF6               	movwf	tblptrl,c
  1632  004116  0E3D               	movlw	high __pidataBANK1
  1633  004118  6EF7               	movwf	tblptrh,c
  1634  00411A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1635  00411C  6EF8               	movwf	tblptru,c
  1636  00411E  EE01  F000         	lfsr	0,__pdataBANK1
  1637  004122  EE10 F088          	lfsr	1,136
  1638  004126                     copy_data0:
  1639  004126  0009               	tblrd		*+
  1640  004128  CFF5 FFEE          	movff	tablat,postinc0
  1641  00412C  50E5               	movf	postdec1,w,c
  1642  00412E  50E1               	movf	fsr1l,w,c
  1643  004130  E1FA               	bnz	copy_data0
  1644                           
  1645                           ; Initialize objects allocated to BANK0 (38 bytes)
  1646                           ; load TBLPTR registers with __pidataBANK0
  1647  004132  0E2A               	movlw	low __pidataBANK0
  1648  004134  6EF6               	movwf	tblptrl,c
  1649  004136  0E48               	movlw	high __pidataBANK0
  1650  004138  6EF7               	movwf	tblptrh,c
  1651  00413A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1652  00413C  6EF8               	movwf	tblptru,c
  1653  00413E  EE00  F0B0         	lfsr	0,__pdataBANK0
  1654  004142  EE10 F026          	lfsr	1,38
  1655  004146                     copy_data1:
  1656  004146  0009               	tblrd		*+
  1657  004148  CFF5 FFEE          	movff	tablat,postinc0
  1658  00414C  50E5               	movf	postdec1,w,c
  1659  00414E  50E1               	movf	fsr1l,w,c
  1660  004150  E1FA               	bnz	copy_data1
  1661  004152                     end_of_initialization:
  1662                           	opt stack 0
  1663  004152                     __end_of__initialization:
  1664                           	opt stack 0
  1665  004152  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1666  004154  6EF8               	movwf	tblptru,c
  1667  004156  0100               	movlb	0
  1668  004158  EF51  F00D         	goto	_main	;jump to C main() function
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           
  1678                           	psect	bssCOMRAM
  1679  00005F                     __pbssCOMRAM:
  1680                           	opt stack 0
  1681  00005F                     _rpm:
  1682                           	opt stack 0
  1683  00005F                     	ds	2
  1684  000061                     _txt:
  1685                           	opt stack 0
  1686  000061                     	ds	2
  1687  000063                     _FAN_TIMER_MODE:
  1688                           	opt stack 0
  1689  000063                     	ds	1
  1690  000064                     _SYSTEM_ON:
  1691                           	opt stack 0
  1692  000064                     	ds	1
  1693  000065                     __tft_type:
  1694                           	opt stack 0
  1695  000065                     	ds	1
  1696  000066                     _day:
  1697                           	opt stack 0
  1698  000066                     	ds	1
  1699  000067                     _duty_cycle:
  1700                           	opt stack 0
  1701  000067                     	ds	1
  1702  000068                     _hour:
  1703                           	opt stack 0
  1704  000068                     	ds	1
  1705  000069                     _minute:
  1706                           	opt stack 0
  1707  000069                     	ds	1
  1708  00006A                     _month:
  1709                           	opt stack 0
  1710  00006A                     	ds	1
  1711  00006B                     _second:
  1712                           	opt stack 0
  1713  00006B                     	ds	1
  1714  00006C                     _setup_fan_set_temp:
  1715                           	opt stack 0
  1716  00006C                     	ds	1
  1717  00006D                     _tempC:
  1718                           	opt stack 0
  1719  00006D                     	ds	1
  1720  00006E                     _tempF:
  1721                           	opt stack 0
  1722  00006E                     	ds	1
  1723  00006F                     _year:
  1724                           	opt stack 0
  1725  00006F                     	ds	1
  1726                           tblptru	equ	0xFF8
  1727                           tblptrh	equ	0xFF7
  1728                           tblptrl	equ	0xFF6
  1729                           tablat	equ	0xFF5
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           postdec1	equ	0xFE5
  1733                           fsr1l	equ	0xFE1
  1734                           
  1735                           	psect	bssBANK0
  1736  0000D6                     __pbssBANK0:
  1737                           	opt stack 0
  1738  0000D6                     _volt:
  1739                           	opt stack 0
  1740  0000D6                     	ds	3
  1741  0000D9                     _Nec_ok:
  1742                           	opt stack 0
  1743  0000D9                     	ds	2
  1744  0000DB                     _Time_Elapsed:
  1745                           	opt stack 0
  1746  0000DB                     	ds	2
  1747  0000DD                     _nbr:
  1748                           	opt stack 0
  1749  0000DD                     	ds	2
  1750  0000DF                     _rps:
  1751                           	opt stack 0
  1752  0000DF                     	ds	2
  1753  0000E1                     _FAN:
  1754                           	opt stack 0
  1755  0000E1                     	ds	1
  1756  0000E2                     _FANMODE:
  1757                           	opt stack 0
  1758  0000E2                     	ds	1
  1759  0000E3                     _FAN_TIMER_TIME:
  1760                           	opt stack 0
  1761  0000E3                     	ds	1
  1762  0000E4                     _INT0_flag:
  1763                           	opt stack 0
  1764  0000E4                     	ds	1
  1765  0000E5                     _INT1_flag:
  1766                           	opt stack 0
  1767  0000E5                     	ds	1
  1768  0000E6                     _INT2_flag:
  1769                           	opt stack 0
  1770  0000E6                     	ds	1
  1771  0000E7                     _In_Fan_Temp_Setup:
  1772                           	opt stack 0
  1773  0000E7                     	ds	1
  1774  0000E8                     _In_Time_Setup:
  1775                           	opt stack 0
  1776  0000E8                     	ds	1
  1777  0000E9                     _Nec_Button:
  1778                           	opt stack 0
  1779  0000E9                     	ds	1
  1780  0000EA                     _Nec_state:
  1781                           	opt stack 0
  1782  0000EA                     	ds	1
  1783  0000EB                     _Select_Fan_Temp_Field:
  1784                           	opt stack 0
  1785  0000EB                     	ds	1
  1786  0000EC                     _Select_Field:
  1787                           	opt stack 0
  1788  0000EC                     	ds	1
  1789  0000ED                     _bit_count:
  1790                           	opt stack 0
  1791  0000ED                     	ds	1
  1792  0000EE                     _colstart:
  1793                           	opt stack 0
  1794  0000EE                     	ds	1
  1795  0000EF                     _dow:
  1796                           	opt stack 0
  1797  0000EF                     	ds	1
  1798  0000F0                     _found:
  1799                           	opt stack 0
  1800  0000F0                     	ds	1
  1801  0000F1                     _light_flag:
  1802                           	opt stack 0
  1803  0000F1                     	ds	1
  1804  0000F2                     _rowstart:
  1805                           	opt stack 0
  1806  0000F2                     	ds	1
  1807  0000F3                     _setup_day:
  1808                           	opt stack 0
  1809  0000F3                     	ds	1
  1810  0000F4                     _setup_hour:
  1811                           	opt stack 0
  1812  0000F4                     	ds	1
  1813  0000F5                     _setup_minute:
  1814                           	opt stack 0
  1815  0000F5                     	ds	1
  1816  0000F6                     _setup_month:
  1817                           	opt stack 0
  1818  0000F6                     	ds	1
  1819  0000F7                     _setup_second:
  1820                           	opt stack 0
  1821  0000F7                     	ds	1
  1822  0000F8                     _setup_year:
  1823                           	opt stack 0
  1824  0000F8                     	ds	1
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           
  1834                           	psect	dataBANK0
  1835  0000B0                     __pdataBANK0:
  1836                           	opt stack 0
  1837  0000B0                     _Timer_Table:
  1838                           	opt stack 0
  1839  0000B0                     	ds	4
  1840  0000B4                     _RTC_ALARM_Txt:
  1841                           	opt stack 0
  1842  0000B4                     	ds	2
  1843  0000B6                     _fan_set_temp:
  1844                           	opt stack 0
  1845  0000B6                     	ds	1
  1846  0000B7                     _tempSecond:
  1847                           	opt stack 0
  1848  0000B7                     	ds	1
  1849  0000B8                     _wrap:
  1850                           	opt stack 0
  1851  0000B8                     	ds	1
  1852  0000B9                     _tempF_Txt:
  1853                           	opt stack 0
  1854  0000B9                     	ds	5
  1855  0000BE                     _DC_Txt:
  1856                           	opt stack 0
  1857  0000BE                     	ds	4
  1858  0000C2                     _Fan_SW_Txt:
  1859                           	opt stack 0
  1860  0000C2                     	ds	4
  1861  0000C6                     _Fan_Set_Temp_Txt:
  1862                           	opt stack 0
  1863  0000C6                     	ds	4
  1864  0000CA                     _Fan_Timer_Mode_Txt:
  1865                           	opt stack 0
  1866  0000CA                     	ds	4
  1867  0000CE                     _Fan_Timer_Txt:
  1868                           	opt stack 0
  1869  0000CE                     	ds	4
  1870  0000D2                     _tempC_Txt:
  1871                           	opt stack 0
  1872  0000D2                     	ds	4
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postdec1	equ	0xFE5
  1880                           fsr1l	equ	0xFE1
  1881                           
  1882                           	psect	bssBANK1
  1883  00019F                     __pbssBANK1:
  1884                           	opt stack 0
  1885  00019F                     _Nec_code:
  1886                           	opt stack 0
  1887  00019F                     	ds	4
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           
  1897                           	psect	dataBANK1
  1898  000100                     __pdataBANK1:
  1899                           	opt stack 0
  1900  000100                     _buffer:
  1901                           	opt stack 0
  1902  000100                     	ds	35
  1903  000123                     check_for_button_input@F4236:
  1904                           	opt stack 0
  1905  000123                     	ds	21
  1906  000138                     _Timing_Txt:
  1907                           	opt stack 0
  1908  000138                     	ds	23
  1909  00014F                     _date_Txt:
  1910                           	opt stack 0
  1911  00014F                     	ds	9
  1912  000158                     _setup_date:
  1913                           	opt stack 0
  1914  000158                     	ds	9
  1915  000161                     _setup_time:
  1916                           	opt stack 0
  1917  000161                     	ds	9
  1918  00016A                     _time_Txt:
  1919                           	opt stack 0
  1920  00016A                     	ds	9
  1921  000173                     _Volt_Txt:
  1922                           	opt stack 0
  1923  000173                     	ds	6
  1924  000179                     _Fan_Mode_Txt:
  1925                           	opt stack 0
  1926  000179                     	ds	5
  1927  00017E                     _RPM_Txt:
  1928                           	opt stack 0
  1929  00017E                     	ds	5
  1930  000183                     _setup_fan_set_text:
  1931                           	opt stack 0
  1932  000183                     	ds	5
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           postinc0	equ	0xFEE
  1938                           wreg	equ	0xFE8
  1939                           postdec1	equ	0xFE5
  1940                           fsr1l	equ	0xFE1
  1941                           
  1942                           	psect	cstackBANK1
  1943  000188                     __pcstackBANK1:
  1944                           	opt stack 0
  1945  000188                     check_for_button_input@array1:
  1946                           	opt stack 0
  1947                           
  1948                           ; 21 bytes @ 0x0
  1949  000188                     	ds	21
  1950  00019D                     check_for_button_input@j:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x15
  1954  00019D                     	ds	2
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           postdec1	equ	0xFE5
  1962                           fsr1l	equ	0xFE1
  1963                           
  1964                           	psect	cstackBANK0
  1965  000080                     __pcstackBANK0:
  1966                           	opt stack 0
  1967  000080                     ?_printf:
  1968                           	opt stack 0
  1969  000080                     printf@f:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x0
  1973  000080                     	ds	14
  1974  00008E                     ??_printf:
  1975                           
  1976                           ; 0 bytes @ 0xE
  1977  00008E                     	ds	6
  1978  000094                     _printf$3007:
  1979                           	opt stack 0
  1980                           
  1981                           ; 3 bytes @ 0x14
  1982  000094                     	ds	3
  1983  000097                     printf@idx:
  1984                           	opt stack 0
  1985                           
  1986                           ; 1 bytes @ 0x17
  1987  000097                     	ds	1
  1988  000098                     printf@ap:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x18
  1992  000098                     	ds	2
  1993  00009A                     printf@prec:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x1A
  1997  00009A                     	ds	2
  1998  00009C                     printf@tmpval:
  1999                           	opt stack 0
  2000                           
  2001                           ; 4 bytes @ 0x1C
  2002  00009C                     	ds	4
  2003  0000A0                     printf@width:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x20
  2007  0000A0                     	ds	2
  2008  0000A2                     printf@exp:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x22
  2012  0000A2                     	ds	2
  2013  0000A4                     printf@val:
  2014                           	opt stack 0
  2015                           
  2016                           ; 4 bytes @ 0x24
  2017  0000A4                     	ds	4
  2018  0000A8                     printf@flag:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x28
  2022  0000A8                     	ds	2
  2023  0000AA                     printf@fval:
  2024                           	opt stack 0
  2025                           
  2026                           ; 3 bytes @ 0x2A
  2027  0000AA                     	ds	3
  2028  0000AD                     printf@c:
  2029                           	opt stack 0
  2030                           
  2031                           ; 1 bytes @ 0x2D
  2032  0000AD                     	ds	1
  2033  0000AE                     
  2034                           ; 0 bytes @ 0x2E
  2035  0000AE                     	ds	1
  2036  0000AF                     ??_main:
  2037                           
  2038                           ; 0 bytes @ 0x2F
  2039  0000AF                     	ds	1
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1l	equ	0xFE1
  2048                           
  2049                           	psect	cstackCOMRAM
  2050  000001                     __pcstackCOMRAM:
  2051                           	opt stack 0
  2052  000001                     INT0_isr@k:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x0
  2056  000001                     	ds	2
  2057  000003                     ??_chkisr:
  2058                           
  2059                           ; 0 bytes @ 0x2
  2060  000003                     	ds	14
  2061  000011                     ??_isdigit:
  2062  000011                     ??_bcd_2_dec:
  2063  000011                     ?_strlen:
  2064                           	opt stack 0
  2065  000011                     ?_get_full_ADC:
  2066                           	opt stack 0
  2067  000011                     ?___wmul:
  2068                           	opt stack 0
  2069  000011                     ?___ftpack:
  2070                           	opt stack 0
  2071  000011                     ?___ftneg:
  2072                           	opt stack 0
  2073  000011                     ?__tdiv_to_l_:
  2074                           	opt stack 0
  2075  000011                     ?__div_to_l_:
  2076                           	opt stack 0
  2077  000011                     ?___lldiv:
  2078                           	opt stack 0
  2079  000011                     I2C_Read@ack:
  2080                           	opt stack 0
  2081  000011                     I2C_Write@outByte:
  2082                           	opt stack 0
  2083  000011                     spiwrite@x:
  2084                           	opt stack 0
  2085  000011                     putch@c:
  2086                           	opt stack 0
  2087  000011                     get_duty_cycle@temp:
  2088                           	opt stack 0
  2089  000011                     Wait_Half_Sec@k:
  2090                           	opt stack 0
  2091  000011                     OpenUSART@spbrg:
  2092                           	opt stack 0
  2093  000011                     ___wmul@multiplier:
  2094                           	opt stack 0
  2095  000011                     strcpy@to:
  2096                           	opt stack 0
  2097  000011                     strlen@s:
  2098                           	opt stack 0
  2099  000011                     __div_to_l_@f1:
  2100                           	opt stack 0
  2101  000011                     ___ftpack@arg:
  2102                           	opt stack 0
  2103  000011                     __tdiv_to_l_@f1:
  2104                           	opt stack 0
  2105  000011                     ___ftge@ff1:
  2106                           	opt stack 0
  2107  000011                     ___ftneg@f1:
  2108                           	opt stack 0
  2109  000011                     I2C_Init@c:
  2110                           	opt stack 0
  2111  000011                     ___lldiv@dividend:
  2112                           	opt stack 0
  2113                           
  2114                           ; 4 bytes @ 0x10
  2115  000011                     	ds	1
  2116  000012                     I2C_Read@n:
  2117                           	opt stack 0
  2118  000012                     I2C_Write@n:
  2119                           	opt stack 0
  2120  000012                     spiwrite@spidata:
  2121                           	opt stack 0
  2122  000012                     _isdigit$2628:
  2123                           	opt stack 0
  2124                           
  2125                           ; 1 bytes @ 0x11
  2126  000012                     	ds	1
  2127  000013                     ??_strlen:
  2128  000013                     ??_get_full_ADC:
  2129  000013                     I2C_Read@inByte:
  2130                           	opt stack 0
  2131  000013                     I2C_Write_Cmd_Only@Cmd:
  2132                           	opt stack 0
  2133  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  2134                           	opt stack 0
  2135  000013                     write_command@cmd_:
  2136                           	opt stack 0
  2137  000013                     write_data@data_:
  2138                           	opt stack 0
  2139  000013                     OpenUSART@config:
  2140                           	opt stack 0
  2141  000013                     isdigit@c:
  2142                           	opt stack 0
  2143  000013                     get_duty_cycle@set_temp:
  2144                           	opt stack 0
  2145  000013                     bcd_2_dec@dec:
  2146                           	opt stack 0
  2147  000013                     ___wmul@multiplicand:
  2148                           	opt stack 0
  2149  000013                     strcpy@from:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x12
  2153  000013                     	ds	1
  2154  000014                     ?_DS1621_Read_Temp:
  2155                           	opt stack 0
  2156  000014                     I2C_Write_Cmd_Only@Device:
  2157                           	opt stack 0
  2158  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  2159                           	opt stack 0
  2160  000014                     setAddrWindow@y0:
  2161                           	opt stack 0
  2162  000014                     DS3231_Read_Time@Address:
  2163                           	opt stack 0
  2164  000014                     ___ftpack@exp:
  2165                           	opt stack 0
  2166  000014                     __div_to_l_@f2:
  2167                           	opt stack 0
  2168  000014                     __tdiv_to_l_@f2:
  2169                           	opt stack 0
  2170  000014                     ___ftge@ff2:
  2171                           	opt stack 0
  2172                           
  2173                           ; 3 bytes @ 0x13
  2174  000014                     	ds	1
  2175  000015                     ??_get_duty_cycle:
  2176  000015                     I2C_Write_Cmd_Write_Data@Device:
  2177                           	opt stack 0
  2178  000015                     setAddrWindow@x1:
  2179                           	opt stack 0
  2180  000015                     bcd_2_dec@bcd:
  2181                           	opt stack 0
  2182  000015                     DS3231_Read_Time@Device:
  2183                           	opt stack 0
  2184  000015                     ___ftpack@sign:
  2185                           	opt stack 0
  2186  000015                     get_full_ADC@result:
  2187                           	opt stack 0
  2188  000015                     ___wmul@product:
  2189                           	opt stack 0
  2190  000015                     strcpy@cp:
  2191                           	opt stack 0
  2192  000015                     strlen@cp:
  2193                           	opt stack 0
  2194  000015                     ___lldiv@divisor:
  2195                           	opt stack 0
  2196                           
  2197                           ; 4 bytes @ 0x14
  2198  000015                     	ds	1
  2199  000016                     ??___ftpack:
  2200  000016                     setAddrWindow@y1:
  2201                           	opt stack 0
  2202  000016                     DS1621_Init@Device:
  2203                           	opt stack 0
  2204  000016                     DS1621_Read_Temp@Cmd:
  2205                           	opt stack 0
  2206                           
  2207                           ; 1 bytes @ 0x15
  2208  000016                     	ds	1
  2209  000017                     ??__tdiv_to_l_:
  2210  000017                     ??___ftge:
  2211  000017                     ?___awdiv:
  2212                           	opt stack 0
  2213  000017                     setAddrWindow@x0:
  2214                           	opt stack 0
  2215  000017                     DS1621_Read_Temp@Data_Ret:
  2216                           	opt stack 0
  2217  000017                     get_duty_cycle@diff_temp:
  2218                           	opt stack 0
  2219  000017                     delay_ms@ms:
  2220                           	opt stack 0
  2221  000017                     ___awdiv@dividend:
  2222                           	opt stack 0
  2223  000017                     __div_to_l_@quot:
  2224                           	opt stack 0
  2225                           
  2226                           ; 4 bytes @ 0x16
  2227  000017                     	ds	1
  2228  000018                     drawPixel@y:
  2229                           	opt stack 0
  2230  000018                     drawFastVLine@y:
  2231                           	opt stack 0
  2232  000018                     fillRectangle@y:
  2233                           	opt stack 0
  2234  000018                     DS1621_Read_Temp@Device:
  2235                           	opt stack 0
  2236                           
  2237                           ; 1 bytes @ 0x17
  2238  000018                     	ds	1
  2239  000019                     ?___awtoft:
  2240                           	opt stack 0
  2241  000019                     ?___lbtoft:
  2242                           	opt stack 0
  2243  000019                     ?___lltoft:
  2244                           	opt stack 0
  2245  000019                     drawFastVLine@h:
  2246                           	opt stack 0
  2247  000019                     fillRectangle@w:
  2248                           	opt stack 0
  2249  000019                     get_duty_cycle@dc:
  2250                           	opt stack 0
  2251  000019                     delay_ms@count:
  2252                           	opt stack 0
  2253  000019                     drawPixel@color:
  2254                           	opt stack 0
  2255  000019                     ___awdiv@divisor:
  2256                           	opt stack 0
  2257  000019                     ___awtoft@c:
  2258                           	opt stack 0
  2259  000019                     ___lldiv@quotient:
  2260                           	opt stack 0
  2261  000019                     ___lltoft@c:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0x18
  2265  000019                     	ds	1
  2266  00001A                     fillRectangle@h:
  2267                           	opt stack 0
  2268  00001A                     drawFastVLine@color:
  2269                           	opt stack 0
  2270  00001A                     __tdiv_to_l_@quot:
  2271                           	opt stack 0
  2272                           
  2273                           ; 4 bytes @ 0x19
  2274  00001A                     	ds	1
  2275  00001B                     drawPixel@x:
  2276                           	opt stack 0
  2277  00001B                     ___awdiv@counter:
  2278                           	opt stack 0
  2279  00001B                     __div_to_l_@cntr:
  2280                           	opt stack 0
  2281  00001B                     fillRectangle@color:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x1A
  2285  00001B                     	ds	1
  2286  00001C                     ??_drawFastVLine:
  2287  00001C                     ___awdiv@sign:
  2288                           	opt stack 0
  2289  00001C                     ___awtoft@sign:
  2290                           	opt stack 0
  2291  00001C                     __div_to_l_@exp1:
  2292                           	opt stack 0
  2293  00001C                     ___lbtoft@c:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x1B
  2297  00001C                     	ds	1
  2298  00001D                     ??_fillRectangle:
  2299  00001D                     ??___lltoft:
  2300  00001D                     ___lldiv@counter:
  2301                           	opt stack 0
  2302  00001D                     ___awdiv@quotient:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0x1C
  2306  00001D                     	ds	1
  2307  00001E                     ?___llmod:
  2308                           	opt stack 0
  2309  00001E                     __tdiv_to_l_@cntr:
  2310                           	opt stack 0
  2311  00001E                     ___llmod@dividend:
  2312                           	opt stack 0
  2313                           
  2314                           ; 4 bytes @ 0x1D
  2315  00001E                     	ds	1
  2316  00001F                     ??_Set_D1_RGB:
  2317  00001F                     ?_get_RPM:
  2318                           	opt stack 0
  2319  00001F                     ?___ftmul:
  2320                           	opt stack 0
  2321  00001F                     __tdiv_to_l_@exp1:
  2322                           	opt stack 0
  2323  00001F                     Set_D2_RGB@rpm:
  2324                           	opt stack 0
  2325  00001F                     ___ftmul@f1:
  2326                           	opt stack 0
  2327                           
  2328                           ; 3 bytes @ 0x1E
  2329  00001F                     	ds	1
  2330  000020                     drawFastVLine@hi:
  2331                           	opt stack 0
  2332  000020                     Set_D1_RGB@duty_cycle:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x1F
  2336  000020                     	ds	1
  2337  000021                     drawFastVLine@lo:
  2338                           	opt stack 0
  2339  000021                     fillRectangle@hi:
  2340                           	opt stack 0
  2341  000021                     ___lltoft@exp:
  2342                           	opt stack 0
  2343  000021                     get_RPM@RPS:
  2344                           	opt stack 0
  2345  000021                     Set_D1_RGB@range:
  2346                           	opt stack 0
  2347  000021                     Set_D2_RGB@range:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x20
  2351  000021                     	ds	1
  2352  000022                     drawFastVLine@x:
  2353                           	opt stack 0
  2354  000022                     fillRectangle@lo:
  2355                           	opt stack 0
  2356  000022                     ___ftmul@f2:
  2357                           	opt stack 0
  2358  000022                     ___llmod@divisor:
  2359                           	opt stack 0
  2360                           
  2361                           ; 4 bytes @ 0x21
  2362  000022                     	ds	1
  2363  000023                     fillRect@y:
  2364                           	opt stack 0
  2365  000023                     fillRectangle@x:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0x22
  2369  000023                     	ds	1
  2370  000024                     fillRect@w:
  2371                           	opt stack 0
  2372  000024                     fillScreen@color:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x23
  2376  000024                     	ds	1
  2377  000025                     ??___ftmul:
  2378  000025                     fillRect@h:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x24
  2382  000025                     	ds	1
  2383  000026                     ___llmod@counter:
  2384                           	opt stack 0
  2385  000026                     fillRect@color:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x25
  2389  000026                     	ds	2
  2390  000028                     ??_fillRect:
  2391  000028                     ___ftmul@exp:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x27
  2395  000028                     	ds	1
  2396  000029                     ___ftmul@f3_as_product:
  2397                           	opt stack 0
  2398                           
  2399                           ; 3 bytes @ 0x28
  2400  000029                     	ds	2
  2401  00002B                     fillRect@x:
  2402                           	opt stack 0
  2403                           
  2404                           ; 1 bytes @ 0x2A
  2405  00002B                     	ds	1
  2406  00002C                     ___ftmul@cntr:
  2407                           	opt stack 0
  2408  00002C                     fillRect@i:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0x2B
  2412  00002C                     	ds	1
  2413  00002D                     ___ftmul@sign:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x2C
  2417  00002D                     	ds	1
  2418  00002E                     ?___ftdiv:
  2419                           	opt stack 0
  2420  00002E                     ?___fttol:
  2421                           	opt stack 0
  2422  00002E                     drawChar@y:
  2423                           	opt stack 0
  2424  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2425                           	opt stack 0
  2426  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2427                           	opt stack 0
  2428  00002E                     ___ftdiv@f1:
  2429                           	opt stack 0
  2430  00002E                     ___fttol@f1:
  2431                           	opt stack 0
  2432                           
  2433                           ; 3 bytes @ 0x2D
  2434  00002E                     	ds	1
  2435  00002F                     drawChar@c:
  2436                           	opt stack 0
  2437  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2438                           	opt stack 0
  2439  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0x2E
  2443  00002F                     	ds	1
  2444  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2445                           	opt stack 0
  2446  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2447                           	opt stack 0
  2448  000030                     drawChar@color:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x2F
  2452  000030                     	ds	1
  2453  000031                     ___ftdiv@f2:
  2454                           	opt stack 0
  2455                           
  2456                           ; 3 bytes @ 0x30
  2457  000031                     	ds	1
  2458  000032                     ??___fttol:
  2459  000032                     drawChar@bg:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x31
  2463  000032                     	ds	2
  2464  000034                     ??___ftdiv:
  2465  000034                     drawChar@size:
  2466                           	opt stack 0
  2467                           
  2468                           ; 1 bytes @ 0x33
  2469  000034                     	ds	1
  2470  000035                     drawChar@line:
  2471                           	opt stack 0
  2472                           
  2473                           ; 1 bytes @ 0x34
  2474  000035                     	ds	1
  2475  000036                     drawChar@x:
  2476                           	opt stack 0
  2477                           
  2478                           ; 1 bytes @ 0x35
  2479  000036                     	ds	1
  2480  000037                     drawChar@j:
  2481                           	opt stack 0
  2482  000037                     ___ftdiv@cntr:
  2483                           	opt stack 0
  2484  000037                     ___fttol@sign1:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0x36
  2488  000037                     	ds	1
  2489  000038                     drawChar@i:
  2490                           	opt stack 0
  2491  000038                     ___ftdiv@f3:
  2492                           	opt stack 0
  2493  000038                     ___fttol@lval:
  2494                           	opt stack 0
  2495                           
  2496                           ; 4 bytes @ 0x37
  2497  000038                     	ds	1
  2498  000039                     drawtext@y:
  2499                           	opt stack 0
  2500                           
  2501                           ; 1 bytes @ 0x38
  2502  000039                     	ds	1
  2503  00003A                     drawtext@_text:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x39
  2507  00003A                     	ds	1
  2508  00003B                     ___ftdiv@exp:
  2509                           	opt stack 0
  2510                           
  2511                           ; 1 bytes @ 0x3A
  2512  00003B                     	ds	1
  2513  00003C                     ___ftdiv@sign:
  2514                           	opt stack 0
  2515  00003C                     ___fttol@exp1:
  2516                           	opt stack 0
  2517  00003C                     drawtext@color:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x3B
  2521  00003C                     	ds	1
  2522  00003D                     ??_do_update_pwm:
  2523  00003D                     ?___awmod:
  2524                           	opt stack 0
  2525  00003D                     ?_Read_Volt:
  2526                           	opt stack 0
  2527  00003D                     ___awmod@dividend:
  2528                           	opt stack 0
  2529                           
  2530                           ; 2 bytes @ 0x3C
  2531  00003D                     	ds	1
  2532  00003E                     drawtext@bg:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x3D
  2536  00003E                     	ds	1
  2537  00003F                     ___awmod@divisor:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x3E
  2541  00003F                     	ds	1
  2542  000040                     drawtext@size:
  2543                           	opt stack 0
  2544  000040                     do_update_pwm@dc_f:
  2545                           	opt stack 0
  2546  000040                     Read_Volt@volt:
  2547                           	opt stack 0
  2548                           
  2549                           ; 3 bytes @ 0x3F
  2550  000040                     	ds	1
  2551  000041                     ??_drawtext:
  2552  000041                     ___awmod@counter:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x40
  2556  000041                     	ds	1
  2557  000042                     ___awmod@sign:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x41
  2561  000042                     	ds	1
  2562  000043                     ?_dec_2_bcd:
  2563                           	opt stack 0
  2564  000043                     ?_fround:
  2565                           	opt stack 0
  2566  000043                     ?_scale:
  2567                           	opt stack 0
  2568  000043                     drawtext@x:
  2569                           	opt stack 0
  2570  000043                     do_update_pwm@duty_cycle:
  2571                           	opt stack 0
  2572  000043                     Read_Volt@ADC_Channel:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x42
  2576  000043                     	ds	1
  2577  000044                     drawtext@textsize:
  2578                           	opt stack 0
  2579  000044                     do_update_pwm@dc_I:
  2580                           	opt stack 0
  2581  000044                     Read_Volt@nStep:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x43
  2585  000044                     	ds	1
  2586  000045                     ??_dec_2_bcd:
  2587                           
  2588                           ; 0 bytes @ 0x44
  2589  000045                     	ds	1
  2590  000046                     drawtext@i:
  2591                           	opt stack 0
  2592  000046                     _fround$3005:
  2593                           	opt stack 0
  2594  000046                     _scale$3006:
  2595                           	opt stack 0
  2596                           
  2597                           ; 3 bytes @ 0x45
  2598  000046                     	ds	1
  2599  000047                     dec_2_bcd@bcd:
  2600                           	opt stack 0
  2601                           
  2602                           ; 2 bytes @ 0x46
  2603  000047                     	ds	1
  2604  000048                     drawtext@cursor_y:
  2605                           	opt stack 0
  2606                           
  2607                           ; 1 bytes @ 0x47
  2608  000048                     	ds	1
  2609  000049                     drawtext@cursor_x:
  2610                           	opt stack 0
  2611  000049                     dec_2_bcd@dec:
  2612                           	opt stack 0
  2613  000049                     scale@scl:
  2614                           	opt stack 0
  2615  000049                     _fround$3004:
  2616                           	opt stack 0
  2617                           
  2618                           ; 3 bytes @ 0x48
  2619  000049                     	ds	1
  2620  00004A                     ??_Update_Screen:
  2621  00004A                     DS3231_Write_Time@Device:
  2622                           	opt stack 0
  2623  00004A                     Update_Setup_Fan_Screen@dc_char1:
  2624                           	opt stack 0
  2625                           
  2626                           ; 1 bytes @ 0x49
  2627  00004A                     	ds	1
  2628  00004B                     DS3231_Write_Time@Address:
  2629                           	opt stack 0
  2630  00004B                     Update_Setup_Fan_Screen@dc_char2:
  2631                           	opt stack 0
  2632                           
  2633                           ; 1 bytes @ 0x4A
  2634  00004B                     	ds	1
  2635  00004C                     Update_Setup_Fan_Screen@dc_char3:
  2636                           	opt stack 0
  2637  00004C                     fround@prec:
  2638                           	opt stack 0
  2639  00004C                     Update_Screen@neg_tempC:
  2640                           	opt stack 0
  2641                           
  2642                           ; 2 bytes @ 0x4B
  2643  00004C                     	ds	1
  2644  00004D                     ?___ftadd:
  2645                           	opt stack 0
  2646  00004D                     ___ftadd@f1:
  2647                           	opt stack 0
  2648                           
  2649                           ; 3 bytes @ 0x4C
  2650  00004D                     	ds	1
  2651  00004E                     Update_Screen@neg_tempF:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x4D
  2655  00004E                     	ds	2
  2656  000050                     ___ftadd@f2:
  2657                           	opt stack 0
  2658                           
  2659                           ; 3 bytes @ 0x4F
  2660  000050                     	ds	3
  2661  000053                     ??___ftadd:
  2662                           
  2663                           ; 0 bytes @ 0x52
  2664  000053                     	ds	3
  2665  000056                     ___ftadd@sign:
  2666                           	opt stack 0
  2667                           
  2668                           ; 1 bytes @ 0x55
  2669  000056                     	ds	1
  2670  000057                     ___ftadd@exp2:
  2671                           	opt stack 0
  2672                           
  2673                           ; 1 bytes @ 0x56
  2674  000057                     	ds	1
  2675  000058                     ___ftadd@exp1:
  2676                           	opt stack 0
  2677                           
  2678                           ; 1 bytes @ 0x57
  2679  000058                     	ds	1
  2680  000059                     ?___ftsub:
  2681                           	opt stack 0
  2682  000059                     ___ftsub@f1:
  2683                           	opt stack 0
  2684                           
  2685                           ; 3 bytes @ 0x58
  2686  000059                     	ds	3
  2687  00005C                     ___ftsub@f2:
  2688                           	opt stack 0
  2689                           
  2690                           ; 3 bytes @ 0x5B
  2691  00005C                     	ds	3
  2692  00005F                     tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           postdec1	equ	0xFE5
  2699                           fsr1l	equ	0xFE1
  2700                           
  2701                           ; 0 bytes @ 0x5E
  2702 ;;
  2703 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2704 ;;
  2705 ;; *************** function _main *****************
  2706 ;; Defined at:
  2707 ;;		line 113 in file "Main.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;		None               void
  2714 ;; Registers used:
  2715 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;Total ram usage:        1 bytes
  2726 ;; Hardware stack levels required when called:   12
  2727 ;; This function calls:
  2728 ;;		_DS1621_Read_Temp
  2729 ;;		_DS3231_Read_Time
  2730 ;;		_Decrease_Duty_Cycle
  2731 ;;		_Do_Beep_Bad
  2732 ;;		_Do_Beep_Good
  2733 ;;		_Do_Change_Fan_Timer_Mode_Minus
  2734 ;;		_Do_Change_Fan_Timer_Mode_Plus
  2735 ;;		_Do_Init
  2736 ;;		_Do_Setup_Time
  2737 ;;		_Increase_Duty_Cycle
  2738 ;;		_Initialize_Screen
  2739 ;;		_Monitor_Fan
  2740 ;;		_Read_Volt
  2741 ;;		_Set_D1_RGB
  2742 ;;		_Set_D2_RGB
  2743 ;;		_Setup_Fan_Temp
  2744 ;;		_Toggle_Fan
  2745 ;;		_Turn_Off_Fan
  2746 ;;		_Update_Screen
  2747 ;;		___awdiv
  2748 ;;		___ftge
  2749 ;;		___wmul
  2750 ;;		_check_for_button_input
  2751 ;;		_get_RPM
  2752 ;;		_printf
  2753 ;; This function is called by:
  2754 ;;		Startup code after reset
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text0
  2759  001AA2                     __ptext0:
  2760                           	opt stack 0
  2761  001AA2                     _main:
  2762                           	opt stack 19
  2763                           
  2764                           ;Main.c: 115: Do_Init();
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;incstack = 0
  2768  001AA2  EC11  F021         	call	_Do_Init	;wreg free
  2769                           
  2770                           ;Main.c: 117: Initialize_Screen();
  2771  001AA6  EC81  F00B         	call	_Initialize_Screen	;wreg free
  2772                           
  2773                           ;Main.c: 119: TMR3L = 0x00;
  2774  001AAA  0E00               	movlw	0
  2775  001AAC  6EB2               	movwf	4018,c	;volatile
  2776                           
  2777                           ;Main.c: 120: T3CON = 0x03;
  2778  001AAE  0E03               	movlw	3
  2779  001AB0  6EB1               	movwf	4017,c	;volatile
  2780                           
  2781                           ;Main.c: 123: tempSecond = 0xff;
  2782  001AB2  0100               	movlb	0	; () banked
  2783  001AB4  69B7               	setf	_tempSecond& (0+255),b
  2784  001AB6  D000               	goto	l10245
  2785  001AB8                     l10245:
  2786                           
  2787                           ;Main.c: 126: {
  2788                           ;Main.c: 127: DS3231_Read_Time();
  2789  001AB8  ECAE  F020         	call	_DS3231_Read_Time	;wreg free
  2790                           
  2791                           ;Main.c: 129: if(tempSecond != second)
  2792  001ABC  506B               	movf	_second,w,c
  2793  001ABE  0100               	movlb	0	; () banked
  2794  001AC0  19B7               	xorwf	_tempSecond& (0+255),w,b
  2795  001AC2  B4D8               	btfsc	status,2,c
  2796  001AC4  D0A5               	goto	l10277
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;Main.c: 130: {
  2800                           ;Main.c: 131: tempSecond = second;
  2801  001AC6  C06B  F0B7         	movff	_second,_tempSecond
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;Main.c: 132: rpm = get_RPM();
  2805  001ACA  EC75  F022         	call	_get_RPM	;wreg free
  2806  001ACE  C01F  F05F         	movff	?_get_RPM,_rpm
  2807  001AD2  C020  F060         	movff	?_get_RPM+1,_rpm+1
  2808                           
  2809                           ;Main.c: 135: volt = Read_Volt(0);
  2810  001AD6  0E00               	movlw	0
  2811  001AD8  EC41  F020         	call	_Read_Volt
  2812  001ADC  C03D  F0D6         	movff	?_Read_Volt,_volt
  2813  001AE0  C03E  F0D7         	movff	?_Read_Volt+1,_volt+1
  2814  001AE4  C03F  F0D8         	movff	?_Read_Volt+2,_volt+2
  2815                           
  2816                           ;Main.c: 136: if (volt > 3.000) light_flag = 1;
  2817  001AE8  0E00               	movlw	0
  2818  001AEA  6E11               	movwf	___ftge@ff1,c
  2819  001AEC  0E40               	movlw	64
  2820  001AEE  6E12               	movwf	___ftge@ff1+1,c
  2821  001AF0  0E40               	movlw	64
  2822  001AF2  6E13               	movwf	___ftge@ff1+2,c
  2823  001AF4  C0D6  F014         	movff	_volt,___ftge@ff2
  2824  001AF8  C0D7  F015         	movff	_volt+1,___ftge@ff2+1
  2825  001AFC  C0D8  F016         	movff	_volt+2,___ftge@ff2+2
  2826  001B00  ECAC  F01D         	call	___ftge	;wreg free
  2827  001B04  B0D8               	btfsc	status,0,c
  2828  001B06  D004               	goto	l10257
  2829  001B08  0E01               	movlw	1
  2830  001B0A  0100               	movlb	0	; () banked
  2831  001B0C  6FF1               	movwf	_light_flag& (0+255),b
  2832  001B0E  D000               	goto	l10257
  2833  001B10                     l10257:
  2834                           
  2835                           ;Main.c: 137: tempC = DS1621_Read_Temp();
  2836  001B10  EC2E  F023         	call	_DS1621_Read_Temp	;wreg free
  2837  001B14  5014               	movf	?_DS1621_Read_Temp,w,c
  2838  001B16  6E6D               	movwf	_tempC,c
  2839                           
  2840                           ;Main.c: 138: tempF = (tempC * 9 / 5) + 32;
  2841  001B18  506D               	movf	_tempC,w,c
  2842  001B1A  6E11               	movwf	___wmul@multiplier,c
  2843  001B1C  6A12               	clrf	___wmul@multiplier+1,c
  2844  001B1E  BE11               	btfsc	___wmul@multiplier,7,c
  2845  001B20  0612               	decf	___wmul@multiplier+1,f,c
  2846  001B22  0E00               	movlw	0
  2847  001B24  6E14               	movwf	___wmul@multiplicand+1,c
  2848  001B26  0E09               	movlw	9
  2849  001B28  6E13               	movwf	___wmul@multiplicand,c
  2850  001B2A  EC01  F024         	call	___wmul	;wreg free
  2851  001B2E  C011  F017         	movff	?___wmul,___awdiv@dividend
  2852  001B32  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2853  001B36  0E00               	movlw	0
  2854  001B38  6E1A               	movwf	___awdiv@divisor+1,c
  2855  001B3A  0E05               	movlw	5
  2856  001B3C  6E19               	movwf	___awdiv@divisor,c
  2857  001B3E  EC61  F01D         	call	___awdiv	;wreg free
  2858  001B42  5017               	movf	?___awdiv,w,c
  2859  001B44  0F20               	addlw	32
  2860  001B46  6E6E               	movwf	_tempF,c
  2861                           
  2862                           ;Main.c: 139: Set_D1_RGB(duty_cycle);
  2863  001B48  5067               	movf	_duty_cycle,w,c
  2864  001B4A  ECE5  F021         	call	_Set_D1_RGB
  2865                           
  2866                           ;Main.c: 140: Set_D2_RGB(rpm);
  2867  001B4E  C05F  F01F         	movff	_rpm,Set_D2_RGB@rpm
  2868  001B52  C060  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  2869  001B56  EC96  F021         	call	_Set_D2_RGB	;wreg free
  2870                           
  2871                           ;Main.c: 142: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2872  001B5A  0E75               	movlw	low STR_4
  2873  001B5C  0100               	movlb	0	; () banked
  2874  001B5E  6F80               	movwf	printf@f& (0+255),b
  2875  001B60  0EFE               	movlw	high STR_4
  2876  001B62  0100               	movlb	0	; () banked
  2877  001B64  6F81               	movwf	(printf@f+1)& (0+255),b
  2878  001B66  C068  F082         	movff	_hour,?_printf+2
  2879  001B6A  0100               	movlb	0	; () banked
  2880  001B6C  6B83               	clrf	(?_printf+3)& (0+255),b
  2881  001B6E  C069  F084         	movff	_minute,?_printf+4
  2882  001B72  0100               	movlb	0	; () banked
  2883  001B74  6B85               	clrf	(?_printf+5)& (0+255),b
  2884  001B76  C06B  F086         	movff	_second,?_printf+6
  2885  001B7A  0100               	movlb	0	; () banked
  2886  001B7C  6B87               	clrf	(?_printf+7)& (0+255),b
  2887  001B7E  C06A  F088         	movff	_month,?_printf+8
  2888  001B82  0100               	movlb	0	; () banked
  2889  001B84  6B89               	clrf	(?_printf+9)& (0+255),b
  2890  001B86  C066  F08A         	movff	_day,?_printf+10
  2891  001B8A  0100               	movlb	0	; () banked
  2892  001B8C  6B8B               	clrf	(?_printf+11)& (0+255),b
  2893  001B8E  C06F  F08C         	movff	_year,?_printf+12
  2894  001B92  0100               	movlb	0	; () banked
  2895  001B94  6B8D               	clrf	(?_printf+13)& (0+255),b
  2896  001B96  EC0E  F000         	call	_printf	;wreg free
  2897                           
  2898                           ;Main.c: 143: printf (" Temp = %d C = %d F ", tempC, tempF);
  2899  001B9A  0EF7               	movlw	low STR_5
  2900  001B9C  0100               	movlb	0	; () banked
  2901  001B9E  6F80               	movwf	printf@f& (0+255),b
  2902  001BA0  0EFE               	movlw	high STR_5
  2903  001BA2  0100               	movlb	0	; () banked
  2904  001BA4  6F81               	movwf	(printf@f+1)& (0+255),b
  2905  001BA6  506D               	movf	_tempC,w,c
  2906  001BA8  0100               	movlb	0	; () banked
  2907  001BAA  6F82               	movwf	(?_printf+2)& (0+255),b
  2908  001BAC  6B83               	clrf	(?_printf+3)& (0+255),b
  2909  001BAE  BF82               	btfsc	(?_printf+2)& (0+255),7,b
  2910  001BB0  0783               	decf	(?_printf+3)& (0+255),f,b
  2911  001BB2  506E               	movf	_tempF,w,c
  2912  001BB4  0100               	movlb	0	; () banked
  2913  001BB6  6F84               	movwf	(?_printf+4)& (0+255),b
  2914  001BB8  6B85               	clrf	(?_printf+5)& (0+255),b
  2915  001BBA  BF84               	btfsc	(?_printf+4)& (0+255),7,b
  2916  001BBC  0785               	decf	(?_printf+5)& (0+255),f,b
  2917  001BBE  EC0E  F000         	call	_printf	;wreg free
  2918                           
  2919                           ;Main.c: 144: printf ("Light Sensor = %f V", volt);
  2920  001BC2  0E20               	movlw	low STR_6
  2921  001BC4  0100               	movlb	0	; () banked
  2922  001BC6  6F80               	movwf	printf@f& (0+255),b
  2923  001BC8  0EFF               	movlw	high STR_6
  2924  001BCA  0100               	movlb	0	; () banked
  2925  001BCC  6F81               	movwf	(printf@f+1)& (0+255),b
  2926  001BCE  C0D6  F082         	movff	_volt,?_printf+2
  2927  001BD2  C0D7  F083         	movff	_volt+1,?_printf+3
  2928  001BD6  C0D8  F084         	movff	_volt+2,?_printf+4
  2929  001BDA  EC0E  F000         	call	_printf	;wreg free
  2930                           
  2931                           ;Main.c: 145: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_flag);
  2932  001BDE  0E93               	movlw	low STR_7
  2933  001BE0  0100               	movlb	0	; () banked
  2934  001BE2  6F80               	movwf	printf@f& (0+255),b
  2935  001BE4  0EFE               	movlw	high STR_7
  2936  001BE6  0100               	movlb	0	; () banked
  2937  001BE8  6F81               	movwf	(printf@f+1)& (0+255),b
  2938  001BEA  C05F  F082         	movff	_rpm,?_printf+2
  2939  001BEE  C060  F083         	movff	_rpm+1,?_printf+3
  2940  001BF2  C067  F084         	movff	_duty_cycle,?_printf+4
  2941  001BF6  0100               	movlb	0	; () banked
  2942  001BF8  6B85               	clrf	(?_printf+5)& (0+255),b
  2943  001BFA  C0F1  F086         	movff	_light_flag,?_printf+6
  2944  001BFE  0100               	movlb	0	; () banked
  2945  001C00  6B87               	clrf	(?_printf+7)& (0+255),b
  2946  001C02  EC0E  F000         	call	_printf	;wreg free
  2947                           
  2948                           ;Main.c: 146: Monitor_Fan();
  2949  001C06  ECBF  F021         	call	_Monitor_Fan	;wreg free
  2950                           
  2951                           ;Main.c: 148: Update_Screen();
  2952  001C0A  EC30  F006         	call	_Update_Screen	;wreg free
  2953  001C0E  D000               	goto	l10277
  2954  001C10                     l10277:
  2955                           
  2956                           ;Main.c: 149: }
  2957                           ;Main.c: 156: PORTDbits.RD3 = check_for_button_input();
  2958  001C10  EC6A  F01C         	call	_check_for_button_input	;wreg free
  2959  001C14  0100               	movlb	0	; () banked
  2960  001C16  6FAF               	movwf	??_main& (0+255),b
  2961  001C18  0100               	movlb	0	; () banked
  2962  001C1A  47AF               	rlncf	??_main& (0+255),f,b
  2963  001C1C  47AF               	rlncf	??_main& (0+255),f,b
  2964  001C1E  47AF               	rlncf	??_main& (0+255),f,b
  2965  001C20  5083               	movf	3971,w,c	;volatile
  2966  001C22  0100               	movlb	0	; () banked
  2967  001C24  19AF               	xorwf	??_main& (0+255),w,b
  2968  001C26  0BF7               	andlw	-9
  2969  001C28  19AF               	xorwf	??_main& (0+255),w,b
  2970  001C2A  6E83               	movwf	3971,c	;volatile
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;Main.c: 157: if (PORTDbits.RD3==1 && SYSTEM_ON == 1)
  2974  001C2C  A683               	btfss	3971,3,c	;volatile
  2975  001C2E  D061               	goto	l10321
  2976                           
  2977                           ; BSR set to: 0
  2978  001C30  0464               	decf	_SYSTEM_ON,w,c
  2979  001C32  A4D8               	btfss	status,2,c
  2980  001C34  D05E               	goto	l10321
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;Main.c: 158: {
  2984                           ;Main.c: 160: printf("Key Location = %d \r\n\n", found);
  2985  001C36  0ECB               	movlw	low STR_8
  2986  001C38  0100               	movlb	0	; () banked
  2987  001C3A  6F80               	movwf	printf@f& (0+255),b
  2988  001C3C  0EFE               	movlw	high STR_8
  2989  001C3E  0100               	movlb	0	; () banked
  2990  001C40  6F81               	movwf	(printf@f+1)& (0+255),b
  2991  001C42  C0F0  F082         	movff	_found,?_printf+2
  2992  001C46  0100               	movlb	0	; () banked
  2993  001C48  6B83               	clrf	(?_printf+3)& (0+255),b
  2994  001C4A  EC0E  F000         	call	_printf	;wreg free
  2995                           
  2996                           ;Main.c: 162: Nec_ok = 0;
  2997  001C4E  0E00               	movlw	0
  2998  001C50  0100               	movlb	0	; () banked
  2999  001C52  6FDA               	movwf	(_Nec_ok+1)& (0+255),b
  3000  001C54  0E00               	movlw	0
  3001  001C56  6FD9               	movwf	_Nec_ok& (0+255),b
  3002                           
  3003                           ;Main.c: 164: switch(found)
  3004  001C58  D030               	goto	l10319
  3005  001C5A                     l10287:
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;Main.c: 168: Do_Beep_Good();
  3009  001C5A  EC02  F025         	call	_Do_Beep_Good	;wreg free
  3010                           
  3011                           ;Main.c: 169: Do_Setup_Time();
  3012  001C5E  ECDA  F00F         	call	_Do_Setup_Time	;wreg free
  3013                           
  3014                           ;Main.c: 170: break;
  3015  001C62  D047               	goto	l10321
  3016  001C64                     l10291:
  3017                           
  3018                           ;Main.c: 173: Do_Beep_Good();
  3019  001C64  EC02  F025         	call	_Do_Beep_Good	;wreg free
  3020                           
  3021                           ;Main.c: 174: Setup_Fan_Temp();
  3022  001C68  ECF9  F010         	call	_Setup_Fan_Temp	;wreg free
  3023                           
  3024                           ;Main.c: 175: break;
  3025  001C6C  D042               	goto	l10321
  3026  001C6E                     l10295:
  3027                           
  3028                           ;Main.c: 178: Do_Beep_Good();
  3029  001C6E  EC02  F025         	call	_Do_Beep_Good	;wreg free
  3030                           
  3031                           ;Main.c: 179: Do_Change_Fan_Timer_Mode_Minus();
  3032  001C72  ECAB  F023         	call	_Do_Change_Fan_Timer_Mode_Minus	;wreg free
  3033                           
  3034                           ;Main.c: 180: break;
  3035  001C76  D03D               	goto	l10321
  3036  001C78                     l10299:
  3037                           
  3038                           ;Main.c: 183: Do_Beep_Good();
  3039  001C78  EC02  F025         	call	_Do_Beep_Good	;wreg free
  3040                           
  3041                           ;Main.c: 184: Do_Change_Fan_Timer_Mode_Plus();
  3042  001C7C  EC95  F023         	call	_Do_Change_Fan_Timer_Mode_Plus	;wreg free
  3043                           
  3044                           ;Main.c: 185: break;
  3045  001C80  D038               	goto	l10321
  3046  001C82                     l10303:
  3047                           
  3048                           ;Main.c: 188: Do_Beep_Good();
  3049  001C82  EC02  F025         	call	_Do_Beep_Good	;wreg free
  3050                           
  3051                           ;Main.c: 189: Toggle_Fan();
  3052  001C86  EC47  F025         	call	_Toggle_Fan	;wreg free
  3053                           
  3054                           ;Main.c: 190: break;
  3055  001C8A  D033               	goto	l10321
  3056  001C8C                     l10307:
  3057                           
  3058                           ;Main.c: 193: Do_Beep_Good();
  3059  001C8C  EC02  F025         	call	_Do_Beep_Good	;wreg free
  3060                           
  3061                           ;Main.c: 194: Decrease_Duty_Cycle();
  3062  001C90  EC3B  F024         	call	_Decrease_Duty_Cycle	;wreg free
  3063                           
  3064                           ;Main.c: 195: break;
  3065  001C94  D02E               	goto	l10321
  3066  001C96                     l10309:
  3067                           
  3068                           ;Main.c: 198: Do_Beep_Good();
  3069  001C96  EC02  F025         	call	_Do_Beep_Good	;wreg free
  3070                           
  3071                           ;Main.c: 199: Increase_Duty_Cycle();
  3072  001C9A  EC65  F023         	call	_Increase_Duty_Cycle	;wreg free
  3073                           
  3074                           ;Main.c: 200: break;
  3075  001C9E  D029               	goto	l10321
  3076  001CA0                     l10311:
  3077                           
  3078                           ;Main.c: 203: if (FANMODE == 1)
  3079  001CA0  0100               	movlb	0	; () banked
  3080  001CA2  05E2               	decf	_FANMODE& (0+255),w,b
  3081  001CA4  A4D8               	btfss	status,2,c
  3082  001CA6  D002               	goto	l10315
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;Main.c: 204: FANMODE = 0;
  3086  001CA8  0E00               	movlw	0
  3087  001CAA  D001               	goto	L1
  3088  001CAC                     l10315:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;Main.c: 205: else
  3092                           ;Main.c: 206: FANMODE = 1;
  3093  001CAC  0E01               	movlw	1
  3094  001CAE                     L1:
  3095  001CAE  0100               	movlb	0	; () banked
  3096  001CB0  6FE2               	movwf	_FANMODE& (0+255),b
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;Main.c: 207: break;
  3100  001CB2  D01F               	goto	l10321
  3101  001CB4                     l10317:
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;Main.c: 210: Do_Beep_Bad();
  3105  001CB4  EC10  F025         	call	_Do_Beep_Bad	;wreg free
  3106                           
  3107                           ;Main.c: 211: }
  3108  001CB8  D01C               	goto	l10321
  3109  001CBA                     l10319:
  3110  001CBA  0100               	movlb	0	; () banked
  3111  001CBC  51F0               	movf	_found& (0+255),w,b
  3112                           
  3113                           ; Switch size 1, requested type "space"
  3114                           ; Number of cases is 8, Range of values is 0 to 8
  3115                           ; switch strategies available:
  3116                           ; Name         Instructions Cycles
  3117                           ; simple_byte           25    13 (average)
  3118                           ;	Chosen strategy is simple_byte
  3119  001CBE  0A00               	xorlw	0	; case 0
  3120  001CC0  B4D8               	btfsc	status,2,c
  3121  001CC2  D7CB               	goto	l10287
  3122  001CC4  0A01               	xorlw	1	; case 1
  3123  001CC6  B4D8               	btfsc	status,2,c
  3124  001CC8  D7CD               	goto	l10291
  3125  001CCA  0A02               	xorlw	2	; case 3
  3126  001CCC  B4D8               	btfsc	status,2,c
  3127  001CCE  D7CF               	goto	l10295
  3128  001CD0  0A07               	xorlw	7	; case 4
  3129  001CD2  B4D8               	btfsc	status,2,c
  3130  001CD4  D7D1               	goto	l10299
  3131  001CD6  0A01               	xorlw	1	; case 5
  3132  001CD8  B4D8               	btfsc	status,2,c
  3133  001CDA  D7D3               	goto	l10303
  3134  001CDC  0A03               	xorlw	3	; case 6
  3135  001CDE  B4D8               	btfsc	status,2,c
  3136  001CE0  D7D5               	goto	l10307
  3137  001CE2  0A01               	xorlw	1	; case 7
  3138  001CE4  B4D8               	btfsc	status,2,c
  3139  001CE6  D7D7               	goto	l10309
  3140  001CE8  0A0F               	xorlw	15	; case 8
  3141  001CEA  B4D8               	btfsc	status,2,c
  3142  001CEC  D7D9               	goto	l10311
  3143  001CEE  D7E2               	goto	l10317
  3144                           
  3145                           ; BSR set to: 0
  3146  001CF0  D000               	goto	l10321
  3147  001CF2                     l10321:
  3148                           
  3149                           ;Main.c: 212: }
  3150                           ;Main.c: 220: if (INT0_flag == 1 || light_flag == 1)
  3151  001CF2  0100               	movlb	0	; () banked
  3152  001CF4  05E4               	decf	_INT0_flag& (0+255),w,b
  3153  001CF6  B4D8               	btfsc	status,2,c
  3154  001CF8  D004               	goto	l10325
  3155                           
  3156                           ; BSR set to: 0
  3157  001CFA  0100               	movlb	0	; () banked
  3158  001CFC  05F1               	decf	_light_flag& (0+255),w,b
  3159  001CFE  A4D8               	btfss	status,2,c
  3160  001D00  D6DB               	goto	l10245
  3161  001D02                     l10325:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;Main.c: 221: {
  3165                           ;Main.c: 222: INT0_flag = 0;
  3166  001D02  0E00               	movlw	0
  3167  001D04  0100               	movlb	0	; () banked
  3168  001D06  6FE4               	movwf	_INT0_flag& (0+255),b
  3169                           
  3170                           ;Main.c: 223: light_flag = 0;
  3171  001D08  0E00               	movlw	0
  3172  001D0A  0100               	movlb	0	; () banked
  3173  001D0C  6FF1               	movwf	_light_flag& (0+255),b
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;Main.c: 225: if (SYSTEM_ON == 1)
  3177  001D0E  0464               	decf	_SYSTEM_ON,w,c
  3178  001D10  A4D8               	btfss	status,2,c
  3179  001D12  D01C               	goto	l10339
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;Main.c: 226: {
  3183                           ;Main.c: 227: printf ("The system will now turn off. \r\n\n");
  3184  001D14  0E32               	movlw	low STR_9
  3185  001D16  0100               	movlb	0	; () banked
  3186  001D18  6F80               	movwf	printf@f& (0+255),b
  3187  001D1A  0EFE               	movlw	high STR_9
  3188  001D1C  0100               	movlb	0	; () banked
  3189  001D1E  6F81               	movwf	(printf@f+1)& (0+255),b
  3190  001D20  EC0E  F000         	call	_printf	;wreg free
  3191                           
  3192                           ;Main.c: 228: SYSTEM_ON = 0;
  3193  001D24  0E00               	movlw	0
  3194  001D26  6E64               	movwf	_SYSTEM_ON,c
  3195                           
  3196                           ;Main.c: 229: Turn_Off_Fan();
  3197  001D28  ECF4  F024         	call	_Turn_Off_Fan	;wreg free
  3198                           
  3199                           ;Main.c: 230: FAN_TIMER_MODE = 0;
  3200  001D2C  0E00               	movlw	0
  3201  001D2E  6E63               	movwf	_FAN_TIMER_MODE,c
  3202                           
  3203                           ;Main.c: 231: FAN_TIMER_TIME = 0;
  3204  001D30  0E00               	movlw	0
  3205  001D32  0100               	movlb	0	; () banked
  3206  001D34  6FE3               	movwf	_FAN_TIMER_TIME& (0+255),b
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;Main.c: 232: printf ("The system is now OFF. \r\n\n");
  3210  001D36  0EB0               	movlw	low STR_10
  3211  001D38  0100               	movlb	0	; () banked
  3212  001D3A  6F80               	movwf	printf@f& (0+255),b
  3213  001D3C  0EFE               	movlw	high STR_10
  3214  001D3E  0100               	movlb	0	; () banked
  3215  001D40  6F81               	movwf	(printf@f+1)& (0+255),b
  3216  001D42  EC0E  F000         	call	_printf	;wreg free
  3217                           
  3218                           ;Main.c: 233: Initialize_Screen();
  3219  001D46  EC81  F00B         	call	_Initialize_Screen	;wreg free
  3220                           
  3221                           ;Main.c: 234: }
  3222  001D4A  D6B6               	goto	l10245
  3223  001D4C                     l10339:
  3224                           
  3225                           ;Main.c: 235: else if (SYSTEM_ON == 0)
  3226  001D4C  5064               	movf	_SYSTEM_ON,w,c
  3227  001D4E  A4D8               	btfss	status,2,c
  3228  001D50  D6B3               	goto	l10245
  3229                           
  3230                           ;Main.c: 236: {
  3231                           ;Main.c: 237: printf ("The system will now turn on. \r\n\n");
  3232  001D52  0E54               	movlw	low STR_11
  3233  001D54  0100               	movlb	0	; () banked
  3234  001D56  6F80               	movwf	printf@f& (0+255),b
  3235  001D58  0EFE               	movlw	high STR_11
  3236  001D5A  0100               	movlb	0	; () banked
  3237  001D5C  6F81               	movwf	(printf@f+1)& (0+255),b
  3238  001D5E  EC0E  F000         	call	_printf	;wreg free
  3239                           
  3240                           ;Main.c: 238: SYSTEM_ON = 1;
  3241  001D62  0E01               	movlw	1
  3242  001D64  6E64               	movwf	_SYSTEM_ON,c
  3243                           
  3244                           ;Main.c: 239: Initialize_Screen();
  3245  001D66  EC81  F00B         	call	_Initialize_Screen	;wreg free
  3246  001D6A  D6A6               	goto	l10245
  3247  001D6C  EF0C  F000         	goto	start
  3248  001D70                     __end_of_main:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1l	equ	0xFE1
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function _Update_Screen *****************
  3261 ;; Defined at:
  3262 ;;		line 100 in file "Main_Screen.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;		None
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  neg_tempF       2   77[COMRAM] int 
  3267 ;;  neg_tempC       2   75[COMRAM] int 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;		None               void
  3270 ;; Registers used:
  3271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;Total ram usage:        6 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    9
  3284 ;; This function calls:
  3285 ;;		___awdiv
  3286 ;;		___awmod
  3287 ;;		___ftmul
  3288 ;;		___fttol
  3289 ;;		_drawtext
  3290 ;;		_strcpy
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           	psect	text1
  3297  000C60                     __ptext1:
  3298                           	opt stack 0
  3299  000C60                     _Update_Screen:
  3300                           	opt stack 21
  3301                           
  3302                           ;Main_Screen.c: 102: if (SYSTEM_ON == 1)
  3303                           
  3304                           ;incstack = 0
  3305  000C60  0464               	decf	_SYSTEM_ON,w,c
  3306  000C62  A4D8               	btfss	status,2,c
  3307  000C64  D35D               	goto	l956
  3308                           
  3309                           ;Main_Screen.c: 103: {
  3310                           ;Main_Screen.c: 104: if ((tempC & 0x80) == 0x80)
  3311  000C66  C06D  F04A         	movff	_tempC,??_Update_Screen
  3312  000C6A  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3313  000C6C  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3314  000C6E  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3315  000C70  AE4A               	btfss	??_Update_Screen,7,c
  3316  000C72  D029               	goto	l9795
  3317                           
  3318                           ;Main_Screen.c: 105: {
  3319                           ;Main_Screen.c: 106: tempC_Txt[0] = '-';
  3320  000C74  0E2D               	movlw	45
  3321  000C76  0100               	movlb	0	; () banked
  3322  000C78  6FD2               	movwf	_tempC_Txt& (0+255),b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;Main_Screen.c: 107: int neg_tempC = -tempC;
  3326  000C7A  C06D  F04A         	movff	_tempC,??_Update_Screen
  3327  000C7E  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3328  000C80  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3329  000C82  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3330  000C84  1E4A               	comf	??_Update_Screen,f,c
  3331  000C86  1E4B               	comf	??_Update_Screen+1,f,c
  3332  000C88  4A4A               	infsnz	??_Update_Screen,f,c
  3333  000C8A  2A4B               	incf	??_Update_Screen+1,f,c
  3334  000C8C  C04A  F04C         	movff	??_Update_Screen,Update_Screen@neg_tempC
  3335  000C90  C04B  F04D         	movff	??_Update_Screen+1,Update_Screen@neg_tempC+1
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;Main_Screen.c: 108: tempC_Txt[1] = (neg_tempC & 0x7f)/10 + '0';
  3339  000C94  0E7F               	movlw	127
  3340  000C96  144C               	andwf	Update_Screen@neg_tempC,w,c
  3341  000C98  6E17               	movwf	___awdiv@dividend,c
  3342  000C9A  6A18               	clrf	___awdiv@dividend+1,c
  3343  000C9C  0E00               	movlw	0
  3344  000C9E  6E1A               	movwf	___awdiv@divisor+1,c
  3345  000CA0  0E0A               	movlw	10
  3346  000CA2  6E19               	movwf	___awdiv@divisor,c
  3347  000CA4  EC61  F01D         	call	___awdiv	;wreg free
  3348  000CA8  5017               	movf	?___awdiv,w,c
  3349  000CAA  0F30               	addlw	48
  3350  000CAC  0100               	movlb	0	; () banked
  3351  000CAE  6FD3               	movwf	(_tempC_Txt+1)& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;Main_Screen.c: 109: tempC_Txt[2] = (neg_tempC & 0x7f)%10 + '0';
  3355  000CB0  0E7F               	movlw	127
  3356  000CB2  144C               	andwf	Update_Screen@neg_tempC,w,c
  3357  000CB4  6E3D               	movwf	___awmod@dividend,c
  3358  000CB6  6A3E               	clrf	___awmod@dividend+1,c
  3359  000CB8  0E00               	movlw	0
  3360  000CBA  6E40               	movwf	___awmod@divisor+1,c
  3361  000CBC  0E0A               	movlw	10
  3362  000CBE  6E3F               	movwf	___awmod@divisor,c
  3363  000CC0  EC90  F01F         	call	___awmod	;wreg free
  3364  000CC4  D01D               	goto	L2
  3365  000CC6                     l9795:
  3366                           
  3367                           ;Main_Screen.c: 111: else
  3368                           ;Main_Screen.c: 112: {
  3369                           ;Main_Screen.c: 113: tempC_Txt[0] = '+';
  3370  000CC6  0E2B               	movlw	43
  3371  000CC8  0100               	movlb	0	; () banked
  3372  000CCA  6FD2               	movwf	_tempC_Txt& (0+255),b
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;Main_Screen.c: 114: tempC_Txt[1] = tempC/10 + '0';
  3376  000CCC  506D               	movf	_tempC,w,c
  3377  000CCE  6E17               	movwf	___awdiv@dividend,c
  3378  000CD0  6A18               	clrf	___awdiv@dividend+1,c
  3379  000CD2  BE17               	btfsc	___awdiv@dividend,7,c
  3380  000CD4  0618               	decf	___awdiv@dividend+1,f,c
  3381  000CD6  0E00               	movlw	0
  3382  000CD8  6E1A               	movwf	___awdiv@divisor+1,c
  3383  000CDA  0E0A               	movlw	10
  3384  000CDC  6E19               	movwf	___awdiv@divisor,c
  3385  000CDE  EC61  F01D         	call	___awdiv	;wreg free
  3386  000CE2  5017               	movf	?___awdiv,w,c
  3387  000CE4  0F30               	addlw	48
  3388  000CE6  0100               	movlb	0	; () banked
  3389  000CE8  6FD3               	movwf	(_tempC_Txt+1)& (0+255),b
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;Main_Screen.c: 115: tempC_Txt[2] = tempC%10 + '0';
  3393  000CEA  506D               	movf	_tempC,w,c
  3394  000CEC  6E3D               	movwf	___awmod@dividend,c
  3395  000CEE  6A3E               	clrf	___awmod@dividend+1,c
  3396  000CF0  BE3D               	btfsc	___awmod@dividend,7,c
  3397  000CF2  063E               	decf	___awmod@dividend+1,f,c
  3398  000CF4  0E00               	movlw	0
  3399  000CF6  6E40               	movwf	___awmod@divisor+1,c
  3400  000CF8  0E0A               	movlw	10
  3401  000CFA  6E3F               	movwf	___awmod@divisor,c
  3402  000CFC  EC90  F01F         	call	___awmod	;wreg free
  3403  000D00                     L2:
  3404  000D00  503D               	movf	?___awmod,w,c
  3405  000D02  0F30               	addlw	48
  3406  000D04  0100               	movlb	0	; () banked
  3407  000D06  6FD4               	movwf	(_tempC_Txt+2)& (0+255),b
  3408  000D08  D000               	goto	l9801
  3409  000D0A                     l9801:
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;Main_Screen.c: 116: }
  3413                           ;Main_Screen.c: 118: if (tempF < 0)
  3414  000D0A  AE6E               	btfss	_tempF,7,c
  3415  000D0C  D041               	goto	l9813
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;Main_Screen.c: 119: {
  3419                           ;Main_Screen.c: 120: tempF_Txt[0] = '-';
  3420  000D0E  0E2D               	movlw	45
  3421  000D10  0100               	movlb	0	; () banked
  3422  000D12  6FB9               	movwf	_tempF_Txt& (0+255),b
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;Main_Screen.c: 121: int neg_tempF = -tempF;
  3426  000D14  C06E  F04A         	movff	_tempF,??_Update_Screen
  3427  000D18  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3428  000D1A  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3429  000D1C  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3430  000D1E  1E4A               	comf	??_Update_Screen,f,c
  3431  000D20  1E4B               	comf	??_Update_Screen+1,f,c
  3432  000D22  4A4A               	infsnz	??_Update_Screen,f,c
  3433  000D24  2A4B               	incf	??_Update_Screen+1,f,c
  3434  000D26  C04A  F04E         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3435  000D2A  C04B  F04F         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;Main_Screen.c: 122: tempF_Txt[1] = neg_tempF/100 + '0';
  3439  000D2E  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3440  000D32  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3441  000D36  0E00               	movlw	0
  3442  000D38  6E1A               	movwf	___awdiv@divisor+1,c
  3443  000D3A  0E64               	movlw	100
  3444  000D3C  6E19               	movwf	___awdiv@divisor,c
  3445  000D3E  EC61  F01D         	call	___awdiv	;wreg free
  3446  000D42  5017               	movf	?___awdiv,w,c
  3447  000D44  0F30               	addlw	48
  3448  000D46  0100               	movlb	0	; () banked
  3449  000D48  6FBA               	movwf	(_tempF_Txt+1)& (0+255),b
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;Main_Screen.c: 123: tempF_Txt[2] = (neg_tempF/10)%10 + '0';
  3453  000D4A  0E00               	movlw	0
  3454  000D4C  6E1A               	movwf	___awdiv@divisor+1,c
  3455  000D4E  0E0A               	movlw	10
  3456  000D50  6E19               	movwf	___awdiv@divisor,c
  3457  000D52  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3458  000D56  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3459  000D5A  EC61  F01D         	call	___awdiv	;wreg free
  3460  000D5E  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3461  000D62  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3462  000D66  0E00               	movlw	0
  3463  000D68  6E40               	movwf	___awmod@divisor+1,c
  3464  000D6A  0E0A               	movlw	10
  3465  000D6C  6E3F               	movwf	___awmod@divisor,c
  3466  000D6E  EC90  F01F         	call	___awmod	;wreg free
  3467  000D72  503D               	movf	?___awmod,w,c
  3468  000D74  0F30               	addlw	48
  3469  000D76  0100               	movlb	0	; () banked
  3470  000D78  6FBB               	movwf	(_tempF_Txt+2)& (0+255),b
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;Main_Screen.c: 124: tempF_Txt[3] = neg_tempF%10 + '0';
  3474  000D7A  C04E  F03D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3475  000D7E  C04F  F03E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3476  000D82  0E00               	movlw	0
  3477  000D84  6E40               	movwf	___awmod@divisor+1,c
  3478  000D86  0E0A               	movlw	10
  3479  000D88  6E3F               	movwf	___awmod@divisor,c
  3480  000D8A  EC90  F01F         	call	___awmod	;wreg free
  3481  000D8E  D036               	goto	L3
  3482  000D90                     l9813:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;Main_Screen.c: 126: else
  3486                           ;Main_Screen.c: 127: {
  3487                           ;Main_Screen.c: 128: tempF_Txt[0] = '+';
  3488  000D90  0E2B               	movlw	43
  3489  000D92  0100               	movlb	0	; () banked
  3490  000D94  6FB9               	movwf	_tempF_Txt& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;Main_Screen.c: 129: tempF_Txt[1] = tempF/100 + '0';
  3494  000D96  506E               	movf	_tempF,w,c
  3495  000D98  6E17               	movwf	___awdiv@dividend,c
  3496  000D9A  6A18               	clrf	___awdiv@dividend+1,c
  3497  000D9C  BE17               	btfsc	___awdiv@dividend,7,c
  3498  000D9E  0618               	decf	___awdiv@dividend+1,f,c
  3499  000DA0  0E00               	movlw	0
  3500  000DA2  6E1A               	movwf	___awdiv@divisor+1,c
  3501  000DA4  0E64               	movlw	100
  3502  000DA6  6E19               	movwf	___awdiv@divisor,c
  3503  000DA8  EC61  F01D         	call	___awdiv	;wreg free
  3504  000DAC  5017               	movf	?___awdiv,w,c
  3505  000DAE  0F30               	addlw	48
  3506  000DB0  0100               	movlb	0	; () banked
  3507  000DB2  6FBA               	movwf	(_tempF_Txt+1)& (0+255),b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;Main_Screen.c: 130: tempF_Txt[2] = (tempF/10)%10 + '0';
  3511  000DB4  0E00               	movlw	0
  3512  000DB6  6E1A               	movwf	___awdiv@divisor+1,c
  3513  000DB8  0E0A               	movlw	10
  3514  000DBA  6E19               	movwf	___awdiv@divisor,c
  3515  000DBC  506E               	movf	_tempF,w,c
  3516  000DBE  6E17               	movwf	___awdiv@dividend,c
  3517  000DC0  6A18               	clrf	___awdiv@dividend+1,c
  3518  000DC2  BE17               	btfsc	___awdiv@dividend,7,c
  3519  000DC4  0618               	decf	___awdiv@dividend+1,f,c
  3520  000DC6  EC61  F01D         	call	___awdiv	;wreg free
  3521  000DCA  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3522  000DCE  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3523  000DD2  0E00               	movlw	0
  3524  000DD4  6E40               	movwf	___awmod@divisor+1,c
  3525  000DD6  0E0A               	movlw	10
  3526  000DD8  6E3F               	movwf	___awmod@divisor,c
  3527  000DDA  EC90  F01F         	call	___awmod	;wreg free
  3528  000DDE  503D               	movf	?___awmod,w,c
  3529  000DE0  0F30               	addlw	48
  3530  000DE2  0100               	movlb	0	; () banked
  3531  000DE4  6FBB               	movwf	(_tempF_Txt+2)& (0+255),b
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;Main_Screen.c: 131: tempF_Txt[3] = tempF%10 + '0';
  3535  000DE6  506E               	movf	_tempF,w,c
  3536  000DE8  6E3D               	movwf	___awmod@dividend,c
  3537  000DEA  6A3E               	clrf	___awmod@dividend+1,c
  3538  000DEC  BE3D               	btfsc	___awmod@dividend,7,c
  3539  000DEE  063E               	decf	___awmod@dividend+1,f,c
  3540  000DF0  0E00               	movlw	0
  3541  000DF2  6E40               	movwf	___awmod@divisor+1,c
  3542  000DF4  0E0A               	movlw	10
  3543  000DF6  6E3F               	movwf	___awmod@divisor,c
  3544  000DF8  EC90  F01F         	call	___awmod	;wreg free
  3545  000DFC                     L3:
  3546  000DFC  503D               	movf	?___awmod,w,c
  3547  000DFE  0F30               	addlw	48
  3548  000E00  0100               	movlb	0	; () banked
  3549  000E02  6FBC               	movwf	(_tempF_Txt+3)& (0+255),b
  3550  000E04  D000               	goto	l9821
  3551  000E06                     l9821:
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;Main_Screen.c: 132: }
  3555                           ;Main_Screen.c: 134: time_Txt[0] = (hour>>4) + '0';
  3556  000E06  3868               	swapf	_hour,w,c
  3557  000E08  0B0F               	andlw	15
  3558  000E0A  0F30               	addlw	48
  3559  000E0C  0101               	movlb	1	; () banked
  3560  000E0E  6F6A               	movwf	_time_Txt& (0+255),b
  3561                           
  3562                           ; BSR set to: 1
  3563                           ;Main_Screen.c: 135: time_Txt[1] = (hour & 0x0f)+ '0';
  3564  000E10  5068               	movf	_hour,w,c
  3565  000E12  0B0F               	andlw	15
  3566  000E14  0F30               	addlw	48
  3567  000E16  0101               	movlb	1	; () banked
  3568  000E18  6F6B               	movwf	(_time_Txt+1)& (0+255),b
  3569                           
  3570                           ; BSR set to: 1
  3571                           ;Main_Screen.c: 136: time_Txt[3] = (minute>>4) + '0';
  3572  000E1A  3869               	swapf	_minute,w,c
  3573  000E1C  0B0F               	andlw	15
  3574  000E1E  0F30               	addlw	48
  3575  000E20  0101               	movlb	1	; () banked
  3576  000E22  6F6D               	movwf	(_time_Txt+3)& (0+255),b
  3577                           
  3578                           ; BSR set to: 1
  3579                           ;Main_Screen.c: 137: time_Txt[4] = (minute & 0x0f) + '0';
  3580  000E24  5069               	movf	_minute,w,c
  3581  000E26  0B0F               	andlw	15
  3582  000E28  0F30               	addlw	48
  3583  000E2A  0101               	movlb	1	; () banked
  3584  000E2C  6F6E               	movwf	(_time_Txt+4)& (0+255),b
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;Main_Screen.c: 138: time_Txt[6] = (second>>4) + '0';
  3588  000E2E  386B               	swapf	_second,w,c
  3589  000E30  0B0F               	andlw	15
  3590  000E32  0F30               	addlw	48
  3591  000E34  0101               	movlb	1	; () banked
  3592  000E36  6F70               	movwf	(_time_Txt+6)& (0+255),b
  3593                           
  3594                           ; BSR set to: 1
  3595                           ;Main_Screen.c: 139: time_Txt[7] = (second & 0x0f) + '0';
  3596  000E38  506B               	movf	_second,w,c
  3597  000E3A  0B0F               	andlw	15
  3598  000E3C  0F30               	addlw	48
  3599  000E3E  0101               	movlb	1	; () banked
  3600  000E40  6F71               	movwf	(_time_Txt+7)& (0+255),b
  3601                           
  3602                           ; BSR set to: 1
  3603                           ;Main_Screen.c: 140: date_Txt[0] = (month>>4) + '0';
  3604  000E42  386A               	swapf	_month,w,c
  3605  000E44  0B0F               	andlw	15
  3606  000E46  0F30               	addlw	48
  3607  000E48  0101               	movlb	1	; () banked
  3608  000E4A  6F4F               	movwf	_date_Txt& (0+255),b
  3609                           
  3610                           ; BSR set to: 1
  3611                           ;Main_Screen.c: 141: date_Txt[1] = (month & 0x0f) + '0';
  3612  000E4C  506A               	movf	_month,w,c
  3613  000E4E  0B0F               	andlw	15
  3614  000E50  0F30               	addlw	48
  3615  000E52  0101               	movlb	1	; () banked
  3616  000E54  6F50               	movwf	(_date_Txt+1)& (0+255),b
  3617                           
  3618                           ; BSR set to: 1
  3619                           ;Main_Screen.c: 142: date_Txt[3] = (day>>4) + '0';
  3620  000E56  3866               	swapf	_day,w,c
  3621  000E58  0B0F               	andlw	15
  3622  000E5A  0F30               	addlw	48
  3623  000E5C  0101               	movlb	1	; () banked
  3624  000E5E  6F52               	movwf	(_date_Txt+3)& (0+255),b
  3625                           
  3626                           ; BSR set to: 1
  3627                           ;Main_Screen.c: 143: date_Txt[4] = (day & 0x0f) + '0';
  3628  000E60  5066               	movf	_day,w,c
  3629  000E62  0B0F               	andlw	15
  3630  000E64  0F30               	addlw	48
  3631  000E66  0101               	movlb	1	; () banked
  3632  000E68  6F53               	movwf	(_date_Txt+4)& (0+255),b
  3633                           
  3634                           ; BSR set to: 1
  3635                           ;Main_Screen.c: 144: date_Txt[6] = (year>>4) + '0';
  3636  000E6A  386F               	swapf	_year,w,c
  3637  000E6C  0B0F               	andlw	15
  3638  000E6E  0F30               	addlw	48
  3639  000E70  0101               	movlb	1	; () banked
  3640  000E72  6F55               	movwf	(_date_Txt+6)& (0+255),b
  3641                           
  3642                           ; BSR set to: 1
  3643                           ;Main_Screen.c: 145: date_Txt[7] = (year & 0x0f) + '0';
  3644  000E74  506F               	movf	_year,w,c
  3645  000E76  0B0F               	andlw	15
  3646  000E78  0F30               	addlw	48
  3647  000E7A  0101               	movlb	1	; () banked
  3648  000E7C  6F56               	movwf	(_date_Txt+7)& (0+255),b
  3649                           
  3650                           ; BSR set to: 1
  3651                           ;Main_Screen.c: 147: if (FAN_TIMER_MODE == 0)
  3652  000E7E  5063               	movf	_FAN_TIMER_MODE,w,c
  3653  000E80  A4D8               	btfss	status,2,c
  3654  000E82  D00B               	goto	l9849
  3655                           
  3656                           ; BSR set to: 1
  3657                           ;Main_Screen.c: 148: {
  3658                           ;Main_Screen.c: 149: strcpy(Fan_Timer_Mode_Txt, "OFF");
  3659  000E84  0ECA               	movlw	low _Fan_Timer_Mode_Txt
  3660  000E86  6E11               	movwf	strcpy@to,c
  3661  000E88  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3662  000E8A  6E12               	movwf	strcpy@to+1,c
  3663  000E8C  0EB3               	movlw	low (STR_25+7)
  3664  000E8E  6E13               	movwf	strcpy@from,c
  3665  000E90  0EFF               	movlw	high (STR_25+7)
  3666  000E92  6E14               	movwf	strcpy@from+1,c
  3667  000E94  EC4C  F023         	call	_strcpy	;wreg free
  3668                           
  3669                           ;Main_Screen.c: 150: }
  3670  000E98  D02C               	goto	l9861
  3671  000E9A                     l9849:
  3672                           
  3673                           ;Main_Screen.c: 151: else if (FAN_TIMER_MODE == 1)
  3674  000E9A  0463               	decf	_FAN_TIMER_MODE,w,c
  3675  000E9C  A4D8               	btfss	status,2,c
  3676  000E9E  D00B               	goto	l9853
  3677                           
  3678                           ;Main_Screen.c: 152: {
  3679                           ;Main_Screen.c: 153: strcpy(Fan_Timer_Mode_Txt, "TM1");
  3680  000EA0  0ECA               	movlw	low _Fan_Timer_Mode_Txt
  3681  000EA2  6E11               	movwf	strcpy@to,c
  3682  000EA4  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3683  000EA6  6E12               	movwf	strcpy@to+1,c
  3684  000EA8  0EE5               	movlw	low STR_27
  3685  000EAA  6E13               	movwf	strcpy@from,c
  3686  000EAC  0EFF               	movlw	high STR_27
  3687  000EAE  6E14               	movwf	strcpy@from+1,c
  3688  000EB0  EC4C  F023         	call	_strcpy	;wreg free
  3689                           
  3690                           ;Main_Screen.c: 154: }
  3691  000EB4  D01E               	goto	l9861
  3692  000EB6                     l9853:
  3693                           
  3694                           ;Main_Screen.c: 155: else if (FAN_TIMER_MODE == 2)
  3695  000EB6  0E02               	movlw	2
  3696  000EB8  1863               	xorwf	_FAN_TIMER_MODE,w,c
  3697  000EBA  A4D8               	btfss	status,2,c
  3698  000EBC  D00B               	goto	l9857
  3699                           
  3700                           ;Main_Screen.c: 156: {
  3701                           ;Main_Screen.c: 157: strcpy(Fan_Timer_Mode_Txt, "TM2");
  3702  000EBE  0ECA               	movlw	low _Fan_Timer_Mode_Txt
  3703  000EC0  6E11               	movwf	strcpy@to,c
  3704  000EC2  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3705  000EC4  6E12               	movwf	strcpy@to+1,c
  3706  000EC6  0EE9               	movlw	low STR_28
  3707  000EC8  6E13               	movwf	strcpy@from,c
  3708  000ECA  0EFF               	movlw	high STR_28
  3709  000ECC  6E14               	movwf	strcpy@from+1,c
  3710  000ECE  EC4C  F023         	call	_strcpy	;wreg free
  3711                           
  3712                           ;Main_Screen.c: 158: }
  3713  000ED2  D00F               	goto	l9861
  3714  000ED4                     l9857:
  3715                           
  3716                           ;Main_Screen.c: 159: else if (FAN_TIMER_MODE == 3)
  3717  000ED4  0E03               	movlw	3
  3718  000ED6  1863               	xorwf	_FAN_TIMER_MODE,w,c
  3719  000ED8  A4D8               	btfss	status,2,c
  3720  000EDA  D00B               	goto	l9861
  3721                           
  3722                           ;Main_Screen.c: 160: {
  3723                           ;Main_Screen.c: 161: strcpy(Fan_Timer_Mode_Txt, "TM3");
  3724  000EDC  0ECA               	movlw	low _Fan_Timer_Mode_Txt
  3725  000EDE  6E11               	movwf	strcpy@to,c
  3726  000EE0  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3727  000EE2  6E12               	movwf	strcpy@to+1,c
  3728  000EE4  0EED               	movlw	low STR_29
  3729  000EE6  6E13               	movwf	strcpy@from,c
  3730  000EE8  0EFF               	movlw	high STR_29
  3731  000EEA  6E14               	movwf	strcpy@from+1,c
  3732  000EEC  EC4C  F023         	call	_strcpy	;wreg free
  3733  000EF0  D000               	goto	l9861
  3734  000EF2                     l9861:
  3735                           
  3736                           ;Main_Screen.c: 162: }
  3737                           ;Main_Screen.c: 164: Fan_Timer_Txt[0] = FAN_TIMER_TIME/100 + '0';
  3738  000EF2  C0E3  F017         	movff	_FAN_TIMER_TIME,___awdiv@dividend
  3739  000EF6  6A18               	clrf	___awdiv@dividend+1,c
  3740  000EF8  0E00               	movlw	0
  3741  000EFA  6E1A               	movwf	___awdiv@divisor+1,c
  3742  000EFC  0E64               	movlw	100
  3743  000EFE  6E19               	movwf	___awdiv@divisor,c
  3744  000F00  EC61  F01D         	call	___awdiv	;wreg free
  3745  000F04  5017               	movf	?___awdiv,w,c
  3746  000F06  0F30               	addlw	48
  3747  000F08  0100               	movlb	0	; () banked
  3748  000F0A  6FCE               	movwf	_Fan_Timer_Txt& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;Main_Screen.c: 165: Fan_Timer_Txt[1] = FAN_TIMER_TIME/10 + '0';
  3752  000F0C  C0E3  F017         	movff	_FAN_TIMER_TIME,___awdiv@dividend
  3753  000F10  6A18               	clrf	___awdiv@dividend+1,c
  3754  000F12  0E00               	movlw	0
  3755  000F14  6E1A               	movwf	___awdiv@divisor+1,c
  3756  000F16  0E0A               	movlw	10
  3757  000F18  6E19               	movwf	___awdiv@divisor,c
  3758  000F1A  EC61  F01D         	call	___awdiv	;wreg free
  3759  000F1E  5017               	movf	?___awdiv,w,c
  3760  000F20  0F30               	addlw	48
  3761  000F22  0100               	movlb	0	; () banked
  3762  000F24  6FCF               	movwf	(_Fan_Timer_Txt+1)& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;Main_Screen.c: 166: Fan_Timer_Txt[2] = FAN_TIMER_TIME%10 + '0';
  3766  000F26  C0E3  F03D         	movff	_FAN_TIMER_TIME,___awmod@dividend
  3767  000F2A  6A3E               	clrf	___awmod@dividend+1,c
  3768  000F2C  0E00               	movlw	0
  3769  000F2E  6E40               	movwf	___awmod@divisor+1,c
  3770  000F30  0E0A               	movlw	10
  3771  000F32  6E3F               	movwf	___awmod@divisor,c
  3772  000F34  EC90  F01F         	call	___awmod	;wreg free
  3773  000F38  503D               	movf	?___awmod,w,c
  3774  000F3A  0F30               	addlw	48
  3775  000F3C  0100               	movlb	0	; () banked
  3776  000F3E  6FD0               	movwf	(_Fan_Timer_Txt+2)& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;Main_Screen.c: 168: Fan_Set_Temp_Txt[0] = fan_set_temp/100 + '0';
  3780  000F40  C0B6  F017         	movff	_fan_set_temp,___awdiv@dividend
  3781  000F44  6A18               	clrf	___awdiv@dividend+1,c
  3782  000F46  0E00               	movlw	0
  3783  000F48  6E1A               	movwf	___awdiv@divisor+1,c
  3784  000F4A  0E64               	movlw	100
  3785  000F4C  6E19               	movwf	___awdiv@divisor,c
  3786  000F4E  EC61  F01D         	call	___awdiv	;wreg free
  3787  000F52  5017               	movf	?___awdiv,w,c
  3788  000F54  0F30               	addlw	48
  3789  000F56  0100               	movlb	0	; () banked
  3790  000F58  6FC6               	movwf	_Fan_Set_Temp_Txt& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;Main_Screen.c: 169: Fan_Set_Temp_Txt[1] = fan_set_temp/10 + '0';
  3794  000F5A  C0B6  F017         	movff	_fan_set_temp,___awdiv@dividend
  3795  000F5E  6A18               	clrf	___awdiv@dividend+1,c
  3796  000F60  0E00               	movlw	0
  3797  000F62  6E1A               	movwf	___awdiv@divisor+1,c
  3798  000F64  0E0A               	movlw	10
  3799  000F66  6E19               	movwf	___awdiv@divisor,c
  3800  000F68  EC61  F01D         	call	___awdiv	;wreg free
  3801  000F6C  5017               	movf	?___awdiv,w,c
  3802  000F6E  0F30               	addlw	48
  3803  000F70  0100               	movlb	0	; () banked
  3804  000F72  6FC7               	movwf	(_Fan_Set_Temp_Txt+1)& (0+255),b
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;Main_Screen.c: 170: Fan_Set_Temp_Txt[2] = fan_set_temp%10 + '0';
  3808  000F74  C0B6  F03D         	movff	_fan_set_temp,___awmod@dividend
  3809  000F78  6A3E               	clrf	___awmod@dividend+1,c
  3810  000F7A  0E00               	movlw	0
  3811  000F7C  6E40               	movwf	___awmod@divisor+1,c
  3812  000F7E  0E0A               	movlw	10
  3813  000F80  6E3F               	movwf	___awmod@divisor,c
  3814  000F82  EC90  F01F         	call	___awmod	;wreg free
  3815  000F86  503D               	movf	?___awmod,w,c
  3816  000F88  0F30               	addlw	48
  3817  000F8A  0100               	movlb	0	; () banked
  3818  000F8C  6FC8               	movwf	(_Fan_Set_Temp_Txt+2)& (0+255),b
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;Main_Screen.c: 172: if (FANMODE == 1)
  3822  000F8E  0100               	movlb	0	; () banked
  3823  000F90  05E2               	decf	_FANMODE& (0+255),w,b
  3824  000F92  A4D8               	btfss	status,2,c
  3825  000F94  D00B               	goto	l9877
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;Main_Screen.c: 173: {
  3829                           ;Main_Screen.c: 174: strcpy(Fan_Mode_Txt, "AUTO");
  3830  000F96  0E79               	movlw	low _Fan_Mode_Txt
  3831  000F98  6E11               	movwf	strcpy@to,c
  3832  000F9A  0E01               	movlw	high _Fan_Mode_Txt
  3833  000F9C  6E12               	movwf	strcpy@to+1,c
  3834  000F9E  0ECD               	movlw	low STR_30
  3835  000FA0  6E13               	movwf	strcpy@from,c
  3836  000FA2  0EFF               	movlw	high STR_30
  3837  000FA4  6E14               	movwf	strcpy@from+1,c
  3838  000FA6  EC4C  F023         	call	_strcpy	;wreg free
  3839                           
  3840                           ;Main_Screen.c: 175: }
  3841  000FAA  D00B               	goto	l9879
  3842  000FAC                     l9877:
  3843                           
  3844                           ;Main_Screen.c: 176: else
  3845                           ;Main_Screen.c: 177: {
  3846                           ;Main_Screen.c: 178: strcpy(Fan_Mode_Txt, "MANU");
  3847  000FAC  0E79               	movlw	low _Fan_Mode_Txt
  3848  000FAE  6E11               	movwf	strcpy@to,c
  3849  000FB0  0E01               	movlw	high _Fan_Mode_Txt
  3850  000FB2  6E12               	movwf	strcpy@to+1,c
  3851  000FB4  0ED2               	movlw	low STR_31
  3852  000FB6  6E13               	movwf	strcpy@from,c
  3853  000FB8  0EFF               	movlw	high STR_31
  3854  000FBA  6E14               	movwf	strcpy@from+1,c
  3855  000FBC  EC4C  F023         	call	_strcpy	;wreg free
  3856  000FC0  D000               	goto	l9879
  3857  000FC2                     l9879:
  3858                           
  3859                           ;Main_Screen.c: 179: }
  3860                           ;Main_Screen.c: 181: if (FAN == 1)
  3861  000FC2  0100               	movlb	0	; () banked
  3862  000FC4  05E1               	decf	_FAN& (0+255),w,b
  3863  000FC6  A4D8               	btfss	status,2,c
  3864  000FC8  D00B               	goto	l9883
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;Main_Screen.c: 182: {
  3868                           ;Main_Screen.c: 183: strcpy(Fan_SW_Txt, "ON ");
  3869  000FCA  0EC2               	movlw	low _Fan_SW_Txt
  3870  000FCC  6E11               	movwf	strcpy@to,c
  3871  000FCE  0E00               	movlw	high _Fan_SW_Txt
  3872  000FD0  6E12               	movwf	strcpy@to+1,c
  3873  000FD2  0EE1               	movlw	low STR_32
  3874  000FD4  6E13               	movwf	strcpy@from,c
  3875  000FD6  0EFF               	movlw	high STR_32
  3876  000FD8  6E14               	movwf	strcpy@from+1,c
  3877  000FDA  EC4C  F023         	call	_strcpy	;wreg free
  3878                           
  3879                           ;Main_Screen.c: 184: }
  3880  000FDE  D00B               	goto	l9885
  3881  000FE0                     l9883:
  3882                           
  3883                           ;Main_Screen.c: 185: else
  3884                           ;Main_Screen.c: 186: {
  3885                           ;Main_Screen.c: 187: strcpy(Fan_SW_Txt, "OFF");
  3886  000FE0  0EC2               	movlw	low _Fan_SW_Txt
  3887  000FE2  6E11               	movwf	strcpy@to,c
  3888  000FE4  0E00               	movlw	high _Fan_SW_Txt
  3889  000FE6  6E12               	movwf	strcpy@to+1,c
  3890  000FE8  0EB3               	movlw	low (STR_25+7)
  3891  000FEA  6E13               	movwf	strcpy@from,c
  3892  000FEC  0EFF               	movlw	high (STR_25+7)
  3893  000FEE  6E14               	movwf	strcpy@from+1,c
  3894  000FF0  EC4C  F023         	call	_strcpy	;wreg free
  3895  000FF4  D000               	goto	l9885
  3896  000FF6                     l9885:
  3897                           
  3898                           ;Main_Screen.c: 188: }
  3899                           ;Main_Screen.c: 191: DC_Txt[0] = duty_cycle/100 + '0';
  3900  000FF6  C067  F017         	movff	_duty_cycle,___awdiv@dividend
  3901  000FFA  6A18               	clrf	___awdiv@dividend+1,c
  3902  000FFC  0E00               	movlw	0
  3903  000FFE  6E1A               	movwf	___awdiv@divisor+1,c
  3904  001000  0E64               	movlw	100
  3905  001002  6E19               	movwf	___awdiv@divisor,c
  3906  001004  EC61  F01D         	call	___awdiv	;wreg free
  3907  001008  5017               	movf	?___awdiv,w,c
  3908  00100A  0F30               	addlw	48
  3909  00100C  0100               	movlb	0	; () banked
  3910  00100E  6FBE               	movwf	_DC_Txt& (0+255),b
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;Main_Screen.c: 192: DC_Txt[1] = duty_cycle/10 + '0';
  3914  001010  C067  F017         	movff	_duty_cycle,___awdiv@dividend
  3915  001014  6A18               	clrf	___awdiv@dividend+1,c
  3916  001016  0E00               	movlw	0
  3917  001018  6E1A               	movwf	___awdiv@divisor+1,c
  3918  00101A  0E0A               	movlw	10
  3919  00101C  6E19               	movwf	___awdiv@divisor,c
  3920  00101E  EC61  F01D         	call	___awdiv	;wreg free
  3921  001022  5017               	movf	?___awdiv,w,c
  3922  001024  0F30               	addlw	48
  3923  001026  0100               	movlb	0	; () banked
  3924  001028  6FBF               	movwf	(_DC_Txt+1)& (0+255),b
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;Main_Screen.c: 193: DC_Txt[2] = duty_cycle%10 + '0';
  3928  00102A  C067  F03D         	movff	_duty_cycle,___awmod@dividend
  3929  00102E  6A3E               	clrf	___awmod@dividend+1,c
  3930  001030  0E00               	movlw	0
  3931  001032  6E40               	movwf	___awmod@divisor+1,c
  3932  001034  0E0A               	movlw	10
  3933  001036  6E3F               	movwf	___awmod@divisor,c
  3934  001038  EC90  F01F         	call	___awmod	;wreg free
  3935  00103C  503D               	movf	?___awmod,w,c
  3936  00103E  0F30               	addlw	48
  3937  001040  0100               	movlb	0	; () banked
  3938  001042  6FC0               	movwf	(_DC_Txt+2)& (0+255),b
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;Main_Screen.c: 195: Volt_Txt[0] = ((int) volt ) + '0';
  3942  001044  C0D6  F02E         	movff	_volt,___fttol@f1
  3943  001048  C0D7  F02F         	movff	_volt+1,___fttol@f1+1
  3944  00104C  C0D8  F030         	movff	_volt+2,___fttol@f1+2
  3945  001050  EC8E  F019         	call	___fttol	;wreg free
  3946  001054  502E               	movf	?___fttol,w,c
  3947  001056  0F30               	addlw	48
  3948  001058  0101               	movlb	1	; () banked
  3949  00105A  6F73               	movwf	_Volt_Txt& (0+255),b
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;Main_Screen.c: 196: Volt_Txt[2] = (( (int) (volt*10 ) )%10) + '0';
  3953  00105C  0E00               	movlw	0
  3954  00105E  6E22               	movwf	___ftmul@f2,c
  3955  001060  0E20               	movlw	32
  3956  001062  6E23               	movwf	___ftmul@f2+1,c
  3957  001064  0E41               	movlw	65
  3958  001066  6E24               	movwf	___ftmul@f2+2,c
  3959  001068  C0D6  F01F         	movff	_volt,___ftmul@f1
  3960  00106C  C0D7  F020         	movff	_volt+1,___ftmul@f1+1
  3961  001070  C0D8  F021         	movff	_volt+2,___ftmul@f1+2
  3962  001074  EC24  F018         	call	___ftmul	;wreg free
  3963  001078  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3964  00107C  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3965  001080  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3966  001084  EC8E  F019         	call	___fttol	;wreg free
  3967  001088  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3968  00108C  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3969  001090  0E00               	movlw	0
  3970  001092  6E40               	movwf	___awmod@divisor+1,c
  3971  001094  0E0A               	movlw	10
  3972  001096  6E3F               	movwf	___awmod@divisor,c
  3973  001098  EC90  F01F         	call	___awmod	;wreg free
  3974  00109C  503D               	movf	?___awmod,w,c
  3975  00109E  0F30               	addlw	48
  3976  0010A0  0101               	movlb	1	; () banked
  3977  0010A2  6F75               	movwf	(_Volt_Txt+2)& (0+255),b
  3978                           
  3979                           ; BSR set to: 1
  3980                           ;Main_Screen.c: 197: Volt_Txt[3] = (( (int) (volt*100) )%10) + '0';
  3981  0010A4  0E00               	movlw	0
  3982  0010A6  6E22               	movwf	___ftmul@f2,c
  3983  0010A8  0EC8               	movlw	200
  3984  0010AA  6E23               	movwf	___ftmul@f2+1,c
  3985  0010AC  0E42               	movlw	66
  3986  0010AE  6E24               	movwf	___ftmul@f2+2,c
  3987  0010B0  C0D6  F01F         	movff	_volt,___ftmul@f1
  3988  0010B4  C0D7  F020         	movff	_volt+1,___ftmul@f1+1
  3989  0010B8  C0D8  F021         	movff	_volt+2,___ftmul@f1+2
  3990  0010BC  EC24  F018         	call	___ftmul	;wreg free
  3991  0010C0  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3992  0010C4  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3993  0010C8  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3994  0010CC  EC8E  F019         	call	___fttol	;wreg free
  3995  0010D0  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3996  0010D4  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3997  0010D8  0E00               	movlw	0
  3998  0010DA  6E40               	movwf	___awmod@divisor+1,c
  3999  0010DC  0E0A               	movlw	10
  4000  0010DE  6E3F               	movwf	___awmod@divisor,c
  4001  0010E0  EC90  F01F         	call	___awmod	;wreg free
  4002  0010E4  503D               	movf	?___awmod,w,c
  4003  0010E6  0F30               	addlw	48
  4004  0010E8  0101               	movlb	1	; () banked
  4005  0010EA  6F76               	movwf	(_Volt_Txt+3)& (0+255),b
  4006                           
  4007                           ; BSR set to: 1
  4008                           ;Main_Screen.c: 199: RPM_Txt[0] = rpm/1000 + '0';
  4009  0010EC  C05F  F017         	movff	_rpm,___awdiv@dividend
  4010  0010F0  C060  F018         	movff	_rpm+1,___awdiv@dividend+1
  4011  0010F4  0E03               	movlw	3
  4012  0010F6  6E1A               	movwf	___awdiv@divisor+1,c
  4013  0010F8  0EE8               	movlw	232
  4014  0010FA  6E19               	movwf	___awdiv@divisor,c
  4015  0010FC  EC61  F01D         	call	___awdiv	;wreg free
  4016  001100  5017               	movf	?___awdiv,w,c
  4017  001102  0F30               	addlw	48
  4018  001104  0101               	movlb	1	; () banked
  4019  001106  6F7E               	movwf	_RPM_Txt& (0+255),b
  4020                           
  4021                           ; BSR set to: 1
  4022                           ;Main_Screen.c: 200: RPM_Txt[1] = rpm/100 + '0';
  4023  001108  C05F  F017         	movff	_rpm,___awdiv@dividend
  4024  00110C  C060  F018         	movff	_rpm+1,___awdiv@dividend+1
  4025  001110  0E00               	movlw	0
  4026  001112  6E1A               	movwf	___awdiv@divisor+1,c
  4027  001114  0E64               	movlw	100
  4028  001116  6E19               	movwf	___awdiv@divisor,c
  4029  001118  EC61  F01D         	call	___awdiv	;wreg free
  4030  00111C  5017               	movf	?___awdiv,w,c
  4031  00111E  0F30               	addlw	48
  4032  001120  0101               	movlb	1	; () banked
  4033  001122  6F7F               	movwf	(_RPM_Txt+1)& (0+255),b
  4034                           
  4035                           ; BSR set to: 1
  4036                           ;Main_Screen.c: 201: RPM_Txt[2] = rpm/10 + '0';
  4037  001124  C05F  F017         	movff	_rpm,___awdiv@dividend
  4038  001128  C060  F018         	movff	_rpm+1,___awdiv@dividend+1
  4039  00112C  0E00               	movlw	0
  4040  00112E  6E1A               	movwf	___awdiv@divisor+1,c
  4041  001130  0E0A               	movlw	10
  4042  001132  6E19               	movwf	___awdiv@divisor,c
  4043  001134  EC61  F01D         	call	___awdiv	;wreg free
  4044  001138  5017               	movf	?___awdiv,w,c
  4045  00113A  0F30               	addlw	48
  4046  00113C  0101               	movlb	1	; () banked
  4047  00113E  6F80               	movwf	(_RPM_Txt+2)& (0+255),b
  4048                           
  4049                           ; BSR set to: 1
  4050                           ;Main_Screen.c: 202: RPM_Txt[3] = rpm%10 + '0';
  4051  001140  C05F  F03D         	movff	_rpm,___awmod@dividend
  4052  001144  C060  F03E         	movff	_rpm+1,___awmod@dividend+1
  4053  001148  0E00               	movlw	0
  4054  00114A  6E40               	movwf	___awmod@divisor+1,c
  4055  00114C  0E0A               	movlw	10
  4056  00114E  6E3F               	movwf	___awmod@divisor,c
  4057  001150  EC90  F01F         	call	___awmod	;wreg free
  4058  001154  503D               	movf	?___awmod,w,c
  4059  001156  0F30               	addlw	48
  4060  001158  0101               	movlb	1	; () banked
  4061  00115A  6F81               	movwf	(_RPM_Txt+3)& (0+255),b
  4062                           
  4063                           ; BSR set to: 1
  4064                           ;Main_Screen.c: 204: drawtext(1, 23, tempC_Txt , 0xFFE0 , 0x0000 , 2);
  4065  00115C  0E17               	movlw	23
  4066  00115E  6E39               	movwf	drawtext@y,c
  4067  001160  0ED2               	movlw	low _tempC_Txt
  4068  001162  6E3A               	movwf	drawtext@_text,c
  4069  001164  0E00               	movlw	high _tempC_Txt
  4070  001166  6E3B               	movwf	drawtext@_text+1,c
  4071  001168  0EFF               	movlw	255
  4072  00116A  6E3D               	movwf	drawtext@color+1,c
  4073  00116C  0EE0               	movlw	224
  4074  00116E  6E3C               	movwf	drawtext@color,c
  4075  001170  0E00               	movlw	0
  4076  001172  6E3F               	movwf	drawtext@bg+1,c
  4077  001174  0E00               	movlw	0
  4078  001176  6E3E               	movwf	drawtext@bg,c
  4079  001178  0E02               	movlw	2
  4080  00117A  6E40               	movwf	drawtext@size,c
  4081  00117C  0E01               	movlw	1
  4082  00117E  EC01  F01A         	call	_drawtext
  4083                           
  4084                           ;Main_Screen.c: 205: drawtext(60, 23, tempF_Txt , 0xFFE0 , 0x0000 , 2);
  4085  001182  0E17               	movlw	23
  4086  001184  6E39               	movwf	drawtext@y,c
  4087  001186  0EB9               	movlw	low _tempF_Txt
  4088  001188  6E3A               	movwf	drawtext@_text,c
  4089  00118A  0E00               	movlw	high _tempF_Txt
  4090  00118C  6E3B               	movwf	drawtext@_text+1,c
  4091  00118E  0EFF               	movlw	255
  4092  001190  6E3D               	movwf	drawtext@color+1,c
  4093  001192  0EE0               	movlw	224
  4094  001194  6E3C               	movwf	drawtext@color,c
  4095  001196  0E00               	movlw	0
  4096  001198  6E3F               	movwf	drawtext@bg+1,c
  4097  00119A  0E00               	movlw	0
  4098  00119C  6E3E               	movwf	drawtext@bg,c
  4099  00119E  0E02               	movlw	2
  4100  0011A0  6E40               	movwf	drawtext@size,c
  4101  0011A2  0E3C               	movlw	60
  4102  0011A4  EC01  F01A         	call	_drawtext
  4103                           
  4104                           ;Main_Screen.c: 206: drawtext(15 , 52 , time_Txt , 0x07FF , 0x0000 , 2);
  4105  0011A8  0E34               	movlw	52
  4106  0011AA  6E39               	movwf	drawtext@y,c
  4107  0011AC  0E6A               	movlw	low _time_Txt
  4108  0011AE  6E3A               	movwf	drawtext@_text,c
  4109  0011B0  0E01               	movlw	high _time_Txt
  4110  0011B2  6E3B               	movwf	drawtext@_text+1,c
  4111  0011B4  0E07               	movlw	7
  4112  0011B6  6E3D               	movwf	drawtext@color+1,c
  4113  0011B8  683C               	setf	drawtext@color,c
  4114  0011BA  0E00               	movlw	0
  4115  0011BC  6E3F               	movwf	drawtext@bg+1,c
  4116  0011BE  0E00               	movlw	0
  4117  0011C0  6E3E               	movwf	drawtext@bg,c
  4118  0011C2  0E02               	movlw	2
  4119  0011C4  6E40               	movwf	drawtext@size,c
  4120  0011C6  0E0F               	movlw	15
  4121  0011C8  EC01  F01A         	call	_drawtext
  4122                           
  4123                           ;Main_Screen.c: 207: drawtext(15 , 82 , date_Txt , 0x07E0 , 0x0000 , 2);
  4124  0011CC  0E52               	movlw	82
  4125  0011CE  6E39               	movwf	drawtext@y,c
  4126  0011D0  0E4F               	movlw	low _date_Txt
  4127  0011D2  6E3A               	movwf	drawtext@_text,c
  4128  0011D4  0E01               	movlw	high _date_Txt
  4129  0011D6  6E3B               	movwf	drawtext@_text+1,c
  4130  0011D8  0E07               	movlw	7
  4131  0011DA  6E3D               	movwf	drawtext@color+1,c
  4132  0011DC  0EE0               	movlw	224
  4133  0011DE  6E3C               	movwf	drawtext@color,c
  4134  0011E0  0E00               	movlw	0
  4135  0011E2  6E3F               	movwf	drawtext@bg+1,c
  4136  0011E4  0E00               	movlw	0
  4137  0011E6  6E3E               	movwf	drawtext@bg,c
  4138  0011E8  0E02               	movlw	2
  4139  0011EA  6E40               	movwf	drawtext@size,c
  4140  0011EC  0E0F               	movlw	15
  4141  0011EE  EC01  F01A         	call	_drawtext
  4142                           
  4143                           ;Main_Screen.c: 208: drawtext(25 , 110 , Fan_Timer_Mode_Txt , 0x07FF , 0x0000 , 1);
  4144  0011F2  0E6E               	movlw	110
  4145  0011F4  6E39               	movwf	drawtext@y,c
  4146  0011F6  0ECA               	movlw	low _Fan_Timer_Mode_Txt
  4147  0011F8  6E3A               	movwf	drawtext@_text,c
  4148  0011FA  0E00               	movlw	high _Fan_Timer_Mode_Txt
  4149  0011FC  6E3B               	movwf	drawtext@_text+1,c
  4150  0011FE  0E07               	movlw	7
  4151  001200  6E3D               	movwf	drawtext@color+1,c
  4152  001202  683C               	setf	drawtext@color,c
  4153  001204  0E00               	movlw	0
  4154  001206  6E3F               	movwf	drawtext@bg+1,c
  4155  001208  0E00               	movlw	0
  4156  00120A  6E3E               	movwf	drawtext@bg,c
  4157  00120C  0E01               	movlw	1
  4158  00120E  6E40               	movwf	drawtext@size,c
  4159  001210  0E19               	movlw	25
  4160  001212  EC01  F01A         	call	_drawtext
  4161                           
  4162                           ;Main_Screen.c: 209: drawtext(90 , 110 , Fan_Timer_Txt , 0x07FF , 0x0000 , 1);
  4163  001216  0E6E               	movlw	110
  4164  001218  6E39               	movwf	drawtext@y,c
  4165  00121A  0ECE               	movlw	low _Fan_Timer_Txt
  4166  00121C  6E3A               	movwf	drawtext@_text,c
  4167  00121E  0E00               	movlw	high _Fan_Timer_Txt
  4168  001220  6E3B               	movwf	drawtext@_text+1,c
  4169  001222  0E07               	movlw	7
  4170  001224  6E3D               	movwf	drawtext@color+1,c
  4171  001226  683C               	setf	drawtext@color,c
  4172  001228  0E00               	movlw	0
  4173  00122A  6E3F               	movwf	drawtext@bg+1,c
  4174  00122C  0E00               	movlw	0
  4175  00122E  6E3E               	movwf	drawtext@bg,c
  4176  001230  0E01               	movlw	1
  4177  001232  6E40               	movwf	drawtext@size,c
  4178  001234  0E5A               	movlw	90
  4179  001236  EC01  F01A         	call	_drawtext
  4180                           
  4181                           ;Main_Screen.c: 210: drawtext(35, 130 ,Fan_Set_Temp_Txt, 0xF800, 0x0000, 1);
  4182  00123A  0E82               	movlw	130
  4183  00123C  6E39               	movwf	drawtext@y,c
  4184  00123E  0EC6               	movlw	low _Fan_Set_Temp_Txt
  4185  001240  6E3A               	movwf	drawtext@_text,c
  4186  001242  0E00               	movlw	high _Fan_Set_Temp_Txt
  4187  001244  6E3B               	movwf	drawtext@_text+1,c
  4188  001246  0EF8               	movlw	248
  4189  001248  6E3D               	movwf	drawtext@color+1,c
  4190  00124A  0E00               	movlw	0
  4191  00124C  6E3C               	movwf	drawtext@color,c
  4192  00124E  0E00               	movlw	0
  4193  001250  6E3F               	movwf	drawtext@bg+1,c
  4194  001252  0E00               	movlw	0
  4195  001254  6E3E               	movwf	drawtext@bg,c
  4196  001256  0E01               	movlw	1
  4197  001258  6E40               	movwf	drawtext@size,c
  4198  00125A  0E23               	movlw	35
  4199  00125C  EC01  F01A         	call	_drawtext
  4200                           
  4201                           ;Main_Screen.c: 211: drawtext(75, 130, Fan_Mode_Txt, 0xF800 , 0x0000 , 1);
  4202  001260  0E82               	movlw	130
  4203  001262  6E39               	movwf	drawtext@y,c
  4204  001264  0E79               	movlw	low _Fan_Mode_Txt
  4205  001266  6E3A               	movwf	drawtext@_text,c
  4206  001268  0E01               	movlw	high _Fan_Mode_Txt
  4207  00126A  6E3B               	movwf	drawtext@_text+1,c
  4208  00126C  0EF8               	movlw	248
  4209  00126E  6E3D               	movwf	drawtext@color+1,c
  4210  001270  0E00               	movlw	0
  4211  001272  6E3C               	movwf	drawtext@color,c
  4212  001274  0E00               	movlw	0
  4213  001276  6E3F               	movwf	drawtext@bg+1,c
  4214  001278  0E00               	movlw	0
  4215  00127A  6E3E               	movwf	drawtext@bg,c
  4216  00127C  0E01               	movlw	1
  4217  00127E  6E40               	movwf	drawtext@size,c
  4218  001280  0E4B               	movlw	75
  4219  001282  EC01  F01A         	call	_drawtext
  4220                           
  4221                           ;Main_Screen.c: 212: drawtext(105, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4222  001286  0E82               	movlw	130
  4223  001288  6E39               	movwf	drawtext@y,c
  4224  00128A  0EC2               	movlw	low _Fan_SW_Txt
  4225  00128C  6E3A               	movwf	drawtext@_text,c
  4226  00128E  0E00               	movlw	high _Fan_SW_Txt
  4227  001290  6E3B               	movwf	drawtext@_text+1,c
  4228  001292  0EF8               	movlw	248
  4229  001294  6E3D               	movwf	drawtext@color+1,c
  4230  001296  0E00               	movlw	0
  4231  001298  6E3C               	movwf	drawtext@color,c
  4232  00129A  0E00               	movlw	0
  4233  00129C  6E3F               	movwf	drawtext@bg+1,c
  4234  00129E  0E00               	movlw	0
  4235  0012A0  6E3E               	movwf	drawtext@bg,c
  4236  0012A2  0E01               	movlw	1
  4237  0012A4  6E40               	movwf	drawtext@size,c
  4238  0012A6  0E69               	movlw	105
  4239  0012A8  EC01  F01A         	call	_drawtext
  4240                           
  4241                           ;Main_Screen.c: 213: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4242  0012AC  0E96               	movlw	150
  4243  0012AE  6E39               	movwf	drawtext@y,c
  4244  0012B0  0EBE               	movlw	low _DC_Txt
  4245  0012B2  6E3A               	movwf	drawtext@_text,c
  4246  0012B4  0E00               	movlw	high _DC_Txt
  4247  0012B6  6E3B               	movwf	drawtext@_text+1,c
  4248  0012B8  0E07               	movlw	7
  4249  0012BA  6E3D               	movwf	drawtext@color+1,c
  4250  0012BC  0EE0               	movlw	224
  4251  0012BE  6E3C               	movwf	drawtext@color,c
  4252  0012C0  0E00               	movlw	0
  4253  0012C2  6E3F               	movwf	drawtext@bg+1,c
  4254  0012C4  0E00               	movlw	0
  4255  0012C6  6E3E               	movwf	drawtext@bg,c
  4256  0012C8  0E01               	movlw	1
  4257  0012CA  6E40               	movwf	drawtext@size,c
  4258  0012CC  0E0A               	movlw	10
  4259  0012CE  EC01  F01A         	call	_drawtext
  4260                           
  4261                           ;Main_Screen.c: 215: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4262  0012D2  0E96               	movlw	150
  4263  0012D4  6E39               	movwf	drawtext@y,c
  4264  0012D6  0E73               	movlw	low _Volt_Txt
  4265  0012D8  6E3A               	movwf	drawtext@_text,c
  4266  0012DA  0E01               	movlw	high _Volt_Txt
  4267  0012DC  6E3B               	movwf	drawtext@_text+1,c
  4268  0012DE  0E07               	movlw	7
  4269  0012E0  6E3D               	movwf	drawtext@color+1,c
  4270  0012E2  0EE0               	movlw	224
  4271  0012E4  6E3C               	movwf	drawtext@color,c
  4272  0012E6  0E00               	movlw	0
  4273  0012E8  6E3F               	movwf	drawtext@bg+1,c
  4274  0012EA  0E00               	movlw	0
  4275  0012EC  6E3E               	movwf	drawtext@bg,c
  4276  0012EE  0E01               	movlw	1
  4277  0012F0  6E40               	movwf	drawtext@size,c
  4278  0012F2  0E32               	movlw	50
  4279  0012F4  EC01  F01A         	call	_drawtext
  4280                           
  4281                           ;Main_Screen.c: 216: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4282  0012F8  0E96               	movlw	150
  4283  0012FA  6E39               	movwf	drawtext@y,c
  4284  0012FC  0E7E               	movlw	low _RPM_Txt
  4285  0012FE  6E3A               	movwf	drawtext@_text,c
  4286  001300  0E01               	movlw	high _RPM_Txt
  4287  001302  6E3B               	movwf	drawtext@_text+1,c
  4288  001304  0E07               	movlw	7
  4289  001306  6E3D               	movwf	drawtext@color+1,c
  4290  001308  0EE0               	movlw	224
  4291  00130A  6E3C               	movwf	drawtext@color,c
  4292  00130C  0E00               	movlw	0
  4293  00130E  6E3F               	movwf	drawtext@bg+1,c
  4294  001310  0E00               	movlw	0
  4295  001312  6E3E               	movwf	drawtext@bg,c
  4296  001314  0E01               	movlw	1
  4297  001316  6E40               	movwf	drawtext@size,c
  4298  001318  0E5D               	movlw	93
  4299  00131A  EC01  F01A         	call	_drawtext
  4300  00131E  D000               	goto	l956
  4301  001320                     l956:
  4302  001320  0012               	return		;funcret
  4303  001322                     __end_of_Update_Screen:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           postdec1	equ	0xFE5
  4312                           fsr1l	equ	0xFE1
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _Toggle_Fan *****************
  4316 ;; Defined at:
  4317 ;;		line 79 in file "Fan_Support.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;		None               void
  4324 ;; Registers used:
  4325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;Total ram usage:        0 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    7
  4338 ;; This function calls:
  4339 ;;		_Turn_Off_Fan
  4340 ;;		_Turn_On_Fan
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text2
  4347  004A8E                     __ptext2:
  4348                           	opt stack 0
  4349  004A8E                     _Toggle_Fan:
  4350                           	opt stack 23
  4351                           
  4352                           ;Fan_Support.c: 83: if (FAN == 1)
  4353                           
  4354                           ;incstack = 0
  4355  004A8E  0100               	movlb	0	; () banked
  4356  004A90  05E1               	decf	_FAN& (0+255),w,b
  4357  004A92  A4D8               	btfss	status,2,c
  4358  004A94  D003               	goto	l9709
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;Fan_Support.c: 84: Turn_Off_Fan();
  4362  004A96  ECF4  F024         	call	_Turn_Off_Fan	;wreg free
  4363  004A9A  D003               	goto	l55
  4364  004A9C                     l9709:
  4365                           
  4366                           ;Fan_Support.c: 85: else
  4367                           ;Fan_Support.c: 86: Turn_On_Fan();
  4368  004A9C  EC85  F024         	call	_Turn_On_Fan	;wreg free
  4369  004AA0  D000               	goto	l55
  4370  004AA2                     l55:
  4371  004AA2  0012               	return		;funcret
  4372  004AA4                     __end_of_Toggle_Fan:
  4373                           	opt stack 0
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           postdec1	equ	0xFE5
  4381                           fsr1l	equ	0xFE1
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _Turn_On_Fan *****************
  4385 ;; Defined at:
  4386 ;;		line 98 in file "Fan_Support.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;		None               void
  4393 ;; Registers used:
  4394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;Total ram usage:        0 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    6
  4407 ;; This function calls:
  4408 ;;		_do_update_pwm
  4409 ;;		_printf
  4410 ;; This function is called by:
  4411 ;;		_Toggle_Fan
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text3
  4416  00490A                     __ptext3:
  4417                           	opt stack 0
  4418  00490A                     _Turn_On_Fan:
  4419                           	opt stack 23
  4420                           
  4421                           ;Fan_Support.c: 100: printf ("Fan is turned on\r\n");
  4422                           
  4423                           ;incstack = 0
  4424  00490A  0E48               	movlw	low STR_2
  4425  00490C  0100               	movlb	0	; () banked
  4426  00490E  6F80               	movwf	printf@f& (0+255),b
  4427  004910  0EFF               	movlw	high STR_2
  4428  004912  0100               	movlb	0	; () banked
  4429  004914  6F81               	movwf	(printf@f+1)& (0+255),b
  4430  004916  EC0E  F000         	call	_printf	;wreg free
  4431                           
  4432                           ;Fan_Support.c: 102: FAN = 0;
  4433  00491A  0E00               	movlw	0
  4434  00491C  0100               	movlb	0	; () banked
  4435  00491E  6FE1               	movwf	_FAN& (0+255),b
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;Fan_Support.c: 103: PORTDbits.RD1 = 0;
  4439  004920  9283               	bcf	3971,1,c	;volatile
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;Fan_Support.c: 104: PORTDbits.RD2 = 0;
  4443  004922  9483               	bcf	3971,2,c	;volatile
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;Fan_Support.c: 105: do_update_pwm(duty_cycle);
  4447  004924  5067               	movf	_duty_cycle,w,c
  4448  004926  EC0F  F01C         	call	_do_update_pwm
  4449  00492A  0012               	return		;funcret
  4450  00492C                     __end_of_Turn_On_Fan:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           postinc0	equ	0xFEE
  4457                           wreg	equ	0xFE8
  4458                           postdec1	equ	0xFE5
  4459                           fsr1l	equ	0xFE1
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function _Setup_Fan_Temp *****************
  4463 ;; Defined at:
  4464 ;;		line 36 in file "Setup_Fan_Temp.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;		None               void
  4471 ;; Registers used:
  4472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;Total ram usage:        0 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:   11
  4485 ;; This function calls:
  4486 ;;		_DS1621_Read_Temp
  4487 ;;		_DS3231_Read_Time
  4488 ;;		_Decrease_Fan_Temp
  4489 ;;		_Do_Beep_Bad
  4490 ;;		_Do_Beep_Good
  4491 ;;		_Do_Save_New_Fan_Temp
  4492 ;;		_Increase_Fan_Temp
  4493 ;;		_Initialize_Setup_Fan_Screen
  4494 ;;		_Read_Volt
  4495 ;;		_Set_D1_RGB
  4496 ;;		_Set_D2_RGB
  4497 ;;		_Update_Setup_Fan_Screen
  4498 ;;		___awdiv
  4499 ;;		___ftge
  4500 ;;		___wmul
  4501 ;;		_check_for_button_input
  4502 ;;		_get_RPM
  4503 ;;		_printf
  4504 ;; This function is called by:
  4505 ;;		_main
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text4
  4510  0021F2                     __ptext4:
  4511                           	opt stack 0
  4512  0021F2                     _Setup_Fan_Temp:
  4513                           	opt stack 19
  4514                           
  4515                           ;Setup_Fan_Temp.c: 39: In_Fan_Temp_Setup = 1;
  4516                           
  4517                           ;incstack = 0
  4518  0021F2  0E01               	movlw	1
  4519  0021F4  0100               	movlb	0	; () banked
  4520  0021F6  6FE7               	movwf	_In_Fan_Temp_Setup& (0+255),b
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;Setup_Fan_Temp.c: 40: setup_fan_set_temp = fan_set_temp;
  4524  0021F8  C0B6  F06C         	movff	_fan_set_temp,_setup_fan_set_temp
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;Setup_Fan_Temp.c: 41: Initialize_Setup_Fan_Screen();
  4528  0021FC  EC19  F019         	call	_Initialize_Setup_Fan_Screen	;wreg free
  4529                           
  4530                           ;Setup_Fan_Temp.c: 42: Update_Setup_Fan_Screen();
  4531  002200  EC4F  F01F         	call	_Update_Setup_Fan_Screen	;wreg free
  4532                           
  4533                           ;Setup_Fan_Temp.c: 44: while (In_Fan_Temp_Setup == 1)
  4534  002204  D0E2               	goto	l10085
  4535  002206                     l10027:
  4536                           
  4537                           ;Setup_Fan_Temp.c: 45: {
  4538                           ;Setup_Fan_Temp.c: 46: DS3231_Read_Time();
  4539  002206  ECAE  F020         	call	_DS3231_Read_Time	;wreg free
  4540                           
  4541                           ;Setup_Fan_Temp.c: 48: if(tempSecond != second)
  4542  00220A  506B               	movf	_second,w,c
  4543  00220C  0100               	movlb	0	; () banked
  4544  00220E  19B7               	xorwf	_tempSecond& (0+255),w,b
  4545  002210  B4D8               	btfsc	status,2,c
  4546  002212  D0A1               	goto	l10055
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;Setup_Fan_Temp.c: 49: {
  4550                           ;Setup_Fan_Temp.c: 50: tempSecond = second;
  4551  002214  C06B  F0B7         	movff	_second,_tempSecond
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;Setup_Fan_Temp.c: 51: rpm = get_RPM();
  4555  002218  EC75  F022         	call	_get_RPM	;wreg free
  4556  00221C  C01F  F05F         	movff	?_get_RPM,_rpm
  4557  002220  C020  F060         	movff	?_get_RPM+1,_rpm+1
  4558                           
  4559                           ;Setup_Fan_Temp.c: 53: volt = Read_Volt(0);
  4560  002224  0E00               	movlw	0
  4561  002226  EC41  F020         	call	_Read_Volt
  4562  00222A  C03D  F0D6         	movff	?_Read_Volt,_volt
  4563  00222E  C03E  F0D7         	movff	?_Read_Volt+1,_volt+1
  4564  002232  C03F  F0D8         	movff	?_Read_Volt+2,_volt+2
  4565                           
  4566                           ;Setup_Fan_Temp.c: 54: if (volt > 3.000) light_flag = 1;
  4567  002236  0E00               	movlw	0
  4568  002238  6E11               	movwf	___ftge@ff1,c
  4569  00223A  0E40               	movlw	64
  4570  00223C  6E12               	movwf	___ftge@ff1+1,c
  4571  00223E  0E40               	movlw	64
  4572  002240  6E13               	movwf	___ftge@ff1+2,c
  4573  002242  C0D6  F014         	movff	_volt,___ftge@ff2
  4574  002246  C0D7  F015         	movff	_volt+1,___ftge@ff2+1
  4575  00224A  C0D8  F016         	movff	_volt+2,___ftge@ff2+2
  4576  00224E  ECAC  F01D         	call	___ftge	;wreg free
  4577  002252  B0D8               	btfsc	status,0,c
  4578  002254  D004               	goto	l10039
  4579  002256  0E01               	movlw	1
  4580  002258  0100               	movlb	0	; () banked
  4581  00225A  6FF1               	movwf	_light_flag& (0+255),b
  4582  00225C  D000               	goto	l10039
  4583  00225E                     l10039:
  4584                           
  4585                           ;Setup_Fan_Temp.c: 55: tempC = DS1621_Read_Temp();
  4586  00225E  EC2E  F023         	call	_DS1621_Read_Temp	;wreg free
  4587  002262  5014               	movf	?_DS1621_Read_Temp,w,c
  4588  002264  6E6D               	movwf	_tempC,c
  4589                           
  4590                           ;Setup_Fan_Temp.c: 56: tempF = (tempC * 9 / 5) + 32;
  4591  002266  506D               	movf	_tempC,w,c
  4592  002268  6E11               	movwf	___wmul@multiplier,c
  4593  00226A  6A12               	clrf	___wmul@multiplier+1,c
  4594  00226C  BE11               	btfsc	___wmul@multiplier,7,c
  4595  00226E  0612               	decf	___wmul@multiplier+1,f,c
  4596  002270  0E00               	movlw	0
  4597  002272  6E14               	movwf	___wmul@multiplicand+1,c
  4598  002274  0E09               	movlw	9
  4599  002276  6E13               	movwf	___wmul@multiplicand,c
  4600  002278  EC01  F024         	call	___wmul	;wreg free
  4601  00227C  C011  F017         	movff	?___wmul,___awdiv@dividend
  4602  002280  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  4603  002284  0E00               	movlw	0
  4604  002286  6E1A               	movwf	___awdiv@divisor+1,c
  4605  002288  0E05               	movlw	5
  4606  00228A  6E19               	movwf	___awdiv@divisor,c
  4607  00228C  EC61  F01D         	call	___awdiv	;wreg free
  4608  002290  5017               	movf	?___awdiv,w,c
  4609  002292  0F20               	addlw	32
  4610  002294  6E6E               	movwf	_tempF,c
  4611                           
  4612                           ;Setup_Fan_Temp.c: 57: Set_D1_RGB(duty_cycle);
  4613  002296  5067               	movf	_duty_cycle,w,c
  4614  002298  ECE5  F021         	call	_Set_D1_RGB
  4615                           
  4616                           ;Setup_Fan_Temp.c: 58: Set_D2_RGB(rpm);
  4617  00229C  C05F  F01F         	movff	_rpm,Set_D2_RGB@rpm
  4618  0022A0  C060  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  4619  0022A4  EC96  F021         	call	_Set_D2_RGB	;wreg free
  4620                           
  4621                           ;Setup_Fan_Temp.c: 60: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,
      +                          day,year);
  4622  0022A8  0E75               	movlw	low STR_4
  4623  0022AA  0100               	movlb	0	; () banked
  4624  0022AC  6F80               	movwf	printf@f& (0+255),b
  4625  0022AE  0EFE               	movlw	high STR_4
  4626  0022B0  0100               	movlb	0	; () banked
  4627  0022B2  6F81               	movwf	(printf@f+1)& (0+255),b
  4628  0022B4  C068  F082         	movff	_hour,?_printf+2
  4629  0022B8  0100               	movlb	0	; () banked
  4630  0022BA  6B83               	clrf	(?_printf+3)& (0+255),b
  4631  0022BC  C069  F084         	movff	_minute,?_printf+4
  4632  0022C0  0100               	movlb	0	; () banked
  4633  0022C2  6B85               	clrf	(?_printf+5)& (0+255),b
  4634  0022C4  C06B  F086         	movff	_second,?_printf+6
  4635  0022C8  0100               	movlb	0	; () banked
  4636  0022CA  6B87               	clrf	(?_printf+7)& (0+255),b
  4637  0022CC  C06A  F088         	movff	_month,?_printf+8
  4638  0022D0  0100               	movlb	0	; () banked
  4639  0022D2  6B89               	clrf	(?_printf+9)& (0+255),b
  4640  0022D4  C066  F08A         	movff	_day,?_printf+10
  4641  0022D8  0100               	movlb	0	; () banked
  4642  0022DA  6B8B               	clrf	(?_printf+11)& (0+255),b
  4643  0022DC  C06F  F08C         	movff	_year,?_printf+12
  4644  0022E0  0100               	movlb	0	; () banked
  4645  0022E2  6B8D               	clrf	(?_printf+13)& (0+255),b
  4646  0022E4  EC0E  F000         	call	_printf	;wreg free
  4647                           
  4648                           ;Setup_Fan_Temp.c: 61: printf (" Temp = %d C = %d F", tempC, tempF);
  4649  0022E8  0E0C               	movlw	low STR_35
  4650  0022EA  0100               	movlb	0	; () banked
  4651  0022EC  6F80               	movwf	printf@f& (0+255),b
  4652  0022EE  0EFF               	movlw	high STR_35
  4653  0022F0  0100               	movlb	0	; () banked
  4654  0022F2  6F81               	movwf	(printf@f+1)& (0+255),b
  4655  0022F4  506D               	movf	_tempC,w,c
  4656  0022F6  0100               	movlb	0	; () banked
  4657  0022F8  6F82               	movwf	(?_printf+2)& (0+255),b
  4658  0022FA  6B83               	clrf	(?_printf+3)& (0+255),b
  4659  0022FC  BF82               	btfsc	(?_printf+2)& (0+255),7,b
  4660  0022FE  0783               	decf	(?_printf+3)& (0+255),f,b
  4661  002300  506E               	movf	_tempF,w,c
  4662  002302  0100               	movlb	0	; () banked
  4663  002304  6F84               	movwf	(?_printf+4)& (0+255),b
  4664  002306  6B85               	clrf	(?_printf+5)& (0+255),b
  4665  002308  BF84               	btfsc	(?_printf+4)& (0+255),7,b
  4666  00230A  0785               	decf	(?_printf+5)& (0+255),f,b
  4667  00230C  EC0E  F000         	call	_printf	;wreg free
  4668                           
  4669                           ;Setup_Fan_Temp.c: 62: printf ("Light Sensor = %f V", volt);
  4670  002310  0E20               	movlw	low STR_6
  4671  002312  0100               	movlb	0	; () banked
  4672  002314  6F80               	movwf	printf@f& (0+255),b
  4673  002316  0EFF               	movlw	high STR_6
  4674  002318  0100               	movlb	0	; () banked
  4675  00231A  6F81               	movwf	(printf@f+1)& (0+255),b
  4676  00231C  C0D6  F082         	movff	_volt,?_printf+2
  4677  002320  C0D7  F083         	movff	_volt+1,?_printf+3
  4678  002324  C0D8  F084         	movff	_volt+2,?_printf+4
  4679  002328  EC0E  F000         	call	_printf	;wreg free
  4680                           
  4681                           ;Setup_Fan_Temp.c: 63: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_
      +                          flag);
  4682  00232C  0E93               	movlw	low STR_7
  4683  00232E  0100               	movlb	0	; () banked
  4684  002330  6F80               	movwf	printf@f& (0+255),b
  4685  002332  0EFE               	movlw	high STR_7
  4686  002334  0100               	movlb	0	; () banked
  4687  002336  6F81               	movwf	(printf@f+1)& (0+255),b
  4688  002338  C05F  F082         	movff	_rpm,?_printf+2
  4689  00233C  C060  F083         	movff	_rpm+1,?_printf+3
  4690  002340  C067  F084         	movff	_duty_cycle,?_printf+4
  4691  002344  0100               	movlb	0	; () banked
  4692  002346  6B85               	clrf	(?_printf+5)& (0+255),b
  4693  002348  C0F1  F086         	movff	_light_flag,?_printf+6
  4694  00234C  0100               	movlb	0	; () banked
  4695  00234E  6B87               	clrf	(?_printf+7)& (0+255),b
  4696  002350  EC0E  F000         	call	_printf	;wreg free
  4697  002354  D000               	goto	l10055
  4698  002356                     l10055:
  4699                           
  4700                           ;Setup_Fan_Temp.c: 64: }
  4701                           ;Setup_Fan_Temp.c: 65: if (check_for_button_input() == 1)
  4702  002356  EC6A  F01C         	call	_check_for_button_input	;wreg free
  4703  00235A  06E8               	decf	wreg,f,c
  4704  00235C  A4D8               	btfss	status,2,c
  4705  00235E  D035               	goto	l10085
  4706                           
  4707                           ;Setup_Fan_Temp.c: 66: {
  4708                           ;Setup_Fan_Temp.c: 67: Nec_ok = 0;
  4709  002360  0E00               	movlw	0
  4710  002362  0100               	movlb	0	; () banked
  4711  002364  6FDA               	movwf	(_Nec_ok+1)& (0+255),b
  4712  002366  0E00               	movlw	0
  4713  002368  6FD9               	movwf	_Nec_ok& (0+255),b
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;Setup_Fan_Temp.c: 68: if (found >= 5 && found <= 8)
  4717  00236A  0E04               	movlw	4
  4718  00236C  0100               	movlb	0	; () banked
  4719  00236E  65F0               	cpfsgt	_found& (0+255),b
  4720  002370  D029               	goto	l10083
  4721                           
  4722                           ; BSR set to: 0
  4723  002372  0E09               	movlw	9
  4724  002374  0100               	movlb	0	; () banked
  4725  002376  61F0               	cpfslt	_found& (0+255),b
  4726  002378  D025               	goto	l10083
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;Setup_Fan_Temp.c: 69: {
  4730                           ;Setup_Fan_Temp.c: 70: Do_Beep_Good();
  4731  00237A  EC02  F025         	call	_Do_Beep_Good	;wreg free
  4732                           
  4733                           ;Setup_Fan_Temp.c: 71: if (found == 5) Do_Save_New_Fan_Temp();
  4734  00237E  0E05               	movlw	5
  4735  002380  0100               	movlb	0	; () banked
  4736  002382  19F0               	xorwf	_found& (0+255),w,b
  4737  002384  A4D8               	btfss	status,2,c
  4738  002386  D003               	goto	l10069
  4739                           
  4740                           ; BSR set to: 0
  4741  002388  EC67  F025         	call	_Do_Save_New_Fan_Temp	;wreg free
  4742  00238C  D000               	goto	l10069
  4743  00238E                     l10069:
  4744                           
  4745                           ;Setup_Fan_Temp.c: 74: if (found == 8)
  4746  00238E  0E08               	movlw	8
  4747  002390  0100               	movlb	0	; () banked
  4748  002392  19F0               	xorwf	_found& (0+255),w,b
  4749  002394  A4D8               	btfss	status,2,c
  4750  002396  D003               	goto	l10073
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;Setup_Fan_Temp.c: 75: Increase_Fan_Temp();
  4754  002398  EC5D  F025         	call	_Increase_Fan_Temp	;wreg free
  4755  00239C  D000               	goto	l10073
  4756  00239E                     l10073:
  4757                           
  4758                           ;Setup_Fan_Temp.c: 76: if (found == 6)
  4759  00239E  0E06               	movlw	6
  4760  0023A0  0100               	movlb	0	; () banked
  4761  0023A2  19F0               	xorwf	_found& (0+255),w,b
  4762  0023A4  A4D8               	btfss	status,2,c
  4763  0023A6  D003               	goto	l10077
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;Setup_Fan_Temp.c: 77: Decrease_Fan_Temp();
  4767  0023A8  EC71  F025         	call	_Decrease_Fan_Temp	;wreg free
  4768  0023AC  D000               	goto	l10077
  4769  0023AE                     l10077:
  4770                           
  4771                           ;Setup_Fan_Temp.c: 78: if (found == 7)
  4772  0023AE  0E07               	movlw	7
  4773  0023B0  0100               	movlb	0	; () banked
  4774  0023B2  19F0               	xorwf	_found& (0+255),w,b
  4775  0023B4  A4D8               	btfss	status,2,c
  4776  0023B6  D003               	goto	l10081
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;Setup_Fan_Temp.c: 79: Increase_Fan_Temp();
  4780  0023B8  EC5D  F025         	call	_Increase_Fan_Temp	;wreg free
  4781  0023BC  D000               	goto	l10081
  4782  0023BE                     l10081:
  4783                           
  4784                           ;Setup_Fan_Temp.c: 83: found = 0xff;
  4785  0023BE  0100               	movlb	0	; () banked
  4786  0023C0  69F0               	setf	_found& (0+255),b
  4787                           
  4788                           ;Setup_Fan_Temp.c: 84: }
  4789  0023C2  D003               	goto	l10085
  4790  0023C4                     l10083:
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;Setup_Fan_Temp.c: 85: else
  4794                           ;Setup_Fan_Temp.c: 86: {
  4795                           ;Setup_Fan_Temp.c: 87: Do_Beep_Bad();
  4796  0023C4  EC10  F025         	call	_Do_Beep_Bad	;wreg free
  4797  0023C8  D000               	goto	l10085
  4798  0023CA                     l10085:
  4799  0023CA  0100               	movlb	0	; () banked
  4800  0023CC  05E7               	decf	_In_Fan_Temp_Setup& (0+255),w,b
  4801  0023CE  B4D8               	btfsc	status,2,c
  4802  0023D0  D71A               	goto	l10027
  4803                           
  4804                           ; BSR set to: 0
  4805                           
  4806                           ; BSR set to: 0
  4807  0023D2  0012               	return		;funcret
  4808  0023D4                     __end_of_Setup_Fan_Temp:
  4809                           	opt stack 0
  4810                           tblptru	equ	0xFF8
  4811                           tblptrh	equ	0xFF7
  4812                           tblptrl	equ	0xFF6
  4813                           tablat	equ	0xFF5
  4814                           postinc0	equ	0xFEE
  4815                           wreg	equ	0xFE8
  4816                           postdec1	equ	0xFE5
  4817                           fsr1l	equ	0xFE1
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _Initialize_Setup_Fan_Screen *****************
  4821 ;; Defined at:
  4822 ;;		line 132 in file "Setup_Fan_Temp.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;		None
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;		None
  4827 ;; Return value:  Size  Location     Type
  4828 ;;		None               void
  4829 ;; Registers used:
  4830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;Total ram usage:        0 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    9
  4843 ;; This function calls:
  4844 ;;		_LCD_Reset
  4845 ;;		_TFT_GreenTab_Initialize
  4846 ;;		_drawtext
  4847 ;;		_fillScreen
  4848 ;;		_strcpy
  4849 ;; This function is called by:
  4850 ;;		_Setup_Fan_Temp
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           	psect	text5
  4855  003232                     __ptext5:
  4856                           	opt stack 0
  4857  003232                     _Initialize_Setup_Fan_Screen:
  4858                           	opt stack 20
  4859                           
  4860                           ;Setup_Fan_Temp.c: 134: LCD_Reset();
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;incstack = 0
  4864  003232  EC99  F025         	call	_LCD_Reset	;wreg free
  4865                           
  4866                           ;Setup_Fan_Temp.c: 135: TFT_GreenTab_Initialize();
  4867  003236  ECEC  F023         	call	_TFT_GreenTab_Initialize	;wreg free
  4868                           
  4869                           ;Setup_Fan_Temp.c: 136: fillScreen(0x0000);
  4870  00323A  0E00               	movlw	0
  4871  00323C  6E25               	movwf	fillScreen@color+1,c
  4872  00323E  0E00               	movlw	0
  4873  003240  6E24               	movwf	fillScreen@color,c
  4874  003242  ECE6  F024         	call	_fillScreen	;wreg free
  4875                           
  4876                           ;Setup_Fan_Temp.c: 137: if (1 == 0)
  4877  003246  D005               	goto	l9545
  4878                           
  4879                           ;Setup_Fan_Temp.c: 138: {
  4880                           ;Setup_Fan_Temp.c: 139: Timing_Txt[12] = 'S';
  4881  003248  0E53               	movlw	83
  4882  00324A  0101               	movlb	1	; () banked
  4883  00324C  6F44               	movwf	(_Timing_Txt+12)& (0+255),b
  4884                           
  4885                           ;Setup_Fan_Temp.c: 140: Timing_Txt[13] = 'P';
  4886  00324E  0E50               	movlw	80
  4887  003250  D004               	goto	L4
  4888  003252                     l9545:
  4889                           
  4890                           ;Setup_Fan_Temp.c: 142: else
  4891                           ;Setup_Fan_Temp.c: 143: {
  4892                           ;Setup_Fan_Temp.c: 144: Timing_Txt[12] = 'F';
  4893  003252  0E46               	movlw	70
  4894  003254  0101               	movlb	1	; () banked
  4895  003256  6F44               	movwf	(_Timing_Txt+12)& (0+255),b
  4896                           
  4897                           ;Setup_Fan_Temp.c: 145: Timing_Txt[13] = 'A';
  4898  003258  0E41               	movlw	65
  4899  00325A                     L4:
  4900  00325A  0101               	movlb	1	; () banked
  4901  00325C  6F45               	movwf	(_Timing_Txt+13)& (0+255),b
  4902                           
  4903                           ; BSR set to: 1
  4904                           ;Setup_Fan_Temp.c: 146: }
  4905                           ;Setup_Fan_Temp.c: 147: Timing_Txt[14] = 24/10 + '0';
  4906  00325E  0E32               	movlw	50
  4907  003260  0101               	movlb	1	; () banked
  4908  003262  6F46               	movwf	(_Timing_Txt+14)& (0+255),b
  4909                           
  4910                           ;Setup_Fan_Temp.c: 148: Timing_Txt[15] = 24%10 + '0';
  4911  003264  0E34               	movlw	52
  4912  003266  0101               	movlb	1	; () banked
  4913  003268  6F47               	movwf	(_Timing_Txt+15)& (0+255),b
  4914                           
  4915                           ;Setup_Fan_Temp.c: 149: Timing_Txt[17] = 3%10 + '0';
  4916  00326A  0E33               	movlw	51
  4917  00326C  0101               	movlb	1	; () banked
  4918  00326E  6F49               	movwf	(_Timing_Txt+17)& (0+255),b
  4919                           
  4920                           ;Setup_Fan_Temp.c: 150: Timing_Txt[19] = 13/10 + '0';
  4921  003270  0E31               	movlw	49
  4922  003272  0101               	movlb	1	; () banked
  4923  003274  6F4B               	movwf	(_Timing_Txt+19)& (0+255),b
  4924                           
  4925                           ;Setup_Fan_Temp.c: 151: Timing_Txt[20] = 13%10 + '0';
  4926  003276  0E33               	movlw	51
  4927  003278  0101               	movlb	1	; () banked
  4928  00327A  6F4C               	movwf	(_Timing_Txt+20)& (0+255),b
  4929                           
  4930                           ; BSR set to: 1
  4931                           ;Setup_Fan_Temp.c: 153: if (SYSTEM_ON == 1)
  4932  00327C  0464               	decf	_SYSTEM_ON,w,c
  4933  00327E  A4D8               	btfss	status,2,c
  4934  003280  D04C               	goto	l1079
  4935                           
  4936                           ; BSR set to: 1
  4937                           ;Setup_Fan_Temp.c: 154: {
  4938                           ;Setup_Fan_Temp.c: 155: drawtext(1 , 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  4939  003282  0E01               	movlw	1
  4940  003284  6E39               	movwf	drawtext@y,c
  4941  003286  0E38               	movlw	low _Timing_Txt
  4942  003288  6E3A               	movwf	drawtext@_text,c
  4943  00328A  0E01               	movlw	high _Timing_Txt
  4944  00328C  6E3B               	movwf	drawtext@_text+1,c
  4945  00328E  0EFF               	movlw	255
  4946  003290  6E3D               	movwf	drawtext@color+1,c
  4947  003292  683C               	setf	drawtext@color,c
  4948  003294  0E00               	movlw	0
  4949  003296  6E3F               	movwf	drawtext@bg+1,c
  4950  003298  0E00               	movlw	0
  4951  00329A  6E3E               	movwf	drawtext@bg,c
  4952  00329C  0E01               	movlw	1
  4953  00329E  6E40               	movwf	drawtext@size,c
  4954  0032A0  0E01               	movlw	1
  4955  0032A2  EC01  F01A         	call	_drawtext
  4956                           
  4957                           ;Setup_Fan_Temp.c: 158: strcpy(txt, " Fan Setup\0");
  4958  0032A6  C061  F011         	movff	_txt,strcpy@to
  4959  0032AA  C062  F012         	movff	_txt+1,strcpy@to+1
  4960  0032AE  0E94               	movlw	low STR_38
  4961  0032B0  6E13               	movwf	strcpy@from,c
  4962  0032B2  0EFF               	movlw	high STR_38
  4963  0032B4  6E14               	movwf	strcpy@from+1,c
  4964  0032B6  EC4C  F023         	call	_strcpy	;wreg free
  4965                           
  4966                           ;Setup_Fan_Temp.c: 159: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  4967  0032BA  0E1A               	movlw	26
  4968  0032BC  6E39               	movwf	drawtext@y,c
  4969  0032BE  C061  F03A         	movff	_txt,drawtext@_text
  4970  0032C2  C062  F03B         	movff	_txt+1,drawtext@_text+1
  4971  0032C6  0EFF               	movlw	255
  4972  0032C8  6E3D               	movwf	drawtext@color+1,c
  4973  0032CA  0EE0               	movlw	224
  4974  0032CC  6E3C               	movwf	drawtext@color,c
  4975  0032CE  0E00               	movlw	0
  4976  0032D0  6E3F               	movwf	drawtext@bg+1,c
  4977  0032D2  0E00               	movlw	0
  4978  0032D4  6E3E               	movwf	drawtext@bg,c
  4979  0032D6  0E02               	movlw	2
  4980  0032D8  6E40               	movwf	drawtext@size,c
  4981  0032DA  0E01               	movlw	1
  4982  0032DC  EC01  F01A         	call	_drawtext
  4983                           
  4984                           ;Setup_Fan_Temp.c: 161: strcpy(txt, "  Set Fan Temp");
  4985  0032E0  C061  F011         	movff	_txt,strcpy@to
  4986  0032E4  C062  F012         	movff	_txt+1,strcpy@to+1
  4987  0032E8  0E6C               	movlw	low STR_39
  4988  0032EA  6E13               	movwf	strcpy@from,c
  4989  0032EC  0EFF               	movlw	high STR_39
  4990  0032EE  6E14               	movwf	strcpy@from+1,c
  4991  0032F0  EC4C  F023         	call	_strcpy	;wreg free
  4992                           
  4993                           ;Setup_Fan_Temp.c: 162: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  4994  0032F4  0E3C               	movlw	60
  4995  0032F6  6E39               	movwf	drawtext@y,c
  4996  0032F8  C061  F03A         	movff	_txt,drawtext@_text
  4997  0032FC  C062  F03B         	movff	_txt+1,drawtext@_text+1
  4998  003300  0E07               	movlw	7
  4999  003302  6E3D               	movwf	drawtext@color+1,c
  5000  003304  683C               	setf	drawtext@color,c
  5001  003306  0E00               	movlw	0
  5002  003308  6E3F               	movwf	drawtext@bg+1,c
  5003  00330A  0E00               	movlw	0
  5004  00330C  6E3E               	movwf	drawtext@bg,c
  5005  00330E  0E01               	movlw	1
  5006  003310  6E40               	movwf	drawtext@size,c
  5007  003312  0E0F               	movlw	15
  5008  003314  EC01  F01A         	call	_drawtext
  5009  003318  D000               	goto	l1079
  5010  00331A                     l1079:
  5011  00331A  0012               	return		;funcret
  5012  00331C                     __end_of_Initialize_Setup_Fan_Screen:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           postinc0	equ	0xFEE
  5019                           wreg	equ	0xFE8
  5020                           postdec1	equ	0xFE5
  5021                           fsr1l	equ	0xFE1
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function _Increase_Fan_Temp *****************
  5025 ;; Defined at:
  5026 ;;		line 93 in file "Setup_Fan_Temp.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;		None               void
  5033 ;; Registers used:
  5034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;Total ram usage:        0 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:   10
  5047 ;; This function calls:
  5048 ;;		_Update_Setup_Fan_Screen
  5049 ;; This function is called by:
  5050 ;;		_Setup_Fan_Temp
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text6
  5055  004ABA                     __ptext6:
  5056                           	opt stack 0
  5057  004ABA                     _Increase_Fan_Temp:
  5058                           	opt stack 19
  5059                           
  5060                           ;Setup_Fan_Temp.c: 97: setup_fan_set_temp++;
  5061                           
  5062                           ;incstack = 0
  5063  004ABA  2A6C               	incf	_setup_fan_set_temp,f,c
  5064                           
  5065                           ;Setup_Fan_Temp.c: 98: if (setup_fan_set_temp > 110)
  5066  004ABC  0E6E               	movlw	110
  5067  004ABE  646C               	cpfsgt	_setup_fan_set_temp,c
  5068  004AC0  D003               	goto	l9571
  5069                           
  5070                           ;Setup_Fan_Temp.c: 99: setup_fan_set_temp = 110;
  5071  004AC2  0E6E               	movlw	110
  5072  004AC4  6E6C               	movwf	_setup_fan_set_temp,c
  5073  004AC6  D000               	goto	l9571
  5074  004AC8                     l9571:
  5075                           
  5076                           ;Setup_Fan_Temp.c: 101: Update_Setup_Fan_Screen();
  5077  004AC8  EC4F  F01F         	call	_Update_Setup_Fan_Screen	;wreg free
  5078  004ACC  0012               	return		;funcret
  5079  004ACE                     __end_of_Increase_Fan_Temp:
  5080                           	opt stack 0
  5081                           tblptru	equ	0xFF8
  5082                           tblptrh	equ	0xFF7
  5083                           tblptrl	equ	0xFF6
  5084                           tablat	equ	0xFF5
  5085                           postinc0	equ	0xFEE
  5086                           wreg	equ	0xFE8
  5087                           postdec1	equ	0xFE5
  5088                           fsr1l	equ	0xFE1
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _Do_Save_New_Fan_Temp *****************
  5092 ;; Defined at:
  5093 ;;		line 116 in file "Setup_Fan_Temp.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;		None
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;		None               void
  5100 ;; Registers used:
  5101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        0 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:   10
  5114 ;; This function calls:
  5115 ;;		_DS3231_Read_Time
  5116 ;;		_Initialize_Screen
  5117 ;; This function is called by:
  5118 ;;		_Setup_Fan_Temp
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text7
  5123  004ACE                     __ptext7:
  5124                           	opt stack 0
  5125  004ACE                     _Do_Save_New_Fan_Temp:
  5126                           	opt stack 19
  5127                           
  5128                           ;Setup_Fan_Temp.c: 118: fan_set_temp = setup_fan_set_temp;
  5129                           
  5130                           ;incstack = 0
  5131  004ACE  C06C  F0B6         	movff	_setup_fan_set_temp,_fan_set_temp
  5132                           
  5133                           ;Setup_Fan_Temp.c: 119: DS3231_Read_Time();
  5134  004AD2  ECAE  F020         	call	_DS3231_Read_Time	;wreg free
  5135                           
  5136                           ;Setup_Fan_Temp.c: 120: Initialize_Screen();
  5137  004AD6  EC81  F00B         	call	_Initialize_Screen	;wreg free
  5138                           
  5139                           ;Setup_Fan_Temp.c: 121: In_Fan_Temp_Setup = 0;
  5140  004ADA  0E00               	movlw	0
  5141  004ADC  0100               	movlb	0	; () banked
  5142  004ADE  6FE7               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5143                           
  5144                           ; BSR set to: 0
  5145  004AE0  0012               	return		;funcret
  5146  004AE2                     __end_of_Do_Save_New_Fan_Temp:
  5147                           	opt stack 0
  5148                           tblptru	equ	0xFF8
  5149                           tblptrh	equ	0xFF7
  5150                           tblptrl	equ	0xFF6
  5151                           tablat	equ	0xFF5
  5152                           postinc0	equ	0xFEE
  5153                           wreg	equ	0xFE8
  5154                           postdec1	equ	0xFE5
  5155                           fsr1l	equ	0xFE1
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _Decrease_Fan_Temp *****************
  5159 ;; Defined at:
  5160 ;;		line 105 in file "Setup_Fan_Temp.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;		None               void
  5167 ;; Registers used:
  5168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:   10
  5181 ;; This function calls:
  5182 ;;		_Update_Setup_Fan_Screen
  5183 ;; This function is called by:
  5184 ;;		_Setup_Fan_Temp
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text8
  5189  004AE2                     __ptext8:
  5190                           	opt stack 0
  5191  004AE2                     _Decrease_Fan_Temp:
  5192                           	opt stack 19
  5193                           
  5194                           ;Setup_Fan_Temp.c: 109: setup_fan_set_temp--;
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;incstack = 0
  5198  004AE2  066C               	decf	_setup_fan_set_temp,f,c
  5199                           
  5200                           ;Setup_Fan_Temp.c: 110: if (setup_fan_set_temp < 50)
  5201  004AE4  0E32               	movlw	50
  5202  004AE6  606C               	cpfslt	_setup_fan_set_temp,c
  5203  004AE8  D003               	goto	l9579
  5204                           
  5205                           ;Setup_Fan_Temp.c: 111: setup_fan_set_temp = 50;
  5206  004AEA  0E32               	movlw	50
  5207  004AEC  6E6C               	movwf	_setup_fan_set_temp,c
  5208  004AEE  D000               	goto	l9579
  5209  004AF0                     l9579:
  5210                           
  5211                           ;Setup_Fan_Temp.c: 113: Update_Setup_Fan_Screen();
  5212  004AF0  EC4F  F01F         	call	_Update_Setup_Fan_Screen	;wreg free
  5213  004AF4  0012               	return		;funcret
  5214  004AF6                     __end_of_Decrease_Fan_Temp:
  5215                           	opt stack 0
  5216                           tblptru	equ	0xFF8
  5217                           tblptrh	equ	0xFF7
  5218                           tblptrl	equ	0xFF6
  5219                           tablat	equ	0xFF5
  5220                           postinc0	equ	0xFEE
  5221                           wreg	equ	0xFE8
  5222                           postdec1	equ	0xFE5
  5223                           fsr1l	equ	0xFE1
  5224                           status	equ	0xFD8
  5225                           
  5226 ;; *************** function _Update_Setup_Fan_Screen *****************
  5227 ;; Defined at:
  5228 ;;		line 166 in file "Setup_Fan_Temp.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;		None
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  dc_char3        1   75[COMRAM] unsigned char 
  5233 ;;  dc_char2        1   74[COMRAM] unsigned char 
  5234 ;;  dc_char1        1   73[COMRAM] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;Total ram usage:        3 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    9
  5251 ;; This function calls:
  5252 ;;		___awdiv
  5253 ;;		___awmod
  5254 ;;		_drawtext
  5255 ;; This function is called by:
  5256 ;;		_Setup_Fan_Temp
  5257 ;;		_Increase_Fan_Temp
  5258 ;;		_Decrease_Fan_Temp
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text9
  5263  003E9E                     __ptext9:
  5264                           	opt stack 0
  5265  003E9E                     _Update_Setup_Fan_Screen:
  5266                           	opt stack 20
  5267                           
  5268                           ;Setup_Fan_Temp.c: 168: char dc_char1 = (setup_fan_set_temp/100);
  5269                           
  5270                           ;incstack = 0
  5271  003E9E  C06C  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5272  003EA2  6A18               	clrf	___awdiv@dividend+1,c
  5273  003EA4  0E00               	movlw	0
  5274  003EA6  6E1A               	movwf	___awdiv@divisor+1,c
  5275  003EA8  0E64               	movlw	100
  5276  003EAA  6E19               	movwf	___awdiv@divisor,c
  5277  003EAC  EC61  F01D         	call	___awdiv	;wreg free
  5278  003EB0  5017               	movf	?___awdiv,w,c
  5279  003EB2  6E4A               	movwf	Update_Setup_Fan_Screen@dc_char1,c
  5280                           
  5281                           ;Setup_Fan_Temp.c: 169: char dc_char2 = (setup_fan_set_temp/10);
  5282  003EB4  C06C  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5283  003EB8  6A18               	clrf	___awdiv@dividend+1,c
  5284  003EBA  0E00               	movlw	0
  5285  003EBC  6E1A               	movwf	___awdiv@divisor+1,c
  5286  003EBE  0E0A               	movlw	10
  5287  003EC0  6E19               	movwf	___awdiv@divisor,c
  5288  003EC2  EC61  F01D         	call	___awdiv	;wreg free
  5289  003EC6  5017               	movf	?___awdiv,w,c
  5290  003EC8  6E4B               	movwf	Update_Setup_Fan_Screen@dc_char2,c
  5291                           
  5292                           ;Setup_Fan_Temp.c: 170: char dc_char3 = (setup_fan_set_temp%10);
  5293  003ECA  C06C  F03D         	movff	_setup_fan_set_temp,___awmod@dividend
  5294  003ECE  6A3E               	clrf	___awmod@dividend+1,c
  5295  003ED0  0E00               	movlw	0
  5296  003ED2  6E40               	movwf	___awmod@divisor+1,c
  5297  003ED4  0E0A               	movlw	10
  5298  003ED6  6E3F               	movwf	___awmod@divisor,c
  5299  003ED8  EC90  F01F         	call	___awmod	;wreg free
  5300  003EDC  503D               	movf	?___awmod,w,c
  5301  003EDE  6E4C               	movwf	Update_Setup_Fan_Screen@dc_char3,c
  5302                           
  5303                           ;Setup_Fan_Temp.c: 173: setup_fan_set_text[0] = dc_char1 + '0';
  5304  003EE0  504A               	movf	Update_Setup_Fan_Screen@dc_char1,w,c
  5305  003EE2  0F30               	addlw	48
  5306  003EE4  0101               	movlb	1	; () banked
  5307  003EE6  6F83               	movwf	_setup_fan_set_text& (0+255),b
  5308                           
  5309                           ; BSR set to: 1
  5310                           ;Setup_Fan_Temp.c: 174: setup_fan_set_text[1] = dc_char2 + '0';
  5311  003EE8  504B               	movf	Update_Setup_Fan_Screen@dc_char2,w,c
  5312  003EEA  0F30               	addlw	48
  5313  003EEC  0101               	movlb	1	; () banked
  5314  003EEE  6F84               	movwf	(_setup_fan_set_text+1)& (0+255),b
  5315                           
  5316                           ; BSR set to: 1
  5317                           ;Setup_Fan_Temp.c: 175: setup_fan_set_text[2] = dc_char3 + '0';
  5318  003EF0  504C               	movf	Update_Setup_Fan_Screen@dc_char3,w,c
  5319  003EF2  0F30               	addlw	48
  5320  003EF4  0101               	movlb	1	; () banked
  5321  003EF6  6F85               	movwf	(_setup_fan_set_text+2)& (0+255),b
  5322                           
  5323                           ; BSR set to: 1
  5324                           ;Setup_Fan_Temp.c: 177: drawtext(40, 74 ,setup_fan_set_text, 0xF800, 0x0000, 2);
  5325  003EF8  0E4A               	movlw	74
  5326  003EFA  6E39               	movwf	drawtext@y,c
  5327  003EFC  0E83               	movlw	low _setup_fan_set_text
  5328  003EFE  6E3A               	movwf	drawtext@_text,c
  5329  003F00  0E01               	movlw	high _setup_fan_set_text
  5330  003F02  6E3B               	movwf	drawtext@_text+1,c
  5331  003F04  0EF8               	movlw	248
  5332  003F06  6E3D               	movwf	drawtext@color+1,c
  5333  003F08  0E00               	movlw	0
  5334  003F0A  6E3C               	movwf	drawtext@color,c
  5335  003F0C  0E00               	movlw	0
  5336  003F0E  6E3F               	movwf	drawtext@bg+1,c
  5337  003F10  0E00               	movlw	0
  5338  003F12  6E3E               	movwf	drawtext@bg,c
  5339  003F14  0E02               	movlw	2
  5340  003F16  6E40               	movwf	drawtext@size,c
  5341  003F18  0E28               	movlw	40
  5342  003F1A  EC01  F01A         	call	_drawtext
  5343  003F1E  0012               	return		;funcret
  5344  003F20                     __end_of_Update_Setup_Fan_Screen:
  5345                           	opt stack 0
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           postinc0	equ	0xFEE
  5351                           wreg	equ	0xFE8
  5352                           postdec1	equ	0xFE5
  5353                           fsr1l	equ	0xFE1
  5354                           status	equ	0xFD8
  5355                           
  5356 ;; *************** function _Increase_Duty_Cycle *****************
  5357 ;; Defined at:
  5358 ;;		line 109 in file "Fan_Support.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;		None               void
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;Total ram usage:        0 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    6
  5379 ;; This function calls:
  5380 ;;		_Do_Beep
  5381 ;;		_do_update_pwm
  5382 ;; This function is called by:
  5383 ;;		_main
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text10
  5388  0046CA                     __ptext10:
  5389                           	opt stack 0
  5390  0046CA                     _Increase_Duty_Cycle:
  5391                           	opt stack 24
  5392                           
  5393                           ;Fan_Support.c: 111: if (FANMODE == 0)
  5394                           
  5395                           ;incstack = 0
  5396  0046CA  0100               	movlb	0	; () banked
  5397  0046CC  51E2               	movf	_FANMODE& (0+255),w,b
  5398  0046CE  A4D8               	btfss	status,2,c
  5399  0046D0  D013               	goto	l67
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;Fan_Support.c: 112: {
  5403                           ;Fan_Support.c: 115: if (duty_cycle == 100)
  5404  0046D2  0E64               	movlw	100
  5405  0046D4  1867               	xorwf	_duty_cycle,w,c
  5406  0046D6  A4D8               	btfss	status,2,c
  5407  0046D8  D008               	goto	l9717
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;Fan_Support.c: 116: {
  5411                           ;Fan_Support.c: 117: Do_Beep();
  5412  0046DA  EC1E  F025         	call	_Do_Beep	;wreg free
  5413                           
  5414                           ;Fan_Support.c: 118: Do_Beep();
  5415  0046DE  EC1E  F025         	call	_Do_Beep	;wreg free
  5416                           
  5417                           ;Fan_Support.c: 119: do_update_pwm(duty_cycle);
  5418  0046E2  5067               	movf	_duty_cycle,w,c
  5419  0046E4  EC0F  F01C         	call	_do_update_pwm
  5420                           
  5421                           ;Fan_Support.c: 120: }
  5422  0046E8  D007               	goto	l67
  5423  0046EA                     l9717:
  5424                           
  5425                           ;Fan_Support.c: 121: else
  5426                           ;Fan_Support.c: 122: {
  5427                           ;Fan_Support.c: 123: duty_cycle = duty_cycle + 5;
  5428  0046EA  5067               	movf	_duty_cycle,w,c
  5429  0046EC  0F05               	addlw	5
  5430  0046EE  6E67               	movwf	_duty_cycle,c
  5431                           
  5432                           ;Fan_Support.c: 124: do_update_pwm(duty_cycle);
  5433  0046F0  5067               	movf	_duty_cycle,w,c
  5434  0046F2  EC0F  F01C         	call	_do_update_pwm
  5435  0046F6  D000               	goto	l67
  5436  0046F8                     l67:
  5437  0046F8  0012               	return		;funcret
  5438  0046FA                     __end_of_Increase_Duty_Cycle:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           postinc0	equ	0xFEE
  5445                           wreg	equ	0xFE8
  5446                           postdec1	equ	0xFE5
  5447                           fsr1l	equ	0xFE1
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _Do_Setup_Time *****************
  5451 ;; Defined at:
  5452 ;;		line 41 in file "Setup_Time.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;		None
  5457 ;; Return value:  Size  Location     Type
  5458 ;;		None               void
  5459 ;; Registers used:
  5460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:        0 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:   11
  5473 ;; This function calls:
  5474 ;;		_DS1621_Read_Temp
  5475 ;;		_DS3231_Read_Time
  5476 ;;		_Decrease_Time
  5477 ;;		_Do_Beep_Bad
  5478 ;;		_Do_Beep_Good
  5479 ;;		_Do_Save_New_Time
  5480 ;;		_Exit_Time_Setup
  5481 ;;		_Go_Next_Field
  5482 ;;		_Go_Prev_Field
  5483 ;;		_Increase_Time
  5484 ;;		_Initialize_Setup_Time_Screen
  5485 ;;		_Monitor_Fan
  5486 ;;		_Read_Volt
  5487 ;;		_Set_D1_RGB
  5488 ;;		_Set_D2_RGB
  5489 ;;		_Update_Setup_Time_Screen
  5490 ;;		___awdiv
  5491 ;;		___ftge
  5492 ;;		___wmul
  5493 ;;		_bcd_2_dec
  5494 ;;		_check_for_button_input
  5495 ;;		_get_RPM
  5496 ;;		_printf
  5497 ;; This function is called by:
  5498 ;;		_main
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           	psect	text11
  5503  001FB4                     __ptext11:
  5504                           	opt stack 0
  5505  001FB4                     _Do_Setup_Time:
  5506                           	opt stack 19
  5507                           
  5508                           ;Setup_Time.c: 44: Select_Field = 0;
  5509                           
  5510                           ;incstack = 0
  5511  001FB4  0E00               	movlw	0
  5512  001FB6  0100               	movlb	0	; () banked
  5513  001FB8  6FEC               	movwf	_Select_Field& (0+255),b
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;Setup_Time.c: 46: DS3231_Read_Time();
  5517  001FBA  ECAE  F020         	call	_DS3231_Read_Time	;wreg free
  5518                           
  5519                           ;Setup_Time.c: 47: setup_second = bcd_2_dec(second);
  5520  001FBE  506B               	movf	_second,w,c
  5521  001FC0  ECD7  F023         	call	_bcd_2_dec
  5522  001FC4  0100               	movlb	0	; () banked
  5523  001FC6  6FF7               	movwf	_setup_second& (0+255),b
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;Setup_Time.c: 48: setup_minute = bcd_2_dec(minute);
  5527  001FC8  5069               	movf	_minute,w,c
  5528  001FCA  ECD7  F023         	call	_bcd_2_dec
  5529  001FCE  0100               	movlb	0	; () banked
  5530  001FD0  6FF5               	movwf	_setup_minute& (0+255),b
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;Setup_Time.c: 49: setup_hour = bcd_2_dec(hour);
  5534  001FD2  5068               	movf	_hour,w,c
  5535  001FD4  ECD7  F023         	call	_bcd_2_dec
  5536  001FD8  0100               	movlb	0	; () banked
  5537  001FDA  6FF4               	movwf	_setup_hour& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;Setup_Time.c: 50: setup_day = bcd_2_dec(day);
  5541  001FDC  5066               	movf	_day,w,c
  5542  001FDE  ECD7  F023         	call	_bcd_2_dec
  5543  001FE2  0100               	movlb	0	; () banked
  5544  001FE4  6FF3               	movwf	_setup_day& (0+255),b
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;Setup_Time.c: 51: setup_month = bcd_2_dec(month);
  5548  001FE6  506A               	movf	_month,w,c
  5549  001FE8  ECD7  F023         	call	_bcd_2_dec
  5550  001FEC  0100               	movlb	0	; () banked
  5551  001FEE  6FF6               	movwf	_setup_month& (0+255),b
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;Setup_Time.c: 52: setup_year = bcd_2_dec(year);
  5555  001FF0  506F               	movf	_year,w,c
  5556  001FF2  ECD7  F023         	call	_bcd_2_dec
  5557  001FF6  0100               	movlb	0	; () banked
  5558  001FF8  6FF8               	movwf	_setup_year& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;Setup_Time.c: 54: Initialize_Setup_Time_Screen();
  5562  001FFA  ECF0  F015         	call	_Initialize_Setup_Time_Screen	;wreg free
  5563                           
  5564                           ;Setup_Time.c: 55: Update_Setup_Time_Screen();
  5565  001FFE  EC83  F014         	call	_Update_Setup_Time_Screen	;wreg free
  5566                           
  5567                           ;Setup_Time.c: 56: In_Time_Setup = 1;
  5568  002002  0E01               	movlw	1
  5569  002004  0100               	movlb	0	; () banked
  5570  002006  6FE8               	movwf	_In_Time_Setup& (0+255),b
  5571                           
  5572                           ;Setup_Time.c: 58: while (In_Time_Setup == 1)
  5573  002008  D0EF               	goto	l10017
  5574  00200A                     l9951:
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;Setup_Time.c: 59: {
  5578                           ;Setup_Time.c: 60: DS3231_Read_Time();
  5579  00200A  ECAE  F020         	call	_DS3231_Read_Time	;wreg free
  5580                           
  5581                           ;Setup_Time.c: 63: if(tempSecond != second)
  5582  00200E  506B               	movf	_second,w,c
  5583  002010  0100               	movlb	0	; () banked
  5584  002012  19B7               	xorwf	_tempSecond& (0+255),w,b
  5585  002014  B4D8               	btfsc	status,2,c
  5586  002016  D0A3               	goto	l9981
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;Setup_Time.c: 64: {
  5590                           ;Setup_Time.c: 65: tempSecond = second;
  5591  002018  C06B  F0B7         	movff	_second,_tempSecond
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;Setup_Time.c: 66: rpm = get_RPM();
  5595  00201C  EC75  F022         	call	_get_RPM	;wreg free
  5596  002020  C01F  F05F         	movff	?_get_RPM,_rpm
  5597  002024  C020  F060         	movff	?_get_RPM+1,_rpm+1
  5598                           
  5599                           ;Setup_Time.c: 68: volt = Read_Volt(0);
  5600  002028  0E00               	movlw	0
  5601  00202A  EC41  F020         	call	_Read_Volt
  5602  00202E  C03D  F0D6         	movff	?_Read_Volt,_volt
  5603  002032  C03E  F0D7         	movff	?_Read_Volt+1,_volt+1
  5604  002036  C03F  F0D8         	movff	?_Read_Volt+2,_volt+2
  5605                           
  5606                           ;Setup_Time.c: 69: if (volt > 3.000) light_flag = 1;
  5607  00203A  0E00               	movlw	0
  5608  00203C  6E11               	movwf	___ftge@ff1,c
  5609  00203E  0E40               	movlw	64
  5610  002040  6E12               	movwf	___ftge@ff1+1,c
  5611  002042  0E40               	movlw	64
  5612  002044  6E13               	movwf	___ftge@ff1+2,c
  5613  002046  C0D6  F014         	movff	_volt,___ftge@ff2
  5614  00204A  C0D7  F015         	movff	_volt+1,___ftge@ff2+1
  5615  00204E  C0D8  F016         	movff	_volt+2,___ftge@ff2+2
  5616  002052  ECAC  F01D         	call	___ftge	;wreg free
  5617  002056  B0D8               	btfsc	status,0,c
  5618  002058  D004               	goto	l9963
  5619  00205A  0E01               	movlw	1
  5620  00205C  0100               	movlb	0	; () banked
  5621  00205E  6FF1               	movwf	_light_flag& (0+255),b
  5622  002060  D000               	goto	l9963
  5623  002062                     l9963:
  5624                           
  5625                           ;Setup_Time.c: 70: tempC = DS1621_Read_Temp();
  5626  002062  EC2E  F023         	call	_DS1621_Read_Temp	;wreg free
  5627  002066  5014               	movf	?_DS1621_Read_Temp,w,c
  5628  002068  6E6D               	movwf	_tempC,c
  5629                           
  5630                           ;Setup_Time.c: 71: tempF = (tempC * 9 / 5) + 32;
  5631  00206A  506D               	movf	_tempC,w,c
  5632  00206C  6E11               	movwf	___wmul@multiplier,c
  5633  00206E  6A12               	clrf	___wmul@multiplier+1,c
  5634  002070  BE11               	btfsc	___wmul@multiplier,7,c
  5635  002072  0612               	decf	___wmul@multiplier+1,f,c
  5636  002074  0E00               	movlw	0
  5637  002076  6E14               	movwf	___wmul@multiplicand+1,c
  5638  002078  0E09               	movlw	9
  5639  00207A  6E13               	movwf	___wmul@multiplicand,c
  5640  00207C  EC01  F024         	call	___wmul	;wreg free
  5641  002080  C011  F017         	movff	?___wmul,___awdiv@dividend
  5642  002084  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  5643  002088  0E00               	movlw	0
  5644  00208A  6E1A               	movwf	___awdiv@divisor+1,c
  5645  00208C  0E05               	movlw	5
  5646  00208E  6E19               	movwf	___awdiv@divisor,c
  5647  002090  EC61  F01D         	call	___awdiv	;wreg free
  5648  002094  5017               	movf	?___awdiv,w,c
  5649  002096  0F20               	addlw	32
  5650  002098  6E6E               	movwf	_tempF,c
  5651                           
  5652                           ;Setup_Time.c: 72: Set_D1_RGB(duty_cycle);
  5653  00209A  5067               	movf	_duty_cycle,w,c
  5654  00209C  ECE5  F021         	call	_Set_D1_RGB
  5655                           
  5656                           ;Setup_Time.c: 73: Set_D2_RGB(rpm);
  5657  0020A0  C05F  F01F         	movff	_rpm,Set_D2_RGB@rpm
  5658  0020A4  C060  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  5659  0020A8  EC96  F021         	call	_Set_D2_RGB	;wreg free
  5660                           
  5661                           ;Setup_Time.c: 75: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,
      +                          year);
  5662  0020AC  0E75               	movlw	low STR_4
  5663  0020AE  0100               	movlb	0	; () banked
  5664  0020B0  6F80               	movwf	printf@f& (0+255),b
  5665  0020B2  0EFE               	movlw	high STR_4
  5666  0020B4  0100               	movlb	0	; () banked
  5667  0020B6  6F81               	movwf	(printf@f+1)& (0+255),b
  5668  0020B8  C068  F082         	movff	_hour,?_printf+2
  5669  0020BC  0100               	movlb	0	; () banked
  5670  0020BE  6B83               	clrf	(?_printf+3)& (0+255),b
  5671  0020C0  C069  F084         	movff	_minute,?_printf+4
  5672  0020C4  0100               	movlb	0	; () banked
  5673  0020C6  6B85               	clrf	(?_printf+5)& (0+255),b
  5674  0020C8  C06B  F086         	movff	_second,?_printf+6
  5675  0020CC  0100               	movlb	0	; () banked
  5676  0020CE  6B87               	clrf	(?_printf+7)& (0+255),b
  5677  0020D0  C06A  F088         	movff	_month,?_printf+8
  5678  0020D4  0100               	movlb	0	; () banked
  5679  0020D6  6B89               	clrf	(?_printf+9)& (0+255),b
  5680  0020D8  C066  F08A         	movff	_day,?_printf+10
  5681  0020DC  0100               	movlb	0	; () banked
  5682  0020DE  6B8B               	clrf	(?_printf+11)& (0+255),b
  5683  0020E0  C06F  F08C         	movff	_year,?_printf+12
  5684  0020E4  0100               	movlb	0	; () banked
  5685  0020E6  6B8D               	clrf	(?_printf+13)& (0+255),b
  5686  0020E8  EC0E  F000         	call	_printf	;wreg free
  5687                           
  5688                           ;Setup_Time.c: 76: printf (" Temp = %d C = %d F ", tempC, tempF);
  5689  0020EC  0EF7               	movlw	low STR_5
  5690  0020EE  0100               	movlb	0	; () banked
  5691  0020F0  6F80               	movwf	printf@f& (0+255),b
  5692  0020F2  0EFE               	movlw	high STR_5
  5693  0020F4  0100               	movlb	0	; () banked
  5694  0020F6  6F81               	movwf	(printf@f+1)& (0+255),b
  5695  0020F8  506D               	movf	_tempC,w,c
  5696  0020FA  0100               	movlb	0	; () banked
  5697  0020FC  6F82               	movwf	(?_printf+2)& (0+255),b
  5698  0020FE  6B83               	clrf	(?_printf+3)& (0+255),b
  5699  002100  BF82               	btfsc	(?_printf+2)& (0+255),7,b
  5700  002102  0783               	decf	(?_printf+3)& (0+255),f,b
  5701  002104  506E               	movf	_tempF,w,c
  5702  002106  0100               	movlb	0	; () banked
  5703  002108  6F84               	movwf	(?_printf+4)& (0+255),b
  5704  00210A  6B85               	clrf	(?_printf+5)& (0+255),b
  5705  00210C  BF84               	btfsc	(?_printf+4)& (0+255),7,b
  5706  00210E  0785               	decf	(?_printf+5)& (0+255),f,b
  5707  002110  EC0E  F000         	call	_printf	;wreg free
  5708                           
  5709                           ;Setup_Time.c: 77: printf ("Light Sensor = %f V", volt);
  5710  002114  0E20               	movlw	low STR_6
  5711  002116  0100               	movlb	0	; () banked
  5712  002118  6F80               	movwf	printf@f& (0+255),b
  5713  00211A  0EFF               	movlw	high STR_6
  5714  00211C  0100               	movlb	0	; () banked
  5715  00211E  6F81               	movwf	(printf@f+1)& (0+255),b
  5716  002120  C0D6  F082         	movff	_volt,?_printf+2
  5717  002124  C0D7  F083         	movff	_volt+1,?_printf+3
  5718  002128  C0D8  F084         	movff	_volt+2,?_printf+4
  5719  00212C  EC0E  F000         	call	_printf	;wreg free
  5720                           
  5721                           ;Setup_Time.c: 78: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_flag
      +                          );
  5722  002130  0E93               	movlw	low STR_7
  5723  002132  0100               	movlb	0	; () banked
  5724  002134  6F80               	movwf	printf@f& (0+255),b
  5725  002136  0EFE               	movlw	high STR_7
  5726  002138  0100               	movlb	0	; () banked
  5727  00213A  6F81               	movwf	(printf@f+1)& (0+255),b
  5728  00213C  C05F  F082         	movff	_rpm,?_printf+2
  5729  002140  C060  F083         	movff	_rpm+1,?_printf+3
  5730  002144  C067  F084         	movff	_duty_cycle,?_printf+4
  5731  002148  0100               	movlb	0	; () banked
  5732  00214A  6B85               	clrf	(?_printf+5)& (0+255),b
  5733  00214C  C0F1  F086         	movff	_light_flag,?_printf+6
  5734  002150  0100               	movlb	0	; () banked
  5735  002152  6B87               	clrf	(?_printf+7)& (0+255),b
  5736  002154  EC0E  F000         	call	_printf	;wreg free
  5737                           
  5738                           ;Setup_Time.c: 79: Monitor_Fan();
  5739  002158  ECBF  F021         	call	_Monitor_Fan	;wreg free
  5740  00215C  D000               	goto	l9981
  5741  00215E                     l9981:
  5742                           
  5743                           ;Setup_Time.c: 81: }
  5744                           ;Setup_Time.c: 82: if (check_for_button_input() == 1)
  5745  00215E  EC6A  F01C         	call	_check_for_button_input	;wreg free
  5746  002162  06E8               	decf	wreg,f,c
  5747  002164  A4D8               	btfss	status,2,c
  5748  002166  D040               	goto	l10017
  5749                           
  5750                           ;Setup_Time.c: 83: {
  5751                           ;Setup_Time.c: 85: if (found >= 3 && found <= 8)
  5752  002168  0E02               	movlw	2
  5753  00216A  0100               	movlb	0	; () banked
  5754  00216C  65F0               	cpfsgt	_found& (0+255),b
  5755  00216E  D039               	goto	l10015
  5756                           
  5757                           ; BSR set to: 0
  5758  002170  0E09               	movlw	9
  5759  002172  0100               	movlb	0	; () banked
  5760  002174  61F0               	cpfslt	_found& (0+255),b
  5761  002176  D035               	goto	l10015
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;Setup_Time.c: 86: {
  5765                           ;Setup_Time.c: 87: Do_Beep_Good();
  5766  002178  EC02  F025         	call	_Do_Beep_Good	;wreg free
  5767                           
  5768                           ;Setup_Time.c: 88: if (found == 3)
  5769  00217C  0E03               	movlw	3
  5770  00217E  0100               	movlb	0	; () banked
  5771  002180  19F0               	xorwf	_found& (0+255),w,b
  5772  002182  A4D8               	btfss	status,2,c
  5773  002184  D003               	goto	l9993
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;Setup_Time.c: 89: Go_Prev_Field();
  5777  002186  ECA7  F024         	call	_Go_Prev_Field	;wreg free
  5778  00218A  D000               	goto	l9993
  5779  00218C                     l9993:
  5780                           
  5781                           ;Setup_Time.c: 90: if (found == 4)
  5782  00218C  0E04               	movlw	4
  5783  00218E  0100               	movlb	0	; () banked
  5784  002190  19F0               	xorwf	_found& (0+255),w,b
  5785  002192  A4D8               	btfss	status,2,c
  5786  002194  D003               	goto	l9997
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;Setup_Time.c: 91: Go_Next_Field();
  5790  002196  ECB7  F024         	call	_Go_Next_Field	;wreg free
  5791  00219A  D000               	goto	l9997
  5792  00219C                     l9997:
  5793                           
  5794                           ;Setup_Time.c: 92: if (found == 5)
  5795  00219C  0E05               	movlw	5
  5796  00219E  0100               	movlb	0	; () banked
  5797  0021A0  19F0               	xorwf	_found& (0+255),w,b
  5798  0021A2  A4D8               	btfss	status,2,c
  5799  0021A4  D003               	goto	l10001
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;Setup_Time.c: 93: Do_Save_New_Time();
  5803  0021A6  EC7B  F025         	call	_Do_Save_New_Time	;wreg free
  5804  0021AA  D000               	goto	l10001
  5805  0021AC                     l10001:
  5806                           
  5807                           ;Setup_Time.c: 94: if (found == 8)
  5808  0021AC  0E08               	movlw	8
  5809  0021AE  0100               	movlb	0	; () banked
  5810  0021B0  19F0               	xorwf	_found& (0+255),w,b
  5811  0021B2  A4D8               	btfss	status,2,c
  5812  0021B4  D003               	goto	l10005
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;Setup_Time.c: 95: Exit_Time_Setup();
  5816  0021B6  ECD8  F025         	call	_Exit_Time_Setup	;wreg free
  5817  0021BA  D000               	goto	l10005
  5818  0021BC                     l10005:
  5819                           
  5820                           ;Setup_Time.c: 96: if (found == 6)
  5821  0021BC  0E06               	movlw	6
  5822  0021BE  0100               	movlb	0	; () banked
  5823  0021C0  19F0               	xorwf	_found& (0+255),w,b
  5824  0021C2  A4D8               	btfss	status,2,c
  5825  0021C4  D003               	goto	l10009
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;Setup_Time.c: 97: Decrease_Time();
  5829  0021C6  ECB4  F01B         	call	_Decrease_Time	;wreg free
  5830  0021CA  D000               	goto	l10009
  5831  0021CC                     l10009:
  5832                           
  5833                           ;Setup_Time.c: 98: if (found == 7)
  5834  0021CC  0E07               	movlw	7
  5835  0021CE  0100               	movlb	0	; () banked
  5836  0021D0  19F0               	xorwf	_found& (0+255),w,b
  5837  0021D2  A4D8               	btfss	status,2,c
  5838  0021D4  D003               	goto	l10013
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;Setup_Time.c: 99: Increase_Time();
  5842  0021D6  ECC1  F01C         	call	_Increase_Time	;wreg free
  5843  0021DA  D000               	goto	l10013
  5844  0021DC                     l10013:
  5845                           
  5846                           ;Setup_Time.c: 100: found = 0xff;
  5847  0021DC  0100               	movlb	0	; () banked
  5848  0021DE  69F0               	setf	_found& (0+255),b
  5849                           
  5850                           ;Setup_Time.c: 101: }
  5851  0021E0  D003               	goto	l10017
  5852  0021E2                     l10015:
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;Setup_Time.c: 102: else
  5856                           ;Setup_Time.c: 103: {
  5857                           ;Setup_Time.c: 104: Do_Beep_Bad();
  5858  0021E2  EC10  F025         	call	_Do_Beep_Bad	;wreg free
  5859  0021E6  D000               	goto	l10017
  5860  0021E8                     l10017:
  5861  0021E8  0100               	movlb	0	; () banked
  5862  0021EA  05E8               	decf	_In_Time_Setup& (0+255),w,b
  5863  0021EC  B4D8               	btfsc	status,2,c
  5864  0021EE  D70D               	goto	l9951
  5865                           
  5866                           ; BSR set to: 0
  5867                           
  5868                           ; BSR set to: 0
  5869  0021F0  0012               	return		;funcret
  5870  0021F2                     __end_of_Do_Setup_Time:
  5871                           	opt stack 0
  5872                           tblptru	equ	0xFF8
  5873                           tblptrh	equ	0xFF7
  5874                           tblptrl	equ	0xFF6
  5875                           tablat	equ	0xFF5
  5876                           postinc0	equ	0xFEE
  5877                           wreg	equ	0xFE8
  5878                           postdec1	equ	0xFE5
  5879                           fsr1l	equ	0xFE1
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _get_RPM *****************
  5883 ;; Defined at:
  5884 ;;		line 70 in file "Fan_Support.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;		None
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  RPS             2   32[COMRAM] int 
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  2   30[COMRAM] int 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5898 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;Total ram usage:        4 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    3
  5905 ;; This function calls:
  5906 ;;		___awdiv
  5907 ;;		___wmul
  5908 ;; This function is called by:
  5909 ;;		_main
  5910 ;;		_Setup_Fan_Temp
  5911 ;;		_Do_Setup_Time
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text12
  5916  0044EA                     __ptext12:
  5917                           	opt stack 0
  5918  0044EA                     _get_RPM:
  5919                           	opt stack 27
  5920                           
  5921                           ;Fan_Support.c: 73: int RPS = TMR3L / 2;
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;incstack = 0
  5925  0044EA  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  5926  0044EE  6A18               	clrf	___awdiv@dividend+1,c
  5927  0044F0  0E00               	movlw	0
  5928  0044F2  6E1A               	movwf	___awdiv@divisor+1,c
  5929  0044F4  0E02               	movlw	2
  5930  0044F6  6E19               	movwf	___awdiv@divisor,c
  5931  0044F8  EC61  F01D         	call	___awdiv	;wreg free
  5932  0044FC  C017  F021         	movff	?___awdiv,get_RPM@RPS
  5933  004500  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  5934                           
  5935                           ;Fan_Support.c: 75: TMR3L = 0;
  5936  004504  0E00               	movlw	0
  5937  004506  6EB2               	movwf	4018,c	;volatile
  5938                           
  5939                           ;Fan_Support.c: 76: return (RPS * 60);
  5940  004508  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  5941  00450C  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  5942  004510  0E00               	movlw	0
  5943  004512  6E14               	movwf	___wmul@multiplicand+1,c
  5944  004514  0E3C               	movlw	60
  5945  004516  6E13               	movwf	___wmul@multiplicand,c
  5946  004518  EC01  F024         	call	___wmul	;wreg free
  5947  00451C  C011  F01F         	movff	?___wmul,?_get_RPM
  5948  004520  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  5949  004524  D000               	goto	l50
  5950  004526                     l50:
  5951  004526  0012               	return		;funcret
  5952  004528                     __end_of_get_RPM:
  5953                           	opt stack 0
  5954                           tblptru	equ	0xFF8
  5955                           tblptrh	equ	0xFF7
  5956                           tblptrl	equ	0xFF6
  5957                           tablat	equ	0xFF5
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           postdec1	equ	0xFE5
  5961                           fsr1l	equ	0xFE1
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _check_for_button_input *****************
  5965 ;; Defined at:
  5966 ;;		line 14 in file "utils.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;		None
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  j               2   21[BANK1 ] int 
  5971 ;;  array1         21    0[BANK1 ] unsigned char [21]
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      unsigned char 
  5974 ;; Registers used:
  5975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Totals:         0       1      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;Total ram usage:       24 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    6
  5988 ;; This function calls:
  5989 ;;		_printf
  5990 ;; This function is called by:
  5991 ;;		_main
  5992 ;;		_Setup_Fan_Temp
  5993 ;;		_Do_Setup_Time
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text13
  5998  0038D4                     __ptext13:
  5999                           	opt stack 0
  6000  0038D4                     _check_for_button_input:
  6001                           	opt stack 24
  6002                           
  6003                           ;utils.c: 16: char array1[21]={0xa2,0x62,0xe2,0x22,0x02,0xc2,0xe0,0xa8,0x90,0x68,0x98,0x
      +                          b0,0x30,0x18,0x7a,0x10,0x38,0x5a,0x42,0x4a,0x52};
  6004                           
  6005                           ;incstack = 0
  6006  0038D4  EE21  F023         	lfsr	2,check_for_button_input@F4236
  6007  0038D8  EE11  F088         	lfsr	1,check_for_button_input@array1
  6008  0038DC  0E14               	movlw	20
  6009  0038DE                     u8211:
  6010  0038DE  CFDB FFE3          	movff	plusw2,plusw1
  6011  0038E2  06E8               	decf	wreg,f,c
  6012  0038E4  E2FC               	bc	u8211
  6013                           
  6014                           ;utils.c: 18: if (Nec_ok == 1)
  6015  0038E6  0100               	movlb	0	; () banked
  6016  0038E8  05D9               	decf	_Nec_ok& (0+255),w,b
  6017  0038EA  0100               	movlb	0	; () banked
  6018  0038EC  11DA               	iorwf	(_Nec_ok+1)& (0+255),w,b
  6019  0038EE  A4D8               	btfss	status,2,c
  6020  0038F0  D045               	goto	l9505
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;utils.c: 19: {
  6024                           ;utils.c: 20: Nec_ok = 0;
  6025  0038F2  0E00               	movlw	0
  6026  0038F4  0100               	movlb	0	; () banked
  6027  0038F6  6FDA               	movwf	(_Nec_ok+1)& (0+255),b
  6028  0038F8  0E00               	movlw	0
  6029  0038FA  6FD9               	movwf	_Nec_ok& (0+255),b
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;utils.c: 24: INTCON3bits.INT2IE = 1;
  6033  0038FC  88F0               	bsf	intcon3,4,c	;volatile
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;utils.c: 25: INTCON2bits.INTEDG2 = 0;
  6037  0038FE  98F1               	bcf	intcon2,4,c	;volatile
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;utils.c: 27: found = 0xff;
  6041  003900  0100               	movlb	0	; () banked
  6042  003902  69F0               	setf	_found& (0+255),b
  6043                           
  6044                           ;utils.c: 28: for (int j=0; j< 21; j++)
  6045  003904  0E00               	movlw	0
  6046  003906  0101               	movlb	1	; () banked
  6047  003908  6F9E               	movwf	(check_for_button_input@j+1)& (0+255),b
  6048  00390A  0E00               	movlw	0
  6049  00390C  6F9D               	movwf	check_for_button_input@j& (0+255),b
  6050  00390E                     l9477:
  6051                           
  6052                           ; BSR set to: 1
  6053  00390E  0101               	movlb	1	; () banked
  6054  003910  BF9E               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  6055  003912  D00A               	goto	l9481
  6056  003914  0101               	movlb	1	; () banked
  6057  003916  519E               	movf	(check_for_button_input@j+1)& (0+255),w,b
  6058  003918  E121               	bnz	l9491
  6059  00391A  0E15               	movlw	21
  6060  00391C  0101               	movlb	1	; () banked
  6061  00391E  5D9D               	subwf	check_for_button_input@j& (0+255),w,b
  6062  003920  B0D8               	btfsc	status,0,c
  6063  003922  D01C               	goto	l9491
  6064  003924  D001               	goto	l9481
  6065                           
  6066                           ; BSR set to: 1
  6067  003926  D01A               	goto	l9491
  6068  003928                     l9481:
  6069                           
  6070                           ; BSR set to: 1
  6071                           ;utils.c: 29: {
  6072                           ;utils.c: 31: if (Nec_Button == array1[j])
  6073  003928  0E88               	movlw	low check_for_button_input@array1
  6074  00392A  0101               	movlb	1	; () banked
  6075  00392C  259D               	addwf	check_for_button_input@j& (0+255),w,b
  6076  00392E  6ED9               	movwf	fsr2l,c
  6077  003930  0E01               	movlw	high check_for_button_input@array1
  6078  003932  0101               	movlb	1	; () banked
  6079  003934  219E               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  6080  003936  6EDA               	movwf	fsr2h,c
  6081  003938  0100               	movlb	0	; () banked
  6082  00393A  51E9               	movf	_Nec_Button& (0+255),w,b
  6083  00393C  18DE               	xorwf	postinc2,w,c
  6084  00393E  A4D8               	btfss	status,2,c
  6085  003940  D008               	goto	l9487
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;utils.c: 32: {
  6089                           ;utils.c: 33: found = j;
  6090  003942  C19D  F0F0         	movff	check_for_button_input@j,_found
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;utils.c: 34: j = 21;
  6094  003946  0E00               	movlw	0
  6095  003948  0101               	movlb	1	; () banked
  6096  00394A  6F9E               	movwf	(check_for_button_input@j+1)& (0+255),b
  6097  00394C  0E15               	movlw	21
  6098  00394E  6F9D               	movwf	check_for_button_input@j& (0+255),b
  6099  003950  D000               	goto	l9487
  6100  003952                     l9487:
  6101  003952  0101               	movlb	1	; () banked
  6102  003954  4B9D               	infsnz	check_for_button_input@j& (0+255),f,b
  6103  003956  2B9E               	incf	(check_for_button_input@j+1)& (0+255),f,b
  6104  003958  D7DA               	goto	l9477
  6105                           
  6106                           ; BSR set to: 1
  6107  00395A  D000               	goto	l9491
  6108  00395C                     l9491:
  6109                           
  6110                           ; BSR set to: 1
  6111                           ;utils.c: 35: }
  6112                           ;utils.c: 36: }
  6113                           ;utils.c: 38: if (found == 0xff)
  6114  00395C  0100               	movlb	0	; () banked
  6115  00395E  29F0               	incf	_found& (0+255),w,b
  6116  003960  A4D8               	btfss	status,2,c
  6117  003962  D00A               	goto	l9501
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;utils.c: 39: {
  6121                           ;utils.c: 40: printf ("Cannot find button \r\n");
  6122  003964  0EE1               	movlw	low STR_3
  6123  003966  0100               	movlb	0	; () banked
  6124  003968  6F80               	movwf	printf@f& (0+255),b
  6125  00396A  0EFE               	movlw	high STR_3
  6126  00396C  0100               	movlb	0	; () banked
  6127  00396E  6F81               	movwf	(printf@f+1)& (0+255),b
  6128  003970  EC0E  F000         	call	_printf	;wreg free
  6129  003974  D003               	goto	l9505
  6130                           
  6131                           ;utils.c: 42: }
  6132                           
  6133                           ;utils.c: 41: return (0);
  6134  003976  D004               	goto	l446
  6135  003978                     l9501:
  6136                           
  6137                           ;utils.c: 43: else
  6138                           ;utils.c: 44: {
  6139                           ;utils.c: 45: return (1);
  6140  003978  0E01               	movlw	1
  6141                           
  6142                           ;utils.c: 46: }
  6143                           ;utils.c: 47: }
  6144  00397A  D002               	goto	l446
  6145  00397C                     l9505:
  6146                           
  6147                           ;utils.c: 48: else {return (0);}
  6148  00397C  0E00               	movlw	0
  6149  00397E  D000               	goto	l446
  6150  003980                     l446:
  6151  003980  0012               	return		;funcret
  6152  003982                     __end_of_check_for_button_input:
  6153                           	opt stack 0
  6154                           tblptru	equ	0xFF8
  6155                           tblptrh	equ	0xFF7
  6156                           tblptrl	equ	0xFF6
  6157                           tablat	equ	0xFF5
  6158                           intcon2	equ	0xFF1
  6159                           intcon3	equ	0xFF0
  6160                           postinc0	equ	0xFEE
  6161                           wreg	equ	0xFE8
  6162                           postdec1	equ	0xFE5
  6163                           plusw1	equ	0xFE3
  6164                           fsr1l	equ	0xFE1
  6165                           postinc2	equ	0xFDE
  6166                           plusw2	equ	0xFDB
  6167                           fsr2h	equ	0xFDA
  6168                           fsr2l	equ	0xFD9
  6169                           status	equ	0xFD8
  6170                           
  6171 ;; *************** function _bcd_2_dec *****************
  6172 ;; Defined at:
  6173 ;;		line 52 in file "utils.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  bcd             1    wreg     unsigned char 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  bcd             1   20[COMRAM] unsigned char 
  6178 ;;  dec             2   18[COMRAM] int 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      unsigned char 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0, prodl, prodh
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;Total ram usage:        5 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    2
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_Do_Setup_Time
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text14
  6203  0047AE                     __ptext14:
  6204                           	opt stack 0
  6205  0047AE                     _bcd_2_dec:
  6206                           	opt stack 27
  6207                           
  6208                           ;incstack = 0
  6209                           ;bcd_2_dec@bcd stored from wreg
  6210  0047AE  6E15               	movwf	bcd_2_dec@bcd,c
  6211                           
  6212                           ;utils.c: 54: int dec;
  6213                           ;utils.c: 55: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  6214  0047B0  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  6215  0047B4  0E0F               	movlw	15
  6216  0047B6  1611               	andwf	??_bcd_2_dec,f,c
  6217  0047B8  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  6218  0047BC  3A12               	swapf	??_bcd_2_dec+1,f,c
  6219  0047BE  0E0F               	movlw	15
  6220  0047C0  1612               	andwf	??_bcd_2_dec+1,f,c
  6221  0047C2  5012               	movf	??_bcd_2_dec+1,w,c
  6222  0047C4  0D0A               	mullw	10
  6223  0047C6  5011               	movf	??_bcd_2_dec,w,c
  6224  0047C8  24F3               	addwf	prodl,w,c
  6225  0047CA  6E13               	movwf	bcd_2_dec@dec,c
  6226  0047CC  0E00               	movlw	0
  6227  0047CE  20F4               	addwfc	prodh,w,c
  6228  0047D0  6E14               	movwf	bcd_2_dec@dec+1,c
  6229                           
  6230                           ;utils.c: 56: return dec;
  6231  0047D2  5013               	movf	bcd_2_dec@dec,w,c
  6232  0047D4  D000               	goto	l451
  6233  0047D6                     l451:
  6234  0047D6  0012               	return		;funcret
  6235  0047D8                     __end_of_bcd_2_dec:
  6236                           	opt stack 0
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           intcon2	equ	0xFF1
  6244                           intcon3	equ	0xFF0
  6245                           postinc0	equ	0xFEE
  6246                           wreg	equ	0xFE8
  6247                           postdec1	equ	0xFE5
  6248                           plusw1	equ	0xFE3
  6249                           fsr1l	equ	0xFE1
  6250                           postinc2	equ	0xFDE
  6251                           plusw2	equ	0xFDB
  6252                           fsr2h	equ	0xFDA
  6253                           fsr2l	equ	0xFD9
  6254                           status	equ	0xFD8
  6255                           
  6256 ;; *************** function _Set_D2_RGB *****************
  6257 ;; Defined at:
  6258 ;;		line 255 in file "Main.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  rpm             2   30[COMRAM] int 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  range           2   32[COMRAM] int 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;		None               void
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6272 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;Total ram usage:        4 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    3
  6279 ;; This function calls:
  6280 ;;		___awdiv
  6281 ;; This function is called by:
  6282 ;;		_main
  6283 ;;		_Setup_Fan_Temp
  6284 ;;		_Do_Setup_Time
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text15
  6289  00432C                     __ptext15:
  6290                           	opt stack 0
  6291  00432C                     _Set_D2_RGB:
  6292                           	opt stack 26
  6293                           
  6294                           ;Main.c: 258: int range = (rpm/500)+1;
  6295                           
  6296                           ;incstack = 0
  6297  00432C  C01F  F017         	movff	Set_D2_RGB@rpm,___awdiv@dividend
  6298  004330  C020  F018         	movff	Set_D2_RGB@rpm+1,___awdiv@dividend+1
  6299  004334  0E01               	movlw	1
  6300  004336  6E1A               	movwf	___awdiv@divisor+1,c
  6301  004338  0EF4               	movlw	244
  6302  00433A  6E19               	movwf	___awdiv@divisor,c
  6303  00433C  EC61  F01D         	call	___awdiv	;wreg free
  6304  004340  0E01               	movlw	1
  6305  004342  2417               	addwf	?___awdiv,w,c
  6306  004344  6E21               	movwf	Set_D2_RGB@range,c
  6307  004346  0E00               	movlw	0
  6308  004348  2018               	addwfc	?___awdiv+1,w,c
  6309  00434A  6E22               	movwf	Set_D2_RGB@range+1,c
  6310                           
  6311                           ;Main.c: 259: if (range > 7)
  6312  00434C  BE22               	btfsc	Set_D2_RGB@range+1,7,c
  6313  00434E  D00B               	goto	l9533
  6314  004350  5022               	movf	Set_D2_RGB@range+1,w,c
  6315  004352  E104               	bnz	u8280
  6316  004354  0E08               	movlw	8
  6317  004356  5C21               	subwf	Set_D2_RGB@range,w,c
  6318  004358  A0D8               	btfss	status,0,c
  6319  00435A  D005               	goto	l9533
  6320  00435C                     u8280:
  6321                           
  6322                           ;Main.c: 260: range = 7;
  6323  00435C  0E00               	movlw	0
  6324  00435E  6E22               	movwf	Set_D2_RGB@range+1,c
  6325  004360  0E07               	movlw	7
  6326  004362  6E21               	movwf	Set_D2_RGB@range,c
  6327  004364  D000               	goto	l9533
  6328  004366                     l9533:
  6329                           
  6330                           ;Main.c: 261: if (rpm == 0)
  6331  004366  501F               	movf	Set_D2_RGB@rpm,w,c
  6332  004368  1020               	iorwf	Set_D2_RGB@rpm+1,w,c
  6333  00436A  A4D8               	btfss	status,2,c
  6334  00436C  D005               	goto	l9537
  6335                           
  6336                           ;Main.c: 262: range = 0;
  6337  00436E  0E00               	movlw	0
  6338  004370  6E22               	movwf	Set_D2_RGB@range+1,c
  6339  004372  0E00               	movlw	0
  6340  004374  6E21               	movwf	Set_D2_RGB@range,c
  6341  004376  D000               	goto	l9537
  6342  004378                     l9537:
  6343                           
  6344                           ;Main.c: 263: PORTE = range;
  6345  004378  C021  FF84         	movff	Set_D2_RGB@range,3972	;volatile
  6346  00437C  0012               	return		;funcret
  6347  00437E                     __end_of_Set_D2_RGB:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           intcon2	equ	0xFF1
  6356                           intcon3	equ	0xFF0
  6357                           postinc0	equ	0xFEE
  6358                           wreg	equ	0xFE8
  6359                           postdec1	equ	0xFE5
  6360                           plusw1	equ	0xFE3
  6361                           fsr1l	equ	0xFE1
  6362                           postinc2	equ	0xFDE
  6363                           plusw2	equ	0xFDB
  6364                           fsr2h	equ	0xFDA
  6365                           fsr2l	equ	0xFD9
  6366                           status	equ	0xFD8
  6367                           
  6368 ;; *************** function _Set_D1_RGB *****************
  6369 ;; Defined at:
  6370 ;;		line 246 in file "Main.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;  duty_cycle      1    wreg     unsigned char 
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;  duty_cycle      1   31[COMRAM] unsigned char 
  6375 ;;  range           2   32[COMRAM] int 
  6376 ;; Return value:  Size  Location     Type
  6377 ;;		None               void
  6378 ;; Registers used:
  6379 ;;		wreg, status,2, status,0, cstack
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6386 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;Total ram usage:        4 bytes
  6390 ;; Hardware stack levels used:    1
  6391 ;; Hardware stack levels required when called:    3
  6392 ;; This function calls:
  6393 ;;		___awdiv
  6394 ;; This function is called by:
  6395 ;;		_main
  6396 ;;		_Setup_Fan_Temp
  6397 ;;		_Do_Setup_Time
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text16
  6402  0043CA                     __ptext16:
  6403                           	opt stack 0
  6404  0043CA                     _Set_D1_RGB:
  6405                           	opt stack 26
  6406                           
  6407                           ;incstack = 0
  6408                           ;Set_D1_RGB@duty_cycle stored from wreg
  6409  0043CA  6E20               	movwf	Set_D1_RGB@duty_cycle,c
  6410                           
  6411                           ;Main.c: 249: int range = duty_cycle/10;
  6412  0043CC  C020  F017         	movff	Set_D1_RGB@duty_cycle,___awdiv@dividend
  6413  0043D0  6A18               	clrf	___awdiv@dividend+1,c
  6414  0043D2  0E00               	movlw	0
  6415  0043D4  6E1A               	movwf	___awdiv@divisor+1,c
  6416  0043D6  0E0A               	movlw	10
  6417  0043D8  6E19               	movwf	___awdiv@divisor,c
  6418  0043DA  EC61  F01D         	call	___awdiv	;wreg free
  6419  0043DE  C017  F021         	movff	?___awdiv,Set_D1_RGB@range
  6420  0043E2  C018  F022         	movff	?___awdiv+1,Set_D1_RGB@range+1
  6421                           
  6422                           ;Main.c: 250: if (range > 7)
  6423  0043E6  BE22               	btfsc	Set_D1_RGB@range+1,7,c
  6424  0043E8  D00B               	goto	l9525
  6425  0043EA  5022               	movf	Set_D1_RGB@range+1,w,c
  6426  0043EC  E104               	bnz	u8270
  6427  0043EE  0E08               	movlw	8
  6428  0043F0  5C21               	subwf	Set_D1_RGB@range,w,c
  6429  0043F2  A0D8               	btfss	status,0,c
  6430  0043F4  D005               	goto	l9525
  6431  0043F6                     u8270:
  6432                           
  6433                           ;Main.c: 251: range = 7;
  6434  0043F6  0E00               	movlw	0
  6435  0043F8  6E22               	movwf	Set_D1_RGB@range+1,c
  6436  0043FA  0E07               	movlw	7
  6437  0043FC  6E21               	movwf	Set_D1_RGB@range,c
  6438  0043FE  D000               	goto	l9525
  6439  004400                     l9525:
  6440                           
  6441                           ;Main.c: 252: PORTD = (PORTD & 0x8F) | (range<<4);
  6442  004400  C021  F01F         	movff	Set_D1_RGB@range,??_Set_D1_RGB
  6443  004404  3A1F               	swapf	??_Set_D1_RGB,f,c
  6444  004406  0EF0               	movlw	240
  6445  004408  161F               	andwf	??_Set_D1_RGB,f,c
  6446  00440A  5083               	movf	3971,w,c	;volatile
  6447  00440C  0B8F               	andlw	143
  6448  00440E  101F               	iorwf	??_Set_D1_RGB,w,c
  6449  004410  6E83               	movwf	3971,c	;volatile
  6450  004412  0012               	return		;funcret
  6451  004414                     __end_of_Set_D1_RGB:
  6452                           	opt stack 0
  6453                           tblptru	equ	0xFF8
  6454                           tblptrh	equ	0xFF7
  6455                           tblptrl	equ	0xFF6
  6456                           tablat	equ	0xFF5
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           intcon2	equ	0xFF1
  6460                           intcon3	equ	0xFF0
  6461                           postinc0	equ	0xFEE
  6462                           wreg	equ	0xFE8
  6463                           postdec1	equ	0xFE5
  6464                           plusw1	equ	0xFE3
  6465                           fsr1l	equ	0xFE1
  6466                           postinc2	equ	0xFDE
  6467                           plusw2	equ	0xFDB
  6468                           fsr2h	equ	0xFDA
  6469                           fsr2l	equ	0xFD9
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function _Read_Volt *****************
  6473 ;; Defined at:
  6474 ;;		line 156 in file "utils.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;  ADC_Channel     1    wreg     unsigned char 
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;  ADC_Channel     1   66[COMRAM] unsigned char 
  6479 ;;  volt            3   63[COMRAM] float 
  6480 ;;  nStep           2   67[COMRAM] int 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  3   60[COMRAM] float 
  6483 ;; Registers used:
  6484 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6490 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;Total ram usage:        9 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    4
  6497 ;; This function calls:
  6498 ;;		___awtoft
  6499 ;;		___ftdiv
  6500 ;;		___wmul
  6501 ;;		_get_full_ADC
  6502 ;; This function is called by:
  6503 ;;		_main
  6504 ;;		_Setup_Fan_Temp
  6505 ;;		_Do_Setup_Time
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text17
  6510  004082                     __ptext17:
  6511                           	opt stack 0
  6512  004082                     _Read_Volt:
  6513                           	opt stack 25
  6514                           
  6515                           ;incstack = 0
  6516                           ;Read_Volt@ADC_Channel stored from wreg
  6517  004082  6E43               	movwf	Read_Volt@ADC_Channel,c
  6518                           
  6519                           ;utils.c: 158: ADCON0 = ADC_Channel * 4 + 1;
  6520  004084  5043               	movf	Read_Volt@ADC_Channel,w,c
  6521  004086  0D04               	mullw	4
  6522  004088  28F3               	incf	prodl,w,c
  6523  00408A  6EC2               	movwf	4034,c	;volatile
  6524                           
  6525                           ;utils.c: 159: int nStep = get_full_ADC();
  6526  00408C  EC28  F024         	call	_get_full_ADC	;wreg free
  6527  004090  C011  F044         	movff	?_get_full_ADC,Read_Volt@nStep
  6528  004094  C012  F045         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  6529                           
  6530                           ;utils.c: 160: float volt = nStep * 5 /1024.0;
  6531  004098  C044  F011         	movff	Read_Volt@nStep,___wmul@multiplier
  6532  00409C  C045  F012         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  6533  0040A0  0E00               	movlw	0
  6534  0040A2  6E14               	movwf	___wmul@multiplicand+1,c
  6535  0040A4  0E05               	movlw	5
  6536  0040A6  6E13               	movwf	___wmul@multiplicand,c
  6537  0040A8  EC01  F024         	call	___wmul	;wreg free
  6538  0040AC  C011  F019         	movff	?___wmul,___awtoft@c
  6539  0040B0  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  6540  0040B4  EC10  F023         	call	___awtoft	;wreg free
  6541  0040B8  C019  F02E         	movff	?___awtoft,___ftdiv@f1
  6542  0040BC  C01A  F02F         	movff	?___awtoft+1,___ftdiv@f1+1
  6543  0040C0  C01B  F030         	movff	?___awtoft+2,___ftdiv@f1+2
  6544  0040C4  0E00               	movlw	0
  6545  0040C6  6E31               	movwf	___ftdiv@f2,c
  6546  0040C8  0E80               	movlw	128
  6547  0040CA  6E32               	movwf	___ftdiv@f2+1,c
  6548  0040CC  0E44               	movlw	68
  6549  0040CE  6E33               	movwf	___ftdiv@f2+2,c
  6550  0040D0  EC72  F01A         	call	___ftdiv	;wreg free
  6551  0040D4  C02E  F040         	movff	?___ftdiv,Read_Volt@volt
  6552  0040D8  C02F  F041         	movff	?___ftdiv+1,Read_Volt@volt+1
  6553  0040DC  C030  F042         	movff	?___ftdiv+2,Read_Volt@volt+2
  6554                           
  6555                           ;utils.c: 161: return (volt);
  6556  0040E0  C040  F03D         	movff	Read_Volt@volt,?_Read_Volt
  6557  0040E4  C041  F03E         	movff	Read_Volt@volt+1,?_Read_Volt+1
  6558  0040E8  C042  F03F         	movff	Read_Volt@volt+2,?_Read_Volt+2
  6559  0040EC  D000               	goto	l490
  6560  0040EE                     l490:
  6561  0040EE  0012               	return		;funcret
  6562  0040F0                     __end_of_Read_Volt:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon2	equ	0xFF1
  6571                           intcon3	equ	0xFF0
  6572                           postinc0	equ	0xFEE
  6573                           wreg	equ	0xFE8
  6574                           postdec1	equ	0xFE5
  6575                           plusw1	equ	0xFE3
  6576                           fsr1l	equ	0xFE1
  6577                           postinc2	equ	0xFDE
  6578                           plusw2	equ	0xFDB
  6579                           fsr2h	equ	0xFDA
  6580                           fsr2l	equ	0xFD9
  6581                           status	equ	0xFD8
  6582                           
  6583 ;; *************** function _get_full_ADC *****************
  6584 ;; Defined at:
  6585 ;;		line 164 in file "utils.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;		None
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  result          2   20[COMRAM] unsigned int 
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  2   16[COMRAM] unsigned int 
  6592 ;; Registers used:
  6593 ;;		wreg, status,2, status,0
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6599 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;Total ram usage:        6 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    2
  6606 ;; This function calls:
  6607 ;;		Nothing
  6608 ;; This function is called by:
  6609 ;;		_Read_Volt
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           	psect	text18
  6614  004850                     __ptext18:
  6615                           	opt stack 0
  6616  004850                     _get_full_ADC:
  6617                           	opt stack 26
  6618                           
  6619                           ;utils.c: 166: unsigned int result;
  6620                           ;utils.c: 167: ADCON0bits.GO=1;
  6621                           
  6622                           ;incstack = 0
  6623  004850  82C2               	bsf	4034,1,c	;volatile
  6624                           
  6625                           ;utils.c: 168: while(ADCON0bits.DONE==1);
  6626  004852  D000               	goto	l493
  6627  004854                     l493:
  6628  004854  B2C2               	btfsc	4034,1,c	;volatile
  6629  004856  D7FE               	goto	l493
  6630                           
  6631                           ;utils.c: 169: result = (ADRESH * 0x100) + ADRESL;
  6632  004858  50C4               	movf	4036,w,c	;volatile
  6633  00485A  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  6634  00485C  6A13               	clrf	??_get_full_ADC& (0+255),c
  6635  00485E  50C3               	movf	4035,w,c	;volatile
  6636  004860  2413               	addwf	??_get_full_ADC,w,c
  6637  004862  6E15               	movwf	get_full_ADC@result,c
  6638  004864  0E00               	movlw	0
  6639  004866  2014               	addwfc	??_get_full_ADC+1,w,c
  6640  004868  6E16               	movwf	get_full_ADC@result+1,c
  6641                           
  6642                           ;utils.c: 171: return result;
  6643  00486A  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  6644  00486E  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  6645  004872  D000               	goto	l496
  6646  004874                     l496:
  6647  004874  0012               	return		;funcret
  6648  004876                     __end_of_get_full_ADC:
  6649                           	opt stack 0
  6650                           tblptru	equ	0xFF8
  6651                           tblptrh	equ	0xFF7
  6652                           tblptrl	equ	0xFF6
  6653                           tablat	equ	0xFF5
  6654                           prodh	equ	0xFF4
  6655                           prodl	equ	0xFF3
  6656                           intcon2	equ	0xFF1
  6657                           intcon3	equ	0xFF0
  6658                           postinc0	equ	0xFEE
  6659                           wreg	equ	0xFE8
  6660                           postdec1	equ	0xFE5
  6661                           plusw1	equ	0xFE3
  6662                           fsr1l	equ	0xFE1
  6663                           postinc2	equ	0xFDE
  6664                           plusw2	equ	0xFDB
  6665                           fsr2h	equ	0xFDA
  6666                           fsr2l	equ	0xFD9
  6667                           status	equ	0xFD8
  6668                           
  6669 ;; *************** function ___awtoft *****************
  6670 ;; Defined at:
  6671 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;  c               2   24[COMRAM] int 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  sign            1   27[COMRAM] unsigned char 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  3   24[COMRAM] float 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2, status,0, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6685 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;Total ram usage:        4 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    3
  6692 ;; This function calls:
  6693 ;;		___ftpack
  6694 ;; This function is called by:
  6695 ;;		_Read_Volt
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           	psect	text19
  6700  004620                     __ptext19:
  6701                           	opt stack 0
  6702  004620                     ___awtoft:
  6703                           	opt stack 25
  6704                           
  6705                           ;incstack = 0
  6706  004620  0E00               	movlw	0
  6707  004622  6E1C               	movwf	___awtoft@sign,c
  6708  004624  AE1A               	btfss	___awtoft@c+1,7,c
  6709  004626  D007               	goto	l9397
  6710  004628  6C19               	negf	___awtoft@c,c
  6711  00462A  1E1A               	comf	___awtoft@c+1,f,c
  6712  00462C  B0D8               	btfsc	status,0,c
  6713  00462E  2A1A               	incf	___awtoft@c+1,f,c
  6714  004630  0E01               	movlw	1
  6715  004632  6E1C               	movwf	___awtoft@sign,c
  6716  004634  D000               	goto	l9397
  6717  004636                     l9397:
  6718  004636  C019  F011         	movff	___awtoft@c,___ftpack@arg
  6719  00463A  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  6720  00463E  6A13               	clrf	___ftpack@arg+2,c
  6721  004640  0E8E               	movlw	142
  6722  004642  6E14               	movwf	___ftpack@exp,c
  6723  004644  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  6724  004648  EC51  F01B         	call	___ftpack	;wreg free
  6725  00464C  C011  F019         	movff	?___ftpack,?___awtoft
  6726  004650  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  6727  004654  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  6728  004658  D000               	goto	l1697
  6729  00465A                     l1697:
  6730  00465A  0012               	return		;funcret
  6731  00465C                     __end_of___awtoft:
  6732                           	opt stack 0
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           intcon2	equ	0xFF1
  6740                           intcon3	equ	0xFF0
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           postdec1	equ	0xFE5
  6744                           plusw1	equ	0xFE3
  6745                           fsr1l	equ	0xFE1
  6746                           postinc2	equ	0xFDE
  6747                           plusw2	equ	0xFDB
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8
  6751                           
  6752 ;; *************** function _Monitor_Fan *****************
  6753 ;; Defined at:
  6754 ;;		line 38 in file "Fan_Support.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;		None
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;		None
  6759 ;; Return value:  Size  Location     Type
  6760 ;;		None               void
  6761 ;; Registers used:
  6762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;Total ram usage:        0 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:    7
  6775 ;; This function calls:
  6776 ;;		_Turn_Off_Fan
  6777 ;;		_do_update_pwm
  6778 ;;		_get_duty_cycle
  6779 ;; This function is called by:
  6780 ;;		_main
  6781 ;;		_Do_Setup_Time
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text20
  6786  00437E                     __ptext20:
  6787                           	opt stack 0
  6788  00437E                     _Monitor_Fan:
  6789                           	opt stack 23
  6790                           
  6791                           ;Fan_Support.c: 45: if (FANMODE == 1)
  6792                           
  6793                           ;incstack = 0
  6794  00437E  0100               	movlb	0	; () banked
  6795  004380  05E2               	decf	_FANMODE& (0+255),w,b
  6796  004382  A4D8               	btfss	status,2,c
  6797  004384  D00E               	goto	l9405
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;Fan_Support.c: 46: {
  6801                           ;Fan_Support.c: 47: get_duty_cycle (tempF, fan_set_temp);
  6802  004386  506E               	movf	_tempF,w,c
  6803  004388  6E11               	movwf	get_duty_cycle@temp,c
  6804  00438A  6A12               	clrf	get_duty_cycle@temp+1,c
  6805  00438C  BE11               	btfsc	get_duty_cycle@temp,7,c
  6806  00438E  0612               	decf	get_duty_cycle@temp+1,f,c
  6807  004390  C0B6  F013         	movff	_fan_set_temp,get_duty_cycle@set_temp
  6808  004394  6A14               	clrf	get_duty_cycle@set_temp+1,c
  6809  004396  EC0D  F01F         	call	_get_duty_cycle	;wreg free
  6810                           
  6811                           ;Fan_Support.c: 48: do_update_pwm(duty_cycle);
  6812  00439A  5067               	movf	_duty_cycle,w,c
  6813  00439C  EC0F  F01C         	call	_do_update_pwm
  6814  0043A0  D000               	goto	l9405
  6815  0043A2                     l9405:
  6816                           
  6817                           ;Fan_Support.c: 49: }
  6818                           ;Fan_Support.c: 57: if (FAN_TIMER_MODE != 0)
  6819  0043A2  5063               	movf	_FAN_TIMER_MODE,w,c
  6820  0043A4  B4D8               	btfsc	status,2,c
  6821  0043A6  D010               	goto	l47
  6822                           
  6823                           ;Fan_Support.c: 58: {
  6824                           ;Fan_Support.c: 59: if (FAN_TIMER_TIME != 0)
  6825  0043A8  0100               	movlb	0	; () banked
  6826  0043AA  51E3               	movf	_FAN_TIMER_TIME& (0+255),w,b
  6827  0043AC  B4D8               	btfsc	status,2,c
  6828  0043AE  D003               	goto	l9411
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;Fan_Support.c: 60: FAN_TIMER_TIME--;
  6832  0043B0  0100               	movlb	0	; () banked
  6833  0043B2  07E3               	decf	_FAN_TIMER_TIME& (0+255),f,b
  6834  0043B4  D000               	goto	l9411
  6835  0043B6                     l9411:
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;Fan_Support.c: 61: if (FAN_TIMER_TIME == 0)
  6839  0043B6  0100               	movlb	0	; () banked
  6840  0043B8  51E3               	movf	_FAN_TIMER_TIME& (0+255),w,b
  6841  0043BA  A4D8               	btfss	status,2,c
  6842  0043BC  D005               	goto	l47
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;Fan_Support.c: 62: {
  6846                           ;Fan_Support.c: 63: FAN_TIMER_MODE = 0;
  6847  0043BE  0E00               	movlw	0
  6848  0043C0  6E63               	movwf	_FAN_TIMER_MODE,c
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;Fan_Support.c: 64: Turn_Off_Fan();
  6852  0043C2  ECF4  F024         	call	_Turn_Off_Fan	;wreg free
  6853  0043C6  D000               	goto	l47
  6854  0043C8                     l47:
  6855  0043C8  0012               	return		;funcret
  6856  0043CA                     __end_of_Monitor_Fan:
  6857                           	opt stack 0
  6858                           tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           intcon2	equ	0xFF1
  6865                           intcon3	equ	0xFF0
  6866                           postinc0	equ	0xFEE
  6867                           wreg	equ	0xFE8
  6868                           postdec1	equ	0xFE5
  6869                           plusw1	equ	0xFE3
  6870                           fsr1l	equ	0xFE1
  6871                           postinc2	equ	0xFDE
  6872                           plusw2	equ	0xFDB
  6873                           fsr2h	equ	0xFDA
  6874                           fsr2l	equ	0xFD9
  6875                           status	equ	0xFD8
  6876                           
  6877 ;; *************** function _get_duty_cycle *****************
  6878 ;; Defined at:
  6879 ;;		line 16 in file "Fan_Support.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;  temp            2   16[COMRAM] int 
  6882 ;;  set_temp        2   18[COMRAM] int 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  diff_temp       2   22[COMRAM] int 
  6885 ;;  dc              2   24[COMRAM] int 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  2   16[COMRAM] int 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6895 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;Total ram usage:       10 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    2
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_Monitor_Fan
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           	psect	text21
  6910  003E1A                     __ptext21:
  6911                           	opt stack 0
  6912  003E1A                     _get_duty_cycle:
  6913                           	opt stack 27
  6914                           
  6915                           ;Fan_Support.c: 18: int dc;
  6916                           ;Fan_Support.c: 23: if (temp < set_temp)
  6917                           
  6918                           ;incstack = 0
  6919  003E1A  5013               	movf	get_duty_cycle@set_temp,w,c
  6920  003E1C  5C11               	subwf	get_duty_cycle@temp,w,c
  6921  003E1E  5012               	movf	get_duty_cycle@temp+1,w,c
  6922  003E20  0A80               	xorlw	128
  6923  003E22  6E15               	movwf	??_get_duty_cycle& (0+255),c
  6924  003E24  5014               	movf	get_duty_cycle@set_temp+1,w,c
  6925  003E26  0A80               	xorlw	128
  6926  003E28  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  6927  003E2A  B0D8               	btfsc	status,0,c
  6928  003E2C  D01D               	goto	l6503
  6929                           
  6930                           ;Fan_Support.c: 24: {
  6931                           ;Fan_Support.c: 25: int diff_temp = (temp-set_temp);
  6932  003E2E  C013  F015         	movff	get_duty_cycle@set_temp,??_get_duty_cycle
  6933  003E32  C014  F016         	movff	get_duty_cycle@set_temp+1,??_get_duty_cycle+1
  6934  003E36  1E15               	comf	??_get_duty_cycle,f,c
  6935  003E38  1E16               	comf	??_get_duty_cycle+1,f,c
  6936  003E3A  4A15               	infsnz	??_get_duty_cycle,f,c
  6937  003E3C  2A16               	incf	??_get_duty_cycle+1,f,c
  6938  003E3E  5011               	movf	get_duty_cycle@temp,w,c
  6939  003E40  2415               	addwf	??_get_duty_cycle,w,c
  6940  003E42  6E17               	movwf	get_duty_cycle@diff_temp,c
  6941  003E44  5012               	movf	get_duty_cycle@temp+1,w,c
  6942  003E46  2016               	addwfc	??_get_duty_cycle+1,w,c
  6943  003E48  6E18               	movwf	get_duty_cycle@diff_temp+1,c
  6944                           
  6945                           ;Fan_Support.c: 26: dc = diff_temp * 4;
  6946  003E4A  C017  F015         	movff	get_duty_cycle@diff_temp,??_get_duty_cycle
  6947  003E4E  C018  F016         	movff	get_duty_cycle@diff_temp+1,??_get_duty_cycle+1
  6948  003E52  90D8               	bcf	status,0,c
  6949  003E54  3615               	rlcf	??_get_duty_cycle,f,c
  6950  003E56  3616               	rlcf	??_get_duty_cycle+1,f,c
  6951  003E58  90D8               	bcf	status,0,c
  6952  003E5A  3615               	rlcf	??_get_duty_cycle,f,c
  6953  003E5C  3616               	rlcf	??_get_duty_cycle+1,f,c
  6954  003E5E  C015  F019         	movff	??_get_duty_cycle,get_duty_cycle@dc
  6955  003E62  C016  F01A         	movff	??_get_duty_cycle+1,get_duty_cycle@dc+1
  6956  003E66  D000               	goto	l6503
  6957  003E68                     l6503:
  6958                           
  6959                           ;Fan_Support.c: 27: }
  6960                           ;Fan_Support.c: 29: if (dc > 100)
  6961  003E68  BE1A               	btfsc	get_duty_cycle@dc+1,7,c
  6962  003E6A  D00B               	goto	l6507
  6963  003E6C  501A               	movf	get_duty_cycle@dc+1,w,c
  6964  003E6E  E104               	bnz	u5190
  6965  003E70  0E65               	movlw	101
  6966  003E72  5C19               	subwf	get_duty_cycle@dc,w,c
  6967  003E74  A0D8               	btfss	status,0,c
  6968  003E76  D005               	goto	l6507
  6969  003E78                     u5190:
  6970                           
  6971                           ;Fan_Support.c: 30: dc = 100;
  6972  003E78  0E00               	movlw	0
  6973  003E7A  6E1A               	movwf	get_duty_cycle@dc+1,c
  6974  003E7C  0E64               	movlw	100
  6975  003E7E  6E19               	movwf	get_duty_cycle@dc,c
  6976  003E80  D000               	goto	l6507
  6977  003E82                     l6507:
  6978                           
  6979                           ;Fan_Support.c: 32: if (temp > 100)
  6980  003E82  BE12               	btfsc	get_duty_cycle@temp+1,7,c
  6981  003E84  D00B               	goto	l40
  6982  003E86  5012               	movf	get_duty_cycle@temp+1,w,c
  6983  003E88  E104               	bnz	u5200
  6984  003E8A  0E65               	movlw	101
  6985  003E8C  5C11               	subwf	get_duty_cycle@temp,w,c
  6986  003E8E  A0D8               	btfss	status,0,c
  6987  003E90  D005               	goto	l40
  6988  003E92                     u5200:
  6989                           
  6990                           ;Fan_Support.c: 33: dc = 0;
  6991  003E92  0E00               	movlw	0
  6992  003E94  6E1A               	movwf	get_duty_cycle@dc+1,c
  6993  003E96  0E00               	movlw	0
  6994  003E98  6E19               	movwf	get_duty_cycle@dc,c
  6995  003E9A  D000               	goto	l40
  6996  003E9C                     l40:
  6997  003E9C  0012               	return		;funcret
  6998  003E9E                     __end_of_get_duty_cycle:
  6999                           	opt stack 0
  7000                           tblptru	equ	0xFF8
  7001                           tblptrh	equ	0xFF7
  7002                           tblptrl	equ	0xFF6
  7003                           tablat	equ	0xFF5
  7004                           prodh	equ	0xFF4
  7005                           prodl	equ	0xFF3
  7006                           intcon2	equ	0xFF1
  7007                           intcon3	equ	0xFF0
  7008                           postinc0	equ	0xFEE
  7009                           wreg	equ	0xFE8
  7010                           postdec1	equ	0xFE5
  7011                           plusw1	equ	0xFE3
  7012                           fsr1l	equ	0xFE1
  7013                           postinc2	equ	0xFDE
  7014                           plusw2	equ	0xFDB
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _Initialize_Setup_Time_Screen *****************
  7020 ;; Defined at:
  7021 ;;		line 229 in file "Setup_Time.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;		None
  7026 ;; Return value:  Size  Location     Type
  7027 ;;		None               void
  7028 ;; Registers used:
  7029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;Total ram usage:        0 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    9
  7042 ;; This function calls:
  7043 ;;		_LCD_Reset
  7044 ;;		_TFT_GreenTab_Initialize
  7045 ;;		_drawtext
  7046 ;;		_fillRect
  7047 ;;		_fillScreen
  7048 ;;		_strcpy
  7049 ;; This function is called by:
  7050 ;;		_Do_Setup_Time
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text22
  7055  002BE0                     __ptext22:
  7056                           	opt stack 0
  7057  002BE0                     _Initialize_Setup_Time_Screen:
  7058                           	opt stack 20
  7059                           
  7060                           ;Setup_Time.c: 231: LCD_Reset();
  7061                           
  7062                           ;incstack = 0
  7063  002BE0  EC99  F025         	call	_LCD_Reset	;wreg free
  7064                           
  7065                           ;Setup_Time.c: 232: TFT_GreenTab_Initialize();
  7066  002BE4  ECEC  F023         	call	_TFT_GreenTab_Initialize	;wreg free
  7067                           
  7068                           ;Setup_Time.c: 233: fillScreen(0x0000);
  7069  002BE8  0E00               	movlw	0
  7070  002BEA  6E25               	movwf	fillScreen@color+1,c
  7071  002BEC  0E00               	movlw	0
  7072  002BEE  6E24               	movwf	fillScreen@color,c
  7073  002BF0  ECE6  F024         	call	_fillScreen	;wreg free
  7074                           
  7075                           ;Setup_Time.c: 234: if (1 == 0)
  7076  002BF4  D005               	goto	l9587
  7077                           
  7078                           ;Setup_Time.c: 235: {
  7079                           ;Setup_Time.c: 236: Timing_Txt[12] = 'S';
  7080  002BF6  0E53               	movlw	83
  7081  002BF8  0101               	movlb	1	; () banked
  7082  002BFA  6F44               	movwf	(_Timing_Txt+12)& (0+255),b
  7083                           
  7084                           ;Setup_Time.c: 237: Timing_Txt[13] = 'P';
  7085  002BFC  0E50               	movlw	80
  7086  002BFE  D004               	goto	L5
  7087  002C00                     l9587:
  7088                           
  7089                           ;Setup_Time.c: 239: else
  7090                           ;Setup_Time.c: 240: {
  7091                           ;Setup_Time.c: 241: Timing_Txt[12] = 'F';
  7092  002C00  0E46               	movlw	70
  7093  002C02  0101               	movlb	1	; () banked
  7094  002C04  6F44               	movwf	(_Timing_Txt+12)& (0+255),b
  7095                           
  7096                           ;Setup_Time.c: 242: Timing_Txt[13] = 'A';
  7097  002C06  0E41               	movlw	65
  7098  002C08                     L5:
  7099  002C08  0101               	movlb	1	; () banked
  7100  002C0A  6F45               	movwf	(_Timing_Txt+13)& (0+255),b
  7101                           
  7102                           ; BSR set to: 1
  7103                           ;Setup_Time.c: 243: }
  7104                           ;Setup_Time.c: 244: Timing_Txt[14] = 24/10 + '0';
  7105  002C0C  0E32               	movlw	50
  7106  002C0E  0101               	movlb	1	; () banked
  7107  002C10  6F46               	movwf	(_Timing_Txt+14)& (0+255),b
  7108                           
  7109                           ;Setup_Time.c: 245: Timing_Txt[15] = 24%10 + '0';
  7110  002C12  0E34               	movlw	52
  7111  002C14  0101               	movlb	1	; () banked
  7112  002C16  6F47               	movwf	(_Timing_Txt+15)& (0+255),b
  7113                           
  7114                           ;Setup_Time.c: 246: Timing_Txt[17] = 3%10 + '0';
  7115  002C18  0E33               	movlw	51
  7116  002C1A  0101               	movlb	1	; () banked
  7117  002C1C  6F49               	movwf	(_Timing_Txt+17)& (0+255),b
  7118                           
  7119                           ;Setup_Time.c: 247: Timing_Txt[19] = 13/10 + '0';
  7120  002C1E  0E31               	movlw	49
  7121  002C20  0101               	movlb	1	; () banked
  7122  002C22  6F4B               	movwf	(_Timing_Txt+19)& (0+255),b
  7123                           
  7124                           ;Setup_Time.c: 248: Timing_Txt[20] = 13%10 + '0';
  7125  002C24  0E33               	movlw	51
  7126  002C26  0101               	movlb	1	; () banked
  7127  002C28  6F4C               	movwf	(_Timing_Txt+20)& (0+255),b
  7128                           
  7129                           ; BSR set to: 1
  7130                           ;Setup_Time.c: 250: if (SYSTEM_ON == 1)
  7131  002C2A  0464               	decf	_SYSTEM_ON,w,c
  7132  002C2C  A4D8               	btfss	status,2,c
  7133  002C2E  D076               	goto	l1276
  7134                           
  7135                           ; BSR set to: 1
  7136                           ;Setup_Time.c: 251: {
  7137                           ;Setup_Time.c: 252: drawtext(1 , 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  7138  002C30  0E01               	movlw	1
  7139  002C32  6E39               	movwf	drawtext@y,c
  7140  002C34  0E38               	movlw	low _Timing_Txt
  7141  002C36  6E3A               	movwf	drawtext@_text,c
  7142  002C38  0E01               	movlw	high _Timing_Txt
  7143  002C3A  6E3B               	movwf	drawtext@_text+1,c
  7144  002C3C  0EFF               	movlw	255
  7145  002C3E  6E3D               	movwf	drawtext@color+1,c
  7146  002C40  683C               	setf	drawtext@color,c
  7147  002C42  0E00               	movlw	0
  7148  002C44  6E3F               	movwf	drawtext@bg+1,c
  7149  002C46  0E00               	movlw	0
  7150  002C48  6E3E               	movwf	drawtext@bg,c
  7151  002C4A  0E01               	movlw	1
  7152  002C4C  6E40               	movwf	drawtext@size,c
  7153  002C4E  0E01               	movlw	1
  7154  002C50  EC01  F01A         	call	_drawtext
  7155                           
  7156                           ;Setup_Time.c: 254: strcpy(txt, "Time Setup\0");
  7157  002C54  C061  F011         	movff	_txt,strcpy@to
  7158  002C58  C062  F012         	movff	_txt+1,strcpy@to+1
  7159  002C5C  0E88               	movlw	low STR_44
  7160  002C5E  6E13               	movwf	strcpy@from,c
  7161  002C60  0EFF               	movlw	high STR_44
  7162  002C62  6E14               	movwf	strcpy@from+1,c
  7163  002C64  EC4C  F023         	call	_strcpy	;wreg free
  7164                           
  7165                           ;Setup_Time.c: 255: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  7166  002C68  0E10               	movlw	16
  7167  002C6A  6E39               	movwf	drawtext@y,c
  7168  002C6C  C061  F03A         	movff	_txt,drawtext@_text
  7169  002C70  C062  F03B         	movff	_txt+1,drawtext@_text+1
  7170  002C74  0EF8               	movlw	248
  7171  002C76  6E3D               	movwf	drawtext@color+1,c
  7172  002C78  0E1F               	movlw	31
  7173  002C7A  6E3C               	movwf	drawtext@color,c
  7174  002C7C  0E00               	movlw	0
  7175  002C7E  6E3F               	movwf	drawtext@bg+1,c
  7176  002C80  0E00               	movlw	0
  7177  002C82  6E3E               	movwf	drawtext@bg,c
  7178  002C84  0E02               	movlw	2
  7179  002C86  6E40               	movwf	drawtext@size,c
  7180  002C88  0E04               	movlw	4
  7181  002C8A  EC01  F01A         	call	_drawtext
  7182                           
  7183                           ;Setup_Time.c: 257: strcpy(txt, "Time");
  7184  002C8E  C061  F011         	movff	_txt,strcpy@to
  7185  002C92  C062  F012         	movff	_txt+1,strcpy@to+1
  7186  002C96  0EC8               	movlw	low (STR_18+6)
  7187  002C98  6E13               	movwf	strcpy@from,c
  7188  002C9A  0EFF               	movlw	high (STR_18+6)
  7189  002C9C  6E14               	movwf	strcpy@from+1,c
  7190  002C9E  EC4C  F023         	call	_strcpy	;wreg free
  7191                           
  7192                           ;Setup_Time.c: 258: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  7193  002CA2  0E28               	movlw	40
  7194  002CA4  6E39               	movwf	drawtext@y,c
  7195  002CA6  C061  F03A         	movff	_txt,drawtext@_text
  7196  002CAA  C062  F03B         	movff	_txt+1,drawtext@_text+1
  7197  002CAE  0E00               	movlw	0
  7198  002CB0  6E3D               	movwf	drawtext@color+1,c
  7199  002CB2  0E1F               	movlw	31
  7200  002CB4  6E3C               	movwf	drawtext@color,c
  7201  002CB6  0E00               	movlw	0
  7202  002CB8  6E3F               	movwf	drawtext@bg+1,c
  7203  002CBA  0E00               	movlw	0
  7204  002CBC  6E3E               	movwf	drawtext@bg,c
  7205  002CBE  0E01               	movlw	1
  7206  002CC0  6E40               	movwf	drawtext@size,c
  7207  002CC2  0E32               	movlw	50
  7208  002CC4  EC01  F01A         	call	_drawtext
  7209                           
  7210                           ;Setup_Time.c: 260: fillRect(15-1, 52+16, 25,2,0x07FF);
  7211  002CC8  0E44               	movlw	68
  7212  002CCA  6E23               	movwf	fillRect@y,c
  7213  002CCC  0E19               	movlw	25
  7214  002CCE  6E24               	movwf	fillRect@w,c
  7215  002CD0  0E02               	movlw	2
  7216  002CD2  6E25               	movwf	fillRect@h,c
  7217  002CD4  0E07               	movlw	7
  7218  002CD6  6E27               	movwf	fillRect@color+1,c
  7219  002CD8  6826               	setf	fillRect@color,c
  7220  002CDA  0E0E               	movlw	14
  7221  002CDC  EC0A  F022         	call	_fillRect
  7222                           
  7223                           ;Setup_Time.c: 261: strcpy(txt, "Date");
  7224  002CE0  C061  F011         	movff	_txt,strcpy@to
  7225  002CE4  C062  F012         	movff	_txt+1,strcpy@to+1
  7226  002CE8  0ED7               	movlw	low STR_16
  7227  002CEA  6E13               	movwf	strcpy@from,c
  7228  002CEC  0EFF               	movlw	high STR_16
  7229  002CEE  6E14               	movwf	strcpy@from+1,c
  7230  002CF0  EC4C  F023         	call	_strcpy	;wreg free
  7231                           
  7232                           ;Setup_Time.c: 262: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  7233  002CF4  0E47               	movlw	71
  7234  002CF6  6E39               	movwf	drawtext@y,c
  7235  002CF8  C061  F03A         	movff	_txt,drawtext@_text
  7236  002CFC  C062  F03B         	movff	_txt+1,drawtext@_text+1
  7237  002D00  0EF8               	movlw	248
  7238  002D02  6E3D               	movwf	drawtext@color+1,c
  7239  002D04  0E00               	movlw	0
  7240  002D06  6E3C               	movwf	drawtext@color,c
  7241  002D08  0E00               	movlw	0
  7242  002D0A  6E3F               	movwf	drawtext@bg+1,c
  7243  002D0C  0E00               	movlw	0
  7244  002D0E  6E3E               	movwf	drawtext@bg,c
  7245  002D10  0E01               	movlw	1
  7246  002D12  6E40               	movwf	drawtext@size,c
  7247  002D14  0E32               	movlw	50
  7248  002D16  EC01  F01A         	call	_drawtext
  7249  002D1A  D000               	goto	l1276
  7250  002D1C                     l1276:
  7251  002D1C  0012               	return		;funcret
  7252  002D1E                     __end_of_Initialize_Setup_Time_Screen:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           prodh	equ	0xFF4
  7259                           prodl	equ	0xFF3
  7260                           intcon2	equ	0xFF1
  7261                           intcon3	equ	0xFF0
  7262                           postinc0	equ	0xFEE
  7263                           wreg	equ	0xFE8
  7264                           postdec1	equ	0xFE5
  7265                           plusw1	equ	0xFE3
  7266                           fsr1l	equ	0xFE1
  7267                           postinc2	equ	0xFDE
  7268                           plusw2	equ	0xFDB
  7269                           fsr2h	equ	0xFDA
  7270                           fsr2l	equ	0xFD9
  7271                           status	equ	0xFD8
  7272                           
  7273 ;; *************** function _Increase_Time *****************
  7274 ;; Defined at:
  7275 ;;		line 110 in file "Setup_Time.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;		None
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;		None
  7280 ;; Return value:  Size  Location     Type
  7281 ;;		None               void
  7282 ;; Registers used:
  7283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;Total ram usage:        0 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:   10
  7296 ;; This function calls:
  7297 ;;		_Update_Setup_Time_Screen
  7298 ;; This function is called by:
  7299 ;;		_Do_Setup_Time
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           	psect	text23
  7304  003982                     __ptext23:
  7305                           	opt stack 0
  7306  003982                     _Increase_Time:
  7307                           	opt stack 19
  7308                           
  7309                           ;Setup_Time.c: 112: switch (Select_Field)
  7310                           
  7311                           ;incstack = 0
  7312  003982  D03A               	goto	l9701
  7313  003984                     l9663:
  7314                           
  7315                           ;Setup_Time.c: 115: setup_hour++;
  7316  003984  0100               	movlb	0	; () banked
  7317  003986  2BF4               	incf	_setup_hour& (0+255),f,b
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;Setup_Time.c: 116: if (setup_hour == 24) setup_hour = 0;
  7321  003988  0E18               	movlw	24
  7322  00398A  0100               	movlb	0	; () banked
  7323  00398C  19F4               	xorwf	_setup_hour& (0+255),w,b
  7324  00398E                     L6:
  7325  00398E  A4D8               	btfss	status,2,c
  7326  003990  D048               	goto	l9703
  7327                           
  7328                           ; BSR set to: 0
  7329  003992  0E00               	movlw	0
  7330  003994  0100               	movlb	0	; () banked
  7331  003996  6FF4               	movwf	_setup_hour& (0+255),b
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;Setup_Time.c: 117: break;
  7335  003998  D044               	goto	l9703
  7336  00399A                     l9669:
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;Setup_Time.c: 121: setup_minute++;
  7340  00399A  0100               	movlb	0	; () banked
  7341  00399C  2BF5               	incf	_setup_minute& (0+255),f,b
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;Setup_Time.c: 122: if (setup_minute == 60) setup_hour = 0;
  7345  00399E  0E3C               	movlw	60
  7346  0039A0  0100               	movlb	0	; () banked
  7347  0039A2  19F5               	xorwf	_setup_minute& (0+255),w,b
  7348  0039A4  D7F4               	goto	L6
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;Setup_Time.c: 123: break;
  7352                           
  7353                           ; BSR set to: 0
  7354  0039A6  D03D               	goto	l9703
  7355  0039A8                     l9675:
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;Setup_Time.c: 127: setup_second++;
  7359  0039A8  0100               	movlb	0	; () banked
  7360  0039AA  2BF7               	incf	_setup_second& (0+255),f,b
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;Setup_Time.c: 128: if (setup_second == 60) setup_second = 0;
  7364  0039AC  0E3C               	movlw	60
  7365  0039AE  0100               	movlb	0	; () banked
  7366  0039B0  19F7               	xorwf	_setup_second& (0+255),w,b
  7367  0039B2  A4D8               	btfss	status,2,c
  7368  0039B4  D036               	goto	l9703
  7369                           
  7370                           ; BSR set to: 0
  7371  0039B6  0E00               	movlw	0
  7372  0039B8  0100               	movlb	0	; () banked
  7373  0039BA  6FF7               	movwf	_setup_second& (0+255),b
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;Setup_Time.c: 129: break;
  7377  0039BC  D032               	goto	l9703
  7378  0039BE                     l9681:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;Setup_Time.c: 133: setup_month++;
  7382  0039BE  0100               	movlb	0	; () banked
  7383  0039C0  2BF6               	incf	_setup_month& (0+255),f,b
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;Setup_Time.c: 134: if (setup_month == 13) setup_month = 1;
  7387  0039C2  0E0D               	movlw	13
  7388  0039C4  0100               	movlb	0	; () banked
  7389  0039C6  19F6               	xorwf	_setup_month& (0+255),w,b
  7390  0039C8  A4D8               	btfss	status,2,c
  7391  0039CA  D02B               	goto	l9703
  7392                           
  7393                           ; BSR set to: 0
  7394  0039CC  0E01               	movlw	1
  7395  0039CE  0100               	movlb	0	; () banked
  7396  0039D0  6FF6               	movwf	_setup_month& (0+255),b
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;Setup_Time.c: 135: break;
  7400  0039D2  D027               	goto	l9703
  7401  0039D4                     l9687:
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;Setup_Time.c: 139: setup_day++;
  7405  0039D4  0100               	movlb	0	; () banked
  7406  0039D6  2BF3               	incf	_setup_day& (0+255),f,b
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;Setup_Time.c: 140: if (setup_day == 32) setup_day = 1;
  7410  0039D8  0E20               	movlw	32
  7411  0039DA  0100               	movlb	0	; () banked
  7412  0039DC  19F3               	xorwf	_setup_day& (0+255),w,b
  7413  0039DE  A4D8               	btfss	status,2,c
  7414  0039E0  D020               	goto	l9703
  7415                           
  7416                           ; BSR set to: 0
  7417  0039E2  0E01               	movlw	1
  7418  0039E4  0100               	movlb	0	; () banked
  7419  0039E6  6FF3               	movwf	_setup_day& (0+255),b
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;Setup_Time.c: 141: break;
  7423  0039E8  D01C               	goto	l9703
  7424  0039EA                     l9693:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;Setup_Time.c: 145: setup_year++;
  7428  0039EA  0100               	movlb	0	; () banked
  7429  0039EC  2BF8               	incf	_setup_year& (0+255),f,b
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;Setup_Time.c: 146: if (setup_year == 100) setup_hour = 0;
  7433  0039EE  0E64               	movlw	100
  7434  0039F0  0100               	movlb	0	; () banked
  7435  0039F2  19F8               	xorwf	_setup_year& (0+255),w,b
  7436  0039F4  D7CC               	goto	L6
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;Setup_Time.c: 151: }
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;Setup_Time.c: 150: break;
  7443                           
  7444                           ;Setup_Time.c: 149: default:
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;Setup_Time.c: 147: break;
  7448                           
  7449                           ; BSR set to: 0
  7450  0039F6  D015               	goto	l9703
  7451  0039F8                     l9701:
  7452  0039F8  0100               	movlb	0	; () banked
  7453  0039FA  51EC               	movf	_Select_Field& (0+255),w,b
  7454                           
  7455                           ; Switch size 1, requested type "space"
  7456                           ; Number of cases is 6, Range of values is 0 to 5
  7457                           ; switch strategies available:
  7458                           ; Name         Instructions Cycles
  7459                           ; simple_byte           19    10 (average)
  7460                           ;	Chosen strategy is simple_byte
  7461  0039FC  0A00               	xorlw	0	; case 0
  7462  0039FE  B4D8               	btfsc	status,2,c
  7463  003A00  D7C1               	goto	l9663
  7464  003A02  0A01               	xorlw	1	; case 1
  7465  003A04  B4D8               	btfsc	status,2,c
  7466  003A06  D7C9               	goto	l9669
  7467  003A08  0A03               	xorlw	3	; case 2
  7468  003A0A  B4D8               	btfsc	status,2,c
  7469  003A0C  D7CD               	goto	l9675
  7470  003A0E  0A01               	xorlw	1	; case 3
  7471  003A10  B4D8               	btfsc	status,2,c
  7472  003A12  D7D5               	goto	l9681
  7473  003A14  0A07               	xorlw	7	; case 4
  7474  003A16  B4D8               	btfsc	status,2,c
  7475  003A18  D7DD               	goto	l9687
  7476  003A1A  0A01               	xorlw	1	; case 5
  7477  003A1C  B4D8               	btfsc	status,2,c
  7478  003A1E  D7E5               	goto	l9693
  7479  003A20  D000               	goto	l9703
  7480  003A22                     l9703:
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;Setup_Time.c: 152: Update_Setup_Time_Screen();
  7484  003A22  EC83  F014         	call	_Update_Setup_Time_Screen	;wreg free
  7485  003A26  0012               	return		;funcret
  7486  003A28                     __end_of_Increase_Time:
  7487                           	opt stack 0
  7488                           tblptru	equ	0xFF8
  7489                           tblptrh	equ	0xFF7
  7490                           tblptrl	equ	0xFF6
  7491                           tablat	equ	0xFF5
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           intcon2	equ	0xFF1
  7495                           intcon3	equ	0xFF0
  7496                           postinc0	equ	0xFEE
  7497                           wreg	equ	0xFE8
  7498                           postdec1	equ	0xFE5
  7499                           plusw1	equ	0xFE3
  7500                           fsr1l	equ	0xFE1
  7501                           postinc2	equ	0xFDE
  7502                           plusw2	equ	0xFDB
  7503                           fsr2h	equ	0xFDA
  7504                           fsr2l	equ	0xFD9
  7505                           status	equ	0xFD8
  7506                           
  7507 ;; *************** function _Go_Prev_Field *****************
  7508 ;; Defined at:
  7509 ;;		line 207 in file "Setup_Time.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;		None               void
  7516 ;; Registers used:
  7517 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;Total ram usage:        0 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    8
  7530 ;; This function calls:
  7531 ;;		_Update_Setup_Screen_Cursor_Backward
  7532 ;; This function is called by:
  7533 ;;		_Do_Setup_Time
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537                           	psect	text24
  7538  00494E                     __ptext24:
  7539                           	opt stack 0
  7540  00494E                     _Go_Prev_Field:
  7541                           	opt stack 21
  7542                           
  7543                           ;Setup_Time.c: 209: if (Select_Field == 0) Select_Field = 5;
  7544                           
  7545                           ;incstack = 0
  7546  00494E  0100               	movlb	0	; () banked
  7547  004950  51EC               	movf	_Select_Field& (0+255),w,b
  7548  004952  A4D8               	btfss	status,2,c
  7549  004954  D004               	goto	l7081
  7550                           
  7551                           ; BSR set to: 0
  7552  004956  0E05               	movlw	5
  7553  004958  0100               	movlb	0	; () banked
  7554  00495A  6FEC               	movwf	_Select_Field& (0+255),b
  7555  00495C  D003               	goto	l7083
  7556  00495E                     l7081:
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;Setup_Time.c: 210: else Select_Field--;
  7560  00495E  0100               	movlb	0	; () banked
  7561  004960  07EC               	decf	_Select_Field& (0+255),f,b
  7562  004962  D000               	goto	l7083
  7563  004964                     l7083:
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;Setup_Time.c: 211: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7567  004964  0100               	movlb	0	; () banked
  7568  004966  51EC               	movf	_Select_Field& (0+255),w,b
  7569  004968  ECA9  F013         	call	_Update_Setup_Screen_Cursor_Backward
  7570  00496C  0012               	return		;funcret
  7571  00496E                     __end_of_Go_Prev_Field:
  7572                           	opt stack 0
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           intcon2	equ	0xFF1
  7580                           intcon3	equ	0xFF0
  7581                           postinc0	equ	0xFEE
  7582                           wreg	equ	0xFE8
  7583                           postdec1	equ	0xFE5
  7584                           plusw1	equ	0xFE3
  7585                           fsr1l	equ	0xFE1
  7586                           postinc2	equ	0xFDE
  7587                           plusw2	equ	0xFDB
  7588                           fsr2h	equ	0xFDA
  7589                           fsr2l	equ	0xFD9
  7590                           status	equ	0xFD8
  7591                           
  7592 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  7593 ;; Defined at:
  7594 ;;		line 330 in file "Setup_Time.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  field           1    wreg     unsigned char 
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  field           1   45[COMRAM] unsigned char 
  7599 ;;  xinc            1   47[COMRAM] unsigned char 
  7600 ;;  yinc            1   46[COMRAM] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;Total ram usage:        3 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    7
  7617 ;; This function calls:
  7618 ;;		_fillRect
  7619 ;; This function is called by:
  7620 ;;		_Go_Prev_Field
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text25
  7625  002752                     __ptext25:
  7626                           	opt stack 0
  7627  002752                     _Update_Setup_Screen_Cursor_Backward:
  7628                           	opt stack 21
  7629                           
  7630                           ;incstack = 0
  7631                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  7632  002752  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  7633                           
  7634                           ;Setup_Time.c: 332: char xinc = 36;
  7635  002754  0E24               	movlw	36
  7636  002756  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  7637                           
  7638                           ;Setup_Time.c: 333: char yinc = 30;
  7639  002758  0E1E               	movlw	30
  7640  00275A  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  7641                           
  7642                           ;Setup_Time.c: 334: switch (field)
  7643  00275C  D0BF               	goto	l6805
  7644  00275E                     l6783:
  7645                           
  7646                           ;Setup_Time.c: 337: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  7647  00275E  0E44               	movlw	68
  7648  002760  6E23               	movwf	fillRect@y,c
  7649  002762  0E19               	movlw	25
  7650  002764  6E24               	movwf	fillRect@w,c
  7651  002766  0E02               	movlw	2
  7652  002768  6E25               	movwf	fillRect@h,c
  7653  00276A  0E00               	movlw	0
  7654  00276C  6E27               	movwf	fillRect@color+1,c
  7655  00276E  0E00               	movlw	0
  7656  002770  6E26               	movwf	fillRect@color,c
  7657  002772  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7658  002774  0F0E               	addlw	14
  7659  002776  EC0A  F022         	call	_fillRect
  7660                           
  7661                           ;Setup_Time.c: 338: fillRect(15-1, 52+16, 25,2,0x07FF);
  7662  00277A  0E44               	movlw	68
  7663  00277C  6E23               	movwf	fillRect@y,c
  7664  00277E  0E19               	movlw	25
  7665  002780  6E24               	movwf	fillRect@w,c
  7666  002782  0E02               	movlw	2
  7667  002784  6E25               	movwf	fillRect@h,c
  7668  002786  0E07               	movlw	7
  7669  002788  6E27               	movwf	fillRect@color+1,c
  7670  00278A  6826               	setf	fillRect@color,c
  7671  00278C  0E0E               	movlw	14
  7672  00278E  EC0A  F022         	call	_fillRect
  7673                           
  7674                           ;Setup_Time.c: 339: break;
  7675  002792  D0B8               	goto	l1301
  7676  002794                     l6785:
  7677                           
  7678                           ;Setup_Time.c: 342: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  7679  002794  0E44               	movlw	68
  7680  002796  6E23               	movwf	fillRect@y,c
  7681  002798  0E19               	movlw	25
  7682  00279A  6E24               	movwf	fillRect@w,c
  7683  00279C  0E02               	movlw	2
  7684  00279E  6E25               	movwf	fillRect@h,c
  7685  0027A0  0E00               	movlw	0
  7686  0027A2  6E27               	movwf	fillRect@color+1,c
  7687  0027A4  0E00               	movlw	0
  7688  0027A6  6E26               	movwf	fillRect@color,c
  7689  0027A8  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7690  0027AA  0D02               	mullw	2
  7691  0027AC  50F3               	movf	prodl,w,c
  7692  0027AE  0F0E               	addlw	14
  7693  0027B0  EC0A  F022         	call	_fillRect
  7694                           
  7695                           ;Setup_Time.c: 343: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  7696  0027B4  0E44               	movlw	68
  7697  0027B6  6E23               	movwf	fillRect@y,c
  7698  0027B8  0E19               	movlw	25
  7699  0027BA  6E24               	movwf	fillRect@w,c
  7700  0027BC  0E02               	movlw	2
  7701  0027BE  6E25               	movwf	fillRect@h,c
  7702  0027C0  0E07               	movlw	7
  7703  0027C2  6E27               	movwf	fillRect@color+1,c
  7704  0027C4  6826               	setf	fillRect@color,c
  7705  0027C6  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7706  0027C8  0F0E               	addlw	14
  7707  0027CA  EC0A  F022         	call	_fillRect
  7708                           
  7709                           ;Setup_Time.c: 344: break;
  7710  0027CE  D09A               	goto	l1301
  7711  0027D0                     l6789:
  7712                           
  7713                           ;Setup_Time.c: 347: fillRect(15-1, 52+16, 25,2,0x0000);
  7714  0027D0  0E44               	movlw	68
  7715  0027D2  6E23               	movwf	fillRect@y,c
  7716  0027D4  0E19               	movlw	25
  7717  0027D6  6E24               	movwf	fillRect@w,c
  7718  0027D8  0E02               	movlw	2
  7719  0027DA  6E25               	movwf	fillRect@h,c
  7720  0027DC  0E00               	movlw	0
  7721  0027DE  6E27               	movwf	fillRect@color+1,c
  7722  0027E0  0E00               	movlw	0
  7723  0027E2  6E26               	movwf	fillRect@color,c
  7724  0027E4  0E0E               	movlw	14
  7725  0027E6  EC0A  F022         	call	_fillRect
  7726                           
  7727                           ;Setup_Time.c: 348: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  7728  0027EA  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7729  0027EC  0F44               	addlw	68
  7730  0027EE  6E23               	movwf	fillRect@y,c
  7731  0027F0  0E19               	movlw	25
  7732  0027F2  6E24               	movwf	fillRect@w,c
  7733  0027F4  0E02               	movlw	2
  7734  0027F6  6E25               	movwf	fillRect@h,c
  7735  0027F8  0E00               	movlw	0
  7736  0027FA  6E27               	movwf	fillRect@color+1,c
  7737  0027FC  0E00               	movlw	0
  7738  0027FE  6E26               	movwf	fillRect@color,c
  7739  002800  0E0E               	movlw	14
  7740  002802  EC0A  F022         	call	_fillRect
  7741                           
  7742                           ;Setup_Time.c: 349: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  7743  002806  0E44               	movlw	68
  7744  002808  6E23               	movwf	fillRect@y,c
  7745  00280A  0E19               	movlw	25
  7746  00280C  6E24               	movwf	fillRect@w,c
  7747  00280E  0E02               	movlw	2
  7748  002810  6E25               	movwf	fillRect@h,c
  7749  002812  0E07               	movlw	7
  7750  002814  6E27               	movwf	fillRect@color+1,c
  7751  002816  6826               	setf	fillRect@color,c
  7752  002818  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7753  00281A  0D02               	mullw	2
  7754  00281C  50F3               	movf	prodl,w,c
  7755  00281E  0F0E               	addlw	14
  7756  002820  EC0A  F022         	call	_fillRect
  7757                           
  7758                           ;Setup_Time.c: 350: break;
  7759  002824  D06F               	goto	l1301
  7760  002826                     l6793:
  7761                           
  7762                           ;Setup_Time.c: 353: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  7763  002826  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7764  002828  0F44               	addlw	68
  7765  00282A  6E23               	movwf	fillRect@y,c
  7766  00282C  0E19               	movlw	25
  7767  00282E  6E24               	movwf	fillRect@w,c
  7768  002830  0E02               	movlw	2
  7769  002832  6E25               	movwf	fillRect@h,c
  7770  002834  0E00               	movlw	0
  7771  002836  6E27               	movwf	fillRect@color+1,c
  7772  002838  0E00               	movlw	0
  7773  00283A  6E26               	movwf	fillRect@color,c
  7774  00283C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7775  00283E  0F0E               	addlw	14
  7776  002840  EC0A  F022         	call	_fillRect
  7777                           
  7778                           ;Setup_Time.c: 354: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  7779  002844  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7780  002846  0F44               	addlw	68
  7781  002848  6E23               	movwf	fillRect@y,c
  7782  00284A  0E19               	movlw	25
  7783  00284C  6E24               	movwf	fillRect@w,c
  7784  00284E  0E02               	movlw	2
  7785  002850  6E25               	movwf	fillRect@h,c
  7786  002852  0E07               	movlw	7
  7787  002854  6E27               	movwf	fillRect@color+1,c
  7788  002856  6826               	setf	fillRect@color,c
  7789  002858  0E0E               	movlw	14
  7790  00285A  EC0A  F022         	call	_fillRect
  7791                           
  7792                           ;Setup_Time.c: 355: break;
  7793  00285E  D052               	goto	l1301
  7794  002860                     l6795:
  7795                           
  7796                           ;Setup_Time.c: 358: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  7797  002860  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7798  002862  0F44               	addlw	68
  7799  002864  6E23               	movwf	fillRect@y,c
  7800  002866  0E19               	movlw	25
  7801  002868  6E24               	movwf	fillRect@w,c
  7802  00286A  0E02               	movlw	2
  7803  00286C  6E25               	movwf	fillRect@h,c
  7804  00286E  0E00               	movlw	0
  7805  002870  6E27               	movwf	fillRect@color+1,c
  7806  002872  0E00               	movlw	0
  7807  002874  6E26               	movwf	fillRect@color,c
  7808  002876  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7809  002878  0D02               	mullw	2
  7810  00287A  50F3               	movf	prodl,w,c
  7811  00287C  0F0E               	addlw	14
  7812  00287E  EC0A  F022         	call	_fillRect
  7813                           
  7814                           ;Setup_Time.c: 359: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  7815  002882  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7816  002884  0F44               	addlw	68
  7817  002886  6E23               	movwf	fillRect@y,c
  7818  002888  0E19               	movlw	25
  7819  00288A  6E24               	movwf	fillRect@w,c
  7820  00288C  0E02               	movlw	2
  7821  00288E  6E25               	movwf	fillRect@h,c
  7822  002890  0E07               	movlw	7
  7823  002892  6E27               	movwf	fillRect@color+1,c
  7824  002894  6826               	setf	fillRect@color,c
  7825  002896  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7826  002898  0F0E               	addlw	14
  7827  00289A  EC0A  F022         	call	_fillRect
  7828                           
  7829                           ;Setup_Time.c: 360: break;
  7830  00289E  D032               	goto	l1301
  7831  0028A0                     l6799:
  7832                           
  7833                           ;Setup_Time.c: 363: fillRect(15-1, 52+16, 25,2,0x0000);
  7834  0028A0  0E44               	movlw	68
  7835  0028A2  6E23               	movwf	fillRect@y,c
  7836  0028A4  0E19               	movlw	25
  7837  0028A6  6E24               	movwf	fillRect@w,c
  7838  0028A8  0E02               	movlw	2
  7839  0028AA  6E25               	movwf	fillRect@h,c
  7840  0028AC  0E00               	movlw	0
  7841  0028AE  6E27               	movwf	fillRect@color+1,c
  7842  0028B0  0E00               	movlw	0
  7843  0028B2  6E26               	movwf	fillRect@color,c
  7844  0028B4  0E0E               	movlw	14
  7845  0028B6  EC0A  F022         	call	_fillRect
  7846                           
  7847                           ;Setup_Time.c: 364: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  7848  0028BA  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7849  0028BC  0F44               	addlw	68
  7850  0028BE  6E23               	movwf	fillRect@y,c
  7851  0028C0  0E19               	movlw	25
  7852  0028C2  6E24               	movwf	fillRect@w,c
  7853  0028C4  0E02               	movlw	2
  7854  0028C6  6E25               	movwf	fillRect@h,c
  7855  0028C8  0E07               	movlw	7
  7856  0028CA  6E27               	movwf	fillRect@color+1,c
  7857  0028CC  6826               	setf	fillRect@color,c
  7858  0028CE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7859  0028D0  0D02               	mullw	2
  7860  0028D2  50F3               	movf	prodl,w,c
  7861  0028D4  0F0E               	addlw	14
  7862  0028D6  EC0A  F022         	call	_fillRect
  7863                           
  7864                           ;Setup_Time.c: 366: }
  7865                           
  7866                           ;Setup_Time.c: 365: break;
  7867  0028DA  D014               	goto	l1301
  7868  0028DC                     l6805:
  7869  0028DC  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  7870                           
  7871                           ; Switch size 1, requested type "space"
  7872                           ; Number of cases is 6, Range of values is 0 to 5
  7873                           ; switch strategies available:
  7874                           ; Name         Instructions Cycles
  7875                           ; simple_byte           19    10 (average)
  7876                           ;	Chosen strategy is simple_byte
  7877  0028DE  0A00               	xorlw	0	; case 0
  7878  0028E0  B4D8               	btfsc	status,2,c
  7879  0028E2  D73D               	goto	l6783
  7880  0028E4  0A01               	xorlw	1	; case 1
  7881  0028E6  B4D8               	btfsc	status,2,c
  7882  0028E8  D755               	goto	l6785
  7883  0028EA  0A03               	xorlw	3	; case 2
  7884  0028EC  B4D8               	btfsc	status,2,c
  7885  0028EE  D770               	goto	l6789
  7886  0028F0  0A01               	xorlw	1	; case 3
  7887  0028F2  B4D8               	btfsc	status,2,c
  7888  0028F4  D798               	goto	l6793
  7889  0028F6  0A07               	xorlw	7	; case 4
  7890  0028F8  B4D8               	btfsc	status,2,c
  7891  0028FA  D7B2               	goto	l6795
  7892  0028FC  0A01               	xorlw	1	; case 5
  7893  0028FE  B4D8               	btfsc	status,2,c
  7894  002900  D7CF               	goto	l6799
  7895  002902  D000               	goto	l1301
  7896  002904                     l1301:
  7897  002904  0012               	return		;funcret
  7898  002906                     __end_of_Update_Setup_Screen_Cursor_Backward:
  7899                           	opt stack 0
  7900                           tblptru	equ	0xFF8
  7901                           tblptrh	equ	0xFF7
  7902                           tblptrl	equ	0xFF6
  7903                           tablat	equ	0xFF5
  7904                           prodh	equ	0xFF4
  7905                           prodl	equ	0xFF3
  7906                           intcon2	equ	0xFF1
  7907                           intcon3	equ	0xFF0
  7908                           postinc0	equ	0xFEE
  7909                           wreg	equ	0xFE8
  7910                           postdec1	equ	0xFE5
  7911                           plusw1	equ	0xFE3
  7912                           fsr1l	equ	0xFE1
  7913                           postinc2	equ	0xFDE
  7914                           plusw2	equ	0xFDB
  7915                           fsr2h	equ	0xFDA
  7916                           fsr2l	equ	0xFD9
  7917                           status	equ	0xFD8
  7918                           
  7919 ;; *************** function _Go_Next_Field *****************
  7920 ;; Defined at:
  7921 ;;		line 199 in file "Setup_Time.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;		None
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;		None
  7926 ;; Return value:  Size  Location     Type
  7927 ;;		None               void
  7928 ;; Registers used:
  7929 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;Total ram usage:        0 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    8
  7942 ;; This function calls:
  7943 ;;		_Update_Setup_Screen_Cursor_Forward
  7944 ;; This function is called by:
  7945 ;;		_Do_Setup_Time
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text26
  7950  00496E                     __ptext26:
  7951                           	opt stack 0
  7952  00496E                     _Go_Next_Field:
  7953                           	opt stack 21
  7954                           
  7955                           ;Setup_Time.c: 201: Select_Field++;
  7956                           
  7957                           ;incstack = 0
  7958  00496E  0100               	movlb	0	; () banked
  7959  004970  2BEC               	incf	_Select_Field& (0+255),f,b
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;Setup_Time.c: 202: if (Select_Field == 6) Select_Field = 0;
  7963  004972  0E06               	movlw	6
  7964  004974  0100               	movlb	0	; () banked
  7965  004976  19EC               	xorwf	_Select_Field& (0+255),w,b
  7966  004978  A4D8               	btfss	status,2,c
  7967  00497A  D004               	goto	l7091
  7968                           
  7969                           ; BSR set to: 0
  7970  00497C  0E00               	movlw	0
  7971  00497E  0100               	movlb	0	; () banked
  7972  004980  6FEC               	movwf	_Select_Field& (0+255),b
  7973  004982  D000               	goto	l7091
  7974  004984                     l7091:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;Setup_Time.c: 203: Update_Setup_Screen_Cursor_Forward(Select_Field);
  7978  004984  0100               	movlb	0	; () banked
  7979  004986  51EC               	movf	_Select_Field& (0+255),w,b
  7980  004988  ECCC  F012         	call	_Update_Setup_Screen_Cursor_Forward
  7981  00498C  0012               	return		;funcret
  7982  00498E                     __end_of_Go_Next_Field:
  7983                           	opt stack 0
  7984                           tblptru	equ	0xFF8
  7985                           tblptrh	equ	0xFF7
  7986                           tblptrl	equ	0xFF6
  7987                           tablat	equ	0xFF5
  7988                           prodh	equ	0xFF4
  7989                           prodl	equ	0xFF3
  7990                           intcon2	equ	0xFF1
  7991                           intcon3	equ	0xFF0
  7992                           postinc0	equ	0xFEE
  7993                           wreg	equ	0xFE8
  7994                           postdec1	equ	0xFE5
  7995                           plusw1	equ	0xFE3
  7996                           fsr1l	equ	0xFE1
  7997                           postinc2	equ	0xFDE
  7998                           plusw2	equ	0xFDB
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  8004 ;; Defined at:
  8005 ;;		line 290 in file "Setup_Time.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  field           1    wreg     unsigned char 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  field           1   45[COMRAM] unsigned char 
  8010 ;;  xinc            1   47[COMRAM] unsigned char 
  8011 ;;  yinc            1   46[COMRAM] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;		None               void
  8014 ;; Registers used:
  8015 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;Total ram usage:        3 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    7
  8028 ;; This function calls:
  8029 ;;		_fillRect
  8030 ;; This function is called by:
  8031 ;;		_Go_Next_Field
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           	psect	text27
  8036  002598                     __ptext27:
  8037                           	opt stack 0
  8038  002598                     _Update_Setup_Screen_Cursor_Forward:
  8039                           	opt stack 21
  8040                           
  8041                           ;incstack = 0
  8042                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  8043  002598  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  8044                           
  8045                           ;Setup_Time.c: 292: char xinc = 36;
  8046  00259A  0E24               	movlw	36
  8047  00259C  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  8048                           
  8049                           ;Setup_Time.c: 293: char yinc = 30;
  8050  00259E  0E1E               	movlw	30
  8051  0025A0  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  8052                           
  8053                           ;Setup_Time.c: 294: switch (field)
  8054  0025A2  D0C2               	goto	l6779
  8055  0025A4                     l6757:
  8056                           
  8057                           ;Setup_Time.c: 297: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  8058  0025A4  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8059  0025A6  0F44               	addlw	68
  8060  0025A8  6E23               	movwf	fillRect@y,c
  8061  0025AA  0E19               	movlw	25
  8062  0025AC  6E24               	movwf	fillRect@w,c
  8063  0025AE  0E02               	movlw	2
  8064  0025B0  6E25               	movwf	fillRect@h,c
  8065  0025B2  0E00               	movlw	0
  8066  0025B4  6E27               	movwf	fillRect@color+1,c
  8067  0025B6  0E00               	movlw	0
  8068  0025B8  6E26               	movwf	fillRect@color,c
  8069  0025BA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8070  0025BC  0D02               	mullw	2
  8071  0025BE  50F3               	movf	prodl,w,c
  8072  0025C0  0F0E               	addlw	14
  8073  0025C2  EC0A  F022         	call	_fillRect
  8074                           
  8075                           ;Setup_Time.c: 298: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8076  0025C6  0E44               	movlw	68
  8077  0025C8  6E23               	movwf	fillRect@y,c
  8078  0025CA  0E19               	movlw	25
  8079  0025CC  6E24               	movwf	fillRect@w,c
  8080  0025CE  0E02               	movlw	2
  8081  0025D0  6E25               	movwf	fillRect@h,c
  8082  0025D2  0E00               	movlw	0
  8083  0025D4  6E27               	movwf	fillRect@color+1,c
  8084  0025D6  0E00               	movlw	0
  8085  0025D8  6E26               	movwf	fillRect@color,c
  8086  0025DA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8087  0025DC  0D02               	mullw	2
  8088  0025DE  50F3               	movf	prodl,w,c
  8089  0025E0  0F0E               	addlw	14
  8090  0025E2  EC0A  F022         	call	_fillRect
  8091                           
  8092                           ;Setup_Time.c: 299: fillRect(15-1, 52+16, 25,2,0x07FF);
  8093  0025E6  0E44               	movlw	68
  8094  0025E8  6E23               	movwf	fillRect@y,c
  8095  0025EA  0E19               	movlw	25
  8096  0025EC  6E24               	movwf	fillRect@w,c
  8097  0025EE  0E02               	movlw	2
  8098  0025F0  6E25               	movwf	fillRect@h,c
  8099  0025F2  0E07               	movlw	7
  8100  0025F4  6E27               	movwf	fillRect@color+1,c
  8101  0025F6  6826               	setf	fillRect@color,c
  8102  0025F8  0E0E               	movlw	14
  8103  0025FA  EC0A  F022         	call	_fillRect
  8104                           
  8105                           ;Setup_Time.c: 300: break;
  8106  0025FE  D0A8               	goto	l1290
  8107  002600                     l6761:
  8108                           
  8109                           ;Setup_Time.c: 303: fillRect(15-1, 52+16, 25,2,0x0000);
  8110  002600  0E44               	movlw	68
  8111  002602  6E23               	movwf	fillRect@y,c
  8112  002604  0E19               	movlw	25
  8113  002606  6E24               	movwf	fillRect@w,c
  8114  002608  0E02               	movlw	2
  8115  00260A  6E25               	movwf	fillRect@h,c
  8116  00260C  0E00               	movlw	0
  8117  00260E  6E27               	movwf	fillRect@color+1,c
  8118  002610  0E00               	movlw	0
  8119  002612  6E26               	movwf	fillRect@color,c
  8120  002614  0E0E               	movlw	14
  8121  002616  EC0A  F022         	call	_fillRect
  8122                           
  8123                           ;Setup_Time.c: 304: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  8124  00261A  0E44               	movlw	68
  8125  00261C  6E23               	movwf	fillRect@y,c
  8126  00261E  0E19               	movlw	25
  8127  002620  6E24               	movwf	fillRect@w,c
  8128  002622  0E02               	movlw	2
  8129  002624  6E25               	movwf	fillRect@h,c
  8130  002626  0E07               	movlw	7
  8131  002628  6E27               	movwf	fillRect@color+1,c
  8132  00262A  6826               	setf	fillRect@color,c
  8133  00262C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8134  00262E  0F0E               	addlw	14
  8135  002630  EC0A  F022         	call	_fillRect
  8136                           
  8137                           ;Setup_Time.c: 305: break;
  8138  002634  D08D               	goto	l1290
  8139  002636                     l6763:
  8140                           
  8141                           ;Setup_Time.c: 309: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  8142  002636  0E44               	movlw	68
  8143  002638  6E23               	movwf	fillRect@y,c
  8144  00263A  0E19               	movlw	25
  8145  00263C  6E24               	movwf	fillRect@w,c
  8146  00263E  0E02               	movlw	2
  8147  002640  6E25               	movwf	fillRect@h,c
  8148  002642  0E00               	movlw	0
  8149  002644  6E27               	movwf	fillRect@color+1,c
  8150  002646  0E00               	movlw	0
  8151  002648  6E26               	movwf	fillRect@color,c
  8152  00264A  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8153  00264C  0F0E               	addlw	14
  8154  00264E  EC0A  F022         	call	_fillRect
  8155                           
  8156                           ;Setup_Time.c: 310: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  8157  002652  0E44               	movlw	68
  8158  002654  6E23               	movwf	fillRect@y,c
  8159  002656  0E19               	movlw	25
  8160  002658  6E24               	movwf	fillRect@w,c
  8161  00265A  0E02               	movlw	2
  8162  00265C  6E25               	movwf	fillRect@h,c
  8163  00265E  0E07               	movlw	7
  8164  002660  6E27               	movwf	fillRect@color+1,c
  8165  002662  6826               	setf	fillRect@color,c
  8166  002664  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8167  002666  0D02               	mullw	2
  8168  002668  50F3               	movf	prodl,w,c
  8169  00266A  0F0E               	addlw	14
  8170  00266C  EC0A  F022         	call	_fillRect
  8171                           
  8172                           ;Setup_Time.c: 311: break;
  8173  002670  D06F               	goto	l1290
  8174  002672                     l6767:
  8175                           
  8176                           ;Setup_Time.c: 314: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8177  002672  0E44               	movlw	68
  8178  002674  6E23               	movwf	fillRect@y,c
  8179  002676  0E19               	movlw	25
  8180  002678  6E24               	movwf	fillRect@w,c
  8181  00267A  0E02               	movlw	2
  8182  00267C  6E25               	movwf	fillRect@h,c
  8183  00267E  0E00               	movlw	0
  8184  002680  6E27               	movwf	fillRect@color+1,c
  8185  002682  0E00               	movlw	0
  8186  002684  6E26               	movwf	fillRect@color,c
  8187  002686  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8188  002688  0D02               	mullw	2
  8189  00268A  50F3               	movf	prodl,w,c
  8190  00268C  0F0E               	addlw	14
  8191  00268E  EC0A  F022         	call	_fillRect
  8192                           
  8193                           ;Setup_Time.c: 315: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  8194  002692  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8195  002694  0F44               	addlw	68
  8196  002696  6E23               	movwf	fillRect@y,c
  8197  002698  0E19               	movlw	25
  8198  00269A  6E24               	movwf	fillRect@w,c
  8199  00269C  0E02               	movlw	2
  8200  00269E  6E25               	movwf	fillRect@h,c
  8201  0026A0  0E07               	movlw	7
  8202  0026A2  6E27               	movwf	fillRect@color+1,c
  8203  0026A4  6826               	setf	fillRect@color,c
  8204  0026A6  0E0E               	movlw	14
  8205  0026A8  EC0A  F022         	call	_fillRect
  8206                           
  8207                           ;Setup_Time.c: 316: break;
  8208  0026AC  D051               	goto	l1290
  8209  0026AE                     l6771:
  8210                           
  8211                           ;Setup_Time.c: 319: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  8212  0026AE  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8213  0026B0  0F44               	addlw	68
  8214  0026B2  6E23               	movwf	fillRect@y,c
  8215  0026B4  0E19               	movlw	25
  8216  0026B6  6E24               	movwf	fillRect@w,c
  8217  0026B8  0E02               	movlw	2
  8218  0026BA  6E25               	movwf	fillRect@h,c
  8219  0026BC  0E00               	movlw	0
  8220  0026BE  6E27               	movwf	fillRect@color+1,c
  8221  0026C0  0E00               	movlw	0
  8222  0026C2  6E26               	movwf	fillRect@color,c
  8223  0026C4  0E0E               	movlw	14
  8224  0026C6  EC0A  F022         	call	_fillRect
  8225                           
  8226                           ;Setup_Time.c: 320: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  8227  0026CA  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8228  0026CC  0F44               	addlw	68
  8229  0026CE  6E23               	movwf	fillRect@y,c
  8230  0026D0  0E19               	movlw	25
  8231  0026D2  6E24               	movwf	fillRect@w,c
  8232  0026D4  0E02               	movlw	2
  8233  0026D6  6E25               	movwf	fillRect@h,c
  8234  0026D8  0E07               	movlw	7
  8235  0026DA  6E27               	movwf	fillRect@color+1,c
  8236  0026DC  6826               	setf	fillRect@color,c
  8237  0026DE  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8238  0026E0  0F0E               	addlw	14
  8239  0026E2  EC0A  F022         	call	_fillRect
  8240                           
  8241                           ;Setup_Time.c: 321: break;
  8242  0026E6  D034               	goto	l1290
  8243  0026E8                     l6773:
  8244                           
  8245                           ;Setup_Time.c: 324: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  8246  0026E8  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8247  0026EA  0F44               	addlw	68
  8248  0026EC  6E23               	movwf	fillRect@y,c
  8249  0026EE  0E19               	movlw	25
  8250  0026F0  6E24               	movwf	fillRect@w,c
  8251  0026F2  0E02               	movlw	2
  8252  0026F4  6E25               	movwf	fillRect@h,c
  8253  0026F6  0E00               	movlw	0
  8254  0026F8  6E27               	movwf	fillRect@color+1,c
  8255  0026FA  0E00               	movlw	0
  8256  0026FC  6E26               	movwf	fillRect@color,c
  8257  0026FE  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8258  002700  0F0E               	addlw	14
  8259  002702  EC0A  F022         	call	_fillRect
  8260                           
  8261                           ;Setup_Time.c: 325: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  8262  002706  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8263  002708  0F44               	addlw	68
  8264  00270A  6E23               	movwf	fillRect@y,c
  8265  00270C  0E19               	movlw	25
  8266  00270E  6E24               	movwf	fillRect@w,c
  8267  002710  0E02               	movlw	2
  8268  002712  6E25               	movwf	fillRect@h,c
  8269  002714  0E07               	movlw	7
  8270  002716  6E27               	movwf	fillRect@color+1,c
  8271  002718  6826               	setf	fillRect@color,c
  8272  00271A  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8273  00271C  0D02               	mullw	2
  8274  00271E  50F3               	movf	prodl,w,c
  8275  002720  0F0E               	addlw	14
  8276  002722  EC0A  F022         	call	_fillRect
  8277                           
  8278                           ;Setup_Time.c: 327: }
  8279                           
  8280                           ;Setup_Time.c: 326: break;
  8281  002726  D014               	goto	l1290
  8282  002728                     l6779:
  8283  002728  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  8284                           
  8285                           ; Switch size 1, requested type "space"
  8286                           ; Number of cases is 6, Range of values is 0 to 5
  8287                           ; switch strategies available:
  8288                           ; Name         Instructions Cycles
  8289                           ; simple_byte           19    10 (average)
  8290                           ;	Chosen strategy is simple_byte
  8291  00272A  0A00               	xorlw	0	; case 0
  8292  00272C  B4D8               	btfsc	status,2,c
  8293  00272E  D73A               	goto	l6757
  8294  002730  0A01               	xorlw	1	; case 1
  8295  002732  B4D8               	btfsc	status,2,c
  8296  002734  D765               	goto	l6761
  8297  002736  0A03               	xorlw	3	; case 2
  8298  002738  B4D8               	btfsc	status,2,c
  8299  00273A  D77D               	goto	l6763
  8300  00273C  0A01               	xorlw	1	; case 3
  8301  00273E  B4D8               	btfsc	status,2,c
  8302  002740  D798               	goto	l6767
  8303  002742  0A07               	xorlw	7	; case 4
  8304  002744  B4D8               	btfsc	status,2,c
  8305  002746  D7B3               	goto	l6771
  8306  002748  0A01               	xorlw	1	; case 5
  8307  00274A  B4D8               	btfsc	status,2,c
  8308  00274C  D7CD               	goto	l6773
  8309  00274E  D000               	goto	l1290
  8310  002750                     l1290:
  8311  002750  0012               	return		;funcret
  8312  002752                     __end_of_Update_Setup_Screen_Cursor_Forward:
  8313                           	opt stack 0
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon2	equ	0xFF1
  8321                           intcon3	equ	0xFF0
  8322                           postinc0	equ	0xFEE
  8323                           wreg	equ	0xFE8
  8324                           postdec1	equ	0xFE5
  8325                           plusw1	equ	0xFE3
  8326                           fsr1l	equ	0xFE1
  8327                           postinc2	equ	0xFDE
  8328                           plusw2	equ	0xFDB
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function _Exit_Time_Setup *****************
  8334 ;; Defined at:
  8335 ;;		line 222 in file "Setup_Time.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;Total ram usage:        0 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:   10
  8356 ;; This function calls:
  8357 ;;		_DS3231_Read_Time
  8358 ;;		_Initialize_Screen
  8359 ;; This function is called by:
  8360 ;;		_Do_Setup_Time
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text28
  8365  004BB0                     __ptext28:
  8366                           	opt stack 0
  8367  004BB0                     _Exit_Time_Setup:
  8368                           	opt stack 19
  8369                           
  8370                           ;Setup_Time.c: 224: DS3231_Read_Time();
  8371                           
  8372                           ;incstack = 0
  8373  004BB0  ECAE  F020         	call	_DS3231_Read_Time	;wreg free
  8374                           
  8375                           ;Setup_Time.c: 225: Initialize_Screen();
  8376  004BB4  EC81  F00B         	call	_Initialize_Screen	;wreg free
  8377                           
  8378                           ;Setup_Time.c: 226: In_Time_Setup = 0;
  8379  004BB8  0E00               	movlw	0
  8380  004BBA  0100               	movlb	0	; () banked
  8381  004BBC  6FE8               	movwf	_In_Time_Setup& (0+255),b
  8382                           
  8383                           ; BSR set to: 0
  8384  004BBE  0012               	return		;funcret
  8385  004BC0                     __end_of_Exit_Time_Setup:
  8386                           	opt stack 0
  8387                           tblptru	equ	0xFF8
  8388                           tblptrh	equ	0xFF7
  8389                           tblptrl	equ	0xFF6
  8390                           tablat	equ	0xFF5
  8391                           prodh	equ	0xFF4
  8392                           prodl	equ	0xFF3
  8393                           intcon2	equ	0xFF1
  8394                           intcon3	equ	0xFF0
  8395                           postinc0	equ	0xFEE
  8396                           wreg	equ	0xFE8
  8397                           postdec1	equ	0xFE5
  8398                           plusw1	equ	0xFE3
  8399                           fsr1l	equ	0xFE1
  8400                           postinc2	equ	0xFDE
  8401                           plusw2	equ	0xFDB
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function _Do_Save_New_Time *****************
  8407 ;; Defined at:
  8408 ;;		line 214 in file "Setup_Time.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;		None
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;		None
  8413 ;; Return value:  Size  Location     Type
  8414 ;;		None               void
  8415 ;; Registers used:
  8416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 0/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;Total ram usage:        0 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:   10
  8429 ;; This function calls:
  8430 ;;		_DS3231_Read_Time
  8431 ;;		_DS3231_Write_Time
  8432 ;;		_Initialize_Screen
  8433 ;; This function is called by:
  8434 ;;		_Do_Setup_Time
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           	psect	text29
  8439  004AF6                     __ptext29:
  8440                           	opt stack 0
  8441  004AF6                     _Do_Save_New_Time:
  8442                           	opt stack 19
  8443                           
  8444                           ;Setup_Time.c: 216: DS3231_Write_Time();
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;incstack = 0
  8448  004AF6  EC14  F01D         	call	_DS3231_Write_Time	;wreg free
  8449                           
  8450                           ;Setup_Time.c: 217: DS3231_Read_Time();
  8451  004AFA  ECAE  F020         	call	_DS3231_Read_Time	;wreg free
  8452                           
  8453                           ;Setup_Time.c: 218: Initialize_Screen();
  8454  004AFE  EC81  F00B         	call	_Initialize_Screen	;wreg free
  8455                           
  8456                           ;Setup_Time.c: 219: In_Time_Setup = 0;
  8457  004B02  0E00               	movlw	0
  8458  004B04  0100               	movlb	0	; () banked
  8459  004B06  6FE8               	movwf	_In_Time_Setup& (0+255),b
  8460                           
  8461                           ; BSR set to: 0
  8462  004B08  0012               	return		;funcret
  8463  004B0A                     __end_of_Do_Save_New_Time:
  8464                           	opt stack 0
  8465                           tblptru	equ	0xFF8
  8466                           tblptrh	equ	0xFF7
  8467                           tblptrl	equ	0xFF6
  8468                           tablat	equ	0xFF5
  8469                           prodh	equ	0xFF4
  8470                           prodl	equ	0xFF3
  8471                           intcon2	equ	0xFF1
  8472                           intcon3	equ	0xFF0
  8473                           postinc0	equ	0xFEE
  8474                           wreg	equ	0xFE8
  8475                           postdec1	equ	0xFE5
  8476                           plusw1	equ	0xFE3
  8477                           fsr1l	equ	0xFE1
  8478                           postinc2	equ	0xFDE
  8479                           plusw2	equ	0xFDB
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _Initialize_Screen *****************
  8485 ;; Defined at:
  8486 ;;		line 41 in file "Main_Screen.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;		None
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;		None
  8491 ;; Return value:  Size  Location     Type
  8492 ;;		None               void
  8493 ;; Registers used:
  8494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;Total ram usage:        0 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    9
  8507 ;; This function calls:
  8508 ;;		_LCD_Reset
  8509 ;;		_TFT_GreenTab_Initialize
  8510 ;;		_drawtext
  8511 ;;		_fillScreen
  8512 ;;		_strcpy
  8513 ;; This function is called by:
  8514 ;;		_main
  8515 ;;		_Do_Save_New_Fan_Temp
  8516 ;;		_Do_Save_New_Time
  8517 ;;		_Exit_Time_Setup
  8518 ;;		_Exit_Setup_Fan_Temp
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text30
  8523  001702                     __ptext30:
  8524                           	opt stack 0
  8525  001702                     _Initialize_Screen:
  8526                           	opt stack 19
  8527                           
  8528                           ;Main_Screen.c: 43: LCD_Reset();
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;incstack = 0
  8532  001702  EC99  F025         	call	_LCD_Reset	;wreg free
  8533                           
  8534                           ;Main_Screen.c: 44: TFT_GreenTab_Initialize();
  8535  001706  ECEC  F023         	call	_TFT_GreenTab_Initialize	;wreg free
  8536                           
  8537                           ;Main_Screen.c: 45: fillScreen(0x0000);
  8538  00170A  0E00               	movlw	0
  8539  00170C  6E25               	movwf	fillScreen@color+1,c
  8540  00170E  0E00               	movlw	0
  8541  001710  6E24               	movwf	fillScreen@color,c
  8542  001712  ECE6  F024         	call	_fillScreen	;wreg free
  8543                           
  8544                           ;Main_Screen.c: 46: if (1 == 0)
  8545  001716  D005               	goto	l9327
  8546                           
  8547                           ;Main_Screen.c: 47: {
  8548                           ;Main_Screen.c: 48: Timing_Txt[12] = 'S';
  8549  001718  0E53               	movlw	83
  8550  00171A  0101               	movlb	1	; () banked
  8551  00171C  6F44               	movwf	(_Timing_Txt+12)& (0+255),b
  8552                           
  8553                           ;Main_Screen.c: 49: Timing_Txt[13] = 'P';
  8554  00171E  0E50               	movlw	80
  8555  001720  D004               	goto	L7
  8556  001722                     l9327:
  8557                           
  8558                           ;Main_Screen.c: 51: else
  8559                           ;Main_Screen.c: 52: {
  8560                           ;Main_Screen.c: 53: Timing_Txt[12] = 'F';
  8561  001722  0E46               	movlw	70
  8562  001724  0101               	movlb	1	; () banked
  8563  001726  6F44               	movwf	(_Timing_Txt+12)& (0+255),b
  8564                           
  8565                           ;Main_Screen.c: 54: Timing_Txt[13] = 'A';
  8566  001728  0E41               	movlw	65
  8567  00172A                     L7:
  8568  00172A  0101               	movlb	1	; () banked
  8569  00172C  6F45               	movwf	(_Timing_Txt+13)& (0+255),b
  8570                           
  8571                           ; BSR set to: 1
  8572                           ;Main_Screen.c: 55: }
  8573                           ;Main_Screen.c: 56: Timing_Txt[14] = 24/10 + '0';
  8574  00172E  0E32               	movlw	50
  8575  001730  0101               	movlb	1	; () banked
  8576  001732  6F46               	movwf	(_Timing_Txt+14)& (0+255),b
  8577                           
  8578                           ;Main_Screen.c: 57: Timing_Txt[15] = 24%10 + '0';
  8579  001734  0E34               	movlw	52
  8580  001736  0101               	movlb	1	; () banked
  8581  001738  6F47               	movwf	(_Timing_Txt+15)& (0+255),b
  8582                           
  8583                           ;Main_Screen.c: 58: Timing_Txt[17] = 3%10 + '0';
  8584  00173A  0E33               	movlw	51
  8585  00173C  0101               	movlb	1	; () banked
  8586  00173E  6F49               	movwf	(_Timing_Txt+17)& (0+255),b
  8587                           
  8588                           ;Main_Screen.c: 59: Timing_Txt[19] = 13/10 + '0';
  8589  001740  0E31               	movlw	49
  8590  001742  0101               	movlb	1	; () banked
  8591  001744  6F4B               	movwf	(_Timing_Txt+19)& (0+255),b
  8592                           
  8593                           ;Main_Screen.c: 60: Timing_Txt[20] = 13%10 + '0';
  8594  001746  0E33               	movlw	51
  8595  001748  0101               	movlb	1	; () banked
  8596  00174A  6F4C               	movwf	(_Timing_Txt+20)& (0+255),b
  8597                           
  8598                           ; BSR set to: 1
  8599                           ;Main_Screen.c: 62: if (SYSTEM_ON == 1)
  8600  00174C  0464               	decf	_SYSTEM_ON,w,c
  8601  00174E  A4D8               	btfss	status,2,c
  8602  001750  D189               	goto	l9369
  8603                           
  8604                           ; BSR set to: 1
  8605                           ;Main_Screen.c: 63: {
  8606                           ;Main_Screen.c: 64: drawtext(1, 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  8607  001752  0E01               	movlw	1
  8608  001754  6E39               	movwf	drawtext@y,c
  8609  001756  0E38               	movlw	low _Timing_Txt
  8610  001758  6E3A               	movwf	drawtext@_text,c
  8611  00175A  0E01               	movlw	high _Timing_Txt
  8612  00175C  6E3B               	movwf	drawtext@_text+1,c
  8613  00175E  0EFF               	movlw	255
  8614  001760  6E3D               	movwf	drawtext@color+1,c
  8615  001762  683C               	setf	drawtext@color,c
  8616  001764  0E00               	movlw	0
  8617  001766  6E3F               	movwf	drawtext@bg+1,c
  8618  001768  0E00               	movlw	0
  8619  00176A  6E3E               	movwf	drawtext@bg,c
  8620  00176C  0E01               	movlw	1
  8621  00176E  6E40               	movwf	drawtext@size,c
  8622  001770  0E01               	movlw	1
  8623  001772  EC01  F01A         	call	_drawtext
  8624                           
  8625                           ;Main_Screen.c: 66: strcpy(txt, "Temperature:");
  8626  001776  C061  F011         	movff	_txt,strcpy@to
  8627  00177A  C062  F012         	movff	_txt+1,strcpy@to+1
  8628  00177E  0E7B               	movlw	low STR_12
  8629  001780  6E13               	movwf	strcpy@from,c
  8630  001782  0EFF               	movlw	high STR_12
  8631  001784  6E14               	movwf	strcpy@from+1,c
  8632  001786  EC4C  F023         	call	_strcpy	;wreg free
  8633                           
  8634                           ;Main_Screen.c: 67: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  8635  00178A  0E0B               	movlw	11
  8636  00178C  6E39               	movwf	drawtext@y,c
  8637  00178E  C061  F03A         	movff	_txt,drawtext@_text
  8638  001792  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8639  001796  0EF8               	movlw	248
  8640  001798  6E3D               	movwf	drawtext@color+1,c
  8641  00179A  0E1F               	movlw	31
  8642  00179C  6E3C               	movwf	drawtext@color,c
  8643  00179E  0E00               	movlw	0
  8644  0017A0  6E3F               	movwf	drawtext@bg+1,c
  8645  0017A2  0E00               	movlw	0
  8646  0017A4  6E3E               	movwf	drawtext@bg,c
  8647  0017A6  0E01               	movlw	1
  8648  0017A8  6E40               	movwf	drawtext@size,c
  8649  0017AA  0E18               	movlw	24
  8650  0017AC  EC01  F01A         	call	_drawtext
  8651                           
  8652                           ;Main_Screen.c: 68: strcpy(txt, "C/");
  8653  0017B0  C061  F011         	movff	_txt,strcpy@to
  8654  0017B4  C062  F012         	movff	_txt+1,strcpy@to+1
  8655  0017B8  0EF5               	movlw	low STR_13
  8656  0017BA  6E13               	movwf	strcpy@from,c
  8657  0017BC  0EFF               	movlw	high STR_13
  8658  0017BE  6E14               	movwf	strcpy@from+1,c
  8659  0017C0  EC4C  F023         	call	_strcpy	;wreg free
  8660                           
  8661                           ;Main_Screen.c: 69: drawtext(38 , 23, txt, 0xFFE0 , 0x0000, 2);
  8662  0017C4  0E17               	movlw	23
  8663  0017C6  6E39               	movwf	drawtext@y,c
  8664  0017C8  C061  F03A         	movff	_txt,drawtext@_text
  8665  0017CC  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8666  0017D0  0EFF               	movlw	255
  8667  0017D2  6E3D               	movwf	drawtext@color+1,c
  8668  0017D4  0EE0               	movlw	224
  8669  0017D6  6E3C               	movwf	drawtext@color,c
  8670  0017D8  0E00               	movlw	0
  8671  0017DA  6E3F               	movwf	drawtext@bg+1,c
  8672  0017DC  0E00               	movlw	0
  8673  0017DE  6E3E               	movwf	drawtext@bg,c
  8674  0017E0  0E02               	movlw	2
  8675  0017E2  6E40               	movwf	drawtext@size,c
  8676  0017E4  0E26               	movlw	38
  8677  0017E6  EC01  F01A         	call	_drawtext
  8678                           
  8679                           ;Main_Screen.c: 70: strcpy(txt, "F");
  8680  0017EA  C061  F011         	movff	_txt,strcpy@to
  8681  0017EE  C062  F012         	movff	_txt+1,strcpy@to+1
  8682  0017F2  0E1E               	movlw	low (STR_35+18)
  8683  0017F4  6E13               	movwf	strcpy@from,c
  8684  0017F6  0EFF               	movlw	high (STR_35+18)
  8685  0017F8  6E14               	movwf	strcpy@from+1,c
  8686  0017FA  EC4C  F023         	call	_strcpy	;wreg free
  8687                           
  8688                           ;Main_Screen.c: 71: drawtext(110 , 23, txt, 0xFFE0 , 0x0000, 2);
  8689  0017FE  0E17               	movlw	23
  8690  001800  6E39               	movwf	drawtext@y,c
  8691  001802  C061  F03A         	movff	_txt,drawtext@_text
  8692  001806  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8693  00180A  0EFF               	movlw	255
  8694  00180C  6E3D               	movwf	drawtext@color+1,c
  8695  00180E  0EE0               	movlw	224
  8696  001810  6E3C               	movwf	drawtext@color,c
  8697  001812  0E00               	movlw	0
  8698  001814  6E3F               	movwf	drawtext@bg+1,c
  8699  001816  0E00               	movlw	0
  8700  001818  6E3E               	movwf	drawtext@bg,c
  8701  00181A  0E02               	movlw	2
  8702  00181C  6E40               	movwf	drawtext@size,c
  8703  00181E  0E6E               	movlw	110
  8704  001820  EC01  F01A         	call	_drawtext
  8705                           
  8706                           ;Main_Screen.c: 72: strcpy(txt, "Time");
  8707  001824  C061  F011         	movff	_txt,strcpy@to
  8708  001828  C062  F012         	movff	_txt+1,strcpy@to+1
  8709  00182C  0EC8               	movlw	low (STR_18+6)
  8710  00182E  6E13               	movwf	strcpy@from,c
  8711  001830  0EFF               	movlw	high (STR_18+6)
  8712  001832  6E14               	movwf	strcpy@from+1,c
  8713  001834  EC4C  F023         	call	_strcpy	;wreg free
  8714                           
  8715                           ;Main_Screen.c: 73: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8716  001838  0E28               	movlw	40
  8717  00183A  6E39               	movwf	drawtext@y,c
  8718  00183C  C061  F03A         	movff	_txt,drawtext@_text
  8719  001840  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8720  001844  0E00               	movlw	0
  8721  001846  6E3D               	movwf	drawtext@color+1,c
  8722  001848  0E1F               	movlw	31
  8723  00184A  6E3C               	movwf	drawtext@color,c
  8724  00184C  0E00               	movlw	0
  8725  00184E  6E3F               	movwf	drawtext@bg+1,c
  8726  001850  0E00               	movlw	0
  8727  001852  6E3E               	movwf	drawtext@bg,c
  8728  001854  0E01               	movlw	1
  8729  001856  6E40               	movwf	drawtext@size,c
  8730  001858  0E32               	movlw	50
  8731  00185A  EC01  F01A         	call	_drawtext
  8732                           
  8733                           ;Main_Screen.c: 74: strcpy(txt, "Date");
  8734  00185E  C061  F011         	movff	_txt,strcpy@to
  8735  001862  C062  F012         	movff	_txt+1,strcpy@to+1
  8736  001866  0ED7               	movlw	low STR_16
  8737  001868  6E13               	movwf	strcpy@from,c
  8738  00186A  0EFF               	movlw	high STR_16
  8739  00186C  6E14               	movwf	strcpy@from+1,c
  8740  00186E  EC4C  F023         	call	_strcpy	;wreg free
  8741                           
  8742                           ;Main_Screen.c: 75: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  8743  001872  0E47               	movlw	71
  8744  001874  6E39               	movwf	drawtext@y,c
  8745  001876  C061  F03A         	movff	_txt,drawtext@_text
  8746  00187A  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8747  00187E  0EF8               	movlw	248
  8748  001880  6E3D               	movwf	drawtext@color+1,c
  8749  001882  0E00               	movlw	0
  8750  001884  6E3C               	movwf	drawtext@color,c
  8751  001886  0E00               	movlw	0
  8752  001888  6E3F               	movwf	drawtext@bg+1,c
  8753  00188A  0E00               	movlw	0
  8754  00188C  6E3E               	movwf	drawtext@bg,c
  8755  00188E  0E01               	movlw	1
  8756  001890  6E40               	movwf	drawtext@size,c
  8757  001892  0E32               	movlw	50
  8758  001894  EC01  F01A         	call	_drawtext
  8759                           
  8760                           ;Main_Screen.c: 76: strcpy(txt, "Timer Mode");
  8761  001898  C061  F011         	movff	_txt,strcpy@to
  8762  00189C  C062  F012         	movff	_txt+1,strcpy@to+1
  8763  0018A0  0EB7               	movlw	low STR_17
  8764  0018A2  6E13               	movwf	strcpy@from,c
  8765  0018A4  0EFF               	movlw	high STR_17
  8766  0018A6  6E14               	movwf	strcpy@from+1,c
  8767  0018A8  EC4C  F023         	call	_strcpy	;wreg free
  8768                           
  8769                           ;Main_Screen.c: 77: drawtext(1 , 100 , txt, 0xFFE0, 0x0000, 1);
  8770  0018AC  0E64               	movlw	100
  8771  0018AE  6E39               	movwf	drawtext@y,c
  8772  0018B0  C061  F03A         	movff	_txt,drawtext@_text
  8773  0018B4  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8774  0018B8  0EFF               	movlw	255
  8775  0018BA  6E3D               	movwf	drawtext@color+1,c
  8776  0018BC  0EE0               	movlw	224
  8777  0018BE  6E3C               	movwf	drawtext@color,c
  8778  0018C0  0E00               	movlw	0
  8779  0018C2  6E3F               	movwf	drawtext@bg+1,c
  8780  0018C4  0E00               	movlw	0
  8781  0018C6  6E3E               	movwf	drawtext@bg,c
  8782  0018C8  0E01               	movlw	1
  8783  0018CA  6E40               	movwf	drawtext@size,c
  8784  0018CC  0E01               	movlw	1
  8785  0018CE  EC01  F01A         	call	_drawtext
  8786                           
  8787                           ;Main_Screen.c: 78: strcpy(txt, "Timer Time");
  8788  0018D2  C061  F011         	movff	_txt,strcpy@to
  8789  0018D6  C062  F012         	movff	_txt+1,strcpy@to+1
  8790  0018DA  0EC2               	movlw	low STR_18
  8791  0018DC  6E13               	movwf	strcpy@from,c
  8792  0018DE  0EFF               	movlw	high STR_18
  8793  0018E0  6E14               	movwf	strcpy@from+1,c
  8794  0018E2  EC4C  F023         	call	_strcpy	;wreg free
  8795                           
  8796                           ;Main_Screen.c: 79: drawtext(65 , 100 , txt, 0xFFE0, 0x0000, 1);
  8797  0018E6  0E64               	movlw	100
  8798  0018E8  6E39               	movwf	drawtext@y,c
  8799  0018EA  C061  F03A         	movff	_txt,drawtext@_text
  8800  0018EE  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8801  0018F2  0EFF               	movlw	255
  8802  0018F4  6E3D               	movwf	drawtext@color+1,c
  8803  0018F6  0EE0               	movlw	224
  8804  0018F8  6E3C               	movwf	drawtext@color,c
  8805  0018FA  0E00               	movlw	0
  8806  0018FC  6E3F               	movwf	drawtext@bg+1,c
  8807  0018FE  0E00               	movlw	0
  8808  001900  6E3E               	movwf	drawtext@bg,c
  8809  001902  0E01               	movlw	1
  8810  001904  6E40               	movwf	drawtext@size,c
  8811  001906  0E41               	movlw	65
  8812  001908  EC01  F01A         	call	_drawtext
  8813                           
  8814                           ;Main_Screen.c: 80: strcpy(txt, "FAN SetTemp");
  8815  00190C  C061  F011         	movff	_txt,strcpy@to
  8816  001910  C062  F012         	movff	_txt+1,strcpy@to+1
  8817  001914  0EA0               	movlw	low STR_19
  8818  001916  6E13               	movwf	strcpy@from,c
  8819  001918  0EFF               	movlw	high STR_19
  8820  00191A  6E14               	movwf	strcpy@from+1,c
  8821  00191C  EC4C  F023         	call	_strcpy	;wreg free
  8822                           
  8823                           ;Main_Screen.c: 81: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
  8824  001920  0E78               	movlw	120
  8825  001922  6E39               	movwf	drawtext@y,c
  8826  001924  C061  F03A         	movff	_txt,drawtext@_text
  8827  001928  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8828  00192C  0E00               	movlw	0
  8829  00192E  6E3D               	movwf	drawtext@color+1,c
  8830  001930  0E1F               	movlw	31
  8831  001932  6E3C               	movwf	drawtext@color,c
  8832  001934  0E00               	movlw	0
  8833  001936  6E3F               	movwf	drawtext@bg+1,c
  8834  001938  0E00               	movlw	0
  8835  00193A  6E3E               	movwf	drawtext@bg,c
  8836  00193C  0E01               	movlw	1
  8837  00193E  6E40               	movwf	drawtext@size,c
  8838  001940  0E06               	movlw	6
  8839  001942  EC01  F01A         	call	_drawtext
  8840                           
  8841                           ;Main_Screen.c: 82: strcpy(txt, "Mode");
  8842  001946  C061  F011         	movff	_txt,strcpy@to
  8843  00194A  C062  F012         	movff	_txt+1,strcpy@to+1
  8844  00194E  0EBD               	movlw	low (STR_17+6)
  8845  001950  6E13               	movwf	strcpy@from,c
  8846  001952  0EFF               	movlw	high (STR_17+6)
  8847  001954  6E14               	movwf	strcpy@from+1,c
  8848  001956  EC4C  F023         	call	_strcpy	;wreg free
  8849                           
  8850                           ;Main_Screen.c: 83: drawtext(75, 120, txt, 0x001F , 0x0000, 1);
  8851  00195A  0E78               	movlw	120
  8852  00195C  6E39               	movwf	drawtext@y,c
  8853  00195E  C061  F03A         	movff	_txt,drawtext@_text
  8854  001962  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8855  001966  0E00               	movlw	0
  8856  001968  6E3D               	movwf	drawtext@color+1,c
  8857  00196A  0E1F               	movlw	31
  8858  00196C  6E3C               	movwf	drawtext@color,c
  8859  00196E  0E00               	movlw	0
  8860  001970  6E3F               	movwf	drawtext@bg+1,c
  8861  001972  0E00               	movlw	0
  8862  001974  6E3E               	movwf	drawtext@bg,c
  8863  001976  0E01               	movlw	1
  8864  001978  6E40               	movwf	drawtext@size,c
  8865  00197A  0E4B               	movlw	75
  8866  00197C  EC01  F01A         	call	_drawtext
  8867                           
  8868                           ;Main_Screen.c: 84: strcpy(txt, "SW");
  8869  001980  C061  F011         	movff	_txt,strcpy@to
  8870  001984  C062  F012         	movff	_txt+1,strcpy@to+1
  8871  001988  0EFB               	movlw	low STR_21
  8872  00198A  6E13               	movwf	strcpy@from,c
  8873  00198C  0EFF               	movlw	high STR_21
  8874  00198E  6E14               	movwf	strcpy@from+1,c
  8875  001990  EC4C  F023         	call	_strcpy	;wreg free
  8876                           
  8877                           ;Main_Screen.c: 85: drawtext(105, 120, txt, 0x001F , 0x0000, 1);
  8878  001994  0E78               	movlw	120
  8879  001996  6E39               	movwf	drawtext@y,c
  8880  001998  C061  F03A         	movff	_txt,drawtext@_text
  8881  00199C  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8882  0019A0  0E00               	movlw	0
  8883  0019A2  6E3D               	movwf	drawtext@color+1,c
  8884  0019A4  0E1F               	movlw	31
  8885  0019A6  6E3C               	movwf	drawtext@color,c
  8886  0019A8  0E00               	movlw	0
  8887  0019AA  6E3F               	movwf	drawtext@bg+1,c
  8888  0019AC  0E00               	movlw	0
  8889  0019AE  6E3E               	movwf	drawtext@bg,c
  8890  0019B0  0E01               	movlw	1
  8891  0019B2  6E40               	movwf	drawtext@size,c
  8892  0019B4  0E69               	movlw	105
  8893  0019B6  EC01  F01A         	call	_drawtext
  8894                           
  8895                           ;Main_Screen.c: 86: strcpy(txt, "DC");
  8896  0019BA  C061  F011         	movff	_txt,strcpy@to
  8897  0019BE  C062  F012         	movff	_txt+1,strcpy@to+1
  8898  0019C2  0EF8               	movlw	low STR_22
  8899  0019C4  6E13               	movwf	strcpy@from,c
  8900  0019C6  0EFF               	movlw	high STR_22
  8901  0019C8  6E14               	movwf	strcpy@from+1,c
  8902  0019CA  EC4C  F023         	call	_strcpy	;wreg free
  8903                           
  8904                           ;Main_Screen.c: 87: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  8905  0019CE  0E8C               	movlw	140
  8906  0019D0  6E39               	movwf	drawtext@y,c
  8907  0019D2  C061  F03A         	movff	_txt,drawtext@_text
  8908  0019D6  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8909  0019DA  0EFF               	movlw	255
  8910  0019DC  6E3D               	movwf	drawtext@color+1,c
  8911  0019DE  683C               	setf	drawtext@color,c
  8912  0019E0  0E00               	movlw	0
  8913  0019E2  6E3F               	movwf	drawtext@bg+1,c
  8914  0019E4  0E00               	movlw	0
  8915  0019E6  6E3E               	movwf	drawtext@bg,c
  8916  0019E8  0E01               	movlw	1
  8917  0019EA  6E40               	movwf	drawtext@size,c
  8918  0019EC  0E0C               	movlw	12
  8919  0019EE  EC01  F01A         	call	_drawtext
  8920                           
  8921                           ;Main_Screen.c: 88: strcpy(txt, "Volt");
  8922  0019F2  C061  F011         	movff	_txt,strcpy@to
  8923  0019F6  C062  F012         	movff	_txt+1,strcpy@to+1
  8924  0019FA  0EDC               	movlw	low STR_23
  8925  0019FC  6E13               	movwf	strcpy@from,c
  8926  0019FE  0EFF               	movlw	high STR_23
  8927  001A00  6E14               	movwf	strcpy@from+1,c
  8928  001A02  EC4C  F023         	call	_strcpy	;wreg free
  8929                           
  8930                           ;Main_Screen.c: 89: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
  8931  001A06  0E8C               	movlw	140
  8932  001A08  6E39               	movwf	drawtext@y,c
  8933  001A0A  C061  F03A         	movff	_txt,drawtext@_text
  8934  001A0E  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8935  001A12  0EFF               	movlw	255
  8936  001A14  6E3D               	movwf	drawtext@color+1,c
  8937  001A16  683C               	setf	drawtext@color,c
  8938  001A18  0E00               	movlw	0
  8939  001A1A  6E3F               	movwf	drawtext@bg+1,c
  8940  001A1C  0E00               	movlw	0
  8941  001A1E  6E3E               	movwf	drawtext@bg,c
  8942  001A20  0E01               	movlw	1
  8943  001A22  6E40               	movwf	drawtext@size,c
  8944  001A24  0E32               	movlw	50
  8945  001A26  EC01  F01A         	call	_drawtext
  8946                           
  8947                           ;Main_Screen.c: 90: strcpy(txt, "RPM");
  8948  001A2A  C061  F011         	movff	_txt,strcpy@to
  8949  001A2E  C062  F012         	movff	_txt+1,strcpy@to+1
  8950  001A32  0EF1               	movlw	low STR_24
  8951  001A34  6E13               	movwf	strcpy@from,c
  8952  001A36  0EFF               	movlw	high STR_24
  8953  001A38  6E14               	movwf	strcpy@from+1,c
  8954  001A3A  EC4C  F023         	call	_strcpy	;wreg free
  8955                           
  8956                           ;Main_Screen.c: 91: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  8957  001A3E  0E8C               	movlw	140
  8958  001A40  6E39               	movwf	drawtext@y,c
  8959  001A42  C061  F03A         	movff	_txt,drawtext@_text
  8960  001A46  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8961  001A4A  0EFF               	movlw	255
  8962  001A4C  6E3D               	movwf	drawtext@color+1,c
  8963  001A4E  683C               	setf	drawtext@color,c
  8964  001A50  0E00               	movlw	0
  8965  001A52  6E3F               	movwf	drawtext@bg+1,c
  8966  001A54  0E00               	movlw	0
  8967  001A56  6E3E               	movwf	drawtext@bg,c
  8968  001A58  0E01               	movlw	1
  8969  001A5A  6E40               	movwf	drawtext@size,c
  8970  001A5C  0E5F               	movlw	95
  8971  001A5E  EC01  F01A         	call	_drawtext
  8972                           
  8973                           ;Main_Screen.c: 92: }
  8974  001A62  D01E               	goto	l937
  8975  001A64                     l9369:
  8976                           
  8977                           ;Main_Screen.c: 93: else
  8978                           ;Main_Screen.c: 94: {
  8979                           ;Main_Screen.c: 95: strcpy(txt, "SYSTEM OFF");
  8980  001A64  C061  F011         	movff	_txt,strcpy@to
  8981  001A68  C062  F012         	movff	_txt+1,strcpy@to+1
  8982  001A6C  0EAC               	movlw	low STR_25
  8983  001A6E  6E13               	movwf	strcpy@from,c
  8984  001A70  0EFF               	movlw	high STR_25
  8985  001A72  6E14               	movwf	strcpy@from+1,c
  8986  001A74  EC4C  F023         	call	_strcpy	;wreg free
  8987                           
  8988                           ;Main_Screen.c: 96: drawtext(5 , 80 , txt, 0xF81F, 0x0000, 2);
  8989  001A78  0E50               	movlw	80
  8990  001A7A  6E39               	movwf	drawtext@y,c
  8991  001A7C  C061  F03A         	movff	_txt,drawtext@_text
  8992  001A80  C062  F03B         	movff	_txt+1,drawtext@_text+1
  8993  001A84  0EF8               	movlw	248
  8994  001A86  6E3D               	movwf	drawtext@color+1,c
  8995  001A88  0E1F               	movlw	31
  8996  001A8A  6E3C               	movwf	drawtext@color,c
  8997  001A8C  0E00               	movlw	0
  8998  001A8E  6E3F               	movwf	drawtext@bg+1,c
  8999  001A90  0E00               	movlw	0
  9000  001A92  6E3E               	movwf	drawtext@bg,c
  9001  001A94  0E02               	movlw	2
  9002  001A96  6E40               	movwf	drawtext@size,c
  9003  001A98  0E05               	movlw	5
  9004  001A9A  EC01  F01A         	call	_drawtext
  9005  001A9E  D000               	goto	l937
  9006  001AA0                     l937:
  9007  001AA0  0012               	return		;funcret
  9008  001AA2                     __end_of_Initialize_Screen:
  9009                           	opt stack 0
  9010                           tblptru	equ	0xFF8
  9011                           tblptrh	equ	0xFF7
  9012                           tblptrl	equ	0xFF6
  9013                           tablat	equ	0xFF5
  9014                           prodh	equ	0xFF4
  9015                           prodl	equ	0xFF3
  9016                           intcon2	equ	0xFF1
  9017                           intcon3	equ	0xFF0
  9018                           postinc0	equ	0xFEE
  9019                           wreg	equ	0xFE8
  9020                           postdec1	equ	0xFE5
  9021                           plusw1	equ	0xFE3
  9022                           fsr1l	equ	0xFE1
  9023                           postinc2	equ	0xFDE
  9024                           plusw2	equ	0xFDB
  9025                           fsr2h	equ	0xFDA
  9026                           fsr2l	equ	0xFD9
  9027                           status	equ	0xFD8
  9028                           
  9029 ;; *************** function _strcpy *****************
  9030 ;; Defined at:
  9031 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;  to              2   16[COMRAM] PTR unsigned char 
  9034 ;;		 -> NULL(0), Fan_SW_Txt(4), Fan_Mode_Txt(5), Fan_Timer_Mode_Txt(4), 
  9035 ;;  from            2   18[COMRAM] PTR const unsigned char 
  9036 ;;		 -> STR_46(5), STR_45(5), STR_44(12), STR_39(15), 
  9037 ;;		 -> STR_38(12), STR_33(4), STR_32(4), STR_31(5), 
  9038 ;;		 -> STR_30(5), STR_29(4), STR_28(4), STR_27(4), 
  9039 ;;		 -> STR_26(4), STR_25(11), STR_24(4), STR_23(5), 
  9040 ;;		 -> STR_22(3), STR_21(3), STR_20(5), STR_19(12), 
  9041 ;;		 -> STR_18(11), STR_17(11), STR_16(5), STR_15(5), 
  9042 ;;		 -> STR_14(2), STR_13(3), STR_12(13), 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;  cp              2   20[COMRAM] PTR unsigned char 
  9045 ;;		 -> NULL(0), Fan_SW_Txt(4), Fan_Mode_Txt(5), Fan_Timer_Mode_Txt(4), 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  2   16[COMRAM] PTR unsigned char 
  9048 ;; Registers used:
  9049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9055 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;Total ram usage:        6 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    2
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_Initialize_Screen
  9066 ;;		_Update_Screen
  9067 ;;		_Initialize_Setup_Fan_Screen
  9068 ;;		_Initialize_Setup_Time_Screen
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text31
  9073  004698                     __ptext31:
  9074                           	opt stack 0
  9075  004698                     _strcpy:
  9076                           	opt stack 27
  9077                           
  9078                           ;incstack = 0
  9079  004698  C011  F015         	movff	strcpy@to,strcpy@cp
  9080  00469C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  9081  0046A0  D005               	goto	l6445
  9082  0046A2                     l6443:
  9083  0046A2  4A15               	infsnz	strcpy@cp,f,c
  9084  0046A4  2A16               	incf	strcpy@cp+1,f,c
  9085  0046A6  4A13               	infsnz	strcpy@from,f,c
  9086  0046A8  2A14               	incf	strcpy@from+1,f,c
  9087  0046AA  D000               	goto	l6445
  9088  0046AC                     l6445:
  9089  0046AC  C013  FFF6         	movff	strcpy@from,tblptrl
  9090  0046B0  C014  FFF7         	movff	strcpy@from+1,tblptrh
  9091  0046B4                     	if	0	;tblptru may be non-zero
  9092  0046B4                     	endif
  9093  0046B4                     	if	0	;tblptru may be non-zero
  9094  0046B4                     	endif
  9095  0046B4  C015  FFD9         	movff	strcpy@cp,fsr2l
  9096  0046B8  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  9097  0046BC  0008               	tblrd		*
  9098  0046BE  CFF5 FFDF          	movff	tablat,indf2
  9099  0046C2  50DF               	movf	indf2,w,c
  9100  0046C4  A4D8               	btfss	status,2,c
  9101  0046C6  D7ED               	goto	l6443
  9102                           
  9103                           ;	Return value of _strcpy is never used
  9104  0046C8  0012               	return		;funcret
  9105  0046CA                     __end_of_strcpy:
  9106                           	opt stack 0
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           prodh	equ	0xFF4
  9112                           prodl	equ	0xFF3
  9113                           intcon2	equ	0xFF1
  9114                           intcon3	equ	0xFF0
  9115                           postinc0	equ	0xFEE
  9116                           wreg	equ	0xFE8
  9117                           postdec1	equ	0xFE5
  9118                           plusw1	equ	0xFE3
  9119                           fsr1l	equ	0xFE1
  9120                           indf2	equ	0xFDF
  9121                           postinc2	equ	0xFDE
  9122                           plusw2	equ	0xFDB
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function _fillScreen *****************
  9128 ;; Defined at:
  9129 ;;		line 567 in file "ST7735_TFT.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;  color           2   35[COMRAM] unsigned int 
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;		None
  9134 ;; Return value:  Size  Location     Type
  9135 ;;		None               void
  9136 ;; Registers used:
  9137 ;;		wreg, status,2, status,0, cstack
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9143 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;Total ram usage:        2 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:    6
  9150 ;; This function calls:
  9151 ;;		_fillRectangle
  9152 ;; This function is called by:
  9153 ;;		_Initialize_Screen
  9154 ;;		_Initialize_Setup_Fan_Screen
  9155 ;;		_Initialize_Setup_Time_Screen
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           	psect	text32
  9160  0049CC                     __ptext32:
  9161                           	opt stack 0
  9162  0049CC                     _fillScreen:
  9163                           	opt stack 22
  9164                           
  9165                           ;ST7735_TFT.c: 569: fillRectangle(0, 0, 128, 160, color);
  9166                           
  9167                           ;incstack = 0
  9168  0049CC  0E00               	movlw	0
  9169  0049CE  6E18               	movwf	fillRectangle@y,c
  9170  0049D0  0E80               	movlw	128
  9171  0049D2  6E19               	movwf	fillRectangle@w,c
  9172  0049D4  0EA0               	movlw	160
  9173  0049D6  6E1A               	movwf	fillRectangle@h,c
  9174  0049D8  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  9175  0049DC  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  9176  0049E0  0E00               	movlw	0
  9177  0049E2  ECE3  F01A         	call	_fillRectangle
  9178  0049E6  0012               	return		;funcret
  9179  0049E8                     __end_of_fillScreen:
  9180                           	opt stack 0
  9181                           tblptru	equ	0xFF8
  9182                           tblptrh	equ	0xFF7
  9183                           tblptrl	equ	0xFF6
  9184                           tablat	equ	0xFF5
  9185                           prodh	equ	0xFF4
  9186                           prodl	equ	0xFF3
  9187                           intcon2	equ	0xFF1
  9188                           intcon3	equ	0xFF0
  9189                           postinc0	equ	0xFEE
  9190                           wreg	equ	0xFE8
  9191                           postdec1	equ	0xFE5
  9192                           plusw1	equ	0xFE3
  9193                           fsr1l	equ	0xFE1
  9194                           indf2	equ	0xFDF
  9195                           postinc2	equ	0xFDE
  9196                           plusw2	equ	0xFDB
  9197                           fsr2h	equ	0xFDA
  9198                           fsr2l	equ	0xFD9
  9199                           status	equ	0xFD8
  9200                           
  9201 ;; *************** function _fillRectangle *****************
  9202 ;; Defined at:
  9203 ;;		line 451 in file "ST7735_TFT.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;  x               1    wreg     unsigned char 
  9206 ;;  y               1   23[COMRAM] unsigned char 
  9207 ;;  w               1   24[COMRAM] unsigned char 
  9208 ;;  h               1   25[COMRAM] unsigned char 
  9209 ;;  color           2   26[COMRAM] unsigned int 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;  x               1   34[COMRAM] unsigned char 
  9212 ;;  lo              1   33[COMRAM] unsigned char 
  9213 ;;  hi              1   32[COMRAM] unsigned char 
  9214 ;; Return value:  Size  Location     Type
  9215 ;;		None               void
  9216 ;; Registers used:
  9217 ;;		wreg, status,2, status,0, cstack
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9223 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;Total ram usage:       12 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    5
  9230 ;; This function calls:
  9231 ;;		_setAddrWindow
  9232 ;;		_spiwrite
  9233 ;; This function is called by:
  9234 ;;		_fillScreen
  9235 ;; This function uses a non-reentrant model
  9236 ;;
  9237                           
  9238                           	psect	text33
  9239  0035C6                     __ptext33:
  9240                           	opt stack 0
  9241  0035C6                     _fillRectangle:
  9242                           	opt stack 22
  9243                           
  9244                           ;incstack = 0
  9245                           ;fillRectangle@x stored from wreg
  9246  0035C6  6E23               	movwf	fillRectangle@x,c
  9247                           
  9248                           ;ST7735_TFT.c: 453: unsigned char hi, lo;
  9249                           ;ST7735_TFT.c: 454: if((x >= 128) || (y >= 160))
  9250  0035C8  0E80               	movlw	128
  9251  0035CA  6023               	cpfslt	fillRectangle@x,c
  9252  0035CC  D069               	goto	l311
  9253  0035CE  0E9F               	movlw	159
  9254  0035D0  6418               	cpfsgt	fillRectangle@y,c
  9255  0035D2  D001               	goto	l5653
  9256                           
  9257                           ;ST7735_TFT.c: 455: return;
  9258  0035D4  D065               	goto	l311
  9259  0035D6                     l5653:
  9260                           
  9261                           ;ST7735_TFT.c: 456: if((x + w - 1) >= 128)
  9262  0035D6  0EFF               	movlw	255
  9263  0035D8  6E1D               	movwf	??_fillRectangle& (0+255),c
  9264  0035DA  0EFF               	movlw	255
  9265  0035DC  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9266  0035DE  5019               	movf	fillRectangle@w,w,c
  9267  0035E0  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  9268  0035E4  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9269  0035E6  261F               	addwf	??_fillRectangle+2,f,c
  9270  0035E8  0E00               	movlw	0
  9271  0035EA  2220               	addwfc	??_fillRectangle+3,f,c
  9272  0035EC  501D               	movf	??_fillRectangle,w,c
  9273  0035EE  261F               	addwf	??_fillRectangle+2,f,c
  9274  0035F0  501E               	movf	??_fillRectangle+1,w,c
  9275  0035F2  2220               	addwfc	??_fillRectangle+3,f,c
  9276  0035F4  BE20               	btfsc	??_fillRectangle+3,7,c
  9277  0035F6  D00A               	goto	l312
  9278  0035F8  5020               	movf	??_fillRectangle+3,w,c
  9279  0035FA  E104               	bnz	u3950
  9280  0035FC  0E80               	movlw	128
  9281  0035FE  5C1F               	subwf	??_fillRectangle+2,w,c
  9282  003600  A0D8               	btfss	status,0,c
  9283  003602  D004               	goto	l312
  9284  003604                     u3950:
  9285                           
  9286                           ;ST7735_TFT.c: 457: w = 128 - x;
  9287  003604  5023               	movf	fillRectangle@x,w,c
  9288  003606  0800               	sublw	0
  9289  003608  0F80               	addlw	128
  9290  00360A  6E19               	movwf	fillRectangle@w,c
  9291  00360C                     l312:
  9292                           
  9293                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  9294  00360C  0EFF               	movlw	255
  9295  00360E  6E1D               	movwf	??_fillRectangle& (0+255),c
  9296  003610  0EFF               	movlw	255
  9297  003612  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9298  003614  501A               	movf	fillRectangle@h,w,c
  9299  003616  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  9300  00361A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9301  00361C  261F               	addwf	??_fillRectangle+2,f,c
  9302  00361E  0E00               	movlw	0
  9303  003620  2220               	addwfc	??_fillRectangle+3,f,c
  9304  003622  501D               	movf	??_fillRectangle,w,c
  9305  003624  261F               	addwf	??_fillRectangle+2,f,c
  9306  003626  501E               	movf	??_fillRectangle+1,w,c
  9307  003628  2220               	addwfc	??_fillRectangle+3,f,c
  9308  00362A  BE20               	btfsc	??_fillRectangle+3,7,c
  9309  00362C  D00B               	goto	l5659
  9310  00362E  5020               	movf	??_fillRectangle+3,w,c
  9311  003630  E104               	bnz	u3960
  9312  003632  0EA0               	movlw	160
  9313  003634  5C1F               	subwf	??_fillRectangle+2,w,c
  9314  003636  A0D8               	btfss	status,0,c
  9315  003638  D005               	goto	l5659
  9316  00363A                     u3960:
  9317                           
  9318                           ;ST7735_TFT.c: 459: h = 160 - y;
  9319  00363A  5018               	movf	fillRectangle@y,w,c
  9320  00363C  0800               	sublw	0
  9321  00363E  0FA0               	addlw	160
  9322  003640  6E1A               	movwf	fillRectangle@h,c
  9323  003642  D000               	goto	l5659
  9324  003644                     l5659:
  9325                           
  9326                           ;ST7735_TFT.c: 460: setAddrWindow(x, y, x+w-1, y+h-1);
  9327  003644  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  9328  003648  5023               	movf	fillRectangle@x,w,c
  9329  00364A  2419               	addwf	fillRectangle@w,w,c
  9330  00364C  6E1D               	movwf	??_fillRectangle& (0+255),c
  9331  00364E  041D               	decf	??_fillRectangle,w,c
  9332  003650  6E15               	movwf	setAddrWindow@x1,c
  9333  003652  5018               	movf	fillRectangle@y,w,c
  9334  003654  241A               	addwf	fillRectangle@h,w,c
  9335  003656  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9336  003658  041E               	decf	??_fillRectangle+1,w,c
  9337  00365A  6E16               	movwf	setAddrWindow@y1,c
  9338  00365C  5023               	movf	fillRectangle@x,w,c
  9339  00365E  EC6B  F021         	call	_setAddrWindow
  9340                           
  9341                           ;ST7735_TFT.c: 461: hi = color >> 8; lo = color;
  9342  003662  501C               	movf	fillRectangle@color+1,w,c
  9343  003664  6E21               	movwf	fillRectangle@hi,c
  9344  003666  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  9345                           
  9346                           ;ST7735_TFT.c: 462: PORTDbits.RD7 = 1;
  9347  00366A  8E83               	bsf	3971,7,c	;volatile
  9348                           
  9349                           ;ST7735_TFT.c: 463: PORTCbits.RC4 = 0;
  9350  00366C  9882               	bcf	3970,4,c	;volatile
  9351                           
  9352                           ;ST7735_TFT.c: 465: for(y=h; y>0; y--) {
  9353  00366E  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  9354  003672                     l5671:
  9355  003672  5018               	movf	fillRectangle@y,w,c
  9356  003674  B4D8               	btfsc	status,2,c
  9357  003676  D013               	goto	l315
  9358  003678  D001               	goto	l314
  9359  00367A  D011               	goto	l315
  9360  00367C                     l314:
  9361                           
  9362                           ;ST7735_TFT.c: 466: for(x = w; x > 0; x--) {
  9363  00367C  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  9364  003680                     l5675:
  9365  003680  5023               	movf	fillRectangle@x,w,c
  9366  003682  B4D8               	btfsc	status,2,c
  9367  003684  D00A               	goto	l5685
  9368  003686  D001               	goto	l5679
  9369  003688  D008               	goto	l5685
  9370  00368A                     l5679:
  9371                           
  9372                           ;ST7735_TFT.c: 467: spiwrite(hi);
  9373  00368A  5021               	movf	fillRectangle@hi,w,c
  9374  00368C  EC85  F025         	call	_spiwrite
  9375                           
  9376                           ;ST7735_TFT.c: 468: spiwrite(lo);
  9377  003690  5022               	movf	fillRectangle@lo,w,c
  9378  003692  EC85  F025         	call	_spiwrite
  9379  003696  0623               	decf	fillRectangle@x,f,c
  9380  003698  D7F3               	goto	l5675
  9381  00369A                     l5685:
  9382  00369A  0618               	decf	fillRectangle@y,f,c
  9383  00369C  D7EA               	goto	l5671
  9384  00369E                     l315:
  9385                           
  9386                           ;ST7735_TFT.c: 469: }
  9387                           ;ST7735_TFT.c: 470: }
  9388                           ;ST7735_TFT.c: 471: PORTCbits.RC4 = 1;
  9389  00369E  8882               	bsf	3970,4,c	;volatile
  9390  0036A0                     l311:
  9391  0036A0  0012               	return		;funcret
  9392  0036A2                     __end_of_fillRectangle:
  9393                           	opt stack 0
  9394                           tblptru	equ	0xFF8
  9395                           tblptrh	equ	0xFF7
  9396                           tblptrl	equ	0xFF6
  9397                           tablat	equ	0xFF5
  9398                           prodh	equ	0xFF4
  9399                           prodl	equ	0xFF3
  9400                           intcon2	equ	0xFF1
  9401                           intcon3	equ	0xFF0
  9402                           postinc0	equ	0xFEE
  9403                           wreg	equ	0xFE8
  9404                           postdec1	equ	0xFE5
  9405                           plusw1	equ	0xFE3
  9406                           fsr1l	equ	0xFE1
  9407                           indf2	equ	0xFDF
  9408                           postinc2	equ	0xFDE
  9409                           plusw2	equ	0xFDB
  9410                           fsr2h	equ	0xFDA
  9411                           fsr2l	equ	0xFD9
  9412                           status	equ	0xFD8
  9413                           
  9414 ;; *************** function _TFT_GreenTab_Initialize *****************
  9415 ;; Defined at:
  9416 ;;		line 592 in file "ST7735_TFT.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;		None
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;		None
  9421 ;; Return value:  Size  Location     Type
  9422 ;;		None               void
  9423 ;; Registers used:
  9424 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;Total ram usage:        0 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; Hardware stack levels required when called:    5
  9437 ;; This function calls:
  9438 ;;		_Rcmd1
  9439 ;;		_Rcmd2red
  9440 ;;		_Rcmd3
  9441 ;;		_write_command
  9442 ;;		_write_data
  9443 ;; This function is called by:
  9444 ;;		_Initialize_Screen
  9445 ;;		_Initialize_Setup_Fan_Screen
  9446 ;;		_Initialize_Setup_Time_Screen
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           	psect	text34
  9451  0047D8                     __ptext34:
  9452                           	opt stack 0
  9453  0047D8                     _TFT_GreenTab_Initialize:
  9454                           	opt stack 23
  9455                           
  9456                           ;ST7735_TFT.c: 594: PORTCbits.RC4 = 1;
  9457                           
  9458                           ;incstack = 0
  9459  0047D8  8882               	bsf	3970,4,c	;volatile
  9460                           
  9461                           ;ST7735_TFT.c: 595: PORTDbits.RD7 = 0;
  9462  0047DA  9E83               	bcf	3971,7,c	;volatile
  9463                           
  9464                           ;ST7735_TFT.c: 597: SSPSTAT=0x80;
  9465  0047DC  0E80               	movlw	128
  9466  0047DE  6EC7               	movwf	4039,c	;volatile
  9467                           
  9468                           ;ST7735_TFT.c: 598: SSPCON1=0x30;
  9469  0047E0  0E30               	movlw	48
  9470  0047E2  6EC6               	movwf	4038,c	;volatile
  9471                           
  9472                           ;ST7735_TFT.c: 601: Rcmd1();
  9473  0047E4  EC8F  F016         	call	_Rcmd1	;wreg free
  9474                           
  9475                           ;ST7735_TFT.c: 602: Rcmd2red();
  9476  0047E8  EC94  F022         	call	_Rcmd2red	;wreg free
  9477                           
  9478                           ;ST7735_TFT.c: 603: Rcmd3();
  9479  0047EC  ECA0  F018         	call	_Rcmd3	;wreg free
  9480                           
  9481                           ;ST7735_TFT.c: 604: write_command(0x36);
  9482  0047F0  0E36               	movlw	54
  9483  0047F2  ECE8  F025         	call	_write_command
  9484                           
  9485                           ;ST7735_TFT.c: 605: write_data(0xC0);
  9486  0047F6  0EC0               	movlw	192
  9487  0047F8  ECE0  F025         	call	_write_data
  9488                           
  9489                           ;ST7735_TFT.c: 606: _tft_type = 1;
  9490  0047FC  0E01               	movlw	1
  9491  0047FE  6E65               	movwf	__tft_type,c
  9492  004800  0012               	return		;funcret
  9493  004802                     __end_of_TFT_GreenTab_Initialize:
  9494                           	opt stack 0
  9495                           tblptru	equ	0xFF8
  9496                           tblptrh	equ	0xFF7
  9497                           tblptrl	equ	0xFF6
  9498                           tablat	equ	0xFF5
  9499                           prodh	equ	0xFF4
  9500                           prodl	equ	0xFF3
  9501                           intcon2	equ	0xFF1
  9502                           intcon3	equ	0xFF0
  9503                           postinc0	equ	0xFEE
  9504                           wreg	equ	0xFE8
  9505                           postdec1	equ	0xFE5
  9506                           plusw1	equ	0xFE3
  9507                           fsr1l	equ	0xFE1
  9508                           indf2	equ	0xFDF
  9509                           postinc2	equ	0xFDE
  9510                           plusw2	equ	0xFDB
  9511                           fsr2h	equ	0xFDA
  9512                           fsr2l	equ	0xFD9
  9513                           status	equ	0xFD8
  9514                           
  9515 ;; *************** function _Rcmd3 *****************
  9516 ;; Defined at:
  9517 ;;		line 286 in file "ST7735_TFT.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;		None
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;		None
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9535 ;;Total ram usage:        0 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    4
  9538 ;; This function calls:
  9539 ;;		_delay_ms
  9540 ;;		_write_command
  9541 ;;		_write_data
  9542 ;; This function is called by:
  9543 ;;		_TFT_GreenTab_Initialize
  9544 ;;		_TFT_BlackTab_Initialize
  9545 ;; This function uses a non-reentrant model
  9546 ;;
  9547                           
  9548                           	psect	text35
  9549  003140                     __ptext35:
  9550                           	opt stack 0
  9551  003140                     _Rcmd3:
  9552                           	opt stack 23
  9553                           
  9554                           ;ST7735_TFT.c: 288: write_command(0xE0);
  9555                           
  9556                           ;incstack = 0
  9557  003140  0EE0               	movlw	224
  9558  003142  ECE8  F025         	call	_write_command
  9559                           
  9560                           ;ST7735_TFT.c: 289: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  9561  003146  0E02               	movlw	2
  9562  003148  ECE0  F025         	call	_write_data
  9563  00314C  0E1C               	movlw	28
  9564  00314E  ECE0  F025         	call	_write_data
  9565  003152  0E07               	movlw	7
  9566  003154  ECE0  F025         	call	_write_data
  9567  003158  0E12               	movlw	18
  9568  00315A  ECE0  F025         	call	_write_data
  9569                           
  9570                           ;ST7735_TFT.c: 290: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  9571  00315E  0E37               	movlw	55
  9572  003160  ECE0  F025         	call	_write_data
  9573  003164  0E32               	movlw	50
  9574  003166  ECE0  F025         	call	_write_data
  9575  00316A  0E29               	movlw	41
  9576  00316C  ECE0  F025         	call	_write_data
  9577  003170  0E2D               	movlw	45
  9578  003172  ECE0  F025         	call	_write_data
  9579                           
  9580                           ;ST7735_TFT.c: 291: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  9581  003176  0E29               	movlw	41
  9582  003178  ECE0  F025         	call	_write_data
  9583  00317C  0E25               	movlw	37
  9584  00317E  ECE0  F025         	call	_write_data
  9585  003182  0E2B               	movlw	43
  9586  003184  ECE0  F025         	call	_write_data
  9587  003188  0E39               	movlw	57
  9588  00318A  ECE0  F025         	call	_write_data
  9589                           
  9590                           ;ST7735_TFT.c: 292: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  9591  00318E  0E00               	movlw	0
  9592  003190  ECE0  F025         	call	_write_data
  9593  003194  0E01               	movlw	1
  9594  003196  ECE0  F025         	call	_write_data
  9595  00319A  0E03               	movlw	3
  9596  00319C  ECE0  F025         	call	_write_data
  9597  0031A0  0E10               	movlw	16
  9598  0031A2  ECE0  F025         	call	_write_data
  9599                           
  9600                           ;ST7735_TFT.c: 293: write_command(0xE1);
  9601  0031A6  0EE1               	movlw	225
  9602  0031A8  ECE8  F025         	call	_write_command
  9603                           
  9604                           ;ST7735_TFT.c: 294: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  9605  0031AC  0E03               	movlw	3
  9606  0031AE  ECE0  F025         	call	_write_data
  9607  0031B2  0E1D               	movlw	29
  9608  0031B4  ECE0  F025         	call	_write_data
  9609  0031B8  0E07               	movlw	7
  9610  0031BA  ECE0  F025         	call	_write_data
  9611  0031BE  0E06               	movlw	6
  9612  0031C0  ECE0  F025         	call	_write_data
  9613                           
  9614                           ;ST7735_TFT.c: 295: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  9615  0031C4  0E2E               	movlw	46
  9616  0031C6  ECE0  F025         	call	_write_data
  9617  0031CA  0E2C               	movlw	44
  9618  0031CC  ECE0  F025         	call	_write_data
  9619  0031D0  0E29               	movlw	41
  9620  0031D2  ECE0  F025         	call	_write_data
  9621  0031D6  0E2D               	movlw	45
  9622  0031D8  ECE0  F025         	call	_write_data
  9623                           
  9624                           ;ST7735_TFT.c: 296: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  9625  0031DC  0E2E               	movlw	46
  9626  0031DE  ECE0  F025         	call	_write_data
  9627  0031E2  0E2E               	movlw	46
  9628  0031E4  ECE0  F025         	call	_write_data
  9629  0031E8  0E37               	movlw	55
  9630  0031EA  ECE0  F025         	call	_write_data
  9631  0031EE  0E3F               	movlw	63
  9632  0031F0  ECE0  F025         	call	_write_data
  9633                           
  9634                           ;ST7735_TFT.c: 297: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  9635  0031F4  0E00               	movlw	0
  9636  0031F6  ECE0  F025         	call	_write_data
  9637  0031FA  0E00               	movlw	0
  9638  0031FC  ECE0  F025         	call	_write_data
  9639  003200  0E02               	movlw	2
  9640  003202  ECE0  F025         	call	_write_data
  9641  003206  0E10               	movlw	16
  9642  003208  ECE0  F025         	call	_write_data
  9643                           
  9644                           ;ST7735_TFT.c: 298: write_command(0x13);
  9645  00320C  0E13               	movlw	19
  9646  00320E  ECE8  F025         	call	_write_command
  9647                           
  9648                           ;ST7735_TFT.c: 299: delay_ms(10);
  9649  003212  0E00               	movlw	0
  9650  003214  6E18               	movwf	delay_ms@ms+1,c
  9651  003216  0E0A               	movlw	10
  9652  003218  6E17               	movwf	delay_ms@ms,c
  9653  00321A  ECB3  F022         	call	_delay_ms	;wreg free
  9654                           
  9655                           ;ST7735_TFT.c: 300: write_command(0x29);
  9656  00321E  0E29               	movlw	41
  9657  003220  ECE8  F025         	call	_write_command
  9658                           
  9659                           ;ST7735_TFT.c: 301: delay_ms(100);
  9660  003224  0E00               	movlw	0
  9661  003226  6E18               	movwf	delay_ms@ms+1,c
  9662  003228  0E64               	movlw	100
  9663  00322A  6E17               	movwf	delay_ms@ms,c
  9664  00322C  ECB3  F022         	call	_delay_ms	;wreg free
  9665  003230  0012               	return		;funcret
  9666  003232                     __end_of_Rcmd3:
  9667                           	opt stack 0
  9668                           tblptru	equ	0xFF8
  9669                           tblptrh	equ	0xFF7
  9670                           tblptrl	equ	0xFF6
  9671                           tablat	equ	0xFF5
  9672                           prodh	equ	0xFF4
  9673                           prodl	equ	0xFF3
  9674                           intcon2	equ	0xFF1
  9675                           intcon3	equ	0xFF0
  9676                           postinc0	equ	0xFEE
  9677                           wreg	equ	0xFE8
  9678                           postdec1	equ	0xFE5
  9679                           plusw1	equ	0xFE3
  9680                           fsr1l	equ	0xFE1
  9681                           indf2	equ	0xFDF
  9682                           postinc2	equ	0xFDE
  9683                           plusw2	equ	0xFDB
  9684                           fsr2h	equ	0xFDA
  9685                           fsr2l	equ	0xFD9
  9686                           status	equ	0xFD8
  9687                           
  9688 ;; *************** function _Rcmd2red *****************
  9689 ;; Defined at:
  9690 ;;		line 276 in file "ST7735_TFT.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;		None
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;		None
  9695 ;; Return value:  Size  Location     Type
  9696 ;;		None               void
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, cstack
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;Total ram usage:        0 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    4
  9711 ;; This function calls:
  9712 ;;		_write_command
  9713 ;;		_write_data
  9714 ;; This function is called by:
  9715 ;;		_TFT_GreenTab_Initialize
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text36
  9720  004528                     __ptext36:
  9721                           	opt stack 0
  9722  004528                     _Rcmd2red:
  9723                           	opt stack 23
  9724                           
  9725                           ;ST7735_TFT.c: 278: write_command(0x2A);
  9726                           
  9727                           ;incstack = 0
  9728  004528  0E2A               	movlw	42
  9729  00452A  ECE8  F025         	call	_write_command
  9730                           
  9731                           ;ST7735_TFT.c: 279: write_data(0x00); write_data(0x00);
  9732  00452E  0E00               	movlw	0
  9733  004530  ECE0  F025         	call	_write_data
  9734  004534  0E00               	movlw	0
  9735  004536  ECE0  F025         	call	_write_data
  9736                           
  9737                           ;ST7735_TFT.c: 280: write_data(0x00); write_data(0x7F);
  9738  00453A  0E00               	movlw	0
  9739  00453C  ECE0  F025         	call	_write_data
  9740  004540  0E7F               	movlw	127
  9741  004542  ECE0  F025         	call	_write_data
  9742                           
  9743                           ;ST7735_TFT.c: 281: write_command(0x2B);
  9744  004546  0E2B               	movlw	43
  9745  004548  ECE8  F025         	call	_write_command
  9746                           
  9747                           ;ST7735_TFT.c: 282: write_data(0x00); write_data(0x00);
  9748  00454C  0E00               	movlw	0
  9749  00454E  ECE0  F025         	call	_write_data
  9750  004552  0E00               	movlw	0
  9751  004554  ECE0  F025         	call	_write_data
  9752                           
  9753                           ;ST7735_TFT.c: 283: write_data(0x00); write_data(0x9F);
  9754  004558  0E00               	movlw	0
  9755  00455A  ECE0  F025         	call	_write_data
  9756  00455E  0E9F               	movlw	159
  9757  004560  ECE0  F025         	call	_write_data
  9758  004564  0012               	return		;funcret
  9759  004566                     __end_of_Rcmd2red:
  9760                           	opt stack 0
  9761                           tblptru	equ	0xFF8
  9762                           tblptrh	equ	0xFF7
  9763                           tblptrl	equ	0xFF6
  9764                           tablat	equ	0xFF5
  9765                           prodh	equ	0xFF4
  9766                           prodl	equ	0xFF3
  9767                           intcon2	equ	0xFF1
  9768                           intcon3	equ	0xFF0
  9769                           postinc0	equ	0xFEE
  9770                           wreg	equ	0xFE8
  9771                           postdec1	equ	0xFE5
  9772                           plusw1	equ	0xFE3
  9773                           fsr1l	equ	0xFE1
  9774                           indf2	equ	0xFDF
  9775                           postinc2	equ	0xFDE
  9776                           plusw2	equ	0xFDB
  9777                           fsr2h	equ	0xFDA
  9778                           fsr2l	equ	0xFD9
  9779                           status	equ	0xFD8
  9780                           
  9781 ;; *************** function _Rcmd1 *****************
  9782 ;; Defined at:
  9783 ;;		line 229 in file "ST7735_TFT.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;		None
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;		None
  9788 ;; Return value:  Size  Location     Type
  9789 ;;		None               void
  9790 ;; Registers used:
  9791 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9801 ;;Total ram usage:        0 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    4
  9804 ;; This function calls:
  9805 ;;		_delay_ms
  9806 ;;		_write_command
  9807 ;;		_write_data
  9808 ;; This function is called by:
  9809 ;;		_TFT_GreenTab_Initialize
  9810 ;;		_TFT_BlackTab_Initialize
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           	psect	text37
  9815  002D1E                     __ptext37:
  9816                           	opt stack 0
  9817  002D1E                     _Rcmd1:
  9818                           	opt stack 23
  9819                           
  9820                           ;ST7735_TFT.c: 231: write_command(0x01);
  9821                           
  9822                           ;incstack = 0
  9823  002D1E  0E01               	movlw	1
  9824  002D20  ECE8  F025         	call	_write_command
  9825                           
  9826                           ;ST7735_TFT.c: 232: delay_ms(150);
  9827  002D24  0E00               	movlw	0
  9828  002D26  6E18               	movwf	delay_ms@ms+1,c
  9829  002D28  0E96               	movlw	150
  9830  002D2A  6E17               	movwf	delay_ms@ms,c
  9831  002D2C  ECB3  F022         	call	_delay_ms	;wreg free
  9832                           
  9833                           ;ST7735_TFT.c: 233: write_command(0x11);
  9834  002D30  0E11               	movlw	17
  9835  002D32  ECE8  F025         	call	_write_command
  9836                           
  9837                           ;ST7735_TFT.c: 234: delay_ms(500);
  9838  002D36  0E01               	movlw	1
  9839  002D38  6E18               	movwf	delay_ms@ms+1,c
  9840  002D3A  0EF4               	movlw	244
  9841  002D3C  6E17               	movwf	delay_ms@ms,c
  9842  002D3E  ECB3  F022         	call	_delay_ms	;wreg free
  9843                           
  9844                           ;ST7735_TFT.c: 235: write_command(0xB1);
  9845  002D42  0EB1               	movlw	177
  9846  002D44  ECE8  F025         	call	_write_command
  9847                           
  9848                           ;ST7735_TFT.c: 236: write_data(0x01);
  9849  002D48  0E01               	movlw	1
  9850  002D4A  ECE0  F025         	call	_write_data
  9851                           
  9852                           ;ST7735_TFT.c: 237: write_data(0x2C);
  9853  002D4E  0E2C               	movlw	44
  9854  002D50  ECE0  F025         	call	_write_data
  9855                           
  9856                           ;ST7735_TFT.c: 238: write_data(0x2D);
  9857  002D54  0E2D               	movlw	45
  9858  002D56  ECE0  F025         	call	_write_data
  9859                           
  9860                           ;ST7735_TFT.c: 239: write_command(0xB2);
  9861  002D5A  0EB2               	movlw	178
  9862  002D5C  ECE8  F025         	call	_write_command
  9863                           
  9864                           ;ST7735_TFT.c: 240: write_data(0x01);
  9865  002D60  0E01               	movlw	1
  9866  002D62  ECE0  F025         	call	_write_data
  9867                           
  9868                           ;ST7735_TFT.c: 241: write_data(0x2C);
  9869  002D66  0E2C               	movlw	44
  9870  002D68  ECE0  F025         	call	_write_data
  9871                           
  9872                           ;ST7735_TFT.c: 242: write_data(0x2D);
  9873  002D6C  0E2D               	movlw	45
  9874  002D6E  ECE0  F025         	call	_write_data
  9875                           
  9876                           ;ST7735_TFT.c: 243: write_command(0xB3);
  9877  002D72  0EB3               	movlw	179
  9878  002D74  ECE8  F025         	call	_write_command
  9879                           
  9880                           ;ST7735_TFT.c: 244: write_data(0x01);
  9881  002D78  0E01               	movlw	1
  9882  002D7A  ECE0  F025         	call	_write_data
  9883                           
  9884                           ;ST7735_TFT.c: 245: write_data(0x2C);
  9885  002D7E  0E2C               	movlw	44
  9886  002D80  ECE0  F025         	call	_write_data
  9887                           
  9888                           ;ST7735_TFT.c: 246: write_data(0x2D);
  9889  002D84  0E2D               	movlw	45
  9890  002D86  ECE0  F025         	call	_write_data
  9891                           
  9892                           ;ST7735_TFT.c: 247: write_data(0x01);
  9893  002D8A  0E01               	movlw	1
  9894  002D8C  ECE0  F025         	call	_write_data
  9895                           
  9896                           ;ST7735_TFT.c: 248: write_data(0x2C);
  9897  002D90  0E2C               	movlw	44
  9898  002D92  ECE0  F025         	call	_write_data
  9899                           
  9900                           ;ST7735_TFT.c: 249: write_data(0x2D);
  9901  002D96  0E2D               	movlw	45
  9902  002D98  ECE0  F025         	call	_write_data
  9903                           
  9904                           ;ST7735_TFT.c: 250: write_command(0xB4);
  9905  002D9C  0EB4               	movlw	180
  9906  002D9E  ECE8  F025         	call	_write_command
  9907                           
  9908                           ;ST7735_TFT.c: 251: write_data(0x07);
  9909  002DA2  0E07               	movlw	7
  9910  002DA4  ECE0  F025         	call	_write_data
  9911                           
  9912                           ;ST7735_TFT.c: 252: write_command(0xC0);
  9913  002DA8  0EC0               	movlw	192
  9914  002DAA  ECE8  F025         	call	_write_command
  9915                           
  9916                           ;ST7735_TFT.c: 253: write_data(0xA2);
  9917  002DAE  0EA2               	movlw	162
  9918  002DB0  ECE0  F025         	call	_write_data
  9919                           
  9920                           ;ST7735_TFT.c: 254: write_data(0x02);
  9921  002DB4  0E02               	movlw	2
  9922  002DB6  ECE0  F025         	call	_write_data
  9923                           
  9924                           ;ST7735_TFT.c: 255: write_data(0x84);
  9925  002DBA  0E84               	movlw	132
  9926  002DBC  ECE0  F025         	call	_write_data
  9927                           
  9928                           ;ST7735_TFT.c: 256: write_command(0xC1);
  9929  002DC0  0EC1               	movlw	193
  9930  002DC2  ECE8  F025         	call	_write_command
  9931                           
  9932                           ;ST7735_TFT.c: 257: write_data(0xC5);
  9933  002DC6  0EC5               	movlw	197
  9934  002DC8  ECE0  F025         	call	_write_data
  9935                           
  9936                           ;ST7735_TFT.c: 258: write_command(0xC2);
  9937  002DCC  0EC2               	movlw	194
  9938  002DCE  ECE8  F025         	call	_write_command
  9939                           
  9940                           ;ST7735_TFT.c: 259: write_data(0x0A);
  9941  002DD2  0E0A               	movlw	10
  9942  002DD4  ECE0  F025         	call	_write_data
  9943                           
  9944                           ;ST7735_TFT.c: 260: write_data(0x00);
  9945  002DD8  0E00               	movlw	0
  9946  002DDA  ECE0  F025         	call	_write_data
  9947                           
  9948                           ;ST7735_TFT.c: 261: write_command(0xC3);
  9949  002DDE  0EC3               	movlw	195
  9950  002DE0  ECE8  F025         	call	_write_command
  9951                           
  9952                           ;ST7735_TFT.c: 262: write_data(0x8A);
  9953  002DE4  0E8A               	movlw	138
  9954  002DE6  ECE0  F025         	call	_write_data
  9955                           
  9956                           ;ST7735_TFT.c: 263: write_data(0x2A);
  9957  002DEA  0E2A               	movlw	42
  9958  002DEC  ECE0  F025         	call	_write_data
  9959                           
  9960                           ;ST7735_TFT.c: 264: write_command(0xC4);
  9961  002DF0  0EC4               	movlw	196
  9962  002DF2  ECE8  F025         	call	_write_command
  9963                           
  9964                           ;ST7735_TFT.c: 265: write_data(0x8A);
  9965  002DF6  0E8A               	movlw	138
  9966  002DF8  ECE0  F025         	call	_write_data
  9967                           
  9968                           ;ST7735_TFT.c: 266: write_data(0xEE);
  9969  002DFC  0EEE               	movlw	238
  9970  002DFE  ECE0  F025         	call	_write_data
  9971                           
  9972                           ;ST7735_TFT.c: 267: write_command(0xC5);
  9973  002E02  0EC5               	movlw	197
  9974  002E04  ECE8  F025         	call	_write_command
  9975                           
  9976                           ;ST7735_TFT.c: 268: write_data(0x0E);
  9977  002E08  0E0E               	movlw	14
  9978  002E0A  ECE0  F025         	call	_write_data
  9979                           
  9980                           ;ST7735_TFT.c: 269: write_command(0x20);
  9981  002E0E  0E20               	movlw	32
  9982  002E10  ECE8  F025         	call	_write_command
  9983                           
  9984                           ;ST7735_TFT.c: 270: write_command(0x36);
  9985  002E14  0E36               	movlw	54
  9986  002E16  ECE8  F025         	call	_write_command
  9987                           
  9988                           ;ST7735_TFT.c: 271: write_data(0xC8);
  9989  002E1A  0EC8               	movlw	200
  9990  002E1C  ECE0  F025         	call	_write_data
  9991                           
  9992                           ;ST7735_TFT.c: 272: write_command(0x3A);
  9993  002E20  0E3A               	movlw	58
  9994  002E22  ECE8  F025         	call	_write_command
  9995                           
  9996                           ;ST7735_TFT.c: 273: write_data(0x05);
  9997  002E26  0E05               	movlw	5
  9998  002E28  ECE0  F025         	call	_write_data
  9999  002E2C  0012               	return		;funcret
 10000  002E2E                     __end_of_Rcmd1:
 10001                           	opt stack 0
 10002                           tblptru	equ	0xFF8
 10003                           tblptrh	equ	0xFF7
 10004                           tblptrl	equ	0xFF6
 10005                           tablat	equ	0xFF5
 10006                           prodh	equ	0xFF4
 10007                           prodl	equ	0xFF3
 10008                           intcon2	equ	0xFF1
 10009                           intcon3	equ	0xFF0
 10010                           postinc0	equ	0xFEE
 10011                           wreg	equ	0xFE8
 10012                           postdec1	equ	0xFE5
 10013                           plusw1	equ	0xFE3
 10014                           fsr1l	equ	0xFE1
 10015                           indf2	equ	0xFDF
 10016                           postinc2	equ	0xFDE
 10017                           plusw2	equ	0xFDB
 10018                           fsr2h	equ	0xFDA
 10019                           fsr2l	equ	0xFD9
 10020                           status	equ	0xFD8
 10021                           
 10022 ;; *************** function _LCD_Reset *****************
 10023 ;; Defined at:
 10024 ;;		line 165 in file "ST7735_TFT.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;		None
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;		None               void
 10031 ;; Registers used:
 10032 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;Total ram usage:        0 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    4
 10045 ;; This function calls:
 10046 ;;		_delay_ms
 10047 ;; This function is called by:
 10048 ;;		_Initialize_Screen
 10049 ;;		_Initialize_Setup_Fan_Screen
 10050 ;;		_Initialize_Setup_Time_Screen
 10051 ;; This function uses a non-reentrant model
 10052 ;;
 10053                           
 10054                           	psect	text38
 10055  004B32                     __ptext38:
 10056                           	opt stack 0
 10057  004B32                     _LCD_Reset:
 10058                           	opt stack 24
 10059                           
 10060                           ;ST7735_TFT.c: 167: PORTDbits.RD0 = 0;
 10061                           
 10062                           ;incstack = 0
 10063  004B32  9083               	bcf	3971,0,c	;volatile
 10064                           
 10065                           ;ST7735_TFT.c: 168: delay_ms(100);
 10066  004B34  0E00               	movlw	0
 10067  004B36  6E18               	movwf	delay_ms@ms+1,c
 10068  004B38  0E64               	movlw	100
 10069  004B3A  6E17               	movwf	delay_ms@ms,c
 10070  004B3C  ECB3  F022         	call	_delay_ms	;wreg free
 10071                           
 10072                           ;ST7735_TFT.c: 169: PORTDbits.RD0 = 1;
 10073  004B40  8083               	bsf	3971,0,c	;volatile
 10074  004B42  0012               	return		;funcret
 10075  004B44                     __end_of_LCD_Reset:
 10076                           	opt stack 0
 10077                           tblptru	equ	0xFF8
 10078                           tblptrh	equ	0xFF7
 10079                           tblptrl	equ	0xFF6
 10080                           tablat	equ	0xFF5
 10081                           prodh	equ	0xFF4
 10082                           prodl	equ	0xFF3
 10083                           intcon2	equ	0xFF1
 10084                           intcon3	equ	0xFF0
 10085                           postinc0	equ	0xFEE
 10086                           wreg	equ	0xFE8
 10087                           postdec1	equ	0xFE5
 10088                           plusw1	equ	0xFE3
 10089                           fsr1l	equ	0xFE1
 10090                           indf2	equ	0xFDF
 10091                           postinc2	equ	0xFDE
 10092                           plusw2	equ	0xFDB
 10093                           fsr2h	equ	0xFDA
 10094                           fsr2l	equ	0xFD9
 10095                           status	equ	0xFD8
 10096                           
 10097 ;; *************** function _delay_ms *****************
 10098 ;; Defined at:
 10099 ;;		line 12 in file "ST7735_TFT.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;  ms              2   22[COMRAM] int 
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;  count           2   24[COMRAM] int 
 10104 ;; Return value:  Size  Location     Type
 10105 ;;		None               void
 10106 ;; Registers used:
 10107 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10113 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10114 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10117 ;;Total ram usage:        4 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    3
 10120 ;; This function calls:
 10121 ;;		___wmul
 10122 ;; This function is called by:
 10123 ;;		_LCD_Reset
 10124 ;;		_Rcmd1
 10125 ;;		_Rcmd3
 10126 ;;		_Bcmd
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           	psect	text39
 10131  004566                     __ptext39:
 10132                           	opt stack 0
 10133  004566                     _delay_ms:
 10134                           	opt stack 23
 10135                           
 10136                           ;ST7735_TFT.c: 18: int count;
 10137                           ;ST7735_TFT.c: 19: count = 8000000/4000/8 * ms;
 10138                           
 10139                           ;incstack = 0
 10140  004566  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 10141  00456A  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 10142  00456E  0E00               	movlw	0
 10143  004570  6E14               	movwf	___wmul@multiplicand+1,c
 10144  004572  0EFA               	movlw	250
 10145  004574  6E13               	movwf	___wmul@multiplicand,c
 10146  004576  EC01  F024         	call	___wmul	;wreg free
 10147  00457A  C011  F019         	movff	?___wmul,delay_ms@count
 10148  00457E  C012  F01A         	movff	?___wmul+1,delay_ms@count+1
 10149                           
 10150                           ;ST7735_TFT.c: 20: count = (0xffff - count)+1;
 10151  004582  6C19               	negf	delay_ms@count,c
 10152  004584  1E1A               	comf	delay_ms@count+1,f,c
 10153  004586  B0D8               	btfsc	status,0,c
 10154  004588  2A1A               	incf	delay_ms@count+1,f,c
 10155                           
 10156                           ;ST7735_TFT.c: 22: T0CON = 0x02;
 10157  00458A  0E02               	movlw	2
 10158  00458C  6ED5               	movwf	4053,c	;volatile
 10159                           
 10160                           ;ST7735_TFT.c: 23: TMR0H = count >> 8;
 10161  00458E  501A               	movf	delay_ms@count+1,w,c
 10162  004590  6ED7               	movwf	4055,c	;volatile
 10163                           
 10164                           ;ST7735_TFT.c: 24: TMR0L = count & 0x00ff;
 10165  004592  C019  FFD6         	movff	delay_ms@count,4054	;volatile
 10166                           
 10167                           ;ST7735_TFT.c: 27: INTCONbits.TMR0IF = 0;
 10168  004596  94F2               	bcf	intcon,2,c	;volatile
 10169                           
 10170                           ;ST7735_TFT.c: 28: T0CONbits.TMR0ON = 1;
 10171  004598  8ED5               	bsf	4053,7,c	;volatile
 10172                           
 10173                           ;ST7735_TFT.c: 30: while (INTCONbits.TMR0IF == 0);
 10174  00459A  D000               	goto	l198
 10175  00459C                     l198:
 10176  00459C  A4F2               	btfss	intcon,2,c	;volatile
 10177  00459E  D7FE               	goto	l198
 10178                           
 10179                           ;ST7735_TFT.c: 31: T0CONbits.TMR0ON = 0;
 10180  0045A0  9ED5               	bcf	4053,7,c	;volatile
 10181  0045A2  0012               	return		;funcret
 10182  0045A4                     __end_of_delay_ms:
 10183                           	opt stack 0
 10184                           tblptru	equ	0xFF8
 10185                           tblptrh	equ	0xFF7
 10186                           tblptrl	equ	0xFF6
 10187                           tablat	equ	0xFF5
 10188                           prodh	equ	0xFF4
 10189                           prodl	equ	0xFF3
 10190                           intcon	equ	0xFF2
 10191                           intcon2	equ	0xFF1
 10192                           intcon3	equ	0xFF0
 10193                           postinc0	equ	0xFEE
 10194                           wreg	equ	0xFE8
 10195                           postdec1	equ	0xFE5
 10196                           plusw1	equ	0xFE3
 10197                           fsr1l	equ	0xFE1
 10198                           indf2	equ	0xFDF
 10199                           postinc2	equ	0xFDE
 10200                           plusw2	equ	0xFDB
 10201                           fsr2h	equ	0xFDA
 10202                           fsr2l	equ	0xFD9
 10203                           status	equ	0xFD8
 10204                           
 10205 ;; *************** function _DS3231_Write_Time *****************
 10206 ;; Defined at:
 10207 ;;		line 64 in file "I2C_Support.c"
 10208 ;; Parameters:    Size  Location     Type
 10209 ;;		None
 10210 ;; Auto vars:     Size  Location     Type
 10211 ;;  Address         1   74[COMRAM] unsigned char 
 10212 ;;  Device          1   73[COMRAM] unsigned char 
 10213 ;; Return value:  Size  Location     Type
 10214 ;;		None               void
 10215 ;; Registers used:
 10216 ;;		wreg, status,2, status,0, cstack
 10217 ;; Tracked objects:
 10218 ;;		On entry : 0/0
 10219 ;;		On exit  : 0/0
 10220 ;;		Unchanged: 0/0
 10221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10223 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;Total ram usage:        2 bytes
 10227 ;; Hardware stack levels used:    1
 10228 ;; Hardware stack levels required when called:    4
 10229 ;; This function calls:
 10230 ;;		_I2C_Start
 10231 ;;		_I2C_Stop
 10232 ;;		_I2C_Write
 10233 ;;		_dec_2_bcd
 10234 ;; This function is called by:
 10235 ;;		_Do_Save_New_Time
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           	psect	text40
 10240  003A28                     __ptext40:
 10241                           	opt stack 0
 10242  003A28                     _DS3231_Write_Time:
 10243                           	opt stack 24
 10244                           
 10245                           ;I2C_Support.c: 66: char Device = 0x68;
 10246                           
 10247                           ;incstack = 0
 10248  003A28  0E68               	movlw	104
 10249  003A2A  6E4A               	movwf	DS3231_Write_Time@Device,c
 10250                           
 10251                           ;I2C_Support.c: 67: char Address = 0x00;
 10252  003A2C  0E00               	movlw	0
 10253  003A2E  6E4B               	movwf	DS3231_Write_Time@Address,c
 10254                           
 10255                           ;I2C_Support.c: 68: second = dec_2_bcd(setup_second);
 10256  003A30  0100               	movlb	0	; () banked
 10257  003A32  51F7               	movf	_setup_second& (0+255),w,b
 10258  003A34  EC3F  F021         	call	_dec_2_bcd
 10259  003A38  5043               	movf	?_dec_2_bcd,w,c
 10260  003A3A  6E6B               	movwf	_second,c
 10261                           
 10262                           ;I2C_Support.c: 69: minute = dec_2_bcd(setup_minute);
 10263  003A3C  0100               	movlb	0	; () banked
 10264  003A3E  51F5               	movf	_setup_minute& (0+255),w,b
 10265  003A40  EC3F  F021         	call	_dec_2_bcd
 10266  003A44  5043               	movf	?_dec_2_bcd,w,c
 10267  003A46  6E69               	movwf	_minute,c
 10268                           
 10269                           ;I2C_Support.c: 70: hour = dec_2_bcd(setup_hour);
 10270  003A48  0100               	movlb	0	; () banked
 10271  003A4A  51F4               	movf	_setup_hour& (0+255),w,b
 10272  003A4C  EC3F  F021         	call	_dec_2_bcd
 10273  003A50  5043               	movf	?_dec_2_bcd,w,c
 10274  003A52  6E68               	movwf	_hour,c
 10275                           
 10276                           ;I2C_Support.c: 71: dow = 0x01;
 10277  003A54  0E01               	movlw	1
 10278  003A56  0100               	movlb	0	; () banked
 10279  003A58  6FEF               	movwf	_dow& (0+255),b
 10280                           
 10281                           ;I2C_Support.c: 72: day = dec_2_bcd(setup_day);
 10282  003A5A  0100               	movlb	0	; () banked
 10283  003A5C  51F3               	movf	_setup_day& (0+255),w,b
 10284  003A5E  EC3F  F021         	call	_dec_2_bcd
 10285  003A62  5043               	movf	?_dec_2_bcd,w,c
 10286  003A64  6E66               	movwf	_day,c
 10287                           
 10288                           ;I2C_Support.c: 73: month = dec_2_bcd(setup_month);
 10289  003A66  0100               	movlb	0	; () banked
 10290  003A68  51F6               	movf	_setup_month& (0+255),w,b
 10291  003A6A  EC3F  F021         	call	_dec_2_bcd
 10292  003A6E  5043               	movf	?_dec_2_bcd,w,c
 10293  003A70  6E6A               	movwf	_month,c
 10294                           
 10295                           ;I2C_Support.c: 74: year = dec_2_bcd(setup_year);
 10296  003A72  0100               	movlb	0	; () banked
 10297  003A74  51F8               	movf	_setup_year& (0+255),w,b
 10298  003A76  EC3F  F021         	call	_dec_2_bcd
 10299  003A7A  5043               	movf	?_dec_2_bcd,w,c
 10300  003A7C  6E6F               	movwf	_year,c
 10301                           
 10302                           ;I2C_Support.c: 75: I2C_Start();
 10303  003A7E  ECB4  F025         	call	_I2C_Start	;wreg free
 10304                           
 10305                           ;I2C_Support.c: 76: I2C_Write((Device << 1) | 0);
 10306  003A82  504A               	movf	DS3231_Write_Time@Device,w,c
 10307  003A84  244A               	addwf	DS3231_Write_Time@Device,w,c
 10308  003A86  ECF1  F022         	call	_I2C_Write
 10309                           
 10310                           ;I2C_Support.c: 77: I2C_Write(Address);
 10311  003A8A  504B               	movf	DS3231_Write_Time@Address,w,c
 10312  003A8C  ECF1  F022         	call	_I2C_Write
 10313                           
 10314                           ;I2C_Support.c: 78: I2C_Write(second);
 10315  003A90  506B               	movf	_second,w,c
 10316  003A92  ECF1  F022         	call	_I2C_Write
 10317                           
 10318                           ;I2C_Support.c: 79: I2C_Write(minute);
 10319  003A96  5069               	movf	_minute,w,c
 10320  003A98  ECF1  F022         	call	_I2C_Write
 10321                           
 10322                           ;I2C_Support.c: 80: I2C_Write(hour);
 10323  003A9C  5068               	movf	_hour,w,c
 10324  003A9E  ECF1  F022         	call	_I2C_Write
 10325                           
 10326                           ;I2C_Support.c: 81: I2C_Write(dow);
 10327  003AA2  0100               	movlb	0	; () banked
 10328  003AA4  51EF               	movf	_dow& (0+255),w,b
 10329  003AA6  ECF1  F022         	call	_I2C_Write
 10330                           
 10331                           ;I2C_Support.c: 82: I2C_Write(day);
 10332  003AAA  5066               	movf	_day,w,c
 10333  003AAC  ECF1  F022         	call	_I2C_Write
 10334                           
 10335                           ;I2C_Support.c: 83: I2C_Write(month);
 10336  003AB0  506A               	movf	_month,w,c
 10337  003AB2  ECF1  F022         	call	_I2C_Write
 10338                           
 10339                           ;I2C_Support.c: 84: I2C_Write(year);
 10340  003AB6  506F               	movf	_year,w,c
 10341  003AB8  ECF1  F022         	call	_I2C_Write
 10342                           
 10343                           ;I2C_Support.c: 85: I2C_Stop();
 10344  003ABC  ECAB  F025         	call	_I2C_Stop	;wreg free
 10345  003AC0  0012               	return		;funcret
 10346  003AC2                     __end_of_DS3231_Write_Time:
 10347                           	opt stack 0
 10348                           tblptru	equ	0xFF8
 10349                           tblptrh	equ	0xFF7
 10350                           tblptrl	equ	0xFF6
 10351                           tablat	equ	0xFF5
 10352                           prodh	equ	0xFF4
 10353                           prodl	equ	0xFF3
 10354                           intcon	equ	0xFF2
 10355                           intcon2	equ	0xFF1
 10356                           intcon3	equ	0xFF0
 10357                           postinc0	equ	0xFEE
 10358                           wreg	equ	0xFE8
 10359                           postdec1	equ	0xFE5
 10360                           plusw1	equ	0xFE3
 10361                           fsr1l	equ	0xFE1
 10362                           indf2	equ	0xFDF
 10363                           postinc2	equ	0xFDE
 10364                           plusw2	equ	0xFDB
 10365                           fsr2h	equ	0xFDA
 10366                           fsr2l	equ	0xFD9
 10367                           status	equ	0xFD8
 10368                           
 10369 ;; *************** function _dec_2_bcd *****************
 10370 ;; Defined at:
 10371 ;;		line 59 in file "utils.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;  dec             1    wreg     unsigned char 
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;  dec             1   72[COMRAM] unsigned char 
 10376 ;;  bcd             2   70[COMRAM] int 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  2   66[COMRAM] int 
 10379 ;; Registers used:
 10380 ;;		wreg, status,2, status,0, cstack
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10390 ;;Total ram usage:        7 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    3
 10393 ;; This function calls:
 10394 ;;		___awdiv
 10395 ;;		___awmod
 10396 ;; This function is called by:
 10397 ;;		_DS3231_Write_Time
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           	psect	text41
 10402  00427E                     __ptext41:
 10403                           	opt stack 0
 10404  00427E                     _dec_2_bcd:
 10405                           	opt stack 24
 10406                           
 10407                           ;incstack = 0
 10408                           ;dec_2_bcd@dec stored from wreg
 10409  00427E  6E49               	movwf	dec_2_bcd@dec,c
 10410                           
 10411                           ;utils.c: 61: int bcd;
 10412                           ;utils.c: 62: bcd = ((dec / 10) << 4) + (dec % 10);
 10413  004280  C049  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 10414  004284  6A18               	clrf	___awdiv@dividend+1,c
 10415  004286  0E00               	movlw	0
 10416  004288  6E1A               	movwf	___awdiv@divisor+1,c
 10417  00428A  0E0A               	movlw	10
 10418  00428C  6E19               	movwf	___awdiv@divisor,c
 10419  00428E  EC61  F01D         	call	___awdiv	;wreg free
 10420  004292  C017  F045         	movff	?___awdiv,??_dec_2_bcd
 10421  004296  C018  F046         	movff	?___awdiv+1,??_dec_2_bcd+1
 10422  00429A  3A45               	swapf	??_dec_2_bcd,f,c
 10423  00429C  3A46               	swapf	??_dec_2_bcd+1,f,c
 10424  00429E  0EF0               	movlw	240
 10425  0042A0  1646               	andwf	??_dec_2_bcd+1,f,c
 10426  0042A2  5045               	movf	??_dec_2_bcd,w,c
 10427  0042A4  0B0F               	andlw	15
 10428  0042A6  1246               	iorwf	??_dec_2_bcd+1,f,c
 10429  0042A8  0EF0               	movlw	240
 10430  0042AA  1645               	andwf	??_dec_2_bcd,f,c
 10431  0042AC  C049  F03D         	movff	dec_2_bcd@dec,___awmod@dividend
 10432  0042B0  6A3E               	clrf	___awmod@dividend+1,c
 10433  0042B2  0E00               	movlw	0
 10434  0042B4  6E40               	movwf	___awmod@divisor+1,c
 10435  0042B6  0E0A               	movlw	10
 10436  0042B8  6E3F               	movwf	___awmod@divisor,c
 10437  0042BA  EC90  F01F         	call	___awmod	;wreg free
 10438  0042BE  503D               	movf	?___awmod,w,c
 10439  0042C0  2445               	addwf	??_dec_2_bcd,w,c
 10440  0042C2  6E47               	movwf	dec_2_bcd@bcd,c
 10441  0042C4  503E               	movf	?___awmod+1,w,c
 10442  0042C6  2046               	addwfc	??_dec_2_bcd+1,w,c
 10443  0042C8  6E48               	movwf	dec_2_bcd@bcd+1,c
 10444                           
 10445                           ;utils.c: 63: return bcd;
 10446  0042CA  C047  F043         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 10447  0042CE  C048  F044         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 10448  0042D2  D000               	goto	l454
 10449  0042D4                     l454:
 10450  0042D4  0012               	return		;funcret
 10451  0042D6                     __end_of_dec_2_bcd:
 10452                           	opt stack 0
 10453                           tblptru	equ	0xFF8
 10454                           tblptrh	equ	0xFF7
 10455                           tblptrl	equ	0xFF6
 10456                           tablat	equ	0xFF5
 10457                           prodh	equ	0xFF4
 10458                           prodl	equ	0xFF3
 10459                           intcon	equ	0xFF2
 10460                           intcon2	equ	0xFF1
 10461                           intcon3	equ	0xFF0
 10462                           postinc0	equ	0xFEE
 10463                           wreg	equ	0xFE8
 10464                           postdec1	equ	0xFE5
 10465                           plusw1	equ	0xFE3
 10466                           fsr1l	equ	0xFE1
 10467                           indf2	equ	0xFDF
 10468                           postinc2	equ	0xFDE
 10469                           plusw2	equ	0xFDB
 10470                           fsr2h	equ	0xFDA
 10471                           fsr2l	equ	0xFD9
 10472                           status	equ	0xFD8
 10473                           
 10474 ;; *************** function _DS3231_Read_Time *****************
 10475 ;; Defined at:
 10476 ;;		line 43 in file "I2C_Support.c"
 10477 ;; Parameters:    Size  Location     Type
 10478 ;;		None
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;  Device          1   20[COMRAM] unsigned char 
 10481 ;;  Address         1   19[COMRAM] unsigned char 
 10482 ;;  Data_Ret        1    0        unsigned char 
 10483 ;; Return value:  Size  Location     Type
 10484 ;;		None               void
 10485 ;; Registers used:
 10486 ;;		wreg, status,2, status,0, cstack
 10487 ;; Tracked objects:
 10488 ;;		On entry : 0/0
 10489 ;;		On exit  : 0/0
 10490 ;;		Unchanged: 0/0
 10491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;Total ram usage:        2 bytes
 10497 ;; Hardware stack levels used:    1
 10498 ;; Hardware stack levels required when called:    5
 10499 ;; This function calls:
 10500 ;;		_I2C_ReStart
 10501 ;;		_I2C_Read
 10502 ;;		_I2C_Start
 10503 ;;		_I2C_Stop
 10504 ;;		_I2C_Write
 10505 ;; This function is called by:
 10506 ;;		_main
 10507 ;;		_Setup_Fan_Temp
 10508 ;;		_Do_Save_New_Fan_Temp
 10509 ;;		_Do_Setup_Time
 10510 ;;		_Do_Save_New_Time
 10511 ;;		_Exit_Time_Setup
 10512 ;;		_Exit_Setup_Fan_Temp
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           	psect	text42
 10517  00415C                     __ptext42:
 10518                           	opt stack 0
 10519  00415C                     _DS3231_Read_Time:
 10520                           	opt stack 23
 10521                           
 10522                           ;I2C_Support.c: 46: char Device = 0x68;
 10523                           
 10524                           ;incstack = 0
 10525  00415C  0E68               	movlw	104
 10526  00415E  6E15               	movwf	DS3231_Read_Time@Device,c
 10527                           
 10528                           ;I2C_Support.c: 47: char Address = 0x00;
 10529  004160  0E00               	movlw	0
 10530  004162  6E14               	movwf	DS3231_Read_Time@Address,c
 10531                           
 10532                           ;I2C_Support.c: 48: char Data_Ret;
 10533                           ;I2C_Support.c: 49: I2C_Start();
 10534  004164  ECB4  F025         	call	_I2C_Start	;wreg free
 10535                           
 10536                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
 10537  004168  5015               	movf	DS3231_Read_Time@Device,w,c
 10538  00416A  2415               	addwf	DS3231_Read_Time@Device,w,c
 10539  00416C  ECF1  F022         	call	_I2C_Write
 10540                           
 10541                           ;I2C_Support.c: 51: I2C_Write(Address);
 10542  004170  5014               	movf	DS3231_Read_Time@Address,w,c
 10543  004172  ECF1  F022         	call	_I2C_Write
 10544                           
 10545                           ;I2C_Support.c: 52: I2C_ReStart();
 10546  004176  EC52  F025         	call	_I2C_ReStart	;wreg free
 10547                           
 10548                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
 10549  00417A  80D8               	bsf	status,0,c
 10550  00417C  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10551  00417E  ECF1  F022         	call	_I2C_Write
 10552                           
 10553                           ;I2C_Support.c: 54: second = I2C_Read(1);
 10554  004182  0E01               	movlw	1
 10555  004184  EC2F  F022         	call	_I2C_Read
 10556  004188  6E6B               	movwf	_second,c
 10557                           
 10558                           ;I2C_Support.c: 55: minute = I2C_Read(1);
 10559  00418A  0E01               	movlw	1
 10560  00418C  EC2F  F022         	call	_I2C_Read
 10561  004190  6E69               	movwf	_minute,c
 10562                           
 10563                           ;I2C_Support.c: 56: hour = I2C_Read(1);
 10564  004192  0E01               	movlw	1
 10565  004194  EC2F  F022         	call	_I2C_Read
 10566  004198  6E68               	movwf	_hour,c
 10567                           
 10568                           ;I2C_Support.c: 57: dow = I2C_Read(1);
 10569  00419A  0E01               	movlw	1
 10570  00419C  EC2F  F022         	call	_I2C_Read
 10571  0041A0  0100               	movlb	0	; () banked
 10572  0041A2  6FEF               	movwf	_dow& (0+255),b
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;I2C_Support.c: 58: day = I2C_Read(1);
 10576  0041A4  0E01               	movlw	1
 10577  0041A6  EC2F  F022         	call	_I2C_Read
 10578  0041AA  6E66               	movwf	_day,c
 10579                           
 10580                           ;I2C_Support.c: 59: month = I2C_Read(1);
 10581  0041AC  0E01               	movlw	1
 10582  0041AE  EC2F  F022         	call	_I2C_Read
 10583  0041B2  6E6A               	movwf	_month,c
 10584                           
 10585                           ;I2C_Support.c: 60: year = I2C_Read(0);
 10586  0041B4  0E00               	movlw	0
 10587  0041B6  EC2F  F022         	call	_I2C_Read
 10588  0041BA  6E6F               	movwf	_year,c
 10589                           
 10590                           ;I2C_Support.c: 61: I2C_Stop();
 10591  0041BC  ECAB  F025         	call	_I2C_Stop	;wreg free
 10592  0041C0  0012               	return		;funcret
 10593  0041C2                     __end_of_DS3231_Read_Time:
 10594                           	opt stack 0
 10595                           tblptru	equ	0xFF8
 10596                           tblptrh	equ	0xFF7
 10597                           tblptrl	equ	0xFF6
 10598                           tablat	equ	0xFF5
 10599                           prodh	equ	0xFF4
 10600                           prodl	equ	0xFF3
 10601                           intcon	equ	0xFF2
 10602                           intcon2	equ	0xFF1
 10603                           intcon3	equ	0xFF0
 10604                           postinc0	equ	0xFEE
 10605                           wreg	equ	0xFE8
 10606                           postdec1	equ	0xFE5
 10607                           plusw1	equ	0xFE3
 10608                           fsr1l	equ	0xFE1
 10609                           indf2	equ	0xFDF
 10610                           postinc2	equ	0xFDE
 10611                           plusw2	equ	0xFDB
 10612                           fsr2h	equ	0xFDA
 10613                           fsr2l	equ	0xFD9
 10614                           status	equ	0xFD8
 10615                           
 10616 ;; *************** function _Decrease_Time *****************
 10617 ;; Defined at:
 10618 ;;		line 155 in file "Setup_Time.c"
 10619 ;; Parameters:    Size  Location     Type
 10620 ;;		None
 10621 ;; Auto vars:     Size  Location     Type
 10622 ;;		None
 10623 ;; Return value:  Size  Location     Type
 10624 ;;		None               void
 10625 ;; Registers used:
 10626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10627 ;; Tracked objects:
 10628 ;;		On entry : 0/0
 10629 ;;		On exit  : 0/0
 10630 ;;		Unchanged: 0/0
 10631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;Total ram usage:        0 bytes
 10637 ;; Hardware stack levels used:    1
 10638 ;; Hardware stack levels required when called:   10
 10639 ;; This function calls:
 10640 ;;		_Update_Setup_Time_Screen
 10641 ;; This function is called by:
 10642 ;;		_Do_Setup_Time
 10643 ;; This function uses a non-reentrant model
 10644 ;;
 10645                           
 10646                           	psect	text43
 10647  003768                     __ptext43:
 10648                           	opt stack 0
 10649  003768                     _Decrease_Time:
 10650                           	opt stack 19
 10651                           
 10652                           ;Setup_Time.c: 157: switch (Select_Field)
 10653                           
 10654                           ;incstack = 0
 10655  003768  D042               	goto	l9657
 10656  00376A                     l9619:
 10657                           
 10658                           ;Setup_Time.c: 160: if (setup_hour == 0) setup_hour = 23;
 10659  00376A  0100               	movlb	0	; () banked
 10660  00376C  51F4               	movf	_setup_hour& (0+255),w,b
 10661  00376E  A4D8               	btfss	status,2,c
 10662  003770  D004               	goto	l9623
 10663                           
 10664                           ; BSR set to: 0
 10665  003772  0E17               	movlw	23
 10666  003774  0100               	movlb	0	; () banked
 10667  003776  6FF4               	movwf	_setup_hour& (0+255),b
 10668  003778  D04F               	goto	l9659
 10669  00377A                     l9623:
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;Setup_Time.c: 161: else --setup_hour;
 10673  00377A  0100               	movlb	0	; () banked
 10674  00377C  07F4               	decf	_setup_hour& (0+255),f,b
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;Setup_Time.c: 162: break;
 10678  00377E  D04C               	goto	l9659
 10679  003780                     l9625:
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;Setup_Time.c: 165: if (setup_minute == 0) setup_minute = 59;
 10683  003780  0100               	movlb	0	; () banked
 10684  003782  51F5               	movf	_setup_minute& (0+255),w,b
 10685  003784  A4D8               	btfss	status,2,c
 10686  003786  D004               	goto	l9629
 10687                           
 10688                           ; BSR set to: 0
 10689  003788  0E3B               	movlw	59
 10690  00378A  0100               	movlb	0	; () banked
 10691  00378C  6FF5               	movwf	_setup_minute& (0+255),b
 10692  00378E  D044               	goto	l9659
 10693  003790                     l9629:
 10694                           
 10695                           ; BSR set to: 0
 10696                           ;Setup_Time.c: 166: else --setup_minute;
 10697  003790  0100               	movlb	0	; () banked
 10698  003792  07F5               	decf	_setup_minute& (0+255),f,b
 10699                           
 10700                           ; BSR set to: 0
 10701                           ;Setup_Time.c: 167: break;
 10702  003794  D041               	goto	l9659
 10703  003796                     l9631:
 10704                           
 10705                           ; BSR set to: 0
 10706                           ;Setup_Time.c: 171: if (setup_second == 0) setup_second = 59;
 10707  003796  0100               	movlb	0	; () banked
 10708  003798  51F7               	movf	_setup_second& (0+255),w,b
 10709  00379A  A4D8               	btfss	status,2,c
 10710  00379C  D004               	goto	l9635
 10711                           
 10712                           ; BSR set to: 0
 10713  00379E  0E3B               	movlw	59
 10714  0037A0  0100               	movlb	0	; () banked
 10715  0037A2  6FF7               	movwf	_setup_second& (0+255),b
 10716  0037A4  D039               	goto	l9659
 10717  0037A6                     l9635:
 10718                           
 10719                           ; BSR set to: 0
 10720                           ;Setup_Time.c: 172: else --setup_second;
 10721  0037A6  0100               	movlb	0	; () banked
 10722  0037A8  07F7               	decf	_setup_second& (0+255),f,b
 10723                           
 10724                           ; BSR set to: 0
 10725                           ;Setup_Time.c: 173: break;
 10726  0037AA  D036               	goto	l9659
 10727  0037AC                     l9637:
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;Setup_Time.c: 177: if (setup_month == 1) setup_month = 12;
 10731  0037AC  0100               	movlb	0	; () banked
 10732  0037AE  05F6               	decf	_setup_month& (0+255),w,b
 10733  0037B0  A4D8               	btfss	status,2,c
 10734  0037B2  D004               	goto	l9641
 10735                           
 10736                           ; BSR set to: 0
 10737  0037B4  0E0C               	movlw	12
 10738  0037B6  0100               	movlb	0	; () banked
 10739  0037B8  6FF6               	movwf	_setup_month& (0+255),b
 10740  0037BA  D02E               	goto	l9659
 10741  0037BC                     l9641:
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;Setup_Time.c: 178: else --setup_month;
 10745  0037BC  0100               	movlb	0	; () banked
 10746  0037BE  07F6               	decf	_setup_month& (0+255),f,b
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;Setup_Time.c: 179: break;
 10750  0037C0  D02B               	goto	l9659
 10751  0037C2                     l9643:
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;Setup_Time.c: 183: if (setup_day == 1) setup_day = 1;
 10755  0037C2  0100               	movlb	0	; () banked
 10756  0037C4  05F3               	decf	_setup_day& (0+255),w,b
 10757  0037C6  A4D8               	btfss	status,2,c
 10758  0037C8  D004               	goto	l9647
 10759                           
 10760                           ; BSR set to: 0
 10761  0037CA  0E01               	movlw	1
 10762  0037CC  0100               	movlb	0	; () banked
 10763  0037CE  6FF3               	movwf	_setup_day& (0+255),b
 10764  0037D0  D023               	goto	l9659
 10765  0037D2                     l9647:
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;Setup_Time.c: 184: else --setup_day;
 10769  0037D2  0100               	movlb	0	; () banked
 10770  0037D4  07F3               	decf	_setup_day& (0+255),f,b
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;Setup_Time.c: 185: break;
 10774  0037D6  D020               	goto	l9659
 10775  0037D8                     l9649:
 10776                           
 10777                           ; BSR set to: 0
 10778                           ;Setup_Time.c: 189: if (setup_year == 00) setup_year = 99;
 10779  0037D8  0100               	movlb	0	; () banked
 10780  0037DA  51F8               	movf	_setup_year& (0+255),w,b
 10781  0037DC  A4D8               	btfss	status,2,c
 10782  0037DE  D004               	goto	l9653
 10783                           
 10784                           ; BSR set to: 0
 10785  0037E0  0E63               	movlw	99
 10786  0037E2  0100               	movlb	0	; () banked
 10787  0037E4  6FF8               	movwf	_setup_year& (0+255),b
 10788  0037E6  D018               	goto	l9659
 10789  0037E8                     l9653:
 10790                           
 10791                           ; BSR set to: 0
 10792                           ;Setup_Time.c: 190: else --setup_year;
 10793  0037E8  0100               	movlb	0	; () banked
 10794  0037EA  07F8               	decf	_setup_year& (0+255),f,b
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;Setup_Time.c: 195: }
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;Setup_Time.c: 194: break;
 10801                           
 10802                           ;Setup_Time.c: 193: default:
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;Setup_Time.c: 191: break;
 10806  0037EC  D015               	goto	l9659
 10807  0037EE                     l9657:
 10808  0037EE  0100               	movlb	0	; () banked
 10809  0037F0  51EC               	movf	_Select_Field& (0+255),w,b
 10810                           
 10811                           ; Switch size 1, requested type "space"
 10812                           ; Number of cases is 6, Range of values is 0 to 5
 10813                           ; switch strategies available:
 10814                           ; Name         Instructions Cycles
 10815                           ; simple_byte           19    10 (average)
 10816                           ;	Chosen strategy is simple_byte
 10817  0037F2  0A00               	xorlw	0	; case 0
 10818  0037F4  B4D8               	btfsc	status,2,c
 10819  0037F6  D7B9               	goto	l9619
 10820  0037F8  0A01               	xorlw	1	; case 1
 10821  0037FA  B4D8               	btfsc	status,2,c
 10822  0037FC  D7C1               	goto	l9625
 10823  0037FE  0A03               	xorlw	3	; case 2
 10824  003800  B4D8               	btfsc	status,2,c
 10825  003802  D7C9               	goto	l9631
 10826  003804  0A01               	xorlw	1	; case 3
 10827  003806  B4D8               	btfsc	status,2,c
 10828  003808  D7D1               	goto	l9637
 10829  00380A  0A07               	xorlw	7	; case 4
 10830  00380C  B4D8               	btfsc	status,2,c
 10831  00380E  D7D9               	goto	l9643
 10832  003810  0A01               	xorlw	1	; case 5
 10833  003812  B4D8               	btfsc	status,2,c
 10834  003814  D7E1               	goto	l9649
 10835  003816  D000               	goto	l9659
 10836  003818                     l9659:
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;Setup_Time.c: 196: Update_Setup_Time_Screen();
 10840  003818  EC83  F014         	call	_Update_Setup_Time_Screen	;wreg free
 10841  00381C  0012               	return		;funcret
 10842  00381E                     __end_of_Decrease_Time:
 10843                           	opt stack 0
 10844                           tblptru	equ	0xFF8
 10845                           tblptrh	equ	0xFF7
 10846                           tblptrl	equ	0xFF6
 10847                           tablat	equ	0xFF5
 10848                           prodh	equ	0xFF4
 10849                           prodl	equ	0xFF3
 10850                           intcon	equ	0xFF2
 10851                           intcon2	equ	0xFF1
 10852                           intcon3	equ	0xFF0
 10853                           postinc0	equ	0xFEE
 10854                           wreg	equ	0xFE8
 10855                           postdec1	equ	0xFE5
 10856                           plusw1	equ	0xFE3
 10857                           fsr1l	equ	0xFE1
 10858                           indf2	equ	0xFDF
 10859                           postinc2	equ	0xFDE
 10860                           plusw2	equ	0xFDB
 10861                           fsr2h	equ	0xFDA
 10862                           fsr2l	equ	0xFD9
 10863                           status	equ	0xFD8
 10864                           
 10865 ;; *************** function _Update_Setup_Time_Screen *****************
 10866 ;; Defined at:
 10867 ;;		line 266 in file "Setup_Time.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;		None
 10870 ;; Auto vars:     Size  Location     Type
 10871 ;;		None
 10872 ;; Return value:  Size  Location     Type
 10873 ;;		None               void
 10874 ;; Registers used:
 10875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10876 ;; Tracked objects:
 10877 ;;		On entry : 0/0
 10878 ;;		On exit  : 0/0
 10879 ;;		Unchanged: 0/0
 10880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10885 ;;Total ram usage:        0 bytes
 10886 ;; Hardware stack levels used:    1
 10887 ;; Hardware stack levels required when called:    9
 10888 ;; This function calls:
 10889 ;;		___awdiv
 10890 ;;		___awmod
 10891 ;;		_drawtext
 10892 ;; This function is called by:
 10893 ;;		_Do_Setup_Time
 10894 ;;		_Increase_Time
 10895 ;;		_Decrease_Time
 10896 ;; This function uses a non-reentrant model
 10897 ;;
 10898                           
 10899                           	psect	text44
 10900  002906                     __ptext44:
 10901                           	opt stack 0
 10902  002906                     _Update_Setup_Time_Screen:
 10903                           	opt stack 20
 10904                           
 10905                           ;Setup_Time.c: 268: setup_time[0] = (setup_hour/10) + '0';
 10906                           
 10907                           ;incstack = 0
 10908  002906  C0F4  F017         	movff	_setup_hour,___awdiv@dividend
 10909  00290A  6A18               	clrf	___awdiv@dividend+1,c
 10910  00290C  0E00               	movlw	0
 10911  00290E  6E1A               	movwf	___awdiv@divisor+1,c
 10912  002910  0E0A               	movlw	10
 10913  002912  6E19               	movwf	___awdiv@divisor,c
 10914  002914  EC61  F01D         	call	___awdiv	;wreg free
 10915  002918  5017               	movf	?___awdiv,w,c
 10916  00291A  0F30               	addlw	48
 10917  00291C  0101               	movlb	1	; () banked
 10918  00291E  6F61               	movwf	_setup_time& (0+255),b
 10919                           
 10920                           ;Setup_Time.c: 269: setup_time[1] = (setup_hour%10) + '0';
 10921  002920  C0F4  F03D         	movff	_setup_hour,___awmod@dividend
 10922  002924  6A3E               	clrf	___awmod@dividend+1,c
 10923  002926  0E00               	movlw	0
 10924  002928  6E40               	movwf	___awmod@divisor+1,c
 10925  00292A  0E0A               	movlw	10
 10926  00292C  6E3F               	movwf	___awmod@divisor,c
 10927  00292E  EC90  F01F         	call	___awmod	;wreg free
 10928  002932  503D               	movf	?___awmod,w,c
 10929  002934  0F30               	addlw	48
 10930  002936  0101               	movlb	1	; () banked
 10931  002938  6F62               	movwf	(_setup_time+1)& (0+255),b
 10932                           
 10933                           ;Setup_Time.c: 271: setup_time[3] = (setup_minute/10) + '0';
 10934  00293A  C0F5  F017         	movff	_setup_minute,___awdiv@dividend
 10935  00293E  6A18               	clrf	___awdiv@dividend+1,c
 10936  002940  0E00               	movlw	0
 10937  002942  6E1A               	movwf	___awdiv@divisor+1,c
 10938  002944  0E0A               	movlw	10
 10939  002946  6E19               	movwf	___awdiv@divisor,c
 10940  002948  EC61  F01D         	call	___awdiv	;wreg free
 10941  00294C  5017               	movf	?___awdiv,w,c
 10942  00294E  0F30               	addlw	48
 10943  002950  0101               	movlb	1	; () banked
 10944  002952  6F64               	movwf	(_setup_time+3)& (0+255),b
 10945                           
 10946                           ;Setup_Time.c: 272: setup_time[4] = (setup_minute%10) + '0';
 10947  002954  C0F5  F03D         	movff	_setup_minute,___awmod@dividend
 10948  002958  6A3E               	clrf	___awmod@dividend+1,c
 10949  00295A  0E00               	movlw	0
 10950  00295C  6E40               	movwf	___awmod@divisor+1,c
 10951  00295E  0E0A               	movlw	10
 10952  002960  6E3F               	movwf	___awmod@divisor,c
 10953  002962  EC90  F01F         	call	___awmod	;wreg free
 10954  002966  503D               	movf	?___awmod,w,c
 10955  002968  0F30               	addlw	48
 10956  00296A  0101               	movlb	1	; () banked
 10957  00296C  6F65               	movwf	(_setup_time+4)& (0+255),b
 10958                           
 10959                           ;Setup_Time.c: 274: setup_time[6] = (setup_second/10) + '0';
 10960  00296E  C0F7  F017         	movff	_setup_second,___awdiv@dividend
 10961  002972  6A18               	clrf	___awdiv@dividend+1,c
 10962  002974  0E00               	movlw	0
 10963  002976  6E1A               	movwf	___awdiv@divisor+1,c
 10964  002978  0E0A               	movlw	10
 10965  00297A  6E19               	movwf	___awdiv@divisor,c
 10966  00297C  EC61  F01D         	call	___awdiv	;wreg free
 10967  002980  5017               	movf	?___awdiv,w,c
 10968  002982  0F30               	addlw	48
 10969  002984  0101               	movlb	1	; () banked
 10970  002986  6F67               	movwf	(_setup_time+6)& (0+255),b
 10971                           
 10972                           ;Setup_Time.c: 275: setup_time[7] = (setup_second%10) + '0';
 10973  002988  C0F7  F03D         	movff	_setup_second,___awmod@dividend
 10974  00298C  6A3E               	clrf	___awmod@dividend+1,c
 10975  00298E  0E00               	movlw	0
 10976  002990  6E40               	movwf	___awmod@divisor+1,c
 10977  002992  0E0A               	movlw	10
 10978  002994  6E3F               	movwf	___awmod@divisor,c
 10979  002996  EC90  F01F         	call	___awmod	;wreg free
 10980  00299A  503D               	movf	?___awmod,w,c
 10981  00299C  0F30               	addlw	48
 10982  00299E  0101               	movlb	1	; () banked
 10983  0029A0  6F68               	movwf	(_setup_time+7)& (0+255),b
 10984                           
 10985                           ;Setup_Time.c: 277: setup_date[0] = (setup_month/10) + '0';
 10986  0029A2  C0F6  F017         	movff	_setup_month,___awdiv@dividend
 10987  0029A6  6A18               	clrf	___awdiv@dividend+1,c
 10988  0029A8  0E00               	movlw	0
 10989  0029AA  6E1A               	movwf	___awdiv@divisor+1,c
 10990  0029AC  0E0A               	movlw	10
 10991  0029AE  6E19               	movwf	___awdiv@divisor,c
 10992  0029B0  EC61  F01D         	call	___awdiv	;wreg free
 10993  0029B4  5017               	movf	?___awdiv,w,c
 10994  0029B6  0F30               	addlw	48
 10995  0029B8  0101               	movlb	1	; () banked
 10996  0029BA  6F58               	movwf	_setup_date& (0+255),b
 10997                           
 10998                           ;Setup_Time.c: 278: setup_date[1] = (setup_month%10) + '0';
 10999  0029BC  C0F6  F03D         	movff	_setup_month,___awmod@dividend
 11000  0029C0  6A3E               	clrf	___awmod@dividend+1,c
 11001  0029C2  0E00               	movlw	0
 11002  0029C4  6E40               	movwf	___awmod@divisor+1,c
 11003  0029C6  0E0A               	movlw	10
 11004  0029C8  6E3F               	movwf	___awmod@divisor,c
 11005  0029CA  EC90  F01F         	call	___awmod	;wreg free
 11006  0029CE  503D               	movf	?___awmod,w,c
 11007  0029D0  0F30               	addlw	48
 11008  0029D2  0101               	movlb	1	; () banked
 11009  0029D4  6F59               	movwf	(_setup_date+1)& (0+255),b
 11010                           
 11011                           ;Setup_Time.c: 280: setup_date[3] = (setup_day/10) + '0';
 11012  0029D6  C0F3  F017         	movff	_setup_day,___awdiv@dividend
 11013  0029DA  6A18               	clrf	___awdiv@dividend+1,c
 11014  0029DC  0E00               	movlw	0
 11015  0029DE  6E1A               	movwf	___awdiv@divisor+1,c
 11016  0029E0  0E0A               	movlw	10
 11017  0029E2  6E19               	movwf	___awdiv@divisor,c
 11018  0029E4  EC61  F01D         	call	___awdiv	;wreg free
 11019  0029E8  5017               	movf	?___awdiv,w,c
 11020  0029EA  0F30               	addlw	48
 11021  0029EC  0101               	movlb	1	; () banked
 11022  0029EE  6F5B               	movwf	(_setup_date+3)& (0+255),b
 11023                           
 11024                           ;Setup_Time.c: 281: setup_date[4] = (setup_day%10) + '0';
 11025  0029F0  C0F3  F03D         	movff	_setup_day,___awmod@dividend
 11026  0029F4  6A3E               	clrf	___awmod@dividend+1,c
 11027  0029F6  0E00               	movlw	0
 11028  0029F8  6E40               	movwf	___awmod@divisor+1,c
 11029  0029FA  0E0A               	movlw	10
 11030  0029FC  6E3F               	movwf	___awmod@divisor,c
 11031  0029FE  EC90  F01F         	call	___awmod	;wreg free
 11032  002A02  503D               	movf	?___awmod,w,c
 11033  002A04  0F30               	addlw	48
 11034  002A06  0101               	movlb	1	; () banked
 11035  002A08  6F5C               	movwf	(_setup_date+4)& (0+255),b
 11036                           
 11037                           ;Setup_Time.c: 283: setup_date[6] = (setup_year/10) + '0';
 11038  002A0A  C0F8  F017         	movff	_setup_year,___awdiv@dividend
 11039  002A0E  6A18               	clrf	___awdiv@dividend+1,c
 11040  002A10  0E00               	movlw	0
 11041  002A12  6E1A               	movwf	___awdiv@divisor+1,c
 11042  002A14  0E0A               	movlw	10
 11043  002A16  6E19               	movwf	___awdiv@divisor,c
 11044  002A18  EC61  F01D         	call	___awdiv	;wreg free
 11045  002A1C  5017               	movf	?___awdiv,w,c
 11046  002A1E  0F30               	addlw	48
 11047  002A20  0101               	movlb	1	; () banked
 11048  002A22  6F5E               	movwf	(_setup_date+6)& (0+255),b
 11049                           
 11050                           ;Setup_Time.c: 284: setup_date[7] = (setup_year%10) + '0';
 11051  002A24  C0F8  F03D         	movff	_setup_year,___awmod@dividend
 11052  002A28  6A3E               	clrf	___awmod@dividend+1,c
 11053  002A2A  0E00               	movlw	0
 11054  002A2C  6E40               	movwf	___awmod@divisor+1,c
 11055  002A2E  0E0A               	movlw	10
 11056  002A30  6E3F               	movwf	___awmod@divisor,c
 11057  002A32  EC90  F01F         	call	___awmod	;wreg free
 11058  002A36  503D               	movf	?___awmod,w,c
 11059  002A38  0F30               	addlw	48
 11060  002A3A  0101               	movlb	1	; () banked
 11061  002A3C  6F5F               	movwf	(_setup_date+7)& (0+255),b
 11062                           
 11063                           ; BSR set to: 1
 11064                           ;Setup_Time.c: 286: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
 11065  002A3E  0E34               	movlw	52
 11066  002A40  6E39               	movwf	drawtext@y,c
 11067  002A42  0E61               	movlw	low _setup_time
 11068  002A44  6E3A               	movwf	drawtext@_text,c
 11069  002A46  0E01               	movlw	high _setup_time
 11070  002A48  6E3B               	movwf	drawtext@_text+1,c
 11071  002A4A  0E07               	movlw	7
 11072  002A4C  6E3D               	movwf	drawtext@color+1,c
 11073  002A4E  683C               	setf	drawtext@color,c
 11074  002A50  0E00               	movlw	0
 11075  002A52  6E3F               	movwf	drawtext@bg+1,c
 11076  002A54  0E00               	movlw	0
 11077  002A56  6E3E               	movwf	drawtext@bg,c
 11078  002A58  0E02               	movlw	2
 11079  002A5A  6E40               	movwf	drawtext@size,c
 11080  002A5C  0E0F               	movlw	15
 11081  002A5E  EC01  F01A         	call	_drawtext
 11082                           
 11083                           ;Setup_Time.c: 287: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
 11084  002A62  0E52               	movlw	82
 11085  002A64  6E39               	movwf	drawtext@y,c
 11086  002A66  0E58               	movlw	low _setup_date
 11087  002A68  6E3A               	movwf	drawtext@_text,c
 11088  002A6A  0E01               	movlw	high _setup_date
 11089  002A6C  6E3B               	movwf	drawtext@_text+1,c
 11090  002A6E  0E07               	movlw	7
 11091  002A70  6E3D               	movwf	drawtext@color+1,c
 11092  002A72  0EE0               	movlw	224
 11093  002A74  6E3C               	movwf	drawtext@color,c
 11094  002A76  0E00               	movlw	0
 11095  002A78  6E3F               	movwf	drawtext@bg+1,c
 11096  002A7A  0E00               	movlw	0
 11097  002A7C  6E3E               	movwf	drawtext@bg,c
 11098  002A7E  0E02               	movlw	2
 11099  002A80  6E40               	movwf	drawtext@size,c
 11100  002A82  0E0F               	movlw	15
 11101  002A84  EC01  F01A         	call	_drawtext
 11102  002A88  0012               	return		;funcret
 11103  002A8A                     __end_of_Update_Setup_Time_Screen:
 11104                           	opt stack 0
 11105                           tblptru	equ	0xFF8
 11106                           tblptrh	equ	0xFF7
 11107                           tblptrl	equ	0xFF6
 11108                           tablat	equ	0xFF5
 11109                           prodh	equ	0xFF4
 11110                           prodl	equ	0xFF3
 11111                           intcon	equ	0xFF2
 11112                           intcon2	equ	0xFF1
 11113                           intcon3	equ	0xFF0
 11114                           postinc0	equ	0xFEE
 11115                           wreg	equ	0xFE8
 11116                           postdec1	equ	0xFE5
 11117                           plusw1	equ	0xFE3
 11118                           fsr1l	equ	0xFE1
 11119                           indf2	equ	0xFDF
 11120                           postinc2	equ	0xFDE
 11121                           plusw2	equ	0xFDB
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126 ;; *************** function _drawtext *****************
 11127 ;; Defined at:
 11128 ;;		line 422 in file "ST7735_TFT.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;  x               1    wreg     unsigned char 
 11131 ;;  y               1   56[COMRAM] unsigned char 
 11132 ;;  _text           2   57[COMRAM] PTR unsigned char 
 11133 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11134 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11135 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11136 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11137 ;;		 -> Timing_Txt(23), 
 11138 ;;  color           2   59[COMRAM] unsigned int 
 11139 ;;  bg              2   61[COMRAM] unsigned int 
 11140 ;;  size            1   63[COMRAM] unsigned char 
 11141 ;; Auto vars:     Size  Location     Type
 11142 ;;  x               1   66[COMRAM] unsigned char 
 11143 ;;  i               2   69[COMRAM] unsigned int 
 11144 ;;  textsize        2   67[COMRAM] unsigned int 
 11145 ;;  cursor_x        1   72[COMRAM] unsigned char 
 11146 ;;  cursor_y        1   71[COMRAM] unsigned char 
 11147 ;; Return value:  Size  Location     Type
 11148 ;;		None               void
 11149 ;; Registers used:
 11150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11151 ;; Tracked objects:
 11152 ;;		On entry : 0/0
 11153 ;;		On exit  : 0/0
 11154 ;;		Unchanged: 0/0
 11155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11156 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11157 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11158 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11159 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11160 ;;Total ram usage:       17 bytes
 11161 ;; Hardware stack levels used:    1
 11162 ;; Hardware stack levels required when called:    8
 11163 ;; This function calls:
 11164 ;;		_drawChar
 11165 ;;		_strlen
 11166 ;; This function is called by:
 11167 ;;		_Initialize_Screen
 11168 ;;		_Update_Screen
 11169 ;;		_Initialize_Setup_Fan_Screen
 11170 ;;		_Update_Setup_Fan_Screen
 11171 ;;		_Initialize_Setup_Time_Screen
 11172 ;;		_Update_Setup_Time_Screen
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           	psect	text45
 11177  003402                     __ptext45:
 11178                           	opt stack 0
 11179  003402                     _drawtext:
 11180                           	opt stack 21
 11181                           
 11182                           ;incstack = 0
 11183                           ;drawtext@x stored from wreg
 11184  003402  6E43               	movwf	drawtext@x,c
 11185                           
 11186                           ;ST7735_TFT.c: 424: unsigned char cursor_x, cursor_y;
 11187                           ;ST7735_TFT.c: 425: unsigned int textsize, i;
 11188                           ;ST7735_TFT.c: 426: cursor_x = x, cursor_y = y;
 11189  003404  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 11190  003408  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 11191                           
 11192                           ;ST7735_TFT.c: 427: textsize = strlen(_text);
 11193  00340C  C03A  F011         	movff	drawtext@_text,strlen@s
 11194  003410  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 11195  003414  ECD2  F022         	call	_strlen	;wreg free
 11196  003418  C011  F044         	movff	?_strlen,drawtext@textsize
 11197  00341C  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 11198                           
 11199                           ;ST7735_TFT.c: 428: for(i = 0; i < textsize; i++){
 11200  003420  0E00               	movlw	0
 11201  003422  6E47               	movwf	drawtext@i+1,c
 11202  003424  0E00               	movlw	0
 11203  003426  6E46               	movwf	drawtext@i,c
 11204  003428  D056               	goto	l9195
 11205  00342A                     l9169:
 11206                           
 11207                           ;ST7735_TFT.c: 429: if(wrap && ((cursor_x + size * 5) > 128)){
 11208  00342A  0100               	movlb	0	; () banked
 11209  00342C  51B8               	movf	_wrap& (0+255),w,b
 11210  00342E  0100               	movlb	0	; () banked
 11211  003430  B4D8               	btfsc	status,2,c
 11212  003432  D02C               	goto	l9185
 11213                           
 11214                           ; BSR set to: 0
 11215  003434  5040               	movf	drawtext@size,w,c
 11216  003436  0D05               	mullw	5
 11217  003438  5049               	movf	drawtext@cursor_x,w,c
 11218  00343A  6E41               	movwf	??_drawtext& (0+255),c
 11219  00343C  6A42               	clrf	(??_drawtext+1)& (0+255),c
 11220  00343E  50F3               	movf	prodl,w,c
 11221  003440  2641               	addwf	??_drawtext,f,c
 11222  003442  50F4               	movf	prodh,w,c
 11223  003444  2242               	addwfc	??_drawtext+1,f,c
 11224  003446  BE42               	btfsc	??_drawtext+1,7,c
 11225  003448  D021               	goto	l9185
 11226  00344A  5042               	movf	??_drawtext+1,w,c
 11227  00344C  E104               	bnz	u8040
 11228  00344E  0E81               	movlw	129
 11229  003450  5C41               	subwf	??_drawtext,w,c
 11230  003452  A0D8               	btfss	status,0,c
 11231  003454  D01B               	goto	l9185
 11232  003456                     u8040:
 11233                           
 11234                           ; BSR set to: 0
 11235                           ;ST7735_TFT.c: 430: cursor_x = 0;
 11236  003456  0E00               	movlw	0
 11237  003458  6E49               	movwf	drawtext@cursor_x,c
 11238                           
 11239                           ; BSR set to: 0
 11240                           ;ST7735_TFT.c: 431: cursor_y = cursor_y + size * 7 + 3 ;
 11241  00345A  5040               	movf	drawtext@size,w,c
 11242  00345C  0D07               	mullw	7
 11243  00345E  50F3               	movf	prodl,w,c
 11244  003460  2448               	addwf	drawtext@cursor_y,w,c
 11245  003462  0F03               	addlw	3
 11246  003464  6E48               	movwf	drawtext@cursor_y,c
 11247                           
 11248                           ; BSR set to: 0
 11249                           ;ST7735_TFT.c: 432: if(cursor_y > 160) cursor_y = 160;
 11250  003466  0EA0               	movlw	160
 11251  003468  6448               	cpfsgt	drawtext@cursor_y,c
 11252  00346A  D003               	goto	l9181
 11253                           
 11254                           ; BSR set to: 0
 11255  00346C  0EA0               	movlw	160
 11256  00346E  6E48               	movwf	drawtext@cursor_y,c
 11257  003470  D000               	goto	l9181
 11258  003472                     l9181:
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;ST7735_TFT.c: 433: if(_text[i] == 0x20) goto _skip; }
 11262  003472  5046               	movf	drawtext@i,w,c
 11263  003474  243A               	addwf	drawtext@_text,w,c
 11264  003476  6ED9               	movwf	fsr2l,c
 11265  003478  5047               	movf	drawtext@i+1,w,c
 11266  00347A  203B               	addwfc	drawtext@_text+1,w,c
 11267  00347C  6EDA               	movwf	fsr2h,c
 11268  00347E  0E20               	movlw	32
 11269  003480  18DE               	xorwf	postinc2,w,c
 11270  003482  B4D8               	btfsc	status,2,c
 11271  003484  D025               	goto	l9193
 11272  003486  D002               	goto	l9185
 11273                           
 11274                           ; BSR set to: 0
 11275  003488  D023               	goto	l9193
 11276                           
 11277                           ; BSR set to: 0
 11278  00348A  D000               	goto	l9185
 11279  00348C                     l9185:
 11280                           
 11281                           ; BSR set to: 0
 11282                           ;ST7735_TFT.c: 434: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 11283  00348C  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 11284  003490  5046               	movf	drawtext@i,w,c
 11285  003492  243A               	addwf	drawtext@_text,w,c
 11286  003494  6ED9               	movwf	fsr2l,c
 11287  003496  5047               	movf	drawtext@i+1,w,c
 11288  003498  203B               	addwfc	drawtext@_text+1,w,c
 11289  00349A  6EDA               	movwf	fsr2h,c
 11290  00349C  50DF               	movf	indf2,w,c
 11291  00349E  6E2F               	movwf	drawChar@c,c
 11292  0034A0  C03C  F030         	movff	drawtext@color,drawChar@color
 11293  0034A4  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 11294  0034A8  C03E  F032         	movff	drawtext@bg,drawChar@bg
 11295  0034AC  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 11296  0034B0  C040  F034         	movff	drawtext@size,drawChar@size
 11297  0034B4  5049               	movf	drawtext@cursor_x,w,c
 11298  0034B6  EC45  F015         	call	_drawChar
 11299                           
 11300                           ;ST7735_TFT.c: 435: cursor_x = cursor_x + size * 6;
 11301  0034BA  5040               	movf	drawtext@size,w,c
 11302  0034BC  0D06               	mullw	6
 11303  0034BE  50F3               	movf	prodl,w,c
 11304  0034C0  2449               	addwf	drawtext@cursor_x,w,c
 11305  0034C2  6E49               	movwf	drawtext@cursor_x,c
 11306                           
 11307                           ;ST7735_TFT.c: 436: if(cursor_x > 128) cursor_x = 128;
 11308  0034C4  0E80               	movlw	128
 11309  0034C6  6449               	cpfsgt	drawtext@cursor_x,c
 11310  0034C8  D003               	goto	l9193
 11311  0034CA  0E80               	movlw	128
 11312  0034CC  6E49               	movwf	drawtext@cursor_x,c
 11313  0034CE  D000               	goto	l9193
 11314  0034D0                     l9193:
 11315  0034D0  4A46               	infsnz	drawtext@i,f,c
 11316  0034D2  2A47               	incf	drawtext@i+1,f,c
 11317  0034D4  D000               	goto	l9195
 11318  0034D6                     l9195:
 11319  0034D6  5044               	movf	drawtext@textsize,w,c
 11320  0034D8  5C46               	subwf	drawtext@i,w,c
 11321  0034DA  5045               	movf	drawtext@textsize+1,w,c
 11322  0034DC  5847               	subwfb	drawtext@i+1,w,c
 11323  0034DE  A0D8               	btfss	status,0,c
 11324  0034E0  D7A4               	goto	l9169
 11325  0034E2  0012               	return		;funcret
 11326  0034E4                     __end_of_drawtext:
 11327                           	opt stack 0
 11328                           tblptru	equ	0xFF8
 11329                           tblptrh	equ	0xFF7
 11330                           tblptrl	equ	0xFF6
 11331                           tablat	equ	0xFF5
 11332                           prodh	equ	0xFF4
 11333                           prodl	equ	0xFF3
 11334                           intcon	equ	0xFF2
 11335                           intcon2	equ	0xFF1
 11336                           intcon3	equ	0xFF0
 11337                           postinc0	equ	0xFEE
 11338                           wreg	equ	0xFE8
 11339                           postdec1	equ	0xFE5
 11340                           plusw1	equ	0xFE3
 11341                           fsr1l	equ	0xFE1
 11342                           indf2	equ	0xFDF
 11343                           postinc2	equ	0xFDE
 11344                           plusw2	equ	0xFDB
 11345                           fsr2h	equ	0xFDA
 11346                           fsr2l	equ	0xFD9
 11347                           status	equ	0xFD8
 11348                           
 11349 ;; *************** function _strlen *****************
 11350 ;; Defined at:
 11351 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 11352 ;; Parameters:    Size  Location     Type
 11353 ;;  s               2   16[COMRAM] PTR const unsigned char 
 11354 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11355 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11356 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11357 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11358 ;;		 -> Timing_Txt(23), 
 11359 ;; Auto vars:     Size  Location     Type
 11360 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 11361 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11362 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11363 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11364 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11365 ;;		 -> Timing_Txt(23), 
 11366 ;; Return value:  Size  Location     Type
 11367 ;;                  2   16[COMRAM] unsigned int 
 11368 ;; Registers used:
 11369 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11370 ;; Tracked objects:
 11371 ;;		On entry : 0/0
 11372 ;;		On exit  : 0/0
 11373 ;;		Unchanged: 0/0
 11374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;Total ram usage:        6 bytes
 11380 ;; Hardware stack levels used:    1
 11381 ;; Hardware stack levels required when called:    2
 11382 ;; This function calls:
 11383 ;;		Nothing
 11384 ;; This function is called by:
 11385 ;;		_drawtext
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           	psect	text46
 11390  0045A4                     __ptext46:
 11391                           	opt stack 0
 11392  0045A4                     _strlen:
 11393                           	opt stack 26
 11394                           
 11395                           ;incstack = 0
 11396  0045A4  C011  F015         	movff	strlen@s,strlen@cp
 11397  0045A8  C012  F016         	movff	strlen@s+1,strlen@cp+1
 11398  0045AC  D003               	goto	l5643
 11399  0045AE                     l5641:
 11400  0045AE  4A15               	infsnz	strlen@cp,f,c
 11401  0045B0  2A16               	incf	strlen@cp+1,f,c
 11402  0045B2  D000               	goto	l5643
 11403  0045B4                     l5643:
 11404  0045B4  C015  FFD9         	movff	strlen@cp,fsr2l
 11405  0045B8  C016  FFDA         	movff	strlen@cp+1,fsr2h
 11406  0045BC  50DF               	movf	indf2,w,c
 11407  0045BE  A4D8               	btfss	status,2,c
 11408  0045C0  D7F6               	goto	l5641
 11409  0045C2  C011  F013         	movff	strlen@s,??_strlen
 11410  0045C6  C012  F014         	movff	strlen@s+1,??_strlen+1
 11411  0045CA  1E13               	comf	??_strlen,f,c
 11412  0045CC  1E14               	comf	??_strlen+1,f,c
 11413  0045CE  4A13               	infsnz	??_strlen,f,c
 11414  0045D0  2A14               	incf	??_strlen+1,f,c
 11415  0045D2  5015               	movf	strlen@cp,w,c
 11416  0045D4  2413               	addwf	??_strlen,w,c
 11417  0045D6  6E11               	movwf	?_strlen,c
 11418  0045D8  5016               	movf	strlen@cp+1,w,c
 11419  0045DA  2014               	addwfc	??_strlen+1,w,c
 11420  0045DC  6E12               	movwf	?_strlen+1,c
 11421  0045DE  D000               	goto	l2079
 11422  0045E0                     l2079:
 11423  0045E0  0012               	return		;funcret
 11424  0045E2                     __end_of_strlen:
 11425                           	opt stack 0
 11426                           tblptru	equ	0xFF8
 11427                           tblptrh	equ	0xFF7
 11428                           tblptrl	equ	0xFF6
 11429                           tablat	equ	0xFF5
 11430                           prodh	equ	0xFF4
 11431                           prodl	equ	0xFF3
 11432                           intcon	equ	0xFF2
 11433                           intcon2	equ	0xFF1
 11434                           intcon3	equ	0xFF0
 11435                           postinc0	equ	0xFEE
 11436                           wreg	equ	0xFE8
 11437                           postdec1	equ	0xFE5
 11438                           plusw1	equ	0xFE3
 11439                           fsr1l	equ	0xFE1
 11440                           indf2	equ	0xFDF
 11441                           postinc2	equ	0xFDE
 11442                           plusw2	equ	0xFDB
 11443                           fsr2h	equ	0xFDA
 11444                           fsr2l	equ	0xFD9
 11445                           status	equ	0xFD8
 11446                           
 11447 ;; *************** function _drawChar *****************
 11448 ;; Defined at:
 11449 ;;		line 395 in file "ST7735_TFT.c"
 11450 ;; Parameters:    Size  Location     Type
 11451 ;;  x               1    wreg     unsigned char 
 11452 ;;  y               1   45[COMRAM] unsigned char 
 11453 ;;  c               1   46[COMRAM] unsigned char 
 11454 ;;  color           2   47[COMRAM] unsigned int 
 11455 ;;  bg              2   49[COMRAM] unsigned int 
 11456 ;;  size            1   51[COMRAM] unsigned char 
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  x               1   53[COMRAM] unsigned char 
 11459 ;;  line            1   52[COMRAM] unsigned char 
 11460 ;;  i               1   55[COMRAM] unsigned char 
 11461 ;;  j               1   54[COMRAM] unsigned char 
 11462 ;; Return value:  Size  Location     Type
 11463 ;;		None               void
 11464 ;; Registers used:
 11465 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11471 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11472 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11474 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11475 ;;Total ram usage:       11 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:    7
 11478 ;; This function calls:
 11479 ;;		___wmul
 11480 ;;		_drawPixel
 11481 ;;		_fillRect
 11482 ;; This function is called by:
 11483 ;;		_drawtext
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           	psect	text47
 11488  002A8A                     __ptext47:
 11489                           	opt stack 0
 11490  002A8A                     _drawChar:
 11491                           	opt stack 21
 11492                           
 11493                           ;incstack = 0
 11494                           ;drawChar@x stored from wreg
 11495  002A8A  6E36               	movwf	drawChar@x,c
 11496                           
 11497                           ;ST7735_TFT.c: 397: char i, j;
 11498                           ;ST7735_TFT.c: 398: if((x >= 128) || (y >= 160))
 11499  002A8C  0E80               	movlw	128
 11500  002A8E  6036               	cpfslt	drawChar@x,c
 11501  002A90  D0A6               	goto	l274
 11502  002A92  0E9F               	movlw	159
 11503  002A94  642E               	cpfsgt	drawChar@y,c
 11504  002A96  D001               	goto	l8499
 11505                           
 11506                           ;ST7735_TFT.c: 399: return;
 11507  002A98  D0A2               	goto	l274
 11508  002A9A                     l8499:
 11509                           
 11510                           ;ST7735_TFT.c: 400: if(size < 1) size = 1;
 11511  002A9A  5034               	movf	drawChar@size,w,c
 11512  002A9C  A4D8               	btfss	status,2,c
 11513  002A9E  D003               	goto	l8503
 11514  002AA0  0E01               	movlw	1
 11515  002AA2  6E34               	movwf	drawChar@size,c
 11516  002AA4  D000               	goto	l8503
 11517  002AA6                     l8503:
 11518                           
 11519                           ;ST7735_TFT.c: 401: if((c < ' ') || (c > '~'))
 11520  002AA6  0E1F               	movlw	31
 11521  002AA8  642F               	cpfsgt	drawChar@c,c
 11522  002AAA  D004               	goto	l8507
 11523  002AAC  0E7E               	movlw	126
 11524  002AAE  642F               	cpfsgt	drawChar@c,c
 11525  002AB0  D003               	goto	l276
 11526  002AB2  D000               	goto	l8507
 11527  002AB4                     l8507:
 11528                           
 11529                           ;ST7735_TFT.c: 402: c = '?';
 11530  002AB4  0E3F               	movlw	63
 11531  002AB6  6E2F               	movwf	drawChar@c,c
 11532  002AB8                     l276:
 11533                           
 11534                           ;ST7735_TFT.c: 403: for(i=0; i<5; i++ ) {
 11535  002AB8  0E00               	movlw	0
 11536  002ABA  6E38               	movwf	drawChar@i,c
 11537  002ABC                     l8509:
 11538  002ABC  0E04               	movlw	4
 11539  002ABE  6438               	cpfsgt	drawChar@i,c
 11540  002AC0  D001               	goto	l8513
 11541  002AC2  D08D               	goto	l274
 11542  002AC4                     l8513:
 11543                           
 11544                           ;ST7735_TFT.c: 404: unsigned char line;
 11545                           ;ST7735_TFT.c: 405: if(c < 'S')
 11546  002AC4  0E53               	movlw	83
 11547  002AC6  602F               	cpfslt	drawChar@c,c
 11548  002AC8  D015               	goto	l8517
 11549                           
 11550                           ;ST7735_TFT.c: 406: line = font[(c - 32)*5 + i];
 11551  002ACA  0EE0               	movlw	224
 11552  002ACC  242F               	addwf	drawChar@c,w,c
 11553  002ACE  6E11               	movwf	___wmul@multiplier,c
 11554  002AD0  6A12               	clrf	___wmul@multiplier+1,c
 11555  002AD2  0EFF               	movlw	255
 11556  002AD4  2212               	addwfc	___wmul@multiplier+1,f,c
 11557  002AD6  0E00               	movlw	0
 11558  002AD8  6E14               	movwf	___wmul@multiplicand+1,c
 11559  002ADA  0E05               	movlw	5
 11560  002ADC  6E13               	movwf	___wmul@multiplicand,c
 11561  002ADE  EC01  F024         	call	___wmul	;wreg free
 11562  002AE2  5038               	movf	drawChar@i,w,c
 11563  002AE4  2611               	addwf	?___wmul,f,c
 11564  002AE6  0E00               	movlw	0
 11565  002AE8  2212               	addwfc	?___wmul+1,f,c
 11566  002AEA  0EC1               	movlw	low _font
 11567  002AEC  2411               	addwf	?___wmul,w,c
 11568  002AEE  6EF6               	movwf	tblptrl,c
 11569  002AF0  0EFB               	movlw	high _font
 11570  002AF2  D014               	goto	L8
 11571  002AF4                     l8517:
 11572                           
 11573                           ;ST7735_TFT.c: 407: else
 11574                           ;ST7735_TFT.c: 408: line = font2[(c - 'S')*5 + i];
 11575  002AF4  0EAD               	movlw	173
 11576  002AF6  242F               	addwf	drawChar@c,w,c
 11577  002AF8  6E11               	movwf	___wmul@multiplier,c
 11578  002AFA  6A12               	clrf	___wmul@multiplier+1,c
 11579  002AFC  0EFF               	movlw	255
 11580  002AFE  2212               	addwfc	___wmul@multiplier+1,f,c
 11581  002B00  0E00               	movlw	0
 11582  002B02  6E14               	movwf	___wmul@multiplicand+1,c
 11583  002B04  0E05               	movlw	5
 11584  002B06  6E13               	movwf	___wmul@multiplicand,c
 11585  002B08  EC01  F024         	call	___wmul	;wreg free
 11586  002B0C  5038               	movf	drawChar@i,w,c
 11587  002B0E  2611               	addwf	?___wmul,f,c
 11588  002B10  0E00               	movlw	0
 11589  002B12  2212               	addwfc	?___wmul+1,f,c
 11590  002B14  0EC0               	movlw	low _font2
 11591  002B16  2411               	addwf	?___wmul,w,c
 11592  002B18  6EF6               	movwf	tblptrl,c
 11593  002B1A  0EFC               	movlw	high _font2
 11594  002B1C                     L8:
 11595  002B1C  2012               	addwfc	?___wmul+1,w,c
 11596  002B1E  6EF7               	movwf	tblptrh,c
 11597  002B20                     	if	0	;There are less than 3 active tblptr bytes
 11598  002B20                     	endif
 11599  002B20  0008               	tblrd		*
 11600  002B22  CFF5 F035          	movff	tablat,drawChar@line
 11601  002B26  D000               	goto	l8519
 11602  002B28                     l8519:
 11603                           
 11604                           ;ST7735_TFT.c: 409: for(j=0; j<7; j++, line >>= 1) {
 11605  002B28  0E00               	movlw	0
 11606  002B2A  6E37               	movwf	drawChar@j,c
 11607  002B2C                     l8521:
 11608  002B2C  0E06               	movlw	6
 11609  002B2E  6437               	cpfsgt	drawChar@j,c
 11610  002B30  D001               	goto	l283
 11611  002B32  D053               	goto	l8545
 11612  002B34                     l283:
 11613                           
 11614                           ;ST7735_TFT.c: 410: if(line & 0x01) {
 11615  002B34  A035               	btfss	drawChar@line,0,c
 11616  002B36  D023               	goto	l8531
 11617                           
 11618                           ;ST7735_TFT.c: 411: if(size == 1) drawPixel(x+i, y+j, color);
 11619  002B38  0434               	decf	drawChar@size,w,c
 11620  002B3A  A4D8               	btfss	status,2,c
 11621  002B3C  D00C               	goto	l8529
 11622  002B3E  502E               	movf	drawChar@y,w,c
 11623  002B40  2437               	addwf	drawChar@j,w,c
 11624  002B42  6E18               	movwf	drawPixel@y,c
 11625  002B44  C030  F019         	movff	drawChar@color,drawPixel@color
 11626  002B48  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 11627  002B4C  5036               	movf	drawChar@x,w,c
 11628  002B4E  2438               	addwf	drawChar@i,w,c
 11629  002B50  EC7D  F023         	call	_drawPixel
 11630  002B54  D03E               	goto	l8539
 11631  002B56                     l8529:
 11632                           
 11633                           ;ST7735_TFT.c: 412: else fillRect(x+(i*size), y+(j*size), size, size, color);
 11634  002B56  5037               	movf	drawChar@j,w,c
 11635  002B58  0234               	mulwf	drawChar@size,c
 11636  002B5A  50F3               	movf	prodl,w,c
 11637  002B5C  242E               	addwf	drawChar@y,w,c
 11638  002B5E  6E23               	movwf	fillRect@y,c
 11639  002B60  C034  F024         	movff	drawChar@size,fillRect@w
 11640  002B64  C034  F025         	movff	drawChar@size,fillRect@h
 11641  002B68  C030  F026         	movff	drawChar@color,fillRect@color
 11642  002B6C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 11643  002B70  5038               	movf	drawChar@i,w,c
 11644  002B72  0234               	mulwf	drawChar@size,c
 11645  002B74  50F3               	movf	prodl,w,c
 11646  002B76  2436               	addwf	drawChar@x,w,c
 11647  002B78  EC0A  F022         	call	_fillRect
 11648                           
 11649                           ;ST7735_TFT.c: 413: }
 11650  002B7C  D02A               	goto	l8539
 11651  002B7E                     l8531:
 11652                           
 11653                           ;ST7735_TFT.c: 414: else if(bg != color) {
 11654  002B7E  5030               	movf	drawChar@color,w,c
 11655  002B80  1832               	xorwf	drawChar@bg,w,c
 11656  002B82  E104               	bnz	u7010
 11657  002B84  5031               	movf	drawChar@color+1,w,c
 11658  002B86  1833               	xorwf	drawChar@bg+1,w,c
 11659  002B88  B4D8               	btfsc	status,2,c
 11660  002B8A  D023               	goto	l8539
 11661  002B8C                     u7010:
 11662                           
 11663                           ;ST7735_TFT.c: 415: if(size == 1) drawPixel(x+i, y+j, bg);
 11664  002B8C  0434               	decf	drawChar@size,w,c
 11665  002B8E  A4D8               	btfss	status,2,c
 11666  002B90  D00C               	goto	l8537
 11667  002B92  502E               	movf	drawChar@y,w,c
 11668  002B94  2437               	addwf	drawChar@j,w,c
 11669  002B96  6E18               	movwf	drawPixel@y,c
 11670  002B98  C032  F019         	movff	drawChar@bg,drawPixel@color
 11671  002B9C  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 11672  002BA0  5036               	movf	drawChar@x,w,c
 11673  002BA2  2438               	addwf	drawChar@i,w,c
 11674  002BA4  EC7D  F023         	call	_drawPixel
 11675  002BA8  D014               	goto	l8539
 11676  002BAA                     l8537:
 11677                           
 11678                           ;ST7735_TFT.c: 416: else fillRect(x+i*size, y+j*size, size, size, bg);
 11679  002BAA  5037               	movf	drawChar@j,w,c
 11680  002BAC  0234               	mulwf	drawChar@size,c
 11681  002BAE  50F3               	movf	prodl,w,c
 11682  002BB0  242E               	addwf	drawChar@y,w,c
 11683  002BB2  6E23               	movwf	fillRect@y,c
 11684  002BB4  C034  F024         	movff	drawChar@size,fillRect@w
 11685  002BB8  C034  F025         	movff	drawChar@size,fillRect@h
 11686  002BBC  C032  F026         	movff	drawChar@bg,fillRect@color
 11687  002BC0  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 11688  002BC4  5038               	movf	drawChar@i,w,c
 11689  002BC6  0234               	mulwf	drawChar@size,c
 11690  002BC8  50F3               	movf	prodl,w,c
 11691  002BCA  2436               	addwf	drawChar@x,w,c
 11692  002BCC  EC0A  F022         	call	_fillRect
 11693  002BD0  D000               	goto	l8539
 11694  002BD2                     l8539:
 11695  002BD2  2A37               	incf	drawChar@j,f,c
 11696  002BD4  90D8               	bcf	status,0,c
 11697  002BD6  3235               	rrcf	drawChar@line,f,c
 11698  002BD8  D7A9               	goto	l8521
 11699  002BDA                     l8545:
 11700  002BDA  2A38               	incf	drawChar@i,f,c
 11701  002BDC  D76F               	goto	l8509
 11702  002BDE                     l274:
 11703  002BDE  0012               	return		;funcret
 11704  002BE0                     __end_of_drawChar:
 11705                           	opt stack 0
 11706                           tblptru	equ	0xFF8
 11707                           tblptrh	equ	0xFF7
 11708                           tblptrl	equ	0xFF6
 11709                           tablat	equ	0xFF5
 11710                           prodh	equ	0xFF4
 11711                           prodl	equ	0xFF3
 11712                           intcon	equ	0xFF2
 11713                           intcon2	equ	0xFF1
 11714                           intcon3	equ	0xFF0
 11715                           postinc0	equ	0xFEE
 11716                           wreg	equ	0xFE8
 11717                           postdec1	equ	0xFE5
 11718                           plusw1	equ	0xFE3
 11719                           fsr1l	equ	0xFE1
 11720                           indf2	equ	0xFDF
 11721                           postinc2	equ	0xFDE
 11722                           plusw2	equ	0xFDB
 11723                           fsr2h	equ	0xFDA
 11724                           fsr2l	equ	0xFD9
 11725                           status	equ	0xFD8
 11726                           
 11727 ;; *************** function _fillRect *****************
 11728 ;; Defined at:
 11729 ;;		line 385 in file "ST7735_TFT.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;  x               1    wreg     unsigned char 
 11732 ;;  y               1   34[COMRAM] unsigned char 
 11733 ;;  w               1   35[COMRAM] unsigned char 
 11734 ;;  h               1   36[COMRAM] unsigned char 
 11735 ;;  color           2   37[COMRAM] unsigned int 
 11736 ;; Auto vars:     Size  Location     Type
 11737 ;;  x               1   42[COMRAM] unsigned char 
 11738 ;;  i               2   43[COMRAM] int 
 11739 ;; Return value:  Size  Location     Type
 11740 ;;		None               void
 11741 ;; Registers used:
 11742 ;;		wreg, status,2, status,0, cstack
 11743 ;; Tracked objects:
 11744 ;;		On entry : 0/0
 11745 ;;		On exit  : 0/0
 11746 ;;		Unchanged: 0/0
 11747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11748 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11750 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11751 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11752 ;;Total ram usage:       11 bytes
 11753 ;; Hardware stack levels used:    1
 11754 ;; Hardware stack levels required when called:    6
 11755 ;; This function calls:
 11756 ;;		_drawFastVLine
 11757 ;; This function is called by:
 11758 ;;		_drawChar
 11759 ;;		_Initialize_Setup_Time_Screen
 11760 ;;		_Update_Setup_Screen_Cursor_Forward
 11761 ;;		_Update_Setup_Screen_Cursor_Backward
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           	psect	text48
 11766  004414                     __ptext48:
 11767                           	opt stack 0
 11768  004414                     _fillRect:
 11769                           	opt stack 21
 11770                           
 11771                           ;incstack = 0
 11772                           ;fillRect@x stored from wreg
 11773  004414  6E2B               	movwf	fillRect@x,c
 11774                           
 11775                           ;ST7735_TFT.c: 387: signed int i;
 11776                           ;ST7735_TFT.c: 389: for (i = x; i < x + w; i++)
 11777  004416  C02B  F02C         	movff	fillRect@x,fillRect@i
 11778  00441A  6A2D               	clrf	fillRect@i+1,c
 11779  00441C  D00E               	goto	l5281
 11780  00441E                     l5277:
 11781                           
 11782                           ;ST7735_TFT.c: 390: {
 11783                           ;ST7735_TFT.c: 391: drawFastVLine(i, y, h, color);
 11784  00441E  C023  F018         	movff	fillRect@y,drawFastVLine@y
 11785  004422  C025  F019         	movff	fillRect@h,drawFastVLine@h
 11786  004426  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 11787  00442A  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 11788  00442E  502C               	movf	fillRect@i,w,c
 11789  004430  ECC9  F01E         	call	_drawFastVLine
 11790  004434  4A2C               	infsnz	fillRect@i,f,c
 11791  004436  2A2D               	incf	fillRect@i+1,f,c
 11792  004438  D000               	goto	l5281
 11793  00443A                     l5281:
 11794  00443A  5024               	movf	fillRect@w,w,c
 11795  00443C  C02B  F028         	movff	fillRect@x,??_fillRect
 11796  004440  6A29               	clrf	(??_fillRect+1)& (0+255),c
 11797  004442  2628               	addwf	??_fillRect,f,c
 11798  004444  0E00               	movlw	0
 11799  004446  2229               	addwfc	??_fillRect+1,f,c
 11800  004448  5028               	movf	??_fillRect,w,c
 11801  00444A  5C2C               	subwf	fillRect@i,w,c
 11802  00444C  502D               	movf	fillRect@i+1,w,c
 11803  00444E  0A80               	xorlw	128
 11804  004450  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 11805  004452  5029               	movf	??_fillRect+1,w,c
 11806  004454  0A80               	xorlw	128
 11807  004456  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 11808  004458  A0D8               	btfss	status,0,c
 11809  00445A  D7E1               	goto	l5277
 11810  00445C  0012               	return		;funcret
 11811  00445E                     __end_of_fillRect:
 11812                           	opt stack 0
 11813                           tblptru	equ	0xFF8
 11814                           tblptrh	equ	0xFF7
 11815                           tblptrl	equ	0xFF6
 11816                           tablat	equ	0xFF5
 11817                           prodh	equ	0xFF4
 11818                           prodl	equ	0xFF3
 11819                           intcon	equ	0xFF2
 11820                           intcon2	equ	0xFF1
 11821                           intcon3	equ	0xFF0
 11822                           postinc0	equ	0xFEE
 11823                           wreg	equ	0xFE8
 11824                           postdec1	equ	0xFE5
 11825                           plusw1	equ	0xFE3
 11826                           fsr1l	equ	0xFE1
 11827                           indf2	equ	0xFDF
 11828                           postinc2	equ	0xFDE
 11829                           plusw2	equ	0xFDB
 11830                           fsr2h	equ	0xFDA
 11831                           fsr2l	equ	0xFD9
 11832                           status	equ	0xFD8
 11833                           
 11834 ;; *************** function _drawFastVLine *****************
 11835 ;; Defined at:
 11836 ;;		line 364 in file "ST7735_TFT.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;  x               1    wreg     unsigned char 
 11839 ;;  y               1   23[COMRAM] unsigned char 
 11840 ;;  h               1   24[COMRAM] unsigned char 
 11841 ;;  color           2   25[COMRAM] unsigned int 
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;  x               1   33[COMRAM] unsigned char 
 11844 ;;  lo              1   32[COMRAM] unsigned char 
 11845 ;;  hi              1   31[COMRAM] unsigned char 
 11846 ;; Return value:  Size  Location     Type
 11847 ;;		None               void
 11848 ;; Registers used:
 11849 ;;		wreg, status,2, status,0, cstack
 11850 ;; Tracked objects:
 11851 ;;		On entry : 0/0
 11852 ;;		On exit  : 0/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11855 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11856 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11857 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11858 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11859 ;;Total ram usage:       11 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; Hardware stack levels required when called:    5
 11862 ;; This function calls:
 11863 ;;		_setAddrWindow
 11864 ;;		_spiwrite
 11865 ;; This function is called by:
 11866 ;;		_fillRect
 11867 ;;		_fillCircleHelper
 11868 ;;		_fillCircle
 11869 ;;		_drawRect
 11870 ;; This function uses a non-reentrant model
 11871 ;;
 11872                           
 11873                           	psect	text49
 11874  003D92                     __ptext49:
 11875                           	opt stack 0
 11876  003D92                     _drawFastVLine:
 11877                           	opt stack 21
 11878                           
 11879                           ;incstack = 0
 11880                           ;drawFastVLine@x stored from wreg
 11881  003D92  6E22               	movwf	drawFastVLine@x,c
 11882                           
 11883                           ;ST7735_TFT.c: 366: unsigned char hi, lo;
 11884                           ;ST7735_TFT.c: 367: if((x >= 128) || (y >= 160))
 11885  003D94  0E80               	movlw	128
 11886  003D96  6022               	cpfslt	drawFastVLine@x,c
 11887  003D98  D03F               	goto	l258
 11888  003D9A  0E9F               	movlw	159
 11889  003D9C  6418               	cpfsgt	drawFastVLine@y,c
 11890  003D9E  D001               	goto	l5181
 11891                           
 11892                           ;ST7735_TFT.c: 368: return;
 11893  003DA0  D03B               	goto	l258
 11894  003DA2                     l5181:
 11895                           
 11896                           ;ST7735_TFT.c: 369: if((y + h - 1) >= 160)
 11897  003DA2  0EFF               	movlw	255
 11898  003DA4  6E1C               	movwf	??_drawFastVLine& (0+255),c
 11899  003DA6  0EFF               	movlw	255
 11900  003DA8  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 11901  003DAA  5019               	movf	drawFastVLine@h,w,c
 11902  003DAC  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 11903  003DB0  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 11904  003DB2  261E               	addwf	??_drawFastVLine+2,f,c
 11905  003DB4  0E00               	movlw	0
 11906  003DB6  221F               	addwfc	??_drawFastVLine+3,f,c
 11907  003DB8  501C               	movf	??_drawFastVLine,w,c
 11908  003DBA  261E               	addwf	??_drawFastVLine+2,f,c
 11909  003DBC  501D               	movf	??_drawFastVLine+1,w,c
 11910  003DBE  221F               	addwfc	??_drawFastVLine+3,f,c
 11911  003DC0  BE1F               	btfsc	??_drawFastVLine+3,7,c
 11912  003DC2  D00B               	goto	l5185
 11913  003DC4  501F               	movf	??_drawFastVLine+3,w,c
 11914  003DC6  E104               	bnz	u3250
 11915  003DC8  0EA0               	movlw	160
 11916  003DCA  5C1E               	subwf	??_drawFastVLine+2,w,c
 11917  003DCC  A0D8               	btfss	status,0,c
 11918  003DCE  D005               	goto	l5185
 11919  003DD0                     u3250:
 11920                           
 11921                           ;ST7735_TFT.c: 370: h = 160 - y;
 11922  003DD0  5018               	movf	drawFastVLine@y,w,c
 11923  003DD2  0800               	sublw	0
 11924  003DD4  0FA0               	addlw	160
 11925  003DD6  6E19               	movwf	drawFastVLine@h,c
 11926  003DD8  D000               	goto	l5185
 11927  003DDA                     l5185:
 11928                           
 11929                           ;ST7735_TFT.c: 371: hi = color >> 8; lo = color;
 11930  003DDA  501B               	movf	drawFastVLine@color+1,w,c
 11931  003DDC  6E20               	movwf	drawFastVLine@hi,c
 11932  003DDE  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 11933                           
 11934                           ;ST7735_TFT.c: 372: setAddrWindow(x, y, x, y + h - 1);
 11935  003DE2  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 11936  003DE6  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 11937  003DEA  5018               	movf	drawFastVLine@y,w,c
 11938  003DEC  2419               	addwf	drawFastVLine@h,w,c
 11939  003DEE  6E1C               	movwf	??_drawFastVLine& (0+255),c
 11940  003DF0  041C               	decf	??_drawFastVLine,w,c
 11941  003DF2  6E16               	movwf	setAddrWindow@y1,c
 11942  003DF4  5022               	movf	drawFastVLine@x,w,c
 11943  003DF6  EC6B  F021         	call	_setAddrWindow
 11944                           
 11945                           ;ST7735_TFT.c: 373: PORTDbits.RD7 = 1;
 11946  003DFA  8E83               	bsf	3971,7,c	;volatile
 11947                           
 11948                           ;ST7735_TFT.c: 374: PORTCbits.RC4 = 0;
 11949  003DFC  9882               	bcf	3970,4,c	;volatile
 11950                           
 11951                           ;ST7735_TFT.c: 376: while (h--) {
 11952  003DFE  D007               	goto	l5197
 11953  003E00                     l5195:
 11954                           
 11955                           ;ST7735_TFT.c: 377: spiwrite(hi);
 11956  003E00  5020               	movf	drawFastVLine@hi,w,c
 11957  003E02  EC85  F025         	call	_spiwrite
 11958                           
 11959                           ;ST7735_TFT.c: 378: spiwrite(lo);
 11960  003E06  5021               	movf	drawFastVLine@lo,w,c
 11961  003E08  EC85  F025         	call	_spiwrite
 11962  003E0C  D000               	goto	l5197
 11963  003E0E                     l5197:
 11964  003E0E  0619               	decf	drawFastVLine@h,f,c
 11965  003E10  2819               	incf	drawFastVLine@h,w,c
 11966  003E12  A4D8               	btfss	status,2,c
 11967  003E14  D7F5               	goto	l5195
 11968                           
 11969                           ;ST7735_TFT.c: 379: }
 11970                           ;ST7735_TFT.c: 380: PORTCbits.RC4 = 1;
 11971  003E16  8882               	bsf	3970,4,c	;volatile
 11972  003E18                     l258:
 11973  003E18  0012               	return		;funcret
 11974  003E1A                     __end_of_drawFastVLine:
 11975                           	opt stack 0
 11976                           tblptru	equ	0xFF8
 11977                           tblptrh	equ	0xFF7
 11978                           tblptrl	equ	0xFF6
 11979                           tablat	equ	0xFF5
 11980                           prodh	equ	0xFF4
 11981                           prodl	equ	0xFF3
 11982                           intcon	equ	0xFF2
 11983                           intcon2	equ	0xFF1
 11984                           intcon3	equ	0xFF0
 11985                           postinc0	equ	0xFEE
 11986                           wreg	equ	0xFE8
 11987                           postdec1	equ	0xFE5
 11988                           plusw1	equ	0xFE3
 11989                           fsr1l	equ	0xFE1
 11990                           indf2	equ	0xFDF
 11991                           postinc2	equ	0xFDE
 11992                           plusw2	equ	0xFDB
 11993                           fsr2h	equ	0xFDA
 11994                           fsr2l	equ	0xFD9
 11995                           status	equ	0xFD8
 11996                           
 11997 ;; *************** function _drawPixel *****************
 11998 ;; Defined at:
 11999 ;;		line 355 in file "ST7735_TFT.c"
 12000 ;; Parameters:    Size  Location     Type
 12001 ;;  x               1    wreg     unsigned char 
 12002 ;;  y               1   23[COMRAM] unsigned char 
 12003 ;;  color           2   24[COMRAM] unsigned int 
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;  x               1   26[COMRAM] unsigned char 
 12006 ;; Return value:  Size  Location     Type
 12007 ;;		None               void
 12008 ;; Registers used:
 12009 ;;		wreg, status,2, status,0, cstack
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12015 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12016 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12018 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12019 ;;Total ram usage:        4 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:    5
 12022 ;; This function calls:
 12023 ;;		_setAddrWindow
 12024 ;;		_write_data
 12025 ;; This function is called by:
 12026 ;;		_drawChar
 12027 ;;		_drawCircle
 12028 ;;		_drawCircleHelper
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           	psect	text50
 12033  0046FA                     __ptext50:
 12034                           	opt stack 0
 12035  0046FA                     _drawPixel:
 12036                           	opt stack 22
 12037                           
 12038                           ;incstack = 0
 12039                           ;drawPixel@x stored from wreg
 12040  0046FA  6E1B               	movwf	drawPixel@x,c
 12041                           
 12042                           ;ST7735_TFT.c: 357: if((x >= 128) || (y >= 160))
 12043  0046FC  0E80               	movlw	128
 12044  0046FE  601B               	cpfslt	drawPixel@x,c
 12045  004700  D013               	goto	l252
 12046  004702  0E9F               	movlw	159
 12047  004704  6418               	cpfsgt	drawPixel@y,c
 12048  004706  D001               	goto	l5269
 12049                           
 12050                           ;ST7735_TFT.c: 358: return;
 12051  004708  D00F               	goto	l252
 12052  00470A                     l5269:
 12053                           
 12054                           ;ST7735_TFT.c: 359: setAddrWindow(x,y,x+1,y+1);
 12055  00470A  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 12056  00470E  281B               	incf	drawPixel@x,w,c
 12057  004710  6E15               	movwf	setAddrWindow@x1,c
 12058  004712  2818               	incf	drawPixel@y,w,c
 12059  004714  6E16               	movwf	setAddrWindow@y1,c
 12060  004716  501B               	movf	drawPixel@x,w,c
 12061  004718  EC6B  F021         	call	_setAddrWindow
 12062                           
 12063                           ;ST7735_TFT.c: 360: write_data(color >> 8);
 12064  00471C  501A               	movf	drawPixel@color+1,w,c
 12065  00471E  ECE0  F025         	call	_write_data
 12066                           
 12067                           ;ST7735_TFT.c: 361: write_data(color & 0xFF);
 12068  004722  5019               	movf	drawPixel@color,w,c
 12069  004724  ECE0  F025         	call	_write_data
 12070  004728                     l252:
 12071  004728  0012               	return		;funcret
 12072  00472A                     __end_of_drawPixel:
 12073                           	opt stack 0
 12074                           tblptru	equ	0xFF8
 12075                           tblptrh	equ	0xFF7
 12076                           tblptrl	equ	0xFF6
 12077                           tablat	equ	0xFF5
 12078                           prodh	equ	0xFF4
 12079                           prodl	equ	0xFF3
 12080                           intcon	equ	0xFF2
 12081                           intcon2	equ	0xFF1
 12082                           intcon3	equ	0xFF0
 12083                           postinc0	equ	0xFEE
 12084                           wreg	equ	0xFE8
 12085                           postdec1	equ	0xFE5
 12086                           plusw1	equ	0xFE3
 12087                           fsr1l	equ	0xFE1
 12088                           indf2	equ	0xFDF
 12089                           postinc2	equ	0xFDE
 12090                           plusw2	equ	0xFDB
 12091                           fsr2h	equ	0xFDA
 12092                           fsr2l	equ	0xFD9
 12093                           status	equ	0xFD8
 12094                           
 12095 ;; *************** function _setAddrWindow *****************
 12096 ;; Defined at:
 12097 ;;		line 340 in file "ST7735_TFT.c"
 12098 ;; Parameters:    Size  Location     Type
 12099 ;;  x0              1    wreg     unsigned char 
 12100 ;;  y0              1   19[COMRAM] unsigned char 
 12101 ;;  x1              1   20[COMRAM] unsigned char 
 12102 ;;  y1              1   21[COMRAM] unsigned char 
 12103 ;; Auto vars:     Size  Location     Type
 12104 ;;  x0              1   22[COMRAM] unsigned char 
 12105 ;; Return value:  Size  Location     Type
 12106 ;;		None               void
 12107 ;; Registers used:
 12108 ;;		wreg, status,2, status,0, cstack
 12109 ;; Tracked objects:
 12110 ;;		On entry : 0/0
 12111 ;;		On exit  : 0/0
 12112 ;;		Unchanged: 0/0
 12113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12114 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12117 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12118 ;;Total ram usage:        4 bytes
 12119 ;; Hardware stack levels used:    1
 12120 ;; Hardware stack levels required when called:    4
 12121 ;; This function calls:
 12122 ;;		_write_command
 12123 ;;		_write_data
 12124 ;; This function is called by:
 12125 ;;		_drawPixel
 12126 ;;		_drawFastVLine
 12127 ;;		_fillRectangle
 12128 ;;		_drawFastHLine
 12129 ;; This function uses a non-reentrant model
 12130 ;;
 12131                           
 12132                           	psect	text51
 12133  0042D6                     __ptext51:
 12134                           	opt stack 0
 12135  0042D6                     _setAddrWindow:
 12136                           	opt stack 21
 12137                           
 12138                           ;incstack = 0
 12139                           ;setAddrWindow@x0 stored from wreg
 12140  0042D6  6E17               	movwf	setAddrWindow@x0,c
 12141                           
 12142                           ;ST7735_TFT.c: 342: write_command(0x2A);
 12143  0042D8  0E2A               	movlw	42
 12144  0042DA  ECE8  F025         	call	_write_command
 12145                           
 12146                           ;ST7735_TFT.c: 343: write_data(0);
 12147  0042DE  0E00               	movlw	0
 12148  0042E0  ECE0  F025         	call	_write_data
 12149                           
 12150                           ;ST7735_TFT.c: 344: write_data(x0 + colstart);
 12151  0042E4  5017               	movf	setAddrWindow@x0,w,c
 12152  0042E6  0100               	movlb	0	; () banked
 12153  0042E8  25EE               	addwf	_colstart& (0+255),w,b
 12154  0042EA  ECE0  F025         	call	_write_data
 12155                           
 12156                           ;ST7735_TFT.c: 345: write_data(0);
 12157  0042EE  0E00               	movlw	0
 12158  0042F0  ECE0  F025         	call	_write_data
 12159                           
 12160                           ;ST7735_TFT.c: 346: write_data(x1 + colstart);
 12161  0042F4  5015               	movf	setAddrWindow@x1,w,c
 12162  0042F6  0100               	movlb	0	; () banked
 12163  0042F8  25EE               	addwf	_colstart& (0+255),w,b
 12164  0042FA  ECE0  F025         	call	_write_data
 12165                           
 12166                           ;ST7735_TFT.c: 347: write_command(0x2B);
 12167  0042FE  0E2B               	movlw	43
 12168  004300  ECE8  F025         	call	_write_command
 12169                           
 12170                           ;ST7735_TFT.c: 348: write_data(0);
 12171  004304  0E00               	movlw	0
 12172  004306  ECE0  F025         	call	_write_data
 12173                           
 12174                           ;ST7735_TFT.c: 349: write_data(y0 + rowstart);
 12175  00430A  5014               	movf	setAddrWindow@y0,w,c
 12176  00430C  0100               	movlb	0	; () banked
 12177  00430E  25F2               	addwf	_rowstart& (0+255),w,b
 12178  004310  ECE0  F025         	call	_write_data
 12179                           
 12180                           ;ST7735_TFT.c: 350: write_data(0);
 12181  004314  0E00               	movlw	0
 12182  004316  ECE0  F025         	call	_write_data
 12183                           
 12184                           ;ST7735_TFT.c: 351: write_data(y1 + rowstart);
 12185  00431A  5016               	movf	setAddrWindow@y1,w,c
 12186  00431C  0100               	movlb	0	; () banked
 12187  00431E  25F2               	addwf	_rowstart& (0+255),w,b
 12188  004320  ECE0  F025         	call	_write_data
 12189                           
 12190                           ;ST7735_TFT.c: 352: write_command(0x2C);
 12191  004324  0E2C               	movlw	44
 12192  004326  ECE8  F025         	call	_write_command
 12193  00432A  0012               	return		;funcret
 12194  00432C                     __end_of_setAddrWindow:
 12195                           	opt stack 0
 12196                           tblptru	equ	0xFF8
 12197                           tblptrh	equ	0xFF7
 12198                           tblptrl	equ	0xFF6
 12199                           tablat	equ	0xFF5
 12200                           prodh	equ	0xFF4
 12201                           prodl	equ	0xFF3
 12202                           intcon	equ	0xFF2
 12203                           intcon2	equ	0xFF1
 12204                           intcon3	equ	0xFF0
 12205                           postinc0	equ	0xFEE
 12206                           wreg	equ	0xFE8
 12207                           postdec1	equ	0xFE5
 12208                           plusw1	equ	0xFE3
 12209                           fsr1l	equ	0xFE1
 12210                           indf2	equ	0xFDF
 12211                           postinc2	equ	0xFDE
 12212                           plusw2	equ	0xFDB
 12213                           fsr2h	equ	0xFDA
 12214                           fsr2l	equ	0xFD9
 12215                           status	equ	0xFD8
 12216                           
 12217 ;; *************** function _write_data *****************
 12218 ;; Defined at:
 12219 ;;		line 157 in file "ST7735_TFT.c"
 12220 ;; Parameters:    Size  Location     Type
 12221 ;;  data_           1    wreg     unsigned char 
 12222 ;; Auto vars:     Size  Location     Type
 12223 ;;  data_           1   18[COMRAM] unsigned char 
 12224 ;; Return value:  Size  Location     Type
 12225 ;;		None               void
 12226 ;; Registers used:
 12227 ;;		wreg, status,2, cstack
 12228 ;; Tracked objects:
 12229 ;;		On entry : 0/0
 12230 ;;		On exit  : 0/0
 12231 ;;		Unchanged: 0/0
 12232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12234 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12236 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12237 ;;Total ram usage:        1 bytes
 12238 ;; Hardware stack levels used:    1
 12239 ;; Hardware stack levels required when called:    3
 12240 ;; This function calls:
 12241 ;;		_spiwrite
 12242 ;; This function is called by:
 12243 ;;		_Rcmd1
 12244 ;;		_Rcmd2red
 12245 ;;		_Rcmd3
 12246 ;;		_setAddrWindow
 12247 ;;		_drawPixel
 12248 ;;		_TFT_GreenTab_Initialize
 12249 ;;		_Bcmd
 12250 ;;		_setScrollDefinition
 12251 ;;		_Rcmd2green
 12252 ;;		_VerticalScroll
 12253 ;; This function uses a non-reentrant model
 12254 ;;
 12255                           
 12256                           	psect	text52
 12257  004BC0                     __ptext52:
 12258                           	opt stack 0
 12259  004BC0                     _write_data:
 12260                           	opt stack 21
 12261                           
 12262                           ;incstack = 0
 12263                           ;write_data@data_ stored from wreg
 12264  004BC0  6E13               	movwf	write_data@data_,c
 12265                           
 12266                           ;ST7735_TFT.c: 159: PORTCbits.RC4 = 0;
 12267  004BC2  9882               	bcf	3970,4,c	;volatile
 12268                           
 12269                           ;ST7735_TFT.c: 160: PORTDbits.RD7 = 1;
 12270  004BC4  8E83               	bsf	3971,7,c	;volatile
 12271                           
 12272                           ;ST7735_TFT.c: 161: spiwrite(data_);
 12273  004BC6  5013               	movf	write_data@data_,w,c
 12274  004BC8  EC85  F025         	call	_spiwrite
 12275                           
 12276                           ;ST7735_TFT.c: 162: PORTCbits.RC4 = 1;
 12277  004BCC  8882               	bsf	3970,4,c	;volatile
 12278  004BCE  0012               	return		;funcret
 12279  004BD0                     __end_of_write_data:
 12280                           	opt stack 0
 12281                           tblptru	equ	0xFF8
 12282                           tblptrh	equ	0xFF7
 12283                           tblptrl	equ	0xFF6
 12284                           tablat	equ	0xFF5
 12285                           prodh	equ	0xFF4
 12286                           prodl	equ	0xFF3
 12287                           intcon	equ	0xFF2
 12288                           intcon2	equ	0xFF1
 12289                           intcon3	equ	0xFF0
 12290                           postinc0	equ	0xFEE
 12291                           wreg	equ	0xFE8
 12292                           postdec1	equ	0xFE5
 12293                           plusw1	equ	0xFE3
 12294                           fsr1l	equ	0xFE1
 12295                           indf2	equ	0xFDF
 12296                           postinc2	equ	0xFDE
 12297                           plusw2	equ	0xFDB
 12298                           fsr2h	equ	0xFDA
 12299                           fsr2l	equ	0xFD9
 12300                           status	equ	0xFD8
 12301                           
 12302 ;; *************** function _write_command *****************
 12303 ;; Defined at:
 12304 ;;		line 146 in file "ST7735_TFT.c"
 12305 ;; Parameters:    Size  Location     Type
 12306 ;;  cmd_            1    wreg     unsigned char 
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;  cmd_            1   18[COMRAM] unsigned char 
 12309 ;; Return value:  Size  Location     Type
 12310 ;;		None               void
 12311 ;; Registers used:
 12312 ;;		wreg, status,2, cstack
 12313 ;; Tracked objects:
 12314 ;;		On entry : 0/0
 12315 ;;		On exit  : 0/0
 12316 ;;		Unchanged: 0/0
 12317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12321 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;Total ram usage:        1 bytes
 12323 ;; Hardware stack levels used:    1
 12324 ;; Hardware stack levels required when called:    3
 12325 ;; This function calls:
 12326 ;;		_spiwrite
 12327 ;; This function is called by:
 12328 ;;		_Rcmd1
 12329 ;;		_Rcmd2red
 12330 ;;		_Rcmd3
 12331 ;;		_setAddrWindow
 12332 ;;		_TFT_GreenTab_Initialize
 12333 ;;		_Bcmd
 12334 ;;		_setScrollDefinition
 12335 ;;		_Rcmd2green
 12336 ;;		_VerticalScroll
 12337 ;; This function uses a non-reentrant model
 12338 ;;
 12339                           
 12340                           	psect	text53
 12341  004BD0                     __ptext53:
 12342                           	opt stack 0
 12343  004BD0                     _write_command:
 12344                           	opt stack 21
 12345                           
 12346                           ;incstack = 0
 12347                           ;write_command@cmd_ stored from wreg
 12348  004BD0  6E13               	movwf	write_command@cmd_,c
 12349                           
 12350                           ;ST7735_TFT.c: 148: PORTCbits.RC4 = 0;
 12351  004BD2  9882               	bcf	3970,4,c	;volatile
 12352                           
 12353                           ;ST7735_TFT.c: 150: PORTDbits.RD7 = 0;
 12354  004BD4  9E83               	bcf	3971,7,c	;volatile
 12355                           
 12356                           ;ST7735_TFT.c: 151: spiwrite(cmd_);
 12357  004BD6  5013               	movf	write_command@cmd_,w,c
 12358  004BD8  EC85  F025         	call	_spiwrite
 12359                           
 12360                           ;ST7735_TFT.c: 153: PORTCbits.RC4 = 1;
 12361  004BDC  8882               	bsf	3970,4,c	;volatile
 12362  004BDE  0012               	return		;funcret
 12363  004BE0                     __end_of_write_command:
 12364                           	opt stack 0
 12365                           tblptru	equ	0xFF8
 12366                           tblptrh	equ	0xFF7
 12367                           tblptrl	equ	0xFF6
 12368                           tablat	equ	0xFF5
 12369                           prodh	equ	0xFF4
 12370                           prodl	equ	0xFF3
 12371                           intcon	equ	0xFF2
 12372                           intcon2	equ	0xFF1
 12373                           intcon3	equ	0xFF0
 12374                           postinc0	equ	0xFEE
 12375                           wreg	equ	0xFE8
 12376                           postdec1	equ	0xFE5
 12377                           plusw1	equ	0xFE3
 12378                           fsr1l	equ	0xFE1
 12379                           indf2	equ	0xFDF
 12380                           postinc2	equ	0xFDE
 12381                           plusw2	equ	0xFDB
 12382                           fsr2h	equ	0xFDA
 12383                           fsr2l	equ	0xFD9
 12384                           status	equ	0xFD8
 12385                           
 12386 ;; *************** function _spiwrite *****************
 12387 ;; Defined at:
 12388 ;;		line 137 in file "ST7735_TFT.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;  spidata         1    wreg     unsigned char 
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;  spidata         1   17[COMRAM] unsigned char 
 12393 ;;  x               1   16[COMRAM] unsigned char 
 12394 ;; Return value:  Size  Location     Type
 12395 ;;		None               void
 12396 ;; Registers used:
 12397 ;;		wreg
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12404 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12407 ;;Total ram usage:        2 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; Hardware stack levels required when called:    2
 12410 ;; This function calls:
 12411 ;;		Nothing
 12412 ;; This function is called by:
 12413 ;;		_write_command
 12414 ;;		_write_data
 12415 ;;		_drawFastVLine
 12416 ;;		_fillRectangle
 12417 ;;		_drawFastHLine
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           	psect	text54
 12422  004B0A                     __ptext54:
 12423                           	opt stack 0
 12424  004B0A                     _spiwrite:
 12425                           	opt stack 23
 12426                           
 12427                           ;incstack = 0
 12428                           ;spiwrite@spidata stored from wreg
 12429  004B0A  6E12               	movwf	spiwrite@spidata,c
 12430                           
 12431                           ;ST7735_TFT.c: 139: char x;
 12432                           ;ST7735_TFT.c: 140: PIR1bits.SSPIF = 0;
 12433  004B0C  969E               	bcf	3998,3,c	;volatile
 12434                           
 12435                           ;ST7735_TFT.c: 141: x = SSPBUF;
 12436  004B0E  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 12437                           
 12438                           ;ST7735_TFT.c: 142: SSPBUF = spidata;
 12439  004B12  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 12440                           
 12441                           ;ST7735_TFT.c: 143: while (!SSPSTATbits.BF);
 12442  004B16  D000               	goto	l208
 12443  004B18                     l208:
 12444  004B18  A0C7               	btfss	4039,0,c	;volatile
 12445  004B1A  D7FE               	goto	l208
 12446  004B1C  0012               	return		;funcret
 12447  004B1E                     __end_of_spiwrite:
 12448                           	opt stack 0
 12449                           tblptru	equ	0xFF8
 12450                           tblptrh	equ	0xFF7
 12451                           tblptrl	equ	0xFF6
 12452                           tablat	equ	0xFF5
 12453                           prodh	equ	0xFF4
 12454                           prodl	equ	0xFF3
 12455                           intcon	equ	0xFF2
 12456                           intcon2	equ	0xFF1
 12457                           intcon3	equ	0xFF0
 12458                           postinc0	equ	0xFEE
 12459                           wreg	equ	0xFE8
 12460                           postdec1	equ	0xFE5
 12461                           plusw1	equ	0xFE3
 12462                           fsr1l	equ	0xFE1
 12463                           indf2	equ	0xFDF
 12464                           postinc2	equ	0xFDE
 12465                           plusw2	equ	0xFDB
 12466                           fsr2h	equ	0xFDA
 12467                           fsr2l	equ	0xFD9
 12468                           status	equ	0xFD8
 12469                           
 12470 ;; *************** function _DS1621_Read_Temp *****************
 12471 ;; Defined at:
 12472 ;;		line 27 in file "I2C_Support.c"
 12473 ;; Parameters:    Size  Location     Type
 12474 ;;		None
 12475 ;; Auto vars:     Size  Location     Type
 12476 ;;  Device          1   23[COMRAM] unsigned char 
 12477 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 12478 ;;  Cmd             1   21[COMRAM] unsigned char 
 12479 ;; Return value:  Size  Location     Type
 12480 ;;                  2   19[COMRAM] int 
 12481 ;; Registers used:
 12482 ;;		wreg, status,2, status,0, cstack
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/0
 12485 ;;		On exit  : 0/0
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12489 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;Total ram usage:        5 bytes
 12493 ;; Hardware stack levels used:    1
 12494 ;; Hardware stack levels required when called:    5
 12495 ;; This function calls:
 12496 ;;		_I2C_ReStart
 12497 ;;		_I2C_Read
 12498 ;;		_I2C_Start
 12499 ;;		_I2C_Stop
 12500 ;;		_I2C_Write
 12501 ;; This function is called by:
 12502 ;;		_main
 12503 ;;		_Setup_Fan_Temp
 12504 ;;		_Do_Setup_Time
 12505 ;; This function uses a non-reentrant model
 12506 ;;
 12507                           
 12508                           	psect	text55
 12509  00465C                     __ptext55:
 12510                           	opt stack 0
 12511  00465C                     _DS1621_Read_Temp:
 12512                           	opt stack 24
 12513                           
 12514                           ;I2C_Support.c: 30: char Device = 0x68;
 12515                           
 12516                           ;incstack = 0
 12517  00465C  0E68               	movlw	104
 12518  00465E  6E18               	movwf	DS1621_Read_Temp@Device,c
 12519                           
 12520                           ;I2C_Support.c: 31: char Cmd = 0xAA;
 12521  004660  0EAA               	movlw	170
 12522  004662  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 12523                           
 12524                           ;I2C_Support.c: 32: char Data_Ret;
 12525                           ;I2C_Support.c: 33: I2C_Start();
 12526  004664  ECB4  F025         	call	_I2C_Start	;wreg free
 12527                           
 12528                           ;I2C_Support.c: 34: I2C_Write((Device << 1) | 0);
 12529  004668  5018               	movf	DS1621_Read_Temp@Device,w,c
 12530  00466A  2418               	addwf	DS1621_Read_Temp@Device,w,c
 12531  00466C  ECF1  F022         	call	_I2C_Write
 12532                           
 12533                           ;I2C_Support.c: 35: I2C_Write(Cmd);
 12534  004670  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 12535  004672  ECF1  F022         	call	_I2C_Write
 12536                           
 12537                           ;I2C_Support.c: 36: I2C_ReStart();
 12538  004676  EC52  F025         	call	_I2C_ReStart	;wreg free
 12539                           
 12540                           ;I2C_Support.c: 37: I2C_Write((Device << 1) | 1);
 12541  00467A  80D8               	bsf	status,0,c
 12542  00467C  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 12543  00467E  ECF1  F022         	call	_I2C_Write
 12544                           
 12545                           ;I2C_Support.c: 38: Data_Ret = I2C_Read(0);
 12546  004682  0E00               	movlw	0
 12547  004684  EC2F  F022         	call	_I2C_Read
 12548  004688  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 12549                           
 12550                           ;I2C_Support.c: 39: I2C_Stop();
 12551  00468A  ECAB  F025         	call	_I2C_Stop	;wreg free
 12552                           
 12553                           ;I2C_Support.c: 40: return Data_Ret;
 12554  00468E  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 12555  004692  6A15               	clrf	?_DS1621_Read_Temp+1,c
 12556  004694  D000               	goto	l560
 12557  004696                     l560:
 12558  004696  0012               	return		;funcret
 12559  004698                     __end_of_DS1621_Read_Temp:
 12560                           	opt stack 0
 12561                           tblptru	equ	0xFF8
 12562                           tblptrh	equ	0xFF7
 12563                           tblptrl	equ	0xFF6
 12564                           tablat	equ	0xFF5
 12565                           prodh	equ	0xFF4
 12566                           prodl	equ	0xFF3
 12567                           intcon	equ	0xFF2
 12568                           intcon2	equ	0xFF1
 12569                           intcon3	equ	0xFF0
 12570                           postinc0	equ	0xFEE
 12571                           wreg	equ	0xFE8
 12572                           postdec1	equ	0xFE5
 12573                           plusw1	equ	0xFE3
 12574                           fsr1l	equ	0xFE1
 12575                           indf2	equ	0xFDF
 12576                           postinc2	equ	0xFDE
 12577                           plusw2	equ	0xFDB
 12578                           fsr2h	equ	0xFDA
 12579                           fsr2l	equ	0xFD9
 12580                           status	equ	0xFD8
 12581                           
 12582 ;; *************** function _I2C_Read *****************
 12583 ;; Defined at:
 12584 ;;		line 16 in file "I2C_Soft.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;  ack             1    wreg     unsigned char 
 12587 ;; Auto vars:     Size  Location     Type
 12588 ;;  ack             1   16[COMRAM] unsigned char 
 12589 ;;  inByte          1   18[COMRAM] unsigned char 
 12590 ;;  n               1   17[COMRAM] unsigned char 
 12591 ;; Return value:  Size  Location     Type
 12592 ;;                  1    wreg      unsigned char 
 12593 ;; Registers used:
 12594 ;;		wreg, status,2, status,0, cstack
 12595 ;; Tracked objects:
 12596 ;;		On entry : 0/0
 12597 ;;		On exit  : 0/0
 12598 ;;		Unchanged: 0/0
 12599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12601 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12603 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12604 ;;Total ram usage:        3 bytes
 12605 ;; Hardware stack levels used:    1
 12606 ;; Hardware stack levels required when called:    4
 12607 ;; This function calls:
 12608 ;;		_i2cAck
 12609 ;;		_i2cHighScl
 12610 ;;		_i2cHighSda
 12611 ;;		_i2cLowScl
 12612 ;;		_i2cNack
 12613 ;; This function is called by:
 12614 ;;		_DS1621_Read_Temp
 12615 ;;		_DS3231_Read_Time
 12616 ;;		_I2C_Write_Address_Read_One_Byte
 12617 ;;		_I2C_Write_Cmd_Read_One_Byte
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           	psect	text56
 12622  00445E                     __ptext56:
 12623                           	opt stack 0
 12624  00445E                     _I2C_Read:
 12625                           	opt stack 23
 12626                           
 12627                           ;incstack = 0
 12628                           ;I2C_Read@ack stored from wreg
 12629  00445E  6E11               	movwf	I2C_Read@ack,c
 12630                           
 12631                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 12632                           ;I2C_Soft.c: 19: i2cHighSda();
 12633  004460  EC28  F026         	call	_i2cHighSda	;wreg free
 12634                           
 12635                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 12636  004464  0E00               	movlw	0
 12637  004466  6E12               	movwf	I2C_Read@n,c
 12638  004468                     l6299:
 12639  004468  0E07               	movlw	7
 12640  00446A  6412               	cpfsgt	I2C_Read@n,c
 12641  00446C  D001               	goto	l6303
 12642  00446E  D00F               	goto	l6317
 12643  004470                     l6303:
 12644                           
 12645                           ;I2C_Soft.c: 21: {
 12646                           ;I2C_Soft.c: 22: i2cHighScl();
 12647  004470  EC05  F026         	call	_i2cHighScl	;wreg free
 12648                           
 12649                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
 12650  004474  AA81               	btfss	3969,5,c	;volatile
 12651  004476  D003               	goto	l6309
 12652                           
 12653                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 12654  004478  80D8               	bsf	status,0,c
 12655  00447A  3613               	rlcf	I2C_Read@inByte,f,c
 12656  00447C  D004               	goto	l6311
 12657  00447E                     l6309:
 12658                           
 12659                           ;I2C_Soft.c: 26: else
 12660                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 12661  00447E  5013               	movf	I2C_Read@inByte,w,c
 12662  004480  2413               	addwf	I2C_Read@inByte,w,c
 12663  004482  6E13               	movwf	I2C_Read@inByte,c
 12664  004484  D000               	goto	l6311
 12665  004486                     l6311:
 12666                           
 12667                           ;I2C_Soft.c: 28: i2cLowScl();
 12668  004486  EC24  F026         	call	_i2cLowScl	;wreg free
 12669  00448A  2A12               	incf	I2C_Read@n,f,c
 12670  00448C  D7ED               	goto	l6299
 12671  00448E                     l6317:
 12672                           
 12673                           ;I2C_Soft.c: 29: }
 12674                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 12675  00448E  5011               	movf	I2C_Read@ack,w,c
 12676  004490  B4D8               	btfsc	status,2,c
 12677  004492  D003               	goto	l6321
 12678  004494  ECA2  F025         	call	_i2cAck	;wreg free
 12679  004498  D003               	goto	l6323
 12680  00449A                     l6321:
 12681                           
 12682                           ;I2C_Soft.c: 31: else i2cNack();
 12683  00449A  EC0B  F026         	call	_i2cNack	;wreg free
 12684  00449E  D000               	goto	l6323
 12685  0044A0                     l6323:
 12686                           
 12687                           ;I2C_Soft.c: 34: return(inByte);
 12688  0044A0  5013               	movf	I2C_Read@inByte,w,c
 12689  0044A2  D000               	goto	l112
 12690  0044A4                     l112:
 12691  0044A4  0012               	return		;funcret
 12692  0044A6                     __end_of_I2C_Read:
 12693                           	opt stack 0
 12694                           tblptru	equ	0xFF8
 12695                           tblptrh	equ	0xFF7
 12696                           tblptrl	equ	0xFF6
 12697                           tablat	equ	0xFF5
 12698                           prodh	equ	0xFF4
 12699                           prodl	equ	0xFF3
 12700                           intcon	equ	0xFF2
 12701                           intcon2	equ	0xFF1
 12702                           intcon3	equ	0xFF0
 12703                           postinc0	equ	0xFEE
 12704                           wreg	equ	0xFE8
 12705                           postdec1	equ	0xFE5
 12706                           plusw1	equ	0xFE3
 12707                           fsr1l	equ	0xFE1
 12708                           indf2	equ	0xFDF
 12709                           postinc2	equ	0xFDE
 12710                           plusw2	equ	0xFDB
 12711                           fsr2h	equ	0xFDA
 12712                           fsr2l	equ	0xFD9
 12713                           status	equ	0xFD8
 12714                           
 12715 ;; *************** function _i2cNack *****************
 12716 ;; Defined at:
 12717 ;;		line 53 in file "I2C_Soft.c"
 12718 ;; Parameters:    Size  Location     Type
 12719 ;;		None
 12720 ;; Auto vars:     Size  Location     Type
 12721 ;;		None
 12722 ;; Return value:  Size  Location     Type
 12723 ;;		None               void
 12724 ;; Registers used:
 12725 ;;		wreg, cstack
 12726 ;; Tracked objects:
 12727 ;;		On entry : 0/0
 12728 ;;		On exit  : 0/0
 12729 ;;		Unchanged: 0/0
 12730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12735 ;;Total ram usage:        0 bytes
 12736 ;; Hardware stack levels used:    1
 12737 ;; Hardware stack levels required when called:    3
 12738 ;; This function calls:
 12739 ;;		_i2cHighScl
 12740 ;;		_i2cLowScl
 12741 ;; This function is called by:
 12742 ;;		_I2C_Read
 12743 ;; This function uses a non-reentrant model
 12744 ;;
 12745                           
 12746                           	psect	text57
 12747  004C16                     __ptext57:
 12748                           	opt stack 0
 12749  004C16                     _i2cNack:
 12750                           	opt stack 23
 12751                           
 12752                           ;I2C_Soft.c: 55: i2cHighScl();
 12753                           
 12754                           ;incstack = 0
 12755  004C16  EC05  F026         	call	_i2cHighScl	;wreg free
 12756                           
 12757                           ;I2C_Soft.c: 56: i2cLowScl();
 12758  004C1A  EC24  F026         	call	_i2cLowScl	;wreg free
 12759  004C1E  0012               	return		;funcret
 12760  004C20                     __end_of_i2cNack:
 12761                           	opt stack 0
 12762                           tblptru	equ	0xFF8
 12763                           tblptrh	equ	0xFF7
 12764                           tblptrl	equ	0xFF6
 12765                           tablat	equ	0xFF5
 12766                           prodh	equ	0xFF4
 12767                           prodl	equ	0xFF3
 12768                           intcon	equ	0xFF2
 12769                           intcon2	equ	0xFF1
 12770                           intcon3	equ	0xFF0
 12771                           postinc0	equ	0xFEE
 12772                           wreg	equ	0xFE8
 12773                           postdec1	equ	0xFE5
 12774                           plusw1	equ	0xFE3
 12775                           fsr1l	equ	0xFE1
 12776                           indf2	equ	0xFDF
 12777                           postinc2	equ	0xFDE
 12778                           plusw2	equ	0xFDB
 12779                           fsr2h	equ	0xFDA
 12780                           fsr2l	equ	0xFD9
 12781                           status	equ	0xFD8
 12782                           
 12783 ;; *************** function _i2cAck *****************
 12784 ;; Defined at:
 12785 ;;		line 59 in file "I2C_Soft.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;		None
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;		None
 12790 ;; Return value:  Size  Location     Type
 12791 ;;		None               void
 12792 ;; Registers used:
 12793 ;;		wreg, cstack
 12794 ;; Tracked objects:
 12795 ;;		On entry : 0/0
 12796 ;;		On exit  : 0/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12803 ;;Total ram usage:        0 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; Hardware stack levels required when called:    3
 12806 ;; This function calls:
 12807 ;;		_i2cHighScl
 12808 ;;		_i2cHighSda
 12809 ;;		_i2cLowScl
 12810 ;;		_i2cLowSda
 12811 ;; This function is called by:
 12812 ;;		_I2C_Read
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815                           
 12816                           	psect	text58
 12817  004B44                     __ptext58:
 12818                           	opt stack 0
 12819  004B44                     _i2cAck:
 12820                           	opt stack 23
 12821                           
 12822                           ;I2C_Soft.c: 61: i2cLowSda();
 12823                           
 12824                           ;incstack = 0
 12825  004B44  EC15  F026         	call	_i2cLowSda	;wreg free
 12826                           
 12827                           ;I2C_Soft.c: 62: i2cHighScl();
 12828  004B48  EC05  F026         	call	_i2cHighScl	;wreg free
 12829                           
 12830                           ;I2C_Soft.c: 63: i2cLowScl();
 12831  004B4C  EC24  F026         	call	_i2cLowScl	;wreg free
 12832                           
 12833                           ;I2C_Soft.c: 64: i2cHighSda();
 12834  004B50  EC28  F026         	call	_i2cHighSda	;wreg free
 12835  004B54  0012               	return		;funcret
 12836  004B56                     __end_of_i2cAck:
 12837                           	opt stack 0
 12838                           tblptru	equ	0xFF8
 12839                           tblptrh	equ	0xFF7
 12840                           tblptrl	equ	0xFF6
 12841                           tablat	equ	0xFF5
 12842                           prodh	equ	0xFF4
 12843                           prodl	equ	0xFF3
 12844                           intcon	equ	0xFF2
 12845                           intcon2	equ	0xFF1
 12846                           intcon3	equ	0xFF0
 12847                           postinc0	equ	0xFEE
 12848                           wreg	equ	0xFE8
 12849                           postdec1	equ	0xFE5
 12850                           plusw1	equ	0xFE3
 12851                           fsr1l	equ	0xFE1
 12852                           indf2	equ	0xFDF
 12853                           postinc2	equ	0xFDE
 12854                           plusw2	equ	0xFDB
 12855                           fsr2h	equ	0xFDA
 12856                           fsr2l	equ	0xFD9
 12857                           status	equ	0xFD8
 12858                           
 12859 ;; *************** function _I2C_ReStart *****************
 12860 ;; Defined at:
 12861 ;;		line 75 in file "I2C_Soft.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;		None
 12864 ;; Auto vars:     Size  Location     Type
 12865 ;;		None
 12866 ;; Return value:  Size  Location     Type
 12867 ;;		None               void
 12868 ;; Registers used:
 12869 ;;		wreg, cstack
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12879 ;;Total ram usage:        0 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; Hardware stack levels required when called:    3
 12882 ;; This function calls:
 12883 ;;		_i2cHighScl
 12884 ;;		_i2cHighSda
 12885 ;;		_i2cLowScl
 12886 ;;		_i2cLowSda
 12887 ;; This function is called by:
 12888 ;;		_DS1621_Read_Temp
 12889 ;;		_DS3231_Read_Time
 12890 ;;		_I2C_Write_Address_Read_One_Byte
 12891 ;;		_I2C_Write_Cmd_Read_One_Byte
 12892 ;;		_DS3231_Init
 12893 ;; This function uses a non-reentrant model
 12894 ;;
 12895                           
 12896                           	psect	text59
 12897  004AA4                     __ptext59:
 12898                           	opt stack 0
 12899  004AA4                     _I2C_ReStart:
 12900                           	opt stack 24
 12901                           
 12902                           ;I2C_Soft.c: 77: i2cLowScl();
 12903                           
 12904                           ;incstack = 0
 12905  004AA4  EC24  F026         	call	_i2cLowScl	;wreg free
 12906                           
 12907                           ;I2C_Soft.c: 78: i2cHighSda();
 12908  004AA8  EC28  F026         	call	_i2cHighSda	;wreg free
 12909                           
 12910                           ;I2C_Soft.c: 79: i2cHighScl();
 12911  004AAC  EC05  F026         	call	_i2cHighScl	;wreg free
 12912                           
 12913                           ;I2C_Soft.c: 80: i2cLowSda();
 12914  004AB0  EC15  F026         	call	_i2cLowSda	;wreg free
 12915                           
 12916                           ;I2C_Soft.c: 81: i2cLowScl();
 12917  004AB4  EC24  F026         	call	_i2cLowScl	;wreg free
 12918  004AB8  0012               	return		;funcret
 12919  004ABA                     __end_of_I2C_ReStart:
 12920                           	opt stack 0
 12921                           tblptru	equ	0xFF8
 12922                           tblptrh	equ	0xFF7
 12923                           tblptrl	equ	0xFF6
 12924                           tablat	equ	0xFF5
 12925                           prodh	equ	0xFF4
 12926                           prodl	equ	0xFF3
 12927                           intcon	equ	0xFF2
 12928                           intcon2	equ	0xFF1
 12929                           intcon3	equ	0xFF0
 12930                           postinc0	equ	0xFEE
 12931                           wreg	equ	0xFE8
 12932                           postdec1	equ	0xFE5
 12933                           plusw1	equ	0xFE3
 12934                           fsr1l	equ	0xFE1
 12935                           indf2	equ	0xFDF
 12936                           postinc2	equ	0xFDE
 12937                           plusw2	equ	0xFDB
 12938                           fsr2h	equ	0xFDA
 12939                           fsr2l	equ	0xFD9
 12940                           status	equ	0xFD8
 12941                           
 12942 ;; *************** function _Do_Init *****************
 12943 ;; Defined at:
 12944 ;;		line 86 in file "Main.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;		None
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;		None
 12949 ;; Return value:  Size  Location     Type
 12950 ;;		None               void
 12951 ;; Registers used:
 12952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12953 ;; Tracked objects:
 12954 ;;		On entry : 0/0
 12955 ;;		On exit  : 0/0
 12956 ;;		Unchanged: 0/0
 12957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12962 ;;Total ram usage:        0 bytes
 12963 ;; Hardware stack levels used:    1
 12964 ;; Hardware stack levels required when called:    7
 12965 ;; This function calls:
 12966 ;;		_DS1621_Init
 12967 ;;		_I2C_Init
 12968 ;;		_Init_ADC
 12969 ;;		_Init_Interrupt
 12970 ;;		_Init_UART
 12971 ;;		_Turn_Off_Fan
 12972 ;; This function is called by:
 12973 ;;		_main
 12974 ;; This function uses a non-reentrant model
 12975 ;;
 12976                           
 12977                           	psect	text60
 12978  004222                     __ptext60:
 12979                           	opt stack 0
 12980  004222                     _Do_Init:
 12981                           	opt stack 23
 12982                           
 12983                           ;Main.c: 88: Init_UART();
 12984                           
 12985                           ;incstack = 0
 12986  004222  EC8F  F025         	call	_Init_UART	;wreg free
 12987                           
 12988                           ;Main.c: 89: Init_ADC();
 12989  004226  ECF7  F025         	call	_Init_ADC	;wreg free
 12990                           
 12991                           ;Main.c: 90: OSCCON=0x70;
 12992  00422A  0E70               	movlw	112
 12993  00422C  6ED3               	movwf	4051,c	;volatile
 12994                           
 12995                           ;Main.c: 92: ADCON1= 0x0E;
 12996  00422E  0E0E               	movlw	14
 12997  004230  6EC1               	movwf	4033,c	;volatile
 12998                           
 12999                           ;Main.c: 93: TRISA = 0x01;
 13000  004232  0E01               	movlw	1
 13001  004234  6E92               	movwf	3986,c	;volatile
 13002                           
 13003                           ;Main.c: 94: TRISB = 0x07;
 13004  004236  0E07               	movlw	7
 13005  004238  6E93               	movwf	3987,c	;volatile
 13006                           
 13007                           ;Main.c: 95: TRISC = 0x01;
 13008  00423A  0E01               	movlw	1
 13009  00423C  6E94               	movwf	3988,c	;volatile
 13010                           
 13011                           ;Main.c: 96: TRISD = 0x00;
 13012  00423E  0E00               	movlw	0
 13013  004240  6E95               	movwf	3989,c	;volatile
 13014                           
 13015                           ;Main.c: 97: TRISE = 0x00;
 13016  004242  0E00               	movlw	0
 13017  004244  6E96               	movwf	3990,c	;volatile
 13018                           
 13019                           ;Main.c: 98: PORTE = 0x00;
 13020  004246  0E00               	movlw	0
 13021  004248  6E84               	movwf	3972,c	;volatile
 13022                           
 13023                           ;Main.c: 100: FAN = 0;
 13024  00424A  0E00               	movlw	0
 13025  00424C  0100               	movlb	0	; () banked
 13026  00424E  6FE1               	movwf	_FAN& (0+255),b
 13027                           
 13028                           ; BSR set to: 0
 13029                           ;Main.c: 101: RBPU =0;
 13030  004250  9EF1               	bcf	intcon2,7,c	;volatile
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;Main.c: 103: I2C_Init(100000);
 13034  004252  0EA0               	movlw	160
 13035  004254  6E11               	movwf	I2C_Init@c,c
 13036  004256  0E86               	movlw	134
 13037  004258  6E12               	movwf	I2C_Init@c+1,c
 13038  00425A  0E01               	movlw	1
 13039  00425C  6E13               	movwf	I2C_Init@c+2,c
 13040  00425E  0E00               	movlw	0
 13041  004260  6E14               	movwf	I2C_Init@c+3,c
 13042  004262  EC10  F026         	call	_I2C_Init	;wreg free
 13043                           
 13044                           ;Main.c: 105: DS1621_Init();
 13045  004266  ECD7  F024         	call	_DS1621_Init	;wreg free
 13046                           
 13047                           ;Main.c: 106: Init_Interrupt();
 13048  00426A  EC73  F024         	call	_Init_Interrupt	;wreg free
 13049                           
 13050                           ;Main.c: 107: duty_cycle = 50;
 13051  00426E  0E32               	movlw	50
 13052  004270  6E67               	movwf	_duty_cycle,c
 13053                           
 13054                           ;Main.c: 108: Turn_Off_Fan();
 13055  004272  ECF4  F024         	call	_Turn_Off_Fan	;wreg free
 13056                           
 13057                           ;Main.c: 109: fan_set_temp = 77;
 13058  004276  0E4D               	movlw	77
 13059  004278  0100               	movlb	0	; () banked
 13060  00427A  6FB6               	movwf	_fan_set_temp& (0+255),b
 13061                           
 13062                           ; BSR set to: 0
 13063  00427C  0012               	return		;funcret
 13064  00427E                     __end_of_Do_Init:
 13065                           	opt stack 0
 13066                           tblptru	equ	0xFF8
 13067                           tblptrh	equ	0xFF7
 13068                           tblptrl	equ	0xFF6
 13069                           tablat	equ	0xFF5
 13070                           prodh	equ	0xFF4
 13071                           prodl	equ	0xFF3
 13072                           intcon	equ	0xFF2
 13073                           intcon2	equ	0xFF1
 13074                           intcon3	equ	0xFF0
 13075                           postinc0	equ	0xFEE
 13076                           wreg	equ	0xFE8
 13077                           postdec1	equ	0xFE5
 13078                           plusw1	equ	0xFE3
 13079                           fsr1l	equ	0xFE1
 13080                           indf2	equ	0xFDF
 13081                           postinc2	equ	0xFDE
 13082                           plusw2	equ	0xFDB
 13083                           fsr2h	equ	0xFDA
 13084                           fsr2l	equ	0xFD9
 13085                           status	equ	0xFD8
 13086                           
 13087 ;; *************** function _Turn_Off_Fan *****************
 13088 ;; Defined at:
 13089 ;;		line 89 in file "Fan_Support.c"
 13090 ;; Parameters:    Size  Location     Type
 13091 ;;		None
 13092 ;; Auto vars:     Size  Location     Type
 13093 ;;		None
 13094 ;; Return value:  Size  Location     Type
 13095 ;;		None               void
 13096 ;; Registers used:
 13097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13098 ;; Tracked objects:
 13099 ;;		On entry : 0/0
 13100 ;;		On exit  : 0/0
 13101 ;;		Unchanged: 0/0
 13102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;Total ram usage:        0 bytes
 13108 ;; Hardware stack levels used:    1
 13109 ;; Hardware stack levels required when called:    6
 13110 ;; This function calls:
 13111 ;;		_printf
 13112 ;; This function is called by:
 13113 ;;		_Monitor_Fan
 13114 ;;		_Toggle_Fan
 13115 ;;		_Do_Init
 13116 ;;		_main
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           	psect	text61
 13121  0049E8                     __ptext61:
 13122                           	opt stack 0
 13123  0049E8                     _Turn_Off_Fan:
 13124                           	opt stack 24
 13125                           
 13126                           ;Fan_Support.c: 91: printf ("Fan is turned off\r\n");
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;incstack = 0
 13130  0049E8  0E34               	movlw	low STR_1
 13131  0049EA  0100               	movlb	0	; () banked
 13132  0049EC  6F80               	movwf	printf@f& (0+255),b
 13133  0049EE  0EFF               	movlw	high STR_1
 13134  0049F0  0100               	movlb	0	; () banked
 13135  0049F2  6F81               	movwf	(printf@f+1)& (0+255),b
 13136  0049F4  EC0E  F000         	call	_printf	;wreg free
 13137                           
 13138                           ;Fan_Support.c: 93: FAN = 1;
 13139  0049F8  0E01               	movlw	1
 13140  0049FA  0100               	movlb	0	; () banked
 13141  0049FC  6FE1               	movwf	_FAN& (0+255),b
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;Fan_Support.c: 94: PORTDbits.RD1 = 1;
 13145  0049FE  8283               	bsf	3971,1,c	;volatile
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;Fan_Support.c: 95: PORTDbits.RD2 = 1;
 13149  004A00  8483               	bsf	3971,2,c	;volatile
 13150                           
 13151                           ; BSR set to: 0
 13152  004A02  0012               	return		;funcret
 13153  004A04                     __end_of_Turn_Off_Fan:
 13154                           	opt stack 0
 13155                           tblptru	equ	0xFF8
 13156                           tblptrh	equ	0xFF7
 13157                           tblptrl	equ	0xFF6
 13158                           tablat	equ	0xFF5
 13159                           prodh	equ	0xFF4
 13160                           prodl	equ	0xFF3
 13161                           intcon	equ	0xFF2
 13162                           intcon2	equ	0xFF1
 13163                           intcon3	equ	0xFF0
 13164                           postinc0	equ	0xFEE
 13165                           wreg	equ	0xFE8
 13166                           postdec1	equ	0xFE5
 13167                           plusw1	equ	0xFE3
 13168                           fsr1l	equ	0xFE1
 13169                           indf2	equ	0xFDF
 13170                           postinc2	equ	0xFDE
 13171                           plusw2	equ	0xFDB
 13172                           fsr2h	equ	0xFDA
 13173                           fsr2l	equ	0xFD9
 13174                           status	equ	0xFD8
 13175                           
 13176 ;; *************** function _printf *****************
 13177 ;; Defined at:
 13178 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 13179 ;; Parameters:    Size  Location     Type
 13180 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 13181 ;;		 -> STR_43(29), STR_42(20), STR_41(21), STR_40(30), 
 13182 ;;		 -> STR_37(29), STR_36(20), STR_35(20), STR_34(30), 
 13183 ;;		 -> STR_11(33), STR_10(27), STR_9(34), STR_8(22), 
 13184 ;;		 -> STR_7(29), STR_6(20), STR_5(21), STR_4(30), 
 13185 ;;		 -> STR_3(22), STR_2(19), STR_1(20), 
 13186 ;; Auto vars:     Size  Location     Type
 13187 ;;  idx             1   23[BANK0 ] unsigned char 
 13188 ;;  val             4   36[BANK0 ] unsigned long 
 13189 ;;  tmpval          4   28[BANK0 ] struct .
 13190 ;;  fval            3   42[BANK0 ] struct .
 13191 ;;  cp              3    0        PTR const unsigned char 
 13192 ;;  flag            2   40[BANK0 ] unsigned short 
 13193 ;;  exp             2   34[BANK0 ] int 
 13194 ;;  width           2   32[BANK0 ] int 
 13195 ;;  prec            2   26[BANK0 ] int 
 13196 ;;  ap              2   24[BANK0 ] PTR void [1]
 13197 ;;		 -> ?_printf(2), 
 13198 ;;  len             2    0        unsigned int 
 13199 ;;  c               1   45[BANK0 ] char 
 13200 ;;  d               1    0        unsigned char 
 13201 ;; Return value:  Size  Location     Type
 13202 ;;                  2    0[BANK0 ] int 
 13203 ;; Registers used:
 13204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13205 ;; Tracked objects:
 13206 ;;		On entry : 0/0
 13207 ;;		On exit  : 0/0
 13208 ;;		Unchanged: 0/0
 13209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13210 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13211 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13212 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13213 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13214 ;;Total ram usage:       46 bytes
 13215 ;; Hardware stack levels used:    1
 13216 ;; Hardware stack levels required when called:    5
 13217 ;; This function calls:
 13218 ;;		___awdiv
 13219 ;;		___ftadd
 13220 ;;		___ftge
 13221 ;;		___ftmul
 13222 ;;		___ftneg
 13223 ;;		___ftsub
 13224 ;;		___fttol
 13225 ;;		___lldiv
 13226 ;;		___llmod
 13227 ;;		___lltoft
 13228 ;;		___wmul
 13229 ;;		__div_to_l_
 13230 ;;		__tdiv_to_l_
 13231 ;;		_fround
 13232 ;;		_isdigit
 13233 ;;		_putch
 13234 ;;		_scale
 13235 ;; This function is called by:
 13236 ;;		_Turn_Off_Fan
 13237 ;;		_Turn_On_Fan
 13238 ;;		_check_for_button_input
 13239 ;;		_main
 13240 ;;		_Setup_Fan_Temp
 13241 ;;		_Do_Setup_Time
 13242 ;; This function uses a non-reentrant model
 13243 ;;
 13244                           
 13245                           	psect	text62
 13246  00001C                     __ptext62:
 13247                           	opt stack 0
 13248  00001C                     _printf:
 13249                           	opt stack 25
 13250                           
 13251                           ;doprnt.c: 466: va_list ap;
 13252                           ;doprnt.c: 499: signed char c;
 13253                           ;doprnt.c: 501: int width;
 13254                           ;doprnt.c: 504: int prec;
 13255                           ;doprnt.c: 508: unsigned short flag;
 13256                           ;doprnt.c: 515: char d;
 13257                           ;doprnt.c: 516: double fval;
 13258                           ;doprnt.c: 517: int exp;
 13259                           ;doprnt.c: 523: union {
 13260                           ;doprnt.c: 524: unsigned long vd;
 13261                           ;doprnt.c: 525: double integ;
 13262                           ;doprnt.c: 526: } tmpval;
 13263                           ;doprnt.c: 528: unsigned long val;
 13264                           ;doprnt.c: 529: unsigned len;
 13265                           ;doprnt.c: 530: const char * cp;
 13266                           ;doprnt.c: 533: *ap = __va_start();
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;incstack = 0
 13270  00001C  0E82               	movlw	low (?_printf+2)
 13271  00001E  0100               	movlb	0	; () banked
 13272  000020  6F98               	movwf	printf@ap& (0+255),b
 13273  000022  0E00               	movlw	high (?_printf+2)
 13274  000024  0100               	movlb	0	; () banked
 13275  000026  6F99               	movwf	(printf@ap+1)& (0+255),b
 13276                           
 13277                           ;doprnt.c: 536: while(c = *f++) {
 13278  000028  EF1E  F006         	goto	l9153
 13279  00002C                     l8867:
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;doprnt.c: 538: if(c != '%')
 13283  00002C  0E25               	movlw	37
 13284  00002E  0100               	movlb	0	; () banked
 13285  000030  19AD               	xorwf	printf@c& (0+255),w,b
 13286  000032  B4D8               	btfsc	status,2,c
 13287  000034  D006               	goto	l8871
 13288                           
 13289                           ; BSR set to: 0
 13290                           ;doprnt.c: 540: {
 13291                           ;doprnt.c: 541: (putch(c) );
 13292  000036  0100               	movlb	0	; () banked
 13293  000038  51AD               	movf	printf@c& (0+255),w,b
 13294  00003A  ECF0  F025         	call	_putch
 13295                           
 13296                           ;doprnt.c: 542: continue;
 13297  00003E  EF1E  F006         	goto	l9153
 13298  000042                     l8871:
 13299                           
 13300                           ;doprnt.c: 543: }
 13301                           ;doprnt.c: 546: width = 0;
 13302  000042  0E00               	movlw	0
 13303  000044  0100               	movlb	0	; () banked
 13304  000046  6FA1               	movwf	(printf@width+1)& (0+255),b
 13305  000048  0E00               	movlw	0
 13306  00004A  6FA0               	movwf	printf@width& (0+255),b
 13307                           
 13308                           ;doprnt.c: 548: flag = 0;
 13309  00004C  0E00               	movlw	0
 13310  00004E  0100               	movlb	0	; () banked
 13311  000050  6FA9               	movwf	(printf@flag+1)& (0+255),b
 13312  000052  0E00               	movlw	0
 13313  000054  6FA8               	movwf	printf@flag& (0+255),b
 13314                           
 13315                           ; BSR set to: 0
 13316                           ;doprnt.c: 551: switch(*f) {
 13317                           
 13318                           ;doprnt.c: 550: for(;;) {
 13319  000056  D007               	goto	l8877
 13320  000058                     l8873:
 13321                           
 13322                           ;doprnt.c: 580: flag |= 0x04;
 13323  000058  0100               	movlb	0	; () banked
 13324  00005A  85A8               	bsf	printf@flag& (0+255),2,b
 13325                           
 13326                           ;doprnt.c: 581: f++;
 13327  00005C  0100               	movlb	0	; () banked
 13328  00005E  4B80               	infsnz	printf@f& (0+255),f,b
 13329  000060  2B81               	incf	(printf@f+1)& (0+255),f,b
 13330                           
 13331                           ;doprnt.c: 582: continue;
 13332  000062  D001               	goto	l8877
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;doprnt.c: 584: }
 13336  000064  D00B               	goto	l8879
 13337  000066                     l8877:
 13338  000066  C080  FFF6         	movff	printf@f,tblptrl
 13339  00006A  C081  FFF7         	movff	printf@f+1,tblptrh
 13340  00006E                     	if	0	;tblptru may be non-zero
 13341  00006E                     	endif
 13342  00006E                     	if	0	;tblptru may be non-zero
 13343  00006E                     	endif
 13344  00006E  0008               	tblrd		*
 13345  000070  50F5               	movf	tablat,w,c
 13346                           
 13347                           ; Switch size 1, requested type "space"
 13348                           ; Number of cases is 1, Range of values is 48 to 48
 13349                           ; switch strategies available:
 13350                           ; Name         Instructions Cycles
 13351                           ; simple_byte            4     3 (average)
 13352                           ;	Chosen strategy is simple_byte
 13353  000072  0A30               	xorlw	48	; case 48
 13354  000074  B4D8               	btfsc	status,2,c
 13355  000076  D7F0               	goto	l8873
 13356                           
 13357                           ;doprnt.c: 585: break;
 13358  000078  D001               	goto	l8879
 13359                           
 13360                           ;doprnt.c: 586: }
 13361  00007A  D7F5               	goto	l8877
 13362  00007C                     l8879:
 13363                           
 13364                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13365  00007C  C080  FFF6         	movff	printf@f,tblptrl
 13366  000080  C081  FFF7         	movff	printf@f+1,tblptrh
 13367  000084                     	if	0	;tblptru may be non-zero
 13368  000084                     	endif
 13369  000084                     	if	0	;tblptru may be non-zero
 13370  000084                     	endif
 13371  000084  0008               	tblrd		*
 13372  000086  50F5               	movf	tablat,w,c
 13373  000088  EC96  F024         	call	_isdigit
 13374  00008C  A0D8               	btfss	status,0,c
 13375  00008E  D04D               	goto	l8897
 13376                           
 13377                           ;doprnt.c: 598: width = 0;
 13378  000090  0E00               	movlw	0
 13379  000092  0100               	movlb	0	; () banked
 13380  000094  6FA1               	movwf	(printf@width+1)& (0+255),b
 13381  000096  0E00               	movlw	0
 13382  000098  6FA0               	movwf	printf@width& (0+255),b
 13383  00009A  D000               	goto	l8883
 13384  00009C                     l8883:
 13385                           
 13386                           ;doprnt.c: 600: width *= 10;
 13387  00009C  C0A0  F011         	movff	printf@width,___wmul@multiplier
 13388  0000A0  C0A1  F012         	movff	printf@width+1,___wmul@multiplier+1
 13389  0000A4  0E00               	movlw	0
 13390  0000A6  6E14               	movwf	___wmul@multiplicand+1,c
 13391  0000A8  0E0A               	movlw	10
 13392  0000AA  6E13               	movwf	___wmul@multiplicand,c
 13393  0000AC  EC01  F024         	call	___wmul	;wreg free
 13394  0000B0  C011  F0A0         	movff	?___wmul,printf@width
 13395  0000B4  C012  F0A1         	movff	?___wmul+1,printf@width+1
 13396                           
 13397                           ;doprnt.c: 601: width += *f++ - '0';
 13398  0000B8  0ED0               	movlw	208
 13399  0000BA  0100               	movlb	0	; () banked
 13400  0000BC  6F8E               	movwf	??_printf& (0+255),b
 13401  0000BE  0EFF               	movlw	255
 13402  0000C0  0100               	movlb	0	; () banked
 13403  0000C2  6F8F               	movwf	(??_printf+1)& (0+255),b
 13404  0000C4  C080  FFF6         	movff	printf@f,tblptrl
 13405  0000C8  C081  FFF7         	movff	printf@f+1,tblptrh
 13406  0000CC                     	if	0	;tblptru may be non-zero
 13407  0000CC                     	endif
 13408  0000CC                     	if	0	;tblptru may be non-zero
 13409  0000CC                     	endif
 13410  0000CC  0008               	tblrd		*
 13411  0000CE  50F5               	movf	tablat,w,c
 13412  0000D0  0100               	movlb	0	; () banked
 13413  0000D2  6F90               	movwf	(??_printf+2)& (0+255),b
 13414  0000D4  6B91               	clrf	(??_printf+3)& (0+255),b
 13415  0000D6  0100               	movlb	0	; () banked
 13416  0000D8  518E               	movf	??_printf& (0+255),w,b
 13417  0000DA  0100               	movlb	0	; () banked
 13418  0000DC  2790               	addwf	(??_printf+2)& (0+255),f,b
 13419  0000DE  0100               	movlb	0	; () banked
 13420  0000E0  518F               	movf	(??_printf+1)& (0+255),w,b
 13421  0000E2  0100               	movlb	0	; () banked
 13422  0000E4  2391               	addwfc	(??_printf+3)& (0+255),f,b
 13423  0000E6  0100               	movlb	0	; () banked
 13424  0000E8  5190               	movf	(??_printf+2)& (0+255),w,b
 13425  0000EA  0100               	movlb	0	; () banked
 13426  0000EC  27A0               	addwf	printf@width& (0+255),f,b
 13427  0000EE  0100               	movlb	0	; () banked
 13428  0000F0  5191               	movf	(??_printf+3)& (0+255),w,b
 13429  0000F2  0100               	movlb	0	; () banked
 13430  0000F4  23A1               	addwfc	(printf@width+1)& (0+255),f,b
 13431                           
 13432                           ; BSR set to: 0
 13433  0000F6  0100               	movlb	0	; () banked
 13434  0000F8  4B80               	infsnz	printf@f& (0+255),f,b
 13435  0000FA  2B81               	incf	(printf@f+1)& (0+255),f,b
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13439  0000FC  C080  FFF6         	movff	printf@f,tblptrl
 13440  000100  C081  FFF7         	movff	printf@f+1,tblptrh
 13441  000104                     	if	0	;tblptru may be non-zero
 13442  000104                     	endif
 13443  000104                     	if	0	;tblptru may be non-zero
 13444  000104                     	endif
 13445  000104  0008               	tblrd		*
 13446  000106  50F5               	movf	tablat,w,c
 13447  000108  EC96  F024         	call	_isdigit
 13448  00010C  A0D8               	btfss	status,0,c
 13449  00010E  D00D               	goto	l8897
 13450  000110  D7C5               	goto	l8883
 13451                           
 13452                           ;doprnt.c: 608: }
 13453                           ;doprnt.c: 635: switch(c = *f++) {
 13454  000112  D00B               	goto	l8897
 13455                           
 13456                           ;doprnt.c: 638: goto alldone;
 13457                           
 13458                           ;doprnt.c: 637: case 0:
 13459  000114  EF2F  F006         	goto	l1443
 13460  000118                     l8891:
 13461                           
 13462                           ;doprnt.c: 663: flag |= 0x400;
 13463  000118  0100               	movlb	0	; () banked
 13464  00011A  85A9               	bsf	(printf@flag+1)& (0+255),2,b
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;doprnt.c: 698: case 'i':
 13468                           ;doprnt.c: 699: break;
 13469                           
 13470                           ; BSR set to: 0
 13471                           
 13472                           ;doprnt.c: 697: case 'd':
 13473                           
 13474                           ;doprnt.c: 664: break;
 13475  00011C  D024               	goto	l8899
 13476  00011E                     l8893:
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;doprnt.c: 721: flag |= 0x80;
 13480  00011E  0100               	movlb	0	; () banked
 13481  000120  8FA8               	bsf	printf@flag& (0+255),7,b
 13482                           
 13483                           ;doprnt.c: 723: break;
 13484  000122  D021               	goto	l8899
 13485                           
 13486                           ; BSR set to: 0
 13487                           ;doprnt.c: 813: continue;
 13488                           
 13489                           ;doprnt.c: 802: default:
 13490  000124  EF1E  F006         	goto	l9153
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;doprnt.c: 822: }
 13494  000128  D01E               	goto	l8899
 13495  00012A                     l8897:
 13496  00012A  C080  FFF6         	movff	printf@f,tblptrl
 13497  00012E  C081  FFF7         	movff	printf@f+1,tblptrh
 13498  000132  0100               	movlb	0	; () banked
 13499  000134  4B80               	infsnz	printf@f& (0+255),f,b
 13500  000136  2B81               	incf	(printf@f+1)& (0+255),f,b
 13501  000138                     	if	0	;tblptru may be non-zero
 13502  000138                     	endif
 13503  000138                     	if	0	;tblptru may be non-zero
 13504  000138                     	endif
 13505  000138  0008               	tblrd		*
 13506  00013A  CFF5 F0AD          	movff	tablat,printf@c
 13507  00013E  0100               	movlb	0	; () banked
 13508  000140  51AD               	movf	printf@c& (0+255),w,b
 13509                           
 13510                           ; Switch size 1, requested type "space"
 13511                           ; Number of cases is 5, Range of values is 0 to 120
 13512                           ; switch strategies available:
 13513                           ; Name         Instructions Cycles
 13514                           ; simple_byte           16     9 (average)
 13515                           ;	Chosen strategy is simple_byte
 13516  000142  0A00               	xorlw	0	; case 0
 13517  000144  B4D8               	btfsc	status,2,c
 13518  000146  EF2F  F006         	goto	l1443
 13519  00014A  0A64               	xorlw	100	; case 100
 13520  00014C  B4D8               	btfsc	status,2,c
 13521  00014E  D00B               	goto	l8899
 13522  000150  0A02               	xorlw	2	; case 102
 13523  000152  B4D8               	btfsc	status,2,c
 13524  000154  D7E1               	goto	l8891
 13525  000156  0A0F               	xorlw	15	; case 105
 13526  000158  B4D8               	btfsc	status,2,c
 13527  00015A  D005               	goto	l8899
 13528  00015C  0A11               	xorlw	17	; case 120
 13529  00015E  B4D8               	btfsc	status,2,c
 13530  000160  D7DE               	goto	l8893
 13531  000162  EF1E  F006         	goto	l9153
 13532  000166                     l8899:
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;doprnt.c: 825: if(flag & (0x700)) {
 13536  000166  0E07               	movlw	7
 13537  000168  0100               	movlb	0	; () banked
 13538  00016A  15A9               	andwf	(printf@flag+1)& (0+255),w,b
 13539  00016C  B4D8               	btfsc	status,2,c
 13540  00016E  D39A               	goto	l1361
 13541                           
 13542                           ; BSR set to: 0
 13543                           ;doprnt.c: 829: prec = 6;
 13544  000170  0E00               	movlw	0
 13545  000172  0100               	movlb	0	; () banked
 13546  000174  6F9B               	movwf	(printf@prec+1)& (0+255),b
 13547  000176  0E06               	movlw	6
 13548  000178  6F9A               	movwf	printf@prec& (0+255),b
 13549                           
 13550                           ; BSR set to: 0
 13551                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13552  00017A  C098  FFD9         	movff	printf@ap,fsr2l
 13553  00017E  C099  FFDA         	movff	printf@ap+1,fsr2h
 13554  000182  CFDE F0AA          	movff	postinc2,printf@fval
 13555  000186  CFDE F0AB          	movff	postinc2,printf@fval+1
 13556  00018A  CFDD F0AC          	movff	postdec2,printf@fval+2
 13557                           
 13558                           ; BSR set to: 0
 13559  00018E  0E03               	movlw	3
 13560  000190  0100               	movlb	0	; () banked
 13561  000192  2798               	addwf	printf@ap& (0+255),f,b
 13562  000194  0E00               	movlw	0
 13563  000196  2399               	addwfc	(printf@ap+1)& (0+255),f,b
 13564                           
 13565                           ; BSR set to: 0
 13566                           ;doprnt.c: 831: if(fval < 0.0) {
 13567  000198  0100               	movlb	0	; () banked
 13568  00019A  AFAC               	btfss	(printf@fval+2)& (0+255),7,b
 13569  00019C  D012               	goto	l8913
 13570                           
 13571                           ; BSR set to: 0
 13572                           ;doprnt.c: 832: fval = -fval;
 13573  00019E  C0AA  F011         	movff	printf@fval,___ftneg@f1
 13574  0001A2  C0AB  F012         	movff	printf@fval+1,___ftneg@f1+1
 13575  0001A6  C0AC  F013         	movff	printf@fval+2,___ftneg@f1+2
 13576  0001AA  EC61  F024         	call	___ftneg	;wreg free
 13577  0001AE  C011  F0AA         	movff	?___ftneg,printf@fval
 13578  0001B2  C012  F0AB         	movff	?___ftneg+1,printf@fval+1
 13579  0001B6  C013  F0AC         	movff	?___ftneg+2,printf@fval+2
 13580                           
 13581                           ;doprnt.c: 833: flag |= 0x03;
 13582  0001BA  0E03               	movlw	3
 13583  0001BC  0100               	movlb	0	; () banked
 13584  0001BE  13A8               	iorwf	printf@flag& (0+255),f,b
 13585  0001C0  D000               	goto	l8913
 13586  0001C2                     l8913:
 13587                           
 13588                           ; BSR set to: 0
 13589                           ;doprnt.c: 834: }
 13590                           ;doprnt.c: 835: exp = 0;
 13591  0001C2  0E00               	movlw	0
 13592  0001C4  0100               	movlb	0	; () banked
 13593  0001C6  6FA3               	movwf	(printf@exp+1)& (0+255),b
 13594  0001C8  0E00               	movlw	0
 13595  0001CA  6FA2               	movwf	printf@exp& (0+255),b
 13596                           
 13597                           ; BSR set to: 0
 13598                           ;doprnt.c: 836: if( fval!=0) {
 13599  0001CC  0100               	movlb	0	; () banked
 13600  0001CE  51AA               	movf	printf@fval& (0+255),w,b
 13601  0001D0  0100               	movlb	0	; () banked
 13602  0001D2  11AB               	iorwf	(printf@fval+1)& (0+255),w,b
 13603  0001D4  0100               	movlb	0	; () banked
 13604  0001D6  11AC               	iorwf	(printf@fval+2)& (0+255),w,b
 13605  0001D8  B4D8               	btfsc	status,2,c
 13606  0001DA  D093               	goto	l8941
 13607                           
 13608                           ; BSR set to: 0
 13609                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13610  0001DC  0E82               	movlw	130
 13611  0001DE  0100               	movlb	0	; () banked
 13612  0001E0  6F8E               	movwf	??_printf& (0+255),b
 13613  0001E2  0EFF               	movlw	255
 13614  0001E4  0100               	movlb	0	; () banked
 13615  0001E6  6F8F               	movwf	(??_printf+1)& (0+255),b
 13616  0001E8  C0AA  F090         	movff	printf@fval,??_printf+2
 13617  0001EC  C0AB  F091         	movff	printf@fval+1,??_printf+3
 13618  0001F0  C0AC  F092         	movff	printf@fval+2,??_printf+4
 13619  0001F4  C0AD  F093         	movff	printf@fval+3,??_printf+5
 13620  0001F8  0E10               	movlw	16
 13621  0001FA  D006               	goto	u7570
 13622  0001FC                     u7575:
 13623  0001FC  0100               	movlb	0	; () banked
 13624  0001FE  90D8               	bcf	status,0,c
 13625  000200  3393               	rrcf	(??_printf+5)& (0+255),f,b
 13626  000202  3392               	rrcf	(??_printf+4)& (0+255),f,b
 13627  000204  3391               	rrcf	(??_printf+3)& (0+255),f,b
 13628  000206  3390               	rrcf	(??_printf+2)& (0+255),f,b
 13629  000208                     u7570:
 13630  000208  2EE8               	decfsz	wreg,f,c
 13631  00020A  D7F8               	goto	u7575
 13632  00020C  0100               	movlb	0	; () banked
 13633  00020E  5190               	movf	(??_printf+2)& (0+255),w,b
 13634  000210  0100               	movlb	0	; () banked
 13635  000212  258E               	addwf	??_printf& (0+255),w,b
 13636  000214  0100               	movlb	0	; () banked
 13637  000216  6FA2               	movwf	printf@exp& (0+255),b
 13638  000218  0E00               	movlw	0
 13639  00021A  0100               	movlb	0	; () banked
 13640  00021C  218F               	addwfc	(??_printf+1)& (0+255),w,b
 13641  00021E  0100               	movlb	0	; () banked
 13642  000220  6FA3               	movwf	(printf@exp+1)& (0+255),b
 13643                           
 13644                           ; BSR set to: 0
 13645                           ;doprnt.c: 838: exp--;
 13646  000222  0100               	movlb	0	; () banked
 13647  000224  07A2               	decf	printf@exp& (0+255),f,b
 13648  000226  A0D8               	btfss	status,0,c
 13649  000228  07A3               	decf	(printf@exp+1)& (0+255),f,b
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;doprnt.c: 839: exp *= 3;
 13653  00022A  C0A2  F011         	movff	printf@exp,___wmul@multiplier
 13654  00022E  C0A3  F012         	movff	printf@exp+1,___wmul@multiplier+1
 13655  000232  0E00               	movlw	0
 13656  000234  6E14               	movwf	___wmul@multiplicand+1,c
 13657  000236  0E03               	movlw	3
 13658  000238  6E13               	movwf	___wmul@multiplicand,c
 13659  00023A  EC01  F024         	call	___wmul	;wreg free
 13660  00023E  C011  F0A2         	movff	?___wmul,printf@exp
 13661  000242  C012  F0A3         	movff	?___wmul+1,printf@exp+1
 13662                           
 13663                           ;doprnt.c: 840: exp /= 10;
 13664  000246  C0A2  F017         	movff	printf@exp,___awdiv@dividend
 13665  00024A  C0A3  F018         	movff	printf@exp+1,___awdiv@dividend+1
 13666  00024E  0E00               	movlw	0
 13667  000250  6E1A               	movwf	___awdiv@divisor+1,c
 13668  000252  0E0A               	movlw	10
 13669  000254  6E19               	movwf	___awdiv@divisor,c
 13670  000256  EC61  F01D         	call	___awdiv	;wreg free
 13671  00025A  C017  F0A2         	movff	?___awdiv,printf@exp
 13672  00025E  C018  F0A3         	movff	?___awdiv+1,printf@exp+1
 13673                           
 13674                           ;doprnt.c: 841: if(exp < 0)
 13675  000262  0100               	movlb	0	; () banked
 13676  000264  AFA3               	btfss	(printf@exp+1)& (0+255),7,b
 13677  000266  D005               	goto	l8929
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;doprnt.c: 842: exp--;
 13681  000268  0100               	movlb	0	; () banked
 13682  00026A  07A2               	decf	printf@exp& (0+255),f,b
 13683  00026C  A0D8               	btfss	status,0,c
 13684  00026E  07A3               	decf	(printf@exp+1)& (0+255),f,b
 13685  000270  D000               	goto	l8929
 13686  000272                     l8929:
 13687                           
 13688                           ; BSR set to: 0
 13689                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13690  000272  0100               	movlb	0	; () banked
 13691  000274  51A2               	movf	printf@exp& (0+255),w,b
 13692  000276  0800               	sublw	0
 13693  000278  EC91  F009         	call	_scale
 13694  00027C  C043  F09C         	movff	?_scale,printf@tmpval
 13695  000280  C044  F09D         	movff	?_scale+1,printf@tmpval+1
 13696  000284  C045  F09E         	movff	?_scale+2,printf@tmpval+2
 13697                           
 13698                           ;doprnt.c: 847: tmpval.integ *= fval;
 13699  000288  C09C  F01F         	movff	printf@tmpval,___ftmul@f1
 13700  00028C  C09D  F020         	movff	printf@tmpval+1,___ftmul@f1+1
 13701  000290  C09E  F021         	movff	printf@tmpval+2,___ftmul@f1+2
 13702  000294  C0AA  F022         	movff	printf@fval,___ftmul@f2
 13703  000298  C0AB  F023         	movff	printf@fval+1,___ftmul@f2+1
 13704  00029C  C0AC  F024         	movff	printf@fval+2,___ftmul@f2+2
 13705  0002A0  EC24  F018         	call	___ftmul	;wreg free
 13706  0002A4  C01F  F09C         	movff	?___ftmul,printf@tmpval
 13707  0002A8  C020  F09D         	movff	?___ftmul+1,printf@tmpval+1
 13708  0002AC  C021  F09E         	movff	?___ftmul+2,printf@tmpval+2
 13709                           
 13710                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13711  0002B0  C09C  F011         	movff	printf@tmpval,___ftge@ff1
 13712  0002B4  C09D  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13713  0002B8  C09E  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13714  0002BC  0E00               	movlw	0
 13715  0002BE  6E14               	movwf	___ftge@ff2,c
 13716  0002C0  0E80               	movlw	128
 13717  0002C2  6E15               	movwf	___ftge@ff2+1,c
 13718  0002C4  0E3F               	movlw	63
 13719  0002C6  6E16               	movwf	___ftge@ff2+2,c
 13720  0002C8  ECAC  F01D         	call	___ftge	;wreg free
 13721  0002CC  B0D8               	btfsc	status,0,c
 13722  0002CE  D005               	goto	l8937
 13723                           
 13724                           ;doprnt.c: 849: exp--;
 13725  0002D0  0100               	movlb	0	; () banked
 13726  0002D2  07A2               	decf	printf@exp& (0+255),f,b
 13727  0002D4  A0D8               	btfss	status,0,c
 13728  0002D6  07A3               	decf	(printf@exp+1)& (0+255),f,b
 13729  0002D8  D014               	goto	l8941
 13730  0002DA                     l8937:
 13731                           
 13732                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13733  0002DA  C09C  F011         	movff	printf@tmpval,___ftge@ff1
 13734  0002DE  C09D  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13735  0002E2  C09E  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13736  0002E6  0E00               	movlw	0
 13737  0002E8  6E14               	movwf	___ftge@ff2,c
 13738  0002EA  0E20               	movlw	32
 13739  0002EC  6E15               	movwf	___ftge@ff2+1,c
 13740  0002EE  0E41               	movlw	65
 13741  0002F0  6E16               	movwf	___ftge@ff2+2,c
 13742  0002F2  ECAC  F01D         	call	___ftge	;wreg free
 13743  0002F6  A0D8               	btfss	status,0,c
 13744  0002F8  D004               	goto	l8941
 13745                           
 13746                           ;doprnt.c: 851: exp++;
 13747  0002FA  0100               	movlb	0	; () banked
 13748  0002FC  4BA2               	infsnz	printf@exp& (0+255),f,b
 13749  0002FE  2BA3               	incf	(printf@exp+1)& (0+255),f,b
 13750                           
 13751                           ; BSR set to: 0
 13752                           
 13753                           ; BSR set to: 0
 13754  000300  D000               	goto	l8941
 13755  000302                     l8941:
 13756                           
 13757                           ;doprnt.c: 852: }
 13758                           ;doprnt.c: 1112: if(prec <= 12)
 13759  000302  0100               	movlb	0	; () banked
 13760  000304  BF9B               	btfsc	(printf@prec+1)& (0+255),7,b
 13761  000306  D008               	goto	l8943
 13762  000308  0100               	movlb	0	; () banked
 13763  00030A  519B               	movf	(printf@prec+1)& (0+255),w,b
 13764  00030C  E11E               	bnz	l8945
 13765  00030E  0E0D               	movlw	13
 13766  000310  0100               	movlb	0	; () banked
 13767  000312  5D9A               	subwf	printf@prec& (0+255),w,b
 13768  000314  B0D8               	btfsc	status,0,c
 13769  000316  D019               	goto	l8945
 13770  000318                     l8943:
 13771                           
 13772                           ; BSR set to: 0
 13773                           ;doprnt.c: 1113: fval += fround(prec);
 13774  000318  C0AA  F04D         	movff	printf@fval,___ftadd@f1
 13775  00031C  C0AB  F04E         	movff	printf@fval+1,___ftadd@f1+1
 13776  000320  C0AC  F04F         	movff	printf@fval+2,___ftadd@f1+2
 13777  000324  0100               	movlb	0	; () banked
 13778  000326  519A               	movf	printf@prec& (0+255),w,b
 13779  000328  ECB8  F00E         	call	_fround
 13780  00032C  C043  F050         	movff	?_fround,___ftadd@f2
 13781  000330  C044  F051         	movff	?_fround+1,___ftadd@f2+1
 13782  000334  C045  F052         	movff	?_fround+2,___ftadd@f2+2
 13783  000338  ECEA  F011         	call	___ftadd	;wreg free
 13784  00033C  C04D  F0AA         	movff	?___ftadd,printf@fval
 13785  000340  C04E  F0AB         	movff	?___ftadd+1,printf@fval+1
 13786  000344  C04F  F0AC         	movff	?___ftadd+2,printf@fval+2
 13787  000348  D000               	goto	l8945
 13788  00034A                     l8945:
 13789                           
 13790                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13791  00034A  0100               	movlb	0	; () banked
 13792  00034C  BFA3               	btfsc	(printf@exp+1)& (0+255),7,b
 13793  00034E  D008               	goto	l8947
 13794  000350  0100               	movlb	0	; () banked
 13795  000352  51A3               	movf	(printf@exp+1)& (0+255),w,b
 13796  000354  E128               	bnz	l8953
 13797  000356  0E0A               	movlw	10
 13798  000358  0100               	movlb	0	; () banked
 13799  00035A  5DA2               	subwf	printf@exp& (0+255),w,b
 13800  00035C  B0D8               	btfsc	status,0,c
 13801  00035E  D023               	goto	l8953
 13802  000360                     l8947:
 13803                           
 13804                           ; BSR set to: 0
 13805  000360  0100               	movlb	0	; () banked
 13806  000362  51AA               	movf	printf@fval& (0+255),w,b
 13807  000364  0100               	movlb	0	; () banked
 13808  000366  11AB               	iorwf	(printf@fval+1)& (0+255),w,b
 13809  000368  0100               	movlb	0	; () banked
 13810  00036A  11AC               	iorwf	(printf@fval+2)& (0+255),w,b
 13811  00036C  B4D8               	btfsc	status,2,c
 13812  00036E  D077               	goto	l8967
 13813                           
 13814                           ; BSR set to: 0
 13815  000370  C0AA  F02E         	movff	printf@fval,___fttol@f1
 13816  000374  C0AB  F02F         	movff	printf@fval+1,___fttol@f1+1
 13817  000378  C0AC  F030         	movff	printf@fval+2,___fttol@f1+2
 13818  00037C  EC8E  F019         	call	___fttol	;wreg free
 13819  000380  502E               	movf	?___fttol,w,c
 13820  000382  102F               	iorwf	?___fttol+1,w,c
 13821  000384  1030               	iorwf	?___fttol+2,w,c
 13822  000386  1031               	iorwf	?___fttol+3,w,c
 13823  000388  A4D8               	btfss	status,2,c
 13824  00038A  D069               	goto	l8967
 13825  00038C  0100               	movlb	0	; () banked
 13826  00038E  BFA3               	btfsc	(printf@exp+1)& (0+255),7,b
 13827  000390  D066               	goto	l8967
 13828  000392  0100               	movlb	0	; () banked
 13829  000394  51A3               	movf	(printf@exp+1)& (0+255),w,b
 13830  000396  E107               	bnz	l8953
 13831  000398  0E02               	movlw	2
 13832  00039A  0100               	movlb	0	; () banked
 13833  00039C  5DA2               	subwf	printf@exp& (0+255),w,b
 13834  00039E  B0D8               	btfsc	status,0,c
 13835  0003A0  D002               	goto	l8953
 13836  0003A2  D05D               	goto	l8967
 13837  0003A4  D000               	goto	l8953
 13838  0003A6                     l8953:
 13839                           
 13840                           ; BSR set to: 0
 13841                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13842  0003A6  C09C  F011         	movff	printf@tmpval,___ftge@ff1
 13843  0003AA  C09D  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13844  0003AE  C09E  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13845  0003B2  0E70               	movlw	112
 13846  0003B4  6E14               	movwf	___ftge@ff2,c
 13847  0003B6  0E89               	movlw	137
 13848  0003B8  6E15               	movwf	___ftge@ff2+1,c
 13849  0003BA  0E40               	movlw	64
 13850  0003BC  6E16               	movwf	___ftge@ff2+2,c
 13851  0003BE  ECAC  F01D         	call	___ftge	;wreg free
 13852  0003C2  B0D8               	btfsc	status,0,c
 13853  0003C4  D003               	goto	l8957
 13854                           
 13855                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13856  0003C6  0100               	movlb	0	; () banked
 13857  0003C8  0EF7               	movlw	247
 13858  0003CA  D002               	goto	L9
 13859  0003CC                     l8957:
 13860                           
 13861                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13862  0003CC  0100               	movlb	0	; () banked
 13863  0003CE  0EF8               	movlw	248
 13864  0003D0                     L9:
 13865  0003D0  27A2               	addwf	printf@exp& (0+255),f,b
 13866  0003D2  0EFF               	movlw	255
 13867  0003D4  23A3               	addwfc	(printf@exp+1)& (0+255),f,b
 13868  0003D6  D000               	goto	l8959
 13869  0003D8                     l8959:
 13870                           
 13871                           ; BSR set to: 0
 13872                           ;doprnt.c: 1124: }
 13873                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13874  0003D8  0100               	movlb	0	; () banked
 13875  0003DA  51A2               	movf	printf@exp& (0+255),w,b
 13876  0003DC  EC91  F009         	call	_scale
 13877  0003E0  C043  F09C         	movff	?_scale,printf@tmpval
 13878  0003E4  C044  F09D         	movff	?_scale+1,printf@tmpval+1
 13879  0003E8  C045  F09E         	movff	?_scale+2,printf@tmpval+2
 13880                           
 13881                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13882  0003EC  D017               	goto	l8963
 13883  0003EE  C0AA  F011         	movff	printf@fval,__div_to_l_@f1
 13884  0003F2  C0AB  F012         	movff	printf@fval+1,__div_to_l_@f1+1
 13885  0003F6  C0AC  F013         	movff	printf@fval+2,__div_to_l_@f1+2
 13886  0003FA  C09C  F014         	movff	printf@tmpval,__div_to_l_@f2
 13887  0003FE  C09D  F015         	movff	printf@tmpval+1,__div_to_l_@f2+1
 13888  000402  C09E  F016         	movff	printf@tmpval+2,__div_to_l_@f2+2
 13889  000406  EC9F  F017         	call	__div_to_l_	;wreg free
 13890  00040A  C011  F0A4         	movff	?__div_to_l_,printf@val
 13891  00040E  C012  F0A5         	movff	?__div_to_l_+1,printf@val+1
 13892  000412  C013  F0A6         	movff	?__div_to_l_+2,printf@val+2
 13893  000416  C014  F0A7         	movff	?__div_to_l_+3,printf@val+3
 13894  00041A  D017               	goto	l8965
 13895  00041C                     l8963:
 13896  00041C  C0AA  F011         	movff	printf@fval,__tdiv_to_l_@f1
 13897  000420  C0AB  F012         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 13898  000424  C0AC  F013         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 13899  000428  C09C  F014         	movff	printf@tmpval,__tdiv_to_l_@f2
 13900  00042C  C09D  F015         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 13901  000430  C09E  F016         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 13902  000434  EC17  F017         	call	__tdiv_to_l_	;wreg free
 13903  000438  C011  F0A4         	movff	?__tdiv_to_l_,printf@val
 13904  00043C  C012  F0A5         	movff	?__tdiv_to_l_+1,printf@val+1
 13905  000440  C013  F0A6         	movff	?__tdiv_to_l_+2,printf@val+2
 13906  000444  C014  F0A7         	movff	?__tdiv_to_l_+3,printf@val+3
 13907  000448  D000               	goto	l8965
 13908  00044A                     l8965:
 13909                           
 13910                           ;doprnt.c: 1129: fval = 0.0;
 13911  00044A  0E00               	movlw	0
 13912  00044C  0100               	movlb	0	; () banked
 13913  00044E  6FAA               	movwf	printf@fval& (0+255),b
 13914  000450  0E00               	movlw	0
 13915  000452  0100               	movlb	0	; () banked
 13916  000454  6FAB               	movwf	(printf@fval+1)& (0+255),b
 13917  000456  0E00               	movlw	0
 13918  000458  0100               	movlb	0	; () banked
 13919  00045A  6FAC               	movwf	(printf@fval+2)& (0+255),b
 13920                           
 13921                           ;doprnt.c: 1130: } else {
 13922  00045C  D034               	goto	l8971
 13923  00045E                     l8967:
 13924                           
 13925                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13926  00045E  C0AA  F02E         	movff	printf@fval,___fttol@f1
 13927  000462  C0AB  F02F         	movff	printf@fval+1,___fttol@f1+1
 13928  000466  C0AC  F030         	movff	printf@fval+2,___fttol@f1+2
 13929  00046A  EC8E  F019         	call	___fttol	;wreg free
 13930  00046E  C02E  F0A4         	movff	?___fttol,printf@val
 13931  000472  C02F  F0A5         	movff	?___fttol+1,printf@val+1
 13932  000476  C030  F0A6         	movff	?___fttol+2,printf@val+2
 13933  00047A  C031  F0A7         	movff	?___fttol+3,printf@val+3
 13934                           
 13935                           ;doprnt.c: 1132: fval -= (double)val;
 13936  00047E  C0AA  F059         	movff	printf@fval,___ftsub@f1
 13937  000482  C0AB  F05A         	movff	printf@fval+1,___ftsub@f1+1
 13938  000486  C0AC  F05B         	movff	printf@fval+2,___ftsub@f1+2
 13939  00048A  C0A4  F019         	movff	printf@val,___lltoft@c
 13940  00048E  C0A5  F01A         	movff	printf@val+1,___lltoft@c+1
 13941  000492  C0A6  F01B         	movff	printf@val+2,___lltoft@c+2
 13942  000496  C0A7  F01C         	movff	printf@val+3,___lltoft@c+3
 13943  00049A  ECE1  F020         	call	___lltoft	;wreg free
 13944  00049E  C019  F05C         	movff	?___lltoft,___ftsub@f2
 13945  0004A2  C01A  F05D         	movff	?___lltoft+1,___ftsub@f2+1
 13946  0004A6  C01B  F05E         	movff	?___lltoft+2,___ftsub@f2+2
 13947  0004AA  EC53  F022         	call	___ftsub	;wreg free
 13948  0004AE  C059  F0AA         	movff	?___ftsub,printf@fval
 13949  0004B2  C05A  F0AB         	movff	?___ftsub+1,printf@fval+1
 13950  0004B6  C05B  F0AC         	movff	?___ftsub+2,printf@fval+2
 13951                           
 13952                           ;doprnt.c: 1133: exp = 0;
 13953  0004BA  0E00               	movlw	0
 13954  0004BC  0100               	movlb	0	; () banked
 13955  0004BE  6FA3               	movwf	(printf@exp+1)& (0+255),b
 13956  0004C0  0E00               	movlw	0
 13957  0004C2  6FA2               	movwf	printf@exp& (0+255),b
 13958  0004C4  D000               	goto	l8971
 13959  0004C6                     l8971:
 13960                           
 13961                           ; BSR set to: 0
 13962                           ;doprnt.c: 1134: }
 13963                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13964  0004C6  0E01               	movlw	1
 13965  0004C8  0100               	movlb	0	; () banked
 13966  0004CA  6FAD               	movwf	printf@c& (0+255),b
 13967  0004CC                     l8973:
 13968                           
 13969                           ; BSR set to: 0
 13970  0004CC  0E0A               	movlw	10
 13971  0004CE  0100               	movlb	0	; () banked
 13972  0004D0  19AD               	xorwf	printf@c& (0+255),w,b
 13973  0004D2  B4D8               	btfsc	status,2,c
 13974  0004D4  D022               	goto	l8985
 13975  0004D6  D001               	goto	l8977
 13976                           
 13977                           ; BSR set to: 0
 13978  0004D8  D020               	goto	l8985
 13979  0004DA                     l8977:
 13980                           
 13981                           ; BSR set to: 0
 13982                           ;doprnt.c: 1137: if(val < dpowers[c])
 13983  0004DA  0100               	movlb	0	; () banked
 13984  0004DC  51AD               	movf	printf@c& (0+255),w,b
 13985  0004DE  0D04               	mullw	4
 13986  0004E0  0E9C               	movlw	low _dpowers
 13987  0004E2  24F3               	addwf	prodl,w,c
 13988  0004E4  6EF6               	movwf	tblptrl,c
 13989  0004E6  0EFD               	movlw	high _dpowers
 13990  0004E8  20F4               	addwfc	prodh,w,c
 13991  0004EA  6EF7               	movwf	tblptrh,c
 13992  0004EC                     	if	0	;There are less than 3 active tblptr bytes
 13993  0004EC                     	endif
 13994  0004EC  0009               	tblrd		*+
 13995  0004EE  50F5               	movf	tablat,w,c
 13996  0004F0  0100               	movlb	0	; () banked
 13997  0004F2  5DA4               	subwf	printf@val& (0+255),w,b
 13998  0004F4  0009               	tblrd		*+
 13999  0004F6  50F5               	movf	tablat,w,c
 14000  0004F8  0100               	movlb	0	; () banked
 14001  0004FA  59A5               	subwfb	(printf@val+1)& (0+255),w,b
 14002  0004FC  0009               	tblrd		*+
 14003  0004FE  50F5               	movf	tablat,w,c
 14004  000500  0100               	movlb	0	; () banked
 14005  000502  59A6               	subwfb	(printf@val+2)& (0+255),w,b
 14006  000504  0009               	tblrd		*+
 14007  000506  50F5               	movf	tablat,w,c
 14008  000508  0100               	movlb	0	; () banked
 14009  00050A  59A7               	subwfb	(printf@val+3)& (0+255),w,b
 14010  00050C  A0D8               	btfss	status,0,c
 14011  00050E  D005               	goto	l8985
 14012  000510  D001               	goto	l8981
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;doprnt.c: 1138: break;
 14016  000512  D003               	goto	l8985
 14017  000514                     l8981:
 14018                           
 14019                           ; BSR set to: 0
 14020  000514  0100               	movlb	0	; () banked
 14021  000516  2BAD               	incf	printf@c& (0+255),f,b
 14022  000518  D7D9               	goto	l8973
 14023  00051A                     l8985:
 14024                           
 14025                           ; BSR set to: 0
 14026                           ;doprnt.c: 1142: width -= prec + c + exp;
 14027  00051A  C0AD  F08E         	movff	printf@c,??_printf
 14028  00051E  0100               	movlb	0	; () banked
 14029  000520  6B8F               	clrf	(??_printf+1)& (0+255),b
 14030  000522  BF8E               	btfsc	??_printf& (0+255),7,b
 14031  000524  078F               	decf	(??_printf+1)& (0+255),f,b
 14032  000526  0100               	movlb	0	; () banked
 14033  000528  519A               	movf	printf@prec& (0+255),w,b
 14034  00052A  0100               	movlb	0	; () banked
 14035  00052C  278E               	addwf	??_printf& (0+255),f,b
 14036  00052E  0100               	movlb	0	; () banked
 14037  000530  519B               	movf	(printf@prec+1)& (0+255),w,b
 14038  000532  0100               	movlb	0	; () banked
 14039  000534  238F               	addwfc	(??_printf+1)& (0+255),f,b
 14040  000536  0100               	movlb	0	; () banked
 14041  000538  51A2               	movf	printf@exp& (0+255),w,b
 14042  00053A  0100               	movlb	0	; () banked
 14043  00053C  278E               	addwf	??_printf& (0+255),f,b
 14044  00053E  0100               	movlb	0	; () banked
 14045  000540  51A3               	movf	(printf@exp+1)& (0+255),w,b
 14046  000542  0100               	movlb	0	; () banked
 14047  000544  238F               	addwfc	(??_printf+1)& (0+255),f,b
 14048  000546  0100               	movlb	0	; () banked
 14049  000548  518E               	movf	??_printf& (0+255),w,b
 14050  00054A  0100               	movlb	0	; () banked
 14051  00054C  5FA0               	subwf	printf@width& (0+255),f,b
 14052  00054E  0100               	movlb	0	; () banked
 14053  000550  518F               	movf	(??_printf+1)& (0+255),w,b
 14054  000552  0100               	movlb	0	; () banked
 14055  000554  5BA1               	subwfb	(printf@width+1)& (0+255),f,b
 14056                           
 14057                           ;doprnt.c: 1143: if(
 14058                           ;doprnt.c: 1147: prec)
 14059  000556  0100               	movlb	0	; () banked
 14060  000558  519A               	movf	printf@prec& (0+255),w,b
 14061  00055A  0100               	movlb	0	; () banked
 14062  00055C  119B               	iorwf	(printf@prec+1)& (0+255),w,b
 14063  00055E  B4D8               	btfsc	status,2,c
 14064  000560  D005               	goto	l8989
 14065                           
 14066                           ; BSR set to: 0
 14067                           ;doprnt.c: 1148: width--;
 14068  000562  0100               	movlb	0	; () banked
 14069  000564  07A0               	decf	printf@width& (0+255),f,b
 14070  000566  A0D8               	btfss	status,0,c
 14071  000568  07A1               	decf	(printf@width+1)& (0+255),f,b
 14072  00056A  D000               	goto	l8989
 14073  00056C                     l8989:
 14074                           
 14075                           ; BSR set to: 0
 14076                           ;doprnt.c: 1149: if(flag & 0x03)
 14077  00056C  0E03               	movlw	3
 14078  00056E  0100               	movlb	0	; () banked
 14079  000570  15A8               	andwf	printf@flag& (0+255),w,b
 14080  000572  0100               	movlb	0	; () banked
 14081  000574  6F8E               	movwf	??_printf& (0+255),b
 14082  000576  0E00               	movlw	0
 14083  000578  0100               	movlb	0	; () banked
 14084  00057A  15A9               	andwf	(printf@flag+1)& (0+255),w,b
 14085  00057C  0100               	movlb	0	; () banked
 14086  00057E  6F8F               	movwf	(??_printf+1)& (0+255),b
 14087  000580  0100               	movlb	0	; () banked
 14088  000582  518E               	movf	??_printf& (0+255),w,b
 14089  000584  0100               	movlb	0	; () banked
 14090  000586  118F               	iorwf	(??_printf+1)& (0+255),w,b
 14091  000588  B4D8               	btfsc	status,2,c
 14092  00058A  D005               	goto	l8993
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;doprnt.c: 1150: width--;
 14096  00058C  0100               	movlb	0	; () banked
 14097  00058E  07A0               	decf	printf@width& (0+255),f,b
 14098  000590  A0D8               	btfss	status,0,c
 14099  000592  07A1               	decf	(printf@width+1)& (0+255),f,b
 14100  000594  D000               	goto	l8993
 14101  000596                     l8993:
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;doprnt.c: 1153: if(flag & 0x04) {
 14105  000596  0100               	movlb	0	; () banked
 14106  000598  A5A8               	btfss	printf@flag& (0+255),2,b
 14107  00059A  D031               	goto	l9009
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;doprnt.c: 1157: if(flag & 0x03)
 14111  00059C  0E03               	movlw	3
 14112  00059E  0100               	movlb	0	; () banked
 14113  0005A0  15A8               	andwf	printf@flag& (0+255),w,b
 14114  0005A2  0100               	movlb	0	; () banked
 14115  0005A4  6F8E               	movwf	??_printf& (0+255),b
 14116  0005A6  0E00               	movlw	0
 14117  0005A8  0100               	movlb	0	; () banked
 14118  0005AA  15A9               	andwf	(printf@flag+1)& (0+255),w,b
 14119  0005AC  0100               	movlb	0	; () banked
 14120  0005AE  6F8F               	movwf	(??_printf+1)& (0+255),b
 14121  0005B0  0100               	movlb	0	; () banked
 14122  0005B2  518E               	movf	??_printf& (0+255),w,b
 14123  0005B4  0100               	movlb	0	; () banked
 14124  0005B6  118F               	iorwf	(??_printf+1)& (0+255),w,b
 14125  0005B8  B4D8               	btfsc	status,2,c
 14126  0005BA  D00C               	goto	l9003
 14127                           
 14128                           ; BSR set to: 0
 14129                           ;doprnt.c: 1159: (putch('-') );
 14130  0005BC  0E2D               	movlw	45
 14131  0005BE  ECF0  F025         	call	_putch
 14132                           
 14133                           ;doprnt.c: 1168: while(width > 0) {
 14134  0005C2  D008               	goto	l9003
 14135  0005C4                     l8999:
 14136                           
 14137                           ;doprnt.c: 1169: (putch('0') );
 14138  0005C4  0E30               	movlw	48
 14139  0005C6  ECF0  F025         	call	_putch
 14140                           
 14141                           ;doprnt.c: 1170: width--;
 14142  0005CA  0100               	movlb	0	; () banked
 14143  0005CC  07A0               	decf	printf@width& (0+255),f,b
 14144  0005CE  A0D8               	btfss	status,0,c
 14145  0005D0  07A1               	decf	(printf@width+1)& (0+255),f,b
 14146  0005D2  D000               	goto	l9003
 14147  0005D4                     l9003:
 14148  0005D4  0100               	movlb	0	; () banked
 14149  0005D6  BFA1               	btfsc	(printf@width+1)& (0+255),7,b
 14150  0005D8  D077               	goto	l9021
 14151  0005DA  0100               	movlb	0	; () banked
 14152  0005DC  51A1               	movf	(printf@width+1)& (0+255),w,b
 14153  0005DE  E1F2               	bnz	l8999
 14154  0005E0  0100               	movlb	0	; () banked
 14155  0005E2  05A0               	decf	printf@width& (0+255),w,b
 14156  0005E4  A0D8               	btfss	status,0,c
 14157  0005E6  D070               	goto	l9021
 14158  0005E8  D7ED               	goto	l8999
 14159                           
 14160                           ; BSR set to: 0
 14161                           ;doprnt.c: 1171: }
 14162                           ;doprnt.c: 1173: } else
 14163  0005EA  D06E               	goto	l9021
 14164                           
 14165                           ; BSR set to: 0
 14166                           ;doprnt.c: 1175: {
 14167                           ;doprnt.c: 1180: while(width > 0) {
 14168  0005EC  D008               	goto	l9009
 14169  0005EE                     l9005:
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;doprnt.c: 1181: (putch(' ') );
 14173  0005EE  0E20               	movlw	32
 14174  0005F0  ECF0  F025         	call	_putch
 14175                           
 14176                           ;doprnt.c: 1182: width--;
 14177  0005F4  0100               	movlb	0	; () banked
 14178  0005F6  07A0               	decf	printf@width& (0+255),f,b
 14179  0005F8  A0D8               	btfss	status,0,c
 14180  0005FA  07A1               	decf	(printf@width+1)& (0+255),f,b
 14181  0005FC  D000               	goto	l9009
 14182  0005FE                     l9009:
 14183                           
 14184                           ; BSR set to: 0
 14185  0005FE  0100               	movlb	0	; () banked
 14186  000600  BFA1               	btfsc	(printf@width+1)& (0+255),7,b
 14187  000602  D007               	goto	l9011
 14188  000604  0100               	movlb	0	; () banked
 14189  000606  51A1               	movf	(printf@width+1)& (0+255),w,b
 14190  000608  E1F2               	bnz	l9005
 14191  00060A  0100               	movlb	0	; () banked
 14192  00060C  05A0               	decf	printf@width& (0+255),w,b
 14193  00060E  B0D8               	btfsc	status,0,c
 14194  000610  D7EE               	goto	l9005
 14195  000612                     l9011:
 14196                           
 14197                           ; BSR set to: 0
 14198                           ;doprnt.c: 1183: }
 14199                           ;doprnt.c: 1188: if(flag & 0x03)
 14200  000612  0E03               	movlw	3
 14201  000614  0100               	movlb	0	; () banked
 14202  000616  15A8               	andwf	printf@flag& (0+255),w,b
 14203  000618  0100               	movlb	0	; () banked
 14204  00061A  6F8E               	movwf	??_printf& (0+255),b
 14205  00061C  0E00               	movlw	0
 14206  00061E  0100               	movlb	0	; () banked
 14207  000620  15A9               	andwf	(printf@flag+1)& (0+255),w,b
 14208  000622  0100               	movlb	0	; () banked
 14209  000624  6F8F               	movwf	(??_printf+1)& (0+255),b
 14210  000626  0100               	movlb	0	; () banked
 14211  000628  518E               	movf	??_printf& (0+255),w,b
 14212  00062A  0100               	movlb	0	; () banked
 14213  00062C  118F               	iorwf	(??_printf+1)& (0+255),w,b
 14214  00062E  B4D8               	btfsc	status,2,c
 14215  000630  D04B               	goto	l9021
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;doprnt.c: 1190: (putch('-') );
 14219  000632  0E2D               	movlw	45
 14220  000634  ECF0  F025         	call	_putch
 14221                           
 14222                           ;doprnt.c: 1195: }
 14223                           ;doprnt.c: 1196: while(c--) {
 14224  000638  D047               	goto	l9021
 14225  00063A                     l9015:
 14226                           
 14227                           ;doprnt.c: 1200: {
 14228                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 14229  00063A  C0A4  F011         	movff	printf@val,___lldiv@dividend
 14230  00063E  C0A5  F012         	movff	printf@val+1,___lldiv@dividend+1
 14231  000642  C0A6  F013         	movff	printf@val+2,___lldiv@dividend+2
 14232  000646  C0A7  F014         	movff	printf@val+3,___lldiv@dividend+3
 14233  00064A  0100               	movlb	0	; () banked
 14234  00064C  51AD               	movf	printf@c& (0+255),w,b
 14235  00064E  0D04               	mullw	4
 14236  000650  0E9C               	movlw	low _dpowers
 14237  000652  24F3               	addwf	prodl,w,c
 14238  000654  6EF6               	movwf	tblptrl,c
 14239  000656  0EFD               	movlw	high _dpowers
 14240  000658  20F4               	addwfc	prodh,w,c
 14241  00065A  6EF7               	movwf	tblptrh,c
 14242  00065C                     	if	0	;There are less than 3 active tblptr bytes
 14243  00065C                     	endif
 14244  00065C  0009               	tblrd		*+
 14245  00065E  CFF5 F015          	movff	tablat,___lldiv@divisor
 14246  000662  0009               	tblrd		*+
 14247  000664  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14248  000668  0009               	tblrd		*+
 14249  00066A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14250  00066E  000A               	tblrd		*-
 14251  000670  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14252  000674  EC3F  F01E         	call	___lldiv	;wreg free
 14253  000678  C011  F09C         	movff	?___lldiv,printf@tmpval
 14254  00067C  C012  F09D         	movff	?___lldiv+1,printf@tmpval+1
 14255  000680  C013  F09E         	movff	?___lldiv+2,printf@tmpval+2
 14256  000684  C014  F09F         	movff	?___lldiv+3,printf@tmpval+3
 14257                           
 14258                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14259  000688  C09C  F01E         	movff	printf@tmpval,___llmod@dividend
 14260  00068C  C09D  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14261  000690  C09E  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14262  000694  C09F  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14263  000698  0E0A               	movlw	10
 14264  00069A  6E22               	movwf	___llmod@divisor,c
 14265  00069C  0E00               	movlw	0
 14266  00069E  6E23               	movwf	___llmod@divisor+1,c
 14267  0006A0  0E00               	movlw	0
 14268  0006A2  6E24               	movwf	___llmod@divisor+2,c
 14269  0006A4  0E00               	movlw	0
 14270  0006A6  6E25               	movwf	___llmod@divisor+3,c
 14271  0006A8  ECD1  F01F         	call	___llmod	;wreg free
 14272  0006AC  C01E  F09C         	movff	?___llmod,printf@tmpval
 14273  0006B0  C01F  F09D         	movff	?___llmod+1,printf@tmpval+1
 14274  0006B4  C020  F09E         	movff	?___llmod+2,printf@tmpval+2
 14275  0006B8  C021  F09F         	movff	?___llmod+3,printf@tmpval+3
 14276                           
 14277                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14278  0006BC  0100               	movlb	0	; () banked
 14279  0006BE  519C               	movf	printf@tmpval& (0+255),w,b
 14280  0006C0  0F30               	addlw	48
 14281  0006C2  ECF0  F025         	call	_putch
 14282  0006C6  D000               	goto	l9021
 14283  0006C8                     l9021:
 14284  0006C8  0100               	movlb	0	; () banked
 14285  0006CA  07AD               	decf	printf@c& (0+255),f,b
 14286  0006CC  0100               	movlb	0	; () banked
 14287  0006CE  29AD               	incf	printf@c& (0+255),w,b
 14288  0006D0  B4D8               	btfsc	status,2,c
 14289  0006D2  D00A               	goto	l9027
 14290  0006D4  D7B2               	goto	l9015
 14291                           
 14292                           ; BSR set to: 0
 14293                           ;doprnt.c: 1204: }
 14294                           ;doprnt.c: 1206: }
 14295                           ;doprnt.c: 1207: while(exp > 0) {
 14296  0006D6  D008               	goto	l9027
 14297  0006D8                     l9023:
 14298                           
 14299                           ; BSR set to: 0
 14300                           ;doprnt.c: 1208: (putch('0') );
 14301  0006D8  0E30               	movlw	48
 14302  0006DA  ECF0  F025         	call	_putch
 14303                           
 14304                           ;doprnt.c: 1209: exp--;
 14305  0006DE  0100               	movlb	0	; () banked
 14306  0006E0  07A2               	decf	printf@exp& (0+255),f,b
 14307  0006E2  A0D8               	btfss	status,0,c
 14308  0006E4  07A3               	decf	(printf@exp+1)& (0+255),f,b
 14309  0006E6  D000               	goto	l9027
 14310  0006E8                     l9027:
 14311                           
 14312                           ; BSR set to: 0
 14313  0006E8  0100               	movlb	0	; () banked
 14314  0006EA  BFA3               	btfsc	(printf@exp+1)& (0+255),7,b
 14315  0006EC  D007               	goto	l9029
 14316  0006EE  0100               	movlb	0	; () banked
 14317  0006F0  51A3               	movf	(printf@exp+1)& (0+255),w,b
 14318  0006F2  E1F2               	bnz	l9023
 14319  0006F4  0100               	movlb	0	; () banked
 14320  0006F6  05A2               	decf	printf@exp& (0+255),w,b
 14321  0006F8  B0D8               	btfsc	status,0,c
 14322  0006FA  D7EE               	goto	l9023
 14323  0006FC                     l9029:
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;doprnt.c: 1210: }
 14327                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14328  0006FC  0100               	movlb	0	; () banked
 14329  0006FE  BF9B               	btfsc	(printf@prec+1)& (0+255),7,b
 14330  000700  D00C               	goto	l1400
 14331  000702  0100               	movlb	0	; () banked
 14332  000704  519B               	movf	(printf@prec+1)& (0+255),w,b
 14333  000706  E105               	bnz	u7790
 14334  000708  0E09               	movlw	9
 14335  00070A  0100               	movlb	0	; () banked
 14336  00070C  5D9A               	subwf	printf@prec& (0+255),w,b
 14337  00070E  A0D8               	btfss	status,0,c
 14338  000710  D004               	goto	l1400
 14339  000712                     u7790:
 14340                           
 14341                           ; BSR set to: 0
 14342                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 14343  000712  0E08               	movlw	8
 14344  000714  0100               	movlb	0	; () banked
 14345  000716  6FAD               	movwf	printf@c& (0+255),b
 14346  000718  D003               	goto	l9033
 14347  00071A                     l1400:
 14348                           
 14349                           ; BSR set to: 0
 14350                           ;doprnt.c: 1213: else
 14351                           ;doprnt.c: 1214: c = prec;
 14352  00071A  C09A  F0AD         	movff	printf@prec,printf@c
 14353  00071E  D000               	goto	l9033
 14354  000720                     l9033:
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;doprnt.c: 1215: prec -= c;
 14358  000720  0100               	movlb	0	; () banked
 14359  000722  51AD               	movf	printf@c& (0+255),w,b
 14360  000724  0100               	movlb	0	; () banked
 14361  000726  5F9A               	subwf	printf@prec& (0+255),f,b
 14362  000728  0E00               	movlw	0
 14363  00072A  0100               	movlb	0	; () banked
 14364  00072C  BFAD               	btfsc	printf@c& (0+255),7,b
 14365  00072E  0EFF               	movlw	255
 14366  000730  0100               	movlb	0	; () banked
 14367  000732  5B9B               	subwfb	(printf@prec+1)& (0+255),f,b
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;doprnt.c: 1219: if(c)
 14371  000734  0100               	movlb	0	; () banked
 14372  000736  51AD               	movf	printf@c& (0+255),w,b
 14373  000738  0100               	movlb	0	; () banked
 14374  00073A  B4D8               	btfsc	status,2,c
 14375  00073C  D004               	goto	l9039
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;doprnt.c: 1221: (putch('.') );
 14379  00073E  0E2E               	movlw	46
 14380  000740  ECF0  F025         	call	_putch
 14381  000744  D000               	goto	l9039
 14382  000746                     l9039:
 14383                           
 14384                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14385  000746  0100               	movlb	0	; () banked
 14386  000748  51AD               	movf	printf@c& (0+255),w,b
 14387  00074A  EC91  F009         	call	_scale
 14388  00074E  C043  F094         	movff	?_scale,_printf$3007
 14389  000752  C044  F095         	movff	?_scale+1,_printf$3007+1
 14390  000756  C045  F096         	movff	?_scale+2,_printf$3007+2
 14391                           
 14392                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14393  00075A  C0AA  F022         	movff	printf@fval,___ftmul@f2
 14394  00075E  C0AB  F023         	movff	printf@fval+1,___ftmul@f2+1
 14395  000762  C0AC  F024         	movff	printf@fval+2,___ftmul@f2+2
 14396  000766  C094  F01F         	movff	_printf$3007,___ftmul@f1
 14397  00076A  C095  F020         	movff	_printf$3007+1,___ftmul@f1+1
 14398  00076E  C096  F021         	movff	_printf$3007+2,___ftmul@f1+2
 14399  000772  EC24  F018         	call	___ftmul	;wreg free
 14400  000776  C01F  F02E         	movff	?___ftmul,___fttol@f1
 14401  00077A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
 14402  00077E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
 14403  000782  EC8E  F019         	call	___fttol	;wreg free
 14404  000786  C02E  F0A4         	movff	?___fttol,printf@val
 14405  00078A  C02F  F0A5         	movff	?___fttol+1,printf@val+1
 14406  00078E  C030  F0A6         	movff	?___fttol+2,printf@val+2
 14407  000792  C031  F0A7         	movff	?___fttol+3,printf@val+3
 14408                           
 14409                           ;doprnt.c: 1228: while(c--) {
 14410  000796  D06E               	goto	l9049
 14411  000798                     l9043:
 14412                           
 14413                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 14414  000798  C0A4  F011         	movff	printf@val,___lldiv@dividend
 14415  00079C  C0A5  F012         	movff	printf@val+1,___lldiv@dividend+1
 14416  0007A0  C0A6  F013         	movff	printf@val+2,___lldiv@dividend+2
 14417  0007A4  C0A7  F014         	movff	printf@val+3,___lldiv@dividend+3
 14418  0007A8  0100               	movlb	0	; () banked
 14419  0007AA  51AD               	movf	printf@c& (0+255),w,b
 14420  0007AC  0D04               	mullw	4
 14421  0007AE  0E9C               	movlw	low _dpowers
 14422  0007B0  24F3               	addwf	prodl,w,c
 14423  0007B2  6EF6               	movwf	tblptrl,c
 14424  0007B4  0EFD               	movlw	high _dpowers
 14425  0007B6  20F4               	addwfc	prodh,w,c
 14426  0007B8  6EF7               	movwf	tblptrh,c
 14427  0007BA                     	if	0	;There are less than 3 active tblptr bytes
 14428  0007BA                     	endif
 14429  0007BA  0009               	tblrd		*+
 14430  0007BC  CFF5 F015          	movff	tablat,___lldiv@divisor
 14431  0007C0  0009               	tblrd		*+
 14432  0007C2  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14433  0007C6  0009               	tblrd		*+
 14434  0007C8  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14435  0007CC  000A               	tblrd		*-
 14436  0007CE  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14437  0007D2  EC3F  F01E         	call	___lldiv	;wreg free
 14438  0007D6  C011  F09C         	movff	?___lldiv,printf@tmpval
 14439  0007DA  C012  F09D         	movff	?___lldiv+1,printf@tmpval+1
 14440  0007DE  C013  F09E         	movff	?___lldiv+2,printf@tmpval+2
 14441  0007E2  C014  F09F         	movff	?___lldiv+3,printf@tmpval+3
 14442                           
 14443                           ;doprnt.c: 1230: tmpval.vd %= 10;
 14444  0007E6  C09C  F01E         	movff	printf@tmpval,___llmod@dividend
 14445  0007EA  C09D  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14446  0007EE  C09E  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14447  0007F2  C09F  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14448  0007F6  0E0A               	movlw	10
 14449  0007F8  6E22               	movwf	___llmod@divisor,c
 14450  0007FA  0E00               	movlw	0
 14451  0007FC  6E23               	movwf	___llmod@divisor+1,c
 14452  0007FE  0E00               	movlw	0
 14453  000800  6E24               	movwf	___llmod@divisor+2,c
 14454  000802  0E00               	movlw	0
 14455  000804  6E25               	movwf	___llmod@divisor+3,c
 14456  000806  ECD1  F01F         	call	___llmod	;wreg free
 14457  00080A  C01E  F09C         	movff	?___llmod,printf@tmpval
 14458  00080E  C01F  F09D         	movff	?___llmod+1,printf@tmpval+1
 14459  000812  C020  F09E         	movff	?___llmod+2,printf@tmpval+2
 14460  000816  C021  F09F         	movff	?___llmod+3,printf@tmpval+3
 14461                           
 14462                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 14463  00081A  0100               	movlb	0	; () banked
 14464  00081C  519C               	movf	printf@tmpval& (0+255),w,b
 14465  00081E  0F30               	addlw	48
 14466  000820  ECF0  F025         	call	_putch
 14467                           
 14468                           ;doprnt.c: 1232: val %= dpowers[c];
 14469  000824  C0A4  F01E         	movff	printf@val,___llmod@dividend
 14470  000828  C0A5  F01F         	movff	printf@val+1,___llmod@dividend+1
 14471  00082C  C0A6  F020         	movff	printf@val+2,___llmod@dividend+2
 14472  000830  C0A7  F021         	movff	printf@val+3,___llmod@dividend+3
 14473  000834  0100               	movlb	0	; () banked
 14474  000836  51AD               	movf	printf@c& (0+255),w,b
 14475  000838  0D04               	mullw	4
 14476  00083A  0E9C               	movlw	low _dpowers
 14477  00083C  24F3               	addwf	prodl,w,c
 14478  00083E  6EF6               	movwf	tblptrl,c
 14479  000840  0EFD               	movlw	high _dpowers
 14480  000842  20F4               	addwfc	prodh,w,c
 14481  000844  6EF7               	movwf	tblptrh,c
 14482  000846                     	if	0	;There are less than 3 active tblptr bytes
 14483  000846                     	endif
 14484  000846  0009               	tblrd		*+
 14485  000848  CFF5 F022          	movff	tablat,___llmod@divisor
 14486  00084C  0009               	tblrd		*+
 14487  00084E  CFF5 F023          	movff	tablat,___llmod@divisor+1
 14488  000852  0009               	tblrd		*+
 14489  000854  CFF5 F024          	movff	tablat,___llmod@divisor+2
 14490  000858  000A               	tblrd		*-
 14491  00085A  CFF5 F025          	movff	tablat,___llmod@divisor+3
 14492  00085E  ECD1  F01F         	call	___llmod	;wreg free
 14493  000862  C01E  F0A4         	movff	?___llmod,printf@val
 14494  000866  C01F  F0A5         	movff	?___llmod+1,printf@val+1
 14495  00086A  C020  F0A6         	movff	?___llmod+2,printf@val+2
 14496  00086E  C021  F0A7         	movff	?___llmod+3,printf@val+3
 14497  000872  D000               	goto	l9049
 14498  000874                     l9049:
 14499  000874  0100               	movlb	0	; () banked
 14500  000876  07AD               	decf	printf@c& (0+255),f,b
 14501  000878  0100               	movlb	0	; () banked
 14502  00087A  29AD               	incf	printf@c& (0+255),w,b
 14503  00087C  B4D8               	btfsc	status,2,c
 14504  00087E  D00A               	goto	l9055
 14505  000880  D78B               	goto	l9043
 14506                           
 14507                           ; BSR set to: 0
 14508                           ;doprnt.c: 1233: }
 14509                           ;doprnt.c: 1235: while(prec) {
 14510  000882  D008               	goto	l9055
 14511  000884                     l9051:
 14512                           
 14513                           ; BSR set to: 0
 14514                           ;doprnt.c: 1236: (putch('0') );
 14515  000884  0E30               	movlw	48
 14516  000886  ECF0  F025         	call	_putch
 14517                           
 14518                           ;doprnt.c: 1237: prec--;
 14519  00088A  0100               	movlb	0	; () banked
 14520  00088C  079A               	decf	printf@prec& (0+255),f,b
 14521  00088E  A0D8               	btfss	status,0,c
 14522  000890  079B               	decf	(printf@prec+1)& (0+255),f,b
 14523  000892  D000               	goto	l9055
 14524  000894                     l9055:
 14525                           
 14526                           ; BSR set to: 0
 14527  000894  0100               	movlb	0	; () banked
 14528  000896  519A               	movf	printf@prec& (0+255),w,b
 14529  000898  0100               	movlb	0	; () banked
 14530  00089A  119B               	iorwf	(printf@prec+1)& (0+255),w,b
 14531  00089C  B4D8               	btfsc	status,2,c
 14532  00089E  D1CE               	goto	l9153
 14533  0008A0  D7F1               	goto	l9051
 14534                           
 14535                           ; BSR set to: 0
 14536                           ;doprnt.c: 1238: }
 14537                           ;doprnt.c: 1245: continue;
 14538  0008A2  D1CC               	goto	l9153
 14539  0008A4                     l1361:
 14540                           
 14541                           ; BSR set to: 0
 14542                           ;doprnt.c: 1246: }
 14543                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14544  0008A4  0100               	movlb	0	; () banked
 14545  0008A6  BFA8               	btfsc	printf@flag& (0+255),7,b
 14546  0008A8  D023               	goto	l9067
 14547                           
 14548                           ; BSR set to: 0
 14549                           ;doprnt.c: 1253: {
 14550                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 14551  0008AA  C098  FFD9         	movff	printf@ap,fsr2l
 14552  0008AE  C099  FFDA         	movff	printf@ap+1,fsr2h
 14553  0008B2  CFDE F0A4          	movff	postinc2,printf@val
 14554  0008B6  CFDD F0A5          	movff	postdec2,printf@val+1
 14555  0008BA  0100               	movlb	0	; () banked
 14556  0008BC  0E00               	movlw	0
 14557  0008BE  BFA5               	btfsc	(printf@val+1)& (0+255),7,b
 14558  0008C0  0EFF               	movlw	-1
 14559  0008C2  6FA6               	movwf	(printf@val+2)& (0+255),b
 14560  0008C4  6FA7               	movwf	(printf@val+3)& (0+255),b
 14561                           
 14562                           ; BSR set to: 0
 14563  0008C6  0E02               	movlw	2
 14564  0008C8  0100               	movlb	0	; () banked
 14565  0008CA  2798               	addwf	printf@ap& (0+255),f,b
 14566  0008CC  0E00               	movlw	0
 14567  0008CE  2399               	addwfc	(printf@ap+1)& (0+255),f,b
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;doprnt.c: 1261: if((long)val < 0) {
 14571  0008D0  0100               	movlb	0	; () banked
 14572  0008D2  AFA7               	btfss	(printf@val+3)& (0+255),7,b
 14573  0008D4  D078               	goto	l9101
 14574                           
 14575                           ; BSR set to: 0
 14576                           ;doprnt.c: 1262: flag |= 0x03;
 14577  0008D6  0E03               	movlw	3
 14578  0008D8  0100               	movlb	0	; () banked
 14579  0008DA  13A8               	iorwf	printf@flag& (0+255),f,b
 14580                           
 14581                           ; BSR set to: 0
 14582                           ;doprnt.c: 1263: val = -val;
 14583  0008DC  0100               	movlb	0	; () banked
 14584  0008DE  1FA7               	comf	(printf@val+3)& (0+255),f,b
 14585  0008E0  1FA6               	comf	(printf@val+2)& (0+255),f,b
 14586  0008E2  1FA5               	comf	(printf@val+1)& (0+255),f,b
 14587  0008E4  6DA4               	negf	printf@val& (0+255),b
 14588  0008E6  0E00               	movlw	0
 14589  0008E8  23A5               	addwfc	(printf@val+1)& (0+255),f,b
 14590  0008EA  23A6               	addwfc	(printf@val+2)& (0+255),f,b
 14591  0008EC  23A7               	addwfc	(printf@val+3)& (0+255),f,b
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;doprnt.c: 1264: }
 14595                           ;doprnt.c: 1266: }
 14596  0008EE  D06B               	goto	l9101
 14597  0008F0                     l9067:
 14598                           
 14599                           ; BSR set to: 0
 14600                           ;doprnt.c: 1268: else
 14601                           ;doprnt.c: 1273: {
 14602                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14603  0008F0  C098  FFD9         	movff	printf@ap,fsr2l
 14604  0008F4  C099  FFDA         	movff	printf@ap+1,fsr2h
 14605  0008F8  CFDE F08E          	movff	postinc2,??_printf
 14606  0008FC  CFDD F08F          	movff	postdec2,??_printf+1
 14607  000900  C08E  F0A4         	movff	??_printf,printf@val
 14608  000904  C08F  F0A5         	movff	??_printf+1,printf@val+1
 14609  000908  0100               	movlb	0	; () banked
 14610  00090A  6BA6               	clrf	(printf@val+2)& (0+255),b
 14611  00090C  6BA7               	clrf	(printf@val+3)& (0+255),b
 14612                           
 14613                           ; BSR set to: 0
 14614  00090E  0E02               	movlw	2
 14615  000910  0100               	movlb	0	; () banked
 14616  000912  2798               	addwf	printf@ap& (0+255),f,b
 14617  000914  0E00               	movlw	0
 14618  000916  2399               	addwfc	(printf@ap+1)& (0+255),f,b
 14619                           
 14620                           ; BSR set to: 0
 14621                           ;doprnt.c: 1287: }
 14622                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14623  000918  D056               	goto	l9101
 14624  00091A                     l9071:
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14628  00091A  0E01               	movlw	1
 14629  00091C  0100               	movlb	0	; () banked
 14630  00091E  6FAD               	movwf	printf@c& (0+255),b
 14631  000920                     l9073:
 14632                           
 14633                           ; BSR set to: 0
 14634  000920  0E0A               	movlw	10
 14635  000922  0100               	movlb	0	; () banked
 14636  000924  19AD               	xorwf	printf@c& (0+255),w,b
 14637  000926  B4D8               	btfsc	status,2,c
 14638  000928  D058               	goto	l9103
 14639  00092A  D001               	goto	l9077
 14640                           
 14641                           ; BSR set to: 0
 14642  00092C  D056               	goto	l9103
 14643  00092E                     l9077:
 14644                           
 14645                           ; BSR set to: 0
 14646                           ;doprnt.c: 1306: if(val < dpowers[c])
 14647  00092E  0100               	movlb	0	; () banked
 14648  000930  51AD               	movf	printf@c& (0+255),w,b
 14649  000932  0D04               	mullw	4
 14650  000934  0E9C               	movlw	low _dpowers
 14651  000936  24F3               	addwf	prodl,w,c
 14652  000938  6EF6               	movwf	tblptrl,c
 14653  00093A  0EFD               	movlw	high _dpowers
 14654  00093C  20F4               	addwfc	prodh,w,c
 14655  00093E  6EF7               	movwf	tblptrh,c
 14656  000940                     	if	0	;There are less than 3 active tblptr bytes
 14657  000940                     	endif
 14658  000940  0009               	tblrd		*+
 14659  000942  50F5               	movf	tablat,w,c
 14660  000944  0100               	movlb	0	; () banked
 14661  000946  5DA4               	subwf	printf@val& (0+255),w,b
 14662  000948  0009               	tblrd		*+
 14663  00094A  50F5               	movf	tablat,w,c
 14664  00094C  0100               	movlb	0	; () banked
 14665  00094E  59A5               	subwfb	(printf@val+1)& (0+255),w,b
 14666  000950  0009               	tblrd		*+
 14667  000952  50F5               	movf	tablat,w,c
 14668  000954  0100               	movlb	0	; () banked
 14669  000956  59A6               	subwfb	(printf@val+2)& (0+255),w,b
 14670  000958  0009               	tblrd		*+
 14671  00095A  50F5               	movf	tablat,w,c
 14672  00095C  0100               	movlb	0	; () banked
 14673  00095E  59A7               	subwfb	(printf@val+3)& (0+255),w,b
 14674  000960  A0D8               	btfss	status,0,c
 14675  000962  D03B               	goto	l9103
 14676  000964  D001               	goto	l9081
 14677                           
 14678                           ; BSR set to: 0
 14679                           ;doprnt.c: 1307: break;
 14680  000966  D039               	goto	l9103
 14681  000968                     l9081:
 14682                           
 14683                           ; BSR set to: 0
 14684  000968  0100               	movlb	0	; () banked
 14685  00096A  2BAD               	incf	printf@c& (0+255),f,b
 14686  00096C  D7D9               	goto	l9073
 14687                           
 14688                           ; BSR set to: 0
 14689                           ;doprnt.c: 1309: break;
 14690                           
 14691                           ; BSR set to: 0
 14692  00096E  D035               	goto	l9103
 14693  000970                     l9085:
 14694                           
 14695                           ; BSR set to: 0
 14696                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14697  000970  0E01               	movlw	1
 14698  000972  0100               	movlb	0	; () banked
 14699  000974  6FAD               	movwf	printf@c& (0+255),b
 14700  000976                     l9087:
 14701                           
 14702                           ; BSR set to: 0
 14703  000976  0E08               	movlw	8
 14704  000978  0100               	movlb	0	; () banked
 14705  00097A  19AD               	xorwf	printf@c& (0+255),w,b
 14706  00097C  B4D8               	btfsc	status,2,c
 14707  00097E  D02D               	goto	l9103
 14708  000980  D001               	goto	l9091
 14709                           
 14710                           ; BSR set to: 0
 14711  000982  D02B               	goto	l9103
 14712  000984                     l9091:
 14713                           
 14714                           ; BSR set to: 0
 14715                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14716  000984  0100               	movlb	0	; () banked
 14717  000986  51AD               	movf	printf@c& (0+255),w,b
 14718  000988  0D04               	mullw	4
 14719  00098A  0E12               	movlw	low _hexpowers
 14720  00098C  24F3               	addwf	prodl,w,c
 14721  00098E  6EF6               	movwf	tblptrl,c
 14722  000990  0EFE               	movlw	high _hexpowers
 14723  000992  20F4               	addwfc	prodh,w,c
 14724  000994  6EF7               	movwf	tblptrh,c
 14725  000996                     	if	0	;There are less than 3 active tblptr bytes
 14726  000996                     	endif
 14727  000996  0009               	tblrd		*+
 14728  000998  50F5               	movf	tablat,w,c
 14729  00099A  0100               	movlb	0	; () banked
 14730  00099C  5DA4               	subwf	printf@val& (0+255),w,b
 14731  00099E  0009               	tblrd		*+
 14732  0009A0  50F5               	movf	tablat,w,c
 14733  0009A2  0100               	movlb	0	; () banked
 14734  0009A4  59A5               	subwfb	(printf@val+1)& (0+255),w,b
 14735  0009A6  0009               	tblrd		*+
 14736  0009A8  50F5               	movf	tablat,w,c
 14737  0009AA  0100               	movlb	0	; () banked
 14738  0009AC  59A6               	subwfb	(printf@val+2)& (0+255),w,b
 14739  0009AE  0009               	tblrd		*+
 14740  0009B0  50F5               	movf	tablat,w,c
 14741  0009B2  0100               	movlb	0	; () banked
 14742  0009B4  59A7               	subwfb	(printf@val+3)& (0+255),w,b
 14743  0009B6  A0D8               	btfss	status,0,c
 14744  0009B8  D010               	goto	l9103
 14745  0009BA  D001               	goto	l9095
 14746                           
 14747                           ; BSR set to: 0
 14748                           ;doprnt.c: 1318: break;
 14749  0009BC  D00E               	goto	l9103
 14750  0009BE                     l9095:
 14751                           
 14752                           ; BSR set to: 0
 14753  0009BE  0100               	movlb	0	; () banked
 14754  0009C0  2BAD               	incf	printf@c& (0+255),f,b
 14755  0009C2  D7D9               	goto	l9087
 14756                           
 14757                           ; BSR set to: 0
 14758                           ;doprnt.c: 1336: }
 14759                           
 14760                           ; BSR set to: 0
 14761                           ;doprnt.c: 1320: break;
 14762                           
 14763                           ; BSR set to: 0
 14764  0009C4  D00A               	goto	l9103
 14765  0009C6                     l9101:
 14766                           
 14767                           ; BSR set to: 0
 14768  0009C6  0100               	movlb	0	; () banked
 14769  0009C8  51A8               	movf	printf@flag& (0+255),w,b
 14770  0009CA  0B80               	andlw	128
 14771                           
 14772                           ; Switch size 1, requested type "space"
 14773                           ; Number of cases is 2, Range of values is 0 to 128
 14774                           ; switch strategies available:
 14775                           ; Name         Instructions Cycles
 14776                           ; simple_byte            7     4 (average)
 14777                           ;	Chosen strategy is simple_byte
 14778  0009CC  0A00               	xorlw	0	; case 0
 14779  0009CE  B4D8               	btfsc	status,2,c
 14780  0009D0  D7A4               	goto	l9071
 14781  0009D2  0A80               	xorlw	128	; case 128
 14782  0009D4  B4D8               	btfsc	status,2,c
 14783  0009D6  D7CC               	goto	l9085
 14784  0009D8  D000               	goto	l9103
 14785  0009DA                     l9103:
 14786                           
 14787                           ; BSR set to: 0
 14788                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14789  0009DA  0100               	movlb	0	; () banked
 14790  0009DC  51A0               	movf	printf@width& (0+255),w,b
 14791  0009DE  0100               	movlb	0	; () banked
 14792  0009E0  11A1               	iorwf	(printf@width+1)& (0+255),w,b
 14793  0009E2  B4D8               	btfsc	status,2,c
 14794  0009E4  D015               	goto	l9109
 14795                           
 14796                           ; BSR set to: 0
 14797  0009E6  0E03               	movlw	3
 14798  0009E8  0100               	movlb	0	; () banked
 14799  0009EA  15A8               	andwf	printf@flag& (0+255),w,b
 14800  0009EC  0100               	movlb	0	; () banked
 14801  0009EE  6F8E               	movwf	??_printf& (0+255),b
 14802  0009F0  0E00               	movlw	0
 14803  0009F2  0100               	movlb	0	; () banked
 14804  0009F4  15A9               	andwf	(printf@flag+1)& (0+255),w,b
 14805  0009F6  0100               	movlb	0	; () banked
 14806  0009F8  6F8F               	movwf	(??_printf+1)& (0+255),b
 14807  0009FA  0100               	movlb	0	; () banked
 14808  0009FC  518E               	movf	??_printf& (0+255),w,b
 14809  0009FE  0100               	movlb	0	; () banked
 14810  000A00  118F               	iorwf	(??_printf+1)& (0+255),w,b
 14811  000A02  B4D8               	btfsc	status,2,c
 14812  000A04  D005               	goto	l9109
 14813                           
 14814                           ; BSR set to: 0
 14815                           ;doprnt.c: 1346: width--;
 14816  000A06  0100               	movlb	0	; () banked
 14817  000A08  07A0               	decf	printf@width& (0+255),f,b
 14818  000A0A  A0D8               	btfss	status,0,c
 14819  000A0C  07A1               	decf	(printf@width+1)& (0+255),f,b
 14820  000A0E  D000               	goto	l9109
 14821  000A10                     l9109:
 14822                           
 14823                           ; BSR set to: 0
 14824                           ;doprnt.c: 1381: if(width > c)
 14825  000A10  0E80               	movlw	128
 14826  000A12  0100               	movlb	0	; () banked
 14827  000A14  BFAD               	btfsc	printf@c& (0+255),7,b
 14828  000A16  0E7F               	movlw	127
 14829  000A18  0100               	movlb	0	; () banked
 14830  000A1A  6F8E               	movwf	??_printf& (0+255),b
 14831  000A1C  0100               	movlb	0	; () banked
 14832  000A1E  51A0               	movf	printf@width& (0+255),w,b
 14833  000A20  0100               	movlb	0	; () banked
 14834  000A22  5DAD               	subwf	printf@c& (0+255),w,b
 14835  000A24  0100               	movlb	0	; () banked
 14836  000A26  51A1               	movf	(printf@width+1)& (0+255),w,b
 14837  000A28  0A80               	xorlw	128
 14838  000A2A  0100               	movlb	0	; () banked
 14839  000A2C  598E               	subwfb	??_printf& (0+255),w,b
 14840  000A2E  B0D8               	btfsc	status,0,c
 14841  000A30  D00B               	goto	l9113
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;doprnt.c: 1382: width -= c;
 14845  000A32  0100               	movlb	0	; () banked
 14846  000A34  51AD               	movf	printf@c& (0+255),w,b
 14847  000A36  0100               	movlb	0	; () banked
 14848  000A38  5FA0               	subwf	printf@width& (0+255),f,b
 14849  000A3A  0E00               	movlw	0
 14850  000A3C  0100               	movlb	0	; () banked
 14851  000A3E  BFAD               	btfsc	printf@c& (0+255),7,b
 14852  000A40  0EFF               	movlw	255
 14853  000A42  0100               	movlb	0	; () banked
 14854  000A44  5BA1               	subwfb	(printf@width+1)& (0+255),f,b
 14855  000A46  D006               	goto	l9115
 14856  000A48                     l9113:
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;doprnt.c: 1383: else
 14860                           ;doprnt.c: 1384: width = 0;
 14861  000A48  0E00               	movlw	0
 14862  000A4A  0100               	movlb	0	; () banked
 14863  000A4C  6FA1               	movwf	(printf@width+1)& (0+255),b
 14864  000A4E  0E00               	movlw	0
 14865  000A50  6FA0               	movwf	printf@width& (0+255),b
 14866  000A52  D000               	goto	l9115
 14867  000A54                     l9115:
 14868                           
 14869                           ; BSR set to: 0
 14870                           ;doprnt.c: 1387: if(flag & 0x04) {
 14871  000A54  0100               	movlb	0	; () banked
 14872  000A56  A5A8               	btfss	printf@flag& (0+255),2,b
 14873  000A58  D029               	goto	l9127
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;doprnt.c: 1392: if(flag & 0x03)
 14877  000A5A  0E03               	movlw	3
 14878  000A5C  0100               	movlb	0	; () banked
 14879  000A5E  15A8               	andwf	printf@flag& (0+255),w,b
 14880  000A60  0100               	movlb	0	; () banked
 14881  000A62  6F8E               	movwf	??_printf& (0+255),b
 14882  000A64  0E00               	movlw	0
 14883  000A66  0100               	movlb	0	; () banked
 14884  000A68  15A9               	andwf	(printf@flag+1)& (0+255),w,b
 14885  000A6A  0100               	movlb	0	; () banked
 14886  000A6C  6F8F               	movwf	(??_printf+1)& (0+255),b
 14887  000A6E  0100               	movlb	0	; () banked
 14888  000A70  518E               	movf	??_printf& (0+255),w,b
 14889  000A72  0100               	movlb	0	; () banked
 14890  000A74  118F               	iorwf	(??_printf+1)& (0+255),w,b
 14891  000A76  B4D8               	btfsc	status,2,c
 14892  000A78  D004               	goto	l9121
 14893                           
 14894                           ; BSR set to: 0
 14895                           ;doprnt.c: 1393: (putch('-') );
 14896  000A7A  0E2D               	movlw	45
 14897  000A7C  ECF0  F025         	call	_putch
 14898  000A80  D000               	goto	l9121
 14899  000A82                     l9121:
 14900                           
 14901                           ;doprnt.c: 1415: if(width)
 14902  000A82  0100               	movlb	0	; () banked
 14903  000A84  51A0               	movf	printf@width& (0+255),w,b
 14904  000A86  0100               	movlb	0	; () banked
 14905  000A88  11A1               	iorwf	(printf@width+1)& (0+255),w,b
 14906  000A8A  B4D8               	btfsc	status,2,c
 14907  000A8C  D038               	goto	l9137
 14908  000A8E                     l9123:
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;doprnt.c: 1417: (putch('0') );
 14912  000A8E  0E30               	movlw	48
 14913  000A90  ECF0  F025         	call	_putch
 14914                           
 14915                           ;doprnt.c: 1418: while(--width);
 14916  000A94  0100               	movlb	0	; () banked
 14917  000A96  07A0               	decf	printf@width& (0+255),f,b
 14918  000A98  A0D8               	btfss	status,0,c
 14919  000A9A  07A1               	decf	(printf@width+1)& (0+255),f,b
 14920  000A9C  0100               	movlb	0	; () banked
 14921  000A9E  51A0               	movf	printf@width& (0+255),w,b
 14922  000AA0  0100               	movlb	0	; () banked
 14923  000AA2  11A1               	iorwf	(printf@width+1)& (0+255),w,b
 14924  000AA4  B4D8               	btfsc	status,2,c
 14925  000AA6  D02B               	goto	l9137
 14926  000AA8  D7F2               	goto	l9123
 14927                           
 14928                           ; BSR set to: 0
 14929                           ;doprnt.c: 1420: } else
 14930                           
 14931                           ; BSR set to: 0
 14932  000AAA  D029               	goto	l9137
 14933  000AAC                     l9127:
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;doprnt.c: 1422: {
 14937                           ;doprnt.c: 1424: if(width
 14938                           ;doprnt.c: 1428: )
 14939  000AAC  0100               	movlb	0	; () banked
 14940  000AAE  51A0               	movf	printf@width& (0+255),w,b
 14941  000AB0  0100               	movlb	0	; () banked
 14942  000AB2  11A1               	iorwf	(printf@width+1)& (0+255),w,b
 14943  000AB4  B4D8               	btfsc	status,2,c
 14944  000AB6  D00F               	goto	l9133
 14945  000AB8                     l9129:
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;doprnt.c: 1430: (putch(' ') );
 14949  000AB8  0E20               	movlw	32
 14950  000ABA  ECF0  F025         	call	_putch
 14951                           
 14952                           ;doprnt.c: 1431: while(--width);
 14953  000ABE  0100               	movlb	0	; () banked
 14954  000AC0  07A0               	decf	printf@width& (0+255),f,b
 14955  000AC2  A0D8               	btfss	status,0,c
 14956  000AC4  07A1               	decf	(printf@width+1)& (0+255),f,b
 14957  000AC6  0100               	movlb	0	; () banked
 14958  000AC8  51A0               	movf	printf@width& (0+255),w,b
 14959  000ACA  0100               	movlb	0	; () banked
 14960  000ACC  11A1               	iorwf	(printf@width+1)& (0+255),w,b
 14961  000ACE  B4D8               	btfsc	status,2,c
 14962  000AD0  D002               	goto	l9133
 14963  000AD2  D7F2               	goto	l9129
 14964                           
 14965                           ; BSR set to: 0
 14966  000AD4  D000               	goto	l9133
 14967  000AD6                     l9133:
 14968                           
 14969                           ; BSR set to: 0
 14970                           ;doprnt.c: 1438: if(flag & 0x03)
 14971  000AD6  0E03               	movlw	3
 14972  000AD8  0100               	movlb	0	; () banked
 14973  000ADA  15A8               	andwf	printf@flag& (0+255),w,b
 14974  000ADC  0100               	movlb	0	; () banked
 14975  000ADE  6F8E               	movwf	??_printf& (0+255),b
 14976  000AE0  0E00               	movlw	0
 14977  000AE2  0100               	movlb	0	; () banked
 14978  000AE4  15A9               	andwf	(printf@flag+1)& (0+255),w,b
 14979  000AE6  0100               	movlb	0	; () banked
 14980  000AE8  6F8F               	movwf	(??_printf+1)& (0+255),b
 14981  000AEA  0100               	movlb	0	; () banked
 14982  000AEC  518E               	movf	??_printf& (0+255),w,b
 14983  000AEE  0100               	movlb	0	; () banked
 14984  000AF0  118F               	iorwf	(??_printf+1)& (0+255),w,b
 14985  000AF2  B4D8               	btfsc	status,2,c
 14986  000AF4  D004               	goto	l9137
 14987                           
 14988                           ; BSR set to: 0
 14989                           ;doprnt.c: 1439: (putch('-') );
 14990  000AF6  0E2D               	movlw	45
 14991  000AF8  ECF0  F025         	call	_putch
 14992  000AFC  D000               	goto	l9137
 14993  000AFE                     l9137:
 14994                           
 14995                           ;doprnt.c: 1469: }
 14996                           ;doprnt.c: 1472: prec = c;
 14997  000AFE  0100               	movlb	0	; () banked
 14998  000B00  51AD               	movf	printf@c& (0+255),w,b
 14999  000B02  0100               	movlb	0	; () banked
 15000  000B04  6F9A               	movwf	printf@prec& (0+255),b
 15001  000B06  6B9B               	clrf	(printf@prec+1)& (0+255),b
 15002  000B08  BF9A               	btfsc	printf@prec& (0+255),7,b
 15003  000B0A  079B               	decf	(printf@prec+1)& (0+255),f,b
 15004                           
 15005                           ;doprnt.c: 1474: while(prec--) {
 15006  000B0C  D08A               	goto	l9151
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 15010  000B0E  D07A               	goto	l9147
 15011  000B10                     l9139:
 15012                           
 15013                           ; BSR set to: 0
 15014                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15015  000B10  C09A  F08E         	movff	printf@prec,??_printf
 15016  000B14  C09B  F08F         	movff	printf@prec+1,??_printf+1
 15017  000B18  0100               	movlb	0	; () banked
 15018  000B1A  90D8               	bcf	status,0,c
 15019  000B1C  378E               	rlcf	??_printf& (0+255),f,b
 15020  000B1E  378F               	rlcf	(??_printf+1)& (0+255),f,b
 15021  000B20  0100               	movlb	0	; () banked
 15022  000B22  90D8               	bcf	status,0,c
 15023  000B24  378E               	rlcf	??_printf& (0+255),f,b
 15024  000B26  378F               	rlcf	(??_printf+1)& (0+255),f,b
 15025  000B28  0E9C               	movlw	low _dpowers
 15026  000B2A  0100               	movlb	0	; () banked
 15027  000B2C  258E               	addwf	??_printf& (0+255),w,b
 15028  000B2E  6EF6               	movwf	tblptrl,c
 15029  000B30  0EFD               	movlw	high _dpowers
 15030  000B32  218F               	addwfc	(??_printf+1)& (0+255),w,b
 15031  000B34  6EF7               	movwf	tblptrh,c
 15032  000B36                     	if	0	;There are less than 3 active tblptr bytes
 15033  000B36                     	endif
 15034  000B36  0009               	tblrd		*+
 15035  000B38  CFF5 F015          	movff	tablat,___lldiv@divisor
 15036  000B3C  0009               	tblrd		*+
 15037  000B3E  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15038  000B42  0009               	tblrd		*+
 15039  000B44  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15040  000B48  000A               	tblrd		*-
 15041  000B4A  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15042  000B4E  C0A4  F011         	movff	printf@val,___lldiv@dividend
 15043  000B52  C0A5  F012         	movff	printf@val+1,___lldiv@dividend+1
 15044  000B56  C0A6  F013         	movff	printf@val+2,___lldiv@dividend+2
 15045  000B5A  C0A7  F014         	movff	printf@val+3,___lldiv@dividend+3
 15046  000B5E  EC3F  F01E         	call	___lldiv	;wreg free
 15047  000B62  C011  F01E         	movff	?___lldiv,___llmod@dividend
 15048  000B66  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
 15049  000B6A  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
 15050  000B6E  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
 15051  000B72  0E0A               	movlw	10
 15052  000B74  6E22               	movwf	___llmod@divisor,c
 15053  000B76  0E00               	movlw	0
 15054  000B78  6E23               	movwf	___llmod@divisor+1,c
 15055  000B7A  0E00               	movlw	0
 15056  000B7C  6E24               	movwf	___llmod@divisor+2,c
 15057  000B7E  0E00               	movlw	0
 15058  000B80  6E25               	movwf	___llmod@divisor+3,c
 15059  000B82  ECD1  F01F         	call	___llmod	;wreg free
 15060  000B86  501E               	movf	?___llmod,w,c
 15061  000B88  0F30               	addlw	48
 15062  000B8A  0100               	movlb	0	; () banked
 15063  000B8C  6FAD               	movwf	printf@c& (0+255),b
 15064                           
 15065                           ;doprnt.c: 1491: break;
 15066  000B8E  D044               	goto	l9149
 15067  000B90                     l9141:
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;doprnt.c: 1499: {
 15071                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15072  000B90  C0A4  F011         	movff	printf@val,___lldiv@dividend
 15073  000B94  C0A5  F012         	movff	printf@val+1,___lldiv@dividend+1
 15074  000B98  C0A6  F013         	movff	printf@val+2,___lldiv@dividend+2
 15075  000B9C  C0A7  F014         	movff	printf@val+3,___lldiv@dividend+3
 15076  000BA0  C09A  F08E         	movff	printf@prec,??_printf
 15077  000BA4  C09B  F08F         	movff	printf@prec+1,??_printf+1
 15078  000BA8  0100               	movlb	0	; () banked
 15079  000BAA  90D8               	bcf	status,0,c
 15080  000BAC  378E               	rlcf	??_printf& (0+255),f,b
 15081  000BAE  378F               	rlcf	(??_printf+1)& (0+255),f,b
 15082  000BB0  0100               	movlb	0	; () banked
 15083  000BB2  90D8               	bcf	status,0,c
 15084  000BB4  378E               	rlcf	??_printf& (0+255),f,b
 15085  000BB6  378F               	rlcf	(??_printf+1)& (0+255),f,b
 15086  000BB8  0E12               	movlw	low _hexpowers
 15087  000BBA  0100               	movlb	0	; () banked
 15088  000BBC  258E               	addwf	??_printf& (0+255),w,b
 15089  000BBE  6EF6               	movwf	tblptrl,c
 15090  000BC0  0EFE               	movlw	high _hexpowers
 15091  000BC2  218F               	addwfc	(??_printf+1)& (0+255),w,b
 15092  000BC4  6EF7               	movwf	tblptrh,c
 15093  000BC6                     	if	0	;There are less than 3 active tblptr bytes
 15094  000BC6                     	endif
 15095  000BC6  0009               	tblrd		*+
 15096  000BC8  CFF5 F015          	movff	tablat,___lldiv@divisor
 15097  000BCC  0009               	tblrd		*+
 15098  000BCE  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15099  000BD2  0009               	tblrd		*+
 15100  000BD4  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15101  000BD8  000A               	tblrd		*-
 15102  000BDA  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15103  000BDE  EC3F  F01E         	call	___lldiv	;wreg free
 15104  000BE2  5011               	movf	?___lldiv,w,c
 15105  000BE4  0B0F               	andlw	15
 15106  000BE6  0100               	movlb	0	; () banked
 15107  000BE8  6F97               	movwf	printf@idx& (0+255),b
 15108                           
 15109                           ; BSR set to: 0
 15110                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15111  000BEA  0100               	movlb	0	; () banked
 15112  000BEC  5197               	movf	printf@idx& (0+255),w,b
 15113  000BEE  0D01               	mullw	1
 15114  000BF0  0E5B               	movlw	low STR_47
 15115  000BF2  24F3               	addwf	prodl,w,c
 15116  000BF4  6EF6               	movwf	tblptrl,c
 15117  000BF6  0EFF               	movlw	high STR_47
 15118  000BF8  20F4               	addwfc	prodh,w,c
 15119  000BFA  6EF7               	movwf	tblptrh,c
 15120  000BFC                     	if	0	;There are less than 3 active tblptr bytes
 15121  000BFC                     	endif
 15122  000BFC  0008               	tblrd		*
 15123  000BFE  CFF5 F0AD          	movff	tablat,printf@c
 15124                           
 15125                           ; BSR set to: 0
 15126                           ;doprnt.c: 1523: }
 15127                           
 15128                           ;doprnt.c: 1508: }
 15129                           ;doprnt.c: 1510: break;
 15130  000C02  D00A               	goto	l9149
 15131  000C04                     l9147:
 15132                           
 15133                           ; BSR set to: 0
 15134  000C04  0100               	movlb	0	; () banked
 15135  000C06  51A8               	movf	printf@flag& (0+255),w,b
 15136  000C08  0B80               	andlw	128
 15137                           
 15138                           ; Switch size 1, requested type "space"
 15139                           ; Number of cases is 2, Range of values is 0 to 128
 15140                           ; switch strategies available:
 15141                           ; Name         Instructions Cycles
 15142                           ; simple_byte            7     4 (average)
 15143                           ;	Chosen strategy is simple_byte
 15144  000C0A  0A00               	xorlw	0	; case 0
 15145  000C0C  B4D8               	btfsc	status,2,c
 15146  000C0E  D780               	goto	l9139
 15147  000C10  0A80               	xorlw	128	; case 128
 15148  000C12  B4D8               	btfsc	status,2,c
 15149  000C14  D7BD               	goto	l9141
 15150  000C16  D000               	goto	l9149
 15151  000C18                     l9149:
 15152                           
 15153                           ; BSR set to: 0
 15154                           ;doprnt.c: 1524: (putch(c) );
 15155  000C18  0100               	movlb	0	; () banked
 15156  000C1A  51AD               	movf	printf@c& (0+255),w,b
 15157  000C1C  ECF0  F025         	call	_putch
 15158  000C20  D000               	goto	l9151
 15159  000C22                     l9151:
 15160  000C22  0100               	movlb	0	; () banked
 15161  000C24  079A               	decf	printf@prec& (0+255),f,b
 15162  000C26  A0D8               	btfss	status,0,c
 15163  000C28  079B               	decf	(printf@prec+1)& (0+255),f,b
 15164  000C2A  0100               	movlb	0	; () banked
 15165  000C2C  299A               	incf	printf@prec& (0+255),w,b
 15166  000C2E  E1EA               	bnz	l9147
 15167  000C30  0100               	movlb	0	; () banked
 15168  000C32  299B               	incf	(printf@prec+1)& (0+255),w,b
 15169  000C34  B4D8               	btfsc	status,2,c
 15170  000C36  D002               	goto	l9153
 15171  000C38  D7E5               	goto	l9147
 15172                           
 15173                           ; BSR set to: 0
 15174  000C3A  D000               	goto	l9153
 15175  000C3C                     l9153:
 15176  000C3C  C080  FFF6         	movff	printf@f,tblptrl
 15177  000C40  C081  FFF7         	movff	printf@f+1,tblptrh
 15178  000C44  0100               	movlb	0	; () banked
 15179  000C46  4B80               	infsnz	printf@f& (0+255),f,b
 15180  000C48  2B81               	incf	(printf@f+1)& (0+255),f,b
 15181  000C4A                     	if	0	;tblptru may be non-zero
 15182  000C4A                     	endif
 15183  000C4A                     	if	0	;tblptru may be non-zero
 15184  000C4A                     	endif
 15185  000C4A  0008               	tblrd		*
 15186  000C4C  CFF5 F0AD          	movff	tablat,printf@c
 15187  000C50  0100               	movlb	0	; () banked
 15188  000C52  51AD               	movf	printf@c& (0+255),w,b
 15189  000C54  B4D8               	btfsc	status,2,c
 15190  000C56  D003               	goto	l1443
 15191  000C58  EF16  F000         	goto	l8867
 15192                           
 15193                           ; BSR set to: 0
 15194  000C5C  D000               	goto	l1443
 15195  000C5E                     l1443:
 15196  000C5E  0012               	return		;funcret
 15197  000C60                     __end_of_printf:
 15198                           	opt stack 0
 15199                           tblptru	equ	0xFF8
 15200                           tblptrh	equ	0xFF7
 15201                           tblptrl	equ	0xFF6
 15202                           tablat	equ	0xFF5
 15203                           prodh	equ	0xFF4
 15204                           prodl	equ	0xFF3
 15205                           intcon	equ	0xFF2
 15206                           intcon2	equ	0xFF1
 15207                           intcon3	equ	0xFF0
 15208                           postinc0	equ	0xFEE
 15209                           wreg	equ	0xFE8
 15210                           postdec1	equ	0xFE5
 15211                           plusw1	equ	0xFE3
 15212                           fsr1l	equ	0xFE1
 15213                           indf2	equ	0xFDF
 15214                           postinc2	equ	0xFDE
 15215                           postdec2	equ	0xFDD
 15216                           plusw2	equ	0xFDB
 15217                           fsr2h	equ	0xFDA
 15218                           fsr2l	equ	0xFD9
 15219                           status	equ	0xFD8
 15220                           
 15221 ;; *************** function _scale *****************
 15222 ;; Defined at:
 15223 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15224 ;; Parameters:    Size  Location     Type
 15225 ;;  scl             1    wreg     char 
 15226 ;; Auto vars:     Size  Location     Type
 15227 ;;  scl             1   72[COMRAM] char 
 15228 ;; Return value:  Size  Location     Type
 15229 ;;                  3   66[COMRAM] char 
 15230 ;; Registers used:
 15231 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15237 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15238 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15240 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15241 ;;Total ram usage:        7 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:    4
 15244 ;; This function calls:
 15245 ;;		___awdiv
 15246 ;;		___awmod
 15247 ;;		___ftmul
 15248 ;;		___wmul
 15249 ;; This function is called by:
 15250 ;;		_printf
 15251 ;; This function uses a non-reentrant model
 15252 ;;
 15253                           
 15254                           	psect	text63
 15255  001322                     __ptext63:
 15256                           	opt stack 0
 15257  001322                     _scale:
 15258                           	opt stack 25
 15259                           
 15260                           ;incstack = 0
 15261                           ;scale@scl stored from wreg
 15262  001322  6E49               	movwf	scale@scl,c
 15263                           
 15264                           ;doprnt.c: 428: if(scl < 0) {
 15265  001324  AE49               	btfss	scale@scl,7,c
 15266  001326  D0EF               	goto	l8595
 15267                           
 15268                           ;doprnt.c: 429: scl = -scl;
 15269  001328  6C49               	negf	scale@scl,c
 15270                           
 15271                           ;doprnt.c: 430: if(scl>=110)
 15272  00132A  5049               	movf	scale@scl,w,c
 15273  00132C  0A80               	xorlw	128
 15274  00132E  0F12               	addlw	-238
 15275  001330  A0D8               	btfss	status,0,c
 15276  001332  D08D               	goto	l8585
 15277                           
 15278                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15279  001334  0E00               	movlw	0
 15280  001336  6E14               	movwf	___wmul@multiplicand+1,c
 15281  001338  0E03               	movlw	3
 15282  00133A  6E13               	movwf	___wmul@multiplicand,c
 15283  00133C  0E00               	movlw	0
 15284  00133E  6E1A               	movwf	___awdiv@divisor+1,c
 15285  001340  0E0A               	movlw	10
 15286  001342  6E19               	movwf	___awdiv@divisor,c
 15287  001344  0E00               	movlw	0
 15288  001346  6E40               	movwf	___awmod@divisor+1,c
 15289  001348  0E64               	movlw	100
 15290  00134A  6E3F               	movwf	___awmod@divisor,c
 15291  00134C  5049               	movf	scale@scl,w,c
 15292  00134E  6E3D               	movwf	___awmod@dividend,c
 15293  001350  6A3E               	clrf	___awmod@dividend+1,c
 15294  001352  BE3D               	btfsc	___awmod@dividend,7,c
 15295  001354  063E               	decf	___awmod@dividend+1,f,c
 15296  001356  EC90  F01F         	call	___awmod	;wreg free
 15297  00135A  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15298  00135E  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15299  001362  EC61  F01D         	call	___awdiv	;wreg free
 15300  001366  0E09               	movlw	9
 15301  001368  2417               	addwf	?___awdiv,w,c
 15302  00136A  6E11               	movwf	___wmul@multiplier,c
 15303  00136C  0E00               	movlw	0
 15304  00136E  2018               	addwfc	?___awdiv+1,w,c
 15305  001370  6E12               	movwf	___wmul@multiplier+1,c
 15306  001372  EC01  F024         	call	___wmul	;wreg free
 15307  001376  0EC4               	movlw	low __npowers_
 15308  001378  2411               	addwf	?___wmul,w,c
 15309  00137A  6EF6               	movwf	tblptrl,c
 15310  00137C  0EFD               	movlw	high __npowers_
 15311  00137E  2012               	addwfc	?___wmul+1,w,c
 15312  001380  6EF7               	movwf	tblptrh,c
 15313  001382                     	if	0	;There are less than 3 active tblptr bytes
 15314  001382                     	endif
 15315  001382  0009               	tblrd		*+
 15316  001384  CFF5 F022          	movff	tablat,___ftmul@f2
 15317  001388  0009               	tblrd		*+
 15318  00138A  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15319  00138E  000A               	tblrd		*-
 15320  001390  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15321  001394  0E00               	movlw	0
 15322  001396  6E1A               	movwf	___awdiv@divisor+1,c
 15323  001398  0E64               	movlw	100
 15324  00139A  6E19               	movwf	___awdiv@divisor,c
 15325  00139C  5049               	movf	scale@scl,w,c
 15326  00139E  6E17               	movwf	___awdiv@dividend,c
 15327  0013A0  6A18               	clrf	___awdiv@dividend+1,c
 15328  0013A2  BE17               	btfsc	___awdiv@dividend,7,c
 15329  0013A4  0618               	decf	___awdiv@dividend+1,f,c
 15330  0013A6  EC61  F01D         	call	___awdiv	;wreg free
 15331  0013AA  0E12               	movlw	18
 15332  0013AC  2417               	addwf	?___awdiv,w,c
 15333  0013AE  6E11               	movwf	___wmul@multiplier,c
 15334  0013B0  0E00               	movlw	0
 15335  0013B2  2018               	addwfc	?___awdiv+1,w,c
 15336  0013B4  6E12               	movwf	___wmul@multiplier+1,c
 15337  0013B6  0E00               	movlw	0
 15338  0013B8  6E14               	movwf	___wmul@multiplicand+1,c
 15339  0013BA  0E03               	movlw	3
 15340  0013BC  6E13               	movwf	___wmul@multiplicand,c
 15341  0013BE  EC01  F024         	call	___wmul	;wreg free
 15342  0013C2  0EC4               	movlw	low __npowers_
 15343  0013C4  2411               	addwf	?___wmul,w,c
 15344  0013C6  6EF6               	movwf	tblptrl,c
 15345  0013C8  0EFD               	movlw	high __npowers_
 15346  0013CA  2012               	addwfc	?___wmul+1,w,c
 15347  0013CC  6EF7               	movwf	tblptrh,c
 15348  0013CE                     	if	0	;There are less than 3 active tblptr bytes
 15349  0013CE                     	endif
 15350  0013CE  0009               	tblrd		*+
 15351  0013D0  CFF5 F01F          	movff	tablat,___ftmul@f1
 15352  0013D4  0009               	tblrd		*+
 15353  0013D6  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15354  0013DA  000A               	tblrd		*-
 15355  0013DC  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15356  0013E0  EC24  F018         	call	___ftmul	;wreg free
 15357  0013E4  C01F  F046         	movff	?___ftmul,_scale$3006
 15358  0013E8  C020  F047         	movff	?___ftmul+1,_scale$3006+1
 15359  0013EC  C021  F048         	movff	?___ftmul+2,_scale$3006+2
 15360                           
 15361                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15362  0013F0  C046  F01F         	movff	_scale$3006,___ftmul@f1
 15363  0013F4  C047  F020         	movff	_scale$3006+1,___ftmul@f1+1
 15364  0013F8  C048  F021         	movff	_scale$3006+2,___ftmul@f1+2
 15365  0013FC  0E00               	movlw	0
 15366  0013FE  6E14               	movwf	___wmul@multiplicand+1,c
 15367  001400  0E03               	movlw	3
 15368  001402  6E13               	movwf	___wmul@multiplicand,c
 15369  001404  0E00               	movlw	0
 15370  001406  6E40               	movwf	___awmod@divisor+1,c
 15371  001408  0E0A               	movlw	10
 15372  00140A  6E3F               	movwf	___awmod@divisor,c
 15373  00140C  5049               	movf	scale@scl,w,c
 15374  00140E  6E3D               	movwf	___awmod@dividend,c
 15375  001410  6A3E               	clrf	___awmod@dividend+1,c
 15376  001412  BE3D               	btfsc	___awmod@dividend,7,c
 15377  001414  063E               	decf	___awmod@dividend+1,f,c
 15378  001416  EC90  F01F         	call	___awmod	;wreg free
 15379  00141A  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15380  00141E  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15381  001422  EC01  F024         	call	___wmul	;wreg free
 15382  001426  0EC4               	movlw	low __npowers_
 15383  001428  2411               	addwf	?___wmul,w,c
 15384  00142A  6EF6               	movwf	tblptrl,c
 15385  00142C  0EFD               	movlw	high __npowers_
 15386  00142E  2012               	addwfc	?___wmul+1,w,c
 15387  001430  6EF7               	movwf	tblptrh,c
 15388  001432                     	if	0	;There are less than 3 active tblptr bytes
 15389  001432                     	endif
 15390  001432  0009               	tblrd		*+
 15391  001434  CFF5 F022          	movff	tablat,___ftmul@f2
 15392  001438  0009               	tblrd		*+
 15393  00143A  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15394  00143E  000A               	tblrd		*-
 15395  001440  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15396  001444  EC24  F018         	call	___ftmul	;wreg free
 15397  001448  D141               	goto	L13
 15398  00144A  D15A               	goto	l1332
 15399  00144C  D054               	goto	l8591
 15400  00144E                     l8585:
 15401                           
 15402                           ;doprnt.c: 432: else if(scl > 10)
 15403  00144E  5049               	movf	scale@scl,w,c
 15404  001450  0A80               	xorlw	128
 15405  001452  0F75               	addlw	-139
 15406  001454  A0D8               	btfss	status,0,c
 15407  001456  D04F               	goto	l8591
 15408                           
 15409                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 15410  001458  0E00               	movlw	0
 15411  00145A  6E1A               	movwf	___awdiv@divisor+1,c
 15412  00145C  0E0A               	movlw	10
 15413  00145E  6E19               	movwf	___awdiv@divisor,c
 15414  001460  5049               	movf	scale@scl,w,c
 15415  001462  6E17               	movwf	___awdiv@dividend,c
 15416  001464  6A18               	clrf	___awdiv@dividend+1,c
 15417  001466  BE17               	btfsc	___awdiv@dividend,7,c
 15418  001468  0618               	decf	___awdiv@dividend+1,f,c
 15419  00146A  EC61  F01D         	call	___awdiv	;wreg free
 15420  00146E  0E09               	movlw	9
 15421  001470  2417               	addwf	?___awdiv,w,c
 15422  001472  6E11               	movwf	___wmul@multiplier,c
 15423  001474  0E00               	movlw	0
 15424  001476  2018               	addwfc	?___awdiv+1,w,c
 15425  001478  6E12               	movwf	___wmul@multiplier+1,c
 15426  00147A  0E00               	movlw	0
 15427  00147C  6E14               	movwf	___wmul@multiplicand+1,c
 15428  00147E  0E03               	movlw	3
 15429  001480  6E13               	movwf	___wmul@multiplicand,c
 15430  001482  EC01  F024         	call	___wmul	;wreg free
 15431  001486  0EC4               	movlw	low __npowers_
 15432  001488  2411               	addwf	?___wmul,w,c
 15433  00148A  6EF6               	movwf	tblptrl,c
 15434  00148C  0EFD               	movlw	high __npowers_
 15435  00148E  2012               	addwfc	?___wmul+1,w,c
 15436  001490  6EF7               	movwf	tblptrh,c
 15437  001492                     	if	0	;There are less than 3 active tblptr bytes
 15438  001492                     	endif
 15439  001492  0009               	tblrd		*+
 15440  001494  CFF5 F01F          	movff	tablat,___ftmul@f1
 15441  001498  0009               	tblrd		*+
 15442  00149A  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15443  00149E  000A               	tblrd		*-
 15444  0014A0  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15445  0014A4  0E00               	movlw	0
 15446  0014A6  6E14               	movwf	___wmul@multiplicand+1,c
 15447  0014A8  0E03               	movlw	3
 15448  0014AA  6E13               	movwf	___wmul@multiplicand,c
 15449  0014AC  0E00               	movlw	0
 15450  0014AE  6E40               	movwf	___awmod@divisor+1,c
 15451  0014B0  0E0A               	movlw	10
 15452  0014B2  6E3F               	movwf	___awmod@divisor,c
 15453  0014B4  5049               	movf	scale@scl,w,c
 15454  0014B6  6E3D               	movwf	___awmod@dividend,c
 15455  0014B8  6A3E               	clrf	___awmod@dividend+1,c
 15456  0014BA  BE3D               	btfsc	___awmod@dividend,7,c
 15457  0014BC  063E               	decf	___awmod@dividend+1,f,c
 15458  0014BE  EC90  F01F         	call	___awmod	;wreg free
 15459  0014C2  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15460  0014C6  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15461  0014CA  EC01  F024         	call	___wmul	;wreg free
 15462  0014CE  0EC4               	movlw	low __npowers_
 15463  0014D0  2411               	addwf	?___wmul,w,c
 15464  0014D2  6EF6               	movwf	tblptrl,c
 15465  0014D4  0EFD               	movlw	high __npowers_
 15466  0014D6  2012               	addwfc	?___wmul+1,w,c
 15467  0014D8  6EF7               	movwf	tblptrh,c
 15468  0014DA                     	if	0	;There are less than 3 active tblptr bytes
 15469  0014DA                     	endif
 15470  0014DA  0009               	tblrd		*+
 15471  0014DC  CFF5 F022          	movff	tablat,___ftmul@f2
 15472  0014E0  0009               	tblrd		*+
 15473  0014E2  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15474  0014E6  000A               	tblrd		*-
 15475  0014E8  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15476  0014EC  EC24  F018         	call	___ftmul	;wreg free
 15477  0014F0  D0ED               	goto	L13
 15478  0014F2  D106               	goto	l1332
 15479  0014F4  D000               	goto	l8591
 15480  0014F6                     l8591:
 15481                           
 15482                           ;doprnt.c: 434: return _npowers_[scl];
 15483  0014F6  5049               	movf	scale@scl,w,c
 15484  0014F8  0D03               	mullw	3
 15485  0014FA  0EC4               	movlw	low __npowers_
 15486  0014FC  24F3               	addwf	prodl,w,c
 15487  0014FE  6EF6               	movwf	tblptrl,c
 15488  001500  0EFD               	movlw	high __npowers_
 15489  001502  D0F2               	goto	L12
 15490  001504  D0FD               	goto	l1332
 15491  001506                     l8595:
 15492                           
 15493                           ;doprnt.c: 435: }
 15494                           ;doprnt.c: 436: if(scl>=110)
 15495  001506  5049               	movf	scale@scl,w,c
 15496  001508  0A80               	xorlw	128
 15497  00150A  0F12               	addlw	-238
 15498  00150C  A0D8               	btfss	status,0,c
 15499  00150E  D08D               	goto	l8603
 15500                           
 15501                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15502  001510  0E00               	movlw	0
 15503  001512  6E14               	movwf	___wmul@multiplicand+1,c
 15504  001514  0E03               	movlw	3
 15505  001516  6E13               	movwf	___wmul@multiplicand,c
 15506  001518  0E00               	movlw	0
 15507  00151A  6E1A               	movwf	___awdiv@divisor+1,c
 15508  00151C  0E0A               	movlw	10
 15509  00151E  6E19               	movwf	___awdiv@divisor,c
 15510  001520  0E00               	movlw	0
 15511  001522  6E40               	movwf	___awmod@divisor+1,c
 15512  001524  0E64               	movlw	100
 15513  001526  6E3F               	movwf	___awmod@divisor,c
 15514  001528  5049               	movf	scale@scl,w,c
 15515  00152A  6E3D               	movwf	___awmod@dividend,c
 15516  00152C  6A3E               	clrf	___awmod@dividend+1,c
 15517  00152E  BE3D               	btfsc	___awmod@dividend,7,c
 15518  001530  063E               	decf	___awmod@dividend+1,f,c
 15519  001532  EC90  F01F         	call	___awmod	;wreg free
 15520  001536  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15521  00153A  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15522  00153E  EC61  F01D         	call	___awdiv	;wreg free
 15523  001542  0E09               	movlw	9
 15524  001544  2417               	addwf	?___awdiv,w,c
 15525  001546  6E11               	movwf	___wmul@multiplier,c
 15526  001548  0E00               	movlw	0
 15527  00154A  2018               	addwfc	?___awdiv+1,w,c
 15528  00154C  6E12               	movwf	___wmul@multiplier+1,c
 15529  00154E  EC01  F024         	call	___wmul	;wreg free
 15530  001552  0EEB               	movlw	low __powers_
 15531  001554  2411               	addwf	?___wmul,w,c
 15532  001556  6EF6               	movwf	tblptrl,c
 15533  001558  0EFD               	movlw	high __powers_
 15534  00155A  2012               	addwfc	?___wmul+1,w,c
 15535  00155C  6EF7               	movwf	tblptrh,c
 15536  00155E                     	if	0	;There are less than 3 active tblptr bytes
 15537  00155E                     	endif
 15538  00155E  0009               	tblrd		*+
 15539  001560  CFF5 F022          	movff	tablat,___ftmul@f2
 15540  001564  0009               	tblrd		*+
 15541  001566  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15542  00156A  000A               	tblrd		*-
 15543  00156C  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15544  001570  0E00               	movlw	0
 15545  001572  6E1A               	movwf	___awdiv@divisor+1,c
 15546  001574  0E64               	movlw	100
 15547  001576  6E19               	movwf	___awdiv@divisor,c
 15548  001578  5049               	movf	scale@scl,w,c
 15549  00157A  6E17               	movwf	___awdiv@dividend,c
 15550  00157C  6A18               	clrf	___awdiv@dividend+1,c
 15551  00157E  BE17               	btfsc	___awdiv@dividend,7,c
 15552  001580  0618               	decf	___awdiv@dividend+1,f,c
 15553  001582  EC61  F01D         	call	___awdiv	;wreg free
 15554  001586  0E12               	movlw	18
 15555  001588  2417               	addwf	?___awdiv,w,c
 15556  00158A  6E11               	movwf	___wmul@multiplier,c
 15557  00158C  0E00               	movlw	0
 15558  00158E  2018               	addwfc	?___awdiv+1,w,c
 15559  001590  6E12               	movwf	___wmul@multiplier+1,c
 15560  001592  0E00               	movlw	0
 15561  001594  6E14               	movwf	___wmul@multiplicand+1,c
 15562  001596  0E03               	movlw	3
 15563  001598  6E13               	movwf	___wmul@multiplicand,c
 15564  00159A  EC01  F024         	call	___wmul	;wreg free
 15565  00159E  0EEB               	movlw	low __powers_
 15566  0015A0  2411               	addwf	?___wmul,w,c
 15567  0015A2  6EF6               	movwf	tblptrl,c
 15568  0015A4  0EFD               	movlw	high __powers_
 15569  0015A6  2012               	addwfc	?___wmul+1,w,c
 15570  0015A8  6EF7               	movwf	tblptrh,c
 15571  0015AA                     	if	0	;There are less than 3 active tblptr bytes
 15572  0015AA                     	endif
 15573  0015AA  0009               	tblrd		*+
 15574  0015AC  CFF5 F01F          	movff	tablat,___ftmul@f1
 15575  0015B0  0009               	tblrd		*+
 15576  0015B2  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15577  0015B6  000A               	tblrd		*-
 15578  0015B8  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15579  0015BC  EC24  F018         	call	___ftmul	;wreg free
 15580  0015C0  C01F  F046         	movff	?___ftmul,_scale$3006
 15581  0015C4  C020  F047         	movff	?___ftmul+1,_scale$3006+1
 15582  0015C8  C021  F048         	movff	?___ftmul+2,_scale$3006+2
 15583                           
 15584                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15585  0015CC  C046  F01F         	movff	_scale$3006,___ftmul@f1
 15586  0015D0  C047  F020         	movff	_scale$3006+1,___ftmul@f1+1
 15587  0015D4  C048  F021         	movff	_scale$3006+2,___ftmul@f1+2
 15588  0015D8  0E00               	movlw	0
 15589  0015DA  6E14               	movwf	___wmul@multiplicand+1,c
 15590  0015DC  0E03               	movlw	3
 15591  0015DE  6E13               	movwf	___wmul@multiplicand,c
 15592  0015E0  0E00               	movlw	0
 15593  0015E2  6E40               	movwf	___awmod@divisor+1,c
 15594  0015E4  0E0A               	movlw	10
 15595  0015E6  6E3F               	movwf	___awmod@divisor,c
 15596  0015E8  5049               	movf	scale@scl,w,c
 15597  0015EA  6E3D               	movwf	___awmod@dividend,c
 15598  0015EC  6A3E               	clrf	___awmod@dividend+1,c
 15599  0015EE  BE3D               	btfsc	___awmod@dividend,7,c
 15600  0015F0  063E               	decf	___awmod@dividend+1,f,c
 15601  0015F2  EC90  F01F         	call	___awmod	;wreg free
 15602  0015F6  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15603  0015FA  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15604  0015FE  EC01  F024         	call	___wmul	;wreg free
 15605  001602  0EEB               	movlw	low __powers_
 15606  001604  2411               	addwf	?___wmul,w,c
 15607  001606  6EF6               	movwf	tblptrl,c
 15608  001608  0EFD               	movlw	high __powers_
 15609  00160A  2012               	addwfc	?___wmul+1,w,c
 15610  00160C  6EF7               	movwf	tblptrh,c
 15611  00160E                     	if	0	;There are less than 3 active tblptr bytes
 15612  00160E                     	endif
 15613  00160E  0009               	tblrd		*+
 15614  001610  CFF5 F022          	movff	tablat,___ftmul@f2
 15615  001614  0009               	tblrd		*+
 15616  001616  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15617  00161A  000A               	tblrd		*-
 15618  00161C  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15619  001620  EC24  F018         	call	___ftmul	;wreg free
 15620  001624  D053               	goto	L13
 15621  001626  D06C               	goto	l1332
 15622  001628  D059               	goto	l8609
 15623  00162A                     l8603:
 15624                           
 15625                           ;doprnt.c: 438: else if(scl > 10)
 15626  00162A  5049               	movf	scale@scl,w,c
 15627  00162C  0A80               	xorlw	128
 15628  00162E  0F75               	addlw	-139
 15629  001630  A0D8               	btfss	status,0,c
 15630  001632  D054               	goto	l8609
 15631                           
 15632                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 15633  001634  0E00               	movlw	0
 15634  001636  6E1A               	movwf	___awdiv@divisor+1,c
 15635  001638  0E0A               	movlw	10
 15636  00163A  6E19               	movwf	___awdiv@divisor,c
 15637  00163C  5049               	movf	scale@scl,w,c
 15638  00163E  6E17               	movwf	___awdiv@dividend,c
 15639  001640  6A18               	clrf	___awdiv@dividend+1,c
 15640  001642  BE17               	btfsc	___awdiv@dividend,7,c
 15641  001644  0618               	decf	___awdiv@dividend+1,f,c
 15642  001646  EC61  F01D         	call	___awdiv	;wreg free
 15643  00164A  0E09               	movlw	9
 15644  00164C  2417               	addwf	?___awdiv,w,c
 15645  00164E  6E11               	movwf	___wmul@multiplier,c
 15646  001650  0E00               	movlw	0
 15647  001652  2018               	addwfc	?___awdiv+1,w,c
 15648  001654  6E12               	movwf	___wmul@multiplier+1,c
 15649  001656  0E00               	movlw	0
 15650  001658  6E14               	movwf	___wmul@multiplicand+1,c
 15651  00165A  0E03               	movlw	3
 15652  00165C  6E13               	movwf	___wmul@multiplicand,c
 15653  00165E  EC01  F024         	call	___wmul	;wreg free
 15654  001662  0EEB               	movlw	low __powers_
 15655  001664  2411               	addwf	?___wmul,w,c
 15656  001666  6EF6               	movwf	tblptrl,c
 15657  001668  0EFD               	movlw	high __powers_
 15658  00166A  2012               	addwfc	?___wmul+1,w,c
 15659  00166C  6EF7               	movwf	tblptrh,c
 15660  00166E                     	if	0	;There are less than 3 active tblptr bytes
 15661  00166E                     	endif
 15662  00166E  0009               	tblrd		*+
 15663  001670  CFF5 F01F          	movff	tablat,___ftmul@f1
 15664  001674  0009               	tblrd		*+
 15665  001676  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15666  00167A  000A               	tblrd		*-
 15667  00167C  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15668  001680  0E00               	movlw	0
 15669  001682  6E14               	movwf	___wmul@multiplicand+1,c
 15670  001684  0E03               	movlw	3
 15671  001686  6E13               	movwf	___wmul@multiplicand,c
 15672  001688  0E00               	movlw	0
 15673  00168A  6E40               	movwf	___awmod@divisor+1,c
 15674  00168C  0E0A               	movlw	10
 15675  00168E  6E3F               	movwf	___awmod@divisor,c
 15676  001690  5049               	movf	scale@scl,w,c
 15677  001692  6E3D               	movwf	___awmod@dividend,c
 15678  001694  6A3E               	clrf	___awmod@dividend+1,c
 15679  001696  BE3D               	btfsc	___awmod@dividend,7,c
 15680  001698  063E               	decf	___awmod@dividend+1,f,c
 15681  00169A  EC90  F01F         	call	___awmod	;wreg free
 15682  00169E  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15683  0016A2  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15684  0016A6  EC01  F024         	call	___wmul	;wreg free
 15685  0016AA  0EEB               	movlw	low __powers_
 15686  0016AC  2411               	addwf	?___wmul,w,c
 15687  0016AE  6EF6               	movwf	tblptrl,c
 15688  0016B0  0EFD               	movlw	high __powers_
 15689  0016B2  2012               	addwfc	?___wmul+1,w,c
 15690  0016B4  6EF7               	movwf	tblptrh,c
 15691  0016B6                     	if	0	;There are less than 3 active tblptr bytes
 15692  0016B6                     	endif
 15693  0016B6  0009               	tblrd		*+
 15694  0016B8  CFF5 F022          	movff	tablat,___ftmul@f2
 15695  0016BC  0009               	tblrd		*+
 15696  0016BE  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15697  0016C2  000A               	tblrd		*-
 15698  0016C4  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15699  0016C8  EC24  F018         	call	___ftmul	;wreg free
 15700  0016CC                     L13:
 15701  0016CC  C01F  F043         	movff	?___ftmul,?_scale
 15702  0016D0  C020  F044         	movff	?___ftmul+1,?_scale+1
 15703  0016D4  C021  F045         	movff	?___ftmul+2,?_scale+2
 15704  0016D8  D013               	goto	l1332
 15705  0016DA  D000               	goto	l8609
 15706  0016DC                     l8609:
 15707                           
 15708                           ;doprnt.c: 440: return _powers_[scl];
 15709  0016DC  5049               	movf	scale@scl,w,c
 15710  0016DE  0D03               	mullw	3
 15711  0016E0  0EEB               	movlw	low __powers_
 15712  0016E2  24F3               	addwf	prodl,w,c
 15713  0016E4  6EF6               	movwf	tblptrl,c
 15714  0016E6  0EFD               	movlw	high __powers_
 15715  0016E8                     L12:
 15716  0016E8  20F4               	addwfc	prodh,w,c
 15717  0016EA  6EF7               	movwf	tblptrh,c
 15718  0016EC                     	if	0	;There are less than 3 active tblptr bytes
 15719  0016EC                     	endif
 15720  0016EC  0009               	tblrd		*+
 15721  0016EE  CFF5 F043          	movff	tablat,?_scale
 15722  0016F2  0009               	tblrd		*+
 15723  0016F4  CFF5 F044          	movff	tablat,?_scale+1
 15724  0016F8  000A               	tblrd		*-
 15725  0016FA  CFF5 F045          	movff	tablat,?_scale+2
 15726  0016FE  D000               	goto	l1332
 15727  001700                     l1332:
 15728  001700  0012               	return		;funcret
 15729  001702                     __end_of_scale:
 15730                           	opt stack 0
 15731                           tblptru	equ	0xFF8
 15732                           tblptrh	equ	0xFF7
 15733                           tblptrl	equ	0xFF6
 15734                           tablat	equ	0xFF5
 15735                           prodh	equ	0xFF4
 15736                           prodl	equ	0xFF3
 15737                           intcon	equ	0xFF2
 15738                           intcon2	equ	0xFF1
 15739                           intcon3	equ	0xFF0
 15740                           postinc0	equ	0xFEE
 15741                           wreg	equ	0xFE8
 15742                           postdec1	equ	0xFE5
 15743                           plusw1	equ	0xFE3
 15744                           fsr1l	equ	0xFE1
 15745                           indf2	equ	0xFDF
 15746                           postinc2	equ	0xFDE
 15747                           postdec2	equ	0xFDD
 15748                           plusw2	equ	0xFDB
 15749                           fsr2h	equ	0xFDA
 15750                           fsr2l	equ	0xFD9
 15751                           status	equ	0xFD8
 15752                           
 15753 ;; *************** function _putch *****************
 15754 ;; Defined at:
 15755 ;;		line 190 in file "utils.c"
 15756 ;; Parameters:    Size  Location     Type
 15757 ;;  c               1    wreg     unsigned char 
 15758 ;; Auto vars:     Size  Location     Type
 15759 ;;  c               1   16[COMRAM] unsigned char 
 15760 ;; Return value:  Size  Location     Type
 15761 ;;		None               void
 15762 ;; Registers used:
 15763 ;;		wreg
 15764 ;; Tracked objects:
 15765 ;;		On entry : 0/0
 15766 ;;		On exit  : 0/0
 15767 ;;		Unchanged: 0/0
 15768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15773 ;;Total ram usage:        1 bytes
 15774 ;; Hardware stack levels used:    1
 15775 ;; Hardware stack levels required when called:    2
 15776 ;; This function calls:
 15777 ;;		Nothing
 15778 ;; This function is called by:
 15779 ;;		_printf
 15780 ;; This function uses a non-reentrant model
 15781 ;;
 15782                           
 15783                           	psect	text64
 15784  004BE0                     __ptext64:
 15785                           	opt stack 0
 15786  004BE0                     _putch:
 15787                           	opt stack 27
 15788                           
 15789                           ;incstack = 0
 15790                           ;putch@c stored from wreg
 15791  004BE0  6E11               	movwf	putch@c,c
 15792                           
 15793                           ;utils.c: 192: while (!TRMT);
 15794  004BE2  D000               	goto	l505
 15795  004BE4                     l505:
 15796  004BE4  A2AC               	btfss	4012,1,c	;volatile
 15797  004BE6  D7FE               	goto	l505
 15798                           
 15799                           ;utils.c: 193: TXREG = c;
 15800  004BE8  C011  FFAD         	movff	putch@c,4013	;volatile
 15801  004BEC  0012               	return		;funcret
 15802  004BEE                     __end_of_putch:
 15803                           	opt stack 0
 15804                           tblptru	equ	0xFF8
 15805                           tblptrh	equ	0xFF7
 15806                           tblptrl	equ	0xFF6
 15807                           tablat	equ	0xFF5
 15808                           prodh	equ	0xFF4
 15809                           prodl	equ	0xFF3
 15810                           intcon	equ	0xFF2
 15811                           intcon2	equ	0xFF1
 15812                           intcon3	equ	0xFF0
 15813                           postinc0	equ	0xFEE
 15814                           wreg	equ	0xFE8
 15815                           postdec1	equ	0xFE5
 15816                           plusw1	equ	0xFE3
 15817                           fsr1l	equ	0xFE1
 15818                           indf2	equ	0xFDF
 15819                           postinc2	equ	0xFDE
 15820                           postdec2	equ	0xFDD
 15821                           plusw2	equ	0xFDB
 15822                           fsr2h	equ	0xFDA
 15823                           fsr2l	equ	0xFD9
 15824                           status	equ	0xFD8
 15825                           
 15826 ;; *************** function _isdigit *****************
 15827 ;; Defined at:
 15828 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15829 ;; Parameters:    Size  Location     Type
 15830 ;;  c               1    wreg     unsigned char 
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;  c               1   18[COMRAM] unsigned char 
 15833 ;; Return value:  Size  Location     Type
 15834 ;;		None               void
 15835 ;; Registers used:
 15836 ;;		wreg, status,2, status,0
 15837 ;; Tracked objects:
 15838 ;;		On entry : 0/0
 15839 ;;		On exit  : 0/0
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15845 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15846 ;;Total ram usage:        3 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:    2
 15849 ;; This function calls:
 15850 ;;		Nothing
 15851 ;; This function is called by:
 15852 ;;		_printf
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           	psect	text65
 15857  00492C                     __ptext65:
 15858                           	opt stack 0
 15859  00492C                     _isdigit:
 15860                           	opt stack 27
 15861                           
 15862                           ;incstack = 0
 15863                           ;isdigit@c stored from wreg
 15864  00492C  6E13               	movwf	isdigit@c,c
 15865  00492E  0E00               	movlw	0
 15866  004930  6E12               	movwf	_isdigit$2628,c
 15867  004932  0E3A               	movlw	58
 15868  004934  6013               	cpfslt	isdigit@c,c
 15869  004936  D006               	goto	l8621
 15870  004938  0E2F               	movlw	47
 15871  00493A  6413               	cpfsgt	isdigit@c,c
 15872  00493C  D003               	goto	l8621
 15873  00493E  0E01               	movlw	1
 15874  004940  6E12               	movwf	_isdigit$2628,c
 15875  004942  D000               	goto	l8621
 15876  004944                     l8621:
 15877  004944  C012  F011         	movff	_isdigit$2628,??_isdigit
 15878  004948  3011               	rrcf	??_isdigit,w,c
 15879  00494A  D000               	goto	l1944
 15880  00494C                     l1944:
 15881  00494C  0012               	return		;funcret
 15882  00494E                     __end_of_isdigit:
 15883                           	opt stack 0
 15884                           tblptru	equ	0xFF8
 15885                           tblptrh	equ	0xFF7
 15886                           tblptrl	equ	0xFF6
 15887                           tablat	equ	0xFF5
 15888                           prodh	equ	0xFF4
 15889                           prodl	equ	0xFF3
 15890                           intcon	equ	0xFF2
 15891                           intcon2	equ	0xFF1
 15892                           intcon3	equ	0xFF0
 15893                           postinc0	equ	0xFEE
 15894                           wreg	equ	0xFE8
 15895                           postdec1	equ	0xFE5
 15896                           plusw1	equ	0xFE3
 15897                           fsr1l	equ	0xFE1
 15898                           indf2	equ	0xFDF
 15899                           postinc2	equ	0xFDE
 15900                           postdec2	equ	0xFDD
 15901                           plusw2	equ	0xFDB
 15902                           fsr2h	equ	0xFDA
 15903                           fsr2l	equ	0xFD9
 15904                           status	equ	0xFD8
 15905                           
 15906 ;; *************** function _fround *****************
 15907 ;; Defined at:
 15908 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15909 ;; Parameters:    Size  Location     Type
 15910 ;;  prec            1    wreg     unsigned char 
 15911 ;; Auto vars:     Size  Location     Type
 15912 ;;  prec            1   75[COMRAM] unsigned char 
 15913 ;; Return value:  Size  Location     Type
 15914 ;;                  3   66[COMRAM] unsigned char 
 15915 ;; Registers used:
 15916 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15917 ;; Tracked objects:
 15918 ;;		On entry : 0/0
 15919 ;;		On exit  : 0/0
 15920 ;;		Unchanged: 0/0
 15921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15922 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15923 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15925 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15926 ;;Total ram usage:       10 bytes
 15927 ;; Hardware stack levels used:    1
 15928 ;; Hardware stack levels required when called:    4
 15929 ;; This function calls:
 15930 ;;		___awdiv
 15931 ;;		___awmod
 15932 ;;		___ftmul
 15933 ;;		___wmul
 15934 ;; This function is called by:
 15935 ;;		_printf
 15936 ;; This function uses a non-reentrant model
 15937 ;;
 15938                           
 15939                           	psect	text66
 15940  001D70                     __ptext66:
 15941                           	opt stack 0
 15942  001D70                     _fround:
 15943                           	opt stack 25
 15944                           
 15945                           ;incstack = 0
 15946                           ;fround@prec stored from wreg
 15947  001D70  6E4C               	movwf	fround@prec,c
 15948                           
 15949                           ;doprnt.c: 413: if(prec>=110)
 15950  001D72  0E6D               	movlw	109
 15951  001D74  644C               	cpfsgt	fround@prec,c
 15952  001D76  D09B               	goto	l8563
 15953                           
 15954                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15955  001D78  0E00               	movlw	0
 15956  001D7A  6E14               	movwf	___wmul@multiplicand+1,c
 15957  001D7C  0E03               	movlw	3
 15958  001D7E  6E13               	movwf	___wmul@multiplicand,c
 15959  001D80  0E00               	movlw	0
 15960  001D82  6E1A               	movwf	___awdiv@divisor+1,c
 15961  001D84  0E0A               	movlw	10
 15962  001D86  6E19               	movwf	___awdiv@divisor,c
 15963  001D88  0E00               	movlw	0
 15964  001D8A  6E40               	movwf	___awmod@divisor+1,c
 15965  001D8C  0E64               	movlw	100
 15966  001D8E  6E3F               	movwf	___awmod@divisor,c
 15967  001D90  C04C  F03D         	movff	fround@prec,___awmod@dividend
 15968  001D94  6A3E               	clrf	___awmod@dividend+1,c
 15969  001D96  EC90  F01F         	call	___awmod	;wreg free
 15970  001D9A  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15971  001D9E  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15972  001DA2  EC61  F01D         	call	___awdiv	;wreg free
 15973  001DA6  0E09               	movlw	9
 15974  001DA8  2417               	addwf	?___awdiv,w,c
 15975  001DAA  6E11               	movwf	___wmul@multiplier,c
 15976  001DAC  0E00               	movlw	0
 15977  001DAE  2018               	addwfc	?___awdiv+1,w,c
 15978  001DB0  6E12               	movwf	___wmul@multiplier+1,c
 15979  001DB2  EC01  F024         	call	___wmul	;wreg free
 15980  001DB6  0EC4               	movlw	low __npowers_
 15981  001DB8  2411               	addwf	?___wmul,w,c
 15982  001DBA  6EF6               	movwf	tblptrl,c
 15983  001DBC  0EFD               	movlw	high __npowers_
 15984  001DBE  2012               	addwfc	?___wmul+1,w,c
 15985  001DC0  6EF7               	movwf	tblptrh,c
 15986  001DC2                     	if	0	;There are less than 3 active tblptr bytes
 15987  001DC2                     	endif
 15988  001DC2  0009               	tblrd		*+
 15989  001DC4  CFF5 F022          	movff	tablat,___ftmul@f2
 15990  001DC8  0009               	tblrd		*+
 15991  001DCA  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15992  001DCE  000A               	tblrd		*-
 15993  001DD0  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15994  001DD4  0E00               	movlw	0
 15995  001DD6  6E1A               	movwf	___awdiv@divisor+1,c
 15996  001DD8  0E64               	movlw	100
 15997  001DDA  6E19               	movwf	___awdiv@divisor,c
 15998  001DDC  C04C  F017         	movff	fround@prec,___awdiv@dividend
 15999  001DE0  6A18               	clrf	___awdiv@dividend+1,c
 16000  001DE2  EC61  F01D         	call	___awdiv	;wreg free
 16001  001DE6  0E12               	movlw	18
 16002  001DE8  2417               	addwf	?___awdiv,w,c
 16003  001DEA  6E11               	movwf	___wmul@multiplier,c
 16004  001DEC  0E00               	movlw	0
 16005  001DEE  2018               	addwfc	?___awdiv+1,w,c
 16006  001DF0  6E12               	movwf	___wmul@multiplier+1,c
 16007  001DF2  0E00               	movlw	0
 16008  001DF4  6E14               	movwf	___wmul@multiplicand+1,c
 16009  001DF6  0E03               	movlw	3
 16010  001DF8  6E13               	movwf	___wmul@multiplicand,c
 16011  001DFA  EC01  F024         	call	___wmul	;wreg free
 16012  001DFE  0EC4               	movlw	low __npowers_
 16013  001E00  2411               	addwf	?___wmul,w,c
 16014  001E02  6EF6               	movwf	tblptrl,c
 16015  001E04  0EFD               	movlw	high __npowers_
 16016  001E06  2012               	addwfc	?___wmul+1,w,c
 16017  001E08  6EF7               	movwf	tblptrh,c
 16018  001E0A                     	if	0	;There are less than 3 active tblptr bytes
 16019  001E0A                     	endif
 16020  001E0A  0009               	tblrd		*+
 16021  001E0C  CFF5 F01F          	movff	tablat,___ftmul@f1
 16022  001E10  0009               	tblrd		*+
 16023  001E12  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16024  001E16  000A               	tblrd		*-
 16025  001E18  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16026  001E1C  EC24  F018         	call	___ftmul	;wreg free
 16027  001E20  C01F  F049         	movff	?___ftmul,_fround$3004
 16028  001E24  C020  F04A         	movff	?___ftmul+1,_fround$3004+1
 16029  001E28  C021  F04B         	movff	?___ftmul+2,_fround$3004+2
 16030                           
 16031                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16032  001E2C  0E00               	movlw	0
 16033  001E2E  6E14               	movwf	___wmul@multiplicand+1,c
 16034  001E30  0E03               	movlw	3
 16035  001E32  6E13               	movwf	___wmul@multiplicand,c
 16036  001E34  0E00               	movlw	0
 16037  001E36  6E40               	movwf	___awmod@divisor+1,c
 16038  001E38  0E0A               	movlw	10
 16039  001E3A  6E3F               	movwf	___awmod@divisor,c
 16040  001E3C  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16041  001E40  6A3E               	clrf	___awmod@dividend+1,c
 16042  001E42  EC90  F01F         	call	___awmod	;wreg free
 16043  001E46  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16044  001E4A  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16045  001E4E  EC01  F024         	call	___wmul	;wreg free
 16046  001E52  0EC4               	movlw	low __npowers_
 16047  001E54  2411               	addwf	?___wmul,w,c
 16048  001E56  6EF6               	movwf	tblptrl,c
 16049  001E58  0EFD               	movlw	high __npowers_
 16050  001E5A  2012               	addwfc	?___wmul+1,w,c
 16051  001E5C  6EF7               	movwf	tblptrh,c
 16052  001E5E                     	if	0	;There are less than 3 active tblptr bytes
 16053  001E5E                     	endif
 16054  001E5E  0009               	tblrd		*+
 16055  001E60  CFF5 F022          	movff	tablat,___ftmul@f2
 16056  001E64  0009               	tblrd		*+
 16057  001E66  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16058  001E6A  000A               	tblrd		*-
 16059  001E6C  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16060  001E70  C049  F01F         	movff	_fround$3004,___ftmul@f1
 16061  001E74  C04A  F020         	movff	_fround$3004+1,___ftmul@f1+1
 16062  001E78  C04B  F021         	movff	_fround$3004+2,___ftmul@f1+2
 16063  001E7C  EC24  F018         	call	___ftmul	;wreg free
 16064  001E80  C01F  F046         	movff	?___ftmul,_fround$3005
 16065  001E84  C020  F047         	movff	?___ftmul+1,_fround$3005+1
 16066  001E88  C021  F048         	movff	?___ftmul+2,_fround$3005+2
 16067                           
 16068                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16069  001E8C  C046  F01F         	movff	_fround$3005,___ftmul@f1
 16070  001E90  C047  F020         	movff	_fround$3005+1,___ftmul@f1+1
 16071  001E94  C048  F021         	movff	_fround$3005+2,___ftmul@f1+2
 16072  001E98  0E00               	movlw	0
 16073  001E9A  6E22               	movwf	___ftmul@f2,c
 16074  001E9C  0E00               	movlw	0
 16075  001E9E  6E23               	movwf	___ftmul@f2+1,c
 16076  001EA0  0E3F               	movlw	63
 16077  001EA2  6E24               	movwf	___ftmul@f2+2,c
 16078  001EA4  EC24  F018         	call	___ftmul	;wreg free
 16079  001EA8  D07D               	goto	L15
 16080  001EAA  D083               	goto	l1325
 16081  001EAC  D062               	goto	l8571
 16082  001EAE                     l8563:
 16083                           
 16084                           ;doprnt.c: 415: else if(prec > 10)
 16085  001EAE  0E0A               	movlw	10
 16086  001EB0  644C               	cpfsgt	fround@prec,c
 16087  001EB2  D05F               	goto	l8571
 16088                           
 16089                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16090  001EB4  0E00               	movlw	0
 16091  001EB6  6E14               	movwf	___wmul@multiplicand+1,c
 16092  001EB8  0E03               	movlw	3
 16093  001EBA  6E13               	movwf	___wmul@multiplicand,c
 16094  001EBC  0E00               	movlw	0
 16095  001EBE  6E40               	movwf	___awmod@divisor+1,c
 16096  001EC0  0E0A               	movlw	10
 16097  001EC2  6E3F               	movwf	___awmod@divisor,c
 16098  001EC4  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16099  001EC8  6A3E               	clrf	___awmod@dividend+1,c
 16100  001ECA  EC90  F01F         	call	___awmod	;wreg free
 16101  001ECE  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16102  001ED2  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16103  001ED6  EC01  F024         	call	___wmul	;wreg free
 16104  001EDA  0EC4               	movlw	low __npowers_
 16105  001EDC  2411               	addwf	?___wmul,w,c
 16106  001EDE  6EF6               	movwf	tblptrl,c
 16107  001EE0  0EFD               	movlw	high __npowers_
 16108  001EE2  2012               	addwfc	?___wmul+1,w,c
 16109  001EE4  6EF7               	movwf	tblptrh,c
 16110  001EE6                     	if	0	;There are less than 3 active tblptr bytes
 16111  001EE6                     	endif
 16112  001EE6  0009               	tblrd		*+
 16113  001EE8  CFF5 F022          	movff	tablat,___ftmul@f2
 16114  001EEC  0009               	tblrd		*+
 16115  001EEE  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16116  001EF2  000A               	tblrd		*-
 16117  001EF4  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16118  001EF8  0E00               	movlw	0
 16119  001EFA  6E1A               	movwf	___awdiv@divisor+1,c
 16120  001EFC  0E0A               	movlw	10
 16121  001EFE  6E19               	movwf	___awdiv@divisor,c
 16122  001F00  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16123  001F04  6A18               	clrf	___awdiv@dividend+1,c
 16124  001F06  EC61  F01D         	call	___awdiv	;wreg free
 16125  001F0A  0E09               	movlw	9
 16126  001F0C  2417               	addwf	?___awdiv,w,c
 16127  001F0E  6E11               	movwf	___wmul@multiplier,c
 16128  001F10  0E00               	movlw	0
 16129  001F12  2018               	addwfc	?___awdiv+1,w,c
 16130  001F14  6E12               	movwf	___wmul@multiplier+1,c
 16131  001F16  0E00               	movlw	0
 16132  001F18  6E14               	movwf	___wmul@multiplicand+1,c
 16133  001F1A  0E03               	movlw	3
 16134  001F1C  6E13               	movwf	___wmul@multiplicand,c
 16135  001F1E  EC01  F024         	call	___wmul	;wreg free
 16136  001F22  0EC4               	movlw	low __npowers_
 16137  001F24  2411               	addwf	?___wmul,w,c
 16138  001F26  6EF6               	movwf	tblptrl,c
 16139  001F28  0EFD               	movlw	high __npowers_
 16140  001F2A  2012               	addwfc	?___wmul+1,w,c
 16141  001F2C  6EF7               	movwf	tblptrh,c
 16142  001F2E                     	if	0	;There are less than 3 active tblptr bytes
 16143  001F2E                     	endif
 16144  001F2E  0009               	tblrd		*+
 16145  001F30  CFF5 F01F          	movff	tablat,___ftmul@f1
 16146  001F34  0009               	tblrd		*+
 16147  001F36  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16148  001F3A  000A               	tblrd		*-
 16149  001F3C  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16150  001F40  EC24  F018         	call	___ftmul	;wreg free
 16151  001F44  C01F  F049         	movff	?___ftmul,_fround$3004
 16152  001F48  C020  F04A         	movff	?___ftmul+1,_fround$3004+1
 16153  001F4C  C021  F04B         	movff	?___ftmul+2,_fround$3004+2
 16154                           
 16155                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16156  001F50  C049  F01F         	movff	_fround$3004,___ftmul@f1
 16157  001F54  C04A  F020         	movff	_fround$3004+1,___ftmul@f1+1
 16158  001F58  C04B  F021         	movff	_fround$3004+2,___ftmul@f1+2
 16159  001F5C  0E00               	movlw	0
 16160  001F5E  6E22               	movwf	___ftmul@f2,c
 16161  001F60  0E00               	movlw	0
 16162  001F62  6E23               	movwf	___ftmul@f2+1,c
 16163  001F64  0E3F               	movlw	63
 16164  001F66  6E24               	movwf	___ftmul@f2+2,c
 16165  001F68  EC24  F018         	call	___ftmul	;wreg free
 16166  001F6C  D01B               	goto	L15
 16167  001F6E  D021               	goto	l1325
 16168  001F70  D000               	goto	l8571
 16169  001F72                     l8571:
 16170                           
 16171                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 16172  001F72  504C               	movf	fround@prec,w,c
 16173  001F74  0D03               	mullw	3
 16174  001F76  0EC4               	movlw	low __npowers_
 16175  001F78  24F3               	addwf	prodl,w,c
 16176  001F7A  6EF6               	movwf	tblptrl,c
 16177  001F7C  0EFD               	movlw	high __npowers_
 16178  001F7E  20F4               	addwfc	prodh,w,c
 16179  001F80  6EF7               	movwf	tblptrh,c
 16180  001F82                     	if	0	;There are less than 3 active tblptr bytes
 16181  001F82                     	endif
 16182  001F82  0009               	tblrd		*+
 16183  001F84  CFF5 F01F          	movff	tablat,___ftmul@f1
 16184  001F88  0009               	tblrd		*+
 16185  001F8A  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16186  001F8E  000A               	tblrd		*-
 16187  001F90  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16188  001F94  0E00               	movlw	0
 16189  001F96  6E22               	movwf	___ftmul@f2,c
 16190  001F98  0E00               	movlw	0
 16191  001F9A  6E23               	movwf	___ftmul@f2+1,c
 16192  001F9C  0E3F               	movlw	63
 16193  001F9E  6E24               	movwf	___ftmul@f2+2,c
 16194  001FA0  EC24  F018         	call	___ftmul	;wreg free
 16195  001FA4                     L15:
 16196  001FA4  C01F  F043         	movff	?___ftmul,?_fround
 16197  001FA8  C020  F044         	movff	?___ftmul+1,?_fround+1
 16198  001FAC  C021  F045         	movff	?___ftmul+2,?_fround+2
 16199  001FB0  D000               	goto	l1325
 16200  001FB2                     l1325:
 16201  001FB2  0012               	return		;funcret
 16202  001FB4                     __end_of_fround:
 16203                           	opt stack 0
 16204                           tblptru	equ	0xFF8
 16205                           tblptrh	equ	0xFF7
 16206                           tblptrl	equ	0xFF6
 16207                           tablat	equ	0xFF5
 16208                           prodh	equ	0xFF4
 16209                           prodl	equ	0xFF3
 16210                           intcon	equ	0xFF2
 16211                           intcon2	equ	0xFF1
 16212                           intcon3	equ	0xFF0
 16213                           postinc0	equ	0xFEE
 16214                           wreg	equ	0xFE8
 16215                           postdec1	equ	0xFE5
 16216                           plusw1	equ	0xFE3
 16217                           fsr1l	equ	0xFE1
 16218                           indf2	equ	0xFDF
 16219                           postinc2	equ	0xFDE
 16220                           postdec2	equ	0xFDD
 16221                           plusw2	equ	0xFDB
 16222                           fsr2h	equ	0xFDA
 16223                           fsr2l	equ	0xFD9
 16224                           status	equ	0xFD8
 16225                           
 16226 ;; *************** function ___wmul *****************
 16227 ;; Defined at:
 16228 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16229 ;; Parameters:    Size  Location     Type
 16230 ;;  multiplier      2   16[COMRAM] unsigned int 
 16231 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16232 ;; Auto vars:     Size  Location     Type
 16233 ;;  product         2   20[COMRAM] unsigned int 
 16234 ;; Return value:  Size  Location     Type
 16235 ;;                  2   16[COMRAM] unsigned int 
 16236 ;; Registers used:
 16237 ;;		wreg, status,2, status,0, prodl, prodh
 16238 ;; Tracked objects:
 16239 ;;		On entry : 0/0
 16240 ;;		On exit  : 0/0
 16241 ;;		Unchanged: 0/0
 16242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16243 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16246 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16247 ;;Total ram usage:        6 bytes
 16248 ;; Hardware stack levels used:    1
 16249 ;; Hardware stack levels required when called:    2
 16250 ;; This function calls:
 16251 ;;		Nothing
 16252 ;; This function is called by:
 16253 ;;		_get_RPM
 16254 ;;		_delay_ms
 16255 ;;		_drawChar
 16256 ;;		_Read_Volt
 16257 ;;		_main
 16258 ;;		_Setup_Fan_Temp
 16259 ;;		_Do_Setup_Time
 16260 ;;		_fround
 16261 ;;		_scale
 16262 ;;		_printf
 16263 ;; This function uses a non-reentrant model
 16264 ;;
 16265                           
 16266                           	psect	text67
 16267  004802                     __ptext67:
 16268                           	opt stack 0
 16269  004802                     ___wmul:
 16270                           	opt stack 26
 16271                           
 16272                           ;incstack = 0
 16273  004802  5011               	movf	___wmul@multiplier,w,c
 16274  004804  0213               	mulwf	___wmul@multiplicand,c
 16275  004806  CFF3 F015          	movff	prodl,___wmul@product
 16276  00480A  CFF4 F016          	movff	prodh,___wmul@product+1
 16277  00480E  5011               	movf	___wmul@multiplier,w,c
 16278  004810  0214               	mulwf	___wmul@multiplicand+1,c
 16279  004812  50F3               	movf	prodl,w,c
 16280  004814  2616               	addwf	___wmul@product+1,f,c
 16281  004816  5012               	movf	___wmul@multiplier+1,w,c
 16282  004818  0213               	mulwf	___wmul@multiplicand,c
 16283  00481A  50F3               	movf	prodl,w,c
 16284  00481C  2616               	addwf	___wmul@product+1,f,c
 16285  00481E  C015  F011         	movff	___wmul@product,?___wmul
 16286  004822  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16287  004826  D000               	goto	l1479
 16288  004828                     l1479:
 16289  004828  0012               	return		;funcret
 16290  00482A                     __end_of___wmul:
 16291                           	opt stack 0
 16292                           tblptru	equ	0xFF8
 16293                           tblptrh	equ	0xFF7
 16294                           tblptrl	equ	0xFF6
 16295                           tablat	equ	0xFF5
 16296                           prodh	equ	0xFF4
 16297                           prodl	equ	0xFF3
 16298                           intcon	equ	0xFF2
 16299                           intcon2	equ	0xFF1
 16300                           intcon3	equ	0xFF0
 16301                           postinc0	equ	0xFEE
 16302                           wreg	equ	0xFE8
 16303                           postdec1	equ	0xFE5
 16304                           plusw1	equ	0xFE3
 16305                           fsr1l	equ	0xFE1
 16306                           indf2	equ	0xFDF
 16307                           postinc2	equ	0xFDE
 16308                           postdec2	equ	0xFDD
 16309                           plusw2	equ	0xFDB
 16310                           fsr2h	equ	0xFDA
 16311                           fsr2l	equ	0xFD9
 16312                           status	equ	0xFD8
 16313                           
 16314 ;; *************** function ___awmod *****************
 16315 ;; Defined at:
 16316 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;  dividend        2   60[COMRAM] int 
 16319 ;;  divisor         2   62[COMRAM] int 
 16320 ;; Auto vars:     Size  Location     Type
 16321 ;;  sign            1   65[COMRAM] unsigned char 
 16322 ;;  counter         1   64[COMRAM] unsigned char 
 16323 ;; Return value:  Size  Location     Type
 16324 ;;                  2   60[COMRAM] int 
 16325 ;; Registers used:
 16326 ;;		wreg, status,2, status,0
 16327 ;; Tracked objects:
 16328 ;;		On entry : 0/0
 16329 ;;		On exit  : 0/0
 16330 ;;		Unchanged: 0/0
 16331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16333 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16335 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16336 ;;Total ram usage:        6 bytes
 16337 ;; Hardware stack levels used:    1
 16338 ;; Hardware stack levels required when called:    2
 16339 ;; This function calls:
 16340 ;;		Nothing
 16341 ;; This function is called by:
 16342 ;;		_dec_2_bcd
 16343 ;;		_Update_Screen
 16344 ;;		_Update_Setup_Fan_Screen
 16345 ;;		_Update_Setup_Time_Screen
 16346 ;;		_fround
 16347 ;;		_scale
 16348 ;; This function uses a non-reentrant model
 16349 ;;
 16350                           
 16351                           	psect	text68
 16352  003F20                     __ptext68:
 16353                           	opt stack 0
 16354  003F20                     ___awmod:
 16355                           	opt stack 26
 16356                           
 16357                           ;incstack = 0
 16358  003F20  0E00               	movlw	0
 16359  003F22  6E42               	movwf	___awmod@sign,c
 16360  003F24  AE3E               	btfss	___awmod@dividend+1,7,c
 16361  003F26  D007               	goto	l8377
 16362  003F28  6C3D               	negf	___awmod@dividend,c
 16363  003F2A  1E3E               	comf	___awmod@dividend+1,f,c
 16364  003F2C  B0D8               	btfsc	status,0,c
 16365  003F2E  2A3E               	incf	___awmod@dividend+1,f,c
 16366  003F30  0E01               	movlw	1
 16367  003F32  6E42               	movwf	___awmod@sign,c
 16368  003F34  D000               	goto	l8377
 16369  003F36                     l8377:
 16370  003F36  AE40               	btfss	___awmod@divisor+1,7,c
 16371  003F38  D005               	goto	l8381
 16372  003F3A  6C3F               	negf	___awmod@divisor,c
 16373  003F3C  1E40               	comf	___awmod@divisor+1,f,c
 16374  003F3E  B0D8               	btfsc	status,0,c
 16375  003F40  2A40               	incf	___awmod@divisor+1,f,c
 16376  003F42  D000               	goto	l8381
 16377  003F44                     l8381:
 16378  003F44  503F               	movf	___awmod@divisor,w,c
 16379  003F46  1040               	iorwf	___awmod@divisor+1,w,c
 16380  003F48  B4D8               	btfsc	status,2,c
 16381  003F4A  D01D               	goto	l8397
 16382  003F4C  0E01               	movlw	1
 16383  003F4E  6E41               	movwf	___awmod@counter,c
 16384  003F50  D005               	goto	l8387
 16385  003F52                     l8385:
 16386  003F52  90D8               	bcf	status,0,c
 16387  003F54  363F               	rlcf	___awmod@divisor,f,c
 16388  003F56  3640               	rlcf	___awmod@divisor+1,f,c
 16389  003F58  2A41               	incf	___awmod@counter,f,c
 16390  003F5A  D000               	goto	l8387
 16391  003F5C                     l8387:
 16392  003F5C  BE40               	btfsc	___awmod@divisor+1,7,c
 16393  003F5E  D002               	goto	l8389
 16394  003F60  D7F8               	goto	l8385
 16395  003F62  D000               	goto	l8389
 16396  003F64                     l8389:
 16397  003F64  503F               	movf	___awmod@divisor,w,c
 16398  003F66  5C3D               	subwf	___awmod@dividend,w,c
 16399  003F68  5040               	movf	___awmod@divisor+1,w,c
 16400  003F6A  583E               	subwfb	___awmod@dividend+1,w,c
 16401  003F6C  A0D8               	btfss	status,0,c
 16402  003F6E  D005               	goto	l8393
 16403  003F70  503F               	movf	___awmod@divisor,w,c
 16404  003F72  5E3D               	subwf	___awmod@dividend,f,c
 16405  003F74  5040               	movf	___awmod@divisor+1,w,c
 16406  003F76  5A3E               	subwfb	___awmod@dividend+1,f,c
 16407  003F78  D000               	goto	l8393
 16408  003F7A                     l8393:
 16409  003F7A  90D8               	bcf	status,0,c
 16410  003F7C  3240               	rrcf	___awmod@divisor+1,f,c
 16411  003F7E  323F               	rrcf	___awmod@divisor,f,c
 16412  003F80  2E41               	decfsz	___awmod@counter,f,c
 16413  003F82  D7F0               	goto	l8389
 16414  003F84  D000               	goto	l8397
 16415  003F86                     l8397:
 16416  003F86  5042               	movf	___awmod@sign,w,c
 16417  003F88  B4D8               	btfsc	status,2,c
 16418  003F8A  D005               	goto	l8401
 16419  003F8C  6C3D               	negf	___awmod@dividend,c
 16420  003F8E  1E3E               	comf	___awmod@dividend+1,f,c
 16421  003F90  B0D8               	btfsc	status,0,c
 16422  003F92  2A3E               	incf	___awmod@dividend+1,f,c
 16423  003F94  D000               	goto	l8401
 16424  003F96                     l8401:
 16425  003F96  C03D  F03D         	movff	___awmod@dividend,?___awmod
 16426  003F9A  C03E  F03E         	movff	___awmod@dividend+1,?___awmod+1
 16427  003F9E  D000               	goto	l1685
 16428  003FA0                     l1685:
 16429  003FA0  0012               	return		;funcret
 16430  003FA2                     __end_of___awmod:
 16431                           	opt stack 0
 16432                           tblptru	equ	0xFF8
 16433                           tblptrh	equ	0xFF7
 16434                           tblptrl	equ	0xFF6
 16435                           tablat	equ	0xFF5
 16436                           prodh	equ	0xFF4
 16437                           prodl	equ	0xFF3
 16438                           intcon	equ	0xFF2
 16439                           intcon2	equ	0xFF1
 16440                           intcon3	equ	0xFF0
 16441                           postinc0	equ	0xFEE
 16442                           wreg	equ	0xFE8
 16443                           postdec1	equ	0xFE5
 16444                           plusw1	equ	0xFE3
 16445                           fsr1l	equ	0xFE1
 16446                           indf2	equ	0xFDF
 16447                           postinc2	equ	0xFDE
 16448                           postdec2	equ	0xFDD
 16449                           plusw2	equ	0xFDB
 16450                           fsr2h	equ	0xFDA
 16451                           fsr2l	equ	0xFD9
 16452                           status	equ	0xFD8
 16453                           
 16454 ;; *************** function ___awdiv *****************
 16455 ;; Defined at:
 16456 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 16457 ;; Parameters:    Size  Location     Type
 16458 ;;  dividend        2   22[COMRAM] int 
 16459 ;;  divisor         2   24[COMRAM] int 
 16460 ;; Auto vars:     Size  Location     Type
 16461 ;;  quotient        2   28[COMRAM] int 
 16462 ;;  sign            1   27[COMRAM] unsigned char 
 16463 ;;  counter         1   26[COMRAM] unsigned char 
 16464 ;; Return value:  Size  Location     Type
 16465 ;;                  2   22[COMRAM] int 
 16466 ;; Registers used:
 16467 ;;		wreg, status,2, status,0
 16468 ;; Tracked objects:
 16469 ;;		On entry : 0/0
 16470 ;;		On exit  : 0/0
 16471 ;;		Unchanged: 0/0
 16472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16473 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16474 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16476 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16477 ;;Total ram usage:        8 bytes
 16478 ;; Hardware stack levels used:    1
 16479 ;; Hardware stack levels required when called:    2
 16480 ;; This function calls:
 16481 ;;		Nothing
 16482 ;; This function is called by:
 16483 ;;		_get_RPM
 16484 ;;		_dec_2_bcd
 16485 ;;		_main
 16486 ;;		_Set_D1_RGB
 16487 ;;		_Set_D2_RGB
 16488 ;;		_Update_Screen
 16489 ;;		_Setup_Fan_Temp
 16490 ;;		_Update_Setup_Fan_Screen
 16491 ;;		_Do_Setup_Time
 16492 ;;		_Update_Setup_Time_Screen
 16493 ;;		_fround
 16494 ;;		_scale
 16495 ;;		_printf
 16496 ;; This function uses a non-reentrant model
 16497 ;;
 16498                           
 16499                           	psect	text69
 16500  003AC2                     __ptext69:
 16501                           	opt stack 0
 16502  003AC2                     ___awdiv:
 16503                           	opt stack 26
 16504                           
 16505                           ;incstack = 0
 16506  003AC2  0E00               	movlw	0
 16507  003AC4  6E1C               	movwf	___awdiv@sign,c
 16508  003AC6  AE1A               	btfss	___awdiv@divisor+1,7,c
 16509  003AC8  D007               	goto	l8333
 16510  003ACA  6C19               	negf	___awdiv@divisor,c
 16511  003ACC  1E1A               	comf	___awdiv@divisor+1,f,c
 16512  003ACE  B0D8               	btfsc	status,0,c
 16513  003AD0  2A1A               	incf	___awdiv@divisor+1,f,c
 16514  003AD2  0E01               	movlw	1
 16515  003AD4  6E1C               	movwf	___awdiv@sign,c
 16516  003AD6  D000               	goto	l8333
 16517  003AD8                     l8333:
 16518  003AD8  AE18               	btfss	___awdiv@dividend+1,7,c
 16519  003ADA  D007               	goto	l8339
 16520  003ADC  6C17               	negf	___awdiv@dividend,c
 16521  003ADE  1E18               	comf	___awdiv@dividend+1,f,c
 16522  003AE0  B0D8               	btfsc	status,0,c
 16523  003AE2  2A18               	incf	___awdiv@dividend+1,f,c
 16524  003AE4  0E01               	movlw	1
 16525  003AE6  1A1C               	xorwf	___awdiv@sign,f,c
 16526  003AE8  D000               	goto	l8339
 16527  003AEA                     l8339:
 16528  003AEA  0E00               	movlw	0
 16529  003AEC  6E1E               	movwf	___awdiv@quotient+1,c
 16530  003AEE  0E00               	movlw	0
 16531  003AF0  6E1D               	movwf	___awdiv@quotient,c
 16532  003AF2  5019               	movf	___awdiv@divisor,w,c
 16533  003AF4  101A               	iorwf	___awdiv@divisor+1,w,c
 16534  003AF6  B4D8               	btfsc	status,2,c
 16535  003AF8  D021               	goto	l8361
 16536  003AFA  0E01               	movlw	1
 16537  003AFC  6E1B               	movwf	___awdiv@counter,c
 16538  003AFE  D005               	goto	l8347
 16539  003B00                     l8345:
 16540  003B00  90D8               	bcf	status,0,c
 16541  003B02  3619               	rlcf	___awdiv@divisor,f,c
 16542  003B04  361A               	rlcf	___awdiv@divisor+1,f,c
 16543  003B06  2A1B               	incf	___awdiv@counter,f,c
 16544  003B08  D000               	goto	l8347
 16545  003B0A                     l8347:
 16546  003B0A  BE1A               	btfsc	___awdiv@divisor+1,7,c
 16547  003B0C  D002               	goto	l8349
 16548  003B0E  D7F8               	goto	l8345
 16549  003B10  D000               	goto	l8349
 16550  003B12                     l8349:
 16551  003B12  90D8               	bcf	status,0,c
 16552  003B14  361D               	rlcf	___awdiv@quotient,f,c
 16553  003B16  361E               	rlcf	___awdiv@quotient+1,f,c
 16554  003B18  5019               	movf	___awdiv@divisor,w,c
 16555  003B1A  5C17               	subwf	___awdiv@dividend,w,c
 16556  003B1C  501A               	movf	___awdiv@divisor+1,w,c
 16557  003B1E  5818               	subwfb	___awdiv@dividend+1,w,c
 16558  003B20  A0D8               	btfss	status,0,c
 16559  003B22  D006               	goto	l8357
 16560  003B24  5019               	movf	___awdiv@divisor,w,c
 16561  003B26  5E17               	subwf	___awdiv@dividend,f,c
 16562  003B28  501A               	movf	___awdiv@divisor+1,w,c
 16563  003B2A  5A18               	subwfb	___awdiv@dividend+1,f,c
 16564  003B2C  801D               	bsf	___awdiv@quotient,0,c
 16565  003B2E  D000               	goto	l8357
 16566  003B30                     l8357:
 16567  003B30  90D8               	bcf	status,0,c
 16568  003B32  321A               	rrcf	___awdiv@divisor+1,f,c
 16569  003B34  3219               	rrcf	___awdiv@divisor,f,c
 16570  003B36  2E1B               	decfsz	___awdiv@counter,f,c
 16571  003B38  D7EC               	goto	l8349
 16572  003B3A  D000               	goto	l8361
 16573  003B3C                     l8361:
 16574  003B3C  501C               	movf	___awdiv@sign,w,c
 16575  003B3E  B4D8               	btfsc	status,2,c
 16576  003B40  D005               	goto	l8365
 16577  003B42  6C1D               	negf	___awdiv@quotient,c
 16578  003B44  1E1E               	comf	___awdiv@quotient+1,f,c
 16579  003B46  B0D8               	btfsc	status,0,c
 16580  003B48  2A1E               	incf	___awdiv@quotient+1,f,c
 16581  003B4A  D000               	goto	l8365
 16582  003B4C                     l8365:
 16583  003B4C  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 16584  003B50  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 16585  003B54  D000               	goto	l1672
 16586  003B56                     l1672:
 16587  003B56  0012               	return		;funcret
 16588  003B58                     __end_of___awdiv:
 16589                           	opt stack 0
 16590                           tblptru	equ	0xFF8
 16591                           tblptrh	equ	0xFF7
 16592                           tblptrl	equ	0xFF6
 16593                           tablat	equ	0xFF5
 16594                           prodh	equ	0xFF4
 16595                           prodl	equ	0xFF3
 16596                           intcon	equ	0xFF2
 16597                           intcon2	equ	0xFF1
 16598                           intcon3	equ	0xFF0
 16599                           postinc0	equ	0xFEE
 16600                           wreg	equ	0xFE8
 16601                           postdec1	equ	0xFE5
 16602                           plusw1	equ	0xFE3
 16603                           fsr1l	equ	0xFE1
 16604                           indf2	equ	0xFDF
 16605                           postinc2	equ	0xFDE
 16606                           postdec2	equ	0xFDD
 16607                           plusw2	equ	0xFDB
 16608                           fsr2h	equ	0xFDA
 16609                           fsr2l	equ	0xFD9
 16610                           status	equ	0xFD8
 16611                           
 16612 ;; *************** function __tdiv_to_l_ *****************
 16613 ;; Defined at:
 16614 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 16615 ;; Parameters:    Size  Location     Type
 16616 ;;  f1              3   16[COMRAM] float 
 16617 ;;  f2              3   19[COMRAM] float 
 16618 ;; Auto vars:     Size  Location     Type
 16619 ;;  quot            4   25[COMRAM] unsigned long 
 16620 ;;  exp1            1   30[COMRAM] unsigned char 
 16621 ;;  cntr            1   29[COMRAM] unsigned char 
 16622 ;; Return value:  Size  Location     Type
 16623 ;;                  4   16[COMRAM] unsigned long 
 16624 ;; Registers used:
 16625 ;;		wreg, status,2, status,0
 16626 ;; Tracked objects:
 16627 ;;		On entry : 0/0
 16628 ;;		On exit  : 0/0
 16629 ;;		Unchanged: 0/0
 16630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16631 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16632 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16633 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16634 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16635 ;;Total ram usage:       15 bytes
 16636 ;; Hardware stack levels used:    1
 16637 ;; Hardware stack levels required when called:    2
 16638 ;; This function calls:
 16639 ;;		Nothing
 16640 ;; This function is called by:
 16641 ;;		_printf
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           	psect	text70
 16646  002E2E                     __ptext70:
 16647                           	opt stack 0
 16648  002E2E                     __tdiv_to_l_:
 16649                           	opt stack 27
 16650                           
 16651                           ;incstack = 0
 16652  002E2E  C013  F017         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 16653  002E32  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16654  002E34  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16655  002E36  3412               	rlcf	__tdiv_to_l_@f1+1,w,c
 16656  002E38  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16657  002E3A  E301               	bnc	u7151
 16658  002E3C  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16659  002E3E                     u7151:
 16660  002E3E  5017               	movf	??__tdiv_to_l_,w,c
 16661  002E40  6E1F               	movwf	__tdiv_to_l_@exp1,c
 16662  002E42  501F               	movf	__tdiv_to_l_@exp1,w,c
 16663  002E44  A4D8               	btfss	status,2,c
 16664  002E46  D002               	goto	l8631
 16665  002E48  D05D               	goto	l8673
 16666  002E4A  D078               	goto	l1884
 16667  002E4C                     l8631:
 16668  002E4C  C016  F017         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 16669  002E50  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16670  002E52  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16671  002E54  3415               	rlcf	__tdiv_to_l_@f2+1,w,c
 16672  002E56  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16673  002E58  E301               	bnc	u7171
 16674  002E5A  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16675  002E5C                     u7171:
 16676  002E5C  5017               	movf	??__tdiv_to_l_,w,c
 16677  002E5E  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16678  002E60  501E               	movf	__tdiv_to_l_@cntr,w,c
 16679  002E62  A4D8               	btfss	status,2,c
 16680  002E64  D002               	goto	l8637
 16681  002E66  D04E               	goto	l8673
 16682  002E68  D069               	goto	l1884
 16683  002E6A                     l8637:
 16684  002E6A  8E12               	bsf	__tdiv_to_l_@f1+1,7,c
 16685  002E6C  0EFF               	movlw	255
 16686  002E6E  1611               	andwf	__tdiv_to_l_@f1,f,c
 16687  002E70  0EFF               	movlw	255
 16688  002E72  1612               	andwf	__tdiv_to_l_@f1+1,f,c
 16689  002E74  0E00               	movlw	0
 16690  002E76  1613               	andwf	__tdiv_to_l_@f1+2,f,c
 16691  002E78  8E15               	bsf	__tdiv_to_l_@f2+1,7,c
 16692  002E7A  0EFF               	movlw	255
 16693  002E7C  1614               	andwf	__tdiv_to_l_@f2,f,c
 16694  002E7E  0EFF               	movlw	255
 16695  002E80  1615               	andwf	__tdiv_to_l_@f2+1,f,c
 16696  002E82  0E00               	movlw	0
 16697  002E84  1616               	andwf	__tdiv_to_l_@f2+2,f,c
 16698  002E86  0E00               	movlw	0
 16699  002E88  6E1A               	movwf	__tdiv_to_l_@quot,c
 16700  002E8A  0E00               	movlw	0
 16701  002E8C  6E1B               	movwf	__tdiv_to_l_@quot+1,c
 16702  002E8E  0E00               	movlw	0
 16703  002E90  6E1C               	movwf	__tdiv_to_l_@quot+2,c
 16704  002E92  0E00               	movlw	0
 16705  002E94  6E1D               	movwf	__tdiv_to_l_@quot+3,c
 16706  002E96  0E7F               	movlw	127
 16707  002E98  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 16708  002E9A  501E               	movf	__tdiv_to_l_@cntr,w,c
 16709  002E9C  0F98               	addlw	152
 16710  002E9E  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 16711  002EA0  0E18               	movlw	24
 16712  002EA2  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16713  002EA4                     l1886:
 16714  002EA4  90D8               	bcf	status,0,c
 16715  002EA6  361A               	rlcf	__tdiv_to_l_@quot,f,c
 16716  002EA8  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 16717  002EAA  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 16718  002EAC  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 16719  002EAE  5014               	movf	__tdiv_to_l_@f2,w,c
 16720  002EB0  5C11               	subwf	__tdiv_to_l_@f1,w,c
 16721  002EB2  5015               	movf	__tdiv_to_l_@f2+1,w,c
 16722  002EB4  5812               	subwfb	__tdiv_to_l_@f1+1,w,c
 16723  002EB6  5016               	movf	__tdiv_to_l_@f2+2,w,c
 16724  002EB8  5813               	subwfb	__tdiv_to_l_@f1+2,w,c
 16725  002EBA  A0D8               	btfss	status,0,c
 16726  002EBC  D007               	goto	l1887
 16727  002EBE  5014               	movf	__tdiv_to_l_@f2,w,c
 16728  002EC0  5E11               	subwf	__tdiv_to_l_@f1,f,c
 16729  002EC2  5015               	movf	__tdiv_to_l_@f2+1,w,c
 16730  002EC4  5A12               	subwfb	__tdiv_to_l_@f1+1,f,c
 16731  002EC6  5016               	movf	__tdiv_to_l_@f2+2,w,c
 16732  002EC8  5A13               	subwfb	__tdiv_to_l_@f1+2,f,c
 16733  002ECA  801A               	bsf	__tdiv_to_l_@quot,0,c
 16734  002ECC                     l1887:
 16735  002ECC  90D8               	bcf	status,0,c
 16736  002ECE  3611               	rlcf	__tdiv_to_l_@f1,f,c
 16737  002ED0  3612               	rlcf	__tdiv_to_l_@f1+1,f,c
 16738  002ED2  3613               	rlcf	__tdiv_to_l_@f1+2,f,c
 16739  002ED4  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
 16740  002ED6  D7E6               	goto	l1886
 16741  002ED8  D000               	goto	l8659
 16742  002EDA                     l8659:
 16743  002EDA  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
 16744  002EDC  D010               	goto	l8671
 16745  002EDE  501F               	movf	__tdiv_to_l_@exp1,w,c
 16746  002EE0  0A80               	xorlw	128
 16747  002EE2  0F97               	addlw	151
 16748  002EE4  B0D8               	btfsc	status,0,c
 16749  002EE6  D003               	goto	l8667
 16750  002EE8  D00D               	goto	l8673
 16751  002EEA  D028               	goto	l1884
 16752  002EEC  D000               	goto	l8667
 16753  002EEE                     l8667:
 16754  002EEE  90D8               	bcf	status,0,c
 16755  002EF0  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
 16756  002EF2  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
 16757  002EF4  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
 16758  002EF6  321A               	rrcf	__tdiv_to_l_@quot,f,c
 16759  002EF8  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
 16760  002EFA  D7F9               	goto	l8667
 16761  002EFC  D017               	goto	l1893
 16762  002EFE                     l8671:
 16763  002EFE  0E17               	movlw	23
 16764  002F00  641F               	cpfsgt	__tdiv_to_l_@exp1,c
 16765  002F02  D011               	goto	l8679
 16766  002F04                     l8673:
 16767  002F04  0E00               	movlw	0
 16768  002F06  6E11               	movwf	?__tdiv_to_l_,c
 16769  002F08  0E00               	movlw	0
 16770  002F0A  6E12               	movwf	?__tdiv_to_l_+1,c
 16771  002F0C  0E00               	movlw	0
 16772  002F0E  6E13               	movwf	?__tdiv_to_l_+2,c
 16773  002F10  0E00               	movlw	0
 16774  002F12  6E14               	movwf	?__tdiv_to_l_+3,c
 16775  002F14  D013               	goto	l1884
 16776  002F16  D007               	goto	l8679
 16777  002F18                     l8677:
 16778  002F18  90D8               	bcf	status,0,c
 16779  002F1A  361A               	rlcf	__tdiv_to_l_@quot,f,c
 16780  002F1C  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 16781  002F1E  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 16782  002F20  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 16783  002F22  061F               	decf	__tdiv_to_l_@exp1,f,c
 16784  002F24  D000               	goto	l8679
 16785  002F26                     l8679:
 16786  002F26  501F               	movf	__tdiv_to_l_@exp1,w,c
 16787  002F28  A4D8               	btfss	status,2,c
 16788  002F2A  D7F6               	goto	l8677
 16789  002F2C                     l1893:
 16790  002F2C  C01A  F011         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 16791  002F30  C01B  F012         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 16792  002F34  C01C  F013         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 16793  002F38  C01D  F014         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 16794  002F3C                     l1884:
 16795  002F3C  0012               	return		;funcret
 16796  002F3E                     __end_of__tdiv_to_l_:
 16797                           	opt stack 0
 16798                           tblptru	equ	0xFF8
 16799                           tblptrh	equ	0xFF7
 16800                           tblptrl	equ	0xFF6
 16801                           tablat	equ	0xFF5
 16802                           prodh	equ	0xFF4
 16803                           prodl	equ	0xFF3
 16804                           intcon	equ	0xFF2
 16805                           intcon2	equ	0xFF1
 16806                           intcon3	equ	0xFF0
 16807                           postinc0	equ	0xFEE
 16808                           wreg	equ	0xFE8
 16809                           postdec1	equ	0xFE5
 16810                           plusw1	equ	0xFE3
 16811                           fsr1l	equ	0xFE1
 16812                           indf2	equ	0xFDF
 16813                           postinc2	equ	0xFDE
 16814                           postdec2	equ	0xFDD
 16815                           plusw2	equ	0xFDB
 16816                           fsr2h	equ	0xFDA
 16817                           fsr2l	equ	0xFD9
 16818                           status	equ	0xFD8
 16819                           
 16820 ;; *************** function __div_to_l_ *****************
 16821 ;; Defined at:
 16822 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 16823 ;; Parameters:    Size  Location     Type
 16824 ;;  f1              3   16[COMRAM] unsigned long 
 16825 ;;  f2              3   19[COMRAM] unsigned long 
 16826 ;; Auto vars:     Size  Location     Type
 16827 ;;  quot            4   22[COMRAM] unsigned long 
 16828 ;;  exp1            1   27[COMRAM] unsigned char 
 16829 ;;  cntr            1   26[COMRAM] unsigned char 
 16830 ;; Return value:  Size  Location     Type
 16831 ;;                  4   16[COMRAM] unsigned long 
 16832 ;; Registers used:
 16833 ;;		wreg, status,2, status,0
 16834 ;; Tracked objects:
 16835 ;;		On entry : 0/0
 16836 ;;		On exit  : 0/0
 16837 ;;		Unchanged: 0/0
 16838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16839 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16840 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16842 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16843 ;;Total ram usage:       12 bytes
 16844 ;; Hardware stack levels used:    1
 16845 ;; Hardware stack levels required when called:    2
 16846 ;; This function calls:
 16847 ;;		Nothing
 16848 ;; This function is called by:
 16849 ;;		_printf
 16850 ;; This function uses a non-reentrant model
 16851 ;;
 16852                           
 16853                           	psect	text71
 16854  002F3E                     __ptext71:
 16855                           	opt stack 0
 16856  002F3E                     __div_to_l_:
 16857                           	opt stack 27
 16858                           
 16859                           ;incstack = 0
 16860  002F3E  3413               	rlcf	__div_to_l_@f1+2,w,c
 16861  002F40  3414               	rlcf	__div_to_l_@f1+3,w,c
 16862  002F42  6E1C               	movwf	__div_to_l_@exp1,c
 16863  002F44  501C               	movf	__div_to_l_@exp1,w,c
 16864  002F46  A4D8               	btfss	status,2,c
 16865  002F48  D002               	goto	l8687
 16866  002F4A  D061               	goto	l8733
 16867  002F4C  D07C               	goto	l1763
 16868  002F4E                     l8687:
 16869  002F4E  3416               	rlcf	__div_to_l_@f2+2,w,c
 16870  002F50  3417               	rlcf	__div_to_l_@f2+3,w,c
 16871  002F52  6E1B               	movwf	__div_to_l_@cntr,c
 16872  002F54  501B               	movf	__div_to_l_@cntr,w,c
 16873  002F56  A4D8               	btfss	status,2,c
 16874  002F58  D002               	goto	l8693
 16875  002F5A  D059               	goto	l8733
 16876  002F5C  D074               	goto	l1763
 16877  002F5E                     l8693:
 16878  002F5E  8E13               	bsf	__div_to_l_@f1+2,7,c
 16879  002F60  0EFF               	movlw	255
 16880  002F62  1611               	andwf	__div_to_l_@f1,f,c
 16881  002F64  0EFF               	movlw	255
 16882  002F66  1612               	andwf	__div_to_l_@f1+1,f,c
 16883  002F68  0EFF               	movlw	255
 16884  002F6A  1613               	andwf	__div_to_l_@f1+2,f,c
 16885  002F6C  0E00               	movlw	0
 16886  002F6E  1614               	andwf	__div_to_l_@f1+3,f,c
 16887  002F70  8E16               	bsf	__div_to_l_@f2+2,7,c
 16888  002F72  0EFF               	movlw	255
 16889  002F74  1614               	andwf	__div_to_l_@f2,f,c
 16890  002F76  0EFF               	movlw	255
 16891  002F78  1615               	andwf	__div_to_l_@f2+1,f,c
 16892  002F7A  0EFF               	movlw	255
 16893  002F7C  1616               	andwf	__div_to_l_@f2+2,f,c
 16894  002F7E  0E00               	movlw	0
 16895  002F80  1617               	andwf	__div_to_l_@f2+3,f,c
 16896  002F82  0E00               	movlw	0
 16897  002F84  6E17               	movwf	__div_to_l_@quot,c
 16898  002F86  0E00               	movlw	0
 16899  002F88  6E18               	movwf	__div_to_l_@quot+1,c
 16900  002F8A  0E00               	movlw	0
 16901  002F8C  6E19               	movwf	__div_to_l_@quot+2,c
 16902  002F8E  0E00               	movlw	0
 16903  002F90  6E1A               	movwf	__div_to_l_@quot+3,c
 16904  002F92  0E7F               	movlw	127
 16905  002F94  5E1C               	subwf	__div_to_l_@exp1,f,c
 16906  002F96  501B               	movf	__div_to_l_@cntr,w,c
 16907  002F98  0FA0               	addlw	160
 16908  002F9A  5E1C               	subwf	__div_to_l_@exp1,f,c
 16909  002F9C  0E20               	movlw	32
 16910  002F9E  6E1B               	movwf	__div_to_l_@cntr,c
 16911  002FA0  D000               	goto	l8707
 16912  002FA2                     l8707:
 16913  002FA2  90D8               	bcf	status,0,c
 16914  002FA4  3617               	rlcf	__div_to_l_@quot,f,c
 16915  002FA6  3618               	rlcf	__div_to_l_@quot+1,f,c
 16916  002FA8  3619               	rlcf	__div_to_l_@quot+2,f,c
 16917  002FAA  361A               	rlcf	__div_to_l_@quot+3,f,c
 16918  002FAC  5014               	movf	__div_to_l_@f2,w,c
 16919  002FAE  5C11               	subwf	__div_to_l_@f1,w,c
 16920  002FB0  5015               	movf	__div_to_l_@f2+1,w,c
 16921  002FB2  5812               	subwfb	__div_to_l_@f1+1,w,c
 16922  002FB4  5016               	movf	__div_to_l_@f2+2,w,c
 16923  002FB6  5813               	subwfb	__div_to_l_@f1+2,w,c
 16924  002FB8  5017               	movf	__div_to_l_@f2+3,w,c
 16925  002FBA  5814               	subwfb	__div_to_l_@f1+3,w,c
 16926  002FBC  A0D8               	btfss	status,0,c
 16927  002FBE  D00A               	goto	l8715
 16928  002FC0  5014               	movf	__div_to_l_@f2,w,c
 16929  002FC2  5E11               	subwf	__div_to_l_@f1,f,c
 16930  002FC4  5015               	movf	__div_to_l_@f2+1,w,c
 16931  002FC6  5A12               	subwfb	__div_to_l_@f1+1,f,c
 16932  002FC8  5016               	movf	__div_to_l_@f2+2,w,c
 16933  002FCA  5A13               	subwfb	__div_to_l_@f1+2,f,c
 16934  002FCC  5017               	movf	__div_to_l_@f2+3,w,c
 16935  002FCE  5A14               	subwfb	__div_to_l_@f1+3,f,c
 16936  002FD0  8017               	bsf	__div_to_l_@quot,0,c
 16937  002FD2  D000               	goto	l8715
 16938  002FD4                     l8715:
 16939  002FD4  90D8               	bcf	status,0,c
 16940  002FD6  3611               	rlcf	__div_to_l_@f1,f,c
 16941  002FD8  3612               	rlcf	__div_to_l_@f1+1,f,c
 16942  002FDA  3613               	rlcf	__div_to_l_@f1+2,f,c
 16943  002FDC  3614               	rlcf	__div_to_l_@f1+3,f,c
 16944  002FDE  2E1B               	decfsz	__div_to_l_@cntr,f,c
 16945  002FE0  D7E0               	goto	l8707
 16946  002FE2  D000               	goto	l8719
 16947  002FE4                     l8719:
 16948  002FE4  AE1C               	btfss	__div_to_l_@exp1,7,c
 16949  002FE6  D010               	goto	l8731
 16950  002FE8  501C               	movf	__div_to_l_@exp1,w,c
 16951  002FEA  0A80               	xorlw	128
 16952  002FEC  0F9F               	addlw	159
 16953  002FEE  B0D8               	btfsc	status,0,c
 16954  002FF0  D003               	goto	l8727
 16955  002FF2  D00D               	goto	l8733
 16956  002FF4  D028               	goto	l1763
 16957  002FF6  D000               	goto	l8727
 16958  002FF8                     l8727:
 16959  002FF8  90D8               	bcf	status,0,c
 16960  002FFA  321A               	rrcf	__div_to_l_@quot+3,f,c
 16961  002FFC  3219               	rrcf	__div_to_l_@quot+2,f,c
 16962  002FFE  3218               	rrcf	__div_to_l_@quot+1,f,c
 16963  003000  3217               	rrcf	__div_to_l_@quot,f,c
 16964  003002  3E1C               	incfsz	__div_to_l_@exp1,f,c
 16965  003004  D7F9               	goto	l8727
 16966  003006  D017               	goto	l1772
 16967  003008                     l8731:
 16968  003008  0E1F               	movlw	31
 16969  00300A  641C               	cpfsgt	__div_to_l_@exp1,c
 16970  00300C  D011               	goto	l8739
 16971  00300E                     l8733:
 16972  00300E  0E00               	movlw	0
 16973  003010  6E11               	movwf	?__div_to_l_,c
 16974  003012  0E00               	movlw	0
 16975  003014  6E12               	movwf	?__div_to_l_+1,c
 16976  003016  0E00               	movlw	0
 16977  003018  6E13               	movwf	?__div_to_l_+2,c
 16978  00301A  0E00               	movlw	0
 16979  00301C  6E14               	movwf	?__div_to_l_+3,c
 16980  00301E  D013               	goto	l1763
 16981  003020  D007               	goto	l8739
 16982  003022                     l8737:
 16983  003022  90D8               	bcf	status,0,c
 16984  003024  3617               	rlcf	__div_to_l_@quot,f,c
 16985  003026  3618               	rlcf	__div_to_l_@quot+1,f,c
 16986  003028  3619               	rlcf	__div_to_l_@quot+2,f,c
 16987  00302A  361A               	rlcf	__div_to_l_@quot+3,f,c
 16988  00302C  061C               	decf	__div_to_l_@exp1,f,c
 16989  00302E  D000               	goto	l8739
 16990  003030                     l8739:
 16991  003030  501C               	movf	__div_to_l_@exp1,w,c
 16992  003032  A4D8               	btfss	status,2,c
 16993  003034  D7F6               	goto	l8737
 16994  003036                     l1772:
 16995  003036  C017  F011         	movff	__div_to_l_@quot,?__div_to_l_
 16996  00303A  C018  F012         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 16997  00303E  C019  F013         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 16998  003042  C01A  F014         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 16999  003046                     l1763:
 17000  003046  0012               	return		;funcret
 17001  003048                     __end_of__div_to_l_:
 17002                           	opt stack 0
 17003                           tblptru	equ	0xFF8
 17004                           tblptrh	equ	0xFF7
 17005                           tblptrl	equ	0xFF6
 17006                           tablat	equ	0xFF5
 17007                           prodh	equ	0xFF4
 17008                           prodl	equ	0xFF3
 17009                           intcon	equ	0xFF2
 17010                           intcon2	equ	0xFF1
 17011                           intcon3	equ	0xFF0
 17012                           postinc0	equ	0xFEE
 17013                           wreg	equ	0xFE8
 17014                           postdec1	equ	0xFE5
 17015                           plusw1	equ	0xFE3
 17016                           fsr1l	equ	0xFE1
 17017                           indf2	equ	0xFDF
 17018                           postinc2	equ	0xFDE
 17019                           postdec2	equ	0xFDD
 17020                           plusw2	equ	0xFDB
 17021                           fsr2h	equ	0xFDA
 17022                           fsr2l	equ	0xFD9
 17023                           status	equ	0xFD8
 17024                           
 17025 ;; *************** function ___lltoft *****************
 17026 ;; Defined at:
 17027 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 17028 ;; Parameters:    Size  Location     Type
 17029 ;;  c               4   24[COMRAM] unsigned long 
 17030 ;; Auto vars:     Size  Location     Type
 17031 ;;  exp             1   32[COMRAM] unsigned char 
 17032 ;; Return value:  Size  Location     Type
 17033 ;;                  3   24[COMRAM] float 
 17034 ;; Registers used:
 17035 ;;		wreg, status,2, status,0, cstack
 17036 ;; Tracked objects:
 17037 ;;		On entry : 0/0
 17038 ;;		On exit  : 0/0
 17039 ;;		Unchanged: 0/0
 17040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17042 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17043 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17044 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17045 ;;Total ram usage:        9 bytes
 17046 ;; Hardware stack levels used:    1
 17047 ;; Hardware stack levels required when called:    3
 17048 ;; This function calls:
 17049 ;;		___ftpack
 17050 ;; This function is called by:
 17051 ;;		_printf
 17052 ;; This function uses a non-reentrant model
 17053 ;;
 17054                           
 17055                           	psect	text72
 17056  0041C2                     __ptext72:
 17057                           	opt stack 0
 17058  0041C2                     ___lltoft:
 17059                           	opt stack 26
 17060                           
 17061                           ;incstack = 0
 17062  0041C2  0E8E               	movlw	142
 17063  0041C4  6E21               	movwf	___lltoft@exp,c
 17064  0041C6  D007               	goto	l8859
 17065  0041C8                     l8857:
 17066  0041C8  90D8               	bcf	status,0,c
 17067  0041CA  321C               	rrcf	___lltoft@c+3,f,c
 17068  0041CC  321B               	rrcf	___lltoft@c+2,f,c
 17069  0041CE  321A               	rrcf	___lltoft@c+1,f,c
 17070  0041D0  3219               	rrcf	___lltoft@c,f,c
 17071  0041D2  2A21               	incf	___lltoft@exp,f,c
 17072  0041D4  D000               	goto	l8859
 17073  0041D6                     l8859:
 17074  0041D6  0E00               	movlw	0
 17075  0041D8  1419               	andwf	___lltoft@c,w,c
 17076  0041DA  6E1D               	movwf	??___lltoft& (0+255),c
 17077  0041DC  0E00               	movlw	0
 17078  0041DE  141A               	andwf	___lltoft@c+1,w,c
 17079  0041E0  6E1E               	movwf	(??___lltoft+1)& (0+255),c
 17080  0041E2  0E00               	movlw	0
 17081  0041E4  141B               	andwf	___lltoft@c+2,w,c
 17082  0041E6  6E1F               	movwf	(??___lltoft+2)& (0+255),c
 17083  0041E8  0EFF               	movlw	255
 17084  0041EA  141C               	andwf	___lltoft@c+3,w,c
 17085  0041EC  6E20               	movwf	(??___lltoft+3)& (0+255),c
 17086  0041EE  501D               	movf	??___lltoft,w,c
 17087  0041F0  101E               	iorwf	??___lltoft+1,w,c
 17088  0041F2  101F               	iorwf	??___lltoft+2,w,c
 17089  0041F4  1020               	iorwf	??___lltoft+3,w,c
 17090  0041F6  A4D8               	btfss	status,2,c
 17091  0041F8  D7E7               	goto	l8857
 17092  0041FA  C019  F011         	movff	___lltoft@c,___ftpack@arg
 17093  0041FE  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
 17094  004202  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
 17095  004206  C021  F014         	movff	___lltoft@exp,___ftpack@exp
 17096  00420A  0E00               	movlw	0
 17097  00420C  6E15               	movwf	___ftpack@sign,c
 17098  00420E  EC51  F01B         	call	___ftpack	;wreg free
 17099  004212  C011  F019         	movff	?___ftpack,?___lltoft
 17100  004216  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
 17101  00421A  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
 17102  00421E  D000               	goto	l2003
 17103  004220                     l2003:
 17104  004220  0012               	return		;funcret
 17105  004222                     __end_of___lltoft:
 17106                           	opt stack 0
 17107                           tblptru	equ	0xFF8
 17108                           tblptrh	equ	0xFF7
 17109                           tblptrl	equ	0xFF6
 17110                           tablat	equ	0xFF5
 17111                           prodh	equ	0xFF4
 17112                           prodl	equ	0xFF3
 17113                           intcon	equ	0xFF2
 17114                           intcon2	equ	0xFF1
 17115                           intcon3	equ	0xFF0
 17116                           postinc0	equ	0xFEE
 17117                           wreg	equ	0xFE8
 17118                           postdec1	equ	0xFE5
 17119                           plusw1	equ	0xFE3
 17120                           fsr1l	equ	0xFE1
 17121                           indf2	equ	0xFDF
 17122                           postinc2	equ	0xFDE
 17123                           postdec2	equ	0xFDD
 17124                           plusw2	equ	0xFDB
 17125                           fsr2h	equ	0xFDA
 17126                           fsr2l	equ	0xFD9
 17127                           status	equ	0xFD8
 17128                           
 17129 ;; *************** function ___llmod *****************
 17130 ;; Defined at:
 17131 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 17132 ;; Parameters:    Size  Location     Type
 17133 ;;  dividend        4   29[COMRAM] unsigned long 
 17134 ;;  divisor         4   33[COMRAM] unsigned long 
 17135 ;; Auto vars:     Size  Location     Type
 17136 ;;  counter         1   37[COMRAM] unsigned char 
 17137 ;; Return value:  Size  Location     Type
 17138 ;;                  4   29[COMRAM] unsigned long 
 17139 ;; Registers used:
 17140 ;;		wreg, status,2, status,0
 17141 ;; Tracked objects:
 17142 ;;		On entry : 0/0
 17143 ;;		On exit  : 0/0
 17144 ;;		Unchanged: 0/0
 17145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17146 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17147 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17149 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17150 ;;Total ram usage:        9 bytes
 17151 ;; Hardware stack levels used:    1
 17152 ;; Hardware stack levels required when called:    2
 17153 ;; This function calls:
 17154 ;;		Nothing
 17155 ;; This function is called by:
 17156 ;;		_printf
 17157 ;; This function uses a non-reentrant model
 17158 ;;
 17159                           
 17160                           	psect	text73
 17161  003FA2                     __ptext73:
 17162                           	opt stack 0
 17163  003FA2                     ___llmod:
 17164                           	opt stack 27
 17165                           
 17166                           ;incstack = 0
 17167  003FA2  5022               	movf	___llmod@divisor,w,c
 17168  003FA4  1023               	iorwf	___llmod@divisor+1,w,c
 17169  003FA6  1024               	iorwf	___llmod@divisor+2,w,c
 17170  003FA8  1025               	iorwf	___llmod@divisor+3,w,c
 17171  003FAA  B4D8               	btfsc	status,2,c
 17172  003FAC  D029               	goto	l1983
 17173  003FAE  0E01               	movlw	1
 17174  003FB0  6E26               	movwf	___llmod@counter,c
 17175  003FB2  D007               	goto	l8845
 17176  003FB4                     l8843:
 17177  003FB4  90D8               	bcf	status,0,c
 17178  003FB6  3622               	rlcf	___llmod@divisor,f,c
 17179  003FB8  3623               	rlcf	___llmod@divisor+1,f,c
 17180  003FBA  3624               	rlcf	___llmod@divisor+2,f,c
 17181  003FBC  3625               	rlcf	___llmod@divisor+3,f,c
 17182  003FBE  2A26               	incf	___llmod@counter,f,c
 17183  003FC0  D000               	goto	l8845
 17184  003FC2                     l8845:
 17185  003FC2  BE25               	btfsc	___llmod@divisor+3,7,c
 17186  003FC4  D002               	goto	l8847
 17187  003FC6  D7F6               	goto	l8843
 17188  003FC8  D000               	goto	l8847
 17189  003FCA                     l8847:
 17190  003FCA  5022               	movf	___llmod@divisor,w,c
 17191  003FCC  5C1E               	subwf	___llmod@dividend,w,c
 17192  003FCE  5023               	movf	___llmod@divisor+1,w,c
 17193  003FD0  581F               	subwfb	___llmod@dividend+1,w,c
 17194  003FD2  5024               	movf	___llmod@divisor+2,w,c
 17195  003FD4  5820               	subwfb	___llmod@dividend+2,w,c
 17196  003FD6  5025               	movf	___llmod@divisor+3,w,c
 17197  003FD8  5821               	subwfb	___llmod@dividend+3,w,c
 17198  003FDA  A0D8               	btfss	status,0,c
 17199  003FDC  D009               	goto	l8851
 17200  003FDE  5022               	movf	___llmod@divisor,w,c
 17201  003FE0  5E1E               	subwf	___llmod@dividend,f,c
 17202  003FE2  5023               	movf	___llmod@divisor+1,w,c
 17203  003FE4  5A1F               	subwfb	___llmod@dividend+1,f,c
 17204  003FE6  5024               	movf	___llmod@divisor+2,w,c
 17205  003FE8  5A20               	subwfb	___llmod@dividend+2,f,c
 17206  003FEA  5025               	movf	___llmod@divisor+3,w,c
 17207  003FEC  5A21               	subwfb	___llmod@dividend+3,f,c
 17208  003FEE  D000               	goto	l8851
 17209  003FF0                     l8851:
 17210  003FF0  90D8               	bcf	status,0,c
 17211  003FF2  3225               	rrcf	___llmod@divisor+3,f,c
 17212  003FF4  3224               	rrcf	___llmod@divisor+2,f,c
 17213  003FF6  3223               	rrcf	___llmod@divisor+1,f,c
 17214  003FF8  3222               	rrcf	___llmod@divisor,f,c
 17215  003FFA  2E26               	decfsz	___llmod@counter,f,c
 17216  003FFC  D7E6               	goto	l8847
 17217  003FFE  D000               	goto	l1983
 17218  004000                     l1983:
 17219  004000  C01E  F01E         	movff	___llmod@dividend,?___llmod
 17220  004004  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
 17221  004008  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
 17222  00400C  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
 17223  004010  0012               	return		;funcret
 17224  004012                     __end_of___llmod:
 17225                           	opt stack 0
 17226                           tblptru	equ	0xFF8
 17227                           tblptrh	equ	0xFF7
 17228                           tblptrl	equ	0xFF6
 17229                           tablat	equ	0xFF5
 17230                           prodh	equ	0xFF4
 17231                           prodl	equ	0xFF3
 17232                           intcon	equ	0xFF2
 17233                           intcon2	equ	0xFF1
 17234                           intcon3	equ	0xFF0
 17235                           postinc0	equ	0xFEE
 17236                           wreg	equ	0xFE8
 17237                           postdec1	equ	0xFE5
 17238                           plusw1	equ	0xFE3
 17239                           fsr1l	equ	0xFE1
 17240                           indf2	equ	0xFDF
 17241                           postinc2	equ	0xFDE
 17242                           postdec2	equ	0xFDD
 17243                           plusw2	equ	0xFDB
 17244                           fsr2h	equ	0xFDA
 17245                           fsr2l	equ	0xFD9
 17246                           status	equ	0xFD8
 17247                           
 17248 ;; *************** function ___lldiv *****************
 17249 ;; Defined at:
 17250 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 17251 ;; Parameters:    Size  Location     Type
 17252 ;;  dividend        4   16[COMRAM] unsigned long 
 17253 ;;  divisor         4   20[COMRAM] unsigned long 
 17254 ;; Auto vars:     Size  Location     Type
 17255 ;;  quotient        4   24[COMRAM] unsigned long 
 17256 ;;  counter         1   28[COMRAM] unsigned char 
 17257 ;; Return value:  Size  Location     Type
 17258 ;;                  4   16[COMRAM] unsigned long 
 17259 ;; Registers used:
 17260 ;;		wreg, status,2, status,0
 17261 ;; Tracked objects:
 17262 ;;		On entry : 0/0
 17263 ;;		On exit  : 0/0
 17264 ;;		Unchanged: 0/0
 17265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17266 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17267 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17269 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17270 ;;Total ram usage:       13 bytes
 17271 ;; Hardware stack levels used:    1
 17272 ;; Hardware stack levels required when called:    2
 17273 ;; This function calls:
 17274 ;;		Nothing
 17275 ;; This function is called by:
 17276 ;;		_printf
 17277 ;; This function uses a non-reentrant model
 17278 ;;
 17279                           
 17280                           	psect	text74
 17281  003C7E                     __ptext74:
 17282                           	opt stack 0
 17283  003C7E                     ___lldiv:
 17284                           	opt stack 27
 17285                           
 17286                           ;incstack = 0
 17287  003C7E  0E00               	movlw	0
 17288  003C80  6E19               	movwf	___lldiv@quotient,c
 17289  003C82  0E00               	movlw	0
 17290  003C84  6E1A               	movwf	___lldiv@quotient+1,c
 17291  003C86  0E00               	movlw	0
 17292  003C88  6E1B               	movwf	___lldiv@quotient+2,c
 17293  003C8A  0E00               	movlw	0
 17294  003C8C  6E1C               	movwf	___lldiv@quotient+3,c
 17295  003C8E  5015               	movf	___lldiv@divisor,w,c
 17296  003C90  1016               	iorwf	___lldiv@divisor+1,w,c
 17297  003C92  1017               	iorwf	___lldiv@divisor+2,w,c
 17298  003C94  1018               	iorwf	___lldiv@divisor+3,w,c
 17299  003C96  B4D8               	btfsc	status,2,c
 17300  003C98  D02F               	goto	l1973
 17301  003C9A  0E01               	movlw	1
 17302  003C9C  6E1D               	movwf	___lldiv@counter,c
 17303  003C9E  D007               	goto	l8825
 17304  003CA0                     l8823:
 17305  003CA0  90D8               	bcf	status,0,c
 17306  003CA2  3615               	rlcf	___lldiv@divisor,f,c
 17307  003CA4  3616               	rlcf	___lldiv@divisor+1,f,c
 17308  003CA6  3617               	rlcf	___lldiv@divisor+2,f,c
 17309  003CA8  3618               	rlcf	___lldiv@divisor+3,f,c
 17310  003CAA  2A1D               	incf	___lldiv@counter,f,c
 17311  003CAC  D000               	goto	l8825
 17312  003CAE                     l8825:
 17313  003CAE  BE18               	btfsc	___lldiv@divisor+3,7,c
 17314  003CB0  D002               	goto	l8827
 17315  003CB2  D7F6               	goto	l8823
 17316  003CB4  D000               	goto	l8827
 17317  003CB6                     l8827:
 17318  003CB6  90D8               	bcf	status,0,c
 17319  003CB8  3619               	rlcf	___lldiv@quotient,f,c
 17320  003CBA  361A               	rlcf	___lldiv@quotient+1,f,c
 17321  003CBC  361B               	rlcf	___lldiv@quotient+2,f,c
 17322  003CBE  361C               	rlcf	___lldiv@quotient+3,f,c
 17323  003CC0  5015               	movf	___lldiv@divisor,w,c
 17324  003CC2  5C11               	subwf	___lldiv@dividend,w,c
 17325  003CC4  5016               	movf	___lldiv@divisor+1,w,c
 17326  003CC6  5812               	subwfb	___lldiv@dividend+1,w,c
 17327  003CC8  5017               	movf	___lldiv@divisor+2,w,c
 17328  003CCA  5813               	subwfb	___lldiv@dividend+2,w,c
 17329  003CCC  5018               	movf	___lldiv@divisor+3,w,c
 17330  003CCE  5814               	subwfb	___lldiv@dividend+3,w,c
 17331  003CD0  A0D8               	btfss	status,0,c
 17332  003CD2  D00A               	goto	l8835
 17333  003CD4  5015               	movf	___lldiv@divisor,w,c
 17334  003CD6  5E11               	subwf	___lldiv@dividend,f,c
 17335  003CD8  5016               	movf	___lldiv@divisor+1,w,c
 17336  003CDA  5A12               	subwfb	___lldiv@dividend+1,f,c
 17337  003CDC  5017               	movf	___lldiv@divisor+2,w,c
 17338  003CDE  5A13               	subwfb	___lldiv@dividend+2,f,c
 17339  003CE0  5018               	movf	___lldiv@divisor+3,w,c
 17340  003CE2  5A14               	subwfb	___lldiv@dividend+3,f,c
 17341  003CE4  8019               	bsf	___lldiv@quotient,0,c
 17342  003CE6  D000               	goto	l8835
 17343  003CE8                     l8835:
 17344  003CE8  90D8               	bcf	status,0,c
 17345  003CEA  3218               	rrcf	___lldiv@divisor+3,f,c
 17346  003CEC  3217               	rrcf	___lldiv@divisor+2,f,c
 17347  003CEE  3216               	rrcf	___lldiv@divisor+1,f,c
 17348  003CF0  3215               	rrcf	___lldiv@divisor,f,c
 17349  003CF2  2E1D               	decfsz	___lldiv@counter,f,c
 17350  003CF4  D7E0               	goto	l8827
 17351  003CF6  D000               	goto	l1973
 17352  003CF8                     l1973:
 17353  003CF8  C019  F011         	movff	___lldiv@quotient,?___lldiv
 17354  003CFC  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 17355  003D00  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 17356  003D04  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 17357  003D08  0012               	return		;funcret
 17358  003D0A                     __end_of___lldiv:
 17359                           	opt stack 0
 17360                           tblptru	equ	0xFF8
 17361                           tblptrh	equ	0xFF7
 17362                           tblptrl	equ	0xFF6
 17363                           tablat	equ	0xFF5
 17364                           prodh	equ	0xFF4
 17365                           prodl	equ	0xFF3
 17366                           intcon	equ	0xFF2
 17367                           intcon2	equ	0xFF1
 17368                           intcon3	equ	0xFF0
 17369                           postinc0	equ	0xFEE
 17370                           wreg	equ	0xFE8
 17371                           postdec1	equ	0xFE5
 17372                           plusw1	equ	0xFE3
 17373                           fsr1l	equ	0xFE1
 17374                           indf2	equ	0xFDF
 17375                           postinc2	equ	0xFDE
 17376                           postdec2	equ	0xFDD
 17377                           plusw2	equ	0xFDB
 17378                           fsr2h	equ	0xFDA
 17379                           fsr2l	equ	0xFD9
 17380                           status	equ	0xFD8
 17381                           
 17382 ;; *************** function ___ftsub *****************
 17383 ;; Defined at:
 17384 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 17385 ;; Parameters:    Size  Location     Type
 17386 ;;  f1              3   88[COMRAM] float 
 17387 ;;  f2              3   91[COMRAM] float 
 17388 ;; Auto vars:     Size  Location     Type
 17389 ;;		None
 17390 ;; Return value:  Size  Location     Type
 17391 ;;                  3   88[COMRAM] float 
 17392 ;; Registers used:
 17393 ;;		wreg, status,2, status,0, cstack
 17394 ;; Tracked objects:
 17395 ;;		On entry : 0/0
 17396 ;;		On exit  : 0/0
 17397 ;;		Unchanged: 0/0
 17398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17399 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17402 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17403 ;;Total ram usage:        6 bytes
 17404 ;; Hardware stack levels used:    1
 17405 ;; Hardware stack levels required when called:    4
 17406 ;; This function calls:
 17407 ;;		___ftadd
 17408 ;; This function is called by:
 17409 ;;		_printf
 17410 ;; This function uses a non-reentrant model
 17411 ;;
 17412                           
 17413                           	psect	text75
 17414  0044A6                     __ptext75:
 17415                           	opt stack 0
 17416  0044A6                     ___ftsub:
 17417                           	opt stack 25
 17418                           
 17419                           ;incstack = 0
 17420  0044A6  505C               	movf	___ftsub@f2,w,c
 17421  0044A8  105D               	iorwf	___ftsub@f2+1,w,c
 17422  0044AA  105E               	iorwf	___ftsub@f2+2,w,c
 17423  0044AC  B4D8               	btfsc	status,2,c
 17424  0044AE  D007               	goto	l8745
 17425  0044B0  0E00               	movlw	0
 17426  0044B2  1A5C               	xorwf	___ftsub@f2,f,c
 17427  0044B4  0E00               	movlw	0
 17428  0044B6  1A5D               	xorwf	___ftsub@f2+1,f,c
 17429  0044B8  0E80               	movlw	128
 17430  0044BA  1A5E               	xorwf	___ftsub@f2+2,f,c
 17431  0044BC  D000               	goto	l8745
 17432  0044BE                     l8745:
 17433  0044BE  C059  F04D         	movff	___ftsub@f1,___ftadd@f1
 17434  0044C2  C05A  F04E         	movff	___ftsub@f1+1,___ftadd@f1+1
 17435  0044C6  C05B  F04F         	movff	___ftsub@f1+2,___ftadd@f1+2
 17436  0044CA  C05C  F050         	movff	___ftsub@f2,___ftadd@f2
 17437  0044CE  C05D  F051         	movff	___ftsub@f2+1,___ftadd@f2+1
 17438  0044D2  C05E  F052         	movff	___ftsub@f2+2,___ftadd@f2+2
 17439  0044D6  ECEA  F011         	call	___ftadd	;wreg free
 17440  0044DA  C04D  F059         	movff	?___ftadd,?___ftsub
 17441  0044DE  C04E  F05A         	movff	?___ftadd+1,?___ftsub+1
 17442  0044E2  C04F  F05B         	movff	?___ftadd+2,?___ftsub+2
 17443  0044E6  D000               	goto	l1925
 17444  0044E8                     l1925:
 17445  0044E8  0012               	return		;funcret
 17446  0044EA                     __end_of___ftsub:
 17447                           	opt stack 0
 17448                           tblptru	equ	0xFF8
 17449                           tblptrh	equ	0xFF7
 17450                           tblptrl	equ	0xFF6
 17451                           tablat	equ	0xFF5
 17452                           prodh	equ	0xFF4
 17453                           prodl	equ	0xFF3
 17454                           intcon	equ	0xFF2
 17455                           intcon2	equ	0xFF1
 17456                           intcon3	equ	0xFF0
 17457                           postinc0	equ	0xFEE
 17458                           wreg	equ	0xFE8
 17459                           postdec1	equ	0xFE5
 17460                           plusw1	equ	0xFE3
 17461                           fsr1l	equ	0xFE1
 17462                           indf2	equ	0xFDF
 17463                           postinc2	equ	0xFDE
 17464                           postdec2	equ	0xFDD
 17465                           plusw2	equ	0xFDB
 17466                           fsr2h	equ	0xFDA
 17467                           fsr2l	equ	0xFD9
 17468                           status	equ	0xFD8
 17469                           
 17470 ;; *************** function ___ftadd *****************
 17471 ;; Defined at:
 17472 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 17473 ;; Parameters:    Size  Location     Type
 17474 ;;  f1              3   76[COMRAM] float 
 17475 ;;  f2              3   79[COMRAM] float 
 17476 ;; Auto vars:     Size  Location     Type
 17477 ;;  exp1            1   87[COMRAM] unsigned char 
 17478 ;;  exp2            1   86[COMRAM] unsigned char 
 17479 ;;  sign            1   85[COMRAM] unsigned char 
 17480 ;; Return value:  Size  Location     Type
 17481 ;;                  3   76[COMRAM] float 
 17482 ;; Registers used:
 17483 ;;		wreg, status,2, status,0, cstack
 17484 ;; Tracked objects:
 17485 ;;		On entry : 0/0
 17486 ;;		On exit  : 0/0
 17487 ;;		Unchanged: 0/0
 17488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17489 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17490 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17491 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17492 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17493 ;;Total ram usage:       12 bytes
 17494 ;; Hardware stack levels used:    1
 17495 ;; Hardware stack levels required when called:    3
 17496 ;; This function calls:
 17497 ;;		___ftpack
 17498 ;; This function is called by:
 17499 ;;		_printf
 17500 ;;		___ftsub
 17501 ;; This function uses a non-reentrant model
 17502 ;;
 17503                           
 17504                           	psect	text76
 17505  0023D4                     __ptext76:
 17506                           	opt stack 0
 17507  0023D4                     ___ftadd:
 17508                           	opt stack 25
 17509                           
 17510                           ;incstack = 0
 17511  0023D4  C04F  F053         	movff	___ftadd@f1+2,??___ftadd
 17512  0023D8  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17513  0023DA  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17514  0023DC  344E               	rlcf	___ftadd@f1+1,w,c
 17515  0023DE  3653               	rlcf	??___ftadd& (0+255),f,c
 17516  0023E0  E301               	bnc	u6521
 17517  0023E2  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17518  0023E4                     u6521:
 17519  0023E4  5053               	movf	??___ftadd,w,c
 17520  0023E6  6E58               	movwf	___ftadd@exp1,c
 17521  0023E8  C052  F053         	movff	___ftadd@f2+2,??___ftadd
 17522  0023EC  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17523  0023EE  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17524  0023F0  3451               	rlcf	___ftadd@f2+1,w,c
 17525  0023F2  3653               	rlcf	??___ftadd& (0+255),f,c
 17526  0023F4  E301               	bnc	u6531
 17527  0023F6  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17528  0023F8                     u6531:
 17529  0023F8  5053               	movf	??___ftadd,w,c
 17530  0023FA  6E57               	movwf	___ftadd@exp2,c
 17531  0023FC  5058               	movf	___ftadd@exp1,w,c
 17532  0023FE  B4D8               	btfsc	status,2,c
 17533  002400  D00B               	goto	l1844
 17534  002402  5057               	movf	___ftadd@exp2,w,c
 17535  002404  5C58               	subwf	___ftadd@exp1,w,c
 17536  002406  B0D8               	btfsc	status,0,c
 17537  002408  D00E               	goto	l8215
 17538  00240A  5058               	movf	___ftadd@exp1,w,c
 17539  00240C  0800               	sublw	0
 17540  00240E  2457               	addwf	___ftadd@exp2,w,c
 17541  002410  6E53               	movwf	??___ftadd& (0+255),c
 17542  002412  0E18               	movlw	24
 17543  002414  6453               	cpfsgt	??___ftadd,c
 17544  002416  D007               	goto	l8215
 17545  002418                     l1844:
 17546  002418  C050  F04D         	movff	___ftadd@f2,?___ftadd
 17547  00241C  C051  F04E         	movff	___ftadd@f2+1,?___ftadd+1
 17548  002420  C052  F04F         	movff	___ftadd@f2+2,?___ftadd+2
 17549  002424  D0B8               	goto	l1845
 17550  002426                     l8215:
 17551  002426  5057               	movf	___ftadd@exp2,w,c
 17552  002428  B4D8               	btfsc	status,2,c
 17553  00242A  D00B               	goto	l1848
 17554  00242C  5058               	movf	___ftadd@exp1,w,c
 17555  00242E  5C57               	subwf	___ftadd@exp2,w,c
 17556  002430  B0D8               	btfsc	status,0,c
 17557  002432  D00E               	goto	l8221
 17558  002434  5057               	movf	___ftadd@exp2,w,c
 17559  002436  0800               	sublw	0
 17560  002438  2458               	addwf	___ftadd@exp1,w,c
 17561  00243A  6E53               	movwf	??___ftadd& (0+255),c
 17562  00243C  0E18               	movlw	24
 17563  00243E  6453               	cpfsgt	??___ftadd,c
 17564  002440  D007               	goto	l8221
 17565  002442                     l1848:
 17566  002442  C04D  F04D         	movff	___ftadd@f1,?___ftadd
 17567  002446  C04E  F04E         	movff	___ftadd@f1+1,?___ftadd+1
 17568  00244A  C04F  F04F         	movff	___ftadd@f1+2,?___ftadd+2
 17569  00244E  D0A3               	goto	l1845
 17570  002450                     l8221:
 17571  002450  0E06               	movlw	6
 17572  002452  6E56               	movwf	___ftadd@sign,c
 17573  002454  AE4F               	btfss	___ftadd@f1+2,7,c
 17574  002456  D002               	goto	l8227
 17575  002458  8E56               	bsf	___ftadd@sign,7,c
 17576  00245A  D000               	goto	l8227
 17577  00245C                     l8227:
 17578  00245C  BE52               	btfsc	___ftadd@f2+2,7,c
 17579  00245E  8C56               	bsf	___ftadd@sign,6,c
 17580  002460  8E4E               	bsf	___ftadd@f1+1,7,c
 17581  002462  0EFF               	movlw	255
 17582  002464  164D               	andwf	___ftadd@f1,f,c
 17583  002466  0EFF               	movlw	255
 17584  002468  164E               	andwf	___ftadd@f1+1,f,c
 17585  00246A  0E00               	movlw	0
 17586  00246C  164F               	andwf	___ftadd@f1+2,f,c
 17587  00246E  8E51               	bsf	___ftadd@f2+1,7,c
 17588  002470  0EFF               	movlw	255
 17589  002472  1650               	andwf	___ftadd@f2,f,c
 17590  002474  0EFF               	movlw	255
 17591  002476  1651               	andwf	___ftadd@f2+1,f,c
 17592  002478  0E00               	movlw	0
 17593  00247A  1652               	andwf	___ftadd@f2+2,f,c
 17594  00247C  5057               	movf	___ftadd@exp2,w,c
 17595  00247E  5C58               	subwf	___ftadd@exp1,w,c
 17596  002480  B0D8               	btfsc	status,0,c
 17597  002482  D01E               	goto	l8247
 17598  002484                     l8237:
 17599  002484  90D8               	bcf	status,0,c
 17600  002486  3650               	rlcf	___ftadd@f2,f,c
 17601  002488  3651               	rlcf	___ftadd@f2+1,f,c
 17602  00248A  3652               	rlcf	___ftadd@f2+2,f,c
 17603  00248C  0657               	decf	___ftadd@exp2,f,c
 17604  00248E  5058               	movf	___ftadd@exp1,w,c
 17605  002490  1857               	xorwf	___ftadd@exp2,w,c
 17606  002492  B4D8               	btfsc	status,2,c
 17607  002494  D00F               	goto	l8245
 17608  002496  0656               	decf	___ftadd@sign,f,c
 17609  002498  C056  F053         	movff	___ftadd@sign,??___ftadd
 17610  00249C  0E07               	movlw	7
 17611  00249E  1653               	andwf	??___ftadd,f,c
 17612  0024A0  B4D8               	btfsc	status,2,c
 17613  0024A2  D008               	goto	l8245
 17614  0024A4  D7EF               	goto	l8237
 17615  0024A6  D006               	goto	l8245
 17616  0024A8                     l8243:
 17617  0024A8  90D8               	bcf	status,0,c
 17618  0024AA  324F               	rrcf	___ftadd@f1+2,f,c
 17619  0024AC  324E               	rrcf	___ftadd@f1+1,f,c
 17620  0024AE  324D               	rrcf	___ftadd@f1,f,c
 17621  0024B0  2A58               	incf	___ftadd@exp1,f,c
 17622  0024B2  D000               	goto	l8245
 17623  0024B4                     l8245:
 17624  0024B4  5057               	movf	___ftadd@exp2,w,c
 17625  0024B6  1858               	xorwf	___ftadd@exp1,w,c
 17626  0024B8  B4D8               	btfsc	status,2,c
 17627  0024BA  D024               	goto	l1859
 17628  0024BC  D7F5               	goto	l8243
 17629  0024BE  D022               	goto	l1859
 17630  0024C0                     l8247:
 17631  0024C0  5058               	movf	___ftadd@exp1,w,c
 17632  0024C2  5C57               	subwf	___ftadd@exp2,w,c
 17633  0024C4  B0D8               	btfsc	status,0,c
 17634  0024C6  D01E               	goto	l1859
 17635  0024C8                     l8249:
 17636  0024C8  90D8               	bcf	status,0,c
 17637  0024CA  364D               	rlcf	___ftadd@f1,f,c
 17638  0024CC  364E               	rlcf	___ftadd@f1+1,f,c
 17639  0024CE  364F               	rlcf	___ftadd@f1+2,f,c
 17640  0024D0  0658               	decf	___ftadd@exp1,f,c
 17641  0024D2  5058               	movf	___ftadd@exp1,w,c
 17642  0024D4  1857               	xorwf	___ftadd@exp2,w,c
 17643  0024D6  B4D8               	btfsc	status,2,c
 17644  0024D8  D00F               	goto	l8257
 17645  0024DA  0656               	decf	___ftadd@sign,f,c
 17646  0024DC  C056  F053         	movff	___ftadd@sign,??___ftadd
 17647  0024E0  0E07               	movlw	7
 17648  0024E2  1653               	andwf	??___ftadd,f,c
 17649  0024E4  B4D8               	btfsc	status,2,c
 17650  0024E6  D008               	goto	l8257
 17651  0024E8  D7EF               	goto	l8249
 17652  0024EA  D006               	goto	l8257
 17653  0024EC                     l8255:
 17654  0024EC  90D8               	bcf	status,0,c
 17655  0024EE  3252               	rrcf	___ftadd@f2+2,f,c
 17656  0024F0  3251               	rrcf	___ftadd@f2+1,f,c
 17657  0024F2  3250               	rrcf	___ftadd@f2,f,c
 17658  0024F4  2A57               	incf	___ftadd@exp2,f,c
 17659  0024F6  D000               	goto	l8257
 17660  0024F8                     l8257:
 17661  0024F8  5057               	movf	___ftadd@exp2,w,c
 17662  0024FA  1858               	xorwf	___ftadd@exp1,w,c
 17663  0024FC  B4D8               	btfsc	status,2,c
 17664  0024FE  D002               	goto	l1859
 17665  002500  D7F5               	goto	l8255
 17666  002502  D000               	goto	l1859
 17667  002504                     l1859:
 17668  002504  AE56               	btfss	___ftadd@sign,7,c
 17669  002506  D00C               	goto	l1868
 17670  002508  0EFF               	movlw	255
 17671  00250A  1A4D               	xorwf	___ftadd@f1,f,c
 17672  00250C  0EFF               	movlw	255
 17673  00250E  1A4E               	xorwf	___ftadd@f1+1,f,c
 17674  002510  0EFF               	movlw	255
 17675  002512  1A4F               	xorwf	___ftadd@f1+2,f,c
 17676  002514  0E01               	movlw	1
 17677  002516  264D               	addwf	___ftadd@f1,f,c
 17678  002518  0E00               	movlw	0
 17679  00251A  224E               	addwfc	___ftadd@f1+1,f,c
 17680  00251C  0E00               	movlw	0
 17681  00251E  224F               	addwfc	___ftadd@f1+2,f,c
 17682  002520                     l1868:
 17683  002520  AC56               	btfss	___ftadd@sign,6,c
 17684  002522  D00D               	goto	l8263
 17685  002524  0EFF               	movlw	255
 17686  002526  1A50               	xorwf	___ftadd@f2,f,c
 17687  002528  0EFF               	movlw	255
 17688  00252A  1A51               	xorwf	___ftadd@f2+1,f,c
 17689  00252C  0EFF               	movlw	255
 17690  00252E  1A52               	xorwf	___ftadd@f2+2,f,c
 17691  002530  0E01               	movlw	1
 17692  002532  2650               	addwf	___ftadd@f2,f,c
 17693  002534  0E00               	movlw	0
 17694  002536  2251               	addwfc	___ftadd@f2+1,f,c
 17695  002538  0E00               	movlw	0
 17696  00253A  2252               	addwfc	___ftadd@f2+2,f,c
 17697  00253C  D000               	goto	l8263
 17698  00253E                     l8263:
 17699  00253E  0E00               	movlw	0
 17700  002540  6E56               	movwf	___ftadd@sign,c
 17701  002542  504D               	movf	___ftadd@f1,w,c
 17702  002544  2650               	addwf	___ftadd@f2,f,c
 17703  002546  504E               	movf	___ftadd@f1+1,w,c
 17704  002548  2251               	addwfc	___ftadd@f2+1,f,c
 17705  00254A  504F               	movf	___ftadd@f1+2,w,c
 17706  00254C  2252               	addwfc	___ftadd@f2+2,f,c
 17707  00254E  AE52               	btfss	___ftadd@f2+2,7,c
 17708  002550  D00F               	goto	l8273
 17709  002552  0EFF               	movlw	255
 17710  002554  1A50               	xorwf	___ftadd@f2,f,c
 17711  002556  0EFF               	movlw	255
 17712  002558  1A51               	xorwf	___ftadd@f2+1,f,c
 17713  00255A  0EFF               	movlw	255
 17714  00255C  1A52               	xorwf	___ftadd@f2+2,f,c
 17715  00255E  0E01               	movlw	1
 17716  002560  2650               	addwf	___ftadd@f2,f,c
 17717  002562  0E00               	movlw	0
 17718  002564  2251               	addwfc	___ftadd@f2+1,f,c
 17719  002566  0E00               	movlw	0
 17720  002568  2252               	addwfc	___ftadd@f2+2,f,c
 17721  00256A  0E01               	movlw	1
 17722  00256C  6E56               	movwf	___ftadd@sign,c
 17723  00256E  D000               	goto	l8273
 17724  002570                     l8273:
 17725  002570  C050  F011         	movff	___ftadd@f2,___ftpack@arg
 17726  002574  C051  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 17727  002578  C052  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 17728  00257C  C058  F014         	movff	___ftadd@exp1,___ftpack@exp
 17729  002580  C056  F015         	movff	___ftadd@sign,___ftpack@sign
 17730  002584  EC51  F01B         	call	___ftpack	;wreg free
 17731  002588  C011  F04D         	movff	?___ftpack,?___ftadd
 17732  00258C  C012  F04E         	movff	?___ftpack+1,?___ftadd+1
 17733  002590  C013  F04F         	movff	?___ftpack+2,?___ftadd+2
 17734  002594  D000               	goto	l1845
 17735  002596                     l1845:
 17736  002596  0012               	return		;funcret
 17737  002598                     __end_of___ftadd:
 17738                           	opt stack 0
 17739                           tblptru	equ	0xFF8
 17740                           tblptrh	equ	0xFF7
 17741                           tblptrl	equ	0xFF6
 17742                           tablat	equ	0xFF5
 17743                           prodh	equ	0xFF4
 17744                           prodl	equ	0xFF3
 17745                           intcon	equ	0xFF2
 17746                           intcon2	equ	0xFF1
 17747                           intcon3	equ	0xFF0
 17748                           postinc0	equ	0xFEE
 17749                           wreg	equ	0xFE8
 17750                           postdec1	equ	0xFE5
 17751                           plusw1	equ	0xFE3
 17752                           fsr1l	equ	0xFE1
 17753                           indf2	equ	0xFDF
 17754                           postinc2	equ	0xFDE
 17755                           postdec2	equ	0xFDD
 17756                           plusw2	equ	0xFDB
 17757                           fsr2h	equ	0xFDA
 17758                           fsr2l	equ	0xFD9
 17759                           status	equ	0xFD8
 17760                           
 17761 ;; *************** function ___ftneg *****************
 17762 ;; Defined at:
 17763 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 17764 ;; Parameters:    Size  Location     Type
 17765 ;;  f1              3   16[COMRAM] float 
 17766 ;; Auto vars:     Size  Location     Type
 17767 ;;		None
 17768 ;; Return value:  Size  Location     Type
 17769 ;;                  3   16[COMRAM] float 
 17770 ;; Registers used:
 17771 ;;		wreg, status,2, status,0
 17772 ;; Tracked objects:
 17773 ;;		On entry : 0/0
 17774 ;;		On exit  : 0/0
 17775 ;;		Unchanged: 0/0
 17776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17777 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17780 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17781 ;;Total ram usage:        3 bytes
 17782 ;; Hardware stack levels used:    1
 17783 ;; Hardware stack levels required when called:    2
 17784 ;; This function calls:
 17785 ;;		Nothing
 17786 ;; This function is called by:
 17787 ;;		_printf
 17788 ;; This function uses a non-reentrant model
 17789 ;;
 17790                           
 17791                           	psect	text77
 17792  0048C2                     __ptext77:
 17793                           	opt stack 0
 17794  0048C2                     ___ftneg:
 17795                           	opt stack 27
 17796                           
 17797                           ;incstack = 0
 17798  0048C2  5011               	movf	___ftneg@f1,w,c
 17799  0048C4  1012               	iorwf	___ftneg@f1+1,w,c
 17800  0048C6  1013               	iorwf	___ftneg@f1+2,w,c
 17801  0048C8  B4D8               	btfsc	status,2,c
 17802  0048CA  D006               	goto	l1918
 17803  0048CC  0E00               	movlw	0
 17804  0048CE  1A11               	xorwf	___ftneg@f1,f,c
 17805  0048D0  0E00               	movlw	0
 17806  0048D2  1A12               	xorwf	___ftneg@f1+1,f,c
 17807  0048D4  0E80               	movlw	128
 17808  0048D6  1A13               	xorwf	___ftneg@f1+2,f,c
 17809  0048D8                     l1918:
 17810  0048D8  C011  F011         	movff	___ftneg@f1,?___ftneg
 17811  0048DC  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
 17812  0048E0  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
 17813  0048E4  0012               	return		;funcret
 17814  0048E6                     __end_of___ftneg:
 17815                           	opt stack 0
 17816                           tblptru	equ	0xFF8
 17817                           tblptrh	equ	0xFF7
 17818                           tblptrl	equ	0xFF6
 17819                           tablat	equ	0xFF5
 17820                           prodh	equ	0xFF4
 17821                           prodl	equ	0xFF3
 17822                           intcon	equ	0xFF2
 17823                           intcon2	equ	0xFF1
 17824                           intcon3	equ	0xFF0
 17825                           postinc0	equ	0xFEE
 17826                           wreg	equ	0xFE8
 17827                           postdec1	equ	0xFE5
 17828                           plusw1	equ	0xFE3
 17829                           fsr1l	equ	0xFE1
 17830                           indf2	equ	0xFDF
 17831                           postinc2	equ	0xFDE
 17832                           postdec2	equ	0xFDD
 17833                           plusw2	equ	0xFDB
 17834                           fsr2h	equ	0xFDA
 17835                           fsr2l	equ	0xFD9
 17836                           status	equ	0xFD8
 17837                           
 17838 ;; *************** function ___ftge *****************
 17839 ;; Defined at:
 17840 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 17841 ;; Parameters:    Size  Location     Type
 17842 ;;  ff1             3   16[COMRAM] float 
 17843 ;;  ff2             3   19[COMRAM] float 
 17844 ;; Auto vars:     Size  Location     Type
 17845 ;;		None
 17846 ;; Return value:  Size  Location     Type
 17847 ;;		None               void
 17848 ;; Registers used:
 17849 ;;		wreg, status,2, status,0
 17850 ;; Tracked objects:
 17851 ;;		On entry : 0/0
 17852 ;;		On exit  : 0/0
 17853 ;;		Unchanged: 0/0
 17854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17855 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17857 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17858 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17859 ;;Total ram usage:        9 bytes
 17860 ;; Hardware stack levels used:    1
 17861 ;; Hardware stack levels required when called:    2
 17862 ;; This function calls:
 17863 ;;		Nothing
 17864 ;; This function is called by:
 17865 ;;		_main
 17866 ;;		_Setup_Fan_Temp
 17867 ;;		_Do_Setup_Time
 17868 ;;		_printf
 17869 ;; This function uses a non-reentrant model
 17870 ;;
 17871                           
 17872                           	psect	text78
 17873  003B58                     __ptext78:
 17874                           	opt stack 0
 17875  003B58                     ___ftge:
 17876                           	opt stack 27
 17877                           
 17878                           ;incstack = 0
 17879  003B58  AE13               	btfss	___ftge@ff1+2,7,c
 17880  003B5A  D017               	goto	l8753
 17881  003B5C  C011  F017         	movff	___ftge@ff1,??___ftge
 17882  003B60  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 17883  003B64  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 17884  003B68  1E17               	comf	??___ftge,f,c
 17885  003B6A  1E18               	comf	??___ftge+1,f,c
 17886  003B6C  1E19               	comf	??___ftge+2,f,c
 17887  003B6E  2A17               	incf	??___ftge,f,c
 17888  003B70  0E00               	movlw	0
 17889  003B72  2218               	addwfc	??___ftge+1,f,c
 17890  003B74  2219               	addwfc	??___ftge+2,f,c
 17891  003B76  0E00               	movlw	0
 17892  003B78  2417               	addwf	??___ftge,w,c
 17893  003B7A  6E11               	movwf	___ftge@ff1,c
 17894  003B7C  0E00               	movlw	0
 17895  003B7E  2018               	addwfc	??___ftge+1,w,c
 17896  003B80  6E12               	movwf	___ftge@ff1+1,c
 17897  003B82  0E80               	movlw	128
 17898  003B84  2019               	addwfc	??___ftge+2,w,c
 17899  003B86  6E13               	movwf	___ftge@ff1+2,c
 17900  003B88  D000               	goto	l8753
 17901  003B8A                     l8753:
 17902  003B8A  AE16               	btfss	___ftge@ff2+2,7,c
 17903  003B8C  D017               	goto	l8757
 17904  003B8E  C014  F017         	movff	___ftge@ff2,??___ftge
 17905  003B92  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 17906  003B96  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 17907  003B9A  1E17               	comf	??___ftge,f,c
 17908  003B9C  1E18               	comf	??___ftge+1,f,c
 17909  003B9E  1E19               	comf	??___ftge+2,f,c
 17910  003BA0  2A17               	incf	??___ftge,f,c
 17911  003BA2  0E00               	movlw	0
 17912  003BA4  2218               	addwfc	??___ftge+1,f,c
 17913  003BA6  2219               	addwfc	??___ftge+2,f,c
 17914  003BA8  0E00               	movlw	0
 17915  003BAA  2417               	addwf	??___ftge,w,c
 17916  003BAC  6E14               	movwf	___ftge@ff2,c
 17917  003BAE  0E00               	movlw	0
 17918  003BB0  2018               	addwfc	??___ftge+1,w,c
 17919  003BB2  6E15               	movwf	___ftge@ff2+1,c
 17920  003BB4  0E80               	movlw	128
 17921  003BB6  2019               	addwfc	??___ftge+2,w,c
 17922  003BB8  6E16               	movwf	___ftge@ff2+2,c
 17923  003BBA  D000               	goto	l8757
 17924  003BBC                     l8757:
 17925  003BBC  0E00               	movlw	0
 17926  003BBE  1A11               	xorwf	___ftge@ff1,f,c
 17927  003BC0  0E00               	movlw	0
 17928  003BC2  1A12               	xorwf	___ftge@ff1+1,f,c
 17929  003BC4  0E80               	movlw	128
 17930  003BC6  1A13               	xorwf	___ftge@ff1+2,f,c
 17931  003BC8  0E00               	movlw	0
 17932  003BCA  1A14               	xorwf	___ftge@ff2,f,c
 17933  003BCC  0E00               	movlw	0
 17934  003BCE  1A15               	xorwf	___ftge@ff2+1,f,c
 17935  003BD0  0E80               	movlw	128
 17936  003BD2  1A16               	xorwf	___ftge@ff2+2,f,c
 17937  003BD4  5014               	movf	___ftge@ff2,w,c
 17938  003BD6  5C11               	subwf	___ftge@ff1,w,c
 17939  003BD8  5015               	movf	___ftge@ff2+1,w,c
 17940  003BDA  5812               	subwfb	___ftge@ff1+1,w,c
 17941  003BDC  5016               	movf	___ftge@ff2+2,w,c
 17942  003BDE  5813               	subwfb	___ftge@ff1+2,w,c
 17943  003BE0  B0D8               	btfsc	status,0,c
 17944  003BE2  D002               	goto	l8763
 17945  003BE4  90D8               	bcf	status,0,c
 17946  003BE6  D002               	goto	l1902
 17947  003BE8                     l8763:
 17948  003BE8  80D8               	bsf	status,0,c
 17949  003BEA  D000               	goto	l1902
 17950  003BEC                     l1902:
 17951  003BEC  0012               	return		;funcret
 17952  003BEE                     __end_of___ftge:
 17953                           	opt stack 0
 17954                           tblptru	equ	0xFF8
 17955                           tblptrh	equ	0xFF7
 17956                           tblptrl	equ	0xFF6
 17957                           tablat	equ	0xFF5
 17958                           prodh	equ	0xFF4
 17959                           prodl	equ	0xFF3
 17960                           intcon	equ	0xFF2
 17961                           intcon2	equ	0xFF1
 17962                           intcon3	equ	0xFF0
 17963                           postinc0	equ	0xFEE
 17964                           wreg	equ	0xFE8
 17965                           postdec1	equ	0xFE5
 17966                           plusw1	equ	0xFE3
 17967                           fsr1l	equ	0xFE1
 17968                           indf2	equ	0xFDF
 17969                           postinc2	equ	0xFDE
 17970                           postdec2	equ	0xFDD
 17971                           plusw2	equ	0xFDB
 17972                           fsr2h	equ	0xFDA
 17973                           fsr2l	equ	0xFD9
 17974                           status	equ	0xFD8
 17975                           
 17976 ;; *************** function _Init_UART *****************
 17977 ;; Defined at:
 17978 ;;		line 182 in file "utils.c"
 17979 ;; Parameters:    Size  Location     Type
 17980 ;;		None
 17981 ;; Auto vars:     Size  Location     Type
 17982 ;;		None
 17983 ;; Return value:  Size  Location     Type
 17984 ;;		None               void
 17985 ;; Registers used:
 17986 ;;		wreg, status,2, cstack
 17987 ;; Tracked objects:
 17988 ;;		On entry : 0/0
 17989 ;;		On exit  : 0/0
 17990 ;;		Unchanged: 0/0
 17991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17996 ;;Total ram usage:        0 bytes
 17997 ;; Hardware stack levels used:    1
 17998 ;; Hardware stack levels required when called:    3
 17999 ;; This function calls:
 18000 ;;		_OpenUSART
 18001 ;; This function is called by:
 18002 ;;		_Do_Init
 18003 ;; This function uses a non-reentrant model
 18004 ;;
 18005                           
 18006                           	psect	text79
 18007  004B1E                     __ptext79:
 18008                           	opt stack 0
 18009  004B1E                     _Init_UART:
 18010                           	opt stack 26
 18011                           
 18012                           ;utils.c: 184: OpenUSART (0b01111111 & 0b10111111 &
 18013                           ;utils.c: 185: 0b11111110 & 0b11111101 & 0b11111111 &
 18014                           ;utils.c: 186: 0b11111111, 25);
 18015                           
 18016                           ;incstack = 0
 18017  004B1E  0E00               	movlw	0
 18018  004B20  6E12               	movwf	OpenUSART@spbrg+1,c
 18019  004B22  0E19               	movlw	25
 18020  004B24  6E11               	movwf	OpenUSART@spbrg,c
 18021  004B26  0E3C               	movlw	60
 18022  004B28  EC09  F020         	call	_OpenUSART
 18023                           
 18024                           ;utils.c: 187: OSCCON = 0x70;
 18025  004B2C  0E70               	movlw	112
 18026  004B2E  6ED3               	movwf	4051,c	;volatile
 18027  004B30  0012               	return		;funcret
 18028  004B32                     __end_of_Init_UART:
 18029                           	opt stack 0
 18030                           tblptru	equ	0xFF8
 18031                           tblptrh	equ	0xFF7
 18032                           tblptrl	equ	0xFF6
 18033                           tablat	equ	0xFF5
 18034                           prodh	equ	0xFF4
 18035                           prodl	equ	0xFF3
 18036                           intcon	equ	0xFF2
 18037                           intcon2	equ	0xFF1
 18038                           intcon3	equ	0xFF0
 18039                           postinc0	equ	0xFEE
 18040                           wreg	equ	0xFE8
 18041                           postdec1	equ	0xFE5
 18042                           plusw1	equ	0xFE3
 18043                           fsr1l	equ	0xFE1
 18044                           indf2	equ	0xFDF
 18045                           postinc2	equ	0xFDE
 18046                           postdec2	equ	0xFDD
 18047                           plusw2	equ	0xFDB
 18048                           fsr2h	equ	0xFDA
 18049                           fsr2l	equ	0xFD9
 18050                           status	equ	0xFD8
 18051                           
 18052 ;; *************** function _OpenUSART *****************
 18053 ;; Defined at:
 18054 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 18055 ;; Parameters:    Size  Location     Type
 18056 ;;  config          1    wreg     unsigned char 
 18057 ;;  spbrg           2   16[COMRAM] unsigned int 
 18058 ;; Auto vars:     Size  Location     Type
 18059 ;;  config          1   18[COMRAM] unsigned char 
 18060 ;; Return value:  Size  Location     Type
 18061 ;;		None               void
 18062 ;; Registers used:
 18063 ;;		wreg, status,2
 18064 ;; Tracked objects:
 18065 ;;		On entry : 0/0
 18066 ;;		On exit  : 0/0
 18067 ;;		Unchanged: 0/0
 18068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18069 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18072 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18073 ;;Total ram usage:        3 bytes
 18074 ;; Hardware stack levels used:    1
 18075 ;; Hardware stack levels required when called:    2
 18076 ;; This function calls:
 18077 ;;		Nothing
 18078 ;; This function is called by:
 18079 ;;		_Init_UART
 18080 ;; This function uses a non-reentrant model
 18081 ;;
 18082                           
 18083                           	psect	text80
 18084  004012                     __ptext80:
 18085                           	opt stack 0
 18086  004012                     _OpenUSART:
 18087                           	opt stack 26
 18088                           
 18089                           ;incstack = 0
 18090                           ;OpenUSART@config stored from wreg
 18091  004012  6E13               	movwf	OpenUSART@config,c
 18092  004014  0E00               	movlw	0
 18093  004016  6EAC               	movwf	4012,c	;volatile
 18094  004018  0E00               	movlw	0
 18095  00401A  6EAB               	movwf	4011,c	;volatile
 18096  00401C  A013               	btfss	OpenUSART@config,0,c
 18097  00401E  D002               	goto	l6585
 18098  004020  88AC               	bsf	4012,4,c	;volatile
 18099  004022  D000               	goto	l6585
 18100  004024                     l6585:
 18101  004024  A213               	btfss	OpenUSART@config,1,c
 18102  004026  D003               	goto	l6589
 18103  004028  8CAC               	bsf	4012,6,c	;volatile
 18104  00402A  8CAB               	bsf	4011,6,c	;volatile
 18105  00402C  D000               	goto	l6589
 18106  00402E                     l6589:
 18107  00402E  A413               	btfss	OpenUSART@config,2,c
 18108  004030  D002               	goto	l6593
 18109  004032  8EAC               	bsf	4012,7,c	;volatile
 18110  004034  D000               	goto	l6593
 18111  004036                     l6593:
 18112  004036  A613               	btfss	OpenUSART@config,3,c
 18113  004038  D002               	goto	l1467
 18114  00403A  88AB               	bsf	4011,4,c	;volatile
 18115  00403C  D002               	goto	l6597
 18116  00403E                     l1467:
 18117  00403E  8AAB               	bsf	4011,5,c	;volatile
 18118  004040  D000               	goto	l6597
 18119  004042                     l6597:
 18120  004042  B813               	btfsc	OpenUSART@config,4,c
 18121  004044  84AC               	bsf	4012,2,c	;volatile
 18122  004046  989E               	bcf	3998,4,c	;volatile
 18123  004048  AA13               	btfss	OpenUSART@config,5,c
 18124  00404A  D002               	goto	l6605
 18125  00404C  86AB               	bsf	4011,3,c	;volatile
 18126  00404E  D000               	goto	l6605
 18127  004050                     l6605:
 18128  004050  AC13               	btfss	OpenUSART@config,6,c
 18129  004052  D002               	goto	l1471
 18130  004054  8A9D               	bsf	3997,5,c	;volatile
 18131  004056  D001               	goto	l1472
 18132  004058                     l1471:
 18133  004058  9A9D               	bcf	3997,5,c	;volatile
 18134  00405A                     l1472:
 18135  00405A  9A9E               	bcf	3998,5,c	;volatile
 18136  00405C  AE13               	btfss	OpenUSART@config,7,c
 18137  00405E  D002               	goto	l1473
 18138  004060  889D               	bsf	3997,4,c	;volatile
 18139  004062  D001               	goto	l1474
 18140  004064                     l1473:
 18141  004064  989D               	bcf	3997,4,c	;volatile
 18142  004066                     l1474:
 18143  004066  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 18144  00406A  5012               	movf	OpenUSART@spbrg+1,w,c
 18145  00406C  6EB0               	movwf	4016,c	;volatile
 18146  00406E  8AAC               	bsf	4012,5,c	;volatile
 18147  004070  8EAB               	bsf	4011,7,c	;volatile
 18148  004072  9C94               	bcf	3988,6,c	;volatile
 18149  004074  8E94               	bsf	3988,7,c	;volatile
 18150  004076  B8AC               	btfsc	4012,4,c	;volatile
 18151  004078  BEAC               	btfsc	4012,7,c	;volatile
 18152  00407A  D002               	goto	l1476
 18153  00407C  8C94               	bsf	3988,6,c	;volatile
 18154  00407E  D000               	goto	l1476
 18155  004080                     l1476:
 18156  004080  0012               	return		;funcret
 18157  004082                     __end_of_OpenUSART:
 18158                           	opt stack 0
 18159                           tblptru	equ	0xFF8
 18160                           tblptrh	equ	0xFF7
 18161                           tblptrl	equ	0xFF6
 18162                           tablat	equ	0xFF5
 18163                           prodh	equ	0xFF4
 18164                           prodl	equ	0xFF3
 18165                           intcon	equ	0xFF2
 18166                           intcon2	equ	0xFF1
 18167                           intcon3	equ	0xFF0
 18168                           postinc0	equ	0xFEE
 18169                           wreg	equ	0xFE8
 18170                           postdec1	equ	0xFE5
 18171                           plusw1	equ	0xFE3
 18172                           fsr1l	equ	0xFE1
 18173                           indf2	equ	0xFDF
 18174                           postinc2	equ	0xFDE
 18175                           postdec2	equ	0xFDD
 18176                           plusw2	equ	0xFDB
 18177                           fsr2h	equ	0xFDA
 18178                           fsr2l	equ	0xFD9
 18179                           status	equ	0xFD8
 18180                           
 18181 ;; *************** function _Init_Interrupt *****************
 18182 ;; Defined at:
 18183 ;;		line 18 in file "Interrupt.c"
 18184 ;; Parameters:    Size  Location     Type
 18185 ;;		None
 18186 ;; Auto vars:     Size  Location     Type
 18187 ;;		None
 18188 ;; Return value:  Size  Location     Type
 18189 ;;		None               void
 18190 ;; Registers used:
 18191 ;;		wreg, status,2
 18192 ;; Tracked objects:
 18193 ;;		On entry : 0/0
 18194 ;;		On exit  : 0/0
 18195 ;;		Unchanged: 0/0
 18196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18201 ;;Total ram usage:        0 bytes
 18202 ;; Hardware stack levels used:    1
 18203 ;; Hardware stack levels required when called:    2
 18204 ;; This function calls:
 18205 ;;		Nothing
 18206 ;; This function is called by:
 18207 ;;		_Do_Init
 18208 ;; This function uses a non-reentrant model
 18209 ;;
 18210                           
 18211                           	psect	text81
 18212  0048E6                     __ptext81:
 18213                           	opt stack 0
 18214  0048E6                     _Init_Interrupt:
 18215                           	opt stack 27
 18216                           
 18217                           ;Interrupt.c: 21: INTCONbits.INT0IF = 0 ;
 18218                           
 18219                           ;incstack = 0
 18220  0048E6  92F2               	bcf	intcon,1,c	;volatile
 18221                           
 18222                           ;Interrupt.c: 22: INTCON3bits.INT1IF = 0;
 18223  0048E8  90F0               	bcf	intcon3,0,c	;volatile
 18224                           
 18225                           ;Interrupt.c: 23: INTCON3bits.INT2IF = 0;
 18226  0048EA  92F0               	bcf	intcon3,1,c	;volatile
 18227                           
 18228                           ;Interrupt.c: 25: INTCONbits.INT0IE = 1;
 18229  0048EC  88F2               	bsf	intcon,4,c	;volatile
 18230                           
 18231                           ;Interrupt.c: 26: INTCON3bits.INT1IE = 1;
 18232  0048EE  86F0               	bsf	intcon3,3,c	;volatile
 18233                           
 18234                           ;Interrupt.c: 27: INTCON3bits.INT2IE = 1;
 18235  0048F0  88F0               	bsf	intcon3,4,c	;volatile
 18236                           
 18237                           ;Interrupt.c: 29: INTCON2bits.INTEDG0 = 0;
 18238  0048F2  9CF1               	bcf	intcon2,6,c	;volatile
 18239                           
 18240                           ;Interrupt.c: 30: INTCON2bits.INTEDG1 = 0;
 18241  0048F4  9AF1               	bcf	intcon2,5,c	;volatile
 18242                           
 18243                           ;Interrupt.c: 31: INTCON2bits.INTEDG2 = 0;
 18244  0048F6  98F1               	bcf	intcon2,4,c	;volatile
 18245                           
 18246                           ;Interrupt.c: 32: TMR1H = 0;
 18247  0048F8  0E00               	movlw	0
 18248  0048FA  6ECF               	movwf	4047,c	;volatile
 18249                           
 18250                           ;Interrupt.c: 33: TMR1L = 0;
 18251  0048FC  0E00               	movlw	0
 18252  0048FE  6ECE               	movwf	4046,c	;volatile
 18253                           
 18254                           ;Interrupt.c: 34: PIR1bits.TMR1IF = 0;
 18255  004900  909E               	bcf	3998,0,c	;volatile
 18256                           
 18257                           ;Interrupt.c: 35: PIE1bits.TMR1IE = 1;
 18258  004902  809D               	bsf	3997,0,c	;volatile
 18259                           
 18260                           ;Interrupt.c: 36: INTCONbits.PEIE = 1;
 18261  004904  8CF2               	bsf	intcon,6,c	;volatile
 18262                           
 18263                           ;Interrupt.c: 37: INTCONbits.GIE = 1;
 18264  004906  8EF2               	bsf	intcon,7,c	;volatile
 18265  004908  0012               	return		;funcret
 18266  00490A                     __end_of_Init_Interrupt:
 18267                           	opt stack 0
 18268                           tblptru	equ	0xFF8
 18269                           tblptrh	equ	0xFF7
 18270                           tblptrl	equ	0xFF6
 18271                           tablat	equ	0xFF5
 18272                           prodh	equ	0xFF4
 18273                           prodl	equ	0xFF3
 18274                           intcon	equ	0xFF2
 18275                           intcon2	equ	0xFF1
 18276                           intcon3	equ	0xFF0
 18277                           postinc0	equ	0xFEE
 18278                           wreg	equ	0xFE8
 18279                           postdec1	equ	0xFE5
 18280                           plusw1	equ	0xFE3
 18281                           fsr1l	equ	0xFE1
 18282                           indf2	equ	0xFDF
 18283                           postinc2	equ	0xFDE
 18284                           postdec2	equ	0xFDD
 18285                           plusw2	equ	0xFDB
 18286                           fsr2h	equ	0xFDA
 18287                           fsr2l	equ	0xFD9
 18288                           status	equ	0xFD8
 18289                           
 18290 ;; *************** function _Init_ADC *****************
 18291 ;; Defined at:
 18292 ;;		line 174 in file "utils.c"
 18293 ;; Parameters:    Size  Location     Type
 18294 ;;		None
 18295 ;; Auto vars:     Size  Location     Type
 18296 ;;		None
 18297 ;; Return value:  Size  Location     Type
 18298 ;;		None               void
 18299 ;; Registers used:
 18300 ;;		wreg, status,2
 18301 ;; Tracked objects:
 18302 ;;		On entry : 0/0
 18303 ;;		On exit  : 0/0
 18304 ;;		Unchanged: 0/0
 18305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18310 ;;Total ram usage:        0 bytes
 18311 ;; Hardware stack levels used:    1
 18312 ;; Hardware stack levels required when called:    2
 18313 ;; This function calls:
 18314 ;;		Nothing
 18315 ;; This function is called by:
 18316 ;;		_Do_Init
 18317 ;; This function uses a non-reentrant model
 18318 ;;
 18319                           
 18320                           	psect	text82
 18321  004BEE                     __ptext82:
 18322                           	opt stack 0
 18323  004BEE                     _Init_ADC:
 18324                           	opt stack 27
 18325                           
 18326                           ;utils.c: 176: ADCON0 = 0x01;
 18327                           
 18328                           ;incstack = 0
 18329  004BEE  0E01               	movlw	1
 18330  004BF0  6EC2               	movwf	4034,c	;volatile
 18331                           
 18332                           ;utils.c: 177: ADCON1 = 0x0E;
 18333  004BF2  0E0E               	movlw	14
 18334  004BF4  6EC1               	movwf	4033,c	;volatile
 18335                           
 18336                           ;utils.c: 178: ADCON2 = 0xA9;
 18337  004BF6  0EA9               	movlw	169
 18338  004BF8  6EC0               	movwf	4032,c	;volatile
 18339  004BFA  0012               	return		;funcret
 18340  004BFC                     __end_of_Init_ADC:
 18341                           	opt stack 0
 18342                           tblptru	equ	0xFF8
 18343                           tblptrh	equ	0xFF7
 18344                           tblptrl	equ	0xFF6
 18345                           tablat	equ	0xFF5
 18346                           prodh	equ	0xFF4
 18347                           prodl	equ	0xFF3
 18348                           intcon	equ	0xFF2
 18349                           intcon2	equ	0xFF1
 18350                           intcon3	equ	0xFF0
 18351                           postinc0	equ	0xFEE
 18352                           wreg	equ	0xFE8
 18353                           postdec1	equ	0xFE5
 18354                           plusw1	equ	0xFE3
 18355                           fsr1l	equ	0xFE1
 18356                           indf2	equ	0xFDF
 18357                           postinc2	equ	0xFDE
 18358                           postdec2	equ	0xFDD
 18359                           plusw2	equ	0xFDB
 18360                           fsr2h	equ	0xFDA
 18361                           fsr2l	equ	0xFD9
 18362                           status	equ	0xFD8
 18363                           
 18364 ;; *************** function _I2C_Init *****************
 18365 ;; Defined at:
 18366 ;;		line 10 in file "I2C_Soft.c"
 18367 ;; Parameters:    Size  Location     Type
 18368 ;;  c               4   16[COMRAM] unsigned long 
 18369 ;; Auto vars:     Size  Location     Type
 18370 ;;		None
 18371 ;; Return value:  Size  Location     Type
 18372 ;;		None               void
 18373 ;; Registers used:
 18374 ;;		wreg, cstack
 18375 ;; Tracked objects:
 18376 ;;		On entry : 0/0
 18377 ;;		On exit  : 0/0
 18378 ;;		Unchanged: 0/0
 18379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18380 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18383 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18384 ;;Total ram usage:        4 bytes
 18385 ;; Hardware stack levels used:    1
 18386 ;; Hardware stack levels required when called:    3
 18387 ;; This function calls:
 18388 ;;		_i2cHighScl
 18389 ;;		_i2cHighSda
 18390 ;; This function is called by:
 18391 ;;		_Do_Init
 18392 ;; This function uses a non-reentrant model
 18393 ;;
 18394                           
 18395                           	psect	text83
 18396  004C20                     __ptext83:
 18397                           	opt stack 0
 18398  004C20                     _I2C_Init:
 18399                           	opt stack 26
 18400                           
 18401                           ;I2C_Soft.c: 12: i2cHighScl();
 18402                           
 18403                           ;incstack = 0
 18404  004C20  EC05  F026         	call	_i2cHighScl	;wreg free
 18405                           
 18406                           ;I2C_Soft.c: 13: i2cHighSda();
 18407  004C24  EC28  F026         	call	_i2cHighSda	;wreg free
 18408  004C28  0012               	return		;funcret
 18409  004C2A                     __end_of_I2C_Init:
 18410                           	opt stack 0
 18411                           tblptru	equ	0xFF8
 18412                           tblptrh	equ	0xFF7
 18413                           tblptrl	equ	0xFF6
 18414                           tablat	equ	0xFF5
 18415                           prodh	equ	0xFF4
 18416                           prodl	equ	0xFF3
 18417                           intcon	equ	0xFF2
 18418                           intcon2	equ	0xFF1
 18419                           intcon3	equ	0xFF0
 18420                           postinc0	equ	0xFEE
 18421                           wreg	equ	0xFE8
 18422                           postdec1	equ	0xFE5
 18423                           plusw1	equ	0xFE3
 18424                           fsr1l	equ	0xFE1
 18425                           indf2	equ	0xFDF
 18426                           postinc2	equ	0xFDE
 18427                           postdec2	equ	0xFDD
 18428                           plusw2	equ	0xFDB
 18429                           fsr2h	equ	0xFDA
 18430                           fsr2l	equ	0xFD9
 18431                           status	equ	0xFD8
 18432                           
 18433 ;; *************** function _DS1621_Init *****************
 18434 ;; Defined at:
 18435 ;;		line 19 in file "I2C_Support.c"
 18436 ;; Parameters:    Size  Location     Type
 18437 ;;		None
 18438 ;; Auto vars:     Size  Location     Type
 18439 ;;  Device          1   21[COMRAM] unsigned char 
 18440 ;; Return value:  Size  Location     Type
 18441 ;;		None               void
 18442 ;; Registers used:
 18443 ;;		wreg, status,2, status,0, cstack
 18444 ;; Tracked objects:
 18445 ;;		On entry : 0/0
 18446 ;;		On exit  : 0/0
 18447 ;;		Unchanged: 0/0
 18448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18452 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18453 ;;Total ram usage:        1 bytes
 18454 ;; Hardware stack levels used:    1
 18455 ;; Hardware stack levels required when called:    5
 18456 ;; This function calls:
 18457 ;;		_I2C_Write_Cmd_Only
 18458 ;;		_I2C_Write_Cmd_Write_Data
 18459 ;; This function is called by:
 18460 ;;		_Do_Init
 18461 ;; This function uses a non-reentrant model
 18462 ;;
 18463                           
 18464                           	psect	text84
 18465  0049AE                     __ptext84:
 18466                           	opt stack 0
 18467  0049AE                     _DS1621_Init:
 18468                           	opt stack 24
 18469                           
 18470                           ;I2C_Support.c: 22: char Device = 0x68;
 18471                           
 18472                           ;incstack = 0
 18473  0049AE  0E68               	movlw	104
 18474  0049B0  6E16               	movwf	DS1621_Init@Device,c
 18475                           
 18476                           ;I2C_Support.c: 23: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
 18477  0049B2  0EAC               	movlw	172
 18478  0049B4  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 18479  0049B6  0E02               	movlw	2
 18480  0049B8  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 18481  0049BA  5016               	movf	DS1621_Init@Device,w,c
 18482  0049BC  ECC7  F024         	call	_I2C_Write_Cmd_Write_Data
 18483                           
 18484                           ;I2C_Support.c: 24: I2C_Write_Cmd_Only(Device, 0xEE);
 18485  0049C0  0EEE               	movlw	238
 18486  0049C2  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 18487  0049C4  5016               	movf	DS1621_Init@Device,w,c
 18488  0049C6  EC3A  F025         	call	_I2C_Write_Cmd_Only
 18489  0049CA  0012               	return		;funcret
 18490  0049CC                     __end_of_DS1621_Init:
 18491                           	opt stack 0
 18492                           tblptru	equ	0xFF8
 18493                           tblptrh	equ	0xFF7
 18494                           tblptrl	equ	0xFF6
 18495                           tablat	equ	0xFF5
 18496                           prodh	equ	0xFF4
 18497                           prodl	equ	0xFF3
 18498                           intcon	equ	0xFF2
 18499                           intcon2	equ	0xFF1
 18500                           intcon3	equ	0xFF0
 18501                           postinc0	equ	0xFEE
 18502                           wreg	equ	0xFE8
 18503                           postdec1	equ	0xFE5
 18504                           plusw1	equ	0xFE3
 18505                           fsr1l	equ	0xFE1
 18506                           indf2	equ	0xFDF
 18507                           postinc2	equ	0xFDE
 18508                           postdec2	equ	0xFDD
 18509                           plusw2	equ	0xFDB
 18510                           fsr2h	equ	0xFDA
 18511                           fsr2l	equ	0xFD9
 18512                           status	equ	0xFD8
 18513                           
 18514 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 18515 ;; Defined at:
 18516 ;;		line 148 in file "I2C_Soft.c"
 18517 ;; Parameters:    Size  Location     Type
 18518 ;;  Device          1    wreg     unsigned char 
 18519 ;;  Cmd             1   18[COMRAM] unsigned char 
 18520 ;;  Data_Out        1   19[COMRAM] unsigned char 
 18521 ;; Auto vars:     Size  Location     Type
 18522 ;;  Device          1   20[COMRAM] unsigned char 
 18523 ;; Return value:  Size  Location     Type
 18524 ;;		None               void
 18525 ;; Registers used:
 18526 ;;		wreg, status,2, status,0, cstack
 18527 ;; Tracked objects:
 18528 ;;		On entry : 0/0
 18529 ;;		On exit  : 0/0
 18530 ;;		Unchanged: 0/0
 18531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18532 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18535 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18536 ;;Total ram usage:        3 bytes
 18537 ;; Hardware stack levels used:    1
 18538 ;; Hardware stack levels required when called:    4
 18539 ;; This function calls:
 18540 ;;		_I2C_Start
 18541 ;;		_I2C_Stop
 18542 ;;		_I2C_Write
 18543 ;; This function is called by:
 18544 ;;		_DS1621_Init
 18545 ;; This function uses a non-reentrant model
 18546 ;;
 18547                           
 18548                           	psect	text85
 18549  00498E                     __ptext85:
 18550                           	opt stack 0
 18551  00498E                     _I2C_Write_Cmd_Write_Data:
 18552                           	opt stack 24
 18553                           
 18554                           ;incstack = 0
 18555                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 18556  00498E  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 18557                           
 18558                           ;I2C_Soft.c: 150: I2C_Start();
 18559  004990  ECB4  F025         	call	_I2C_Start	;wreg free
 18560                           
 18561                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 18562  004994  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 18563  004996  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 18564  004998  ECF1  F022         	call	_I2C_Write
 18565                           
 18566                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 18567  00499C  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 18568  00499E  ECF1  F022         	call	_I2C_Write
 18569                           
 18570                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 18571  0049A2  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 18572  0049A4  ECF1  F022         	call	_I2C_Write
 18573                           
 18574                           ;I2C_Soft.c: 154: I2C_Stop();
 18575  0049A8  ECAB  F025         	call	_I2C_Stop	;wreg free
 18576  0049AC  0012               	return		;funcret
 18577  0049AE                     __end_of_I2C_Write_Cmd_Write_Data:
 18578                           	opt stack 0
 18579                           tblptru	equ	0xFF8
 18580                           tblptrh	equ	0xFF7
 18581                           tblptrl	equ	0xFF6
 18582                           tablat	equ	0xFF5
 18583                           prodh	equ	0xFF4
 18584                           prodl	equ	0xFF3
 18585                           intcon	equ	0xFF2
 18586                           intcon2	equ	0xFF1
 18587                           intcon3	equ	0xFF0
 18588                           postinc0	equ	0xFEE
 18589                           wreg	equ	0xFE8
 18590                           postdec1	equ	0xFE5
 18591                           plusw1	equ	0xFE3
 18592                           fsr1l	equ	0xFE1
 18593                           indf2	equ	0xFDF
 18594                           postinc2	equ	0xFDE
 18595                           postdec2	equ	0xFDD
 18596                           plusw2	equ	0xFDB
 18597                           fsr2h	equ	0xFDA
 18598                           fsr2l	equ	0xFD9
 18599                           status	equ	0xFD8
 18600                           
 18601 ;; *************** function _I2C_Write_Cmd_Only *****************
 18602 ;; Defined at:
 18603 ;;		line 140 in file "I2C_Soft.c"
 18604 ;; Parameters:    Size  Location     Type
 18605 ;;  Device          1    wreg     unsigned char 
 18606 ;;  Cmd             1   18[COMRAM] unsigned char 
 18607 ;; Auto vars:     Size  Location     Type
 18608 ;;  Device          1   19[COMRAM] unsigned char 
 18609 ;; Return value:  Size  Location     Type
 18610 ;;		None               void
 18611 ;; Registers used:
 18612 ;;		wreg, status,2, status,0, cstack
 18613 ;; Tracked objects:
 18614 ;;		On entry : 0/0
 18615 ;;		On exit  : 0/0
 18616 ;;		Unchanged: 0/0
 18617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18618 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18621 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18622 ;;Total ram usage:        2 bytes
 18623 ;; Hardware stack levels used:    1
 18624 ;; Hardware stack levels required when called:    4
 18625 ;; This function calls:
 18626 ;;		_I2C_Start
 18627 ;;		_I2C_Stop
 18628 ;;		_I2C_Write
 18629 ;; This function is called by:
 18630 ;;		_DS1621_Init
 18631 ;; This function uses a non-reentrant model
 18632 ;;
 18633                           
 18634                           	psect	text86
 18635  004A74                     __ptext86:
 18636                           	opt stack 0
 18637  004A74                     _I2C_Write_Cmd_Only:
 18638                           	opt stack 24
 18639                           
 18640                           ;incstack = 0
 18641                           ;I2C_Write_Cmd_Only@Device stored from wreg
 18642  004A74  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 18643                           
 18644                           ;I2C_Soft.c: 142: I2C_Start();
 18645  004A76  ECB4  F025         	call	_I2C_Start	;wreg free
 18646                           
 18647                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 18648  004A7A  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 18649  004A7C  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 18650  004A7E  ECF1  F022         	call	_I2C_Write
 18651                           
 18652                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 18653  004A82  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 18654  004A84  ECF1  F022         	call	_I2C_Write
 18655                           
 18656                           ;I2C_Soft.c: 145: I2C_Stop();
 18657  004A88  ECAB  F025         	call	_I2C_Stop	;wreg free
 18658  004A8C  0012               	return		;funcret
 18659  004A8E                     __end_of_I2C_Write_Cmd_Only:
 18660                           	opt stack 0
 18661                           tblptru	equ	0xFF8
 18662                           tblptrh	equ	0xFF7
 18663                           tblptrl	equ	0xFF6
 18664                           tablat	equ	0xFF5
 18665                           prodh	equ	0xFF4
 18666                           prodl	equ	0xFF3
 18667                           intcon	equ	0xFF2
 18668                           intcon2	equ	0xFF1
 18669                           intcon3	equ	0xFF0
 18670                           postinc0	equ	0xFEE
 18671                           wreg	equ	0xFE8
 18672                           postdec1	equ	0xFE5
 18673                           plusw1	equ	0xFE3
 18674                           fsr1l	equ	0xFE1
 18675                           indf2	equ	0xFDF
 18676                           postinc2	equ	0xFDE
 18677                           postdec2	equ	0xFDD
 18678                           plusw2	equ	0xFDB
 18679                           fsr2h	equ	0xFDA
 18680                           fsr2l	equ	0xFD9
 18681                           status	equ	0xFD8
 18682                           
 18683 ;; *************** function _I2C_Write *****************
 18684 ;; Defined at:
 18685 ;;		line 37 in file "I2C_Soft.c"
 18686 ;; Parameters:    Size  Location     Type
 18687 ;;  outByte         1    wreg     unsigned char 
 18688 ;; Auto vars:     Size  Location     Type
 18689 ;;  outByte         1   16[COMRAM] unsigned char 
 18690 ;;  n               1   17[COMRAM] unsigned char 
 18691 ;; Return value:  Size  Location     Type
 18692 ;;		None               void
 18693 ;; Registers used:
 18694 ;;		wreg, status,2, status,0, cstack
 18695 ;; Tracked objects:
 18696 ;;		On entry : 0/0
 18697 ;;		On exit  : 0/0
 18698 ;;		Unchanged: 0/0
 18699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18701 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18703 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18704 ;;Total ram usage:        2 bytes
 18705 ;; Hardware stack levels used:    1
 18706 ;; Hardware stack levels required when called:    3
 18707 ;; This function calls:
 18708 ;;		_i2cHighScl
 18709 ;;		_i2cHighSda
 18710 ;;		_i2cLowScl
 18711 ;;		_i2cLowSda
 18712 ;; This function is called by:
 18713 ;;		_I2C_Write_Cmd_Only
 18714 ;;		_I2C_Write_Cmd_Write_Data
 18715 ;;		_DS1621_Read_Temp
 18716 ;;		_DS3231_Read_Time
 18717 ;;		_DS3231_Write_Time
 18718 ;;		_I2C_Write_Address_Read_One_Byte
 18719 ;;		_I2C_Write_Address_Write_One_Byte
 18720 ;;		_I2C_Write_Cmd_Read_One_Byte
 18721 ;;		_DS3231_Init
 18722 ;; This function uses a non-reentrant model
 18723 ;;
 18724                           
 18725                           	psect	text87
 18726  0045E2                     __ptext87:
 18727                           	opt stack 0
 18728  0045E2                     _I2C_Write:
 18729                           	opt stack 24
 18730                           
 18731                           ;incstack = 0
 18732                           ;I2C_Write@outByte stored from wreg
 18733  0045E2  6E11               	movwf	I2C_Write@outByte,c
 18734                           
 18735                           ;I2C_Soft.c: 39: unsigned char n;
 18736                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 18737  0045E4  0E00               	movlw	0
 18738  0045E6  6E12               	movwf	I2C_Write@n,c
 18739  0045E8                     l6329:
 18740  0045E8  0E07               	movlw	7
 18741  0045EA  6412               	cpfsgt	I2C_Write@n,c
 18742  0045EC  D001               	goto	l115
 18743  0045EE  D011               	goto	l6347
 18744  0045F0                     l115:
 18745                           
 18746                           ;I2C_Soft.c: 41: {
 18747                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 18748  0045F0  AE11               	btfss	I2C_Write@outByte,7,c
 18749  0045F2  D003               	goto	l6335
 18750  0045F4  EC28  F026         	call	_i2cHighSda	;wreg free
 18751  0045F8  D003               	goto	l6337
 18752  0045FA                     l6335:
 18753                           
 18754                           ;I2C_Soft.c: 43: else i2cLowSda();
 18755  0045FA  EC15  F026         	call	_i2cLowSda	;wreg free
 18756  0045FE  D000               	goto	l6337
 18757  004600                     l6337:
 18758                           
 18759                           ;I2C_Soft.c: 44: i2cHighScl();
 18760  004600  EC05  F026         	call	_i2cHighScl	;wreg free
 18761                           
 18762                           ;I2C_Soft.c: 45: i2cLowScl();
 18763  004604  EC24  F026         	call	_i2cLowScl	;wreg free
 18764                           
 18765                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 18766  004608  5011               	movf	I2C_Write@outByte,w,c
 18767  00460A  2411               	addwf	I2C_Write@outByte,w,c
 18768  00460C  6E11               	movwf	I2C_Write@outByte,c
 18769  00460E  2A12               	incf	I2C_Write@n,f,c
 18770  004610  D7EB               	goto	l6329
 18771  004612                     l6347:
 18772                           
 18773                           ;I2C_Soft.c: 47: }
 18774                           ;I2C_Soft.c: 48: i2cHighSda();
 18775  004612  EC28  F026         	call	_i2cHighSda	;wreg free
 18776                           
 18777                           ;I2C_Soft.c: 49: i2cHighScl();
 18778  004616  EC05  F026         	call	_i2cHighScl	;wreg free
 18779                           
 18780                           ;I2C_Soft.c: 50: i2cLowScl();
 18781  00461A  EC24  F026         	call	_i2cLowScl	;wreg free
 18782  00461E  0012               	return		;funcret
 18783  004620                     __end_of_I2C_Write:
 18784                           	opt stack 0
 18785                           tblptru	equ	0xFF8
 18786                           tblptrh	equ	0xFF7
 18787                           tblptrl	equ	0xFF6
 18788                           tablat	equ	0xFF5
 18789                           prodh	equ	0xFF4
 18790                           prodl	equ	0xFF3
 18791                           intcon	equ	0xFF2
 18792                           intcon2	equ	0xFF1
 18793                           intcon3	equ	0xFF0
 18794                           postinc0	equ	0xFEE
 18795                           wreg	equ	0xFE8
 18796                           postdec1	equ	0xFE5
 18797                           plusw1	equ	0xFE3
 18798                           fsr1l	equ	0xFE1
 18799                           indf2	equ	0xFDF
 18800                           postinc2	equ	0xFDE
 18801                           postdec2	equ	0xFDD
 18802                           plusw2	equ	0xFDB
 18803                           fsr2h	equ	0xFDA
 18804                           fsr2l	equ	0xFD9
 18805                           status	equ	0xFD8
 18806                           
 18807 ;; *************** function _I2C_Stop *****************
 18808 ;; Defined at:
 18809 ;;		line 84 in file "I2C_Soft.c"
 18810 ;; Parameters:    Size  Location     Type
 18811 ;;		None
 18812 ;; Auto vars:     Size  Location     Type
 18813 ;;		None
 18814 ;; Return value:  Size  Location     Type
 18815 ;;		None               void
 18816 ;; Registers used:
 18817 ;;		wreg, cstack
 18818 ;; Tracked objects:
 18819 ;;		On entry : 0/0
 18820 ;;		On exit  : 0/0
 18821 ;;		Unchanged: 0/0
 18822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18827 ;;Total ram usage:        0 bytes
 18828 ;; Hardware stack levels used:    1
 18829 ;; Hardware stack levels required when called:    3
 18830 ;; This function calls:
 18831 ;;		_i2cHighScl
 18832 ;;		_i2cHighSda
 18833 ;;		_i2cLowScl
 18834 ;;		_i2cLowSda
 18835 ;; This function is called by:
 18836 ;;		_I2C_Write_Cmd_Only
 18837 ;;		_I2C_Write_Cmd_Write_Data
 18838 ;;		_DS1621_Read_Temp
 18839 ;;		_DS3231_Read_Time
 18840 ;;		_DS3231_Write_Time
 18841 ;;		_I2C_Write_Address_Read_One_Byte
 18842 ;;		_I2C_Write_Address_Write_One_Byte
 18843 ;;		_I2C_Write_Cmd_Read_One_Byte
 18844 ;;		_DS3231_Init
 18845 ;; This function uses a non-reentrant model
 18846 ;;
 18847                           
 18848                           	psect	text88
 18849  004B56                     __ptext88:
 18850                           	opt stack 0
 18851  004B56                     _I2C_Stop:
 18852                           	opt stack 24
 18853                           
 18854                           ;I2C_Soft.c: 86: i2cLowScl();
 18855                           
 18856                           ;incstack = 0
 18857  004B56  EC24  F026         	call	_i2cLowScl	;wreg free
 18858                           
 18859                           ;I2C_Soft.c: 87: i2cLowSda();
 18860  004B5A  EC15  F026         	call	_i2cLowSda	;wreg free
 18861                           
 18862                           ;I2C_Soft.c: 88: i2cHighScl();
 18863  004B5E  EC05  F026         	call	_i2cHighScl	;wreg free
 18864                           
 18865                           ;I2C_Soft.c: 89: i2cHighSda();
 18866  004B62  EC28  F026         	call	_i2cHighSda	;wreg free
 18867  004B66  0012               	return		;funcret
 18868  004B68                     __end_of_I2C_Stop:
 18869                           	opt stack 0
 18870                           tblptru	equ	0xFF8
 18871                           tblptrh	equ	0xFF7
 18872                           tblptrl	equ	0xFF6
 18873                           tablat	equ	0xFF5
 18874                           prodh	equ	0xFF4
 18875                           prodl	equ	0xFF3
 18876                           intcon	equ	0xFF2
 18877                           intcon2	equ	0xFF1
 18878                           intcon3	equ	0xFF0
 18879                           postinc0	equ	0xFEE
 18880                           wreg	equ	0xFE8
 18881                           postdec1	equ	0xFE5
 18882                           plusw1	equ	0xFE3
 18883                           fsr1l	equ	0xFE1
 18884                           indf2	equ	0xFDF
 18885                           postinc2	equ	0xFDE
 18886                           postdec2	equ	0xFDD
 18887                           plusw2	equ	0xFDB
 18888                           fsr2h	equ	0xFDA
 18889                           fsr2l	equ	0xFD9
 18890                           status	equ	0xFD8
 18891                           
 18892 ;; *************** function _I2C_Start *****************
 18893 ;; Defined at:
 18894 ;;		line 67 in file "I2C_Soft.c"
 18895 ;; Parameters:    Size  Location     Type
 18896 ;;		None
 18897 ;; Auto vars:     Size  Location     Type
 18898 ;;		None
 18899 ;; Return value:  Size  Location     Type
 18900 ;;		None               void
 18901 ;; Registers used:
 18902 ;;		wreg, cstack
 18903 ;; Tracked objects:
 18904 ;;		On entry : 0/0
 18905 ;;		On exit  : 0/0
 18906 ;;		Unchanged: 0/0
 18907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18912 ;;Total ram usage:        0 bytes
 18913 ;; Hardware stack levels used:    1
 18914 ;; Hardware stack levels required when called:    3
 18915 ;; This function calls:
 18916 ;;		_i2cHighScl
 18917 ;;		_i2cHighSda
 18918 ;;		_i2cLowScl
 18919 ;;		_i2cLowSda
 18920 ;; This function is called by:
 18921 ;;		_I2C_Write_Cmd_Only
 18922 ;;		_I2C_Write_Cmd_Write_Data
 18923 ;;		_DS1621_Read_Temp
 18924 ;;		_DS3231_Read_Time
 18925 ;;		_DS3231_Write_Time
 18926 ;;		_I2C_Write_Address_Read_One_Byte
 18927 ;;		_I2C_Write_Address_Write_One_Byte
 18928 ;;		_I2C_Write_Cmd_Read_One_Byte
 18929 ;;		_DS3231_Init
 18930 ;; This function uses a non-reentrant model
 18931 ;;
 18932                           
 18933                           	psect	text89
 18934  004B68                     __ptext89:
 18935                           	opt stack 0
 18936  004B68                     _I2C_Start:
 18937                           	opt stack 24
 18938                           
 18939                           ;I2C_Soft.c: 69: i2cHighSda();
 18940                           
 18941                           ;incstack = 0
 18942  004B68  EC28  F026         	call	_i2cHighSda	;wreg free
 18943                           
 18944                           ;I2C_Soft.c: 70: i2cHighScl();
 18945  004B6C  EC05  F026         	call	_i2cHighScl	;wreg free
 18946                           
 18947                           ;I2C_Soft.c: 71: i2cLowSda();
 18948  004B70  EC15  F026         	call	_i2cLowSda	;wreg free
 18949                           
 18950                           ;I2C_Soft.c: 72: i2cLowScl();
 18951  004B74  EC24  F026         	call	_i2cLowScl	;wreg free
 18952  004B78  0012               	return		;funcret
 18953  004B7A                     __end_of_I2C_Start:
 18954                           	opt stack 0
 18955                           tblptru	equ	0xFF8
 18956                           tblptrh	equ	0xFF7
 18957                           tblptrl	equ	0xFF6
 18958                           tablat	equ	0xFF5
 18959                           prodh	equ	0xFF4
 18960                           prodl	equ	0xFF3
 18961                           intcon	equ	0xFF2
 18962                           intcon2	equ	0xFF1
 18963                           intcon3	equ	0xFF0
 18964                           postinc0	equ	0xFEE
 18965                           wreg	equ	0xFE8
 18966                           postdec1	equ	0xFE5
 18967                           plusw1	equ	0xFE3
 18968                           fsr1l	equ	0xFE1
 18969                           indf2	equ	0xFDF
 18970                           postinc2	equ	0xFDE
 18971                           postdec2	equ	0xFDD
 18972                           plusw2	equ	0xFDB
 18973                           fsr2h	equ	0xFDA
 18974                           fsr2l	equ	0xFD9
 18975                           status	equ	0xFD8
 18976                           
 18977 ;; *************** function _i2cLowSda *****************
 18978 ;; Defined at:
 18979 ;;		line 98 in file "I2C_Soft.c"
 18980 ;; Parameters:    Size  Location     Type
 18981 ;;		None
 18982 ;; Auto vars:     Size  Location     Type
 18983 ;;		None
 18984 ;; Return value:  Size  Location     Type
 18985 ;;		None               void
 18986 ;; Registers used:
 18987 ;;		None
 18988 ;; Tracked objects:
 18989 ;;		On entry : 0/0
 18990 ;;		On exit  : 0/0
 18991 ;;		Unchanged: 0/0
 18992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18997 ;;Total ram usage:        0 bytes
 18998 ;; Hardware stack levels used:    1
 18999 ;; Hardware stack levels required when called:    2
 19000 ;; This function calls:
 19001 ;;		Nothing
 19002 ;; This function is called by:
 19003 ;;		_I2C_Write
 19004 ;;		_i2cAck
 19005 ;;		_I2C_Start
 19006 ;;		_I2C_ReStart
 19007 ;;		_I2C_Stop
 19008 ;; This function uses a non-reentrant model
 19009 ;;
 19010                           
 19011                           	psect	text90
 19012  004C2A                     __ptext90:
 19013                           	opt stack 0
 19014  004C2A                     _i2cLowSda:
 19015                           	opt stack 24
 19016                           
 19017                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
 19018                           
 19019                           ;incstack = 0
 19020  004C2A  9A81               	bcf	3969,5,c	;volatile
 19021                           
 19022                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
 19023  004C2C  9A93               	bcf	3987,5,c	;volatile
 19024                           
 19025                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19026  004C2E  D000               	nop2		;2 cycle nop
 19027  004C30  D000               	nop2		;2 cycle nop
 19028  004C32  0012               	return		;funcret
 19029  004C34                     __end_of_i2cLowSda:
 19030                           	opt stack 0
 19031                           tblptru	equ	0xFF8
 19032                           tblptrh	equ	0xFF7
 19033                           tblptrl	equ	0xFF6
 19034                           tablat	equ	0xFF5
 19035                           prodh	equ	0xFF4
 19036                           prodl	equ	0xFF3
 19037                           intcon	equ	0xFF2
 19038                           intcon2	equ	0xFF1
 19039                           intcon3	equ	0xFF0
 19040                           postinc0	equ	0xFEE
 19041                           wreg	equ	0xFE8
 19042                           postdec1	equ	0xFE5
 19043                           plusw1	equ	0xFE3
 19044                           fsr1l	equ	0xFE1
 19045                           indf2	equ	0xFDF
 19046                           postinc2	equ	0xFDE
 19047                           postdec2	equ	0xFDD
 19048                           plusw2	equ	0xFDB
 19049                           fsr2h	equ	0xFDA
 19050                           fsr2l	equ	0xFD9
 19051                           status	equ	0xFD8
 19052                           
 19053 ;; *************** function _i2cLowScl *****************
 19054 ;; Defined at:
 19055 ;;		line 111 in file "I2C_Soft.c"
 19056 ;; Parameters:    Size  Location     Type
 19057 ;;		None
 19058 ;; Auto vars:     Size  Location     Type
 19059 ;;		None
 19060 ;; Return value:  Size  Location     Type
 19061 ;;		None               void
 19062 ;; Registers used:
 19063 ;;		None
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : 0/0
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19073 ;;Total ram usage:        0 bytes
 19074 ;; Hardware stack levels used:    1
 19075 ;; Hardware stack levels required when called:    2
 19076 ;; This function calls:
 19077 ;;		Nothing
 19078 ;; This function is called by:
 19079 ;;		_I2C_Read
 19080 ;;		_I2C_Write
 19081 ;;		_i2cNack
 19082 ;;		_i2cAck
 19083 ;;		_I2C_Start
 19084 ;;		_I2C_ReStart
 19085 ;;		_I2C_Stop
 19086 ;; This function uses a non-reentrant model
 19087 ;;
 19088                           
 19089                           	psect	text91
 19090  004C48                     __ptext91:
 19091                           	opt stack 0
 19092  004C48                     _i2cLowScl:
 19093                           	opt stack 24
 19094                           
 19095                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 19096                           
 19097                           ;incstack = 0
 19098  004C48  9881               	bcf	3969,4,c	;volatile
 19099                           
 19100                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 19101  004C4A  9893               	bcf	3987,4,c	;volatile
 19102                           
 19103                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 19104  004C4C  D000               	nop2		;2 cycle nop
 19105  004C4E  0012               	return		;funcret
 19106  004C50                     __end_of_i2cLowScl:
 19107                           	opt stack 0
 19108                           tblptru	equ	0xFF8
 19109                           tblptrh	equ	0xFF7
 19110                           tblptrl	equ	0xFF6
 19111                           tablat	equ	0xFF5
 19112                           prodh	equ	0xFF4
 19113                           prodl	equ	0xFF3
 19114                           intcon	equ	0xFF2
 19115                           intcon2	equ	0xFF1
 19116                           intcon3	equ	0xFF0
 19117                           postinc0	equ	0xFEE
 19118                           wreg	equ	0xFE8
 19119                           postdec1	equ	0xFE5
 19120                           plusw1	equ	0xFE3
 19121                           fsr1l	equ	0xFE1
 19122                           indf2	equ	0xFDF
 19123                           postinc2	equ	0xFDE
 19124                           postdec2	equ	0xFDD
 19125                           plusw2	equ	0xFDB
 19126                           fsr2h	equ	0xFDA
 19127                           fsr2l	equ	0xFD9
 19128                           status	equ	0xFD8
 19129                           
 19130 ;; *************** function _i2cHighSda *****************
 19131 ;; Defined at:
 19132 ;;		line 92 in file "I2C_Soft.c"
 19133 ;; Parameters:    Size  Location     Type
 19134 ;;		None
 19135 ;; Auto vars:     Size  Location     Type
 19136 ;;		None
 19137 ;; Return value:  Size  Location     Type
 19138 ;;		None               void
 19139 ;; Registers used:
 19140 ;;		None
 19141 ;; Tracked objects:
 19142 ;;		On entry : 0/0
 19143 ;;		On exit  : 0/0
 19144 ;;		Unchanged: 0/0
 19145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19150 ;;Total ram usage:        0 bytes
 19151 ;; Hardware stack levels used:    1
 19152 ;; Hardware stack levels required when called:    2
 19153 ;; This function calls:
 19154 ;;		Nothing
 19155 ;; This function is called by:
 19156 ;;		_I2C_Init
 19157 ;;		_I2C_Read
 19158 ;;		_I2C_Write
 19159 ;;		_i2cAck
 19160 ;;		_I2C_Start
 19161 ;;		_I2C_ReStart
 19162 ;;		_I2C_Stop
 19163 ;; This function uses a non-reentrant model
 19164 ;;
 19165                           
 19166                           	psect	text92
 19167  004C50                     __ptext92:
 19168                           	opt stack 0
 19169  004C50                     _i2cHighSda:
 19170                           	opt stack 24
 19171                           
 19172                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
 19173                           
 19174                           ;incstack = 0
 19175  004C50  8A93               	bsf	3987,5,c	;volatile
 19176                           
 19177                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19178  004C52  D000               	nop2		;2 cycle nop
 19179  004C54  D000               	nop2		;2 cycle nop
 19180  004C56  0012               	return		;funcret
 19181  004C58                     __end_of_i2cHighSda:
 19182                           	opt stack 0
 19183                           tblptru	equ	0xFF8
 19184                           tblptrh	equ	0xFF7
 19185                           tblptrl	equ	0xFF6
 19186                           tablat	equ	0xFF5
 19187                           prodh	equ	0xFF4
 19188                           prodl	equ	0xFF3
 19189                           intcon	equ	0xFF2
 19190                           intcon2	equ	0xFF1
 19191                           intcon3	equ	0xFF0
 19192                           postinc0	equ	0xFEE
 19193                           wreg	equ	0xFE8
 19194                           postdec1	equ	0xFE5
 19195                           plusw1	equ	0xFE3
 19196                           fsr1l	equ	0xFE1
 19197                           indf2	equ	0xFDF
 19198                           postinc2	equ	0xFDE
 19199                           postdec2	equ	0xFDD
 19200                           plusw2	equ	0xFDB
 19201                           fsr2h	equ	0xFDA
 19202                           fsr2l	equ	0xFD9
 19203                           status	equ	0xFD8
 19204                           
 19205 ;; *************** function _i2cHighScl *****************
 19206 ;; Defined at:
 19207 ;;		line 105 in file "I2C_Soft.c"
 19208 ;; Parameters:    Size  Location     Type
 19209 ;;		None
 19210 ;; Auto vars:     Size  Location     Type
 19211 ;;		None
 19212 ;; Return value:  Size  Location     Type
 19213 ;;		None               void
 19214 ;; Registers used:
 19215 ;;		wreg
 19216 ;; Tracked objects:
 19217 ;;		On entry : 0/0
 19218 ;;		On exit  : 0/0
 19219 ;;		Unchanged: 0/0
 19220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19225 ;;Total ram usage:        0 bytes
 19226 ;; Hardware stack levels used:    1
 19227 ;; Hardware stack levels required when called:    2
 19228 ;; This function calls:
 19229 ;;		Nothing
 19230 ;; This function is called by:
 19231 ;;		_I2C_Init
 19232 ;;		_I2C_Read
 19233 ;;		_I2C_Write
 19234 ;;		_i2cNack
 19235 ;;		_i2cAck
 19236 ;;		_I2C_Start
 19237 ;;		_I2C_ReStart
 19238 ;;		_I2C_Stop
 19239 ;; This function uses a non-reentrant model
 19240 ;;
 19241                           
 19242                           	psect	text93
 19243  004C0A                     __ptext93:
 19244                           	opt stack 0
 19245  004C0A                     _i2cHighScl:
 19246                           	opt stack 24
 19247                           
 19248                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 19249                           
 19250                           ;incstack = 0
 19251  004C0A  8893               	bsf	3987,4,c	;volatile
 19252                           
 19253                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 19254  004C0C  0E06               	movlw	6
 19255  004C0E                     u8927:
 19256  004C0E  2EE8               	decfsz	wreg,f,c
 19257  004C10  D7FE               	goto	u8927
 19258  004C12  D000               	nop2		;nop
 19259  004C14  0012               	return		;funcret
 19260  004C16                     __end_of_i2cHighScl:
 19261                           	opt stack 0
 19262                           tblptru	equ	0xFF8
 19263                           tblptrh	equ	0xFF7
 19264                           tblptrl	equ	0xFF6
 19265                           tablat	equ	0xFF5
 19266                           prodh	equ	0xFF4
 19267                           prodl	equ	0xFF3
 19268                           intcon	equ	0xFF2
 19269                           intcon2	equ	0xFF1
 19270                           intcon3	equ	0xFF0
 19271                           postinc0	equ	0xFEE
 19272                           wreg	equ	0xFE8
 19273                           postdec1	equ	0xFE5
 19274                           plusw1	equ	0xFE3
 19275                           fsr1l	equ	0xFE1
 19276                           indf2	equ	0xFDF
 19277                           postinc2	equ	0xFDE
 19278                           postdec2	equ	0xFDD
 19279                           plusw2	equ	0xFDB
 19280                           fsr2h	equ	0xFDA
 19281                           fsr2l	equ	0xFD9
 19282                           status	equ	0xFD8
 19283                           
 19284 ;; *************** function _Do_Change_Fan_Timer_Mode_Plus *****************
 19285 ;; Defined at:
 19286 ;;		line 146 in file "Fan_Support.c"
 19287 ;; Parameters:    Size  Location     Type
 19288 ;;		None
 19289 ;; Auto vars:     Size  Location     Type
 19290 ;;		None
 19291 ;; Return value:  Size  Location     Type
 19292 ;;		None               void
 19293 ;; Registers used:
 19294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19295 ;; Tracked objects:
 19296 ;;		On entry : 0/0
 19297 ;;		On exit  : 0/0
 19298 ;;		Unchanged: 0/0
 19299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19304 ;;Total ram usage:        0 bytes
 19305 ;; Hardware stack levels used:    1
 19306 ;; Hardware stack levels required when called:    6
 19307 ;; This function calls:
 19308 ;;		_Do_Beep_Bad
 19309 ;;		_Do_Beep_Good
 19310 ;; This function is called by:
 19311 ;;		_main
 19312 ;; This function uses a non-reentrant model
 19313 ;;
 19314                           
 19315                           	psect	text94
 19316  00472A                     __ptext94:
 19317                           	opt stack 0
 19318  00472A                     _Do_Change_Fan_Timer_Mode_Plus:
 19319                           	opt stack 24
 19320                           
 19321                           ;Fan_Support.c: 148: if (FAN_TIMER_MODE < 3)
 19322                           
 19323                           ;incstack = 0
 19324  00472A  0E03               	movlw	3
 19325  00472C  6063               	cpfslt	_FAN_TIMER_MODE,c
 19326  00472E  D00F               	goto	l9737
 19327                           
 19328                           ;Fan_Support.c: 149: {
 19329                           ;Fan_Support.c: 150: FAN_TIMER_MODE++;
 19330  004730  2A63               	incf	_FAN_TIMER_MODE,f,c
 19331                           
 19332                           ;Fan_Support.c: 151: FAN_TIMER_TIME= Timer_Table[FAN_TIMER_MODE];
 19333  004732  5063               	movf	_FAN_TIMER_MODE,w,c
 19334  004734  0D01               	mullw	1
 19335  004736  0EB0               	movlw	low _Timer_Table
 19336  004738  24F3               	addwf	prodl,w,c
 19337  00473A  6ED9               	movwf	fsr2l,c
 19338  00473C  0E00               	movlw	high _Timer_Table
 19339  00473E  20F4               	addwfc	prodh,w,c
 19340  004740  6EDA               	movwf	fsr2h,c
 19341  004742  50DF               	movf	indf2,w,c
 19342  004744  0100               	movlb	0	; () banked
 19343  004746  6FE3               	movwf	_FAN_TIMER_TIME& (0+255),b
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;Fan_Support.c: 152: Do_Beep_Good();
 19347  004748  EC02  F025         	call	_Do_Beep_Good	;wreg free
 19348                           
 19349                           ;Fan_Support.c: 153: }
 19350  00474C  D003               	goto	l77
 19351  00474E                     l9737:
 19352                           
 19353                           ;Fan_Support.c: 154: else Do_Beep_Bad();
 19354  00474E  EC10  F025         	call	_Do_Beep_Bad	;wreg free
 19355  004752  D000               	goto	l77
 19356  004754                     l77:
 19357  004754  0012               	return		;funcret
 19358  004756                     __end_of_Do_Change_Fan_Timer_Mode_Plus:
 19359                           	opt stack 0
 19360                           tblptru	equ	0xFF8
 19361                           tblptrh	equ	0xFF7
 19362                           tblptrl	equ	0xFF6
 19363                           tablat	equ	0xFF5
 19364                           prodh	equ	0xFF4
 19365                           prodl	equ	0xFF3
 19366                           intcon	equ	0xFF2
 19367                           intcon2	equ	0xFF1
 19368                           intcon3	equ	0xFF0
 19369                           postinc0	equ	0xFEE
 19370                           wreg	equ	0xFE8
 19371                           postdec1	equ	0xFE5
 19372                           plusw1	equ	0xFE3
 19373                           fsr1l	equ	0xFE1
 19374                           indf2	equ	0xFDF
 19375                           postinc2	equ	0xFDE
 19376                           postdec2	equ	0xFDD
 19377                           plusw2	equ	0xFDB
 19378                           fsr2h	equ	0xFDA
 19379                           fsr2l	equ	0xFD9
 19380                           status	equ	0xFD8
 19381                           
 19382 ;; *************** function _Do_Change_Fan_Timer_Mode_Minus *****************
 19383 ;; Defined at:
 19384 ;;		line 158 in file "Fan_Support.c"
 19385 ;; Parameters:    Size  Location     Type
 19386 ;;		None
 19387 ;; Auto vars:     Size  Location     Type
 19388 ;;		None
 19389 ;; Return value:  Size  Location     Type
 19390 ;;		None               void
 19391 ;; Registers used:
 19392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19393 ;; Tracked objects:
 19394 ;;		On entry : 0/0
 19395 ;;		On exit  : 0/0
 19396 ;;		Unchanged: 0/0
 19397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19402 ;;Total ram usage:        0 bytes
 19403 ;; Hardware stack levels used:    1
 19404 ;; Hardware stack levels required when called:    6
 19405 ;; This function calls:
 19406 ;;		_Do_Beep_Bad
 19407 ;;		_Do_Beep_Good
 19408 ;; This function is called by:
 19409 ;;		_main
 19410 ;; This function uses a non-reentrant model
 19411 ;;
 19412                           
 19413                           	psect	text95
 19414  004756                     __ptext95:
 19415                           	opt stack 0
 19416  004756                     _Do_Change_Fan_Timer_Mode_Minus:
 19417                           	opt stack 24
 19418                           
 19419                           ;Fan_Support.c: 160: if (FAN_TIMER_MODE == 0)
 19420                           
 19421                           ;incstack = 0
 19422  004756  5063               	movf	_FAN_TIMER_MODE,w,c
 19423  004758  A4D8               	btfss	status,2,c
 19424  00475A  D003               	goto	l9743
 19425                           
 19426                           ;Fan_Support.c: 161: {
 19427                           ;Fan_Support.c: 162: Do_Beep_Bad();
 19428  00475C  EC10  F025         	call	_Do_Beep_Bad	;wreg free
 19429                           
 19430                           ;Fan_Support.c: 163: }
 19431  004760  D00F               	goto	l82
 19432  004762                     l9743:
 19433                           
 19434                           ;Fan_Support.c: 164: else
 19435                           ;Fan_Support.c: 165: {
 19436                           ;Fan_Support.c: 166: FAN_TIMER_MODE--;
 19437  004762  0663               	decf	_FAN_TIMER_MODE,f,c
 19438                           
 19439                           ;Fan_Support.c: 167: FAN_TIMER_TIME= Timer_Table[FAN_TIMER_MODE];
 19440  004764  5063               	movf	_FAN_TIMER_MODE,w,c
 19441  004766  0D01               	mullw	1
 19442  004768  0EB0               	movlw	low _Timer_Table
 19443  00476A  24F3               	addwf	prodl,w,c
 19444  00476C  6ED9               	movwf	fsr2l,c
 19445  00476E  0E00               	movlw	high _Timer_Table
 19446  004770  20F4               	addwfc	prodh,w,c
 19447  004772  6EDA               	movwf	fsr2h,c
 19448  004774  50DF               	movf	indf2,w,c
 19449  004776  0100               	movlb	0	; () banked
 19450  004778  6FE3               	movwf	_FAN_TIMER_TIME& (0+255),b
 19451                           
 19452                           ; BSR set to: 0
 19453                           ;Fan_Support.c: 168: Do_Beep_Good();
 19454  00477A  EC02  F025         	call	_Do_Beep_Good	;wreg free
 19455  00477E  D000               	goto	l82
 19456  004780                     l82:
 19457  004780  0012               	return		;funcret
 19458  004782                     __end_of_Do_Change_Fan_Timer_Mode_Minus:
 19459                           	opt stack 0
 19460                           tblptru	equ	0xFF8
 19461                           tblptrh	equ	0xFF7
 19462                           tblptrl	equ	0xFF6
 19463                           tablat	equ	0xFF5
 19464                           prodh	equ	0xFF4
 19465                           prodl	equ	0xFF3
 19466                           intcon	equ	0xFF2
 19467                           intcon2	equ	0xFF1
 19468                           intcon3	equ	0xFF0
 19469                           postinc0	equ	0xFEE
 19470                           wreg	equ	0xFE8
 19471                           postdec1	equ	0xFE5
 19472                           plusw1	equ	0xFE3
 19473                           fsr1l	equ	0xFE1
 19474                           indf2	equ	0xFDF
 19475                           postinc2	equ	0xFDE
 19476                           postdec2	equ	0xFDD
 19477                           plusw2	equ	0xFDB
 19478                           fsr2h	equ	0xFDA
 19479                           fsr2l	equ	0xFD9
 19480                           status	equ	0xFD8
 19481                           
 19482 ;; *************** function _Do_Beep_Good *****************
 19483 ;; Defined at:
 19484 ;;		line 77 in file "utils.c"
 19485 ;; Parameters:    Size  Location     Type
 19486 ;;		None
 19487 ;; Auto vars:     Size  Location     Type
 19488 ;;		None
 19489 ;; Return value:  Size  Location     Type
 19490 ;;		None               void
 19491 ;; Registers used:
 19492 ;;		wreg, status,2, status,0, cstack
 19493 ;; Tracked objects:
 19494 ;;		On entry : 0/0
 19495 ;;		On exit  : 0/0
 19496 ;;		Unchanged: 0/0
 19497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19502 ;;Total ram usage:        0 bytes
 19503 ;; Hardware stack levels used:    1
 19504 ;; Hardware stack levels required when called:    5
 19505 ;; This function calls:
 19506 ;;		_Activate_Buzzer_2KHz
 19507 ;;		_Deactivate_Buzzer
 19508 ;;		_Wait_Half_Sec
 19509 ;;		_do_update_pwm
 19510 ;; This function is called by:
 19511 ;;		_Do_Change_Fan_Timer_Mode_Plus
 19512 ;;		_Do_Change_Fan_Timer_Mode_Minus
 19513 ;;		_main
 19514 ;;		_Setup_Fan_Temp
 19515 ;;		_Do_Setup_Time
 19516 ;; This function uses a non-reentrant model
 19517 ;;
 19518                           
 19519                           	psect	text96
 19520  004A04                     __ptext96:
 19521                           	opt stack 0
 19522  004A04                     _Do_Beep_Good:
 19523                           	opt stack 24
 19524                           
 19525                           ;utils.c: 79: PORTDbits.RD3 = 1;
 19526                           
 19527                           ;incstack = 0
 19528  004A04  8683               	bsf	3971,3,c	;volatile
 19529                           
 19530                           ;utils.c: 80: Activate_Buzzer_2KHz();
 19531  004A06  ECBD  F025         	call	_Activate_Buzzer_2KHz	;wreg free
 19532                           
 19533                           ;utils.c: 81: Wait_Half_Sec();
 19534  004A0A  EC2C  F025         	call	_Wait_Half_Sec	;wreg free
 19535                           
 19536                           ;utils.c: 82: PORTDbits.RD3 = 0;
 19537  004A0E  9683               	bcf	3971,3,c	;volatile
 19538                           
 19539                           ;utils.c: 83: Deactivate_Buzzer();
 19540  004A10  EC2C  F026         	call	_Deactivate_Buzzer	;wreg free
 19541                           
 19542                           ;utils.c: 84: Wait_Half_Sec();
 19543  004A14  EC2C  F025         	call	_Wait_Half_Sec	;wreg free
 19544                           
 19545                           ;utils.c: 85: do_update_pwm(duty_cycle);
 19546  004A18  5067               	movf	_duty_cycle,w,c
 19547  004A1A  EC0F  F01C         	call	_do_update_pwm
 19548  004A1E  0012               	return		;funcret
 19549  004A20                     __end_of_Do_Beep_Good:
 19550                           	opt stack 0
 19551                           tblptru	equ	0xFF8
 19552                           tblptrh	equ	0xFF7
 19553                           tblptrl	equ	0xFF6
 19554                           tablat	equ	0xFF5
 19555                           prodh	equ	0xFF4
 19556                           prodl	equ	0xFF3
 19557                           intcon	equ	0xFF2
 19558                           intcon2	equ	0xFF1
 19559                           intcon3	equ	0xFF0
 19560                           postinc0	equ	0xFEE
 19561                           wreg	equ	0xFE8
 19562                           postdec1	equ	0xFE5
 19563                           plusw1	equ	0xFE3
 19564                           fsr1l	equ	0xFE1
 19565                           indf2	equ	0xFDF
 19566                           postinc2	equ	0xFDE
 19567                           postdec2	equ	0xFDD
 19568                           plusw2	equ	0xFDB
 19569                           fsr2h	equ	0xFDA
 19570                           fsr2l	equ	0xFD9
 19571                           status	equ	0xFD8
 19572                           
 19573 ;; *************** function _Activate_Buzzer_2KHz *****************
 19574 ;; Defined at:
 19575 ;;		line 120 in file "utils.c"
 19576 ;; Parameters:    Size  Location     Type
 19577 ;;		None
 19578 ;; Auto vars:     Size  Location     Type
 19579 ;;		None
 19580 ;; Return value:  Size  Location     Type
 19581 ;;		None               void
 19582 ;; Registers used:
 19583 ;;		wreg, status,2
 19584 ;; Tracked objects:
 19585 ;;		On entry : 0/0
 19586 ;;		On exit  : 0/0
 19587 ;;		Unchanged: 0/0
 19588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19593 ;;Total ram usage:        0 bytes
 19594 ;; Hardware stack levels used:    1
 19595 ;; Hardware stack levels required when called:    2
 19596 ;; This function calls:
 19597 ;;		Nothing
 19598 ;; This function is called by:
 19599 ;;		_Do_Beep_Good
 19600 ;; This function uses a non-reentrant model
 19601 ;;
 19602                           
 19603                           	psect	text97
 19604  004B7A                     __ptext97:
 19605                           	opt stack 0
 19606  004B7A                     _Activate_Buzzer_2KHz:
 19607                           	opt stack 26
 19608                           
 19609                           ;utils.c: 122: PR2 = 0b11111001 ;
 19610                           
 19611                           ;incstack = 0
 19612  004B7A  0EF9               	movlw	249
 19613  004B7C  6ECB               	movwf	4043,c	;volatile
 19614                           
 19615                           ;utils.c: 123: T2CON = 0b00000101 ;
 19616  004B7E  0E05               	movlw	5
 19617  004B80  6ECA               	movwf	4042,c	;volatile
 19618                           
 19619                           ;utils.c: 124: CCPR2L = 0b01111100 ;
 19620  004B82  0E7C               	movlw	124
 19621  004B84  6EBB               	movwf	4027,c	;volatile
 19622                           
 19623                           ;utils.c: 125: CCP2CON = 0b00111100 ;
 19624  004B86  0E3C               	movlw	60
 19625  004B88  6EBA               	movwf	4026,c	;volatile
 19626  004B8A  0012               	return		;funcret
 19627  004B8C                     __end_of_Activate_Buzzer_2KHz:
 19628                           	opt stack 0
 19629                           tblptru	equ	0xFF8
 19630                           tblptrh	equ	0xFF7
 19631                           tblptrl	equ	0xFF6
 19632                           tablat	equ	0xFF5
 19633                           prodh	equ	0xFF4
 19634                           prodl	equ	0xFF3
 19635                           intcon	equ	0xFF2
 19636                           intcon2	equ	0xFF1
 19637                           intcon3	equ	0xFF0
 19638                           postinc0	equ	0xFEE
 19639                           wreg	equ	0xFE8
 19640                           postdec1	equ	0xFE5
 19641                           plusw1	equ	0xFE3
 19642                           fsr1l	equ	0xFE1
 19643                           indf2	equ	0xFDF
 19644                           postinc2	equ	0xFDE
 19645                           postdec2	equ	0xFDD
 19646                           plusw2	equ	0xFDB
 19647                           fsr2h	equ	0xFDA
 19648                           fsr2l	equ	0xFD9
 19649                           status	equ	0xFD8
 19650                           
 19651 ;; *************** function _Do_Beep_Bad *****************
 19652 ;; Defined at:
 19653 ;;		line 88 in file "utils.c"
 19654 ;; Parameters:    Size  Location     Type
 19655 ;;		None
 19656 ;; Auto vars:     Size  Location     Type
 19657 ;;		None
 19658 ;; Return value:  Size  Location     Type
 19659 ;;		None               void
 19660 ;; Registers used:
 19661 ;;		wreg, status,2, status,0, cstack
 19662 ;; Tracked objects:
 19663 ;;		On entry : 0/0
 19664 ;;		On exit  : 0/0
 19665 ;;		Unchanged: 0/0
 19666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19671 ;;Total ram usage:        0 bytes
 19672 ;; Hardware stack levels used:    1
 19673 ;; Hardware stack levels required when called:    5
 19674 ;; This function calls:
 19675 ;;		_Activate_Buzzer_500Hz
 19676 ;;		_Deactivate_Buzzer
 19677 ;;		_Wait_Half_Sec
 19678 ;;		_do_update_pwm
 19679 ;; This function is called by:
 19680 ;;		_Do_Change_Fan_Timer_Mode_Plus
 19681 ;;		_Do_Change_Fan_Timer_Mode_Minus
 19682 ;;		_main
 19683 ;;		_Setup_Fan_Temp
 19684 ;;		_Do_Setup_Time
 19685 ;; This function uses a non-reentrant model
 19686 ;;
 19687                           
 19688                           	psect	text98
 19689  004A20                     __ptext98:
 19690                           	opt stack 0
 19691  004A20                     _Do_Beep_Bad:
 19692                           	opt stack 24
 19693                           
 19694                           ;utils.c: 90: PORTDbits.RD3 = 1;
 19695                           
 19696                           ;incstack = 0
 19697  004A20  8683               	bsf	3971,3,c	;volatile
 19698                           
 19699                           ;utils.c: 91: Activate_Buzzer_500Hz();
 19700  004A22  ECC6  F025         	call	_Activate_Buzzer_500Hz	;wreg free
 19701                           
 19702                           ;utils.c: 92: Wait_Half_Sec();
 19703  004A26  EC2C  F025         	call	_Wait_Half_Sec	;wreg free
 19704                           
 19705                           ;utils.c: 93: PORTDbits.RD3 = 0;
 19706  004A2A  9683               	bcf	3971,3,c	;volatile
 19707                           
 19708                           ;utils.c: 94: Deactivate_Buzzer();
 19709  004A2C  EC2C  F026         	call	_Deactivate_Buzzer	;wreg free
 19710                           
 19711                           ;utils.c: 95: Wait_Half_Sec();
 19712  004A30  EC2C  F025         	call	_Wait_Half_Sec	;wreg free
 19713                           
 19714                           ;utils.c: 96: do_update_pwm(duty_cycle);
 19715  004A34  5067               	movf	_duty_cycle,w,c
 19716  004A36  EC0F  F01C         	call	_do_update_pwm
 19717  004A3A  0012               	return		;funcret
 19718  004A3C                     __end_of_Do_Beep_Bad:
 19719                           	opt stack 0
 19720                           tblptru	equ	0xFF8
 19721                           tblptrh	equ	0xFF7
 19722                           tblptrl	equ	0xFF6
 19723                           tablat	equ	0xFF5
 19724                           prodh	equ	0xFF4
 19725                           prodl	equ	0xFF3
 19726                           intcon	equ	0xFF2
 19727                           intcon2	equ	0xFF1
 19728                           intcon3	equ	0xFF0
 19729                           postinc0	equ	0xFEE
 19730                           wreg	equ	0xFE8
 19731                           postdec1	equ	0xFE5
 19732                           plusw1	equ	0xFE3
 19733                           fsr1l	equ	0xFE1
 19734                           indf2	equ	0xFDF
 19735                           postinc2	equ	0xFDE
 19736                           postdec2	equ	0xFDD
 19737                           plusw2	equ	0xFDB
 19738                           fsr2h	equ	0xFDA
 19739                           fsr2l	equ	0xFD9
 19740                           status	equ	0xFD8
 19741                           
 19742 ;; *************** function _Activate_Buzzer_500Hz *****************
 19743 ;; Defined at:
 19744 ;;		line 112 in file "utils.c"
 19745 ;; Parameters:    Size  Location     Type
 19746 ;;		None
 19747 ;; Auto vars:     Size  Location     Type
 19748 ;;		None
 19749 ;; Return value:  Size  Location     Type
 19750 ;;		None               void
 19751 ;; Registers used:
 19752 ;;		wreg, status,2
 19753 ;; Tracked objects:
 19754 ;;		On entry : 0/0
 19755 ;;		On exit  : 0/0
 19756 ;;		Unchanged: 0/0
 19757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19762 ;;Total ram usage:        0 bytes
 19763 ;; Hardware stack levels used:    1
 19764 ;; Hardware stack levels required when called:    2
 19765 ;; This function calls:
 19766 ;;		Nothing
 19767 ;; This function is called by:
 19768 ;;		_Do_Beep_Bad
 19769 ;; This function uses a non-reentrant model
 19770 ;;
 19771                           
 19772                           	psect	text99
 19773  004B8C                     __ptext99:
 19774                           	opt stack 0
 19775  004B8C                     _Activate_Buzzer_500Hz:
 19776                           	opt stack 26
 19777                           
 19778                           ;utils.c: 114: PR2 = 0b11111001 ;
 19779                           
 19780                           ;incstack = 0
 19781  004B8C  0EF9               	movlw	249
 19782  004B8E  6ECB               	movwf	4043,c	;volatile
 19783                           
 19784                           ;utils.c: 115: T2CON = 0b00000111 ;
 19785  004B90  0E07               	movlw	7
 19786  004B92  6ECA               	movwf	4042,c	;volatile
 19787                           
 19788                           ;utils.c: 116: CCPR2L = 0b01111100 ;
 19789  004B94  0E7C               	movlw	124
 19790  004B96  6EBB               	movwf	4027,c	;volatile
 19791                           
 19792                           ;utils.c: 117: CCP2CON = 0b00111100 ;
 19793  004B98  0E3C               	movlw	60
 19794  004B9A  6EBA               	movwf	4026,c	;volatile
 19795  004B9C  0012               	return		;funcret
 19796  004B9E                     __end_of_Activate_Buzzer_500Hz:
 19797                           	opt stack 0
 19798                           tblptru	equ	0xFF8
 19799                           tblptrh	equ	0xFF7
 19800                           tblptrl	equ	0xFF6
 19801                           tablat	equ	0xFF5
 19802                           prodh	equ	0xFF4
 19803                           prodl	equ	0xFF3
 19804                           intcon	equ	0xFF2
 19805                           intcon2	equ	0xFF1
 19806                           intcon3	equ	0xFF0
 19807                           postinc0	equ	0xFEE
 19808                           wreg	equ	0xFE8
 19809                           postdec1	equ	0xFE5
 19810                           plusw1	equ	0xFE3
 19811                           fsr1l	equ	0xFE1
 19812                           indf2	equ	0xFDF
 19813                           postinc2	equ	0xFDE
 19814                           postdec2	equ	0xFDD
 19815                           plusw2	equ	0xFDB
 19816                           fsr2h	equ	0xFDA
 19817                           fsr2l	equ	0xFD9
 19818                           status	equ	0xFD8
 19819                           
 19820 ;; *************** function _Decrease_Duty_Cycle *****************
 19821 ;; Defined at:
 19822 ;;		line 129 in file "Fan_Support.c"
 19823 ;; Parameters:    Size  Location     Type
 19824 ;;		None
 19825 ;; Auto vars:     Size  Location     Type
 19826 ;;		None
 19827 ;; Return value:  Size  Location     Type
 19828 ;;		None               void
 19829 ;; Registers used:
 19830 ;;		wreg, status,2, status,0, cstack
 19831 ;; Tracked objects:
 19832 ;;		On entry : 0/0
 19833 ;;		On exit  : 0/0
 19834 ;;		Unchanged: 0/0
 19835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19840 ;;Total ram usage:        0 bytes
 19841 ;; Hardware stack levels used:    1
 19842 ;; Hardware stack levels required when called:    6
 19843 ;; This function calls:
 19844 ;;		_Do_Beep
 19845 ;;		_do_update_pwm
 19846 ;; This function is called by:
 19847 ;;		_main
 19848 ;; This function uses a non-reentrant model
 19849 ;;
 19850                           
 19851                           	psect	text100
 19852  004876                     __ptext100:
 19853                           	opt stack 0
 19854  004876                     _Decrease_Duty_Cycle:
 19855                           	opt stack 24
 19856                           
 19857                           ;Fan_Support.c: 133: if (duty_cycle == 0)
 19858                           
 19859                           ;incstack = 0
 19860  004876  5067               	movf	_duty_cycle,w,c
 19861  004878  A4D8               	btfss	status,2,c
 19862  00487A  D008               	goto	l9725
 19863                           
 19864                           ;Fan_Support.c: 134: {
 19865                           ;Fan_Support.c: 135: Do_Beep();
 19866  00487C  EC1E  F025         	call	_Do_Beep	;wreg free
 19867                           
 19868                           ;Fan_Support.c: 136: Do_Beep();
 19869  004880  EC1E  F025         	call	_Do_Beep	;wreg free
 19870                           
 19871                           ;Fan_Support.c: 137: do_update_pwm(duty_cycle);
 19872  004884  5067               	movf	_duty_cycle,w,c
 19873  004886  EC0F  F01C         	call	_do_update_pwm
 19874                           
 19875                           ;Fan_Support.c: 138: }
 19876  00488A  D007               	goto	l72
 19877  00488C                     l9725:
 19878                           
 19879                           ;Fan_Support.c: 139: else
 19880                           ;Fan_Support.c: 140: {
 19881                           ;Fan_Support.c: 141: duty_cycle = duty_cycle - 5;
 19882  00488C  5067               	movf	_duty_cycle,w,c
 19883  00488E  0FFB               	addlw	251
 19884  004890  6E67               	movwf	_duty_cycle,c
 19885                           
 19886                           ;Fan_Support.c: 142: do_update_pwm(duty_cycle);
 19887  004892  5067               	movf	_duty_cycle,w,c
 19888  004894  EC0F  F01C         	call	_do_update_pwm
 19889  004898  D000               	goto	l72
 19890  00489A                     l72:
 19891  00489A  0012               	return		;funcret
 19892  00489C                     __end_of_Decrease_Duty_Cycle:
 19893                           	opt stack 0
 19894                           tblptru	equ	0xFF8
 19895                           tblptrh	equ	0xFF7
 19896                           tblptrl	equ	0xFF6
 19897                           tablat	equ	0xFF5
 19898                           prodh	equ	0xFF4
 19899                           prodl	equ	0xFF3
 19900                           intcon	equ	0xFF2
 19901                           intcon2	equ	0xFF1
 19902                           intcon3	equ	0xFF0
 19903                           postinc0	equ	0xFEE
 19904                           wreg	equ	0xFE8
 19905                           postdec1	equ	0xFE5
 19906                           plusw1	equ	0xFE3
 19907                           fsr1l	equ	0xFE1
 19908                           indf2	equ	0xFDF
 19909                           postinc2	equ	0xFDE
 19910                           postdec2	equ	0xFDD
 19911                           plusw2	equ	0xFDB
 19912                           fsr2h	equ	0xFDA
 19913                           fsr2l	equ	0xFD9
 19914                           status	equ	0xFD8
 19915                           
 19916 ;; *************** function _Do_Beep *****************
 19917 ;; Defined at:
 19918 ;;		line 66 in file "utils.c"
 19919 ;; Parameters:    Size  Location     Type
 19920 ;;		None
 19921 ;; Auto vars:     Size  Location     Type
 19922 ;;		None
 19923 ;; Return value:  Size  Location     Type
 19924 ;;		None               void
 19925 ;; Registers used:
 19926 ;;		wreg, status,2, status,0, cstack
 19927 ;; Tracked objects:
 19928 ;;		On entry : 0/0
 19929 ;;		On exit  : 0/0
 19930 ;;		Unchanged: 0/0
 19931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19936 ;;Total ram usage:        0 bytes
 19937 ;; Hardware stack levels used:    1
 19938 ;; Hardware stack levels required when called:    5
 19939 ;; This function calls:
 19940 ;;		_Activate_Buzzer
 19941 ;;		_Deactivate_Buzzer
 19942 ;;		_Wait_Half_Sec
 19943 ;;		_do_update_pwm
 19944 ;; This function is called by:
 19945 ;;		_Increase_Duty_Cycle
 19946 ;;		_Decrease_Duty_Cycle
 19947 ;; This function uses a non-reentrant model
 19948 ;;
 19949                           
 19950                           	psect	text101
 19951  004A3C                     __ptext101:
 19952                           	opt stack 0
 19953  004A3C                     _Do_Beep:
 19954                           	opt stack 24
 19955                           
 19956                           ;utils.c: 68: PORTDbits.RD3 = 1;
 19957                           
 19958                           ;incstack = 0
 19959  004A3C  8683               	bsf	3971,3,c	;volatile
 19960                           
 19961                           ;utils.c: 69: Activate_Buzzer();
 19962  004A3E  ECCF  F025         	call	_Activate_Buzzer	;wreg free
 19963                           
 19964                           ;utils.c: 70: Wait_Half_Sec();
 19965  004A42  EC2C  F025         	call	_Wait_Half_Sec	;wreg free
 19966                           
 19967                           ;utils.c: 71: PORTDbits.RD3 = 0;
 19968  004A46  9683               	bcf	3971,3,c	;volatile
 19969                           
 19970                           ;utils.c: 72: Deactivate_Buzzer();
 19971  004A48  EC2C  F026         	call	_Deactivate_Buzzer	;wreg free
 19972                           
 19973                           ;utils.c: 73: Wait_Half_Sec();
 19974  004A4C  EC2C  F025         	call	_Wait_Half_Sec	;wreg free
 19975                           
 19976                           ;utils.c: 74: do_update_pwm(duty_cycle);
 19977  004A50  5067               	movf	_duty_cycle,w,c
 19978  004A52  EC0F  F01C         	call	_do_update_pwm
 19979  004A56  0012               	return		;funcret
 19980  004A58                     __end_of_Do_Beep:
 19981                           	opt stack 0
 19982                           tblptru	equ	0xFF8
 19983                           tblptrh	equ	0xFF7
 19984                           tblptrl	equ	0xFF6
 19985                           tablat	equ	0xFF5
 19986                           prodh	equ	0xFF4
 19987                           prodl	equ	0xFF3
 19988                           intcon	equ	0xFF2
 19989                           intcon2	equ	0xFF1
 19990                           intcon3	equ	0xFF0
 19991                           postinc0	equ	0xFEE
 19992                           wreg	equ	0xFE8
 19993                           postdec1	equ	0xFE5
 19994                           plusw1	equ	0xFE3
 19995                           fsr1l	equ	0xFE1
 19996                           indf2	equ	0xFDF
 19997                           postinc2	equ	0xFDE
 19998                           postdec2	equ	0xFDD
 19999                           plusw2	equ	0xFDB
 20000                           fsr2h	equ	0xFDA
 20001                           fsr2l	equ	0xFD9
 20002                           status	equ	0xFD8
 20003                           
 20004 ;; *************** function _do_update_pwm *****************
 20005 ;; Defined at:
 20006 ;;		line 142 in file "utils.c"
 20007 ;; Parameters:    Size  Location     Type
 20008 ;;  duty_cycle      1    wreg     unsigned char 
 20009 ;; Auto vars:     Size  Location     Type
 20010 ;;  duty_cycle      1   66[COMRAM] unsigned char 
 20011 ;;  dc_f            3   63[COMRAM] float 
 20012 ;;  dc_I            2   67[COMRAM] int 
 20013 ;; Return value:  Size  Location     Type
 20014 ;;		None               void
 20015 ;; Registers used:
 20016 ;;		wreg, status,2, status,0, cstack
 20017 ;; Tracked objects:
 20018 ;;		On entry : 0/0
 20019 ;;		On exit  : 0/0
 20020 ;;		Unchanged: 0/0
 20021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20023 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20024 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20025 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20026 ;;Total ram usage:        9 bytes
 20027 ;; Hardware stack levels used:    1
 20028 ;; Hardware stack levels required when called:    4
 20029 ;; This function calls:
 20030 ;;		___ftdiv
 20031 ;;		___ftmul
 20032 ;;		___fttol
 20033 ;;		___lbtoft
 20034 ;; This function is called by:
 20035 ;;		_Monitor_Fan
 20036 ;;		_Turn_On_Fan
 20037 ;;		_Increase_Duty_Cycle
 20038 ;;		_Decrease_Duty_Cycle
 20039 ;;		_Do_Beep
 20040 ;;		_Do_Beep_Good
 20041 ;;		_Do_Beep_Bad
 20042 ;; This function uses a non-reentrant model
 20043 ;;
 20044                           
 20045                           	psect	text102
 20046  00381E                     __ptext102:
 20047                           	opt stack 0
 20048  00381E                     _do_update_pwm:
 20049                           	opt stack 24
 20050                           
 20051                           ;incstack = 0
 20052                           ;do_update_pwm@duty_cycle stored from wreg
 20053  00381E  6E43               	movwf	do_update_pwm@duty_cycle,c
 20054                           
 20055                           ;utils.c: 144: float dc_f;
 20056                           ;utils.c: 145: int dc_I;
 20057                           ;utils.c: 146: PR2 = 0b00000100 ;
 20058  003820  0E04               	movlw	4
 20059  003822  6ECB               	movwf	4043,c	;volatile
 20060                           
 20061                           ;utils.c: 147: T2CON = 0b00000111 ;
 20062  003824  0E07               	movlw	7
 20063  003826  6ECA               	movwf	4042,c	;volatile
 20064                           
 20065                           ;utils.c: 148: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 20066  003828  0E00               	movlw	0
 20067  00382A  6E22               	movwf	___ftmul@f2,c
 20068  00382C  0E80               	movlw	128
 20069  00382E  6E23               	movwf	___ftmul@f2+1,c
 20070  003830  0E40               	movlw	64
 20071  003832  6E24               	movwf	___ftmul@f2+2,c
 20072  003834  5043               	movf	do_update_pwm@duty_cycle,w,c
 20073  003836  EC4E  F024         	call	___lbtoft
 20074  00383A  C019  F01F         	movff	?___lbtoft,___ftmul@f1
 20075  00383E  C01A  F020         	movff	?___lbtoft+1,___ftmul@f1+1
 20076  003842  C01B  F021         	movff	?___lbtoft+2,___ftmul@f1+2
 20077  003846  EC24  F018         	call	___ftmul	;wreg free
 20078  00384A  C01F  F02E         	movff	?___ftmul,___ftdiv@f1
 20079  00384E  C020  F02F         	movff	?___ftmul+1,___ftdiv@f1+1
 20080  003852  C021  F030         	movff	?___ftmul+2,___ftdiv@f1+2
 20081  003856  0E00               	movlw	0
 20082  003858  6E31               	movwf	___ftdiv@f2,c
 20083  00385A  0EA0               	movlw	160
 20084  00385C  6E32               	movwf	___ftdiv@f2+1,c
 20085  00385E  0E41               	movlw	65
 20086  003860  6E33               	movwf	___ftdiv@f2+2,c
 20087  003862  EC72  F01A         	call	___ftdiv	;wreg free
 20088  003866  C02E  F040         	movff	?___ftdiv,do_update_pwm@dc_f
 20089  00386A  C02F  F041         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 20090  00386E  C030  F042         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 20091                           
 20092                           ;utils.c: 149: dc_I = (int) dc_f;
 20093  003872  C040  F02E         	movff	do_update_pwm@dc_f,___fttol@f1
 20094  003876  C041  F02F         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 20095  00387A  C042  F030         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 20096  00387E  EC8E  F019         	call	___fttol	;wreg free
 20097  003882  C02E  F044         	movff	?___fttol,do_update_pwm@dc_I
 20098  003886  C02F  F045         	movff	?___fttol+1,do_update_pwm@dc_I+1
 20099                           
 20100                           ;utils.c: 150: if (dc_I > duty_cycle) dc_I++;
 20101  00388A  5043               	movf	do_update_pwm@duty_cycle,w,c
 20102  00388C  6E3D               	movwf	??_do_update_pwm& (0+255),c
 20103  00388E  6A3E               	clrf	(??_do_update_pwm+1)& (0+255),c
 20104  003890  5044               	movf	do_update_pwm@dc_I,w,c
 20105  003892  5C3D               	subwf	??_do_update_pwm,w,c
 20106  003894  503E               	movf	??_do_update_pwm+1,w,c
 20107  003896  0A80               	xorlw	128
 20108  003898  6E3F               	movwf	(??_do_update_pwm+2)& (0+255),c
 20109  00389A  5045               	movf	do_update_pwm@dc_I+1,w,c
 20110  00389C  0A80               	xorlw	128
 20111  00389E  583F               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 20112  0038A0  B0D8               	btfsc	status,0,c
 20113  0038A2  D003               	goto	l9279
 20114  0038A4  4A44               	infsnz	do_update_pwm@dc_I,f,c
 20115  0038A6  2A45               	incf	do_update_pwm@dc_I+1,f,c
 20116  0038A8  D000               	goto	l9279
 20117  0038AA                     l9279:
 20118                           
 20119                           ;utils.c: 151: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 20120  0038AA  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 20121  0038AE  0E03               	movlw	3
 20122  0038B0  163D               	andwf	??_do_update_pwm,f,c
 20123  0038B2  383D               	swapf	??_do_update_pwm,w,c
 20124  0038B4  0BF0               	andlw	240
 20125  0038B6  090C               	iorlw	12
 20126  0038B8  6EBD               	movwf	4029,c	;volatile
 20127                           
 20128                           ;utils.c: 152: CCPR1L = (dc_I) >> 2;
 20129  0038BA  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 20130  0038BE  C045  F03E         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 20131  0038C2  343E               	rlcf	??_do_update_pwm+1,w,c
 20132  0038C4  323E               	rrcf	??_do_update_pwm+1,f,c
 20133  0038C6  323D               	rrcf	??_do_update_pwm,f,c
 20134  0038C8  343E               	rlcf	??_do_update_pwm+1,w,c
 20135  0038CA  323E               	rrcf	??_do_update_pwm+1,f,c
 20136  0038CC  323D               	rrcf	??_do_update_pwm,f,c
 20137  0038CE  503D               	movf	??_do_update_pwm,w,c
 20138  0038D0  6EBE               	movwf	4030,c	;volatile
 20139  0038D2  0012               	return		;funcret
 20140  0038D4                     __end_of_do_update_pwm:
 20141                           	opt stack 0
 20142                           tblptru	equ	0xFF8
 20143                           tblptrh	equ	0xFF7
 20144                           tblptrl	equ	0xFF6
 20145                           tablat	equ	0xFF5
 20146                           prodh	equ	0xFF4
 20147                           prodl	equ	0xFF3
 20148                           intcon	equ	0xFF2
 20149                           intcon2	equ	0xFF1
 20150                           intcon3	equ	0xFF0
 20151                           postinc0	equ	0xFEE
 20152                           wreg	equ	0xFE8
 20153                           postdec1	equ	0xFE5
 20154                           plusw1	equ	0xFE3
 20155                           fsr1l	equ	0xFE1
 20156                           indf2	equ	0xFDF
 20157                           postinc2	equ	0xFDE
 20158                           postdec2	equ	0xFDD
 20159                           plusw2	equ	0xFDB
 20160                           fsr2h	equ	0xFDA
 20161                           fsr2l	equ	0xFD9
 20162                           status	equ	0xFD8
 20163                           
 20164 ;; *************** function ___lbtoft *****************
 20165 ;; Defined at:
 20166 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 20167 ;; Parameters:    Size  Location     Type
 20168 ;;  c               1    wreg     unsigned char 
 20169 ;; Auto vars:     Size  Location     Type
 20170 ;;  c               1   27[COMRAM] unsigned char 
 20171 ;; Return value:  Size  Location     Type
 20172 ;;                  3   24[COMRAM] float 
 20173 ;; Registers used:
 20174 ;;		wreg, status,2, status,0, cstack
 20175 ;; Tracked objects:
 20176 ;;		On entry : 0/0
 20177 ;;		On exit  : 0/0
 20178 ;;		Unchanged: 0/0
 20179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20180 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20183 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20184 ;;Total ram usage:        4 bytes
 20185 ;; Hardware stack levels used:    1
 20186 ;; Hardware stack levels required when called:    3
 20187 ;; This function calls:
 20188 ;;		___ftpack
 20189 ;; This function is called by:
 20190 ;;		_do_update_pwm
 20191 ;; This function uses a non-reentrant model
 20192 ;;
 20193                           
 20194                           	psect	text103
 20195  00489C                     __ptext103:
 20196                           	opt stack 0
 20197  00489C                     ___lbtoft:
 20198                           	opt stack 24
 20199                           
 20200                           ;incstack = 0
 20201                           ;___lbtoft@c stored from wreg
 20202  00489C  6E1C               	movwf	___lbtoft@c,c
 20203  00489E  501C               	movf	___lbtoft@c,w,c
 20204  0048A0  6E11               	movwf	___ftpack@arg,c
 20205  0048A2  6A12               	clrf	___ftpack@arg+1,c
 20206  0048A4  6A13               	clrf	___ftpack@arg+2,c
 20207  0048A6  0E8E               	movlw	142
 20208  0048A8  6E14               	movwf	___ftpack@exp,c
 20209  0048AA  0E00               	movlw	0
 20210  0048AC  6E15               	movwf	___ftpack@sign,c
 20211  0048AE  EC51  F01B         	call	___ftpack	;wreg free
 20212  0048B2  C011  F019         	movff	?___ftpack,?___lbtoft
 20213  0048B6  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 20214  0048BA  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 20215  0048BE  D000               	goto	l1970
 20216  0048C0                     l1970:
 20217  0048C0  0012               	return		;funcret
 20218  0048C2                     __end_of___lbtoft:
 20219                           	opt stack 0
 20220                           tblptru	equ	0xFF8
 20221                           tblptrh	equ	0xFF7
 20222                           tblptrl	equ	0xFF6
 20223                           tablat	equ	0xFF5
 20224                           prodh	equ	0xFF4
 20225                           prodl	equ	0xFF3
 20226                           intcon	equ	0xFF2
 20227                           intcon2	equ	0xFF1
 20228                           intcon3	equ	0xFF0
 20229                           postinc0	equ	0xFEE
 20230                           wreg	equ	0xFE8
 20231                           postdec1	equ	0xFE5
 20232                           plusw1	equ	0xFE3
 20233                           fsr1l	equ	0xFE1
 20234                           indf2	equ	0xFDF
 20235                           postinc2	equ	0xFDE
 20236                           postdec2	equ	0xFDD
 20237                           plusw2	equ	0xFDB
 20238                           fsr2h	equ	0xFDA
 20239                           fsr2l	equ	0xFD9
 20240                           status	equ	0xFD8
 20241                           
 20242 ;; *************** function ___fttol *****************
 20243 ;; Defined at:
 20244 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 20245 ;; Parameters:    Size  Location     Type
 20246 ;;  f1              3   45[COMRAM] float 
 20247 ;; Auto vars:     Size  Location     Type
 20248 ;;  lval            4   55[COMRAM] unsigned long 
 20249 ;;  exp1            1   59[COMRAM] unsigned char 
 20250 ;;  sign1           1   54[COMRAM] unsigned char 
 20251 ;; Return value:  Size  Location     Type
 20252 ;;                  4   45[COMRAM] long 
 20253 ;; Registers used:
 20254 ;;		wreg, status,2, status,0
 20255 ;; Tracked objects:
 20256 ;;		On entry : 0/0
 20257 ;;		On exit  : 0/0
 20258 ;;		Unchanged: 0/0
 20259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20261 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20262 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20263 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20264 ;;Total ram usage:       15 bytes
 20265 ;; Hardware stack levels used:    1
 20266 ;; Hardware stack levels required when called:    2
 20267 ;; This function calls:
 20268 ;;		Nothing
 20269 ;; This function is called by:
 20270 ;;		_do_update_pwm
 20271 ;;		_Update_Screen
 20272 ;;		_printf
 20273 ;; This function uses a non-reentrant model
 20274 ;;
 20275                           
 20276                           	psect	text104
 20277  00331C                     __ptext104:
 20278                           	opt stack 0
 20279  00331C                     ___fttol:
 20280                           	opt stack 27
 20281                           
 20282                           ;incstack = 0
 20283  00331C  C030  F032         	movff	___fttol@f1+2,??___fttol
 20284  003320  6A33               	clrf	(??___fttol+1)& (0+255),c
 20285  003322  6A34               	clrf	(??___fttol+2)& (0+255),c
 20286  003324  342F               	rlcf	___fttol@f1+1,w,c
 20287  003326  3632               	rlcf	??___fttol& (0+255),f,c
 20288  003328  E301               	bnc	u7361
 20289  00332A  8033               	bsf	(??___fttol+1)& (0+255),0,c
 20290  00332C                     u7361:
 20291  00332C  5032               	movf	??___fttol,w,c
 20292  00332E  6E3C               	movwf	___fttol@exp1,c
 20293  003330  503C               	movf	___fttol@exp1,w,c
 20294  003332  A4D8               	btfss	status,2,c
 20295  003334  D002               	goto	l8777
 20296  003336  D039               	goto	l8801
 20297  003338  D063               	goto	l1929
 20298  00333A                     l8777:
 20299  00333A  0E17               	movlw	23
 20300  00333C  6E32               	movwf	??___fttol& (0+255),c
 20301  00333E  C02E  F033         	movff	___fttol@f1,??___fttol+1
 20302  003342  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
 20303  003346  C030  F035         	movff	___fttol@f1+2,??___fttol+3
 20304  00334A  2832               	incf	??___fttol,w,c
 20305  00334C  6E36               	movwf	(??___fttol+4)& (0+255),c
 20306  00334E  D004               	goto	u7380
 20307  003350                     u7385:
 20308  003350  90D8               	bcf	status,0,c
 20309  003352  3235               	rrcf	??___fttol+3,f,c
 20310  003354  3234               	rrcf	??___fttol+2,f,c
 20311  003356  3233               	rrcf	??___fttol+1,f,c
 20312  003358                     u7380:
 20313  003358  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
 20314  00335A  D7FA               	goto	u7385
 20315  00335C  5033               	movf	??___fttol+1,w,c
 20316  00335E  6E37               	movwf	___fttol@sign1,c
 20317  003360  8E2F               	bsf	___fttol@f1+1,7,c
 20318  003362  0EFF               	movlw	255
 20319  003364  162E               	andwf	___fttol@f1,f,c
 20320  003366  0EFF               	movlw	255
 20321  003368  162F               	andwf	___fttol@f1+1,f,c
 20322  00336A  0E00               	movlw	0
 20323  00336C  1630               	andwf	___fttol@f1+2,f,c
 20324  00336E  502E               	movf	___fttol@f1,w,c
 20325  003370  6E38               	movwf	___fttol@lval,c
 20326  003372  502F               	movf	___fttol@f1+1,w,c
 20327  003374  6E39               	movwf	___fttol@lval+1,c
 20328  003376  5030               	movf	___fttol@f1+2,w,c
 20329  003378  6E3A               	movwf	___fttol@lval+2,c
 20330  00337A  6A3B               	clrf	___fttol@lval+3,c
 20331  00337C  0E8E               	movlw	142
 20332  00337E  5E3C               	subwf	___fttol@exp1,f,c
 20333  003380  AE3C               	btfss	___fttol@exp1,7,c
 20334  003382  D010               	goto	l8799
 20335  003384  503C               	movf	___fttol@exp1,w,c
 20336  003386  0A80               	xorlw	128
 20337  003388  0F8F               	addlw	143
 20338  00338A  B0D8               	btfsc	status,0,c
 20339  00338C  D003               	goto	l8795
 20340  00338E  D00D               	goto	l8801
 20341  003390  D037               	goto	l1929
 20342  003392  D000               	goto	l8795
 20343  003394                     l8795:
 20344  003394  90D8               	bcf	status,0,c
 20345  003396  323B               	rrcf	___fttol@lval+3,f,c
 20346  003398  323A               	rrcf	___fttol@lval+2,f,c
 20347  00339A  3239               	rrcf	___fttol@lval+1,f,c
 20348  00339C  3238               	rrcf	___fttol@lval,f,c
 20349  00339E  3E3C               	incfsz	___fttol@exp1,f,c
 20350  0033A0  D7F9               	goto	l8795
 20351  0033A2  D019               	goto	l8809
 20352  0033A4                     l8799:
 20353  0033A4  0E17               	movlw	23
 20354  0033A6  643C               	cpfsgt	___fttol@exp1,c
 20355  0033A8  D011               	goto	l8807
 20356  0033AA                     l8801:
 20357  0033AA  0E00               	movlw	0
 20358  0033AC  6E2E               	movwf	?___fttol,c
 20359  0033AE  0E00               	movlw	0
 20360  0033B0  6E2F               	movwf	?___fttol+1,c
 20361  0033B2  0E00               	movlw	0
 20362  0033B4  6E30               	movwf	?___fttol+2,c
 20363  0033B6  0E00               	movlw	0
 20364  0033B8  6E31               	movwf	?___fttol+3,c
 20365  0033BA  D022               	goto	l1929
 20366  0033BC  D007               	goto	l8807
 20367  0033BE                     l8805:
 20368  0033BE  90D8               	bcf	status,0,c
 20369  0033C0  3638               	rlcf	___fttol@lval,f,c
 20370  0033C2  3639               	rlcf	___fttol@lval+1,f,c
 20371  0033C4  363A               	rlcf	___fttol@lval+2,f,c
 20372  0033C6  363B               	rlcf	___fttol@lval+3,f,c
 20373  0033C8  063C               	decf	___fttol@exp1,f,c
 20374  0033CA  D000               	goto	l8807
 20375  0033CC                     l8807:
 20376  0033CC  503C               	movf	___fttol@exp1,w,c
 20377  0033CE  B4D8               	btfsc	status,2,c
 20378  0033D0  D002               	goto	l8809
 20379  0033D2  D7F5               	goto	l8805
 20380  0033D4  D000               	goto	l8809
 20381  0033D6                     l8809:
 20382  0033D6  5037               	movf	___fttol@sign1,w,c
 20383  0033D8  B4D8               	btfsc	status,2,c
 20384  0033DA  D009               	goto	l8813
 20385  0033DC  1E3B               	comf	___fttol@lval+3,f,c
 20386  0033DE  1E3A               	comf	___fttol@lval+2,f,c
 20387  0033E0  1E39               	comf	___fttol@lval+1,f,c
 20388  0033E2  6C38               	negf	___fttol@lval,c
 20389  0033E4  0E00               	movlw	0
 20390  0033E6  2239               	addwfc	___fttol@lval+1,f,c
 20391  0033E8  223A               	addwfc	___fttol@lval+2,f,c
 20392  0033EA  223B               	addwfc	___fttol@lval+3,f,c
 20393  0033EC  D000               	goto	l8813
 20394  0033EE                     l8813:
 20395  0033EE  C038  F02E         	movff	___fttol@lval,?___fttol
 20396  0033F2  C039  F02F         	movff	___fttol@lval+1,?___fttol+1
 20397  0033F6  C03A  F030         	movff	___fttol@lval+2,?___fttol+2
 20398  0033FA  C03B  F031         	movff	___fttol@lval+3,?___fttol+3
 20399  0033FE  D000               	goto	l1929
 20400  003400                     l1929:
 20401  003400  0012               	return		;funcret
 20402  003402                     __end_of___fttol:
 20403                           	opt stack 0
 20404                           tblptru	equ	0xFF8
 20405                           tblptrh	equ	0xFF7
 20406                           tblptrl	equ	0xFF6
 20407                           tablat	equ	0xFF5
 20408                           prodh	equ	0xFF4
 20409                           prodl	equ	0xFF3
 20410                           intcon	equ	0xFF2
 20411                           intcon2	equ	0xFF1
 20412                           intcon3	equ	0xFF0
 20413                           postinc0	equ	0xFEE
 20414                           wreg	equ	0xFE8
 20415                           postdec1	equ	0xFE5
 20416                           plusw1	equ	0xFE3
 20417                           fsr1l	equ	0xFE1
 20418                           indf2	equ	0xFDF
 20419                           postinc2	equ	0xFDE
 20420                           postdec2	equ	0xFDD
 20421                           plusw2	equ	0xFDB
 20422                           fsr2h	equ	0xFDA
 20423                           fsr2l	equ	0xFD9
 20424                           status	equ	0xFD8
 20425                           
 20426 ;; *************** function ___ftmul *****************
 20427 ;; Defined at:
 20428 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 20429 ;; Parameters:    Size  Location     Type
 20430 ;;  f1              3   30[COMRAM] float 
 20431 ;;  f2              3   33[COMRAM] float 
 20432 ;; Auto vars:     Size  Location     Type
 20433 ;;  f3_as_produc    3   40[COMRAM] unsigned um
 20434 ;;  sign            1   44[COMRAM] unsigned char 
 20435 ;;  cntr            1   43[COMRAM] unsigned char 
 20436 ;;  exp             1   39[COMRAM] unsigned char 
 20437 ;; Return value:  Size  Location     Type
 20438 ;;                  3   30[COMRAM] float 
 20439 ;; Registers used:
 20440 ;;		wreg, status,2, status,0, cstack
 20441 ;; Tracked objects:
 20442 ;;		On entry : 0/0
 20443 ;;		On exit  : 0/0
 20444 ;;		Unchanged: 0/0
 20445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20446 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20447 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20448 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20449 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20450 ;;Total ram usage:       15 bytes
 20451 ;; Hardware stack levels used:    1
 20452 ;; Hardware stack levels required when called:    3
 20453 ;; This function calls:
 20454 ;;		___ftpack
 20455 ;; This function is called by:
 20456 ;;		_do_update_pwm
 20457 ;;		_Update_Screen
 20458 ;;		_fround
 20459 ;;		_scale
 20460 ;;		_printf
 20461 ;; This function uses a non-reentrant model
 20462 ;;
 20463                           
 20464                           	psect	text105
 20465  003048                     __ptext105:
 20466                           	opt stack 0
 20467  003048                     ___ftmul:
 20468                           	opt stack 25
 20469                           
 20470                           ;incstack = 0
 20471  003048  C021  F025         	movff	___ftmul@f1+2,??___ftmul
 20472  00304C  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20473  00304E  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20474  003050  3420               	rlcf	___ftmul@f1+1,w,c
 20475  003052  3625               	rlcf	??___ftmul& (0+255),f,c
 20476  003054  E301               	bnc	u6731
 20477  003056  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20478  003058                     u6731:
 20479  003058  5025               	movf	??___ftmul,w,c
 20480  00305A  6E28               	movwf	___ftmul@exp,c
 20481  00305C  5028               	movf	___ftmul@exp,w,c
 20482  00305E  A4D8               	btfss	status,2,c
 20483  003060  D002               	goto	l8283
 20484  003062  D00E               	goto	l8285
 20485  003064  D06C               	goto	l1908
 20486  003066                     l8283:
 20487  003066  C024  F025         	movff	___ftmul@f2+2,??___ftmul
 20488  00306A  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20489  00306C  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20490  00306E  3423               	rlcf	___ftmul@f2+1,w,c
 20491  003070  3625               	rlcf	??___ftmul& (0+255),f,c
 20492  003072  E301               	bnc	u6751
 20493  003074  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20494  003076                     u6751:
 20495  003076  5025               	movf	??___ftmul,w,c
 20496  003078  6E2D               	movwf	___ftmul@sign,c
 20497  00307A  502D               	movf	___ftmul@sign,w,c
 20498  00307C  A4D8               	btfss	status,2,c
 20499  00307E  D007               	goto	l8289
 20500  003080                     l8285:
 20501  003080  0E00               	movlw	0
 20502  003082  6E1F               	movwf	?___ftmul,c
 20503  003084  0E00               	movlw	0
 20504  003086  6E20               	movwf	?___ftmul+1,c
 20505  003088  0E00               	movlw	0
 20506  00308A  6E21               	movwf	?___ftmul+2,c
 20507  00308C  D058               	goto	l1908
 20508  00308E                     l8289:
 20509  00308E  502D               	movf	___ftmul@sign,w,c
 20510  003090  0F7B               	addlw	123
 20511  003092  2628               	addwf	___ftmul@exp,f,c
 20512  003094  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
 20513  003098  5024               	movf	___ftmul@f2+2,w,c
 20514  00309A  1A2D               	xorwf	___ftmul@sign,f,c
 20515  00309C  0E80               	movlw	128
 20516  00309E  162D               	andwf	___ftmul@sign,f,c
 20517  0030A0  8E20               	bsf	___ftmul@f1+1,7,c
 20518  0030A2  8E23               	bsf	___ftmul@f2+1,7,c
 20519  0030A4  0EFF               	movlw	255
 20520  0030A6  1622               	andwf	___ftmul@f2,f,c
 20521  0030A8  0EFF               	movlw	255
 20522  0030AA  1623               	andwf	___ftmul@f2+1,f,c
 20523  0030AC  0E00               	movlw	0
 20524  0030AE  1624               	andwf	___ftmul@f2+2,f,c
 20525  0030B0  0E00               	movlw	0
 20526  0030B2  6E29               	movwf	___ftmul@f3_as_product,c
 20527  0030B4  0E00               	movlw	0
 20528  0030B6  6E2A               	movwf	___ftmul@f3_as_product+1,c
 20529  0030B8  0E00               	movlw	0
 20530  0030BA  6E2B               	movwf	___ftmul@f3_as_product+2,c
 20531  0030BC  0E07               	movlw	7
 20532  0030BE  6E2C               	movwf	___ftmul@cntr,c
 20533  0030C0  D000               	goto	l8303
 20534  0030C2                     l8303:
 20535  0030C2  A01F               	btfss	___ftmul@f1,0,c
 20536  0030C4  D007               	goto	l8307
 20537  0030C6  5022               	movf	___ftmul@f2,w,c
 20538  0030C8  2629               	addwf	___ftmul@f3_as_product,f,c
 20539  0030CA  5023               	movf	___ftmul@f2+1,w,c
 20540  0030CC  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20541  0030CE  5024               	movf	___ftmul@f2+2,w,c
 20542  0030D0  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20543  0030D2  D000               	goto	l8307
 20544  0030D4                     l8307:
 20545  0030D4  90D8               	bcf	status,0,c
 20546  0030D6  3221               	rrcf	___ftmul@f1+2,f,c
 20547  0030D8  3220               	rrcf	___ftmul@f1+1,f,c
 20548  0030DA  321F               	rrcf	___ftmul@f1,f,c
 20549  0030DC  90D8               	bcf	status,0,c
 20550  0030DE  3622               	rlcf	___ftmul@f2,f,c
 20551  0030E0  3623               	rlcf	___ftmul@f2+1,f,c
 20552  0030E2  3624               	rlcf	___ftmul@f2+2,f,c
 20553  0030E4  2E2C               	decfsz	___ftmul@cntr,f,c
 20554  0030E6  D7ED               	goto	l8303
 20555  0030E8  D000               	goto	l8311
 20556  0030EA                     l8311:
 20557  0030EA  0E09               	movlw	9
 20558  0030EC  6E2C               	movwf	___ftmul@cntr,c
 20559  0030EE  D000               	goto	l8313
 20560  0030F0                     l8313:
 20561  0030F0  A01F               	btfss	___ftmul@f1,0,c
 20562  0030F2  D007               	goto	l8317
 20563  0030F4  5022               	movf	___ftmul@f2,w,c
 20564  0030F6  2629               	addwf	___ftmul@f3_as_product,f,c
 20565  0030F8  5023               	movf	___ftmul@f2+1,w,c
 20566  0030FA  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20567  0030FC  5024               	movf	___ftmul@f2+2,w,c
 20568  0030FE  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20569  003100  D000               	goto	l8317
 20570  003102                     l8317:
 20571  003102  90D8               	bcf	status,0,c
 20572  003104  3221               	rrcf	___ftmul@f1+2,f,c
 20573  003106  3220               	rrcf	___ftmul@f1+1,f,c
 20574  003108  321F               	rrcf	___ftmul@f1,f,c
 20575  00310A  90D8               	bcf	status,0,c
 20576  00310C  322B               	rrcf	___ftmul@f3_as_product+2,f,c
 20577  00310E  322A               	rrcf	___ftmul@f3_as_product+1,f,c
 20578  003110  3229               	rrcf	___ftmul@f3_as_product,f,c
 20579  003112  2E2C               	decfsz	___ftmul@cntr,f,c
 20580  003114  D7ED               	goto	l8313
 20581  003116  D000               	goto	l8321
 20582  003118                     l8321:
 20583  003118  C029  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 20584  00311C  C02A  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 20585  003120  C02B  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 20586  003124  C028  F014         	movff	___ftmul@exp,___ftpack@exp
 20587  003128  C02D  F015         	movff	___ftmul@sign,___ftpack@sign
 20588  00312C  EC51  F01B         	call	___ftpack	;wreg free
 20589  003130  C011  F01F         	movff	?___ftpack,?___ftmul
 20590  003134  C012  F020         	movff	?___ftpack+1,?___ftmul+1
 20591  003138  C013  F021         	movff	?___ftpack+2,?___ftmul+2
 20592  00313C  D000               	goto	l1908
 20593  00313E                     l1908:
 20594  00313E  0012               	return		;funcret
 20595  003140                     __end_of___ftmul:
 20596                           	opt stack 0
 20597                           tblptru	equ	0xFF8
 20598                           tblptrh	equ	0xFF7
 20599                           tblptrl	equ	0xFF6
 20600                           tablat	equ	0xFF5
 20601                           prodh	equ	0xFF4
 20602                           prodl	equ	0xFF3
 20603                           intcon	equ	0xFF2
 20604                           intcon2	equ	0xFF1
 20605                           intcon3	equ	0xFF0
 20606                           postinc0	equ	0xFEE
 20607                           wreg	equ	0xFE8
 20608                           postdec1	equ	0xFE5
 20609                           plusw1	equ	0xFE3
 20610                           fsr1l	equ	0xFE1
 20611                           indf2	equ	0xFDF
 20612                           postinc2	equ	0xFDE
 20613                           postdec2	equ	0xFDD
 20614                           plusw2	equ	0xFDB
 20615                           fsr2h	equ	0xFDA
 20616                           fsr2l	equ	0xFD9
 20617                           status	equ	0xFD8
 20618                           
 20619 ;; *************** function ___ftdiv *****************
 20620 ;; Defined at:
 20621 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 20622 ;; Parameters:    Size  Location     Type
 20623 ;;  f1              3   45[COMRAM] float 
 20624 ;;  f2              3   48[COMRAM] float 
 20625 ;; Auto vars:     Size  Location     Type
 20626 ;;  f3              3   55[COMRAM] float 
 20627 ;;  sign            1   59[COMRAM] unsigned char 
 20628 ;;  exp             1   58[COMRAM] unsigned char 
 20629 ;;  cntr            1   54[COMRAM] unsigned char 
 20630 ;; Return value:  Size  Location     Type
 20631 ;;                  3   45[COMRAM] float 
 20632 ;; Registers used:
 20633 ;;		wreg, status,2, status,0, cstack
 20634 ;; Tracked objects:
 20635 ;;		On entry : 0/0
 20636 ;;		On exit  : 0/0
 20637 ;;		Unchanged: 0/0
 20638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20639 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20640 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20641 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20642 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20643 ;;Total ram usage:       15 bytes
 20644 ;; Hardware stack levels used:    1
 20645 ;; Hardware stack levels required when called:    3
 20646 ;; This function calls:
 20647 ;;		___ftpack
 20648 ;; This function is called by:
 20649 ;;		_do_update_pwm
 20650 ;;		_Read_Volt
 20651 ;; This function uses a non-reentrant model
 20652 ;;
 20653                           
 20654                           	psect	text106
 20655  0034E4                     __ptext106:
 20656                           	opt stack 0
 20657  0034E4                     ___ftdiv:
 20658                           	opt stack 24
 20659                           
 20660                           ;incstack = 0
 20661  0034E4  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
 20662  0034E8  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20663  0034EA  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20664  0034EC  342F               	rlcf	___ftdiv@f1+1,w,c
 20665  0034EE  3634               	rlcf	??___ftdiv& (0+255),f,c
 20666  0034F0  E301               	bnc	u8091
 20667  0034F2  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20668  0034F4                     u8091:
 20669  0034F4  5034               	movf	??___ftdiv,w,c
 20670  0034F6  6E3B               	movwf	___ftdiv@exp,c
 20671  0034F8  503B               	movf	___ftdiv@exp,w,c
 20672  0034FA  A4D8               	btfss	status,2,c
 20673  0034FC  D002               	goto	l9225
 20674  0034FE  D00E               	goto	l9227
 20675  003500  D061               	goto	l1876
 20676  003502                     l9225:
 20677  003502  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
 20678  003506  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20679  003508  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20680  00350A  3432               	rlcf	___ftdiv@f2+1,w,c
 20681  00350C  3634               	rlcf	??___ftdiv& (0+255),f,c
 20682  00350E  E301               	bnc	u8111
 20683  003510  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20684  003512                     u8111:
 20685  003512  5034               	movf	??___ftdiv,w,c
 20686  003514  6E3C               	movwf	___ftdiv@sign,c
 20687  003516  503C               	movf	___ftdiv@sign,w,c
 20688  003518  A4D8               	btfss	status,2,c
 20689  00351A  D007               	goto	l9231
 20690  00351C                     l9227:
 20691  00351C  0E00               	movlw	0
 20692  00351E  6E2E               	movwf	?___ftdiv,c
 20693  003520  0E00               	movlw	0
 20694  003522  6E2F               	movwf	?___ftdiv+1,c
 20695  003524  0E00               	movlw	0
 20696  003526  6E30               	movwf	?___ftdiv+2,c
 20697  003528  D04D               	goto	l1876
 20698  00352A                     l9231:
 20699  00352A  0E00               	movlw	0
 20700  00352C  6E38               	movwf	___ftdiv@f3,c
 20701  00352E  0E00               	movlw	0
 20702  003530  6E39               	movwf	___ftdiv@f3+1,c
 20703  003532  0E00               	movlw	0
 20704  003534  6E3A               	movwf	___ftdiv@f3+2,c
 20705  003536  503C               	movf	___ftdiv@sign,w,c
 20706  003538  0F89               	addlw	137
 20707  00353A  5E3B               	subwf	___ftdiv@exp,f,c
 20708  00353C  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
 20709  003540  5033               	movf	___ftdiv@f2+2,w,c
 20710  003542  1A3C               	xorwf	___ftdiv@sign,f,c
 20711  003544  0E80               	movlw	128
 20712  003546  163C               	andwf	___ftdiv@sign,f,c
 20713  003548  8E2F               	bsf	___ftdiv@f1+1,7,c
 20714  00354A  0EFF               	movlw	255
 20715  00354C  162E               	andwf	___ftdiv@f1,f,c
 20716  00354E  0EFF               	movlw	255
 20717  003550  162F               	andwf	___ftdiv@f1+1,f,c
 20718  003552  0E00               	movlw	0
 20719  003554  1630               	andwf	___ftdiv@f1+2,f,c
 20720  003556  8E32               	bsf	___ftdiv@f2+1,7,c
 20721  003558  0EFF               	movlw	255
 20722  00355A  1631               	andwf	___ftdiv@f2,f,c
 20723  00355C  0EFF               	movlw	255
 20724  00355E  1632               	andwf	___ftdiv@f2+1,f,c
 20725  003560  0E00               	movlw	0
 20726  003562  1633               	andwf	___ftdiv@f2+2,f,c
 20727  003564  0E18               	movlw	24
 20728  003566  6E37               	movwf	___ftdiv@cntr,c
 20729  003568  D000               	goto	l9251
 20730  00356A                     l9251:
 20731  00356A  90D8               	bcf	status,0,c
 20732  00356C  3638               	rlcf	___ftdiv@f3,f,c
 20733  00356E  3639               	rlcf	___ftdiv@f3+1,f,c
 20734  003570  363A               	rlcf	___ftdiv@f3+2,f,c
 20735  003572  5031               	movf	___ftdiv@f2,w,c
 20736  003574  5C2E               	subwf	___ftdiv@f1,w,c
 20737  003576  5032               	movf	___ftdiv@f2+1,w,c
 20738  003578  582F               	subwfb	___ftdiv@f1+1,w,c
 20739  00357A  5033               	movf	___ftdiv@f2+2,w,c
 20740  00357C  5830               	subwfb	___ftdiv@f1+2,w,c
 20741  00357E  A0D8               	btfss	status,0,c
 20742  003580  D007               	goto	l1879
 20743  003582  5031               	movf	___ftdiv@f2,w,c
 20744  003584  5E2E               	subwf	___ftdiv@f1,f,c
 20745  003586  5032               	movf	___ftdiv@f2+1,w,c
 20746  003588  5A2F               	subwfb	___ftdiv@f1+1,f,c
 20747  00358A  5033               	movf	___ftdiv@f2+2,w,c
 20748  00358C  5A30               	subwfb	___ftdiv@f1+2,f,c
 20749  00358E  8038               	bsf	___ftdiv@f3,0,c
 20750  003590                     l1879:
 20751  003590  90D8               	bcf	status,0,c
 20752  003592  362E               	rlcf	___ftdiv@f1,f,c
 20753  003594  362F               	rlcf	___ftdiv@f1+1,f,c
 20754  003596  3630               	rlcf	___ftdiv@f1+2,f,c
 20755  003598  2E37               	decfsz	___ftdiv@cntr,f,c
 20756  00359A  D7E7               	goto	l9251
 20757  00359C  D000               	goto	l9261
 20758  00359E                     l9261:
 20759  00359E  C038  F011         	movff	___ftdiv@f3,___ftpack@arg
 20760  0035A2  C039  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 20761  0035A6  C03A  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 20762  0035AA  C03B  F014         	movff	___ftdiv@exp,___ftpack@exp
 20763  0035AE  C03C  F015         	movff	___ftdiv@sign,___ftpack@sign
 20764  0035B2  EC51  F01B         	call	___ftpack	;wreg free
 20765  0035B6  C011  F02E         	movff	?___ftpack,?___ftdiv
 20766  0035BA  C012  F02F         	movff	?___ftpack+1,?___ftdiv+1
 20767  0035BE  C013  F030         	movff	?___ftpack+2,?___ftdiv+2
 20768  0035C2  D000               	goto	l1876
 20769  0035C4                     l1876:
 20770  0035C4  0012               	return		;funcret
 20771  0035C6                     __end_of___ftdiv:
 20772                           	opt stack 0
 20773                           tblptru	equ	0xFF8
 20774                           tblptrh	equ	0xFF7
 20775                           tblptrl	equ	0xFF6
 20776                           tablat	equ	0xFF5
 20777                           prodh	equ	0xFF4
 20778                           prodl	equ	0xFF3
 20779                           intcon	equ	0xFF2
 20780                           intcon2	equ	0xFF1
 20781                           intcon3	equ	0xFF0
 20782                           postinc0	equ	0xFEE
 20783                           wreg	equ	0xFE8
 20784                           postdec1	equ	0xFE5
 20785                           plusw1	equ	0xFE3
 20786                           fsr1l	equ	0xFE1
 20787                           indf2	equ	0xFDF
 20788                           postinc2	equ	0xFDE
 20789                           postdec2	equ	0xFDD
 20790                           plusw2	equ	0xFDB
 20791                           fsr2h	equ	0xFDA
 20792                           fsr2l	equ	0xFD9
 20793                           status	equ	0xFD8
 20794                           
 20795 ;; *************** function ___ftpack *****************
 20796 ;; Defined at:
 20797 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 20798 ;; Parameters:    Size  Location     Type
 20799 ;;  arg             3   16[COMRAM] unsigned um
 20800 ;;  exp             1   19[COMRAM] unsigned char 
 20801 ;;  sign            1   20[COMRAM] unsigned char 
 20802 ;; Auto vars:     Size  Location     Type
 20803 ;;		None
 20804 ;; Return value:  Size  Location     Type
 20805 ;;                  3   16[COMRAM] float 
 20806 ;; Registers used:
 20807 ;;		wreg, status,2, status,0
 20808 ;; Tracked objects:
 20809 ;;		On entry : 0/0
 20810 ;;		On exit  : 0/0
 20811 ;;		Unchanged: 0/0
 20812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20813 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20815 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20816 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20817 ;;Total ram usage:        8 bytes
 20818 ;; Hardware stack levels used:    1
 20819 ;; Hardware stack levels required when called:    2
 20820 ;; This function calls:
 20821 ;;		Nothing
 20822 ;; This function is called by:
 20823 ;;		___awtoft
 20824 ;;		___ftadd
 20825 ;;		___ftdiv
 20826 ;;		___ftmul
 20827 ;;		___lbtoft
 20828 ;;		___lltoft
 20829 ;; This function uses a non-reentrant model
 20830 ;;
 20831                           
 20832                           	psect	text107
 20833  0036A2                     __ptext107:
 20834                           	opt stack 0
 20835  0036A2                     ___ftpack:
 20836                           	opt stack 25
 20837                           
 20838                           ;incstack = 0
 20839  0036A2  5014               	movf	___ftpack@exp,w,c
 20840  0036A4  B4D8               	btfsc	status,2,c
 20841  0036A6  D005               	goto	l8161
 20842  0036A8  5011               	movf	___ftpack@arg,w,c
 20843  0036AA  1012               	iorwf	___ftpack@arg+1,w,c
 20844  0036AC  1013               	iorwf	___ftpack@arg+2,w,c
 20845  0036AE  A4D8               	btfss	status,2,c
 20846  0036B0  D00E               	goto	l8167
 20847  0036B2                     l8161:
 20848  0036B2  0E00               	movlw	0
 20849  0036B4  6E11               	movwf	?___ftpack,c
 20850  0036B6  0E00               	movlw	0
 20851  0036B8  6E12               	movwf	?___ftpack+1,c
 20852  0036BA  0E00               	movlw	0
 20853  0036BC  6E13               	movwf	?___ftpack+2,c
 20854  0036BE  D053               	goto	l1804
 20855  0036C0  D006               	goto	l8167
 20856  0036C2                     l8165:
 20857  0036C2  2A14               	incf	___ftpack@exp,f,c
 20858  0036C4  90D8               	bcf	status,0,c
 20859  0036C6  3213               	rrcf	___ftpack@arg+2,f,c
 20860  0036C8  3212               	rrcf	___ftpack@arg+1,f,c
 20861  0036CA  3211               	rrcf	___ftpack@arg,f,c
 20862  0036CC  D000               	goto	l8167
 20863  0036CE                     l8167:
 20864  0036CE  0E00               	movlw	0
 20865  0036D0  1411               	andwf	___ftpack@arg,w,c
 20866  0036D2  6E16               	movwf	??___ftpack& (0+255),c
 20867  0036D4  0E00               	movlw	0
 20868  0036D6  1412               	andwf	___ftpack@arg+1,w,c
 20869  0036D8  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20870  0036DA  0EFE               	movlw	254
 20871  0036DC  1413               	andwf	___ftpack@arg+2,w,c
 20872  0036DE  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20873  0036E0  5016               	movf	??___ftpack,w,c
 20874  0036E2  1017               	iorwf	??___ftpack+1,w,c
 20875  0036E4  1018               	iorwf	??___ftpack+2,w,c
 20876  0036E6  B4D8               	btfsc	status,2,c
 20877  0036E8  D00E               	goto	l8173
 20878  0036EA  D7EB               	goto	l8165
 20879  0036EC  D00C               	goto	l8173
 20880  0036EE                     l8169:
 20881  0036EE  2A14               	incf	___ftpack@exp,f,c
 20882  0036F0  0E01               	movlw	1
 20883  0036F2  2611               	addwf	___ftpack@arg,f,c
 20884  0036F4  0E00               	movlw	0
 20885  0036F6  2212               	addwfc	___ftpack@arg+1,f,c
 20886  0036F8  0E00               	movlw	0
 20887  0036FA  2213               	addwfc	___ftpack@arg+2,f,c
 20888  0036FC  90D8               	bcf	status,0,c
 20889  0036FE  3213               	rrcf	___ftpack@arg+2,f,c
 20890  003700  3212               	rrcf	___ftpack@arg+1,f,c
 20891  003702  3211               	rrcf	___ftpack@arg,f,c
 20892  003704  D000               	goto	l8173
 20893  003706                     l8173:
 20894  003706  0E00               	movlw	0
 20895  003708  1411               	andwf	___ftpack@arg,w,c
 20896  00370A  6E16               	movwf	??___ftpack& (0+255),c
 20897  00370C  0E00               	movlw	0
 20898  00370E  1412               	andwf	___ftpack@arg+1,w,c
 20899  003710  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20900  003712  0EFF               	movlw	255
 20901  003714  1413               	andwf	___ftpack@arg+2,w,c
 20902  003716  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20903  003718  5016               	movf	??___ftpack,w,c
 20904  00371A  1017               	iorwf	??___ftpack+1,w,c
 20905  00371C  1018               	iorwf	??___ftpack+2,w,c
 20906  00371E  B4D8               	btfsc	status,2,c
 20907  003720  D008               	goto	l8177
 20908  003722  D7E5               	goto	l8169
 20909  003724  D006               	goto	l8177
 20910  003726                     l8175:
 20911  003726  0614               	decf	___ftpack@exp,f,c
 20912  003728  90D8               	bcf	status,0,c
 20913  00372A  3611               	rlcf	___ftpack@arg,f,c
 20914  00372C  3612               	rlcf	___ftpack@arg+1,f,c
 20915  00372E  3613               	rlcf	___ftpack@arg+2,f,c
 20916  003730  D000               	goto	l8177
 20917  003732                     l8177:
 20918  003732  BE12               	btfsc	___ftpack@arg+1,7,c
 20919  003734  D004               	goto	l1815
 20920  003736  0E02               	movlw	2
 20921  003738  6014               	cpfslt	___ftpack@exp,c
 20922  00373A  D7F5               	goto	l8175
 20923  00373C  D000               	goto	l1815
 20924  00373E                     l1815:
 20925  00373E  B014               	btfsc	___ftpack@exp,0,c
 20926  003740  D002               	goto	l8183
 20927  003742  9E12               	bcf	___ftpack@arg+1,7,c
 20928  003744  D000               	goto	l8183
 20929  003746                     l8183:
 20930  003746  90D8               	bcf	status,0,c
 20931  003748  3214               	rrcf	___ftpack@exp,f,c
 20932  00374A  5014               	movf	___ftpack@exp,w,c
 20933  00374C  1213               	iorwf	___ftpack@arg+2,f,c
 20934  00374E  5015               	movf	___ftpack@sign,w,c
 20935  003750  B4D8               	btfsc	status,2,c
 20936  003752  D002               	goto	l8189
 20937  003754  8E13               	bsf	___ftpack@arg+2,7,c
 20938  003756  D000               	goto	l8189
 20939  003758                     l8189:
 20940  003758  C011  F011         	movff	___ftpack@arg,?___ftpack
 20941  00375C  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 20942  003760  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 20943  003764  D000               	goto	l1804
 20944  003766                     l1804:
 20945  003766  0012               	return		;funcret
 20946  003768                     __end_of___ftpack:
 20947                           	opt stack 0
 20948                           tblptru	equ	0xFF8
 20949                           tblptrh	equ	0xFF7
 20950                           tblptrl	equ	0xFF6
 20951                           tablat	equ	0xFF5
 20952                           prodh	equ	0xFF4
 20953                           prodl	equ	0xFF3
 20954                           intcon	equ	0xFF2
 20955                           intcon2	equ	0xFF1
 20956                           intcon3	equ	0xFF0
 20957                           postinc0	equ	0xFEE
 20958                           wreg	equ	0xFE8
 20959                           postdec1	equ	0xFE5
 20960                           plusw1	equ	0xFE3
 20961                           fsr1l	equ	0xFE1
 20962                           indf2	equ	0xFDF
 20963                           postinc2	equ	0xFDE
 20964                           postdec2	equ	0xFDD
 20965                           plusw2	equ	0xFDB
 20966                           fsr2h	equ	0xFDA
 20967                           fsr2l	equ	0xFD9
 20968                           status	equ	0xFD8
 20969                           
 20970 ;; *************** function _Wait_Half_Sec *****************
 20971 ;; Defined at:
 20972 ;;		line 99 in file "utils.c"
 20973 ;; Parameters:    Size  Location     Type
 20974 ;;		None
 20975 ;; Auto vars:     Size  Location     Type
 20976 ;;  k               2   16[COMRAM] unsigned int 
 20977 ;; Return value:  Size  Location     Type
 20978 ;;		None               void
 20979 ;; Registers used:
 20980 ;;		wreg, status,2, status,0
 20981 ;; Tracked objects:
 20982 ;;		On entry : 0/0
 20983 ;;		On exit  : 0/0
 20984 ;;		Unchanged: 0/0
 20985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20990 ;;Total ram usage:        2 bytes
 20991 ;; Hardware stack levels used:    1
 20992 ;; Hardware stack levels required when called:    2
 20993 ;; This function calls:
 20994 ;;		Nothing
 20995 ;; This function is called by:
 20996 ;;		_Do_Beep
 20997 ;;		_Do_Beep_Good
 20998 ;;		_Do_Beep_Bad
 20999 ;; This function uses a non-reentrant model
 21000 ;;
 21001                           
 21002                           	psect	text108
 21003  004A58                     __ptext108:
 21004                           	opt stack 0
 21005  004A58                     _Wait_Half_Sec:
 21006                           	opt stack 26
 21007                           
 21008                           ;utils.c: 101: for (unsigned int k=0;k<0x8000;k++);
 21009                           
 21010                           ;incstack = 0
 21011  004A58  0E00               	movlw	0
 21012  004A5A  6E12               	movwf	Wait_Half_Sec@k+1,c
 21013  004A5C  0E00               	movlw	0
 21014  004A5E  6E11               	movwf	Wait_Half_Sec@k,c
 21015  004A60                     l6555:
 21016  004A60  0E80               	movlw	128
 21017  004A62  5C12               	subwf	Wait_Half_Sec@k+1,w,c
 21018  004A64  B0D8               	btfsc	status,0,c
 21019  004A66  D005               	goto	l468
 21020  004A68  D001               	goto	l6559
 21021  004A6A  D003               	goto	l468
 21022  004A6C                     l6559:
 21023  004A6C  4A11               	infsnz	Wait_Half_Sec@k,f,c
 21024  004A6E  2A12               	incf	Wait_Half_Sec@k+1,f,c
 21025  004A70  D7F7               	goto	l6555
 21026  004A72                     l468:
 21027  004A72  0012               	return		;funcret
 21028  004A74                     __end_of_Wait_Half_Sec:
 21029                           	opt stack 0
 21030                           tblptru	equ	0xFF8
 21031                           tblptrh	equ	0xFF7
 21032                           tblptrl	equ	0xFF6
 21033                           tablat	equ	0xFF5
 21034                           prodh	equ	0xFF4
 21035                           prodl	equ	0xFF3
 21036                           intcon	equ	0xFF2
 21037                           intcon2	equ	0xFF1
 21038                           intcon3	equ	0xFF0
 21039                           postinc0	equ	0xFEE
 21040                           wreg	equ	0xFE8
 21041                           postdec1	equ	0xFE5
 21042                           plusw1	equ	0xFE3
 21043                           fsr1l	equ	0xFE1
 21044                           indf2	equ	0xFDF
 21045                           postinc2	equ	0xFDE
 21046                           postdec2	equ	0xFDD
 21047                           plusw2	equ	0xFDB
 21048                           fsr2h	equ	0xFDA
 21049                           fsr2l	equ	0xFD9
 21050                           status	equ	0xFD8
 21051                           
 21052 ;; *************** function _Deactivate_Buzzer *****************
 21053 ;; Defined at:
 21054 ;;		line 136 in file "utils.c"
 21055 ;; Parameters:    Size  Location     Type
 21056 ;;		None
 21057 ;; Auto vars:     Size  Location     Type
 21058 ;;		None
 21059 ;; Return value:  Size  Location     Type
 21060 ;;		None               void
 21061 ;; Registers used:
 21062 ;;		wreg, status,2
 21063 ;; Tracked objects:
 21064 ;;		On entry : 0/0
 21065 ;;		On exit  : 0/0
 21066 ;;		Unchanged: 0/0
 21067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21072 ;;Total ram usage:        0 bytes
 21073 ;; Hardware stack levels used:    1
 21074 ;; Hardware stack levels required when called:    2
 21075 ;; This function calls:
 21076 ;;		Nothing
 21077 ;; This function is called by:
 21078 ;;		_Do_Beep
 21079 ;;		_Do_Beep_Good
 21080 ;;		_Do_Beep_Bad
 21081 ;; This function uses a non-reentrant model
 21082 ;;
 21083                           
 21084                           	psect	text109
 21085  004C58                     __ptext109:
 21086                           	opt stack 0
 21087  004C58                     _Deactivate_Buzzer:
 21088                           	opt stack 26
 21089                           
 21090                           ;utils.c: 138: CCP2CON = 0x0;
 21091                           
 21092                           ;incstack = 0
 21093  004C58  0E00               	movlw	0
 21094  004C5A  6EBA               	movwf	4026,c	;volatile
 21095                           
 21096                           ;utils.c: 139: PORTCbits.RC1 = 0;
 21097  004C5C  9282               	bcf	3970,1,c	;volatile
 21098  004C5E  0012               	return		;funcret
 21099  004C60                     __end_of_Deactivate_Buzzer:
 21100                           	opt stack 0
 21101                           tblptru	equ	0xFF8
 21102                           tblptrh	equ	0xFF7
 21103                           tblptrl	equ	0xFF6
 21104                           tablat	equ	0xFF5
 21105                           prodh	equ	0xFF4
 21106                           prodl	equ	0xFF3
 21107                           intcon	equ	0xFF2
 21108                           intcon2	equ	0xFF1
 21109                           intcon3	equ	0xFF0
 21110                           postinc0	equ	0xFEE
 21111                           wreg	equ	0xFE8
 21112                           postdec1	equ	0xFE5
 21113                           plusw1	equ	0xFE3
 21114                           fsr1l	equ	0xFE1
 21115                           indf2	equ	0xFDF
 21116                           postinc2	equ	0xFDE
 21117                           postdec2	equ	0xFDD
 21118                           plusw2	equ	0xFDB
 21119                           fsr2h	equ	0xFDA
 21120                           fsr2l	equ	0xFD9
 21121                           status	equ	0xFD8
 21122                           
 21123 ;; *************** function _Activate_Buzzer *****************
 21124 ;; Defined at:
 21125 ;;		line 104 in file "utils.c"
 21126 ;; Parameters:    Size  Location     Type
 21127 ;;		None
 21128 ;; Auto vars:     Size  Location     Type
 21129 ;;		None
 21130 ;; Return value:  Size  Location     Type
 21131 ;;		None               void
 21132 ;; Registers used:
 21133 ;;		wreg, status,2
 21134 ;; Tracked objects:
 21135 ;;		On entry : 0/0
 21136 ;;		On exit  : 0/0
 21137 ;;		Unchanged: 0/0
 21138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21143 ;;Total ram usage:        0 bytes
 21144 ;; Hardware stack levels used:    1
 21145 ;; Hardware stack levels required when called:    2
 21146 ;; This function calls:
 21147 ;;		Nothing
 21148 ;; This function is called by:
 21149 ;;		_Do_Beep
 21150 ;; This function uses a non-reentrant model
 21151 ;;
 21152                           
 21153                           	psect	text110
 21154  004B9E                     __ptext110:
 21155                           	opt stack 0
 21156  004B9E                     _Activate_Buzzer:
 21157                           	opt stack 26
 21158                           
 21159                           ;utils.c: 106: PR2 = 0b11111001 ;
 21160                           
 21161                           ;incstack = 0
 21162  004B9E  0EF9               	movlw	249
 21163  004BA0  6ECB               	movwf	4043,c	;volatile
 21164                           
 21165                           ;utils.c: 107: T2CON = 0b00000101 ;
 21166  004BA2  0E05               	movlw	5
 21167  004BA4  6ECA               	movwf	4042,c	;volatile
 21168                           
 21169                           ;utils.c: 108: CCPR2L = 0b01001010 ;
 21170  004BA6  0E4A               	movlw	74
 21171  004BA8  6EBB               	movwf	4027,c	;volatile
 21172                           
 21173                           ;utils.c: 109: CCP2CON = 0b00111100 ;
 21174  004BAA  0E3C               	movlw	60
 21175  004BAC  6EBA               	movwf	4026,c	;volatile
 21176  004BAE  0012               	return		;funcret
 21177  004BB0                     __end_of_Activate_Buzzer:
 21178                           	opt stack 0
 21179                           tblptru	equ	0xFF8
 21180                           tblptrh	equ	0xFF7
 21181                           tblptrl	equ	0xFF6
 21182                           tablat	equ	0xFF5
 21183                           prodh	equ	0xFF4
 21184                           prodl	equ	0xFF3
 21185                           intcon	equ	0xFF2
 21186                           intcon2	equ	0xFF1
 21187                           intcon3	equ	0xFF0
 21188                           postinc0	equ	0xFEE
 21189                           wreg	equ	0xFE8
 21190                           postdec1	equ	0xFE5
 21191                           plusw1	equ	0xFE3
 21192                           fsr1l	equ	0xFE1
 21193                           indf2	equ	0xFDF
 21194                           postinc2	equ	0xFDE
 21195                           postdec2	equ	0xFDD
 21196                           plusw2	equ	0xFDB
 21197                           fsr2h	equ	0xFDA
 21198                           fsr2l	equ	0xFD9
 21199                           status	equ	0xFD8
 21200                           
 21201 ;; *************** function _chkisr *****************
 21202 ;; Defined at:
 21203 ;;		line 41 in file "Interrupt.c"
 21204 ;; Parameters:    Size  Location     Type
 21205 ;;		None
 21206 ;; Auto vars:     Size  Location     Type
 21207 ;;		None
 21208 ;; Return value:  Size  Location     Type
 21209 ;;		None               void
 21210 ;; Registers used:
 21211 ;;		wreg, status,2, status,0, cstack
 21212 ;; Tracked objects:
 21213 ;;		On entry : 0/0
 21214 ;;		On exit  : 0/0
 21215 ;;		Unchanged: 0/0
 21216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21219 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21220 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21221 ;;Total ram usage:       14 bytes
 21222 ;; Hardware stack levels used:    1
 21223 ;; Hardware stack levels required when called:    1
 21224 ;; This function calls:
 21225 ;;		_INT0_isr
 21226 ;;		_INT1_isr
 21227 ;;		_INT2_isr
 21228 ;;		_TIMER1_isr
 21229 ;; This function is called by:
 21230 ;;		Interrupt level 2
 21231 ;; This function uses a non-reentrant model
 21232 ;;
 21233                           
 21234                           	psect	intcode
 21235  000008                     __pintcode:
 21236                           	opt stack 0
 21237  000008                     _chkisr:
 21238                           	opt stack 19
 21239                           
 21240                           ;incstack = 0
 21241  000008  CFFA F003          	movff	pclath,??_chkisr
 21242  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 21243  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 21244  000014  EDF7  F01D         	call	int_func,f	;refresh shadow registers
 21245                           pclatu	equ	0xFFB
 21246                           pclath	equ	0xFFA
 21247                           tblptru	equ	0xFF8
 21248                           tblptrh	equ	0xFF7
 21249                           tblptrl	equ	0xFF6
 21250                           tablat	equ	0xFF5
 21251                           prodh	equ	0xFF4
 21252                           prodl	equ	0xFF3
 21253                           intcon	equ	0xFF2
 21254                           intcon2	equ	0xFF1
 21255                           intcon3	equ	0xFF0
 21256                           postinc0	equ	0xFEE
 21257                           fsr0l	equ	0xFE9
 21258                           wreg	equ	0xFE8
 21259                           postdec1	equ	0xFE5
 21260                           plusw1	equ	0xFE3
 21261                           fsr1l	equ	0xFE1
 21262                           indf2	equ	0xFDF
 21263                           postinc2	equ	0xFDE
 21264                           postdec2	equ	0xFDD
 21265                           plusw2	equ	0xFDB
 21266                           fsr2h	equ	0xFDA
 21267                           fsr2l	equ	0xFD9
 21268                           status	equ	0xFD8
 21269                           
 21270                           	psect	intcode_body
 21271  003BEE                     __pintcode_body:
 21272                           	opt stack 19
 21273  003BEE                     int_func:
 21274                           	opt stack 19
 21275  003BEE  0006               	pop		; remove dummy address from shadow register refresh
 21276  003BF0  CFEA F006          	movff	fsr0h,??_chkisr+3
 21277  003BF4  CFE1 F007          	movff	fsr1l,??_chkisr+4
 21278  003BF8  CFE2 F008          	movff	fsr1h,??_chkisr+5
 21279  003BFC  CFD9 F009          	movff	fsr2l,??_chkisr+6
 21280  003C00  CFDA F00A          	movff	fsr2h,??_chkisr+7
 21281  003C04  CFF3 F00B          	movff	prodl,??_chkisr+8
 21282  003C08  CFF4 F00C          	movff	prodh,??_chkisr+9
 21283  003C0C  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 21284  003C10  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 21285  003C14  CFF8 F00F          	movff	tblptru,??_chkisr+12
 21286  003C18  CFF5 F010          	movff	tablat,??_chkisr+13
 21287                           
 21288                           ;Interrupt.c: 43: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 21289  003C1C  A09E               	btfss	3998,0,c	;volatile
 21290  003C1E  D003               	goto	i2l8015
 21291  003C20  ECFE  F025         	call	_TIMER1_isr	;wreg free
 21292  003C24  D000               	goto	i2l8015
 21293  003C26                     i2l8015:
 21294                           
 21295                           ;Interrupt.c: 44: if (INTCONbits.INT0IF == 1) INT0_isr();
 21296  003C26  A2F2               	btfss	intcon,1,c	;volatile
 21297  003C28  D003               	goto	i2l8019
 21298  003C2A  ECC1  F023         	call	_INT0_isr	;wreg free
 21299  003C2E  D000               	goto	i2l8019
 21300  003C30                     i2l8019:
 21301                           
 21302                           ;Interrupt.c: 45: if (INTCON3bits.INT1IF == 1) INT1_isr();
 21303  003C30  A0F0               	btfss	intcon3,0,c	;volatile
 21304  003C32  D003               	goto	i2l8023
 21305  003C34  EC1F  F026         	call	_INT1_isr	;wreg free
 21306  003C38  D000               	goto	i2l8023
 21307  003C3A                     i2l8023:
 21308                           
 21309                           ;Interrupt.c: 46: if (INTCON3bits.INT2IF == 1) INT2_isr();
 21310  003C3A  A2F0               	btfss	intcon3,1,c	;volatile
 21311  003C3C  D003               	goto	i2l617
 21312  003C3E  EC1A  F026         	call	_INT2_isr	;wreg free
 21313  003C42  D000               	goto	i2l617
 21314  003C44                     i2l617:
 21315  003C44  C010  FFF5         	movff	??_chkisr+13,tablat
 21316  003C48  C00F  FFF8         	movff	??_chkisr+12,tblptru
 21317  003C4C  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 21318  003C50  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 21319  003C54  C00C  FFF4         	movff	??_chkisr+9,prodh
 21320  003C58  C00B  FFF3         	movff	??_chkisr+8,prodl
 21321  003C5C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 21322  003C60  C009  FFD9         	movff	??_chkisr+6,fsr2l
 21323  003C64  C008  FFE2         	movff	??_chkisr+5,fsr1h
 21324  003C68  C007  FFE1         	movff	??_chkisr+4,fsr1l
 21325  003C6C  C006  FFEA         	movff	??_chkisr+3,fsr0h
 21326  003C70  C005  FFE9         	movff	??_chkisr+2,fsr0l
 21327  003C74  C004  FFFB         	movff	??_chkisr+1,pclatu
 21328  003C78  C003  FFFA         	movff	??_chkisr,pclath
 21329  003C7C  0011               	retfie		f
 21330  003C7E                     __end_of_chkisr:
 21331                           	opt stack 0
 21332                           pclatu	equ	0xFFB
 21333                           pclath	equ	0xFFA
 21334                           tblptru	equ	0xFF8
 21335                           tblptrh	equ	0xFF7
 21336                           tblptrl	equ	0xFF6
 21337                           tablat	equ	0xFF5
 21338                           prodh	equ	0xFF4
 21339                           prodl	equ	0xFF3
 21340                           intcon	equ	0xFF2
 21341                           intcon2	equ	0xFF1
 21342                           intcon3	equ	0xFF0
 21343                           postinc0	equ	0xFEE
 21344                           fsr0h	equ	0xFEA
 21345                           fsr0l	equ	0xFE9
 21346                           wreg	equ	0xFE8
 21347                           postdec1	equ	0xFE5
 21348                           plusw1	equ	0xFE3
 21349                           fsr1h	equ	0xFE2
 21350                           fsr1l	equ	0xFE1
 21351                           indf2	equ	0xFDF
 21352                           postinc2	equ	0xFDE
 21353                           postdec2	equ	0xFDD
 21354                           plusw2	equ	0xFDB
 21355                           fsr2h	equ	0xFDA
 21356                           fsr2l	equ	0xFD9
 21357                           status	equ	0xFD8
 21358                           
 21359 ;; *************** function _TIMER1_isr *****************
 21360 ;; Defined at:
 21361 ;;		line 49 in file "Interrupt.c"
 21362 ;; Parameters:    Size  Location     Type
 21363 ;;		None
 21364 ;; Auto vars:     Size  Location     Type
 21365 ;;		None
 21366 ;; Return value:  Size  Location     Type
 21367 ;;		None               void
 21368 ;; Registers used:
 21369 ;;		wreg, status,2
 21370 ;; Tracked objects:
 21371 ;;		On entry : 0/0
 21372 ;;		On exit  : 0/0
 21373 ;;		Unchanged: 0/0
 21374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21379 ;;Total ram usage:        0 bytes
 21380 ;; Hardware stack levels used:    1
 21381 ;; This function calls:
 21382 ;;		Nothing
 21383 ;; This function is called by:
 21384 ;;		_chkisr
 21385 ;; This function uses a non-reentrant model
 21386 ;;
 21387                           
 21388                           	psect	text112
 21389  004BFC                     __ptext112:
 21390                           	opt stack 0
 21391  004BFC                     _TIMER1_isr:
 21392                           	opt stack 19
 21393                           
 21394                           ;Interrupt.c: 51: Nec_state = 0;
 21395                           
 21396                           ;incstack = 0
 21397  004BFC  0E00               	movlw	0
 21398  004BFE  0100               	movlb	0	; () banked
 21399  004C00  6FEA               	movwf	_Nec_state& (0+255),b
 21400                           
 21401                           ; BSR set to: 0
 21402                           ;Interrupt.c: 52: INTCON2bits.INTEDG2 = 0;
 21403  004C02  98F1               	bcf	intcon2,4,c	;volatile
 21404                           
 21405                           ; BSR set to: 0
 21406                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 0;
 21407  004C04  90CD               	bcf	4045,0,c	;volatile
 21408                           
 21409                           ; BSR set to: 0
 21410                           ;Interrupt.c: 54: PIR1bits.TMR1IF = 0;
 21411  004C06  909E               	bcf	3998,0,c	;volatile
 21412                           
 21413                           ; BSR set to: 0
 21414  004C08  0012               	return		;funcret
 21415  004C0A                     __end_of_TIMER1_isr:
 21416                           	opt stack 0
 21417                           pclatu	equ	0xFFB
 21418                           pclath	equ	0xFFA
 21419                           tblptru	equ	0xFF8
 21420                           tblptrh	equ	0xFF7
 21421                           tblptrl	equ	0xFF6
 21422                           tablat	equ	0xFF5
 21423                           prodh	equ	0xFF4
 21424                           prodl	equ	0xFF3
 21425                           intcon	equ	0xFF2
 21426                           intcon2	equ	0xFF1
 21427                           intcon3	equ	0xFF0
 21428                           postinc0	equ	0xFEE
 21429                           fsr0h	equ	0xFEA
 21430                           fsr0l	equ	0xFE9
 21431                           wreg	equ	0xFE8
 21432                           postdec1	equ	0xFE5
 21433                           plusw1	equ	0xFE3
 21434                           fsr1h	equ	0xFE2
 21435                           fsr1l	equ	0xFE1
 21436                           indf2	equ	0xFDF
 21437                           postinc2	equ	0xFDE
 21438                           postdec2	equ	0xFDD
 21439                           plusw2	equ	0xFDB
 21440                           fsr2h	equ	0xFDA
 21441                           fsr2l	equ	0xFD9
 21442                           status	equ	0xFD8
 21443                           
 21444 ;; *************** function _INT2_isr *****************
 21445 ;; Defined at:
 21446 ;;		line 64 in file "Interrupt.c"
 21447 ;; Parameters:    Size  Location     Type
 21448 ;;		None
 21449 ;; Auto vars:     Size  Location     Type
 21450 ;;		None
 21451 ;; Return value:  Size  Location     Type
 21452 ;;		None               void
 21453 ;; Registers used:
 21454 ;;		wreg, status,2
 21455 ;; Tracked objects:
 21456 ;;		On entry : 0/0
 21457 ;;		On exit  : 0/0
 21458 ;;		Unchanged: 0/0
 21459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21464 ;;Total ram usage:        0 bytes
 21465 ;; Hardware stack levels used:    1
 21466 ;; This function calls:
 21467 ;;		Nothing
 21468 ;; This function is called by:
 21469 ;;		_chkisr
 21470 ;; This function uses a non-reentrant model
 21471 ;;
 21472                           
 21473                           	psect	text113
 21474  004C34                     __ptext113:
 21475                           	opt stack 0
 21476  004C34                     _INT2_isr:
 21477                           	opt stack 19
 21478                           
 21479                           ;Interrupt.c: 67: INTCON3bits.INT2IF=0;
 21480                           
 21481                           ; BSR set to: 0
 21482                           ;incstack = 0
 21483  004C34  92F0               	bcf	intcon3,1,c	;volatile
 21484                           
 21485                           ;Interrupt.c: 68: INT2_flag = 1;
 21486  004C36  0E01               	movlw	1
 21487  004C38  0100               	movlb	0	; () banked
 21488  004C3A  6FE6               	movwf	_INT2_flag& (0+255),b
 21489                           
 21490                           ; BSR set to: 0
 21491  004C3C  0012               	return		;funcret
 21492  004C3E                     __end_of_INT2_isr:
 21493                           	opt stack 0
 21494                           pclatu	equ	0xFFB
 21495                           pclath	equ	0xFFA
 21496                           tblptru	equ	0xFF8
 21497                           tblptrh	equ	0xFF7
 21498                           tblptrl	equ	0xFF6
 21499                           tablat	equ	0xFF5
 21500                           prodh	equ	0xFF4
 21501                           prodl	equ	0xFF3
 21502                           intcon	equ	0xFF2
 21503                           intcon2	equ	0xFF1
 21504                           intcon3	equ	0xFF0
 21505                           postinc0	equ	0xFEE
 21506                           fsr0h	equ	0xFEA
 21507                           fsr0l	equ	0xFE9
 21508                           wreg	equ	0xFE8
 21509                           postdec1	equ	0xFE5
 21510                           plusw1	equ	0xFE3
 21511                           fsr1h	equ	0xFE2
 21512                           fsr1l	equ	0xFE1
 21513                           indf2	equ	0xFDF
 21514                           postinc2	equ	0xFDE
 21515                           postdec2	equ	0xFDD
 21516                           plusw2	equ	0xFDB
 21517                           fsr2h	equ	0xFDA
 21518                           fsr2l	equ	0xFD9
 21519                           status	equ	0xFD8
 21520                           
 21521 ;; *************** function _INT1_isr *****************
 21522 ;; Defined at:
 21523 ;;		line 71 in file "Interrupt.c"
 21524 ;; Parameters:    Size  Location     Type
 21525 ;;		None
 21526 ;; Auto vars:     Size  Location     Type
 21527 ;;		None
 21528 ;; Return value:  Size  Location     Type
 21529 ;;		None               void
 21530 ;; Registers used:
 21531 ;;		wreg, status,2
 21532 ;; Tracked objects:
 21533 ;;		On entry : 0/0
 21534 ;;		On exit  : 0/0
 21535 ;;		Unchanged: 0/0
 21536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21541 ;;Total ram usage:        0 bytes
 21542 ;; Hardware stack levels used:    1
 21543 ;; This function calls:
 21544 ;;		Nothing
 21545 ;; This function is called by:
 21546 ;;		_chkisr
 21547 ;; This function uses a non-reentrant model
 21548 ;;
 21549                           
 21550                           	psect	text114
 21551  004C3E                     __ptext114:
 21552                           	opt stack 0
 21553  004C3E                     _INT1_isr:
 21554                           	opt stack 19
 21555                           
 21556                           ;Interrupt.c: 73: INTCON3bits.INT1IF == 0;
 21557                           
 21558                           ; BSR set to: 0
 21559                           ;incstack = 0
 21560  004C3E  50F0               	movf	intcon3,w,c	;volatile
 21561                           
 21562                           ;Interrupt.c: 74: INT1_flag = 1;
 21563  004C40  0E01               	movlw	1
 21564  004C42  0100               	movlb	0	; () banked
 21565  004C44  6FE5               	movwf	_INT1_flag& (0+255),b
 21566                           
 21567                           ; BSR set to: 0
 21568  004C46  0012               	return		;funcret
 21569  004C48                     __end_of_INT1_isr:
 21570                           	opt stack 0
 21571                           pclatu	equ	0xFFB
 21572                           pclath	equ	0xFFA
 21573                           tblptru	equ	0xFF8
 21574                           tblptrh	equ	0xFF7
 21575                           tblptrl	equ	0xFF6
 21576                           tablat	equ	0xFF5
 21577                           prodh	equ	0xFF4
 21578                           prodl	equ	0xFF3
 21579                           intcon	equ	0xFF2
 21580                           intcon2	equ	0xFF1
 21581                           intcon3	equ	0xFF0
 21582                           postinc0	equ	0xFEE
 21583                           fsr0h	equ	0xFEA
 21584                           fsr0l	equ	0xFE9
 21585                           wreg	equ	0xFE8
 21586                           postdec1	equ	0xFE5
 21587                           plusw1	equ	0xFE3
 21588                           fsr1h	equ	0xFE2
 21589                           fsr1l	equ	0xFE1
 21590                           indf2	equ	0xFDF
 21591                           postinc2	equ	0xFDE
 21592                           postdec2	equ	0xFDD
 21593                           plusw2	equ	0xFDB
 21594                           fsr2h	equ	0xFDA
 21595                           fsr2l	equ	0xFD9
 21596                           status	equ	0xFD8
 21597                           
 21598 ;; *************** function _INT0_isr *****************
 21599 ;; Defined at:
 21600 ;;		line 78 in file "Interrupt.c"
 21601 ;; Parameters:    Size  Location     Type
 21602 ;;		None
 21603 ;; Auto vars:     Size  Location     Type
 21604 ;;  k               2    0[COMRAM] int 
 21605 ;; Return value:  Size  Location     Type
 21606 ;;		None               void
 21607 ;; Registers used:
 21608 ;;		wreg, status,2, status,0
 21609 ;; Tracked objects:
 21610 ;;		On entry : 0/0
 21611 ;;		On exit  : 0/0
 21612 ;;		Unchanged: 0/0
 21613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21615 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21617 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21618 ;;Total ram usage:        2 bytes
 21619 ;; Hardware stack levels used:    1
 21620 ;; This function calls:
 21621 ;;		Nothing
 21622 ;; This function is called by:
 21623 ;;		_chkisr
 21624 ;; This function uses a non-reentrant model
 21625 ;;
 21626                           
 21627                           	psect	text115
 21628  004782                     __ptext115:
 21629                           	opt stack 0
 21630  004782                     _INT0_isr:
 21631                           	opt stack 19
 21632                           
 21633                           ;Interrupt.c: 80: int k;
 21634                           ;Interrupt.c: 81: for (k=0; k<20000;k++);
 21635                           
 21636                           ; BSR set to: 0
 21637                           ;incstack = 0
 21638  004782  0E00               	movlw	0
 21639  004784  6E02               	movwf	INT0_isr@k+1,c
 21640  004786  0E00               	movlw	0
 21641  004788  6E01               	movwf	INT0_isr@k,c
 21642  00478A                     i2l7327:
 21643  00478A  BE02               	btfsc	INT0_isr@k+1,7,c
 21644  00478C  D008               	goto	i2l7331
 21645  00478E  0E20               	movlw	32
 21646  004790  5C01               	subwf	INT0_isr@k,w,c
 21647  004792  0E4E               	movlw	78
 21648  004794  5802               	subwfb	INT0_isr@k+1,w,c
 21649  004796  B0D8               	btfsc	status,0,c
 21650  004798  D005               	goto	i2l633
 21651  00479A  D001               	goto	i2l7331
 21652  00479C  D003               	goto	i2l633
 21653  00479E                     i2l7331:
 21654  00479E  4A01               	infsnz	INT0_isr@k,f,c
 21655  0047A0  2A02               	incf	INT0_isr@k+1,f,c
 21656  0047A2  D7F3               	goto	i2l7327
 21657  0047A4                     i2l633:
 21658                           
 21659                           ;Interrupt.c: 82: INTCONbits.INT0IF = 0;
 21660  0047A4  92F2               	bcf	intcon,1,c	;volatile
 21661                           
 21662                           ;Interrupt.c: 83: INT0_flag = 1;
 21663  0047A6  0E01               	movlw	1
 21664  0047A8  0100               	movlb	0	; () banked
 21665  0047AA  6FE4               	movwf	_INT0_flag& (0+255),b
 21666                           
 21667                           ; BSR set to: 0
 21668  0047AC  0012               	return		;funcret
 21669  0047AE                     __end_of_INT0_isr:
 21670                           	opt stack 0
 21671                           pclatu	equ	0xFFB
 21672                           pclath	equ	0xFFA
 21673                           tblptru	equ	0xFF8
 21674                           tblptrh	equ	0xFF7
 21675                           tblptrl	equ	0xFF6
 21676                           tablat	equ	0xFF5
 21677                           prodh	equ	0xFF4
 21678                           prodl	equ	0xFF3
 21679                           intcon	equ	0xFF2
 21680                           intcon2	equ	0xFF1
 21681                           intcon3	equ	0xFF0
 21682                           postinc0	equ	0xFEE
 21683                           fsr0h	equ	0xFEA
 21684                           fsr0l	equ	0xFE9
 21685                           wreg	equ	0xFE8
 21686                           postdec1	equ	0xFE5
 21687                           plusw1	equ	0xFE3
 21688                           fsr1h	equ	0xFE2
 21689                           fsr1l	equ	0xFE1
 21690                           indf2	equ	0xFDF
 21691                           postinc2	equ	0xFDE
 21692                           postdec2	equ	0xFDD
 21693                           plusw2	equ	0xFDB
 21694                           fsr2h	equ	0xFDA
 21695                           fsr2l	equ	0xFD9
 21696                           status	equ	0xFD8
 21697                           pclatu	equ	0xFFB
 21698                           pclath	equ	0xFFA
 21699                           tblptru	equ	0xFF8
 21700                           tblptrh	equ	0xFF7
 21701                           tblptrl	equ	0xFF6
 21702                           tablat	equ	0xFF5
 21703                           prodh	equ	0xFF4
 21704                           prodl	equ	0xFF3
 21705                           intcon	equ	0xFF2
 21706                           intcon2	equ	0xFF1
 21707                           intcon3	equ	0xFF0
 21708                           postinc0	equ	0xFEE
 21709                           fsr0h	equ	0xFEA
 21710                           fsr0l	equ	0xFE9
 21711                           wreg	equ	0xFE8
 21712                           postdec1	equ	0xFE5
 21713                           plusw1	equ	0xFE3
 21714                           fsr1h	equ	0xFE2
 21715                           fsr1l	equ	0xFE1
 21716                           indf2	equ	0xFDF
 21717                           postinc2	equ	0xFDE
 21718                           postdec2	equ	0xFDD
 21719                           plusw2	equ	0xFDB
 21720                           fsr2h	equ	0xFDA
 21721                           fsr2l	equ	0xFD9
 21722                           status	equ	0xFD8
 21723                           
 21724                           	psect	rparam
 21725  0000                     pclatu	equ	0xFFB
 21726                           pclath	equ	0xFFA
 21727                           tblptru	equ	0xFF8
 21728                           tblptrh	equ	0xFF7
 21729                           tblptrl	equ	0xFF6
 21730                           tablat	equ	0xFF5
 21731                           prodh	equ	0xFF4
 21732                           prodl	equ	0xFF3
 21733                           intcon	equ	0xFF2
 21734                           intcon2	equ	0xFF1
 21735                           intcon3	equ	0xFF0
 21736                           postinc0	equ	0xFEE
 21737                           fsr0h	equ	0xFEA
 21738                           fsr0l	equ	0xFE9
 21739                           wreg	equ	0xFE8
 21740                           postdec1	equ	0xFE5
 21741                           plusw1	equ	0xFE3
 21742                           fsr1h	equ	0xFE2
 21743                           fsr1l	equ	0xFE1
 21744                           indf2	equ	0xFDF
 21745                           postinc2	equ	0xFDE
 21746                           postdec2	equ	0xFDD
 21747                           plusw2	equ	0xFDB
 21748                           fsr2h	equ	0xFDA
 21749                           fsr2l	equ	0xFD9
 21750                           status	equ	0xFD8


Data Sizes:
    Strings     460
    Constant    625
    Data        174
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     94     111
    BANK0           128     48     121
    BANK1           256     23     163
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_46(CODE[5]), STR_45(CODE[5]), STR_44(CODE[12]), STR_39(CODE[15]), 
		 -> STR_38(CODE[12]), STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[5]), 
		 -> STR_30(CODE[5]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[11]), STR_24(CODE[4]), STR_23(CODE[5]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[5]), STR_19(CODE[12]), 
		 -> STR_18(CODE[11]), STR_17(CODE[11]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[2]), STR_13(CODE[3]), STR_12(CODE[13]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_43(CODE[29]), STR_42(CODE[20]), STR_41(CODE[21]), STR_40(CODE[30]), 
		 -> STR_37(CODE[29]), STR_36(CODE[20]), STR_35(CODE[20]), STR_34(CODE[30]), 
		 -> STR_11(CODE[33]), STR_10(CODE[27]), STR_9(CODE[34]), STR_8(CODE[22]), 
		 -> STR_7(CODE[29]), STR_6(CODE[20]), STR_5(CODE[21]), STR_4(CODE[30]), 
		 -> STR_3(CODE[22]), STR_2(CODE[19]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 


Critical Paths under _main in COMRAM

    _Update_Screen->_drawtext
    _Initialize_Setup_Fan_Screen->_drawtext
    _Increase_Fan_Temp->_Update_Setup_Fan_Screen
    _Decrease_Fan_Temp->_Update_Setup_Fan_Screen
    _Update_Setup_Fan_Screen->_drawtext
    _Increase_Duty_Cycle->_do_update_pwm
    _get_RPM->___awdiv
    _Set_D2_RGB->___awdiv
    _Set_D1_RGB->___awdiv
    _Read_Volt->___ftdiv
    ___awtoft->___ftpack
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Do_Save_New_Time->_DS3231_Write_Time
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _Update_Setup_Time_Screen->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _DS1621_Read_Temp->_I2C_Read
    _printf->___ftsub
    _scale->___awmod
    _fround->___awmod
    ___awmod->___fttol
    ___awdiv->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _Decrease_Duty_Cycle->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___awdiv
    ___ftdiv->___ftmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_check_for_button_input
    _Turn_On_Fan->_printf
    _Setup_Fan_Temp->_check_for_button_input
    _Do_Setup_Time->_check_for_button_input
    _check_for_button_input->_printf
    _Turn_Off_Fan->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_check_for_button_input
    _Setup_Fan_Temp->_check_for_button_input
    _Do_Setup_Time->_check_for_button_input

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 2081903
                                             47 BANK0      1     1      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                _Decrease_Duty_Cycle
                        _Do_Beep_Bad
                       _Do_Beep_Good
     _Do_Change_Fan_Timer_Mode_Minus
      _Do_Change_Fan_Timer_Mode_Plus
                            _Do_Init
                      _Do_Setup_Time
                _Increase_Duty_Cycle
                  _Initialize_Screen
                        _Monitor_Fan
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
                     _Setup_Fan_Temp
                         _Toggle_Fan
                       _Turn_Off_Fan
                      _Update_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        6     6      0   57395
                                             73 COMRAM     6     6      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0  177922
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   95436
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Setup_Fan_Temp                                       0     0      0  494384
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _Decrease_Fan_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
               _Do_Save_New_Fan_Temp
                  _Increase_Fan_Temp
        _Initialize_Setup_Fan_Screen
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
            _Update_Setup_Fan_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Fan_Screen                          0     0      0   57221
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Fan_Temp                                    0     0      0   47091
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Fan_Temp                                 0     0      0   57516
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Fan_Temp                                    0     0      0   47091
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Fan_Screen                              3     3      0   47091
                                             73 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Increase_Duty_Cycle                                  0     0      0   25946
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  691154
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
                        _Monitor_Fan
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
           _Update_Setup_Time_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
                          _bcd_2_dec
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2   10721
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                              24    24      0   82656
                                             46 BANK0      1     1      0
                                              0 BANK1     23    23      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Set_D2_RGB                                           4     2      2    6969
                                             30 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Set_D1_RGB                                           4     4      0    6704
                                             30 COMRAM     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Read_Volt                                            9     6      3   10424
                                             60 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (3) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2794
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Monitor_Fan                                          0     0      0   95728
                       _Turn_Off_Fan
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                      10     6      4     292
                                             16 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   67661
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   46989
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   10772
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   10772
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   10794
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   10794
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   57516
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   69275
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _Initialize_Screen                                    0     0      0   57221
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    3531
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    1975
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    1761
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0   10940
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    5380
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    5380
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    5290
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             4     2      2    5290
                                             22 COMRAM     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0   11759
                                             73 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2   11600
                                             66 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     3     3      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   46989
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   46989
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   35485
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     154
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   20374
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   10440
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    2838
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3983
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3     946
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      23
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   83363
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                          _Init_UART
                       _Turn_Off_Fan
 ---------------------------------------------------------------------------------
 (1) _Turn_Off_Fan                                         0     0      0   82486
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   82486
                                              0 BANK0     46    32     14
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   22087
                                             66 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   21808
                                             66 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4082
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    4899
                                             60 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    6605
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             16 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     827
                                             16 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2763
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     857
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4595
                                             88 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4231
                                             76 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1122
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     284
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      64
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     529
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     285
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     199
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Change_Fan_Timer_Mode_Plus                        0     0      0   25992
                        _Do_Beep_Bad
                       _Do_Beep_Good
 ---------------------------------------------------------------------------------
 (1) _Do_Change_Fan_Timer_Mode_Minus                       0     0      0   25992
                        _Do_Beep_Bad
                       _Do_Beep_Good
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   12996
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   12996
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Decrease_Duty_Cycle                                  0     0      0   25946
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0   12996
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0   12950
                                             60 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2615
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     910
                                             45 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5804
                                             30 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3426
                                             45 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_Half_Sec                                        2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0      46
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Duty_Cycle
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_Half_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_Half_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Change_Fan_Timer_Mode_Minus
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Do_Change_Fan_Timer_Mode_Plus
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Init_UART
       _OpenUSART
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Time
     _DS1621_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Monitor_Fan
       _Turn_Off_Fan
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _get_duty_cycle
     _Read_Volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
     _Set_D1_RGB
       ___awdiv
         ___wmul (ARG)
     _Set_D2_RGB
       ___awdiv
         ___wmul (ARG)
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     ___awdiv
       ___wmul (ARG)
     ___ftge
     ___wmul
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _get_RPM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Increase_Duty_Cycle
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Fan
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   _Set_D1_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_D2_RGB
     ___awdiv
       ___wmul (ARG)
   _Setup_Fan_Temp
     _DS1621_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Fan_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Read_Volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
     _Set_D1_RGB
       ___awdiv
         ___wmul (ARG)
     _Set_D2_RGB
       ___awdiv
         ___wmul (ARG)
     _Update_Setup_Fan_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     ___awdiv
       ___wmul (ARG)
     ___ftge
     ___wmul
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _get_RPM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Turn_Off_Fan
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___ftge
   ___wmul
   _check_for_button_input
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___awdiv
       ___wmul (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
     _isdigit
     _putch
     _scale
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)

 _chkisr (ROOT)
   _INT0_isr
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     17      A3       7       63.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     30      79       5       94.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5E      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18B      34        0.0%
DATA                 0      0     18B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Nov 25 16:57:04 2024

                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                            l40 3E9C  
                                          l50 4526                                            l47 43C8  
                                          l55 4AA2                                            l72 489A  
                                          l82 4780                                            l67 46F8  
                                          l77 4754                                  ___awdiv@sign 001C  
                        __size_of_Turn_On_Fan 0022                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 004A                                  ___ftadd@exp1 0058  
                                ___ftadd@exp2 0057                                  ___ftadd@sign 0056  
                                         l112 44A4                                           l115 45F0  
                                         l311 36A0                                           l208 4B18  
                                         l312 360C                                           l314 367C  
                                         l315 369E                                           l252 4728  
                                         l505 4BE4                                           l258 3E18  
                                         l274 2BDE                                           l283 2B34  
                                         l451 47D6                                           l276 2AB8  
                                         l454 42D4                                           l198 459C  
                                         l446 3980                                           l560 4696  
                                         l490 40EE                                           l468 4A72  
                                         l493 4854                                           l496 4874  
                                         _FAN 00E1                                           l937 1AA0  
                                         l956 1320                                           _PR2 000FCB  
                                         _day 0066                             _Deactivate_Buzzer 4C58  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 00EF                                           _nbr 00DD  
                                         _rpm 005F                         __size_of_Turn_Off_Fan 001C  
                                         _rps 00DF                                           _txt 0061  
                                ___awmod@sign 0042                                           prod 000FF3  
                                         wreg 000FE8                                 _Increase_Time 3982  
                          ?_Deactivate_Buzzer 0001               Update_Setup_Fan_Screen@dc_char1 004A  
             Update_Setup_Fan_Screen@dc_char2 004B               Update_Setup_Fan_Screen@dc_char3 004C  
                                  _Fan_SW_Txt 00C2        Update_Setup_Screen_Cursor_Forward@xinc 0030  
      Update_Setup_Screen_Cursor_Forward@yinc 002F                               ??_fillRectangle 001D  
                                __CFG_LVP$OFF 000000                       _TFT_GreenTab_Initialize 47D8  
                                ___ftdiv@cntr 0037                                  ___ftdiv@sign 003C  
                                __CFG_WDT$OFF 000000                                          l2003 4220  
                              drawFastVLine@h 0019                                          l1301 2904  
                                        l1400 071A                                          l1332 1700  
                                        l1325 1FB2                                          l1079 331A  
                                        l1361 08A4                                          l1290 2750  
                                        l1443 0C5E                                          l1276 2D1C  
                              drawFastVLine@x 0022                                drawFastVLine@y 0018  
                                        l1471 4058                                          l2079 45E0  
                                        l1472 405A                                          l1473 4064  
                                        l1474 4066                                          l1467 403E  
                                        l1804 3766                                          l1476 4080  
                                        l1902 3BEC                                          l1815 373E  
                                        l1479 4828                                          l1672 3B56  
                                        l1763 3046                                          l1908 313E  
                                        l1844 2418                                          l1772 3036  
                                        l1845 2596                                          l1925 44E8  
                                        l1685 3FA0                                          l1918 48D8  
                                        l1848 2442                                          l1944 494C  
                                        l1929 3400                                          l1697 465A  
                                        l1970 48C0                                          l1859 2504  
                                        l1876 35C4                                          l1868 2520  
                                        l1884 2F3C                                          l1973 3CF8  
                                        l1893 2F2C                                          l5181 3DA2  
                                        l1886 2EA4                                          l1879 3590  
                                        l1983 4000                                          l1887 2ECC  
                                        l6311 4486                                          l6303 4470  
                                        l6321 449A                                          l5185 3DDA  
                                        l5281 443A                                          l6323 44A0  
                                        l5195 3E00                                          l6309 447E  
                                        l6317 448E                                          l5269 470A  
                                        l5197 3E0E                                          l5277 441E  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l6335 45FA  
                                        l6503 3E68                                          l6337 4600  
                                        l6329 45E8                                          l5641 45AE  
                                        l7081 495E                                          l6347 4612  
                                        l9011 0612                                          l9003 05D4  
                                        l5643 45B4                                          l6443 46A2  
                                        l7091 4984                                          l7083 4964  
                                        l6507 3E82                                          l6605 4050  
                                        l8221 2450                                          l9101 09C6  
                                        l9005 05EE                                          l9021 06C8  
                                        l5653 35D6                                          l6445 46AC  
                                        l8311 30EA                                          l8303 30C2  
                                        l8215 2426                                          l9103 09DA  
                                        l9023 06D8                                          l9015 063A  
                                        l5671 3672                                          l8161 36B2  
                                        l8321 3118                                          l8313 30F0  
                                        l8401 3F96                                          l9121 0A82  
                                        l9113 0A48                                          l9033 0720  
                                        l9009 05FE                                          l6555 4A60  
                                        l8307 30D4                                          l8243 24A8  
                                        l8227 245C                                          l9123 0A8E  
                                        l9115 0A54                                          l9051 0884  
                                        l9043 0798                                          l9027 06E8  
                                        l6299 4468                                          l5675 3680  
                                        l5659 3644                                          l8173 3706  
                                        l8165 36C2                                          l8317 3102  
                                        l8245 24B4                                          l8237 2484  
                                        l8333 3AD8                                          l9141 0B90  
                                        l9133 0AD6                                          l9109 0A10  
                                        l9029 06FC                                          l5685 369A  
                                        l6805 28DC                                          l6559 4A6C  
                                        l8183 3746                                          l8175 3726  
                                        l8167 36CE                                          l9231 352A  
                                        l8263 253E                                          l8255 24EC  
                                        l8247 24C0                                          l9151 0C22  
                                        l9127 0AAC                                          l9071 091A  
                                        l9055 0894                                          l9039 0746  
                                        l8503 2AA6                                          l5679 368A  
                                        l8177 3732                                          l8169 36EE  
                                        l9225 3502                                          l6593 4036  
                                        l6585 4024                                          l8273 2570  
                                        l8257 24F8                                          l8249 24C8  
                                        l8345 3B00                                          l8361 3B3C  
                                        l9129 0AB8                                          l9137 0AFE  
                                        l9081 0968                                          l9073 0920  
                                        l9049 0874                                          l9153 0C3C  
                                        l8521 2B2C                                          l8513 2AC4  
                                        l6761 2600                                          l9251 356A  
                                        l9227 351C                                          l8283 3066  
                                        l8347 3B0A                                          l8339 3AEA  
                                        l8603 162A                                          l9139 0B10  
                                        l9147 0C04                                          l9091 0984  
                                        l9067 08F0                                          l8531 2B7E  
                                        l8507 2AB4                                          l6771 26AE  
                                        l6763 2636                                          l9411 43B6  
                                        l8189 3758                                          l9261 359E  
                                        l8285 3080                                          l6597 4042  
                                        l6589 402E                                          l8365 3B4C  
                                        l8357 3B30                                          l8349 3B12  
                                        l8381 3F44                                          l8621 4944  
                                        l9149 0C18                                          l9085 0970  
                                        l9077 092E                                          l8517 2AF4  
                                        l8509 2ABC                                          l9181 3472  
                                        l6773 26E8                                          l6757 25A4  
                                        l9405 43A2                                          l9501 3978  
                                        l8631 2E4C                                          l9095 09BE  
                                        l9087 0976                                          l8519 2B28  
                                        l9327 1722                                          l6767 2672  
                                        l6783 275E                                          l8289 308E  
                                        l8801 33AA                                          l8393 3F7A  
                                        l8385 3F52                                          l8377 3F36  
                                        l8609 16DC                                          l8537 2BAA  
                                        l8529 2B56                                          l8545 2BDA  
                                        l9193 34D0                                          l9185 348C  
                                        l9169 342A                                          l6793 2826  
                                        l6785 2794                                          l9505 397C  
                                        l8731 3008                                          l8715 2FD4  
                                        l8707 2FA2                                          l8387 3F5C  
                                        l8571 1F72                                          l8563 1EAE  
                                        l8539 2BD2                                          l9195 34D6  
                                        l6779 2728                                          l6795 2860  
                                        l8813 33EE                                          l8805 33BE  
                                        l8733 300E                                          l8637 2E6A  
                                        l8389 3F64                                          l8397 3F86  
                                        l6789 27D0                                          l9701 39F8  
                                        l9525 4400                                          l9533 4366  
                                        l8807 33CC                                          l9279 38AA  
                                        l8823 3CA0                                          l8727 2FF8  
                                        l8719 2FE4                                          l8671 2EFE  
                                        l8591 14F6                                          l9631 3796  
                                        l9623 377A                                          l6799 28A0  
                                        l9703 3A22                                          l8809 33D6  
                                        l8753 3B8A                                          l8745 44BE  
                                        l8825 3CAE                                          l8737 3022  
                                        l8673 2F04                                          l8585 144E  
                                        l8913 01C2                                          l9641 37BC  
                                        l9625 3780                                          l9369 1A64  
                                        l9537 4378                                          l9481 3928  
                                        l9545 3252                                          l9801 0D0A  
                                        l8763 3BE8                                          l8835 3CE8  
                                        l8827 3CB6                                          l8851 3FF0  
                                        l8843 3FB4                                          l8739 3030  
                                        l8667 2EEE                                          l8659 2EDA  
                                        l8595 1506                                          l8499 2A9A  
                                        l9643 37C2                                          l9635 37A6  
                                        l9619 376A                                          l9491 395C  
                                        l9571 4AC8                                          l9725 488C  
                                        l8757 3BBC                                          l8845 3FC2  
                                        l8693 2F5E                                          l8677 2F18  
                                        l8941 0302                                          l9653 37E8  
                                        l9637 37AC                                          l9629 3790  
                                        l9397 4636                                          l9477 390E  
                                        l9717 46EA                                          l9709 4A9C  
                                        l9821 0E06                                          l9813 0D90  
                                        l9743 4762                                          l8847 3FCA  
                                        l8687 2F4E                                          l8679 2F26  
                                        l8943 0318                                          l8871 0042  
                                        l9647 37D2                                          l9663 3984  
                                        l9487 3952                                          l8777 333A  
                                        l9737 474E                                          l8857 41C8  
                                        l8953 03A6                                          l8945 034A  
                                        l8937 02DA                                          l8929 0272  
                                        l8873 0058                                          l9649 37D8  
                                        l9657 37EE                                          l9681 39BE  
                                        l8795 3394                                          l8859 41D6  
                                        l8971 04C6                                          l8963 041C  
                                        l8947 0360                                          l8891 0118  
                                        l8883 009C                                          l8867 002C  
                                        l9659 3818                                          l9675 39A8  
                                        l9587 2C00                                          l9579 4AF0  
                                        l8981 0514                                          l8973 04CC  
                                        l8965 044A                                          l8957 03CC  
                                        l8893 011E                                          l8877 0066  
                                        l9693 39EA                                          l9669 399A  
                                        l9853 0EB6                                          l9861 0EF2  
                                        l8799 33A4                                          l8959 03D8  
                                        l8967 045E                                          l8879 007C  
                                        l9687 39D4                                          l9951 200A  
                                        STR_1 FF34                                          STR_2 FF48  
                                        l8993 0596                                          l8985 051A  
                                        l8977 04DA                                          l8897 012A  
                                        l9857 0ED4                                          l9849 0E9A  
                                        STR_3 FEE1                                          STR_4 FE75  
                                        l8899 0166                                          l9963 2062  
                                        l9883 0FE0                                          l9795 0CC6  
                                        STR_5 FEF7                                          STR_6 FF20  
                                        l8989 056C                                          l9981 215E  
                                        l9885 0FF6                                          l9877 0FAC  
                                        STR_7 FE93                                          STR_8 FECB  
                                        l8999 05C4                                          l9879 0FC2  
                                        STR_9 FE32                                          l9993 218C  
                                        l9997 219C                                          u3250 3DD0  
              ?_Do_Change_Fan_Timer_Mode_Plus 0001                                          u5200 3E92  
                                printf@tmpval 009C                                          u7010 2B8C  
                                        u5190 3E78                                          u3950 3604  
                                        u8111 3512                                          u7151 2E3E  
                                        u8040 3456                                          u3960 363A  
                                        u6521 23E4                                          u6531 23F8  
                                        u7171 2E5C                                          u8211 38DE  
                __end_of_Activate_Buzzer_2KHz 4B8C                                          u7361 332C  
                                        u8091 34F4                                          u6731 3058  
                                        u7380 3358                                          u8270 43F6  
                                        u6751 3076                                          u8280 435C  
                                        u7385 3350                                          u7570 0208  
                                        _RBPU 007F8F                                          u7575 01FC  
                                        u7790 0712                                          u8927 4C0E  
                                        _TRMT 007D61                               Set_D1_RGB@range 0021  
                         ??_Deactivate_Buzzer 0011                                          _main 1AA2  
                                        _font FBC1       Update_Setup_Screen_Cursor_Backward@xinc 0030  
                                ___ftpack@arg 0011       Update_Setup_Screen_Cursor_Backward@yinc 002F  
                                        _hour 0068                                  ___ftpack@exp 0014  
                            __end_of_I2C_Init 4C2A                              __end_of_I2C_Read 44A6  
                                        _year 006F                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                ??_get_full_ADC 0013  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 00B8  
                                        _volt 00D6                              __end_of_I2C_Stop 4B68  
                                        pclat 000FFA                            __size_of_LCD_Reset 0012  
                                        prodh 000FF4                                          prodl 000FF3  
                             __end_of_Do_Beep 4A58                                          start 0018  
                 __size_of_I2C_Write_Cmd_Only 001A                               __end_of_Do_Init 427E  
                                 _Do_Beep_Bad 4A20                               ??_drawFastVLine 001C  
                             Set_D2_RGB@range 0021                                  ___ftmul@cntr 002C  
                             __end_of_i2cNack 4C20                                  ___param_bank 000010  
                                ___ftmul@sign 002D       Update_Setup_Screen_Cursor_Forward@field 002E  
                                ___fttol@exp1 003C                         __size_of_Do_Beep_Good 001C  
                                _Turn_Off_Fan 49E8                                  ___fttol@lval 0038  
                                 ?_TIMER1_isr 0001                              __end_of_INT0_isr 47AE  
                            __end_of_INT1_isr 4C48                                         l10001 21AC  
                                       l10013 21DC                                         l10005 21BC  
                                       l10015 21E2                                         l10009 21CC  
                                       l10017 21E8                              __end_of_INT2_isr 4C3E  
                                       l10027 2206                                         l10039 225E  
                                       l10055 2356                                         l10311 1CA0  
                                       l10303 1C82                                         l10081 23BE  
                                       l10073 239E                                         l10321 1CF2  
                                       l10083 23C4                                         l10315 1CAC  
                                       l10307 1C8C                                         l10077 23AE  
                                       l10069 238E                                         l10085 23CA  
                                       l10325 1D02                                         l10317 1CB4  
                                       l10309 1C96                                         l10245 1AB8  
                                       l10319 1CBA                                         l10257 1B10  
                                       l10339 1D4C                                         l10291 1C64  
                                       l10277 1C10                                         l10295 1C6E  
                                       l10287 1C5A                                         l10299 1C78  
              __size_of_Activate_Buzzer_500Hz 0012                     __end_of_Deactivate_Buzzer 4C60  
                             ??_do_update_pwm 003D                               drawFastVLine@hi 0020  
                             drawFastVLine@lo 0021                                Read_Volt@nStep 0044  
               __end_of_Activate_Buzzer_500Hz 4B9E                                         ?_main 0001  
                             __end_of___awdiv 3B58                               __end_of___ftadd 2598  
                                       STR_10 FEB0                                         STR_11 FE54  
                                       STR_20 FFBD                                         STR_12 FF7B  
                                       STR_21 FFFB                                         STR_13 FFF5  
                                       STR_14 FF1E                                         STR_22 FFF8  
                                       STR_30 FFCD                                         STR_15 FFC8  
                                       STR_23 FFDC                                         STR_31 FFD2  
                                       STR_40 FE75                                         STR_24 FFF1  
                                       STR_32 FFE1                                         STR_16 FFD7  
                                       STR_41 FEF7                                         STR_33 FFB3  
                                       STR_17 FFB7                                         STR_25 FFAC  
                                       STR_26 FFB3                                         STR_42 FF20  
                                       STR_34 FE75                                         STR_18 FFC2  
                                       STR_43 FE93                                         STR_27 FFE5  
                                       STR_19 FFA0                                         STR_35 FF0C  
                                       STR_36 FF20                                         STR_28 FFE9  
                                       STR_44 FF88                               __end_of___awmod 3FA2  
                                       STR_37 FE93                                         STR_45 FFC8  
                                       STR_29 FFED                                         STR_46 FFD7  
                                       STR_38 FF94                                         STR_39 FF6C  
                                       STR_47 FF5B                               __end_of___ftdiv 35C6  
                             __end_of___ftneg 48E6                               __end_of___lldiv 3D0A  
                             __end_of___ftmul 3140                                         _T0CON 000FD5  
                             ___awdiv@divisor 0019                               __end_of___llmod 4012  
                             __end_of___ftsub 44EA                               __end_of___fttol 3402  
                                       _T2CON 000FCA              ??_Do_Change_Fan_Timer_Mode_Minus 0046  
             ?_Do_Change_Fan_Timer_Mode_Minus 0001                                         _T3CON 000FB1  
                                       i2l633 47A4                                         i2l617 3C44  
                             ___awdiv@counter 001B                                         _RCSTA 000FAB  
                                       _TMR0H 000FD7                                         _TMR1H 000FCF  
                                       _TMR0L 000FD6                                         _TMR1L 000FCE  
                                       _TMR3L 000FB2                                         _SPBRG 000FAF  
                                       _PORTD 000F83                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                       __end_of_Wait_Half_Sec 4A74                                         _TXREG 000FAD  
                                       _TXSTA 000FAC                               __end_of_get_RPM 4528  
                                       _Rcmd1 2D1E                                         _Rcmd3 3140  
                                ___lltoft@exp 0021      Update_Setup_Screen_Cursor_Backward@field 002E  
                                  _Nec_Button 00E9                 __size_of_Do_Save_New_Fan_Temp 0014  
                                  _i2cHighSda 4C50                                    _i2cHighScl 4C0A  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                               ___awtoft@sign 001C                               __end_of_dpowers FDC4  
                                       _font2 FCC0              __size_of_Update_Setup_Fan_Screen 0082  
                                       _found 00F0                                         _scale 1322  
                             __end_of_isdigit 494E                                         _tempC 006D  
                                       _tempF 006E                                         _month 006A  
                               ___ftpack@sign 0015                                         _putch 4BE0  
                           __end_of_I2C_Start 4B7A                             __end_of_I2C_Write 4620  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                                       plusw1 000FE3                                         plusw2 000FDB  
                                       status 000FD8                             ?_DS1621_Read_Temp 0014  
                                _Do_Beep_Good 4A04               __size_of_check_for_button_input 00AE  
                       __end_of_Go_Next_Field 498E                               write_data@data_ 0013  
                          ??_DS1621_Read_Temp 0016                         _Select_Fan_Temp_Field 00EB  
                             __initialization 40F0                                  __end_of_main 1D70  
                                __end_of_font FCC0                   __end_of_Decrease_Duty_Cycle 489C  
                            __end_of_Init_ADC 4BFC                              get_duty_cycle@dc 0019  
                            __end_of_Rcmd2red 4566                                        ??_main 00AF  
                               ___fttol@sign1 0037                             _Decrease_Fan_Temp 4AE2  
                                  _Set_D1_RGB 43CA                                 __activetblptr 000002  
                                  _Set_D2_RGB 432C                             ?_DS3231_Read_Time 0001  
                           __end_of_LCD_Reset 4B44                          __size_of__tdiv_to_l_ 0110  
                       __end_of_Go_Prev_Field 496E                     ??_TFT_GreenTab_Initialize 001B  
                          ?_Decrease_Fan_Temp 0001                                  _Fan_Mode_Txt 0179  
                  ??_Update_Setup_Time_Screen 004A                                _Init_Interrupt 48E6  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                                     I2C_Init@c 0011  
                                   I2C_Read@n 0012                                        _ADCON0 000FC2  
                                      _ADCON1 000FC1                                        _ADCON2 000FC0  
                         DS1621_Read_Temp@Cmd 0016                              ___llmod@dividend 001E  
                                      ?_scale 0043                                        _ADRESH 000FC4  
                                      _ADRESL 000FC3                                        _CCPR1L 000FBE  
                                      _CCPR2L 000FBB                              ___awdiv@dividend 0017  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 465C                                        ?_putch 0001  
                            __end_of___ftpack 3768                              __end_of___lbtoft 48C2  
                         ??_Decrease_Fan_Temp 004D                                     ??_Do_Beep 0046  
                            __end_of___lltoft 4222                                 ??_Monitor_Fan 005F  
                                      _DC_Txt 00BE                                     ??_Do_Init 005F  
                                      i2l8023 3C3A                                        i2l8015 3C26  
                                      i2l7331 479E                                        i2l8019 3C30  
                                      i2l7327 478A                                        _OSCCON 000FD3  
                          __size_of_Init_UART 0014                           __size_of_TIMER1_isr 000E  
                                      _SPBRGH 000FB0                                        _SSPBUF 000FC9  
                                   ??_i2cNack 0011                            __size_of_Read_Volt 006E  
                            __end_of_delay_ms 45A4                                        _i2cAck 4B44  
                                      _Nec_ok 00D9                              __end_of_fillRect 445E  
                            __end_of_drawChar 2BE0                              __end_of__powers_ FE12  
                          __size_of_OpenUSART 0070                                        ___ftge 3B58  
                              _FAN_TIMER_MODE 0063                                _FAN_TIMER_TIME 00E3  
         __end_of_Initialize_Setup_Fan_Screen 331C                   _Initialize_Setup_Fan_Screen 3232  
                    __size_of_Activate_Buzzer 0012                                        ___wmul 4802  
                                   ??___awdiv 001B                              __end_of_drawtext 34E4  
                                   ??___ftadd 0053                                     ??___awmod 0041  
                                   ??___ftdiv 0034                             _In_Fan_Temp_Setup 00E7  
                                   ??___ftneg 0014                                     ??___lldiv 0019  
                                   ??___ftmul 0025                                     ??___llmod 0026  
                                   ??___ftsub 005F                                     ??___fttol 0032  
                                      _chkisr 0008                                        _buffer 0100  
                   __end_of_Decrease_Fan_Temp 4AF6                                        _fround 1D70  
                                      clear_0 4100                                        clear_1 410C  
                            ___awdiv@quotient 001D                                        _minute 0069  
                                      _second 006B                               ___awmod@divisor 003F  
                                  _Timing_Txt 0138                          _Activate_Buzzer_2KHz 4B7A  
                                   ??_get_RPM 0021                    __size_of_Deactivate_Buzzer 0008  
                             ___awmod@counter 0041                                        _printf 001C  
                                drawtext@size 0040                               ??_Increase_Time 004A  
                                      _strcpy 4698                                        _strlen 45A4  
                       ___ftmul@f3_as_product 0029                        __end_of_Init_Interrupt 490A  
                                  _Toggle_Fan 4A8E                          __end_of_get_full_ADC 4876  
                      _check_for_button_input 38D4                              _Do_Save_New_Time 4AF6  
                                   ??_isdigit 0011                                     ?_I2C_Init 0011  
                                   ?_I2C_Read 0001                       __size_of_Setup_Fan_Temp 01E2  
                      get_duty_cycle@set_temp 0013                                     ?_I2C_Stop 0001  
                                __mediumconst FBC0                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 49AE                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                            __end_of_spiwrite 4B1E                      __size_of_Exit_Time_Setup 0010  
                          __size_of_bcd_2_dec 002A                                    __accesstop 0080  
                     __end_of__initialization 4152                              ??_get_duty_cycle 0015  
                          __size_of_dec_2_bcd 0058                                    ___ftadd@f1 004D  
                                  ___ftadd@f2 0050                                    ___ftge@ff1 0011  
                                  ___ftge@ff2 0014                                     ?_INT0_isr 0001  
                                   ?_INT1_isr 0001                                     ?_INT2_isr 0001  
                               ___rparam_used 000001                                    ___ftdiv@f1 002E  
                                  ___ftdiv@f2 0031                                    ___ftdiv@f3 0038  
                                  ___ftneg@f1 0011                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           __end_of_Monitor_Fan 43CA  
                                  ___ftmul@f1 001F                                    ___ftmul@f2 0022  
                                  ___ftsub@f1 0059                                    ___ftsub@f2 005C  
                                  ___fttol@f1 002E                                 __end_of_Rcmd1 2E2E  
                               __end_of_Rcmd3 3232                                __pcstackCOMRAM 0001  
                                __pidataBANK0 482A                                  __pidataBANK1 3D0A  
                                  ___lltoft@c 0019                                 __end_of_font2 FD9C  
                           __end_of_i2cLowSda 4C34                             __end_of_i2cLowScl 4C50  
                               __end_of_scale 1702                                 __end_of_putch 4BEE  
                       ?_Activate_Buzzer_2KHz 0001                                     INT0_isr@k 0001  
                           __end_of_Init_UART 4B32                                drawPixel@color 0019  
                                dec_2_bcd@bcd 0047                                  dec_2_bcd@dec 0049  
                      __size_of_Decrease_Time 00B6                                   ?_Set_D1_RGB 0001  
                                 ?_Set_D2_RGB 001F                            _setup_fan_set_temp 006C  
                          _setup_fan_set_text 0183                               ?_Init_Interrupt 0001  
                      __size_of_write_command 0010                                    __div_to_l_ 2F3E  
                           __end_of_Read_Volt 40F0                                    ??_I2C_Init 0015  
                                  ??_I2C_Read 0011                                    ??_I2C_Stop 0011  
                                     ??_Rcmd1 001B                                       ??_Rcmd3 001B  
                     _Update_Setup_Fan_Screen 3E9E                            __size_of_drawPixel 0030  
                           __end_of_OpenUSART 4082                               __div_to_l_@exp1 001C  
                             __div_to_l_@cntr 001B                   __end_of_Increase_Duty_Cycle 46FA  
                                     ??_scale 0046                          Read_Volt@ADC_Channel 0043  
                             __div_to_l_@quot 0017                                       ??_putch 0011  
                                  __pbssBANK0 00D6                                    __pbssBANK1 019F  
                                   ?_Init_ADC 0001          __end_of_Initialize_Setup_Time_Screen 2D1E  
       __size_of_Initialize_Setup_Time_Screen 013E                  _Initialize_Setup_Time_Screen 2BE0  
                               ??_DS1621_Init 0016                                     ?_Rcmd2red 0001  
                             spiwrite@spidata 0012                                    ??_INT0_isr 0001  
                                  ??_INT1_isr 0001                                    ??_INT2_isr 0001  
                               __div_to_l_@f1 0011                                 __div_to_l_@f2 0014  
                                _fan_set_temp 00B6                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                                 ??_Turn_On_Fan 005F  
                              I2C_Read@inByte 0013                                       ?___ftge 0011  
                                     ?___wmul 0011                           __size_of_i2cHighSda 0008  
                         __size_of_i2cHighScl 000C                                       ?_chkisr 0001  
                      __size_of_setAddrWindow 0056                             __end_of_bcd_2_dec 47D8  
                                     _CCP1CON 000FBD              I2C_Write_Cmd_Write_Data@Data_Out 0014  
                                     _CCP2CON 000FBA                        __size_of_Do_Setup_Time 023E  
                                ??_TIMER1_isr 0001                    __size_of_Decrease_Fan_Temp 0014  
                                     ?_fround 0043                                 ??_I2C_ReStart 0011  
                                   ?___awtoft 0019                                     ?___ftpack 0011  
                                   ?___lbtoft 0019                                       _FANMODE 00E2  
                                  I2C_Write@n 0012                                       ?_printf 0080  
                                   ?___lltoft 0019                                       ?_strcpy 0011  
                                     ?_strlen 0011                             __end_of_dec_2_bcd 42D6  
                                 ?_Toggle_Fan 0001                             ??_Activate_Buzzer 0011  
                               _Fan_Timer_Txt 00CE                                    _fillScreen 49CC  
                       __end_of_Update_Screen 1322                                     ?_delay_ms 0017  
                                   ?_fillRect 0023                                     ?_drawChar 002E  
                                     _SSPCON1 000FC6                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 017E                         __end_of_fillRectangle 36A2  
                                     _Do_Beep 4A3C                                     ?_drawtext 0039  
                                  ??_Init_ADC 0011                                       _Do_Init 4222  
                                 _Monitor_Fan 437E                      _I2C_Write_Cmd_Write_Data 498E  
                  __end_of_I2C_Write_Cmd_Only 4A8E                                    ??_Rcmd2red 0014  
                      DS1621_Read_Temp@Device 0018                                 _Decrease_Time 3768  
                     get_duty_cycle@diff_temp 0017                                       _i2cNack 4C16  
                          __end_of_TIMER1_isr 4C0A                            _Fan_Timer_Mode_Txt 00CA  
               ?_Initialize_Setup_Time_Screen 0001                                 _write_command 4BD0  
                                   _I2C_Start 4B68                                     _I2C_Write 45E2  
                           ??_Exit_Time_Setup 004A                           __size_of_Set_D1_RGB 004A  
                         __size_of_Set_D2_RGB 0052                               __size_of_i2cAck 0012  
                           __end_of__npowers_ FDEB                                       __Hparam 0000  
                                  _scale$3006 0046                  __end_of_Do_Save_New_Fan_Temp 4AE2  
                                     __Lparam 0000                           __end_of_DS1621_Init 49CC  
                           __end_of_drawPixel 472A                         __end_of_drawFastVLine 3E1A  
                             __size_of___ftge 0096                                       ___awdiv 3AC2  
                                     ___ftadd 23D4                                       ___awmod 3F20  
                                     ___ftdiv 34E4                                       ___ftneg 48C2  
                                  _light_flag 00F1                                       ___lldiv 3C7E  
                             __size_of___wmul 0028                        ??_Activate_Buzzer_2KHz 0011  
                                     ___ftmul 3048                                       ___llmod 3FA2  
                                     ___ftsub 44A6                                       ___fttol 331C  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 3C76  
                                   ?_spiwrite 0001                                       __pcinit 40F0  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                               __size_of_fround 0244  
                                     __ramtop 1000                                       _get_RPM 44EA  
                                  ??___lltoft 001D                                       __ptext0 1AA2  
                                     __ptext1 0C60                                       __ptext2 4A8E  
                                     __ptext3 490A                                       __ptext4 21F2  
                                     __ptext5 3232                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 4ABA                                       __ptext7 4ACE  
                                     __ptext8 4AE2                                       __ptext9 3E9E  
                             __size_of_printf 0C44                                   _Timer_Table 00B0  
                         __end_of_Turn_On_Fan 492C                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FE32                                     _T1CONbits 000FCD  
                                 ?__div_to_l_ 0011                     ??_Update_Setup_Fan_Screen 004A  
                                     _dpowers FD9C                         __end_of_do_update_pwm 38D4  
                              _Setup_Fan_Temp 21F2                                       _isdigit 492C  
                       _Activate_Buzzer_500Hz 4B8C                              ___awmod@dividend 003D  
                                  _duty_cycle 0067                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 4ABA                                 drawtext@_text 003A  
                               drawtext@color 003C                                    ??_fillRect 0028  
                                  ??_drawChar 0035                                     _LCD_Reset 4B32  
                           _DS3231_Write_Time 3A28                                 _setAddrWindow 42D6  
                              __pintcode_body 3BEE                                    delay_ms@ms 0017  
                        end_of_initialization 4152                                 _Do_Setup_Time 1FB4  
                                   _INT0_flag 00E4                                     _INT1_flag 00E5  
                                   _INT2_flag 00E6                                    ??_drawtext 0041  
                           _Increase_Fan_Temp 4ABA                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                                ?_write_command 0001  
                               __Lmediumconst FBC0                     __size_of_DS3231_Read_Time 0066  
                                     int_func 3BEE                            ?_Increase_Fan_Temp 0001  
                     DS3231_Read_Time@Address 0014                      DS3231_Write_Time@Address 004B  
                                  ?_I2C_Start 0001                                    ?_I2C_Write 0001  
                                  get_RPM@RPS 0021                      __end_of_Do_Save_New_Time 4B0A  
                                _get_full_ADC 4850                           __size_of_Toggle_Fan 0016  
                             ___lldiv@divisor 0015                           ??_DS3231_Write_Time 004A  
                             ___lldiv@counter 001D                       check_for_button_input@j 019D  
                                  _tempSecond 00B7                        __size_of_Wait_Half_Sec 001C  
                                   _RCSTAbits 000FAB                                       printf@c 00AD  
                                     printf@f 0080                           ??_Increase_Fan_Temp 004D  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                              __tdiv_to_l_@f1 0011                                __tdiv_to_l_@f2 0014  
                                  ??_spiwrite 0011                       ?_check_for_button_input 0001  
                                     strlen@s 0011                                 ??__tdiv_to_l_ 0017  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                        __end_of_Setup_Fan_Temp 23D4  
                            drawtext@cursor_x 0049                              drawtext@cursor_y 0048  
                                   _PORTBbits 000F81                                     _PORTCbits 000F82  
                                   _PORTDbits 000F83                              I2C_Write@outByte 0011  
                                  _setup_date 0158                                   ?_fillScreen 0024  
                __size_of_Decrease_Duty_Cycle 0026                                    _setup_hour 00F4  
                                  _setup_time 0161                                    _setup_year 00F8  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 3AC2  
                                   _TRISBbits 000F93                                     _TRISCbits 000F94  
        __size_of_Initialize_Setup_Fan_Screen 00EA                        __size_of_Go_Next_Field 0020  
                                ??_i2cHighSda 0011                                  ??_i2cHighScl 0011  
                           __size_of_I2C_Init 000A                             __size_of_I2C_Read 0048  
                   __end_of_Increase_Fan_Temp 4ACE                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 0014                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                              drawtext@textsize 0044  
                                   _SYSTEM_ON 0064                                    drawPixel@x 001B  
                                  drawPixel@y 0018                                   _DS1621_Init 49AE  
                                 ___ftdiv@exp 003B                                   printf@width 00A0  
                                   _TXSTAbits 000FAC             __size_of_Update_Setup_Time_Screen 0184  
                          get_full_ADC@result 0015                           __size_of__div_to_l_ 010A  
                   ?_Update_Setup_Time_Screen 0001                             __size_of_INT0_isr 002C  
                           __size_of_INT1_isr 000A                             __size_of_INT2_isr 000A  
                              __end_of_i2cAck 4B56                                   ___ftmul@exp 0028  
                      __size_of_Go_Prev_Field 0020                ??_Initialize_Setup_Time_Screen 004A  
                        __size_of_Do_Beep_Bad 001C                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 490A                __end_of_check_for_button_input 3982  
                            ??_Init_Interrupt 0011                            __end_of_i2cHighSda 4C58  
                              __end_of___ftge 3BEE                            __end_of_i2cHighScl 4C16  
                               Read_Volt@volt 0040                                __end_of___wmul 482A  
                               delay_ms@count 0019                                    _write_data 4BC0  
                              __end_of_chkisr 3C7E                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 4AA4                               ?_Setup_Fan_Temp 0001  
                                  drawtext@bg 003E                                __end_of_fround 1FB4  
                                ??_Set_D1_RGB 001F                                  ??_Set_D2_RGB 0021  
                      ?_Activate_Buzzer_500Hz 0001                                     _i2cLowSda 4C2A  
                                   _i2cLowScl 4C48                                __end_of_printf 0C60  
                       __end_of_Increase_Time 3A28                                __end_of_strcpy 46CA  
                              __end_of_strlen 45E2                                     _Nec_state 00EA  
                         start_initialization 40F0                                     _Init_UART 4B1E  
                               _Wait_Half_Sec 4A58                           __end_of__tdiv_to_l_ 2F3E  
                        _Do_Save_New_Fan_Temp 4ACE                        Update_Screen@neg_tempC 004C  
                      Update_Screen@neg_tempF 004E                                     _Read_Volt 4082  
                             ??_Decrease_Time 004A                            get_duty_cycle@temp 0011  
                             ??_write_command 0013                          Set_D1_RGB@duty_cycle 0020  
                                   _OpenUSART 4012                               ___llmod@divisor 0022  
                            __CFG_OSC$INTIO67 000000                                   ??_I2C_Start 0011  
                           __size_of_Init_ADC 000E                               ___llmod@counter 0026  
                                 ??_I2C_Write 0011                                      ??_i2cAck 0011  
                           __size_of_Rcmd2red 003E                           __size_of_fillScreen 001C  
                          __end_of_Set_D1_RGB 4414                            __end_of_Set_D2_RGB 437E  
                               _Go_Next_Field 496E                               _Activate_Buzzer 4B9E  
                                    ??___ftge 0017                                      ??___wmul 0015  
                               ?_Turn_Off_Fan 0001                                      ??_chkisr 0003  
                                 __pdataBANK0 00B0                                   __pdataBANK1 0100  
                                    ??_fround 0046                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 008E  
                            _DS1621_Read_Temp 465C                                      ??_strcpy 0015  
                                    ??_strlen 0013                                  ??_Toggle_Fan 005F  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                                   _bcd_2_dec 47AE                                    fround@prec 004C  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                                ?_Wait_Half_Sec 0001  
                           __size_of___lltoft 0060                                   __pbssCOMRAM 005F  
                  ??_I2C_Write_Cmd_Write_Data 0015                    __size_of_DS3231_Write_Time 009A  
                                  ?_Init_UART 0001                               ??_setAddrWindow 0017  
                               __pcstackBANK0 0080                                 __pcstackBANK1 0188  
                               _Go_Prev_Field 494E                               ??_Do_Setup_Time 005F  
                       ?_Do_Save_New_Fan_Temp 0001                                     _dec_2_bcd 427E  
                             _Exit_Time_Setup 4BB0                                    ?_Read_Volt 003D  
                  __size_of_Increase_Fan_Temp 0014                                   ??_LCD_Reset 001B  
                                _isdigit$2628 0012                             __size_of_delay_ms 003E  
                                    ?_Do_Beep 0001                                      ?_Do_Init 0001  
                                ?_Monitor_Fan 0001                             __size_of_fillRect 004A  
                           __size_of_drawChar 0156                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 415C                                      ?_i2cNack 0001  
                           __size_of_drawtext 00E2                                 ?_Do_Beep_Good 0001  
 __end_of_Update_Setup_Screen_Cursor_Backward 2906  __size_of_Update_Setup_Screen_Cursor_Backward 01B4  
       ??_Update_Setup_Screen_Cursor_Backward 002E          ?_Update_Setup_Screen_Cursor_Backward 0001  
         _Update_Setup_Screen_Cursor_Backward 2752                  __size_of_Increase_Duty_Cycle 0030  
                              ?_Go_Next_Field 0001                            __end_of_Toggle_Fan 4AA4  
                                 I2C_Read@ack 0011                                     _bit_count 00ED  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 4802  
                              ??_Turn_Off_Fan 005F                                 __pmediumconst FBC0  
                                    ?___awdiv 0017                                     __ptext100 4876  
                                   __ptext101 4A3C                                     __ptext110 4B9E  
                                   __ptext102 381E                                     __ptext103 489C  
                                   __ptext112 4BFC                                     __ptext104 331C  
                                   __ptext113 4C34                                     __ptext105 3048  
                                   __ptext114 4C3E                                     __ptext106 34E4  
                                   __ptext115 4782                                     __ptext107 36A2  
                                   __ptext108 4A58                                     __ptext109 4C58  
                                    ?___ftadd 004D                                      ?___awmod 003D  
                                    ?___ftdiv 002E                                      ?___ftneg 0011  
                                    ?___lldiv 0011                                      ?___ftmul 001F  
                                    ?___llmod 001E                                      ?___ftsub 0059  
                                   __npowers_ FDC4                                      ?___fttol 002E  
                     __size_of_get_duty_cycle 0084                                     __tft_type 0065  
                          _I2C_Write_Cmd_Only 4A74                            drawFastVLine@color 001A  
                                 ?_write_data 0001                                     _drawPixel 46FA  
                                    ?_get_RPM 001F                                   __tdiv_to_l_ 2E2E  
                           __size_of_spiwrite 0014                                  ??__div_to_l_ 0017  
                                  ?_bcd_2_dec 0001                           ?_I2C_Write_Cmd_Only 0013  
                                    ?_isdigit 0001                                      _I2C_Init 4C20  
                                    _I2C_Read 445E                                ?_Go_Prev_Field 0001  
                                    _I2C_Stop 4B56                             _Initialize_Screen 1702  
                              __size_of_Rcmd1 0110                                __size_of_Rcmd3 00F2  
                                  ?_dec_2_bcd 0043                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FE12                            ?_Initialize_Screen 0001  
                              __size_of_scale 03E0                                __size_of_putch 000E  
                     __end_of_Activate_Buzzer 4BB0                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0046                           ??_Initialize_Screen 004A  
                                _Select_Field 00EC                                      _INT0_isr 4782  
                                    _INT1_isr 4C3E                                      _INT2_isr 4C34  
                         _Decrease_Duty_Cycle 4876                          ??_I2C_Write_Cmd_Only 0014  
                                    _PIE1bits 000F9D                                     _tempC_Txt 00D2  
                                   _tempF_Txt 00B9                             ?_Do_Save_New_Time 0001  
                      __size_of_Update_Screen 06C2                        DS3231_Read_Time@Device 0015  
                     DS3231_Write_Time@Device 004A                                      _PIR1bits 000F9E  
                          __end_of__div_to_l_ 3048                                 _In_Time_Setup 00E8  
                          ??_Do_Save_New_Time 004C                              _Fan_Set_Temp_Txt 00C6  
                ?_Initialize_Setup_Fan_Screen 0001                                     _setup_day 00F3  
                           DS1621_Init@Device 0016                                     fillRect@h 0025  
                                   fillRect@i 002C                                     fillRect@w 0024  
                                   fillRect@x 002B                                     fillRect@y 0023  
                                   drawChar@c 002F                                     drawChar@i 0038  
                                   drawChar@j 0037                                     drawChar@x 0036  
                                   drawChar@y 002E                 __size_of_Activate_Buzzer_2KHz 0012  
             ??_Do_Change_Fan_Timer_Mode_Plus 0046                                    ?_drawPixel 0018  
                      __size_of_fillRectangle 00DC                                    _ADCON0bits 000FC2  
                             ??_Wait_Half_Sec 0011                       __end_of_Exit_Time_Setup 4BC0  
                           ___wmul@multiplier 0011                     __end_of_Initialize_Screen 1AA2  
                                 ??_i2cLowSda 0011                                   ??_i2cLowScl 0011  
                        ?_Decrease_Duty_Cycle 0001                                  ??_fillScreen 0026  
                                  printf@flag 00A8                                    printf@fval 00AA  
                                  printf@prec 009A                        ??_Do_Save_New_Fan_Temp 004A  
                                 ??_Init_UART 0014                                 Set_D2_RGB@rpm 001F  
            __end_of_Update_Setup_Time_Screen 2A8A                                   ??_Read_Volt 0040  
                                 _INTCON2bits 000FF1                                   _INTCON3bits 000FF0  
                                   copy_data0 4126                                     copy_data1 4146  
                                   drawtext@i 0046                        __size_of_drawFastVLine 0088  
                                   drawtext@x 0043                                     drawtext@y 0039  
                                    _Nec_code 019F                                      _Init_ADC 4BEE  
                           write_command@cmd_ 0013                                   ??_OpenUSART 0013  
                            __size_of_Do_Beep 001C                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 4528                              __size_of_Do_Init 005C  
                         __size_of_write_data 0010                               ??_Go_Next_Field 0031  
                             OpenUSART@config 0013                                  _Time_Elapsed 00DB  
                            __size_of_i2cNack 000A                                 _RTC_ALARM_Txt 00B4  
      __end_of_Do_Change_Fan_Timer_Mode_Minus 4782       __size_of_Do_Change_Fan_Timer_Mode_Minus 002C  
              _Do_Change_Fan_Timer_Mode_Minus 4756                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00B6                                Wait_Half_Sec@k 0011  
                          __end_of_fillScreen 49E8                                      __Lrparam 0000  
                            ??_Setup_Fan_Temp 005F                                  ?_Turn_On_Fan 0001  
                     ??_Activate_Buzzer_500Hz 0011                              __size_of___awdiv 0096  
                            __size_of___ftadd 01C4                      ?_Update_Setup_Fan_Screen 0001  
                            __size_of___awmod 0082                              __size_of___ftdiv 00E2  
                            __size_of___ftneg 0024                              __size_of___lldiv 008C  
                            __size_of___ftmul 00F8                              __size_of___llmod 0070  
                            __size_of___ftsub 0044                              __size_of___fttol 00E6  
                                    _Volt_Txt 0173                 ??_Initialize_Setup_Fan_Screen 004A  
                                    ___awtoft 4620                                      ___ftpack 36A2  
                                    ___lbtoft 489C                                  ?_I2C_ReStart 0001  
                                 _fround$3004 0049                                   _fround$3005 0046  
                                    ___lltoft 41C2                         ??_Decrease_Duty_Cycle 0046  
                             ??_Go_Prev_Field 0031                              __size_of_get_RPM 003E  
                                 ??_bcd_2_dec 0011                                 _Update_Screen 0C60  
                                    _date_Txt 014F                              __size_of_isdigit 0022  
                                    _delay_ms 4566                                   ??_dec_2_bcd 0045  
                                    __ptext10 46CA                                      __ptext11 1FB4  
                                    __ptext20 437E                                      __ptext12 44EA  
                                    __ptext21 3E1A                                      __ptext13 38D4  
                                    __ptext30 1702                                      __ptext22 2BE0  
                                    __ptext14 47AE                                      __ptext31 4698  
                                    __ptext23 3982                                      __ptext15 432C  
                                    __ptext40 3A28                                      __ptext32 49CC  
                                    __ptext24 494E                                      __ptext16 43CA  
                                    __ptext41 427E                                      __ptext33 35C6  
                                    __ptext25 2752                                      __ptext17 4082  
                                    __ptext50 46FA                                      __ptext42 415C  
                                    __ptext34 47D8                                      __ptext26 496E  
                                    __ptext18 4850                                      __ptext51 42D6  
                                    __ptext43 3768                                      __ptext35 3140  
                                    __ptext27 2598                                      __ptext19 4620  
                                    __ptext60 4222                                      __ptext52 4BC0  
                                    __ptext44 2906                                      __ptext36 4528  
                                    __ptext28 4BB0                                      __ptext61 49E8  
                                    __ptext53 4BD0                                      __ptext45 3402  
                                    __ptext37 2D1E                                      __ptext29 4AF6  
                                    __ptext70 2E2E                                      __ptext62 001C  
                                    __ptext54 4B0A                                      __ptext46 45A4  
                                    __ptext38 4B32                                      __ptext71 2F3E  
                                    __ptext63 1322                                      __ptext55 465C  
                                    __ptext47 2A8A                                      __ptext39 4566  
                                    __ptext80 4012                                      __ptext72 41C2  
                                    __ptext64 4BE0                                      __ptext56 445E  
                                    __ptext48 4414                                      __ptext81 48E6  
                                    __ptext73 3FA2                                      __ptext65 492C  
                                    __ptext57 4C16                                      __ptext49 3D92  
                                    __ptext90 4C2A                                      __ptext82 4BEE  
                                    __ptext74 3C7E                                      __ptext66 1D70  
                                    __ptext58 4B44                                      __ptext91 4C48  
                                    __ptext83 4C20                                      __ptext75 44A6  
                                    __ptext67 4802                                      __ptext59 4AA4  
                                    __ptext92 4C50                                      __ptext84 49AE  
                                    __ptext76 23D4                                      __ptext68 3F20  
                                    __ptext93 4C0A                                      __ptext85 498E  
                                    __ptext77 48C2                                      __ptext69 3AC2  
                                    __ptext94 472A                                      __ptext86 4A74  
                                    __ptext78 3B58                                      __ptext95 4756  
                                    __ptext87 45E2                                      __ptext79 4B1E  
                                    __ptext96 4A04                                      __ptext88 4B56  
                                    __ptext97 4B7A                                      __ptext89 4B68  
                                    __ptext98 4A20                                      __ptext99 4B8C  
                                    _fillRect 4414                                      _drawChar 2A8A  
                                    __powers_ FDEB                          __end_of_Turn_Off_Fan 4A04  
            __size_of_TFT_GreenTab_Initialize 002A    __end_of_Update_Setup_Screen_Cursor_Forward 2752  
 __size_of_Update_Setup_Screen_Cursor_Forward 01BA          ??_Update_Setup_Screen_Cursor_Forward 002E  
         ?_Update_Setup_Screen_Cursor_Forward 0001            _Update_Setup_Screen_Cursor_Forward 2598  
                                    _colstart 00EE                                      _drawtext 3402  
                                  strcpy@from 0013                                 _fillRectangle 35C6  
                    __end_of_DS1621_Read_Temp 4698                              ?_Activate_Buzzer 0001  
                               __size_of_main 02CE                          __size_of_Monitor_Fan 004C  
                               ??_Do_Beep_Bad 0046                                      _time_Txt 016A  
                             fillRectangle@hi 0021                               fillRectangle@lo 0022  
                              _get_duty_cycle 3E1A                                 _drawFastVLine 3D92  
                                   printf@idx 0097                                     printf@exp 00A2  
                                    _spiwrite 4B0A                                     printf@val 00A4  
                                 ??_drawPixel 001B                                      _rowstart 00F2  
                    __end_of_DS3231_Read_Time 41C2                    __size_of_Initialize_Screen 03A0  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 4A20  
                         _Increase_Duty_Cycle 46CA                                ?_Update_Screen 0001  
                                  _INTCONbits 000FF2                                 _do_update_pwm 381E  
       __end_of_Do_Change_Fan_Timer_Mode_Plus 4756        __size_of_Do_Change_Fan_Timer_Mode_Plus 002C  
               _Do_Change_Fan_Timer_Mode_Plus 472A                                OpenUSART@spbrg 0011  
                                    isdigit@c 0013                                      scale@scl 0049  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                              __tdiv_to_l_@exp1 001F  
                            __tdiv_to_l_@cntr 001E                              __tdiv_to_l_@quot 001A  
                check_for_button_input@array1 0188                         __end_of_Decrease_Time 381E  
                    _Update_Setup_Time_Screen 2906                         __end_of_write_command 4BE0  
                            ___lldiv@dividend 0011                          ?_Increase_Duty_Cycle 0001  
                             fillScreen@color 0024                       do_update_pwm@duty_cycle 0043  
                      __end_of_get_duty_cycle 3E9E                        __size_of_Increase_Time 00A6  
             __end_of_Update_Setup_Fan_Screen 3F20                                fillRectangle@h 001A  
                              fillRectangle@w 0019                                fillRectangle@x 0023  
                              fillRectangle@y 0018                   check_for_button_input@F4236 0123  
                              ?_drawFastVLine 0018                                      printf@ap 0098  
                         __end_of_Do_Beep_Bad 4A3C                                  ??_write_data 0013  
                                  _TIMER1_isr 4BFC                                 fillRect@color 0026  
                                ?__tdiv_to_l_ 0011                                   _printf$3007 0094  
                              ?_do_update_pwm 0001                              ___lldiv@quotient 0019  
                                    strcpy@cp 0015                                      strlen@cp 0015  
                                    strcpy@to 0011                         I2C_Write_Cmd_Only@Cmd 0013  
                                _setup_minute 00F5                                  _setup_second 00F7  
                     __size_of_Init_Interrupt 0024                         __end_of_setAddrWindow 432C  
                       __end_of_Do_Setup_Time 21F2                            fillRectangle@color 001B  
                           do_update_pwm@dc_I 0044                             do_update_pwm@dc_f 0040  
                               drawChar@color 0030                                   _setup_month 00F6  
                       ??_Increase_Duty_Cycle 0046                            __end_of_write_data 4BD0  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 00AE                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                               ?_get_duty_cycle 0011  
