

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 26 18:43:58 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	text107,global,reloc=2,class=CODE,delta=1
   124                           	psect	text108,global,reloc=2,class=CODE,delta=1
   125                           	psect	text109,global,reloc=2,class=CODE,delta=1
   126                           	psect	text110,global,reloc=2,class=CODE,delta=1
   127                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   128                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   129                           	psect	text112,global,reloc=2,class=CODE,delta=1
   130                           	psect	text113,global,reloc=2,class=CODE,delta=1
   131                           	psect	text114,global,reloc=2,class=CODE,delta=1
   132                           	psect	text115,global,reloc=2,class=CODE,delta=1
   133                           	psect	text116,global,reloc=2,class=CODE,delta=1
   134                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   135                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   136  0000                     
   137                           	psect	idataBANK0
   138  004AB0                     __pidataBANK0:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _RTC_ALARM_Txt
   142  004AB0  30                 	db	48
   143  004AB1  00                 	db	0
   144                           
   145                           ;initializer for _fan_set_temp
   146  004AB2  10                 	db	16
   147                           
   148                           ;initializer for _tempSecond
   149  004AB3  FF                 	db	255
   150                           
   151                           ;initializer for _wrap
   152  004AB4  01                 	db	1
   153                           
   154                           ;initializer for _tempF_Txt
   155  004AB5  2B                 	db	43
   156  004AB6  30                 	db	48
   157  004AB7  37                 	db	55
   158  004AB8  37                 	db	55
   159  004AB9  00                 	db	0
   160                           
   161                           ;initializer for _DC_Txt
   162  004ABA  30                 	db	48
   163  004ABB  30                 	db	48
   164  004ABC  30                 	db	48
   165  004ABD  00                 	db	0
   166                           
   167                           ;initializer for _Fan_SW_Txt
   168  004ABE  4F                 	db	79
   169  004ABF  46                 	db	70
   170  004AC0  46                 	db	70
   171  004AC1  00                 	db	0
   172                           
   173                           ;initializer for _Fan_Set_Temp_Txt
   174  004AC2  37                 	db	55
   175  004AC3  37                 	db	55
   176  004AC4  46                 	db	70
   177  004AC5  00                 	db	0
   178                           
   179                           ;initializer for _Fan_Timer_Mode_Txt
   180  004AC6  4F                 	db	79
   181  004AC7  46                 	db	70
   182  004AC8  46                 	db	70
   183  004AC9  00                 	db	0
   184                           
   185                           ;initializer for _Fan_Timer_Txt
   186  004ACA  30                 	db	48
   187  004ACB  30                 	db	48
   188  004ACC  30                 	db	48
   189  004ACD  00                 	db	0
   190                           
   191                           ;initializer for _tempC_Txt
   192  004ACE  2B                 	db	43
   193  004ACF  32                 	db	50
   194  004AD0  35                 	db	53
   195  004AD1  00                 	db	0
   196                           
   197                           	psect	idataBANK1
   198  003EC2                     __pidataBANK1:
   199                           	opt stack 0
   200                           
   201                           ;initializer for _buffer
   202  003EC2  20                 	db	32
   203  003EC3  20                 	db	32
   204  003EC4  20                 	db	32
   205  003EC5  20                 	db	32
   206  003EC6  20                 	db	32
   207  003EC7  20                 	db	32
   208  003EC8  20                 	db	32
   209  003EC9  20                 	db	32
   210  003ECA  20                 	db	32
   211  003ECB  20                 	db	32
   212  003ECC  20                 	db	32
   213  003ECD  20                 	db	32
   214  003ECE  20                 	db	32
   215  003ECF  20                 	db	32
   216  003ED0  20                 	db	32
   217  003ED1  20                 	db	32
   218  003ED2  20                 	db	32
   219  003ED3  20                 	db	32
   220  003ED4  20                 	db	32
   221  003ED5  20                 	db	32
   222  003ED6  20                 	db	32
   223  003ED7  00                 	db	0
   224  003ED8  00                 	db	0
   225  003ED9  00                 	db	0
   226  003EDA  00                 	db	0
   227  003EDB  00                 	db	0
   228  003EDC  00                 	db	0
   229  003EDD  00                 	db	0
   230  003EDE  00                 	db	0
   231  003EDF  00                 	db	0
   232  003EE0  00                 	db	0
   233  003EE1  00                 	db	0
   234  003EE2  00                 	db	0
   235  003EE3  00                 	db	0
   236  003EE4  00                 	db	0
   237                           
   238                           ;initializer for check_for_button_input@F4236
   239  003EE5  A2                 	db	162
   240  003EE6  62                 	db	98
   241  003EE7  E2                 	db	226
   242  003EE8  22                 	db	34
   243  003EE9  02                 	db	2
   244  003EEA  C2                 	db	194
   245  003EEB  E0                 	db	224
   246  003EEC  A8                 	db	168
   247  003EED  90                 	db	144
   248  003EEE  68                 	db	104
   249  003EEF  98                 	db	152
   250  003EF0  B0                 	db	176
   251  003EF1  30                 	db	48
   252  003EF2  18                 	db	24
   253  003EF3  7A                 	db	122
   254  003EF4  10                 	db	16
   255  003EF5  38                 	db	56
   256  003EF6  5A                 	db	90
   257  003EF7  42                 	db	66
   258  003EF8  4A                 	db	74
   259  003EF9  52                 	db	82
   260                           
   261                           ;initializer for _Timer_Table
   262  003EFA  00                 	db	0
   263  003EFB  05                 	db	5
   264  003EFC  0A                 	db	10
   265  003EFD  14                 	db	20
   266                           
   267                           ;initializer for _Timing_Txt
   268  003EFE  45                 	db	69
   269  003EFF  43                 	db	67
   270  003F00  45                 	db	69
   271  003F01  33                 	db	51
   272  003F02  33                 	db	51
   273  003F03  30                 	db	48
   274  003F04  31                 	db	49
   275  003F05  4C                 	db	76
   276  003F06  20                 	db	32
   277  003F07  46                 	db	70
   278  003F08  69                 	db	105
   279  003F09  6E                 	db	110
   280  003F0A  46                 	db	70
   281  003F0B  61                 	db	97
   282  003F0C  32                 	db	50
   283  003F0D  34                 	db	52
   284  003F0E  2F                 	db	47
   285  003F0F  31                 	db	49
   286  003F10  2F                 	db	47
   287  003F11  30                 	db	48
   288  003F12  31                 	db	49
   289  003F13  00                 	db	0
   290  003F14  00                 	db	0
   291                           
   292                           ;initializer for _date_Txt
   293  003F15  30                 	db	48
   294  003F16  30                 	db	48
   295  003F17  2F                 	db	47
   296  003F18  30                 	db	48
   297  003F19  30                 	db	48
   298  003F1A  2F                 	db	47
   299  003F1B  30                 	db	48
   300  003F1C  30                 	db	48
   301  003F1D  00                 	db	0
   302                           
   303                           ;initializer for _setup_date
   304  003F1E  30                 	db	48
   305  003F1F  31                 	db	49
   306  003F20  2F                 	db	47
   307  003F21  30                 	db	48
   308  003F22  31                 	db	49
   309  003F23  2F                 	db	47
   310  003F24  30                 	db	48
   311  003F25  30                 	db	48
   312  003F26  00                 	db	0
   313                           
   314                           ;initializer for _setup_time
   315  003F27  30                 	db	48
   316  003F28  30                 	db	48
   317  003F29  3A                 	db	58
   318  003F2A  30                 	db	48
   319  003F2B  30                 	db	48
   320  003F2C  3A                 	db	58
   321  003F2D  30                 	db	48
   322  003F2E  30                 	db	48
   323  003F2F  00                 	db	0
   324                           
   325                           ;initializer for _time_Txt
   326  003F30  30                 	db	48
   327  003F31  30                 	db	48
   328  003F32  3A                 	db	58
   329  003F33  30                 	db	48
   330  003F34  30                 	db	48
   331  003F35  3A                 	db	58
   332  003F36  30                 	db	48
   333  003F37  30                 	db	48
   334  003F38  00                 	db	0
   335                           
   336                           ;initializer for _Volt_Txt
   337  003F39  30                 	db	48
   338  003F3A  2E                 	db	46
   339  003F3B  30                 	db	48
   340  003F3C  30                 	db	48
   341  003F3D  56                 	db	86
   342  003F3E  00                 	db	0
   343                           
   344                           ;initializer for _Fan_Mode_Txt
   345  003F3F  4D                 	db	77
   346  003F40  41                 	db	65
   347  003F41  4E                 	db	78
   348  003F42  55                 	db	85
   349  003F43  00                 	db	0
   350                           
   351                           ;initializer for _RPM_Txt
   352  003F44  30                 	db	48
   353  003F45  30                 	db	48
   354  003F46  30                 	db	48
   355  003F47  30                 	db	48
   356  003F48  00                 	db	0
   357                           
   358                           ;initializer for _setup_fan_set_text
   359  003F49  30                 	db	48
   360  003F4A  37                 	db	55
   361  003F4B  37                 	db	55
   362  003F4C  46                 	db	70
   363  003F4D  00                 	db	0
   364                           
   365                           	psect	mediumconst
   366  00FBC0                     __pmediumconst:
   367                           	opt stack 0
   368  00FBC0  00                 	db	0
   369  00FBC1                     _font:
   370                           	opt stack 0
   371  00FBC1  00                 	db	0
   372  00FBC2  00                 	db	0
   373  00FBC3  00                 	db	0
   374  00FBC4  00                 	db	0
   375  00FBC5  00                 	db	0
   376  00FBC6  00                 	db	0
   377  00FBC7  00                 	db	0
   378  00FBC8  5F                 	db	95
   379  00FBC9  00                 	db	0
   380  00FBCA  00                 	db	0
   381  00FBCB  00                 	db	0
   382  00FBCC  07                 	db	7
   383  00FBCD  00                 	db	0
   384  00FBCE  07                 	db	7
   385  00FBCF  00                 	db	0
   386  00FBD0  14                 	db	20
   387  00FBD1  7F                 	db	127
   388  00FBD2  14                 	db	20
   389  00FBD3  7F                 	db	127
   390  00FBD4  14                 	db	20
   391  00FBD5  24                 	db	36
   392  00FBD6  2A                 	db	42
   393  00FBD7  7F                 	db	127
   394  00FBD8  2A                 	db	42
   395  00FBD9  12                 	db	18
   396  00FBDA  23                 	db	35
   397  00FBDB  13                 	db	19
   398  00FBDC  08                 	db	8
   399  00FBDD  64                 	db	100
   400  00FBDE  62                 	db	98
   401  00FBDF  36                 	db	54
   402  00FBE0  49                 	db	73
   403  00FBE1  56                 	db	86
   404  00FBE2  20                 	db	32
   405  00FBE3  50                 	db	80
   406  00FBE4  00                 	db	0
   407  00FBE5  08                 	db	8
   408  00FBE6  07                 	db	7
   409  00FBE7  03                 	db	3
   410  00FBE8  00                 	db	0
   411  00FBE9  00                 	db	0
   412  00FBEA  1C                 	db	28
   413  00FBEB  22                 	db	34
   414  00FBEC  41                 	db	65
   415  00FBED  00                 	db	0
   416  00FBEE  00                 	db	0
   417  00FBEF  41                 	db	65
   418  00FBF0  22                 	db	34
   419  00FBF1  1C                 	db	28
   420  00FBF2  00                 	db	0
   421  00FBF3  2A                 	db	42
   422  00FBF4  1C                 	db	28
   423  00FBF5  7F                 	db	127
   424  00FBF6  1C                 	db	28
   425  00FBF7  2A                 	db	42
   426  00FBF8  08                 	db	8
   427  00FBF9  08                 	db	8
   428  00FBFA  3E                 	db	62
   429  00FBFB  08                 	db	8
   430  00FBFC  08                 	db	8
   431  00FBFD  00                 	db	0
   432  00FBFE  80                 	db	128
   433  00FBFF  70                 	db	112
   434  00FC00  30                 	db	48
   435  00FC01  00                 	db	0
   436  00FC02  08                 	db	8
   437  00FC03  08                 	db	8
   438  00FC04  08                 	db	8
   439  00FC05  08                 	db	8
   440  00FC06  08                 	db	8
   441  00FC07  00                 	db	0
   442  00FC08  00                 	db	0
   443  00FC09  60                 	db	96
   444  00FC0A  60                 	db	96
   445  00FC0B  00                 	db	0
   446  00FC0C  20                 	db	32
   447  00FC0D  10                 	db	16
   448  00FC0E  08                 	db	8
   449  00FC0F  04                 	db	4
   450  00FC10  02                 	db	2
   451  00FC11  3E                 	db	62
   452  00FC12  51                 	db	81
   453  00FC13  49                 	db	73
   454  00FC14  45                 	db	69
   455  00FC15  3E                 	db	62
   456  00FC16  00                 	db	0
   457  00FC17  42                 	db	66
   458  00FC18  7F                 	db	127
   459  00FC19  40                 	db	64
   460  00FC1A  00                 	db	0
   461  00FC1B  72                 	db	114
   462  00FC1C  49                 	db	73
   463  00FC1D  49                 	db	73
   464  00FC1E  49                 	db	73
   465  00FC1F  46                 	db	70
   466  00FC20  21                 	db	33
   467  00FC21  41                 	db	65
   468  00FC22  49                 	db	73
   469  00FC23  4D                 	db	77
   470  00FC24  33                 	db	51
   471  00FC25  18                 	db	24
   472  00FC26  14                 	db	20
   473  00FC27  12                 	db	18
   474  00FC28  7F                 	db	127
   475  00FC29  10                 	db	16
   476  00FC2A  27                 	db	39
   477  00FC2B  45                 	db	69
   478  00FC2C  45                 	db	69
   479  00FC2D  45                 	db	69
   480  00FC2E  39                 	db	57
   481  00FC2F  3C                 	db	60
   482  00FC30  4A                 	db	74
   483  00FC31  49                 	db	73
   484  00FC32  49                 	db	73
   485  00FC33  31                 	db	49
   486  00FC34  41                 	db	65
   487  00FC35  21                 	db	33
   488  00FC36  11                 	db	17
   489  00FC37  09                 	db	9
   490  00FC38  07                 	db	7
   491  00FC39  36                 	db	54
   492  00FC3A  49                 	db	73
   493  00FC3B  49                 	db	73
   494  00FC3C  49                 	db	73
   495  00FC3D  36                 	db	54
   496  00FC3E  46                 	db	70
   497  00FC3F  49                 	db	73
   498  00FC40  49                 	db	73
   499  00FC41  29                 	db	41
   500  00FC42  1E                 	db	30
   501  00FC43  00                 	db	0
   502  00FC44  00                 	db	0
   503  00FC45  14                 	db	20
   504  00FC46  00                 	db	0
   505  00FC47  00                 	db	0
   506  00FC48  00                 	db	0
   507  00FC49  40                 	db	64
   508  00FC4A  34                 	db	52
   509  00FC4B  00                 	db	0
   510  00FC4C  00                 	db	0
   511  00FC4D  00                 	db	0
   512  00FC4E  08                 	db	8
   513  00FC4F  14                 	db	20
   514  00FC50  22                 	db	34
   515  00FC51  41                 	db	65
   516  00FC52  14                 	db	20
   517  00FC53  14                 	db	20
   518  00FC54  14                 	db	20
   519  00FC55  14                 	db	20
   520  00FC56  14                 	db	20
   521  00FC57  00                 	db	0
   522  00FC58  41                 	db	65
   523  00FC59  22                 	db	34
   524  00FC5A  14                 	db	20
   525  00FC5B  08                 	db	8
   526  00FC5C  02                 	db	2
   527  00FC5D  01                 	db	1
   528  00FC5E  59                 	db	89
   529  00FC5F  09                 	db	9
   530  00FC60  06                 	db	6
   531  00FC61  3E                 	db	62
   532  00FC62  41                 	db	65
   533  00FC63  5D                 	db	93
   534  00FC64  59                 	db	89
   535  00FC65  4E                 	db	78
   536  00FC66  7C                 	db	124
   537  00FC67  12                 	db	18
   538  00FC68  11                 	db	17
   539  00FC69  12                 	db	18
   540  00FC6A  7C                 	db	124
   541  00FC6B  7F                 	db	127
   542  00FC6C  49                 	db	73
   543  00FC6D  49                 	db	73
   544  00FC6E  49                 	db	73
   545  00FC6F  36                 	db	54
   546  00FC70  3E                 	db	62
   547  00FC71  41                 	db	65
   548  00FC72  41                 	db	65
   549  00FC73  41                 	db	65
   550  00FC74  22                 	db	34
   551  00FC75  7F                 	db	127
   552  00FC76  41                 	db	65
   553  00FC77  41                 	db	65
   554  00FC78  41                 	db	65
   555  00FC79  3E                 	db	62
   556  00FC7A  7F                 	db	127
   557  00FC7B  49                 	db	73
   558  00FC7C  49                 	db	73
   559  00FC7D  49                 	db	73
   560  00FC7E  41                 	db	65
   561  00FC7F  7F                 	db	127
   562  00FC80  09                 	db	9
   563  00FC81  09                 	db	9
   564  00FC82  09                 	db	9
   565  00FC83  01                 	db	1
   566  00FC84  3E                 	db	62
   567  00FC85  41                 	db	65
   568  00FC86  41                 	db	65
   569  00FC87  51                 	db	81
   570  00FC88  73                 	db	115
   571  00FC89  7F                 	db	127
   572  00FC8A  08                 	db	8
   573  00FC8B  08                 	db	8
   574  00FC8C  08                 	db	8
   575  00FC8D  7F                 	db	127
   576  00FC8E  00                 	db	0
   577  00FC8F  41                 	db	65
   578  00FC90  7F                 	db	127
   579  00FC91  41                 	db	65
   580  00FC92  00                 	db	0
   581  00FC93  20                 	db	32
   582  00FC94  40                 	db	64
   583  00FC95  41                 	db	65
   584  00FC96  3F                 	db	63
   585  00FC97  01                 	db	1
   586  00FC98  7F                 	db	127
   587  00FC99  08                 	db	8
   588  00FC9A  14                 	db	20
   589  00FC9B  22                 	db	34
   590  00FC9C  41                 	db	65
   591  00FC9D  7F                 	db	127
   592  00FC9E  40                 	db	64
   593  00FC9F  40                 	db	64
   594  00FCA0  40                 	db	64
   595  00FCA1  40                 	db	64
   596  00FCA2  7F                 	db	127
   597  00FCA3  02                 	db	2
   598  00FCA4  1C                 	db	28
   599  00FCA5  02                 	db	2
   600  00FCA6  7F                 	db	127
   601  00FCA7  7F                 	db	127
   602  00FCA8  04                 	db	4
   603  00FCA9  08                 	db	8
   604  00FCAA  10                 	db	16
   605  00FCAB  7F                 	db	127
   606  00FCAC  3E                 	db	62
   607  00FCAD  41                 	db	65
   608  00FCAE  41                 	db	65
   609  00FCAF  41                 	db	65
   610  00FCB0  3E                 	db	62
   611  00FCB1  7F                 	db	127
   612  00FCB2  09                 	db	9
   613  00FCB3  09                 	db	9
   614  00FCB4  09                 	db	9
   615  00FCB5  06                 	db	6
   616  00FCB6  3E                 	db	62
   617  00FCB7  41                 	db	65
   618  00FCB8  51                 	db	81
   619  00FCB9  21                 	db	33
   620  00FCBA  5E                 	db	94
   621  00FCBB  7F                 	db	127
   622  00FCBC  09                 	db	9
   623  00FCBD  19                 	db	25
   624  00FCBE  29                 	db	41
   625  00FCBF  46                 	db	70
   626  00FCC0                     __end_of_font:
   627                           	opt stack 0
   628  00FCC0                     _font2:
   629                           	opt stack 0
   630  00FCC0  26                 	db	38
   631  00FCC1  49                 	db	73
   632  00FCC2  49                 	db	73
   633  00FCC3  49                 	db	73
   634  00FCC4  32                 	db	50
   635  00FCC5  03                 	db	3
   636  00FCC6  01                 	db	1
   637  00FCC7  7F                 	db	127
   638  00FCC8  01                 	db	1
   639  00FCC9  03                 	db	3
   640  00FCCA  3F                 	db	63
   641  00FCCB  40                 	db	64
   642  00FCCC  40                 	db	64
   643  00FCCD  40                 	db	64
   644  00FCCE  3F                 	db	63
   645  00FCCF  1F                 	db	31
   646  00FCD0  20                 	db	32
   647  00FCD1  40                 	db	64
   648  00FCD2  20                 	db	32
   649  00FCD3  1F                 	db	31
   650  00FCD4  3F                 	db	63
   651  00FCD5  40                 	db	64
   652  00FCD6  38                 	db	56
   653  00FCD7  40                 	db	64
   654  00FCD8  3F                 	db	63
   655  00FCD9  63                 	db	99
   656  00FCDA  14                 	db	20
   657  00FCDB  08                 	db	8
   658  00FCDC  14                 	db	20
   659  00FCDD  63                 	db	99
   660  00FCDE  03                 	db	3
   661  00FCDF  04                 	db	4
   662  00FCE0  78                 	db	120
   663  00FCE1  04                 	db	4
   664  00FCE2  03                 	db	3
   665  00FCE3  61                 	db	97
   666  00FCE4  59                 	db	89
   667  00FCE5  49                 	db	73
   668  00FCE6  4D                 	db	77
   669  00FCE7  43                 	db	67
   670  00FCE8  00                 	db	0
   671  00FCE9  7F                 	db	127
   672  00FCEA  41                 	db	65
   673  00FCEB  41                 	db	65
   674  00FCEC  41                 	db	65
   675  00FCED  02                 	db	2
   676  00FCEE  04                 	db	4
   677  00FCEF  08                 	db	8
   678  00FCF0  10                 	db	16
   679  00FCF1  20                 	db	32
   680  00FCF2  00                 	db	0
   681  00FCF3  41                 	db	65
   682  00FCF4  41                 	db	65
   683  00FCF5  41                 	db	65
   684  00FCF6  7F                 	db	127
   685  00FCF7  04                 	db	4
   686  00FCF8  02                 	db	2
   687  00FCF9  01                 	db	1
   688  00FCFA  02                 	db	2
   689  00FCFB  04                 	db	4
   690  00FCFC  40                 	db	64
   691  00FCFD  40                 	db	64
   692  00FCFE  40                 	db	64
   693  00FCFF  40                 	db	64
   694  00FD00  40                 	db	64
   695  00FD01  00                 	db	0
   696  00FD02  03                 	db	3
   697  00FD03  07                 	db	7
   698  00FD04  08                 	db	8
   699  00FD05  00                 	db	0
   700  00FD06  20                 	db	32
   701  00FD07  54                 	db	84
   702  00FD08  54                 	db	84
   703  00FD09  78                 	db	120
   704  00FD0A  40                 	db	64
   705  00FD0B  7F                 	db	127
   706  00FD0C  28                 	db	40
   707  00FD0D  44                 	db	68
   708  00FD0E  44                 	db	68
   709  00FD0F  38                 	db	56
   710  00FD10  38                 	db	56
   711  00FD11  44                 	db	68
   712  00FD12  44                 	db	68
   713  00FD13  44                 	db	68
   714  00FD14  28                 	db	40
   715  00FD15  38                 	db	56
   716  00FD16  44                 	db	68
   717  00FD17  44                 	db	68
   718  00FD18  28                 	db	40
   719  00FD19  7F                 	db	127
   720  00FD1A  38                 	db	56
   721  00FD1B  54                 	db	84
   722  00FD1C  54                 	db	84
   723  00FD1D  54                 	db	84
   724  00FD1E  18                 	db	24
   725  00FD1F  00                 	db	0
   726  00FD20  08                 	db	8
   727  00FD21  7E                 	db	126
   728  00FD22  09                 	db	9
   729  00FD23  02                 	db	2
   730  00FD24  18                 	db	24
   731  00FD25  A4                 	db	164
   732  00FD26  A4                 	db	164
   733  00FD27  9C                 	db	156
   734  00FD28  78                 	db	120
   735  00FD29  7F                 	db	127
   736  00FD2A  08                 	db	8
   737  00FD2B  04                 	db	4
   738  00FD2C  04                 	db	4
   739  00FD2D  78                 	db	120
   740  00FD2E  00                 	db	0
   741  00FD2F  44                 	db	68
   742  00FD30  7D                 	db	125
   743  00FD31  40                 	db	64
   744  00FD32  00                 	db	0
   745  00FD33  20                 	db	32
   746  00FD34  40                 	db	64
   747  00FD35  40                 	db	64
   748  00FD36  3D                 	db	61
   749  00FD37  00                 	db	0
   750  00FD38  7F                 	db	127
   751  00FD39  10                 	db	16
   752  00FD3A  28                 	db	40
   753  00FD3B  44                 	db	68
   754  00FD3C  00                 	db	0
   755  00FD3D  00                 	db	0
   756  00FD3E  41                 	db	65
   757  00FD3F  7F                 	db	127
   758  00FD40  40                 	db	64
   759  00FD41  00                 	db	0
   760  00FD42  7C                 	db	124
   761  00FD43  04                 	db	4
   762  00FD44  78                 	db	120
   763  00FD45  04                 	db	4
   764  00FD46  78                 	db	120
   765  00FD47  7C                 	db	124
   766  00FD48  08                 	db	8
   767  00FD49  04                 	db	4
   768  00FD4A  04                 	db	4
   769  00FD4B  78                 	db	120
   770  00FD4C  38                 	db	56
   771  00FD4D  44                 	db	68
   772  00FD4E  44                 	db	68
   773  00FD4F  44                 	db	68
   774  00FD50  38                 	db	56
   775  00FD51  FC                 	db	252
   776  00FD52  18                 	db	24
   777  00FD53  24                 	db	36
   778  00FD54  24                 	db	36
   779  00FD55  18                 	db	24
   780  00FD56  18                 	db	24
   781  00FD57  24                 	db	36
   782  00FD58  24                 	db	36
   783  00FD59  18                 	db	24
   784  00FD5A  FC                 	db	252
   785  00FD5B  7C                 	db	124
   786  00FD5C  08                 	db	8
   787  00FD5D  04                 	db	4
   788  00FD5E  04                 	db	4
   789  00FD5F  08                 	db	8
   790  00FD60  48                 	db	72
   791  00FD61  54                 	db	84
   792  00FD62  54                 	db	84
   793  00FD63  54                 	db	84
   794  00FD64  24                 	db	36
   795  00FD65  04                 	db	4
   796  00FD66  04                 	db	4
   797  00FD67  3F                 	db	63
   798  00FD68  44                 	db	68
   799  00FD69  24                 	db	36
   800  00FD6A  3C                 	db	60
   801  00FD6B  40                 	db	64
   802  00FD6C  40                 	db	64
   803  00FD6D  20                 	db	32
   804  00FD6E  7C                 	db	124
   805  00FD6F  1C                 	db	28
   806  00FD70  20                 	db	32
   807  00FD71  40                 	db	64
   808  00FD72  20                 	db	32
   809  00FD73  1C                 	db	28
   810  00FD74  3C                 	db	60
   811  00FD75  40                 	db	64
   812  00FD76  30                 	db	48
   813  00FD77  40                 	db	64
   814  00FD78  3C                 	db	60
   815  00FD79  44                 	db	68
   816  00FD7A  28                 	db	40
   817  00FD7B  10                 	db	16
   818  00FD7C  28                 	db	40
   819  00FD7D  44                 	db	68
   820  00FD7E  4C                 	db	76
   821  00FD7F  90                 	db	144
   822  00FD80  90                 	db	144
   823  00FD81  90                 	db	144
   824  00FD82  7C                 	db	124
   825  00FD83  44                 	db	68
   826  00FD84  64                 	db	100
   827  00FD85  54                 	db	84
   828  00FD86  4C                 	db	76
   829  00FD87  44                 	db	68
   830  00FD88  00                 	db	0
   831  00FD89  08                 	db	8
   832  00FD8A  36                 	db	54
   833  00FD8B  41                 	db	65
   834  00FD8C  00                 	db	0
   835  00FD8D  00                 	db	0
   836  00FD8E  00                 	db	0
   837  00FD8F  77                 	db	119
   838  00FD90  00                 	db	0
   839  00FD91  00                 	db	0
   840  00FD92  00                 	db	0
   841  00FD93  41                 	db	65
   842  00FD94  36                 	db	54
   843  00FD95  08                 	db	8
   844  00FD96  00                 	db	0
   845  00FD97  02                 	db	2
   846  00FD98  01                 	db	1
   847  00FD99  02                 	db	2
   848  00FD9A  04                 	db	4
   849  00FD9B  02                 	db	2
   850  00FD9C                     __end_of_font2:
   851                           	opt stack 0
   852  00FD9C                     _dpowers:
   853                           	opt stack 0
   854  00FD9C  0001               	dw	1
   855  00FD9E  0000               	dw	0
   856  00FDA0  000A               	dw	10
   857  00FDA2  0000               	dw	0
   858  00FDA4  0064               	dw	100
   859  00FDA6  0000               	dw	0
   860  00FDA8  03E8               	dw	1000
   861  00FDAA  0000               	dw	0
   862  00FDAC  2710               	dw	10000
   863  00FDAE  0000               	dw	0
   864  00FDB0  86A0               	dw	34464
   865  00FDB2  0001               	dw	1
   866  00FDB4  4240               	dw	16960
   867  00FDB6  000F               	dw	15
   868  00FDB8  9680               	dw	38528
   869  00FDBA  0098               	dw	152
   870  00FDBC  E100               	dw	57600
   871  00FDBE  05F5               	dw	1525
   872  00FDC0  CA00               	dw	51712
   873  00FDC2  3B9A               	dw	15258
   874  00FDC4                     __end_of_dpowers:
   875                           	opt stack 0
   876  00FDC4                     __npowers_:
   877                           	opt stack 0
   878  00FDC4  00                 	db	0
   879  00FDC5  80                 	db	128
   880  00FDC6  3F                 	db	63
   881  00FDC7  CD                 	db	205
   882  00FDC8  CC                 	db	204
   883  00FDC9  3D                 	db	61
   884  00FDCA  D7                 	db	215
   885  00FDCB  23                 	db	35
   886  00FDCC  3C                 	db	60
   887  00FDCD  12                 	db	18
   888  00FDCE  83                 	db	131
   889  00FDCF  3A                 	db	58
   890  00FDD0  B7                 	db	183
   891  00FDD1  D1                 	db	209
   892  00FDD2  38                 	db	56
   893  00FDD3  C6                 	db	198
   894  00FDD4  27                 	db	39
   895  00FDD5  37                 	db	55
   896  00FDD6  38                 	db	56
   897  00FDD7  86                 	db	134
   898  00FDD8  35                 	db	53
   899  00FDD9  C0                 	db	192
   900  00FDDA  D6                 	db	214
   901  00FDDB  33                 	db	51
   902  00FDDC  CC                 	db	204
   903  00FDDD  2B                 	db	43
   904  00FDDE  32                 	db	50
   905  00FDDF  70                 	db	112
   906  00FDE0  89                 	db	137
   907  00FDE1  30                 	db	48
   908  00FDE2  E7                 	db	231
   909  00FDE3  DB                 	db	219
   910  00FDE4  2E                 	db	46
   911  00FDE5  E5                 	db	229
   912  00FDE6  3C                 	db	60
   913  00FDE7  1E                 	db	30
   914  00FDE8  42                 	db	66
   915  00FDE9  A2                 	db	162
   916  00FDEA  0D                 	db	13
   917  00FDEB                     __end_of__npowers_:
   918                           	opt stack 0
   919  00FDEB                     __powers_:
   920                           	opt stack 0
   921  00FDEB  00                 	db	0
   922  00FDEC  80                 	db	128
   923  00FDED  3F                 	db	63
   924  00FDEE  00                 	db	0
   925  00FDEF  20                 	db	32
   926  00FDF0  41                 	db	65
   927  00FDF1  00                 	db	0
   928  00FDF2  C8                 	db	200
   929  00FDF3  42                 	db	66
   930  00FDF4  00                 	db	0
   931  00FDF5  7A                 	db	122
   932  00FDF6  44                 	db	68
   933  00FDF7  40                 	db	64
   934  00FDF8  1C                 	db	28
   935  00FDF9  46                 	db	70
   936  00FDFA  50                 	db	80
   937  00FDFB  C3                 	db	195
   938  00FDFC  47                 	db	71
   939  00FDFD  24                 	db	36
   940  00FDFE  74                 	db	116
   941  00FDFF  49                 	db	73
   942  00FE00  97                 	db	151
   943  00FE01  18                 	db	24
   944  00FE02  4B                 	db	75
   945  00FE03  BC                 	db	188
   946  00FE04  BE                 	db	190
   947  00FE05  4C                 	db	76
   948  00FE06  6B                 	db	107
   949  00FE07  6E                 	db	110
   950  00FE08  4E                 	db	78
   951  00FE09  03                 	db	3
   952  00FE0A  15                 	db	21
   953  00FE0B  50                 	db	80
   954  00FE0C  79                 	db	121
   955  00FE0D  AD                 	db	173
   956  00FE0E  60                 	db	96
   957  00FE0F  F3                 	db	243
   958  00FE10  49                 	db	73
   959  00FE11  71                 	db	113
   960  00FE12                     __end_of__powers_:
   961                           	opt stack 0
   962  00FE12                     _hexpowers:
   963                           	opt stack 0
   964  00FE12  0001               	dw	1
   965  00FE14  0000               	dw	0
   966  00FE16  0010               	dw	16
   967  00FE18  0000               	dw	0
   968  00FE1A  0100               	dw	256
   969  00FE1C  0000               	dw	0
   970  00FE1E  1000               	dw	4096
   971  00FE20  0000               	dw	0
   972  00FE22  0000               	dw	0
   973  00FE24  0001               	dw	1
   974  00FE26  0000               	dw	0
   975  00FE28  0010               	dw	16
   976  00FE2A  0000               	dw	0
   977  00FE2C  0100               	dw	256
   978  00FE2E  0000               	dw	0
   979  00FE30  1000               	dw	4096
   980  00FE32                     __end_of_hexpowers:
   981                           	opt stack 0
   982  0000                     _ADCON0	set	4034
   983  0000                     _ADCON0bits	set	4034
   984  0000                     _ADCON1	set	4033
   985  0000                     _ADCON2	set	4032
   986  0000                     _ADRESH	set	4036
   987  0000                     _ADRESL	set	4035
   988  0000                     _CCP1CON	set	4029
   989  0000                     _CCP2CON	set	4026
   990  0000                     _CCPR1L	set	4030
   991  0000                     _CCPR2L	set	4027
   992  0000                     _INTCON2bits	set	4081
   993  0000                     _INTCON3bits	set	4080
   994  0000                     _INTCONbits	set	4082
   995  0000                     _OSCCON	set	4051
   996  0000                     _PIE1bits	set	3997
   997  0000                     _PIR1bits	set	3998
   998  0000                     _PORTA	set	3968
   999  0000                     _PORTBbits	set	3969
  1000  0000                     _PORTCbits	set	3970
  1001  0000                     _PORTD	set	3971
  1002  0000                     _PORTDbits	set	3971
  1003  0000                     _PORTE	set	3972
  1004  0000                     _PR2	set	4043
  1005  0000                     _RCSTA	set	4011
  1006  0000                     _RCSTAbits	set	4011
  1007  0000                     _SPBRG	set	4015
  1008  0000                     _SPBRGH	set	4016
  1009  0000                     _SSPBUF	set	4041
  1010  0000                     _SSPCON1	set	4038
  1011  0000                     _SSPSTAT	set	4039
  1012  0000                     _SSPSTATbits	set	4039
  1013  0000                     _T0CON	set	4053
  1014  0000                     _T0CONbits	set	4053
  1015  0000                     _T1CON	set	4045
  1016  0000                     _T1CONbits	set	4045
  1017  0000                     _T2CON	set	4042
  1018  0000                     _T3CON	set	4017
  1019  0000                     _TMR0H	set	4055
  1020  0000                     _TMR0L	set	4054
  1021  0000                     _TMR1H	set	4047
  1022  0000                     _TMR1L	set	4046
  1023  0000                     _TMR3L	set	4018
  1024  0000                     _TRISA	set	3986
  1025  0000                     _TRISB	set	3987
  1026  0000                     _TRISBbits	set	3987
  1027  0000                     _TRISC	set	3988
  1028  0000                     _TRISCbits	set	3988
  1029  0000                     _TRISD	set	3989
  1030  0000                     _TRISE	set	3990
  1031  0000                     _TXREG	set	4013
  1032  0000                     _TXSTA	set	4012
  1033  0000                     _TXSTAbits	set	4012
  1034  0000                     _RBPU	set	32655
  1035  0000                     _TRMT	set	32097
  1036  00FE32                     STR_9:
  1037                           
  1038                           ; BSR set to: 0
  1039  00FE32  54                 	db	84	;'T'
  1040  00FE33  68                 	db	104	;'h'
  1041  00FE34  65                 	db	101	;'e'
  1042  00FE35  20                 	db	32
  1043  00FE36  73                 	db	115	;'s'
  1044  00FE37  79                 	db	121	;'y'
  1045  00FE38  73                 	db	115	;'s'
  1046  00FE39  74                 	db	116	;'t'
  1047  00FE3A  65                 	db	101	;'e'
  1048  00FE3B  6D                 	db	109	;'m'
  1049  00FE3C  20                 	db	32
  1050  00FE3D  77                 	db	119	;'w'
  1051  00FE3E  69                 	db	105	;'i'
  1052  00FE3F  6C                 	db	108	;'l'
  1053  00FE40  6C                 	db	108	;'l'
  1054  00FE41  20                 	db	32
  1055  00FE42  6E                 	db	110	;'n'
  1056  00FE43  6F                 	db	111	;'o'
  1057  00FE44  77                 	db	119	;'w'
  1058  00FE45  20                 	db	32
  1059  00FE46  74                 	db	116	;'t'
  1060  00FE47  75                 	db	117	;'u'
  1061  00FE48  72                 	db	114	;'r'
  1062  00FE49  6E                 	db	110	;'n'
  1063  00FE4A  20                 	db	32
  1064  00FE4B  6F                 	db	111	;'o'
  1065  00FE4C  66                 	db	102	;'f'
  1066  00FE4D  66                 	db	102	;'f'
  1067  00FE4E  2E                 	db	46
  1068  00FE4F  20                 	db	32
  1069  00FE50  0D                 	db	13
  1070  00FE51  0A                 	db	10
  1071  00FE52  0A                 	db	10
  1072  00FE53  00                 	db	0
  1073  00FE54                     STR_11:
  1074                           
  1075                           ; BSR set to: 0
  1076  00FE54  54                 	db	84	;'T'
  1077  00FE55  68                 	db	104	;'h'
  1078  00FE56  65                 	db	101	;'e'
  1079  00FE57  20                 	db	32
  1080  00FE58  73                 	db	115	;'s'
  1081  00FE59  79                 	db	121	;'y'
  1082  00FE5A  73                 	db	115	;'s'
  1083  00FE5B  74                 	db	116	;'t'
  1084  00FE5C  65                 	db	101	;'e'
  1085  00FE5D  6D                 	db	109	;'m'
  1086  00FE5E  20                 	db	32
  1087  00FE5F  77                 	db	119	;'w'
  1088  00FE60  69                 	db	105	;'i'
  1089  00FE61  6C                 	db	108	;'l'
  1090  00FE62  6C                 	db	108	;'l'
  1091  00FE63  20                 	db	32
  1092  00FE64  6E                 	db	110	;'n'
  1093  00FE65  6F                 	db	111	;'o'
  1094  00FE66  77                 	db	119	;'w'
  1095  00FE67  20                 	db	32
  1096  00FE68  74                 	db	116	;'t'
  1097  00FE69  75                 	db	117	;'u'
  1098  00FE6A  72                 	db	114	;'r'
  1099  00FE6B  6E                 	db	110	;'n'
  1100  00FE6C  20                 	db	32
  1101  00FE6D  6F                 	db	111	;'o'
  1102  00FE6E  6E                 	db	110	;'n'
  1103  00FE6F  2E                 	db	46
  1104  00FE70  20                 	db	32
  1105  00FE71  0D                 	db	13
  1106  00FE72  0A                 	db	10
  1107  00FE73  0A                 	db	10
  1108  00FE74  00                 	db	0
  1109  00FE75                     STR_4:
  1110                           
  1111                           ; BSR set to: 0
  1112  00FE75  25                 	db	37
  1113  00FE76  30                 	db	48	;'0'
  1114  00FE77  32                 	db	50	;'2'
  1115  00FE78  78                 	db	120	;'x'
  1116  00FE79  3A                 	db	58	;':'
  1117  00FE7A  25                 	db	37
  1118  00FE7B  30                 	db	48	;'0'
  1119  00FE7C  32                 	db	50	;'2'
  1120  00FE7D  78                 	db	120	;'x'
  1121  00FE7E  3A                 	db	58	;':'
  1122  00FE7F  25                 	db	37
  1123  00FE80  30                 	db	48	;'0'
  1124  00FE81  32                 	db	50	;'2'
  1125  00FE82  78                 	db	120	;'x'
  1126  00FE83  20                 	db	32
  1127  00FE84  25                 	db	37
  1128  00FE85  30                 	db	48	;'0'
  1129  00FE86  32                 	db	50	;'2'
  1130  00FE87  78                 	db	120	;'x'
  1131  00FE88  2F                 	db	47
  1132  00FE89  25                 	db	37
  1133  00FE8A  30                 	db	48	;'0'
  1134  00FE8B  32                 	db	50	;'2'
  1135  00FE8C  78                 	db	120	;'x'
  1136  00FE8D  2F                 	db	47
  1137  00FE8E  25                 	db	37
  1138  00FE8F  30                 	db	48	;'0'
  1139  00FE90  32                 	db	50	;'2'
  1140  00FE91  78                 	db	120	;'x'
  1141  00FE92  00                 	db	0
  1142  00FE93                     STR_7:
  1143                           
  1144                           ; BSR set to: 0
  1145  00FE93  20                 	db	32
  1146  00FE94  52                 	db	82	;'R'
  1147  00FE95  50                 	db	80	;'P'
  1148  00FE96  4D                 	db	77	;'M'
  1149  00FE97  20                 	db	32
  1150  00FE98  3D                 	db	61	;'='
  1151  00FE99  20                 	db	32
  1152  00FE9A  25                 	db	37
  1153  00FE9B  64                 	db	100	;'d'
  1154  00FE9C  20                 	db	32
  1155  00FE9D  20                 	db	32
  1156  00FE9E  64                 	db	100	;'d'
  1157  00FE9F  63                 	db	99	;'c'
  1158  00FEA0  20                 	db	32
  1159  00FEA1  3D                 	db	61	;'='
  1160  00FEA2  20                 	db	32
  1161  00FEA3  25                 	db	37
  1162  00FEA4  64                 	db	100	;'d'
  1163  00FEA5  20                 	db	32
  1164  00FEA6  6C                 	db	108	;'l'
  1165  00FEA7  73                 	db	115	;'s'
  1166  00FEA8  20                 	db	32
  1167  00FEA9  3D                 	db	61	;'='
  1168  00FEAA  20                 	db	32
  1169  00FEAB  25                 	db	37
  1170  00FEAC  64                 	db	100	;'d'
  1171  00FEAD  0D                 	db	13
  1172  00FEAE  0A                 	db	10
  1173  00FEAF  00                 	db	0
  1174  00FEB0                     STR_10:
  1175                           
  1176                           ; BSR set to: 0
  1177  00FEB0  54                 	db	84	;'T'
  1178  00FEB1  68                 	db	104	;'h'
  1179  00FEB2  65                 	db	101	;'e'
  1180  00FEB3  20                 	db	32
  1181  00FEB4  73                 	db	115	;'s'
  1182  00FEB5  79                 	db	121	;'y'
  1183  00FEB6  73                 	db	115	;'s'
  1184  00FEB7  74                 	db	116	;'t'
  1185  00FEB8  65                 	db	101	;'e'
  1186  00FEB9  6D                 	db	109	;'m'
  1187  00FEBA  20                 	db	32
  1188  00FEBB  69                 	db	105	;'i'
  1189  00FEBC  73                 	db	115	;'s'
  1190  00FEBD  20                 	db	32
  1191  00FEBE  6E                 	db	110	;'n'
  1192  00FEBF  6F                 	db	111	;'o'
  1193  00FEC0  77                 	db	119	;'w'
  1194  00FEC1  20                 	db	32
  1195  00FEC2  4F                 	db	79	;'O'
  1196  00FEC3  46                 	db	70	;'F'
  1197  00FEC4  46                 	db	70	;'F'
  1198  00FEC5  2E                 	db	46
  1199  00FEC6  20                 	db	32
  1200  00FEC7  0D                 	db	13
  1201  00FEC8  0A                 	db	10
  1202  00FEC9  0A                 	db	10
  1203  00FECA  00                 	db	0
  1204  00FECB                     STR_8:
  1205                           
  1206                           ; BSR set to: 0
  1207  00FECB  4B                 	db	75	;'K'
  1208  00FECC  65                 	db	101	;'e'
  1209  00FECD  79                 	db	121	;'y'
  1210  00FECE  20                 	db	32
  1211  00FECF  4C                 	db	76	;'L'
  1212  00FED0  6F                 	db	111	;'o'
  1213  00FED1  63                 	db	99	;'c'
  1214  00FED2  61                 	db	97	;'a'
  1215  00FED3  74                 	db	116	;'t'
  1216  00FED4  69                 	db	105	;'i'
  1217  00FED5  6F                 	db	111	;'o'
  1218  00FED6  6E                 	db	110	;'n'
  1219  00FED7  20                 	db	32
  1220  00FED8  3D                 	db	61	;'='
  1221  00FED9  20                 	db	32
  1222  00FEDA  25                 	db	37
  1223  00FEDB  64                 	db	100	;'d'
  1224  00FEDC  20                 	db	32
  1225  00FEDD  0D                 	db	13
  1226  00FEDE  0A                 	db	10
  1227  00FEDF  0A                 	db	10
  1228  00FEE0  00                 	db	0
  1229  00FEE1                     STR_3:
  1230                           
  1231                           ; BSR set to: 0
  1232  00FEE1  43                 	db	67	;'C'
  1233  00FEE2  61                 	db	97	;'a'
  1234  00FEE3  6E                 	db	110	;'n'
  1235  00FEE4  6E                 	db	110	;'n'
  1236  00FEE5  6F                 	db	111	;'o'
  1237  00FEE6  74                 	db	116	;'t'
  1238  00FEE7  20                 	db	32
  1239  00FEE8  66                 	db	102	;'f'
  1240  00FEE9  69                 	db	105	;'i'
  1241  00FEEA  6E                 	db	110	;'n'
  1242  00FEEB  64                 	db	100	;'d'
  1243  00FEEC  20                 	db	32
  1244  00FEED  62                 	db	98	;'b'
  1245  00FEEE  75                 	db	117	;'u'
  1246  00FEEF  74                 	db	116	;'t'
  1247  00FEF0  74                 	db	116	;'t'
  1248  00FEF1  6F                 	db	111	;'o'
  1249  00FEF2  6E                 	db	110	;'n'
  1250  00FEF3  20                 	db	32
  1251  00FEF4  0D                 	db	13
  1252  00FEF5  0A                 	db	10
  1253  00FEF6  00                 	db	0
  1254  00FEF7                     STR_5:
  1255                           
  1256                           ; BSR set to: 0
  1257  00FEF7  20                 	db	32
  1258  00FEF8  54                 	db	84	;'T'
  1259  00FEF9  65                 	db	101	;'e'
  1260  00FEFA  6D                 	db	109	;'m'
  1261  00FEFB  70                 	db	112	;'p'
  1262  00FEFC  20                 	db	32
  1263  00FEFD  3D                 	db	61	;'='
  1264  00FEFE  20                 	db	32
  1265  00FEFF  25                 	db	37
  1266  00FF00  64                 	db	100	;'d'
  1267  00FF01  20                 	db	32
  1268  00FF02  43                 	db	67	;'C'
  1269  00FF03  20                 	db	32
  1270  00FF04  3D                 	db	61	;'='
  1271  00FF05  20                 	db	32
  1272  00FF06  25                 	db	37
  1273  00FF07  64                 	db	100	;'d'
  1274  00FF08  20                 	db	32
  1275  00FF09  46                 	db	70	;'F'
  1276  00FF0A  20                 	db	32
  1277  00FF0B  00                 	db	0
  1278  00FF0C                     STR_35:
  1279                           
  1280                           ; BSR set to: 0
  1281  00FF0C  20                 	db	32
  1282  00FF0D  54                 	db	84	;'T'
  1283  00FF0E  65                 	db	101	;'e'
  1284  00FF0F  6D                 	db	109	;'m'
  1285  00FF10  70                 	db	112	;'p'
  1286  00FF11  20                 	db	32
  1287  00FF12  3D                 	db	61	;'='
  1288  00FF13  20                 	db	32
  1289  00FF14  25                 	db	37
  1290  00FF15  64                 	db	100	;'d'
  1291  00FF16  20                 	db	32
  1292  00FF17  43                 	db	67	;'C'
  1293  00FF18  20                 	db	32
  1294  00FF19  3D                 	db	61	;'='
  1295  00FF1A  20                 	db	32
  1296  00FF1B  25                 	db	37
  1297  00FF1C  64                 	db	100	;'d'
  1298  00FF1D  20                 	db	32
  1299  00FF1E  46                 	db	70	;'F'
  1300  00FF1F  00                 	db	0
  1301  00FF20                     STR_6:
  1302                           
  1303                           ; BSR set to: 0
  1304  00FF20  4C                 	db	76	;'L'
  1305  00FF21  69                 	db	105	;'i'
  1306  00FF22  67                 	db	103	;'g'
  1307  00FF23  68                 	db	104	;'h'
  1308  00FF24  74                 	db	116	;'t'
  1309  00FF25  20                 	db	32
  1310  00FF26  53                 	db	83	;'S'
  1311  00FF27  65                 	db	101	;'e'
  1312  00FF28  6E                 	db	110	;'n'
  1313  00FF29  73                 	db	115	;'s'
  1314  00FF2A  6F                 	db	111	;'o'
  1315  00FF2B  72                 	db	114	;'r'
  1316  00FF2C  20                 	db	32
  1317  00FF2D  3D                 	db	61	;'='
  1318  00FF2E  20                 	db	32
  1319  00FF2F  25                 	db	37
  1320  00FF30  66                 	db	102	;'f'
  1321  00FF31  20                 	db	32
  1322  00FF32  56                 	db	86	;'V'
  1323  00FF33  00                 	db	0
  1324  00FF34                     STR_1:
  1325                           
  1326                           ; BSR set to: 0
  1327  00FF34  46                 	db	70	;'F'
  1328  00FF35  61                 	db	97	;'a'
  1329  00FF36  6E                 	db	110	;'n'
  1330  00FF37  20                 	db	32
  1331  00FF38  69                 	db	105	;'i'
  1332  00FF39  73                 	db	115	;'s'
  1333  00FF3A  20                 	db	32
  1334  00FF3B  74                 	db	116	;'t'
  1335  00FF3C  75                 	db	117	;'u'
  1336  00FF3D  72                 	db	114	;'r'
  1337  00FF3E  6E                 	db	110	;'n'
  1338  00FF3F  65                 	db	101	;'e'
  1339  00FF40  64                 	db	100	;'d'
  1340  00FF41  20                 	db	32
  1341  00FF42  6F                 	db	111	;'o'
  1342  00FF43  66                 	db	102	;'f'
  1343  00FF44  66                 	db	102	;'f'
  1344  00FF45  0D                 	db	13
  1345  00FF46  0A                 	db	10
  1346  00FF47  00                 	db	0
  1347  00FF48                     STR_2:
  1348                           
  1349                           ; BSR set to: 0
  1350  00FF48  46                 	db	70	;'F'
  1351  00FF49  61                 	db	97	;'a'
  1352  00FF4A  6E                 	db	110	;'n'
  1353  00FF4B  20                 	db	32
  1354  00FF4C  69                 	db	105	;'i'
  1355  00FF4D  73                 	db	115	;'s'
  1356  00FF4E  20                 	db	32
  1357  00FF4F  74                 	db	116	;'t'
  1358  00FF50  75                 	db	117	;'u'
  1359  00FF51  72                 	db	114	;'r'
  1360  00FF52  6E                 	db	110	;'n'
  1361  00FF53  65                 	db	101	;'e'
  1362  00FF54  64                 	db	100	;'d'
  1363  00FF55  20                 	db	32
  1364  00FF56  6F                 	db	111	;'o'
  1365  00FF57  6E                 	db	110	;'n'
  1366  00FF58  0D                 	db	13
  1367  00FF59  0A                 	db	10
  1368  00FF5A  00                 	db	0
  1369  00FF5B                     STR_47:
  1370                           
  1371                           ; BSR set to: 0
  1372  00FF5B  30                 	db	48	;'0'
  1373  00FF5C  31                 	db	49	;'1'
  1374  00FF5D  32                 	db	50	;'2'
  1375  00FF5E  33                 	db	51	;'3'
  1376  00FF5F  34                 	db	52	;'4'
  1377  00FF60  35                 	db	53	;'5'
  1378  00FF61  36                 	db	54	;'6'
  1379  00FF62  37                 	db	55	;'7'
  1380  00FF63  38                 	db	56	;'8'
  1381  00FF64  39                 	db	57	;'9'
  1382  00FF65  61                 	db	97	;'a'
  1383  00FF66  62                 	db	98	;'b'
  1384  00FF67  63                 	db	99	;'c'
  1385  00FF68  64                 	db	100	;'d'
  1386  00FF69  65                 	db	101	;'e'
  1387  00FF6A  66                 	db	102	;'f'
  1388  00FF6B  00                 	db	0
  1389  00FF6C                     STR_39:
  1390                           
  1391                           ; BSR set to: 0
  1392  00FF6C  20                 	db	32
  1393  00FF6D  20                 	db	32
  1394  00FF6E  53                 	db	83	;'S'
  1395  00FF6F  65                 	db	101	;'e'
  1396  00FF70  74                 	db	116	;'t'
  1397  00FF71  20                 	db	32
  1398  00FF72  46                 	db	70	;'F'
  1399  00FF73  61                 	db	97	;'a'
  1400  00FF74  6E                 	db	110	;'n'
  1401  00FF75  20                 	db	32
  1402  00FF76  54                 	db	84	;'T'
  1403  00FF77  65                 	db	101	;'e'
  1404  00FF78  6D                 	db	109	;'m'
  1405  00FF79  70                 	db	112	;'p'
  1406  00FF7A  00                 	db	0
  1407  00FF7B                     STR_12:
  1408                           
  1409                           ; BSR set to: 0
  1410  00FF7B  54                 	db	84	;'T'
  1411  00FF7C  65                 	db	101	;'e'
  1412  00FF7D  6D                 	db	109	;'m'
  1413  00FF7E  70                 	db	112	;'p'
  1414  00FF7F  65                 	db	101	;'e'
  1415  00FF80  72                 	db	114	;'r'
  1416  00FF81  61                 	db	97	;'a'
  1417  00FF82  74                 	db	116	;'t'
  1418  00FF83  75                 	db	117	;'u'
  1419  00FF84  72                 	db	114	;'r'
  1420  00FF85  65                 	db	101	;'e'
  1421  00FF86  3A                 	db	58	;':'
  1422  00FF87  00                 	db	0
  1423  00FF88                     STR_44:
  1424                           
  1425                           ; BSR set to: 0
  1426  00FF88  54                 	db	84	;'T'
  1427  00FF89  69                 	db	105	;'i'
  1428  00FF8A  6D                 	db	109	;'m'
  1429  00FF8B  65                 	db	101	;'e'
  1430  00FF8C  20                 	db	32
  1431  00FF8D  53                 	db	83	;'S'
  1432  00FF8E  65                 	db	101	;'e'
  1433  00FF8F  74                 	db	116	;'t'
  1434  00FF90  75                 	db	117	;'u'
  1435  00FF91  70                 	db	112	;'p'
  1436  00FF92  00                 	db	0
  1437  00FF93  00                 	db	0
  1438  00FF94                     STR_38:
  1439                           
  1440                           ; BSR set to: 0
  1441  00FF94  20                 	db	32
  1442  00FF95  46                 	db	70	;'F'
  1443  00FF96  61                 	db	97	;'a'
  1444  00FF97  6E                 	db	110	;'n'
  1445  00FF98  20                 	db	32
  1446  00FF99  53                 	db	83	;'S'
  1447  00FF9A  65                 	db	101	;'e'
  1448  00FF9B  74                 	db	116	;'t'
  1449  00FF9C  75                 	db	117	;'u'
  1450  00FF9D  70                 	db	112	;'p'
  1451  00FF9E  00                 	db	0
  1452  00FF9F  00                 	db	0
  1453  00FFA0                     STR_19:
  1454                           
  1455                           ; BSR set to: 0
  1456  00FFA0  46                 	db	70	;'F'
  1457  00FFA1  41                 	db	65	;'A'
  1458  00FFA2  4E                 	db	78	;'N'
  1459  00FFA3  20                 	db	32
  1460  00FFA4  53                 	db	83	;'S'
  1461  00FFA5  65                 	db	101	;'e'
  1462  00FFA6  74                 	db	116	;'t'
  1463  00FFA7  54                 	db	84	;'T'
  1464  00FFA8  65                 	db	101	;'e'
  1465  00FFA9  6D                 	db	109	;'m'
  1466  00FFAA  70                 	db	112	;'p'
  1467  00FFAB  00                 	db	0
  1468  00FFAC                     STR_25:
  1469                           
  1470                           ; BSR set to: 0
  1471  00FFAC  53                 	db	83	;'S'
  1472  00FFAD  59                 	db	89	;'Y'
  1473  00FFAE  53                 	db	83	;'S'
  1474  00FFAF  54                 	db	84	;'T'
  1475  00FFB0  45                 	db	69	;'E'
  1476  00FFB1  4D                 	db	77	;'M'
  1477  00FFB2  20                 	db	32
  1478  00FFB3  4F                 	db	79	;'O'
  1479  00FFB4  46                 	db	70	;'F'
  1480  00FFB5  46                 	db	70	;'F'
  1481  00FFB6  00                 	db	0
  1482  00FFB7                     STR_17:
  1483                           
  1484                           ; BSR set to: 0
  1485  00FFB7  54                 	db	84	;'T'
  1486  00FFB8  69                 	db	105	;'i'
  1487  00FFB9  6D                 	db	109	;'m'
  1488  00FFBA  65                 	db	101	;'e'
  1489  00FFBB  72                 	db	114	;'r'
  1490  00FFBC  20                 	db	32
  1491  00FFBD  4D                 	db	77	;'M'
  1492  00FFBE  6F                 	db	111	;'o'
  1493  00FFBF  64                 	db	100	;'d'
  1494  00FFC0  65                 	db	101	;'e'
  1495  00FFC1  00                 	db	0
  1496  00FFC2                     STR_18:
  1497                           
  1498                           ; BSR set to: 0
  1499  00FFC2  54                 	db	84	;'T'
  1500  00FFC3  69                 	db	105	;'i'
  1501  00FFC4  6D                 	db	109	;'m'
  1502  00FFC5  65                 	db	101	;'e'
  1503  00FFC6  72                 	db	114	;'r'
  1504  00FFC7  20                 	db	32
  1505  00FFC8  54                 	db	84	;'T'
  1506  00FFC9  69                 	db	105	;'i'
  1507  00FFCA  6D                 	db	109	;'m'
  1508  00FFCB  65                 	db	101	;'e'
  1509  00FFCC  00                 	db	0
  1510  00FFCD                     STR_30:
  1511                           
  1512                           ; BSR set to: 0
  1513  00FFCD  41                 	db	65	;'A'
  1514  00FFCE  55                 	db	85	;'U'
  1515  00FFCF  54                 	db	84	;'T'
  1516  00FFD0  4F                 	db	79	;'O'
  1517  00FFD1  00                 	db	0
  1518  00FFD2                     STR_31:
  1519                           
  1520                           ; BSR set to: 0
  1521  00FFD2  4D                 	db	77	;'M'
  1522  00FFD3  41                 	db	65	;'A'
  1523  00FFD4  4E                 	db	78	;'N'
  1524  00FFD5  55                 	db	85	;'U'
  1525  00FFD6  00                 	db	0
  1526  00FFD7                     STR_16:
  1527                           
  1528                           ; BSR set to: 0
  1529  00FFD7  44                 	db	68	;'D'
  1530  00FFD8  61                 	db	97	;'a'
  1531  00FFD9  74                 	db	116	;'t'
  1532  00FFDA  65                 	db	101	;'e'
  1533  00FFDB  00                 	db	0
  1534  00FFDC                     STR_23:
  1535                           
  1536                           ; BSR set to: 0
  1537  00FFDC  56                 	db	86	;'V'
  1538  00FFDD  6F                 	db	111	;'o'
  1539  00FFDE  6C                 	db	108	;'l'
  1540  00FFDF  74                 	db	116	;'t'
  1541  00FFE0  00                 	db	0
  1542  00FFE1                     STR_32:
  1543                           
  1544                           ; BSR set to: 0
  1545  00FFE1  4F                 	db	79	;'O'
  1546  00FFE2  4E                 	db	78	;'N'
  1547  00FFE3  20                 	db	32
  1548  00FFE4  00                 	db	0
  1549  00FFE5                     STR_27:
  1550                           
  1551                           ; BSR set to: 0
  1552  00FFE5  54                 	db	84	;'T'
  1553  00FFE6  4D                 	db	77	;'M'
  1554  00FFE7  31                 	db	49	;'1'
  1555  00FFE8  00                 	db	0
  1556  00FFE9                     STR_28:
  1557                           
  1558                           ; BSR set to: 0
  1559  00FFE9  54                 	db	84	;'T'
  1560  00FFEA  4D                 	db	77	;'M'
  1561  00FFEB  32                 	db	50	;'2'
  1562  00FFEC  00                 	db	0
  1563  00FFED                     STR_29:
  1564                           
  1565                           ; BSR set to: 0
  1566  00FFED  54                 	db	84	;'T'
  1567  00FFEE  4D                 	db	77	;'M'
  1568  00FFEF  33                 	db	51	;'3'
  1569  00FFF0  00                 	db	0
  1570  00FFF1                     STR_24:
  1571                           
  1572                           ; BSR set to: 0
  1573  00FFF1  52                 	db	82	;'R'
  1574  00FFF2  50                 	db	80	;'P'
  1575  00FFF3  4D                 	db	77	;'M'
  1576  00FFF4  00                 	db	0
  1577  00FFF5                     STR_13:
  1578                           
  1579                           ; BSR set to: 0
  1580  00FFF5  43                 	db	67	;'C'
  1581  00FFF6  2F                 	db	47
  1582  00FFF7  00                 	db	0
  1583  00FFF8                     STR_22:
  1584                           
  1585                           ; BSR set to: 0
  1586  00FFF8  44                 	db	68	;'D'
  1587  00FFF9  43                 	db	67	;'C'
  1588  00FFFA  00                 	db	0
  1589  00FFFB                     STR_21:
  1590                           
  1591                           ; BSR set to: 0
  1592  00FFFB  53                 	db	83	;'S'
  1593  00FFFC  57                 	db	87	;'W'
  1594  00FFFD  00                 	db	0
  1595  0000                     
  1596                           ; #config settings
  1597  00FFFE  00                 	db	0	; dummy byte at the end
  1598  0000                     
  1599                           	psect	cinit
  1600  00431A                     __pcinit:
  1601                           	opt stack 0
  1602  00431A                     start_initialization:
  1603                           	opt stack 0
  1604  00431A                     __initialization:
  1605                           	opt stack 0
  1606                           
  1607                           ; Clear objects allocated to BANK0 (38 bytes)
  1608  00431A  EE00  F0B4         	lfsr	0,__pbssBANK0
  1609  00431E  0E26               	movlw	38
  1610  004320                     clear_0:
  1611  004320  6AEE               	clrf	postinc0,c
  1612  004322  06E8               	decf	wreg,f,c
  1613  004324  E1FD               	bnz	clear_0
  1614                           
  1615                           ; Clear objects allocated to COMRAM (18 bytes)
  1616  004326  EE00  F05A         	lfsr	0,__pbssCOMRAM
  1617  00432A  0E12               	movlw	18
  1618  00432C                     clear_1:
  1619  00432C  6AEE               	clrf	postinc0,c
  1620  00432E  06E8               	decf	wreg,f,c
  1621  004330  E1FD               	bnz	clear_1
  1622                           
  1623                           ; Initialize objects allocated to BANK1 (140 bytes)
  1624                           ; load TBLPTR registers with __pidataBANK1
  1625  004332  0EC2               	movlw	low __pidataBANK1
  1626  004334  6EF6               	movwf	tblptrl,c
  1627  004336  0E3E               	movlw	high __pidataBANK1
  1628  004338  6EF7               	movwf	tblptrh,c
  1629  00433A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1630  00433C  6EF8               	movwf	tblptru,c
  1631  00433E  EE01  F000         	lfsr	0,__pdataBANK1
  1632  004342  EE10 F08C          	lfsr	1,140
  1633  004346                     copy_data0:
  1634  004346  0009               	tblrd		*+
  1635  004348  CFF5 FFEE          	movff	tablat,postinc0
  1636  00434C  50E5               	movf	postdec1,w,c
  1637  00434E  50E1               	movf	fsr1l,w,c
  1638  004350  E1FA               	bnz	copy_data0
  1639                           
  1640                           ; Initialize objects allocated to BANK0 (34 bytes)
  1641                           ; load TBLPTR registers with __pidataBANK0
  1642  004352  0EB0               	movlw	low __pidataBANK0
  1643  004354  6EF6               	movwf	tblptrl,c
  1644  004356  0E4A               	movlw	high __pidataBANK0
  1645  004358  6EF7               	movwf	tblptrh,c
  1646  00435A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1647  00435C  6EF8               	movwf	tblptru,c
  1648  00435E  EE00  F0DA         	lfsr	0,__pdataBANK0
  1649  004362  EE10 F022          	lfsr	1,34
  1650  004366                     copy_data1:
  1651  004366  0009               	tblrd		*+
  1652  004368  CFF5 FFEE          	movff	tablat,postinc0
  1653  00436C  50E5               	movf	postdec1,w,c
  1654  00436E  50E1               	movf	fsr1l,w,c
  1655  004370  E1FA               	bnz	copy_data1
  1656  004372                     end_of_initialization:
  1657                           	opt stack 0
  1658  004372                     __end_of__initialization:
  1659                           	opt stack 0
  1660  004372  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1661  004374  6EF8               	movwf	tblptru,c
  1662  004376  0100               	movlb	0
  1663  004378  EF6F  F00D         	goto	_main	;jump to C main() function
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postdec1	equ	0xFE5
  1671                           fsr1l	equ	0xFE1
  1672                           
  1673                           	psect	bssCOMRAM
  1674  00005A                     __pbssCOMRAM:
  1675                           	opt stack 0
  1676  00005A                     _Time_Elapsed:
  1677                           	opt stack 0
  1678  00005A                     	ds	2
  1679  00005C                     _rpm:
  1680                           	opt stack 0
  1681  00005C                     	ds	2
  1682  00005E                     _txt:
  1683                           	opt stack 0
  1684  00005E                     	ds	2
  1685  000060                     _FAN_TIMER_MODE:
  1686                           	opt stack 0
  1687  000060                     	ds	1
  1688  000061                     _Nec_state:
  1689                           	opt stack 0
  1690  000061                     	ds	1
  1691  000062                     _SYSTEM_ON:
  1692                           	opt stack 0
  1693  000062                     	ds	1
  1694  000063                     _day:
  1695                           	opt stack 0
  1696  000063                     	ds	1
  1697  000064                     _duty_cycle:
  1698                           	opt stack 0
  1699  000064                     	ds	1
  1700  000065                     _hour:
  1701                           	opt stack 0
  1702  000065                     	ds	1
  1703  000066                     _minute:
  1704                           	opt stack 0
  1705  000066                     	ds	1
  1706  000067                     _month:
  1707                           	opt stack 0
  1708  000067                     	ds	1
  1709  000068                     _second:
  1710                           	opt stack 0
  1711  000068                     	ds	1
  1712  000069                     _tempC:
  1713                           	opt stack 0
  1714  000069                     	ds	1
  1715  00006A                     _tempF:
  1716                           	opt stack 0
  1717  00006A                     	ds	1
  1718  00006B                     _year:
  1719                           	opt stack 0
  1720  00006B                     	ds	1
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1l	equ	0xFE1
  1729                           
  1730                           	psect	bssBANK0
  1731  0000B4                     __pbssBANK0:
  1732                           	opt stack 0
  1733  0000B4                     _Nec_code:
  1734                           	opt stack 0
  1735  0000B4                     	ds	4
  1736  0000B8                     _volt:
  1737                           	opt stack 0
  1738  0000B8                     	ds	3
  1739  0000BB                     _Nec_ok:
  1740                           	opt stack 0
  1741  0000BB                     	ds	2
  1742  0000BD                     _nbr:
  1743                           	opt stack 0
  1744  0000BD                     	ds	2
  1745  0000BF                     _rps:
  1746                           	opt stack 0
  1747  0000BF                     	ds	2
  1748  0000C1                     _FAN:
  1749                           	opt stack 0
  1750  0000C1                     	ds	1
  1751  0000C2                     _FANMODE:
  1752                           	opt stack 0
  1753  0000C2                     	ds	1
  1754  0000C3                     _FAN_TIMER_TIME:
  1755                           	opt stack 0
  1756  0000C3                     	ds	1
  1757  0000C4                     _INT0_flag:
  1758                           	opt stack 0
  1759  0000C4                     	ds	1
  1760  0000C5                     _INT1_flag:
  1761                           	opt stack 0
  1762  0000C5                     	ds	1
  1763  0000C6                     _INT2_flag:
  1764                           	opt stack 0
  1765  0000C6                     	ds	1
  1766  0000C7                     _In_Fan_Temp_Setup:
  1767                           	opt stack 0
  1768  0000C7                     	ds	1
  1769  0000C8                     _In_Time_Setup:
  1770                           	opt stack 0
  1771  0000C8                     	ds	1
  1772  0000C9                     _Nec_Button:
  1773                           	opt stack 0
  1774  0000C9                     	ds	1
  1775  0000CA                     _Select_Fan_Temp_Field:
  1776                           	opt stack 0
  1777  0000CA                     	ds	1
  1778  0000CB                     _Select_Field:
  1779                           	opt stack 0
  1780  0000CB                     	ds	1
  1781  0000CC                     __tft_type:
  1782                           	opt stack 0
  1783  0000CC                     	ds	1
  1784  0000CD                     _bit_count:
  1785                           	opt stack 0
  1786  0000CD                     	ds	1
  1787  0000CE                     _colstart:
  1788                           	opt stack 0
  1789  0000CE                     	ds	1
  1790  0000CF                     _dow:
  1791                           	opt stack 0
  1792  0000CF                     	ds	1
  1793  0000D0                     _found:
  1794                           	opt stack 0
  1795  0000D0                     	ds	1
  1796  0000D1                     _light_flag:
  1797                           	opt stack 0
  1798  0000D1                     	ds	1
  1799  0000D2                     _rowstart:
  1800                           	opt stack 0
  1801  0000D2                     	ds	1
  1802  0000D3                     _setup_day:
  1803                           	opt stack 0
  1804  0000D3                     	ds	1
  1805  0000D4                     _setup_fan_set_temp:
  1806                           	opt stack 0
  1807  0000D4                     	ds	1
  1808  0000D5                     _setup_hour:
  1809                           	opt stack 0
  1810  0000D5                     	ds	1
  1811  0000D6                     _setup_minute:
  1812                           	opt stack 0
  1813  0000D6                     	ds	1
  1814  0000D7                     _setup_month:
  1815                           	opt stack 0
  1816  0000D7                     	ds	1
  1817  0000D8                     _setup_second:
  1818                           	opt stack 0
  1819  0000D8                     	ds	1
  1820  0000D9                     _setup_year:
  1821                           	opt stack 0
  1822  0000D9                     	ds	1
  1823                           tblptru	equ	0xFF8
  1824                           tblptrh	equ	0xFF7
  1825                           tblptrl	equ	0xFF6
  1826                           tablat	equ	0xFF5
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           postdec1	equ	0xFE5
  1830                           fsr1l	equ	0xFE1
  1831                           
  1832                           	psect	dataBANK0
  1833  0000DA                     __pdataBANK0:
  1834                           	opt stack 0
  1835  0000DA                     _RTC_ALARM_Txt:
  1836                           	opt stack 0
  1837  0000DA                     	ds	2
  1838  0000DC                     _fan_set_temp:
  1839                           	opt stack 0
  1840  0000DC                     	ds	1
  1841  0000DD                     _tempSecond:
  1842                           	opt stack 0
  1843  0000DD                     	ds	1
  1844  0000DE                     _wrap:
  1845                           	opt stack 0
  1846  0000DE                     	ds	1
  1847  0000DF                     _tempF_Txt:
  1848                           	opt stack 0
  1849  0000DF                     	ds	5
  1850  0000E4                     _DC_Txt:
  1851                           	opt stack 0
  1852  0000E4                     	ds	4
  1853  0000E8                     _Fan_SW_Txt:
  1854                           	opt stack 0
  1855  0000E8                     	ds	4
  1856  0000EC                     _Fan_Set_Temp_Txt:
  1857                           	opt stack 0
  1858  0000EC                     	ds	4
  1859  0000F0                     _Fan_Timer_Mode_Txt:
  1860                           	opt stack 0
  1861  0000F0                     	ds	4
  1862  0000F4                     _Fan_Timer_Txt:
  1863                           	opt stack 0
  1864  0000F4                     	ds	4
  1865  0000F8                     _tempC_Txt:
  1866                           	opt stack 0
  1867  0000F8                     	ds	4
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           
  1877                           	psect	dataBANK1
  1878  000100                     __pdataBANK1:
  1879                           	opt stack 0
  1880  000100                     _buffer:
  1881                           	opt stack 0
  1882  000100                     	ds	35
  1883  000123                     check_for_button_input@F4236:
  1884                           	opt stack 0
  1885  000123                     	ds	21
  1886  000138                     _Timer_Table:
  1887                           	opt stack 0
  1888  000138                     	ds	4
  1889  00013C                     _Timing_Txt:
  1890                           	opt stack 0
  1891  00013C                     	ds	23
  1892  000153                     _date_Txt:
  1893                           	opt stack 0
  1894  000153                     	ds	9
  1895  00015C                     _setup_date:
  1896                           	opt stack 0
  1897  00015C                     	ds	9
  1898  000165                     _setup_time:
  1899                           	opt stack 0
  1900  000165                     	ds	9
  1901  00016E                     _time_Txt:
  1902                           	opt stack 0
  1903  00016E                     	ds	9
  1904  000177                     _Volt_Txt:
  1905                           	opt stack 0
  1906  000177                     	ds	6
  1907  00017D                     _Fan_Mode_Txt:
  1908                           	opt stack 0
  1909  00017D                     	ds	5
  1910  000182                     _RPM_Txt:
  1911                           	opt stack 0
  1912  000182                     	ds	5
  1913  000187                     _setup_fan_set_text:
  1914                           	opt stack 0
  1915  000187                     	ds	5
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postdec1	equ	0xFE5
  1923                           fsr1l	equ	0xFE1
  1924                           
  1925                           	psect	cstackBANK1
  1926  00018C                     __pcstackBANK1:
  1927                           	opt stack 0
  1928  00018C                     check_for_button_input@array1:
  1929                           	opt stack 0
  1930                           
  1931                           ; 21 bytes @ 0x0
  1932  00018C                     	ds	21
  1933  0001A1                     check_for_button_input@j:
  1934                           	opt stack 0
  1935                           
  1936                           ; 2 bytes @ 0x15
  1937  0001A1                     	ds	2
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           postdec1	equ	0xFE5
  1945                           fsr1l	equ	0xFE1
  1946                           
  1947                           	psect	cstackBANK0
  1948  000080                     __pcstackBANK0:
  1949                           	opt stack 0
  1950  000080                     ?___ftsub:
  1951                           	opt stack 0
  1952  000080                     ___ftsub@f1:
  1953                           	opt stack 0
  1954                           
  1955                           ; 3 bytes @ 0x0
  1956  000080                     	ds	3
  1957  000083                     ___ftsub@f2:
  1958                           	opt stack 0
  1959                           
  1960                           ; 3 bytes @ 0x3
  1961  000083                     	ds	3
  1962  000086                     ?_printf:
  1963                           	opt stack 0
  1964  000086                     printf@f:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x6
  1968  000086                     	ds	14
  1969  000094                     ??_printf:
  1970                           
  1971                           ; 0 bytes @ 0x14
  1972  000094                     	ds	6
  1973  00009A                     _printf$2978:
  1974                           	opt stack 0
  1975                           
  1976                           ; 3 bytes @ 0x1A
  1977  00009A                     	ds	3
  1978  00009D                     printf@idx:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x1D
  1982  00009D                     	ds	1
  1983  00009E                     printf@ap:
  1984                           	opt stack 0
  1985                           
  1986                           ; 2 bytes @ 0x1E
  1987  00009E                     	ds	2
  1988  0000A0                     printf@prec:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x20
  1992  0000A0                     	ds	2
  1993  0000A2                     printf@tmpval:
  1994                           	opt stack 0
  1995                           
  1996                           ; 4 bytes @ 0x22
  1997  0000A2                     	ds	4
  1998  0000A6                     printf@width:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x26
  2002  0000A6                     	ds	2
  2003  0000A8                     printf@exp:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x28
  2007  0000A8                     	ds	2
  2008  0000AA                     printf@val:
  2009                           	opt stack 0
  2010                           
  2011                           ; 4 bytes @ 0x2A
  2012  0000AA                     	ds	4
  2013  0000AE                     printf@flag:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0x2E
  2017  0000AE                     	ds	2
  2018  0000B0                     printf@fval:
  2019                           	opt stack 0
  2020                           
  2021                           ; 3 bytes @ 0x30
  2022  0000B0                     	ds	3
  2023  0000B3                     printf@c:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x33
  2027  0000B3                     	ds	1
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037                           	psect	cstackCOMRAM
  2038  000001                     __pcstackCOMRAM:
  2039                           	opt stack 0
  2040  000001                     ??_INT2_isr:
  2041  000001                     INT0_isr@k:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x0
  2045  000001                     	ds	2
  2046  000003                     ??_chkisr:
  2047                           
  2048                           ; 0 bytes @ 0x2
  2049  000003                     	ds	14
  2050  000011                     ??_isdigit:
  2051  000011                     ??_bcd_2_dec:
  2052  000011                     ?_strlen:
  2053                           	opt stack 0
  2054  000011                     ?_get_full_ADC:
  2055                           	opt stack 0
  2056  000011                     ?_get_duty_cycle:
  2057                           	opt stack 0
  2058  000011                     ?___wmul:
  2059                           	opt stack 0
  2060  000011                     ?___ftpack:
  2061                           	opt stack 0
  2062  000011                     ?___ftneg:
  2063                           	opt stack 0
  2064  000011                     ?__tdiv_to_l_:
  2065                           	opt stack 0
  2066  000011                     ?__div_to_l_:
  2067                           	opt stack 0
  2068  000011                     ?___lldiv:
  2069                           	opt stack 0
  2070  000011                     I2C_Read@ack:
  2071                           	opt stack 0
  2072  000011                     I2C_Write@outByte:
  2073                           	opt stack 0
  2074  000011                     spiwrite@x:
  2075                           	opt stack 0
  2076  000011                     putch@c:
  2077                           	opt stack 0
  2078  000011                     get_duty_cycle@temp:
  2079                           	opt stack 0
  2080  000011                     Wait_Half_Sec@k:
  2081                           	opt stack 0
  2082  000011                     OpenUSART@spbrg:
  2083                           	opt stack 0
  2084  000011                     ___wmul@multiplier:
  2085                           	opt stack 0
  2086  000011                     strcpy@to:
  2087                           	opt stack 0
  2088  000011                     strlen@s:
  2089                           	opt stack 0
  2090  000011                     __div_to_l_@f1:
  2091                           	opt stack 0
  2092  000011                     ___ftpack@arg:
  2093                           	opt stack 0
  2094  000011                     __tdiv_to_l_@f1:
  2095                           	opt stack 0
  2096  000011                     ___ftge@ff1:
  2097                           	opt stack 0
  2098  000011                     ___ftneg@f1:
  2099                           	opt stack 0
  2100  000011                     I2C_Init@c:
  2101                           	opt stack 0
  2102  000011                     ___lldiv@dividend:
  2103                           	opt stack 0
  2104                           
  2105                           ; 4 bytes @ 0x10
  2106  000011                     	ds	1
  2107  000012                     I2C_Read@n:
  2108                           	opt stack 0
  2109  000012                     I2C_Write@n:
  2110                           	opt stack 0
  2111  000012                     spiwrite@spidata:
  2112                           	opt stack 0
  2113  000012                     _isdigit$2600:
  2114                           	opt stack 0
  2115                           
  2116                           ; 1 bytes @ 0x11
  2117  000012                     	ds	1
  2118  000013                     ??_strlen:
  2119  000013                     ??_get_full_ADC:
  2120  000013                     I2C_Read@inByte:
  2121                           	opt stack 0
  2122  000013                     I2C_Write_Cmd_Only@Cmd:
  2123                           	opt stack 0
  2124  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  2125                           	opt stack 0
  2126  000013                     write_command@cmd_:
  2127                           	opt stack 0
  2128  000013                     write_data@data_:
  2129                           	opt stack 0
  2130  000013                     OpenUSART@config:
  2131                           	opt stack 0
  2132  000013                     isdigit@c:
  2133                           	opt stack 0
  2134  000013                     get_duty_cycle@set_temp:
  2135                           	opt stack 0
  2136  000013                     bcd_2_dec@dec:
  2137                           	opt stack 0
  2138  000013                     ___wmul@multiplicand:
  2139                           	opt stack 0
  2140  000013                     strcpy@from:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x12
  2144  000013                     	ds	1
  2145  000014                     ?_DS1621_Read_Temp:
  2146                           	opt stack 0
  2147  000014                     I2C_Write_Cmd_Only@Device:
  2148                           	opt stack 0
  2149  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  2150                           	opt stack 0
  2151  000014                     setAddrWindow@y0:
  2152                           	opt stack 0
  2153  000014                     DS3231_Read_Time@Address:
  2154                           	opt stack 0
  2155  000014                     ___ftpack@exp:
  2156                           	opt stack 0
  2157  000014                     __div_to_l_@f2:
  2158                           	opt stack 0
  2159  000014                     __tdiv_to_l_@f2:
  2160                           	opt stack 0
  2161  000014                     ___ftge@ff2:
  2162                           	opt stack 0
  2163                           
  2164                           ; 3 bytes @ 0x13
  2165  000014                     	ds	1
  2166  000015                     ??_get_duty_cycle:
  2167  000015                     I2C_Write_Cmd_Write_Data@Device:
  2168                           	opt stack 0
  2169  000015                     setAddrWindow@x1:
  2170                           	opt stack 0
  2171  000015                     bcd_2_dec@bcd:
  2172                           	opt stack 0
  2173  000015                     DS3231_Read_Time@Device:
  2174                           	opt stack 0
  2175  000015                     ___ftpack@sign:
  2176                           	opt stack 0
  2177  000015                     get_full_ADC@result:
  2178                           	opt stack 0
  2179  000015                     ___wmul@product:
  2180                           	opt stack 0
  2181  000015                     strcpy@cp:
  2182                           	opt stack 0
  2183  000015                     strlen@cp:
  2184                           	opt stack 0
  2185  000015                     ___lldiv@divisor:
  2186                           	opt stack 0
  2187                           
  2188                           ; 4 bytes @ 0x14
  2189  000015                     	ds	1
  2190  000016                     ??___ftpack:
  2191  000016                     setAddrWindow@y1:
  2192                           	opt stack 0
  2193  000016                     DS1621_Init@Device:
  2194                           	opt stack 0
  2195  000016                     DS1621_Read_Temp@Cmd:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x15
  2199  000016                     	ds	1
  2200  000017                     ??__tdiv_to_l_:
  2201  000017                     ??___ftge:
  2202  000017                     ?___awdiv:
  2203                           	opt stack 0
  2204  000017                     setAddrWindow@x0:
  2205                           	opt stack 0
  2206  000017                     DS1621_Read_Temp@Data_Ret:
  2207                           	opt stack 0
  2208  000017                     get_duty_cycle@diff_temp:
  2209                           	opt stack 0
  2210  000017                     delay_ms@ms:
  2211                           	opt stack 0
  2212  000017                     ___awdiv@dividend:
  2213                           	opt stack 0
  2214  000017                     __div_to_l_@quot:
  2215                           	opt stack 0
  2216                           
  2217                           ; 4 bytes @ 0x16
  2218  000017                     	ds	1
  2219  000018                     drawPixel@y:
  2220                           	opt stack 0
  2221  000018                     drawFastVLine@y:
  2222                           	opt stack 0
  2223  000018                     fillRectangle@y:
  2224                           	opt stack 0
  2225  000018                     DS1621_Read_Temp@Device:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x17
  2229  000018                     	ds	1
  2230  000019                     ?___awtoft:
  2231                           	opt stack 0
  2232  000019                     ?___lbtoft:
  2233                           	opt stack 0
  2234  000019                     ?___lltoft:
  2235                           	opt stack 0
  2236  000019                     drawFastVLine@h:
  2237                           	opt stack 0
  2238  000019                     fillRectangle@w:
  2239                           	opt stack 0
  2240  000019                     get_duty_cycle@dc:
  2241                           	opt stack 0
  2242  000019                     delay_ms@count:
  2243                           	opt stack 0
  2244  000019                     drawPixel@color:
  2245                           	opt stack 0
  2246  000019                     ___awdiv@divisor:
  2247                           	opt stack 0
  2248  000019                     ___awtoft@c:
  2249                           	opt stack 0
  2250  000019                     ___lldiv@quotient:
  2251                           	opt stack 0
  2252  000019                     ___lltoft@c:
  2253                           	opt stack 0
  2254                           
  2255                           ; 4 bytes @ 0x18
  2256  000019                     	ds	1
  2257  00001A                     fillRectangle@h:
  2258                           	opt stack 0
  2259  00001A                     drawFastVLine@color:
  2260                           	opt stack 0
  2261  00001A                     __tdiv_to_l_@quot:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0x19
  2265  00001A                     	ds	1
  2266  00001B                     drawPixel@x:
  2267                           	opt stack 0
  2268  00001B                     ___awdiv@counter:
  2269                           	opt stack 0
  2270  00001B                     __div_to_l_@cntr:
  2271                           	opt stack 0
  2272  00001B                     fillRectangle@color:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x1A
  2276  00001B                     	ds	1
  2277  00001C                     ??_drawFastVLine:
  2278  00001C                     ___awdiv@sign:
  2279                           	opt stack 0
  2280  00001C                     ___awtoft@sign:
  2281                           	opt stack 0
  2282  00001C                     __div_to_l_@exp1:
  2283                           	opt stack 0
  2284  00001C                     ___lbtoft@c:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x1B
  2288  00001C                     	ds	1
  2289  00001D                     ??_fillRectangle:
  2290  00001D                     ??___lltoft:
  2291  00001D                     ___lldiv@counter:
  2292                           	opt stack 0
  2293  00001D                     ___awdiv@quotient:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x1C
  2297  00001D                     	ds	1
  2298  00001E                     ?___llmod:
  2299                           	opt stack 0
  2300  00001E                     __tdiv_to_l_@cntr:
  2301                           	opt stack 0
  2302  00001E                     ___llmod@dividend:
  2303                           	opt stack 0
  2304                           
  2305                           ; 4 bytes @ 0x1D
  2306  00001E                     	ds	1
  2307  00001F                     ??_Set_D1_RGB:
  2308  00001F                     ?_get_RPM:
  2309                           	opt stack 0
  2310  00001F                     ?___ftmul:
  2311                           	opt stack 0
  2312  00001F                     __tdiv_to_l_@exp1:
  2313                           	opt stack 0
  2314  00001F                     Set_D2_RGB@rpm:
  2315                           	opt stack 0
  2316  00001F                     ___ftmul@f1:
  2317                           	opt stack 0
  2318                           
  2319                           ; 3 bytes @ 0x1E
  2320  00001F                     	ds	1
  2321  000020                     drawFastVLine@hi:
  2322                           	opt stack 0
  2323  000020                     Set_D1_RGB@duty_cycle:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x1F
  2327  000020                     	ds	1
  2328  000021                     drawFastVLine@lo:
  2329                           	opt stack 0
  2330  000021                     fillRectangle@hi:
  2331                           	opt stack 0
  2332  000021                     ___lltoft@exp:
  2333                           	opt stack 0
  2334  000021                     get_RPM@RPS:
  2335                           	opt stack 0
  2336  000021                     Set_D1_RGB@range:
  2337                           	opt stack 0
  2338  000021                     Set_D2_RGB@range:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x20
  2342  000021                     	ds	1
  2343  000022                     drawFastVLine@x:
  2344                           	opt stack 0
  2345  000022                     fillRectangle@lo:
  2346                           	opt stack 0
  2347  000022                     ___ftmul@f2:
  2348                           	opt stack 0
  2349  000022                     ___llmod@divisor:
  2350                           	opt stack 0
  2351                           
  2352                           ; 4 bytes @ 0x21
  2353  000022                     	ds	1
  2354  000023                     fillRect@y:
  2355                           	opt stack 0
  2356  000023                     fillRectangle@x:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x22
  2360  000023                     	ds	1
  2361  000024                     fillRect@w:
  2362                           	opt stack 0
  2363  000024                     fillScreen@color:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x23
  2367  000024                     	ds	1
  2368  000025                     ??___ftmul:
  2369  000025                     fillRect@h:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x24
  2373  000025                     	ds	1
  2374  000026                     ___llmod@counter:
  2375                           	opt stack 0
  2376  000026                     fillRect@color:
  2377                           	opt stack 0
  2378                           
  2379                           ; 2 bytes @ 0x25
  2380  000026                     	ds	2
  2381  000028                     ??_fillRect:
  2382  000028                     ___ftmul@exp:
  2383                           	opt stack 0
  2384                           
  2385                           ; 1 bytes @ 0x27
  2386  000028                     	ds	1
  2387  000029                     ___ftmul@f3_as_product:
  2388                           	opt stack 0
  2389                           
  2390                           ; 3 bytes @ 0x28
  2391  000029                     	ds	2
  2392  00002B                     fillRect@x:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x2A
  2396  00002B                     	ds	1
  2397  00002C                     ___ftmul@cntr:
  2398                           	opt stack 0
  2399  00002C                     fillRect@i:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x2B
  2403  00002C                     	ds	1
  2404  00002D                     ___ftmul@sign:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x2C
  2408  00002D                     	ds	1
  2409  00002E                     ?___ftdiv:
  2410                           	opt stack 0
  2411  00002E                     ?___fttol:
  2412                           	opt stack 0
  2413  00002E                     drawChar@y:
  2414                           	opt stack 0
  2415  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2416                           	opt stack 0
  2417  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2418                           	opt stack 0
  2419  00002E                     ___ftdiv@f1:
  2420                           	opt stack 0
  2421  00002E                     ___fttol@f1:
  2422                           	opt stack 0
  2423                           
  2424                           ; 3 bytes @ 0x2D
  2425  00002E                     	ds	1
  2426  00002F                     drawChar@c:
  2427                           	opt stack 0
  2428  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2429                           	opt stack 0
  2430  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x2E
  2434  00002F                     	ds	1
  2435  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2436                           	opt stack 0
  2437  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2438                           	opt stack 0
  2439  000030                     drawChar@color:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x2F
  2443  000030                     	ds	1
  2444  000031                     ___ftdiv@f2:
  2445                           	opt stack 0
  2446                           
  2447                           ; 3 bytes @ 0x30
  2448  000031                     	ds	1
  2449  000032                     ??___fttol:
  2450  000032                     drawChar@bg:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x31
  2454  000032                     	ds	2
  2455  000034                     ??___ftdiv:
  2456  000034                     drawChar@size:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0x33
  2460  000034                     	ds	1
  2461  000035                     drawChar@line:
  2462                           	opt stack 0
  2463                           
  2464                           ; 1 bytes @ 0x34
  2465  000035                     	ds	1
  2466  000036                     drawChar@x:
  2467                           	opt stack 0
  2468                           
  2469                           ; 1 bytes @ 0x35
  2470  000036                     	ds	1
  2471  000037                     drawChar@j:
  2472                           	opt stack 0
  2473  000037                     ___ftdiv@cntr:
  2474                           	opt stack 0
  2475  000037                     ___fttol@sign1:
  2476                           	opt stack 0
  2477                           
  2478                           ; 1 bytes @ 0x36
  2479  000037                     	ds	1
  2480  000038                     drawChar@i:
  2481                           	opt stack 0
  2482  000038                     ___ftdiv@f3:
  2483                           	opt stack 0
  2484  000038                     ___fttol@lval:
  2485                           	opt stack 0
  2486                           
  2487                           ; 4 bytes @ 0x37
  2488  000038                     	ds	1
  2489  000039                     drawtext@y:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0x38
  2493  000039                     	ds	1
  2494  00003A                     drawtext@_text:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x39
  2498  00003A                     	ds	1
  2499  00003B                     ___ftdiv@exp:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x3A
  2503  00003B                     	ds	1
  2504  00003C                     ___ftdiv@sign:
  2505                           	opt stack 0
  2506  00003C                     ___fttol@exp1:
  2507                           	opt stack 0
  2508  00003C                     drawtext@color:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x3B
  2512  00003C                     	ds	1
  2513  00003D                     ??_do_update_pwm:
  2514  00003D                     ?___awmod:
  2515                           	opt stack 0
  2516  00003D                     ?_Read_Volt:
  2517                           	opt stack 0
  2518  00003D                     ___awmod@dividend:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x3C
  2522  00003D                     	ds	1
  2523  00003E                     drawtext@bg:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x3D
  2527  00003E                     	ds	1
  2528  00003F                     ___awmod@divisor:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0x3E
  2532  00003F                     	ds	1
  2533  000040                     drawtext@size:
  2534                           	opt stack 0
  2535  000040                     do_update_pwm@dc_f:
  2536                           	opt stack 0
  2537  000040                     Read_Volt@volt:
  2538                           	opt stack 0
  2539                           
  2540                           ; 3 bytes @ 0x3F
  2541  000040                     	ds	1
  2542  000041                     ??_drawtext:
  2543  000041                     ___awmod@counter:
  2544                           	opt stack 0
  2545                           
  2546                           ; 1 bytes @ 0x40
  2547  000041                     	ds	1
  2548  000042                     ___awmod@sign:
  2549                           	opt stack 0
  2550                           
  2551                           ; 1 bytes @ 0x41
  2552  000042                     	ds	1
  2553  000043                     ?_dec_2_bcd:
  2554                           	opt stack 0
  2555  000043                     ?_fround:
  2556                           	opt stack 0
  2557  000043                     ?_scale:
  2558                           	opt stack 0
  2559  000043                     drawtext@x:
  2560                           	opt stack 0
  2561  000043                     do_update_pwm@duty_cycle:
  2562                           	opt stack 0
  2563  000043                     Read_Volt@ADC_Channel:
  2564                           	opt stack 0
  2565                           
  2566                           ; 1 bytes @ 0x42
  2567  000043                     	ds	1
  2568  000044                     drawtext@textsize:
  2569                           	opt stack 0
  2570  000044                     do_update_pwm@dc_I:
  2571                           	opt stack 0
  2572  000044                     Read_Volt@nStep:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x43
  2576  000044                     	ds	1
  2577  000045                     ??_dec_2_bcd:
  2578                           
  2579                           ; 0 bytes @ 0x44
  2580  000045                     	ds	1
  2581  000046                     drawtext@i:
  2582                           	opt stack 0
  2583  000046                     _fround$2976:
  2584                           	opt stack 0
  2585  000046                     _scale$2977:
  2586                           	opt stack 0
  2587                           
  2588                           ; 3 bytes @ 0x45
  2589  000046                     	ds	1
  2590  000047                     dec_2_bcd@bcd:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x46
  2594  000047                     	ds	1
  2595  000048                     drawtext@cursor_y:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x47
  2599  000048                     	ds	1
  2600  000049                     drawtext@cursor_x:
  2601                           	opt stack 0
  2602  000049                     dec_2_bcd@dec:
  2603                           	opt stack 0
  2604  000049                     scale@scl:
  2605                           	opt stack 0
  2606  000049                     _fround$2975:
  2607                           	opt stack 0
  2608                           
  2609                           ; 3 bytes @ 0x48
  2610  000049                     	ds	1
  2611  00004A                     ??_Update_Screen:
  2612  00004A                     DS3231_Write_Time@Device:
  2613                           	opt stack 0
  2614  00004A                     Update_Setup_Fan_Screen@dc_char1:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x49
  2618  00004A                     	ds	1
  2619  00004B                     DS3231_Write_Time@Address:
  2620                           	opt stack 0
  2621  00004B                     Update_Setup_Fan_Screen@dc_char2:
  2622                           	opt stack 0
  2623                           
  2624                           ; 1 bytes @ 0x4A
  2625  00004B                     	ds	1
  2626  00004C                     Update_Setup_Fan_Screen@dc_char3:
  2627                           	opt stack 0
  2628  00004C                     fround@prec:
  2629                           	opt stack 0
  2630  00004C                     Update_Screen@neg_tempC:
  2631                           	opt stack 0
  2632                           
  2633                           ; 2 bytes @ 0x4B
  2634  00004C                     	ds	1
  2635  00004D                     ?___ftadd:
  2636                           	opt stack 0
  2637  00004D                     ___ftadd@f1:
  2638                           	opt stack 0
  2639                           
  2640                           ; 3 bytes @ 0x4C
  2641  00004D                     	ds	1
  2642  00004E                     Update_Screen@neg_tempF:
  2643                           	opt stack 0
  2644                           
  2645                           ; 2 bytes @ 0x4D
  2646  00004E                     	ds	2
  2647  000050                     ___ftadd@f2:
  2648                           	opt stack 0
  2649                           
  2650                           ; 3 bytes @ 0x4F
  2651  000050                     	ds	3
  2652  000053                     ??___ftadd:
  2653                           
  2654                           ; 0 bytes @ 0x52
  2655  000053                     	ds	3
  2656  000056                     ___ftadd@sign:
  2657                           	opt stack 0
  2658                           
  2659                           ; 1 bytes @ 0x55
  2660  000056                     	ds	1
  2661  000057                     ___ftadd@exp2:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0x56
  2665  000057                     	ds	1
  2666  000058                     ___ftadd@exp1:
  2667                           	opt stack 0
  2668                           
  2669                           ; 1 bytes @ 0x57
  2670  000058                     	ds	1
  2671  000059                     
  2672                           ; 0 bytes @ 0x58
  2673  000059                     	ds	1
  2674  00005A                     tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           postinc0	equ	0xFEE
  2679                           wreg	equ	0xFE8
  2680                           postdec1	equ	0xFE5
  2681                           fsr1l	equ	0xFE1
  2682                           
  2683                           ; 0 bytes @ 0x59
  2684 ;;
  2685 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2686 ;;
  2687 ;; *************** function _main *****************
  2688 ;; Defined at:
  2689 ;;		line 113 in file "Main.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;Total ram usage:        0 bytes
  2708 ;; Hardware stack levels required when called:   13
  2709 ;; This function calls:
  2710 ;;		_DS1621_Read_Temp
  2711 ;;		_DS3231_Read_Time
  2712 ;;		_Decrease_Duty_Cycle
  2713 ;;		_Do_Beep_Bad
  2714 ;;		_Do_Beep_Good
  2715 ;;		_Do_Change_Fan_Timer_Mode_Minus
  2716 ;;		_Do_Change_Fan_Timer_Mode_Plus
  2717 ;;		_Do_Init
  2718 ;;		_Do_Setup_Time
  2719 ;;		_Increase_Duty_Cycle
  2720 ;;		_Initialize_Screen
  2721 ;;		_Monitor_Fan
  2722 ;;		_Read_Volt
  2723 ;;		_Set_D1_RGB
  2724 ;;		_Set_D2_RGB
  2725 ;;		_Setup_Fan_Temp
  2726 ;;		_Toggle_Fan
  2727 ;;		_Turn_Off_Fan
  2728 ;;		_Update_Screen
  2729 ;;		___awdiv
  2730 ;;		___ftge
  2731 ;;		___wmul
  2732 ;;		_check_for_button_input
  2733 ;;		_get_RPM
  2734 ;;		_printf
  2735 ;; This function is called by:
  2736 ;;		Startup code after reset
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text0
  2741  001ADE                     __ptext0:
  2742                           	opt stack 0
  2743  001ADE                     _main:
  2744                           	opt stack 18
  2745                           
  2746                           ;Main.c: 115: Do_Init();
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;incstack = 0
  2750  001ADE  ECEE  F021         	call	_Do_Init	;wreg free
  2751                           
  2752                           ;Main.c: 117: Initialize_Screen();
  2753  001AE2  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  2754                           
  2755                           ;Main.c: 119: TMR3L = 0x00;
  2756  001AE6  0E00               	movlw	0
  2757  001AE8  6EB2               	movwf	4018,c	;volatile
  2758                           
  2759                           ;Main.c: 120: T3CON = 0x03;
  2760  001AEA  0E03               	movlw	3
  2761  001AEC  6EB1               	movwf	4017,c	;volatile
  2762                           
  2763                           ;Main.c: 123: tempSecond = 0xff;
  2764  001AEE  0100               	movlb	0	; () banked
  2765  001AF0  69DD               	setf	_tempSecond& (0+255),b
  2766  001AF2  D000               	goto	l10444
  2767  001AF4                     l10444:
  2768                           
  2769                           ;Main.c: 126: {
  2770                           ;Main.c: 127: DS3231_Read_Time();
  2771  001AF4  EC5A  F021         	call	_DS3231_Read_Time	;wreg free
  2772                           
  2773                           ;Main.c: 129: if(tempSecond != second)
  2774  001AF8  5068               	movf	_second,w,c
  2775  001AFA  0100               	movlb	0	; () banked
  2776  001AFC  19DD               	xorwf	_tempSecond& (0+255),w,b
  2777  001AFE  B4D8               	btfsc	status,2,c
  2778  001B00  D0A5               	goto	l10476
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;Main.c: 130: {
  2782                           ;Main.c: 131: tempSecond = second;
  2783  001B02  C068  F0DD         	movff	_second,_tempSecond
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;Main.c: 132: rpm = get_RPM();
  2787  001B06  EC5A  F023         	call	_get_RPM	;wreg free
  2788  001B0A  C01F  F05C         	movff	?_get_RPM,_rpm
  2789  001B0E  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  2790                           
  2791                           ;Main.c: 135: volt = Read_Volt(1);
  2792  001B12  0E01               	movlw	1
  2793  001B14  EC23  F021         	call	_Read_Volt
  2794  001B18  C03D  F0B8         	movff	?_Read_Volt,_volt
  2795  001B1C  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  2796  001B20  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  2797                           
  2798                           ;Main.c: 136: if (volt > 3.000) light_flag = 1;
  2799  001B24  0E00               	movlw	0
  2800  001B26  6E11               	movwf	___ftge@ff1,c
  2801  001B28  0E40               	movlw	64
  2802  001B2A  6E12               	movwf	___ftge@ff1+1,c
  2803  001B2C  0E40               	movlw	64
  2804  001B2E  6E13               	movwf	___ftge@ff1+2,c
  2805  001B30  C0B8  F014         	movff	_volt,___ftge@ff2
  2806  001B34  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  2807  001B38  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  2808  001B3C  EC86  F01E         	call	___ftge	;wreg free
  2809  001B40  B0D8               	btfsc	status,0,c
  2810  001B42  D004               	goto	l10456
  2811  001B44  0E01               	movlw	1
  2812  001B46  0100               	movlb	0	; () banked
  2813  001B48  6FD1               	movwf	_light_flag& (0+255),b
  2814  001B4A  D000               	goto	l10456
  2815  001B4C                     l10456:
  2816                           
  2817                           ;Main.c: 137: tempC = DS1621_Read_Temp();
  2818  001B4C  EC13  F024         	call	_DS1621_Read_Temp	;wreg free
  2819  001B50  5014               	movf	?_DS1621_Read_Temp,w,c
  2820  001B52  6E69               	movwf	_tempC,c
  2821                           
  2822                           ;Main.c: 138: tempF = (tempC * 9 / 5) + 32;
  2823  001B54  5069               	movf	_tempC,w,c
  2824  001B56  6E11               	movwf	___wmul@multiplier,c
  2825  001B58  6A12               	clrf	___wmul@multiplier+1,c
  2826  001B5A  BE11               	btfsc	___wmul@multiplier,7,c
  2827  001B5C  0612               	decf	___wmul@multiplier+1,f,c
  2828  001B5E  0E00               	movlw	0
  2829  001B60  6E14               	movwf	___wmul@multiplicand+1,c
  2830  001B62  0E09               	movlw	9
  2831  001B64  6E13               	movwf	___wmul@multiplicand,c
  2832  001B66  ECE7  F024         	call	___wmul	;wreg free
  2833  001B6A  C011  F017         	movff	?___wmul,___awdiv@dividend
  2834  001B6E  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2835  001B72  0E00               	movlw	0
  2836  001B74  6E1A               	movwf	___awdiv@divisor+1,c
  2837  001B76  0E05               	movlw	5
  2838  001B78  6E19               	movwf	___awdiv@divisor,c
  2839  001B7A  EC3B  F01E         	call	___awdiv	;wreg free
  2840  001B7E  5017               	movf	?___awdiv,w,c
  2841  001B80  0F20               	addlw	32
  2842  001B82  6E6A               	movwf	_tempF,c
  2843                           
  2844                           ;Main.c: 139: Set_D1_RGB(duty_cycle);
  2845  001B84  5064               	movf	_duty_cycle,w,c
  2846  001B86  ECEC  F022         	call	_Set_D1_RGB
  2847                           
  2848                           ;Main.c: 140: Set_D2_RGB(rpm);
  2849  001B8A  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  2850  001B8E  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  2851  001B92  EC73  F022         	call	_Set_D2_RGB	;wreg free
  2852                           
  2853                           ;Main.c: 142: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2854  001B96  0E75               	movlw	low STR_4
  2855  001B98  0100               	movlb	0	; () banked
  2856  001B9A  6F86               	movwf	printf@f& (0+255),b
  2857  001B9C  0EFE               	movlw	high STR_4
  2858  001B9E  0100               	movlb	0	; () banked
  2859  001BA0  6F87               	movwf	(printf@f+1)& (0+255),b
  2860  001BA2  C065  F088         	movff	_hour,?_printf+2
  2861  001BA6  0100               	movlb	0	; () banked
  2862  001BA8  6B89               	clrf	(?_printf+3)& (0+255),b
  2863  001BAA  C066  F08A         	movff	_minute,?_printf+4
  2864  001BAE  0100               	movlb	0	; () banked
  2865  001BB0  6B8B               	clrf	(?_printf+5)& (0+255),b
  2866  001BB2  C068  F08C         	movff	_second,?_printf+6
  2867  001BB6  0100               	movlb	0	; () banked
  2868  001BB8  6B8D               	clrf	(?_printf+7)& (0+255),b
  2869  001BBA  C067  F08E         	movff	_month,?_printf+8
  2870  001BBE  0100               	movlb	0	; () banked
  2871  001BC0  6B8F               	clrf	(?_printf+9)& (0+255),b
  2872  001BC2  C063  F090         	movff	_day,?_printf+10
  2873  001BC6  0100               	movlb	0	; () banked
  2874  001BC8  6B91               	clrf	(?_printf+11)& (0+255),b
  2875  001BCA  C06B  F092         	movff	_year,?_printf+12
  2876  001BCE  0100               	movlb	0	; () banked
  2877  001BD0  6B93               	clrf	(?_printf+13)& (0+255),b
  2878  001BD2  EC0E  F000         	call	_printf	;wreg free
  2879                           
  2880                           ;Main.c: 143: printf (" Temp = %d C = %d F ", tempC, tempF);
  2881  001BD6  0EF7               	movlw	low STR_5
  2882  001BD8  0100               	movlb	0	; () banked
  2883  001BDA  6F86               	movwf	printf@f& (0+255),b
  2884  001BDC  0EFE               	movlw	high STR_5
  2885  001BDE  0100               	movlb	0	; () banked
  2886  001BE0  6F87               	movwf	(printf@f+1)& (0+255),b
  2887  001BE2  5069               	movf	_tempC,w,c
  2888  001BE4  0100               	movlb	0	; () banked
  2889  001BE6  6F88               	movwf	(?_printf+2)& (0+255),b
  2890  001BE8  6B89               	clrf	(?_printf+3)& (0+255),b
  2891  001BEA  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  2892  001BEC  0789               	decf	(?_printf+3)& (0+255),f,b
  2893  001BEE  506A               	movf	_tempF,w,c
  2894  001BF0  0100               	movlb	0	; () banked
  2895  001BF2  6F8A               	movwf	(?_printf+4)& (0+255),b
  2896  001BF4  6B8B               	clrf	(?_printf+5)& (0+255),b
  2897  001BF6  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  2898  001BF8  078B               	decf	(?_printf+5)& (0+255),f,b
  2899  001BFA  EC0E  F000         	call	_printf	;wreg free
  2900                           
  2901                           ;Main.c: 144: printf ("Light Sensor = %f V", volt);
  2902  001BFE  0E20               	movlw	low STR_6
  2903  001C00  0100               	movlb	0	; () banked
  2904  001C02  6F86               	movwf	printf@f& (0+255),b
  2905  001C04  0EFF               	movlw	high STR_6
  2906  001C06  0100               	movlb	0	; () banked
  2907  001C08  6F87               	movwf	(printf@f+1)& (0+255),b
  2908  001C0A  C0B8  F088         	movff	_volt,?_printf+2
  2909  001C0E  C0B9  F089         	movff	_volt+1,?_printf+3
  2910  001C12  C0BA  F08A         	movff	_volt+2,?_printf+4
  2911  001C16  EC0E  F000         	call	_printf	;wreg free
  2912                           
  2913                           ;Main.c: 145: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_flag);
  2914  001C1A  0E93               	movlw	low STR_7
  2915  001C1C  0100               	movlb	0	; () banked
  2916  001C1E  6F86               	movwf	printf@f& (0+255),b
  2917  001C20  0EFE               	movlw	high STR_7
  2918  001C22  0100               	movlb	0	; () banked
  2919  001C24  6F87               	movwf	(printf@f+1)& (0+255),b
  2920  001C26  C05C  F088         	movff	_rpm,?_printf+2
  2921  001C2A  C05D  F089         	movff	_rpm+1,?_printf+3
  2922  001C2E  C064  F08A         	movff	_duty_cycle,?_printf+4
  2923  001C32  0100               	movlb	0	; () banked
  2924  001C34  6B8B               	clrf	(?_printf+5)& (0+255),b
  2925  001C36  C0D1  F08C         	movff	_light_flag,?_printf+6
  2926  001C3A  0100               	movlb	0	; () banked
  2927  001C3C  6B8D               	clrf	(?_printf+7)& (0+255),b
  2928  001C3E  EC0E  F000         	call	_printf	;wreg free
  2929                           
  2930                           ;Main.c: 147: Monitor_Fan();
  2931  001C42  EC9C  F022         	call	_Monitor_Fan	;wreg free
  2932                           
  2933                           ;Main.c: 149: Update_Screen();
  2934  001C46  EC30  F006         	call	_Update_Screen	;wreg free
  2935  001C4A  D000               	goto	l10476
  2936  001C4C                     l10476:
  2937                           
  2938                           ;Main.c: 150: }
  2939                           ;Main.c: 158: if (check_for_button_input()==1 && SYSTEM_ON == 1)
  2940  001C4C  EC44  F01D         	call	_check_for_button_input	;wreg free
  2941  001C50  06E8               	decf	wreg,f,c
  2942  001C52  A4D8               	btfss	status,2,c
  2943  001C54  D063               	goto	l10520
  2944  001C56  0462               	decf	_SYSTEM_ON,w,c
  2945  001C58  A4D8               	btfss	status,2,c
  2946  001C5A  D060               	goto	l10520
  2947                           
  2948                           ;Main.c: 159: {
  2949                           ;Main.c: 161: printf("Key Location = %d \r\n\n", found);
  2950  001C5C  0ECB               	movlw	low STR_8
  2951  001C5E  0100               	movlb	0	; () banked
  2952  001C60  6F86               	movwf	printf@f& (0+255),b
  2953  001C62  0EFE               	movlw	high STR_8
  2954  001C64  0100               	movlb	0	; () banked
  2955  001C66  6F87               	movwf	(printf@f+1)& (0+255),b
  2956  001C68  C0D0  F088         	movff	_found,?_printf+2
  2957  001C6C  0100               	movlb	0	; () banked
  2958  001C6E  6B89               	clrf	(?_printf+3)& (0+255),b
  2959  001C70  EC0E  F000         	call	_printf	;wreg free
  2960                           
  2961                           ;Main.c: 163: Nec_ok = 0;
  2962  001C74  0E00               	movlw	0
  2963  001C76  0100               	movlb	0	; () banked
  2964  001C78  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  2965  001C7A  0E00               	movlw	0
  2966  001C7C  6FBB               	movwf	_Nec_ok& (0+255),b
  2967                           
  2968                           ;Main.c: 165: switch(found)
  2969  001C7E  D032               	goto	l10518
  2970  001C80                     l10484:
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;Main.c: 169: Do_Beep_Good();
  2974  001C80  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  2975                           
  2976                           ;Main.c: 170: Do_Setup_Time();
  2977  001C84  ECEF  F00F         	call	_Do_Setup_Time	;wreg free
  2978                           
  2979                           ;Main.c: 171: break;
  2980  001C88  D049               	goto	l10520
  2981  001C8A                     l10488:
  2982                           
  2983                           ;Main.c: 174: Do_Beep_Good();
  2984  001C8A  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  2985                           
  2986                           ;Main.c: 175: Setup_Fan_Temp();
  2987  001C8E  EC0E  F011         	call	_Setup_Fan_Temp	;wreg free
  2988                           
  2989                           ;Main.c: 176: break;
  2990  001C92  D044               	goto	l10520
  2991  001C94                     l10492:
  2992                           
  2993                           ;Main.c: 179: Do_Beep_Good();
  2994  001C94  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  2995                           
  2996                           ;Main.c: 180: Do_Change_Fan_Timer_Mode_Minus();
  2997  001C98  ECA6  F024         	call	_Do_Change_Fan_Timer_Mode_Minus	;wreg free
  2998                           
  2999                           ;Main.c: 181: break;
  3000  001C9C  D03F               	goto	l10520
  3001  001C9E                     l10496:
  3002                           
  3003                           ;Main.c: 184: Do_Beep_Good();
  3004  001C9E  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  3005                           
  3006                           ;Main.c: 185: Do_Change_Fan_Timer_Mode_Plus();
  3007  001CA2  EC90  F024         	call	_Do_Change_Fan_Timer_Mode_Plus	;wreg free
  3008                           
  3009                           ;Main.c: 186: break;
  3010  001CA6  D03A               	goto	l10520
  3011  001CA8                     l10500:
  3012                           
  3013                           ;Main.c: 189: Do_Beep_Good();
  3014  001CA8  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  3015                           
  3016                           ;Main.c: 190: Toggle_Fan();
  3017  001CAC  EC45  F026         	call	_Toggle_Fan	;wreg free
  3018                           
  3019                           ;Main.c: 191: break;
  3020  001CB0  D035               	goto	l10520
  3021  001CB2                     l10504:
  3022                           
  3023                           ;Main.c: 194: Do_Beep_Good();
  3024  001CB2  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  3025                           
  3026                           ;Main.c: 195: Decrease_Duty_Cycle();
  3027  001CB6  EC0E  F025         	call	_Decrease_Duty_Cycle	;wreg free
  3028                           
  3029                           ;Main.c: 196: break;
  3030  001CBA  D030               	goto	l10520
  3031  001CBC                     l10506:
  3032                           
  3033                           ;Main.c: 199: Do_Beep_Good();
  3034  001CBC  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  3035                           
  3036                           ;Main.c: 200: Increase_Duty_Cycle();
  3037  001CC0  EC4A  F024         	call	_Increase_Duty_Cycle	;wreg free
  3038                           
  3039                           ;Main.c: 201: break;
  3040  001CC4  D02B               	goto	l10520
  3041  001CC6                     l10508:
  3042                           
  3043                           ;Main.c: 204: Do_Beep_Good();
  3044  001CC6  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  3045                           
  3046                           ;Main.c: 205: if (FANMODE == 1)
  3047  001CCA  0100               	movlb	0	; () banked
  3048  001CCC  05C2               	decf	_FANMODE& (0+255),w,b
  3049  001CCE  A4D8               	btfss	status,2,c
  3050  001CD0  D002               	goto	l10514
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;Main.c: 206: FANMODE = 0;
  3054  001CD2  0E00               	movlw	0
  3055  001CD4  D001               	goto	L1
  3056  001CD6                     l10514:
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;Main.c: 207: else
  3060                           ;Main.c: 208: FANMODE = 1;
  3061  001CD6  0E01               	movlw	1
  3062  001CD8                     L1:
  3063  001CD8  0100               	movlb	0	; () banked
  3064  001CDA  6FC2               	movwf	_FANMODE& (0+255),b
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;Main.c: 209: break;
  3068  001CDC  D01F               	goto	l10520
  3069  001CDE                     l10516:
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;Main.c: 212: Do_Beep_Bad();
  3073  001CDE  ECF4  F025         	call	_Do_Beep_Bad	;wreg free
  3074                           
  3075                           ;Main.c: 213: }
  3076  001CE2  D01C               	goto	l10520
  3077  001CE4                     l10518:
  3078  001CE4  0100               	movlb	0	; () banked
  3079  001CE6  51D0               	movf	_found& (0+255),w,b
  3080                           
  3081                           ; Switch size 1, requested type "space"
  3082                           ; Number of cases is 8, Range of values is 0 to 8
  3083                           ; switch strategies available:
  3084                           ; Name         Instructions Cycles
  3085                           ; simple_byte           25    13 (average)
  3086                           ;	Chosen strategy is simple_byte
  3087  001CE8  0A00               	xorlw	0	; case 0
  3088  001CEA  B4D8               	btfsc	status,2,c
  3089  001CEC  D7C9               	goto	l10484
  3090  001CEE  0A01               	xorlw	1	; case 1
  3091  001CF0  B4D8               	btfsc	status,2,c
  3092  001CF2  D7CB               	goto	l10488
  3093  001CF4  0A02               	xorlw	2	; case 3
  3094  001CF6  B4D8               	btfsc	status,2,c
  3095  001CF8  D7CD               	goto	l10492
  3096  001CFA  0A07               	xorlw	7	; case 4
  3097  001CFC  B4D8               	btfsc	status,2,c
  3098  001CFE  D7CF               	goto	l10496
  3099  001D00  0A01               	xorlw	1	; case 5
  3100  001D02  B4D8               	btfsc	status,2,c
  3101  001D04  D7D1               	goto	l10500
  3102  001D06  0A03               	xorlw	3	; case 6
  3103  001D08  B4D8               	btfsc	status,2,c
  3104  001D0A  D7D3               	goto	l10504
  3105  001D0C  0A01               	xorlw	1	; case 7
  3106  001D0E  B4D8               	btfsc	status,2,c
  3107  001D10  D7D5               	goto	l10506
  3108  001D12  0A0F               	xorlw	15	; case 8
  3109  001D14  B4D8               	btfsc	status,2,c
  3110  001D16  D7D7               	goto	l10508
  3111  001D18  D7E2               	goto	l10516
  3112                           
  3113                           ; BSR set to: 0
  3114  001D1A  D000               	goto	l10520
  3115  001D1C                     l10520:
  3116                           
  3117                           ;Main.c: 214: }
  3118                           ;Main.c: 222: if (INT0_flag == 1 || light_flag == 1)
  3119  001D1C  0100               	movlb	0	; () banked
  3120  001D1E  05C4               	decf	_INT0_flag& (0+255),w,b
  3121  001D20  B4D8               	btfsc	status,2,c
  3122  001D22  D004               	goto	l10524
  3123                           
  3124                           ; BSR set to: 0
  3125  001D24  0100               	movlb	0	; () banked
  3126  001D26  05D1               	decf	_light_flag& (0+255),w,b
  3127  001D28  A4D8               	btfss	status,2,c
  3128  001D2A  D6E4               	goto	l10444
  3129  001D2C                     l10524:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;Main.c: 223: {
  3133                           ;Main.c: 224: INT0_flag = 0;
  3134  001D2C  0E00               	movlw	0
  3135  001D2E  0100               	movlb	0	; () banked
  3136  001D30  6FC4               	movwf	_INT0_flag& (0+255),b
  3137                           
  3138                           ;Main.c: 225: light_flag = 0;
  3139  001D32  0E00               	movlw	0
  3140  001D34  0100               	movlb	0	; () banked
  3141  001D36  6FD1               	movwf	_light_flag& (0+255),b
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;Main.c: 227: if (SYSTEM_ON == 1)
  3145  001D38  0462               	decf	_SYSTEM_ON,w,c
  3146  001D3A  A4D8               	btfss	status,2,c
  3147  001D3C  D01C               	goto	l10538
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;Main.c: 228: {
  3151                           ;Main.c: 229: printf ("The system will now turn off. \r\n\n");
  3152  001D3E  0E32               	movlw	low STR_9
  3153  001D40  0100               	movlb	0	; () banked
  3154  001D42  6F86               	movwf	printf@f& (0+255),b
  3155  001D44  0EFE               	movlw	high STR_9
  3156  001D46  0100               	movlb	0	; () banked
  3157  001D48  6F87               	movwf	(printf@f+1)& (0+255),b
  3158  001D4A  EC0E  F000         	call	_printf	;wreg free
  3159                           
  3160                           ;Main.c: 230: SYSTEM_ON = 0;
  3161  001D4E  0E00               	movlw	0
  3162  001D50  6E62               	movwf	_SYSTEM_ON,c
  3163                           
  3164                           ;Main.c: 231: Turn_Off_Fan();
  3165  001D52  ECD8  F025         	call	_Turn_Off_Fan	;wreg free
  3166                           
  3167                           ;Main.c: 232: FAN_TIMER_MODE = 0;
  3168  001D56  0E00               	movlw	0
  3169  001D58  6E60               	movwf	_FAN_TIMER_MODE,c
  3170                           
  3171                           ;Main.c: 233: FAN_TIMER_TIME = 0;
  3172  001D5A  0E00               	movlw	0
  3173  001D5C  0100               	movlb	0	; () banked
  3174  001D5E  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;Main.c: 234: printf ("The system is now OFF. \r\n\n");
  3178  001D60  0EB0               	movlw	low STR_10
  3179  001D62  0100               	movlb	0	; () banked
  3180  001D64  6F86               	movwf	printf@f& (0+255),b
  3181  001D66  0EFE               	movlw	high STR_10
  3182  001D68  0100               	movlb	0	; () banked
  3183  001D6A  6F87               	movwf	(printf@f+1)& (0+255),b
  3184  001D6C  EC0E  F000         	call	_printf	;wreg free
  3185                           
  3186                           ;Main.c: 235: Initialize_Screen();
  3187  001D70  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  3188                           
  3189                           ;Main.c: 236: }
  3190  001D74  D6BF               	goto	l10444
  3191  001D76                     l10538:
  3192                           
  3193                           ;Main.c: 237: else if (SYSTEM_ON == 0)
  3194  001D76  5062               	movf	_SYSTEM_ON,w,c
  3195  001D78  A4D8               	btfss	status,2,c
  3196  001D7A  D6BC               	goto	l10444
  3197                           
  3198                           ;Main.c: 238: {
  3199                           ;Main.c: 239: printf ("The system will now turn on. \r\n\n");
  3200  001D7C  0E54               	movlw	low STR_11
  3201  001D7E  0100               	movlb	0	; () banked
  3202  001D80  6F86               	movwf	printf@f& (0+255),b
  3203  001D82  0EFE               	movlw	high STR_11
  3204  001D84  0100               	movlb	0	; () banked
  3205  001D86  6F87               	movwf	(printf@f+1)& (0+255),b
  3206  001D88  EC0E  F000         	call	_printf	;wreg free
  3207                           
  3208                           ;Main.c: 240: SYSTEM_ON = 1;
  3209  001D8C  0E01               	movlw	1
  3210  001D8E  6E62               	movwf	_SYSTEM_ON,c
  3211                           
  3212                           ;Main.c: 241: Initialize_Screen();
  3213  001D90  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  3214  001D94  D6AF               	goto	l10444
  3215  001D96  EF0C  F000         	goto	start
  3216  001D9A                     __end_of_main:
  3217                           	opt stack 0
  3218                           tblptru	equ	0xFF8
  3219                           tblptrh	equ	0xFF7
  3220                           tblptrl	equ	0xFF6
  3221                           tablat	equ	0xFF5
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           postdec1	equ	0xFE5
  3225                           fsr1l	equ	0xFE1
  3226                           status	equ	0xFD8
  3227                           
  3228 ;; *************** function _Update_Screen *****************
  3229 ;; Defined at:
  3230 ;;		line 100 in file "Main_Screen.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;		None
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  neg_tempF       2   77[COMRAM] int 
  3235 ;;  neg_tempC       2   75[COMRAM] int 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;		None               void
  3238 ;; Registers used:
  3239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;Total ram usage:        6 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:   10
  3252 ;; This function calls:
  3253 ;;		___awdiv
  3254 ;;		___awmod
  3255 ;;		___ftmul
  3256 ;;		___fttol
  3257 ;;		_drawtext
  3258 ;;		_strcpy
  3259 ;; This function is called by:
  3260 ;;		_main
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text1
  3265  000C60                     __ptext1:
  3266                           	opt stack 0
  3267  000C60                     _Update_Screen:
  3268                           	opt stack 20
  3269                           
  3270                           ;Main_Screen.c: 102: if (SYSTEM_ON == 1)
  3271                           
  3272                           ;incstack = 0
  3273  000C60  0462               	decf	_SYSTEM_ON,w,c
  3274  000C62  A4D8               	btfss	status,2,c
  3275  000C64  D37B               	goto	l979
  3276                           
  3277                           ;Main_Screen.c: 103: {
  3278                           ;Main_Screen.c: 104: if ((tempC & 0x80) == 0x80)
  3279  000C66  C069  F04A         	movff	_tempC,??_Update_Screen
  3280  000C6A  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3281  000C6C  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3282  000C6E  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3283  000C70  AE4A               	btfss	??_Update_Screen,7,c
  3284  000C72  D029               	goto	l9994
  3285                           
  3286                           ;Main_Screen.c: 105: {
  3287                           ;Main_Screen.c: 106: tempC_Txt[0] = '-';
  3288  000C74  0E2D               	movlw	45
  3289  000C76  0100               	movlb	0	; () banked
  3290  000C78  6FF8               	movwf	_tempC_Txt& (0+255),b
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;Main_Screen.c: 107: int neg_tempC = -tempC;
  3294  000C7A  C069  F04A         	movff	_tempC,??_Update_Screen
  3295  000C7E  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3296  000C80  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3297  000C82  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3298  000C84  1E4A               	comf	??_Update_Screen,f,c
  3299  000C86  1E4B               	comf	??_Update_Screen+1,f,c
  3300  000C88  4A4A               	infsnz	??_Update_Screen,f,c
  3301  000C8A  2A4B               	incf	??_Update_Screen+1,f,c
  3302  000C8C  C04A  F04C         	movff	??_Update_Screen,Update_Screen@neg_tempC
  3303  000C90  C04B  F04D         	movff	??_Update_Screen+1,Update_Screen@neg_tempC+1
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;Main_Screen.c: 108: tempC_Txt[1] = (neg_tempC & 0x7f)/10 + '0';
  3307  000C94  0E7F               	movlw	127
  3308  000C96  144C               	andwf	Update_Screen@neg_tempC,w,c
  3309  000C98  6E17               	movwf	___awdiv@dividend,c
  3310  000C9A  6A18               	clrf	___awdiv@dividend+1,c
  3311  000C9C  0E00               	movlw	0
  3312  000C9E  6E1A               	movwf	___awdiv@divisor+1,c
  3313  000CA0  0E0A               	movlw	10
  3314  000CA2  6E19               	movwf	___awdiv@divisor,c
  3315  000CA4  EC3B  F01E         	call	___awdiv	;wreg free
  3316  000CA8  5017               	movf	?___awdiv,w,c
  3317  000CAA  0F30               	addlw	48
  3318  000CAC  0100               	movlb	0	; () banked
  3319  000CAE  6FF9               	movwf	(_tempC_Txt+1)& (0+255),b
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;Main_Screen.c: 109: tempC_Txt[2] = (neg_tempC & 0x7f)%10 + '0';
  3323  000CB0  0E7F               	movlw	127
  3324  000CB2  144C               	andwf	Update_Screen@neg_tempC,w,c
  3325  000CB4  6E3D               	movwf	___awmod@dividend,c
  3326  000CB6  6A3E               	clrf	___awmod@dividend+1,c
  3327  000CB8  0E00               	movlw	0
  3328  000CBA  6E40               	movwf	___awmod@divisor+1,c
  3329  000CBC  0E0A               	movlw	10
  3330  000CBE  6E3F               	movwf	___awmod@divisor,c
  3331  000CC0  EC72  F020         	call	___awmod	;wreg free
  3332  000CC4  D01D               	goto	L2
  3333  000CC6                     l9994:
  3334                           
  3335                           ;Main_Screen.c: 111: else
  3336                           ;Main_Screen.c: 112: {
  3337                           ;Main_Screen.c: 113: tempC_Txt[0] = '+';
  3338  000CC6  0E2B               	movlw	43
  3339  000CC8  0100               	movlb	0	; () banked
  3340  000CCA  6FF8               	movwf	_tempC_Txt& (0+255),b
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;Main_Screen.c: 114: tempC_Txt[1] = tempC/10 + '0';
  3344  000CCC  5069               	movf	_tempC,w,c
  3345  000CCE  6E17               	movwf	___awdiv@dividend,c
  3346  000CD0  6A18               	clrf	___awdiv@dividend+1,c
  3347  000CD2  BE17               	btfsc	___awdiv@dividend,7,c
  3348  000CD4  0618               	decf	___awdiv@dividend+1,f,c
  3349  000CD6  0E00               	movlw	0
  3350  000CD8  6E1A               	movwf	___awdiv@divisor+1,c
  3351  000CDA  0E0A               	movlw	10
  3352  000CDC  6E19               	movwf	___awdiv@divisor,c
  3353  000CDE  EC3B  F01E         	call	___awdiv	;wreg free
  3354  000CE2  5017               	movf	?___awdiv,w,c
  3355  000CE4  0F30               	addlw	48
  3356  000CE6  0100               	movlb	0	; () banked
  3357  000CE8  6FF9               	movwf	(_tempC_Txt+1)& (0+255),b
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;Main_Screen.c: 115: tempC_Txt[2] = tempC%10 + '0';
  3361  000CEA  5069               	movf	_tempC,w,c
  3362  000CEC  6E3D               	movwf	___awmod@dividend,c
  3363  000CEE  6A3E               	clrf	___awmod@dividend+1,c
  3364  000CF0  BE3D               	btfsc	___awmod@dividend,7,c
  3365  000CF2  063E               	decf	___awmod@dividend+1,f,c
  3366  000CF4  0E00               	movlw	0
  3367  000CF6  6E40               	movwf	___awmod@divisor+1,c
  3368  000CF8  0E0A               	movlw	10
  3369  000CFA  6E3F               	movwf	___awmod@divisor,c
  3370  000CFC  EC72  F020         	call	___awmod	;wreg free
  3371  000D00                     L2:
  3372  000D00  503D               	movf	?___awmod,w,c
  3373  000D02  0F30               	addlw	48
  3374  000D04  0100               	movlb	0	; () banked
  3375  000D06  6FFA               	movwf	(_tempC_Txt+2)& (0+255),b
  3376  000D08  D000               	goto	l10000
  3377  000D0A                     l10000:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;Main_Screen.c: 116: }
  3381                           ;Main_Screen.c: 118: if (tempF < 0)
  3382  000D0A  AE6A               	btfss	_tempF,7,c
  3383  000D0C  D041               	goto	l10012
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;Main_Screen.c: 119: {
  3387                           ;Main_Screen.c: 120: tempF_Txt[0] = '-';
  3388  000D0E  0E2D               	movlw	45
  3389  000D10  0100               	movlb	0	; () banked
  3390  000D12  6FDF               	movwf	_tempF_Txt& (0+255),b
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;Main_Screen.c: 121: int neg_tempF = -tempF;
  3394  000D14  C06A  F04A         	movff	_tempF,??_Update_Screen
  3395  000D18  6A4B               	clrf	(??_Update_Screen+1)& (0+255),c
  3396  000D1A  BE4A               	btfsc	??_Update_Screen& (0+255),7,c
  3397  000D1C  064B               	decf	(??_Update_Screen+1)& (0+255),f,c
  3398  000D1E  1E4A               	comf	??_Update_Screen,f,c
  3399  000D20  1E4B               	comf	??_Update_Screen+1,f,c
  3400  000D22  4A4A               	infsnz	??_Update_Screen,f,c
  3401  000D24  2A4B               	incf	??_Update_Screen+1,f,c
  3402  000D26  C04A  F04E         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3403  000D2A  C04B  F04F         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;Main_Screen.c: 122: tempF_Txt[1] = neg_tempF/100 + '0';
  3407  000D2E  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3408  000D32  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3409  000D36  0E00               	movlw	0
  3410  000D38  6E1A               	movwf	___awdiv@divisor+1,c
  3411  000D3A  0E64               	movlw	100
  3412  000D3C  6E19               	movwf	___awdiv@divisor,c
  3413  000D3E  EC3B  F01E         	call	___awdiv	;wreg free
  3414  000D42  5017               	movf	?___awdiv,w,c
  3415  000D44  0F30               	addlw	48
  3416  000D46  0100               	movlb	0	; () banked
  3417  000D48  6FE0               	movwf	(_tempF_Txt+1)& (0+255),b
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;Main_Screen.c: 123: tempF_Txt[2] = (neg_tempF/10)%10 + '0';
  3421  000D4A  0E00               	movlw	0
  3422  000D4C  6E1A               	movwf	___awdiv@divisor+1,c
  3423  000D4E  0E0A               	movlw	10
  3424  000D50  6E19               	movwf	___awdiv@divisor,c
  3425  000D52  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3426  000D56  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3427  000D5A  EC3B  F01E         	call	___awdiv	;wreg free
  3428  000D5E  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3429  000D62  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3430  000D66  0E00               	movlw	0
  3431  000D68  6E40               	movwf	___awmod@divisor+1,c
  3432  000D6A  0E0A               	movlw	10
  3433  000D6C  6E3F               	movwf	___awmod@divisor,c
  3434  000D6E  EC72  F020         	call	___awmod	;wreg free
  3435  000D72  503D               	movf	?___awmod,w,c
  3436  000D74  0F30               	addlw	48
  3437  000D76  0100               	movlb	0	; () banked
  3438  000D78  6FE1               	movwf	(_tempF_Txt+2)& (0+255),b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;Main_Screen.c: 124: tempF_Txt[3] = neg_tempF%10 + '0';
  3442  000D7A  C04E  F03D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3443  000D7E  C04F  F03E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3444  000D82  0E00               	movlw	0
  3445  000D84  6E40               	movwf	___awmod@divisor+1,c
  3446  000D86  0E0A               	movlw	10
  3447  000D88  6E3F               	movwf	___awmod@divisor,c
  3448  000D8A  EC72  F020         	call	___awmod	;wreg free
  3449  000D8E  D036               	goto	L3
  3450  000D90                     l10012:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;Main_Screen.c: 126: else
  3454                           ;Main_Screen.c: 127: {
  3455                           ;Main_Screen.c: 128: tempF_Txt[0] = '+';
  3456  000D90  0E2B               	movlw	43
  3457  000D92  0100               	movlb	0	; () banked
  3458  000D94  6FDF               	movwf	_tempF_Txt& (0+255),b
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;Main_Screen.c: 129: tempF_Txt[1] = tempF/100 + '0';
  3462  000D96  506A               	movf	_tempF,w,c
  3463  000D98  6E17               	movwf	___awdiv@dividend,c
  3464  000D9A  6A18               	clrf	___awdiv@dividend+1,c
  3465  000D9C  BE17               	btfsc	___awdiv@dividend,7,c
  3466  000D9E  0618               	decf	___awdiv@dividend+1,f,c
  3467  000DA0  0E00               	movlw	0
  3468  000DA2  6E1A               	movwf	___awdiv@divisor+1,c
  3469  000DA4  0E64               	movlw	100
  3470  000DA6  6E19               	movwf	___awdiv@divisor,c
  3471  000DA8  EC3B  F01E         	call	___awdiv	;wreg free
  3472  000DAC  5017               	movf	?___awdiv,w,c
  3473  000DAE  0F30               	addlw	48
  3474  000DB0  0100               	movlb	0	; () banked
  3475  000DB2  6FE0               	movwf	(_tempF_Txt+1)& (0+255),b
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;Main_Screen.c: 130: tempF_Txt[2] = (tempF/10)%10 + '0';
  3479  000DB4  0E00               	movlw	0
  3480  000DB6  6E1A               	movwf	___awdiv@divisor+1,c
  3481  000DB8  0E0A               	movlw	10
  3482  000DBA  6E19               	movwf	___awdiv@divisor,c
  3483  000DBC  506A               	movf	_tempF,w,c
  3484  000DBE  6E17               	movwf	___awdiv@dividend,c
  3485  000DC0  6A18               	clrf	___awdiv@dividend+1,c
  3486  000DC2  BE17               	btfsc	___awdiv@dividend,7,c
  3487  000DC4  0618               	decf	___awdiv@dividend+1,f,c
  3488  000DC6  EC3B  F01E         	call	___awdiv	;wreg free
  3489  000DCA  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3490  000DCE  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3491  000DD2  0E00               	movlw	0
  3492  000DD4  6E40               	movwf	___awmod@divisor+1,c
  3493  000DD6  0E0A               	movlw	10
  3494  000DD8  6E3F               	movwf	___awmod@divisor,c
  3495  000DDA  EC72  F020         	call	___awmod	;wreg free
  3496  000DDE  503D               	movf	?___awmod,w,c
  3497  000DE0  0F30               	addlw	48
  3498  000DE2  0100               	movlb	0	; () banked
  3499  000DE4  6FE1               	movwf	(_tempF_Txt+2)& (0+255),b
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;Main_Screen.c: 131: tempF_Txt[3] = tempF%10 + '0';
  3503  000DE6  506A               	movf	_tempF,w,c
  3504  000DE8  6E3D               	movwf	___awmod@dividend,c
  3505  000DEA  6A3E               	clrf	___awmod@dividend+1,c
  3506  000DEC  BE3D               	btfsc	___awmod@dividend,7,c
  3507  000DEE  063E               	decf	___awmod@dividend+1,f,c
  3508  000DF0  0E00               	movlw	0
  3509  000DF2  6E40               	movwf	___awmod@divisor+1,c
  3510  000DF4  0E0A               	movlw	10
  3511  000DF6  6E3F               	movwf	___awmod@divisor,c
  3512  000DF8  EC72  F020         	call	___awmod	;wreg free
  3513  000DFC                     L3:
  3514  000DFC  503D               	movf	?___awmod,w,c
  3515  000DFE  0F30               	addlw	48
  3516  000E00  0100               	movlb	0	; () banked
  3517  000E02  6FE2               	movwf	(_tempF_Txt+3)& (0+255),b
  3518  000E04  D000               	goto	l10020
  3519  000E06                     l10020:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;Main_Screen.c: 132: }
  3523                           ;Main_Screen.c: 134: time_Txt[0] = (hour>>4) + '0';
  3524  000E06  3865               	swapf	_hour,w,c
  3525  000E08  0B0F               	andlw	15
  3526  000E0A  0F30               	addlw	48
  3527  000E0C  0101               	movlb	1	; () banked
  3528  000E0E  6F6E               	movwf	_time_Txt& (0+255),b
  3529                           
  3530                           ; BSR set to: 1
  3531                           ;Main_Screen.c: 135: time_Txt[1] = (hour & 0x0f)+ '0';
  3532  000E10  5065               	movf	_hour,w,c
  3533  000E12  0B0F               	andlw	15
  3534  000E14  0F30               	addlw	48
  3535  000E16  0101               	movlb	1	; () banked
  3536  000E18  6F6F               	movwf	(_time_Txt+1)& (0+255),b
  3537                           
  3538                           ; BSR set to: 1
  3539                           ;Main_Screen.c: 136: time_Txt[3] = (minute>>4) + '0';
  3540  000E1A  3866               	swapf	_minute,w,c
  3541  000E1C  0B0F               	andlw	15
  3542  000E1E  0F30               	addlw	48
  3543  000E20  0101               	movlb	1	; () banked
  3544  000E22  6F71               	movwf	(_time_Txt+3)& (0+255),b
  3545                           
  3546                           ; BSR set to: 1
  3547                           ;Main_Screen.c: 137: time_Txt[4] = (minute & 0x0f) + '0';
  3548  000E24  5066               	movf	_minute,w,c
  3549  000E26  0B0F               	andlw	15
  3550  000E28  0F30               	addlw	48
  3551  000E2A  0101               	movlb	1	; () banked
  3552  000E2C  6F72               	movwf	(_time_Txt+4)& (0+255),b
  3553                           
  3554                           ; BSR set to: 1
  3555                           ;Main_Screen.c: 138: time_Txt[6] = (second>>4) + '0';
  3556  000E2E  3868               	swapf	_second,w,c
  3557  000E30  0B0F               	andlw	15
  3558  000E32  0F30               	addlw	48
  3559  000E34  0101               	movlb	1	; () banked
  3560  000E36  6F74               	movwf	(_time_Txt+6)& (0+255),b
  3561                           
  3562                           ; BSR set to: 1
  3563                           ;Main_Screen.c: 139: time_Txt[7] = (second & 0x0f) + '0';
  3564  000E38  5068               	movf	_second,w,c
  3565  000E3A  0B0F               	andlw	15
  3566  000E3C  0F30               	addlw	48
  3567  000E3E  0101               	movlb	1	; () banked
  3568  000E40  6F75               	movwf	(_time_Txt+7)& (0+255),b
  3569                           
  3570                           ; BSR set to: 1
  3571                           ;Main_Screen.c: 140: date_Txt[0] = (month>>4) + '0';
  3572  000E42  3867               	swapf	_month,w,c
  3573  000E44  0B0F               	andlw	15
  3574  000E46  0F30               	addlw	48
  3575  000E48  0101               	movlb	1	; () banked
  3576  000E4A  6F53               	movwf	_date_Txt& (0+255),b
  3577                           
  3578                           ; BSR set to: 1
  3579                           ;Main_Screen.c: 141: date_Txt[1] = (month & 0x0f) + '0';
  3580  000E4C  5067               	movf	_month,w,c
  3581  000E4E  0B0F               	andlw	15
  3582  000E50  0F30               	addlw	48
  3583  000E52  0101               	movlb	1	; () banked
  3584  000E54  6F54               	movwf	(_date_Txt+1)& (0+255),b
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;Main_Screen.c: 142: date_Txt[3] = (day>>4) + '0';
  3588  000E56  3863               	swapf	_day,w,c
  3589  000E58  0B0F               	andlw	15
  3590  000E5A  0F30               	addlw	48
  3591  000E5C  0101               	movlb	1	; () banked
  3592  000E5E  6F56               	movwf	(_date_Txt+3)& (0+255),b
  3593                           
  3594                           ; BSR set to: 1
  3595                           ;Main_Screen.c: 143: date_Txt[4] = (day & 0x0f) + '0';
  3596  000E60  5063               	movf	_day,w,c
  3597  000E62  0B0F               	andlw	15
  3598  000E64  0F30               	addlw	48
  3599  000E66  0101               	movlb	1	; () banked
  3600  000E68  6F57               	movwf	(_date_Txt+4)& (0+255),b
  3601                           
  3602                           ; BSR set to: 1
  3603                           ;Main_Screen.c: 144: date_Txt[6] = (year>>4) + '0';
  3604  000E6A  386B               	swapf	_year,w,c
  3605  000E6C  0B0F               	andlw	15
  3606  000E6E  0F30               	addlw	48
  3607  000E70  0101               	movlb	1	; () banked
  3608  000E72  6F59               	movwf	(_date_Txt+6)& (0+255),b
  3609                           
  3610                           ; BSR set to: 1
  3611                           ;Main_Screen.c: 145: date_Txt[7] = (year & 0x0f) + '0';
  3612  000E74  506B               	movf	_year,w,c
  3613  000E76  0B0F               	andlw	15
  3614  000E78  0F30               	addlw	48
  3615  000E7A  0101               	movlb	1	; () banked
  3616  000E7C  6F5A               	movwf	(_date_Txt+7)& (0+255),b
  3617                           
  3618                           ; BSR set to: 1
  3619                           ;Main_Screen.c: 147: if (FAN_TIMER_MODE == 0)
  3620  000E7E  5060               	movf	_FAN_TIMER_MODE,w,c
  3621  000E80  A4D8               	btfss	status,2,c
  3622  000E82  D00B               	goto	l10048
  3623                           
  3624                           ; BSR set to: 1
  3625                           ;Main_Screen.c: 148: {
  3626                           ;Main_Screen.c: 149: strcpy(Fan_Timer_Mode_Txt, "OFF");
  3627  000E84  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3628  000E86  6E11               	movwf	strcpy@to,c
  3629  000E88  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3630  000E8A  6E12               	movwf	strcpy@to+1,c
  3631  000E8C  0EB3               	movlw	low (STR_25+7)
  3632  000E8E  6E13               	movwf	strcpy@from,c
  3633  000E90  0EFF               	movlw	high (STR_25+7)
  3634  000E92  6E14               	movwf	strcpy@from+1,c
  3635  000E94  EC31  F024         	call	_strcpy	;wreg free
  3636                           
  3637                           ;Main_Screen.c: 150: }
  3638  000E98  D02C               	goto	l10060
  3639  000E9A                     l10048:
  3640                           
  3641                           ;Main_Screen.c: 151: else if (FAN_TIMER_MODE == 1)
  3642  000E9A  0460               	decf	_FAN_TIMER_MODE,w,c
  3643  000E9C  A4D8               	btfss	status,2,c
  3644  000E9E  D00B               	goto	l10052
  3645                           
  3646                           ;Main_Screen.c: 152: {
  3647                           ;Main_Screen.c: 153: strcpy(Fan_Timer_Mode_Txt, "TM1");
  3648  000EA0  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3649  000EA2  6E11               	movwf	strcpy@to,c
  3650  000EA4  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3651  000EA6  6E12               	movwf	strcpy@to+1,c
  3652  000EA8  0EE5               	movlw	low STR_27
  3653  000EAA  6E13               	movwf	strcpy@from,c
  3654  000EAC  0EFF               	movlw	high STR_27
  3655  000EAE  6E14               	movwf	strcpy@from+1,c
  3656  000EB0  EC31  F024         	call	_strcpy	;wreg free
  3657                           
  3658                           ;Main_Screen.c: 154: }
  3659  000EB4  D01E               	goto	l10060
  3660  000EB6                     l10052:
  3661                           
  3662                           ;Main_Screen.c: 155: else if (FAN_TIMER_MODE == 2)
  3663  000EB6  0E02               	movlw	2
  3664  000EB8  1860               	xorwf	_FAN_TIMER_MODE,w,c
  3665  000EBA  A4D8               	btfss	status,2,c
  3666  000EBC  D00B               	goto	l10056
  3667                           
  3668                           ;Main_Screen.c: 156: {
  3669                           ;Main_Screen.c: 157: strcpy(Fan_Timer_Mode_Txt, "TM2");
  3670  000EBE  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3671  000EC0  6E11               	movwf	strcpy@to,c
  3672  000EC2  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3673  000EC4  6E12               	movwf	strcpy@to+1,c
  3674  000EC6  0EE9               	movlw	low STR_28
  3675  000EC8  6E13               	movwf	strcpy@from,c
  3676  000ECA  0EFF               	movlw	high STR_28
  3677  000ECC  6E14               	movwf	strcpy@from+1,c
  3678  000ECE  EC31  F024         	call	_strcpy	;wreg free
  3679                           
  3680                           ;Main_Screen.c: 158: }
  3681  000ED2  D00F               	goto	l10060
  3682  000ED4                     l10056:
  3683                           
  3684                           ;Main_Screen.c: 159: else if (FAN_TIMER_MODE == 3)
  3685  000ED4  0E03               	movlw	3
  3686  000ED6  1860               	xorwf	_FAN_TIMER_MODE,w,c
  3687  000ED8  A4D8               	btfss	status,2,c
  3688  000EDA  D00B               	goto	l10060
  3689                           
  3690                           ;Main_Screen.c: 160: {
  3691                           ;Main_Screen.c: 161: strcpy(Fan_Timer_Mode_Txt, "TM3");
  3692  000EDC  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  3693  000EDE  6E11               	movwf	strcpy@to,c
  3694  000EE0  0E00               	movlw	high _Fan_Timer_Mode_Txt
  3695  000EE2  6E12               	movwf	strcpy@to+1,c
  3696  000EE4  0EED               	movlw	low STR_29
  3697  000EE6  6E13               	movwf	strcpy@from,c
  3698  000EE8  0EFF               	movlw	high STR_29
  3699  000EEA  6E14               	movwf	strcpy@from+1,c
  3700  000EEC  EC31  F024         	call	_strcpy	;wreg free
  3701  000EF0  D000               	goto	l10060
  3702  000EF2                     l10060:
  3703                           
  3704                           ;Main_Screen.c: 162: }
  3705                           ;Main_Screen.c: 164: Fan_Timer_Txt[0] = FAN_TIMER_TIME/100 + '0';
  3706  000EF2  C0C3  F017         	movff	_FAN_TIMER_TIME,___awdiv@dividend
  3707  000EF6  6A18               	clrf	___awdiv@dividend+1,c
  3708  000EF8  0E00               	movlw	0
  3709  000EFA  6E1A               	movwf	___awdiv@divisor+1,c
  3710  000EFC  0E64               	movlw	100
  3711  000EFE  6E19               	movwf	___awdiv@divisor,c
  3712  000F00  EC3B  F01E         	call	___awdiv	;wreg free
  3713  000F04  5017               	movf	?___awdiv,w,c
  3714  000F06  0F30               	addlw	48
  3715  000F08  0100               	movlb	0	; () banked
  3716  000F0A  6FF4               	movwf	_Fan_Timer_Txt& (0+255),b
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;Main_Screen.c: 165: Fan_Timer_Txt[1] = FAN_TIMER_TIME/10 + '0';
  3720  000F0C  C0C3  F017         	movff	_FAN_TIMER_TIME,___awdiv@dividend
  3721  000F10  6A18               	clrf	___awdiv@dividend+1,c
  3722  000F12  0E00               	movlw	0
  3723  000F14  6E1A               	movwf	___awdiv@divisor+1,c
  3724  000F16  0E0A               	movlw	10
  3725  000F18  6E19               	movwf	___awdiv@divisor,c
  3726  000F1A  EC3B  F01E         	call	___awdiv	;wreg free
  3727  000F1E  5017               	movf	?___awdiv,w,c
  3728  000F20  0F30               	addlw	48
  3729  000F22  0100               	movlb	0	; () banked
  3730  000F24  6FF5               	movwf	(_Fan_Timer_Txt+1)& (0+255),b
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;Main_Screen.c: 166: Fan_Timer_Txt[2] = FAN_TIMER_TIME%10 + '0';
  3734  000F26  C0C3  F03D         	movff	_FAN_TIMER_TIME,___awmod@dividend
  3735  000F2A  6A3E               	clrf	___awmod@dividend+1,c
  3736  000F2C  0E00               	movlw	0
  3737  000F2E  6E40               	movwf	___awmod@divisor+1,c
  3738  000F30  0E0A               	movlw	10
  3739  000F32  6E3F               	movwf	___awmod@divisor,c
  3740  000F34  EC72  F020         	call	___awmod	;wreg free
  3741  000F38  503D               	movf	?___awmod,w,c
  3742  000F3A  0F30               	addlw	48
  3743  000F3C  0100               	movlb	0	; () banked
  3744  000F3E  6FF6               	movwf	(_Fan_Timer_Txt+2)& (0+255),b
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;Main_Screen.c: 168: Fan_Set_Temp_Txt[0] = fan_set_temp/100 + '0';
  3748  000F40  C0DC  F017         	movff	_fan_set_temp,___awdiv@dividend
  3749  000F44  6A18               	clrf	___awdiv@dividend+1,c
  3750  000F46  0E00               	movlw	0
  3751  000F48  6E1A               	movwf	___awdiv@divisor+1,c
  3752  000F4A  0E64               	movlw	100
  3753  000F4C  6E19               	movwf	___awdiv@divisor,c
  3754  000F4E  EC3B  F01E         	call	___awdiv	;wreg free
  3755  000F52  5017               	movf	?___awdiv,w,c
  3756  000F54  0F30               	addlw	48
  3757  000F56  0100               	movlb	0	; () banked
  3758  000F58  6FEC               	movwf	_Fan_Set_Temp_Txt& (0+255),b
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;Main_Screen.c: 169: Fan_Set_Temp_Txt[1] = fan_set_temp/10 + '0';
  3762  000F5A  C0DC  F017         	movff	_fan_set_temp,___awdiv@dividend
  3763  000F5E  6A18               	clrf	___awdiv@dividend+1,c
  3764  000F60  0E00               	movlw	0
  3765  000F62  6E1A               	movwf	___awdiv@divisor+1,c
  3766  000F64  0E0A               	movlw	10
  3767  000F66  6E19               	movwf	___awdiv@divisor,c
  3768  000F68  EC3B  F01E         	call	___awdiv	;wreg free
  3769  000F6C  5017               	movf	?___awdiv,w,c
  3770  000F6E  0F30               	addlw	48
  3771  000F70  0100               	movlb	0	; () banked
  3772  000F72  6FED               	movwf	(_Fan_Set_Temp_Txt+1)& (0+255),b
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;Main_Screen.c: 170: Fan_Set_Temp_Txt[2] = fan_set_temp%10 + '0';
  3776  000F74  C0DC  F03D         	movff	_fan_set_temp,___awmod@dividend
  3777  000F78  6A3E               	clrf	___awmod@dividend+1,c
  3778  000F7A  0E00               	movlw	0
  3779  000F7C  6E40               	movwf	___awmod@divisor+1,c
  3780  000F7E  0E0A               	movlw	10
  3781  000F80  6E3F               	movwf	___awmod@divisor,c
  3782  000F82  EC72  F020         	call	___awmod	;wreg free
  3783  000F86  503D               	movf	?___awmod,w,c
  3784  000F88  0F30               	addlw	48
  3785  000F8A  0100               	movlb	0	; () banked
  3786  000F8C  6FEE               	movwf	(_Fan_Set_Temp_Txt+2)& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;Main_Screen.c: 172: if (FANMODE == 1)
  3790  000F8E  0100               	movlb	0	; () banked
  3791  000F90  05C2               	decf	_FANMODE& (0+255),w,b
  3792  000F92  A4D8               	btfss	status,2,c
  3793  000F94  D00B               	goto	l10076
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;Main_Screen.c: 173: {
  3797                           ;Main_Screen.c: 174: strcpy(Fan_Mode_Txt, "AUTO");
  3798  000F96  0E7D               	movlw	low _Fan_Mode_Txt
  3799  000F98  6E11               	movwf	strcpy@to,c
  3800  000F9A  0E01               	movlw	high _Fan_Mode_Txt
  3801  000F9C  6E12               	movwf	strcpy@to+1,c
  3802  000F9E  0ECD               	movlw	low STR_30
  3803  000FA0  6E13               	movwf	strcpy@from,c
  3804  000FA2  0EFF               	movlw	high STR_30
  3805  000FA4  6E14               	movwf	strcpy@from+1,c
  3806  000FA6  EC31  F024         	call	_strcpy	;wreg free
  3807                           
  3808                           ;Main_Screen.c: 175: }
  3809  000FAA  D00B               	goto	l10078
  3810  000FAC                     l10076:
  3811                           
  3812                           ;Main_Screen.c: 176: else
  3813                           ;Main_Screen.c: 177: {
  3814                           ;Main_Screen.c: 178: strcpy(Fan_Mode_Txt, "MANU");
  3815  000FAC  0E7D               	movlw	low _Fan_Mode_Txt
  3816  000FAE  6E11               	movwf	strcpy@to,c
  3817  000FB0  0E01               	movlw	high _Fan_Mode_Txt
  3818  000FB2  6E12               	movwf	strcpy@to+1,c
  3819  000FB4  0ED2               	movlw	low STR_31
  3820  000FB6  6E13               	movwf	strcpy@from,c
  3821  000FB8  0EFF               	movlw	high STR_31
  3822  000FBA  6E14               	movwf	strcpy@from+1,c
  3823  000FBC  EC31  F024         	call	_strcpy	;wreg free
  3824  000FC0  D000               	goto	l10078
  3825  000FC2                     l10078:
  3826                           
  3827                           ;Main_Screen.c: 179: }
  3828                           ;Main_Screen.c: 181: if (FAN == 1)
  3829  000FC2  0100               	movlb	0	; () banked
  3830  000FC4  05C1               	decf	_FAN& (0+255),w,b
  3831  000FC6  A4D8               	btfss	status,2,c
  3832  000FC8  D00B               	goto	l10082
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;Main_Screen.c: 182: {
  3836                           ;Main_Screen.c: 183: strcpy(Fan_SW_Txt, "ON ");
  3837  000FCA  0EE8               	movlw	low _Fan_SW_Txt
  3838  000FCC  6E11               	movwf	strcpy@to,c
  3839  000FCE  0E00               	movlw	high _Fan_SW_Txt
  3840  000FD0  6E12               	movwf	strcpy@to+1,c
  3841  000FD2  0EE1               	movlw	low STR_32
  3842  000FD4  6E13               	movwf	strcpy@from,c
  3843  000FD6  0EFF               	movlw	high STR_32
  3844  000FD8  6E14               	movwf	strcpy@from+1,c
  3845  000FDA  EC31  F024         	call	_strcpy	;wreg free
  3846                           
  3847                           ;Main_Screen.c: 184: }
  3848  000FDE  D00B               	goto	l10084
  3849  000FE0                     l10082:
  3850                           
  3851                           ;Main_Screen.c: 185: else
  3852                           ;Main_Screen.c: 186: {
  3853                           ;Main_Screen.c: 187: strcpy(Fan_SW_Txt, "OFF");
  3854  000FE0  0EE8               	movlw	low _Fan_SW_Txt
  3855  000FE2  6E11               	movwf	strcpy@to,c
  3856  000FE4  0E00               	movlw	high _Fan_SW_Txt
  3857  000FE6  6E12               	movwf	strcpy@to+1,c
  3858  000FE8  0EB3               	movlw	low (STR_25+7)
  3859  000FEA  6E13               	movwf	strcpy@from,c
  3860  000FEC  0EFF               	movlw	high (STR_25+7)
  3861  000FEE  6E14               	movwf	strcpy@from+1,c
  3862  000FF0  EC31  F024         	call	_strcpy	;wreg free
  3863  000FF4  D000               	goto	l10084
  3864  000FF6                     l10084:
  3865                           
  3866                           ;Main_Screen.c: 188: }
  3867                           ;Main_Screen.c: 191: DC_Txt[0] = duty_cycle/100 + '0';
  3868  000FF6  C064  F017         	movff	_duty_cycle,___awdiv@dividend
  3869  000FFA  6A18               	clrf	___awdiv@dividend+1,c
  3870  000FFC  0E00               	movlw	0
  3871  000FFE  6E1A               	movwf	___awdiv@divisor+1,c
  3872  001000  0E64               	movlw	100
  3873  001002  6E19               	movwf	___awdiv@divisor,c
  3874  001004  EC3B  F01E         	call	___awdiv	;wreg free
  3875  001008  5017               	movf	?___awdiv,w,c
  3876  00100A  0F30               	addlw	48
  3877  00100C  0100               	movlb	0	; () banked
  3878  00100E  6FE4               	movwf	_DC_Txt& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;Main_Screen.c: 192: DC_Txt[1] = (duty_cycle/10)%10 + '0';
  3882  001010  0E00               	movlw	0
  3883  001012  6E1A               	movwf	___awdiv@divisor+1,c
  3884  001014  0E0A               	movlw	10
  3885  001016  6E19               	movwf	___awdiv@divisor,c
  3886  001018  C064  F017         	movff	_duty_cycle,___awdiv@dividend
  3887  00101C  6A18               	clrf	___awdiv@dividend+1,c
  3888  00101E  EC3B  F01E         	call	___awdiv	;wreg free
  3889  001022  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3890  001026  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3891  00102A  0E00               	movlw	0
  3892  00102C  6E40               	movwf	___awmod@divisor+1,c
  3893  00102E  0E0A               	movlw	10
  3894  001030  6E3F               	movwf	___awmod@divisor,c
  3895  001032  EC72  F020         	call	___awmod	;wreg free
  3896  001036  503D               	movf	?___awmod,w,c
  3897  001038  0F30               	addlw	48
  3898  00103A  0100               	movlb	0	; () banked
  3899  00103C  6FE5               	movwf	(_DC_Txt+1)& (0+255),b
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;Main_Screen.c: 193: DC_Txt[2] = duty_cycle%10 + '0';
  3903  00103E  C064  F03D         	movff	_duty_cycle,___awmod@dividend
  3904  001042  6A3E               	clrf	___awmod@dividend+1,c
  3905  001044  0E00               	movlw	0
  3906  001046  6E40               	movwf	___awmod@divisor+1,c
  3907  001048  0E0A               	movlw	10
  3908  00104A  6E3F               	movwf	___awmod@divisor,c
  3909  00104C  EC72  F020         	call	___awmod	;wreg free
  3910  001050  503D               	movf	?___awmod,w,c
  3911  001052  0F30               	addlw	48
  3912  001054  0100               	movlb	0	; () banked
  3913  001056  6FE6               	movwf	(_DC_Txt+2)& (0+255),b
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;Main_Screen.c: 195: Volt_Txt[0] = ((int) volt ) + '0';
  3917  001058  C0B8  F02E         	movff	_volt,___fttol@f1
  3918  00105C  C0B9  F02F         	movff	_volt+1,___fttol@f1+1
  3919  001060  C0BA  F030         	movff	_volt+2,___fttol@f1+2
  3920  001064  EC68  F01A         	call	___fttol	;wreg free
  3921  001068  502E               	movf	?___fttol,w,c
  3922  00106A  0F30               	addlw	48
  3923  00106C  0101               	movlb	1	; () banked
  3924  00106E  6F77               	movwf	_Volt_Txt& (0+255),b
  3925                           
  3926                           ; BSR set to: 1
  3927                           ;Main_Screen.c: 196: Volt_Txt[2] = (( (int) (volt*10 ) )%10) + '0';
  3928  001070  0E00               	movlw	0
  3929  001072  6E22               	movwf	___ftmul@f2,c
  3930  001074  0E20               	movlw	32
  3931  001076  6E23               	movwf	___ftmul@f2+1,c
  3932  001078  0E41               	movlw	65
  3933  00107A  6E24               	movwf	___ftmul@f2+2,c
  3934  00107C  C0B8  F01F         	movff	_volt,___ftmul@f1
  3935  001080  C0B9  F020         	movff	_volt+1,___ftmul@f1+1
  3936  001084  C0BA  F021         	movff	_volt+2,___ftmul@f1+2
  3937  001088  ECFE  F018         	call	___ftmul	;wreg free
  3938  00108C  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3939  001090  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3940  001094  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3941  001098  EC68  F01A         	call	___fttol	;wreg free
  3942  00109C  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3943  0010A0  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3944  0010A4  0E00               	movlw	0
  3945  0010A6  6E40               	movwf	___awmod@divisor+1,c
  3946  0010A8  0E0A               	movlw	10
  3947  0010AA  6E3F               	movwf	___awmod@divisor,c
  3948  0010AC  EC72  F020         	call	___awmod	;wreg free
  3949  0010B0  503D               	movf	?___awmod,w,c
  3950  0010B2  0F30               	addlw	48
  3951  0010B4  0101               	movlb	1	; () banked
  3952  0010B6  6F79               	movwf	(_Volt_Txt+2)& (0+255),b
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;Main_Screen.c: 197: Volt_Txt[3] = (( (int) (volt*100) )%10) + '0';
  3956  0010B8  0E00               	movlw	0
  3957  0010BA  6E22               	movwf	___ftmul@f2,c
  3958  0010BC  0EC8               	movlw	200
  3959  0010BE  6E23               	movwf	___ftmul@f2+1,c
  3960  0010C0  0E42               	movlw	66
  3961  0010C2  6E24               	movwf	___ftmul@f2+2,c
  3962  0010C4  C0B8  F01F         	movff	_volt,___ftmul@f1
  3963  0010C8  C0B9  F020         	movff	_volt+1,___ftmul@f1+1
  3964  0010CC  C0BA  F021         	movff	_volt+2,___ftmul@f1+2
  3965  0010D0  ECFE  F018         	call	___ftmul	;wreg free
  3966  0010D4  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3967  0010D8  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3968  0010DC  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3969  0010E0  EC68  F01A         	call	___fttol	;wreg free
  3970  0010E4  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3971  0010E8  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3972  0010EC  0E00               	movlw	0
  3973  0010EE  6E40               	movwf	___awmod@divisor+1,c
  3974  0010F0  0E0A               	movlw	10
  3975  0010F2  6E3F               	movwf	___awmod@divisor,c
  3976  0010F4  EC72  F020         	call	___awmod	;wreg free
  3977  0010F8  503D               	movf	?___awmod,w,c
  3978  0010FA  0F30               	addlw	48
  3979  0010FC  0101               	movlb	1	; () banked
  3980  0010FE  6F7A               	movwf	(_Volt_Txt+3)& (0+255),b
  3981                           
  3982                           ; BSR set to: 1
  3983                           ;Main_Screen.c: 199: RPM_Txt[0] = rpm/1000 + '0';
  3984  001100  C05C  F017         	movff	_rpm,___awdiv@dividend
  3985  001104  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  3986  001108  0E03               	movlw	3
  3987  00110A  6E1A               	movwf	___awdiv@divisor+1,c
  3988  00110C  0EE8               	movlw	232
  3989  00110E  6E19               	movwf	___awdiv@divisor,c
  3990  001110  EC3B  F01E         	call	___awdiv	;wreg free
  3991  001114  5017               	movf	?___awdiv,w,c
  3992  001116  0F30               	addlw	48
  3993  001118  0101               	movlb	1	; () banked
  3994  00111A  6F82               	movwf	_RPM_Txt& (0+255),b
  3995                           
  3996                           ; BSR set to: 1
  3997                           ;Main_Screen.c: 200: RPM_Txt[1] = (rpm/100)%10 + '0';
  3998  00111C  0E00               	movlw	0
  3999  00111E  6E1A               	movwf	___awdiv@divisor+1,c
  4000  001120  0E64               	movlw	100
  4001  001122  6E19               	movwf	___awdiv@divisor,c
  4002  001124  C05C  F017         	movff	_rpm,___awdiv@dividend
  4003  001128  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4004  00112C  EC3B  F01E         	call	___awdiv	;wreg free
  4005  001130  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4006  001134  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4007  001138  0E00               	movlw	0
  4008  00113A  6E40               	movwf	___awmod@divisor+1,c
  4009  00113C  0E0A               	movlw	10
  4010  00113E  6E3F               	movwf	___awmod@divisor,c
  4011  001140  EC72  F020         	call	___awmod	;wreg free
  4012  001144  503D               	movf	?___awmod,w,c
  4013  001146  0F30               	addlw	48
  4014  001148  0101               	movlb	1	; () banked
  4015  00114A  6F83               	movwf	(_RPM_Txt+1)& (0+255),b
  4016                           
  4017                           ; BSR set to: 1
  4018                           ;Main_Screen.c: 201: RPM_Txt[2] = (rpm/10)%10 + '0';
  4019  00114C  0E00               	movlw	0
  4020  00114E  6E1A               	movwf	___awdiv@divisor+1,c
  4021  001150  0E0A               	movlw	10
  4022  001152  6E19               	movwf	___awdiv@divisor,c
  4023  001154  C05C  F017         	movff	_rpm,___awdiv@dividend
  4024  001158  C05D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4025  00115C  EC3B  F01E         	call	___awdiv	;wreg free
  4026  001160  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4027  001164  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4028  001168  0E00               	movlw	0
  4029  00116A  6E40               	movwf	___awmod@divisor+1,c
  4030  00116C  0E0A               	movlw	10
  4031  00116E  6E3F               	movwf	___awmod@divisor,c
  4032  001170  EC72  F020         	call	___awmod	;wreg free
  4033  001174  503D               	movf	?___awmod,w,c
  4034  001176  0F30               	addlw	48
  4035  001178  0101               	movlb	1	; () banked
  4036  00117A  6F84               	movwf	(_RPM_Txt+2)& (0+255),b
  4037                           
  4038                           ; BSR set to: 1
  4039                           ;Main_Screen.c: 202: RPM_Txt[3] = rpm%10 + '0';
  4040  00117C  C05C  F03D         	movff	_rpm,___awmod@dividend
  4041  001180  C05D  F03E         	movff	_rpm+1,___awmod@dividend+1
  4042  001184  0E00               	movlw	0
  4043  001186  6E40               	movwf	___awmod@divisor+1,c
  4044  001188  0E0A               	movlw	10
  4045  00118A  6E3F               	movwf	___awmod@divisor,c
  4046  00118C  EC72  F020         	call	___awmod	;wreg free
  4047  001190  503D               	movf	?___awmod,w,c
  4048  001192  0F30               	addlw	48
  4049  001194  0101               	movlb	1	; () banked
  4050  001196  6F85               	movwf	(_RPM_Txt+3)& (0+255),b
  4051                           
  4052                           ; BSR set to: 1
  4053                           ;Main_Screen.c: 204: drawtext(1, 23, tempC_Txt , 0xFFE0 , 0x0000 , 2);
  4054  001198  0E17               	movlw	23
  4055  00119A  6E39               	movwf	drawtext@y,c
  4056  00119C  0EF8               	movlw	low _tempC_Txt
  4057  00119E  6E3A               	movwf	drawtext@_text,c
  4058  0011A0  0E00               	movlw	high _tempC_Txt
  4059  0011A2  6E3B               	movwf	drawtext@_text+1,c
  4060  0011A4  0EFF               	movlw	255
  4061  0011A6  6E3D               	movwf	drawtext@color+1,c
  4062  0011A8  0EE0               	movlw	224
  4063  0011AA  6E3C               	movwf	drawtext@color,c
  4064  0011AC  0E00               	movlw	0
  4065  0011AE  6E3F               	movwf	drawtext@bg+1,c
  4066  0011B0  0E00               	movlw	0
  4067  0011B2  6E3E               	movwf	drawtext@bg,c
  4068  0011B4  0E02               	movlw	2
  4069  0011B6  6E40               	movwf	drawtext@size,c
  4070  0011B8  0E01               	movlw	1
  4071  0011BA  ECDB  F01A         	call	_drawtext
  4072                           
  4073                           ;Main_Screen.c: 205: drawtext(60, 23, tempF_Txt , 0xFFE0 , 0x0000 , 2);
  4074  0011BE  0E17               	movlw	23
  4075  0011C0  6E39               	movwf	drawtext@y,c
  4076  0011C2  0EDF               	movlw	low _tempF_Txt
  4077  0011C4  6E3A               	movwf	drawtext@_text,c
  4078  0011C6  0E00               	movlw	high _tempF_Txt
  4079  0011C8  6E3B               	movwf	drawtext@_text+1,c
  4080  0011CA  0EFF               	movlw	255
  4081  0011CC  6E3D               	movwf	drawtext@color+1,c
  4082  0011CE  0EE0               	movlw	224
  4083  0011D0  6E3C               	movwf	drawtext@color,c
  4084  0011D2  0E00               	movlw	0
  4085  0011D4  6E3F               	movwf	drawtext@bg+1,c
  4086  0011D6  0E00               	movlw	0
  4087  0011D8  6E3E               	movwf	drawtext@bg,c
  4088  0011DA  0E02               	movlw	2
  4089  0011DC  6E40               	movwf	drawtext@size,c
  4090  0011DE  0E3C               	movlw	60
  4091  0011E0  ECDB  F01A         	call	_drawtext
  4092                           
  4093                           ;Main_Screen.c: 206: drawtext(15 , 52 , time_Txt , 0x07FF , 0x0000 , 2);
  4094  0011E4  0E34               	movlw	52
  4095  0011E6  6E39               	movwf	drawtext@y,c
  4096  0011E8  0E6E               	movlw	low _time_Txt
  4097  0011EA  6E3A               	movwf	drawtext@_text,c
  4098  0011EC  0E01               	movlw	high _time_Txt
  4099  0011EE  6E3B               	movwf	drawtext@_text+1,c
  4100  0011F0  0E07               	movlw	7
  4101  0011F2  6E3D               	movwf	drawtext@color+1,c
  4102  0011F4  683C               	setf	drawtext@color,c
  4103  0011F6  0E00               	movlw	0
  4104  0011F8  6E3F               	movwf	drawtext@bg+1,c
  4105  0011FA  0E00               	movlw	0
  4106  0011FC  6E3E               	movwf	drawtext@bg,c
  4107  0011FE  0E02               	movlw	2
  4108  001200  6E40               	movwf	drawtext@size,c
  4109  001202  0E0F               	movlw	15
  4110  001204  ECDB  F01A         	call	_drawtext
  4111                           
  4112                           ;Main_Screen.c: 207: drawtext(15 , 82 , date_Txt , 0x07E0 , 0x0000 , 2);
  4113  001208  0E52               	movlw	82
  4114  00120A  6E39               	movwf	drawtext@y,c
  4115  00120C  0E53               	movlw	low _date_Txt
  4116  00120E  6E3A               	movwf	drawtext@_text,c
  4117  001210  0E01               	movlw	high _date_Txt
  4118  001212  6E3B               	movwf	drawtext@_text+1,c
  4119  001214  0E07               	movlw	7
  4120  001216  6E3D               	movwf	drawtext@color+1,c
  4121  001218  0EE0               	movlw	224
  4122  00121A  6E3C               	movwf	drawtext@color,c
  4123  00121C  0E00               	movlw	0
  4124  00121E  6E3F               	movwf	drawtext@bg+1,c
  4125  001220  0E00               	movlw	0
  4126  001222  6E3E               	movwf	drawtext@bg,c
  4127  001224  0E02               	movlw	2
  4128  001226  6E40               	movwf	drawtext@size,c
  4129  001228  0E0F               	movlw	15
  4130  00122A  ECDB  F01A         	call	_drawtext
  4131                           
  4132                           ;Main_Screen.c: 208: drawtext(25 , 110 , Fan_Timer_Mode_Txt , 0x07FF , 0x0000 , 1);
  4133  00122E  0E6E               	movlw	110
  4134  001230  6E39               	movwf	drawtext@y,c
  4135  001232  0EF0               	movlw	low _Fan_Timer_Mode_Txt
  4136  001234  6E3A               	movwf	drawtext@_text,c
  4137  001236  0E00               	movlw	high _Fan_Timer_Mode_Txt
  4138  001238  6E3B               	movwf	drawtext@_text+1,c
  4139  00123A  0E07               	movlw	7
  4140  00123C  6E3D               	movwf	drawtext@color+1,c
  4141  00123E  683C               	setf	drawtext@color,c
  4142  001240  0E00               	movlw	0
  4143  001242  6E3F               	movwf	drawtext@bg+1,c
  4144  001244  0E00               	movlw	0
  4145  001246  6E3E               	movwf	drawtext@bg,c
  4146  001248  0E01               	movlw	1
  4147  00124A  6E40               	movwf	drawtext@size,c
  4148  00124C  0E19               	movlw	25
  4149  00124E  ECDB  F01A         	call	_drawtext
  4150                           
  4151                           ;Main_Screen.c: 209: drawtext(90 , 110 , Fan_Timer_Txt , 0x07FF , 0x0000 , 1);
  4152  001252  0E6E               	movlw	110
  4153  001254  6E39               	movwf	drawtext@y,c
  4154  001256  0EF4               	movlw	low _Fan_Timer_Txt
  4155  001258  6E3A               	movwf	drawtext@_text,c
  4156  00125A  0E00               	movlw	high _Fan_Timer_Txt
  4157  00125C  6E3B               	movwf	drawtext@_text+1,c
  4158  00125E  0E07               	movlw	7
  4159  001260  6E3D               	movwf	drawtext@color+1,c
  4160  001262  683C               	setf	drawtext@color,c
  4161  001264  0E00               	movlw	0
  4162  001266  6E3F               	movwf	drawtext@bg+1,c
  4163  001268  0E00               	movlw	0
  4164  00126A  6E3E               	movwf	drawtext@bg,c
  4165  00126C  0E01               	movlw	1
  4166  00126E  6E40               	movwf	drawtext@size,c
  4167  001270  0E5A               	movlw	90
  4168  001272  ECDB  F01A         	call	_drawtext
  4169                           
  4170                           ;Main_Screen.c: 210: drawtext(35, 130 ,Fan_Set_Temp_Txt, 0xF800, 0x0000, 1);
  4171  001276  0E82               	movlw	130
  4172  001278  6E39               	movwf	drawtext@y,c
  4173  00127A  0EEC               	movlw	low _Fan_Set_Temp_Txt
  4174  00127C  6E3A               	movwf	drawtext@_text,c
  4175  00127E  0E00               	movlw	high _Fan_Set_Temp_Txt
  4176  001280  6E3B               	movwf	drawtext@_text+1,c
  4177  001282  0EF8               	movlw	248
  4178  001284  6E3D               	movwf	drawtext@color+1,c
  4179  001286  0E00               	movlw	0
  4180  001288  6E3C               	movwf	drawtext@color,c
  4181  00128A  0E00               	movlw	0
  4182  00128C  6E3F               	movwf	drawtext@bg+1,c
  4183  00128E  0E00               	movlw	0
  4184  001290  6E3E               	movwf	drawtext@bg,c
  4185  001292  0E01               	movlw	1
  4186  001294  6E40               	movwf	drawtext@size,c
  4187  001296  0E23               	movlw	35
  4188  001298  ECDB  F01A         	call	_drawtext
  4189                           
  4190                           ;Main_Screen.c: 211: drawtext(75, 130, Fan_Mode_Txt, 0xF800 , 0x0000 , 1);
  4191  00129C  0E82               	movlw	130
  4192  00129E  6E39               	movwf	drawtext@y,c
  4193  0012A0  0E7D               	movlw	low _Fan_Mode_Txt
  4194  0012A2  6E3A               	movwf	drawtext@_text,c
  4195  0012A4  0E01               	movlw	high _Fan_Mode_Txt
  4196  0012A6  6E3B               	movwf	drawtext@_text+1,c
  4197  0012A8  0EF8               	movlw	248
  4198  0012AA  6E3D               	movwf	drawtext@color+1,c
  4199  0012AC  0E00               	movlw	0
  4200  0012AE  6E3C               	movwf	drawtext@color,c
  4201  0012B0  0E00               	movlw	0
  4202  0012B2  6E3F               	movwf	drawtext@bg+1,c
  4203  0012B4  0E00               	movlw	0
  4204  0012B6  6E3E               	movwf	drawtext@bg,c
  4205  0012B8  0E01               	movlw	1
  4206  0012BA  6E40               	movwf	drawtext@size,c
  4207  0012BC  0E4B               	movlw	75
  4208  0012BE  ECDB  F01A         	call	_drawtext
  4209                           
  4210                           ;Main_Screen.c: 212: drawtext(105, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4211  0012C2  0E82               	movlw	130
  4212  0012C4  6E39               	movwf	drawtext@y,c
  4213  0012C6  0EE8               	movlw	low _Fan_SW_Txt
  4214  0012C8  6E3A               	movwf	drawtext@_text,c
  4215  0012CA  0E00               	movlw	high _Fan_SW_Txt
  4216  0012CC  6E3B               	movwf	drawtext@_text+1,c
  4217  0012CE  0EF8               	movlw	248
  4218  0012D0  6E3D               	movwf	drawtext@color+1,c
  4219  0012D2  0E00               	movlw	0
  4220  0012D4  6E3C               	movwf	drawtext@color,c
  4221  0012D6  0E00               	movlw	0
  4222  0012D8  6E3F               	movwf	drawtext@bg+1,c
  4223  0012DA  0E00               	movlw	0
  4224  0012DC  6E3E               	movwf	drawtext@bg,c
  4225  0012DE  0E01               	movlw	1
  4226  0012E0  6E40               	movwf	drawtext@size,c
  4227  0012E2  0E69               	movlw	105
  4228  0012E4  ECDB  F01A         	call	_drawtext
  4229                           
  4230                           ;Main_Screen.c: 213: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4231  0012E8  0E96               	movlw	150
  4232  0012EA  6E39               	movwf	drawtext@y,c
  4233  0012EC  0EE4               	movlw	low _DC_Txt
  4234  0012EE  6E3A               	movwf	drawtext@_text,c
  4235  0012F0  0E00               	movlw	high _DC_Txt
  4236  0012F2  6E3B               	movwf	drawtext@_text+1,c
  4237  0012F4  0E07               	movlw	7
  4238  0012F6  6E3D               	movwf	drawtext@color+1,c
  4239  0012F8  0EE0               	movlw	224
  4240  0012FA  6E3C               	movwf	drawtext@color,c
  4241  0012FC  0E00               	movlw	0
  4242  0012FE  6E3F               	movwf	drawtext@bg+1,c
  4243  001300  0E00               	movlw	0
  4244  001302  6E3E               	movwf	drawtext@bg,c
  4245  001304  0E01               	movlw	1
  4246  001306  6E40               	movwf	drawtext@size,c
  4247  001308  0E0A               	movlw	10
  4248  00130A  ECDB  F01A         	call	_drawtext
  4249                           
  4250                           ;Main_Screen.c: 215: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4251  00130E  0E96               	movlw	150
  4252  001310  6E39               	movwf	drawtext@y,c
  4253  001312  0E77               	movlw	low _Volt_Txt
  4254  001314  6E3A               	movwf	drawtext@_text,c
  4255  001316  0E01               	movlw	high _Volt_Txt
  4256  001318  6E3B               	movwf	drawtext@_text+1,c
  4257  00131A  0E07               	movlw	7
  4258  00131C  6E3D               	movwf	drawtext@color+1,c
  4259  00131E  0EE0               	movlw	224
  4260  001320  6E3C               	movwf	drawtext@color,c
  4261  001322  0E00               	movlw	0
  4262  001324  6E3F               	movwf	drawtext@bg+1,c
  4263  001326  0E00               	movlw	0
  4264  001328  6E3E               	movwf	drawtext@bg,c
  4265  00132A  0E01               	movlw	1
  4266  00132C  6E40               	movwf	drawtext@size,c
  4267  00132E  0E32               	movlw	50
  4268  001330  ECDB  F01A         	call	_drawtext
  4269                           
  4270                           ;Main_Screen.c: 216: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4271  001334  0E96               	movlw	150
  4272  001336  6E39               	movwf	drawtext@y,c
  4273  001338  0E82               	movlw	low _RPM_Txt
  4274  00133A  6E3A               	movwf	drawtext@_text,c
  4275  00133C  0E01               	movlw	high _RPM_Txt
  4276  00133E  6E3B               	movwf	drawtext@_text+1,c
  4277  001340  0E07               	movlw	7
  4278  001342  6E3D               	movwf	drawtext@color+1,c
  4279  001344  0EE0               	movlw	224
  4280  001346  6E3C               	movwf	drawtext@color,c
  4281  001348  0E00               	movlw	0
  4282  00134A  6E3F               	movwf	drawtext@bg+1,c
  4283  00134C  0E00               	movlw	0
  4284  00134E  6E3E               	movwf	drawtext@bg,c
  4285  001350  0E01               	movlw	1
  4286  001352  6E40               	movwf	drawtext@size,c
  4287  001354  0E5D               	movlw	93
  4288  001356  ECDB  F01A         	call	_drawtext
  4289  00135A  D000               	goto	l979
  4290  00135C                     l979:
  4291  00135C  0012               	return		;funcret
  4292  00135E                     __end_of_Update_Screen:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           postdec1	equ	0xFE5
  4301                           fsr1l	equ	0xFE1
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _Toggle_Fan *****************
  4305 ;; Defined at:
  4306 ;;		line 77 in file "Fan_Support.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;		None               void
  4313 ;; Registers used:
  4314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;Total ram usage:        0 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    8
  4327 ;; This function calls:
  4328 ;;		_Turn_Off_Fan
  4329 ;;		_Turn_On_Fan
  4330 ;; This function is called by:
  4331 ;;		_main
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text2
  4336  004C8A                     __ptext2:
  4337                           	opt stack 0
  4338  004C8A                     _Toggle_Fan:
  4339                           	opt stack 22
  4340                           
  4341                           ;Fan_Support.c: 81: if (FAN == 1)
  4342                           
  4343                           ;incstack = 0
  4344  004C8A  0100               	movlb	0	; () banked
  4345  004C8C  05C1               	decf	_FAN& (0+255),w,b
  4346  004C8E  A4D8               	btfss	status,2,c
  4347  004C90  D003               	goto	l9908
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;Fan_Support.c: 82: Turn_Off_Fan();
  4351  004C92  ECD8  F025         	call	_Turn_Off_Fan	;wreg free
  4352  004C96  D003               	goto	l55
  4353  004C98                     l9908:
  4354                           
  4355                           ;Fan_Support.c: 83: else
  4356                           ;Fan_Support.c: 84: Turn_On_Fan();
  4357  004C98  EC69  F025         	call	_Turn_On_Fan	;wreg free
  4358  004C9C  D000               	goto	l55
  4359  004C9E                     l55:
  4360  004C9E  0012               	return		;funcret
  4361  004CA0                     __end_of_Toggle_Fan:
  4362                           	opt stack 0
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           postinc0	equ	0xFEE
  4368                           wreg	equ	0xFE8
  4369                           postdec1	equ	0xFE5
  4370                           fsr1l	equ	0xFE1
  4371                           status	equ	0xFD8
  4372                           
  4373 ;; *************** function _Turn_On_Fan *****************
  4374 ;; Defined at:
  4375 ;;		line 96 in file "Fan_Support.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;		None
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;		None
  4380 ;; Return value:  Size  Location     Type
  4381 ;;		None               void
  4382 ;; Registers used:
  4383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;Total ram usage:        0 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    7
  4396 ;; This function calls:
  4397 ;;		_do_update_pwm
  4398 ;;		_printf
  4399 ;; This function is called by:
  4400 ;;		_Toggle_Fan
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text3
  4405  004AD2                     __ptext3:
  4406                           	opt stack 0
  4407  004AD2                     _Turn_On_Fan:
  4408                           	opt stack 22
  4409                           
  4410                           ;Fan_Support.c: 98: printf ("Fan is turned on\r\n");
  4411                           
  4412                           ;incstack = 0
  4413  004AD2  0E48               	movlw	low STR_2
  4414  004AD4  0100               	movlb	0	; () banked
  4415  004AD6  6F86               	movwf	printf@f& (0+255),b
  4416  004AD8  0EFF               	movlw	high STR_2
  4417  004ADA  0100               	movlb	0	; () banked
  4418  004ADC  6F87               	movwf	(printf@f+1)& (0+255),b
  4419  004ADE  EC0E  F000         	call	_printf	;wreg free
  4420                           
  4421                           ;Fan_Support.c: 100: FAN = 1;
  4422  004AE2  0E01               	movlw	1
  4423  004AE4  0100               	movlb	0	; () banked
  4424  004AE6  6FC1               	movwf	_FAN& (0+255),b
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;Fan_Support.c: 101: PORTDbits.RD1 = 1;
  4428  004AE8  8283               	bsf	3971,1,c	;volatile
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;Fan_Support.c: 102: PORTDbits.RD2 = 1;
  4432  004AEA  8483               	bsf	3971,2,c	;volatile
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;Fan_Support.c: 103: do_update_pwm(duty_cycle);
  4436  004AEC  5064               	movf	_duty_cycle,w,c
  4437  004AEE  ECE9  F01C         	call	_do_update_pwm
  4438  004AF2  0012               	return		;funcret
  4439  004AF4                     __end_of_Turn_On_Fan:
  4440                           	opt stack 0
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           postinc0	equ	0xFEE
  4446                           wreg	equ	0xFE8
  4447                           postdec1	equ	0xFE5
  4448                           fsr1l	equ	0xFE1
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _Setup_Fan_Temp *****************
  4452 ;; Defined at:
  4453 ;;		line 36 in file "Setup_Fan_Temp.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;		None
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;		None
  4458 ;; Return value:  Size  Location     Type
  4459 ;;		None               void
  4460 ;; Registers used:
  4461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;Total ram usage:        0 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:   12
  4474 ;; This function calls:
  4475 ;;		_DS1621_Read_Temp
  4476 ;;		_DS3231_Read_Time
  4477 ;;		_Decrease_Fan_Temp
  4478 ;;		_Do_Beep_Bad
  4479 ;;		_Do_Beep_Good
  4480 ;;		_Do_Save_New_Fan_Temp
  4481 ;;		_Increase_Fan_Temp
  4482 ;;		_Initialize_Setup_Fan_Screen
  4483 ;;		_Read_Volt
  4484 ;;		_Set_D1_RGB
  4485 ;;		_Set_D2_RGB
  4486 ;;		_Update_Setup_Fan_Screen
  4487 ;;		___awdiv
  4488 ;;		___ftge
  4489 ;;		___wmul
  4490 ;;		_check_for_button_input
  4491 ;;		_get_RPM
  4492 ;;		_printf
  4493 ;; This function is called by:
  4494 ;;		_main
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text4
  4499  00221C                     __ptext4:
  4500                           	opt stack 0
  4501  00221C                     _Setup_Fan_Temp:
  4502                           	opt stack 18
  4503                           
  4504                           ;Setup_Fan_Temp.c: 39: In_Fan_Temp_Setup = 1;
  4505                           
  4506                           ;incstack = 0
  4507  00221C  0E01               	movlw	1
  4508  00221E  0100               	movlb	0	; () banked
  4509  002220  6FC7               	movwf	_In_Fan_Temp_Setup& (0+255),b
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;Setup_Fan_Temp.c: 40: setup_fan_set_temp = fan_set_temp;
  4513  002222  C0DC  F0D4         	movff	_fan_set_temp,_setup_fan_set_temp
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;Setup_Fan_Temp.c: 41: Initialize_Setup_Fan_Screen();
  4517  002226  ECF3  F019         	call	_Initialize_Setup_Fan_Screen	;wreg free
  4518                           
  4519                           ;Setup_Fan_Temp.c: 42: Update_Setup_Fan_Screen();
  4520  00222A  EC31  F020         	call	_Update_Setup_Fan_Screen	;wreg free
  4521                           
  4522                           ;Setup_Fan_Temp.c: 44: while (In_Fan_Temp_Setup == 1)
  4523  00222E  D0E2               	goto	l10284
  4524  002230                     l10226:
  4525                           
  4526                           ;Setup_Fan_Temp.c: 45: {
  4527                           ;Setup_Fan_Temp.c: 46: DS3231_Read_Time();
  4528  002230  EC5A  F021         	call	_DS3231_Read_Time	;wreg free
  4529                           
  4530                           ;Setup_Fan_Temp.c: 48: if(tempSecond != second)
  4531  002234  5068               	movf	_second,w,c
  4532  002236  0100               	movlb	0	; () banked
  4533  002238  19DD               	xorwf	_tempSecond& (0+255),w,b
  4534  00223A  B4D8               	btfsc	status,2,c
  4535  00223C  D0A1               	goto	l10254
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;Setup_Fan_Temp.c: 49: {
  4539                           ;Setup_Fan_Temp.c: 50: tempSecond = second;
  4540  00223E  C068  F0DD         	movff	_second,_tempSecond
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;Setup_Fan_Temp.c: 51: rpm = get_RPM();
  4544  002242  EC5A  F023         	call	_get_RPM	;wreg free
  4545  002246  C01F  F05C         	movff	?_get_RPM,_rpm
  4546  00224A  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  4547                           
  4548                           ;Setup_Fan_Temp.c: 53: volt = Read_Volt(0);
  4549  00224E  0E00               	movlw	0
  4550  002250  EC23  F021         	call	_Read_Volt
  4551  002254  C03D  F0B8         	movff	?_Read_Volt,_volt
  4552  002258  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  4553  00225C  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  4554                           
  4555                           ;Setup_Fan_Temp.c: 54: if (volt > 3.000) light_flag = 1;
  4556  002260  0E00               	movlw	0
  4557  002262  6E11               	movwf	___ftge@ff1,c
  4558  002264  0E40               	movlw	64
  4559  002266  6E12               	movwf	___ftge@ff1+1,c
  4560  002268  0E40               	movlw	64
  4561  00226A  6E13               	movwf	___ftge@ff1+2,c
  4562  00226C  C0B8  F014         	movff	_volt,___ftge@ff2
  4563  002270  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  4564  002274  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  4565  002278  EC86  F01E         	call	___ftge	;wreg free
  4566  00227C  B0D8               	btfsc	status,0,c
  4567  00227E  D004               	goto	l10238
  4568  002280  0E01               	movlw	1
  4569  002282  0100               	movlb	0	; () banked
  4570  002284  6FD1               	movwf	_light_flag& (0+255),b
  4571  002286  D000               	goto	l10238
  4572  002288                     l10238:
  4573                           
  4574                           ;Setup_Fan_Temp.c: 55: tempC = DS1621_Read_Temp();
  4575  002288  EC13  F024         	call	_DS1621_Read_Temp	;wreg free
  4576  00228C  5014               	movf	?_DS1621_Read_Temp,w,c
  4577  00228E  6E69               	movwf	_tempC,c
  4578                           
  4579                           ;Setup_Fan_Temp.c: 56: tempF = (tempC * 9 / 5) + 32;
  4580  002290  5069               	movf	_tempC,w,c
  4581  002292  6E11               	movwf	___wmul@multiplier,c
  4582  002294  6A12               	clrf	___wmul@multiplier+1,c
  4583  002296  BE11               	btfsc	___wmul@multiplier,7,c
  4584  002298  0612               	decf	___wmul@multiplier+1,f,c
  4585  00229A  0E00               	movlw	0
  4586  00229C  6E14               	movwf	___wmul@multiplicand+1,c
  4587  00229E  0E09               	movlw	9
  4588  0022A0  6E13               	movwf	___wmul@multiplicand,c
  4589  0022A2  ECE7  F024         	call	___wmul	;wreg free
  4590  0022A6  C011  F017         	movff	?___wmul,___awdiv@dividend
  4591  0022AA  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  4592  0022AE  0E00               	movlw	0
  4593  0022B0  6E1A               	movwf	___awdiv@divisor+1,c
  4594  0022B2  0E05               	movlw	5
  4595  0022B4  6E19               	movwf	___awdiv@divisor,c
  4596  0022B6  EC3B  F01E         	call	___awdiv	;wreg free
  4597  0022BA  5017               	movf	?___awdiv,w,c
  4598  0022BC  0F20               	addlw	32
  4599  0022BE  6E6A               	movwf	_tempF,c
  4600                           
  4601                           ;Setup_Fan_Temp.c: 57: Set_D1_RGB(duty_cycle);
  4602  0022C0  5064               	movf	_duty_cycle,w,c
  4603  0022C2  ECEC  F022         	call	_Set_D1_RGB
  4604                           
  4605                           ;Setup_Fan_Temp.c: 58: Set_D2_RGB(rpm);
  4606  0022C6  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  4607  0022CA  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  4608  0022CE  EC73  F022         	call	_Set_D2_RGB	;wreg free
  4609                           
  4610                           ;Setup_Fan_Temp.c: 60: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,
      +                          day,year);
  4611  0022D2  0E75               	movlw	low STR_4
  4612  0022D4  0100               	movlb	0	; () banked
  4613  0022D6  6F86               	movwf	printf@f& (0+255),b
  4614  0022D8  0EFE               	movlw	high STR_4
  4615  0022DA  0100               	movlb	0	; () banked
  4616  0022DC  6F87               	movwf	(printf@f+1)& (0+255),b
  4617  0022DE  C065  F088         	movff	_hour,?_printf+2
  4618  0022E2  0100               	movlb	0	; () banked
  4619  0022E4  6B89               	clrf	(?_printf+3)& (0+255),b
  4620  0022E6  C066  F08A         	movff	_minute,?_printf+4
  4621  0022EA  0100               	movlb	0	; () banked
  4622  0022EC  6B8B               	clrf	(?_printf+5)& (0+255),b
  4623  0022EE  C068  F08C         	movff	_second,?_printf+6
  4624  0022F2  0100               	movlb	0	; () banked
  4625  0022F4  6B8D               	clrf	(?_printf+7)& (0+255),b
  4626  0022F6  C067  F08E         	movff	_month,?_printf+8
  4627  0022FA  0100               	movlb	0	; () banked
  4628  0022FC  6B8F               	clrf	(?_printf+9)& (0+255),b
  4629  0022FE  C063  F090         	movff	_day,?_printf+10
  4630  002302  0100               	movlb	0	; () banked
  4631  002304  6B91               	clrf	(?_printf+11)& (0+255),b
  4632  002306  C06B  F092         	movff	_year,?_printf+12
  4633  00230A  0100               	movlb	0	; () banked
  4634  00230C  6B93               	clrf	(?_printf+13)& (0+255),b
  4635  00230E  EC0E  F000         	call	_printf	;wreg free
  4636                           
  4637                           ;Setup_Fan_Temp.c: 61: printf (" Temp = %d C = %d F", tempC, tempF);
  4638  002312  0E0C               	movlw	low STR_35
  4639  002314  0100               	movlb	0	; () banked
  4640  002316  6F86               	movwf	printf@f& (0+255),b
  4641  002318  0EFF               	movlw	high STR_35
  4642  00231A  0100               	movlb	0	; () banked
  4643  00231C  6F87               	movwf	(printf@f+1)& (0+255),b
  4644  00231E  5069               	movf	_tempC,w,c
  4645  002320  0100               	movlb	0	; () banked
  4646  002322  6F88               	movwf	(?_printf+2)& (0+255),b
  4647  002324  6B89               	clrf	(?_printf+3)& (0+255),b
  4648  002326  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  4649  002328  0789               	decf	(?_printf+3)& (0+255),f,b
  4650  00232A  506A               	movf	_tempF,w,c
  4651  00232C  0100               	movlb	0	; () banked
  4652  00232E  6F8A               	movwf	(?_printf+4)& (0+255),b
  4653  002330  6B8B               	clrf	(?_printf+5)& (0+255),b
  4654  002332  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  4655  002334  078B               	decf	(?_printf+5)& (0+255),f,b
  4656  002336  EC0E  F000         	call	_printf	;wreg free
  4657                           
  4658                           ;Setup_Fan_Temp.c: 62: printf ("Light Sensor = %f V", volt);
  4659  00233A  0E20               	movlw	low STR_6
  4660  00233C  0100               	movlb	0	; () banked
  4661  00233E  6F86               	movwf	printf@f& (0+255),b
  4662  002340  0EFF               	movlw	high STR_6
  4663  002342  0100               	movlb	0	; () banked
  4664  002344  6F87               	movwf	(printf@f+1)& (0+255),b
  4665  002346  C0B8  F088         	movff	_volt,?_printf+2
  4666  00234A  C0B9  F089         	movff	_volt+1,?_printf+3
  4667  00234E  C0BA  F08A         	movff	_volt+2,?_printf+4
  4668  002352  EC0E  F000         	call	_printf	;wreg free
  4669                           
  4670                           ;Setup_Fan_Temp.c: 63: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_
      +                          flag);
  4671  002356  0E93               	movlw	low STR_7
  4672  002358  0100               	movlb	0	; () banked
  4673  00235A  6F86               	movwf	printf@f& (0+255),b
  4674  00235C  0EFE               	movlw	high STR_7
  4675  00235E  0100               	movlb	0	; () banked
  4676  002360  6F87               	movwf	(printf@f+1)& (0+255),b
  4677  002362  C05C  F088         	movff	_rpm,?_printf+2
  4678  002366  C05D  F089         	movff	_rpm+1,?_printf+3
  4679  00236A  C064  F08A         	movff	_duty_cycle,?_printf+4
  4680  00236E  0100               	movlb	0	; () banked
  4681  002370  6B8B               	clrf	(?_printf+5)& (0+255),b
  4682  002372  C0D1  F08C         	movff	_light_flag,?_printf+6
  4683  002376  0100               	movlb	0	; () banked
  4684  002378  6B8D               	clrf	(?_printf+7)& (0+255),b
  4685  00237A  EC0E  F000         	call	_printf	;wreg free
  4686  00237E  D000               	goto	l10254
  4687  002380                     l10254:
  4688                           
  4689                           ;Setup_Fan_Temp.c: 64: }
  4690                           ;Setup_Fan_Temp.c: 65: if (check_for_button_input() == 1)
  4691  002380  EC44  F01D         	call	_check_for_button_input	;wreg free
  4692  002384  06E8               	decf	wreg,f,c
  4693  002386  A4D8               	btfss	status,2,c
  4694  002388  D035               	goto	l10284
  4695                           
  4696                           ;Setup_Fan_Temp.c: 66: {
  4697                           ;Setup_Fan_Temp.c: 67: Nec_ok = 0;
  4698  00238A  0E00               	movlw	0
  4699  00238C  0100               	movlb	0	; () banked
  4700  00238E  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  4701  002390  0E00               	movlw	0
  4702  002392  6FBB               	movwf	_Nec_ok& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;Setup_Fan_Temp.c: 68: if (found >= 5 && found <= 8)
  4706  002394  0E04               	movlw	4
  4707  002396  0100               	movlb	0	; () banked
  4708  002398  65D0               	cpfsgt	_found& (0+255),b
  4709  00239A  D029               	goto	l10282
  4710                           
  4711                           ; BSR set to: 0
  4712  00239C  0E09               	movlw	9
  4713  00239E  0100               	movlb	0	; () banked
  4714  0023A0  61D0               	cpfslt	_found& (0+255),b
  4715  0023A2  D025               	goto	l10282
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;Setup_Fan_Temp.c: 69: {
  4719                           ;Setup_Fan_Temp.c: 70: Do_Beep_Good();
  4720  0023A4  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  4721                           
  4722                           ;Setup_Fan_Temp.c: 71: if (found == 5) Do_Save_New_Fan_Temp();
  4723  0023A8  0E05               	movlw	5
  4724  0023AA  0100               	movlb	0	; () banked
  4725  0023AC  19D0               	xorwf	_found& (0+255),w,b
  4726  0023AE  A4D8               	btfss	status,2,c
  4727  0023B0  D003               	goto	l10268
  4728                           
  4729                           ; BSR set to: 0
  4730  0023B2  EC5B  F026         	call	_Do_Save_New_Fan_Temp	;wreg free
  4731  0023B6  D000               	goto	l10268
  4732  0023B8                     l10268:
  4733                           
  4734                           ;Setup_Fan_Temp.c: 74: if (found == 8)
  4735  0023B8  0E08               	movlw	8
  4736  0023BA  0100               	movlb	0	; () banked
  4737  0023BC  19D0               	xorwf	_found& (0+255),w,b
  4738  0023BE  A4D8               	btfss	status,2,c
  4739  0023C0  D003               	goto	l10272
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;Setup_Fan_Temp.c: 75: Increase_Fan_Temp();
  4743  0023C2  EC1E  F026         	call	_Increase_Fan_Temp	;wreg free
  4744  0023C6  D000               	goto	l10272
  4745  0023C8                     l10272:
  4746                           
  4747                           ;Setup_Fan_Temp.c: 76: if (found == 6)
  4748  0023C8  0E06               	movlw	6
  4749  0023CA  0100               	movlb	0	; () banked
  4750  0023CC  19D0               	xorwf	_found& (0+255),w,b
  4751  0023CE  A4D8               	btfss	status,2,c
  4752  0023D0  D003               	goto	l10276
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;Setup_Fan_Temp.c: 77: Decrease_Fan_Temp();
  4756  0023D2  EC2B  F026         	call	_Decrease_Fan_Temp	;wreg free
  4757  0023D6  D000               	goto	l10276
  4758  0023D8                     l10276:
  4759                           
  4760                           ;Setup_Fan_Temp.c: 78: if (found == 7)
  4761  0023D8  0E07               	movlw	7
  4762  0023DA  0100               	movlb	0	; () banked
  4763  0023DC  19D0               	xorwf	_found& (0+255),w,b
  4764  0023DE  A4D8               	btfss	status,2,c
  4765  0023E0  D003               	goto	l10280
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;Setup_Fan_Temp.c: 79: Increase_Fan_Temp();
  4769  0023E2  EC1E  F026         	call	_Increase_Fan_Temp	;wreg free
  4770  0023E6  D000               	goto	l10280
  4771  0023E8                     l10280:
  4772                           
  4773                           ;Setup_Fan_Temp.c: 83: found = 0xff;
  4774  0023E8  0100               	movlb	0	; () banked
  4775  0023EA  69D0               	setf	_found& (0+255),b
  4776                           
  4777                           ;Setup_Fan_Temp.c: 84: }
  4778  0023EC  D003               	goto	l10284
  4779  0023EE                     l10282:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;Setup_Fan_Temp.c: 85: else
  4783                           ;Setup_Fan_Temp.c: 86: {
  4784                           ;Setup_Fan_Temp.c: 87: Do_Beep_Bad();
  4785  0023EE  ECF4  F025         	call	_Do_Beep_Bad	;wreg free
  4786  0023F2  D000               	goto	l10284
  4787  0023F4                     l10284:
  4788  0023F4  0100               	movlb	0	; () banked
  4789  0023F6  05C7               	decf	_In_Fan_Temp_Setup& (0+255),w,b
  4790  0023F8  B4D8               	btfsc	status,2,c
  4791  0023FA  D71A               	goto	l10226
  4792                           
  4793                           ; BSR set to: 0
  4794                           
  4795                           ; BSR set to: 0
  4796  0023FC  0012               	return		;funcret
  4797  0023FE                     __end_of_Setup_Fan_Temp:
  4798                           	opt stack 0
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postdec1	equ	0xFE5
  4806                           fsr1l	equ	0xFE1
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function _Initialize_Setup_Fan_Screen *****************
  4810 ;; Defined at:
  4811 ;;		line 132 in file "Setup_Fan_Temp.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;		None
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;		None
  4816 ;; Return value:  Size  Location     Type
  4817 ;;		None               void
  4818 ;; Registers used:
  4819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;Total ram usage:        0 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:   10
  4832 ;; This function calls:
  4833 ;;		_LCD_Reset
  4834 ;;		_TFT_GreenTab_Initialize
  4835 ;;		_drawtext
  4836 ;;		_fillScreen
  4837 ;;		_strcpy
  4838 ;; This function is called by:
  4839 ;;		_Setup_Fan_Temp
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text5
  4844  0033E6                     __ptext5:
  4845                           	opt stack 0
  4846  0033E6                     _Initialize_Setup_Fan_Screen:
  4847                           	opt stack 19
  4848                           
  4849                           ;Setup_Fan_Temp.c: 134: LCD_Reset();
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;incstack = 0
  4853  0033E6  EC83  F026         	call	_LCD_Reset	;wreg free
  4854                           
  4855                           ;Setup_Fan_Temp.c: 135: TFT_GreenTab_Initialize();
  4856  0033EA  EC7A  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  4857                           
  4858                           ;Setup_Fan_Temp.c: 136: fillScreen(0x0000);
  4859  0033EE  0E00               	movlw	0
  4860  0033F0  6E25               	movwf	fillScreen@color+1,c
  4861  0033F2  0E00               	movlw	0
  4862  0033F4  6E24               	movwf	fillScreen@color,c
  4863  0033F6  ECCA  F025         	call	_fillScreen	;wreg free
  4864                           
  4865                           ;Setup_Fan_Temp.c: 137: if (1 == 0)
  4866  0033FA  D005               	goto	l9744
  4867                           
  4868                           ;Setup_Fan_Temp.c: 138: {
  4869                           ;Setup_Fan_Temp.c: 139: Timing_Txt[12] = 'S';
  4870  0033FC  0E53               	movlw	83
  4871  0033FE  0101               	movlb	1	; () banked
  4872  003400  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  4873                           
  4874                           ;Setup_Fan_Temp.c: 140: Timing_Txt[13] = 'P';
  4875  003402  0E50               	movlw	80
  4876  003404  D004               	goto	L4
  4877  003406                     l9744:
  4878                           
  4879                           ;Setup_Fan_Temp.c: 142: else
  4880                           ;Setup_Fan_Temp.c: 143: {
  4881                           ;Setup_Fan_Temp.c: 144: Timing_Txt[12] = 'F';
  4882  003406  0E46               	movlw	70
  4883  003408  0101               	movlb	1	; () banked
  4884  00340A  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  4885                           
  4886                           ;Setup_Fan_Temp.c: 145: Timing_Txt[13] = 'A';
  4887  00340C  0E41               	movlw	65
  4888  00340E                     L4:
  4889  00340E  0101               	movlb	1	; () banked
  4890  003410  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  4891                           
  4892                           ; BSR set to: 1
  4893                           ;Setup_Fan_Temp.c: 146: }
  4894                           ;Setup_Fan_Temp.c: 147: Timing_Txt[14] = 24/10 + '0';
  4895  003412  0E32               	movlw	50
  4896  003414  0101               	movlb	1	; () banked
  4897  003416  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  4898                           
  4899                           ;Setup_Fan_Temp.c: 148: Timing_Txt[15] = 24%10 + '0';
  4900  003418  0E34               	movlw	52
  4901  00341A  0101               	movlb	1	; () banked
  4902  00341C  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  4903                           
  4904                           ;Setup_Fan_Temp.c: 149: Timing_Txt[17] = 3%10 + '0';
  4905  00341E  0E33               	movlw	51
  4906  003420  0101               	movlb	1	; () banked
  4907  003422  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  4908                           
  4909                           ;Setup_Fan_Temp.c: 150: Timing_Txt[19] = 13/10 + '0';
  4910  003424  0E31               	movlw	49
  4911  003426  0101               	movlb	1	; () banked
  4912  003428  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  4913                           
  4914                           ;Setup_Fan_Temp.c: 151: Timing_Txt[20] = 13%10 + '0';
  4915  00342A  0E33               	movlw	51
  4916  00342C  0101               	movlb	1	; () banked
  4917  00342E  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  4918                           
  4919                           ; BSR set to: 1
  4920                           ;Setup_Fan_Temp.c: 153: if (SYSTEM_ON == 1)
  4921  003430  0462               	decf	_SYSTEM_ON,w,c
  4922  003432  A4D8               	btfss	status,2,c
  4923  003434  D04C               	goto	l1102
  4924                           
  4925                           ; BSR set to: 1
  4926                           ;Setup_Fan_Temp.c: 154: {
  4927                           ;Setup_Fan_Temp.c: 155: drawtext(1 , 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  4928  003436  0E01               	movlw	1
  4929  003438  6E39               	movwf	drawtext@y,c
  4930  00343A  0E3C               	movlw	low _Timing_Txt
  4931  00343C  6E3A               	movwf	drawtext@_text,c
  4932  00343E  0E01               	movlw	high _Timing_Txt
  4933  003440  6E3B               	movwf	drawtext@_text+1,c
  4934  003442  0EFF               	movlw	255
  4935  003444  6E3D               	movwf	drawtext@color+1,c
  4936  003446  683C               	setf	drawtext@color,c
  4937  003448  0E00               	movlw	0
  4938  00344A  6E3F               	movwf	drawtext@bg+1,c
  4939  00344C  0E00               	movlw	0
  4940  00344E  6E3E               	movwf	drawtext@bg,c
  4941  003450  0E01               	movlw	1
  4942  003452  6E40               	movwf	drawtext@size,c
  4943  003454  0E01               	movlw	1
  4944  003456  ECDB  F01A         	call	_drawtext
  4945                           
  4946                           ;Setup_Fan_Temp.c: 158: strcpy(txt, " Fan Setup\0");
  4947  00345A  C05E  F011         	movff	_txt,strcpy@to
  4948  00345E  C05F  F012         	movff	_txt+1,strcpy@to+1
  4949  003462  0E94               	movlw	low STR_38
  4950  003464  6E13               	movwf	strcpy@from,c
  4951  003466  0EFF               	movlw	high STR_38
  4952  003468  6E14               	movwf	strcpy@from+1,c
  4953  00346A  EC31  F024         	call	_strcpy	;wreg free
  4954                           
  4955                           ;Setup_Fan_Temp.c: 159: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  4956  00346E  0E1A               	movlw	26
  4957  003470  6E39               	movwf	drawtext@y,c
  4958  003472  C05E  F03A         	movff	_txt,drawtext@_text
  4959  003476  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  4960  00347A  0EFF               	movlw	255
  4961  00347C  6E3D               	movwf	drawtext@color+1,c
  4962  00347E  0EE0               	movlw	224
  4963  003480  6E3C               	movwf	drawtext@color,c
  4964  003482  0E00               	movlw	0
  4965  003484  6E3F               	movwf	drawtext@bg+1,c
  4966  003486  0E00               	movlw	0
  4967  003488  6E3E               	movwf	drawtext@bg,c
  4968  00348A  0E02               	movlw	2
  4969  00348C  6E40               	movwf	drawtext@size,c
  4970  00348E  0E01               	movlw	1
  4971  003490  ECDB  F01A         	call	_drawtext
  4972                           
  4973                           ;Setup_Fan_Temp.c: 161: strcpy(txt, "  Set Fan Temp");
  4974  003494  C05E  F011         	movff	_txt,strcpy@to
  4975  003498  C05F  F012         	movff	_txt+1,strcpy@to+1
  4976  00349C  0E6C               	movlw	low STR_39
  4977  00349E  6E13               	movwf	strcpy@from,c
  4978  0034A0  0EFF               	movlw	high STR_39
  4979  0034A2  6E14               	movwf	strcpy@from+1,c
  4980  0034A4  EC31  F024         	call	_strcpy	;wreg free
  4981                           
  4982                           ;Setup_Fan_Temp.c: 162: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  4983  0034A8  0E3C               	movlw	60
  4984  0034AA  6E39               	movwf	drawtext@y,c
  4985  0034AC  C05E  F03A         	movff	_txt,drawtext@_text
  4986  0034B0  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  4987  0034B4  0E07               	movlw	7
  4988  0034B6  6E3D               	movwf	drawtext@color+1,c
  4989  0034B8  683C               	setf	drawtext@color,c
  4990  0034BA  0E00               	movlw	0
  4991  0034BC  6E3F               	movwf	drawtext@bg+1,c
  4992  0034BE  0E00               	movlw	0
  4993  0034C0  6E3E               	movwf	drawtext@bg,c
  4994  0034C2  0E01               	movlw	1
  4995  0034C4  6E40               	movwf	drawtext@size,c
  4996  0034C6  0E0F               	movlw	15
  4997  0034C8  ECDB  F01A         	call	_drawtext
  4998  0034CC  D000               	goto	l1102
  4999  0034CE                     l1102:
  5000  0034CE  0012               	return		;funcret
  5001  0034D0                     __end_of_Initialize_Setup_Fan_Screen:
  5002                           	opt stack 0
  5003                           tblptru	equ	0xFF8
  5004                           tblptrh	equ	0xFF7
  5005                           tblptrl	equ	0xFF6
  5006                           tablat	equ	0xFF5
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           postdec1	equ	0xFE5
  5010                           fsr1l	equ	0xFE1
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _Increase_Fan_Temp *****************
  5014 ;; Defined at:
  5015 ;;		line 93 in file "Setup_Fan_Temp.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;		None
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;		None
  5020 ;; Return value:  Size  Location     Type
  5021 ;;		None               void
  5022 ;; Registers used:
  5023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;Total ram usage:        0 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:   11
  5036 ;; This function calls:
  5037 ;;		_Update_Setup_Fan_Screen
  5038 ;; This function is called by:
  5039 ;;		_Setup_Fan_Temp
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text6
  5044  004C3C                     __ptext6:
  5045                           	opt stack 0
  5046  004C3C                     _Increase_Fan_Temp:
  5047                           	opt stack 18
  5048                           
  5049                           ;Setup_Fan_Temp.c: 97: setup_fan_set_temp++;
  5050                           
  5051                           ;incstack = 0
  5052  004C3C  0100               	movlb	0	; () banked
  5053  004C3E  2BD4               	incf	_setup_fan_set_temp& (0+255),f,b
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;Setup_Fan_Temp.c: 98: if (setup_fan_set_temp > 110)
  5057  004C40  0E6E               	movlw	110
  5058  004C42  0100               	movlb	0	; () banked
  5059  004C44  65D4               	cpfsgt	_setup_fan_set_temp& (0+255),b
  5060  004C46  D004               	goto	l9770
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;Setup_Fan_Temp.c: 99: setup_fan_set_temp = 110;
  5064  004C48  0E6E               	movlw	110
  5065  004C4A  0100               	movlb	0	; () banked
  5066  004C4C  6FD4               	movwf	_setup_fan_set_temp& (0+255),b
  5067  004C4E  D000               	goto	l9770
  5068  004C50                     l9770:
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;Setup_Fan_Temp.c: 101: Update_Setup_Fan_Screen();
  5072  004C50  EC31  F020         	call	_Update_Setup_Fan_Screen	;wreg free
  5073  004C54  0012               	return		;funcret
  5074  004C56                     __end_of_Increase_Fan_Temp:
  5075                           	opt stack 0
  5076                           tblptru	equ	0xFF8
  5077                           tblptrh	equ	0xFF7
  5078                           tblptrl	equ	0xFF6
  5079                           tablat	equ	0xFF5
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           postdec1	equ	0xFE5
  5083                           fsr1l	equ	0xFE1
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function _Do_Save_New_Fan_Temp *****************
  5087 ;; Defined at:
  5088 ;;		line 116 in file "Setup_Fan_Temp.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;		None
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;		None               void
  5095 ;; Registers used:
  5096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;Total ram usage:        0 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:   11
  5109 ;; This function calls:
  5110 ;;		_DS3231_Read_Time
  5111 ;;		_Initialize_Screen
  5112 ;; This function is called by:
  5113 ;;		_Setup_Fan_Temp
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text7
  5118  004CB6                     __ptext7:
  5119                           	opt stack 0
  5120  004CB6                     _Do_Save_New_Fan_Temp:
  5121                           	opt stack 18
  5122                           
  5123                           ;Setup_Fan_Temp.c: 118: fan_set_temp = setup_fan_set_temp;
  5124                           
  5125                           ;incstack = 0
  5126  004CB6  C0D4  F0DC         	movff	_setup_fan_set_temp,_fan_set_temp
  5127                           
  5128                           ;Setup_Fan_Temp.c: 119: DS3231_Read_Time();
  5129  004CBA  EC5A  F021         	call	_DS3231_Read_Time	;wreg free
  5130                           
  5131                           ;Setup_Fan_Temp.c: 120: Initialize_Screen();
  5132  004CBE  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  5133                           
  5134                           ;Setup_Fan_Temp.c: 121: In_Fan_Temp_Setup = 0;
  5135  004CC2  0E00               	movlw	0
  5136  004CC4  0100               	movlb	0	; () banked
  5137  004CC6  6FC7               	movwf	_In_Fan_Temp_Setup& (0+255),b
  5138                           
  5139                           ; BSR set to: 0
  5140  004CC8  0012               	return		;funcret
  5141  004CCA                     __end_of_Do_Save_New_Fan_Temp:
  5142                           	opt stack 0
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           postinc0	equ	0xFEE
  5148                           wreg	equ	0xFE8
  5149                           postdec1	equ	0xFE5
  5150                           fsr1l	equ	0xFE1
  5151                           status	equ	0xFD8
  5152                           
  5153 ;; *************** function _Decrease_Fan_Temp *****************
  5154 ;; Defined at:
  5155 ;;		line 105 in file "Setup_Fan_Temp.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;		None
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;		None
  5160 ;; Return value:  Size  Location     Type
  5161 ;;		None               void
  5162 ;; Registers used:
  5163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;Total ram usage:        0 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:   11
  5176 ;; This function calls:
  5177 ;;		_Update_Setup_Fan_Screen
  5178 ;; This function is called by:
  5179 ;;		_Setup_Fan_Temp
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text8
  5184  004C56                     __ptext8:
  5185                           	opt stack 0
  5186  004C56                     _Decrease_Fan_Temp:
  5187                           	opt stack 18
  5188                           
  5189                           ;Setup_Fan_Temp.c: 109: setup_fan_set_temp--;
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;incstack = 0
  5193  004C56  0100               	movlb	0	; () banked
  5194  004C58  07D4               	decf	_setup_fan_set_temp& (0+255),f,b
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;Setup_Fan_Temp.c: 110: if (setup_fan_set_temp < 50)
  5198  004C5A  0E32               	movlw	50
  5199  004C5C  0100               	movlb	0	; () banked
  5200  004C5E  61D4               	cpfslt	_setup_fan_set_temp& (0+255),b
  5201  004C60  D004               	goto	l9778
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;Setup_Fan_Temp.c: 111: setup_fan_set_temp = 50;
  5205  004C62  0E32               	movlw	50
  5206  004C64  0100               	movlb	0	; () banked
  5207  004C66  6FD4               	movwf	_setup_fan_set_temp& (0+255),b
  5208  004C68  D000               	goto	l9778
  5209  004C6A                     l9778:
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;Setup_Fan_Temp.c: 113: Update_Setup_Fan_Screen();
  5213  004C6A  EC31  F020         	call	_Update_Setup_Fan_Screen	;wreg free
  5214  004C6E  0012               	return		;funcret
  5215  004C70                     __end_of_Decrease_Fan_Temp:
  5216                           	opt stack 0
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           postinc0	equ	0xFEE
  5222                           wreg	equ	0xFE8
  5223                           postdec1	equ	0xFE5
  5224                           fsr1l	equ	0xFE1
  5225                           status	equ	0xFD8
  5226                           
  5227 ;; *************** function _Update_Setup_Fan_Screen *****************
  5228 ;; Defined at:
  5229 ;;		line 166 in file "Setup_Fan_Temp.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  dc_char3        1   75[COMRAM] unsigned char 
  5234 ;;  dc_char2        1   74[COMRAM] unsigned char 
  5235 ;;  dc_char1        1   73[COMRAM] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;		None               void
  5238 ;; Registers used:
  5239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;Total ram usage:        3 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:   10
  5252 ;; This function calls:
  5253 ;;		___awdiv
  5254 ;;		___awmod
  5255 ;;		_drawtext
  5256 ;; This function is called by:
  5257 ;;		_Setup_Fan_Temp
  5258 ;;		_Increase_Fan_Temp
  5259 ;;		_Decrease_Fan_Temp
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text9
  5264  004062                     __ptext9:
  5265                           	opt stack 0
  5266  004062                     _Update_Setup_Fan_Screen:
  5267                           	opt stack 19
  5268                           
  5269                           ;Setup_Fan_Temp.c: 168: char dc_char1 = (setup_fan_set_temp/100);
  5270                           
  5271                           ;incstack = 0
  5272  004062  C0D4  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5273  004066  6A18               	clrf	___awdiv@dividend+1,c
  5274  004068  0E00               	movlw	0
  5275  00406A  6E1A               	movwf	___awdiv@divisor+1,c
  5276  00406C  0E64               	movlw	100
  5277  00406E  6E19               	movwf	___awdiv@divisor,c
  5278  004070  EC3B  F01E         	call	___awdiv	;wreg free
  5279  004074  5017               	movf	?___awdiv,w,c
  5280  004076  6E4A               	movwf	Update_Setup_Fan_Screen@dc_char1,c
  5281                           
  5282                           ;Setup_Fan_Temp.c: 169: char dc_char2 = (setup_fan_set_temp/10);
  5283  004078  C0D4  F017         	movff	_setup_fan_set_temp,___awdiv@dividend
  5284  00407C  6A18               	clrf	___awdiv@dividend+1,c
  5285  00407E  0E00               	movlw	0
  5286  004080  6E1A               	movwf	___awdiv@divisor+1,c
  5287  004082  0E0A               	movlw	10
  5288  004084  6E19               	movwf	___awdiv@divisor,c
  5289  004086  EC3B  F01E         	call	___awdiv	;wreg free
  5290  00408A  5017               	movf	?___awdiv,w,c
  5291  00408C  6E4B               	movwf	Update_Setup_Fan_Screen@dc_char2,c
  5292                           
  5293                           ;Setup_Fan_Temp.c: 170: char dc_char3 = (setup_fan_set_temp%10);
  5294  00408E  C0D4  F03D         	movff	_setup_fan_set_temp,___awmod@dividend
  5295  004092  6A3E               	clrf	___awmod@dividend+1,c
  5296  004094  0E00               	movlw	0
  5297  004096  6E40               	movwf	___awmod@divisor+1,c
  5298  004098  0E0A               	movlw	10
  5299  00409A  6E3F               	movwf	___awmod@divisor,c
  5300  00409C  EC72  F020         	call	___awmod	;wreg free
  5301  0040A0  503D               	movf	?___awmod,w,c
  5302  0040A2  6E4C               	movwf	Update_Setup_Fan_Screen@dc_char3,c
  5303                           
  5304                           ;Setup_Fan_Temp.c: 173: setup_fan_set_text[0] = dc_char1 + '0';
  5305  0040A4  504A               	movf	Update_Setup_Fan_Screen@dc_char1,w,c
  5306  0040A6  0F30               	addlw	48
  5307  0040A8  0101               	movlb	1	; () banked
  5308  0040AA  6F87               	movwf	_setup_fan_set_text& (0+255),b
  5309                           
  5310                           ; BSR set to: 1
  5311                           ;Setup_Fan_Temp.c: 174: setup_fan_set_text[1] = dc_char2 + '0';
  5312  0040AC  504B               	movf	Update_Setup_Fan_Screen@dc_char2,w,c
  5313  0040AE  0F30               	addlw	48
  5314  0040B0  0101               	movlb	1	; () banked
  5315  0040B2  6F88               	movwf	(_setup_fan_set_text+1)& (0+255),b
  5316                           
  5317                           ; BSR set to: 1
  5318                           ;Setup_Fan_Temp.c: 175: setup_fan_set_text[2] = dc_char3 + '0';
  5319  0040B4  504C               	movf	Update_Setup_Fan_Screen@dc_char3,w,c
  5320  0040B6  0F30               	addlw	48
  5321  0040B8  0101               	movlb	1	; () banked
  5322  0040BA  6F89               	movwf	(_setup_fan_set_text+2)& (0+255),b
  5323                           
  5324                           ; BSR set to: 1
  5325                           ;Setup_Fan_Temp.c: 177: drawtext(40, 74 ,setup_fan_set_text, 0xF800, 0x0000, 2);
  5326  0040BC  0E4A               	movlw	74
  5327  0040BE  6E39               	movwf	drawtext@y,c
  5328  0040C0  0E87               	movlw	low _setup_fan_set_text
  5329  0040C2  6E3A               	movwf	drawtext@_text,c
  5330  0040C4  0E01               	movlw	high _setup_fan_set_text
  5331  0040C6  6E3B               	movwf	drawtext@_text+1,c
  5332  0040C8  0EF8               	movlw	248
  5333  0040CA  6E3D               	movwf	drawtext@color+1,c
  5334  0040CC  0E00               	movlw	0
  5335  0040CE  6E3C               	movwf	drawtext@color,c
  5336  0040D0  0E00               	movlw	0
  5337  0040D2  6E3F               	movwf	drawtext@bg+1,c
  5338  0040D4  0E00               	movlw	0
  5339  0040D6  6E3E               	movwf	drawtext@bg,c
  5340  0040D8  0E02               	movlw	2
  5341  0040DA  6E40               	movwf	drawtext@size,c
  5342  0040DC  0E28               	movlw	40
  5343  0040DE  ECDB  F01A         	call	_drawtext
  5344  0040E2  0012               	return		;funcret
  5345  0040E4                     __end_of_Update_Setup_Fan_Screen:
  5346                           	opt stack 0
  5347                           tblptru	equ	0xFF8
  5348                           tblptrh	equ	0xFF7
  5349                           tblptrl	equ	0xFF6
  5350                           tablat	equ	0xFF5
  5351                           postinc0	equ	0xFEE
  5352                           wreg	equ	0xFE8
  5353                           postdec1	equ	0xFE5
  5354                           fsr1l	equ	0xFE1
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _Increase_Duty_Cycle *****************
  5358 ;; Defined at:
  5359 ;;		line 107 in file "Fan_Support.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;		None               void
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;Total ram usage:        0 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    7
  5380 ;; This function calls:
  5381 ;;		_Do_Beep
  5382 ;;		_do_update_pwm
  5383 ;; This function is called by:
  5384 ;;		_main
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           	psect	text10
  5389  004894                     __ptext10:
  5390                           	opt stack 0
  5391  004894                     _Increase_Duty_Cycle:
  5392                           	opt stack 23
  5393                           
  5394                           ;Fan_Support.c: 109: if (FANMODE == 0)
  5395                           
  5396                           ;incstack = 0
  5397  004894  0100               	movlb	0	; () banked
  5398  004896  51C2               	movf	_FANMODE& (0+255),w,b
  5399  004898  A4D8               	btfss	status,2,c
  5400  00489A  D013               	goto	l67
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;Fan_Support.c: 110: {
  5404                           ;Fan_Support.c: 113: if (duty_cycle == 100)
  5405  00489C  0E64               	movlw	100
  5406  00489E  1864               	xorwf	_duty_cycle,w,c
  5407  0048A0  A4D8               	btfss	status,2,c
  5408  0048A2  D008               	goto	l9916
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;Fan_Support.c: 114: {
  5412                           ;Fan_Support.c: 115: Do_Beep();
  5413  0048A4  EC02  F026         	call	_Do_Beep	;wreg free
  5414                           
  5415                           ;Fan_Support.c: 116: Do_Beep();
  5416  0048A8  EC02  F026         	call	_Do_Beep	;wreg free
  5417                           
  5418                           ;Fan_Support.c: 117: do_update_pwm(duty_cycle);
  5419  0048AC  5064               	movf	_duty_cycle,w,c
  5420  0048AE  ECE9  F01C         	call	_do_update_pwm
  5421                           
  5422                           ;Fan_Support.c: 118: }
  5423  0048B2  D007               	goto	l67
  5424  0048B4                     l9916:
  5425                           
  5426                           ;Fan_Support.c: 119: else
  5427                           ;Fan_Support.c: 120: {
  5428                           ;Fan_Support.c: 121: duty_cycle = duty_cycle + 5;
  5429  0048B4  5064               	movf	_duty_cycle,w,c
  5430  0048B6  0F05               	addlw	5
  5431  0048B8  6E64               	movwf	_duty_cycle,c
  5432                           
  5433                           ;Fan_Support.c: 122: do_update_pwm(duty_cycle);
  5434  0048BA  5064               	movf	_duty_cycle,w,c
  5435  0048BC  ECE9  F01C         	call	_do_update_pwm
  5436  0048C0  D000               	goto	l67
  5437  0048C2                     l67:
  5438  0048C2  0012               	return		;funcret
  5439  0048C4                     __end_of_Increase_Duty_Cycle:
  5440                           	opt stack 0
  5441                           tblptru	equ	0xFF8
  5442                           tblptrh	equ	0xFF7
  5443                           tblptrl	equ	0xFF6
  5444                           tablat	equ	0xFF5
  5445                           postinc0	equ	0xFEE
  5446                           wreg	equ	0xFE8
  5447                           postdec1	equ	0xFE5
  5448                           fsr1l	equ	0xFE1
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function _Do_Setup_Time *****************
  5452 ;; Defined at:
  5453 ;;		line 41 in file "Setup_Time.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;		None
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;		None               void
  5460 ;; Registers used:
  5461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;Total ram usage:        0 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:   12
  5474 ;; This function calls:
  5475 ;;		_DS1621_Read_Temp
  5476 ;;		_DS3231_Read_Time
  5477 ;;		_Decrease_Time
  5478 ;;		_Do_Beep_Bad
  5479 ;;		_Do_Beep_Good
  5480 ;;		_Do_Save_New_Time
  5481 ;;		_Exit_Time_Setup
  5482 ;;		_Go_Next_Field
  5483 ;;		_Go_Prev_Field
  5484 ;;		_Increase_Time
  5485 ;;		_Initialize_Setup_Time_Screen
  5486 ;;		_Monitor_Fan
  5487 ;;		_Read_Volt
  5488 ;;		_Set_D1_RGB
  5489 ;;		_Set_D2_RGB
  5490 ;;		_Update_Setup_Time_Screen
  5491 ;;		___awdiv
  5492 ;;		___ftge
  5493 ;;		___wmul
  5494 ;;		_bcd_2_dec
  5495 ;;		_check_for_button_input
  5496 ;;		_get_RPM
  5497 ;;		_printf
  5498 ;; This function is called by:
  5499 ;;		_main
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text11
  5504  001FDE                     __ptext11:
  5505                           	opt stack 0
  5506  001FDE                     _Do_Setup_Time:
  5507                           	opt stack 18
  5508                           
  5509                           ;Setup_Time.c: 44: Select_Field = 0;
  5510                           
  5511                           ;incstack = 0
  5512  001FDE  0E00               	movlw	0
  5513  001FE0  0100               	movlb	0	; () banked
  5514  001FE2  6FCB               	movwf	_Select_Field& (0+255),b
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;Setup_Time.c: 46: DS3231_Read_Time();
  5518  001FE4  EC5A  F021         	call	_DS3231_Read_Time	;wreg free
  5519                           
  5520                           ;Setup_Time.c: 47: setup_second = bcd_2_dec(second);
  5521  001FE8  5068               	movf	_second,w,c
  5522  001FEA  ECD2  F024         	call	_bcd_2_dec
  5523  001FEE  0100               	movlb	0	; () banked
  5524  001FF0  6FD8               	movwf	_setup_second& (0+255),b
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;Setup_Time.c: 48: setup_minute = bcd_2_dec(minute);
  5528  001FF2  5066               	movf	_minute,w,c
  5529  001FF4  ECD2  F024         	call	_bcd_2_dec
  5530  001FF8  0100               	movlb	0	; () banked
  5531  001FFA  6FD6               	movwf	_setup_minute& (0+255),b
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;Setup_Time.c: 49: setup_hour = bcd_2_dec(hour);
  5535  001FFC  5065               	movf	_hour,w,c
  5536  001FFE  ECD2  F024         	call	_bcd_2_dec
  5537  002002  0100               	movlb	0	; () banked
  5538  002004  6FD5               	movwf	_setup_hour& (0+255),b
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;Setup_Time.c: 50: setup_day = bcd_2_dec(day);
  5542  002006  5063               	movf	_day,w,c
  5543  002008  ECD2  F024         	call	_bcd_2_dec
  5544  00200C  0100               	movlb	0	; () banked
  5545  00200E  6FD3               	movwf	_setup_day& (0+255),b
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;Setup_Time.c: 51: setup_month = bcd_2_dec(month);
  5549  002010  5067               	movf	_month,w,c
  5550  002012  ECD2  F024         	call	_bcd_2_dec
  5551  002016  0100               	movlb	0	; () banked
  5552  002018  6FD7               	movwf	_setup_month& (0+255),b
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;Setup_Time.c: 52: setup_year = bcd_2_dec(year);
  5556  00201A  506B               	movf	_year,w,c
  5557  00201C  ECD2  F024         	call	_bcd_2_dec
  5558  002020  0100               	movlb	0	; () banked
  5559  002022  6FD9               	movwf	_setup_year& (0+255),b
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;Setup_Time.c: 54: Initialize_Setup_Time_Screen();
  5563  002024  ECCA  F016         	call	_Initialize_Setup_Time_Screen	;wreg free
  5564                           
  5565                           ;Setup_Time.c: 55: Update_Setup_Time_Screen();
  5566  002028  EC5D  F015         	call	_Update_Setup_Time_Screen	;wreg free
  5567                           
  5568                           ;Setup_Time.c: 56: In_Time_Setup = 1;
  5569  00202C  0E01               	movlw	1
  5570  00202E  0100               	movlb	0	; () banked
  5571  002030  6FC8               	movwf	_In_Time_Setup& (0+255),b
  5572                           
  5573                           ;Setup_Time.c: 58: while (In_Time_Setup == 1)
  5574  002032  D0EF               	goto	l10216
  5575  002034                     l10150:
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;Setup_Time.c: 59: {
  5579                           ;Setup_Time.c: 60: DS3231_Read_Time();
  5580  002034  EC5A  F021         	call	_DS3231_Read_Time	;wreg free
  5581                           
  5582                           ;Setup_Time.c: 63: if(tempSecond != second)
  5583  002038  5068               	movf	_second,w,c
  5584  00203A  0100               	movlb	0	; () banked
  5585  00203C  19DD               	xorwf	_tempSecond& (0+255),w,b
  5586  00203E  B4D8               	btfsc	status,2,c
  5587  002040  D0A3               	goto	l10180
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;Setup_Time.c: 64: {
  5591                           ;Setup_Time.c: 65: tempSecond = second;
  5592  002042  C068  F0DD         	movff	_second,_tempSecond
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;Setup_Time.c: 66: rpm = get_RPM();
  5596  002046  EC5A  F023         	call	_get_RPM	;wreg free
  5597  00204A  C01F  F05C         	movff	?_get_RPM,_rpm
  5598  00204E  C020  F05D         	movff	?_get_RPM+1,_rpm+1
  5599                           
  5600                           ;Setup_Time.c: 68: volt = Read_Volt(0);
  5601  002052  0E00               	movlw	0
  5602  002054  EC23  F021         	call	_Read_Volt
  5603  002058  C03D  F0B8         	movff	?_Read_Volt,_volt
  5604  00205C  C03E  F0B9         	movff	?_Read_Volt+1,_volt+1
  5605  002060  C03F  F0BA         	movff	?_Read_Volt+2,_volt+2
  5606                           
  5607                           ;Setup_Time.c: 69: if (volt > 3.000) light_flag = 1;
  5608  002064  0E00               	movlw	0
  5609  002066  6E11               	movwf	___ftge@ff1,c
  5610  002068  0E40               	movlw	64
  5611  00206A  6E12               	movwf	___ftge@ff1+1,c
  5612  00206C  0E40               	movlw	64
  5613  00206E  6E13               	movwf	___ftge@ff1+2,c
  5614  002070  C0B8  F014         	movff	_volt,___ftge@ff2
  5615  002074  C0B9  F015         	movff	_volt+1,___ftge@ff2+1
  5616  002078  C0BA  F016         	movff	_volt+2,___ftge@ff2+2
  5617  00207C  EC86  F01E         	call	___ftge	;wreg free
  5618  002080  B0D8               	btfsc	status,0,c
  5619  002082  D004               	goto	l10162
  5620  002084  0E01               	movlw	1
  5621  002086  0100               	movlb	0	; () banked
  5622  002088  6FD1               	movwf	_light_flag& (0+255),b
  5623  00208A  D000               	goto	l10162
  5624  00208C                     l10162:
  5625                           
  5626                           ;Setup_Time.c: 70: tempC = DS1621_Read_Temp();
  5627  00208C  EC13  F024         	call	_DS1621_Read_Temp	;wreg free
  5628  002090  5014               	movf	?_DS1621_Read_Temp,w,c
  5629  002092  6E69               	movwf	_tempC,c
  5630                           
  5631                           ;Setup_Time.c: 71: tempF = (tempC * 9 / 5) + 32;
  5632  002094  5069               	movf	_tempC,w,c
  5633  002096  6E11               	movwf	___wmul@multiplier,c
  5634  002098  6A12               	clrf	___wmul@multiplier+1,c
  5635  00209A  BE11               	btfsc	___wmul@multiplier,7,c
  5636  00209C  0612               	decf	___wmul@multiplier+1,f,c
  5637  00209E  0E00               	movlw	0
  5638  0020A0  6E14               	movwf	___wmul@multiplicand+1,c
  5639  0020A2  0E09               	movlw	9
  5640  0020A4  6E13               	movwf	___wmul@multiplicand,c
  5641  0020A6  ECE7  F024         	call	___wmul	;wreg free
  5642  0020AA  C011  F017         	movff	?___wmul,___awdiv@dividend
  5643  0020AE  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  5644  0020B2  0E00               	movlw	0
  5645  0020B4  6E1A               	movwf	___awdiv@divisor+1,c
  5646  0020B6  0E05               	movlw	5
  5647  0020B8  6E19               	movwf	___awdiv@divisor,c
  5648  0020BA  EC3B  F01E         	call	___awdiv	;wreg free
  5649  0020BE  5017               	movf	?___awdiv,w,c
  5650  0020C0  0F20               	addlw	32
  5651  0020C2  6E6A               	movwf	_tempF,c
  5652                           
  5653                           ;Setup_Time.c: 72: Set_D1_RGB(duty_cycle);
  5654  0020C4  5064               	movf	_duty_cycle,w,c
  5655  0020C6  ECEC  F022         	call	_Set_D1_RGB
  5656                           
  5657                           ;Setup_Time.c: 73: Set_D2_RGB(rpm);
  5658  0020CA  C05C  F01F         	movff	_rpm,Set_D2_RGB@rpm
  5659  0020CE  C05D  F020         	movff	_rpm+1,Set_D2_RGB@rpm+1
  5660  0020D2  EC73  F022         	call	_Set_D2_RGB	;wreg free
  5661                           
  5662                           ;Setup_Time.c: 75: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,
      +                          year);
  5663  0020D6  0E75               	movlw	low STR_4
  5664  0020D8  0100               	movlb	0	; () banked
  5665  0020DA  6F86               	movwf	printf@f& (0+255),b
  5666  0020DC  0EFE               	movlw	high STR_4
  5667  0020DE  0100               	movlb	0	; () banked
  5668  0020E0  6F87               	movwf	(printf@f+1)& (0+255),b
  5669  0020E2  C065  F088         	movff	_hour,?_printf+2
  5670  0020E6  0100               	movlb	0	; () banked
  5671  0020E8  6B89               	clrf	(?_printf+3)& (0+255),b
  5672  0020EA  C066  F08A         	movff	_minute,?_printf+4
  5673  0020EE  0100               	movlb	0	; () banked
  5674  0020F0  6B8B               	clrf	(?_printf+5)& (0+255),b
  5675  0020F2  C068  F08C         	movff	_second,?_printf+6
  5676  0020F6  0100               	movlb	0	; () banked
  5677  0020F8  6B8D               	clrf	(?_printf+7)& (0+255),b
  5678  0020FA  C067  F08E         	movff	_month,?_printf+8
  5679  0020FE  0100               	movlb	0	; () banked
  5680  002100  6B8F               	clrf	(?_printf+9)& (0+255),b
  5681  002102  C063  F090         	movff	_day,?_printf+10
  5682  002106  0100               	movlb	0	; () banked
  5683  002108  6B91               	clrf	(?_printf+11)& (0+255),b
  5684  00210A  C06B  F092         	movff	_year,?_printf+12
  5685  00210E  0100               	movlb	0	; () banked
  5686  002110  6B93               	clrf	(?_printf+13)& (0+255),b
  5687  002112  EC0E  F000         	call	_printf	;wreg free
  5688                           
  5689                           ;Setup_Time.c: 76: printf (" Temp = %d C = %d F ", tempC, tempF);
  5690  002116  0EF7               	movlw	low STR_5
  5691  002118  0100               	movlb	0	; () banked
  5692  00211A  6F86               	movwf	printf@f& (0+255),b
  5693  00211C  0EFE               	movlw	high STR_5
  5694  00211E  0100               	movlb	0	; () banked
  5695  002120  6F87               	movwf	(printf@f+1)& (0+255),b
  5696  002122  5069               	movf	_tempC,w,c
  5697  002124  0100               	movlb	0	; () banked
  5698  002126  6F88               	movwf	(?_printf+2)& (0+255),b
  5699  002128  6B89               	clrf	(?_printf+3)& (0+255),b
  5700  00212A  BF88               	btfsc	(?_printf+2)& (0+255),7,b
  5701  00212C  0789               	decf	(?_printf+3)& (0+255),f,b
  5702  00212E  506A               	movf	_tempF,w,c
  5703  002130  0100               	movlb	0	; () banked
  5704  002132  6F8A               	movwf	(?_printf+4)& (0+255),b
  5705  002134  6B8B               	clrf	(?_printf+5)& (0+255),b
  5706  002136  BF8A               	btfsc	(?_printf+4)& (0+255),7,b
  5707  002138  078B               	decf	(?_printf+5)& (0+255),f,b
  5708  00213A  EC0E  F000         	call	_printf	;wreg free
  5709                           
  5710                           ;Setup_Time.c: 77: printf ("Light Sensor = %f V", volt);
  5711  00213E  0E20               	movlw	low STR_6
  5712  002140  0100               	movlb	0	; () banked
  5713  002142  6F86               	movwf	printf@f& (0+255),b
  5714  002144  0EFF               	movlw	high STR_6
  5715  002146  0100               	movlb	0	; () banked
  5716  002148  6F87               	movwf	(printf@f+1)& (0+255),b
  5717  00214A  C0B8  F088         	movff	_volt,?_printf+2
  5718  00214E  C0B9  F089         	movff	_volt+1,?_printf+3
  5719  002152  C0BA  F08A         	movff	_volt+2,?_printf+4
  5720  002156  EC0E  F000         	call	_printf	;wreg free
  5721                           
  5722                           ;Setup_Time.c: 78: printf (" RPM = %d  dc = %d ls = %d\r\n", rpm, duty_cycle, light_flag
      +                          );
  5723  00215A  0E93               	movlw	low STR_7
  5724  00215C  0100               	movlb	0	; () banked
  5725  00215E  6F86               	movwf	printf@f& (0+255),b
  5726  002160  0EFE               	movlw	high STR_7
  5727  002162  0100               	movlb	0	; () banked
  5728  002164  6F87               	movwf	(printf@f+1)& (0+255),b
  5729  002166  C05C  F088         	movff	_rpm,?_printf+2
  5730  00216A  C05D  F089         	movff	_rpm+1,?_printf+3
  5731  00216E  C064  F08A         	movff	_duty_cycle,?_printf+4
  5732  002172  0100               	movlb	0	; () banked
  5733  002174  6B8B               	clrf	(?_printf+5)& (0+255),b
  5734  002176  C0D1  F08C         	movff	_light_flag,?_printf+6
  5735  00217A  0100               	movlb	0	; () banked
  5736  00217C  6B8D               	clrf	(?_printf+7)& (0+255),b
  5737  00217E  EC0E  F000         	call	_printf	;wreg free
  5738                           
  5739                           ;Setup_Time.c: 79: Monitor_Fan();
  5740  002182  EC9C  F022         	call	_Monitor_Fan	;wreg free
  5741  002186  D000               	goto	l10180
  5742  002188                     l10180:
  5743                           
  5744                           ;Setup_Time.c: 81: }
  5745                           ;Setup_Time.c: 82: if (check_for_button_input() == 1)
  5746  002188  EC44  F01D         	call	_check_for_button_input	;wreg free
  5747  00218C  06E8               	decf	wreg,f,c
  5748  00218E  A4D8               	btfss	status,2,c
  5749  002190  D040               	goto	l10216
  5750                           
  5751                           ;Setup_Time.c: 83: {
  5752                           ;Setup_Time.c: 85: if (found >= 3 && found <= 8)
  5753  002192  0E02               	movlw	2
  5754  002194  0100               	movlb	0	; () banked
  5755  002196  65D0               	cpfsgt	_found& (0+255),b
  5756  002198  D039               	goto	l10214
  5757                           
  5758                           ; BSR set to: 0
  5759  00219A  0E09               	movlw	9
  5760  00219C  0100               	movlb	0	; () banked
  5761  00219E  61D0               	cpfslt	_found& (0+255),b
  5762  0021A0  D035               	goto	l10214
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;Setup_Time.c: 86: {
  5766                           ;Setup_Time.c: 87: Do_Beep_Good();
  5767  0021A2  ECE6  F025         	call	_Do_Beep_Good	;wreg free
  5768                           
  5769                           ;Setup_Time.c: 88: if (found == 3)
  5770  0021A6  0E03               	movlw	3
  5771  0021A8  0100               	movlb	0	; () banked
  5772  0021AA  19D0               	xorwf	_found& (0+255),w,b
  5773  0021AC  A4D8               	btfss	status,2,c
  5774  0021AE  D003               	goto	l10192
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;Setup_Time.c: 89: Go_Prev_Field();
  5778  0021B0  EC8B  F025         	call	_Go_Prev_Field	;wreg free
  5779  0021B4  D000               	goto	l10192
  5780  0021B6                     l10192:
  5781                           
  5782                           ;Setup_Time.c: 90: if (found == 4)
  5783  0021B6  0E04               	movlw	4
  5784  0021B8  0100               	movlb	0	; () banked
  5785  0021BA  19D0               	xorwf	_found& (0+255),w,b
  5786  0021BC  A4D8               	btfss	status,2,c
  5787  0021BE  D003               	goto	l10196
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;Setup_Time.c: 91: Go_Next_Field();
  5791  0021C0  EC9B  F025         	call	_Go_Next_Field	;wreg free
  5792  0021C4  D000               	goto	l10196
  5793  0021C6                     l10196:
  5794                           
  5795                           ;Setup_Time.c: 92: if (found == 5)
  5796  0021C6  0E05               	movlw	5
  5797  0021C8  0100               	movlb	0	; () banked
  5798  0021CA  19D0               	xorwf	_found& (0+255),w,b
  5799  0021CC  A4D8               	btfss	status,2,c
  5800  0021CE  D003               	goto	l10200
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;Setup_Time.c: 93: Do_Save_New_Time();
  5804  0021D0  EC65  F026         	call	_Do_Save_New_Time	;wreg free
  5805  0021D4  D000               	goto	l10200
  5806  0021D6                     l10200:
  5807                           
  5808                           ;Setup_Time.c: 94: if (found == 8)
  5809  0021D6  0E08               	movlw	8
  5810  0021D8  0100               	movlb	0	; () banked
  5811  0021DA  19D0               	xorwf	_found& (0+255),w,b
  5812  0021DC  A4D8               	btfss	status,2,c
  5813  0021DE  D003               	goto	l10204
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;Setup_Time.c: 95: Exit_Time_Setup();
  5817  0021E0  ECC2  F026         	call	_Exit_Time_Setup	;wreg free
  5818  0021E4  D000               	goto	l10204
  5819  0021E6                     l10204:
  5820                           
  5821                           ;Setup_Time.c: 96: if (found == 6)
  5822  0021E6  0E06               	movlw	6
  5823  0021E8  0100               	movlb	0	; () banked
  5824  0021EA  19D0               	xorwf	_found& (0+255),w,b
  5825  0021EC  A4D8               	btfss	status,2,c
  5826  0021EE  D003               	goto	l10208
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;Setup_Time.c: 97: Decrease_Time();
  5830  0021F0  EC8E  F01C         	call	_Decrease_Time	;wreg free
  5831  0021F4  D000               	goto	l10208
  5832  0021F6                     l10208:
  5833                           
  5834                           ;Setup_Time.c: 98: if (found == 7)
  5835  0021F6  0E07               	movlw	7
  5836  0021F8  0100               	movlb	0	; () banked
  5837  0021FA  19D0               	xorwf	_found& (0+255),w,b
  5838  0021FC  A4D8               	btfss	status,2,c
  5839  0021FE  D003               	goto	l10212
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;Setup_Time.c: 99: Increase_Time();
  5843  002200  EC9B  F01D         	call	_Increase_Time	;wreg free
  5844  002204  D000               	goto	l10212
  5845  002206                     l10212:
  5846                           
  5847                           ;Setup_Time.c: 100: found = 0xff;
  5848  002206  0100               	movlb	0	; () banked
  5849  002208  69D0               	setf	_found& (0+255),b
  5850                           
  5851                           ;Setup_Time.c: 101: }
  5852  00220A  D003               	goto	l10216
  5853  00220C                     l10214:
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;Setup_Time.c: 102: else
  5857                           ;Setup_Time.c: 103: {
  5858                           ;Setup_Time.c: 104: Do_Beep_Bad();
  5859  00220C  ECF4  F025         	call	_Do_Beep_Bad	;wreg free
  5860  002210  D000               	goto	l10216
  5861  002212                     l10216:
  5862  002212  0100               	movlb	0	; () banked
  5863  002214  05C8               	decf	_In_Time_Setup& (0+255),w,b
  5864  002216  B4D8               	btfsc	status,2,c
  5865  002218  D70D               	goto	l10150
  5866                           
  5867                           ; BSR set to: 0
  5868                           
  5869                           ; BSR set to: 0
  5870  00221A  0012               	return		;funcret
  5871  00221C                     __end_of_Do_Setup_Time:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           postdec1	equ	0xFE5
  5880                           fsr1l	equ	0xFE1
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function _get_RPM *****************
  5884 ;; Defined at:
  5885 ;;		line 68 in file "Fan_Support.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  RPS             2   32[COMRAM] int 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  2   30[COMRAM] int 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5899 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;Total ram usage:        4 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    4
  5906 ;; This function calls:
  5907 ;;		___awdiv
  5908 ;;		___wmul
  5909 ;; This function is called by:
  5910 ;;		_main
  5911 ;;		_Setup_Fan_Temp
  5912 ;;		_Do_Setup_Time
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text12
  5917  0046B4                     __ptext12:
  5918                           	opt stack 0
  5919  0046B4                     _get_RPM:
  5920                           	opt stack 26
  5921                           
  5922                           ;Fan_Support.c: 71: int RPS = TMR3L / 2;
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;incstack = 0
  5926  0046B4  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  5927  0046B8  6A18               	clrf	___awdiv@dividend+1,c
  5928  0046BA  0E00               	movlw	0
  5929  0046BC  6E1A               	movwf	___awdiv@divisor+1,c
  5930  0046BE  0E02               	movlw	2
  5931  0046C0  6E19               	movwf	___awdiv@divisor,c
  5932  0046C2  EC3B  F01E         	call	___awdiv	;wreg free
  5933  0046C6  C017  F021         	movff	?___awdiv,get_RPM@RPS
  5934  0046CA  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  5935                           
  5936                           ;Fan_Support.c: 73: TMR3L = 0;
  5937  0046CE  0E00               	movlw	0
  5938  0046D0  6EB2               	movwf	4018,c	;volatile
  5939                           
  5940                           ;Fan_Support.c: 74: return (RPS * 60);
  5941  0046D2  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  5942  0046D6  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  5943  0046DA  0E00               	movlw	0
  5944  0046DC  6E14               	movwf	___wmul@multiplicand+1,c
  5945  0046DE  0E3C               	movlw	60
  5946  0046E0  6E13               	movwf	___wmul@multiplicand,c
  5947  0046E2  ECE7  F024         	call	___wmul	;wreg free
  5948  0046E6  C011  F01F         	movff	?___wmul,?_get_RPM
  5949  0046EA  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  5950  0046EE  D000               	goto	l50
  5951  0046F0                     l50:
  5952  0046F0  0012               	return		;funcret
  5953  0046F2                     __end_of_get_RPM:
  5954                           	opt stack 0
  5955                           tblptru	equ	0xFF8
  5956                           tblptrh	equ	0xFF7
  5957                           tblptrl	equ	0xFF6
  5958                           tablat	equ	0xFF5
  5959                           postinc0	equ	0xFEE
  5960                           wreg	equ	0xFE8
  5961                           postdec1	equ	0xFE5
  5962                           fsr1l	equ	0xFE1
  5963                           status	equ	0xFD8
  5964                           
  5965 ;; *************** function _check_for_button_input *****************
  5966 ;; Defined at:
  5967 ;;		line 14 in file "utils.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;		None
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  j               2   21[BANK1 ] int 
  5972 ;;  array1         21    0[BANK1 ] unsigned char [21]
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  1    wreg      unsigned char 
  5975 ;; Registers used:
  5976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Totals:         1       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;Total ram usage:       24 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    7
  5989 ;; This function calls:
  5990 ;;		_printf
  5991 ;; This function is called by:
  5992 ;;		_main
  5993 ;;		_Setup_Fan_Temp
  5994 ;;		_Do_Setup_Time
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           	psect	text13
  5999  003A88                     __ptext13:
  6000                           	opt stack 0
  6001  003A88                     _check_for_button_input:
  6002                           	opt stack 23
  6003                           
  6004                           ;utils.c: 16: char array1[21]={0xa2,0x62,0xe2,0x22,0x02,0xc2,0xe0,0xa8,0x90,0x68,0x98,0x
      +                          b0,0x30,0x18,0x7a,0x10,0x38,0x5a,0x42,0x4a,0x52};
  6005                           
  6006                           ;incstack = 0
  6007  003A88  EE21  F023         	lfsr	2,check_for_button_input@F4236
  6008  003A8C  EE11  F08C         	lfsr	1,check_for_button_input@array1
  6009  003A90  0E14               	movlw	20
  6010  003A92                     u8431:
  6011  003A92  CFDB FFE3          	movff	plusw2,plusw1
  6012  003A96  06E8               	decf	wreg,f,c
  6013  003A98  E2FC               	bc	u8431
  6014                           
  6015                           ;utils.c: 18: if (Nec_ok == 1)
  6016  003A9A  0100               	movlb	0	; () banked
  6017  003A9C  05BB               	decf	_Nec_ok& (0+255),w,b
  6018  003A9E  0100               	movlb	0	; () banked
  6019  003AA0  11BC               	iorwf	(_Nec_ok+1)& (0+255),w,b
  6020  003AA2  A4D8               	btfss	status,2,c
  6021  003AA4  D045               	goto	l9704
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;utils.c: 19: {
  6025                           ;utils.c: 20: Nec_ok = 0;
  6026  003AA6  0E00               	movlw	0
  6027  003AA8  0100               	movlb	0	; () banked
  6028  003AAA  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
  6029  003AAC  0E00               	movlw	0
  6030  003AAE  6FBB               	movwf	_Nec_ok& (0+255),b
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;utils.c: 24: INTCON3bits.INT2IE = 1;
  6034  003AB0  88F0               	bsf	intcon3,4,c	;volatile
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;utils.c: 25: INTCON2bits.INTEDG2 = 0;
  6038  003AB2  98F1               	bcf	intcon2,4,c	;volatile
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;utils.c: 27: found = 0xff;
  6042  003AB4  0100               	movlb	0	; () banked
  6043  003AB6  69D0               	setf	_found& (0+255),b
  6044                           
  6045                           ;utils.c: 28: for (int j=0; j< 21; j++)
  6046  003AB8  0E00               	movlw	0
  6047  003ABA  0101               	movlb	1	; () banked
  6048  003ABC  6FA2               	movwf	(check_for_button_input@j+1)& (0+255),b
  6049  003ABE  0E00               	movlw	0
  6050  003AC0  6FA1               	movwf	check_for_button_input@j& (0+255),b
  6051  003AC2                     l9676:
  6052                           
  6053                           ; BSR set to: 1
  6054  003AC2  0101               	movlb	1	; () banked
  6055  003AC4  BFA2               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  6056  003AC6  D00A               	goto	l9680
  6057  003AC8  0101               	movlb	1	; () banked
  6058  003ACA  51A2               	movf	(check_for_button_input@j+1)& (0+255),w,b
  6059  003ACC  E121               	bnz	l9690
  6060  003ACE  0E15               	movlw	21
  6061  003AD0  0101               	movlb	1	; () banked
  6062  003AD2  5DA1               	subwf	check_for_button_input@j& (0+255),w,b
  6063  003AD4  B0D8               	btfsc	status,0,c
  6064  003AD6  D01C               	goto	l9690
  6065  003AD8  D001               	goto	l9680
  6066                           
  6067                           ; BSR set to: 1
  6068  003ADA  D01A               	goto	l9690
  6069  003ADC                     l9680:
  6070                           
  6071                           ; BSR set to: 1
  6072                           ;utils.c: 29: {
  6073                           ;utils.c: 31: if (Nec_Button == array1[j])
  6074  003ADC  0E8C               	movlw	low check_for_button_input@array1
  6075  003ADE  0101               	movlb	1	; () banked
  6076  003AE0  25A1               	addwf	check_for_button_input@j& (0+255),w,b
  6077  003AE2  6ED9               	movwf	fsr2l,c
  6078  003AE4  0E01               	movlw	high check_for_button_input@array1
  6079  003AE6  0101               	movlb	1	; () banked
  6080  003AE8  21A2               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  6081  003AEA  6EDA               	movwf	fsr2h,c
  6082  003AEC  0100               	movlb	0	; () banked
  6083  003AEE  51C9               	movf	_Nec_Button& (0+255),w,b
  6084  003AF0  18DE               	xorwf	postinc2,w,c
  6085  003AF2  A4D8               	btfss	status,2,c
  6086  003AF4  D008               	goto	l9686
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;utils.c: 32: {
  6090                           ;utils.c: 33: found = j;
  6091  003AF6  C1A1  F0D0         	movff	check_for_button_input@j,_found
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;utils.c: 34: j = 21;
  6095  003AFA  0E00               	movlw	0
  6096  003AFC  0101               	movlb	1	; () banked
  6097  003AFE  6FA2               	movwf	(check_for_button_input@j+1)& (0+255),b
  6098  003B00  0E15               	movlw	21
  6099  003B02  6FA1               	movwf	check_for_button_input@j& (0+255),b
  6100  003B04  D000               	goto	l9686
  6101  003B06                     l9686:
  6102  003B06  0101               	movlb	1	; () banked
  6103  003B08  4BA1               	infsnz	check_for_button_input@j& (0+255),f,b
  6104  003B0A  2BA2               	incf	(check_for_button_input@j+1)& (0+255),f,b
  6105  003B0C  D7DA               	goto	l9676
  6106                           
  6107                           ; BSR set to: 1
  6108  003B0E  D000               	goto	l9690
  6109  003B10                     l9690:
  6110                           
  6111                           ; BSR set to: 1
  6112                           ;utils.c: 35: }
  6113                           ;utils.c: 36: }
  6114                           ;utils.c: 38: if (found == 0xff)
  6115  003B10  0100               	movlb	0	; () banked
  6116  003B12  29D0               	incf	_found& (0+255),w,b
  6117  003B14  A4D8               	btfss	status,2,c
  6118  003B16  D00A               	goto	l9700
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;utils.c: 39: {
  6122                           ;utils.c: 40: printf ("Cannot find button \r\n");
  6123  003B18  0EE1               	movlw	low STR_3
  6124  003B1A  0100               	movlb	0	; () banked
  6125  003B1C  6F86               	movwf	printf@f& (0+255),b
  6126  003B1E  0EFE               	movlw	high STR_3
  6127  003B20  0100               	movlb	0	; () banked
  6128  003B22  6F87               	movwf	(printf@f+1)& (0+255),b
  6129  003B24  EC0E  F000         	call	_printf	;wreg free
  6130  003B28  D003               	goto	l9704
  6131                           
  6132                           ;utils.c: 42: }
  6133                           
  6134                           ;utils.c: 41: return (0);
  6135  003B2A  D004               	goto	l446
  6136  003B2C                     l9700:
  6137                           
  6138                           ;utils.c: 43: else
  6139                           ;utils.c: 44: {
  6140                           ;utils.c: 45: return (1);
  6141  003B2C  0E01               	movlw	1
  6142                           
  6143                           ;utils.c: 46: }
  6144                           ;utils.c: 47: }
  6145  003B2E  D002               	goto	l446
  6146  003B30                     l9704:
  6147                           
  6148                           ;utils.c: 48: else {return (0);}
  6149  003B30  0E00               	movlw	0
  6150  003B32  D000               	goto	l446
  6151  003B34                     l446:
  6152  003B34  0012               	return		;funcret
  6153  003B36                     __end_of_check_for_button_input:
  6154                           	opt stack 0
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           intcon2	equ	0xFF1
  6160                           intcon3	equ	0xFF0
  6161                           postinc0	equ	0xFEE
  6162                           wreg	equ	0xFE8
  6163                           postdec1	equ	0xFE5
  6164                           plusw1	equ	0xFE3
  6165                           fsr1l	equ	0xFE1
  6166                           postinc2	equ	0xFDE
  6167                           plusw2	equ	0xFDB
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function _bcd_2_dec *****************
  6173 ;; Defined at:
  6174 ;;		line 52 in file "utils.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  bcd             1    wreg     unsigned char 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  bcd             1   20[COMRAM] unsigned char 
  6179 ;;  dec             2   18[COMRAM] int 
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      unsigned char 
  6182 ;; Registers used:
  6183 ;;		wreg, status,2, status,0, prodl, prodh
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;Total ram usage:        5 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    3
  6196 ;; This function calls:
  6197 ;;		Nothing
  6198 ;; This function is called by:
  6199 ;;		_Do_Setup_Time
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text14
  6204  0049A4                     __ptext14:
  6205                           	opt stack 0
  6206  0049A4                     _bcd_2_dec:
  6207                           	opt stack 26
  6208                           
  6209                           ;incstack = 0
  6210                           ;bcd_2_dec@bcd stored from wreg
  6211  0049A4  6E15               	movwf	bcd_2_dec@bcd,c
  6212                           
  6213                           ;utils.c: 54: int dec;
  6214                           ;utils.c: 55: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  6215  0049A6  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  6216  0049AA  0E0F               	movlw	15
  6217  0049AC  1611               	andwf	??_bcd_2_dec,f,c
  6218  0049AE  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  6219  0049B2  3A12               	swapf	??_bcd_2_dec+1,f,c
  6220  0049B4  0E0F               	movlw	15
  6221  0049B6  1612               	andwf	??_bcd_2_dec+1,f,c
  6222  0049B8  5012               	movf	??_bcd_2_dec+1,w,c
  6223  0049BA  0D0A               	mullw	10
  6224  0049BC  5011               	movf	??_bcd_2_dec,w,c
  6225  0049BE  24F3               	addwf	prodl,w,c
  6226  0049C0  6E13               	movwf	bcd_2_dec@dec,c
  6227  0049C2  0E00               	movlw	0
  6228  0049C4  20F4               	addwfc	prodh,w,c
  6229  0049C6  6E14               	movwf	bcd_2_dec@dec+1,c
  6230                           
  6231                           ;utils.c: 56: return dec;
  6232  0049C8  5013               	movf	bcd_2_dec@dec,w,c
  6233  0049CA  D000               	goto	l451
  6234  0049CC                     l451:
  6235  0049CC  0012               	return		;funcret
  6236  0049CE                     __end_of_bcd_2_dec:
  6237                           	opt stack 0
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           intcon2	equ	0xFF1
  6245                           intcon3	equ	0xFF0
  6246                           postinc0	equ	0xFEE
  6247                           wreg	equ	0xFE8
  6248                           postdec1	equ	0xFE5
  6249                           plusw1	equ	0xFE3
  6250                           fsr1l	equ	0xFE1
  6251                           postinc2	equ	0xFDE
  6252                           plusw2	equ	0xFDB
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _Set_D2_RGB *****************
  6258 ;; Defined at:
  6259 ;;		line 257 in file "Main.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  rpm             2   30[COMRAM] int 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  range           2   32[COMRAM] int 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;		None               void
  6266 ;; Registers used:
  6267 ;;		wreg, status,2, status,0, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6273 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;Total ram usage:        4 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    4
  6280 ;; This function calls:
  6281 ;;		___awdiv
  6282 ;; This function is called by:
  6283 ;;		_main
  6284 ;;		_Setup_Fan_Temp
  6285 ;;		_Do_Setup_Time
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text15
  6290  0044E6                     __ptext15:
  6291                           	opt stack 0
  6292  0044E6                     _Set_D2_RGB:
  6293                           	opt stack 25
  6294                           
  6295                           ;Main.c: 260: int range = (rpm/500)+1;
  6296                           
  6297                           ;incstack = 0
  6298  0044E6  C01F  F017         	movff	Set_D2_RGB@rpm,___awdiv@dividend
  6299  0044EA  C020  F018         	movff	Set_D2_RGB@rpm+1,___awdiv@dividend+1
  6300  0044EE  0E01               	movlw	1
  6301  0044F0  6E1A               	movwf	___awdiv@divisor+1,c
  6302  0044F2  0EF4               	movlw	244
  6303  0044F4  6E19               	movwf	___awdiv@divisor,c
  6304  0044F6  EC3B  F01E         	call	___awdiv	;wreg free
  6305  0044FA  0E01               	movlw	1
  6306  0044FC  2417               	addwf	?___awdiv,w,c
  6307  0044FE  6E21               	movwf	Set_D2_RGB@range,c
  6308  004500  0E00               	movlw	0
  6309  004502  2018               	addwfc	?___awdiv+1,w,c
  6310  004504  6E22               	movwf	Set_D2_RGB@range+1,c
  6311                           
  6312                           ;Main.c: 261: if (range > 7)
  6313  004506  BE22               	btfsc	Set_D2_RGB@range+1,7,c
  6314  004508  D00B               	goto	l9732
  6315  00450A  5022               	movf	Set_D2_RGB@range+1,w,c
  6316  00450C  E104               	bnz	u8500
  6317  00450E  0E08               	movlw	8
  6318  004510  5C21               	subwf	Set_D2_RGB@range,w,c
  6319  004512  A0D8               	btfss	status,0,c
  6320  004514  D005               	goto	l9732
  6321  004516                     u8500:
  6322                           
  6323                           ;Main.c: 262: range = 7;
  6324  004516  0E00               	movlw	0
  6325  004518  6E22               	movwf	Set_D2_RGB@range+1,c
  6326  00451A  0E07               	movlw	7
  6327  00451C  6E21               	movwf	Set_D2_RGB@range,c
  6328  00451E  D000               	goto	l9732
  6329  004520                     l9732:
  6330                           
  6331                           ;Main.c: 263: if (rpm == 0)
  6332  004520  501F               	movf	Set_D2_RGB@rpm,w,c
  6333  004522  1020               	iorwf	Set_D2_RGB@rpm+1,w,c
  6334  004524  A4D8               	btfss	status,2,c
  6335  004526  D005               	goto	l9736
  6336                           
  6337                           ;Main.c: 264: range = 0;
  6338  004528  0E00               	movlw	0
  6339  00452A  6E22               	movwf	Set_D2_RGB@range+1,c
  6340  00452C  0E00               	movlw	0
  6341  00452E  6E21               	movwf	Set_D2_RGB@range,c
  6342  004530  D000               	goto	l9736
  6343  004532                     l9736:
  6344                           
  6345                           ;Main.c: 265: PORTE = range;
  6346  004532  C021  FF84         	movff	Set_D2_RGB@range,3972	;volatile
  6347  004536  0012               	return		;funcret
  6348  004538                     __end_of_Set_D2_RGB:
  6349                           	opt stack 0
  6350                           tblptru	equ	0xFF8
  6351                           tblptrh	equ	0xFF7
  6352                           tblptrl	equ	0xFF6
  6353                           tablat	equ	0xFF5
  6354                           prodh	equ	0xFF4
  6355                           prodl	equ	0xFF3
  6356                           intcon2	equ	0xFF1
  6357                           intcon3	equ	0xFF0
  6358                           postinc0	equ	0xFEE
  6359                           wreg	equ	0xFE8
  6360                           postdec1	equ	0xFE5
  6361                           plusw1	equ	0xFE3
  6362                           fsr1l	equ	0xFE1
  6363                           postinc2	equ	0xFDE
  6364                           plusw2	equ	0xFDB
  6365                           fsr2h	equ	0xFDA
  6366                           fsr2l	equ	0xFD9
  6367                           status	equ	0xFD8
  6368                           
  6369 ;; *************** function _Set_D1_RGB *****************
  6370 ;; Defined at:
  6371 ;;		line 248 in file "Main.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;  duty_cycle      1    wreg     unsigned char 
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;  duty_cycle      1   31[COMRAM] unsigned char 
  6376 ;;  range           2   32[COMRAM] int 
  6377 ;; Return value:  Size  Location     Type
  6378 ;;		None               void
  6379 ;; Registers used:
  6380 ;;		wreg, status,2, status,0, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;Total ram usage:        4 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    4
  6393 ;; This function calls:
  6394 ;;		___awdiv
  6395 ;; This function is called by:
  6396 ;;		_main
  6397 ;;		_Setup_Fan_Temp
  6398 ;;		_Do_Setup_Time
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text16
  6403  0045D8                     __ptext16:
  6404                           	opt stack 0
  6405  0045D8                     _Set_D1_RGB:
  6406                           	opt stack 25
  6407                           
  6408                           ;incstack = 0
  6409                           ;Set_D1_RGB@duty_cycle stored from wreg
  6410  0045D8  6E20               	movwf	Set_D1_RGB@duty_cycle,c
  6411                           
  6412                           ;Main.c: 251: int range = duty_cycle/10;
  6413  0045DA  C020  F017         	movff	Set_D1_RGB@duty_cycle,___awdiv@dividend
  6414  0045DE  6A18               	clrf	___awdiv@dividend+1,c
  6415  0045E0  0E00               	movlw	0
  6416  0045E2  6E1A               	movwf	___awdiv@divisor+1,c
  6417  0045E4  0E0A               	movlw	10
  6418  0045E6  6E19               	movwf	___awdiv@divisor,c
  6419  0045E8  EC3B  F01E         	call	___awdiv	;wreg free
  6420  0045EC  C017  F021         	movff	?___awdiv,Set_D1_RGB@range
  6421  0045F0  C018  F022         	movff	?___awdiv+1,Set_D1_RGB@range+1
  6422                           
  6423                           ;Main.c: 252: if (range > 7)
  6424  0045F4  BE22               	btfsc	Set_D1_RGB@range+1,7,c
  6425  0045F6  D00B               	goto	l9724
  6426  0045F8  5022               	movf	Set_D1_RGB@range+1,w,c
  6427  0045FA  E104               	bnz	u8490
  6428  0045FC  0E08               	movlw	8
  6429  0045FE  5C21               	subwf	Set_D1_RGB@range,w,c
  6430  004600  A0D8               	btfss	status,0,c
  6431  004602  D005               	goto	l9724
  6432  004604                     u8490:
  6433                           
  6434                           ;Main.c: 253: range = 7;
  6435  004604  0E00               	movlw	0
  6436  004606  6E22               	movwf	Set_D1_RGB@range+1,c
  6437  004608  0E07               	movlw	7
  6438  00460A  6E21               	movwf	Set_D1_RGB@range,c
  6439  00460C  D000               	goto	l9724
  6440  00460E                     l9724:
  6441                           
  6442                           ;Main.c: 254: PORTD = (PORTD & 0x8F) | (range<<4);
  6443  00460E  C021  F01F         	movff	Set_D1_RGB@range,??_Set_D1_RGB
  6444  004612  3A1F               	swapf	??_Set_D1_RGB,f,c
  6445  004614  0EF0               	movlw	240
  6446  004616  161F               	andwf	??_Set_D1_RGB,f,c
  6447  004618  5083               	movf	3971,w,c	;volatile
  6448  00461A  0B8F               	andlw	143
  6449  00461C  101F               	iorwf	??_Set_D1_RGB,w,c
  6450  00461E  6E83               	movwf	3971,c	;volatile
  6451  004620  0012               	return		;funcret
  6452  004622                     __end_of_Set_D1_RGB:
  6453                           	opt stack 0
  6454                           tblptru	equ	0xFF8
  6455                           tblptrh	equ	0xFF7
  6456                           tblptrl	equ	0xFF6
  6457                           tablat	equ	0xFF5
  6458                           prodh	equ	0xFF4
  6459                           prodl	equ	0xFF3
  6460                           intcon2	equ	0xFF1
  6461                           intcon3	equ	0xFF0
  6462                           postinc0	equ	0xFEE
  6463                           wreg	equ	0xFE8
  6464                           postdec1	equ	0xFE5
  6465                           plusw1	equ	0xFE3
  6466                           fsr1l	equ	0xFE1
  6467                           postinc2	equ	0xFDE
  6468                           plusw2	equ	0xFDB
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _Read_Volt *****************
  6474 ;; Defined at:
  6475 ;;		line 156 in file "utils.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  ADC_Channel     1    wreg     unsigned char 
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  ADC_Channel     1   66[COMRAM] unsigned char 
  6480 ;;  volt            3   63[COMRAM] float 
  6481 ;;  nStep           2   67[COMRAM] int 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  3   60[COMRAM] float 
  6484 ;; Registers used:
  6485 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6491 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;Total ram usage:        9 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    5
  6498 ;; This function calls:
  6499 ;;		___awtoft
  6500 ;;		___ftdiv
  6501 ;;		___wmul
  6502 ;;		_get_full_ADC
  6503 ;; This function is called by:
  6504 ;;		_main
  6505 ;;		_Setup_Fan_Temp
  6506 ;;		_Do_Setup_Time
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text17
  6511  004246                     __ptext17:
  6512                           	opt stack 0
  6513  004246                     _Read_Volt:
  6514                           	opt stack 24
  6515                           
  6516                           ;incstack = 0
  6517                           ;Read_Volt@ADC_Channel stored from wreg
  6518  004246  6E43               	movwf	Read_Volt@ADC_Channel,c
  6519                           
  6520                           ;utils.c: 158: ADCON0 = ADC_Channel * 4 + 1;
  6521  004248  5043               	movf	Read_Volt@ADC_Channel,w,c
  6522  00424A  0D04               	mullw	4
  6523  00424C  28F3               	incf	prodl,w,c
  6524  00424E  6EC2               	movwf	4034,c	;volatile
  6525                           
  6526                           ;utils.c: 159: int nStep = get_full_ADC();
  6527  004250  ECFB  F024         	call	_get_full_ADC	;wreg free
  6528  004254  C011  F044         	movff	?_get_full_ADC,Read_Volt@nStep
  6529  004258  C012  F045         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  6530                           
  6531                           ;utils.c: 160: float volt = nStep * 5 /1024.0;
  6532  00425C  C044  F011         	movff	Read_Volt@nStep,___wmul@multiplier
  6533  004260  C045  F012         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  6534  004264  0E00               	movlw	0
  6535  004266  6E14               	movwf	___wmul@multiplicand+1,c
  6536  004268  0E05               	movlw	5
  6537  00426A  6E13               	movwf	___wmul@multiplicand,c
  6538  00426C  ECE7  F024         	call	___wmul	;wreg free
  6539  004270  C011  F019         	movff	?___wmul,___awtoft@c
  6540  004274  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  6541  004278  ECF5  F023         	call	___awtoft	;wreg free
  6542  00427C  C019  F02E         	movff	?___awtoft,___ftdiv@f1
  6543  004280  C01A  F02F         	movff	?___awtoft+1,___ftdiv@f1+1
  6544  004284  C01B  F030         	movff	?___awtoft+2,___ftdiv@f1+2
  6545  004288  0E00               	movlw	0
  6546  00428A  6E31               	movwf	___ftdiv@f2,c
  6547  00428C  0E80               	movlw	128
  6548  00428E  6E32               	movwf	___ftdiv@f2+1,c
  6549  004290  0E44               	movlw	68
  6550  004292  6E33               	movwf	___ftdiv@f2+2,c
  6551  004294  EC4C  F01B         	call	___ftdiv	;wreg free
  6552  004298  C02E  F040         	movff	?___ftdiv,Read_Volt@volt
  6553  00429C  C02F  F041         	movff	?___ftdiv+1,Read_Volt@volt+1
  6554  0042A0  C030  F042         	movff	?___ftdiv+2,Read_Volt@volt+2
  6555                           
  6556                           ;utils.c: 161: return (volt);
  6557  0042A4  C040  F03D         	movff	Read_Volt@volt,?_Read_Volt
  6558  0042A8  C041  F03E         	movff	Read_Volt@volt+1,?_Read_Volt+1
  6559  0042AC  C042  F03F         	movff	Read_Volt@volt+2,?_Read_Volt+2
  6560  0042B0  D000               	goto	l490
  6561  0042B2                     l490:
  6562  0042B2  0012               	return		;funcret
  6563  0042B4                     __end_of_Read_Volt:
  6564                           	opt stack 0
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodh	equ	0xFF4
  6570                           prodl	equ	0xFF3
  6571                           intcon2	equ	0xFF1
  6572                           intcon3	equ	0xFF0
  6573                           postinc0	equ	0xFEE
  6574                           wreg	equ	0xFE8
  6575                           postdec1	equ	0xFE5
  6576                           plusw1	equ	0xFE3
  6577                           fsr1l	equ	0xFE1
  6578                           postinc2	equ	0xFDE
  6579                           plusw2	equ	0xFDB
  6580                           fsr2h	equ	0xFDA
  6581                           fsr2l	equ	0xFD9
  6582                           status	equ	0xFD8
  6583                           
  6584 ;; *************** function _get_full_ADC *****************
  6585 ;; Defined at:
  6586 ;;		line 164 in file "utils.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  result          2   20[COMRAM] unsigned int 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  2   16[COMRAM] unsigned int 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2, status,0
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;Total ram usage:        6 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    3
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_Read_Volt
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text18
  6615  0049F6                     __ptext18:
  6616                           	opt stack 0
  6617  0049F6                     _get_full_ADC:
  6618                           	opt stack 25
  6619                           
  6620                           ;utils.c: 166: unsigned int result;
  6621                           ;utils.c: 167: ADCON0bits.GO=1;
  6622                           
  6623                           ;incstack = 0
  6624  0049F6  82C2               	bsf	4034,1,c	;volatile
  6625                           
  6626                           ;utils.c: 168: while(ADCON0bits.DONE==1);
  6627  0049F8  D000               	goto	l493
  6628  0049FA                     l493:
  6629  0049FA  B2C2               	btfsc	4034,1,c	;volatile
  6630  0049FC  D7FE               	goto	l493
  6631                           
  6632                           ;utils.c: 169: result = (ADRESH * 0x100) + ADRESL;
  6633  0049FE  50C4               	movf	4036,w,c	;volatile
  6634  004A00  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  6635  004A02  6A13               	clrf	??_get_full_ADC& (0+255),c
  6636  004A04  50C3               	movf	4035,w,c	;volatile
  6637  004A06  2413               	addwf	??_get_full_ADC,w,c
  6638  004A08  6E15               	movwf	get_full_ADC@result,c
  6639  004A0A  0E00               	movlw	0
  6640  004A0C  2014               	addwfc	??_get_full_ADC+1,w,c
  6641  004A0E  6E16               	movwf	get_full_ADC@result+1,c
  6642                           
  6643                           ;utils.c: 171: return result;
  6644  004A10  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  6645  004A14  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  6646  004A18  D000               	goto	l496
  6647  004A1A                     l496:
  6648  004A1A  0012               	return		;funcret
  6649  004A1C                     __end_of_get_full_ADC:
  6650                           	opt stack 0
  6651                           tblptru	equ	0xFF8
  6652                           tblptrh	equ	0xFF7
  6653                           tblptrl	equ	0xFF6
  6654                           tablat	equ	0xFF5
  6655                           prodh	equ	0xFF4
  6656                           prodl	equ	0xFF3
  6657                           intcon2	equ	0xFF1
  6658                           intcon3	equ	0xFF0
  6659                           postinc0	equ	0xFEE
  6660                           wreg	equ	0xFE8
  6661                           postdec1	equ	0xFE5
  6662                           plusw1	equ	0xFE3
  6663                           fsr1l	equ	0xFE1
  6664                           postinc2	equ	0xFDE
  6665                           plusw2	equ	0xFDB
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function ___awtoft *****************
  6671 ;; Defined at:
  6672 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  c               2   24[COMRAM] int 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  sign            1   27[COMRAM] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  3   24[COMRAM] float 
  6679 ;; Registers used:
  6680 ;;		wreg, status,2, status,0, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6686 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;Total ram usage:        4 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    4
  6693 ;; This function calls:
  6694 ;;		___ftpack
  6695 ;; This function is called by:
  6696 ;;		_Read_Volt
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text19
  6701  0047EA                     __ptext19:
  6702                           	opt stack 0
  6703  0047EA                     ___awtoft:
  6704                           	opt stack 24
  6705                           
  6706                           ;incstack = 0
  6707  0047EA  0E00               	movlw	0
  6708  0047EC  6E1C               	movwf	___awtoft@sign,c
  6709  0047EE  AE1A               	btfss	___awtoft@c+1,7,c
  6710  0047F0  D007               	goto	l9596
  6711  0047F2  6C19               	negf	___awtoft@c,c
  6712  0047F4  1E1A               	comf	___awtoft@c+1,f,c
  6713  0047F6  B0D8               	btfsc	status,0,c
  6714  0047F8  2A1A               	incf	___awtoft@c+1,f,c
  6715  0047FA  0E01               	movlw	1
  6716  0047FC  6E1C               	movwf	___awtoft@sign,c
  6717  0047FE  D000               	goto	l9596
  6718  004800                     l9596:
  6719  004800  C019  F011         	movff	___awtoft@c,___ftpack@arg
  6720  004804  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  6721  004808  6A13               	clrf	___ftpack@arg+2,c
  6722  00480A  0E8E               	movlw	142
  6723  00480C  6E14               	movwf	___ftpack@exp,c
  6724  00480E  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  6725  004812  EC2B  F01C         	call	___ftpack	;wreg free
  6726  004816  C011  F019         	movff	?___ftpack,?___awtoft
  6727  00481A  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  6728  00481E  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  6729  004822  D000               	goto	l1720
  6730  004824                     l1720:
  6731  004824  0012               	return		;funcret
  6732  004826                     __end_of___awtoft:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon2	equ	0xFF1
  6741                           intcon3	equ	0xFF0
  6742                           postinc0	equ	0xFEE
  6743                           wreg	equ	0xFE8
  6744                           postdec1	equ	0xFE5
  6745                           plusw1	equ	0xFE3
  6746                           fsr1l	equ	0xFE1
  6747                           postinc2	equ	0xFDE
  6748                           plusw2	equ	0xFDB
  6749                           fsr2h	equ	0xFDA
  6750                           fsr2l	equ	0xFD9
  6751                           status	equ	0xFD8
  6752                           
  6753 ;; *************** function _Monitor_Fan *****************
  6754 ;; Defined at:
  6755 ;;		line 36 in file "Fan_Support.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;		None
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;		None
  6760 ;; Return value:  Size  Location     Type
  6761 ;;		None               void
  6762 ;; Registers used:
  6763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;Total ram usage:        0 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    8
  6776 ;; This function calls:
  6777 ;;		_Turn_Off_Fan
  6778 ;;		_do_update_pwm
  6779 ;;		_get_duty_cycle
  6780 ;; This function is called by:
  6781 ;;		_main
  6782 ;;		_Do_Setup_Time
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text20
  6787  004538                     __ptext20:
  6788                           	opt stack 0
  6789  004538                     _Monitor_Fan:
  6790                           	opt stack 22
  6791                           
  6792                           ;Fan_Support.c: 43: if (FANMODE == 1)
  6793                           
  6794                           ;incstack = 0
  6795  004538  0100               	movlb	0	; () banked
  6796  00453A  05C2               	decf	_FANMODE& (0+255),w,b
  6797  00453C  A4D8               	btfss	status,2,c
  6798  00453E  D010               	goto	l9604
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;Fan_Support.c: 44: {
  6802                           ;Fan_Support.c: 45: duty_cycle = get_duty_cycle (tempF, fan_set_temp);
  6803  004540  506A               	movf	_tempF,w,c
  6804  004542  6E11               	movwf	get_duty_cycle@temp,c
  6805  004544  6A12               	clrf	get_duty_cycle@temp+1,c
  6806  004546  BE11               	btfsc	get_duty_cycle@temp,7,c
  6807  004548  0612               	decf	get_duty_cycle@temp+1,f,c
  6808  00454A  C0DC  F013         	movff	_fan_set_temp,get_duty_cycle@set_temp
  6809  00454E  6A14               	clrf	get_duty_cycle@set_temp+1,c
  6810  004550  ECD1  F01E         	call	_get_duty_cycle	;wreg free
  6811  004554  5011               	movf	?_get_duty_cycle,w,c
  6812  004556  6E64               	movwf	_duty_cycle,c
  6813                           
  6814                           ;Fan_Support.c: 46: do_update_pwm(duty_cycle);
  6815  004558  5064               	movf	_duty_cycle,w,c
  6816  00455A  ECE9  F01C         	call	_do_update_pwm
  6817  00455E  D000               	goto	l9604
  6818  004560                     l9604:
  6819                           
  6820                           ;Fan_Support.c: 47: }
  6821                           ;Fan_Support.c: 55: if (FAN_TIMER_MODE != 0)
  6822  004560  5060               	movf	_FAN_TIMER_MODE,w,c
  6823  004562  B4D8               	btfsc	status,2,c
  6824  004564  D010               	goto	l47
  6825                           
  6826                           ;Fan_Support.c: 56: {
  6827                           ;Fan_Support.c: 57: if (FAN_TIMER_TIME != 0)
  6828  004566  0100               	movlb	0	; () banked
  6829  004568  51C3               	movf	_FAN_TIMER_TIME& (0+255),w,b
  6830  00456A  B4D8               	btfsc	status,2,c
  6831  00456C  D003               	goto	l9610
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;Fan_Support.c: 58: FAN_TIMER_TIME--;
  6835  00456E  0100               	movlb	0	; () banked
  6836  004570  07C3               	decf	_FAN_TIMER_TIME& (0+255),f,b
  6837  004572  D000               	goto	l9610
  6838  004574                     l9610:
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;Fan_Support.c: 59: if (FAN_TIMER_TIME == 0)
  6842  004574  0100               	movlb	0	; () banked
  6843  004576  51C3               	movf	_FAN_TIMER_TIME& (0+255),w,b
  6844  004578  A4D8               	btfss	status,2,c
  6845  00457A  D005               	goto	l47
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;Fan_Support.c: 60: {
  6849                           ;Fan_Support.c: 61: FAN_TIMER_MODE = 0;
  6850  00457C  0E00               	movlw	0
  6851  00457E  6E60               	movwf	_FAN_TIMER_MODE,c
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;Fan_Support.c: 62: Turn_Off_Fan();
  6855  004580  ECD8  F025         	call	_Turn_Off_Fan	;wreg free
  6856  004584  D000               	goto	l47
  6857  004586                     l47:
  6858  004586  0012               	return		;funcret
  6859  004588                     __end_of_Monitor_Fan:
  6860                           	opt stack 0
  6861                           tblptru	equ	0xFF8
  6862                           tblptrh	equ	0xFF7
  6863                           tblptrl	equ	0xFF6
  6864                           tablat	equ	0xFF5
  6865                           prodh	equ	0xFF4
  6866                           prodl	equ	0xFF3
  6867                           intcon2	equ	0xFF1
  6868                           intcon3	equ	0xFF0
  6869                           postinc0	equ	0xFEE
  6870                           wreg	equ	0xFE8
  6871                           postdec1	equ	0xFE5
  6872                           plusw1	equ	0xFE3
  6873                           fsr1l	equ	0xFE1
  6874                           postinc2	equ	0xFDE
  6875                           plusw2	equ	0xFDB
  6876                           fsr2h	equ	0xFDA
  6877                           fsr2l	equ	0xFD9
  6878                           status	equ	0xFD8
  6879                           
  6880 ;; *************** function _get_duty_cycle *****************
  6881 ;; Defined at:
  6882 ;;		line 16 in file "Fan_Support.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  temp            2   16[COMRAM] int 
  6885 ;;  set_temp        2   18[COMRAM] int 
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;  diff_temp       2   22[COMRAM] int 
  6888 ;;  dc              2   24[COMRAM] int 
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  2   16[COMRAM] int 
  6891 ;; Registers used:
  6892 ;;		wreg, status,2, status,0
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6898 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;Total ram usage:       10 bytes
  6903 ;; Hardware stack levels used:    1
  6904 ;; Hardware stack levels required when called:    3
  6905 ;; This function calls:
  6906 ;;		Nothing
  6907 ;; This function is called by:
  6908 ;;		_Monitor_Fan
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text21
  6913  003DA2                     __ptext21:
  6914                           	opt stack 0
  6915  003DA2                     _get_duty_cycle:
  6916                           	opt stack 26
  6917                           
  6918                           ;Fan_Support.c: 18: int dc;
  6919                           ;Fan_Support.c: 23: if (temp >= set_temp)
  6920                           
  6921                           ;incstack = 0
  6922  003DA2  5013               	movf	get_duty_cycle@set_temp,w,c
  6923  003DA4  5C11               	subwf	get_duty_cycle@temp,w,c
  6924  003DA6  5012               	movf	get_duty_cycle@temp+1,w,c
  6925  003DA8  0A80               	xorlw	128
  6926  003DAA  6E15               	movwf	??_get_duty_cycle& (0+255),c
  6927  003DAC  5014               	movf	get_duty_cycle@set_temp+1,w,c
  6928  003DAE  0A80               	xorlw	128
  6929  003DB0  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  6930  003DB2  A0D8               	btfss	status,0,c
  6931  003DB4  D029               	goto	l6618
  6932                           
  6933                           ;Fan_Support.c: 24: {
  6934                           ;Fan_Support.c: 25: int diff_temp = (temp-set_temp);
  6935  003DB6  C013  F015         	movff	get_duty_cycle@set_temp,??_get_duty_cycle
  6936  003DBA  C014  F016         	movff	get_duty_cycle@set_temp+1,??_get_duty_cycle+1
  6937  003DBE  1E15               	comf	??_get_duty_cycle,f,c
  6938  003DC0  1E16               	comf	??_get_duty_cycle+1,f,c
  6939  003DC2  4A15               	infsnz	??_get_duty_cycle,f,c
  6940  003DC4  2A16               	incf	??_get_duty_cycle+1,f,c
  6941  003DC6  5011               	movf	get_duty_cycle@temp,w,c
  6942  003DC8  2415               	addwf	??_get_duty_cycle,w,c
  6943  003DCA  6E17               	movwf	get_duty_cycle@diff_temp,c
  6944  003DCC  5012               	movf	get_duty_cycle@temp+1,w,c
  6945  003DCE  2016               	addwfc	??_get_duty_cycle+1,w,c
  6946  003DD0  6E18               	movwf	get_duty_cycle@diff_temp+1,c
  6947                           
  6948                           ;Fan_Support.c: 26: dc = diff_temp * 4;
  6949  003DD2  C017  F015         	movff	get_duty_cycle@diff_temp,??_get_duty_cycle
  6950  003DD6  C018  F016         	movff	get_duty_cycle@diff_temp+1,??_get_duty_cycle+1
  6951  003DDA  90D8               	bcf	status,0,c
  6952  003DDC  3615               	rlcf	??_get_duty_cycle,f,c
  6953  003DDE  3616               	rlcf	??_get_duty_cycle+1,f,c
  6954  003DE0  90D8               	bcf	status,0,c
  6955  003DE2  3615               	rlcf	??_get_duty_cycle,f,c
  6956  003DE4  3616               	rlcf	??_get_duty_cycle+1,f,c
  6957  003DE6  C015  F019         	movff	??_get_duty_cycle,get_duty_cycle@dc
  6958  003DEA  C016  F01A         	movff	??_get_duty_cycle+1,get_duty_cycle@dc+1
  6959                           
  6960                           ;Fan_Support.c: 27: if (dc > 100)
  6961  003DEE  BE1A               	btfsc	get_duty_cycle@dc+1,7,c
  6962  003DF0  D00B               	goto	l6618
  6963  003DF2  501A               	movf	get_duty_cycle@dc+1,w,c
  6964  003DF4  E104               	bnz	u5300
  6965  003DF6  0E65               	movlw	101
  6966  003DF8  5C19               	subwf	get_duty_cycle@dc,w,c
  6967  003DFA  A0D8               	btfss	status,0,c
  6968  003DFC  D005               	goto	l6618
  6969  003DFE                     u5300:
  6970                           
  6971                           ;Fan_Support.c: 28: dc = 100;
  6972  003DFE  0E00               	movlw	0
  6973  003E00  6E1A               	movwf	get_duty_cycle@dc+1,c
  6974  003E02  0E64               	movlw	100
  6975  003E04  6E19               	movwf	get_duty_cycle@dc,c
  6976  003E06  D000               	goto	l6618
  6977  003E08                     l6618:
  6978                           
  6979                           ;Fan_Support.c: 29: }
  6980                           ;Fan_Support.c: 30: if (temp < set_temp)
  6981  003E08  5013               	movf	get_duty_cycle@set_temp,w,c
  6982  003E0A  5C11               	subwf	get_duty_cycle@temp,w,c
  6983  003E0C  5012               	movf	get_duty_cycle@temp+1,w,c
  6984  003E0E  0A80               	xorlw	128
  6985  003E10  6E15               	movwf	??_get_duty_cycle& (0+255),c
  6986  003E12  5014               	movf	get_duty_cycle@set_temp+1,w,c
  6987  003E14  0A80               	xorlw	128
  6988  003E16  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  6989  003E18  B0D8               	btfsc	status,0,c
  6990  003E1A  D005               	goto	l6622
  6991                           
  6992                           ;Fan_Support.c: 31: dc = 0;
  6993  003E1C  0E00               	movlw	0
  6994  003E1E  6E1A               	movwf	get_duty_cycle@dc+1,c
  6995  003E20  0E00               	movlw	0
  6996  003E22  6E19               	movwf	get_duty_cycle@dc,c
  6997  003E24  D000               	goto	l6622
  6998  003E26                     l6622:
  6999                           
  7000                           ;Fan_Support.c: 33: return (dc);
  7001  003E26  C019  F011         	movff	get_duty_cycle@dc,?_get_duty_cycle
  7002  003E2A  C01A  F012         	movff	get_duty_cycle@dc+1,?_get_duty_cycle+1
  7003  003E2E  D000               	goto	l40
  7004  003E30                     l40:
  7005  003E30  0012               	return		;funcret
  7006  003E32                     __end_of_get_duty_cycle:
  7007                           	opt stack 0
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           intcon2	equ	0xFF1
  7015                           intcon3	equ	0xFF0
  7016                           postinc0	equ	0xFEE
  7017                           wreg	equ	0xFE8
  7018                           postdec1	equ	0xFE5
  7019                           plusw1	equ	0xFE3
  7020                           fsr1l	equ	0xFE1
  7021                           postinc2	equ	0xFDE
  7022                           plusw2	equ	0xFDB
  7023                           fsr2h	equ	0xFDA
  7024                           fsr2l	equ	0xFD9
  7025                           status	equ	0xFD8
  7026                           
  7027 ;; *************** function _Initialize_Setup_Time_Screen *****************
  7028 ;; Defined at:
  7029 ;;		line 229 in file "Setup_Time.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;		None
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;		None               void
  7036 ;; Registers used:
  7037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7047 ;;Total ram usage:        0 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:   10
  7050 ;; This function calls:
  7051 ;;		_LCD_Reset
  7052 ;;		_TFT_GreenTab_Initialize
  7053 ;;		_drawtext
  7054 ;;		_fillRect
  7055 ;;		_fillScreen
  7056 ;;		_strcpy
  7057 ;; This function is called by:
  7058 ;;		_Do_Setup_Time
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061                           
  7062                           	psect	text22
  7063  002D94                     __ptext22:
  7064                           	opt stack 0
  7065  002D94                     _Initialize_Setup_Time_Screen:
  7066                           	opt stack 19
  7067                           
  7068                           ;Setup_Time.c: 231: LCD_Reset();
  7069                           
  7070                           ;incstack = 0
  7071  002D94  EC83  F026         	call	_LCD_Reset	;wreg free
  7072                           
  7073                           ;Setup_Time.c: 232: TFT_GreenTab_Initialize();
  7074  002D98  EC7A  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  7075                           
  7076                           ;Setup_Time.c: 233: fillScreen(0x0000);
  7077  002D9C  0E00               	movlw	0
  7078  002D9E  6E25               	movwf	fillScreen@color+1,c
  7079  002DA0  0E00               	movlw	0
  7080  002DA2  6E24               	movwf	fillScreen@color,c
  7081  002DA4  ECCA  F025         	call	_fillScreen	;wreg free
  7082                           
  7083                           ;Setup_Time.c: 234: if (1 == 0)
  7084  002DA8  D005               	goto	l9786
  7085                           
  7086                           ;Setup_Time.c: 235: {
  7087                           ;Setup_Time.c: 236: Timing_Txt[12] = 'S';
  7088  002DAA  0E53               	movlw	83
  7089  002DAC  0101               	movlb	1	; () banked
  7090  002DAE  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  7091                           
  7092                           ;Setup_Time.c: 237: Timing_Txt[13] = 'P';
  7093  002DB0  0E50               	movlw	80
  7094  002DB2  D004               	goto	L5
  7095  002DB4                     l9786:
  7096                           
  7097                           ;Setup_Time.c: 239: else
  7098                           ;Setup_Time.c: 240: {
  7099                           ;Setup_Time.c: 241: Timing_Txt[12] = 'F';
  7100  002DB4  0E46               	movlw	70
  7101  002DB6  0101               	movlb	1	; () banked
  7102  002DB8  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  7103                           
  7104                           ;Setup_Time.c: 242: Timing_Txt[13] = 'A';
  7105  002DBA  0E41               	movlw	65
  7106  002DBC                     L5:
  7107  002DBC  0101               	movlb	1	; () banked
  7108  002DBE  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  7109                           
  7110                           ; BSR set to: 1
  7111                           ;Setup_Time.c: 243: }
  7112                           ;Setup_Time.c: 244: Timing_Txt[14] = 24/10 + '0';
  7113  002DC0  0E32               	movlw	50
  7114  002DC2  0101               	movlb	1	; () banked
  7115  002DC4  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  7116                           
  7117                           ;Setup_Time.c: 245: Timing_Txt[15] = 24%10 + '0';
  7118  002DC6  0E34               	movlw	52
  7119  002DC8  0101               	movlb	1	; () banked
  7120  002DCA  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  7121                           
  7122                           ;Setup_Time.c: 246: Timing_Txt[17] = 3%10 + '0';
  7123  002DCC  0E33               	movlw	51
  7124  002DCE  0101               	movlb	1	; () banked
  7125  002DD0  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  7126                           
  7127                           ;Setup_Time.c: 247: Timing_Txt[19] = 13/10 + '0';
  7128  002DD2  0E31               	movlw	49
  7129  002DD4  0101               	movlb	1	; () banked
  7130  002DD6  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  7131                           
  7132                           ;Setup_Time.c: 248: Timing_Txt[20] = 13%10 + '0';
  7133  002DD8  0E33               	movlw	51
  7134  002DDA  0101               	movlb	1	; () banked
  7135  002DDC  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  7136                           
  7137                           ; BSR set to: 1
  7138                           ;Setup_Time.c: 250: if (SYSTEM_ON == 1)
  7139  002DDE  0462               	decf	_SYSTEM_ON,w,c
  7140  002DE0  A4D8               	btfss	status,2,c
  7141  002DE2  D076               	goto	l1299
  7142                           
  7143                           ; BSR set to: 1
  7144                           ;Setup_Time.c: 251: {
  7145                           ;Setup_Time.c: 252: drawtext(1 , 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  7146  002DE4  0E01               	movlw	1
  7147  002DE6  6E39               	movwf	drawtext@y,c
  7148  002DE8  0E3C               	movlw	low _Timing_Txt
  7149  002DEA  6E3A               	movwf	drawtext@_text,c
  7150  002DEC  0E01               	movlw	high _Timing_Txt
  7151  002DEE  6E3B               	movwf	drawtext@_text+1,c
  7152  002DF0  0EFF               	movlw	255
  7153  002DF2  6E3D               	movwf	drawtext@color+1,c
  7154  002DF4  683C               	setf	drawtext@color,c
  7155  002DF6  0E00               	movlw	0
  7156  002DF8  6E3F               	movwf	drawtext@bg+1,c
  7157  002DFA  0E00               	movlw	0
  7158  002DFC  6E3E               	movwf	drawtext@bg,c
  7159  002DFE  0E01               	movlw	1
  7160  002E00  6E40               	movwf	drawtext@size,c
  7161  002E02  0E01               	movlw	1
  7162  002E04  ECDB  F01A         	call	_drawtext
  7163                           
  7164                           ;Setup_Time.c: 254: strcpy(txt, "Time Setup\0");
  7165  002E08  C05E  F011         	movff	_txt,strcpy@to
  7166  002E0C  C05F  F012         	movff	_txt+1,strcpy@to+1
  7167  002E10  0E88               	movlw	low STR_44
  7168  002E12  6E13               	movwf	strcpy@from,c
  7169  002E14  0EFF               	movlw	high STR_44
  7170  002E16  6E14               	movwf	strcpy@from+1,c
  7171  002E18  EC31  F024         	call	_strcpy	;wreg free
  7172                           
  7173                           ;Setup_Time.c: 255: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  7174  002E1C  0E10               	movlw	16
  7175  002E1E  6E39               	movwf	drawtext@y,c
  7176  002E20  C05E  F03A         	movff	_txt,drawtext@_text
  7177  002E24  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7178  002E28  0EF8               	movlw	248
  7179  002E2A  6E3D               	movwf	drawtext@color+1,c
  7180  002E2C  0E1F               	movlw	31
  7181  002E2E  6E3C               	movwf	drawtext@color,c
  7182  002E30  0E00               	movlw	0
  7183  002E32  6E3F               	movwf	drawtext@bg+1,c
  7184  002E34  0E00               	movlw	0
  7185  002E36  6E3E               	movwf	drawtext@bg,c
  7186  002E38  0E02               	movlw	2
  7187  002E3A  6E40               	movwf	drawtext@size,c
  7188  002E3C  0E04               	movlw	4
  7189  002E3E  ECDB  F01A         	call	_drawtext
  7190                           
  7191                           ;Setup_Time.c: 257: strcpy(txt, "Time");
  7192  002E42  C05E  F011         	movff	_txt,strcpy@to
  7193  002E46  C05F  F012         	movff	_txt+1,strcpy@to+1
  7194  002E4A  0EC8               	movlw	low (STR_18+6)
  7195  002E4C  6E13               	movwf	strcpy@from,c
  7196  002E4E  0EFF               	movlw	high (STR_18+6)
  7197  002E50  6E14               	movwf	strcpy@from+1,c
  7198  002E52  EC31  F024         	call	_strcpy	;wreg free
  7199                           
  7200                           ;Setup_Time.c: 258: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  7201  002E56  0E28               	movlw	40
  7202  002E58  6E39               	movwf	drawtext@y,c
  7203  002E5A  C05E  F03A         	movff	_txt,drawtext@_text
  7204  002E5E  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7205  002E62  0E00               	movlw	0
  7206  002E64  6E3D               	movwf	drawtext@color+1,c
  7207  002E66  0E1F               	movlw	31
  7208  002E68  6E3C               	movwf	drawtext@color,c
  7209  002E6A  0E00               	movlw	0
  7210  002E6C  6E3F               	movwf	drawtext@bg+1,c
  7211  002E6E  0E00               	movlw	0
  7212  002E70  6E3E               	movwf	drawtext@bg,c
  7213  002E72  0E01               	movlw	1
  7214  002E74  6E40               	movwf	drawtext@size,c
  7215  002E76  0E32               	movlw	50
  7216  002E78  ECDB  F01A         	call	_drawtext
  7217                           
  7218                           ;Setup_Time.c: 260: fillRect(15-1, 52+16, 25,2,0x07FF);
  7219  002E7C  0E44               	movlw	68
  7220  002E7E  6E23               	movwf	fillRect@y,c
  7221  002E80  0E19               	movlw	25
  7222  002E82  6E24               	movwf	fillRect@w,c
  7223  002E84  0E02               	movlw	2
  7224  002E86  6E25               	movwf	fillRect@h,c
  7225  002E88  0E07               	movlw	7
  7226  002E8A  6E27               	movwf	fillRect@color+1,c
  7227  002E8C  6826               	setf	fillRect@color,c
  7228  002E8E  0E0E               	movlw	14
  7229  002E90  EC11  F023         	call	_fillRect
  7230                           
  7231                           ;Setup_Time.c: 261: strcpy(txt, "Date");
  7232  002E94  C05E  F011         	movff	_txt,strcpy@to
  7233  002E98  C05F  F012         	movff	_txt+1,strcpy@to+1
  7234  002E9C  0ED7               	movlw	low STR_16
  7235  002E9E  6E13               	movwf	strcpy@from,c
  7236  002EA0  0EFF               	movlw	high STR_16
  7237  002EA2  6E14               	movwf	strcpy@from+1,c
  7238  002EA4  EC31  F024         	call	_strcpy	;wreg free
  7239                           
  7240                           ;Setup_Time.c: 262: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  7241  002EA8  0E47               	movlw	71
  7242  002EAA  6E39               	movwf	drawtext@y,c
  7243  002EAC  C05E  F03A         	movff	_txt,drawtext@_text
  7244  002EB0  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  7245  002EB4  0EF8               	movlw	248
  7246  002EB6  6E3D               	movwf	drawtext@color+1,c
  7247  002EB8  0E00               	movlw	0
  7248  002EBA  6E3C               	movwf	drawtext@color,c
  7249  002EBC  0E00               	movlw	0
  7250  002EBE  6E3F               	movwf	drawtext@bg+1,c
  7251  002EC0  0E00               	movlw	0
  7252  002EC2  6E3E               	movwf	drawtext@bg,c
  7253  002EC4  0E01               	movlw	1
  7254  002EC6  6E40               	movwf	drawtext@size,c
  7255  002EC8  0E32               	movlw	50
  7256  002ECA  ECDB  F01A         	call	_drawtext
  7257  002ECE  D000               	goto	l1299
  7258  002ED0                     l1299:
  7259  002ED0  0012               	return		;funcret
  7260  002ED2                     __end_of_Initialize_Setup_Time_Screen:
  7261                           	opt stack 0
  7262                           tblptru	equ	0xFF8
  7263                           tblptrh	equ	0xFF7
  7264                           tblptrl	equ	0xFF6
  7265                           tablat	equ	0xFF5
  7266                           prodh	equ	0xFF4
  7267                           prodl	equ	0xFF3
  7268                           intcon2	equ	0xFF1
  7269                           intcon3	equ	0xFF0
  7270                           postinc0	equ	0xFEE
  7271                           wreg	equ	0xFE8
  7272                           postdec1	equ	0xFE5
  7273                           plusw1	equ	0xFE3
  7274                           fsr1l	equ	0xFE1
  7275                           postinc2	equ	0xFDE
  7276                           plusw2	equ	0xFDB
  7277                           fsr2h	equ	0xFDA
  7278                           fsr2l	equ	0xFD9
  7279                           status	equ	0xFD8
  7280                           
  7281 ;; *************** function _Increase_Time *****************
  7282 ;; Defined at:
  7283 ;;		line 110 in file "Setup_Time.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;		None               void
  7290 ;; Registers used:
  7291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;Total ram usage:        0 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:   11
  7304 ;; This function calls:
  7305 ;;		_Update_Setup_Time_Screen
  7306 ;; This function is called by:
  7307 ;;		_Do_Setup_Time
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           	psect	text23
  7312  003B36                     __ptext23:
  7313                           	opt stack 0
  7314  003B36                     _Increase_Time:
  7315                           	opt stack 18
  7316                           
  7317                           ;Setup_Time.c: 112: switch (Select_Field)
  7318                           
  7319                           ;incstack = 0
  7320  003B36  D03A               	goto	l9900
  7321  003B38                     l9862:
  7322                           
  7323                           ;Setup_Time.c: 115: setup_hour++;
  7324  003B38  0100               	movlb	0	; () banked
  7325  003B3A  2BD5               	incf	_setup_hour& (0+255),f,b
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;Setup_Time.c: 116: if (setup_hour == 24) setup_hour = 0;
  7329  003B3C  0E18               	movlw	24
  7330  003B3E  0100               	movlb	0	; () banked
  7331  003B40  19D5               	xorwf	_setup_hour& (0+255),w,b
  7332  003B42                     L6:
  7333  003B42  A4D8               	btfss	status,2,c
  7334  003B44  D048               	goto	l9902
  7335                           
  7336                           ; BSR set to: 0
  7337  003B46  0E00               	movlw	0
  7338  003B48  0100               	movlb	0	; () banked
  7339  003B4A  6FD5               	movwf	_setup_hour& (0+255),b
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;Setup_Time.c: 117: break;
  7343  003B4C  D044               	goto	l9902
  7344  003B4E                     l9868:
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;Setup_Time.c: 121: setup_minute++;
  7348  003B4E  0100               	movlb	0	; () banked
  7349  003B50  2BD6               	incf	_setup_minute& (0+255),f,b
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;Setup_Time.c: 122: if (setup_minute == 60) setup_hour = 0;
  7353  003B52  0E3C               	movlw	60
  7354  003B54  0100               	movlb	0	; () banked
  7355  003B56  19D6               	xorwf	_setup_minute& (0+255),w,b
  7356  003B58  D7F4               	goto	L6
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;Setup_Time.c: 123: break;
  7360                           
  7361                           ; BSR set to: 0
  7362  003B5A  D03D               	goto	l9902
  7363  003B5C                     l9874:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;Setup_Time.c: 127: setup_second++;
  7367  003B5C  0100               	movlb	0	; () banked
  7368  003B5E  2BD8               	incf	_setup_second& (0+255),f,b
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;Setup_Time.c: 128: if (setup_second == 60) setup_second = 0;
  7372  003B60  0E3C               	movlw	60
  7373  003B62  0100               	movlb	0	; () banked
  7374  003B64  19D8               	xorwf	_setup_second& (0+255),w,b
  7375  003B66  A4D8               	btfss	status,2,c
  7376  003B68  D036               	goto	l9902
  7377                           
  7378                           ; BSR set to: 0
  7379  003B6A  0E00               	movlw	0
  7380  003B6C  0100               	movlb	0	; () banked
  7381  003B6E  6FD8               	movwf	_setup_second& (0+255),b
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;Setup_Time.c: 129: break;
  7385  003B70  D032               	goto	l9902
  7386  003B72                     l9880:
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;Setup_Time.c: 133: setup_month++;
  7390  003B72  0100               	movlb	0	; () banked
  7391  003B74  2BD7               	incf	_setup_month& (0+255),f,b
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;Setup_Time.c: 134: if (setup_month == 13) setup_month = 1;
  7395  003B76  0E0D               	movlw	13
  7396  003B78  0100               	movlb	0	; () banked
  7397  003B7A  19D7               	xorwf	_setup_month& (0+255),w,b
  7398  003B7C  A4D8               	btfss	status,2,c
  7399  003B7E  D02B               	goto	l9902
  7400                           
  7401                           ; BSR set to: 0
  7402  003B80  0E01               	movlw	1
  7403  003B82  0100               	movlb	0	; () banked
  7404  003B84  6FD7               	movwf	_setup_month& (0+255),b
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;Setup_Time.c: 135: break;
  7408  003B86  D027               	goto	l9902
  7409  003B88                     l9886:
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;Setup_Time.c: 139: setup_day++;
  7413  003B88  0100               	movlb	0	; () banked
  7414  003B8A  2BD3               	incf	_setup_day& (0+255),f,b
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;Setup_Time.c: 140: if (setup_day == 32) setup_day = 1;
  7418  003B8C  0E20               	movlw	32
  7419  003B8E  0100               	movlb	0	; () banked
  7420  003B90  19D3               	xorwf	_setup_day& (0+255),w,b
  7421  003B92  A4D8               	btfss	status,2,c
  7422  003B94  D020               	goto	l9902
  7423                           
  7424                           ; BSR set to: 0
  7425  003B96  0E01               	movlw	1
  7426  003B98  0100               	movlb	0	; () banked
  7427  003B9A  6FD3               	movwf	_setup_day& (0+255),b
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;Setup_Time.c: 141: break;
  7431  003B9C  D01C               	goto	l9902
  7432  003B9E                     l9892:
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;Setup_Time.c: 145: setup_year++;
  7436  003B9E  0100               	movlb	0	; () banked
  7437  003BA0  2BD9               	incf	_setup_year& (0+255),f,b
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;Setup_Time.c: 146: if (setup_year == 100) setup_hour = 0;
  7441  003BA2  0E64               	movlw	100
  7442  003BA4  0100               	movlb	0	; () banked
  7443  003BA6  19D9               	xorwf	_setup_year& (0+255),w,b
  7444  003BA8  D7CC               	goto	L6
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;Setup_Time.c: 151: }
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;Setup_Time.c: 150: break;
  7451                           
  7452                           ;Setup_Time.c: 149: default:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;Setup_Time.c: 147: break;
  7456                           
  7457                           ; BSR set to: 0
  7458  003BAA  D015               	goto	l9902
  7459  003BAC                     l9900:
  7460  003BAC  0100               	movlb	0	; () banked
  7461  003BAE  51CB               	movf	_Select_Field& (0+255),w,b
  7462                           
  7463                           ; Switch size 1, requested type "space"
  7464                           ; Number of cases is 6, Range of values is 0 to 5
  7465                           ; switch strategies available:
  7466                           ; Name         Instructions Cycles
  7467                           ; simple_byte           19    10 (average)
  7468                           ;	Chosen strategy is simple_byte
  7469  003BB0  0A00               	xorlw	0	; case 0
  7470  003BB2  B4D8               	btfsc	status,2,c
  7471  003BB4  D7C1               	goto	l9862
  7472  003BB6  0A01               	xorlw	1	; case 1
  7473  003BB8  B4D8               	btfsc	status,2,c
  7474  003BBA  D7C9               	goto	l9868
  7475  003BBC  0A03               	xorlw	3	; case 2
  7476  003BBE  B4D8               	btfsc	status,2,c
  7477  003BC0  D7CD               	goto	l9874
  7478  003BC2  0A01               	xorlw	1	; case 3
  7479  003BC4  B4D8               	btfsc	status,2,c
  7480  003BC6  D7D5               	goto	l9880
  7481  003BC8  0A07               	xorlw	7	; case 4
  7482  003BCA  B4D8               	btfsc	status,2,c
  7483  003BCC  D7DD               	goto	l9886
  7484  003BCE  0A01               	xorlw	1	; case 5
  7485  003BD0  B4D8               	btfsc	status,2,c
  7486  003BD2  D7E5               	goto	l9892
  7487  003BD4  D000               	goto	l9902
  7488  003BD6                     l9902:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;Setup_Time.c: 152: Update_Setup_Time_Screen();
  7492  003BD6  EC5D  F015         	call	_Update_Setup_Time_Screen	;wreg free
  7493  003BDA  0012               	return		;funcret
  7494  003BDC                     __end_of_Increase_Time:
  7495                           	opt stack 0
  7496                           tblptru	equ	0xFF8
  7497                           tblptrh	equ	0xFF7
  7498                           tblptrl	equ	0xFF6
  7499                           tablat	equ	0xFF5
  7500                           prodh	equ	0xFF4
  7501                           prodl	equ	0xFF3
  7502                           intcon2	equ	0xFF1
  7503                           intcon3	equ	0xFF0
  7504                           postinc0	equ	0xFEE
  7505                           wreg	equ	0xFE8
  7506                           postdec1	equ	0xFE5
  7507                           plusw1	equ	0xFE3
  7508                           fsr1l	equ	0xFE1
  7509                           postinc2	equ	0xFDE
  7510                           plusw2	equ	0xFDB
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515 ;; *************** function _Go_Prev_Field *****************
  7516 ;; Defined at:
  7517 ;;		line 207 in file "Setup_Time.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;		None
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;		None
  7522 ;; Return value:  Size  Location     Type
  7523 ;;		None               void
  7524 ;; Registers used:
  7525 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;Total ram usage:        0 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    9
  7538 ;; This function calls:
  7539 ;;		_Update_Setup_Screen_Cursor_Backward
  7540 ;; This function is called by:
  7541 ;;		_Do_Setup_Time
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text24
  7546  004B16                     __ptext24:
  7547                           	opt stack 0
  7548  004B16                     _Go_Prev_Field:
  7549                           	opt stack 20
  7550                           
  7551                           ;Setup_Time.c: 209: if (Select_Field == 0) Select_Field = 5;
  7552                           
  7553                           ;incstack = 0
  7554  004B16  0100               	movlb	0	; () banked
  7555  004B18  51CB               	movf	_Select_Field& (0+255),w,b
  7556  004B1A  A4D8               	btfss	status,2,c
  7557  004B1C  D004               	goto	l7198
  7558                           
  7559                           ; BSR set to: 0
  7560  004B1E  0E05               	movlw	5
  7561  004B20  0100               	movlb	0	; () banked
  7562  004B22  6FCB               	movwf	_Select_Field& (0+255),b
  7563  004B24  D003               	goto	l7200
  7564  004B26                     l7198:
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;Setup_Time.c: 210: else Select_Field--;
  7568  004B26  0100               	movlb	0	; () banked
  7569  004B28  07CB               	decf	_Select_Field& (0+255),f,b
  7570  004B2A  D000               	goto	l7200
  7571  004B2C                     l7200:
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;Setup_Time.c: 211: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7575  004B2C  0100               	movlb	0	; () banked
  7576  004B2E  51CB               	movf	_Select_Field& (0+255),w,b
  7577  004B30  ECBE  F013         	call	_Update_Setup_Screen_Cursor_Backward
  7578  004B34  0012               	return		;funcret
  7579  004B36                     __end_of_Go_Prev_Field:
  7580                           	opt stack 0
  7581                           tblptru	equ	0xFF8
  7582                           tblptrh	equ	0xFF7
  7583                           tblptrl	equ	0xFF6
  7584                           tablat	equ	0xFF5
  7585                           prodh	equ	0xFF4
  7586                           prodl	equ	0xFF3
  7587                           intcon2	equ	0xFF1
  7588                           intcon3	equ	0xFF0
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           postdec1	equ	0xFE5
  7592                           plusw1	equ	0xFE3
  7593                           fsr1l	equ	0xFE1
  7594                           postinc2	equ	0xFDE
  7595                           plusw2	equ	0xFDB
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8
  7599                           
  7600 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  7601 ;; Defined at:
  7602 ;;		line 330 in file "Setup_Time.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;  field           1    wreg     unsigned char 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  field           1   45[COMRAM] unsigned char 
  7607 ;;  xinc            1   47[COMRAM] unsigned char 
  7608 ;;  yinc            1   46[COMRAM] unsigned char 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;		None               void
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;Total ram usage:        3 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    8
  7625 ;; This function calls:
  7626 ;;		_fillRect
  7627 ;; This function is called by:
  7628 ;;		_Go_Prev_Field
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text25
  7633  00277C                     __ptext25:
  7634                           	opt stack 0
  7635  00277C                     _Update_Setup_Screen_Cursor_Backward:
  7636                           	opt stack 20
  7637                           
  7638                           ;incstack = 0
  7639                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  7640  00277C  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  7641                           
  7642                           ;Setup_Time.c: 332: char xinc = 36;
  7643  00277E  0E24               	movlw	36
  7644  002780  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  7645                           
  7646                           ;Setup_Time.c: 333: char yinc = 30;
  7647  002782  0E1E               	movlw	30
  7648  002784  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  7649                           
  7650                           ;Setup_Time.c: 334: switch (field)
  7651  002786  D0BF               	goto	l6918
  7652  002788                     l6896:
  7653                           
  7654                           ;Setup_Time.c: 337: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  7655  002788  0E44               	movlw	68
  7656  00278A  6E23               	movwf	fillRect@y,c
  7657  00278C  0E19               	movlw	25
  7658  00278E  6E24               	movwf	fillRect@w,c
  7659  002790  0E02               	movlw	2
  7660  002792  6E25               	movwf	fillRect@h,c
  7661  002794  0E00               	movlw	0
  7662  002796  6E27               	movwf	fillRect@color+1,c
  7663  002798  0E00               	movlw	0
  7664  00279A  6E26               	movwf	fillRect@color,c
  7665  00279C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7666  00279E  0F0E               	addlw	14
  7667  0027A0  EC11  F023         	call	_fillRect
  7668                           
  7669                           ;Setup_Time.c: 338: fillRect(15-1, 52+16, 25,2,0x07FF);
  7670  0027A4  0E44               	movlw	68
  7671  0027A6  6E23               	movwf	fillRect@y,c
  7672  0027A8  0E19               	movlw	25
  7673  0027AA  6E24               	movwf	fillRect@w,c
  7674  0027AC  0E02               	movlw	2
  7675  0027AE  6E25               	movwf	fillRect@h,c
  7676  0027B0  0E07               	movlw	7
  7677  0027B2  6E27               	movwf	fillRect@color+1,c
  7678  0027B4  6826               	setf	fillRect@color,c
  7679  0027B6  0E0E               	movlw	14
  7680  0027B8  EC11  F023         	call	_fillRect
  7681                           
  7682                           ;Setup_Time.c: 339: break;
  7683  0027BC  D0B8               	goto	l1324
  7684  0027BE                     l6898:
  7685                           
  7686                           ;Setup_Time.c: 342: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  7687  0027BE  0E44               	movlw	68
  7688  0027C0  6E23               	movwf	fillRect@y,c
  7689  0027C2  0E19               	movlw	25
  7690  0027C4  6E24               	movwf	fillRect@w,c
  7691  0027C6  0E02               	movlw	2
  7692  0027C8  6E25               	movwf	fillRect@h,c
  7693  0027CA  0E00               	movlw	0
  7694  0027CC  6E27               	movwf	fillRect@color+1,c
  7695  0027CE  0E00               	movlw	0
  7696  0027D0  6E26               	movwf	fillRect@color,c
  7697  0027D2  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7698  0027D4  0D02               	mullw	2
  7699  0027D6  50F3               	movf	prodl,w,c
  7700  0027D8  0F0E               	addlw	14
  7701  0027DA  EC11  F023         	call	_fillRect
  7702                           
  7703                           ;Setup_Time.c: 343: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  7704  0027DE  0E44               	movlw	68
  7705  0027E0  6E23               	movwf	fillRect@y,c
  7706  0027E2  0E19               	movlw	25
  7707  0027E4  6E24               	movwf	fillRect@w,c
  7708  0027E6  0E02               	movlw	2
  7709  0027E8  6E25               	movwf	fillRect@h,c
  7710  0027EA  0E07               	movlw	7
  7711  0027EC  6E27               	movwf	fillRect@color+1,c
  7712  0027EE  6826               	setf	fillRect@color,c
  7713  0027F0  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7714  0027F2  0F0E               	addlw	14
  7715  0027F4  EC11  F023         	call	_fillRect
  7716                           
  7717                           ;Setup_Time.c: 344: break;
  7718  0027F8  D09A               	goto	l1324
  7719  0027FA                     l6902:
  7720                           
  7721                           ;Setup_Time.c: 347: fillRect(15-1, 52+16, 25,2,0x0000);
  7722  0027FA  0E44               	movlw	68
  7723  0027FC  6E23               	movwf	fillRect@y,c
  7724  0027FE  0E19               	movlw	25
  7725  002800  6E24               	movwf	fillRect@w,c
  7726  002802  0E02               	movlw	2
  7727  002804  6E25               	movwf	fillRect@h,c
  7728  002806  0E00               	movlw	0
  7729  002808  6E27               	movwf	fillRect@color+1,c
  7730  00280A  0E00               	movlw	0
  7731  00280C  6E26               	movwf	fillRect@color,c
  7732  00280E  0E0E               	movlw	14
  7733  002810  EC11  F023         	call	_fillRect
  7734                           
  7735                           ;Setup_Time.c: 348: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  7736  002814  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7737  002816  0F44               	addlw	68
  7738  002818  6E23               	movwf	fillRect@y,c
  7739  00281A  0E19               	movlw	25
  7740  00281C  6E24               	movwf	fillRect@w,c
  7741  00281E  0E02               	movlw	2
  7742  002820  6E25               	movwf	fillRect@h,c
  7743  002822  0E00               	movlw	0
  7744  002824  6E27               	movwf	fillRect@color+1,c
  7745  002826  0E00               	movlw	0
  7746  002828  6E26               	movwf	fillRect@color,c
  7747  00282A  0E0E               	movlw	14
  7748  00282C  EC11  F023         	call	_fillRect
  7749                           
  7750                           ;Setup_Time.c: 349: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  7751  002830  0E44               	movlw	68
  7752  002832  6E23               	movwf	fillRect@y,c
  7753  002834  0E19               	movlw	25
  7754  002836  6E24               	movwf	fillRect@w,c
  7755  002838  0E02               	movlw	2
  7756  00283A  6E25               	movwf	fillRect@h,c
  7757  00283C  0E07               	movlw	7
  7758  00283E  6E27               	movwf	fillRect@color+1,c
  7759  002840  6826               	setf	fillRect@color,c
  7760  002842  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7761  002844  0D02               	mullw	2
  7762  002846  50F3               	movf	prodl,w,c
  7763  002848  0F0E               	addlw	14
  7764  00284A  EC11  F023         	call	_fillRect
  7765                           
  7766                           ;Setup_Time.c: 350: break;
  7767  00284E  D06F               	goto	l1324
  7768  002850                     l6906:
  7769                           
  7770                           ;Setup_Time.c: 353: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  7771  002850  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7772  002852  0F44               	addlw	68
  7773  002854  6E23               	movwf	fillRect@y,c
  7774  002856  0E19               	movlw	25
  7775  002858  6E24               	movwf	fillRect@w,c
  7776  00285A  0E02               	movlw	2
  7777  00285C  6E25               	movwf	fillRect@h,c
  7778  00285E  0E00               	movlw	0
  7779  002860  6E27               	movwf	fillRect@color+1,c
  7780  002862  0E00               	movlw	0
  7781  002864  6E26               	movwf	fillRect@color,c
  7782  002866  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7783  002868  0F0E               	addlw	14
  7784  00286A  EC11  F023         	call	_fillRect
  7785                           
  7786                           ;Setup_Time.c: 354: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  7787  00286E  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7788  002870  0F44               	addlw	68
  7789  002872  6E23               	movwf	fillRect@y,c
  7790  002874  0E19               	movlw	25
  7791  002876  6E24               	movwf	fillRect@w,c
  7792  002878  0E02               	movlw	2
  7793  00287A  6E25               	movwf	fillRect@h,c
  7794  00287C  0E07               	movlw	7
  7795  00287E  6E27               	movwf	fillRect@color+1,c
  7796  002880  6826               	setf	fillRect@color,c
  7797  002882  0E0E               	movlw	14
  7798  002884  EC11  F023         	call	_fillRect
  7799                           
  7800                           ;Setup_Time.c: 355: break;
  7801  002888  D052               	goto	l1324
  7802  00288A                     l6908:
  7803                           
  7804                           ;Setup_Time.c: 358: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  7805  00288A  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7806  00288C  0F44               	addlw	68
  7807  00288E  6E23               	movwf	fillRect@y,c
  7808  002890  0E19               	movlw	25
  7809  002892  6E24               	movwf	fillRect@w,c
  7810  002894  0E02               	movlw	2
  7811  002896  6E25               	movwf	fillRect@h,c
  7812  002898  0E00               	movlw	0
  7813  00289A  6E27               	movwf	fillRect@color+1,c
  7814  00289C  0E00               	movlw	0
  7815  00289E  6E26               	movwf	fillRect@color,c
  7816  0028A0  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7817  0028A2  0D02               	mullw	2
  7818  0028A4  50F3               	movf	prodl,w,c
  7819  0028A6  0F0E               	addlw	14
  7820  0028A8  EC11  F023         	call	_fillRect
  7821                           
  7822                           ;Setup_Time.c: 359: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  7823  0028AC  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7824  0028AE  0F44               	addlw	68
  7825  0028B0  6E23               	movwf	fillRect@y,c
  7826  0028B2  0E19               	movlw	25
  7827  0028B4  6E24               	movwf	fillRect@w,c
  7828  0028B6  0E02               	movlw	2
  7829  0028B8  6E25               	movwf	fillRect@h,c
  7830  0028BA  0E07               	movlw	7
  7831  0028BC  6E27               	movwf	fillRect@color+1,c
  7832  0028BE  6826               	setf	fillRect@color,c
  7833  0028C0  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7834  0028C2  0F0E               	addlw	14
  7835  0028C4  EC11  F023         	call	_fillRect
  7836                           
  7837                           ;Setup_Time.c: 360: break;
  7838  0028C8  D032               	goto	l1324
  7839  0028CA                     l6912:
  7840                           
  7841                           ;Setup_Time.c: 363: fillRect(15-1, 52+16, 25,2,0x0000);
  7842  0028CA  0E44               	movlw	68
  7843  0028CC  6E23               	movwf	fillRect@y,c
  7844  0028CE  0E19               	movlw	25
  7845  0028D0  6E24               	movwf	fillRect@w,c
  7846  0028D2  0E02               	movlw	2
  7847  0028D4  6E25               	movwf	fillRect@h,c
  7848  0028D6  0E00               	movlw	0
  7849  0028D8  6E27               	movwf	fillRect@color+1,c
  7850  0028DA  0E00               	movlw	0
  7851  0028DC  6E26               	movwf	fillRect@color,c
  7852  0028DE  0E0E               	movlw	14
  7853  0028E0  EC11  F023         	call	_fillRect
  7854                           
  7855                           ;Setup_Time.c: 364: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  7856  0028E4  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7857  0028E6  0F44               	addlw	68
  7858  0028E8  6E23               	movwf	fillRect@y,c
  7859  0028EA  0E19               	movlw	25
  7860  0028EC  6E24               	movwf	fillRect@w,c
  7861  0028EE  0E02               	movlw	2
  7862  0028F0  6E25               	movwf	fillRect@h,c
  7863  0028F2  0E07               	movlw	7
  7864  0028F4  6E27               	movwf	fillRect@color+1,c
  7865  0028F6  6826               	setf	fillRect@color,c
  7866  0028F8  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7867  0028FA  0D02               	mullw	2
  7868  0028FC  50F3               	movf	prodl,w,c
  7869  0028FE  0F0E               	addlw	14
  7870  002900  EC11  F023         	call	_fillRect
  7871                           
  7872                           ;Setup_Time.c: 366: }
  7873                           
  7874                           ;Setup_Time.c: 365: break;
  7875  002904  D014               	goto	l1324
  7876  002906                     l6918:
  7877  002906  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  7878                           
  7879                           ; Switch size 1, requested type "space"
  7880                           ; Number of cases is 6, Range of values is 0 to 5
  7881                           ; switch strategies available:
  7882                           ; Name         Instructions Cycles
  7883                           ; simple_byte           19    10 (average)
  7884                           ;	Chosen strategy is simple_byte
  7885  002908  0A00               	xorlw	0	; case 0
  7886  00290A  B4D8               	btfsc	status,2,c
  7887  00290C  D73D               	goto	l6896
  7888  00290E  0A01               	xorlw	1	; case 1
  7889  002910  B4D8               	btfsc	status,2,c
  7890  002912  D755               	goto	l6898
  7891  002914  0A03               	xorlw	3	; case 2
  7892  002916  B4D8               	btfsc	status,2,c
  7893  002918  D770               	goto	l6902
  7894  00291A  0A01               	xorlw	1	; case 3
  7895  00291C  B4D8               	btfsc	status,2,c
  7896  00291E  D798               	goto	l6906
  7897  002920  0A07               	xorlw	7	; case 4
  7898  002922  B4D8               	btfsc	status,2,c
  7899  002924  D7B2               	goto	l6908
  7900  002926  0A01               	xorlw	1	; case 5
  7901  002928  B4D8               	btfsc	status,2,c
  7902  00292A  D7CF               	goto	l6912
  7903  00292C  D000               	goto	l1324
  7904  00292E                     l1324:
  7905  00292E  0012               	return		;funcret
  7906  002930                     __end_of_Update_Setup_Screen_Cursor_Backward:
  7907                           	opt stack 0
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon2	equ	0xFF1
  7915                           intcon3	equ	0xFF0
  7916                           postinc0	equ	0xFEE
  7917                           wreg	equ	0xFE8
  7918                           postdec1	equ	0xFE5
  7919                           plusw1	equ	0xFE3
  7920                           fsr1l	equ	0xFE1
  7921                           postinc2	equ	0xFDE
  7922                           plusw2	equ	0xFDB
  7923                           fsr2h	equ	0xFDA
  7924                           fsr2l	equ	0xFD9
  7925                           status	equ	0xFD8
  7926                           
  7927 ;; *************** function _Go_Next_Field *****************
  7928 ;; Defined at:
  7929 ;;		line 199 in file "Setup_Time.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;		None               void
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7947 ;;Total ram usage:        0 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    9
  7950 ;; This function calls:
  7951 ;;		_Update_Setup_Screen_Cursor_Forward
  7952 ;; This function is called by:
  7953 ;;		_Do_Setup_Time
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           	psect	text26
  7958  004B36                     __ptext26:
  7959                           	opt stack 0
  7960  004B36                     _Go_Next_Field:
  7961                           	opt stack 20
  7962                           
  7963                           ;Setup_Time.c: 201: Select_Field++;
  7964                           
  7965                           ;incstack = 0
  7966  004B36  0100               	movlb	0	; () banked
  7967  004B38  2BCB               	incf	_Select_Field& (0+255),f,b
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;Setup_Time.c: 202: if (Select_Field == 6) Select_Field = 0;
  7971  004B3A  0E06               	movlw	6
  7972  004B3C  0100               	movlb	0	; () banked
  7973  004B3E  19CB               	xorwf	_Select_Field& (0+255),w,b
  7974  004B40  A4D8               	btfss	status,2,c
  7975  004B42  D004               	goto	l7208
  7976                           
  7977                           ; BSR set to: 0
  7978  004B44  0E00               	movlw	0
  7979  004B46  0100               	movlb	0	; () banked
  7980  004B48  6FCB               	movwf	_Select_Field& (0+255),b
  7981  004B4A  D000               	goto	l7208
  7982  004B4C                     l7208:
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;Setup_Time.c: 203: Update_Setup_Screen_Cursor_Forward(Select_Field);
  7986  004B4C  0100               	movlb	0	; () banked
  7987  004B4E  51CB               	movf	_Select_Field& (0+255),w,b
  7988  004B50  ECE1  F012         	call	_Update_Setup_Screen_Cursor_Forward
  7989  004B54  0012               	return		;funcret
  7990  004B56                     __end_of_Go_Next_Field:
  7991                           	opt stack 0
  7992                           tblptru	equ	0xFF8
  7993                           tblptrh	equ	0xFF7
  7994                           tblptrl	equ	0xFF6
  7995                           tablat	equ	0xFF5
  7996                           prodh	equ	0xFF4
  7997                           prodl	equ	0xFF3
  7998                           intcon2	equ	0xFF1
  7999                           intcon3	equ	0xFF0
  8000                           postinc0	equ	0xFEE
  8001                           wreg	equ	0xFE8
  8002                           postdec1	equ	0xFE5
  8003                           plusw1	equ	0xFE3
  8004                           fsr1l	equ	0xFE1
  8005                           postinc2	equ	0xFDE
  8006                           plusw2	equ	0xFDB
  8007                           fsr2h	equ	0xFDA
  8008                           fsr2l	equ	0xFD9
  8009                           status	equ	0xFD8
  8010                           
  8011 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  8012 ;; Defined at:
  8013 ;;		line 290 in file "Setup_Time.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;  field           1    wreg     unsigned char 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  field           1   45[COMRAM] unsigned char 
  8018 ;;  xinc            1   47[COMRAM] unsigned char 
  8019 ;;  yinc            1   46[COMRAM] unsigned char 
  8020 ;; Return value:  Size  Location     Type
  8021 ;;		None               void
  8022 ;; Registers used:
  8023 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8030 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8032 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8033 ;;Total ram usage:        3 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    8
  8036 ;; This function calls:
  8037 ;;		_fillRect
  8038 ;; This function is called by:
  8039 ;;		_Go_Next_Field
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           	psect	text27
  8044  0025C2                     __ptext27:
  8045                           	opt stack 0
  8046  0025C2                     _Update_Setup_Screen_Cursor_Forward:
  8047                           	opt stack 20
  8048                           
  8049                           ;incstack = 0
  8050                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  8051  0025C2  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  8052                           
  8053                           ;Setup_Time.c: 292: char xinc = 36;
  8054  0025C4  0E24               	movlw	36
  8055  0025C6  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  8056                           
  8057                           ;Setup_Time.c: 293: char yinc = 30;
  8058  0025C8  0E1E               	movlw	30
  8059  0025CA  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  8060                           
  8061                           ;Setup_Time.c: 294: switch (field)
  8062  0025CC  D0C2               	goto	l6892
  8063  0025CE                     l6870:
  8064                           
  8065                           ;Setup_Time.c: 297: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  8066  0025CE  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8067  0025D0  0F44               	addlw	68
  8068  0025D2  6E23               	movwf	fillRect@y,c
  8069  0025D4  0E19               	movlw	25
  8070  0025D6  6E24               	movwf	fillRect@w,c
  8071  0025D8  0E02               	movlw	2
  8072  0025DA  6E25               	movwf	fillRect@h,c
  8073  0025DC  0E00               	movlw	0
  8074  0025DE  6E27               	movwf	fillRect@color+1,c
  8075  0025E0  0E00               	movlw	0
  8076  0025E2  6E26               	movwf	fillRect@color,c
  8077  0025E4  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8078  0025E6  0D02               	mullw	2
  8079  0025E8  50F3               	movf	prodl,w,c
  8080  0025EA  0F0E               	addlw	14
  8081  0025EC  EC11  F023         	call	_fillRect
  8082                           
  8083                           ;Setup_Time.c: 298: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8084  0025F0  0E44               	movlw	68
  8085  0025F2  6E23               	movwf	fillRect@y,c
  8086  0025F4  0E19               	movlw	25
  8087  0025F6  6E24               	movwf	fillRect@w,c
  8088  0025F8  0E02               	movlw	2
  8089  0025FA  6E25               	movwf	fillRect@h,c
  8090  0025FC  0E00               	movlw	0
  8091  0025FE  6E27               	movwf	fillRect@color+1,c
  8092  002600  0E00               	movlw	0
  8093  002602  6E26               	movwf	fillRect@color,c
  8094  002604  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8095  002606  0D02               	mullw	2
  8096  002608  50F3               	movf	prodl,w,c
  8097  00260A  0F0E               	addlw	14
  8098  00260C  EC11  F023         	call	_fillRect
  8099                           
  8100                           ;Setup_Time.c: 299: fillRect(15-1, 52+16, 25,2,0x07FF);
  8101  002610  0E44               	movlw	68
  8102  002612  6E23               	movwf	fillRect@y,c
  8103  002614  0E19               	movlw	25
  8104  002616  6E24               	movwf	fillRect@w,c
  8105  002618  0E02               	movlw	2
  8106  00261A  6E25               	movwf	fillRect@h,c
  8107  00261C  0E07               	movlw	7
  8108  00261E  6E27               	movwf	fillRect@color+1,c
  8109  002620  6826               	setf	fillRect@color,c
  8110  002622  0E0E               	movlw	14
  8111  002624  EC11  F023         	call	_fillRect
  8112                           
  8113                           ;Setup_Time.c: 300: break;
  8114  002628  D0A8               	goto	l1313
  8115  00262A                     l6874:
  8116                           
  8117                           ;Setup_Time.c: 303: fillRect(15-1, 52+16, 25,2,0x0000);
  8118  00262A  0E44               	movlw	68
  8119  00262C  6E23               	movwf	fillRect@y,c
  8120  00262E  0E19               	movlw	25
  8121  002630  6E24               	movwf	fillRect@w,c
  8122  002632  0E02               	movlw	2
  8123  002634  6E25               	movwf	fillRect@h,c
  8124  002636  0E00               	movlw	0
  8125  002638  6E27               	movwf	fillRect@color+1,c
  8126  00263A  0E00               	movlw	0
  8127  00263C  6E26               	movwf	fillRect@color,c
  8128  00263E  0E0E               	movlw	14
  8129  002640  EC11  F023         	call	_fillRect
  8130                           
  8131                           ;Setup_Time.c: 304: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  8132  002644  0E44               	movlw	68
  8133  002646  6E23               	movwf	fillRect@y,c
  8134  002648  0E19               	movlw	25
  8135  00264A  6E24               	movwf	fillRect@w,c
  8136  00264C  0E02               	movlw	2
  8137  00264E  6E25               	movwf	fillRect@h,c
  8138  002650  0E07               	movlw	7
  8139  002652  6E27               	movwf	fillRect@color+1,c
  8140  002654  6826               	setf	fillRect@color,c
  8141  002656  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8142  002658  0F0E               	addlw	14
  8143  00265A  EC11  F023         	call	_fillRect
  8144                           
  8145                           ;Setup_Time.c: 305: break;
  8146  00265E  D08D               	goto	l1313
  8147  002660                     l6876:
  8148                           
  8149                           ;Setup_Time.c: 309: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  8150  002660  0E44               	movlw	68
  8151  002662  6E23               	movwf	fillRect@y,c
  8152  002664  0E19               	movlw	25
  8153  002666  6E24               	movwf	fillRect@w,c
  8154  002668  0E02               	movlw	2
  8155  00266A  6E25               	movwf	fillRect@h,c
  8156  00266C  0E00               	movlw	0
  8157  00266E  6E27               	movwf	fillRect@color+1,c
  8158  002670  0E00               	movlw	0
  8159  002672  6E26               	movwf	fillRect@color,c
  8160  002674  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8161  002676  0F0E               	addlw	14
  8162  002678  EC11  F023         	call	_fillRect
  8163                           
  8164                           ;Setup_Time.c: 310: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  8165  00267C  0E44               	movlw	68
  8166  00267E  6E23               	movwf	fillRect@y,c
  8167  002680  0E19               	movlw	25
  8168  002682  6E24               	movwf	fillRect@w,c
  8169  002684  0E02               	movlw	2
  8170  002686  6E25               	movwf	fillRect@h,c
  8171  002688  0E07               	movlw	7
  8172  00268A  6E27               	movwf	fillRect@color+1,c
  8173  00268C  6826               	setf	fillRect@color,c
  8174  00268E  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8175  002690  0D02               	mullw	2
  8176  002692  50F3               	movf	prodl,w,c
  8177  002694  0F0E               	addlw	14
  8178  002696  EC11  F023         	call	_fillRect
  8179                           
  8180                           ;Setup_Time.c: 311: break;
  8181  00269A  D06F               	goto	l1313
  8182  00269C                     l6880:
  8183                           
  8184                           ;Setup_Time.c: 314: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8185  00269C  0E44               	movlw	68
  8186  00269E  6E23               	movwf	fillRect@y,c
  8187  0026A0  0E19               	movlw	25
  8188  0026A2  6E24               	movwf	fillRect@w,c
  8189  0026A4  0E02               	movlw	2
  8190  0026A6  6E25               	movwf	fillRect@h,c
  8191  0026A8  0E00               	movlw	0
  8192  0026AA  6E27               	movwf	fillRect@color+1,c
  8193  0026AC  0E00               	movlw	0
  8194  0026AE  6E26               	movwf	fillRect@color,c
  8195  0026B0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8196  0026B2  0D02               	mullw	2
  8197  0026B4  50F3               	movf	prodl,w,c
  8198  0026B6  0F0E               	addlw	14
  8199  0026B8  EC11  F023         	call	_fillRect
  8200                           
  8201                           ;Setup_Time.c: 315: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  8202  0026BC  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8203  0026BE  0F44               	addlw	68
  8204  0026C0  6E23               	movwf	fillRect@y,c
  8205  0026C2  0E19               	movlw	25
  8206  0026C4  6E24               	movwf	fillRect@w,c
  8207  0026C6  0E02               	movlw	2
  8208  0026C8  6E25               	movwf	fillRect@h,c
  8209  0026CA  0E07               	movlw	7
  8210  0026CC  6E27               	movwf	fillRect@color+1,c
  8211  0026CE  6826               	setf	fillRect@color,c
  8212  0026D0  0E0E               	movlw	14
  8213  0026D2  EC11  F023         	call	_fillRect
  8214                           
  8215                           ;Setup_Time.c: 316: break;
  8216  0026D6  D051               	goto	l1313
  8217  0026D8                     l6884:
  8218                           
  8219                           ;Setup_Time.c: 319: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  8220  0026D8  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8221  0026DA  0F44               	addlw	68
  8222  0026DC  6E23               	movwf	fillRect@y,c
  8223  0026DE  0E19               	movlw	25
  8224  0026E0  6E24               	movwf	fillRect@w,c
  8225  0026E2  0E02               	movlw	2
  8226  0026E4  6E25               	movwf	fillRect@h,c
  8227  0026E6  0E00               	movlw	0
  8228  0026E8  6E27               	movwf	fillRect@color+1,c
  8229  0026EA  0E00               	movlw	0
  8230  0026EC  6E26               	movwf	fillRect@color,c
  8231  0026EE  0E0E               	movlw	14
  8232  0026F0  EC11  F023         	call	_fillRect
  8233                           
  8234                           ;Setup_Time.c: 320: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  8235  0026F4  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8236  0026F6  0F44               	addlw	68
  8237  0026F8  6E23               	movwf	fillRect@y,c
  8238  0026FA  0E19               	movlw	25
  8239  0026FC  6E24               	movwf	fillRect@w,c
  8240  0026FE  0E02               	movlw	2
  8241  002700  6E25               	movwf	fillRect@h,c
  8242  002702  0E07               	movlw	7
  8243  002704  6E27               	movwf	fillRect@color+1,c
  8244  002706  6826               	setf	fillRect@color,c
  8245  002708  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8246  00270A  0F0E               	addlw	14
  8247  00270C  EC11  F023         	call	_fillRect
  8248                           
  8249                           ;Setup_Time.c: 321: break;
  8250  002710  D034               	goto	l1313
  8251  002712                     l6886:
  8252                           
  8253                           ;Setup_Time.c: 324: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  8254  002712  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8255  002714  0F44               	addlw	68
  8256  002716  6E23               	movwf	fillRect@y,c
  8257  002718  0E19               	movlw	25
  8258  00271A  6E24               	movwf	fillRect@w,c
  8259  00271C  0E02               	movlw	2
  8260  00271E  6E25               	movwf	fillRect@h,c
  8261  002720  0E00               	movlw	0
  8262  002722  6E27               	movwf	fillRect@color+1,c
  8263  002724  0E00               	movlw	0
  8264  002726  6E26               	movwf	fillRect@color,c
  8265  002728  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8266  00272A  0F0E               	addlw	14
  8267  00272C  EC11  F023         	call	_fillRect
  8268                           
  8269                           ;Setup_Time.c: 325: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  8270  002730  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8271  002732  0F44               	addlw	68
  8272  002734  6E23               	movwf	fillRect@y,c
  8273  002736  0E19               	movlw	25
  8274  002738  6E24               	movwf	fillRect@w,c
  8275  00273A  0E02               	movlw	2
  8276  00273C  6E25               	movwf	fillRect@h,c
  8277  00273E  0E07               	movlw	7
  8278  002740  6E27               	movwf	fillRect@color+1,c
  8279  002742  6826               	setf	fillRect@color,c
  8280  002744  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8281  002746  0D02               	mullw	2
  8282  002748  50F3               	movf	prodl,w,c
  8283  00274A  0F0E               	addlw	14
  8284  00274C  EC11  F023         	call	_fillRect
  8285                           
  8286                           ;Setup_Time.c: 327: }
  8287                           
  8288                           ;Setup_Time.c: 326: break;
  8289  002750  D014               	goto	l1313
  8290  002752                     l6892:
  8291  002752  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  8292                           
  8293                           ; Switch size 1, requested type "space"
  8294                           ; Number of cases is 6, Range of values is 0 to 5
  8295                           ; switch strategies available:
  8296                           ; Name         Instructions Cycles
  8297                           ; simple_byte           19    10 (average)
  8298                           ;	Chosen strategy is simple_byte
  8299  002754  0A00               	xorlw	0	; case 0
  8300  002756  B4D8               	btfsc	status,2,c
  8301  002758  D73A               	goto	l6870
  8302  00275A  0A01               	xorlw	1	; case 1
  8303  00275C  B4D8               	btfsc	status,2,c
  8304  00275E  D765               	goto	l6874
  8305  002760  0A03               	xorlw	3	; case 2
  8306  002762  B4D8               	btfsc	status,2,c
  8307  002764  D77D               	goto	l6876
  8308  002766  0A01               	xorlw	1	; case 3
  8309  002768  B4D8               	btfsc	status,2,c
  8310  00276A  D798               	goto	l6880
  8311  00276C  0A07               	xorlw	7	; case 4
  8312  00276E  B4D8               	btfsc	status,2,c
  8313  002770  D7B3               	goto	l6884
  8314  002772  0A01               	xorlw	1	; case 5
  8315  002774  B4D8               	btfsc	status,2,c
  8316  002776  D7CD               	goto	l6886
  8317  002778  D000               	goto	l1313
  8318  00277A                     l1313:
  8319  00277A  0012               	return		;funcret
  8320  00277C                     __end_of_Update_Setup_Screen_Cursor_Forward:
  8321                           	opt stack 0
  8322                           tblptru	equ	0xFF8
  8323                           tblptrh	equ	0xFF7
  8324                           tblptrl	equ	0xFF6
  8325                           tablat	equ	0xFF5
  8326                           prodh	equ	0xFF4
  8327                           prodl	equ	0xFF3
  8328                           intcon2	equ	0xFF1
  8329                           intcon3	equ	0xFF0
  8330                           postinc0	equ	0xFEE
  8331                           wreg	equ	0xFE8
  8332                           postdec1	equ	0xFE5
  8333                           plusw1	equ	0xFE3
  8334                           fsr1l	equ	0xFE1
  8335                           postinc2	equ	0xFDE
  8336                           plusw2	equ	0xFDB
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           
  8341 ;; *************** function _Exit_Time_Setup *****************
  8342 ;; Defined at:
  8343 ;;		line 222 in file "Setup_Time.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;		None
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;		None               void
  8350 ;; Registers used:
  8351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8361 ;;Total ram usage:        0 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:   11
  8364 ;; This function calls:
  8365 ;;		_DS3231_Read_Time
  8366 ;;		_Initialize_Screen
  8367 ;; This function is called by:
  8368 ;;		_Do_Setup_Time
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           	psect	text28
  8373  004D84                     __ptext28:
  8374                           	opt stack 0
  8375  004D84                     _Exit_Time_Setup:
  8376                           	opt stack 18
  8377                           
  8378                           ;Setup_Time.c: 224: DS3231_Read_Time();
  8379                           
  8380                           ;incstack = 0
  8381  004D84  EC5A  F021         	call	_DS3231_Read_Time	;wreg free
  8382                           
  8383                           ;Setup_Time.c: 225: Initialize_Screen();
  8384  004D88  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  8385                           
  8386                           ;Setup_Time.c: 226: In_Time_Setup = 0;
  8387  004D8C  0E00               	movlw	0
  8388  004D8E  0100               	movlb	0	; () banked
  8389  004D90  6FC8               	movwf	_In_Time_Setup& (0+255),b
  8390                           
  8391                           ; BSR set to: 0
  8392  004D92  0012               	return		;funcret
  8393  004D94                     __end_of_Exit_Time_Setup:
  8394                           	opt stack 0
  8395                           tblptru	equ	0xFF8
  8396                           tblptrh	equ	0xFF7
  8397                           tblptrl	equ	0xFF6
  8398                           tablat	equ	0xFF5
  8399                           prodh	equ	0xFF4
  8400                           prodl	equ	0xFF3
  8401                           intcon2	equ	0xFF1
  8402                           intcon3	equ	0xFF0
  8403                           postinc0	equ	0xFEE
  8404                           wreg	equ	0xFE8
  8405                           postdec1	equ	0xFE5
  8406                           plusw1	equ	0xFE3
  8407                           fsr1l	equ	0xFE1
  8408                           postinc2	equ	0xFDE
  8409                           plusw2	equ	0xFDB
  8410                           fsr2h	equ	0xFDA
  8411                           fsr2l	equ	0xFD9
  8412                           status	equ	0xFD8
  8413                           
  8414 ;; *************** function _Do_Save_New_Time *****************
  8415 ;; Defined at:
  8416 ;;		line 214 in file "Setup_Time.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;		None
  8419 ;; Auto vars:     Size  Location     Type
  8420 ;;		None
  8421 ;; Return value:  Size  Location     Type
  8422 ;;		None               void
  8423 ;; Registers used:
  8424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;Total ram usage:        0 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; Hardware stack levels required when called:   11
  8437 ;; This function calls:
  8438 ;;		_DS3231_Read_Time
  8439 ;;		_DS3231_Write_Time
  8440 ;;		_Initialize_Screen
  8441 ;; This function is called by:
  8442 ;;		_Do_Setup_Time
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           	psect	text29
  8447  004CCA                     __ptext29:
  8448                           	opt stack 0
  8449  004CCA                     _Do_Save_New_Time:
  8450                           	opt stack 18
  8451                           
  8452                           ;Setup_Time.c: 216: DS3231_Write_Time();
  8453                           
  8454                           ; BSR set to: 0
  8455                           ;incstack = 0
  8456  004CCA  ECEE  F01D         	call	_DS3231_Write_Time	;wreg free
  8457                           
  8458                           ;Setup_Time.c: 217: DS3231_Read_Time();
  8459  004CCE  EC5A  F021         	call	_DS3231_Read_Time	;wreg free
  8460                           
  8461                           ;Setup_Time.c: 218: Initialize_Screen();
  8462  004CD2  EC9F  F00B         	call	_Initialize_Screen	;wreg free
  8463                           
  8464                           ;Setup_Time.c: 219: In_Time_Setup = 0;
  8465  004CD6  0E00               	movlw	0
  8466  004CD8  0100               	movlb	0	; () banked
  8467  004CDA  6FC8               	movwf	_In_Time_Setup& (0+255),b
  8468                           
  8469                           ; BSR set to: 0
  8470  004CDC  0012               	return		;funcret
  8471  004CDE                     __end_of_Do_Save_New_Time:
  8472                           	opt stack 0
  8473                           tblptru	equ	0xFF8
  8474                           tblptrh	equ	0xFF7
  8475                           tblptrl	equ	0xFF6
  8476                           tablat	equ	0xFF5
  8477                           prodh	equ	0xFF4
  8478                           prodl	equ	0xFF3
  8479                           intcon2	equ	0xFF1
  8480                           intcon3	equ	0xFF0
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           postdec1	equ	0xFE5
  8484                           plusw1	equ	0xFE3
  8485                           fsr1l	equ	0xFE1
  8486                           postinc2	equ	0xFDE
  8487                           plusw2	equ	0xFDB
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function _Initialize_Screen *****************
  8493 ;; Defined at:
  8494 ;;		line 41 in file "Main_Screen.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;		None
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;		None
  8499 ;; Return value:  Size  Location     Type
  8500 ;;		None               void
  8501 ;; Registers used:
  8502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;Total ram usage:        0 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:   10
  8515 ;; This function calls:
  8516 ;;		_LCD_Reset
  8517 ;;		_TFT_GreenTab_Initialize
  8518 ;;		_drawtext
  8519 ;;		_fillScreen
  8520 ;;		_strcpy
  8521 ;; This function is called by:
  8522 ;;		_main
  8523 ;;		_Do_Save_New_Fan_Temp
  8524 ;;		_Do_Save_New_Time
  8525 ;;		_Exit_Time_Setup
  8526 ;;		_Exit_Setup_Fan_Temp
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text30
  8531  00173E                     __ptext30:
  8532                           	opt stack 0
  8533  00173E                     _Initialize_Screen:
  8534                           	opt stack 18
  8535                           
  8536                           ;Main_Screen.c: 43: LCD_Reset();
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;incstack = 0
  8540  00173E  EC83  F026         	call	_LCD_Reset	;wreg free
  8541                           
  8542                           ;Main_Screen.c: 44: TFT_GreenTab_Initialize();
  8543  001742  EC7A  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  8544                           
  8545                           ;Main_Screen.c: 45: fillScreen(0x0000);
  8546  001746  0E00               	movlw	0
  8547  001748  6E25               	movwf	fillScreen@color+1,c
  8548  00174A  0E00               	movlw	0
  8549  00174C  6E24               	movwf	fillScreen@color,c
  8550  00174E  ECCA  F025         	call	_fillScreen	;wreg free
  8551                           
  8552                           ;Main_Screen.c: 46: if (1 == 0)
  8553  001752  D005               	goto	l9526
  8554                           
  8555                           ;Main_Screen.c: 47: {
  8556                           ;Main_Screen.c: 48: Timing_Txt[12] = 'S';
  8557  001754  0E53               	movlw	83
  8558  001756  0101               	movlb	1	; () banked
  8559  001758  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  8560                           
  8561                           ;Main_Screen.c: 49: Timing_Txt[13] = 'P';
  8562  00175A  0E50               	movlw	80
  8563  00175C  D004               	goto	L7
  8564  00175E                     l9526:
  8565                           
  8566                           ;Main_Screen.c: 51: else
  8567                           ;Main_Screen.c: 52: {
  8568                           ;Main_Screen.c: 53: Timing_Txt[12] = 'F';
  8569  00175E  0E46               	movlw	70
  8570  001760  0101               	movlb	1	; () banked
  8571  001762  6F48               	movwf	(_Timing_Txt+12)& (0+255),b
  8572                           
  8573                           ;Main_Screen.c: 54: Timing_Txt[13] = 'A';
  8574  001764  0E41               	movlw	65
  8575  001766                     L7:
  8576  001766  0101               	movlb	1	; () banked
  8577  001768  6F49               	movwf	(_Timing_Txt+13)& (0+255),b
  8578                           
  8579                           ; BSR set to: 1
  8580                           ;Main_Screen.c: 55: }
  8581                           ;Main_Screen.c: 56: Timing_Txt[14] = 24/10 + '0';
  8582  00176A  0E32               	movlw	50
  8583  00176C  0101               	movlb	1	; () banked
  8584  00176E  6F4A               	movwf	(_Timing_Txt+14)& (0+255),b
  8585                           
  8586                           ;Main_Screen.c: 57: Timing_Txt[15] = 24%10 + '0';
  8587  001770  0E34               	movlw	52
  8588  001772  0101               	movlb	1	; () banked
  8589  001774  6F4B               	movwf	(_Timing_Txt+15)& (0+255),b
  8590                           
  8591                           ;Main_Screen.c: 58: Timing_Txt[17] = 3%10 + '0';
  8592  001776  0E33               	movlw	51
  8593  001778  0101               	movlb	1	; () banked
  8594  00177A  6F4D               	movwf	(_Timing_Txt+17)& (0+255),b
  8595                           
  8596                           ;Main_Screen.c: 59: Timing_Txt[19] = 13/10 + '0';
  8597  00177C  0E31               	movlw	49
  8598  00177E  0101               	movlb	1	; () banked
  8599  001780  6F4F               	movwf	(_Timing_Txt+19)& (0+255),b
  8600                           
  8601                           ;Main_Screen.c: 60: Timing_Txt[20] = 13%10 + '0';
  8602  001782  0E33               	movlw	51
  8603  001784  0101               	movlb	1	; () banked
  8604  001786  6F50               	movwf	(_Timing_Txt+20)& (0+255),b
  8605                           
  8606                           ; BSR set to: 1
  8607                           ;Main_Screen.c: 62: if (SYSTEM_ON == 1)
  8608  001788  0462               	decf	_SYSTEM_ON,w,c
  8609  00178A  A4D8               	btfss	status,2,c
  8610  00178C  D189               	goto	l9568
  8611                           
  8612                           ; BSR set to: 1
  8613                           ;Main_Screen.c: 63: {
  8614                           ;Main_Screen.c: 64: drawtext(1, 1, Timing_Txt, 0xFFFF, 0x0000, 1);
  8615  00178E  0E01               	movlw	1
  8616  001790  6E39               	movwf	drawtext@y,c
  8617  001792  0E3C               	movlw	low _Timing_Txt
  8618  001794  6E3A               	movwf	drawtext@_text,c
  8619  001796  0E01               	movlw	high _Timing_Txt
  8620  001798  6E3B               	movwf	drawtext@_text+1,c
  8621  00179A  0EFF               	movlw	255
  8622  00179C  6E3D               	movwf	drawtext@color+1,c
  8623  00179E  683C               	setf	drawtext@color,c
  8624  0017A0  0E00               	movlw	0
  8625  0017A2  6E3F               	movwf	drawtext@bg+1,c
  8626  0017A4  0E00               	movlw	0
  8627  0017A6  6E3E               	movwf	drawtext@bg,c
  8628  0017A8  0E01               	movlw	1
  8629  0017AA  6E40               	movwf	drawtext@size,c
  8630  0017AC  0E01               	movlw	1
  8631  0017AE  ECDB  F01A         	call	_drawtext
  8632                           
  8633                           ;Main_Screen.c: 66: strcpy(txt, "Temperature:");
  8634  0017B2  C05E  F011         	movff	_txt,strcpy@to
  8635  0017B6  C05F  F012         	movff	_txt+1,strcpy@to+1
  8636  0017BA  0E7B               	movlw	low STR_12
  8637  0017BC  6E13               	movwf	strcpy@from,c
  8638  0017BE  0EFF               	movlw	high STR_12
  8639  0017C0  6E14               	movwf	strcpy@from+1,c
  8640  0017C2  EC31  F024         	call	_strcpy	;wreg free
  8641                           
  8642                           ;Main_Screen.c: 67: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  8643  0017C6  0E0B               	movlw	11
  8644  0017C8  6E39               	movwf	drawtext@y,c
  8645  0017CA  C05E  F03A         	movff	_txt,drawtext@_text
  8646  0017CE  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8647  0017D2  0EF8               	movlw	248
  8648  0017D4  6E3D               	movwf	drawtext@color+1,c
  8649  0017D6  0E1F               	movlw	31
  8650  0017D8  6E3C               	movwf	drawtext@color,c
  8651  0017DA  0E00               	movlw	0
  8652  0017DC  6E3F               	movwf	drawtext@bg+1,c
  8653  0017DE  0E00               	movlw	0
  8654  0017E0  6E3E               	movwf	drawtext@bg,c
  8655  0017E2  0E01               	movlw	1
  8656  0017E4  6E40               	movwf	drawtext@size,c
  8657  0017E6  0E18               	movlw	24
  8658  0017E8  ECDB  F01A         	call	_drawtext
  8659                           
  8660                           ;Main_Screen.c: 68: strcpy(txt, "C/");
  8661  0017EC  C05E  F011         	movff	_txt,strcpy@to
  8662  0017F0  C05F  F012         	movff	_txt+1,strcpy@to+1
  8663  0017F4  0EF5               	movlw	low STR_13
  8664  0017F6  6E13               	movwf	strcpy@from,c
  8665  0017F8  0EFF               	movlw	high STR_13
  8666  0017FA  6E14               	movwf	strcpy@from+1,c
  8667  0017FC  EC31  F024         	call	_strcpy	;wreg free
  8668                           
  8669                           ;Main_Screen.c: 69: drawtext(38 , 23, txt, 0xFFE0 , 0x0000, 2);
  8670  001800  0E17               	movlw	23
  8671  001802  6E39               	movwf	drawtext@y,c
  8672  001804  C05E  F03A         	movff	_txt,drawtext@_text
  8673  001808  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8674  00180C  0EFF               	movlw	255
  8675  00180E  6E3D               	movwf	drawtext@color+1,c
  8676  001810  0EE0               	movlw	224
  8677  001812  6E3C               	movwf	drawtext@color,c
  8678  001814  0E00               	movlw	0
  8679  001816  6E3F               	movwf	drawtext@bg+1,c
  8680  001818  0E00               	movlw	0
  8681  00181A  6E3E               	movwf	drawtext@bg,c
  8682  00181C  0E02               	movlw	2
  8683  00181E  6E40               	movwf	drawtext@size,c
  8684  001820  0E26               	movlw	38
  8685  001822  ECDB  F01A         	call	_drawtext
  8686                           
  8687                           ;Main_Screen.c: 70: strcpy(txt, "F");
  8688  001826  C05E  F011         	movff	_txt,strcpy@to
  8689  00182A  C05F  F012         	movff	_txt+1,strcpy@to+1
  8690  00182E  0E1E               	movlw	low (STR_35+18)
  8691  001830  6E13               	movwf	strcpy@from,c
  8692  001832  0EFF               	movlw	high (STR_35+18)
  8693  001834  6E14               	movwf	strcpy@from+1,c
  8694  001836  EC31  F024         	call	_strcpy	;wreg free
  8695                           
  8696                           ;Main_Screen.c: 71: drawtext(110 , 23, txt, 0xFFE0 , 0x0000, 2);
  8697  00183A  0E17               	movlw	23
  8698  00183C  6E39               	movwf	drawtext@y,c
  8699  00183E  C05E  F03A         	movff	_txt,drawtext@_text
  8700  001842  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8701  001846  0EFF               	movlw	255
  8702  001848  6E3D               	movwf	drawtext@color+1,c
  8703  00184A  0EE0               	movlw	224
  8704  00184C  6E3C               	movwf	drawtext@color,c
  8705  00184E  0E00               	movlw	0
  8706  001850  6E3F               	movwf	drawtext@bg+1,c
  8707  001852  0E00               	movlw	0
  8708  001854  6E3E               	movwf	drawtext@bg,c
  8709  001856  0E02               	movlw	2
  8710  001858  6E40               	movwf	drawtext@size,c
  8711  00185A  0E6E               	movlw	110
  8712  00185C  ECDB  F01A         	call	_drawtext
  8713                           
  8714                           ;Main_Screen.c: 72: strcpy(txt, "Time");
  8715  001860  C05E  F011         	movff	_txt,strcpy@to
  8716  001864  C05F  F012         	movff	_txt+1,strcpy@to+1
  8717  001868  0EC8               	movlw	low (STR_18+6)
  8718  00186A  6E13               	movwf	strcpy@from,c
  8719  00186C  0EFF               	movlw	high (STR_18+6)
  8720  00186E  6E14               	movwf	strcpy@from+1,c
  8721  001870  EC31  F024         	call	_strcpy	;wreg free
  8722                           
  8723                           ;Main_Screen.c: 73: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8724  001874  0E28               	movlw	40
  8725  001876  6E39               	movwf	drawtext@y,c
  8726  001878  C05E  F03A         	movff	_txt,drawtext@_text
  8727  00187C  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8728  001880  0E00               	movlw	0
  8729  001882  6E3D               	movwf	drawtext@color+1,c
  8730  001884  0E1F               	movlw	31
  8731  001886  6E3C               	movwf	drawtext@color,c
  8732  001888  0E00               	movlw	0
  8733  00188A  6E3F               	movwf	drawtext@bg+1,c
  8734  00188C  0E00               	movlw	0
  8735  00188E  6E3E               	movwf	drawtext@bg,c
  8736  001890  0E01               	movlw	1
  8737  001892  6E40               	movwf	drawtext@size,c
  8738  001894  0E32               	movlw	50
  8739  001896  ECDB  F01A         	call	_drawtext
  8740                           
  8741                           ;Main_Screen.c: 74: strcpy(txt, "Date");
  8742  00189A  C05E  F011         	movff	_txt,strcpy@to
  8743  00189E  C05F  F012         	movff	_txt+1,strcpy@to+1
  8744  0018A2  0ED7               	movlw	low STR_16
  8745  0018A4  6E13               	movwf	strcpy@from,c
  8746  0018A6  0EFF               	movlw	high STR_16
  8747  0018A8  6E14               	movwf	strcpy@from+1,c
  8748  0018AA  EC31  F024         	call	_strcpy	;wreg free
  8749                           
  8750                           ;Main_Screen.c: 75: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  8751  0018AE  0E47               	movlw	71
  8752  0018B0  6E39               	movwf	drawtext@y,c
  8753  0018B2  C05E  F03A         	movff	_txt,drawtext@_text
  8754  0018B6  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8755  0018BA  0EF8               	movlw	248
  8756  0018BC  6E3D               	movwf	drawtext@color+1,c
  8757  0018BE  0E00               	movlw	0
  8758  0018C0  6E3C               	movwf	drawtext@color,c
  8759  0018C2  0E00               	movlw	0
  8760  0018C4  6E3F               	movwf	drawtext@bg+1,c
  8761  0018C6  0E00               	movlw	0
  8762  0018C8  6E3E               	movwf	drawtext@bg,c
  8763  0018CA  0E01               	movlw	1
  8764  0018CC  6E40               	movwf	drawtext@size,c
  8765  0018CE  0E32               	movlw	50
  8766  0018D0  ECDB  F01A         	call	_drawtext
  8767                           
  8768                           ;Main_Screen.c: 76: strcpy(txt, "Timer Mode");
  8769  0018D4  C05E  F011         	movff	_txt,strcpy@to
  8770  0018D8  C05F  F012         	movff	_txt+1,strcpy@to+1
  8771  0018DC  0EB7               	movlw	low STR_17
  8772  0018DE  6E13               	movwf	strcpy@from,c
  8773  0018E0  0EFF               	movlw	high STR_17
  8774  0018E2  6E14               	movwf	strcpy@from+1,c
  8775  0018E4  EC31  F024         	call	_strcpy	;wreg free
  8776                           
  8777                           ;Main_Screen.c: 77: drawtext(1 , 100 , txt, 0xFFE0, 0x0000, 1);
  8778  0018E8  0E64               	movlw	100
  8779  0018EA  6E39               	movwf	drawtext@y,c
  8780  0018EC  C05E  F03A         	movff	_txt,drawtext@_text
  8781  0018F0  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8782  0018F4  0EFF               	movlw	255
  8783  0018F6  6E3D               	movwf	drawtext@color+1,c
  8784  0018F8  0EE0               	movlw	224
  8785  0018FA  6E3C               	movwf	drawtext@color,c
  8786  0018FC  0E00               	movlw	0
  8787  0018FE  6E3F               	movwf	drawtext@bg+1,c
  8788  001900  0E00               	movlw	0
  8789  001902  6E3E               	movwf	drawtext@bg,c
  8790  001904  0E01               	movlw	1
  8791  001906  6E40               	movwf	drawtext@size,c
  8792  001908  0E01               	movlw	1
  8793  00190A  ECDB  F01A         	call	_drawtext
  8794                           
  8795                           ;Main_Screen.c: 78: strcpy(txt, "Timer Time");
  8796  00190E  C05E  F011         	movff	_txt,strcpy@to
  8797  001912  C05F  F012         	movff	_txt+1,strcpy@to+1
  8798  001916  0EC2               	movlw	low STR_18
  8799  001918  6E13               	movwf	strcpy@from,c
  8800  00191A  0EFF               	movlw	high STR_18
  8801  00191C  6E14               	movwf	strcpy@from+1,c
  8802  00191E  EC31  F024         	call	_strcpy	;wreg free
  8803                           
  8804                           ;Main_Screen.c: 79: drawtext(65 , 100 , txt, 0xFFE0, 0x0000, 1);
  8805  001922  0E64               	movlw	100
  8806  001924  6E39               	movwf	drawtext@y,c
  8807  001926  C05E  F03A         	movff	_txt,drawtext@_text
  8808  00192A  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8809  00192E  0EFF               	movlw	255
  8810  001930  6E3D               	movwf	drawtext@color+1,c
  8811  001932  0EE0               	movlw	224
  8812  001934  6E3C               	movwf	drawtext@color,c
  8813  001936  0E00               	movlw	0
  8814  001938  6E3F               	movwf	drawtext@bg+1,c
  8815  00193A  0E00               	movlw	0
  8816  00193C  6E3E               	movwf	drawtext@bg,c
  8817  00193E  0E01               	movlw	1
  8818  001940  6E40               	movwf	drawtext@size,c
  8819  001942  0E41               	movlw	65
  8820  001944  ECDB  F01A         	call	_drawtext
  8821                           
  8822                           ;Main_Screen.c: 80: strcpy(txt, "FAN SetTemp");
  8823  001948  C05E  F011         	movff	_txt,strcpy@to
  8824  00194C  C05F  F012         	movff	_txt+1,strcpy@to+1
  8825  001950  0EA0               	movlw	low STR_19
  8826  001952  6E13               	movwf	strcpy@from,c
  8827  001954  0EFF               	movlw	high STR_19
  8828  001956  6E14               	movwf	strcpy@from+1,c
  8829  001958  EC31  F024         	call	_strcpy	;wreg free
  8830                           
  8831                           ;Main_Screen.c: 81: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
  8832  00195C  0E78               	movlw	120
  8833  00195E  6E39               	movwf	drawtext@y,c
  8834  001960  C05E  F03A         	movff	_txt,drawtext@_text
  8835  001964  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8836  001968  0E00               	movlw	0
  8837  00196A  6E3D               	movwf	drawtext@color+1,c
  8838  00196C  0E1F               	movlw	31
  8839  00196E  6E3C               	movwf	drawtext@color,c
  8840  001970  0E00               	movlw	0
  8841  001972  6E3F               	movwf	drawtext@bg+1,c
  8842  001974  0E00               	movlw	0
  8843  001976  6E3E               	movwf	drawtext@bg,c
  8844  001978  0E01               	movlw	1
  8845  00197A  6E40               	movwf	drawtext@size,c
  8846  00197C  0E06               	movlw	6
  8847  00197E  ECDB  F01A         	call	_drawtext
  8848                           
  8849                           ;Main_Screen.c: 82: strcpy(txt, "Mode");
  8850  001982  C05E  F011         	movff	_txt,strcpy@to
  8851  001986  C05F  F012         	movff	_txt+1,strcpy@to+1
  8852  00198A  0EBD               	movlw	low (STR_17+6)
  8853  00198C  6E13               	movwf	strcpy@from,c
  8854  00198E  0EFF               	movlw	high (STR_17+6)
  8855  001990  6E14               	movwf	strcpy@from+1,c
  8856  001992  EC31  F024         	call	_strcpy	;wreg free
  8857                           
  8858                           ;Main_Screen.c: 83: drawtext(75, 120, txt, 0x001F , 0x0000, 1);
  8859  001996  0E78               	movlw	120
  8860  001998  6E39               	movwf	drawtext@y,c
  8861  00199A  C05E  F03A         	movff	_txt,drawtext@_text
  8862  00199E  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8863  0019A2  0E00               	movlw	0
  8864  0019A4  6E3D               	movwf	drawtext@color+1,c
  8865  0019A6  0E1F               	movlw	31
  8866  0019A8  6E3C               	movwf	drawtext@color,c
  8867  0019AA  0E00               	movlw	0
  8868  0019AC  6E3F               	movwf	drawtext@bg+1,c
  8869  0019AE  0E00               	movlw	0
  8870  0019B0  6E3E               	movwf	drawtext@bg,c
  8871  0019B2  0E01               	movlw	1
  8872  0019B4  6E40               	movwf	drawtext@size,c
  8873  0019B6  0E4B               	movlw	75
  8874  0019B8  ECDB  F01A         	call	_drawtext
  8875                           
  8876                           ;Main_Screen.c: 84: strcpy(txt, "SW");
  8877  0019BC  C05E  F011         	movff	_txt,strcpy@to
  8878  0019C0  C05F  F012         	movff	_txt+1,strcpy@to+1
  8879  0019C4  0EFB               	movlw	low STR_21
  8880  0019C6  6E13               	movwf	strcpy@from,c
  8881  0019C8  0EFF               	movlw	high STR_21
  8882  0019CA  6E14               	movwf	strcpy@from+1,c
  8883  0019CC  EC31  F024         	call	_strcpy	;wreg free
  8884                           
  8885                           ;Main_Screen.c: 85: drawtext(105, 120, txt, 0x001F , 0x0000, 1);
  8886  0019D0  0E78               	movlw	120
  8887  0019D2  6E39               	movwf	drawtext@y,c
  8888  0019D4  C05E  F03A         	movff	_txt,drawtext@_text
  8889  0019D8  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8890  0019DC  0E00               	movlw	0
  8891  0019DE  6E3D               	movwf	drawtext@color+1,c
  8892  0019E0  0E1F               	movlw	31
  8893  0019E2  6E3C               	movwf	drawtext@color,c
  8894  0019E4  0E00               	movlw	0
  8895  0019E6  6E3F               	movwf	drawtext@bg+1,c
  8896  0019E8  0E00               	movlw	0
  8897  0019EA  6E3E               	movwf	drawtext@bg,c
  8898  0019EC  0E01               	movlw	1
  8899  0019EE  6E40               	movwf	drawtext@size,c
  8900  0019F0  0E69               	movlw	105
  8901  0019F2  ECDB  F01A         	call	_drawtext
  8902                           
  8903                           ;Main_Screen.c: 86: strcpy(txt, "DC");
  8904  0019F6  C05E  F011         	movff	_txt,strcpy@to
  8905  0019FA  C05F  F012         	movff	_txt+1,strcpy@to+1
  8906  0019FE  0EF8               	movlw	low STR_22
  8907  001A00  6E13               	movwf	strcpy@from,c
  8908  001A02  0EFF               	movlw	high STR_22
  8909  001A04  6E14               	movwf	strcpy@from+1,c
  8910  001A06  EC31  F024         	call	_strcpy	;wreg free
  8911                           
  8912                           ;Main_Screen.c: 87: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  8913  001A0A  0E8C               	movlw	140
  8914  001A0C  6E39               	movwf	drawtext@y,c
  8915  001A0E  C05E  F03A         	movff	_txt,drawtext@_text
  8916  001A12  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8917  001A16  0EFF               	movlw	255
  8918  001A18  6E3D               	movwf	drawtext@color+1,c
  8919  001A1A  683C               	setf	drawtext@color,c
  8920  001A1C  0E00               	movlw	0
  8921  001A1E  6E3F               	movwf	drawtext@bg+1,c
  8922  001A20  0E00               	movlw	0
  8923  001A22  6E3E               	movwf	drawtext@bg,c
  8924  001A24  0E01               	movlw	1
  8925  001A26  6E40               	movwf	drawtext@size,c
  8926  001A28  0E0C               	movlw	12
  8927  001A2A  ECDB  F01A         	call	_drawtext
  8928                           
  8929                           ;Main_Screen.c: 88: strcpy(txt, "Volt");
  8930  001A2E  C05E  F011         	movff	_txt,strcpy@to
  8931  001A32  C05F  F012         	movff	_txt+1,strcpy@to+1
  8932  001A36  0EDC               	movlw	low STR_23
  8933  001A38  6E13               	movwf	strcpy@from,c
  8934  001A3A  0EFF               	movlw	high STR_23
  8935  001A3C  6E14               	movwf	strcpy@from+1,c
  8936  001A3E  EC31  F024         	call	_strcpy	;wreg free
  8937                           
  8938                           ;Main_Screen.c: 89: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
  8939  001A42  0E8C               	movlw	140
  8940  001A44  6E39               	movwf	drawtext@y,c
  8941  001A46  C05E  F03A         	movff	_txt,drawtext@_text
  8942  001A4A  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8943  001A4E  0EFF               	movlw	255
  8944  001A50  6E3D               	movwf	drawtext@color+1,c
  8945  001A52  683C               	setf	drawtext@color,c
  8946  001A54  0E00               	movlw	0
  8947  001A56  6E3F               	movwf	drawtext@bg+1,c
  8948  001A58  0E00               	movlw	0
  8949  001A5A  6E3E               	movwf	drawtext@bg,c
  8950  001A5C  0E01               	movlw	1
  8951  001A5E  6E40               	movwf	drawtext@size,c
  8952  001A60  0E32               	movlw	50
  8953  001A62  ECDB  F01A         	call	_drawtext
  8954                           
  8955                           ;Main_Screen.c: 90: strcpy(txt, "RPM");
  8956  001A66  C05E  F011         	movff	_txt,strcpy@to
  8957  001A6A  C05F  F012         	movff	_txt+1,strcpy@to+1
  8958  001A6E  0EF1               	movlw	low STR_24
  8959  001A70  6E13               	movwf	strcpy@from,c
  8960  001A72  0EFF               	movlw	high STR_24
  8961  001A74  6E14               	movwf	strcpy@from+1,c
  8962  001A76  EC31  F024         	call	_strcpy	;wreg free
  8963                           
  8964                           ;Main_Screen.c: 91: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  8965  001A7A  0E8C               	movlw	140
  8966  001A7C  6E39               	movwf	drawtext@y,c
  8967  001A7E  C05E  F03A         	movff	_txt,drawtext@_text
  8968  001A82  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  8969  001A86  0EFF               	movlw	255
  8970  001A88  6E3D               	movwf	drawtext@color+1,c
  8971  001A8A  683C               	setf	drawtext@color,c
  8972  001A8C  0E00               	movlw	0
  8973  001A8E  6E3F               	movwf	drawtext@bg+1,c
  8974  001A90  0E00               	movlw	0
  8975  001A92  6E3E               	movwf	drawtext@bg,c
  8976  001A94  0E01               	movlw	1
  8977  001A96  6E40               	movwf	drawtext@size,c
  8978  001A98  0E5F               	movlw	95
  8979  001A9A  ECDB  F01A         	call	_drawtext
  8980                           
  8981                           ;Main_Screen.c: 92: }
  8982  001A9E  D01E               	goto	l960
  8983  001AA0                     l9568:
  8984                           
  8985                           ;Main_Screen.c: 93: else
  8986                           ;Main_Screen.c: 94: {
  8987                           ;Main_Screen.c: 95: strcpy(txt, "SYSTEM OFF");
  8988  001AA0  C05E  F011         	movff	_txt,strcpy@to
  8989  001AA4  C05F  F012         	movff	_txt+1,strcpy@to+1
  8990  001AA8  0EAC               	movlw	low STR_25
  8991  001AAA  6E13               	movwf	strcpy@from,c
  8992  001AAC  0EFF               	movlw	high STR_25
  8993  001AAE  6E14               	movwf	strcpy@from+1,c
  8994  001AB0  EC31  F024         	call	_strcpy	;wreg free
  8995                           
  8996                           ;Main_Screen.c: 96: drawtext(5 , 80 , txt, 0xF81F, 0x0000, 2);
  8997  001AB4  0E50               	movlw	80
  8998  001AB6  6E39               	movwf	drawtext@y,c
  8999  001AB8  C05E  F03A         	movff	_txt,drawtext@_text
  9000  001ABC  C05F  F03B         	movff	_txt+1,drawtext@_text+1
  9001  001AC0  0EF8               	movlw	248
  9002  001AC2  6E3D               	movwf	drawtext@color+1,c
  9003  001AC4  0E1F               	movlw	31
  9004  001AC6  6E3C               	movwf	drawtext@color,c
  9005  001AC8  0E00               	movlw	0
  9006  001ACA  6E3F               	movwf	drawtext@bg+1,c
  9007  001ACC  0E00               	movlw	0
  9008  001ACE  6E3E               	movwf	drawtext@bg,c
  9009  001AD0  0E02               	movlw	2
  9010  001AD2  6E40               	movwf	drawtext@size,c
  9011  001AD4  0E05               	movlw	5
  9012  001AD6  ECDB  F01A         	call	_drawtext
  9013  001ADA  D000               	goto	l960
  9014  001ADC                     l960:
  9015  001ADC  0012               	return		;funcret
  9016  001ADE                     __end_of_Initialize_Screen:
  9017                           	opt stack 0
  9018                           tblptru	equ	0xFF8
  9019                           tblptrh	equ	0xFF7
  9020                           tblptrl	equ	0xFF6
  9021                           tablat	equ	0xFF5
  9022                           prodh	equ	0xFF4
  9023                           prodl	equ	0xFF3
  9024                           intcon2	equ	0xFF1
  9025                           intcon3	equ	0xFF0
  9026                           postinc0	equ	0xFEE
  9027                           wreg	equ	0xFE8
  9028                           postdec1	equ	0xFE5
  9029                           plusw1	equ	0xFE3
  9030                           fsr1l	equ	0xFE1
  9031                           postinc2	equ	0xFDE
  9032                           plusw2	equ	0xFDB
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function _strcpy *****************
  9038 ;; Defined at:
  9039 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  to              2   16[COMRAM] PTR unsigned char 
  9042 ;;		 -> NULL(0), Fan_SW_Txt(4), Fan_Mode_Txt(5), Fan_Timer_Mode_Txt(4), 
  9043 ;;  from            2   18[COMRAM] PTR const unsigned char 
  9044 ;;		 -> STR_46(5), STR_45(5), STR_44(12), STR_39(15), 
  9045 ;;		 -> STR_38(12), STR_33(4), STR_32(4), STR_31(5), 
  9046 ;;		 -> STR_30(5), STR_29(4), STR_28(4), STR_27(4), 
  9047 ;;		 -> STR_26(4), STR_25(11), STR_24(4), STR_23(5), 
  9048 ;;		 -> STR_22(3), STR_21(3), STR_20(5), STR_19(12), 
  9049 ;;		 -> STR_18(11), STR_17(11), STR_16(5), STR_15(5), 
  9050 ;;		 -> STR_14(2), STR_13(3), STR_12(13), 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  cp              2   20[COMRAM] PTR unsigned char 
  9053 ;;		 -> NULL(0), Fan_SW_Txt(4), Fan_Mode_Txt(5), Fan_Timer_Mode_Txt(4), 
  9054 ;; Return value:  Size  Location     Type
  9055 ;;                  2   16[COMRAM] PTR unsigned char 
  9056 ;; Registers used:
  9057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/0
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9063 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;Total ram usage:        6 bytes
  9068 ;; Hardware stack levels used:    1
  9069 ;; Hardware stack levels required when called:    3
  9070 ;; This function calls:
  9071 ;;		Nothing
  9072 ;; This function is called by:
  9073 ;;		_Initialize_Screen
  9074 ;;		_Update_Screen
  9075 ;;		_Initialize_Setup_Fan_Screen
  9076 ;;		_Initialize_Setup_Time_Screen
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080                           	psect	text31
  9081  004862                     __ptext31:
  9082                           	opt stack 0
  9083  004862                     _strcpy:
  9084                           	opt stack 26
  9085                           
  9086                           ;incstack = 0
  9087  004862  C011  F015         	movff	strcpy@to,strcpy@cp
  9088  004866  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  9089  00486A  D005               	goto	l6556
  9090  00486C                     l6554:
  9091  00486C  4A15               	infsnz	strcpy@cp,f,c
  9092  00486E  2A16               	incf	strcpy@cp+1,f,c
  9093  004870  4A13               	infsnz	strcpy@from,f,c
  9094  004872  2A14               	incf	strcpy@from+1,f,c
  9095  004874  D000               	goto	l6556
  9096  004876                     l6556:
  9097  004876  C013  FFF6         	movff	strcpy@from,tblptrl
  9098  00487A  C014  FFF7         	movff	strcpy@from+1,tblptrh
  9099  00487E                     	if	0	;tblptru may be non-zero
  9100  00487E                     	endif
  9101  00487E                     	if	0	;tblptru may be non-zero
  9102  00487E                     	endif
  9103  00487E  C015  FFD9         	movff	strcpy@cp,fsr2l
  9104  004882  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  9105  004886  0008               	tblrd		*
  9106  004888  CFF5 FFDF          	movff	tablat,indf2
  9107  00488C  50DF               	movf	indf2,w,c
  9108  00488E  A4D8               	btfss	status,2,c
  9109  004890  D7ED               	goto	l6554
  9110                           
  9111                           ;	Return value of _strcpy is never used
  9112  004892  0012               	return		;funcret
  9113  004894                     __end_of_strcpy:
  9114                           	opt stack 0
  9115                           tblptru	equ	0xFF8
  9116                           tblptrh	equ	0xFF7
  9117                           tblptrl	equ	0xFF6
  9118                           tablat	equ	0xFF5
  9119                           prodh	equ	0xFF4
  9120                           prodl	equ	0xFF3
  9121                           intcon2	equ	0xFF1
  9122                           intcon3	equ	0xFF0
  9123                           postinc0	equ	0xFEE
  9124                           wreg	equ	0xFE8
  9125                           postdec1	equ	0xFE5
  9126                           plusw1	equ	0xFE3
  9127                           fsr1l	equ	0xFE1
  9128                           indf2	equ	0xFDF
  9129                           postinc2	equ	0xFDE
  9130                           plusw2	equ	0xFDB
  9131                           fsr2h	equ	0xFDA
  9132                           fsr2l	equ	0xFD9
  9133                           status	equ	0xFD8
  9134                           
  9135 ;; *************** function _fillScreen *****************
  9136 ;; Defined at:
  9137 ;;		line 567 in file "ST7735_TFT.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;  color           2   35[COMRAM] unsigned int 
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;		None
  9142 ;; Return value:  Size  Location     Type
  9143 ;;		None               void
  9144 ;; Registers used:
  9145 ;;		wreg, status,2, status,0, cstack
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9151 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;Total ram usage:        2 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    7
  9158 ;; This function calls:
  9159 ;;		_fillRectangle
  9160 ;; This function is called by:
  9161 ;;		_Initialize_Screen
  9162 ;;		_Initialize_Setup_Fan_Screen
  9163 ;;		_Initialize_Setup_Time_Screen
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           	psect	text32
  9168  004B94                     __ptext32:
  9169                           	opt stack 0
  9170  004B94                     _fillScreen:
  9171                           	opt stack 21
  9172                           
  9173                           ;ST7735_TFT.c: 569: fillRectangle(0, 0, 128, 160, color);
  9174                           
  9175                           ;incstack = 0
  9176  004B94  0E00               	movlw	0
  9177  004B96  6E18               	movwf	fillRectangle@y,c
  9178  004B98  0E80               	movlw	128
  9179  004B9A  6E19               	movwf	fillRectangle@w,c
  9180  004B9C  0EA0               	movlw	160
  9181  004B9E  6E1A               	movwf	fillRectangle@h,c
  9182  004BA0  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  9183  004BA4  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  9184  004BA8  0E00               	movlw	0
  9185  004BAA  ECBD  F01B         	call	_fillRectangle
  9186  004BAE  0012               	return		;funcret
  9187  004BB0                     __end_of_fillScreen:
  9188                           	opt stack 0
  9189                           tblptru	equ	0xFF8
  9190                           tblptrh	equ	0xFF7
  9191                           tblptrl	equ	0xFF6
  9192                           tablat	equ	0xFF5
  9193                           prodh	equ	0xFF4
  9194                           prodl	equ	0xFF3
  9195                           intcon2	equ	0xFF1
  9196                           intcon3	equ	0xFF0
  9197                           postinc0	equ	0xFEE
  9198                           wreg	equ	0xFE8
  9199                           postdec1	equ	0xFE5
  9200                           plusw1	equ	0xFE3
  9201                           fsr1l	equ	0xFE1
  9202                           indf2	equ	0xFDF
  9203                           postinc2	equ	0xFDE
  9204                           plusw2	equ	0xFDB
  9205                           fsr2h	equ	0xFDA
  9206                           fsr2l	equ	0xFD9
  9207                           status	equ	0xFD8
  9208                           
  9209 ;; *************** function _fillRectangle *****************
  9210 ;; Defined at:
  9211 ;;		line 451 in file "ST7735_TFT.c"
  9212 ;; Parameters:    Size  Location     Type
  9213 ;;  x               1    wreg     unsigned char 
  9214 ;;  y               1   23[COMRAM] unsigned char 
  9215 ;;  w               1   24[COMRAM] unsigned char 
  9216 ;;  h               1   25[COMRAM] unsigned char 
  9217 ;;  color           2   26[COMRAM] unsigned int 
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;  x               1   34[COMRAM] unsigned char 
  9220 ;;  lo              1   33[COMRAM] unsigned char 
  9221 ;;  hi              1   32[COMRAM] unsigned char 
  9222 ;; Return value:  Size  Location     Type
  9223 ;;		None               void
  9224 ;; Registers used:
  9225 ;;		wreg, status,2, status,0, cstack
  9226 ;; Tracked objects:
  9227 ;;		On entry : 0/0
  9228 ;;		On exit  : 0/0
  9229 ;;		Unchanged: 0/0
  9230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9231 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;Total ram usage:       12 bytes
  9236 ;; Hardware stack levels used:    1
  9237 ;; Hardware stack levels required when called:    6
  9238 ;; This function calls:
  9239 ;;		_setAddrWindow
  9240 ;;		_spiwrite
  9241 ;; This function is called by:
  9242 ;;		_fillScreen
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           	psect	text33
  9247  00377A                     __ptext33:
  9248                           	opt stack 0
  9249  00377A                     _fillRectangle:
  9250                           	opt stack 21
  9251                           
  9252                           ;incstack = 0
  9253                           ;fillRectangle@x stored from wreg
  9254  00377A  6E23               	movwf	fillRectangle@x,c
  9255                           
  9256                           ;ST7735_TFT.c: 453: unsigned char hi, lo;
  9257                           ;ST7735_TFT.c: 454: if((x >= 128) || (y >= 160))
  9258  00377C  0E80               	movlw	128
  9259  00377E  6023               	cpfslt	fillRectangle@x,c
  9260  003780  D069               	goto	l311
  9261  003782  0E9F               	movlw	159
  9262  003784  6418               	cpfsgt	fillRectangle@y,c
  9263  003786  D001               	goto	l5764
  9264                           
  9265                           ;ST7735_TFT.c: 455: return;
  9266  003788  D065               	goto	l311
  9267  00378A                     l5764:
  9268                           
  9269                           ;ST7735_TFT.c: 456: if((x + w - 1) >= 128)
  9270  00378A  0EFF               	movlw	255
  9271  00378C  6E1D               	movwf	??_fillRectangle& (0+255),c
  9272  00378E  0EFF               	movlw	255
  9273  003790  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9274  003792  5019               	movf	fillRectangle@w,w,c
  9275  003794  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  9276  003798  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9277  00379A  261F               	addwf	??_fillRectangle+2,f,c
  9278  00379C  0E00               	movlw	0
  9279  00379E  2220               	addwfc	??_fillRectangle+3,f,c
  9280  0037A0  501D               	movf	??_fillRectangle,w,c
  9281  0037A2  261F               	addwf	??_fillRectangle+2,f,c
  9282  0037A4  501E               	movf	??_fillRectangle+1,w,c
  9283  0037A6  2220               	addwfc	??_fillRectangle+3,f,c
  9284  0037A8  BE20               	btfsc	??_fillRectangle+3,7,c
  9285  0037AA  D00A               	goto	l312
  9286  0037AC  5020               	movf	??_fillRectangle+3,w,c
  9287  0037AE  E104               	bnz	u4060
  9288  0037B0  0E80               	movlw	128
  9289  0037B2  5C1F               	subwf	??_fillRectangle+2,w,c
  9290  0037B4  A0D8               	btfss	status,0,c
  9291  0037B6  D004               	goto	l312
  9292  0037B8                     u4060:
  9293                           
  9294                           ;ST7735_TFT.c: 457: w = 128 - x;
  9295  0037B8  5023               	movf	fillRectangle@x,w,c
  9296  0037BA  0800               	sublw	0
  9297  0037BC  0F80               	addlw	128
  9298  0037BE  6E19               	movwf	fillRectangle@w,c
  9299  0037C0                     l312:
  9300                           
  9301                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  9302  0037C0  0EFF               	movlw	255
  9303  0037C2  6E1D               	movwf	??_fillRectangle& (0+255),c
  9304  0037C4  0EFF               	movlw	255
  9305  0037C6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9306  0037C8  501A               	movf	fillRectangle@h,w,c
  9307  0037CA  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  9308  0037CE  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9309  0037D0  261F               	addwf	??_fillRectangle+2,f,c
  9310  0037D2  0E00               	movlw	0
  9311  0037D4  2220               	addwfc	??_fillRectangle+3,f,c
  9312  0037D6  501D               	movf	??_fillRectangle,w,c
  9313  0037D8  261F               	addwf	??_fillRectangle+2,f,c
  9314  0037DA  501E               	movf	??_fillRectangle+1,w,c
  9315  0037DC  2220               	addwfc	??_fillRectangle+3,f,c
  9316  0037DE  BE20               	btfsc	??_fillRectangle+3,7,c
  9317  0037E0  D00B               	goto	l5770
  9318  0037E2  5020               	movf	??_fillRectangle+3,w,c
  9319  0037E4  E104               	bnz	u4070
  9320  0037E6  0EA0               	movlw	160
  9321  0037E8  5C1F               	subwf	??_fillRectangle+2,w,c
  9322  0037EA  A0D8               	btfss	status,0,c
  9323  0037EC  D005               	goto	l5770
  9324  0037EE                     u4070:
  9325                           
  9326                           ;ST7735_TFT.c: 459: h = 160 - y;
  9327  0037EE  5018               	movf	fillRectangle@y,w,c
  9328  0037F0  0800               	sublw	0
  9329  0037F2  0FA0               	addlw	160
  9330  0037F4  6E1A               	movwf	fillRectangle@h,c
  9331  0037F6  D000               	goto	l5770
  9332  0037F8                     l5770:
  9333                           
  9334                           ;ST7735_TFT.c: 460: setAddrWindow(x, y, x+w-1, y+h-1);
  9335  0037F8  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  9336  0037FC  5023               	movf	fillRectangle@x,w,c
  9337  0037FE  2419               	addwf	fillRectangle@w,w,c
  9338  003800  6E1D               	movwf	??_fillRectangle& (0+255),c
  9339  003802  041D               	decf	??_fillRectangle,w,c
  9340  003804  6E15               	movwf	setAddrWindow@x1,c
  9341  003806  5018               	movf	fillRectangle@y,w,c
  9342  003808  241A               	addwf	fillRectangle@h,w,c
  9343  00380A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9344  00380C  041E               	decf	??_fillRectangle+1,w,c
  9345  00380E  6E16               	movwf	setAddrWindow@y1,c
  9346  003810  5023               	movf	fillRectangle@x,w,c
  9347  003812  EC48  F022         	call	_setAddrWindow
  9348                           
  9349                           ;ST7735_TFT.c: 461: hi = color >> 8; lo = color;
  9350  003816  501C               	movf	fillRectangle@color+1,w,c
  9351  003818  6E21               	movwf	fillRectangle@hi,c
  9352  00381A  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  9353                           
  9354                           ;ST7735_TFT.c: 462: PORTDbits.RD7 = 1;
  9355  00381E  8E83               	bsf	3971,7,c	;volatile
  9356                           
  9357                           ;ST7735_TFT.c: 463: PORTCbits.RC4 = 0;
  9358  003820  9882               	bcf	3970,4,c	;volatile
  9359                           
  9360                           ;ST7735_TFT.c: 465: for(y=h; y>0; y--) {
  9361  003822  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  9362  003826                     l5782:
  9363  003826  5018               	movf	fillRectangle@y,w,c
  9364  003828  B4D8               	btfsc	status,2,c
  9365  00382A  D013               	goto	l315
  9366  00382C  D001               	goto	l314
  9367  00382E  D011               	goto	l315
  9368  003830                     l314:
  9369                           
  9370                           ;ST7735_TFT.c: 466: for(x = w; x > 0; x--) {
  9371  003830  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  9372  003834                     l5786:
  9373  003834  5023               	movf	fillRectangle@x,w,c
  9374  003836  B4D8               	btfsc	status,2,c
  9375  003838  D00A               	goto	l5796
  9376  00383A  D001               	goto	l5790
  9377  00383C  D008               	goto	l5796
  9378  00383E                     l5790:
  9379                           
  9380                           ;ST7735_TFT.c: 467: spiwrite(hi);
  9381  00383E  5021               	movf	fillRectangle@hi,w,c
  9382  003840  EC6F  F026         	call	_spiwrite
  9383                           
  9384                           ;ST7735_TFT.c: 468: spiwrite(lo);
  9385  003844  5022               	movf	fillRectangle@lo,w,c
  9386  003846  EC6F  F026         	call	_spiwrite
  9387  00384A  0623               	decf	fillRectangle@x,f,c
  9388  00384C  D7F3               	goto	l5786
  9389  00384E                     l5796:
  9390  00384E  0618               	decf	fillRectangle@y,f,c
  9391  003850  D7EA               	goto	l5782
  9392  003852                     l315:
  9393                           
  9394                           ;ST7735_TFT.c: 469: }
  9395                           ;ST7735_TFT.c: 470: }
  9396                           ;ST7735_TFT.c: 471: PORTCbits.RC4 = 1;
  9397  003852  8882               	bsf	3970,4,c	;volatile
  9398  003854                     l311:
  9399  003854  0012               	return		;funcret
  9400  003856                     __end_of_fillRectangle:
  9401                           	opt stack 0
  9402                           tblptru	equ	0xFF8
  9403                           tblptrh	equ	0xFF7
  9404                           tblptrl	equ	0xFF6
  9405                           tablat	equ	0xFF5
  9406                           prodh	equ	0xFF4
  9407                           prodl	equ	0xFF3
  9408                           intcon2	equ	0xFF1
  9409                           intcon3	equ	0xFF0
  9410                           postinc0	equ	0xFEE
  9411                           wreg	equ	0xFE8
  9412                           postdec1	equ	0xFE5
  9413                           plusw1	equ	0xFE3
  9414                           fsr1l	equ	0xFE1
  9415                           indf2	equ	0xFDF
  9416                           postinc2	equ	0xFDE
  9417                           plusw2	equ	0xFDB
  9418                           fsr2h	equ	0xFDA
  9419                           fsr2l	equ	0xFD9
  9420                           status	equ	0xFD8
  9421                           
  9422 ;; *************** function _TFT_GreenTab_Initialize *****************
  9423 ;; Defined at:
  9424 ;;		line 592 in file "ST7735_TFT.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;		None
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;		None
  9429 ;; Return value:  Size  Location     Type
  9430 ;;		None               void
  9431 ;; Registers used:
  9432 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9442 ;;Total ram usage:        0 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    6
  9445 ;; This function calls:
  9446 ;;		_Rcmd1
  9447 ;;		_Rcmd2red
  9448 ;;		_Rcmd3
  9449 ;;		_write_command
  9450 ;;		_write_data
  9451 ;; This function is called by:
  9452 ;;		_Initialize_Screen
  9453 ;;		_Initialize_Setup_Fan_Screen
  9454 ;;		_Initialize_Setup_Time_Screen
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           	psect	text34
  9459  0048F4                     __ptext34:
  9460                           	opt stack 0
  9461  0048F4                     _TFT_GreenTab_Initialize:
  9462                           	opt stack 22
  9463                           
  9464                           ;ST7735_TFT.c: 594: PORTCbits.RC4 = 1;
  9465                           
  9466                           ;incstack = 0
  9467  0048F4  8882               	bsf	3970,4,c	;volatile
  9468                           
  9469                           ;ST7735_TFT.c: 595: PORTDbits.RD7 = 0;
  9470  0048F6  9E83               	bcf	3971,7,c	;volatile
  9471                           
  9472                           ;ST7735_TFT.c: 597: SSPSTAT=0x80;
  9473  0048F8  0E80               	movlw	128
  9474  0048FA  6EC7               	movwf	4039,c	;volatile
  9475                           
  9476                           ;ST7735_TFT.c: 598: SSPCON1=0x30;
  9477  0048FC  0E30               	movlw	48
  9478  0048FE  6EC6               	movwf	4038,c	;volatile
  9479                           
  9480                           ;ST7735_TFT.c: 601: Rcmd1();
  9481  004900  EC69  F017         	call	_Rcmd1	;wreg free
  9482                           
  9483                           ;ST7735_TFT.c: 602: Rcmd2red();
  9484  004904  EC79  F023         	call	_Rcmd2red	;wreg free
  9485                           
  9486                           ;ST7735_TFT.c: 603: Rcmd3();
  9487  004908  EC7A  F019         	call	_Rcmd3	;wreg free
  9488                           
  9489                           ;ST7735_TFT.c: 604: write_command(0x36);
  9490  00490C  0E36               	movlw	54
  9491  00490E  ECD2  F026         	call	_write_command
  9492                           
  9493                           ;ST7735_TFT.c: 605: write_data(0xC0);
  9494  004912  0EC0               	movlw	192
  9495  004914  ECCA  F026         	call	_write_data
  9496                           
  9497                           ;ST7735_TFT.c: 606: _tft_type = 1;
  9498  004918  0E01               	movlw	1
  9499  00491A  0100               	movlb	0	; () banked
  9500  00491C  6FCC               	movwf	__tft_type& (0+255),b
  9501                           
  9502                           ; BSR set to: 0
  9503  00491E  0012               	return		;funcret
  9504  004920                     __end_of_TFT_GreenTab_Initialize:
  9505                           	opt stack 0
  9506                           tblptru	equ	0xFF8
  9507                           tblptrh	equ	0xFF7
  9508                           tblptrl	equ	0xFF6
  9509                           tablat	equ	0xFF5
  9510                           prodh	equ	0xFF4
  9511                           prodl	equ	0xFF3
  9512                           intcon2	equ	0xFF1
  9513                           intcon3	equ	0xFF0
  9514                           postinc0	equ	0xFEE
  9515                           wreg	equ	0xFE8
  9516                           postdec1	equ	0xFE5
  9517                           plusw1	equ	0xFE3
  9518                           fsr1l	equ	0xFE1
  9519                           indf2	equ	0xFDF
  9520                           postinc2	equ	0xFDE
  9521                           plusw2	equ	0xFDB
  9522                           fsr2h	equ	0xFDA
  9523                           fsr2l	equ	0xFD9
  9524                           status	equ	0xFD8
  9525                           
  9526 ;; *************** function _Rcmd3 *****************
  9527 ;; Defined at:
  9528 ;;		line 286 in file "ST7735_TFT.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;		None
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;		None
  9533 ;; Return value:  Size  Location     Type
  9534 ;;		None               void
  9535 ;; Registers used:
  9536 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9546 ;;Total ram usage:        0 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    5
  9549 ;; This function calls:
  9550 ;;		_delay_ms
  9551 ;;		_write_command
  9552 ;;		_write_data
  9553 ;; This function is called by:
  9554 ;;		_TFT_GreenTab_Initialize
  9555 ;;		_TFT_BlackTab_Initialize
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           	psect	text35
  9560  0032F4                     __ptext35:
  9561                           	opt stack 0
  9562  0032F4                     _Rcmd3:
  9563                           	opt stack 22
  9564                           
  9565                           ;ST7735_TFT.c: 288: write_command(0xE0);
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;incstack = 0
  9569  0032F4  0EE0               	movlw	224
  9570  0032F6  ECD2  F026         	call	_write_command
  9571                           
  9572                           ;ST7735_TFT.c: 289: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  9573  0032FA  0E02               	movlw	2
  9574  0032FC  ECCA  F026         	call	_write_data
  9575  003300  0E1C               	movlw	28
  9576  003302  ECCA  F026         	call	_write_data
  9577  003306  0E07               	movlw	7
  9578  003308  ECCA  F026         	call	_write_data
  9579  00330C  0E12               	movlw	18
  9580  00330E  ECCA  F026         	call	_write_data
  9581                           
  9582                           ;ST7735_TFT.c: 290: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  9583  003312  0E37               	movlw	55
  9584  003314  ECCA  F026         	call	_write_data
  9585  003318  0E32               	movlw	50
  9586  00331A  ECCA  F026         	call	_write_data
  9587  00331E  0E29               	movlw	41
  9588  003320  ECCA  F026         	call	_write_data
  9589  003324  0E2D               	movlw	45
  9590  003326  ECCA  F026         	call	_write_data
  9591                           
  9592                           ;ST7735_TFT.c: 291: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  9593  00332A  0E29               	movlw	41
  9594  00332C  ECCA  F026         	call	_write_data
  9595  003330  0E25               	movlw	37
  9596  003332  ECCA  F026         	call	_write_data
  9597  003336  0E2B               	movlw	43
  9598  003338  ECCA  F026         	call	_write_data
  9599  00333C  0E39               	movlw	57
  9600  00333E  ECCA  F026         	call	_write_data
  9601                           
  9602                           ;ST7735_TFT.c: 292: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  9603  003342  0E00               	movlw	0
  9604  003344  ECCA  F026         	call	_write_data
  9605  003348  0E01               	movlw	1
  9606  00334A  ECCA  F026         	call	_write_data
  9607  00334E  0E03               	movlw	3
  9608  003350  ECCA  F026         	call	_write_data
  9609  003354  0E10               	movlw	16
  9610  003356  ECCA  F026         	call	_write_data
  9611                           
  9612                           ;ST7735_TFT.c: 293: write_command(0xE1);
  9613  00335A  0EE1               	movlw	225
  9614  00335C  ECD2  F026         	call	_write_command
  9615                           
  9616                           ;ST7735_TFT.c: 294: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  9617  003360  0E03               	movlw	3
  9618  003362  ECCA  F026         	call	_write_data
  9619  003366  0E1D               	movlw	29
  9620  003368  ECCA  F026         	call	_write_data
  9621  00336C  0E07               	movlw	7
  9622  00336E  ECCA  F026         	call	_write_data
  9623  003372  0E06               	movlw	6
  9624  003374  ECCA  F026         	call	_write_data
  9625                           
  9626                           ;ST7735_TFT.c: 295: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  9627  003378  0E2E               	movlw	46
  9628  00337A  ECCA  F026         	call	_write_data
  9629  00337E  0E2C               	movlw	44
  9630  003380  ECCA  F026         	call	_write_data
  9631  003384  0E29               	movlw	41
  9632  003386  ECCA  F026         	call	_write_data
  9633  00338A  0E2D               	movlw	45
  9634  00338C  ECCA  F026         	call	_write_data
  9635                           
  9636                           ;ST7735_TFT.c: 296: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  9637  003390  0E2E               	movlw	46
  9638  003392  ECCA  F026         	call	_write_data
  9639  003396  0E2E               	movlw	46
  9640  003398  ECCA  F026         	call	_write_data
  9641  00339C  0E37               	movlw	55
  9642  00339E  ECCA  F026         	call	_write_data
  9643  0033A2  0E3F               	movlw	63
  9644  0033A4  ECCA  F026         	call	_write_data
  9645                           
  9646                           ;ST7735_TFT.c: 297: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  9647  0033A8  0E00               	movlw	0
  9648  0033AA  ECCA  F026         	call	_write_data
  9649  0033AE  0E00               	movlw	0
  9650  0033B0  ECCA  F026         	call	_write_data
  9651  0033B4  0E02               	movlw	2
  9652  0033B6  ECCA  F026         	call	_write_data
  9653  0033BA  0E10               	movlw	16
  9654  0033BC  ECCA  F026         	call	_write_data
  9655                           
  9656                           ;ST7735_TFT.c: 298: write_command(0x13);
  9657  0033C0  0E13               	movlw	19
  9658  0033C2  ECD2  F026         	call	_write_command
  9659                           
  9660                           ;ST7735_TFT.c: 299: delay_ms(10);
  9661  0033C6  0E00               	movlw	0
  9662  0033C8  6E18               	movwf	delay_ms@ms+1,c
  9663  0033CA  0E0A               	movlw	10
  9664  0033CC  6E17               	movwf	delay_ms@ms,c
  9665  0033CE  EC98  F023         	call	_delay_ms	;wreg free
  9666                           
  9667                           ;ST7735_TFT.c: 300: write_command(0x29);
  9668  0033D2  0E29               	movlw	41
  9669  0033D4  ECD2  F026         	call	_write_command
  9670                           
  9671                           ;ST7735_TFT.c: 301: delay_ms(100);
  9672  0033D8  0E00               	movlw	0
  9673  0033DA  6E18               	movwf	delay_ms@ms+1,c
  9674  0033DC  0E64               	movlw	100
  9675  0033DE  6E17               	movwf	delay_ms@ms,c
  9676  0033E0  EC98  F023         	call	_delay_ms	;wreg free
  9677  0033E4  0012               	return		;funcret
  9678  0033E6                     __end_of_Rcmd3:
  9679                           	opt stack 0
  9680                           tblptru	equ	0xFF8
  9681                           tblptrh	equ	0xFF7
  9682                           tblptrl	equ	0xFF6
  9683                           tablat	equ	0xFF5
  9684                           prodh	equ	0xFF4
  9685                           prodl	equ	0xFF3
  9686                           intcon2	equ	0xFF1
  9687                           intcon3	equ	0xFF0
  9688                           postinc0	equ	0xFEE
  9689                           wreg	equ	0xFE8
  9690                           postdec1	equ	0xFE5
  9691                           plusw1	equ	0xFE3
  9692                           fsr1l	equ	0xFE1
  9693                           indf2	equ	0xFDF
  9694                           postinc2	equ	0xFDE
  9695                           plusw2	equ	0xFDB
  9696                           fsr2h	equ	0xFDA
  9697                           fsr2l	equ	0xFD9
  9698                           status	equ	0xFD8
  9699                           
  9700 ;; *************** function _Rcmd2red *****************
  9701 ;; Defined at:
  9702 ;;		line 276 in file "ST7735_TFT.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;		None
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;		None
  9707 ;; Return value:  Size  Location     Type
  9708 ;;		None               void
  9709 ;; Registers used:
  9710 ;;		wreg, status,2, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : 0/0
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9720 ;;Total ram usage:        0 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    5
  9723 ;; This function calls:
  9724 ;;		_write_command
  9725 ;;		_write_data
  9726 ;; This function is called by:
  9727 ;;		_TFT_GreenTab_Initialize
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           	psect	text36
  9732  0046F2                     __ptext36:
  9733                           	opt stack 0
  9734  0046F2                     _Rcmd2red:
  9735                           	opt stack 22
  9736                           
  9737                           ;ST7735_TFT.c: 278: write_command(0x2A);
  9738                           
  9739                           ;incstack = 0
  9740  0046F2  0E2A               	movlw	42
  9741  0046F4  ECD2  F026         	call	_write_command
  9742                           
  9743                           ;ST7735_TFT.c: 279: write_data(0x00); write_data(0x00);
  9744  0046F8  0E00               	movlw	0
  9745  0046FA  ECCA  F026         	call	_write_data
  9746  0046FE  0E00               	movlw	0
  9747  004700  ECCA  F026         	call	_write_data
  9748                           
  9749                           ;ST7735_TFT.c: 280: write_data(0x00); write_data(0x7F);
  9750  004704  0E00               	movlw	0
  9751  004706  ECCA  F026         	call	_write_data
  9752  00470A  0E7F               	movlw	127
  9753  00470C  ECCA  F026         	call	_write_data
  9754                           
  9755                           ;ST7735_TFT.c: 281: write_command(0x2B);
  9756  004710  0E2B               	movlw	43
  9757  004712  ECD2  F026         	call	_write_command
  9758                           
  9759                           ;ST7735_TFT.c: 282: write_data(0x00); write_data(0x00);
  9760  004716  0E00               	movlw	0
  9761  004718  ECCA  F026         	call	_write_data
  9762  00471C  0E00               	movlw	0
  9763  00471E  ECCA  F026         	call	_write_data
  9764                           
  9765                           ;ST7735_TFT.c: 283: write_data(0x00); write_data(0x9F);
  9766  004722  0E00               	movlw	0
  9767  004724  ECCA  F026         	call	_write_data
  9768  004728  0E9F               	movlw	159
  9769  00472A  ECCA  F026         	call	_write_data
  9770  00472E  0012               	return		;funcret
  9771  004730                     __end_of_Rcmd2red:
  9772                           	opt stack 0
  9773                           tblptru	equ	0xFF8
  9774                           tblptrh	equ	0xFF7
  9775                           tblptrl	equ	0xFF6
  9776                           tablat	equ	0xFF5
  9777                           prodh	equ	0xFF4
  9778                           prodl	equ	0xFF3
  9779                           intcon2	equ	0xFF1
  9780                           intcon3	equ	0xFF0
  9781                           postinc0	equ	0xFEE
  9782                           wreg	equ	0xFE8
  9783                           postdec1	equ	0xFE5
  9784                           plusw1	equ	0xFE3
  9785                           fsr1l	equ	0xFE1
  9786                           indf2	equ	0xFDF
  9787                           postinc2	equ	0xFDE
  9788                           plusw2	equ	0xFDB
  9789                           fsr2h	equ	0xFDA
  9790                           fsr2l	equ	0xFD9
  9791                           status	equ	0xFD8
  9792                           
  9793 ;; *************** function _Rcmd1 *****************
  9794 ;; Defined at:
  9795 ;;		line 229 in file "ST7735_TFT.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;		None
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;		None
  9800 ;; Return value:  Size  Location     Type
  9801 ;;		None               void
  9802 ;; Registers used:
  9803 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9804 ;; Tracked objects:
  9805 ;;		On entry : 0/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;Total ram usage:        0 bytes
  9814 ;; Hardware stack levels used:    1
  9815 ;; Hardware stack levels required when called:    5
  9816 ;; This function calls:
  9817 ;;		_delay_ms
  9818 ;;		_write_command
  9819 ;;		_write_data
  9820 ;; This function is called by:
  9821 ;;		_TFT_GreenTab_Initialize
  9822 ;;		_TFT_BlackTab_Initialize
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           	psect	text37
  9827  002ED2                     __ptext37:
  9828                           	opt stack 0
  9829  002ED2                     _Rcmd1:
  9830                           	opt stack 22
  9831                           
  9832                           ;ST7735_TFT.c: 231: write_command(0x01);
  9833                           
  9834                           ;incstack = 0
  9835  002ED2  0E01               	movlw	1
  9836  002ED4  ECD2  F026         	call	_write_command
  9837                           
  9838                           ;ST7735_TFT.c: 232: delay_ms(150);
  9839  002ED8  0E00               	movlw	0
  9840  002EDA  6E18               	movwf	delay_ms@ms+1,c
  9841  002EDC  0E96               	movlw	150
  9842  002EDE  6E17               	movwf	delay_ms@ms,c
  9843  002EE0  EC98  F023         	call	_delay_ms	;wreg free
  9844                           
  9845                           ;ST7735_TFT.c: 233: write_command(0x11);
  9846  002EE4  0E11               	movlw	17
  9847  002EE6  ECD2  F026         	call	_write_command
  9848                           
  9849                           ;ST7735_TFT.c: 234: delay_ms(500);
  9850  002EEA  0E01               	movlw	1
  9851  002EEC  6E18               	movwf	delay_ms@ms+1,c
  9852  002EEE  0EF4               	movlw	244
  9853  002EF0  6E17               	movwf	delay_ms@ms,c
  9854  002EF2  EC98  F023         	call	_delay_ms	;wreg free
  9855                           
  9856                           ;ST7735_TFT.c: 235: write_command(0xB1);
  9857  002EF6  0EB1               	movlw	177
  9858  002EF8  ECD2  F026         	call	_write_command
  9859                           
  9860                           ;ST7735_TFT.c: 236: write_data(0x01);
  9861  002EFC  0E01               	movlw	1
  9862  002EFE  ECCA  F026         	call	_write_data
  9863                           
  9864                           ;ST7735_TFT.c: 237: write_data(0x2C);
  9865  002F02  0E2C               	movlw	44
  9866  002F04  ECCA  F026         	call	_write_data
  9867                           
  9868                           ;ST7735_TFT.c: 238: write_data(0x2D);
  9869  002F08  0E2D               	movlw	45
  9870  002F0A  ECCA  F026         	call	_write_data
  9871                           
  9872                           ;ST7735_TFT.c: 239: write_command(0xB2);
  9873  002F0E  0EB2               	movlw	178
  9874  002F10  ECD2  F026         	call	_write_command
  9875                           
  9876                           ;ST7735_TFT.c: 240: write_data(0x01);
  9877  002F14  0E01               	movlw	1
  9878  002F16  ECCA  F026         	call	_write_data
  9879                           
  9880                           ;ST7735_TFT.c: 241: write_data(0x2C);
  9881  002F1A  0E2C               	movlw	44
  9882  002F1C  ECCA  F026         	call	_write_data
  9883                           
  9884                           ;ST7735_TFT.c: 242: write_data(0x2D);
  9885  002F20  0E2D               	movlw	45
  9886  002F22  ECCA  F026         	call	_write_data
  9887                           
  9888                           ;ST7735_TFT.c: 243: write_command(0xB3);
  9889  002F26  0EB3               	movlw	179
  9890  002F28  ECD2  F026         	call	_write_command
  9891                           
  9892                           ;ST7735_TFT.c: 244: write_data(0x01);
  9893  002F2C  0E01               	movlw	1
  9894  002F2E  ECCA  F026         	call	_write_data
  9895                           
  9896                           ;ST7735_TFT.c: 245: write_data(0x2C);
  9897  002F32  0E2C               	movlw	44
  9898  002F34  ECCA  F026         	call	_write_data
  9899                           
  9900                           ;ST7735_TFT.c: 246: write_data(0x2D);
  9901  002F38  0E2D               	movlw	45
  9902  002F3A  ECCA  F026         	call	_write_data
  9903                           
  9904                           ;ST7735_TFT.c: 247: write_data(0x01);
  9905  002F3E  0E01               	movlw	1
  9906  002F40  ECCA  F026         	call	_write_data
  9907                           
  9908                           ;ST7735_TFT.c: 248: write_data(0x2C);
  9909  002F44  0E2C               	movlw	44
  9910  002F46  ECCA  F026         	call	_write_data
  9911                           
  9912                           ;ST7735_TFT.c: 249: write_data(0x2D);
  9913  002F4A  0E2D               	movlw	45
  9914  002F4C  ECCA  F026         	call	_write_data
  9915                           
  9916                           ;ST7735_TFT.c: 250: write_command(0xB4);
  9917  002F50  0EB4               	movlw	180
  9918  002F52  ECD2  F026         	call	_write_command
  9919                           
  9920                           ;ST7735_TFT.c: 251: write_data(0x07);
  9921  002F56  0E07               	movlw	7
  9922  002F58  ECCA  F026         	call	_write_data
  9923                           
  9924                           ;ST7735_TFT.c: 252: write_command(0xC0);
  9925  002F5C  0EC0               	movlw	192
  9926  002F5E  ECD2  F026         	call	_write_command
  9927                           
  9928                           ;ST7735_TFT.c: 253: write_data(0xA2);
  9929  002F62  0EA2               	movlw	162
  9930  002F64  ECCA  F026         	call	_write_data
  9931                           
  9932                           ;ST7735_TFT.c: 254: write_data(0x02);
  9933  002F68  0E02               	movlw	2
  9934  002F6A  ECCA  F026         	call	_write_data
  9935                           
  9936                           ;ST7735_TFT.c: 255: write_data(0x84);
  9937  002F6E  0E84               	movlw	132
  9938  002F70  ECCA  F026         	call	_write_data
  9939                           
  9940                           ;ST7735_TFT.c: 256: write_command(0xC1);
  9941  002F74  0EC1               	movlw	193
  9942  002F76  ECD2  F026         	call	_write_command
  9943                           
  9944                           ;ST7735_TFT.c: 257: write_data(0xC5);
  9945  002F7A  0EC5               	movlw	197
  9946  002F7C  ECCA  F026         	call	_write_data
  9947                           
  9948                           ;ST7735_TFT.c: 258: write_command(0xC2);
  9949  002F80  0EC2               	movlw	194
  9950  002F82  ECD2  F026         	call	_write_command
  9951                           
  9952                           ;ST7735_TFT.c: 259: write_data(0x0A);
  9953  002F86  0E0A               	movlw	10
  9954  002F88  ECCA  F026         	call	_write_data
  9955                           
  9956                           ;ST7735_TFT.c: 260: write_data(0x00);
  9957  002F8C  0E00               	movlw	0
  9958  002F8E  ECCA  F026         	call	_write_data
  9959                           
  9960                           ;ST7735_TFT.c: 261: write_command(0xC3);
  9961  002F92  0EC3               	movlw	195
  9962  002F94  ECD2  F026         	call	_write_command
  9963                           
  9964                           ;ST7735_TFT.c: 262: write_data(0x8A);
  9965  002F98  0E8A               	movlw	138
  9966  002F9A  ECCA  F026         	call	_write_data
  9967                           
  9968                           ;ST7735_TFT.c: 263: write_data(0x2A);
  9969  002F9E  0E2A               	movlw	42
  9970  002FA0  ECCA  F026         	call	_write_data
  9971                           
  9972                           ;ST7735_TFT.c: 264: write_command(0xC4);
  9973  002FA4  0EC4               	movlw	196
  9974  002FA6  ECD2  F026         	call	_write_command
  9975                           
  9976                           ;ST7735_TFT.c: 265: write_data(0x8A);
  9977  002FAA  0E8A               	movlw	138
  9978  002FAC  ECCA  F026         	call	_write_data
  9979                           
  9980                           ;ST7735_TFT.c: 266: write_data(0xEE);
  9981  002FB0  0EEE               	movlw	238
  9982  002FB2  ECCA  F026         	call	_write_data
  9983                           
  9984                           ;ST7735_TFT.c: 267: write_command(0xC5);
  9985  002FB6  0EC5               	movlw	197
  9986  002FB8  ECD2  F026         	call	_write_command
  9987                           
  9988                           ;ST7735_TFT.c: 268: write_data(0x0E);
  9989  002FBC  0E0E               	movlw	14
  9990  002FBE  ECCA  F026         	call	_write_data
  9991                           
  9992                           ;ST7735_TFT.c: 269: write_command(0x20);
  9993  002FC2  0E20               	movlw	32
  9994  002FC4  ECD2  F026         	call	_write_command
  9995                           
  9996                           ;ST7735_TFT.c: 270: write_command(0x36);
  9997  002FC8  0E36               	movlw	54
  9998  002FCA  ECD2  F026         	call	_write_command
  9999                           
 10000                           ;ST7735_TFT.c: 271: write_data(0xC8);
 10001  002FCE  0EC8               	movlw	200
 10002  002FD0  ECCA  F026         	call	_write_data
 10003                           
 10004                           ;ST7735_TFT.c: 272: write_command(0x3A);
 10005  002FD4  0E3A               	movlw	58
 10006  002FD6  ECD2  F026         	call	_write_command
 10007                           
 10008                           ;ST7735_TFT.c: 273: write_data(0x05);
 10009  002FDA  0E05               	movlw	5
 10010  002FDC  ECCA  F026         	call	_write_data
 10011  002FE0  0012               	return		;funcret
 10012  002FE2                     __end_of_Rcmd1:
 10013                           	opt stack 0
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           intcon2	equ	0xFF1
 10021                           intcon3	equ	0xFF0
 10022                           postinc0	equ	0xFEE
 10023                           wreg	equ	0xFE8
 10024                           postdec1	equ	0xFE5
 10025                           plusw1	equ	0xFE3
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           plusw2	equ	0xFDB
 10030                           fsr2h	equ	0xFDA
 10031                           fsr2l	equ	0xFD9
 10032                           status	equ	0xFD8
 10033                           
 10034 ;; *************** function _LCD_Reset *****************
 10035 ;; Defined at:
 10036 ;;		line 165 in file "ST7735_TFT.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;		None
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;		None               void
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;Total ram usage:        0 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    5
 10057 ;; This function calls:
 10058 ;;		_delay_ms
 10059 ;; This function is called by:
 10060 ;;		_Initialize_Screen
 10061 ;;		_Initialize_Setup_Fan_Screen
 10062 ;;		_Initialize_Setup_Time_Screen
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           	psect	text38
 10067  004D06                     __ptext38:
 10068                           	opt stack 0
 10069  004D06                     _LCD_Reset:
 10070                           	opt stack 23
 10071                           
 10072                           ;ST7735_TFT.c: 167: PORTDbits.RD0 = 0;
 10073                           
 10074                           ;incstack = 0
 10075  004D06  9083               	bcf	3971,0,c	;volatile
 10076                           
 10077                           ;ST7735_TFT.c: 168: delay_ms(100);
 10078  004D08  0E00               	movlw	0
 10079  004D0A  6E18               	movwf	delay_ms@ms+1,c
 10080  004D0C  0E64               	movlw	100
 10081  004D0E  6E17               	movwf	delay_ms@ms,c
 10082  004D10  EC98  F023         	call	_delay_ms	;wreg free
 10083                           
 10084                           ;ST7735_TFT.c: 169: PORTDbits.RD0 = 1;
 10085  004D14  8083               	bsf	3971,0,c	;volatile
 10086  004D16  0012               	return		;funcret
 10087  004D18                     __end_of_LCD_Reset:
 10088                           	opt stack 0
 10089                           tblptru	equ	0xFF8
 10090                           tblptrh	equ	0xFF7
 10091                           tblptrl	equ	0xFF6
 10092                           tablat	equ	0xFF5
 10093                           prodh	equ	0xFF4
 10094                           prodl	equ	0xFF3
 10095                           intcon2	equ	0xFF1
 10096                           intcon3	equ	0xFF0
 10097                           postinc0	equ	0xFEE
 10098                           wreg	equ	0xFE8
 10099                           postdec1	equ	0xFE5
 10100                           plusw1	equ	0xFE3
 10101                           fsr1l	equ	0xFE1
 10102                           indf2	equ	0xFDF
 10103                           postinc2	equ	0xFDE
 10104                           plusw2	equ	0xFDB
 10105                           fsr2h	equ	0xFDA
 10106                           fsr2l	equ	0xFD9
 10107                           status	equ	0xFD8
 10108                           
 10109 ;; *************** function _delay_ms *****************
 10110 ;; Defined at:
 10111 ;;		line 12 in file "ST7735_TFT.c"
 10112 ;; Parameters:    Size  Location     Type
 10113 ;;  ms              2   22[COMRAM] int 
 10114 ;; Auto vars:     Size  Location     Type
 10115 ;;  count           2   24[COMRAM] int 
 10116 ;; Return value:  Size  Location     Type
 10117 ;;		None               void
 10118 ;; Registers used:
 10119 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10120 ;; Tracked objects:
 10121 ;;		On entry : 0/0
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10125 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10128 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10129 ;;Total ram usage:        4 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; Hardware stack levels required when called:    4
 10132 ;; This function calls:
 10133 ;;		___wmul
 10134 ;; This function is called by:
 10135 ;;		_LCD_Reset
 10136 ;;		_Rcmd1
 10137 ;;		_Rcmd3
 10138 ;;		_Bcmd
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           	psect	text39
 10143  004730                     __ptext39:
 10144                           	opt stack 0
 10145  004730                     _delay_ms:
 10146                           	opt stack 22
 10147                           
 10148                           ;ST7735_TFT.c: 18: int count;
 10149                           ;ST7735_TFT.c: 19: count = 8000000/4000/8 * ms;
 10150                           
 10151                           ;incstack = 0
 10152  004730  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 10153  004734  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 10154  004738  0E00               	movlw	0
 10155  00473A  6E14               	movwf	___wmul@multiplicand+1,c
 10156  00473C  0EFA               	movlw	250
 10157  00473E  6E13               	movwf	___wmul@multiplicand,c
 10158  004740  ECE7  F024         	call	___wmul	;wreg free
 10159  004744  C011  F019         	movff	?___wmul,delay_ms@count
 10160  004748  C012  F01A         	movff	?___wmul+1,delay_ms@count+1
 10161                           
 10162                           ;ST7735_TFT.c: 20: count = (0xffff - count)+1;
 10163  00474C  6C19               	negf	delay_ms@count,c
 10164  00474E  1E1A               	comf	delay_ms@count+1,f,c
 10165  004750  B0D8               	btfsc	status,0,c
 10166  004752  2A1A               	incf	delay_ms@count+1,f,c
 10167                           
 10168                           ;ST7735_TFT.c: 22: T0CON = 0x02;
 10169  004754  0E02               	movlw	2
 10170  004756  6ED5               	movwf	4053,c	;volatile
 10171                           
 10172                           ;ST7735_TFT.c: 23: TMR0H = count >> 8;
 10173  004758  501A               	movf	delay_ms@count+1,w,c
 10174  00475A  6ED7               	movwf	4055,c	;volatile
 10175                           
 10176                           ;ST7735_TFT.c: 24: TMR0L = count & 0x00ff;
 10177  00475C  C019  FFD6         	movff	delay_ms@count,4054	;volatile
 10178                           
 10179                           ;ST7735_TFT.c: 27: INTCONbits.TMR0IF = 0;
 10180  004760  94F2               	bcf	intcon,2,c	;volatile
 10181                           
 10182                           ;ST7735_TFT.c: 28: T0CONbits.TMR0ON = 1;
 10183  004762  8ED5               	bsf	4053,7,c	;volatile
 10184                           
 10185                           ;ST7735_TFT.c: 30: while (INTCONbits.TMR0IF == 0);
 10186  004764  D000               	goto	l198
 10187  004766                     l198:
 10188  004766  A4F2               	btfss	intcon,2,c	;volatile
 10189  004768  D7FE               	goto	l198
 10190                           
 10191                           ;ST7735_TFT.c: 31: T0CONbits.TMR0ON = 0;
 10192  00476A  9ED5               	bcf	4053,7,c	;volatile
 10193  00476C  0012               	return		;funcret
 10194  00476E                     __end_of_delay_ms:
 10195                           	opt stack 0
 10196                           tblptru	equ	0xFF8
 10197                           tblptrh	equ	0xFF7
 10198                           tblptrl	equ	0xFF6
 10199                           tablat	equ	0xFF5
 10200                           prodh	equ	0xFF4
 10201                           prodl	equ	0xFF3
 10202                           intcon	equ	0xFF2
 10203                           intcon2	equ	0xFF1
 10204                           intcon3	equ	0xFF0
 10205                           postinc0	equ	0xFEE
 10206                           wreg	equ	0xFE8
 10207                           postdec1	equ	0xFE5
 10208                           plusw1	equ	0xFE3
 10209                           fsr1l	equ	0xFE1
 10210                           indf2	equ	0xFDF
 10211                           postinc2	equ	0xFDE
 10212                           plusw2	equ	0xFDB
 10213                           fsr2h	equ	0xFDA
 10214                           fsr2l	equ	0xFD9
 10215                           status	equ	0xFD8
 10216                           
 10217 ;; *************** function _DS3231_Write_Time *****************
 10218 ;; Defined at:
 10219 ;;		line 64 in file "I2C_Support.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;		None
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  Address         1   74[COMRAM] unsigned char 
 10224 ;;  Device          1   73[COMRAM] unsigned char 
 10225 ;; Return value:  Size  Location     Type
 10226 ;;		None               void
 10227 ;; Registers used:
 10228 ;;		wreg, status,2, status,0, cstack
 10229 ;; Tracked objects:
 10230 ;;		On entry : 0/0
 10231 ;;		On exit  : 0/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;Total ram usage:        2 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:    5
 10241 ;; This function calls:
 10242 ;;		_I2C_Start
 10243 ;;		_I2C_Stop
 10244 ;;		_I2C_Write
 10245 ;;		_dec_2_bcd
 10246 ;; This function is called by:
 10247 ;;		_Do_Save_New_Time
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           	psect	text40
 10252  003BDC                     __ptext40:
 10253                           	opt stack 0
 10254  003BDC                     _DS3231_Write_Time:
 10255                           	opt stack 23
 10256                           
 10257                           ;I2C_Support.c: 66: char Device = 0x68;
 10258                           
 10259                           ;incstack = 0
 10260  003BDC  0E68               	movlw	104
 10261  003BDE  6E4A               	movwf	DS3231_Write_Time@Device,c
 10262                           
 10263                           ;I2C_Support.c: 67: char Address = 0x00;
 10264  003BE0  0E00               	movlw	0
 10265  003BE2  6E4B               	movwf	DS3231_Write_Time@Address,c
 10266                           
 10267                           ;I2C_Support.c: 68: second = dec_2_bcd(setup_second);
 10268  003BE4  0100               	movlb	0	; () banked
 10269  003BE6  51D8               	movf	_setup_second& (0+255),w,b
 10270  003BE8  EC1C  F022         	call	_dec_2_bcd
 10271  003BEC  5043               	movf	?_dec_2_bcd,w,c
 10272  003BEE  6E68               	movwf	_second,c
 10273                           
 10274                           ;I2C_Support.c: 69: minute = dec_2_bcd(setup_minute);
 10275  003BF0  0100               	movlb	0	; () banked
 10276  003BF2  51D6               	movf	_setup_minute& (0+255),w,b
 10277  003BF4  EC1C  F022         	call	_dec_2_bcd
 10278  003BF8  5043               	movf	?_dec_2_bcd,w,c
 10279  003BFA  6E66               	movwf	_minute,c
 10280                           
 10281                           ;I2C_Support.c: 70: hour = dec_2_bcd(setup_hour);
 10282  003BFC  0100               	movlb	0	; () banked
 10283  003BFE  51D5               	movf	_setup_hour& (0+255),w,b
 10284  003C00  EC1C  F022         	call	_dec_2_bcd
 10285  003C04  5043               	movf	?_dec_2_bcd,w,c
 10286  003C06  6E65               	movwf	_hour,c
 10287                           
 10288                           ;I2C_Support.c: 71: dow = 0x01;
 10289  003C08  0E01               	movlw	1
 10290  003C0A  0100               	movlb	0	; () banked
 10291  003C0C  6FCF               	movwf	_dow& (0+255),b
 10292                           
 10293                           ;I2C_Support.c: 72: day = dec_2_bcd(setup_day);
 10294  003C0E  0100               	movlb	0	; () banked
 10295  003C10  51D3               	movf	_setup_day& (0+255),w,b
 10296  003C12  EC1C  F022         	call	_dec_2_bcd
 10297  003C16  5043               	movf	?_dec_2_bcd,w,c
 10298  003C18  6E63               	movwf	_day,c
 10299                           
 10300                           ;I2C_Support.c: 73: month = dec_2_bcd(setup_month);
 10301  003C1A  0100               	movlb	0	; () banked
 10302  003C1C  51D7               	movf	_setup_month& (0+255),w,b
 10303  003C1E  EC1C  F022         	call	_dec_2_bcd
 10304  003C22  5043               	movf	?_dec_2_bcd,w,c
 10305  003C24  6E67               	movwf	_month,c
 10306                           
 10307                           ;I2C_Support.c: 74: year = dec_2_bcd(setup_year);
 10308  003C26  0100               	movlb	0	; () banked
 10309  003C28  51D9               	movf	_setup_year& (0+255),w,b
 10310  003C2A  EC1C  F022         	call	_dec_2_bcd
 10311  003C2E  5043               	movf	?_dec_2_bcd,w,c
 10312  003C30  6E6B               	movwf	_year,c
 10313                           
 10314                           ;I2C_Support.c: 75: I2C_Start();
 10315  003C32  EC9E  F026         	call	_I2C_Start	;wreg free
 10316                           
 10317                           ;I2C_Support.c: 76: I2C_Write((Device << 1) | 0);
 10318  003C36  504A               	movf	DS3231_Write_Time@Device,w,c
 10319  003C38  244A               	addwf	DS3231_Write_Time@Device,w,c
 10320  003C3A  ECD6  F023         	call	_I2C_Write
 10321                           
 10322                           ;I2C_Support.c: 77: I2C_Write(Address);
 10323  003C3E  504B               	movf	DS3231_Write_Time@Address,w,c
 10324  003C40  ECD6  F023         	call	_I2C_Write
 10325                           
 10326                           ;I2C_Support.c: 78: I2C_Write(second);
 10327  003C44  5068               	movf	_second,w,c
 10328  003C46  ECD6  F023         	call	_I2C_Write
 10329                           
 10330                           ;I2C_Support.c: 79: I2C_Write(minute);
 10331  003C4A  5066               	movf	_minute,w,c
 10332  003C4C  ECD6  F023         	call	_I2C_Write
 10333                           
 10334                           ;I2C_Support.c: 80: I2C_Write(hour);
 10335  003C50  5065               	movf	_hour,w,c
 10336  003C52  ECD6  F023         	call	_I2C_Write
 10337                           
 10338                           ;I2C_Support.c: 81: I2C_Write(dow);
 10339  003C56  0100               	movlb	0	; () banked
 10340  003C58  51CF               	movf	_dow& (0+255),w,b
 10341  003C5A  ECD6  F023         	call	_I2C_Write
 10342                           
 10343                           ;I2C_Support.c: 82: I2C_Write(day);
 10344  003C5E  5063               	movf	_day,w,c
 10345  003C60  ECD6  F023         	call	_I2C_Write
 10346                           
 10347                           ;I2C_Support.c: 83: I2C_Write(month);
 10348  003C64  5067               	movf	_month,w,c
 10349  003C66  ECD6  F023         	call	_I2C_Write
 10350                           
 10351                           ;I2C_Support.c: 84: I2C_Write(year);
 10352  003C6A  506B               	movf	_year,w,c
 10353  003C6C  ECD6  F023         	call	_I2C_Write
 10354                           
 10355                           ;I2C_Support.c: 85: I2C_Stop();
 10356  003C70  EC95  F026         	call	_I2C_Stop	;wreg free
 10357  003C74  0012               	return		;funcret
 10358  003C76                     __end_of_DS3231_Write_Time:
 10359                           	opt stack 0
 10360                           tblptru	equ	0xFF8
 10361                           tblptrh	equ	0xFF7
 10362                           tblptrl	equ	0xFF6
 10363                           tablat	equ	0xFF5
 10364                           prodh	equ	0xFF4
 10365                           prodl	equ	0xFF3
 10366                           intcon	equ	0xFF2
 10367                           intcon2	equ	0xFF1
 10368                           intcon3	equ	0xFF0
 10369                           postinc0	equ	0xFEE
 10370                           wreg	equ	0xFE8
 10371                           postdec1	equ	0xFE5
 10372                           plusw1	equ	0xFE3
 10373                           fsr1l	equ	0xFE1
 10374                           indf2	equ	0xFDF
 10375                           postinc2	equ	0xFDE
 10376                           plusw2	equ	0xFDB
 10377                           fsr2h	equ	0xFDA
 10378                           fsr2l	equ	0xFD9
 10379                           status	equ	0xFD8
 10380                           
 10381 ;; *************** function _dec_2_bcd *****************
 10382 ;; Defined at:
 10383 ;;		line 59 in file "utils.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;  dec             1    wreg     unsigned char 
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;  dec             1   72[COMRAM] unsigned char 
 10388 ;;  bcd             2   70[COMRAM] int 
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  2   66[COMRAM] int 
 10391 ;; Registers used:
 10392 ;;		wreg, status,2, status,0, cstack
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10398 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;Total ram usage:        7 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    4
 10405 ;; This function calls:
 10406 ;;		___awdiv
 10407 ;;		___awmod
 10408 ;; This function is called by:
 10409 ;;		_DS3231_Write_Time
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           	psect	text41
 10414  004438                     __ptext41:
 10415                           	opt stack 0
 10416  004438                     _dec_2_bcd:
 10417                           	opt stack 23
 10418                           
 10419                           ;incstack = 0
 10420                           ;dec_2_bcd@dec stored from wreg
 10421  004438  6E49               	movwf	dec_2_bcd@dec,c
 10422                           
 10423                           ;utils.c: 61: int bcd;
 10424                           ;utils.c: 62: bcd = ((dec / 10) << 4) + (dec % 10);
 10425  00443A  C049  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 10426  00443E  6A18               	clrf	___awdiv@dividend+1,c
 10427  004440  0E00               	movlw	0
 10428  004442  6E1A               	movwf	___awdiv@divisor+1,c
 10429  004444  0E0A               	movlw	10
 10430  004446  6E19               	movwf	___awdiv@divisor,c
 10431  004448  EC3B  F01E         	call	___awdiv	;wreg free
 10432  00444C  C017  F045         	movff	?___awdiv,??_dec_2_bcd
 10433  004450  C018  F046         	movff	?___awdiv+1,??_dec_2_bcd+1
 10434  004454  3A45               	swapf	??_dec_2_bcd,f,c
 10435  004456  3A46               	swapf	??_dec_2_bcd+1,f,c
 10436  004458  0EF0               	movlw	240
 10437  00445A  1646               	andwf	??_dec_2_bcd+1,f,c
 10438  00445C  5045               	movf	??_dec_2_bcd,w,c
 10439  00445E  0B0F               	andlw	15
 10440  004460  1246               	iorwf	??_dec_2_bcd+1,f,c
 10441  004462  0EF0               	movlw	240
 10442  004464  1645               	andwf	??_dec_2_bcd,f,c
 10443  004466  C049  F03D         	movff	dec_2_bcd@dec,___awmod@dividend
 10444  00446A  6A3E               	clrf	___awmod@dividend+1,c
 10445  00446C  0E00               	movlw	0
 10446  00446E  6E40               	movwf	___awmod@divisor+1,c
 10447  004470  0E0A               	movlw	10
 10448  004472  6E3F               	movwf	___awmod@divisor,c
 10449  004474  EC72  F020         	call	___awmod	;wreg free
 10450  004478  503D               	movf	?___awmod,w,c
 10451  00447A  2445               	addwf	??_dec_2_bcd,w,c
 10452  00447C  6E47               	movwf	dec_2_bcd@bcd,c
 10453  00447E  503E               	movf	?___awmod+1,w,c
 10454  004480  2046               	addwfc	??_dec_2_bcd+1,w,c
 10455  004482  6E48               	movwf	dec_2_bcd@bcd+1,c
 10456                           
 10457                           ;utils.c: 63: return bcd;
 10458  004484  C047  F043         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 10459  004488  C048  F044         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 10460  00448C  D000               	goto	l454
 10461  00448E                     l454:
 10462  00448E  0012               	return		;funcret
 10463  004490                     __end_of_dec_2_bcd:
 10464                           	opt stack 0
 10465                           tblptru	equ	0xFF8
 10466                           tblptrh	equ	0xFF7
 10467                           tblptrl	equ	0xFF6
 10468                           tablat	equ	0xFF5
 10469                           prodh	equ	0xFF4
 10470                           prodl	equ	0xFF3
 10471                           intcon	equ	0xFF2
 10472                           intcon2	equ	0xFF1
 10473                           intcon3	equ	0xFF0
 10474                           postinc0	equ	0xFEE
 10475                           wreg	equ	0xFE8
 10476                           postdec1	equ	0xFE5
 10477                           plusw1	equ	0xFE3
 10478                           fsr1l	equ	0xFE1
 10479                           indf2	equ	0xFDF
 10480                           postinc2	equ	0xFDE
 10481                           plusw2	equ	0xFDB
 10482                           fsr2h	equ	0xFDA
 10483                           fsr2l	equ	0xFD9
 10484                           status	equ	0xFD8
 10485                           
 10486 ;; *************** function _DS3231_Read_Time *****************
 10487 ;; Defined at:
 10488 ;;		line 43 in file "I2C_Support.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;  Device          1   20[COMRAM] unsigned char 
 10493 ;;  Address         1   19[COMRAM] unsigned char 
 10494 ;;  Data_Ret        1    0        unsigned char 
 10495 ;; Return value:  Size  Location     Type
 10496 ;;		None               void
 10497 ;; Registers used:
 10498 ;;		wreg, status,2, status,0, cstack
 10499 ;; Tracked objects:
 10500 ;;		On entry : 0/0
 10501 ;;		On exit  : 0/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;Total ram usage:        2 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; Hardware stack levels required when called:    6
 10511 ;; This function calls:
 10512 ;;		_I2C_ReStart
 10513 ;;		_I2C_Read
 10514 ;;		_I2C_Start
 10515 ;;		_I2C_Stop
 10516 ;;		_I2C_Write
 10517 ;; This function is called by:
 10518 ;;		_main
 10519 ;;		_Setup_Fan_Temp
 10520 ;;		_Do_Save_New_Fan_Temp
 10521 ;;		_Do_Setup_Time
 10522 ;;		_Do_Save_New_Time
 10523 ;;		_Exit_Time_Setup
 10524 ;;		_Exit_Setup_Fan_Temp
 10525 ;; This function uses a non-reentrant model
 10526 ;;
 10527                           
 10528                           	psect	text42
 10529  0042B4                     __ptext42:
 10530                           	opt stack 0
 10531  0042B4                     _DS3231_Read_Time:
 10532                           	opt stack 22
 10533                           
 10534                           ;I2C_Support.c: 46: char Device = 0x68;
 10535                           
 10536                           ;incstack = 0
 10537  0042B4  0E68               	movlw	104
 10538  0042B6  6E15               	movwf	DS3231_Read_Time@Device,c
 10539                           
 10540                           ;I2C_Support.c: 47: char Address = 0x00;
 10541  0042B8  0E00               	movlw	0
 10542  0042BA  6E14               	movwf	DS3231_Read_Time@Address,c
 10543                           
 10544                           ;I2C_Support.c: 48: char Data_Ret;
 10545                           ;I2C_Support.c: 49: I2C_Start();
 10546  0042BC  EC9E  F026         	call	_I2C_Start	;wreg free
 10547                           
 10548                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
 10549  0042C0  5015               	movf	DS3231_Read_Time@Device,w,c
 10550  0042C2  2415               	addwf	DS3231_Read_Time@Device,w,c
 10551  0042C4  ECD6  F023         	call	_I2C_Write
 10552                           
 10553                           ;I2C_Support.c: 51: I2C_Write(Address);
 10554  0042C8  5014               	movf	DS3231_Read_Time@Address,w,c
 10555  0042CA  ECD6  F023         	call	_I2C_Write
 10556                           
 10557                           ;I2C_Support.c: 52: I2C_ReStart();
 10558  0042CE  EC50  F026         	call	_I2C_ReStart	;wreg free
 10559                           
 10560                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
 10561  0042D2  80D8               	bsf	status,0,c
 10562  0042D4  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10563  0042D6  ECD6  F023         	call	_I2C_Write
 10564                           
 10565                           ;I2C_Support.c: 54: second = I2C_Read(1);
 10566  0042DA  0E01               	movlw	1
 10567  0042DC  EC36  F023         	call	_I2C_Read
 10568  0042E0  6E68               	movwf	_second,c
 10569                           
 10570                           ;I2C_Support.c: 55: minute = I2C_Read(1);
 10571  0042E2  0E01               	movlw	1
 10572  0042E4  EC36  F023         	call	_I2C_Read
 10573  0042E8  6E66               	movwf	_minute,c
 10574                           
 10575                           ;I2C_Support.c: 56: hour = I2C_Read(1);
 10576  0042EA  0E01               	movlw	1
 10577  0042EC  EC36  F023         	call	_I2C_Read
 10578  0042F0  6E65               	movwf	_hour,c
 10579                           
 10580                           ;I2C_Support.c: 57: dow = I2C_Read(1);
 10581  0042F2  0E01               	movlw	1
 10582  0042F4  EC36  F023         	call	_I2C_Read
 10583  0042F8  0100               	movlb	0	; () banked
 10584  0042FA  6FCF               	movwf	_dow& (0+255),b
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;I2C_Support.c: 58: day = I2C_Read(1);
 10588  0042FC  0E01               	movlw	1
 10589  0042FE  EC36  F023         	call	_I2C_Read
 10590  004302  6E63               	movwf	_day,c
 10591                           
 10592                           ;I2C_Support.c: 59: month = I2C_Read(1);
 10593  004304  0E01               	movlw	1
 10594  004306  EC36  F023         	call	_I2C_Read
 10595  00430A  6E67               	movwf	_month,c
 10596                           
 10597                           ;I2C_Support.c: 60: year = I2C_Read(0);
 10598  00430C  0E00               	movlw	0
 10599  00430E  EC36  F023         	call	_I2C_Read
 10600  004312  6E6B               	movwf	_year,c
 10601                           
 10602                           ;I2C_Support.c: 61: I2C_Stop();
 10603  004314  EC95  F026         	call	_I2C_Stop	;wreg free
 10604  004318  0012               	return		;funcret
 10605  00431A                     __end_of_DS3231_Read_Time:
 10606                           	opt stack 0
 10607                           tblptru	equ	0xFF8
 10608                           tblptrh	equ	0xFF7
 10609                           tblptrl	equ	0xFF6
 10610                           tablat	equ	0xFF5
 10611                           prodh	equ	0xFF4
 10612                           prodl	equ	0xFF3
 10613                           intcon	equ	0xFF2
 10614                           intcon2	equ	0xFF1
 10615                           intcon3	equ	0xFF0
 10616                           postinc0	equ	0xFEE
 10617                           wreg	equ	0xFE8
 10618                           postdec1	equ	0xFE5
 10619                           plusw1	equ	0xFE3
 10620                           fsr1l	equ	0xFE1
 10621                           indf2	equ	0xFDF
 10622                           postinc2	equ	0xFDE
 10623                           plusw2	equ	0xFDB
 10624                           fsr2h	equ	0xFDA
 10625                           fsr2l	equ	0xFD9
 10626                           status	equ	0xFD8
 10627                           
 10628 ;; *************** function _Decrease_Time *****************
 10629 ;; Defined at:
 10630 ;;		line 155 in file "Setup_Time.c"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;		None
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;		None
 10635 ;; Return value:  Size  Location     Type
 10636 ;;		None               void
 10637 ;; Registers used:
 10638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;Total ram usage:        0 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; Hardware stack levels required when called:   11
 10651 ;; This function calls:
 10652 ;;		_Update_Setup_Time_Screen
 10653 ;; This function is called by:
 10654 ;;		_Do_Setup_Time
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           	psect	text43
 10659  00391C                     __ptext43:
 10660                           	opt stack 0
 10661  00391C                     _Decrease_Time:
 10662                           	opt stack 18
 10663                           
 10664                           ;Setup_Time.c: 157: switch (Select_Field)
 10665                           
 10666                           ;incstack = 0
 10667  00391C  D042               	goto	l9856
 10668  00391E                     l9818:
 10669                           
 10670                           ;Setup_Time.c: 160: if (setup_hour == 0) setup_hour = 23;
 10671  00391E  0100               	movlb	0	; () banked
 10672  003920  51D5               	movf	_setup_hour& (0+255),w,b
 10673  003922  A4D8               	btfss	status,2,c
 10674  003924  D004               	goto	l9822
 10675                           
 10676                           ; BSR set to: 0
 10677  003926  0E17               	movlw	23
 10678  003928  0100               	movlb	0	; () banked
 10679  00392A  6FD5               	movwf	_setup_hour& (0+255),b
 10680  00392C  D04F               	goto	l9858
 10681  00392E                     l9822:
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;Setup_Time.c: 161: else --setup_hour;
 10685  00392E  0100               	movlb	0	; () banked
 10686  003930  07D5               	decf	_setup_hour& (0+255),f,b
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;Setup_Time.c: 162: break;
 10690  003932  D04C               	goto	l9858
 10691  003934                     l9824:
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;Setup_Time.c: 165: if (setup_minute == 0) setup_minute = 59;
 10695  003934  0100               	movlb	0	; () banked
 10696  003936  51D6               	movf	_setup_minute& (0+255),w,b
 10697  003938  A4D8               	btfss	status,2,c
 10698  00393A  D004               	goto	l9828
 10699                           
 10700                           ; BSR set to: 0
 10701  00393C  0E3B               	movlw	59
 10702  00393E  0100               	movlb	0	; () banked
 10703  003940  6FD6               	movwf	_setup_minute& (0+255),b
 10704  003942  D044               	goto	l9858
 10705  003944                     l9828:
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;Setup_Time.c: 166: else --setup_minute;
 10709  003944  0100               	movlb	0	; () banked
 10710  003946  07D6               	decf	_setup_minute& (0+255),f,b
 10711                           
 10712                           ; BSR set to: 0
 10713                           ;Setup_Time.c: 167: break;
 10714  003948  D041               	goto	l9858
 10715  00394A                     l9830:
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;Setup_Time.c: 171: if (setup_second == 0) setup_second = 59;
 10719  00394A  0100               	movlb	0	; () banked
 10720  00394C  51D8               	movf	_setup_second& (0+255),w,b
 10721  00394E  A4D8               	btfss	status,2,c
 10722  003950  D004               	goto	l9834
 10723                           
 10724                           ; BSR set to: 0
 10725  003952  0E3B               	movlw	59
 10726  003954  0100               	movlb	0	; () banked
 10727  003956  6FD8               	movwf	_setup_second& (0+255),b
 10728  003958  D039               	goto	l9858
 10729  00395A                     l9834:
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;Setup_Time.c: 172: else --setup_second;
 10733  00395A  0100               	movlb	0	; () banked
 10734  00395C  07D8               	decf	_setup_second& (0+255),f,b
 10735                           
 10736                           ; BSR set to: 0
 10737                           ;Setup_Time.c: 173: break;
 10738  00395E  D036               	goto	l9858
 10739  003960                     l9836:
 10740                           
 10741                           ; BSR set to: 0
 10742                           ;Setup_Time.c: 177: if (setup_month == 1) setup_month = 12;
 10743  003960  0100               	movlb	0	; () banked
 10744  003962  05D7               	decf	_setup_month& (0+255),w,b
 10745  003964  A4D8               	btfss	status,2,c
 10746  003966  D004               	goto	l9840
 10747                           
 10748                           ; BSR set to: 0
 10749  003968  0E0C               	movlw	12
 10750  00396A  0100               	movlb	0	; () banked
 10751  00396C  6FD7               	movwf	_setup_month& (0+255),b
 10752  00396E  D02E               	goto	l9858
 10753  003970                     l9840:
 10754                           
 10755                           ; BSR set to: 0
 10756                           ;Setup_Time.c: 178: else --setup_month;
 10757  003970  0100               	movlb	0	; () banked
 10758  003972  07D7               	decf	_setup_month& (0+255),f,b
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;Setup_Time.c: 179: break;
 10762  003974  D02B               	goto	l9858
 10763  003976                     l9842:
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;Setup_Time.c: 183: if (setup_day == 1) setup_day = 1;
 10767  003976  0100               	movlb	0	; () banked
 10768  003978  05D3               	decf	_setup_day& (0+255),w,b
 10769  00397A  A4D8               	btfss	status,2,c
 10770  00397C  D004               	goto	l9846
 10771                           
 10772                           ; BSR set to: 0
 10773  00397E  0E01               	movlw	1
 10774  003980  0100               	movlb	0	; () banked
 10775  003982  6FD3               	movwf	_setup_day& (0+255),b
 10776  003984  D023               	goto	l9858
 10777  003986                     l9846:
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;Setup_Time.c: 184: else --setup_day;
 10781  003986  0100               	movlb	0	; () banked
 10782  003988  07D3               	decf	_setup_day& (0+255),f,b
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;Setup_Time.c: 185: break;
 10786  00398A  D020               	goto	l9858
 10787  00398C                     l9848:
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;Setup_Time.c: 189: if (setup_year == 00) setup_year = 99;
 10791  00398C  0100               	movlb	0	; () banked
 10792  00398E  51D9               	movf	_setup_year& (0+255),w,b
 10793  003990  A4D8               	btfss	status,2,c
 10794  003992  D004               	goto	l9852
 10795                           
 10796                           ; BSR set to: 0
 10797  003994  0E63               	movlw	99
 10798  003996  0100               	movlb	0	; () banked
 10799  003998  6FD9               	movwf	_setup_year& (0+255),b
 10800  00399A  D018               	goto	l9858
 10801  00399C                     l9852:
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;Setup_Time.c: 190: else --setup_year;
 10805  00399C  0100               	movlb	0	; () banked
 10806  00399E  07D9               	decf	_setup_year& (0+255),f,b
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;Setup_Time.c: 195: }
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;Setup_Time.c: 194: break;
 10813                           
 10814                           ;Setup_Time.c: 193: default:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;Setup_Time.c: 191: break;
 10818  0039A0  D015               	goto	l9858
 10819  0039A2                     l9856:
 10820  0039A2  0100               	movlb	0	; () banked
 10821  0039A4  51CB               	movf	_Select_Field& (0+255),w,b
 10822                           
 10823                           ; Switch size 1, requested type "space"
 10824                           ; Number of cases is 6, Range of values is 0 to 5
 10825                           ; switch strategies available:
 10826                           ; Name         Instructions Cycles
 10827                           ; simple_byte           19    10 (average)
 10828                           ;	Chosen strategy is simple_byte
 10829  0039A6  0A00               	xorlw	0	; case 0
 10830  0039A8  B4D8               	btfsc	status,2,c
 10831  0039AA  D7B9               	goto	l9818
 10832  0039AC  0A01               	xorlw	1	; case 1
 10833  0039AE  B4D8               	btfsc	status,2,c
 10834  0039B0  D7C1               	goto	l9824
 10835  0039B2  0A03               	xorlw	3	; case 2
 10836  0039B4  B4D8               	btfsc	status,2,c
 10837  0039B6  D7C9               	goto	l9830
 10838  0039B8  0A01               	xorlw	1	; case 3
 10839  0039BA  B4D8               	btfsc	status,2,c
 10840  0039BC  D7D1               	goto	l9836
 10841  0039BE  0A07               	xorlw	7	; case 4
 10842  0039C0  B4D8               	btfsc	status,2,c
 10843  0039C2  D7D9               	goto	l9842
 10844  0039C4  0A01               	xorlw	1	; case 5
 10845  0039C6  B4D8               	btfsc	status,2,c
 10846  0039C8  D7E1               	goto	l9848
 10847  0039CA  D000               	goto	l9858
 10848  0039CC                     l9858:
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;Setup_Time.c: 196: Update_Setup_Time_Screen();
 10852  0039CC  EC5D  F015         	call	_Update_Setup_Time_Screen	;wreg free
 10853  0039D0  0012               	return		;funcret
 10854  0039D2                     __end_of_Decrease_Time:
 10855                           	opt stack 0
 10856                           tblptru	equ	0xFF8
 10857                           tblptrh	equ	0xFF7
 10858                           tblptrl	equ	0xFF6
 10859                           tablat	equ	0xFF5
 10860                           prodh	equ	0xFF4
 10861                           prodl	equ	0xFF3
 10862                           intcon	equ	0xFF2
 10863                           intcon2	equ	0xFF1
 10864                           intcon3	equ	0xFF0
 10865                           postinc0	equ	0xFEE
 10866                           wreg	equ	0xFE8
 10867                           postdec1	equ	0xFE5
 10868                           plusw1	equ	0xFE3
 10869                           fsr1l	equ	0xFE1
 10870                           indf2	equ	0xFDF
 10871                           postinc2	equ	0xFDE
 10872                           plusw2	equ	0xFDB
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function _Update_Setup_Time_Screen *****************
 10878 ;; Defined at:
 10879 ;;		line 266 in file "Setup_Time.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;		None
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;		None
 10884 ;; Return value:  Size  Location     Type
 10885 ;;		None               void
 10886 ;; Registers used:
 10887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;Total ram usage:        0 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; Hardware stack levels required when called:   10
 10900 ;; This function calls:
 10901 ;;		___awdiv
 10902 ;;		___awmod
 10903 ;;		_drawtext
 10904 ;; This function is called by:
 10905 ;;		_Do_Setup_Time
 10906 ;;		_Increase_Time
 10907 ;;		_Decrease_Time
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text44
 10912  002ABA                     __ptext44:
 10913                           	opt stack 0
 10914  002ABA                     _Update_Setup_Time_Screen:
 10915                           	opt stack 19
 10916                           
 10917                           ;Setup_Time.c: 268: setup_time[0] = (setup_hour/10) + '0';
 10918                           
 10919                           ;incstack = 0
 10920  002ABA  C0D5  F017         	movff	_setup_hour,___awdiv@dividend
 10921  002ABE  6A18               	clrf	___awdiv@dividend+1,c
 10922  002AC0  0E00               	movlw	0
 10923  002AC2  6E1A               	movwf	___awdiv@divisor+1,c
 10924  002AC4  0E0A               	movlw	10
 10925  002AC6  6E19               	movwf	___awdiv@divisor,c
 10926  002AC8  EC3B  F01E         	call	___awdiv	;wreg free
 10927  002ACC  5017               	movf	?___awdiv,w,c
 10928  002ACE  0F30               	addlw	48
 10929  002AD0  0101               	movlb	1	; () banked
 10930  002AD2  6F65               	movwf	_setup_time& (0+255),b
 10931                           
 10932                           ;Setup_Time.c: 269: setup_time[1] = (setup_hour%10) + '0';
 10933  002AD4  C0D5  F03D         	movff	_setup_hour,___awmod@dividend
 10934  002AD8  6A3E               	clrf	___awmod@dividend+1,c
 10935  002ADA  0E00               	movlw	0
 10936  002ADC  6E40               	movwf	___awmod@divisor+1,c
 10937  002ADE  0E0A               	movlw	10
 10938  002AE0  6E3F               	movwf	___awmod@divisor,c
 10939  002AE2  EC72  F020         	call	___awmod	;wreg free
 10940  002AE6  503D               	movf	?___awmod,w,c
 10941  002AE8  0F30               	addlw	48
 10942  002AEA  0101               	movlb	1	; () banked
 10943  002AEC  6F66               	movwf	(_setup_time+1)& (0+255),b
 10944                           
 10945                           ;Setup_Time.c: 271: setup_time[3] = (setup_minute/10) + '0';
 10946  002AEE  C0D6  F017         	movff	_setup_minute,___awdiv@dividend
 10947  002AF2  6A18               	clrf	___awdiv@dividend+1,c
 10948  002AF4  0E00               	movlw	0
 10949  002AF6  6E1A               	movwf	___awdiv@divisor+1,c
 10950  002AF8  0E0A               	movlw	10
 10951  002AFA  6E19               	movwf	___awdiv@divisor,c
 10952  002AFC  EC3B  F01E         	call	___awdiv	;wreg free
 10953  002B00  5017               	movf	?___awdiv,w,c
 10954  002B02  0F30               	addlw	48
 10955  002B04  0101               	movlb	1	; () banked
 10956  002B06  6F68               	movwf	(_setup_time+3)& (0+255),b
 10957                           
 10958                           ;Setup_Time.c: 272: setup_time[4] = (setup_minute%10) + '0';
 10959  002B08  C0D6  F03D         	movff	_setup_minute,___awmod@dividend
 10960  002B0C  6A3E               	clrf	___awmod@dividend+1,c
 10961  002B0E  0E00               	movlw	0
 10962  002B10  6E40               	movwf	___awmod@divisor+1,c
 10963  002B12  0E0A               	movlw	10
 10964  002B14  6E3F               	movwf	___awmod@divisor,c
 10965  002B16  EC72  F020         	call	___awmod	;wreg free
 10966  002B1A  503D               	movf	?___awmod,w,c
 10967  002B1C  0F30               	addlw	48
 10968  002B1E  0101               	movlb	1	; () banked
 10969  002B20  6F69               	movwf	(_setup_time+4)& (0+255),b
 10970                           
 10971                           ;Setup_Time.c: 274: setup_time[6] = (setup_second/10) + '0';
 10972  002B22  C0D8  F017         	movff	_setup_second,___awdiv@dividend
 10973  002B26  6A18               	clrf	___awdiv@dividend+1,c
 10974  002B28  0E00               	movlw	0
 10975  002B2A  6E1A               	movwf	___awdiv@divisor+1,c
 10976  002B2C  0E0A               	movlw	10
 10977  002B2E  6E19               	movwf	___awdiv@divisor,c
 10978  002B30  EC3B  F01E         	call	___awdiv	;wreg free
 10979  002B34  5017               	movf	?___awdiv,w,c
 10980  002B36  0F30               	addlw	48
 10981  002B38  0101               	movlb	1	; () banked
 10982  002B3A  6F6B               	movwf	(_setup_time+6)& (0+255),b
 10983                           
 10984                           ;Setup_Time.c: 275: setup_time[7] = (setup_second%10) + '0';
 10985  002B3C  C0D8  F03D         	movff	_setup_second,___awmod@dividend
 10986  002B40  6A3E               	clrf	___awmod@dividend+1,c
 10987  002B42  0E00               	movlw	0
 10988  002B44  6E40               	movwf	___awmod@divisor+1,c
 10989  002B46  0E0A               	movlw	10
 10990  002B48  6E3F               	movwf	___awmod@divisor,c
 10991  002B4A  EC72  F020         	call	___awmod	;wreg free
 10992  002B4E  503D               	movf	?___awmod,w,c
 10993  002B50  0F30               	addlw	48
 10994  002B52  0101               	movlb	1	; () banked
 10995  002B54  6F6C               	movwf	(_setup_time+7)& (0+255),b
 10996                           
 10997                           ;Setup_Time.c: 277: setup_date[0] = (setup_month/10) + '0';
 10998  002B56  C0D7  F017         	movff	_setup_month,___awdiv@dividend
 10999  002B5A  6A18               	clrf	___awdiv@dividend+1,c
 11000  002B5C  0E00               	movlw	0
 11001  002B5E  6E1A               	movwf	___awdiv@divisor+1,c
 11002  002B60  0E0A               	movlw	10
 11003  002B62  6E19               	movwf	___awdiv@divisor,c
 11004  002B64  EC3B  F01E         	call	___awdiv	;wreg free
 11005  002B68  5017               	movf	?___awdiv,w,c
 11006  002B6A  0F30               	addlw	48
 11007  002B6C  0101               	movlb	1	; () banked
 11008  002B6E  6F5C               	movwf	_setup_date& (0+255),b
 11009                           
 11010                           ;Setup_Time.c: 278: setup_date[1] = (setup_month%10) + '0';
 11011  002B70  C0D7  F03D         	movff	_setup_month,___awmod@dividend
 11012  002B74  6A3E               	clrf	___awmod@dividend+1,c
 11013  002B76  0E00               	movlw	0
 11014  002B78  6E40               	movwf	___awmod@divisor+1,c
 11015  002B7A  0E0A               	movlw	10
 11016  002B7C  6E3F               	movwf	___awmod@divisor,c
 11017  002B7E  EC72  F020         	call	___awmod	;wreg free
 11018  002B82  503D               	movf	?___awmod,w,c
 11019  002B84  0F30               	addlw	48
 11020  002B86  0101               	movlb	1	; () banked
 11021  002B88  6F5D               	movwf	(_setup_date+1)& (0+255),b
 11022                           
 11023                           ;Setup_Time.c: 280: setup_date[3] = (setup_day/10) + '0';
 11024  002B8A  C0D3  F017         	movff	_setup_day,___awdiv@dividend
 11025  002B8E  6A18               	clrf	___awdiv@dividend+1,c
 11026  002B90  0E00               	movlw	0
 11027  002B92  6E1A               	movwf	___awdiv@divisor+1,c
 11028  002B94  0E0A               	movlw	10
 11029  002B96  6E19               	movwf	___awdiv@divisor,c
 11030  002B98  EC3B  F01E         	call	___awdiv	;wreg free
 11031  002B9C  5017               	movf	?___awdiv,w,c
 11032  002B9E  0F30               	addlw	48
 11033  002BA0  0101               	movlb	1	; () banked
 11034  002BA2  6F5F               	movwf	(_setup_date+3)& (0+255),b
 11035                           
 11036                           ;Setup_Time.c: 281: setup_date[4] = (setup_day%10) + '0';
 11037  002BA4  C0D3  F03D         	movff	_setup_day,___awmod@dividend
 11038  002BA8  6A3E               	clrf	___awmod@dividend+1,c
 11039  002BAA  0E00               	movlw	0
 11040  002BAC  6E40               	movwf	___awmod@divisor+1,c
 11041  002BAE  0E0A               	movlw	10
 11042  002BB0  6E3F               	movwf	___awmod@divisor,c
 11043  002BB2  EC72  F020         	call	___awmod	;wreg free
 11044  002BB6  503D               	movf	?___awmod,w,c
 11045  002BB8  0F30               	addlw	48
 11046  002BBA  0101               	movlb	1	; () banked
 11047  002BBC  6F60               	movwf	(_setup_date+4)& (0+255),b
 11048                           
 11049                           ;Setup_Time.c: 283: setup_date[6] = (setup_year/10) + '0';
 11050  002BBE  C0D9  F017         	movff	_setup_year,___awdiv@dividend
 11051  002BC2  6A18               	clrf	___awdiv@dividend+1,c
 11052  002BC4  0E00               	movlw	0
 11053  002BC6  6E1A               	movwf	___awdiv@divisor+1,c
 11054  002BC8  0E0A               	movlw	10
 11055  002BCA  6E19               	movwf	___awdiv@divisor,c
 11056  002BCC  EC3B  F01E         	call	___awdiv	;wreg free
 11057  002BD0  5017               	movf	?___awdiv,w,c
 11058  002BD2  0F30               	addlw	48
 11059  002BD4  0101               	movlb	1	; () banked
 11060  002BD6  6F62               	movwf	(_setup_date+6)& (0+255),b
 11061                           
 11062                           ;Setup_Time.c: 284: setup_date[7] = (setup_year%10) + '0';
 11063  002BD8  C0D9  F03D         	movff	_setup_year,___awmod@dividend
 11064  002BDC  6A3E               	clrf	___awmod@dividend+1,c
 11065  002BDE  0E00               	movlw	0
 11066  002BE0  6E40               	movwf	___awmod@divisor+1,c
 11067  002BE2  0E0A               	movlw	10
 11068  002BE4  6E3F               	movwf	___awmod@divisor,c
 11069  002BE6  EC72  F020         	call	___awmod	;wreg free
 11070  002BEA  503D               	movf	?___awmod,w,c
 11071  002BEC  0F30               	addlw	48
 11072  002BEE  0101               	movlb	1	; () banked
 11073  002BF0  6F63               	movwf	(_setup_date+7)& (0+255),b
 11074                           
 11075                           ; BSR set to: 1
 11076                           ;Setup_Time.c: 286: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
 11077  002BF2  0E34               	movlw	52
 11078  002BF4  6E39               	movwf	drawtext@y,c
 11079  002BF6  0E65               	movlw	low _setup_time
 11080  002BF8  6E3A               	movwf	drawtext@_text,c
 11081  002BFA  0E01               	movlw	high _setup_time
 11082  002BFC  6E3B               	movwf	drawtext@_text+1,c
 11083  002BFE  0E07               	movlw	7
 11084  002C00  6E3D               	movwf	drawtext@color+1,c
 11085  002C02  683C               	setf	drawtext@color,c
 11086  002C04  0E00               	movlw	0
 11087  002C06  6E3F               	movwf	drawtext@bg+1,c
 11088  002C08  0E00               	movlw	0
 11089  002C0A  6E3E               	movwf	drawtext@bg,c
 11090  002C0C  0E02               	movlw	2
 11091  002C0E  6E40               	movwf	drawtext@size,c
 11092  002C10  0E0F               	movlw	15
 11093  002C12  ECDB  F01A         	call	_drawtext
 11094                           
 11095                           ;Setup_Time.c: 287: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
 11096  002C16  0E52               	movlw	82
 11097  002C18  6E39               	movwf	drawtext@y,c
 11098  002C1A  0E5C               	movlw	low _setup_date
 11099  002C1C  6E3A               	movwf	drawtext@_text,c
 11100  002C1E  0E01               	movlw	high _setup_date
 11101  002C20  6E3B               	movwf	drawtext@_text+1,c
 11102  002C22  0E07               	movlw	7
 11103  002C24  6E3D               	movwf	drawtext@color+1,c
 11104  002C26  0EE0               	movlw	224
 11105  002C28  6E3C               	movwf	drawtext@color,c
 11106  002C2A  0E00               	movlw	0
 11107  002C2C  6E3F               	movwf	drawtext@bg+1,c
 11108  002C2E  0E00               	movlw	0
 11109  002C30  6E3E               	movwf	drawtext@bg,c
 11110  002C32  0E02               	movlw	2
 11111  002C34  6E40               	movwf	drawtext@size,c
 11112  002C36  0E0F               	movlw	15
 11113  002C38  ECDB  F01A         	call	_drawtext
 11114  002C3C  0012               	return		;funcret
 11115  002C3E                     __end_of_Update_Setup_Time_Screen:
 11116                           	opt stack 0
 11117                           tblptru	equ	0xFF8
 11118                           tblptrh	equ	0xFF7
 11119                           tblptrl	equ	0xFF6
 11120                           tablat	equ	0xFF5
 11121                           prodh	equ	0xFF4
 11122                           prodl	equ	0xFF3
 11123                           intcon	equ	0xFF2
 11124                           intcon2	equ	0xFF1
 11125                           intcon3	equ	0xFF0
 11126                           postinc0	equ	0xFEE
 11127                           wreg	equ	0xFE8
 11128                           postdec1	equ	0xFE5
 11129                           plusw1	equ	0xFE3
 11130                           fsr1l	equ	0xFE1
 11131                           indf2	equ	0xFDF
 11132                           postinc2	equ	0xFDE
 11133                           plusw2	equ	0xFDB
 11134                           fsr2h	equ	0xFDA
 11135                           fsr2l	equ	0xFD9
 11136                           status	equ	0xFD8
 11137                           
 11138 ;; *************** function _drawtext *****************
 11139 ;; Defined at:
 11140 ;;		line 422 in file "ST7735_TFT.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;  x               1    wreg     unsigned char 
 11143 ;;  y               1   56[COMRAM] unsigned char 
 11144 ;;  _text           2   57[COMRAM] PTR unsigned char 
 11145 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11146 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11147 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11148 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11149 ;;		 -> Timing_Txt(23), 
 11150 ;;  color           2   59[COMRAM] unsigned int 
 11151 ;;  bg              2   61[COMRAM] unsigned int 
 11152 ;;  size            1   63[COMRAM] unsigned char 
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;  x               1   66[COMRAM] unsigned char 
 11155 ;;  i               2   69[COMRAM] unsigned int 
 11156 ;;  textsize        2   67[COMRAM] unsigned int 
 11157 ;;  cursor_x        1   72[COMRAM] unsigned char 
 11158 ;;  cursor_y        1   71[COMRAM] unsigned char 
 11159 ;; Return value:  Size  Location     Type
 11160 ;;		None               void
 11161 ;; Registers used:
 11162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11163 ;; Tracked objects:
 11164 ;;		On entry : 0/0
 11165 ;;		On exit  : 0/0
 11166 ;;		Unchanged: 0/0
 11167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11168 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11169 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;Total ram usage:       17 bytes
 11173 ;; Hardware stack levels used:    1
 11174 ;; Hardware stack levels required when called:    9
 11175 ;; This function calls:
 11176 ;;		_drawChar
 11177 ;;		_strlen
 11178 ;; This function is called by:
 11179 ;;		_Initialize_Screen
 11180 ;;		_Update_Screen
 11181 ;;		_Initialize_Setup_Fan_Screen
 11182 ;;		_Update_Setup_Fan_Screen
 11183 ;;		_Initialize_Setup_Time_Screen
 11184 ;;		_Update_Setup_Time_Screen
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           	psect	text45
 11189  0035B6                     __ptext45:
 11190                           	opt stack 0
 11191  0035B6                     _drawtext:
 11192                           	opt stack 20
 11193                           
 11194                           ;incstack = 0
 11195                           ;drawtext@x stored from wreg
 11196  0035B6  6E43               	movwf	drawtext@x,c
 11197                           
 11198                           ;ST7735_TFT.c: 424: unsigned char cursor_x, cursor_y;
 11199                           ;ST7735_TFT.c: 425: unsigned int textsize, i;
 11200                           ;ST7735_TFT.c: 426: cursor_x = x, cursor_y = y;
 11201  0035B8  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 11202  0035BC  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 11203                           
 11204                           ;ST7735_TFT.c: 427: textsize = strlen(_text);
 11205  0035C0  C03A  F011         	movff	drawtext@_text,strlen@s
 11206  0035C4  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 11207  0035C8  ECB7  F023         	call	_strlen	;wreg free
 11208  0035CC  C011  F044         	movff	?_strlen,drawtext@textsize
 11209  0035D0  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 11210                           
 11211                           ;ST7735_TFT.c: 428: for(i = 0; i < textsize; i++){
 11212  0035D4  0E00               	movlw	0
 11213  0035D6  6E47               	movwf	drawtext@i+1,c
 11214  0035D8  0E00               	movlw	0
 11215  0035DA  6E46               	movwf	drawtext@i,c
 11216  0035DC  D056               	goto	l9394
 11217  0035DE                     l9368:
 11218                           
 11219                           ;ST7735_TFT.c: 429: if(wrap && ((cursor_x + size * 5) > 128)){
 11220  0035DE  0100               	movlb	0	; () banked
 11221  0035E0  51DE               	movf	_wrap& (0+255),w,b
 11222  0035E2  0100               	movlb	0	; () banked
 11223  0035E4  B4D8               	btfsc	status,2,c
 11224  0035E6  D02C               	goto	l9384
 11225                           
 11226                           ; BSR set to: 0
 11227  0035E8  5040               	movf	drawtext@size,w,c
 11228  0035EA  0D05               	mullw	5
 11229  0035EC  5049               	movf	drawtext@cursor_x,w,c
 11230  0035EE  6E41               	movwf	??_drawtext& (0+255),c
 11231  0035F0  6A42               	clrf	(??_drawtext+1)& (0+255),c
 11232  0035F2  50F3               	movf	prodl,w,c
 11233  0035F4  2641               	addwf	??_drawtext,f,c
 11234  0035F6  50F4               	movf	prodh,w,c
 11235  0035F8  2242               	addwfc	??_drawtext+1,f,c
 11236  0035FA  BE42               	btfsc	??_drawtext+1,7,c
 11237  0035FC  D021               	goto	l9384
 11238  0035FE  5042               	movf	??_drawtext+1,w,c
 11239  003600  E104               	bnz	u8260
 11240  003602  0E81               	movlw	129
 11241  003604  5C41               	subwf	??_drawtext,w,c
 11242  003606  A0D8               	btfss	status,0,c
 11243  003608  D01B               	goto	l9384
 11244  00360A                     u8260:
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;ST7735_TFT.c: 430: cursor_x = 0;
 11248  00360A  0E00               	movlw	0
 11249  00360C  6E49               	movwf	drawtext@cursor_x,c
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;ST7735_TFT.c: 431: cursor_y = cursor_y + size * 7 + 3 ;
 11253  00360E  5040               	movf	drawtext@size,w,c
 11254  003610  0D07               	mullw	7
 11255  003612  50F3               	movf	prodl,w,c
 11256  003614  2448               	addwf	drawtext@cursor_y,w,c
 11257  003616  0F03               	addlw	3
 11258  003618  6E48               	movwf	drawtext@cursor_y,c
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;ST7735_TFT.c: 432: if(cursor_y > 160) cursor_y = 160;
 11262  00361A  0EA0               	movlw	160
 11263  00361C  6448               	cpfsgt	drawtext@cursor_y,c
 11264  00361E  D003               	goto	l9380
 11265                           
 11266                           ; BSR set to: 0
 11267  003620  0EA0               	movlw	160
 11268  003622  6E48               	movwf	drawtext@cursor_y,c
 11269  003624  D000               	goto	l9380
 11270  003626                     l9380:
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;ST7735_TFT.c: 433: if(_text[i] == 0x20) goto _skip; }
 11274  003626  5046               	movf	drawtext@i,w,c
 11275  003628  243A               	addwf	drawtext@_text,w,c
 11276  00362A  6ED9               	movwf	fsr2l,c
 11277  00362C  5047               	movf	drawtext@i+1,w,c
 11278  00362E  203B               	addwfc	drawtext@_text+1,w,c
 11279  003630  6EDA               	movwf	fsr2h,c
 11280  003632  0E20               	movlw	32
 11281  003634  18DE               	xorwf	postinc2,w,c
 11282  003636  B4D8               	btfsc	status,2,c
 11283  003638  D025               	goto	l9392
 11284  00363A  D002               	goto	l9384
 11285                           
 11286                           ; BSR set to: 0
 11287  00363C  D023               	goto	l9392
 11288                           
 11289                           ; BSR set to: 0
 11290  00363E  D000               	goto	l9384
 11291  003640                     l9384:
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;ST7735_TFT.c: 434: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 11295  003640  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 11296  003644  5046               	movf	drawtext@i,w,c
 11297  003646  243A               	addwf	drawtext@_text,w,c
 11298  003648  6ED9               	movwf	fsr2l,c
 11299  00364A  5047               	movf	drawtext@i+1,w,c
 11300  00364C  203B               	addwfc	drawtext@_text+1,w,c
 11301  00364E  6EDA               	movwf	fsr2h,c
 11302  003650  50DF               	movf	indf2,w,c
 11303  003652  6E2F               	movwf	drawChar@c,c
 11304  003654  C03C  F030         	movff	drawtext@color,drawChar@color
 11305  003658  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 11306  00365C  C03E  F032         	movff	drawtext@bg,drawChar@bg
 11307  003660  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 11308  003664  C040  F034         	movff	drawtext@size,drawChar@size
 11309  003668  5049               	movf	drawtext@cursor_x,w,c
 11310  00366A  EC1F  F016         	call	_drawChar
 11311                           
 11312                           ;ST7735_TFT.c: 435: cursor_x = cursor_x + size * 6;
 11313  00366E  5040               	movf	drawtext@size,w,c
 11314  003670  0D06               	mullw	6
 11315  003672  50F3               	movf	prodl,w,c
 11316  003674  2449               	addwf	drawtext@cursor_x,w,c
 11317  003676  6E49               	movwf	drawtext@cursor_x,c
 11318                           
 11319                           ;ST7735_TFT.c: 436: if(cursor_x > 128) cursor_x = 128;
 11320  003678  0E80               	movlw	128
 11321  00367A  6449               	cpfsgt	drawtext@cursor_x,c
 11322  00367C  D003               	goto	l9392
 11323  00367E  0E80               	movlw	128
 11324  003680  6E49               	movwf	drawtext@cursor_x,c
 11325  003682  D000               	goto	l9392
 11326  003684                     l9392:
 11327  003684  4A46               	infsnz	drawtext@i,f,c
 11328  003686  2A47               	incf	drawtext@i+1,f,c
 11329  003688  D000               	goto	l9394
 11330  00368A                     l9394:
 11331  00368A  5044               	movf	drawtext@textsize,w,c
 11332  00368C  5C46               	subwf	drawtext@i,w,c
 11333  00368E  5045               	movf	drawtext@textsize+1,w,c
 11334  003690  5847               	subwfb	drawtext@i+1,w,c
 11335  003692  A0D8               	btfss	status,0,c
 11336  003694  D7A4               	goto	l9368
 11337  003696  0012               	return		;funcret
 11338  003698                     __end_of_drawtext:
 11339                           	opt stack 0
 11340                           tblptru	equ	0xFF8
 11341                           tblptrh	equ	0xFF7
 11342                           tblptrl	equ	0xFF6
 11343                           tablat	equ	0xFF5
 11344                           prodh	equ	0xFF4
 11345                           prodl	equ	0xFF3
 11346                           intcon	equ	0xFF2
 11347                           intcon2	equ	0xFF1
 11348                           intcon3	equ	0xFF0
 11349                           postinc0	equ	0xFEE
 11350                           wreg	equ	0xFE8
 11351                           postdec1	equ	0xFE5
 11352                           plusw1	equ	0xFE3
 11353                           fsr1l	equ	0xFE1
 11354                           indf2	equ	0xFDF
 11355                           postinc2	equ	0xFDE
 11356                           plusw2	equ	0xFDB
 11357                           fsr2h	equ	0xFDA
 11358                           fsr2l	equ	0xFD9
 11359                           status	equ	0xFD8
 11360                           
 11361 ;; *************** function _strlen *****************
 11362 ;; Defined at:
 11363 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;  s               2   16[COMRAM] PTR const unsigned char 
 11366 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11367 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11368 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11369 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11370 ;;		 -> Timing_Txt(23), 
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 11373 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_set_text(5), 
 11374 ;;		 -> RPM_Txt(5), Volt_Txt(6), DC_Txt(4), Fan_SW_Txt(4), 
 11375 ;;		 -> Fan_Mode_Txt(5), Fan_Set_Temp_Txt(4), Fan_Timer_Txt(4), Fan_Timer_Mode_Txt(4), 
 11376 ;;		 -> date_Txt(9), time_Txt(9), tempF_Txt(5), tempC_Txt(4), 
 11377 ;;		 -> Timing_Txt(23), 
 11378 ;; Return value:  Size  Location     Type
 11379 ;;                  2   16[COMRAM] unsigned int 
 11380 ;; Registers used:
 11381 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11382 ;; Tracked objects:
 11383 ;;		On entry : 0/0
 11384 ;;		On exit  : 0/0
 11385 ;;		Unchanged: 0/0
 11386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;Total ram usage:        6 bytes
 11392 ;; Hardware stack levels used:    1
 11393 ;; Hardware stack levels required when called:    3
 11394 ;; This function calls:
 11395 ;;		Nothing
 11396 ;; This function is called by:
 11397 ;;		_drawtext
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           	psect	text46
 11402  00476E                     __ptext46:
 11403                           	opt stack 0
 11404  00476E                     _strlen:
 11405                           	opt stack 25
 11406                           
 11407                           ;incstack = 0
 11408  00476E  C011  F015         	movff	strlen@s,strlen@cp
 11409  004772  C012  F016         	movff	strlen@s+1,strlen@cp+1
 11410  004776  D003               	goto	l5754
 11411  004778                     l5752:
 11412  004778  4A15               	infsnz	strlen@cp,f,c
 11413  00477A  2A16               	incf	strlen@cp+1,f,c
 11414  00477C  D000               	goto	l5754
 11415  00477E                     l5754:
 11416  00477E  C015  FFD9         	movff	strlen@cp,fsr2l
 11417  004782  C016  FFDA         	movff	strlen@cp+1,fsr2h
 11418  004786  50DF               	movf	indf2,w,c
 11419  004788  A4D8               	btfss	status,2,c
 11420  00478A  D7F6               	goto	l5752
 11421  00478C  C011  F013         	movff	strlen@s,??_strlen
 11422  004790  C012  F014         	movff	strlen@s+1,??_strlen+1
 11423  004794  1E13               	comf	??_strlen,f,c
 11424  004796  1E14               	comf	??_strlen+1,f,c
 11425  004798  4A13               	infsnz	??_strlen,f,c
 11426  00479A  2A14               	incf	??_strlen+1,f,c
 11427  00479C  5015               	movf	strlen@cp,w,c
 11428  00479E  2413               	addwf	??_strlen,w,c
 11429  0047A0  6E11               	movwf	?_strlen,c
 11430  0047A2  5016               	movf	strlen@cp+1,w,c
 11431  0047A4  2014               	addwfc	??_strlen+1,w,c
 11432  0047A6  6E12               	movwf	?_strlen+1,c
 11433  0047A8  D000               	goto	l2102
 11434  0047AA                     l2102:
 11435  0047AA  0012               	return		;funcret
 11436  0047AC                     __end_of_strlen:
 11437                           	opt stack 0
 11438                           tblptru	equ	0xFF8
 11439                           tblptrh	equ	0xFF7
 11440                           tblptrl	equ	0xFF6
 11441                           tablat	equ	0xFF5
 11442                           prodh	equ	0xFF4
 11443                           prodl	equ	0xFF3
 11444                           intcon	equ	0xFF2
 11445                           intcon2	equ	0xFF1
 11446                           intcon3	equ	0xFF0
 11447                           postinc0	equ	0xFEE
 11448                           wreg	equ	0xFE8
 11449                           postdec1	equ	0xFE5
 11450                           plusw1	equ	0xFE3
 11451                           fsr1l	equ	0xFE1
 11452                           indf2	equ	0xFDF
 11453                           postinc2	equ	0xFDE
 11454                           plusw2	equ	0xFDB
 11455                           fsr2h	equ	0xFDA
 11456                           fsr2l	equ	0xFD9
 11457                           status	equ	0xFD8
 11458                           
 11459 ;; *************** function _drawChar *****************
 11460 ;; Defined at:
 11461 ;;		line 395 in file "ST7735_TFT.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;  x               1    wreg     unsigned char 
 11464 ;;  y               1   45[COMRAM] unsigned char 
 11465 ;;  c               1   46[COMRAM] unsigned char 
 11466 ;;  color           2   47[COMRAM] unsigned int 
 11467 ;;  bg              2   49[COMRAM] unsigned int 
 11468 ;;  size            1   51[COMRAM] unsigned char 
 11469 ;; Auto vars:     Size  Location     Type
 11470 ;;  x               1   53[COMRAM] unsigned char 
 11471 ;;  line            1   52[COMRAM] unsigned char 
 11472 ;;  i               1   55[COMRAM] unsigned char 
 11473 ;;  j               1   54[COMRAM] unsigned char 
 11474 ;; Return value:  Size  Location     Type
 11475 ;;		None               void
 11476 ;; Registers used:
 11477 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11483 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;Total ram usage:       11 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    8
 11490 ;; This function calls:
 11491 ;;		___wmul
 11492 ;;		_drawPixel
 11493 ;;		_fillRect
 11494 ;; This function is called by:
 11495 ;;		_drawtext
 11496 ;; This function uses a non-reentrant model
 11497 ;;
 11498                           
 11499                           	psect	text47
 11500  002C3E                     __ptext47:
 11501                           	opt stack 0
 11502  002C3E                     _drawChar:
 11503                           	opt stack 20
 11504                           
 11505                           ;incstack = 0
 11506                           ;drawChar@x stored from wreg
 11507  002C3E  6E36               	movwf	drawChar@x,c
 11508                           
 11509                           ;ST7735_TFT.c: 397: char i, j;
 11510                           ;ST7735_TFT.c: 398: if((x >= 128) || (y >= 160))
 11511  002C40  0E80               	movlw	128
 11512  002C42  6036               	cpfslt	drawChar@x,c
 11513  002C44  D0A6               	goto	l274
 11514  002C46  0E9F               	movlw	159
 11515  002C48  642E               	cpfsgt	drawChar@y,c
 11516  002C4A  D001               	goto	l8698
 11517                           
 11518                           ;ST7735_TFT.c: 399: return;
 11519  002C4C  D0A2               	goto	l274
 11520  002C4E                     l8698:
 11521                           
 11522                           ;ST7735_TFT.c: 400: if(size < 1) size = 1;
 11523  002C4E  5034               	movf	drawChar@size,w,c
 11524  002C50  A4D8               	btfss	status,2,c
 11525  002C52  D003               	goto	l8702
 11526  002C54  0E01               	movlw	1
 11527  002C56  6E34               	movwf	drawChar@size,c
 11528  002C58  D000               	goto	l8702
 11529  002C5A                     l8702:
 11530                           
 11531                           ;ST7735_TFT.c: 401: if((c < ' ') || (c > '~'))
 11532  002C5A  0E1F               	movlw	31
 11533  002C5C  642F               	cpfsgt	drawChar@c,c
 11534  002C5E  D004               	goto	l8706
 11535  002C60  0E7E               	movlw	126
 11536  002C62  642F               	cpfsgt	drawChar@c,c
 11537  002C64  D003               	goto	l276
 11538  002C66  D000               	goto	l8706
 11539  002C68                     l8706:
 11540                           
 11541                           ;ST7735_TFT.c: 402: c = '?';
 11542  002C68  0E3F               	movlw	63
 11543  002C6A  6E2F               	movwf	drawChar@c,c
 11544  002C6C                     l276:
 11545                           
 11546                           ;ST7735_TFT.c: 403: for(i=0; i<5; i++ ) {
 11547  002C6C  0E00               	movlw	0
 11548  002C6E  6E38               	movwf	drawChar@i,c
 11549  002C70                     l8708:
 11550  002C70  0E04               	movlw	4
 11551  002C72  6438               	cpfsgt	drawChar@i,c
 11552  002C74  D001               	goto	l8712
 11553  002C76  D08D               	goto	l274
 11554  002C78                     l8712:
 11555                           
 11556                           ;ST7735_TFT.c: 404: unsigned char line;
 11557                           ;ST7735_TFT.c: 405: if(c < 'S')
 11558  002C78  0E53               	movlw	83
 11559  002C7A  602F               	cpfslt	drawChar@c,c
 11560  002C7C  D015               	goto	l8716
 11561                           
 11562                           ;ST7735_TFT.c: 406: line = font[(c - 32)*5 + i];
 11563  002C7E  0EE0               	movlw	224
 11564  002C80  242F               	addwf	drawChar@c,w,c
 11565  002C82  6E11               	movwf	___wmul@multiplier,c
 11566  002C84  6A12               	clrf	___wmul@multiplier+1,c
 11567  002C86  0EFF               	movlw	255
 11568  002C88  2212               	addwfc	___wmul@multiplier+1,f,c
 11569  002C8A  0E00               	movlw	0
 11570  002C8C  6E14               	movwf	___wmul@multiplicand+1,c
 11571  002C8E  0E05               	movlw	5
 11572  002C90  6E13               	movwf	___wmul@multiplicand,c
 11573  002C92  ECE7  F024         	call	___wmul	;wreg free
 11574  002C96  5038               	movf	drawChar@i,w,c
 11575  002C98  2611               	addwf	?___wmul,f,c
 11576  002C9A  0E00               	movlw	0
 11577  002C9C  2212               	addwfc	?___wmul+1,f,c
 11578  002C9E  0EC1               	movlw	low _font
 11579  002CA0  2411               	addwf	?___wmul,w,c
 11580  002CA2  6EF6               	movwf	tblptrl,c
 11581  002CA4  0EFB               	movlw	high _font
 11582  002CA6  D014               	goto	L8
 11583  002CA8                     l8716:
 11584                           
 11585                           ;ST7735_TFT.c: 407: else
 11586                           ;ST7735_TFT.c: 408: line = font2[(c - 'S')*5 + i];
 11587  002CA8  0EAD               	movlw	173
 11588  002CAA  242F               	addwf	drawChar@c,w,c
 11589  002CAC  6E11               	movwf	___wmul@multiplier,c
 11590  002CAE  6A12               	clrf	___wmul@multiplier+1,c
 11591  002CB0  0EFF               	movlw	255
 11592  002CB2  2212               	addwfc	___wmul@multiplier+1,f,c
 11593  002CB4  0E00               	movlw	0
 11594  002CB6  6E14               	movwf	___wmul@multiplicand+1,c
 11595  002CB8  0E05               	movlw	5
 11596  002CBA  6E13               	movwf	___wmul@multiplicand,c
 11597  002CBC  ECE7  F024         	call	___wmul	;wreg free
 11598  002CC0  5038               	movf	drawChar@i,w,c
 11599  002CC2  2611               	addwf	?___wmul,f,c
 11600  002CC4  0E00               	movlw	0
 11601  002CC6  2212               	addwfc	?___wmul+1,f,c
 11602  002CC8  0EC0               	movlw	low _font2
 11603  002CCA  2411               	addwf	?___wmul,w,c
 11604  002CCC  6EF6               	movwf	tblptrl,c
 11605  002CCE  0EFC               	movlw	high _font2
 11606  002CD0                     L8:
 11607  002CD0  2012               	addwfc	?___wmul+1,w,c
 11608  002CD2  6EF7               	movwf	tblptrh,c
 11609  002CD4                     	if	0	;There are less than 3 active tblptr bytes
 11610  002CD4                     	endif
 11611  002CD4  0008               	tblrd		*
 11612  002CD6  CFF5 F035          	movff	tablat,drawChar@line
 11613  002CDA  D000               	goto	l8718
 11614  002CDC                     l8718:
 11615                           
 11616                           ;ST7735_TFT.c: 409: for(j=0; j<7; j++, line >>= 1) {
 11617  002CDC  0E00               	movlw	0
 11618  002CDE  6E37               	movwf	drawChar@j,c
 11619  002CE0                     l8720:
 11620  002CE0  0E06               	movlw	6
 11621  002CE2  6437               	cpfsgt	drawChar@j,c
 11622  002CE4  D001               	goto	l283
 11623  002CE6  D053               	goto	l8744
 11624  002CE8                     l283:
 11625                           
 11626                           ;ST7735_TFT.c: 410: if(line & 0x01) {
 11627  002CE8  A035               	btfss	drawChar@line,0,c
 11628  002CEA  D023               	goto	l8730
 11629                           
 11630                           ;ST7735_TFT.c: 411: if(size == 1) drawPixel(x+i, y+j, color);
 11631  002CEC  0434               	decf	drawChar@size,w,c
 11632  002CEE  A4D8               	btfss	status,2,c
 11633  002CF0  D00C               	goto	l8728
 11634  002CF2  502E               	movf	drawChar@y,w,c
 11635  002CF4  2437               	addwf	drawChar@j,w,c
 11636  002CF6  6E18               	movwf	drawPixel@y,c
 11637  002CF8  C030  F019         	movff	drawChar@color,drawPixel@color
 11638  002CFC  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 11639  002D00  5036               	movf	drawChar@x,w,c
 11640  002D02  2438               	addwf	drawChar@i,w,c
 11641  002D04  EC62  F024         	call	_drawPixel
 11642  002D08  D03E               	goto	l8738
 11643  002D0A                     l8728:
 11644                           
 11645                           ;ST7735_TFT.c: 412: else fillRect(x+(i*size), y+(j*size), size, size, color);
 11646  002D0A  5037               	movf	drawChar@j,w,c
 11647  002D0C  0234               	mulwf	drawChar@size,c
 11648  002D0E  50F3               	movf	prodl,w,c
 11649  002D10  242E               	addwf	drawChar@y,w,c
 11650  002D12  6E23               	movwf	fillRect@y,c
 11651  002D14  C034  F024         	movff	drawChar@size,fillRect@w
 11652  002D18  C034  F025         	movff	drawChar@size,fillRect@h
 11653  002D1C  C030  F026         	movff	drawChar@color,fillRect@color
 11654  002D20  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 11655  002D24  5038               	movf	drawChar@i,w,c
 11656  002D26  0234               	mulwf	drawChar@size,c
 11657  002D28  50F3               	movf	prodl,w,c
 11658  002D2A  2436               	addwf	drawChar@x,w,c
 11659  002D2C  EC11  F023         	call	_fillRect
 11660                           
 11661                           ;ST7735_TFT.c: 413: }
 11662  002D30  D02A               	goto	l8738
 11663  002D32                     l8730:
 11664                           
 11665                           ;ST7735_TFT.c: 414: else if(bg != color) {
 11666  002D32  5030               	movf	drawChar@color,w,c
 11667  002D34  1832               	xorwf	drawChar@bg,w,c
 11668  002D36  E104               	bnz	u7230
 11669  002D38  5031               	movf	drawChar@color+1,w,c
 11670  002D3A  1833               	xorwf	drawChar@bg+1,w,c
 11671  002D3C  B4D8               	btfsc	status,2,c
 11672  002D3E  D023               	goto	l8738
 11673  002D40                     u7230:
 11674                           
 11675                           ;ST7735_TFT.c: 415: if(size == 1) drawPixel(x+i, y+j, bg);
 11676  002D40  0434               	decf	drawChar@size,w,c
 11677  002D42  A4D8               	btfss	status,2,c
 11678  002D44  D00C               	goto	l8736
 11679  002D46  502E               	movf	drawChar@y,w,c
 11680  002D48  2437               	addwf	drawChar@j,w,c
 11681  002D4A  6E18               	movwf	drawPixel@y,c
 11682  002D4C  C032  F019         	movff	drawChar@bg,drawPixel@color
 11683  002D50  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 11684  002D54  5036               	movf	drawChar@x,w,c
 11685  002D56  2438               	addwf	drawChar@i,w,c
 11686  002D58  EC62  F024         	call	_drawPixel
 11687  002D5C  D014               	goto	l8738
 11688  002D5E                     l8736:
 11689                           
 11690                           ;ST7735_TFT.c: 416: else fillRect(x+i*size, y+j*size, size, size, bg);
 11691  002D5E  5037               	movf	drawChar@j,w,c
 11692  002D60  0234               	mulwf	drawChar@size,c
 11693  002D62  50F3               	movf	prodl,w,c
 11694  002D64  242E               	addwf	drawChar@y,w,c
 11695  002D66  6E23               	movwf	fillRect@y,c
 11696  002D68  C034  F024         	movff	drawChar@size,fillRect@w
 11697  002D6C  C034  F025         	movff	drawChar@size,fillRect@h
 11698  002D70  C032  F026         	movff	drawChar@bg,fillRect@color
 11699  002D74  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 11700  002D78  5038               	movf	drawChar@i,w,c
 11701  002D7A  0234               	mulwf	drawChar@size,c
 11702  002D7C  50F3               	movf	prodl,w,c
 11703  002D7E  2436               	addwf	drawChar@x,w,c
 11704  002D80  EC11  F023         	call	_fillRect
 11705  002D84  D000               	goto	l8738
 11706  002D86                     l8738:
 11707  002D86  2A37               	incf	drawChar@j,f,c
 11708  002D88  90D8               	bcf	status,0,c
 11709  002D8A  3235               	rrcf	drawChar@line,f,c
 11710  002D8C  D7A9               	goto	l8720
 11711  002D8E                     l8744:
 11712  002D8E  2A38               	incf	drawChar@i,f,c
 11713  002D90  D76F               	goto	l8708
 11714  002D92                     l274:
 11715  002D92  0012               	return		;funcret
 11716  002D94                     __end_of_drawChar:
 11717                           	opt stack 0
 11718                           tblptru	equ	0xFF8
 11719                           tblptrh	equ	0xFF7
 11720                           tblptrl	equ	0xFF6
 11721                           tablat	equ	0xFF5
 11722                           prodh	equ	0xFF4
 11723                           prodl	equ	0xFF3
 11724                           intcon	equ	0xFF2
 11725                           intcon2	equ	0xFF1
 11726                           intcon3	equ	0xFF0
 11727                           postinc0	equ	0xFEE
 11728                           wreg	equ	0xFE8
 11729                           postdec1	equ	0xFE5
 11730                           plusw1	equ	0xFE3
 11731                           fsr1l	equ	0xFE1
 11732                           indf2	equ	0xFDF
 11733                           postinc2	equ	0xFDE
 11734                           plusw2	equ	0xFDB
 11735                           fsr2h	equ	0xFDA
 11736                           fsr2l	equ	0xFD9
 11737                           status	equ	0xFD8
 11738                           
 11739 ;; *************** function _fillRect *****************
 11740 ;; Defined at:
 11741 ;;		line 385 in file "ST7735_TFT.c"
 11742 ;; Parameters:    Size  Location     Type
 11743 ;;  x               1    wreg     unsigned char 
 11744 ;;  y               1   34[COMRAM] unsigned char 
 11745 ;;  w               1   35[COMRAM] unsigned char 
 11746 ;;  h               1   36[COMRAM] unsigned char 
 11747 ;;  color           2   37[COMRAM] unsigned int 
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;  x               1   42[COMRAM] unsigned char 
 11750 ;;  i               2   43[COMRAM] int 
 11751 ;; Return value:  Size  Location     Type
 11752 ;;		None               void
 11753 ;; Registers used:
 11754 ;;		wreg, status,2, status,0, cstack
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11760 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;Total ram usage:       11 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:    7
 11767 ;; This function calls:
 11768 ;;		_drawFastVLine
 11769 ;; This function is called by:
 11770 ;;		_drawChar
 11771 ;;		_Initialize_Setup_Time_Screen
 11772 ;;		_Update_Setup_Screen_Cursor_Forward
 11773 ;;		_Update_Setup_Screen_Cursor_Backward
 11774 ;; This function uses a non-reentrant model
 11775 ;;
 11776                           
 11777                           	psect	text48
 11778  004622                     __ptext48:
 11779                           	opt stack 0
 11780  004622                     _fillRect:
 11781                           	opt stack 20
 11782                           
 11783                           ;incstack = 0
 11784                           ;fillRect@x stored from wreg
 11785  004622  6E2B               	movwf	fillRect@x,c
 11786                           
 11787                           ;ST7735_TFT.c: 387: signed int i;
 11788                           ;ST7735_TFT.c: 389: for (i = x; i < x + w; i++)
 11789  004624  C02B  F02C         	movff	fillRect@x,fillRect@i
 11790  004628  6A2D               	clrf	fillRect@i+1,c
 11791  00462A  D00E               	goto	l5392
 11792  00462C                     l5388:
 11793                           
 11794                           ;ST7735_TFT.c: 390: {
 11795                           ;ST7735_TFT.c: 391: drawFastVLine(i, y, h, color);
 11796  00462C  C023  F018         	movff	fillRect@y,drawFastVLine@y
 11797  004630  C025  F019         	movff	fillRect@h,drawFastVLine@h
 11798  004634  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 11799  004638  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 11800  00463C  502C               	movf	fillRect@i,w,c
 11801  00463E  ECED  F01F         	call	_drawFastVLine
 11802  004642  4A2C               	infsnz	fillRect@i,f,c
 11803  004644  2A2D               	incf	fillRect@i+1,f,c
 11804  004646  D000               	goto	l5392
 11805  004648                     l5392:
 11806  004648  5024               	movf	fillRect@w,w,c
 11807  00464A  C02B  F028         	movff	fillRect@x,??_fillRect
 11808  00464E  6A29               	clrf	(??_fillRect+1)& (0+255),c
 11809  004650  2628               	addwf	??_fillRect,f,c
 11810  004652  0E00               	movlw	0
 11811  004654  2229               	addwfc	??_fillRect+1,f,c
 11812  004656  5028               	movf	??_fillRect,w,c
 11813  004658  5C2C               	subwf	fillRect@i,w,c
 11814  00465A  502D               	movf	fillRect@i+1,w,c
 11815  00465C  0A80               	xorlw	128
 11816  00465E  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 11817  004660  5029               	movf	??_fillRect+1,w,c
 11818  004662  0A80               	xorlw	128
 11819  004664  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 11820  004666  A0D8               	btfss	status,0,c
 11821  004668  D7E1               	goto	l5388
 11822  00466A  0012               	return		;funcret
 11823  00466C                     __end_of_fillRect:
 11824                           	opt stack 0
 11825                           tblptru	equ	0xFF8
 11826                           tblptrh	equ	0xFF7
 11827                           tblptrl	equ	0xFF6
 11828                           tablat	equ	0xFF5
 11829                           prodh	equ	0xFF4
 11830                           prodl	equ	0xFF3
 11831                           intcon	equ	0xFF2
 11832                           intcon2	equ	0xFF1
 11833                           intcon3	equ	0xFF0
 11834                           postinc0	equ	0xFEE
 11835                           wreg	equ	0xFE8
 11836                           postdec1	equ	0xFE5
 11837                           plusw1	equ	0xFE3
 11838                           fsr1l	equ	0xFE1
 11839                           indf2	equ	0xFDF
 11840                           postinc2	equ	0xFDE
 11841                           plusw2	equ	0xFDB
 11842                           fsr2h	equ	0xFDA
 11843                           fsr2l	equ	0xFD9
 11844                           status	equ	0xFD8
 11845                           
 11846 ;; *************** function _drawFastVLine *****************
 11847 ;; Defined at:
 11848 ;;		line 364 in file "ST7735_TFT.c"
 11849 ;; Parameters:    Size  Location     Type
 11850 ;;  x               1    wreg     unsigned char 
 11851 ;;  y               1   23[COMRAM] unsigned char 
 11852 ;;  h               1   24[COMRAM] unsigned char 
 11853 ;;  color           2   25[COMRAM] unsigned int 
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;  x               1   33[COMRAM] unsigned char 
 11856 ;;  lo              1   32[COMRAM] unsigned char 
 11857 ;;  hi              1   31[COMRAM] unsigned char 
 11858 ;; Return value:  Size  Location     Type
 11859 ;;		None               void
 11860 ;; Registers used:
 11861 ;;		wreg, status,2, status,0, cstack
 11862 ;; Tracked objects:
 11863 ;;		On entry : 0/0
 11864 ;;		On exit  : 0/0
 11865 ;;		Unchanged: 0/0
 11866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11867 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11868 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11869 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11870 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11871 ;;Total ram usage:       11 bytes
 11872 ;; Hardware stack levels used:    1
 11873 ;; Hardware stack levels required when called:    6
 11874 ;; This function calls:
 11875 ;;		_setAddrWindow
 11876 ;;		_spiwrite
 11877 ;; This function is called by:
 11878 ;;		_fillRect
 11879 ;;		_fillCircleHelper
 11880 ;;		_fillCircle
 11881 ;;		_drawRect
 11882 ;; This function uses a non-reentrant model
 11883 ;;
 11884                           
 11885                           	psect	text49
 11886  003FDA                     __ptext49:
 11887                           	opt stack 0
 11888  003FDA                     _drawFastVLine:
 11889                           	opt stack 20
 11890                           
 11891                           ;incstack = 0
 11892                           ;drawFastVLine@x stored from wreg
 11893  003FDA  6E22               	movwf	drawFastVLine@x,c
 11894                           
 11895                           ;ST7735_TFT.c: 366: unsigned char hi, lo;
 11896                           ;ST7735_TFT.c: 367: if((x >= 128) || (y >= 160))
 11897  003FDC  0E80               	movlw	128
 11898  003FDE  6022               	cpfslt	drawFastVLine@x,c
 11899  003FE0  D03F               	goto	l258
 11900  003FE2  0E9F               	movlw	159
 11901  003FE4  6418               	cpfsgt	drawFastVLine@y,c
 11902  003FE6  D001               	goto	l5292
 11903                           
 11904                           ;ST7735_TFT.c: 368: return;
 11905  003FE8  D03B               	goto	l258
 11906  003FEA                     l5292:
 11907                           
 11908                           ;ST7735_TFT.c: 369: if((y + h - 1) >= 160)
 11909  003FEA  0EFF               	movlw	255
 11910  003FEC  6E1C               	movwf	??_drawFastVLine& (0+255),c
 11911  003FEE  0EFF               	movlw	255
 11912  003FF0  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 11913  003FF2  5019               	movf	drawFastVLine@h,w,c
 11914  003FF4  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 11915  003FF8  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 11916  003FFA  261E               	addwf	??_drawFastVLine+2,f,c
 11917  003FFC  0E00               	movlw	0
 11918  003FFE  221F               	addwfc	??_drawFastVLine+3,f,c
 11919  004000  501C               	movf	??_drawFastVLine,w,c
 11920  004002  261E               	addwf	??_drawFastVLine+2,f,c
 11921  004004  501D               	movf	??_drawFastVLine+1,w,c
 11922  004006  221F               	addwfc	??_drawFastVLine+3,f,c
 11923  004008  BE1F               	btfsc	??_drawFastVLine+3,7,c
 11924  00400A  D00B               	goto	l5296
 11925  00400C  501F               	movf	??_drawFastVLine+3,w,c
 11926  00400E  E104               	bnz	u3360
 11927  004010  0EA0               	movlw	160
 11928  004012  5C1E               	subwf	??_drawFastVLine+2,w,c
 11929  004014  A0D8               	btfss	status,0,c
 11930  004016  D005               	goto	l5296
 11931  004018                     u3360:
 11932                           
 11933                           ;ST7735_TFT.c: 370: h = 160 - y;
 11934  004018  5018               	movf	drawFastVLine@y,w,c
 11935  00401A  0800               	sublw	0
 11936  00401C  0FA0               	addlw	160
 11937  00401E  6E19               	movwf	drawFastVLine@h,c
 11938  004020  D000               	goto	l5296
 11939  004022                     l5296:
 11940                           
 11941                           ;ST7735_TFT.c: 371: hi = color >> 8; lo = color;
 11942  004022  501B               	movf	drawFastVLine@color+1,w,c
 11943  004024  6E20               	movwf	drawFastVLine@hi,c
 11944  004026  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 11945                           
 11946                           ;ST7735_TFT.c: 372: setAddrWindow(x, y, x, y + h - 1);
 11947  00402A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 11948  00402E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 11949  004032  5018               	movf	drawFastVLine@y,w,c
 11950  004034  2419               	addwf	drawFastVLine@h,w,c
 11951  004036  6E1C               	movwf	??_drawFastVLine& (0+255),c
 11952  004038  041C               	decf	??_drawFastVLine,w,c
 11953  00403A  6E16               	movwf	setAddrWindow@y1,c
 11954  00403C  5022               	movf	drawFastVLine@x,w,c
 11955  00403E  EC48  F022         	call	_setAddrWindow
 11956                           
 11957                           ;ST7735_TFT.c: 373: PORTDbits.RD7 = 1;
 11958  004042  8E83               	bsf	3971,7,c	;volatile
 11959                           
 11960                           ;ST7735_TFT.c: 374: PORTCbits.RC4 = 0;
 11961  004044  9882               	bcf	3970,4,c	;volatile
 11962                           
 11963                           ;ST7735_TFT.c: 376: while (h--) {
 11964  004046  D007               	goto	l5308
 11965  004048                     l5306:
 11966                           
 11967                           ;ST7735_TFT.c: 377: spiwrite(hi);
 11968  004048  5020               	movf	drawFastVLine@hi,w,c
 11969  00404A  EC6F  F026         	call	_spiwrite
 11970                           
 11971                           ;ST7735_TFT.c: 378: spiwrite(lo);
 11972  00404E  5021               	movf	drawFastVLine@lo,w,c
 11973  004050  EC6F  F026         	call	_spiwrite
 11974  004054  D000               	goto	l5308
 11975  004056                     l5308:
 11976  004056  0619               	decf	drawFastVLine@h,f,c
 11977  004058  2819               	incf	drawFastVLine@h,w,c
 11978  00405A  A4D8               	btfss	status,2,c
 11979  00405C  D7F5               	goto	l5306
 11980                           
 11981                           ;ST7735_TFT.c: 379: }
 11982                           ;ST7735_TFT.c: 380: PORTCbits.RC4 = 1;
 11983  00405E  8882               	bsf	3970,4,c	;volatile
 11984  004060                     l258:
 11985  004060  0012               	return		;funcret
 11986  004062                     __end_of_drawFastVLine:
 11987                           	opt stack 0
 11988                           tblptru	equ	0xFF8
 11989                           tblptrh	equ	0xFF7
 11990                           tblptrl	equ	0xFF6
 11991                           tablat	equ	0xFF5
 11992                           prodh	equ	0xFF4
 11993                           prodl	equ	0xFF3
 11994                           intcon	equ	0xFF2
 11995                           intcon2	equ	0xFF1
 11996                           intcon3	equ	0xFF0
 11997                           postinc0	equ	0xFEE
 11998                           wreg	equ	0xFE8
 11999                           postdec1	equ	0xFE5
 12000                           plusw1	equ	0xFE3
 12001                           fsr1l	equ	0xFE1
 12002                           indf2	equ	0xFDF
 12003                           postinc2	equ	0xFDE
 12004                           plusw2	equ	0xFDB
 12005                           fsr2h	equ	0xFDA
 12006                           fsr2l	equ	0xFD9
 12007                           status	equ	0xFD8
 12008                           
 12009 ;; *************** function _drawPixel *****************
 12010 ;; Defined at:
 12011 ;;		line 355 in file "ST7735_TFT.c"
 12012 ;; Parameters:    Size  Location     Type
 12013 ;;  x               1    wreg     unsigned char 
 12014 ;;  y               1   23[COMRAM] unsigned char 
 12015 ;;  color           2   24[COMRAM] unsigned int 
 12016 ;; Auto vars:     Size  Location     Type
 12017 ;;  x               1   26[COMRAM] unsigned char 
 12018 ;; Return value:  Size  Location     Type
 12019 ;;		None               void
 12020 ;; Registers used:
 12021 ;;		wreg, status,2, status,0, cstack
 12022 ;; Tracked objects:
 12023 ;;		On entry : 0/0
 12024 ;;		On exit  : 0/0
 12025 ;;		Unchanged: 0/0
 12026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12027 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12030 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12031 ;;Total ram usage:        4 bytes
 12032 ;; Hardware stack levels used:    1
 12033 ;; Hardware stack levels required when called:    6
 12034 ;; This function calls:
 12035 ;;		_setAddrWindow
 12036 ;;		_write_data
 12037 ;; This function is called by:
 12038 ;;		_drawChar
 12039 ;;		_drawCircle
 12040 ;;		_drawCircleHelper
 12041 ;; This function uses a non-reentrant model
 12042 ;;
 12043                           
 12044                           	psect	text50
 12045  0048C4                     __ptext50:
 12046                           	opt stack 0
 12047  0048C4                     _drawPixel:
 12048                           	opt stack 21
 12049                           
 12050                           ;incstack = 0
 12051                           ;drawPixel@x stored from wreg
 12052  0048C4  6E1B               	movwf	drawPixel@x,c
 12053                           
 12054                           ;ST7735_TFT.c: 357: if((x >= 128) || (y >= 160))
 12055  0048C6  0E80               	movlw	128
 12056  0048C8  601B               	cpfslt	drawPixel@x,c
 12057  0048CA  D013               	goto	l252
 12058  0048CC  0E9F               	movlw	159
 12059  0048CE  6418               	cpfsgt	drawPixel@y,c
 12060  0048D0  D001               	goto	l5380
 12061                           
 12062                           ;ST7735_TFT.c: 358: return;
 12063  0048D2  D00F               	goto	l252
 12064  0048D4                     l5380:
 12065                           
 12066                           ;ST7735_TFT.c: 359: setAddrWindow(x,y,x+1,y+1);
 12067  0048D4  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 12068  0048D8  281B               	incf	drawPixel@x,w,c
 12069  0048DA  6E15               	movwf	setAddrWindow@x1,c
 12070  0048DC  2818               	incf	drawPixel@y,w,c
 12071  0048DE  6E16               	movwf	setAddrWindow@y1,c
 12072  0048E0  501B               	movf	drawPixel@x,w,c
 12073  0048E2  EC48  F022         	call	_setAddrWindow
 12074                           
 12075                           ;ST7735_TFT.c: 360: write_data(color >> 8);
 12076  0048E6  501A               	movf	drawPixel@color+1,w,c
 12077  0048E8  ECCA  F026         	call	_write_data
 12078                           
 12079                           ;ST7735_TFT.c: 361: write_data(color & 0xFF);
 12080  0048EC  5019               	movf	drawPixel@color,w,c
 12081  0048EE  ECCA  F026         	call	_write_data
 12082  0048F2                     l252:
 12083  0048F2  0012               	return		;funcret
 12084  0048F4                     __end_of_drawPixel:
 12085                           	opt stack 0
 12086                           tblptru	equ	0xFF8
 12087                           tblptrh	equ	0xFF7
 12088                           tblptrl	equ	0xFF6
 12089                           tablat	equ	0xFF5
 12090                           prodh	equ	0xFF4
 12091                           prodl	equ	0xFF3
 12092                           intcon	equ	0xFF2
 12093                           intcon2	equ	0xFF1
 12094                           intcon3	equ	0xFF0
 12095                           postinc0	equ	0xFEE
 12096                           wreg	equ	0xFE8
 12097                           postdec1	equ	0xFE5
 12098                           plusw1	equ	0xFE3
 12099                           fsr1l	equ	0xFE1
 12100                           indf2	equ	0xFDF
 12101                           postinc2	equ	0xFDE
 12102                           plusw2	equ	0xFDB
 12103                           fsr2h	equ	0xFDA
 12104                           fsr2l	equ	0xFD9
 12105                           status	equ	0xFD8
 12106                           
 12107 ;; *************** function _setAddrWindow *****************
 12108 ;; Defined at:
 12109 ;;		line 340 in file "ST7735_TFT.c"
 12110 ;; Parameters:    Size  Location     Type
 12111 ;;  x0              1    wreg     unsigned char 
 12112 ;;  y0              1   19[COMRAM] unsigned char 
 12113 ;;  x1              1   20[COMRAM] unsigned char 
 12114 ;;  y1              1   21[COMRAM] unsigned char 
 12115 ;; Auto vars:     Size  Location     Type
 12116 ;;  x0              1   22[COMRAM] unsigned char 
 12117 ;; Return value:  Size  Location     Type
 12118 ;;		None               void
 12119 ;; Registers used:
 12120 ;;		wreg, status,2, status,0, cstack
 12121 ;; Tracked objects:
 12122 ;;		On entry : 0/0
 12123 ;;		On exit  : 0/0
 12124 ;;		Unchanged: 0/0
 12125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12126 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;Total ram usage:        4 bytes
 12131 ;; Hardware stack levels used:    1
 12132 ;; Hardware stack levels required when called:    5
 12133 ;; This function calls:
 12134 ;;		_write_command
 12135 ;;		_write_data
 12136 ;; This function is called by:
 12137 ;;		_drawPixel
 12138 ;;		_drawFastVLine
 12139 ;;		_fillRectangle
 12140 ;;		_drawFastHLine
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           	psect	text51
 12145  004490                     __ptext51:
 12146                           	opt stack 0
 12147  004490                     _setAddrWindow:
 12148                           	opt stack 20
 12149                           
 12150                           ;incstack = 0
 12151                           ;setAddrWindow@x0 stored from wreg
 12152  004490  6E17               	movwf	setAddrWindow@x0,c
 12153                           
 12154                           ;ST7735_TFT.c: 342: write_command(0x2A);
 12155  004492  0E2A               	movlw	42
 12156  004494  ECD2  F026         	call	_write_command
 12157                           
 12158                           ;ST7735_TFT.c: 343: write_data(0);
 12159  004498  0E00               	movlw	0
 12160  00449A  ECCA  F026         	call	_write_data
 12161                           
 12162                           ;ST7735_TFT.c: 344: write_data(x0 + colstart);
 12163  00449E  5017               	movf	setAddrWindow@x0,w,c
 12164  0044A0  0100               	movlb	0	; () banked
 12165  0044A2  25CE               	addwf	_colstart& (0+255),w,b
 12166  0044A4  ECCA  F026         	call	_write_data
 12167                           
 12168                           ;ST7735_TFT.c: 345: write_data(0);
 12169  0044A8  0E00               	movlw	0
 12170  0044AA  ECCA  F026         	call	_write_data
 12171                           
 12172                           ;ST7735_TFT.c: 346: write_data(x1 + colstart);
 12173  0044AE  5015               	movf	setAddrWindow@x1,w,c
 12174  0044B0  0100               	movlb	0	; () banked
 12175  0044B2  25CE               	addwf	_colstart& (0+255),w,b
 12176  0044B4  ECCA  F026         	call	_write_data
 12177                           
 12178                           ;ST7735_TFT.c: 347: write_command(0x2B);
 12179  0044B8  0E2B               	movlw	43
 12180  0044BA  ECD2  F026         	call	_write_command
 12181                           
 12182                           ;ST7735_TFT.c: 348: write_data(0);
 12183  0044BE  0E00               	movlw	0
 12184  0044C0  ECCA  F026         	call	_write_data
 12185                           
 12186                           ;ST7735_TFT.c: 349: write_data(y0 + rowstart);
 12187  0044C4  5014               	movf	setAddrWindow@y0,w,c
 12188  0044C6  0100               	movlb	0	; () banked
 12189  0044C8  25D2               	addwf	_rowstart& (0+255),w,b
 12190  0044CA  ECCA  F026         	call	_write_data
 12191                           
 12192                           ;ST7735_TFT.c: 350: write_data(0);
 12193  0044CE  0E00               	movlw	0
 12194  0044D0  ECCA  F026         	call	_write_data
 12195                           
 12196                           ;ST7735_TFT.c: 351: write_data(y1 + rowstart);
 12197  0044D4  5016               	movf	setAddrWindow@y1,w,c
 12198  0044D6  0100               	movlb	0	; () banked
 12199  0044D8  25D2               	addwf	_rowstart& (0+255),w,b
 12200  0044DA  ECCA  F026         	call	_write_data
 12201                           
 12202                           ;ST7735_TFT.c: 352: write_command(0x2C);
 12203  0044DE  0E2C               	movlw	44
 12204  0044E0  ECD2  F026         	call	_write_command
 12205  0044E4  0012               	return		;funcret
 12206  0044E6                     __end_of_setAddrWindow:
 12207                           	opt stack 0
 12208                           tblptru	equ	0xFF8
 12209                           tblptrh	equ	0xFF7
 12210                           tblptrl	equ	0xFF6
 12211                           tablat	equ	0xFF5
 12212                           prodh	equ	0xFF4
 12213                           prodl	equ	0xFF3
 12214                           intcon	equ	0xFF2
 12215                           intcon2	equ	0xFF1
 12216                           intcon3	equ	0xFF0
 12217                           postinc0	equ	0xFEE
 12218                           wreg	equ	0xFE8
 12219                           postdec1	equ	0xFE5
 12220                           plusw1	equ	0xFE3
 12221                           fsr1l	equ	0xFE1
 12222                           indf2	equ	0xFDF
 12223                           postinc2	equ	0xFDE
 12224                           plusw2	equ	0xFDB
 12225                           fsr2h	equ	0xFDA
 12226                           fsr2l	equ	0xFD9
 12227                           status	equ	0xFD8
 12228                           
 12229 ;; *************** function _write_data *****************
 12230 ;; Defined at:
 12231 ;;		line 157 in file "ST7735_TFT.c"
 12232 ;; Parameters:    Size  Location     Type
 12233 ;;  data_           1    wreg     unsigned char 
 12234 ;; Auto vars:     Size  Location     Type
 12235 ;;  data_           1   18[COMRAM] unsigned char 
 12236 ;; Return value:  Size  Location     Type
 12237 ;;		None               void
 12238 ;; Registers used:
 12239 ;;		wreg, status,2, cstack
 12240 ;; Tracked objects:
 12241 ;;		On entry : 0/0
 12242 ;;		On exit  : 0/0
 12243 ;;		Unchanged: 0/0
 12244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12248 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12249 ;;Total ram usage:        1 bytes
 12250 ;; Hardware stack levels used:    1
 12251 ;; Hardware stack levels required when called:    4
 12252 ;; This function calls:
 12253 ;;		_spiwrite
 12254 ;; This function is called by:
 12255 ;;		_Rcmd1
 12256 ;;		_Rcmd2red
 12257 ;;		_Rcmd3
 12258 ;;		_setAddrWindow
 12259 ;;		_drawPixel
 12260 ;;		_TFT_GreenTab_Initialize
 12261 ;;		_Bcmd
 12262 ;;		_setScrollDefinition
 12263 ;;		_Rcmd2green
 12264 ;;		_VerticalScroll
 12265 ;; This function uses a non-reentrant model
 12266 ;;
 12267                           
 12268                           	psect	text52
 12269  004D94                     __ptext52:
 12270                           	opt stack 0
 12271  004D94                     _write_data:
 12272                           	opt stack 20
 12273                           
 12274                           ;incstack = 0
 12275                           ;write_data@data_ stored from wreg
 12276  004D94  6E13               	movwf	write_data@data_,c
 12277                           
 12278                           ;ST7735_TFT.c: 159: PORTCbits.RC4 = 0;
 12279  004D96  9882               	bcf	3970,4,c	;volatile
 12280                           
 12281                           ;ST7735_TFT.c: 160: PORTDbits.RD7 = 1;
 12282  004D98  8E83               	bsf	3971,7,c	;volatile
 12283                           
 12284                           ;ST7735_TFT.c: 161: spiwrite(data_);
 12285  004D9A  5013               	movf	write_data@data_,w,c
 12286  004D9C  EC6F  F026         	call	_spiwrite
 12287                           
 12288                           ;ST7735_TFT.c: 162: PORTCbits.RC4 = 1;
 12289  004DA0  8882               	bsf	3970,4,c	;volatile
 12290  004DA2  0012               	return		;funcret
 12291  004DA4                     __end_of_write_data:
 12292                           	opt stack 0
 12293                           tblptru	equ	0xFF8
 12294                           tblptrh	equ	0xFF7
 12295                           tblptrl	equ	0xFF6
 12296                           tablat	equ	0xFF5
 12297                           prodh	equ	0xFF4
 12298                           prodl	equ	0xFF3
 12299                           intcon	equ	0xFF2
 12300                           intcon2	equ	0xFF1
 12301                           intcon3	equ	0xFF0
 12302                           postinc0	equ	0xFEE
 12303                           wreg	equ	0xFE8
 12304                           postdec1	equ	0xFE5
 12305                           plusw1	equ	0xFE3
 12306                           fsr1l	equ	0xFE1
 12307                           indf2	equ	0xFDF
 12308                           postinc2	equ	0xFDE
 12309                           plusw2	equ	0xFDB
 12310                           fsr2h	equ	0xFDA
 12311                           fsr2l	equ	0xFD9
 12312                           status	equ	0xFD8
 12313                           
 12314 ;; *************** function _write_command *****************
 12315 ;; Defined at:
 12316 ;;		line 146 in file "ST7735_TFT.c"
 12317 ;; Parameters:    Size  Location     Type
 12318 ;;  cmd_            1    wreg     unsigned char 
 12319 ;; Auto vars:     Size  Location     Type
 12320 ;;  cmd_            1   18[COMRAM] unsigned char 
 12321 ;; Return value:  Size  Location     Type
 12322 ;;		None               void
 12323 ;; Registers used:
 12324 ;;		wreg, status,2, cstack
 12325 ;; Tracked objects:
 12326 ;;		On entry : 0/0
 12327 ;;		On exit  : 0/0
 12328 ;;		Unchanged: 0/0
 12329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12333 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12334 ;;Total ram usage:        1 bytes
 12335 ;; Hardware stack levels used:    1
 12336 ;; Hardware stack levels required when called:    4
 12337 ;; This function calls:
 12338 ;;		_spiwrite
 12339 ;; This function is called by:
 12340 ;;		_Rcmd1
 12341 ;;		_Rcmd2red
 12342 ;;		_Rcmd3
 12343 ;;		_setAddrWindow
 12344 ;;		_TFT_GreenTab_Initialize
 12345 ;;		_Bcmd
 12346 ;;		_setScrollDefinition
 12347 ;;		_Rcmd2green
 12348 ;;		_VerticalScroll
 12349 ;; This function uses a non-reentrant model
 12350 ;;
 12351                           
 12352                           	psect	text53
 12353  004DA4                     __ptext53:
 12354                           	opt stack 0
 12355  004DA4                     _write_command:
 12356                           	opt stack 20
 12357                           
 12358                           ;incstack = 0
 12359                           ;write_command@cmd_ stored from wreg
 12360  004DA4  6E13               	movwf	write_command@cmd_,c
 12361                           
 12362                           ;ST7735_TFT.c: 148: PORTCbits.RC4 = 0;
 12363  004DA6  9882               	bcf	3970,4,c	;volatile
 12364                           
 12365                           ;ST7735_TFT.c: 150: PORTDbits.RD7 = 0;
 12366  004DA8  9E83               	bcf	3971,7,c	;volatile
 12367                           
 12368                           ;ST7735_TFT.c: 151: spiwrite(cmd_);
 12369  004DAA  5013               	movf	write_command@cmd_,w,c
 12370  004DAC  EC6F  F026         	call	_spiwrite
 12371                           
 12372                           ;ST7735_TFT.c: 153: PORTCbits.RC4 = 1;
 12373  004DB0  8882               	bsf	3970,4,c	;volatile
 12374  004DB2  0012               	return		;funcret
 12375  004DB4                     __end_of_write_command:
 12376                           	opt stack 0
 12377                           tblptru	equ	0xFF8
 12378                           tblptrh	equ	0xFF7
 12379                           tblptrl	equ	0xFF6
 12380                           tablat	equ	0xFF5
 12381                           prodh	equ	0xFF4
 12382                           prodl	equ	0xFF3
 12383                           intcon	equ	0xFF2
 12384                           intcon2	equ	0xFF1
 12385                           intcon3	equ	0xFF0
 12386                           postinc0	equ	0xFEE
 12387                           wreg	equ	0xFE8
 12388                           postdec1	equ	0xFE5
 12389                           plusw1	equ	0xFE3
 12390                           fsr1l	equ	0xFE1
 12391                           indf2	equ	0xFDF
 12392                           postinc2	equ	0xFDE
 12393                           plusw2	equ	0xFDB
 12394                           fsr2h	equ	0xFDA
 12395                           fsr2l	equ	0xFD9
 12396                           status	equ	0xFD8
 12397                           
 12398 ;; *************** function _spiwrite *****************
 12399 ;; Defined at:
 12400 ;;		line 137 in file "ST7735_TFT.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  spidata         1    wreg     unsigned char 
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;  spidata         1   17[COMRAM] unsigned char 
 12405 ;;  x               1   16[COMRAM] unsigned char 
 12406 ;; Return value:  Size  Location     Type
 12407 ;;		None               void
 12408 ;; Registers used:
 12409 ;;		wreg
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;Total ram usage:        2 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    3
 12422 ;; This function calls:
 12423 ;;		Nothing
 12424 ;; This function is called by:
 12425 ;;		_write_command
 12426 ;;		_write_data
 12427 ;;		_drawFastVLine
 12428 ;;		_fillRectangle
 12429 ;;		_drawFastHLine
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           	psect	text54
 12434  004CDE                     __ptext54:
 12435                           	opt stack 0
 12436  004CDE                     _spiwrite:
 12437                           	opt stack 22
 12438                           
 12439                           ;incstack = 0
 12440                           ;spiwrite@spidata stored from wreg
 12441  004CDE  6E12               	movwf	spiwrite@spidata,c
 12442                           
 12443                           ;ST7735_TFT.c: 139: char x;
 12444                           ;ST7735_TFT.c: 140: PIR1bits.SSPIF = 0;
 12445  004CE0  969E               	bcf	3998,3,c	;volatile
 12446                           
 12447                           ;ST7735_TFT.c: 141: x = SSPBUF;
 12448  004CE2  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 12449                           
 12450                           ;ST7735_TFT.c: 142: SSPBUF = spidata;
 12451  004CE6  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 12452                           
 12453                           ;ST7735_TFT.c: 143: while (!SSPSTATbits.BF);
 12454  004CEA  D000               	goto	l208
 12455  004CEC                     l208:
 12456  004CEC  A0C7               	btfss	4039,0,c	;volatile
 12457  004CEE  D7FE               	goto	l208
 12458  004CF0  0012               	return		;funcret
 12459  004CF2                     __end_of_spiwrite:
 12460                           	opt stack 0
 12461                           tblptru	equ	0xFF8
 12462                           tblptrh	equ	0xFF7
 12463                           tblptrl	equ	0xFF6
 12464                           tablat	equ	0xFF5
 12465                           prodh	equ	0xFF4
 12466                           prodl	equ	0xFF3
 12467                           intcon	equ	0xFF2
 12468                           intcon2	equ	0xFF1
 12469                           intcon3	equ	0xFF0
 12470                           postinc0	equ	0xFEE
 12471                           wreg	equ	0xFE8
 12472                           postdec1	equ	0xFE5
 12473                           plusw1	equ	0xFE3
 12474                           fsr1l	equ	0xFE1
 12475                           indf2	equ	0xFDF
 12476                           postinc2	equ	0xFDE
 12477                           plusw2	equ	0xFDB
 12478                           fsr2h	equ	0xFDA
 12479                           fsr2l	equ	0xFD9
 12480                           status	equ	0xFD8
 12481                           
 12482 ;; *************** function _DS1621_Read_Temp *****************
 12483 ;; Defined at:
 12484 ;;		line 27 in file "I2C_Support.c"
 12485 ;; Parameters:    Size  Location     Type
 12486 ;;		None
 12487 ;; Auto vars:     Size  Location     Type
 12488 ;;  Device          1   23[COMRAM] unsigned char 
 12489 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 12490 ;;  Cmd             1   21[COMRAM] unsigned char 
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  2   19[COMRAM] int 
 12493 ;; Registers used:
 12494 ;;		wreg, status,2, status,0, cstack
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12500 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12501 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12503 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12504 ;;Total ram usage:        5 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; Hardware stack levels required when called:    6
 12507 ;; This function calls:
 12508 ;;		_I2C_ReStart
 12509 ;;		_I2C_Read
 12510 ;;		_I2C_Start
 12511 ;;		_I2C_Stop
 12512 ;;		_I2C_Write
 12513 ;; This function is called by:
 12514 ;;		_main
 12515 ;;		_Setup_Fan_Temp
 12516 ;;		_Do_Setup_Time
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           	psect	text55
 12521  004826                     __ptext55:
 12522                           	opt stack 0
 12523  004826                     _DS1621_Read_Temp:
 12524                           	opt stack 23
 12525                           
 12526                           ;I2C_Support.c: 30: char Device = 0x48;
 12527                           
 12528                           ;incstack = 0
 12529  004826  0E48               	movlw	72
 12530  004828  6E18               	movwf	DS1621_Read_Temp@Device,c
 12531                           
 12532                           ;I2C_Support.c: 31: char Cmd = 0xAA;
 12533  00482A  0EAA               	movlw	170
 12534  00482C  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 12535                           
 12536                           ;I2C_Support.c: 32: char Data_Ret;
 12537                           ;I2C_Support.c: 33: I2C_Start();
 12538  00482E  EC9E  F026         	call	_I2C_Start	;wreg free
 12539                           
 12540                           ;I2C_Support.c: 34: I2C_Write((Device << 1) | 0);
 12541  004832  5018               	movf	DS1621_Read_Temp@Device,w,c
 12542  004834  2418               	addwf	DS1621_Read_Temp@Device,w,c
 12543  004836  ECD6  F023         	call	_I2C_Write
 12544                           
 12545                           ;I2C_Support.c: 35: I2C_Write(Cmd);
 12546  00483A  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 12547  00483C  ECD6  F023         	call	_I2C_Write
 12548                           
 12549                           ;I2C_Support.c: 36: I2C_ReStart();
 12550  004840  EC50  F026         	call	_I2C_ReStart	;wreg free
 12551                           
 12552                           ;I2C_Support.c: 37: I2C_Write((Device << 1) | 1);
 12553  004844  80D8               	bsf	status,0,c
 12554  004846  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 12555  004848  ECD6  F023         	call	_I2C_Write
 12556                           
 12557                           ;I2C_Support.c: 38: Data_Ret = I2C_Read(0);
 12558  00484C  0E00               	movlw	0
 12559  00484E  EC36  F023         	call	_I2C_Read
 12560  004852  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 12561                           
 12562                           ;I2C_Support.c: 39: I2C_Stop();
 12563  004854  EC95  F026         	call	_I2C_Stop	;wreg free
 12564                           
 12565                           ;I2C_Support.c: 40: return Data_Ret;
 12566  004858  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 12567  00485C  6A15               	clrf	?_DS1621_Read_Temp+1,c
 12568  00485E  D000               	goto	l560
 12569  004860                     l560:
 12570  004860  0012               	return		;funcret
 12571  004862                     __end_of_DS1621_Read_Temp:
 12572                           	opt stack 0
 12573                           tblptru	equ	0xFF8
 12574                           tblptrh	equ	0xFF7
 12575                           tblptrl	equ	0xFF6
 12576                           tablat	equ	0xFF5
 12577                           prodh	equ	0xFF4
 12578                           prodl	equ	0xFF3
 12579                           intcon	equ	0xFF2
 12580                           intcon2	equ	0xFF1
 12581                           intcon3	equ	0xFF0
 12582                           postinc0	equ	0xFEE
 12583                           wreg	equ	0xFE8
 12584                           postdec1	equ	0xFE5
 12585                           plusw1	equ	0xFE3
 12586                           fsr1l	equ	0xFE1
 12587                           indf2	equ	0xFDF
 12588                           postinc2	equ	0xFDE
 12589                           plusw2	equ	0xFDB
 12590                           fsr2h	equ	0xFDA
 12591                           fsr2l	equ	0xFD9
 12592                           status	equ	0xFD8
 12593                           
 12594 ;; *************** function _I2C_Read *****************
 12595 ;; Defined at:
 12596 ;;		line 16 in file "I2C_Soft.c"
 12597 ;; Parameters:    Size  Location     Type
 12598 ;;  ack             1    wreg     unsigned char 
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;  ack             1   16[COMRAM] unsigned char 
 12601 ;;  inByte          1   18[COMRAM] unsigned char 
 12602 ;;  n               1   17[COMRAM] unsigned char 
 12603 ;; Return value:  Size  Location     Type
 12604 ;;                  1    wreg      unsigned char 
 12605 ;; Registers used:
 12606 ;;		wreg, status,2, status,0, cstack
 12607 ;; Tracked objects:
 12608 ;;		On entry : 0/0
 12609 ;;		On exit  : 0/0
 12610 ;;		Unchanged: 0/0
 12611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12613 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12615 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12616 ;;Total ram usage:        3 bytes
 12617 ;; Hardware stack levels used:    1
 12618 ;; Hardware stack levels required when called:    5
 12619 ;; This function calls:
 12620 ;;		_i2cAck
 12621 ;;		_i2cHighScl
 12622 ;;		_i2cHighSda
 12623 ;;		_i2cLowScl
 12624 ;;		_i2cNack
 12625 ;; This function is called by:
 12626 ;;		_DS1621_Read_Temp
 12627 ;;		_DS3231_Read_Time
 12628 ;;		_I2C_Write_Address_Read_One_Byte
 12629 ;;		_I2C_Write_Cmd_Read_One_Byte
 12630 ;; This function uses a non-reentrant model
 12631 ;;
 12632                           
 12633                           	psect	text56
 12634  00466C                     __ptext56:
 12635                           	opt stack 0
 12636  00466C                     _I2C_Read:
 12637                           	opt stack 22
 12638                           
 12639                           ;incstack = 0
 12640                           ;I2C_Read@ack stored from wreg
 12641  00466C  6E11               	movwf	I2C_Read@ack,c
 12642                           
 12643                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 12644                           ;I2C_Soft.c: 19: i2cHighSda();
 12645  00466E  EC0C  F027         	call	_i2cHighSda	;wreg free
 12646                           
 12647                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 12648  004672  0E00               	movlw	0
 12649  004674  6E12               	movwf	I2C_Read@n,c
 12650  004676                     l6410:
 12651  004676  0E07               	movlw	7
 12652  004678  6412               	cpfsgt	I2C_Read@n,c
 12653  00467A  D001               	goto	l6414
 12654  00467C  D00F               	goto	l6428
 12655  00467E                     l6414:
 12656                           
 12657                           ;I2C_Soft.c: 21: {
 12658                           ;I2C_Soft.c: 22: i2cHighScl();
 12659  00467E  ECE8  F026         	call	_i2cHighScl	;wreg free
 12660                           
 12661                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
 12662  004682  AA81               	btfss	3969,5,c	;volatile
 12663  004684  D003               	goto	l6420
 12664                           
 12665                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 12666  004686  80D8               	bsf	status,0,c
 12667  004688  3613               	rlcf	I2C_Read@inByte,f,c
 12668  00468A  D004               	goto	l6422
 12669  00468C                     l6420:
 12670                           
 12671                           ;I2C_Soft.c: 26: else
 12672                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 12673  00468C  5013               	movf	I2C_Read@inByte,w,c
 12674  00468E  2413               	addwf	I2C_Read@inByte,w,c
 12675  004690  6E13               	movwf	I2C_Read@inByte,c
 12676  004692  D000               	goto	l6422
 12677  004694                     l6422:
 12678                           
 12679                           ;I2C_Soft.c: 28: i2cLowScl();
 12680  004694  EC08  F027         	call	_i2cLowScl	;wreg free
 12681  004698  2A12               	incf	I2C_Read@n,f,c
 12682  00469A  D7ED               	goto	l6410
 12683  00469C                     l6428:
 12684                           
 12685                           ;I2C_Soft.c: 29: }
 12686                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 12687  00469C  5011               	movf	I2C_Read@ack,w,c
 12688  00469E  B4D8               	btfsc	status,2,c
 12689  0046A0  D003               	goto	l6432
 12690  0046A2  EC8C  F026         	call	_i2cAck	;wreg free
 12691  0046A6  D003               	goto	l6434
 12692  0046A8                     l6432:
 12693                           
 12694                           ;I2C_Soft.c: 31: else i2cNack();
 12695  0046A8  ECF4  F026         	call	_i2cNack	;wreg free
 12696  0046AC  D000               	goto	l6434
 12697  0046AE                     l6434:
 12698                           
 12699                           ;I2C_Soft.c: 34: return(inByte);
 12700  0046AE  5013               	movf	I2C_Read@inByte,w,c
 12701  0046B0  D000               	goto	l112
 12702  0046B2                     l112:
 12703  0046B2  0012               	return		;funcret
 12704  0046B4                     __end_of_I2C_Read:
 12705                           	opt stack 0
 12706                           tblptru	equ	0xFF8
 12707                           tblptrh	equ	0xFF7
 12708                           tblptrl	equ	0xFF6
 12709                           tablat	equ	0xFF5
 12710                           prodh	equ	0xFF4
 12711                           prodl	equ	0xFF3
 12712                           intcon	equ	0xFF2
 12713                           intcon2	equ	0xFF1
 12714                           intcon3	equ	0xFF0
 12715                           postinc0	equ	0xFEE
 12716                           wreg	equ	0xFE8
 12717                           postdec1	equ	0xFE5
 12718                           plusw1	equ	0xFE3
 12719                           fsr1l	equ	0xFE1
 12720                           indf2	equ	0xFDF
 12721                           postinc2	equ	0xFDE
 12722                           plusw2	equ	0xFDB
 12723                           fsr2h	equ	0xFDA
 12724                           fsr2l	equ	0xFD9
 12725                           status	equ	0xFD8
 12726                           
 12727 ;; *************** function _i2cNack *****************
 12728 ;; Defined at:
 12729 ;;		line 53 in file "I2C_Soft.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;		None
 12732 ;; Auto vars:     Size  Location     Type
 12733 ;;		None
 12734 ;; Return value:  Size  Location     Type
 12735 ;;		None               void
 12736 ;; Registers used:
 12737 ;;		wreg, cstack
 12738 ;; Tracked objects:
 12739 ;;		On entry : 0/0
 12740 ;;		On exit  : 0/0
 12741 ;;		Unchanged: 0/0
 12742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12747 ;;Total ram usage:        0 bytes
 12748 ;; Hardware stack levels used:    1
 12749 ;; Hardware stack levels required when called:    4
 12750 ;; This function calls:
 12751 ;;		_i2cHighScl
 12752 ;;		_i2cLowScl
 12753 ;; This function is called by:
 12754 ;;		_I2C_Read
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758                           	psect	text57
 12759  004DE8                     __ptext57:
 12760                           	opt stack 0
 12761  004DE8                     _i2cNack:
 12762                           	opt stack 22
 12763                           
 12764                           ;I2C_Soft.c: 55: i2cHighScl();
 12765                           
 12766                           ;incstack = 0
 12767  004DE8  ECE8  F026         	call	_i2cHighScl	;wreg free
 12768                           
 12769                           ;I2C_Soft.c: 56: i2cLowScl();
 12770  004DEC  EC08  F027         	call	_i2cLowScl	;wreg free
 12771  004DF0  0012               	return		;funcret
 12772  004DF2                     __end_of_i2cNack:
 12773                           	opt stack 0
 12774                           tblptru	equ	0xFF8
 12775                           tblptrh	equ	0xFF7
 12776                           tblptrl	equ	0xFF6
 12777                           tablat	equ	0xFF5
 12778                           prodh	equ	0xFF4
 12779                           prodl	equ	0xFF3
 12780                           intcon	equ	0xFF2
 12781                           intcon2	equ	0xFF1
 12782                           intcon3	equ	0xFF0
 12783                           postinc0	equ	0xFEE
 12784                           wreg	equ	0xFE8
 12785                           postdec1	equ	0xFE5
 12786                           plusw1	equ	0xFE3
 12787                           fsr1l	equ	0xFE1
 12788                           indf2	equ	0xFDF
 12789                           postinc2	equ	0xFDE
 12790                           plusw2	equ	0xFDB
 12791                           fsr2h	equ	0xFDA
 12792                           fsr2l	equ	0xFD9
 12793                           status	equ	0xFD8
 12794                           
 12795 ;; *************** function _i2cAck *****************
 12796 ;; Defined at:
 12797 ;;		line 59 in file "I2C_Soft.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;		None
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;		None
 12802 ;; Return value:  Size  Location     Type
 12803 ;;		None               void
 12804 ;; Registers used:
 12805 ;;		wreg, cstack
 12806 ;; Tracked objects:
 12807 ;;		On entry : 0/0
 12808 ;;		On exit  : 0/0
 12809 ;;		Unchanged: 0/0
 12810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;Total ram usage:        0 bytes
 12816 ;; Hardware stack levels used:    1
 12817 ;; Hardware stack levels required when called:    4
 12818 ;; This function calls:
 12819 ;;		_i2cHighScl
 12820 ;;		_i2cHighSda
 12821 ;;		_i2cLowScl
 12822 ;;		_i2cLowSda
 12823 ;; This function is called by:
 12824 ;;		_I2C_Read
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           	psect	text58
 12829  004D18                     __ptext58:
 12830                           	opt stack 0
 12831  004D18                     _i2cAck:
 12832                           	opt stack 22
 12833                           
 12834                           ;I2C_Soft.c: 61: i2cLowSda();
 12835                           
 12836                           ;incstack = 0
 12837  004D18  ECFE  F026         	call	_i2cLowSda	;wreg free
 12838                           
 12839                           ;I2C_Soft.c: 62: i2cHighScl();
 12840  004D1C  ECE8  F026         	call	_i2cHighScl	;wreg free
 12841                           
 12842                           ;I2C_Soft.c: 63: i2cLowScl();
 12843  004D20  EC08  F027         	call	_i2cLowScl	;wreg free
 12844                           
 12845                           ;I2C_Soft.c: 64: i2cHighSda();
 12846  004D24  EC0C  F027         	call	_i2cHighSda	;wreg free
 12847  004D28  0012               	return		;funcret
 12848  004D2A                     __end_of_i2cAck:
 12849                           	opt stack 0
 12850                           tblptru	equ	0xFF8
 12851                           tblptrh	equ	0xFF7
 12852                           tblptrl	equ	0xFF6
 12853                           tablat	equ	0xFF5
 12854                           prodh	equ	0xFF4
 12855                           prodl	equ	0xFF3
 12856                           intcon	equ	0xFF2
 12857                           intcon2	equ	0xFF1
 12858                           intcon3	equ	0xFF0
 12859                           postinc0	equ	0xFEE
 12860                           wreg	equ	0xFE8
 12861                           postdec1	equ	0xFE5
 12862                           plusw1	equ	0xFE3
 12863                           fsr1l	equ	0xFE1
 12864                           indf2	equ	0xFDF
 12865                           postinc2	equ	0xFDE
 12866                           plusw2	equ	0xFDB
 12867                           fsr2h	equ	0xFDA
 12868                           fsr2l	equ	0xFD9
 12869                           status	equ	0xFD8
 12870                           
 12871 ;; *************** function _I2C_ReStart *****************
 12872 ;; Defined at:
 12873 ;;		line 75 in file "I2C_Soft.c"
 12874 ;; Parameters:    Size  Location     Type
 12875 ;;		None
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;		None
 12878 ;; Return value:  Size  Location     Type
 12879 ;;		None               void
 12880 ;; Registers used:
 12881 ;;		wreg, cstack
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;Total ram usage:        0 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    4
 12894 ;; This function calls:
 12895 ;;		_i2cHighScl
 12896 ;;		_i2cHighSda
 12897 ;;		_i2cLowScl
 12898 ;;		_i2cLowSda
 12899 ;; This function is called by:
 12900 ;;		_DS1621_Read_Temp
 12901 ;;		_DS3231_Read_Time
 12902 ;;		_I2C_Write_Address_Read_One_Byte
 12903 ;;		_I2C_Write_Cmd_Read_One_Byte
 12904 ;;		_DS3231_Init
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           	psect	text59
 12909  004CA0                     __ptext59:
 12910                           	opt stack 0
 12911  004CA0                     _I2C_ReStart:
 12912                           	opt stack 23
 12913                           
 12914                           ;I2C_Soft.c: 77: i2cLowScl();
 12915                           
 12916                           ;incstack = 0
 12917  004CA0  EC08  F027         	call	_i2cLowScl	;wreg free
 12918                           
 12919                           ;I2C_Soft.c: 78: i2cHighSda();
 12920  004CA4  EC0C  F027         	call	_i2cHighSda	;wreg free
 12921                           
 12922                           ;I2C_Soft.c: 79: i2cHighScl();
 12923  004CA8  ECE8  F026         	call	_i2cHighScl	;wreg free
 12924                           
 12925                           ;I2C_Soft.c: 80: i2cLowSda();
 12926  004CAC  ECFE  F026         	call	_i2cLowSda	;wreg free
 12927                           
 12928                           ;I2C_Soft.c: 81: i2cLowScl();
 12929  004CB0  EC08  F027         	call	_i2cLowScl	;wreg free
 12930  004CB4  0012               	return		;funcret
 12931  004CB6                     __end_of_I2C_ReStart:
 12932                           	opt stack 0
 12933                           tblptru	equ	0xFF8
 12934                           tblptrh	equ	0xFF7
 12935                           tblptrl	equ	0xFF6
 12936                           tablat	equ	0xFF5
 12937                           prodh	equ	0xFF4
 12938                           prodl	equ	0xFF3
 12939                           intcon	equ	0xFF2
 12940                           intcon2	equ	0xFF1
 12941                           intcon3	equ	0xFF0
 12942                           postinc0	equ	0xFEE
 12943                           wreg	equ	0xFE8
 12944                           postdec1	equ	0xFE5
 12945                           plusw1	equ	0xFE3
 12946                           fsr1l	equ	0xFE1
 12947                           indf2	equ	0xFDF
 12948                           postinc2	equ	0xFDE
 12949                           plusw2	equ	0xFDB
 12950                           fsr2h	equ	0xFDA
 12951                           fsr2l	equ	0xFD9
 12952                           status	equ	0xFD8
 12953                           
 12954 ;; *************** function _Do_Init *****************
 12955 ;; Defined at:
 12956 ;;		line 86 in file "Main.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;		None
 12959 ;; Auto vars:     Size  Location     Type
 12960 ;;		None
 12961 ;; Return value:  Size  Location     Type
 12962 ;;		None               void
 12963 ;; Registers used:
 12964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12965 ;; Tracked objects:
 12966 ;;		On entry : 0/0
 12967 ;;		On exit  : 0/0
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12974 ;;Total ram usage:        0 bytes
 12975 ;; Hardware stack levels used:    1
 12976 ;; Hardware stack levels required when called:    8
 12977 ;; This function calls:
 12978 ;;		_DS1621_Init
 12979 ;;		_I2C_Init
 12980 ;;		_Init_ADC
 12981 ;;		_Init_Interrupt
 12982 ;;		_Init_UART
 12983 ;;		_Turn_Off_Fan
 12984 ;; This function is called by:
 12985 ;;		_main
 12986 ;; This function uses a non-reentrant model
 12987 ;;
 12988                           
 12989                           	psect	text60
 12990  0043DC                     __ptext60:
 12991                           	opt stack 0
 12992  0043DC                     _Do_Init:
 12993                           	opt stack 22
 12994                           
 12995                           ;Main.c: 88: Init_UART();
 12996                           
 12997                           ;incstack = 0
 12998  0043DC  EC79  F026         	call	_Init_UART	;wreg free
 12999                           
 13000                           ;Main.c: 89: Init_ADC();
 13001  0043E0  ECE1  F026         	call	_Init_ADC	;wreg free
 13002                           
 13003                           ;Main.c: 90: OSCCON=0x70;
 13004  0043E4  0E70               	movlw	112
 13005  0043E6  6ED3               	movwf	4051,c	;volatile
 13006                           
 13007                           ;Main.c: 92: ADCON1= 0x0E;
 13008  0043E8  0E0E               	movlw	14
 13009  0043EA  6EC1               	movwf	4033,c	;volatile
 13010                           
 13011                           ;Main.c: 93: TRISA = 0x03;
 13012  0043EC  0E03               	movlw	3
 13013  0043EE  6E92               	movwf	3986,c	;volatile
 13014                           
 13015                           ;Main.c: 94: TRISB = 0x07;
 13016  0043F0  0E07               	movlw	7
 13017  0043F2  6E93               	movwf	3987,c	;volatile
 13018                           
 13019                           ;Main.c: 95: TRISC = 0x01;
 13020  0043F4  0E01               	movlw	1
 13021  0043F6  6E94               	movwf	3988,c	;volatile
 13022                           
 13023                           ;Main.c: 96: TRISD = 0x00;
 13024  0043F8  0E00               	movlw	0
 13025  0043FA  6E95               	movwf	3989,c	;volatile
 13026                           
 13027                           ;Main.c: 97: TRISE = 0x00;
 13028  0043FC  0E00               	movlw	0
 13029  0043FE  6E96               	movwf	3990,c	;volatile
 13030                           
 13031                           ;Main.c: 98: PORTE = 0x00;
 13032  004400  0E00               	movlw	0
 13033  004402  6E84               	movwf	3972,c	;volatile
 13034                           
 13035                           ;Main.c: 100: FAN = 0;
 13036  004404  0E00               	movlw	0
 13037  004406  0100               	movlb	0	; () banked
 13038  004408  6FC1               	movwf	_FAN& (0+255),b
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;Main.c: 101: RBPU =0;
 13042  00440A  9EF1               	bcf	intcon2,7,c	;volatile
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;Main.c: 103: I2C_Init(100000);
 13046  00440C  0EA0               	movlw	160
 13047  00440E  6E11               	movwf	I2C_Init@c,c
 13048  004410  0E86               	movlw	134
 13049  004412  6E12               	movwf	I2C_Init@c+1,c
 13050  004414  0E01               	movlw	1
 13051  004416  6E13               	movwf	I2C_Init@c+2,c
 13052  004418  0E00               	movlw	0
 13053  00441A  6E14               	movwf	I2C_Init@c+3,c
 13054  00441C  ECF9  F026         	call	_I2C_Init	;wreg free
 13055                           
 13056                           ;Main.c: 105: DS1621_Init();
 13057  004420  ECBB  F025         	call	_DS1621_Init	;wreg free
 13058                           
 13059                           ;Main.c: 106: Init_Interrupt();
 13060  004424  EC46  F025         	call	_Init_Interrupt	;wreg free
 13061                           
 13062                           ;Main.c: 107: duty_cycle = 50;
 13063  004428  0E32               	movlw	50
 13064  00442A  6E64               	movwf	_duty_cycle,c
 13065                           
 13066                           ;Main.c: 108: Turn_Off_Fan();
 13067  00442C  ECD8  F025         	call	_Turn_Off_Fan	;wreg free
 13068                           
 13069                           ;Main.c: 109: fan_set_temp = 77;
 13070  004430  0E4D               	movlw	77
 13071  004432  0100               	movlb	0	; () banked
 13072  004434  6FDC               	movwf	_fan_set_temp& (0+255),b
 13073                           
 13074                           ; BSR set to: 0
 13075  004436  0012               	return		;funcret
 13076  004438                     __end_of_Do_Init:
 13077                           	opt stack 0
 13078                           tblptru	equ	0xFF8
 13079                           tblptrh	equ	0xFF7
 13080                           tblptrl	equ	0xFF6
 13081                           tablat	equ	0xFF5
 13082                           prodh	equ	0xFF4
 13083                           prodl	equ	0xFF3
 13084                           intcon	equ	0xFF2
 13085                           intcon2	equ	0xFF1
 13086                           intcon3	equ	0xFF0
 13087                           postinc0	equ	0xFEE
 13088                           wreg	equ	0xFE8
 13089                           postdec1	equ	0xFE5
 13090                           plusw1	equ	0xFE3
 13091                           fsr1l	equ	0xFE1
 13092                           indf2	equ	0xFDF
 13093                           postinc2	equ	0xFDE
 13094                           plusw2	equ	0xFDB
 13095                           fsr2h	equ	0xFDA
 13096                           fsr2l	equ	0xFD9
 13097                           status	equ	0xFD8
 13098                           
 13099 ;; *************** function _Turn_Off_Fan *****************
 13100 ;; Defined at:
 13101 ;;		line 87 in file "Fan_Support.c"
 13102 ;; Parameters:    Size  Location     Type
 13103 ;;		None
 13104 ;; Auto vars:     Size  Location     Type
 13105 ;;		None
 13106 ;; Return value:  Size  Location     Type
 13107 ;;		None               void
 13108 ;; Registers used:
 13109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13110 ;; Tracked objects:
 13111 ;;		On entry : 0/0
 13112 ;;		On exit  : 0/0
 13113 ;;		Unchanged: 0/0
 13114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13119 ;;Total ram usage:        0 bytes
 13120 ;; Hardware stack levels used:    1
 13121 ;; Hardware stack levels required when called:    7
 13122 ;; This function calls:
 13123 ;;		_printf
 13124 ;; This function is called by:
 13125 ;;		_Monitor_Fan
 13126 ;;		_Toggle_Fan
 13127 ;;		_Do_Init
 13128 ;;		_main
 13129 ;; This function uses a non-reentrant model
 13130 ;;
 13131                           
 13132                           	psect	text61
 13133  004BB0                     __ptext61:
 13134                           	opt stack 0
 13135  004BB0                     _Turn_Off_Fan:
 13136                           	opt stack 23
 13137                           
 13138                           ;Fan_Support.c: 89: printf ("Fan is turned off\r\n");
 13139                           
 13140                           ; BSR set to: 0
 13141                           ;incstack = 0
 13142  004BB0  0E34               	movlw	low STR_1
 13143  004BB2  0100               	movlb	0	; () banked
 13144  004BB4  6F86               	movwf	printf@f& (0+255),b
 13145  004BB6  0EFF               	movlw	high STR_1
 13146  004BB8  0100               	movlb	0	; () banked
 13147  004BBA  6F87               	movwf	(printf@f+1)& (0+255),b
 13148  004BBC  EC0E  F000         	call	_printf	;wreg free
 13149                           
 13150                           ;Fan_Support.c: 91: FAN = 0;
 13151  004BC0  0E00               	movlw	0
 13152  004BC2  0100               	movlb	0	; () banked
 13153  004BC4  6FC1               	movwf	_FAN& (0+255),b
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;Fan_Support.c: 92: PORTDbits.RD1 = 0;
 13157  004BC6  9283               	bcf	3971,1,c	;volatile
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;Fan_Support.c: 93: PORTDbits.RD2 = 0;
 13161  004BC8  9483               	bcf	3971,2,c	;volatile
 13162                           
 13163                           ; BSR set to: 0
 13164  004BCA  0012               	return		;funcret
 13165  004BCC                     __end_of_Turn_Off_Fan:
 13166                           	opt stack 0
 13167                           tblptru	equ	0xFF8
 13168                           tblptrh	equ	0xFF7
 13169                           tblptrl	equ	0xFF6
 13170                           tablat	equ	0xFF5
 13171                           prodh	equ	0xFF4
 13172                           prodl	equ	0xFF3
 13173                           intcon	equ	0xFF2
 13174                           intcon2	equ	0xFF1
 13175                           intcon3	equ	0xFF0
 13176                           postinc0	equ	0xFEE
 13177                           wreg	equ	0xFE8
 13178                           postdec1	equ	0xFE5
 13179                           plusw1	equ	0xFE3
 13180                           fsr1l	equ	0xFE1
 13181                           indf2	equ	0xFDF
 13182                           postinc2	equ	0xFDE
 13183                           plusw2	equ	0xFDB
 13184                           fsr2h	equ	0xFDA
 13185                           fsr2l	equ	0xFD9
 13186                           status	equ	0xFD8
 13187                           
 13188 ;; *************** function _printf *****************
 13189 ;; Defined at:
 13190 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;  f               2    6[BANK0 ] PTR const unsigned char 
 13193 ;;		 -> STR_43(29), STR_42(20), STR_41(21), STR_40(30), 
 13194 ;;		 -> STR_37(29), STR_36(20), STR_35(20), STR_34(30), 
 13195 ;;		 -> STR_11(33), STR_10(27), STR_9(34), STR_8(22), 
 13196 ;;		 -> STR_7(29), STR_6(20), STR_5(21), STR_4(30), 
 13197 ;;		 -> STR_3(22), STR_2(19), STR_1(20), 
 13198 ;; Auto vars:     Size  Location     Type
 13199 ;;  idx             1   29[BANK0 ] unsigned char 
 13200 ;;  val             4   42[BANK0 ] unsigned long 
 13201 ;;  tmpval          4   34[BANK0 ] struct .
 13202 ;;  fval            3   48[BANK0 ] struct .
 13203 ;;  cp              3    0        PTR const unsigned char 
 13204 ;;  flag            2   46[BANK0 ] unsigned short 
 13205 ;;  exp             2   40[BANK0 ] int 
 13206 ;;  width           2   38[BANK0 ] int 
 13207 ;;  prec            2   32[BANK0 ] int 
 13208 ;;  ap              2   30[BANK0 ] PTR void [1]
 13209 ;;		 -> ?_printf(2), 
 13210 ;;  len             2    0        unsigned int 
 13211 ;;  c               1   51[BANK0 ] char 
 13212 ;;  d               1    0        unsigned char 
 13213 ;; Return value:  Size  Location     Type
 13214 ;;                  2    6[BANK0 ] int 
 13215 ;; Registers used:
 13216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13217 ;; Tracked objects:
 13218 ;;		On entry : 0/0
 13219 ;;		On exit  : 0/0
 13220 ;;		Unchanged: 0/0
 13221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13222 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13223 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;Total ram usage:       46 bytes
 13227 ;; Hardware stack levels used:    1
 13228 ;; Hardware stack levels required when called:    6
 13229 ;; This function calls:
 13230 ;;		___awdiv
 13231 ;;		___ftadd
 13232 ;;		___ftge
 13233 ;;		___ftmul
 13234 ;;		___ftneg
 13235 ;;		___ftsub
 13236 ;;		___fttol
 13237 ;;		___lldiv
 13238 ;;		___llmod
 13239 ;;		___lltoft
 13240 ;;		___wmul
 13241 ;;		__div_to_l_
 13242 ;;		__tdiv_to_l_
 13243 ;;		_fround
 13244 ;;		_isdigit
 13245 ;;		_putch
 13246 ;;		_scale
 13247 ;; This function is called by:
 13248 ;;		_Turn_Off_Fan
 13249 ;;		_Turn_On_Fan
 13250 ;;		_check_for_button_input
 13251 ;;		_main
 13252 ;;		_Setup_Fan_Temp
 13253 ;;		_Do_Setup_Time
 13254 ;; This function uses a non-reentrant model
 13255 ;;
 13256                           
 13257                           	psect	text62
 13258  00001C                     __ptext62:
 13259                           	opt stack 0
 13260  00001C                     _printf:
 13261                           	opt stack 24
 13262                           
 13263                           ;doprnt.c: 466: va_list ap;
 13264                           ;doprnt.c: 499: signed char c;
 13265                           ;doprnt.c: 501: int width;
 13266                           ;doprnt.c: 504: int prec;
 13267                           ;doprnt.c: 508: unsigned short flag;
 13268                           ;doprnt.c: 515: char d;
 13269                           ;doprnt.c: 516: double fval;
 13270                           ;doprnt.c: 517: int exp;
 13271                           ;doprnt.c: 523: union {
 13272                           ;doprnt.c: 524: unsigned long vd;
 13273                           ;doprnt.c: 525: double integ;
 13274                           ;doprnt.c: 526: } tmpval;
 13275                           ;doprnt.c: 528: unsigned long val;
 13276                           ;doprnt.c: 529: unsigned len;
 13277                           ;doprnt.c: 530: const char * cp;
 13278                           ;doprnt.c: 533: *ap = __va_start();
 13279                           
 13280                           ; BSR set to: 0
 13281                           ;incstack = 0
 13282  00001C  0E88               	movlw	low (?_printf+2)
 13283  00001E  0100               	movlb	0	; () banked
 13284  000020  6F9E               	movwf	printf@ap& (0+255),b
 13285  000022  0E00               	movlw	high (?_printf+2)
 13286  000024  0100               	movlb	0	; () banked
 13287  000026  6F9F               	movwf	(printf@ap+1)& (0+255),b
 13288                           
 13289                           ;doprnt.c: 536: while(c = *f++) {
 13290  000028  EF1E  F006         	goto	l9352
 13291  00002C                     l9066:
 13292                           
 13293                           ; BSR set to: 0
 13294                           ;doprnt.c: 538: if(c != '%')
 13295  00002C  0E25               	movlw	37
 13296  00002E  0100               	movlb	0	; () banked
 13297  000030  19B3               	xorwf	printf@c& (0+255),w,b
 13298  000032  B4D8               	btfsc	status,2,c
 13299  000034  D006               	goto	l9070
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;doprnt.c: 540: {
 13303                           ;doprnt.c: 541: (putch(c) );
 13304  000036  0100               	movlb	0	; () banked
 13305  000038  51B3               	movf	printf@c& (0+255),w,b
 13306  00003A  ECDA  F026         	call	_putch
 13307                           
 13308                           ;doprnt.c: 542: continue;
 13309  00003E  EF1E  F006         	goto	l9352
 13310  000042                     l9070:
 13311                           
 13312                           ;doprnt.c: 543: }
 13313                           ;doprnt.c: 546: width = 0;
 13314  000042  0E00               	movlw	0
 13315  000044  0100               	movlb	0	; () banked
 13316  000046  6FA7               	movwf	(printf@width+1)& (0+255),b
 13317  000048  0E00               	movlw	0
 13318  00004A  6FA6               	movwf	printf@width& (0+255),b
 13319                           
 13320                           ;doprnt.c: 548: flag = 0;
 13321  00004C  0E00               	movlw	0
 13322  00004E  0100               	movlb	0	; () banked
 13323  000050  6FAF               	movwf	(printf@flag+1)& (0+255),b
 13324  000052  0E00               	movlw	0
 13325  000054  6FAE               	movwf	printf@flag& (0+255),b
 13326                           
 13327                           ; BSR set to: 0
 13328                           ;doprnt.c: 551: switch(*f) {
 13329                           
 13330                           ;doprnt.c: 550: for(;;) {
 13331  000056  D007               	goto	l9076
 13332  000058                     l9072:
 13333                           
 13334                           ;doprnt.c: 580: flag |= 0x04;
 13335  000058  0100               	movlb	0	; () banked
 13336  00005A  85AE               	bsf	printf@flag& (0+255),2,b
 13337                           
 13338                           ;doprnt.c: 581: f++;
 13339  00005C  0100               	movlb	0	; () banked
 13340  00005E  4B86               	infsnz	printf@f& (0+255),f,b
 13341  000060  2B87               	incf	(printf@f+1)& (0+255),f,b
 13342                           
 13343                           ;doprnt.c: 582: continue;
 13344  000062  D001               	goto	l9076
 13345                           
 13346                           ; BSR set to: 0
 13347                           ;doprnt.c: 584: }
 13348  000064  D00B               	goto	l9078
 13349  000066                     l9076:
 13350  000066  C086  FFF6         	movff	printf@f,tblptrl
 13351  00006A  C087  FFF7         	movff	printf@f+1,tblptrh
 13352  00006E                     	if	0	;tblptru may be non-zero
 13353  00006E                     	endif
 13354  00006E                     	if	0	;tblptru may be non-zero
 13355  00006E                     	endif
 13356  00006E  0008               	tblrd		*
 13357  000070  50F5               	movf	tablat,w,c
 13358                           
 13359                           ; Switch size 1, requested type "space"
 13360                           ; Number of cases is 1, Range of values is 48 to 48
 13361                           ; switch strategies available:
 13362                           ; Name         Instructions Cycles
 13363                           ; simple_byte            4     3 (average)
 13364                           ;	Chosen strategy is simple_byte
 13365  000072  0A30               	xorlw	48	; case 48
 13366  000074  B4D8               	btfsc	status,2,c
 13367  000076  D7F0               	goto	l9072
 13368                           
 13369                           ;doprnt.c: 585: break;
 13370  000078  D001               	goto	l9078
 13371                           
 13372                           ;doprnt.c: 586: }
 13373  00007A  D7F5               	goto	l9076
 13374  00007C                     l9078:
 13375                           
 13376                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13377  00007C  C086  FFF6         	movff	printf@f,tblptrl
 13378  000080  C087  FFF7         	movff	printf@f+1,tblptrh
 13379  000084                     	if	0	;tblptru may be non-zero
 13380  000084                     	endif
 13381  000084                     	if	0	;tblptru may be non-zero
 13382  000084                     	endif
 13383  000084  0008               	tblrd		*
 13384  000086  50F5               	movf	tablat,w,c
 13385  000088  EC7A  F025         	call	_isdigit
 13386  00008C  A0D8               	btfss	status,0,c
 13387  00008E  D04D               	goto	l9096
 13388                           
 13389                           ;doprnt.c: 598: width = 0;
 13390  000090  0E00               	movlw	0
 13391  000092  0100               	movlb	0	; () banked
 13392  000094  6FA7               	movwf	(printf@width+1)& (0+255),b
 13393  000096  0E00               	movlw	0
 13394  000098  6FA6               	movwf	printf@width& (0+255),b
 13395  00009A  D000               	goto	l9082
 13396  00009C                     l9082:
 13397                           
 13398                           ;doprnt.c: 600: width *= 10;
 13399  00009C  C0A6  F011         	movff	printf@width,___wmul@multiplier
 13400  0000A0  C0A7  F012         	movff	printf@width+1,___wmul@multiplier+1
 13401  0000A4  0E00               	movlw	0
 13402  0000A6  6E14               	movwf	___wmul@multiplicand+1,c
 13403  0000A8  0E0A               	movlw	10
 13404  0000AA  6E13               	movwf	___wmul@multiplicand,c
 13405  0000AC  ECE7  F024         	call	___wmul	;wreg free
 13406  0000B0  C011  F0A6         	movff	?___wmul,printf@width
 13407  0000B4  C012  F0A7         	movff	?___wmul+1,printf@width+1
 13408                           
 13409                           ;doprnt.c: 601: width += *f++ - '0';
 13410  0000B8  0ED0               	movlw	208
 13411  0000BA  0100               	movlb	0	; () banked
 13412  0000BC  6F94               	movwf	??_printf& (0+255),b
 13413  0000BE  0EFF               	movlw	255
 13414  0000C0  0100               	movlb	0	; () banked
 13415  0000C2  6F95               	movwf	(??_printf+1)& (0+255),b
 13416  0000C4  C086  FFF6         	movff	printf@f,tblptrl
 13417  0000C8  C087  FFF7         	movff	printf@f+1,tblptrh
 13418  0000CC                     	if	0	;tblptru may be non-zero
 13419  0000CC                     	endif
 13420  0000CC                     	if	0	;tblptru may be non-zero
 13421  0000CC                     	endif
 13422  0000CC  0008               	tblrd		*
 13423  0000CE  50F5               	movf	tablat,w,c
 13424  0000D0  0100               	movlb	0	; () banked
 13425  0000D2  6F96               	movwf	(??_printf+2)& (0+255),b
 13426  0000D4  6B97               	clrf	(??_printf+3)& (0+255),b
 13427  0000D6  0100               	movlb	0	; () banked
 13428  0000D8  5194               	movf	??_printf& (0+255),w,b
 13429  0000DA  0100               	movlb	0	; () banked
 13430  0000DC  2796               	addwf	(??_printf+2)& (0+255),f,b
 13431  0000DE  0100               	movlb	0	; () banked
 13432  0000E0  5195               	movf	(??_printf+1)& (0+255),w,b
 13433  0000E2  0100               	movlb	0	; () banked
 13434  0000E4  2397               	addwfc	(??_printf+3)& (0+255),f,b
 13435  0000E6  0100               	movlb	0	; () banked
 13436  0000E8  5196               	movf	(??_printf+2)& (0+255),w,b
 13437  0000EA  0100               	movlb	0	; () banked
 13438  0000EC  27A6               	addwf	printf@width& (0+255),f,b
 13439  0000EE  0100               	movlb	0	; () banked
 13440  0000F0  5197               	movf	(??_printf+3)& (0+255),w,b
 13441  0000F2  0100               	movlb	0	; () banked
 13442  0000F4  23A7               	addwfc	(printf@width+1)& (0+255),f,b
 13443                           
 13444                           ; BSR set to: 0
 13445  0000F6  0100               	movlb	0	; () banked
 13446  0000F8  4B86               	infsnz	printf@f& (0+255),f,b
 13447  0000FA  2B87               	incf	(printf@f+1)& (0+255),f,b
 13448                           
 13449                           ; BSR set to: 0
 13450                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13451  0000FC  C086  FFF6         	movff	printf@f,tblptrl
 13452  000100  C087  FFF7         	movff	printf@f+1,tblptrh
 13453  000104                     	if	0	;tblptru may be non-zero
 13454  000104                     	endif
 13455  000104                     	if	0	;tblptru may be non-zero
 13456  000104                     	endif
 13457  000104  0008               	tblrd		*
 13458  000106  50F5               	movf	tablat,w,c
 13459  000108  EC7A  F025         	call	_isdigit
 13460  00010C  A0D8               	btfss	status,0,c
 13461  00010E  D00D               	goto	l9096
 13462  000110  D7C5               	goto	l9082
 13463                           
 13464                           ;doprnt.c: 608: }
 13465                           ;doprnt.c: 635: switch(c = *f++) {
 13466  000112  D00B               	goto	l9096
 13467                           
 13468                           ;doprnt.c: 638: goto alldone;
 13469                           
 13470                           ;doprnt.c: 637: case 0:
 13471  000114  EF2F  F006         	goto	l1466
 13472  000118                     l9090:
 13473                           
 13474                           ;doprnt.c: 663: flag |= 0x400;
 13475  000118  0100               	movlb	0	; () banked
 13476  00011A  85AF               	bsf	(printf@flag+1)& (0+255),2,b
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;doprnt.c: 698: case 'i':
 13480                           ;doprnt.c: 699: break;
 13481                           
 13482                           ; BSR set to: 0
 13483                           
 13484                           ;doprnt.c: 697: case 'd':
 13485                           
 13486                           ;doprnt.c: 664: break;
 13487  00011C  D024               	goto	l9098
 13488  00011E                     l9092:
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;doprnt.c: 721: flag |= 0x80;
 13492  00011E  0100               	movlb	0	; () banked
 13493  000120  8FAE               	bsf	printf@flag& (0+255),7,b
 13494                           
 13495                           ;doprnt.c: 723: break;
 13496  000122  D021               	goto	l9098
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;doprnt.c: 813: continue;
 13500                           
 13501                           ;doprnt.c: 802: default:
 13502  000124  EF1E  F006         	goto	l9352
 13503                           
 13504                           ; BSR set to: 0
 13505                           ;doprnt.c: 822: }
 13506  000128  D01E               	goto	l9098
 13507  00012A                     l9096:
 13508  00012A  C086  FFF6         	movff	printf@f,tblptrl
 13509  00012E  C087  FFF7         	movff	printf@f+1,tblptrh
 13510  000132  0100               	movlb	0	; () banked
 13511  000134  4B86               	infsnz	printf@f& (0+255),f,b
 13512  000136  2B87               	incf	(printf@f+1)& (0+255),f,b
 13513  000138                     	if	0	;tblptru may be non-zero
 13514  000138                     	endif
 13515  000138                     	if	0	;tblptru may be non-zero
 13516  000138                     	endif
 13517  000138  0008               	tblrd		*
 13518  00013A  CFF5 F0B3          	movff	tablat,printf@c
 13519  00013E  0100               	movlb	0	; () banked
 13520  000140  51B3               	movf	printf@c& (0+255),w,b
 13521                           
 13522                           ; Switch size 1, requested type "space"
 13523                           ; Number of cases is 5, Range of values is 0 to 120
 13524                           ; switch strategies available:
 13525                           ; Name         Instructions Cycles
 13526                           ; simple_byte           16     9 (average)
 13527                           ;	Chosen strategy is simple_byte
 13528  000142  0A00               	xorlw	0	; case 0
 13529  000144  B4D8               	btfsc	status,2,c
 13530  000146  EF2F  F006         	goto	l1466
 13531  00014A  0A64               	xorlw	100	; case 100
 13532  00014C  B4D8               	btfsc	status,2,c
 13533  00014E  D00B               	goto	l9098
 13534  000150  0A02               	xorlw	2	; case 102
 13535  000152  B4D8               	btfsc	status,2,c
 13536  000154  D7E1               	goto	l9090
 13537  000156  0A0F               	xorlw	15	; case 105
 13538  000158  B4D8               	btfsc	status,2,c
 13539  00015A  D005               	goto	l9098
 13540  00015C  0A11               	xorlw	17	; case 120
 13541  00015E  B4D8               	btfsc	status,2,c
 13542  000160  D7DE               	goto	l9092
 13543  000162  EF1E  F006         	goto	l9352
 13544  000166                     l9098:
 13545                           
 13546                           ; BSR set to: 0
 13547                           ;doprnt.c: 825: if(flag & (0x700)) {
 13548  000166  0E07               	movlw	7
 13549  000168  0100               	movlb	0	; () banked
 13550  00016A  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 13551  00016C  B4D8               	btfsc	status,2,c
 13552  00016E  D39A               	goto	l1384
 13553                           
 13554                           ; BSR set to: 0
 13555                           ;doprnt.c: 829: prec = 6;
 13556  000170  0E00               	movlw	0
 13557  000172  0100               	movlb	0	; () banked
 13558  000174  6FA1               	movwf	(printf@prec+1)& (0+255),b
 13559  000176  0E06               	movlw	6
 13560  000178  6FA0               	movwf	printf@prec& (0+255),b
 13561                           
 13562                           ; BSR set to: 0
 13563                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13564  00017A  C09E  FFD9         	movff	printf@ap,fsr2l
 13565  00017E  C09F  FFDA         	movff	printf@ap+1,fsr2h
 13566  000182  CFDE F0B0          	movff	postinc2,printf@fval
 13567  000186  CFDE F0B1          	movff	postinc2,printf@fval+1
 13568  00018A  CFDD F0B2          	movff	postdec2,printf@fval+2
 13569                           
 13570                           ; BSR set to: 0
 13571  00018E  0E03               	movlw	3
 13572  000190  0100               	movlb	0	; () banked
 13573  000192  279E               	addwf	printf@ap& (0+255),f,b
 13574  000194  0E00               	movlw	0
 13575  000196  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 13576                           
 13577                           ; BSR set to: 0
 13578                           ;doprnt.c: 831: if(fval < 0.0) {
 13579  000198  0100               	movlb	0	; () banked
 13580  00019A  AFB2               	btfss	(printf@fval+2)& (0+255),7,b
 13581  00019C  D012               	goto	l9112
 13582                           
 13583                           ; BSR set to: 0
 13584                           ;doprnt.c: 832: fval = -fval;
 13585  00019E  C0B0  F011         	movff	printf@fval,___ftneg@f1
 13586  0001A2  C0B1  F012         	movff	printf@fval+1,___ftneg@f1+1
 13587  0001A6  C0B2  F013         	movff	printf@fval+2,___ftneg@f1+2
 13588  0001AA  EC34  F025         	call	___ftneg	;wreg free
 13589  0001AE  C011  F0B0         	movff	?___ftneg,printf@fval
 13590  0001B2  C012  F0B1         	movff	?___ftneg+1,printf@fval+1
 13591  0001B6  C013  F0B2         	movff	?___ftneg+2,printf@fval+2
 13592                           
 13593                           ;doprnt.c: 833: flag |= 0x03;
 13594  0001BA  0E03               	movlw	3
 13595  0001BC  0100               	movlb	0	; () banked
 13596  0001BE  13AE               	iorwf	printf@flag& (0+255),f,b
 13597  0001C0  D000               	goto	l9112
 13598  0001C2                     l9112:
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;doprnt.c: 834: }
 13602                           ;doprnt.c: 835: exp = 0;
 13603  0001C2  0E00               	movlw	0
 13604  0001C4  0100               	movlb	0	; () banked
 13605  0001C6  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13606  0001C8  0E00               	movlw	0
 13607  0001CA  6FA8               	movwf	printf@exp& (0+255),b
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;doprnt.c: 836: if( fval!=0) {
 13611  0001CC  0100               	movlb	0	; () banked
 13612  0001CE  51B0               	movf	printf@fval& (0+255),w,b
 13613  0001D0  0100               	movlb	0	; () banked
 13614  0001D2  11B1               	iorwf	(printf@fval+1)& (0+255),w,b
 13615  0001D4  0100               	movlb	0	; () banked
 13616  0001D6  11B2               	iorwf	(printf@fval+2)& (0+255),w,b
 13617  0001D8  B4D8               	btfsc	status,2,c
 13618  0001DA  D093               	goto	l9140
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13622  0001DC  0E82               	movlw	130
 13623  0001DE  0100               	movlb	0	; () banked
 13624  0001E0  6F94               	movwf	??_printf& (0+255),b
 13625  0001E2  0EFF               	movlw	255
 13626  0001E4  0100               	movlb	0	; () banked
 13627  0001E6  6F95               	movwf	(??_printf+1)& (0+255),b
 13628  0001E8  C0B0  F096         	movff	printf@fval,??_printf+2
 13629  0001EC  C0B1  F097         	movff	printf@fval+1,??_printf+3
 13630  0001F0  C0B2  F098         	movff	printf@fval+2,??_printf+4
 13631  0001F4  C0B3  F099         	movff	printf@fval+3,??_printf+5
 13632  0001F8  0E10               	movlw	16
 13633  0001FA  D006               	goto	u7790
 13634  0001FC                     u7795:
 13635  0001FC  0100               	movlb	0	; () banked
 13636  0001FE  90D8               	bcf	status,0,c
 13637  000200  3399               	rrcf	(??_printf+5)& (0+255),f,b
 13638  000202  3398               	rrcf	(??_printf+4)& (0+255),f,b
 13639  000204  3397               	rrcf	(??_printf+3)& (0+255),f,b
 13640  000206  3396               	rrcf	(??_printf+2)& (0+255),f,b
 13641  000208                     u7790:
 13642  000208  2EE8               	decfsz	wreg,f,c
 13643  00020A  D7F8               	goto	u7795
 13644  00020C  0100               	movlb	0	; () banked
 13645  00020E  5196               	movf	(??_printf+2)& (0+255),w,b
 13646  000210  0100               	movlb	0	; () banked
 13647  000212  2594               	addwf	??_printf& (0+255),w,b
 13648  000214  0100               	movlb	0	; () banked
 13649  000216  6FA8               	movwf	printf@exp& (0+255),b
 13650  000218  0E00               	movlw	0
 13651  00021A  0100               	movlb	0	; () banked
 13652  00021C  2195               	addwfc	(??_printf+1)& (0+255),w,b
 13653  00021E  0100               	movlb	0	; () banked
 13654  000220  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;doprnt.c: 838: exp--;
 13658  000222  0100               	movlb	0	; () banked
 13659  000224  07A8               	decf	printf@exp& (0+255),f,b
 13660  000226  A0D8               	btfss	status,0,c
 13661  000228  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13662                           
 13663                           ; BSR set to: 0
 13664                           ;doprnt.c: 839: exp *= 3;
 13665  00022A  C0A8  F011         	movff	printf@exp,___wmul@multiplier
 13666  00022E  C0A9  F012         	movff	printf@exp+1,___wmul@multiplier+1
 13667  000232  0E00               	movlw	0
 13668  000234  6E14               	movwf	___wmul@multiplicand+1,c
 13669  000236  0E03               	movlw	3
 13670  000238  6E13               	movwf	___wmul@multiplicand,c
 13671  00023A  ECE7  F024         	call	___wmul	;wreg free
 13672  00023E  C011  F0A8         	movff	?___wmul,printf@exp
 13673  000242  C012  F0A9         	movff	?___wmul+1,printf@exp+1
 13674                           
 13675                           ;doprnt.c: 840: exp /= 10;
 13676  000246  C0A8  F017         	movff	printf@exp,___awdiv@dividend
 13677  00024A  C0A9  F018         	movff	printf@exp+1,___awdiv@dividend+1
 13678  00024E  0E00               	movlw	0
 13679  000250  6E1A               	movwf	___awdiv@divisor+1,c
 13680  000252  0E0A               	movlw	10
 13681  000254  6E19               	movwf	___awdiv@divisor,c
 13682  000256  EC3B  F01E         	call	___awdiv	;wreg free
 13683  00025A  C017  F0A8         	movff	?___awdiv,printf@exp
 13684  00025E  C018  F0A9         	movff	?___awdiv+1,printf@exp+1
 13685                           
 13686                           ;doprnt.c: 841: if(exp < 0)
 13687  000262  0100               	movlb	0	; () banked
 13688  000264  AFA9               	btfss	(printf@exp+1)& (0+255),7,b
 13689  000266  D005               	goto	l9128
 13690                           
 13691                           ; BSR set to: 0
 13692                           ;doprnt.c: 842: exp--;
 13693  000268  0100               	movlb	0	; () banked
 13694  00026A  07A8               	decf	printf@exp& (0+255),f,b
 13695  00026C  A0D8               	btfss	status,0,c
 13696  00026E  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13697  000270  D000               	goto	l9128
 13698  000272                     l9128:
 13699                           
 13700                           ; BSR set to: 0
 13701                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13702  000272  0100               	movlb	0	; () banked
 13703  000274  51A8               	movf	printf@exp& (0+255),w,b
 13704  000276  0800               	sublw	0
 13705  000278  ECAF  F009         	call	_scale
 13706  00027C  C043  F0A2         	movff	?_scale,printf@tmpval
 13707  000280  C044  F0A3         	movff	?_scale+1,printf@tmpval+1
 13708  000284  C045  F0A4         	movff	?_scale+2,printf@tmpval+2
 13709                           
 13710                           ;doprnt.c: 847: tmpval.integ *= fval;
 13711  000288  C0A2  F01F         	movff	printf@tmpval,___ftmul@f1
 13712  00028C  C0A3  F020         	movff	printf@tmpval+1,___ftmul@f1+1
 13713  000290  C0A4  F021         	movff	printf@tmpval+2,___ftmul@f1+2
 13714  000294  C0B0  F022         	movff	printf@fval,___ftmul@f2
 13715  000298  C0B1  F023         	movff	printf@fval+1,___ftmul@f2+1
 13716  00029C  C0B2  F024         	movff	printf@fval+2,___ftmul@f2+2
 13717  0002A0  ECFE  F018         	call	___ftmul	;wreg free
 13718  0002A4  C01F  F0A2         	movff	?___ftmul,printf@tmpval
 13719  0002A8  C020  F0A3         	movff	?___ftmul+1,printf@tmpval+1
 13720  0002AC  C021  F0A4         	movff	?___ftmul+2,printf@tmpval+2
 13721                           
 13722                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13723  0002B0  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13724  0002B4  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13725  0002B8  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13726  0002BC  0E00               	movlw	0
 13727  0002BE  6E14               	movwf	___ftge@ff2,c
 13728  0002C0  0E80               	movlw	128
 13729  0002C2  6E15               	movwf	___ftge@ff2+1,c
 13730  0002C4  0E3F               	movlw	63
 13731  0002C6  6E16               	movwf	___ftge@ff2+2,c
 13732  0002C8  EC86  F01E         	call	___ftge	;wreg free
 13733  0002CC  B0D8               	btfsc	status,0,c
 13734  0002CE  D005               	goto	l9136
 13735                           
 13736                           ;doprnt.c: 849: exp--;
 13737  0002D0  0100               	movlb	0	; () banked
 13738  0002D2  07A8               	decf	printf@exp& (0+255),f,b
 13739  0002D4  A0D8               	btfss	status,0,c
 13740  0002D6  07A9               	decf	(printf@exp+1)& (0+255),f,b
 13741  0002D8  D014               	goto	l9140
 13742  0002DA                     l9136:
 13743                           
 13744                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13745  0002DA  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13746  0002DE  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13747  0002E2  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13748  0002E6  0E00               	movlw	0
 13749  0002E8  6E14               	movwf	___ftge@ff2,c
 13750  0002EA  0E20               	movlw	32
 13751  0002EC  6E15               	movwf	___ftge@ff2+1,c
 13752  0002EE  0E41               	movlw	65
 13753  0002F0  6E16               	movwf	___ftge@ff2+2,c
 13754  0002F2  EC86  F01E         	call	___ftge	;wreg free
 13755  0002F6  A0D8               	btfss	status,0,c
 13756  0002F8  D004               	goto	l9140
 13757                           
 13758                           ;doprnt.c: 851: exp++;
 13759  0002FA  0100               	movlb	0	; () banked
 13760  0002FC  4BA8               	infsnz	printf@exp& (0+255),f,b
 13761  0002FE  2BA9               	incf	(printf@exp+1)& (0+255),f,b
 13762                           
 13763                           ; BSR set to: 0
 13764                           
 13765                           ; BSR set to: 0
 13766  000300  D000               	goto	l9140
 13767  000302                     l9140:
 13768                           
 13769                           ;doprnt.c: 852: }
 13770                           ;doprnt.c: 1112: if(prec <= 12)
 13771  000302  0100               	movlb	0	; () banked
 13772  000304  BFA1               	btfsc	(printf@prec+1)& (0+255),7,b
 13773  000306  D008               	goto	l9142
 13774  000308  0100               	movlb	0	; () banked
 13775  00030A  51A1               	movf	(printf@prec+1)& (0+255),w,b
 13776  00030C  E11E               	bnz	l9144
 13777  00030E  0E0D               	movlw	13
 13778  000310  0100               	movlb	0	; () banked
 13779  000312  5DA0               	subwf	printf@prec& (0+255),w,b
 13780  000314  B0D8               	btfsc	status,0,c
 13781  000316  D019               	goto	l9144
 13782  000318                     l9142:
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;doprnt.c: 1113: fval += fround(prec);
 13786  000318  C0B0  F04D         	movff	printf@fval,___ftadd@f1
 13787  00031C  C0B1  F04E         	movff	printf@fval+1,___ftadd@f1+1
 13788  000320  C0B2  F04F         	movff	printf@fval+2,___ftadd@f1+2
 13789  000324  0100               	movlb	0	; () banked
 13790  000326  51A0               	movf	printf@prec& (0+255),w,b
 13791  000328  ECCD  F00E         	call	_fround
 13792  00032C  C043  F050         	movff	?_fround,___ftadd@f2
 13793  000330  C044  F051         	movff	?_fround+1,___ftadd@f2+1
 13794  000334  C045  F052         	movff	?_fround+2,___ftadd@f2+2
 13795  000338  ECFF  F011         	call	___ftadd	;wreg free
 13796  00033C  C04D  F0B0         	movff	?___ftadd,printf@fval
 13797  000340  C04E  F0B1         	movff	?___ftadd+1,printf@fval+1
 13798  000344  C04F  F0B2         	movff	?___ftadd+2,printf@fval+2
 13799  000348  D000               	goto	l9144
 13800  00034A                     l9144:
 13801                           
 13802                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13803  00034A  0100               	movlb	0	; () banked
 13804  00034C  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 13805  00034E  D008               	goto	l9146
 13806  000350  0100               	movlb	0	; () banked
 13807  000352  51A9               	movf	(printf@exp+1)& (0+255),w,b
 13808  000354  E128               	bnz	l9152
 13809  000356  0E0A               	movlw	10
 13810  000358  0100               	movlb	0	; () banked
 13811  00035A  5DA8               	subwf	printf@exp& (0+255),w,b
 13812  00035C  B0D8               	btfsc	status,0,c
 13813  00035E  D023               	goto	l9152
 13814  000360                     l9146:
 13815                           
 13816                           ; BSR set to: 0
 13817  000360  0100               	movlb	0	; () banked
 13818  000362  51B0               	movf	printf@fval& (0+255),w,b
 13819  000364  0100               	movlb	0	; () banked
 13820  000366  11B1               	iorwf	(printf@fval+1)& (0+255),w,b
 13821  000368  0100               	movlb	0	; () banked
 13822  00036A  11B2               	iorwf	(printf@fval+2)& (0+255),w,b
 13823  00036C  B4D8               	btfsc	status,2,c
 13824  00036E  D077               	goto	l9166
 13825                           
 13826                           ; BSR set to: 0
 13827  000370  C0B0  F02E         	movff	printf@fval,___fttol@f1
 13828  000374  C0B1  F02F         	movff	printf@fval+1,___fttol@f1+1
 13829  000378  C0B2  F030         	movff	printf@fval+2,___fttol@f1+2
 13830  00037C  EC68  F01A         	call	___fttol	;wreg free
 13831  000380  502E               	movf	?___fttol,w,c
 13832  000382  102F               	iorwf	?___fttol+1,w,c
 13833  000384  1030               	iorwf	?___fttol+2,w,c
 13834  000386  1031               	iorwf	?___fttol+3,w,c
 13835  000388  A4D8               	btfss	status,2,c
 13836  00038A  D069               	goto	l9166
 13837  00038C  0100               	movlb	0	; () banked
 13838  00038E  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 13839  000390  D066               	goto	l9166
 13840  000392  0100               	movlb	0	; () banked
 13841  000394  51A9               	movf	(printf@exp+1)& (0+255),w,b
 13842  000396  E107               	bnz	l9152
 13843  000398  0E02               	movlw	2
 13844  00039A  0100               	movlb	0	; () banked
 13845  00039C  5DA8               	subwf	printf@exp& (0+255),w,b
 13846  00039E  B0D8               	btfsc	status,0,c
 13847  0003A0  D002               	goto	l9152
 13848  0003A2  D05D               	goto	l9166
 13849  0003A4  D000               	goto	l9152
 13850  0003A6                     l9152:
 13851                           
 13852                           ; BSR set to: 0
 13853                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13854  0003A6  C0A2  F011         	movff	printf@tmpval,___ftge@ff1
 13855  0003AA  C0A3  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 13856  0003AE  C0A4  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 13857  0003B2  0E70               	movlw	112
 13858  0003B4  6E14               	movwf	___ftge@ff2,c
 13859  0003B6  0E89               	movlw	137
 13860  0003B8  6E15               	movwf	___ftge@ff2+1,c
 13861  0003BA  0E40               	movlw	64
 13862  0003BC  6E16               	movwf	___ftge@ff2+2,c
 13863  0003BE  EC86  F01E         	call	___ftge	;wreg free
 13864  0003C2  B0D8               	btfsc	status,0,c
 13865  0003C4  D003               	goto	l9156
 13866                           
 13867                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13868  0003C6  0100               	movlb	0	; () banked
 13869  0003C8  0EF7               	movlw	247
 13870  0003CA  D002               	goto	L9
 13871  0003CC                     l9156:
 13872                           
 13873                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13874  0003CC  0100               	movlb	0	; () banked
 13875  0003CE  0EF8               	movlw	248
 13876  0003D0                     L9:
 13877  0003D0  27A8               	addwf	printf@exp& (0+255),f,b
 13878  0003D2  0EFF               	movlw	255
 13879  0003D4  23A9               	addwfc	(printf@exp+1)& (0+255),f,b
 13880  0003D6  D000               	goto	l9158
 13881  0003D8                     l9158:
 13882                           
 13883                           ; BSR set to: 0
 13884                           ;doprnt.c: 1124: }
 13885                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13886  0003D8  0100               	movlb	0	; () banked
 13887  0003DA  51A8               	movf	printf@exp& (0+255),w,b
 13888  0003DC  ECAF  F009         	call	_scale
 13889  0003E0  C043  F0A2         	movff	?_scale,printf@tmpval
 13890  0003E4  C044  F0A3         	movff	?_scale+1,printf@tmpval+1
 13891  0003E8  C045  F0A4         	movff	?_scale+2,printf@tmpval+2
 13892                           
 13893                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13894  0003EC  D017               	goto	l9162
 13895  0003EE  C0B0  F011         	movff	printf@fval,__div_to_l_@f1
 13896  0003F2  C0B1  F012         	movff	printf@fval+1,__div_to_l_@f1+1
 13897  0003F6  C0B2  F013         	movff	printf@fval+2,__div_to_l_@f1+2
 13898  0003FA  C0A2  F014         	movff	printf@tmpval,__div_to_l_@f2
 13899  0003FE  C0A3  F015         	movff	printf@tmpval+1,__div_to_l_@f2+1
 13900  000402  C0A4  F016         	movff	printf@tmpval+2,__div_to_l_@f2+2
 13901  000406  EC79  F018         	call	__div_to_l_	;wreg free
 13902  00040A  C011  F0AA         	movff	?__div_to_l_,printf@val
 13903  00040E  C012  F0AB         	movff	?__div_to_l_+1,printf@val+1
 13904  000412  C013  F0AC         	movff	?__div_to_l_+2,printf@val+2
 13905  000416  C014  F0AD         	movff	?__div_to_l_+3,printf@val+3
 13906  00041A  D017               	goto	l9164
 13907  00041C                     l9162:
 13908  00041C  C0B0  F011         	movff	printf@fval,__tdiv_to_l_@f1
 13909  000420  C0B1  F012         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 13910  000424  C0B2  F013         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 13911  000428  C0A2  F014         	movff	printf@tmpval,__tdiv_to_l_@f2
 13912  00042C  C0A3  F015         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 13913  000430  C0A4  F016         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 13914  000434  ECF1  F017         	call	__tdiv_to_l_	;wreg free
 13915  000438  C011  F0AA         	movff	?__tdiv_to_l_,printf@val
 13916  00043C  C012  F0AB         	movff	?__tdiv_to_l_+1,printf@val+1
 13917  000440  C013  F0AC         	movff	?__tdiv_to_l_+2,printf@val+2
 13918  000444  C014  F0AD         	movff	?__tdiv_to_l_+3,printf@val+3
 13919  000448  D000               	goto	l9164
 13920  00044A                     l9164:
 13921                           
 13922                           ;doprnt.c: 1129: fval = 0.0;
 13923  00044A  0E00               	movlw	0
 13924  00044C  0100               	movlb	0	; () banked
 13925  00044E  6FB0               	movwf	printf@fval& (0+255),b
 13926  000450  0E00               	movlw	0
 13927  000452  0100               	movlb	0	; () banked
 13928  000454  6FB1               	movwf	(printf@fval+1)& (0+255),b
 13929  000456  0E00               	movlw	0
 13930  000458  0100               	movlb	0	; () banked
 13931  00045A  6FB2               	movwf	(printf@fval+2)& (0+255),b
 13932                           
 13933                           ;doprnt.c: 1130: } else {
 13934  00045C  D034               	goto	l9170
 13935  00045E                     l9166:
 13936                           
 13937                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13938  00045E  C0B0  F02E         	movff	printf@fval,___fttol@f1
 13939  000462  C0B1  F02F         	movff	printf@fval+1,___fttol@f1+1
 13940  000466  C0B2  F030         	movff	printf@fval+2,___fttol@f1+2
 13941  00046A  EC68  F01A         	call	___fttol	;wreg free
 13942  00046E  C02E  F0AA         	movff	?___fttol,printf@val
 13943  000472  C02F  F0AB         	movff	?___fttol+1,printf@val+1
 13944  000476  C030  F0AC         	movff	?___fttol+2,printf@val+2
 13945  00047A  C031  F0AD         	movff	?___fttol+3,printf@val+3
 13946                           
 13947                           ;doprnt.c: 1132: fval -= (double)val;
 13948  00047E  C0B0  F080         	movff	printf@fval,___ftsub@f1
 13949  000482  C0B1  F081         	movff	printf@fval+1,___ftsub@f1+1
 13950  000486  C0B2  F082         	movff	printf@fval+2,___ftsub@f1+2
 13951  00048A  C0AA  F019         	movff	printf@val,___lltoft@c
 13952  00048E  C0AB  F01A         	movff	printf@val+1,___lltoft@c+1
 13953  000492  C0AC  F01B         	movff	printf@val+2,___lltoft@c+2
 13954  000496  C0AD  F01C         	movff	printf@val+3,___lltoft@c+3
 13955  00049A  ECBE  F021         	call	___lltoft	;wreg free
 13956  00049E  C019  F083         	movff	?___lltoft,___ftsub@f2
 13957  0004A2  C01A  F084         	movff	?___lltoft+1,___ftsub@f2+1
 13958  0004A6  C01B  F085         	movff	?___lltoft+2,___ftsub@f2+2
 13959  0004AA  ECC4  F022         	call	___ftsub	;wreg free
 13960  0004AE  C080  F0B0         	movff	?___ftsub,printf@fval
 13961  0004B2  C081  F0B1         	movff	?___ftsub+1,printf@fval+1
 13962  0004B6  C082  F0B2         	movff	?___ftsub+2,printf@fval+2
 13963                           
 13964                           ;doprnt.c: 1133: exp = 0;
 13965  0004BA  0E00               	movlw	0
 13966  0004BC  0100               	movlb	0	; () banked
 13967  0004BE  6FA9               	movwf	(printf@exp+1)& (0+255),b
 13968  0004C0  0E00               	movlw	0
 13969  0004C2  6FA8               	movwf	printf@exp& (0+255),b
 13970  0004C4  D000               	goto	l9170
 13971  0004C6                     l9170:
 13972                           
 13973                           ; BSR set to: 0
 13974                           ;doprnt.c: 1134: }
 13975                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13976  0004C6  0E01               	movlw	1
 13977  0004C8  0100               	movlb	0	; () banked
 13978  0004CA  6FB3               	movwf	printf@c& (0+255),b
 13979  0004CC                     l9172:
 13980                           
 13981                           ; BSR set to: 0
 13982  0004CC  0E0A               	movlw	10
 13983  0004CE  0100               	movlb	0	; () banked
 13984  0004D0  19B3               	xorwf	printf@c& (0+255),w,b
 13985  0004D2  B4D8               	btfsc	status,2,c
 13986  0004D4  D022               	goto	l9184
 13987  0004D6  D001               	goto	l9176
 13988                           
 13989                           ; BSR set to: 0
 13990  0004D8  D020               	goto	l9184
 13991  0004DA                     l9176:
 13992                           
 13993                           ; BSR set to: 0
 13994                           ;doprnt.c: 1137: if(val < dpowers[c])
 13995  0004DA  0100               	movlb	0	; () banked
 13996  0004DC  51B3               	movf	printf@c& (0+255),w,b
 13997  0004DE  0D04               	mullw	4
 13998  0004E0  0E9C               	movlw	low _dpowers
 13999  0004E2  24F3               	addwf	prodl,w,c
 14000  0004E4  6EF6               	movwf	tblptrl,c
 14001  0004E6  0EFD               	movlw	high _dpowers
 14002  0004E8  20F4               	addwfc	prodh,w,c
 14003  0004EA  6EF7               	movwf	tblptrh,c
 14004  0004EC                     	if	0	;There are less than 3 active tblptr bytes
 14005  0004EC                     	endif
 14006  0004EC  0009               	tblrd		*+
 14007  0004EE  50F5               	movf	tablat,w,c
 14008  0004F0  0100               	movlb	0	; () banked
 14009  0004F2  5DAA               	subwf	printf@val& (0+255),w,b
 14010  0004F4  0009               	tblrd		*+
 14011  0004F6  50F5               	movf	tablat,w,c
 14012  0004F8  0100               	movlb	0	; () banked
 14013  0004FA  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 14014  0004FC  0009               	tblrd		*+
 14015  0004FE  50F5               	movf	tablat,w,c
 14016  000500  0100               	movlb	0	; () banked
 14017  000502  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14018  000504  0009               	tblrd		*+
 14019  000506  50F5               	movf	tablat,w,c
 14020  000508  0100               	movlb	0	; () banked
 14021  00050A  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14022  00050C  A0D8               	btfss	status,0,c
 14023  00050E  D005               	goto	l9184
 14024  000510  D001               	goto	l9180
 14025                           
 14026                           ; BSR set to: 0
 14027                           ;doprnt.c: 1138: break;
 14028  000512  D003               	goto	l9184
 14029  000514                     l9180:
 14030                           
 14031                           ; BSR set to: 0
 14032  000514  0100               	movlb	0	; () banked
 14033  000516  2BB3               	incf	printf@c& (0+255),f,b
 14034  000518  D7D9               	goto	l9172
 14035  00051A                     l9184:
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;doprnt.c: 1142: width -= prec + c + exp;
 14039  00051A  C0B3  F094         	movff	printf@c,??_printf
 14040  00051E  0100               	movlb	0	; () banked
 14041  000520  6B95               	clrf	(??_printf+1)& (0+255),b
 14042  000522  BF94               	btfsc	??_printf& (0+255),7,b
 14043  000524  0795               	decf	(??_printf+1)& (0+255),f,b
 14044  000526  0100               	movlb	0	; () banked
 14045  000528  51A0               	movf	printf@prec& (0+255),w,b
 14046  00052A  0100               	movlb	0	; () banked
 14047  00052C  2794               	addwf	??_printf& (0+255),f,b
 14048  00052E  0100               	movlb	0	; () banked
 14049  000530  51A1               	movf	(printf@prec+1)& (0+255),w,b
 14050  000532  0100               	movlb	0	; () banked
 14051  000534  2395               	addwfc	(??_printf+1)& (0+255),f,b
 14052  000536  0100               	movlb	0	; () banked
 14053  000538  51A8               	movf	printf@exp& (0+255),w,b
 14054  00053A  0100               	movlb	0	; () banked
 14055  00053C  2794               	addwf	??_printf& (0+255),f,b
 14056  00053E  0100               	movlb	0	; () banked
 14057  000540  51A9               	movf	(printf@exp+1)& (0+255),w,b
 14058  000542  0100               	movlb	0	; () banked
 14059  000544  2395               	addwfc	(??_printf+1)& (0+255),f,b
 14060  000546  0100               	movlb	0	; () banked
 14061  000548  5194               	movf	??_printf& (0+255),w,b
 14062  00054A  0100               	movlb	0	; () banked
 14063  00054C  5FA6               	subwf	printf@width& (0+255),f,b
 14064  00054E  0100               	movlb	0	; () banked
 14065  000550  5195               	movf	(??_printf+1)& (0+255),w,b
 14066  000552  0100               	movlb	0	; () banked
 14067  000554  5BA7               	subwfb	(printf@width+1)& (0+255),f,b
 14068                           
 14069                           ;doprnt.c: 1143: if(
 14070                           ;doprnt.c: 1147: prec)
 14071  000556  0100               	movlb	0	; () banked
 14072  000558  51A0               	movf	printf@prec& (0+255),w,b
 14073  00055A  0100               	movlb	0	; () banked
 14074  00055C  11A1               	iorwf	(printf@prec+1)& (0+255),w,b
 14075  00055E  B4D8               	btfsc	status,2,c
 14076  000560  D005               	goto	l9188
 14077                           
 14078                           ; BSR set to: 0
 14079                           ;doprnt.c: 1148: width--;
 14080  000562  0100               	movlb	0	; () banked
 14081  000564  07A6               	decf	printf@width& (0+255),f,b
 14082  000566  A0D8               	btfss	status,0,c
 14083  000568  07A7               	decf	(printf@width+1)& (0+255),f,b
 14084  00056A  D000               	goto	l9188
 14085  00056C                     l9188:
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;doprnt.c: 1149: if(flag & 0x03)
 14089  00056C  0E03               	movlw	3
 14090  00056E  0100               	movlb	0	; () banked
 14091  000570  15AE               	andwf	printf@flag& (0+255),w,b
 14092  000572  0100               	movlb	0	; () banked
 14093  000574  6F94               	movwf	??_printf& (0+255),b
 14094  000576  0E00               	movlw	0
 14095  000578  0100               	movlb	0	; () banked
 14096  00057A  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14097  00057C  0100               	movlb	0	; () banked
 14098  00057E  6F95               	movwf	(??_printf+1)& (0+255),b
 14099  000580  0100               	movlb	0	; () banked
 14100  000582  5194               	movf	??_printf& (0+255),w,b
 14101  000584  0100               	movlb	0	; () banked
 14102  000586  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14103  000588  B4D8               	btfsc	status,2,c
 14104  00058A  D005               	goto	l9192
 14105                           
 14106                           ; BSR set to: 0
 14107                           ;doprnt.c: 1150: width--;
 14108  00058C  0100               	movlb	0	; () banked
 14109  00058E  07A6               	decf	printf@width& (0+255),f,b
 14110  000590  A0D8               	btfss	status,0,c
 14111  000592  07A7               	decf	(printf@width+1)& (0+255),f,b
 14112  000594  D000               	goto	l9192
 14113  000596                     l9192:
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;doprnt.c: 1153: if(flag & 0x04) {
 14117  000596  0100               	movlb	0	; () banked
 14118  000598  A5AE               	btfss	printf@flag& (0+255),2,b
 14119  00059A  D031               	goto	l9208
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;doprnt.c: 1157: if(flag & 0x03)
 14123  00059C  0E03               	movlw	3
 14124  00059E  0100               	movlb	0	; () banked
 14125  0005A0  15AE               	andwf	printf@flag& (0+255),w,b
 14126  0005A2  0100               	movlb	0	; () banked
 14127  0005A4  6F94               	movwf	??_printf& (0+255),b
 14128  0005A6  0E00               	movlw	0
 14129  0005A8  0100               	movlb	0	; () banked
 14130  0005AA  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14131  0005AC  0100               	movlb	0	; () banked
 14132  0005AE  6F95               	movwf	(??_printf+1)& (0+255),b
 14133  0005B0  0100               	movlb	0	; () banked
 14134  0005B2  5194               	movf	??_printf& (0+255),w,b
 14135  0005B4  0100               	movlb	0	; () banked
 14136  0005B6  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14137  0005B8  B4D8               	btfsc	status,2,c
 14138  0005BA  D00C               	goto	l9202
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;doprnt.c: 1159: (putch('-') );
 14142  0005BC  0E2D               	movlw	45
 14143  0005BE  ECDA  F026         	call	_putch
 14144                           
 14145                           ;doprnt.c: 1168: while(width > 0) {
 14146  0005C2  D008               	goto	l9202
 14147  0005C4                     l9198:
 14148                           
 14149                           ;doprnt.c: 1169: (putch('0') );
 14150  0005C4  0E30               	movlw	48
 14151  0005C6  ECDA  F026         	call	_putch
 14152                           
 14153                           ;doprnt.c: 1170: width--;
 14154  0005CA  0100               	movlb	0	; () banked
 14155  0005CC  07A6               	decf	printf@width& (0+255),f,b
 14156  0005CE  A0D8               	btfss	status,0,c
 14157  0005D0  07A7               	decf	(printf@width+1)& (0+255),f,b
 14158  0005D2  D000               	goto	l9202
 14159  0005D4                     l9202:
 14160  0005D4  0100               	movlb	0	; () banked
 14161  0005D6  BFA7               	btfsc	(printf@width+1)& (0+255),7,b
 14162  0005D8  D077               	goto	l9220
 14163  0005DA  0100               	movlb	0	; () banked
 14164  0005DC  51A7               	movf	(printf@width+1)& (0+255),w,b
 14165  0005DE  E1F2               	bnz	l9198
 14166  0005E0  0100               	movlb	0	; () banked
 14167  0005E2  05A6               	decf	printf@width& (0+255),w,b
 14168  0005E4  A0D8               	btfss	status,0,c
 14169  0005E6  D070               	goto	l9220
 14170  0005E8  D7ED               	goto	l9198
 14171                           
 14172                           ; BSR set to: 0
 14173                           ;doprnt.c: 1171: }
 14174                           ;doprnt.c: 1173: } else
 14175  0005EA  D06E               	goto	l9220
 14176                           
 14177                           ; BSR set to: 0
 14178                           ;doprnt.c: 1175: {
 14179                           ;doprnt.c: 1180: while(width > 0) {
 14180  0005EC  D008               	goto	l9208
 14181  0005EE                     l9204:
 14182                           
 14183                           ; BSR set to: 0
 14184                           ;doprnt.c: 1181: (putch(' ') );
 14185  0005EE  0E20               	movlw	32
 14186  0005F0  ECDA  F026         	call	_putch
 14187                           
 14188                           ;doprnt.c: 1182: width--;
 14189  0005F4  0100               	movlb	0	; () banked
 14190  0005F6  07A6               	decf	printf@width& (0+255),f,b
 14191  0005F8  A0D8               	btfss	status,0,c
 14192  0005FA  07A7               	decf	(printf@width+1)& (0+255),f,b
 14193  0005FC  D000               	goto	l9208
 14194  0005FE                     l9208:
 14195                           
 14196                           ; BSR set to: 0
 14197  0005FE  0100               	movlb	0	; () banked
 14198  000600  BFA7               	btfsc	(printf@width+1)& (0+255),7,b
 14199  000602  D007               	goto	l9210
 14200  000604  0100               	movlb	0	; () banked
 14201  000606  51A7               	movf	(printf@width+1)& (0+255),w,b
 14202  000608  E1F2               	bnz	l9204
 14203  00060A  0100               	movlb	0	; () banked
 14204  00060C  05A6               	decf	printf@width& (0+255),w,b
 14205  00060E  B0D8               	btfsc	status,0,c
 14206  000610  D7EE               	goto	l9204
 14207  000612                     l9210:
 14208                           
 14209                           ; BSR set to: 0
 14210                           ;doprnt.c: 1183: }
 14211                           ;doprnt.c: 1188: if(flag & 0x03)
 14212  000612  0E03               	movlw	3
 14213  000614  0100               	movlb	0	; () banked
 14214  000616  15AE               	andwf	printf@flag& (0+255),w,b
 14215  000618  0100               	movlb	0	; () banked
 14216  00061A  6F94               	movwf	??_printf& (0+255),b
 14217  00061C  0E00               	movlw	0
 14218  00061E  0100               	movlb	0	; () banked
 14219  000620  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14220  000622  0100               	movlb	0	; () banked
 14221  000624  6F95               	movwf	(??_printf+1)& (0+255),b
 14222  000626  0100               	movlb	0	; () banked
 14223  000628  5194               	movf	??_printf& (0+255),w,b
 14224  00062A  0100               	movlb	0	; () banked
 14225  00062C  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14226  00062E  B4D8               	btfsc	status,2,c
 14227  000630  D04B               	goto	l9220
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;doprnt.c: 1190: (putch('-') );
 14231  000632  0E2D               	movlw	45
 14232  000634  ECDA  F026         	call	_putch
 14233                           
 14234                           ;doprnt.c: 1195: }
 14235                           ;doprnt.c: 1196: while(c--) {
 14236  000638  D047               	goto	l9220
 14237  00063A                     l9214:
 14238                           
 14239                           ;doprnt.c: 1200: {
 14240                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 14241  00063A  C0AA  F011         	movff	printf@val,___lldiv@dividend
 14242  00063E  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 14243  000642  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 14244  000646  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 14245  00064A  0100               	movlb	0	; () banked
 14246  00064C  51B3               	movf	printf@c& (0+255),w,b
 14247  00064E  0D04               	mullw	4
 14248  000650  0E9C               	movlw	low _dpowers
 14249  000652  24F3               	addwf	prodl,w,c
 14250  000654  6EF6               	movwf	tblptrl,c
 14251  000656  0EFD               	movlw	high _dpowers
 14252  000658  20F4               	addwfc	prodh,w,c
 14253  00065A  6EF7               	movwf	tblptrh,c
 14254  00065C                     	if	0	;There are less than 3 active tblptr bytes
 14255  00065C                     	endif
 14256  00065C  0009               	tblrd		*+
 14257  00065E  CFF5 F015          	movff	tablat,___lldiv@divisor
 14258  000662  0009               	tblrd		*+
 14259  000664  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14260  000668  0009               	tblrd		*+
 14261  00066A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14262  00066E  000A               	tblrd		*-
 14263  000670  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14264  000674  ECA7  F01F         	call	___lldiv	;wreg free
 14265  000678  C011  F0A2         	movff	?___lldiv,printf@tmpval
 14266  00067C  C012  F0A3         	movff	?___lldiv+1,printf@tmpval+1
 14267  000680  C013  F0A4         	movff	?___lldiv+2,printf@tmpval+2
 14268  000684  C014  F0A5         	movff	?___lldiv+3,printf@tmpval+3
 14269                           
 14270                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14271  000688  C0A2  F01E         	movff	printf@tmpval,___llmod@dividend
 14272  00068C  C0A3  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14273  000690  C0A4  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14274  000694  C0A5  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14275  000698  0E0A               	movlw	10
 14276  00069A  6E22               	movwf	___llmod@divisor,c
 14277  00069C  0E00               	movlw	0
 14278  00069E  6E23               	movwf	___llmod@divisor+1,c
 14279  0006A0  0E00               	movlw	0
 14280  0006A2  6E24               	movwf	___llmod@divisor+2,c
 14281  0006A4  0E00               	movlw	0
 14282  0006A6  6E25               	movwf	___llmod@divisor+3,c
 14283  0006A8  ECB3  F020         	call	___llmod	;wreg free
 14284  0006AC  C01E  F0A2         	movff	?___llmod,printf@tmpval
 14285  0006B0  C01F  F0A3         	movff	?___llmod+1,printf@tmpval+1
 14286  0006B4  C020  F0A4         	movff	?___llmod+2,printf@tmpval+2
 14287  0006B8  C021  F0A5         	movff	?___llmod+3,printf@tmpval+3
 14288                           
 14289                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14290  0006BC  0100               	movlb	0	; () banked
 14291  0006BE  51A2               	movf	printf@tmpval& (0+255),w,b
 14292  0006C0  0F30               	addlw	48
 14293  0006C2  ECDA  F026         	call	_putch
 14294  0006C6  D000               	goto	l9220
 14295  0006C8                     l9220:
 14296  0006C8  0100               	movlb	0	; () banked
 14297  0006CA  07B3               	decf	printf@c& (0+255),f,b
 14298  0006CC  0100               	movlb	0	; () banked
 14299  0006CE  29B3               	incf	printf@c& (0+255),w,b
 14300  0006D0  B4D8               	btfsc	status,2,c
 14301  0006D2  D00A               	goto	l9226
 14302  0006D4  D7B2               	goto	l9214
 14303                           
 14304                           ; BSR set to: 0
 14305                           ;doprnt.c: 1204: }
 14306                           ;doprnt.c: 1206: }
 14307                           ;doprnt.c: 1207: while(exp > 0) {
 14308  0006D6  D008               	goto	l9226
 14309  0006D8                     l9222:
 14310                           
 14311                           ; BSR set to: 0
 14312                           ;doprnt.c: 1208: (putch('0') );
 14313  0006D8  0E30               	movlw	48
 14314  0006DA  ECDA  F026         	call	_putch
 14315                           
 14316                           ;doprnt.c: 1209: exp--;
 14317  0006DE  0100               	movlb	0	; () banked
 14318  0006E0  07A8               	decf	printf@exp& (0+255),f,b
 14319  0006E2  A0D8               	btfss	status,0,c
 14320  0006E4  07A9               	decf	(printf@exp+1)& (0+255),f,b
 14321  0006E6  D000               	goto	l9226
 14322  0006E8                     l9226:
 14323                           
 14324                           ; BSR set to: 0
 14325  0006E8  0100               	movlb	0	; () banked
 14326  0006EA  BFA9               	btfsc	(printf@exp+1)& (0+255),7,b
 14327  0006EC  D007               	goto	l9228
 14328  0006EE  0100               	movlb	0	; () banked
 14329  0006F0  51A9               	movf	(printf@exp+1)& (0+255),w,b
 14330  0006F2  E1F2               	bnz	l9222
 14331  0006F4  0100               	movlb	0	; () banked
 14332  0006F6  05A8               	decf	printf@exp& (0+255),w,b
 14333  0006F8  B0D8               	btfsc	status,0,c
 14334  0006FA  D7EE               	goto	l9222
 14335  0006FC                     l9228:
 14336                           
 14337                           ; BSR set to: 0
 14338                           ;doprnt.c: 1210: }
 14339                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14340  0006FC  0100               	movlb	0	; () banked
 14341  0006FE  BFA1               	btfsc	(printf@prec+1)& (0+255),7,b
 14342  000700  D00C               	goto	l1423
 14343  000702  0100               	movlb	0	; () banked
 14344  000704  51A1               	movf	(printf@prec+1)& (0+255),w,b
 14345  000706  E105               	bnz	u8010
 14346  000708  0E09               	movlw	9
 14347  00070A  0100               	movlb	0	; () banked
 14348  00070C  5DA0               	subwf	printf@prec& (0+255),w,b
 14349  00070E  A0D8               	btfss	status,0,c
 14350  000710  D004               	goto	l1423
 14351  000712                     u8010:
 14352                           
 14353                           ; BSR set to: 0
 14354                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 14355  000712  0E08               	movlw	8
 14356  000714  0100               	movlb	0	; () banked
 14357  000716  6FB3               	movwf	printf@c& (0+255),b
 14358  000718  D003               	goto	l9232
 14359  00071A                     l1423:
 14360                           
 14361                           ; BSR set to: 0
 14362                           ;doprnt.c: 1213: else
 14363                           ;doprnt.c: 1214: c = prec;
 14364  00071A  C0A0  F0B3         	movff	printf@prec,printf@c
 14365  00071E  D000               	goto	l9232
 14366  000720                     l9232:
 14367                           
 14368                           ; BSR set to: 0
 14369                           ;doprnt.c: 1215: prec -= c;
 14370  000720  0100               	movlb	0	; () banked
 14371  000722  51B3               	movf	printf@c& (0+255),w,b
 14372  000724  0100               	movlb	0	; () banked
 14373  000726  5FA0               	subwf	printf@prec& (0+255),f,b
 14374  000728  0E00               	movlw	0
 14375  00072A  0100               	movlb	0	; () banked
 14376  00072C  BFB3               	btfsc	printf@c& (0+255),7,b
 14377  00072E  0EFF               	movlw	255
 14378  000730  0100               	movlb	0	; () banked
 14379  000732  5BA1               	subwfb	(printf@prec+1)& (0+255),f,b
 14380                           
 14381                           ; BSR set to: 0
 14382                           ;doprnt.c: 1219: if(c)
 14383  000734  0100               	movlb	0	; () banked
 14384  000736  51B3               	movf	printf@c& (0+255),w,b
 14385  000738  0100               	movlb	0	; () banked
 14386  00073A  B4D8               	btfsc	status,2,c
 14387  00073C  D004               	goto	l9238
 14388                           
 14389                           ; BSR set to: 0
 14390                           ;doprnt.c: 1221: (putch('.') );
 14391  00073E  0E2E               	movlw	46
 14392  000740  ECDA  F026         	call	_putch
 14393  000744  D000               	goto	l9238
 14394  000746                     l9238:
 14395                           
 14396                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14397  000746  0100               	movlb	0	; () banked
 14398  000748  51B3               	movf	printf@c& (0+255),w,b
 14399  00074A  ECAF  F009         	call	_scale
 14400  00074E  C043  F09A         	movff	?_scale,_printf$2978
 14401  000752  C044  F09B         	movff	?_scale+1,_printf$2978+1
 14402  000756  C045  F09C         	movff	?_scale+2,_printf$2978+2
 14403                           
 14404                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14405  00075A  C0B0  F022         	movff	printf@fval,___ftmul@f2
 14406  00075E  C0B1  F023         	movff	printf@fval+1,___ftmul@f2+1
 14407  000762  C0B2  F024         	movff	printf@fval+2,___ftmul@f2+2
 14408  000766  C09A  F01F         	movff	_printf$2978,___ftmul@f1
 14409  00076A  C09B  F020         	movff	_printf$2978+1,___ftmul@f1+1
 14410  00076E  C09C  F021         	movff	_printf$2978+2,___ftmul@f1+2
 14411  000772  ECFE  F018         	call	___ftmul	;wreg free
 14412  000776  C01F  F02E         	movff	?___ftmul,___fttol@f1
 14413  00077A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
 14414  00077E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
 14415  000782  EC68  F01A         	call	___fttol	;wreg free
 14416  000786  C02E  F0AA         	movff	?___fttol,printf@val
 14417  00078A  C02F  F0AB         	movff	?___fttol+1,printf@val+1
 14418  00078E  C030  F0AC         	movff	?___fttol+2,printf@val+2
 14419  000792  C031  F0AD         	movff	?___fttol+3,printf@val+3
 14420                           
 14421                           ;doprnt.c: 1228: while(c--) {
 14422  000796  D06E               	goto	l9248
 14423  000798                     l9242:
 14424                           
 14425                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 14426  000798  C0AA  F011         	movff	printf@val,___lldiv@dividend
 14427  00079C  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 14428  0007A0  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 14429  0007A4  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 14430  0007A8  0100               	movlb	0	; () banked
 14431  0007AA  51B3               	movf	printf@c& (0+255),w,b
 14432  0007AC  0D04               	mullw	4
 14433  0007AE  0E9C               	movlw	low _dpowers
 14434  0007B0  24F3               	addwf	prodl,w,c
 14435  0007B2  6EF6               	movwf	tblptrl,c
 14436  0007B4  0EFD               	movlw	high _dpowers
 14437  0007B6  20F4               	addwfc	prodh,w,c
 14438  0007B8  6EF7               	movwf	tblptrh,c
 14439  0007BA                     	if	0	;There are less than 3 active tblptr bytes
 14440  0007BA                     	endif
 14441  0007BA  0009               	tblrd		*+
 14442  0007BC  CFF5 F015          	movff	tablat,___lldiv@divisor
 14443  0007C0  0009               	tblrd		*+
 14444  0007C2  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14445  0007C6  0009               	tblrd		*+
 14446  0007C8  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14447  0007CC  000A               	tblrd		*-
 14448  0007CE  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14449  0007D2  ECA7  F01F         	call	___lldiv	;wreg free
 14450  0007D6  C011  F0A2         	movff	?___lldiv,printf@tmpval
 14451  0007DA  C012  F0A3         	movff	?___lldiv+1,printf@tmpval+1
 14452  0007DE  C013  F0A4         	movff	?___lldiv+2,printf@tmpval+2
 14453  0007E2  C014  F0A5         	movff	?___lldiv+3,printf@tmpval+3
 14454                           
 14455                           ;doprnt.c: 1230: tmpval.vd %= 10;
 14456  0007E6  C0A2  F01E         	movff	printf@tmpval,___llmod@dividend
 14457  0007EA  C0A3  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14458  0007EE  C0A4  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14459  0007F2  C0A5  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14460  0007F6  0E0A               	movlw	10
 14461  0007F8  6E22               	movwf	___llmod@divisor,c
 14462  0007FA  0E00               	movlw	0
 14463  0007FC  6E23               	movwf	___llmod@divisor+1,c
 14464  0007FE  0E00               	movlw	0
 14465  000800  6E24               	movwf	___llmod@divisor+2,c
 14466  000802  0E00               	movlw	0
 14467  000804  6E25               	movwf	___llmod@divisor+3,c
 14468  000806  ECB3  F020         	call	___llmod	;wreg free
 14469  00080A  C01E  F0A2         	movff	?___llmod,printf@tmpval
 14470  00080E  C01F  F0A3         	movff	?___llmod+1,printf@tmpval+1
 14471  000812  C020  F0A4         	movff	?___llmod+2,printf@tmpval+2
 14472  000816  C021  F0A5         	movff	?___llmod+3,printf@tmpval+3
 14473                           
 14474                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 14475  00081A  0100               	movlb	0	; () banked
 14476  00081C  51A2               	movf	printf@tmpval& (0+255),w,b
 14477  00081E  0F30               	addlw	48
 14478  000820  ECDA  F026         	call	_putch
 14479                           
 14480                           ;doprnt.c: 1232: val %= dpowers[c];
 14481  000824  C0AA  F01E         	movff	printf@val,___llmod@dividend
 14482  000828  C0AB  F01F         	movff	printf@val+1,___llmod@dividend+1
 14483  00082C  C0AC  F020         	movff	printf@val+2,___llmod@dividend+2
 14484  000830  C0AD  F021         	movff	printf@val+3,___llmod@dividend+3
 14485  000834  0100               	movlb	0	; () banked
 14486  000836  51B3               	movf	printf@c& (0+255),w,b
 14487  000838  0D04               	mullw	4
 14488  00083A  0E9C               	movlw	low _dpowers
 14489  00083C  24F3               	addwf	prodl,w,c
 14490  00083E  6EF6               	movwf	tblptrl,c
 14491  000840  0EFD               	movlw	high _dpowers
 14492  000842  20F4               	addwfc	prodh,w,c
 14493  000844  6EF7               	movwf	tblptrh,c
 14494  000846                     	if	0	;There are less than 3 active tblptr bytes
 14495  000846                     	endif
 14496  000846  0009               	tblrd		*+
 14497  000848  CFF5 F022          	movff	tablat,___llmod@divisor
 14498  00084C  0009               	tblrd		*+
 14499  00084E  CFF5 F023          	movff	tablat,___llmod@divisor+1
 14500  000852  0009               	tblrd		*+
 14501  000854  CFF5 F024          	movff	tablat,___llmod@divisor+2
 14502  000858  000A               	tblrd		*-
 14503  00085A  CFF5 F025          	movff	tablat,___llmod@divisor+3
 14504  00085E  ECB3  F020         	call	___llmod	;wreg free
 14505  000862  C01E  F0AA         	movff	?___llmod,printf@val
 14506  000866  C01F  F0AB         	movff	?___llmod+1,printf@val+1
 14507  00086A  C020  F0AC         	movff	?___llmod+2,printf@val+2
 14508  00086E  C021  F0AD         	movff	?___llmod+3,printf@val+3
 14509  000872  D000               	goto	l9248
 14510  000874                     l9248:
 14511  000874  0100               	movlb	0	; () banked
 14512  000876  07B3               	decf	printf@c& (0+255),f,b
 14513  000878  0100               	movlb	0	; () banked
 14514  00087A  29B3               	incf	printf@c& (0+255),w,b
 14515  00087C  B4D8               	btfsc	status,2,c
 14516  00087E  D00A               	goto	l9254
 14517  000880  D78B               	goto	l9242
 14518                           
 14519                           ; BSR set to: 0
 14520                           ;doprnt.c: 1233: }
 14521                           ;doprnt.c: 1235: while(prec) {
 14522  000882  D008               	goto	l9254
 14523  000884                     l9250:
 14524                           
 14525                           ; BSR set to: 0
 14526                           ;doprnt.c: 1236: (putch('0') );
 14527  000884  0E30               	movlw	48
 14528  000886  ECDA  F026         	call	_putch
 14529                           
 14530                           ;doprnt.c: 1237: prec--;
 14531  00088A  0100               	movlb	0	; () banked
 14532  00088C  07A0               	decf	printf@prec& (0+255),f,b
 14533  00088E  A0D8               	btfss	status,0,c
 14534  000890  07A1               	decf	(printf@prec+1)& (0+255),f,b
 14535  000892  D000               	goto	l9254
 14536  000894                     l9254:
 14537                           
 14538                           ; BSR set to: 0
 14539  000894  0100               	movlb	0	; () banked
 14540  000896  51A0               	movf	printf@prec& (0+255),w,b
 14541  000898  0100               	movlb	0	; () banked
 14542  00089A  11A1               	iorwf	(printf@prec+1)& (0+255),w,b
 14543  00089C  B4D8               	btfsc	status,2,c
 14544  00089E  D1CE               	goto	l9352
 14545  0008A0  D7F1               	goto	l9250
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;doprnt.c: 1238: }
 14549                           ;doprnt.c: 1245: continue;
 14550  0008A2  D1CC               	goto	l9352
 14551  0008A4                     l1384:
 14552                           
 14553                           ; BSR set to: 0
 14554                           ;doprnt.c: 1246: }
 14555                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14556  0008A4  0100               	movlb	0	; () banked
 14557  0008A6  BFAE               	btfsc	printf@flag& (0+255),7,b
 14558  0008A8  D023               	goto	l9266
 14559                           
 14560                           ; BSR set to: 0
 14561                           ;doprnt.c: 1253: {
 14562                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 14563  0008AA  C09E  FFD9         	movff	printf@ap,fsr2l
 14564  0008AE  C09F  FFDA         	movff	printf@ap+1,fsr2h
 14565  0008B2  CFDE F0AA          	movff	postinc2,printf@val
 14566  0008B6  CFDD F0AB          	movff	postdec2,printf@val+1
 14567  0008BA  0100               	movlb	0	; () banked
 14568  0008BC  0E00               	movlw	0
 14569  0008BE  BFAB               	btfsc	(printf@val+1)& (0+255),7,b
 14570  0008C0  0EFF               	movlw	-1
 14571  0008C2  6FAC               	movwf	(printf@val+2)& (0+255),b
 14572  0008C4  6FAD               	movwf	(printf@val+3)& (0+255),b
 14573                           
 14574                           ; BSR set to: 0
 14575  0008C6  0E02               	movlw	2
 14576  0008C8  0100               	movlb	0	; () banked
 14577  0008CA  279E               	addwf	printf@ap& (0+255),f,b
 14578  0008CC  0E00               	movlw	0
 14579  0008CE  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 14580                           
 14581                           ; BSR set to: 0
 14582                           ;doprnt.c: 1261: if((long)val < 0) {
 14583  0008D0  0100               	movlb	0	; () banked
 14584  0008D2  AFAD               	btfss	(printf@val+3)& (0+255),7,b
 14585  0008D4  D078               	goto	l9300
 14586                           
 14587                           ; BSR set to: 0
 14588                           ;doprnt.c: 1262: flag |= 0x03;
 14589  0008D6  0E03               	movlw	3
 14590  0008D8  0100               	movlb	0	; () banked
 14591  0008DA  13AE               	iorwf	printf@flag& (0+255),f,b
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;doprnt.c: 1263: val = -val;
 14595  0008DC  0100               	movlb	0	; () banked
 14596  0008DE  1FAD               	comf	(printf@val+3)& (0+255),f,b
 14597  0008E0  1FAC               	comf	(printf@val+2)& (0+255),f,b
 14598  0008E2  1FAB               	comf	(printf@val+1)& (0+255),f,b
 14599  0008E4  6DAA               	negf	printf@val& (0+255),b
 14600  0008E6  0E00               	movlw	0
 14601  0008E8  23AB               	addwfc	(printf@val+1)& (0+255),f,b
 14602  0008EA  23AC               	addwfc	(printf@val+2)& (0+255),f,b
 14603  0008EC  23AD               	addwfc	(printf@val+3)& (0+255),f,b
 14604                           
 14605                           ; BSR set to: 0
 14606                           ;doprnt.c: 1264: }
 14607                           ;doprnt.c: 1266: }
 14608  0008EE  D06B               	goto	l9300
 14609  0008F0                     l9266:
 14610                           
 14611                           ; BSR set to: 0
 14612                           ;doprnt.c: 1268: else
 14613                           ;doprnt.c: 1273: {
 14614                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14615  0008F0  C09E  FFD9         	movff	printf@ap,fsr2l
 14616  0008F4  C09F  FFDA         	movff	printf@ap+1,fsr2h
 14617  0008F8  CFDE F094          	movff	postinc2,??_printf
 14618  0008FC  CFDD F095          	movff	postdec2,??_printf+1
 14619  000900  C094  F0AA         	movff	??_printf,printf@val
 14620  000904  C095  F0AB         	movff	??_printf+1,printf@val+1
 14621  000908  0100               	movlb	0	; () banked
 14622  00090A  6BAC               	clrf	(printf@val+2)& (0+255),b
 14623  00090C  6BAD               	clrf	(printf@val+3)& (0+255),b
 14624                           
 14625                           ; BSR set to: 0
 14626  00090E  0E02               	movlw	2
 14627  000910  0100               	movlb	0	; () banked
 14628  000912  279E               	addwf	printf@ap& (0+255),f,b
 14629  000914  0E00               	movlw	0
 14630  000916  239F               	addwfc	(printf@ap+1)& (0+255),f,b
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;doprnt.c: 1287: }
 14634                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14635  000918  D056               	goto	l9300
 14636  00091A                     l9270:
 14637                           
 14638                           ; BSR set to: 0
 14639                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14640  00091A  0E01               	movlw	1
 14641  00091C  0100               	movlb	0	; () banked
 14642  00091E  6FB3               	movwf	printf@c& (0+255),b
 14643  000920                     l9272:
 14644                           
 14645                           ; BSR set to: 0
 14646  000920  0E0A               	movlw	10
 14647  000922  0100               	movlb	0	; () banked
 14648  000924  19B3               	xorwf	printf@c& (0+255),w,b
 14649  000926  B4D8               	btfsc	status,2,c
 14650  000928  D058               	goto	l9302
 14651  00092A  D001               	goto	l9276
 14652                           
 14653                           ; BSR set to: 0
 14654  00092C  D056               	goto	l9302
 14655  00092E                     l9276:
 14656                           
 14657                           ; BSR set to: 0
 14658                           ;doprnt.c: 1306: if(val < dpowers[c])
 14659  00092E  0100               	movlb	0	; () banked
 14660  000930  51B3               	movf	printf@c& (0+255),w,b
 14661  000932  0D04               	mullw	4
 14662  000934  0E9C               	movlw	low _dpowers
 14663  000936  24F3               	addwf	prodl,w,c
 14664  000938  6EF6               	movwf	tblptrl,c
 14665  00093A  0EFD               	movlw	high _dpowers
 14666  00093C  20F4               	addwfc	prodh,w,c
 14667  00093E  6EF7               	movwf	tblptrh,c
 14668  000940                     	if	0	;There are less than 3 active tblptr bytes
 14669  000940                     	endif
 14670  000940  0009               	tblrd		*+
 14671  000942  50F5               	movf	tablat,w,c
 14672  000944  0100               	movlb	0	; () banked
 14673  000946  5DAA               	subwf	printf@val& (0+255),w,b
 14674  000948  0009               	tblrd		*+
 14675  00094A  50F5               	movf	tablat,w,c
 14676  00094C  0100               	movlb	0	; () banked
 14677  00094E  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 14678  000950  0009               	tblrd		*+
 14679  000952  50F5               	movf	tablat,w,c
 14680  000954  0100               	movlb	0	; () banked
 14681  000956  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14682  000958  0009               	tblrd		*+
 14683  00095A  50F5               	movf	tablat,w,c
 14684  00095C  0100               	movlb	0	; () banked
 14685  00095E  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14686  000960  A0D8               	btfss	status,0,c
 14687  000962  D03B               	goto	l9302
 14688  000964  D001               	goto	l9280
 14689                           
 14690                           ; BSR set to: 0
 14691                           ;doprnt.c: 1307: break;
 14692  000966  D039               	goto	l9302
 14693  000968                     l9280:
 14694                           
 14695                           ; BSR set to: 0
 14696  000968  0100               	movlb	0	; () banked
 14697  00096A  2BB3               	incf	printf@c& (0+255),f,b
 14698  00096C  D7D9               	goto	l9272
 14699                           
 14700                           ; BSR set to: 0
 14701                           ;doprnt.c: 1309: break;
 14702                           
 14703                           ; BSR set to: 0
 14704  00096E  D035               	goto	l9302
 14705  000970                     l9284:
 14706                           
 14707                           ; BSR set to: 0
 14708                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14709  000970  0E01               	movlw	1
 14710  000972  0100               	movlb	0	; () banked
 14711  000974  6FB3               	movwf	printf@c& (0+255),b
 14712  000976                     l9286:
 14713                           
 14714                           ; BSR set to: 0
 14715  000976  0E08               	movlw	8
 14716  000978  0100               	movlb	0	; () banked
 14717  00097A  19B3               	xorwf	printf@c& (0+255),w,b
 14718  00097C  B4D8               	btfsc	status,2,c
 14719  00097E  D02D               	goto	l9302
 14720  000980  D001               	goto	l9290
 14721                           
 14722                           ; BSR set to: 0
 14723  000982  D02B               	goto	l9302
 14724  000984                     l9290:
 14725                           
 14726                           ; BSR set to: 0
 14727                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14728  000984  0100               	movlb	0	; () banked
 14729  000986  51B3               	movf	printf@c& (0+255),w,b
 14730  000988  0D04               	mullw	4
 14731  00098A  0E12               	movlw	low _hexpowers
 14732  00098C  24F3               	addwf	prodl,w,c
 14733  00098E  6EF6               	movwf	tblptrl,c
 14734  000990  0EFE               	movlw	high _hexpowers
 14735  000992  20F4               	addwfc	prodh,w,c
 14736  000994  6EF7               	movwf	tblptrh,c
 14737  000996                     	if	0	;There are less than 3 active tblptr bytes
 14738  000996                     	endif
 14739  000996  0009               	tblrd		*+
 14740  000998  50F5               	movf	tablat,w,c
 14741  00099A  0100               	movlb	0	; () banked
 14742  00099C  5DAA               	subwf	printf@val& (0+255),w,b
 14743  00099E  0009               	tblrd		*+
 14744  0009A0  50F5               	movf	tablat,w,c
 14745  0009A2  0100               	movlb	0	; () banked
 14746  0009A4  59AB               	subwfb	(printf@val+1)& (0+255),w,b
 14747  0009A6  0009               	tblrd		*+
 14748  0009A8  50F5               	movf	tablat,w,c
 14749  0009AA  0100               	movlb	0	; () banked
 14750  0009AC  59AC               	subwfb	(printf@val+2)& (0+255),w,b
 14751  0009AE  0009               	tblrd		*+
 14752  0009B0  50F5               	movf	tablat,w,c
 14753  0009B2  0100               	movlb	0	; () banked
 14754  0009B4  59AD               	subwfb	(printf@val+3)& (0+255),w,b
 14755  0009B6  A0D8               	btfss	status,0,c
 14756  0009B8  D010               	goto	l9302
 14757  0009BA  D001               	goto	l9294
 14758                           
 14759                           ; BSR set to: 0
 14760                           ;doprnt.c: 1318: break;
 14761  0009BC  D00E               	goto	l9302
 14762  0009BE                     l9294:
 14763                           
 14764                           ; BSR set to: 0
 14765  0009BE  0100               	movlb	0	; () banked
 14766  0009C0  2BB3               	incf	printf@c& (0+255),f,b
 14767  0009C2  D7D9               	goto	l9286
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;doprnt.c: 1336: }
 14771                           
 14772                           ; BSR set to: 0
 14773                           ;doprnt.c: 1320: break;
 14774                           
 14775                           ; BSR set to: 0
 14776  0009C4  D00A               	goto	l9302
 14777  0009C6                     l9300:
 14778                           
 14779                           ; BSR set to: 0
 14780  0009C6  0100               	movlb	0	; () banked
 14781  0009C8  51AE               	movf	printf@flag& (0+255),w,b
 14782  0009CA  0B80               	andlw	128
 14783                           
 14784                           ; Switch size 1, requested type "space"
 14785                           ; Number of cases is 2, Range of values is 0 to 128
 14786                           ; switch strategies available:
 14787                           ; Name         Instructions Cycles
 14788                           ; simple_byte            7     4 (average)
 14789                           ;	Chosen strategy is simple_byte
 14790  0009CC  0A00               	xorlw	0	; case 0
 14791  0009CE  B4D8               	btfsc	status,2,c
 14792  0009D0  D7A4               	goto	l9270
 14793  0009D2  0A80               	xorlw	128	; case 128
 14794  0009D4  B4D8               	btfsc	status,2,c
 14795  0009D6  D7CC               	goto	l9284
 14796  0009D8  D000               	goto	l9302
 14797  0009DA                     l9302:
 14798                           
 14799                           ; BSR set to: 0
 14800                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14801  0009DA  0100               	movlb	0	; () banked
 14802  0009DC  51A6               	movf	printf@width& (0+255),w,b
 14803  0009DE  0100               	movlb	0	; () banked
 14804  0009E0  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14805  0009E2  B4D8               	btfsc	status,2,c
 14806  0009E4  D015               	goto	l9308
 14807                           
 14808                           ; BSR set to: 0
 14809  0009E6  0E03               	movlw	3
 14810  0009E8  0100               	movlb	0	; () banked
 14811  0009EA  15AE               	andwf	printf@flag& (0+255),w,b
 14812  0009EC  0100               	movlb	0	; () banked
 14813  0009EE  6F94               	movwf	??_printf& (0+255),b
 14814  0009F0  0E00               	movlw	0
 14815  0009F2  0100               	movlb	0	; () banked
 14816  0009F4  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14817  0009F6  0100               	movlb	0	; () banked
 14818  0009F8  6F95               	movwf	(??_printf+1)& (0+255),b
 14819  0009FA  0100               	movlb	0	; () banked
 14820  0009FC  5194               	movf	??_printf& (0+255),w,b
 14821  0009FE  0100               	movlb	0	; () banked
 14822  000A00  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14823  000A02  B4D8               	btfsc	status,2,c
 14824  000A04  D005               	goto	l9308
 14825                           
 14826                           ; BSR set to: 0
 14827                           ;doprnt.c: 1346: width--;
 14828  000A06  0100               	movlb	0	; () banked
 14829  000A08  07A6               	decf	printf@width& (0+255),f,b
 14830  000A0A  A0D8               	btfss	status,0,c
 14831  000A0C  07A7               	decf	(printf@width+1)& (0+255),f,b
 14832  000A0E  D000               	goto	l9308
 14833  000A10                     l9308:
 14834                           
 14835                           ; BSR set to: 0
 14836                           ;doprnt.c: 1381: if(width > c)
 14837  000A10  0E80               	movlw	128
 14838  000A12  0100               	movlb	0	; () banked
 14839  000A14  BFB3               	btfsc	printf@c& (0+255),7,b
 14840  000A16  0E7F               	movlw	127
 14841  000A18  0100               	movlb	0	; () banked
 14842  000A1A  6F94               	movwf	??_printf& (0+255),b
 14843  000A1C  0100               	movlb	0	; () banked
 14844  000A1E  51A6               	movf	printf@width& (0+255),w,b
 14845  000A20  0100               	movlb	0	; () banked
 14846  000A22  5DB3               	subwf	printf@c& (0+255),w,b
 14847  000A24  0100               	movlb	0	; () banked
 14848  000A26  51A7               	movf	(printf@width+1)& (0+255),w,b
 14849  000A28  0A80               	xorlw	128
 14850  000A2A  0100               	movlb	0	; () banked
 14851  000A2C  5994               	subwfb	??_printf& (0+255),w,b
 14852  000A2E  B0D8               	btfsc	status,0,c
 14853  000A30  D00B               	goto	l9312
 14854                           
 14855                           ; BSR set to: 0
 14856                           ;doprnt.c: 1382: width -= c;
 14857  000A32  0100               	movlb	0	; () banked
 14858  000A34  51B3               	movf	printf@c& (0+255),w,b
 14859  000A36  0100               	movlb	0	; () banked
 14860  000A38  5FA6               	subwf	printf@width& (0+255),f,b
 14861  000A3A  0E00               	movlw	0
 14862  000A3C  0100               	movlb	0	; () banked
 14863  000A3E  BFB3               	btfsc	printf@c& (0+255),7,b
 14864  000A40  0EFF               	movlw	255
 14865  000A42  0100               	movlb	0	; () banked
 14866  000A44  5BA7               	subwfb	(printf@width+1)& (0+255),f,b
 14867  000A46  D006               	goto	l9314
 14868  000A48                     l9312:
 14869                           
 14870                           ; BSR set to: 0
 14871                           ;doprnt.c: 1383: else
 14872                           ;doprnt.c: 1384: width = 0;
 14873  000A48  0E00               	movlw	0
 14874  000A4A  0100               	movlb	0	; () banked
 14875  000A4C  6FA7               	movwf	(printf@width+1)& (0+255),b
 14876  000A4E  0E00               	movlw	0
 14877  000A50  6FA6               	movwf	printf@width& (0+255),b
 14878  000A52  D000               	goto	l9314
 14879  000A54                     l9314:
 14880                           
 14881                           ; BSR set to: 0
 14882                           ;doprnt.c: 1387: if(flag & 0x04) {
 14883  000A54  0100               	movlb	0	; () banked
 14884  000A56  A5AE               	btfss	printf@flag& (0+255),2,b
 14885  000A58  D029               	goto	l9326
 14886                           
 14887                           ; BSR set to: 0
 14888                           ;doprnt.c: 1392: if(flag & 0x03)
 14889  000A5A  0E03               	movlw	3
 14890  000A5C  0100               	movlb	0	; () banked
 14891  000A5E  15AE               	andwf	printf@flag& (0+255),w,b
 14892  000A60  0100               	movlb	0	; () banked
 14893  000A62  6F94               	movwf	??_printf& (0+255),b
 14894  000A64  0E00               	movlw	0
 14895  000A66  0100               	movlb	0	; () banked
 14896  000A68  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14897  000A6A  0100               	movlb	0	; () banked
 14898  000A6C  6F95               	movwf	(??_printf+1)& (0+255),b
 14899  000A6E  0100               	movlb	0	; () banked
 14900  000A70  5194               	movf	??_printf& (0+255),w,b
 14901  000A72  0100               	movlb	0	; () banked
 14902  000A74  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14903  000A76  B4D8               	btfsc	status,2,c
 14904  000A78  D004               	goto	l9320
 14905                           
 14906                           ; BSR set to: 0
 14907                           ;doprnt.c: 1393: (putch('-') );
 14908  000A7A  0E2D               	movlw	45
 14909  000A7C  ECDA  F026         	call	_putch
 14910  000A80  D000               	goto	l9320
 14911  000A82                     l9320:
 14912                           
 14913                           ;doprnt.c: 1415: if(width)
 14914  000A82  0100               	movlb	0	; () banked
 14915  000A84  51A6               	movf	printf@width& (0+255),w,b
 14916  000A86  0100               	movlb	0	; () banked
 14917  000A88  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14918  000A8A  B4D8               	btfsc	status,2,c
 14919  000A8C  D038               	goto	l9336
 14920  000A8E                     l9322:
 14921                           
 14922                           ; BSR set to: 0
 14923                           ;doprnt.c: 1417: (putch('0') );
 14924  000A8E  0E30               	movlw	48
 14925  000A90  ECDA  F026         	call	_putch
 14926                           
 14927                           ;doprnt.c: 1418: while(--width);
 14928  000A94  0100               	movlb	0	; () banked
 14929  000A96  07A6               	decf	printf@width& (0+255),f,b
 14930  000A98  A0D8               	btfss	status,0,c
 14931  000A9A  07A7               	decf	(printf@width+1)& (0+255),f,b
 14932  000A9C  0100               	movlb	0	; () banked
 14933  000A9E  51A6               	movf	printf@width& (0+255),w,b
 14934  000AA0  0100               	movlb	0	; () banked
 14935  000AA2  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14936  000AA4  B4D8               	btfsc	status,2,c
 14937  000AA6  D02B               	goto	l9336
 14938  000AA8  D7F2               	goto	l9322
 14939                           
 14940                           ; BSR set to: 0
 14941                           ;doprnt.c: 1420: } else
 14942                           
 14943                           ; BSR set to: 0
 14944  000AAA  D029               	goto	l9336
 14945  000AAC                     l9326:
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;doprnt.c: 1422: {
 14949                           ;doprnt.c: 1424: if(width
 14950                           ;doprnt.c: 1428: )
 14951  000AAC  0100               	movlb	0	; () banked
 14952  000AAE  51A6               	movf	printf@width& (0+255),w,b
 14953  000AB0  0100               	movlb	0	; () banked
 14954  000AB2  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14955  000AB4  B4D8               	btfsc	status,2,c
 14956  000AB6  D00F               	goto	l9332
 14957  000AB8                     l9328:
 14958                           
 14959                           ; BSR set to: 0
 14960                           ;doprnt.c: 1430: (putch(' ') );
 14961  000AB8  0E20               	movlw	32
 14962  000ABA  ECDA  F026         	call	_putch
 14963                           
 14964                           ;doprnt.c: 1431: while(--width);
 14965  000ABE  0100               	movlb	0	; () banked
 14966  000AC0  07A6               	decf	printf@width& (0+255),f,b
 14967  000AC2  A0D8               	btfss	status,0,c
 14968  000AC4  07A7               	decf	(printf@width+1)& (0+255),f,b
 14969  000AC6  0100               	movlb	0	; () banked
 14970  000AC8  51A6               	movf	printf@width& (0+255),w,b
 14971  000ACA  0100               	movlb	0	; () banked
 14972  000ACC  11A7               	iorwf	(printf@width+1)& (0+255),w,b
 14973  000ACE  B4D8               	btfsc	status,2,c
 14974  000AD0  D002               	goto	l9332
 14975  000AD2  D7F2               	goto	l9328
 14976                           
 14977                           ; BSR set to: 0
 14978  000AD4  D000               	goto	l9332
 14979  000AD6                     l9332:
 14980                           
 14981                           ; BSR set to: 0
 14982                           ;doprnt.c: 1438: if(flag & 0x03)
 14983  000AD6  0E03               	movlw	3
 14984  000AD8  0100               	movlb	0	; () banked
 14985  000ADA  15AE               	andwf	printf@flag& (0+255),w,b
 14986  000ADC  0100               	movlb	0	; () banked
 14987  000ADE  6F94               	movwf	??_printf& (0+255),b
 14988  000AE0  0E00               	movlw	0
 14989  000AE2  0100               	movlb	0	; () banked
 14990  000AE4  15AF               	andwf	(printf@flag+1)& (0+255),w,b
 14991  000AE6  0100               	movlb	0	; () banked
 14992  000AE8  6F95               	movwf	(??_printf+1)& (0+255),b
 14993  000AEA  0100               	movlb	0	; () banked
 14994  000AEC  5194               	movf	??_printf& (0+255),w,b
 14995  000AEE  0100               	movlb	0	; () banked
 14996  000AF0  1195               	iorwf	(??_printf+1)& (0+255),w,b
 14997  000AF2  B4D8               	btfsc	status,2,c
 14998  000AF4  D004               	goto	l9336
 14999                           
 15000                           ; BSR set to: 0
 15001                           ;doprnt.c: 1439: (putch('-') );
 15002  000AF6  0E2D               	movlw	45
 15003  000AF8  ECDA  F026         	call	_putch
 15004  000AFC  D000               	goto	l9336
 15005  000AFE                     l9336:
 15006                           
 15007                           ;doprnt.c: 1469: }
 15008                           ;doprnt.c: 1472: prec = c;
 15009  000AFE  0100               	movlb	0	; () banked
 15010  000B00  51B3               	movf	printf@c& (0+255),w,b
 15011  000B02  0100               	movlb	0	; () banked
 15012  000B04  6FA0               	movwf	printf@prec& (0+255),b
 15013  000B06  6BA1               	clrf	(printf@prec+1)& (0+255),b
 15014  000B08  BFA0               	btfsc	printf@prec& (0+255),7,b
 15015  000B0A  07A1               	decf	(printf@prec+1)& (0+255),f,b
 15016                           
 15017                           ;doprnt.c: 1474: while(prec--) {
 15018  000B0C  D08A               	goto	l9350
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 15022  000B0E  D07A               	goto	l9346
 15023  000B10                     l9338:
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15027  000B10  C0A0  F094         	movff	printf@prec,??_printf
 15028  000B14  C0A1  F095         	movff	printf@prec+1,??_printf+1
 15029  000B18  0100               	movlb	0	; () banked
 15030  000B1A  90D8               	bcf	status,0,c
 15031  000B1C  3794               	rlcf	??_printf& (0+255),f,b
 15032  000B1E  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15033  000B20  0100               	movlb	0	; () banked
 15034  000B22  90D8               	bcf	status,0,c
 15035  000B24  3794               	rlcf	??_printf& (0+255),f,b
 15036  000B26  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15037  000B28  0E9C               	movlw	low _dpowers
 15038  000B2A  0100               	movlb	0	; () banked
 15039  000B2C  2594               	addwf	??_printf& (0+255),w,b
 15040  000B2E  6EF6               	movwf	tblptrl,c
 15041  000B30  0EFD               	movlw	high _dpowers
 15042  000B32  2195               	addwfc	(??_printf+1)& (0+255),w,b
 15043  000B34  6EF7               	movwf	tblptrh,c
 15044  000B36                     	if	0	;There are less than 3 active tblptr bytes
 15045  000B36                     	endif
 15046  000B36  0009               	tblrd		*+
 15047  000B38  CFF5 F015          	movff	tablat,___lldiv@divisor
 15048  000B3C  0009               	tblrd		*+
 15049  000B3E  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15050  000B42  0009               	tblrd		*+
 15051  000B44  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15052  000B48  000A               	tblrd		*-
 15053  000B4A  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15054  000B4E  C0AA  F011         	movff	printf@val,___lldiv@dividend
 15055  000B52  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 15056  000B56  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 15057  000B5A  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 15058  000B5E  ECA7  F01F         	call	___lldiv	;wreg free
 15059  000B62  C011  F01E         	movff	?___lldiv,___llmod@dividend
 15060  000B66  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
 15061  000B6A  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
 15062  000B6E  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
 15063  000B72  0E0A               	movlw	10
 15064  000B74  6E22               	movwf	___llmod@divisor,c
 15065  000B76  0E00               	movlw	0
 15066  000B78  6E23               	movwf	___llmod@divisor+1,c
 15067  000B7A  0E00               	movlw	0
 15068  000B7C  6E24               	movwf	___llmod@divisor+2,c
 15069  000B7E  0E00               	movlw	0
 15070  000B80  6E25               	movwf	___llmod@divisor+3,c
 15071  000B82  ECB3  F020         	call	___llmod	;wreg free
 15072  000B86  501E               	movf	?___llmod,w,c
 15073  000B88  0F30               	addlw	48
 15074  000B8A  0100               	movlb	0	; () banked
 15075  000B8C  6FB3               	movwf	printf@c& (0+255),b
 15076                           
 15077                           ;doprnt.c: 1491: break;
 15078  000B8E  D044               	goto	l9348
 15079  000B90                     l9340:
 15080                           
 15081                           ; BSR set to: 0
 15082                           ;doprnt.c: 1499: {
 15083                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15084  000B90  C0AA  F011         	movff	printf@val,___lldiv@dividend
 15085  000B94  C0AB  F012         	movff	printf@val+1,___lldiv@dividend+1
 15086  000B98  C0AC  F013         	movff	printf@val+2,___lldiv@dividend+2
 15087  000B9C  C0AD  F014         	movff	printf@val+3,___lldiv@dividend+3
 15088  000BA0  C0A0  F094         	movff	printf@prec,??_printf
 15089  000BA4  C0A1  F095         	movff	printf@prec+1,??_printf+1
 15090  000BA8  0100               	movlb	0	; () banked
 15091  000BAA  90D8               	bcf	status,0,c
 15092  000BAC  3794               	rlcf	??_printf& (0+255),f,b
 15093  000BAE  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15094  000BB0  0100               	movlb	0	; () banked
 15095  000BB2  90D8               	bcf	status,0,c
 15096  000BB4  3794               	rlcf	??_printf& (0+255),f,b
 15097  000BB6  3795               	rlcf	(??_printf+1)& (0+255),f,b
 15098  000BB8  0E12               	movlw	low _hexpowers
 15099  000BBA  0100               	movlb	0	; () banked
 15100  000BBC  2594               	addwf	??_printf& (0+255),w,b
 15101  000BBE  6EF6               	movwf	tblptrl,c
 15102  000BC0  0EFE               	movlw	high _hexpowers
 15103  000BC2  2195               	addwfc	(??_printf+1)& (0+255),w,b
 15104  000BC4  6EF7               	movwf	tblptrh,c
 15105  000BC6                     	if	0	;There are less than 3 active tblptr bytes
 15106  000BC6                     	endif
 15107  000BC6  0009               	tblrd		*+
 15108  000BC8  CFF5 F015          	movff	tablat,___lldiv@divisor
 15109  000BCC  0009               	tblrd		*+
 15110  000BCE  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15111  000BD2  0009               	tblrd		*+
 15112  000BD4  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15113  000BD8  000A               	tblrd		*-
 15114  000BDA  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15115  000BDE  ECA7  F01F         	call	___lldiv	;wreg free
 15116  000BE2  5011               	movf	?___lldiv,w,c
 15117  000BE4  0B0F               	andlw	15
 15118  000BE6  0100               	movlb	0	; () banked
 15119  000BE8  6F9D               	movwf	printf@idx& (0+255),b
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15123  000BEA  0100               	movlb	0	; () banked
 15124  000BEC  519D               	movf	printf@idx& (0+255),w,b
 15125  000BEE  0D01               	mullw	1
 15126  000BF0  0E5B               	movlw	low STR_47
 15127  000BF2  24F3               	addwf	prodl,w,c
 15128  000BF4  6EF6               	movwf	tblptrl,c
 15129  000BF6  0EFF               	movlw	high STR_47
 15130  000BF8  20F4               	addwfc	prodh,w,c
 15131  000BFA  6EF7               	movwf	tblptrh,c
 15132  000BFC                     	if	0	;There are less than 3 active tblptr bytes
 15133  000BFC                     	endif
 15134  000BFC  0008               	tblrd		*
 15135  000BFE  CFF5 F0B3          	movff	tablat,printf@c
 15136                           
 15137                           ; BSR set to: 0
 15138                           ;doprnt.c: 1523: }
 15139                           
 15140                           ;doprnt.c: 1508: }
 15141                           ;doprnt.c: 1510: break;
 15142  000C02  D00A               	goto	l9348
 15143  000C04                     l9346:
 15144                           
 15145                           ; BSR set to: 0
 15146  000C04  0100               	movlb	0	; () banked
 15147  000C06  51AE               	movf	printf@flag& (0+255),w,b
 15148  000C08  0B80               	andlw	128
 15149                           
 15150                           ; Switch size 1, requested type "space"
 15151                           ; Number of cases is 2, Range of values is 0 to 128
 15152                           ; switch strategies available:
 15153                           ; Name         Instructions Cycles
 15154                           ; simple_byte            7     4 (average)
 15155                           ;	Chosen strategy is simple_byte
 15156  000C0A  0A00               	xorlw	0	; case 0
 15157  000C0C  B4D8               	btfsc	status,2,c
 15158  000C0E  D780               	goto	l9338
 15159  000C10  0A80               	xorlw	128	; case 128
 15160  000C12  B4D8               	btfsc	status,2,c
 15161  000C14  D7BD               	goto	l9340
 15162  000C16  D000               	goto	l9348
 15163  000C18                     l9348:
 15164                           
 15165                           ; BSR set to: 0
 15166                           ;doprnt.c: 1524: (putch(c) );
 15167  000C18  0100               	movlb	0	; () banked
 15168  000C1A  51B3               	movf	printf@c& (0+255),w,b
 15169  000C1C  ECDA  F026         	call	_putch
 15170  000C20  D000               	goto	l9350
 15171  000C22                     l9350:
 15172  000C22  0100               	movlb	0	; () banked
 15173  000C24  07A0               	decf	printf@prec& (0+255),f,b
 15174  000C26  A0D8               	btfss	status,0,c
 15175  000C28  07A1               	decf	(printf@prec+1)& (0+255),f,b
 15176  000C2A  0100               	movlb	0	; () banked
 15177  000C2C  29A0               	incf	printf@prec& (0+255),w,b
 15178  000C2E  E1EA               	bnz	l9346
 15179  000C30  0100               	movlb	0	; () banked
 15180  000C32  29A1               	incf	(printf@prec+1)& (0+255),w,b
 15181  000C34  B4D8               	btfsc	status,2,c
 15182  000C36  D002               	goto	l9352
 15183  000C38  D7E5               	goto	l9346
 15184                           
 15185                           ; BSR set to: 0
 15186  000C3A  D000               	goto	l9352
 15187  000C3C                     l9352:
 15188  000C3C  C086  FFF6         	movff	printf@f,tblptrl
 15189  000C40  C087  FFF7         	movff	printf@f+1,tblptrh
 15190  000C44  0100               	movlb	0	; () banked
 15191  000C46  4B86               	infsnz	printf@f& (0+255),f,b
 15192  000C48  2B87               	incf	(printf@f+1)& (0+255),f,b
 15193  000C4A                     	if	0	;tblptru may be non-zero
 15194  000C4A                     	endif
 15195  000C4A                     	if	0	;tblptru may be non-zero
 15196  000C4A                     	endif
 15197  000C4A  0008               	tblrd		*
 15198  000C4C  CFF5 F0B3          	movff	tablat,printf@c
 15199  000C50  0100               	movlb	0	; () banked
 15200  000C52  51B3               	movf	printf@c& (0+255),w,b
 15201  000C54  B4D8               	btfsc	status,2,c
 15202  000C56  D003               	goto	l1466
 15203  000C58  EF16  F000         	goto	l9066
 15204                           
 15205                           ; BSR set to: 0
 15206  000C5C  D000               	goto	l1466
 15207  000C5E                     l1466:
 15208  000C5E  0012               	return		;funcret
 15209  000C60                     __end_of_printf:
 15210                           	opt stack 0
 15211                           tblptru	equ	0xFF8
 15212                           tblptrh	equ	0xFF7
 15213                           tblptrl	equ	0xFF6
 15214                           tablat	equ	0xFF5
 15215                           prodh	equ	0xFF4
 15216                           prodl	equ	0xFF3
 15217                           intcon	equ	0xFF2
 15218                           intcon2	equ	0xFF1
 15219                           intcon3	equ	0xFF0
 15220                           postinc0	equ	0xFEE
 15221                           wreg	equ	0xFE8
 15222                           postdec1	equ	0xFE5
 15223                           plusw1	equ	0xFE3
 15224                           fsr1l	equ	0xFE1
 15225                           indf2	equ	0xFDF
 15226                           postinc2	equ	0xFDE
 15227                           postdec2	equ	0xFDD
 15228                           plusw2	equ	0xFDB
 15229                           fsr2h	equ	0xFDA
 15230                           fsr2l	equ	0xFD9
 15231                           status	equ	0xFD8
 15232                           
 15233 ;; *************** function _scale *****************
 15234 ;; Defined at:
 15235 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15236 ;; Parameters:    Size  Location     Type
 15237 ;;  scl             1    wreg     char 
 15238 ;; Auto vars:     Size  Location     Type
 15239 ;;  scl             1   72[COMRAM] char 
 15240 ;; Return value:  Size  Location     Type
 15241 ;;                  3   66[COMRAM] char 
 15242 ;; Registers used:
 15243 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15244 ;; Tracked objects:
 15245 ;;		On entry : 0/0
 15246 ;;		On exit  : 0/0
 15247 ;;		Unchanged: 0/0
 15248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15249 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15250 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15252 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15253 ;;Total ram usage:        7 bytes
 15254 ;; Hardware stack levels used:    1
 15255 ;; Hardware stack levels required when called:    5
 15256 ;; This function calls:
 15257 ;;		___awdiv
 15258 ;;		___awmod
 15259 ;;		___ftmul
 15260 ;;		___wmul
 15261 ;; This function is called by:
 15262 ;;		_printf
 15263 ;; This function uses a non-reentrant model
 15264 ;;
 15265                           
 15266                           	psect	text63
 15267  00135E                     __ptext63:
 15268                           	opt stack 0
 15269  00135E                     _scale:
 15270                           	opt stack 24
 15271                           
 15272                           ;incstack = 0
 15273                           ;scale@scl stored from wreg
 15274  00135E  6E49               	movwf	scale@scl,c
 15275                           
 15276                           ;doprnt.c: 428: if(scl < 0) {
 15277  001360  AE49               	btfss	scale@scl,7,c
 15278  001362  D0EF               	goto	l8794
 15279                           
 15280                           ;doprnt.c: 429: scl = -scl;
 15281  001364  6C49               	negf	scale@scl,c
 15282                           
 15283                           ;doprnt.c: 430: if(scl>=110)
 15284  001366  5049               	movf	scale@scl,w,c
 15285  001368  0A80               	xorlw	128
 15286  00136A  0F12               	addlw	-238
 15287  00136C  A0D8               	btfss	status,0,c
 15288  00136E  D08D               	goto	l8784
 15289                           
 15290                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15291  001370  0E00               	movlw	0
 15292  001372  6E14               	movwf	___wmul@multiplicand+1,c
 15293  001374  0E03               	movlw	3
 15294  001376  6E13               	movwf	___wmul@multiplicand,c
 15295  001378  0E00               	movlw	0
 15296  00137A  6E1A               	movwf	___awdiv@divisor+1,c
 15297  00137C  0E0A               	movlw	10
 15298  00137E  6E19               	movwf	___awdiv@divisor,c
 15299  001380  0E00               	movlw	0
 15300  001382  6E40               	movwf	___awmod@divisor+1,c
 15301  001384  0E64               	movlw	100
 15302  001386  6E3F               	movwf	___awmod@divisor,c
 15303  001388  5049               	movf	scale@scl,w,c
 15304  00138A  6E3D               	movwf	___awmod@dividend,c
 15305  00138C  6A3E               	clrf	___awmod@dividend+1,c
 15306  00138E  BE3D               	btfsc	___awmod@dividend,7,c
 15307  001390  063E               	decf	___awmod@dividend+1,f,c
 15308  001392  EC72  F020         	call	___awmod	;wreg free
 15309  001396  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15310  00139A  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15311  00139E  EC3B  F01E         	call	___awdiv	;wreg free
 15312  0013A2  0E09               	movlw	9
 15313  0013A4  2417               	addwf	?___awdiv,w,c
 15314  0013A6  6E11               	movwf	___wmul@multiplier,c
 15315  0013A8  0E00               	movlw	0
 15316  0013AA  2018               	addwfc	?___awdiv+1,w,c
 15317  0013AC  6E12               	movwf	___wmul@multiplier+1,c
 15318  0013AE  ECE7  F024         	call	___wmul	;wreg free
 15319  0013B2  0EC4               	movlw	low __npowers_
 15320  0013B4  2411               	addwf	?___wmul,w,c
 15321  0013B6  6EF6               	movwf	tblptrl,c
 15322  0013B8  0EFD               	movlw	high __npowers_
 15323  0013BA  2012               	addwfc	?___wmul+1,w,c
 15324  0013BC  6EF7               	movwf	tblptrh,c
 15325  0013BE                     	if	0	;There are less than 3 active tblptr bytes
 15326  0013BE                     	endif
 15327  0013BE  0009               	tblrd		*+
 15328  0013C0  CFF5 F022          	movff	tablat,___ftmul@f2
 15329  0013C4  0009               	tblrd		*+
 15330  0013C6  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15331  0013CA  000A               	tblrd		*-
 15332  0013CC  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15333  0013D0  0E00               	movlw	0
 15334  0013D2  6E1A               	movwf	___awdiv@divisor+1,c
 15335  0013D4  0E64               	movlw	100
 15336  0013D6  6E19               	movwf	___awdiv@divisor,c
 15337  0013D8  5049               	movf	scale@scl,w,c
 15338  0013DA  6E17               	movwf	___awdiv@dividend,c
 15339  0013DC  6A18               	clrf	___awdiv@dividend+1,c
 15340  0013DE  BE17               	btfsc	___awdiv@dividend,7,c
 15341  0013E0  0618               	decf	___awdiv@dividend+1,f,c
 15342  0013E2  EC3B  F01E         	call	___awdiv	;wreg free
 15343  0013E6  0E12               	movlw	18
 15344  0013E8  2417               	addwf	?___awdiv,w,c
 15345  0013EA  6E11               	movwf	___wmul@multiplier,c
 15346  0013EC  0E00               	movlw	0
 15347  0013EE  2018               	addwfc	?___awdiv+1,w,c
 15348  0013F0  6E12               	movwf	___wmul@multiplier+1,c
 15349  0013F2  0E00               	movlw	0
 15350  0013F4  6E14               	movwf	___wmul@multiplicand+1,c
 15351  0013F6  0E03               	movlw	3
 15352  0013F8  6E13               	movwf	___wmul@multiplicand,c
 15353  0013FA  ECE7  F024         	call	___wmul	;wreg free
 15354  0013FE  0EC4               	movlw	low __npowers_
 15355  001400  2411               	addwf	?___wmul,w,c
 15356  001402  6EF6               	movwf	tblptrl,c
 15357  001404  0EFD               	movlw	high __npowers_
 15358  001406  2012               	addwfc	?___wmul+1,w,c
 15359  001408  6EF7               	movwf	tblptrh,c
 15360  00140A                     	if	0	;There are less than 3 active tblptr bytes
 15361  00140A                     	endif
 15362  00140A  0009               	tblrd		*+
 15363  00140C  CFF5 F01F          	movff	tablat,___ftmul@f1
 15364  001410  0009               	tblrd		*+
 15365  001412  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15366  001416  000A               	tblrd		*-
 15367  001418  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15368  00141C  ECFE  F018         	call	___ftmul	;wreg free
 15369  001420  C01F  F046         	movff	?___ftmul,_scale$2977
 15370  001424  C020  F047         	movff	?___ftmul+1,_scale$2977+1
 15371  001428  C021  F048         	movff	?___ftmul+2,_scale$2977+2
 15372                           
 15373                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15374  00142C  C046  F01F         	movff	_scale$2977,___ftmul@f1
 15375  001430  C047  F020         	movff	_scale$2977+1,___ftmul@f1+1
 15376  001434  C048  F021         	movff	_scale$2977+2,___ftmul@f1+2
 15377  001438  0E00               	movlw	0
 15378  00143A  6E14               	movwf	___wmul@multiplicand+1,c
 15379  00143C  0E03               	movlw	3
 15380  00143E  6E13               	movwf	___wmul@multiplicand,c
 15381  001440  0E00               	movlw	0
 15382  001442  6E40               	movwf	___awmod@divisor+1,c
 15383  001444  0E0A               	movlw	10
 15384  001446  6E3F               	movwf	___awmod@divisor,c
 15385  001448  5049               	movf	scale@scl,w,c
 15386  00144A  6E3D               	movwf	___awmod@dividend,c
 15387  00144C  6A3E               	clrf	___awmod@dividend+1,c
 15388  00144E  BE3D               	btfsc	___awmod@dividend,7,c
 15389  001450  063E               	decf	___awmod@dividend+1,f,c
 15390  001452  EC72  F020         	call	___awmod	;wreg free
 15391  001456  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15392  00145A  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15393  00145E  ECE7  F024         	call	___wmul	;wreg free
 15394  001462  0EC4               	movlw	low __npowers_
 15395  001464  2411               	addwf	?___wmul,w,c
 15396  001466  6EF6               	movwf	tblptrl,c
 15397  001468  0EFD               	movlw	high __npowers_
 15398  00146A  2012               	addwfc	?___wmul+1,w,c
 15399  00146C  6EF7               	movwf	tblptrh,c
 15400  00146E                     	if	0	;There are less than 3 active tblptr bytes
 15401  00146E                     	endif
 15402  00146E  0009               	tblrd		*+
 15403  001470  CFF5 F022          	movff	tablat,___ftmul@f2
 15404  001474  0009               	tblrd		*+
 15405  001476  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15406  00147A  000A               	tblrd		*-
 15407  00147C  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15408  001480  ECFE  F018         	call	___ftmul	;wreg free
 15409  001484  D141               	goto	L13
 15410  001486  D15A               	goto	l1355
 15411  001488  D054               	goto	l8790
 15412  00148A                     l8784:
 15413                           
 15414                           ;doprnt.c: 432: else if(scl > 10)
 15415  00148A  5049               	movf	scale@scl,w,c
 15416  00148C  0A80               	xorlw	128
 15417  00148E  0F75               	addlw	-139
 15418  001490  A0D8               	btfss	status,0,c
 15419  001492  D04F               	goto	l8790
 15420                           
 15421                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 15422  001494  0E00               	movlw	0
 15423  001496  6E1A               	movwf	___awdiv@divisor+1,c
 15424  001498  0E0A               	movlw	10
 15425  00149A  6E19               	movwf	___awdiv@divisor,c
 15426  00149C  5049               	movf	scale@scl,w,c
 15427  00149E  6E17               	movwf	___awdiv@dividend,c
 15428  0014A0  6A18               	clrf	___awdiv@dividend+1,c
 15429  0014A2  BE17               	btfsc	___awdiv@dividend,7,c
 15430  0014A4  0618               	decf	___awdiv@dividend+1,f,c
 15431  0014A6  EC3B  F01E         	call	___awdiv	;wreg free
 15432  0014AA  0E09               	movlw	9
 15433  0014AC  2417               	addwf	?___awdiv,w,c
 15434  0014AE  6E11               	movwf	___wmul@multiplier,c
 15435  0014B0  0E00               	movlw	0
 15436  0014B2  2018               	addwfc	?___awdiv+1,w,c
 15437  0014B4  6E12               	movwf	___wmul@multiplier+1,c
 15438  0014B6  0E00               	movlw	0
 15439  0014B8  6E14               	movwf	___wmul@multiplicand+1,c
 15440  0014BA  0E03               	movlw	3
 15441  0014BC  6E13               	movwf	___wmul@multiplicand,c
 15442  0014BE  ECE7  F024         	call	___wmul	;wreg free
 15443  0014C2  0EC4               	movlw	low __npowers_
 15444  0014C4  2411               	addwf	?___wmul,w,c
 15445  0014C6  6EF6               	movwf	tblptrl,c
 15446  0014C8  0EFD               	movlw	high __npowers_
 15447  0014CA  2012               	addwfc	?___wmul+1,w,c
 15448  0014CC  6EF7               	movwf	tblptrh,c
 15449  0014CE                     	if	0	;There are less than 3 active tblptr bytes
 15450  0014CE                     	endif
 15451  0014CE  0009               	tblrd		*+
 15452  0014D0  CFF5 F01F          	movff	tablat,___ftmul@f1
 15453  0014D4  0009               	tblrd		*+
 15454  0014D6  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15455  0014DA  000A               	tblrd		*-
 15456  0014DC  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15457  0014E0  0E00               	movlw	0
 15458  0014E2  6E14               	movwf	___wmul@multiplicand+1,c
 15459  0014E4  0E03               	movlw	3
 15460  0014E6  6E13               	movwf	___wmul@multiplicand,c
 15461  0014E8  0E00               	movlw	0
 15462  0014EA  6E40               	movwf	___awmod@divisor+1,c
 15463  0014EC  0E0A               	movlw	10
 15464  0014EE  6E3F               	movwf	___awmod@divisor,c
 15465  0014F0  5049               	movf	scale@scl,w,c
 15466  0014F2  6E3D               	movwf	___awmod@dividend,c
 15467  0014F4  6A3E               	clrf	___awmod@dividend+1,c
 15468  0014F6  BE3D               	btfsc	___awmod@dividend,7,c
 15469  0014F8  063E               	decf	___awmod@dividend+1,f,c
 15470  0014FA  EC72  F020         	call	___awmod	;wreg free
 15471  0014FE  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15472  001502  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15473  001506  ECE7  F024         	call	___wmul	;wreg free
 15474  00150A  0EC4               	movlw	low __npowers_
 15475  00150C  2411               	addwf	?___wmul,w,c
 15476  00150E  6EF6               	movwf	tblptrl,c
 15477  001510  0EFD               	movlw	high __npowers_
 15478  001512  2012               	addwfc	?___wmul+1,w,c
 15479  001514  6EF7               	movwf	tblptrh,c
 15480  001516                     	if	0	;There are less than 3 active tblptr bytes
 15481  001516                     	endif
 15482  001516  0009               	tblrd		*+
 15483  001518  CFF5 F022          	movff	tablat,___ftmul@f2
 15484  00151C  0009               	tblrd		*+
 15485  00151E  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15486  001522  000A               	tblrd		*-
 15487  001524  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15488  001528  ECFE  F018         	call	___ftmul	;wreg free
 15489  00152C  D0ED               	goto	L13
 15490  00152E  D106               	goto	l1355
 15491  001530  D000               	goto	l8790
 15492  001532                     l8790:
 15493                           
 15494                           ;doprnt.c: 434: return _npowers_[scl];
 15495  001532  5049               	movf	scale@scl,w,c
 15496  001534  0D03               	mullw	3
 15497  001536  0EC4               	movlw	low __npowers_
 15498  001538  24F3               	addwf	prodl,w,c
 15499  00153A  6EF6               	movwf	tblptrl,c
 15500  00153C  0EFD               	movlw	high __npowers_
 15501  00153E  D0F2               	goto	L12
 15502  001540  D0FD               	goto	l1355
 15503  001542                     l8794:
 15504                           
 15505                           ;doprnt.c: 435: }
 15506                           ;doprnt.c: 436: if(scl>=110)
 15507  001542  5049               	movf	scale@scl,w,c
 15508  001544  0A80               	xorlw	128
 15509  001546  0F12               	addlw	-238
 15510  001548  A0D8               	btfss	status,0,c
 15511  00154A  D08D               	goto	l8802
 15512                           
 15513                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15514  00154C  0E00               	movlw	0
 15515  00154E  6E14               	movwf	___wmul@multiplicand+1,c
 15516  001550  0E03               	movlw	3
 15517  001552  6E13               	movwf	___wmul@multiplicand,c
 15518  001554  0E00               	movlw	0
 15519  001556  6E1A               	movwf	___awdiv@divisor+1,c
 15520  001558  0E0A               	movlw	10
 15521  00155A  6E19               	movwf	___awdiv@divisor,c
 15522  00155C  0E00               	movlw	0
 15523  00155E  6E40               	movwf	___awmod@divisor+1,c
 15524  001560  0E64               	movlw	100
 15525  001562  6E3F               	movwf	___awmod@divisor,c
 15526  001564  5049               	movf	scale@scl,w,c
 15527  001566  6E3D               	movwf	___awmod@dividend,c
 15528  001568  6A3E               	clrf	___awmod@dividend+1,c
 15529  00156A  BE3D               	btfsc	___awmod@dividend,7,c
 15530  00156C  063E               	decf	___awmod@dividend+1,f,c
 15531  00156E  EC72  F020         	call	___awmod	;wreg free
 15532  001572  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15533  001576  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15534  00157A  EC3B  F01E         	call	___awdiv	;wreg free
 15535  00157E  0E09               	movlw	9
 15536  001580  2417               	addwf	?___awdiv,w,c
 15537  001582  6E11               	movwf	___wmul@multiplier,c
 15538  001584  0E00               	movlw	0
 15539  001586  2018               	addwfc	?___awdiv+1,w,c
 15540  001588  6E12               	movwf	___wmul@multiplier+1,c
 15541  00158A  ECE7  F024         	call	___wmul	;wreg free
 15542  00158E  0EEB               	movlw	low __powers_
 15543  001590  2411               	addwf	?___wmul,w,c
 15544  001592  6EF6               	movwf	tblptrl,c
 15545  001594  0EFD               	movlw	high __powers_
 15546  001596  2012               	addwfc	?___wmul+1,w,c
 15547  001598  6EF7               	movwf	tblptrh,c
 15548  00159A                     	if	0	;There are less than 3 active tblptr bytes
 15549  00159A                     	endif
 15550  00159A  0009               	tblrd		*+
 15551  00159C  CFF5 F022          	movff	tablat,___ftmul@f2
 15552  0015A0  0009               	tblrd		*+
 15553  0015A2  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15554  0015A6  000A               	tblrd		*-
 15555  0015A8  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15556  0015AC  0E00               	movlw	0
 15557  0015AE  6E1A               	movwf	___awdiv@divisor+1,c
 15558  0015B0  0E64               	movlw	100
 15559  0015B2  6E19               	movwf	___awdiv@divisor,c
 15560  0015B4  5049               	movf	scale@scl,w,c
 15561  0015B6  6E17               	movwf	___awdiv@dividend,c
 15562  0015B8  6A18               	clrf	___awdiv@dividend+1,c
 15563  0015BA  BE17               	btfsc	___awdiv@dividend,7,c
 15564  0015BC  0618               	decf	___awdiv@dividend+1,f,c
 15565  0015BE  EC3B  F01E         	call	___awdiv	;wreg free
 15566  0015C2  0E12               	movlw	18
 15567  0015C4  2417               	addwf	?___awdiv,w,c
 15568  0015C6  6E11               	movwf	___wmul@multiplier,c
 15569  0015C8  0E00               	movlw	0
 15570  0015CA  2018               	addwfc	?___awdiv+1,w,c
 15571  0015CC  6E12               	movwf	___wmul@multiplier+1,c
 15572  0015CE  0E00               	movlw	0
 15573  0015D0  6E14               	movwf	___wmul@multiplicand+1,c
 15574  0015D2  0E03               	movlw	3
 15575  0015D4  6E13               	movwf	___wmul@multiplicand,c
 15576  0015D6  ECE7  F024         	call	___wmul	;wreg free
 15577  0015DA  0EEB               	movlw	low __powers_
 15578  0015DC  2411               	addwf	?___wmul,w,c
 15579  0015DE  6EF6               	movwf	tblptrl,c
 15580  0015E0  0EFD               	movlw	high __powers_
 15581  0015E2  2012               	addwfc	?___wmul+1,w,c
 15582  0015E4  6EF7               	movwf	tblptrh,c
 15583  0015E6                     	if	0	;There are less than 3 active tblptr bytes
 15584  0015E6                     	endif
 15585  0015E6  0009               	tblrd		*+
 15586  0015E8  CFF5 F01F          	movff	tablat,___ftmul@f1
 15587  0015EC  0009               	tblrd		*+
 15588  0015EE  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15589  0015F2  000A               	tblrd		*-
 15590  0015F4  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15591  0015F8  ECFE  F018         	call	___ftmul	;wreg free
 15592  0015FC  C01F  F046         	movff	?___ftmul,_scale$2977
 15593  001600  C020  F047         	movff	?___ftmul+1,_scale$2977+1
 15594  001604  C021  F048         	movff	?___ftmul+2,_scale$2977+2
 15595                           
 15596                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15597  001608  C046  F01F         	movff	_scale$2977,___ftmul@f1
 15598  00160C  C047  F020         	movff	_scale$2977+1,___ftmul@f1+1
 15599  001610  C048  F021         	movff	_scale$2977+2,___ftmul@f1+2
 15600  001614  0E00               	movlw	0
 15601  001616  6E14               	movwf	___wmul@multiplicand+1,c
 15602  001618  0E03               	movlw	3
 15603  00161A  6E13               	movwf	___wmul@multiplicand,c
 15604  00161C  0E00               	movlw	0
 15605  00161E  6E40               	movwf	___awmod@divisor+1,c
 15606  001620  0E0A               	movlw	10
 15607  001622  6E3F               	movwf	___awmod@divisor,c
 15608  001624  5049               	movf	scale@scl,w,c
 15609  001626  6E3D               	movwf	___awmod@dividend,c
 15610  001628  6A3E               	clrf	___awmod@dividend+1,c
 15611  00162A  BE3D               	btfsc	___awmod@dividend,7,c
 15612  00162C  063E               	decf	___awmod@dividend+1,f,c
 15613  00162E  EC72  F020         	call	___awmod	;wreg free
 15614  001632  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15615  001636  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15616  00163A  ECE7  F024         	call	___wmul	;wreg free
 15617  00163E  0EEB               	movlw	low __powers_
 15618  001640  2411               	addwf	?___wmul,w,c
 15619  001642  6EF6               	movwf	tblptrl,c
 15620  001644  0EFD               	movlw	high __powers_
 15621  001646  2012               	addwfc	?___wmul+1,w,c
 15622  001648  6EF7               	movwf	tblptrh,c
 15623  00164A                     	if	0	;There are less than 3 active tblptr bytes
 15624  00164A                     	endif
 15625  00164A  0009               	tblrd		*+
 15626  00164C  CFF5 F022          	movff	tablat,___ftmul@f2
 15627  001650  0009               	tblrd		*+
 15628  001652  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15629  001656  000A               	tblrd		*-
 15630  001658  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15631  00165C  ECFE  F018         	call	___ftmul	;wreg free
 15632  001660  D053               	goto	L13
 15633  001662  D06C               	goto	l1355
 15634  001664  D059               	goto	l8808
 15635  001666                     l8802:
 15636                           
 15637                           ;doprnt.c: 438: else if(scl > 10)
 15638  001666  5049               	movf	scale@scl,w,c
 15639  001668  0A80               	xorlw	128
 15640  00166A  0F75               	addlw	-139
 15641  00166C  A0D8               	btfss	status,0,c
 15642  00166E  D054               	goto	l8808
 15643                           
 15644                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 15645  001670  0E00               	movlw	0
 15646  001672  6E1A               	movwf	___awdiv@divisor+1,c
 15647  001674  0E0A               	movlw	10
 15648  001676  6E19               	movwf	___awdiv@divisor,c
 15649  001678  5049               	movf	scale@scl,w,c
 15650  00167A  6E17               	movwf	___awdiv@dividend,c
 15651  00167C  6A18               	clrf	___awdiv@dividend+1,c
 15652  00167E  BE17               	btfsc	___awdiv@dividend,7,c
 15653  001680  0618               	decf	___awdiv@dividend+1,f,c
 15654  001682  EC3B  F01E         	call	___awdiv	;wreg free
 15655  001686  0E09               	movlw	9
 15656  001688  2417               	addwf	?___awdiv,w,c
 15657  00168A  6E11               	movwf	___wmul@multiplier,c
 15658  00168C  0E00               	movlw	0
 15659  00168E  2018               	addwfc	?___awdiv+1,w,c
 15660  001690  6E12               	movwf	___wmul@multiplier+1,c
 15661  001692  0E00               	movlw	0
 15662  001694  6E14               	movwf	___wmul@multiplicand+1,c
 15663  001696  0E03               	movlw	3
 15664  001698  6E13               	movwf	___wmul@multiplicand,c
 15665  00169A  ECE7  F024         	call	___wmul	;wreg free
 15666  00169E  0EEB               	movlw	low __powers_
 15667  0016A0  2411               	addwf	?___wmul,w,c
 15668  0016A2  6EF6               	movwf	tblptrl,c
 15669  0016A4  0EFD               	movlw	high __powers_
 15670  0016A6  2012               	addwfc	?___wmul+1,w,c
 15671  0016A8  6EF7               	movwf	tblptrh,c
 15672  0016AA                     	if	0	;There are less than 3 active tblptr bytes
 15673  0016AA                     	endif
 15674  0016AA  0009               	tblrd		*+
 15675  0016AC  CFF5 F01F          	movff	tablat,___ftmul@f1
 15676  0016B0  0009               	tblrd		*+
 15677  0016B2  CFF5 F020          	movff	tablat,___ftmul@f1+1
 15678  0016B6  000A               	tblrd		*-
 15679  0016B8  CFF5 F021          	movff	tablat,___ftmul@f1+2
 15680  0016BC  0E00               	movlw	0
 15681  0016BE  6E14               	movwf	___wmul@multiplicand+1,c
 15682  0016C0  0E03               	movlw	3
 15683  0016C2  6E13               	movwf	___wmul@multiplicand,c
 15684  0016C4  0E00               	movlw	0
 15685  0016C6  6E40               	movwf	___awmod@divisor+1,c
 15686  0016C8  0E0A               	movlw	10
 15687  0016CA  6E3F               	movwf	___awmod@divisor,c
 15688  0016CC  5049               	movf	scale@scl,w,c
 15689  0016CE  6E3D               	movwf	___awmod@dividend,c
 15690  0016D0  6A3E               	clrf	___awmod@dividend+1,c
 15691  0016D2  BE3D               	btfsc	___awmod@dividend,7,c
 15692  0016D4  063E               	decf	___awmod@dividend+1,f,c
 15693  0016D6  EC72  F020         	call	___awmod	;wreg free
 15694  0016DA  C03D  F011         	movff	?___awmod,___wmul@multiplier
 15695  0016DE  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 15696  0016E2  ECE7  F024         	call	___wmul	;wreg free
 15697  0016E6  0EEB               	movlw	low __powers_
 15698  0016E8  2411               	addwf	?___wmul,w,c
 15699  0016EA  6EF6               	movwf	tblptrl,c
 15700  0016EC  0EFD               	movlw	high __powers_
 15701  0016EE  2012               	addwfc	?___wmul+1,w,c
 15702  0016F0  6EF7               	movwf	tblptrh,c
 15703  0016F2                     	if	0	;There are less than 3 active tblptr bytes
 15704  0016F2                     	endif
 15705  0016F2  0009               	tblrd		*+
 15706  0016F4  CFF5 F022          	movff	tablat,___ftmul@f2
 15707  0016F8  0009               	tblrd		*+
 15708  0016FA  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15709  0016FE  000A               	tblrd		*-
 15710  001700  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15711  001704  ECFE  F018         	call	___ftmul	;wreg free
 15712  001708                     L13:
 15713  001708  C01F  F043         	movff	?___ftmul,?_scale
 15714  00170C  C020  F044         	movff	?___ftmul+1,?_scale+1
 15715  001710  C021  F045         	movff	?___ftmul+2,?_scale+2
 15716  001714  D013               	goto	l1355
 15717  001716  D000               	goto	l8808
 15718  001718                     l8808:
 15719                           
 15720                           ;doprnt.c: 440: return _powers_[scl];
 15721  001718  5049               	movf	scale@scl,w,c
 15722  00171A  0D03               	mullw	3
 15723  00171C  0EEB               	movlw	low __powers_
 15724  00171E  24F3               	addwf	prodl,w,c
 15725  001720  6EF6               	movwf	tblptrl,c
 15726  001722  0EFD               	movlw	high __powers_
 15727  001724                     L12:
 15728  001724  20F4               	addwfc	prodh,w,c
 15729  001726  6EF7               	movwf	tblptrh,c
 15730  001728                     	if	0	;There are less than 3 active tblptr bytes
 15731  001728                     	endif
 15732  001728  0009               	tblrd		*+
 15733  00172A  CFF5 F043          	movff	tablat,?_scale
 15734  00172E  0009               	tblrd		*+
 15735  001730  CFF5 F044          	movff	tablat,?_scale+1
 15736  001734  000A               	tblrd		*-
 15737  001736  CFF5 F045          	movff	tablat,?_scale+2
 15738  00173A  D000               	goto	l1355
 15739  00173C                     l1355:
 15740  00173C  0012               	return		;funcret
 15741  00173E                     __end_of_scale:
 15742                           	opt stack 0
 15743                           tblptru	equ	0xFF8
 15744                           tblptrh	equ	0xFF7
 15745                           tblptrl	equ	0xFF6
 15746                           tablat	equ	0xFF5
 15747                           prodh	equ	0xFF4
 15748                           prodl	equ	0xFF3
 15749                           intcon	equ	0xFF2
 15750                           intcon2	equ	0xFF1
 15751                           intcon3	equ	0xFF0
 15752                           postinc0	equ	0xFEE
 15753                           wreg	equ	0xFE8
 15754                           postdec1	equ	0xFE5
 15755                           plusw1	equ	0xFE3
 15756                           fsr1l	equ	0xFE1
 15757                           indf2	equ	0xFDF
 15758                           postinc2	equ	0xFDE
 15759                           postdec2	equ	0xFDD
 15760                           plusw2	equ	0xFDB
 15761                           fsr2h	equ	0xFDA
 15762                           fsr2l	equ	0xFD9
 15763                           status	equ	0xFD8
 15764                           
 15765 ;; *************** function _putch *****************
 15766 ;; Defined at:
 15767 ;;		line 190 in file "utils.c"
 15768 ;; Parameters:    Size  Location     Type
 15769 ;;  c               1    wreg     unsigned char 
 15770 ;; Auto vars:     Size  Location     Type
 15771 ;;  c               1   16[COMRAM] unsigned char 
 15772 ;; Return value:  Size  Location     Type
 15773 ;;		None               void
 15774 ;; Registers used:
 15775 ;;		wreg
 15776 ;; Tracked objects:
 15777 ;;		On entry : 0/0
 15778 ;;		On exit  : 0/0
 15779 ;;		Unchanged: 0/0
 15780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15784 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15785 ;;Total ram usage:        1 bytes
 15786 ;; Hardware stack levels used:    1
 15787 ;; Hardware stack levels required when called:    3
 15788 ;; This function calls:
 15789 ;;		Nothing
 15790 ;; This function is called by:
 15791 ;;		_printf
 15792 ;; This function uses a non-reentrant model
 15793 ;;
 15794                           
 15795                           	psect	text64
 15796  004DB4                     __ptext64:
 15797                           	opt stack 0
 15798  004DB4                     _putch:
 15799                           	opt stack 26
 15800                           
 15801                           ;incstack = 0
 15802                           ;putch@c stored from wreg
 15803  004DB4  6E11               	movwf	putch@c,c
 15804                           
 15805                           ;utils.c: 192: while (!TRMT);
 15806  004DB6  D000               	goto	l505
 15807  004DB8                     l505:
 15808  004DB8  A2AC               	btfss	4012,1,c	;volatile
 15809  004DBA  D7FE               	goto	l505
 15810                           
 15811                           ;utils.c: 193: TXREG = c;
 15812  004DBC  C011  FFAD         	movff	putch@c,4013	;volatile
 15813  004DC0  0012               	return		;funcret
 15814  004DC2                     __end_of_putch:
 15815                           	opt stack 0
 15816                           tblptru	equ	0xFF8
 15817                           tblptrh	equ	0xFF7
 15818                           tblptrl	equ	0xFF6
 15819                           tablat	equ	0xFF5
 15820                           prodh	equ	0xFF4
 15821                           prodl	equ	0xFF3
 15822                           intcon	equ	0xFF2
 15823                           intcon2	equ	0xFF1
 15824                           intcon3	equ	0xFF0
 15825                           postinc0	equ	0xFEE
 15826                           wreg	equ	0xFE8
 15827                           postdec1	equ	0xFE5
 15828                           plusw1	equ	0xFE3
 15829                           fsr1l	equ	0xFE1
 15830                           indf2	equ	0xFDF
 15831                           postinc2	equ	0xFDE
 15832                           postdec2	equ	0xFDD
 15833                           plusw2	equ	0xFDB
 15834                           fsr2h	equ	0xFDA
 15835                           fsr2l	equ	0xFD9
 15836                           status	equ	0xFD8
 15837                           
 15838 ;; *************** function _isdigit *****************
 15839 ;; Defined at:
 15840 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15841 ;; Parameters:    Size  Location     Type
 15842 ;;  c               1    wreg     unsigned char 
 15843 ;; Auto vars:     Size  Location     Type
 15844 ;;  c               1   18[COMRAM] unsigned char 
 15845 ;; Return value:  Size  Location     Type
 15846 ;;		None               void
 15847 ;; Registers used:
 15848 ;;		wreg, status,2, status,0
 15849 ;; Tracked objects:
 15850 ;;		On entry : 0/0
 15851 ;;		On exit  : 0/0
 15852 ;;		Unchanged: 0/0
 15853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15855 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15856 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15857 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15858 ;;Total ram usage:        3 bytes
 15859 ;; Hardware stack levels used:    1
 15860 ;; Hardware stack levels required when called:    3
 15861 ;; This function calls:
 15862 ;;		Nothing
 15863 ;; This function is called by:
 15864 ;;		_printf
 15865 ;; This function uses a non-reentrant model
 15866 ;;
 15867                           
 15868                           	psect	text65
 15869  004AF4                     __ptext65:
 15870                           	opt stack 0
 15871  004AF4                     _isdigit:
 15872                           	opt stack 26
 15873                           
 15874                           ;incstack = 0
 15875                           ;isdigit@c stored from wreg
 15876  004AF4  6E13               	movwf	isdigit@c,c
 15877  004AF6  0E00               	movlw	0
 15878  004AF8  6E12               	movwf	_isdigit$2600,c
 15879  004AFA  0E3A               	movlw	58
 15880  004AFC  6013               	cpfslt	isdigit@c,c
 15881  004AFE  D006               	goto	l8820
 15882  004B00  0E2F               	movlw	47
 15883  004B02  6413               	cpfsgt	isdigit@c,c
 15884  004B04  D003               	goto	l8820
 15885  004B06  0E01               	movlw	1
 15886  004B08  6E12               	movwf	_isdigit$2600,c
 15887  004B0A  D000               	goto	l8820
 15888  004B0C                     l8820:
 15889  004B0C  C012  F011         	movff	_isdigit$2600,??_isdigit
 15890  004B10  3011               	rrcf	??_isdigit,w,c
 15891  004B12  D000               	goto	l1967
 15892  004B14                     l1967:
 15893  004B14  0012               	return		;funcret
 15894  004B16                     __end_of_isdigit:
 15895                           	opt stack 0
 15896                           tblptru	equ	0xFF8
 15897                           tblptrh	equ	0xFF7
 15898                           tblptrl	equ	0xFF6
 15899                           tablat	equ	0xFF5
 15900                           prodh	equ	0xFF4
 15901                           prodl	equ	0xFF3
 15902                           intcon	equ	0xFF2
 15903                           intcon2	equ	0xFF1
 15904                           intcon3	equ	0xFF0
 15905                           postinc0	equ	0xFEE
 15906                           wreg	equ	0xFE8
 15907                           postdec1	equ	0xFE5
 15908                           plusw1	equ	0xFE3
 15909                           fsr1l	equ	0xFE1
 15910                           indf2	equ	0xFDF
 15911                           postinc2	equ	0xFDE
 15912                           postdec2	equ	0xFDD
 15913                           plusw2	equ	0xFDB
 15914                           fsr2h	equ	0xFDA
 15915                           fsr2l	equ	0xFD9
 15916                           status	equ	0xFD8
 15917                           
 15918 ;; *************** function _fround *****************
 15919 ;; Defined at:
 15920 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15921 ;; Parameters:    Size  Location     Type
 15922 ;;  prec            1    wreg     unsigned char 
 15923 ;; Auto vars:     Size  Location     Type
 15924 ;;  prec            1   75[COMRAM] unsigned char 
 15925 ;; Return value:  Size  Location     Type
 15926 ;;                  3   66[COMRAM] unsigned char 
 15927 ;; Registers used:
 15928 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15929 ;; Tracked objects:
 15930 ;;		On entry : 0/0
 15931 ;;		On exit  : 0/0
 15932 ;;		Unchanged: 0/0
 15933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15934 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15935 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15937 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15938 ;;Total ram usage:       10 bytes
 15939 ;; Hardware stack levels used:    1
 15940 ;; Hardware stack levels required when called:    5
 15941 ;; This function calls:
 15942 ;;		___awdiv
 15943 ;;		___awmod
 15944 ;;		___ftmul
 15945 ;;		___wmul
 15946 ;; This function is called by:
 15947 ;;		_printf
 15948 ;; This function uses a non-reentrant model
 15949 ;;
 15950                           
 15951                           	psect	text66
 15952  001D9A                     __ptext66:
 15953                           	opt stack 0
 15954  001D9A                     _fround:
 15955                           	opt stack 24
 15956                           
 15957                           ;incstack = 0
 15958                           ;fround@prec stored from wreg
 15959  001D9A  6E4C               	movwf	fround@prec,c
 15960                           
 15961                           ;doprnt.c: 413: if(prec>=110)
 15962  001D9C  0E6D               	movlw	109
 15963  001D9E  644C               	cpfsgt	fround@prec,c
 15964  001DA0  D09B               	goto	l8762
 15965                           
 15966                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15967  001DA2  0E00               	movlw	0
 15968  001DA4  6E14               	movwf	___wmul@multiplicand+1,c
 15969  001DA6  0E03               	movlw	3
 15970  001DA8  6E13               	movwf	___wmul@multiplicand,c
 15971  001DAA  0E00               	movlw	0
 15972  001DAC  6E1A               	movwf	___awdiv@divisor+1,c
 15973  001DAE  0E0A               	movlw	10
 15974  001DB0  6E19               	movwf	___awdiv@divisor,c
 15975  001DB2  0E00               	movlw	0
 15976  001DB4  6E40               	movwf	___awmod@divisor+1,c
 15977  001DB6  0E64               	movlw	100
 15978  001DB8  6E3F               	movwf	___awmod@divisor,c
 15979  001DBA  C04C  F03D         	movff	fround@prec,___awmod@dividend
 15980  001DBE  6A3E               	clrf	___awmod@dividend+1,c
 15981  001DC0  EC72  F020         	call	___awmod	;wreg free
 15982  001DC4  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15983  001DC8  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15984  001DCC  EC3B  F01E         	call	___awdiv	;wreg free
 15985  001DD0  0E09               	movlw	9
 15986  001DD2  2417               	addwf	?___awdiv,w,c
 15987  001DD4  6E11               	movwf	___wmul@multiplier,c
 15988  001DD6  0E00               	movlw	0
 15989  001DD8  2018               	addwfc	?___awdiv+1,w,c
 15990  001DDA  6E12               	movwf	___wmul@multiplier+1,c
 15991  001DDC  ECE7  F024         	call	___wmul	;wreg free
 15992  001DE0  0EC4               	movlw	low __npowers_
 15993  001DE2  2411               	addwf	?___wmul,w,c
 15994  001DE4  6EF6               	movwf	tblptrl,c
 15995  001DE6  0EFD               	movlw	high __npowers_
 15996  001DE8  2012               	addwfc	?___wmul+1,w,c
 15997  001DEA  6EF7               	movwf	tblptrh,c
 15998  001DEC                     	if	0	;There are less than 3 active tblptr bytes
 15999  001DEC                     	endif
 16000  001DEC  0009               	tblrd		*+
 16001  001DEE  CFF5 F022          	movff	tablat,___ftmul@f2
 16002  001DF2  0009               	tblrd		*+
 16003  001DF4  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16004  001DF8  000A               	tblrd		*-
 16005  001DFA  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16006  001DFE  0E00               	movlw	0
 16007  001E00  6E1A               	movwf	___awdiv@divisor+1,c
 16008  001E02  0E64               	movlw	100
 16009  001E04  6E19               	movwf	___awdiv@divisor,c
 16010  001E06  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16011  001E0A  6A18               	clrf	___awdiv@dividend+1,c
 16012  001E0C  EC3B  F01E         	call	___awdiv	;wreg free
 16013  001E10  0E12               	movlw	18
 16014  001E12  2417               	addwf	?___awdiv,w,c
 16015  001E14  6E11               	movwf	___wmul@multiplier,c
 16016  001E16  0E00               	movlw	0
 16017  001E18  2018               	addwfc	?___awdiv+1,w,c
 16018  001E1A  6E12               	movwf	___wmul@multiplier+1,c
 16019  001E1C  0E00               	movlw	0
 16020  001E1E  6E14               	movwf	___wmul@multiplicand+1,c
 16021  001E20  0E03               	movlw	3
 16022  001E22  6E13               	movwf	___wmul@multiplicand,c
 16023  001E24  ECE7  F024         	call	___wmul	;wreg free
 16024  001E28  0EC4               	movlw	low __npowers_
 16025  001E2A  2411               	addwf	?___wmul,w,c
 16026  001E2C  6EF6               	movwf	tblptrl,c
 16027  001E2E  0EFD               	movlw	high __npowers_
 16028  001E30  2012               	addwfc	?___wmul+1,w,c
 16029  001E32  6EF7               	movwf	tblptrh,c
 16030  001E34                     	if	0	;There are less than 3 active tblptr bytes
 16031  001E34                     	endif
 16032  001E34  0009               	tblrd		*+
 16033  001E36  CFF5 F01F          	movff	tablat,___ftmul@f1
 16034  001E3A  0009               	tblrd		*+
 16035  001E3C  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16036  001E40  000A               	tblrd		*-
 16037  001E42  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16038  001E46  ECFE  F018         	call	___ftmul	;wreg free
 16039  001E4A  C01F  F049         	movff	?___ftmul,_fround$2975
 16040  001E4E  C020  F04A         	movff	?___ftmul+1,_fround$2975+1
 16041  001E52  C021  F04B         	movff	?___ftmul+2,_fround$2975+2
 16042                           
 16043                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16044  001E56  0E00               	movlw	0
 16045  001E58  6E14               	movwf	___wmul@multiplicand+1,c
 16046  001E5A  0E03               	movlw	3
 16047  001E5C  6E13               	movwf	___wmul@multiplicand,c
 16048  001E5E  0E00               	movlw	0
 16049  001E60  6E40               	movwf	___awmod@divisor+1,c
 16050  001E62  0E0A               	movlw	10
 16051  001E64  6E3F               	movwf	___awmod@divisor,c
 16052  001E66  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16053  001E6A  6A3E               	clrf	___awmod@dividend+1,c
 16054  001E6C  EC72  F020         	call	___awmod	;wreg free
 16055  001E70  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16056  001E74  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16057  001E78  ECE7  F024         	call	___wmul	;wreg free
 16058  001E7C  0EC4               	movlw	low __npowers_
 16059  001E7E  2411               	addwf	?___wmul,w,c
 16060  001E80  6EF6               	movwf	tblptrl,c
 16061  001E82  0EFD               	movlw	high __npowers_
 16062  001E84  2012               	addwfc	?___wmul+1,w,c
 16063  001E86  6EF7               	movwf	tblptrh,c
 16064  001E88                     	if	0	;There are less than 3 active tblptr bytes
 16065  001E88                     	endif
 16066  001E88  0009               	tblrd		*+
 16067  001E8A  CFF5 F022          	movff	tablat,___ftmul@f2
 16068  001E8E  0009               	tblrd		*+
 16069  001E90  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16070  001E94  000A               	tblrd		*-
 16071  001E96  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16072  001E9A  C049  F01F         	movff	_fround$2975,___ftmul@f1
 16073  001E9E  C04A  F020         	movff	_fround$2975+1,___ftmul@f1+1
 16074  001EA2  C04B  F021         	movff	_fround$2975+2,___ftmul@f1+2
 16075  001EA6  ECFE  F018         	call	___ftmul	;wreg free
 16076  001EAA  C01F  F046         	movff	?___ftmul,_fround$2976
 16077  001EAE  C020  F047         	movff	?___ftmul+1,_fround$2976+1
 16078  001EB2  C021  F048         	movff	?___ftmul+2,_fround$2976+2
 16079                           
 16080                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16081  001EB6  C046  F01F         	movff	_fround$2976,___ftmul@f1
 16082  001EBA  C047  F020         	movff	_fround$2976+1,___ftmul@f1+1
 16083  001EBE  C048  F021         	movff	_fround$2976+2,___ftmul@f1+2
 16084  001EC2  0E00               	movlw	0
 16085  001EC4  6E22               	movwf	___ftmul@f2,c
 16086  001EC6  0E00               	movlw	0
 16087  001EC8  6E23               	movwf	___ftmul@f2+1,c
 16088  001ECA  0E3F               	movlw	63
 16089  001ECC  6E24               	movwf	___ftmul@f2+2,c
 16090  001ECE  ECFE  F018         	call	___ftmul	;wreg free
 16091  001ED2  D07D               	goto	L15
 16092  001ED4  D083               	goto	l1348
 16093  001ED6  D062               	goto	l8770
 16094  001ED8                     l8762:
 16095                           
 16096                           ;doprnt.c: 415: else if(prec > 10)
 16097  001ED8  0E0A               	movlw	10
 16098  001EDA  644C               	cpfsgt	fround@prec,c
 16099  001EDC  D05F               	goto	l8770
 16100                           
 16101                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16102  001EDE  0E00               	movlw	0
 16103  001EE0  6E14               	movwf	___wmul@multiplicand+1,c
 16104  001EE2  0E03               	movlw	3
 16105  001EE4  6E13               	movwf	___wmul@multiplicand,c
 16106  001EE6  0E00               	movlw	0
 16107  001EE8  6E40               	movwf	___awmod@divisor+1,c
 16108  001EEA  0E0A               	movlw	10
 16109  001EEC  6E3F               	movwf	___awmod@divisor,c
 16110  001EEE  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16111  001EF2  6A3E               	clrf	___awmod@dividend+1,c
 16112  001EF4  EC72  F020         	call	___awmod	;wreg free
 16113  001EF8  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16114  001EFC  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16115  001F00  ECE7  F024         	call	___wmul	;wreg free
 16116  001F04  0EC4               	movlw	low __npowers_
 16117  001F06  2411               	addwf	?___wmul,w,c
 16118  001F08  6EF6               	movwf	tblptrl,c
 16119  001F0A  0EFD               	movlw	high __npowers_
 16120  001F0C  2012               	addwfc	?___wmul+1,w,c
 16121  001F0E  6EF7               	movwf	tblptrh,c
 16122  001F10                     	if	0	;There are less than 3 active tblptr bytes
 16123  001F10                     	endif
 16124  001F10  0009               	tblrd		*+
 16125  001F12  CFF5 F022          	movff	tablat,___ftmul@f2
 16126  001F16  0009               	tblrd		*+
 16127  001F18  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16128  001F1C  000A               	tblrd		*-
 16129  001F1E  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16130  001F22  0E00               	movlw	0
 16131  001F24  6E1A               	movwf	___awdiv@divisor+1,c
 16132  001F26  0E0A               	movlw	10
 16133  001F28  6E19               	movwf	___awdiv@divisor,c
 16134  001F2A  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16135  001F2E  6A18               	clrf	___awdiv@dividend+1,c
 16136  001F30  EC3B  F01E         	call	___awdiv	;wreg free
 16137  001F34  0E09               	movlw	9
 16138  001F36  2417               	addwf	?___awdiv,w,c
 16139  001F38  6E11               	movwf	___wmul@multiplier,c
 16140  001F3A  0E00               	movlw	0
 16141  001F3C  2018               	addwfc	?___awdiv+1,w,c
 16142  001F3E  6E12               	movwf	___wmul@multiplier+1,c
 16143  001F40  0E00               	movlw	0
 16144  001F42  6E14               	movwf	___wmul@multiplicand+1,c
 16145  001F44  0E03               	movlw	3
 16146  001F46  6E13               	movwf	___wmul@multiplicand,c
 16147  001F48  ECE7  F024         	call	___wmul	;wreg free
 16148  001F4C  0EC4               	movlw	low __npowers_
 16149  001F4E  2411               	addwf	?___wmul,w,c
 16150  001F50  6EF6               	movwf	tblptrl,c
 16151  001F52  0EFD               	movlw	high __npowers_
 16152  001F54  2012               	addwfc	?___wmul+1,w,c
 16153  001F56  6EF7               	movwf	tblptrh,c
 16154  001F58                     	if	0	;There are less than 3 active tblptr bytes
 16155  001F58                     	endif
 16156  001F58  0009               	tblrd		*+
 16157  001F5A  CFF5 F01F          	movff	tablat,___ftmul@f1
 16158  001F5E  0009               	tblrd		*+
 16159  001F60  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16160  001F64  000A               	tblrd		*-
 16161  001F66  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16162  001F6A  ECFE  F018         	call	___ftmul	;wreg free
 16163  001F6E  C01F  F049         	movff	?___ftmul,_fround$2975
 16164  001F72  C020  F04A         	movff	?___ftmul+1,_fround$2975+1
 16165  001F76  C021  F04B         	movff	?___ftmul+2,_fround$2975+2
 16166                           
 16167                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16168  001F7A  C049  F01F         	movff	_fround$2975,___ftmul@f1
 16169  001F7E  C04A  F020         	movff	_fround$2975+1,___ftmul@f1+1
 16170  001F82  C04B  F021         	movff	_fround$2975+2,___ftmul@f1+2
 16171  001F86  0E00               	movlw	0
 16172  001F88  6E22               	movwf	___ftmul@f2,c
 16173  001F8A  0E00               	movlw	0
 16174  001F8C  6E23               	movwf	___ftmul@f2+1,c
 16175  001F8E  0E3F               	movlw	63
 16176  001F90  6E24               	movwf	___ftmul@f2+2,c
 16177  001F92  ECFE  F018         	call	___ftmul	;wreg free
 16178  001F96  D01B               	goto	L15
 16179  001F98  D021               	goto	l1348
 16180  001F9A  D000               	goto	l8770
 16181  001F9C                     l8770:
 16182                           
 16183                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 16184  001F9C  504C               	movf	fround@prec,w,c
 16185  001F9E  0D03               	mullw	3
 16186  001FA0  0EC4               	movlw	low __npowers_
 16187  001FA2  24F3               	addwf	prodl,w,c
 16188  001FA4  6EF6               	movwf	tblptrl,c
 16189  001FA6  0EFD               	movlw	high __npowers_
 16190  001FA8  20F4               	addwfc	prodh,w,c
 16191  001FAA  6EF7               	movwf	tblptrh,c
 16192  001FAC                     	if	0	;There are less than 3 active tblptr bytes
 16193  001FAC                     	endif
 16194  001FAC  0009               	tblrd		*+
 16195  001FAE  CFF5 F01F          	movff	tablat,___ftmul@f1
 16196  001FB2  0009               	tblrd		*+
 16197  001FB4  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16198  001FB8  000A               	tblrd		*-
 16199  001FBA  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16200  001FBE  0E00               	movlw	0
 16201  001FC0  6E22               	movwf	___ftmul@f2,c
 16202  001FC2  0E00               	movlw	0
 16203  001FC4  6E23               	movwf	___ftmul@f2+1,c
 16204  001FC6  0E3F               	movlw	63
 16205  001FC8  6E24               	movwf	___ftmul@f2+2,c
 16206  001FCA  ECFE  F018         	call	___ftmul	;wreg free
 16207  001FCE                     L15:
 16208  001FCE  C01F  F043         	movff	?___ftmul,?_fround
 16209  001FD2  C020  F044         	movff	?___ftmul+1,?_fround+1
 16210  001FD6  C021  F045         	movff	?___ftmul+2,?_fround+2
 16211  001FDA  D000               	goto	l1348
 16212  001FDC                     l1348:
 16213  001FDC  0012               	return		;funcret
 16214  001FDE                     __end_of_fround:
 16215                           	opt stack 0
 16216                           tblptru	equ	0xFF8
 16217                           tblptrh	equ	0xFF7
 16218                           tblptrl	equ	0xFF6
 16219                           tablat	equ	0xFF5
 16220                           prodh	equ	0xFF4
 16221                           prodl	equ	0xFF3
 16222                           intcon	equ	0xFF2
 16223                           intcon2	equ	0xFF1
 16224                           intcon3	equ	0xFF0
 16225                           postinc0	equ	0xFEE
 16226                           wreg	equ	0xFE8
 16227                           postdec1	equ	0xFE5
 16228                           plusw1	equ	0xFE3
 16229                           fsr1l	equ	0xFE1
 16230                           indf2	equ	0xFDF
 16231                           postinc2	equ	0xFDE
 16232                           postdec2	equ	0xFDD
 16233                           plusw2	equ	0xFDB
 16234                           fsr2h	equ	0xFDA
 16235                           fsr2l	equ	0xFD9
 16236                           status	equ	0xFD8
 16237                           
 16238 ;; *************** function ___wmul *****************
 16239 ;; Defined at:
 16240 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16241 ;; Parameters:    Size  Location     Type
 16242 ;;  multiplier      2   16[COMRAM] unsigned int 
 16243 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16244 ;; Auto vars:     Size  Location     Type
 16245 ;;  product         2   20[COMRAM] unsigned int 
 16246 ;; Return value:  Size  Location     Type
 16247 ;;                  2   16[COMRAM] unsigned int 
 16248 ;; Registers used:
 16249 ;;		wreg, status,2, status,0, prodl, prodh
 16250 ;; Tracked objects:
 16251 ;;		On entry : 0/0
 16252 ;;		On exit  : 0/0
 16253 ;;		Unchanged: 0/0
 16254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16255 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16256 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16258 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16259 ;;Total ram usage:        6 bytes
 16260 ;; Hardware stack levels used:    1
 16261 ;; Hardware stack levels required when called:    3
 16262 ;; This function calls:
 16263 ;;		Nothing
 16264 ;; This function is called by:
 16265 ;;		_get_RPM
 16266 ;;		_delay_ms
 16267 ;;		_drawChar
 16268 ;;		_Read_Volt
 16269 ;;		_main
 16270 ;;		_Setup_Fan_Temp
 16271 ;;		_Do_Setup_Time
 16272 ;;		_fround
 16273 ;;		_scale
 16274 ;;		_printf
 16275 ;; This function uses a non-reentrant model
 16276 ;;
 16277                           
 16278                           	psect	text67
 16279  0049CE                     __ptext67:
 16280                           	opt stack 0
 16281  0049CE                     ___wmul:
 16282                           	opt stack 25
 16283                           
 16284                           ;incstack = 0
 16285  0049CE  5011               	movf	___wmul@multiplier,w,c
 16286  0049D0  0213               	mulwf	___wmul@multiplicand,c
 16287  0049D2  CFF3 F015          	movff	prodl,___wmul@product
 16288  0049D6  CFF4 F016          	movff	prodh,___wmul@product+1
 16289  0049DA  5011               	movf	___wmul@multiplier,w,c
 16290  0049DC  0214               	mulwf	___wmul@multiplicand+1,c
 16291  0049DE  50F3               	movf	prodl,w,c
 16292  0049E0  2616               	addwf	___wmul@product+1,f,c
 16293  0049E2  5012               	movf	___wmul@multiplier+1,w,c
 16294  0049E4  0213               	mulwf	___wmul@multiplicand,c
 16295  0049E6  50F3               	movf	prodl,w,c
 16296  0049E8  2616               	addwf	___wmul@product+1,f,c
 16297  0049EA  C015  F011         	movff	___wmul@product,?___wmul
 16298  0049EE  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16299  0049F2  D000               	goto	l1502
 16300  0049F4                     l1502:
 16301  0049F4  0012               	return		;funcret
 16302  0049F6                     __end_of___wmul:
 16303                           	opt stack 0
 16304                           tblptru	equ	0xFF8
 16305                           tblptrh	equ	0xFF7
 16306                           tblptrl	equ	0xFF6
 16307                           tablat	equ	0xFF5
 16308                           prodh	equ	0xFF4
 16309                           prodl	equ	0xFF3
 16310                           intcon	equ	0xFF2
 16311                           intcon2	equ	0xFF1
 16312                           intcon3	equ	0xFF0
 16313                           postinc0	equ	0xFEE
 16314                           wreg	equ	0xFE8
 16315                           postdec1	equ	0xFE5
 16316                           plusw1	equ	0xFE3
 16317                           fsr1l	equ	0xFE1
 16318                           indf2	equ	0xFDF
 16319                           postinc2	equ	0xFDE
 16320                           postdec2	equ	0xFDD
 16321                           plusw2	equ	0xFDB
 16322                           fsr2h	equ	0xFDA
 16323                           fsr2l	equ	0xFD9
 16324                           status	equ	0xFD8
 16325                           
 16326 ;; *************** function ___awmod *****************
 16327 ;; Defined at:
 16328 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 16329 ;; Parameters:    Size  Location     Type
 16330 ;;  dividend        2   60[COMRAM] int 
 16331 ;;  divisor         2   62[COMRAM] int 
 16332 ;; Auto vars:     Size  Location     Type
 16333 ;;  sign            1   65[COMRAM] unsigned char 
 16334 ;;  counter         1   64[COMRAM] unsigned char 
 16335 ;; Return value:  Size  Location     Type
 16336 ;;                  2   60[COMRAM] int 
 16337 ;; Registers used:
 16338 ;;		wreg, status,2, status,0
 16339 ;; Tracked objects:
 16340 ;;		On entry : 0/0
 16341 ;;		On exit  : 0/0
 16342 ;;		Unchanged: 0/0
 16343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16344 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16345 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16347 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16348 ;;Total ram usage:        6 bytes
 16349 ;; Hardware stack levels used:    1
 16350 ;; Hardware stack levels required when called:    3
 16351 ;; This function calls:
 16352 ;;		Nothing
 16353 ;; This function is called by:
 16354 ;;		_dec_2_bcd
 16355 ;;		_Update_Screen
 16356 ;;		_Update_Setup_Fan_Screen
 16357 ;;		_Update_Setup_Time_Screen
 16358 ;;		_fround
 16359 ;;		_scale
 16360 ;; This function uses a non-reentrant model
 16361 ;;
 16362                           
 16363                           	psect	text68
 16364  0040E4                     __ptext68:
 16365                           	opt stack 0
 16366  0040E4                     ___awmod:
 16367                           	opt stack 25
 16368                           
 16369                           ;incstack = 0
 16370  0040E4  0E00               	movlw	0
 16371  0040E6  6E42               	movwf	___awmod@sign,c
 16372  0040E8  AE3E               	btfss	___awmod@dividend+1,7,c
 16373  0040EA  D007               	goto	l8576
 16374  0040EC  6C3D               	negf	___awmod@dividend,c
 16375  0040EE  1E3E               	comf	___awmod@dividend+1,f,c
 16376  0040F0  B0D8               	btfsc	status,0,c
 16377  0040F2  2A3E               	incf	___awmod@dividend+1,f,c
 16378  0040F4  0E01               	movlw	1
 16379  0040F6  6E42               	movwf	___awmod@sign,c
 16380  0040F8  D000               	goto	l8576
 16381  0040FA                     l8576:
 16382  0040FA  AE40               	btfss	___awmod@divisor+1,7,c
 16383  0040FC  D005               	goto	l8580
 16384  0040FE  6C3F               	negf	___awmod@divisor,c
 16385  004100  1E40               	comf	___awmod@divisor+1,f,c
 16386  004102  B0D8               	btfsc	status,0,c
 16387  004104  2A40               	incf	___awmod@divisor+1,f,c
 16388  004106  D000               	goto	l8580
 16389  004108                     l8580:
 16390  004108  503F               	movf	___awmod@divisor,w,c
 16391  00410A  1040               	iorwf	___awmod@divisor+1,w,c
 16392  00410C  B4D8               	btfsc	status,2,c
 16393  00410E  D01D               	goto	l8596
 16394  004110  0E01               	movlw	1
 16395  004112  6E41               	movwf	___awmod@counter,c
 16396  004114  D005               	goto	l8586
 16397  004116                     l8584:
 16398  004116  90D8               	bcf	status,0,c
 16399  004118  363F               	rlcf	___awmod@divisor,f,c
 16400  00411A  3640               	rlcf	___awmod@divisor+1,f,c
 16401  00411C  2A41               	incf	___awmod@counter,f,c
 16402  00411E  D000               	goto	l8586
 16403  004120                     l8586:
 16404  004120  BE40               	btfsc	___awmod@divisor+1,7,c
 16405  004122  D002               	goto	l8588
 16406  004124  D7F8               	goto	l8584
 16407  004126  D000               	goto	l8588
 16408  004128                     l8588:
 16409  004128  503F               	movf	___awmod@divisor,w,c
 16410  00412A  5C3D               	subwf	___awmod@dividend,w,c
 16411  00412C  5040               	movf	___awmod@divisor+1,w,c
 16412  00412E  583E               	subwfb	___awmod@dividend+1,w,c
 16413  004130  A0D8               	btfss	status,0,c
 16414  004132  D005               	goto	l8592
 16415  004134  503F               	movf	___awmod@divisor,w,c
 16416  004136  5E3D               	subwf	___awmod@dividend,f,c
 16417  004138  5040               	movf	___awmod@divisor+1,w,c
 16418  00413A  5A3E               	subwfb	___awmod@dividend+1,f,c
 16419  00413C  D000               	goto	l8592
 16420  00413E                     l8592:
 16421  00413E  90D8               	bcf	status,0,c
 16422  004140  3240               	rrcf	___awmod@divisor+1,f,c
 16423  004142  323F               	rrcf	___awmod@divisor,f,c
 16424  004144  2E41               	decfsz	___awmod@counter,f,c
 16425  004146  D7F0               	goto	l8588
 16426  004148  D000               	goto	l8596
 16427  00414A                     l8596:
 16428  00414A  5042               	movf	___awmod@sign,w,c
 16429  00414C  B4D8               	btfsc	status,2,c
 16430  00414E  D005               	goto	l8600
 16431  004150  6C3D               	negf	___awmod@dividend,c
 16432  004152  1E3E               	comf	___awmod@dividend+1,f,c
 16433  004154  B0D8               	btfsc	status,0,c
 16434  004156  2A3E               	incf	___awmod@dividend+1,f,c
 16435  004158  D000               	goto	l8600
 16436  00415A                     l8600:
 16437  00415A  C03D  F03D         	movff	___awmod@dividend,?___awmod
 16438  00415E  C03E  F03E         	movff	___awmod@dividend+1,?___awmod+1
 16439  004162  D000               	goto	l1708
 16440  004164                     l1708:
 16441  004164  0012               	return		;funcret
 16442  004166                     __end_of___awmod:
 16443                           	opt stack 0
 16444                           tblptru	equ	0xFF8
 16445                           tblptrh	equ	0xFF7
 16446                           tblptrl	equ	0xFF6
 16447                           tablat	equ	0xFF5
 16448                           prodh	equ	0xFF4
 16449                           prodl	equ	0xFF3
 16450                           intcon	equ	0xFF2
 16451                           intcon2	equ	0xFF1
 16452                           intcon3	equ	0xFF0
 16453                           postinc0	equ	0xFEE
 16454                           wreg	equ	0xFE8
 16455                           postdec1	equ	0xFE5
 16456                           plusw1	equ	0xFE3
 16457                           fsr1l	equ	0xFE1
 16458                           indf2	equ	0xFDF
 16459                           postinc2	equ	0xFDE
 16460                           postdec2	equ	0xFDD
 16461                           plusw2	equ	0xFDB
 16462                           fsr2h	equ	0xFDA
 16463                           fsr2l	equ	0xFD9
 16464                           status	equ	0xFD8
 16465                           
 16466 ;; *************** function ___awdiv *****************
 16467 ;; Defined at:
 16468 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 16469 ;; Parameters:    Size  Location     Type
 16470 ;;  dividend        2   22[COMRAM] int 
 16471 ;;  divisor         2   24[COMRAM] int 
 16472 ;; Auto vars:     Size  Location     Type
 16473 ;;  quotient        2   28[COMRAM] int 
 16474 ;;  sign            1   27[COMRAM] unsigned char 
 16475 ;;  counter         1   26[COMRAM] unsigned char 
 16476 ;; Return value:  Size  Location     Type
 16477 ;;                  2   22[COMRAM] int 
 16478 ;; Registers used:
 16479 ;;		wreg, status,2, status,0
 16480 ;; Tracked objects:
 16481 ;;		On entry : 0/0
 16482 ;;		On exit  : 0/0
 16483 ;;		Unchanged: 0/0
 16484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16486 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16488 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;Total ram usage:        8 bytes
 16490 ;; Hardware stack levels used:    1
 16491 ;; Hardware stack levels required when called:    3
 16492 ;; This function calls:
 16493 ;;		Nothing
 16494 ;; This function is called by:
 16495 ;;		_get_RPM
 16496 ;;		_dec_2_bcd
 16497 ;;		_main
 16498 ;;		_Set_D1_RGB
 16499 ;;		_Set_D2_RGB
 16500 ;;		_Update_Screen
 16501 ;;		_Setup_Fan_Temp
 16502 ;;		_Update_Setup_Fan_Screen
 16503 ;;		_Do_Setup_Time
 16504 ;;		_Update_Setup_Time_Screen
 16505 ;;		_fround
 16506 ;;		_scale
 16507 ;;		_printf
 16508 ;; This function uses a non-reentrant model
 16509 ;;
 16510                           
 16511                           	psect	text69
 16512  003C76                     __ptext69:
 16513                           	opt stack 0
 16514  003C76                     ___awdiv:
 16515                           	opt stack 25
 16516                           
 16517                           ;incstack = 0
 16518  003C76  0E00               	movlw	0
 16519  003C78  6E1C               	movwf	___awdiv@sign,c
 16520  003C7A  AE1A               	btfss	___awdiv@divisor+1,7,c
 16521  003C7C  D007               	goto	l8532
 16522  003C7E  6C19               	negf	___awdiv@divisor,c
 16523  003C80  1E1A               	comf	___awdiv@divisor+1,f,c
 16524  003C82  B0D8               	btfsc	status,0,c
 16525  003C84  2A1A               	incf	___awdiv@divisor+1,f,c
 16526  003C86  0E01               	movlw	1
 16527  003C88  6E1C               	movwf	___awdiv@sign,c
 16528  003C8A  D000               	goto	l8532
 16529  003C8C                     l8532:
 16530  003C8C  AE18               	btfss	___awdiv@dividend+1,7,c
 16531  003C8E  D007               	goto	l8538
 16532  003C90  6C17               	negf	___awdiv@dividend,c
 16533  003C92  1E18               	comf	___awdiv@dividend+1,f,c
 16534  003C94  B0D8               	btfsc	status,0,c
 16535  003C96  2A18               	incf	___awdiv@dividend+1,f,c
 16536  003C98  0E01               	movlw	1
 16537  003C9A  1A1C               	xorwf	___awdiv@sign,f,c
 16538  003C9C  D000               	goto	l8538
 16539  003C9E                     l8538:
 16540  003C9E  0E00               	movlw	0
 16541  003CA0  6E1E               	movwf	___awdiv@quotient+1,c
 16542  003CA2  0E00               	movlw	0
 16543  003CA4  6E1D               	movwf	___awdiv@quotient,c
 16544  003CA6  5019               	movf	___awdiv@divisor,w,c
 16545  003CA8  101A               	iorwf	___awdiv@divisor+1,w,c
 16546  003CAA  B4D8               	btfsc	status,2,c
 16547  003CAC  D021               	goto	l8560
 16548  003CAE  0E01               	movlw	1
 16549  003CB0  6E1B               	movwf	___awdiv@counter,c
 16550  003CB2  D005               	goto	l8546
 16551  003CB4                     l8544:
 16552  003CB4  90D8               	bcf	status,0,c
 16553  003CB6  3619               	rlcf	___awdiv@divisor,f,c
 16554  003CB8  361A               	rlcf	___awdiv@divisor+1,f,c
 16555  003CBA  2A1B               	incf	___awdiv@counter,f,c
 16556  003CBC  D000               	goto	l8546
 16557  003CBE                     l8546:
 16558  003CBE  BE1A               	btfsc	___awdiv@divisor+1,7,c
 16559  003CC0  D002               	goto	l8548
 16560  003CC2  D7F8               	goto	l8544
 16561  003CC4  D000               	goto	l8548
 16562  003CC6                     l8548:
 16563  003CC6  90D8               	bcf	status,0,c
 16564  003CC8  361D               	rlcf	___awdiv@quotient,f,c
 16565  003CCA  361E               	rlcf	___awdiv@quotient+1,f,c
 16566  003CCC  5019               	movf	___awdiv@divisor,w,c
 16567  003CCE  5C17               	subwf	___awdiv@dividend,w,c
 16568  003CD0  501A               	movf	___awdiv@divisor+1,w,c
 16569  003CD2  5818               	subwfb	___awdiv@dividend+1,w,c
 16570  003CD4  A0D8               	btfss	status,0,c
 16571  003CD6  D006               	goto	l8556
 16572  003CD8  5019               	movf	___awdiv@divisor,w,c
 16573  003CDA  5E17               	subwf	___awdiv@dividend,f,c
 16574  003CDC  501A               	movf	___awdiv@divisor+1,w,c
 16575  003CDE  5A18               	subwfb	___awdiv@dividend+1,f,c
 16576  003CE0  801D               	bsf	___awdiv@quotient,0,c
 16577  003CE2  D000               	goto	l8556
 16578  003CE4                     l8556:
 16579  003CE4  90D8               	bcf	status,0,c
 16580  003CE6  321A               	rrcf	___awdiv@divisor+1,f,c
 16581  003CE8  3219               	rrcf	___awdiv@divisor,f,c
 16582  003CEA  2E1B               	decfsz	___awdiv@counter,f,c
 16583  003CEC  D7EC               	goto	l8548
 16584  003CEE  D000               	goto	l8560
 16585  003CF0                     l8560:
 16586  003CF0  501C               	movf	___awdiv@sign,w,c
 16587  003CF2  B4D8               	btfsc	status,2,c
 16588  003CF4  D005               	goto	l8564
 16589  003CF6  6C1D               	negf	___awdiv@quotient,c
 16590  003CF8  1E1E               	comf	___awdiv@quotient+1,f,c
 16591  003CFA  B0D8               	btfsc	status,0,c
 16592  003CFC  2A1E               	incf	___awdiv@quotient+1,f,c
 16593  003CFE  D000               	goto	l8564
 16594  003D00                     l8564:
 16595  003D00  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 16596  003D04  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 16597  003D08  D000               	goto	l1695
 16598  003D0A                     l1695:
 16599  003D0A  0012               	return		;funcret
 16600  003D0C                     __end_of___awdiv:
 16601                           	opt stack 0
 16602                           tblptru	equ	0xFF8
 16603                           tblptrh	equ	0xFF7
 16604                           tblptrl	equ	0xFF6
 16605                           tablat	equ	0xFF5
 16606                           prodh	equ	0xFF4
 16607                           prodl	equ	0xFF3
 16608                           intcon	equ	0xFF2
 16609                           intcon2	equ	0xFF1
 16610                           intcon3	equ	0xFF0
 16611                           postinc0	equ	0xFEE
 16612                           wreg	equ	0xFE8
 16613                           postdec1	equ	0xFE5
 16614                           plusw1	equ	0xFE3
 16615                           fsr1l	equ	0xFE1
 16616                           indf2	equ	0xFDF
 16617                           postinc2	equ	0xFDE
 16618                           postdec2	equ	0xFDD
 16619                           plusw2	equ	0xFDB
 16620                           fsr2h	equ	0xFDA
 16621                           fsr2l	equ	0xFD9
 16622                           status	equ	0xFD8
 16623                           
 16624 ;; *************** function __tdiv_to_l_ *****************
 16625 ;; Defined at:
 16626 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 16627 ;; Parameters:    Size  Location     Type
 16628 ;;  f1              3   16[COMRAM] float 
 16629 ;;  f2              3   19[COMRAM] float 
 16630 ;; Auto vars:     Size  Location     Type
 16631 ;;  quot            4   25[COMRAM] unsigned long 
 16632 ;;  exp1            1   30[COMRAM] unsigned char 
 16633 ;;  cntr            1   29[COMRAM] unsigned char 
 16634 ;; Return value:  Size  Location     Type
 16635 ;;                  4   16[COMRAM] unsigned long 
 16636 ;; Registers used:
 16637 ;;		wreg, status,2, status,0
 16638 ;; Tracked objects:
 16639 ;;		On entry : 0/0
 16640 ;;		On exit  : 0/0
 16641 ;;		Unchanged: 0/0
 16642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16643 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16644 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16645 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16646 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16647 ;;Total ram usage:       15 bytes
 16648 ;; Hardware stack levels used:    1
 16649 ;; Hardware stack levels required when called:    3
 16650 ;; This function calls:
 16651 ;;		Nothing
 16652 ;; This function is called by:
 16653 ;;		_printf
 16654 ;; This function uses a non-reentrant model
 16655 ;;
 16656                           
 16657                           	psect	text70
 16658  002FE2                     __ptext70:
 16659                           	opt stack 0
 16660  002FE2                     __tdiv_to_l_:
 16661                           	opt stack 26
 16662                           
 16663                           ;incstack = 0
 16664  002FE2  C013  F017         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 16665  002FE6  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16666  002FE8  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16667  002FEA  3412               	rlcf	__tdiv_to_l_@f1+1,w,c
 16668  002FEC  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16669  002FEE  E301               	bnc	u7371
 16670  002FF0  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16671  002FF2                     u7371:
 16672  002FF2  5017               	movf	??__tdiv_to_l_,w,c
 16673  002FF4  6E1F               	movwf	__tdiv_to_l_@exp1,c
 16674  002FF6  501F               	movf	__tdiv_to_l_@exp1,w,c
 16675  002FF8  A4D8               	btfss	status,2,c
 16676  002FFA  D002               	goto	l8830
 16677  002FFC  D05D               	goto	l8872
 16678  002FFE  D078               	goto	l1907
 16679  003000                     l8830:
 16680  003000  C016  F017         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 16681  003004  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 16682  003006  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 16683  003008  3415               	rlcf	__tdiv_to_l_@f2+1,w,c
 16684  00300A  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 16685  00300C  E301               	bnc	u7391
 16686  00300E  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 16687  003010                     u7391:
 16688  003010  5017               	movf	??__tdiv_to_l_,w,c
 16689  003012  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16690  003014  501E               	movf	__tdiv_to_l_@cntr,w,c
 16691  003016  A4D8               	btfss	status,2,c
 16692  003018  D002               	goto	l8836
 16693  00301A  D04E               	goto	l8872
 16694  00301C  D069               	goto	l1907
 16695  00301E                     l8836:
 16696  00301E  8E12               	bsf	__tdiv_to_l_@f1+1,7,c
 16697  003020  0EFF               	movlw	255
 16698  003022  1611               	andwf	__tdiv_to_l_@f1,f,c
 16699  003024  0EFF               	movlw	255
 16700  003026  1612               	andwf	__tdiv_to_l_@f1+1,f,c
 16701  003028  0E00               	movlw	0
 16702  00302A  1613               	andwf	__tdiv_to_l_@f1+2,f,c
 16703  00302C  8E15               	bsf	__tdiv_to_l_@f2+1,7,c
 16704  00302E  0EFF               	movlw	255
 16705  003030  1614               	andwf	__tdiv_to_l_@f2,f,c
 16706  003032  0EFF               	movlw	255
 16707  003034  1615               	andwf	__tdiv_to_l_@f2+1,f,c
 16708  003036  0E00               	movlw	0
 16709  003038  1616               	andwf	__tdiv_to_l_@f2+2,f,c
 16710  00303A  0E00               	movlw	0
 16711  00303C  6E1A               	movwf	__tdiv_to_l_@quot,c
 16712  00303E  0E00               	movlw	0
 16713  003040  6E1B               	movwf	__tdiv_to_l_@quot+1,c
 16714  003042  0E00               	movlw	0
 16715  003044  6E1C               	movwf	__tdiv_to_l_@quot+2,c
 16716  003046  0E00               	movlw	0
 16717  003048  6E1D               	movwf	__tdiv_to_l_@quot+3,c
 16718  00304A  0E7F               	movlw	127
 16719  00304C  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 16720  00304E  501E               	movf	__tdiv_to_l_@cntr,w,c
 16721  003050  0F98               	addlw	152
 16722  003052  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 16723  003054  0E18               	movlw	24
 16724  003056  6E1E               	movwf	__tdiv_to_l_@cntr,c
 16725  003058                     l1909:
 16726  003058  90D8               	bcf	status,0,c
 16727  00305A  361A               	rlcf	__tdiv_to_l_@quot,f,c
 16728  00305C  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 16729  00305E  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 16730  003060  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 16731  003062  5014               	movf	__tdiv_to_l_@f2,w,c
 16732  003064  5C11               	subwf	__tdiv_to_l_@f1,w,c
 16733  003066  5015               	movf	__tdiv_to_l_@f2+1,w,c
 16734  003068  5812               	subwfb	__tdiv_to_l_@f1+1,w,c
 16735  00306A  5016               	movf	__tdiv_to_l_@f2+2,w,c
 16736  00306C  5813               	subwfb	__tdiv_to_l_@f1+2,w,c
 16737  00306E  A0D8               	btfss	status,0,c
 16738  003070  D007               	goto	l1910
 16739  003072  5014               	movf	__tdiv_to_l_@f2,w,c
 16740  003074  5E11               	subwf	__tdiv_to_l_@f1,f,c
 16741  003076  5015               	movf	__tdiv_to_l_@f2+1,w,c
 16742  003078  5A12               	subwfb	__tdiv_to_l_@f1+1,f,c
 16743  00307A  5016               	movf	__tdiv_to_l_@f2+2,w,c
 16744  00307C  5A13               	subwfb	__tdiv_to_l_@f1+2,f,c
 16745  00307E  801A               	bsf	__tdiv_to_l_@quot,0,c
 16746  003080                     l1910:
 16747  003080  90D8               	bcf	status,0,c
 16748  003082  3611               	rlcf	__tdiv_to_l_@f1,f,c
 16749  003084  3612               	rlcf	__tdiv_to_l_@f1+1,f,c
 16750  003086  3613               	rlcf	__tdiv_to_l_@f1+2,f,c
 16751  003088  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
 16752  00308A  D7E6               	goto	l1909
 16753  00308C  D000               	goto	l8858
 16754  00308E                     l8858:
 16755  00308E  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
 16756  003090  D010               	goto	l8870
 16757  003092  501F               	movf	__tdiv_to_l_@exp1,w,c
 16758  003094  0A80               	xorlw	128
 16759  003096  0F97               	addlw	151
 16760  003098  B0D8               	btfsc	status,0,c
 16761  00309A  D003               	goto	l8866
 16762  00309C  D00D               	goto	l8872
 16763  00309E  D028               	goto	l1907
 16764  0030A0  D000               	goto	l8866
 16765  0030A2                     l8866:
 16766  0030A2  90D8               	bcf	status,0,c
 16767  0030A4  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
 16768  0030A6  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
 16769  0030A8  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
 16770  0030AA  321A               	rrcf	__tdiv_to_l_@quot,f,c
 16771  0030AC  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
 16772  0030AE  D7F9               	goto	l8866
 16773  0030B0  D017               	goto	l1916
 16774  0030B2                     l8870:
 16775  0030B2  0E17               	movlw	23
 16776  0030B4  641F               	cpfsgt	__tdiv_to_l_@exp1,c
 16777  0030B6  D011               	goto	l8878
 16778  0030B8                     l8872:
 16779  0030B8  0E00               	movlw	0
 16780  0030BA  6E11               	movwf	?__tdiv_to_l_,c
 16781  0030BC  0E00               	movlw	0
 16782  0030BE  6E12               	movwf	?__tdiv_to_l_+1,c
 16783  0030C0  0E00               	movlw	0
 16784  0030C2  6E13               	movwf	?__tdiv_to_l_+2,c
 16785  0030C4  0E00               	movlw	0
 16786  0030C6  6E14               	movwf	?__tdiv_to_l_+3,c
 16787  0030C8  D013               	goto	l1907
 16788  0030CA  D007               	goto	l8878
 16789  0030CC                     l8876:
 16790  0030CC  90D8               	bcf	status,0,c
 16791  0030CE  361A               	rlcf	__tdiv_to_l_@quot,f,c
 16792  0030D0  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 16793  0030D2  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 16794  0030D4  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 16795  0030D6  061F               	decf	__tdiv_to_l_@exp1,f,c
 16796  0030D8  D000               	goto	l8878
 16797  0030DA                     l8878:
 16798  0030DA  501F               	movf	__tdiv_to_l_@exp1,w,c
 16799  0030DC  A4D8               	btfss	status,2,c
 16800  0030DE  D7F6               	goto	l8876
 16801  0030E0                     l1916:
 16802  0030E0  C01A  F011         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 16803  0030E4  C01B  F012         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 16804  0030E8  C01C  F013         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 16805  0030EC  C01D  F014         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 16806  0030F0                     l1907:
 16807  0030F0  0012               	return		;funcret
 16808  0030F2                     __end_of__tdiv_to_l_:
 16809                           	opt stack 0
 16810                           tblptru	equ	0xFF8
 16811                           tblptrh	equ	0xFF7
 16812                           tblptrl	equ	0xFF6
 16813                           tablat	equ	0xFF5
 16814                           prodh	equ	0xFF4
 16815                           prodl	equ	0xFF3
 16816                           intcon	equ	0xFF2
 16817                           intcon2	equ	0xFF1
 16818                           intcon3	equ	0xFF0
 16819                           postinc0	equ	0xFEE
 16820                           wreg	equ	0xFE8
 16821                           postdec1	equ	0xFE5
 16822                           plusw1	equ	0xFE3
 16823                           fsr1l	equ	0xFE1
 16824                           indf2	equ	0xFDF
 16825                           postinc2	equ	0xFDE
 16826                           postdec2	equ	0xFDD
 16827                           plusw2	equ	0xFDB
 16828                           fsr2h	equ	0xFDA
 16829                           fsr2l	equ	0xFD9
 16830                           status	equ	0xFD8
 16831                           
 16832 ;; *************** function __div_to_l_ *****************
 16833 ;; Defined at:
 16834 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 16835 ;; Parameters:    Size  Location     Type
 16836 ;;  f1              3   16[COMRAM] unsigned long 
 16837 ;;  f2              3   19[COMRAM] unsigned long 
 16838 ;; Auto vars:     Size  Location     Type
 16839 ;;  quot            4   22[COMRAM] unsigned long 
 16840 ;;  exp1            1   27[COMRAM] unsigned char 
 16841 ;;  cntr            1   26[COMRAM] unsigned char 
 16842 ;; Return value:  Size  Location     Type
 16843 ;;                  4   16[COMRAM] unsigned long 
 16844 ;; Registers used:
 16845 ;;		wreg, status,2, status,0
 16846 ;; Tracked objects:
 16847 ;;		On entry : 0/0
 16848 ;;		On exit  : 0/0
 16849 ;;		Unchanged: 0/0
 16850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16851 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16852 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16854 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16855 ;;Total ram usage:       12 bytes
 16856 ;; Hardware stack levels used:    1
 16857 ;; Hardware stack levels required when called:    3
 16858 ;; This function calls:
 16859 ;;		Nothing
 16860 ;; This function is called by:
 16861 ;;		_printf
 16862 ;; This function uses a non-reentrant model
 16863 ;;
 16864                           
 16865                           	psect	text71
 16866  0030F2                     __ptext71:
 16867                           	opt stack 0
 16868  0030F2                     __div_to_l_:
 16869                           	opt stack 26
 16870                           
 16871                           ;incstack = 0
 16872  0030F2  3413               	rlcf	__div_to_l_@f1+2,w,c
 16873  0030F4  3414               	rlcf	__div_to_l_@f1+3,w,c
 16874  0030F6  6E1C               	movwf	__div_to_l_@exp1,c
 16875  0030F8  501C               	movf	__div_to_l_@exp1,w,c
 16876  0030FA  A4D8               	btfss	status,2,c
 16877  0030FC  D002               	goto	l8886
 16878  0030FE  D061               	goto	l8932
 16879  003100  D07C               	goto	l1786
 16880  003102                     l8886:
 16881  003102  3416               	rlcf	__div_to_l_@f2+2,w,c
 16882  003104  3417               	rlcf	__div_to_l_@f2+3,w,c
 16883  003106  6E1B               	movwf	__div_to_l_@cntr,c
 16884  003108  501B               	movf	__div_to_l_@cntr,w,c
 16885  00310A  A4D8               	btfss	status,2,c
 16886  00310C  D002               	goto	l8892
 16887  00310E  D059               	goto	l8932
 16888  003110  D074               	goto	l1786
 16889  003112                     l8892:
 16890  003112  8E13               	bsf	__div_to_l_@f1+2,7,c
 16891  003114  0EFF               	movlw	255
 16892  003116  1611               	andwf	__div_to_l_@f1,f,c
 16893  003118  0EFF               	movlw	255
 16894  00311A  1612               	andwf	__div_to_l_@f1+1,f,c
 16895  00311C  0EFF               	movlw	255
 16896  00311E  1613               	andwf	__div_to_l_@f1+2,f,c
 16897  003120  0E00               	movlw	0
 16898  003122  1614               	andwf	__div_to_l_@f1+3,f,c
 16899  003124  8E16               	bsf	__div_to_l_@f2+2,7,c
 16900  003126  0EFF               	movlw	255
 16901  003128  1614               	andwf	__div_to_l_@f2,f,c
 16902  00312A  0EFF               	movlw	255
 16903  00312C  1615               	andwf	__div_to_l_@f2+1,f,c
 16904  00312E  0EFF               	movlw	255
 16905  003130  1616               	andwf	__div_to_l_@f2+2,f,c
 16906  003132  0E00               	movlw	0
 16907  003134  1617               	andwf	__div_to_l_@f2+3,f,c
 16908  003136  0E00               	movlw	0
 16909  003138  6E17               	movwf	__div_to_l_@quot,c
 16910  00313A  0E00               	movlw	0
 16911  00313C  6E18               	movwf	__div_to_l_@quot+1,c
 16912  00313E  0E00               	movlw	0
 16913  003140  6E19               	movwf	__div_to_l_@quot+2,c
 16914  003142  0E00               	movlw	0
 16915  003144  6E1A               	movwf	__div_to_l_@quot+3,c
 16916  003146  0E7F               	movlw	127
 16917  003148  5E1C               	subwf	__div_to_l_@exp1,f,c
 16918  00314A  501B               	movf	__div_to_l_@cntr,w,c
 16919  00314C  0FA0               	addlw	160
 16920  00314E  5E1C               	subwf	__div_to_l_@exp1,f,c
 16921  003150  0E20               	movlw	32
 16922  003152  6E1B               	movwf	__div_to_l_@cntr,c
 16923  003154  D000               	goto	l8906
 16924  003156                     l8906:
 16925  003156  90D8               	bcf	status,0,c
 16926  003158  3617               	rlcf	__div_to_l_@quot,f,c
 16927  00315A  3618               	rlcf	__div_to_l_@quot+1,f,c
 16928  00315C  3619               	rlcf	__div_to_l_@quot+2,f,c
 16929  00315E  361A               	rlcf	__div_to_l_@quot+3,f,c
 16930  003160  5014               	movf	__div_to_l_@f2,w,c
 16931  003162  5C11               	subwf	__div_to_l_@f1,w,c
 16932  003164  5015               	movf	__div_to_l_@f2+1,w,c
 16933  003166  5812               	subwfb	__div_to_l_@f1+1,w,c
 16934  003168  5016               	movf	__div_to_l_@f2+2,w,c
 16935  00316A  5813               	subwfb	__div_to_l_@f1+2,w,c
 16936  00316C  5017               	movf	__div_to_l_@f2+3,w,c
 16937  00316E  5814               	subwfb	__div_to_l_@f1+3,w,c
 16938  003170  A0D8               	btfss	status,0,c
 16939  003172  D00A               	goto	l8914
 16940  003174  5014               	movf	__div_to_l_@f2,w,c
 16941  003176  5E11               	subwf	__div_to_l_@f1,f,c
 16942  003178  5015               	movf	__div_to_l_@f2+1,w,c
 16943  00317A  5A12               	subwfb	__div_to_l_@f1+1,f,c
 16944  00317C  5016               	movf	__div_to_l_@f2+2,w,c
 16945  00317E  5A13               	subwfb	__div_to_l_@f1+2,f,c
 16946  003180  5017               	movf	__div_to_l_@f2+3,w,c
 16947  003182  5A14               	subwfb	__div_to_l_@f1+3,f,c
 16948  003184  8017               	bsf	__div_to_l_@quot,0,c
 16949  003186  D000               	goto	l8914
 16950  003188                     l8914:
 16951  003188  90D8               	bcf	status,0,c
 16952  00318A  3611               	rlcf	__div_to_l_@f1,f,c
 16953  00318C  3612               	rlcf	__div_to_l_@f1+1,f,c
 16954  00318E  3613               	rlcf	__div_to_l_@f1+2,f,c
 16955  003190  3614               	rlcf	__div_to_l_@f1+3,f,c
 16956  003192  2E1B               	decfsz	__div_to_l_@cntr,f,c
 16957  003194  D7E0               	goto	l8906
 16958  003196  D000               	goto	l8918
 16959  003198                     l8918:
 16960  003198  AE1C               	btfss	__div_to_l_@exp1,7,c
 16961  00319A  D010               	goto	l8930
 16962  00319C  501C               	movf	__div_to_l_@exp1,w,c
 16963  00319E  0A80               	xorlw	128
 16964  0031A0  0F9F               	addlw	159
 16965  0031A2  B0D8               	btfsc	status,0,c
 16966  0031A4  D003               	goto	l8926
 16967  0031A6  D00D               	goto	l8932
 16968  0031A8  D028               	goto	l1786
 16969  0031AA  D000               	goto	l8926
 16970  0031AC                     l8926:
 16971  0031AC  90D8               	bcf	status,0,c
 16972  0031AE  321A               	rrcf	__div_to_l_@quot+3,f,c
 16973  0031B0  3219               	rrcf	__div_to_l_@quot+2,f,c
 16974  0031B2  3218               	rrcf	__div_to_l_@quot+1,f,c
 16975  0031B4  3217               	rrcf	__div_to_l_@quot,f,c
 16976  0031B6  3E1C               	incfsz	__div_to_l_@exp1,f,c
 16977  0031B8  D7F9               	goto	l8926
 16978  0031BA  D017               	goto	l1795
 16979  0031BC                     l8930:
 16980  0031BC  0E1F               	movlw	31
 16981  0031BE  641C               	cpfsgt	__div_to_l_@exp1,c
 16982  0031C0  D011               	goto	l8938
 16983  0031C2                     l8932:
 16984  0031C2  0E00               	movlw	0
 16985  0031C4  6E11               	movwf	?__div_to_l_,c
 16986  0031C6  0E00               	movlw	0
 16987  0031C8  6E12               	movwf	?__div_to_l_+1,c
 16988  0031CA  0E00               	movlw	0
 16989  0031CC  6E13               	movwf	?__div_to_l_+2,c
 16990  0031CE  0E00               	movlw	0
 16991  0031D0  6E14               	movwf	?__div_to_l_+3,c
 16992  0031D2  D013               	goto	l1786
 16993  0031D4  D007               	goto	l8938
 16994  0031D6                     l8936:
 16995  0031D6  90D8               	bcf	status,0,c
 16996  0031D8  3617               	rlcf	__div_to_l_@quot,f,c
 16997  0031DA  3618               	rlcf	__div_to_l_@quot+1,f,c
 16998  0031DC  3619               	rlcf	__div_to_l_@quot+2,f,c
 16999  0031DE  361A               	rlcf	__div_to_l_@quot+3,f,c
 17000  0031E0  061C               	decf	__div_to_l_@exp1,f,c
 17001  0031E2  D000               	goto	l8938
 17002  0031E4                     l8938:
 17003  0031E4  501C               	movf	__div_to_l_@exp1,w,c
 17004  0031E6  A4D8               	btfss	status,2,c
 17005  0031E8  D7F6               	goto	l8936
 17006  0031EA                     l1795:
 17007  0031EA  C017  F011         	movff	__div_to_l_@quot,?__div_to_l_
 17008  0031EE  C018  F012         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 17009  0031F2  C019  F013         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 17010  0031F6  C01A  F014         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 17011  0031FA                     l1786:
 17012  0031FA  0012               	return		;funcret
 17013  0031FC                     __end_of__div_to_l_:
 17014                           	opt stack 0
 17015                           tblptru	equ	0xFF8
 17016                           tblptrh	equ	0xFF7
 17017                           tblptrl	equ	0xFF6
 17018                           tablat	equ	0xFF5
 17019                           prodh	equ	0xFF4
 17020                           prodl	equ	0xFF3
 17021                           intcon	equ	0xFF2
 17022                           intcon2	equ	0xFF1
 17023                           intcon3	equ	0xFF0
 17024                           postinc0	equ	0xFEE
 17025                           wreg	equ	0xFE8
 17026                           postdec1	equ	0xFE5
 17027                           plusw1	equ	0xFE3
 17028                           fsr1l	equ	0xFE1
 17029                           indf2	equ	0xFDF
 17030                           postinc2	equ	0xFDE
 17031                           postdec2	equ	0xFDD
 17032                           plusw2	equ	0xFDB
 17033                           fsr2h	equ	0xFDA
 17034                           fsr2l	equ	0xFD9
 17035                           status	equ	0xFD8
 17036                           
 17037 ;; *************** function ___lltoft *****************
 17038 ;; Defined at:
 17039 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 17040 ;; Parameters:    Size  Location     Type
 17041 ;;  c               4   24[COMRAM] unsigned long 
 17042 ;; Auto vars:     Size  Location     Type
 17043 ;;  exp             1   32[COMRAM] unsigned char 
 17044 ;; Return value:  Size  Location     Type
 17045 ;;                  3   24[COMRAM] float 
 17046 ;; Registers used:
 17047 ;;		wreg, status,2, status,0, cstack
 17048 ;; Tracked objects:
 17049 ;;		On entry : 0/0
 17050 ;;		On exit  : 0/0
 17051 ;;		Unchanged: 0/0
 17052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17055 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17056 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17057 ;;Total ram usage:        9 bytes
 17058 ;; Hardware stack levels used:    1
 17059 ;; Hardware stack levels required when called:    4
 17060 ;; This function calls:
 17061 ;;		___ftpack
 17062 ;; This function is called by:
 17063 ;;		_printf
 17064 ;; This function uses a non-reentrant model
 17065 ;;
 17066                           
 17067                           	psect	text72
 17068  00437C                     __ptext72:
 17069                           	opt stack 0
 17070  00437C                     ___lltoft:
 17071                           	opt stack 25
 17072                           
 17073                           ;incstack = 0
 17074  00437C  0E8E               	movlw	142
 17075  00437E  6E21               	movwf	___lltoft@exp,c
 17076  004380  D007               	goto	l9058
 17077  004382                     l9056:
 17078  004382  90D8               	bcf	status,0,c
 17079  004384  321C               	rrcf	___lltoft@c+3,f,c
 17080  004386  321B               	rrcf	___lltoft@c+2,f,c
 17081  004388  321A               	rrcf	___lltoft@c+1,f,c
 17082  00438A  3219               	rrcf	___lltoft@c,f,c
 17083  00438C  2A21               	incf	___lltoft@exp,f,c
 17084  00438E  D000               	goto	l9058
 17085  004390                     l9058:
 17086  004390  0E00               	movlw	0
 17087  004392  1419               	andwf	___lltoft@c,w,c
 17088  004394  6E1D               	movwf	??___lltoft& (0+255),c
 17089  004396  0E00               	movlw	0
 17090  004398  141A               	andwf	___lltoft@c+1,w,c
 17091  00439A  6E1E               	movwf	(??___lltoft+1)& (0+255),c
 17092  00439C  0E00               	movlw	0
 17093  00439E  141B               	andwf	___lltoft@c+2,w,c
 17094  0043A0  6E1F               	movwf	(??___lltoft+2)& (0+255),c
 17095  0043A2  0EFF               	movlw	255
 17096  0043A4  141C               	andwf	___lltoft@c+3,w,c
 17097  0043A6  6E20               	movwf	(??___lltoft+3)& (0+255),c
 17098  0043A8  501D               	movf	??___lltoft,w,c
 17099  0043AA  101E               	iorwf	??___lltoft+1,w,c
 17100  0043AC  101F               	iorwf	??___lltoft+2,w,c
 17101  0043AE  1020               	iorwf	??___lltoft+3,w,c
 17102  0043B0  A4D8               	btfss	status,2,c
 17103  0043B2  D7E7               	goto	l9056
 17104  0043B4  C019  F011         	movff	___lltoft@c,___ftpack@arg
 17105  0043B8  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
 17106  0043BC  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
 17107  0043C0  C021  F014         	movff	___lltoft@exp,___ftpack@exp
 17108  0043C4  0E00               	movlw	0
 17109  0043C6  6E15               	movwf	___ftpack@sign,c
 17110  0043C8  EC2B  F01C         	call	___ftpack	;wreg free
 17111  0043CC  C011  F019         	movff	?___ftpack,?___lltoft
 17112  0043D0  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
 17113  0043D4  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
 17114  0043D8  D000               	goto	l2026
 17115  0043DA                     l2026:
 17116  0043DA  0012               	return		;funcret
 17117  0043DC                     __end_of___lltoft:
 17118                           	opt stack 0
 17119                           tblptru	equ	0xFF8
 17120                           tblptrh	equ	0xFF7
 17121                           tblptrl	equ	0xFF6
 17122                           tablat	equ	0xFF5
 17123                           prodh	equ	0xFF4
 17124                           prodl	equ	0xFF3
 17125                           intcon	equ	0xFF2
 17126                           intcon2	equ	0xFF1
 17127                           intcon3	equ	0xFF0
 17128                           postinc0	equ	0xFEE
 17129                           wreg	equ	0xFE8
 17130                           postdec1	equ	0xFE5
 17131                           plusw1	equ	0xFE3
 17132                           fsr1l	equ	0xFE1
 17133                           indf2	equ	0xFDF
 17134                           postinc2	equ	0xFDE
 17135                           postdec2	equ	0xFDD
 17136                           plusw2	equ	0xFDB
 17137                           fsr2h	equ	0xFDA
 17138                           fsr2l	equ	0xFD9
 17139                           status	equ	0xFD8
 17140                           
 17141 ;; *************** function ___llmod *****************
 17142 ;; Defined at:
 17143 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 17144 ;; Parameters:    Size  Location     Type
 17145 ;;  dividend        4   29[COMRAM] unsigned long 
 17146 ;;  divisor         4   33[COMRAM] unsigned long 
 17147 ;; Auto vars:     Size  Location     Type
 17148 ;;  counter         1   37[COMRAM] unsigned char 
 17149 ;; Return value:  Size  Location     Type
 17150 ;;                  4   29[COMRAM] unsigned long 
 17151 ;; Registers used:
 17152 ;;		wreg, status,2, status,0
 17153 ;; Tracked objects:
 17154 ;;		On entry : 0/0
 17155 ;;		On exit  : 0/0
 17156 ;;		Unchanged: 0/0
 17157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17158 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17161 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17162 ;;Total ram usage:        9 bytes
 17163 ;; Hardware stack levels used:    1
 17164 ;; Hardware stack levels required when called:    3
 17165 ;; This function calls:
 17166 ;;		Nothing
 17167 ;; This function is called by:
 17168 ;;		_printf
 17169 ;; This function uses a non-reentrant model
 17170 ;;
 17171                           
 17172                           	psect	text73
 17173  004166                     __ptext73:
 17174                           	opt stack 0
 17175  004166                     ___llmod:
 17176                           	opt stack 26
 17177                           
 17178                           ;incstack = 0
 17179  004166  5022               	movf	___llmod@divisor,w,c
 17180  004168  1023               	iorwf	___llmod@divisor+1,w,c
 17181  00416A  1024               	iorwf	___llmod@divisor+2,w,c
 17182  00416C  1025               	iorwf	___llmod@divisor+3,w,c
 17183  00416E  B4D8               	btfsc	status,2,c
 17184  004170  D029               	goto	l2006
 17185  004172  0E01               	movlw	1
 17186  004174  6E26               	movwf	___llmod@counter,c
 17187  004176  D007               	goto	l9044
 17188  004178                     l9042:
 17189  004178  90D8               	bcf	status,0,c
 17190  00417A  3622               	rlcf	___llmod@divisor,f,c
 17191  00417C  3623               	rlcf	___llmod@divisor+1,f,c
 17192  00417E  3624               	rlcf	___llmod@divisor+2,f,c
 17193  004180  3625               	rlcf	___llmod@divisor+3,f,c
 17194  004182  2A26               	incf	___llmod@counter,f,c
 17195  004184  D000               	goto	l9044
 17196  004186                     l9044:
 17197  004186  BE25               	btfsc	___llmod@divisor+3,7,c
 17198  004188  D002               	goto	l9046
 17199  00418A  D7F6               	goto	l9042
 17200  00418C  D000               	goto	l9046
 17201  00418E                     l9046:
 17202  00418E  5022               	movf	___llmod@divisor,w,c
 17203  004190  5C1E               	subwf	___llmod@dividend,w,c
 17204  004192  5023               	movf	___llmod@divisor+1,w,c
 17205  004194  581F               	subwfb	___llmod@dividend+1,w,c
 17206  004196  5024               	movf	___llmod@divisor+2,w,c
 17207  004198  5820               	subwfb	___llmod@dividend+2,w,c
 17208  00419A  5025               	movf	___llmod@divisor+3,w,c
 17209  00419C  5821               	subwfb	___llmod@dividend+3,w,c
 17210  00419E  A0D8               	btfss	status,0,c
 17211  0041A0  D009               	goto	l9050
 17212  0041A2  5022               	movf	___llmod@divisor,w,c
 17213  0041A4  5E1E               	subwf	___llmod@dividend,f,c
 17214  0041A6  5023               	movf	___llmod@divisor+1,w,c
 17215  0041A8  5A1F               	subwfb	___llmod@dividend+1,f,c
 17216  0041AA  5024               	movf	___llmod@divisor+2,w,c
 17217  0041AC  5A20               	subwfb	___llmod@dividend+2,f,c
 17218  0041AE  5025               	movf	___llmod@divisor+3,w,c
 17219  0041B0  5A21               	subwfb	___llmod@dividend+3,f,c
 17220  0041B2  D000               	goto	l9050
 17221  0041B4                     l9050:
 17222  0041B4  90D8               	bcf	status,0,c
 17223  0041B6  3225               	rrcf	___llmod@divisor+3,f,c
 17224  0041B8  3224               	rrcf	___llmod@divisor+2,f,c
 17225  0041BA  3223               	rrcf	___llmod@divisor+1,f,c
 17226  0041BC  3222               	rrcf	___llmod@divisor,f,c
 17227  0041BE  2E26               	decfsz	___llmod@counter,f,c
 17228  0041C0  D7E6               	goto	l9046
 17229  0041C2  D000               	goto	l2006
 17230  0041C4                     l2006:
 17231  0041C4  C01E  F01E         	movff	___llmod@dividend,?___llmod
 17232  0041C8  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
 17233  0041CC  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
 17234  0041D0  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
 17235  0041D4  0012               	return		;funcret
 17236  0041D6                     __end_of___llmod:
 17237                           	opt stack 0
 17238                           tblptru	equ	0xFF8
 17239                           tblptrh	equ	0xFF7
 17240                           tblptrl	equ	0xFF6
 17241                           tablat	equ	0xFF5
 17242                           prodh	equ	0xFF4
 17243                           prodl	equ	0xFF3
 17244                           intcon	equ	0xFF2
 17245                           intcon2	equ	0xFF1
 17246                           intcon3	equ	0xFF0
 17247                           postinc0	equ	0xFEE
 17248                           wreg	equ	0xFE8
 17249                           postdec1	equ	0xFE5
 17250                           plusw1	equ	0xFE3
 17251                           fsr1l	equ	0xFE1
 17252                           indf2	equ	0xFDF
 17253                           postinc2	equ	0xFDE
 17254                           postdec2	equ	0xFDD
 17255                           plusw2	equ	0xFDB
 17256                           fsr2h	equ	0xFDA
 17257                           fsr2l	equ	0xFD9
 17258                           status	equ	0xFD8
 17259                           
 17260 ;; *************** function ___lldiv *****************
 17261 ;; Defined at:
 17262 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;  dividend        4   16[COMRAM] unsigned long 
 17265 ;;  divisor         4   20[COMRAM] unsigned long 
 17266 ;; Auto vars:     Size  Location     Type
 17267 ;;  quotient        4   24[COMRAM] unsigned long 
 17268 ;;  counter         1   28[COMRAM] unsigned char 
 17269 ;; Return value:  Size  Location     Type
 17270 ;;                  4   16[COMRAM] unsigned long 
 17271 ;; Registers used:
 17272 ;;		wreg, status,2, status,0
 17273 ;; Tracked objects:
 17274 ;;		On entry : 0/0
 17275 ;;		On exit  : 0/0
 17276 ;;		Unchanged: 0/0
 17277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17278 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17279 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;Total ram usage:       13 bytes
 17283 ;; Hardware stack levels used:    1
 17284 ;; Hardware stack levels required when called:    3
 17285 ;; This function calls:
 17286 ;;		Nothing
 17287 ;; This function is called by:
 17288 ;;		_printf
 17289 ;; This function uses a non-reentrant model
 17290 ;;
 17291                           
 17292                           	psect	text74
 17293  003F4E                     __ptext74:
 17294                           	opt stack 0
 17295  003F4E                     ___lldiv:
 17296                           	opt stack 26
 17297                           
 17298                           ;incstack = 0
 17299  003F4E  0E00               	movlw	0
 17300  003F50  6E19               	movwf	___lldiv@quotient,c
 17301  003F52  0E00               	movlw	0
 17302  003F54  6E1A               	movwf	___lldiv@quotient+1,c
 17303  003F56  0E00               	movlw	0
 17304  003F58  6E1B               	movwf	___lldiv@quotient+2,c
 17305  003F5A  0E00               	movlw	0
 17306  003F5C  6E1C               	movwf	___lldiv@quotient+3,c
 17307  003F5E  5015               	movf	___lldiv@divisor,w,c
 17308  003F60  1016               	iorwf	___lldiv@divisor+1,w,c
 17309  003F62  1017               	iorwf	___lldiv@divisor+2,w,c
 17310  003F64  1018               	iorwf	___lldiv@divisor+3,w,c
 17311  003F66  B4D8               	btfsc	status,2,c
 17312  003F68  D02F               	goto	l1996
 17313  003F6A  0E01               	movlw	1
 17314  003F6C  6E1D               	movwf	___lldiv@counter,c
 17315  003F6E  D007               	goto	l9024
 17316  003F70                     l9022:
 17317  003F70  90D8               	bcf	status,0,c
 17318  003F72  3615               	rlcf	___lldiv@divisor,f,c
 17319  003F74  3616               	rlcf	___lldiv@divisor+1,f,c
 17320  003F76  3617               	rlcf	___lldiv@divisor+2,f,c
 17321  003F78  3618               	rlcf	___lldiv@divisor+3,f,c
 17322  003F7A  2A1D               	incf	___lldiv@counter,f,c
 17323  003F7C  D000               	goto	l9024
 17324  003F7E                     l9024:
 17325  003F7E  BE18               	btfsc	___lldiv@divisor+3,7,c
 17326  003F80  D002               	goto	l9026
 17327  003F82  D7F6               	goto	l9022
 17328  003F84  D000               	goto	l9026
 17329  003F86                     l9026:
 17330  003F86  90D8               	bcf	status,0,c
 17331  003F88  3619               	rlcf	___lldiv@quotient,f,c
 17332  003F8A  361A               	rlcf	___lldiv@quotient+1,f,c
 17333  003F8C  361B               	rlcf	___lldiv@quotient+2,f,c
 17334  003F8E  361C               	rlcf	___lldiv@quotient+3,f,c
 17335  003F90  5015               	movf	___lldiv@divisor,w,c
 17336  003F92  5C11               	subwf	___lldiv@dividend,w,c
 17337  003F94  5016               	movf	___lldiv@divisor+1,w,c
 17338  003F96  5812               	subwfb	___lldiv@dividend+1,w,c
 17339  003F98  5017               	movf	___lldiv@divisor+2,w,c
 17340  003F9A  5813               	subwfb	___lldiv@dividend+2,w,c
 17341  003F9C  5018               	movf	___lldiv@divisor+3,w,c
 17342  003F9E  5814               	subwfb	___lldiv@dividend+3,w,c
 17343  003FA0  A0D8               	btfss	status,0,c
 17344  003FA2  D00A               	goto	l9034
 17345  003FA4  5015               	movf	___lldiv@divisor,w,c
 17346  003FA6  5E11               	subwf	___lldiv@dividend,f,c
 17347  003FA8  5016               	movf	___lldiv@divisor+1,w,c
 17348  003FAA  5A12               	subwfb	___lldiv@dividend+1,f,c
 17349  003FAC  5017               	movf	___lldiv@divisor+2,w,c
 17350  003FAE  5A13               	subwfb	___lldiv@dividend+2,f,c
 17351  003FB0  5018               	movf	___lldiv@divisor+3,w,c
 17352  003FB2  5A14               	subwfb	___lldiv@dividend+3,f,c
 17353  003FB4  8019               	bsf	___lldiv@quotient,0,c
 17354  003FB6  D000               	goto	l9034
 17355  003FB8                     l9034:
 17356  003FB8  90D8               	bcf	status,0,c
 17357  003FBA  3218               	rrcf	___lldiv@divisor+3,f,c
 17358  003FBC  3217               	rrcf	___lldiv@divisor+2,f,c
 17359  003FBE  3216               	rrcf	___lldiv@divisor+1,f,c
 17360  003FC0  3215               	rrcf	___lldiv@divisor,f,c
 17361  003FC2  2E1D               	decfsz	___lldiv@counter,f,c
 17362  003FC4  D7E0               	goto	l9026
 17363  003FC6  D000               	goto	l1996
 17364  003FC8                     l1996:
 17365  003FC8  C019  F011         	movff	___lldiv@quotient,?___lldiv
 17366  003FCC  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 17367  003FD0  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 17368  003FD4  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 17369  003FD8  0012               	return		;funcret
 17370  003FDA                     __end_of___lldiv:
 17371                           	opt stack 0
 17372                           tblptru	equ	0xFF8
 17373                           tblptrh	equ	0xFF7
 17374                           tblptrl	equ	0xFF6
 17375                           tablat	equ	0xFF5
 17376                           prodh	equ	0xFF4
 17377                           prodl	equ	0xFF3
 17378                           intcon	equ	0xFF2
 17379                           intcon2	equ	0xFF1
 17380                           intcon3	equ	0xFF0
 17381                           postinc0	equ	0xFEE
 17382                           wreg	equ	0xFE8
 17383                           postdec1	equ	0xFE5
 17384                           plusw1	equ	0xFE3
 17385                           fsr1l	equ	0xFE1
 17386                           indf2	equ	0xFDF
 17387                           postinc2	equ	0xFDE
 17388                           postdec2	equ	0xFDD
 17389                           plusw2	equ	0xFDB
 17390                           fsr2h	equ	0xFDA
 17391                           fsr2l	equ	0xFD9
 17392                           status	equ	0xFD8
 17393                           
 17394 ;; *************** function ___ftsub *****************
 17395 ;; Defined at:
 17396 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 17397 ;; Parameters:    Size  Location     Type
 17398 ;;  f1              3    0[BANK0 ] float 
 17399 ;;  f2              3    3[BANK0 ] float 
 17400 ;; Auto vars:     Size  Location     Type
 17401 ;;		None
 17402 ;; Return value:  Size  Location     Type
 17403 ;;                  3    0[BANK0 ] float 
 17404 ;; Registers used:
 17405 ;;		wreg, status,2, status,0, cstack
 17406 ;; Tracked objects:
 17407 ;;		On entry : 0/0
 17408 ;;		On exit  : 0/0
 17409 ;;		Unchanged: 0/0
 17410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17411 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17414 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17415 ;;Total ram usage:        6 bytes
 17416 ;; Hardware stack levels used:    1
 17417 ;; Hardware stack levels required when called:    5
 17418 ;; This function calls:
 17419 ;;		___ftadd
 17420 ;; This function is called by:
 17421 ;;		_printf
 17422 ;; This function uses a non-reentrant model
 17423 ;;
 17424                           
 17425                           	psect	text75
 17426  004588                     __ptext75:
 17427                           	opt stack 0
 17428  004588                     ___ftsub:
 17429                           	opt stack 24
 17430                           
 17431                           ;incstack = 0
 17432  004588  0100               	movlb	0	; () banked
 17433  00458A  5183               	movf	___ftsub@f2& (0+255),w,b
 17434  00458C  0100               	movlb	0	; () banked
 17435  00458E  1184               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17436  004590  0100               	movlb	0	; () banked
 17437  004592  1185               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17438  004594  B4D8               	btfsc	status,2,c
 17439  004596  D00A               	goto	l8944
 17440                           
 17441                           ; BSR set to: 0
 17442  004598  0E00               	movlw	0
 17443  00459A  0100               	movlb	0	; () banked
 17444  00459C  1B83               	xorwf	___ftsub@f2& (0+255),f,b
 17445  00459E  0E00               	movlw	0
 17446  0045A0  0100               	movlb	0	; () banked
 17447  0045A2  1B84               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17448  0045A4  0E80               	movlw	128
 17449  0045A6  0100               	movlb	0	; () banked
 17450  0045A8  1B85               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17451  0045AA  D000               	goto	l8944
 17452  0045AC                     l8944:
 17453                           
 17454                           ; BSR set to: 0
 17455  0045AC  C080  F04D         	movff	___ftsub@f1,___ftadd@f1
 17456  0045B0  C081  F04E         	movff	___ftsub@f1+1,___ftadd@f1+1
 17457  0045B4  C082  F04F         	movff	___ftsub@f1+2,___ftadd@f1+2
 17458  0045B8  C083  F050         	movff	___ftsub@f2,___ftadd@f2
 17459  0045BC  C084  F051         	movff	___ftsub@f2+1,___ftadd@f2+1
 17460  0045C0  C085  F052         	movff	___ftsub@f2+2,___ftadd@f2+2
 17461  0045C4  ECFF  F011         	call	___ftadd	;wreg free
 17462  0045C8  C04D  F080         	movff	?___ftadd,?___ftsub
 17463  0045CC  C04E  F081         	movff	?___ftadd+1,?___ftsub+1
 17464  0045D0  C04F  F082         	movff	?___ftadd+2,?___ftsub+2
 17465  0045D4  D000               	goto	l1948
 17466  0045D6                     l1948:
 17467  0045D6  0012               	return		;funcret
 17468  0045D8                     __end_of___ftsub:
 17469                           	opt stack 0
 17470                           tblptru	equ	0xFF8
 17471                           tblptrh	equ	0xFF7
 17472                           tblptrl	equ	0xFF6
 17473                           tablat	equ	0xFF5
 17474                           prodh	equ	0xFF4
 17475                           prodl	equ	0xFF3
 17476                           intcon	equ	0xFF2
 17477                           intcon2	equ	0xFF1
 17478                           intcon3	equ	0xFF0
 17479                           postinc0	equ	0xFEE
 17480                           wreg	equ	0xFE8
 17481                           postdec1	equ	0xFE5
 17482                           plusw1	equ	0xFE3
 17483                           fsr1l	equ	0xFE1
 17484                           indf2	equ	0xFDF
 17485                           postinc2	equ	0xFDE
 17486                           postdec2	equ	0xFDD
 17487                           plusw2	equ	0xFDB
 17488                           fsr2h	equ	0xFDA
 17489                           fsr2l	equ	0xFD9
 17490                           status	equ	0xFD8
 17491                           
 17492 ;; *************** function ___ftadd *****************
 17493 ;; Defined at:
 17494 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 17495 ;; Parameters:    Size  Location     Type
 17496 ;;  f1              3   76[COMRAM] float 
 17497 ;;  f2              3   79[COMRAM] float 
 17498 ;; Auto vars:     Size  Location     Type
 17499 ;;  exp1            1   87[COMRAM] unsigned char 
 17500 ;;  exp2            1   86[COMRAM] unsigned char 
 17501 ;;  sign            1   85[COMRAM] unsigned char 
 17502 ;; Return value:  Size  Location     Type
 17503 ;;                  3   76[COMRAM] float 
 17504 ;; Registers used:
 17505 ;;		wreg, status,2, status,0, cstack
 17506 ;; Tracked objects:
 17507 ;;		On entry : 0/0
 17508 ;;		On exit  : 0/0
 17509 ;;		Unchanged: 0/0
 17510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17511 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17512 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17513 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17514 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17515 ;;Total ram usage:       12 bytes
 17516 ;; Hardware stack levels used:    1
 17517 ;; Hardware stack levels required when called:    4
 17518 ;; This function calls:
 17519 ;;		___ftpack
 17520 ;; This function is called by:
 17521 ;;		_printf
 17522 ;;		___ftsub
 17523 ;; This function uses a non-reentrant model
 17524 ;;
 17525                           
 17526                           	psect	text76
 17527  0023FE                     __ptext76:
 17528                           	opt stack 0
 17529  0023FE                     ___ftadd:
 17530                           	opt stack 24
 17531                           
 17532                           ;incstack = 0
 17533  0023FE  C04F  F053         	movff	___ftadd@f1+2,??___ftadd
 17534  002402  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17535  002404  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17536  002406  344E               	rlcf	___ftadd@f1+1,w,c
 17537  002408  3653               	rlcf	??___ftadd& (0+255),f,c
 17538  00240A  E301               	bnc	u6741
 17539  00240C  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17540  00240E                     u6741:
 17541  00240E  5053               	movf	??___ftadd,w,c
 17542  002410  6E58               	movwf	___ftadd@exp1,c
 17543  002412  C052  F053         	movff	___ftadd@f2+2,??___ftadd
 17544  002416  6A54               	clrf	(??___ftadd+1)& (0+255),c
 17545  002418  6A55               	clrf	(??___ftadd+2)& (0+255),c
 17546  00241A  3451               	rlcf	___ftadd@f2+1,w,c
 17547  00241C  3653               	rlcf	??___ftadd& (0+255),f,c
 17548  00241E  E301               	bnc	u6751
 17549  002420  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 17550  002422                     u6751:
 17551  002422  5053               	movf	??___ftadd,w,c
 17552  002424  6E57               	movwf	___ftadd@exp2,c
 17553  002426  5058               	movf	___ftadd@exp1,w,c
 17554  002428  B4D8               	btfsc	status,2,c
 17555  00242A  D00B               	goto	l1867
 17556  00242C  5057               	movf	___ftadd@exp2,w,c
 17557  00242E  5C58               	subwf	___ftadd@exp1,w,c
 17558  002430  B0D8               	btfsc	status,0,c
 17559  002432  D00E               	goto	l8414
 17560  002434  5058               	movf	___ftadd@exp1,w,c
 17561  002436  0800               	sublw	0
 17562  002438  2457               	addwf	___ftadd@exp2,w,c
 17563  00243A  6E53               	movwf	??___ftadd& (0+255),c
 17564  00243C  0E18               	movlw	24
 17565  00243E  6453               	cpfsgt	??___ftadd,c
 17566  002440  D007               	goto	l8414
 17567  002442                     l1867:
 17568  002442  C050  F04D         	movff	___ftadd@f2,?___ftadd
 17569  002446  C051  F04E         	movff	___ftadd@f2+1,?___ftadd+1
 17570  00244A  C052  F04F         	movff	___ftadd@f2+2,?___ftadd+2
 17571  00244E  D0B8               	goto	l1868
 17572  002450                     l8414:
 17573  002450  5057               	movf	___ftadd@exp2,w,c
 17574  002452  B4D8               	btfsc	status,2,c
 17575  002454  D00B               	goto	l1871
 17576  002456  5058               	movf	___ftadd@exp1,w,c
 17577  002458  5C57               	subwf	___ftadd@exp2,w,c
 17578  00245A  B0D8               	btfsc	status,0,c
 17579  00245C  D00E               	goto	l8420
 17580  00245E  5057               	movf	___ftadd@exp2,w,c
 17581  002460  0800               	sublw	0
 17582  002462  2458               	addwf	___ftadd@exp1,w,c
 17583  002464  6E53               	movwf	??___ftadd& (0+255),c
 17584  002466  0E18               	movlw	24
 17585  002468  6453               	cpfsgt	??___ftadd,c
 17586  00246A  D007               	goto	l8420
 17587  00246C                     l1871:
 17588  00246C  C04D  F04D         	movff	___ftadd@f1,?___ftadd
 17589  002470  C04E  F04E         	movff	___ftadd@f1+1,?___ftadd+1
 17590  002474  C04F  F04F         	movff	___ftadd@f1+2,?___ftadd+2
 17591  002478  D0A3               	goto	l1868
 17592  00247A                     l8420:
 17593  00247A  0E06               	movlw	6
 17594  00247C  6E56               	movwf	___ftadd@sign,c
 17595  00247E  AE4F               	btfss	___ftadd@f1+2,7,c
 17596  002480  D002               	goto	l8426
 17597  002482  8E56               	bsf	___ftadd@sign,7,c
 17598  002484  D000               	goto	l8426
 17599  002486                     l8426:
 17600  002486  BE52               	btfsc	___ftadd@f2+2,7,c
 17601  002488  8C56               	bsf	___ftadd@sign,6,c
 17602  00248A  8E4E               	bsf	___ftadd@f1+1,7,c
 17603  00248C  0EFF               	movlw	255
 17604  00248E  164D               	andwf	___ftadd@f1,f,c
 17605  002490  0EFF               	movlw	255
 17606  002492  164E               	andwf	___ftadd@f1+1,f,c
 17607  002494  0E00               	movlw	0
 17608  002496  164F               	andwf	___ftadd@f1+2,f,c
 17609  002498  8E51               	bsf	___ftadd@f2+1,7,c
 17610  00249A  0EFF               	movlw	255
 17611  00249C  1650               	andwf	___ftadd@f2,f,c
 17612  00249E  0EFF               	movlw	255
 17613  0024A0  1651               	andwf	___ftadd@f2+1,f,c
 17614  0024A2  0E00               	movlw	0
 17615  0024A4  1652               	andwf	___ftadd@f2+2,f,c
 17616  0024A6  5057               	movf	___ftadd@exp2,w,c
 17617  0024A8  5C58               	subwf	___ftadd@exp1,w,c
 17618  0024AA  B0D8               	btfsc	status,0,c
 17619  0024AC  D01E               	goto	l8446
 17620  0024AE                     l8436:
 17621  0024AE  90D8               	bcf	status,0,c
 17622  0024B0  3650               	rlcf	___ftadd@f2,f,c
 17623  0024B2  3651               	rlcf	___ftadd@f2+1,f,c
 17624  0024B4  3652               	rlcf	___ftadd@f2+2,f,c
 17625  0024B6  0657               	decf	___ftadd@exp2,f,c
 17626  0024B8  5058               	movf	___ftadd@exp1,w,c
 17627  0024BA  1857               	xorwf	___ftadd@exp2,w,c
 17628  0024BC  B4D8               	btfsc	status,2,c
 17629  0024BE  D00F               	goto	l8444
 17630  0024C0  0656               	decf	___ftadd@sign,f,c
 17631  0024C2  C056  F053         	movff	___ftadd@sign,??___ftadd
 17632  0024C6  0E07               	movlw	7
 17633  0024C8  1653               	andwf	??___ftadd,f,c
 17634  0024CA  B4D8               	btfsc	status,2,c
 17635  0024CC  D008               	goto	l8444
 17636  0024CE  D7EF               	goto	l8436
 17637  0024D0  D006               	goto	l8444
 17638  0024D2                     l8442:
 17639  0024D2  90D8               	bcf	status,0,c
 17640  0024D4  324F               	rrcf	___ftadd@f1+2,f,c
 17641  0024D6  324E               	rrcf	___ftadd@f1+1,f,c
 17642  0024D8  324D               	rrcf	___ftadd@f1,f,c
 17643  0024DA  2A58               	incf	___ftadd@exp1,f,c
 17644  0024DC  D000               	goto	l8444
 17645  0024DE                     l8444:
 17646  0024DE  5057               	movf	___ftadd@exp2,w,c
 17647  0024E0  1858               	xorwf	___ftadd@exp1,w,c
 17648  0024E2  B4D8               	btfsc	status,2,c
 17649  0024E4  D024               	goto	l1882
 17650  0024E6  D7F5               	goto	l8442
 17651  0024E8  D022               	goto	l1882
 17652  0024EA                     l8446:
 17653  0024EA  5058               	movf	___ftadd@exp1,w,c
 17654  0024EC  5C57               	subwf	___ftadd@exp2,w,c
 17655  0024EE  B0D8               	btfsc	status,0,c
 17656  0024F0  D01E               	goto	l1882
 17657  0024F2                     l8448:
 17658  0024F2  90D8               	bcf	status,0,c
 17659  0024F4  364D               	rlcf	___ftadd@f1,f,c
 17660  0024F6  364E               	rlcf	___ftadd@f1+1,f,c
 17661  0024F8  364F               	rlcf	___ftadd@f1+2,f,c
 17662  0024FA  0658               	decf	___ftadd@exp1,f,c
 17663  0024FC  5058               	movf	___ftadd@exp1,w,c
 17664  0024FE  1857               	xorwf	___ftadd@exp2,w,c
 17665  002500  B4D8               	btfsc	status,2,c
 17666  002502  D00F               	goto	l8456
 17667  002504  0656               	decf	___ftadd@sign,f,c
 17668  002506  C056  F053         	movff	___ftadd@sign,??___ftadd
 17669  00250A  0E07               	movlw	7
 17670  00250C  1653               	andwf	??___ftadd,f,c
 17671  00250E  B4D8               	btfsc	status,2,c
 17672  002510  D008               	goto	l8456
 17673  002512  D7EF               	goto	l8448
 17674  002514  D006               	goto	l8456
 17675  002516                     l8454:
 17676  002516  90D8               	bcf	status,0,c
 17677  002518  3252               	rrcf	___ftadd@f2+2,f,c
 17678  00251A  3251               	rrcf	___ftadd@f2+1,f,c
 17679  00251C  3250               	rrcf	___ftadd@f2,f,c
 17680  00251E  2A57               	incf	___ftadd@exp2,f,c
 17681  002520  D000               	goto	l8456
 17682  002522                     l8456:
 17683  002522  5057               	movf	___ftadd@exp2,w,c
 17684  002524  1858               	xorwf	___ftadd@exp1,w,c
 17685  002526  B4D8               	btfsc	status,2,c
 17686  002528  D002               	goto	l1882
 17687  00252A  D7F5               	goto	l8454
 17688  00252C  D000               	goto	l1882
 17689  00252E                     l1882:
 17690  00252E  AE56               	btfss	___ftadd@sign,7,c
 17691  002530  D00C               	goto	l1891
 17692  002532  0EFF               	movlw	255
 17693  002534  1A4D               	xorwf	___ftadd@f1,f,c
 17694  002536  0EFF               	movlw	255
 17695  002538  1A4E               	xorwf	___ftadd@f1+1,f,c
 17696  00253A  0EFF               	movlw	255
 17697  00253C  1A4F               	xorwf	___ftadd@f1+2,f,c
 17698  00253E  0E01               	movlw	1
 17699  002540  264D               	addwf	___ftadd@f1,f,c
 17700  002542  0E00               	movlw	0
 17701  002544  224E               	addwfc	___ftadd@f1+1,f,c
 17702  002546  0E00               	movlw	0
 17703  002548  224F               	addwfc	___ftadd@f1+2,f,c
 17704  00254A                     l1891:
 17705  00254A  AC56               	btfss	___ftadd@sign,6,c
 17706  00254C  D00D               	goto	l8462
 17707  00254E  0EFF               	movlw	255
 17708  002550  1A50               	xorwf	___ftadd@f2,f,c
 17709  002552  0EFF               	movlw	255
 17710  002554  1A51               	xorwf	___ftadd@f2+1,f,c
 17711  002556  0EFF               	movlw	255
 17712  002558  1A52               	xorwf	___ftadd@f2+2,f,c
 17713  00255A  0E01               	movlw	1
 17714  00255C  2650               	addwf	___ftadd@f2,f,c
 17715  00255E  0E00               	movlw	0
 17716  002560  2251               	addwfc	___ftadd@f2+1,f,c
 17717  002562  0E00               	movlw	0
 17718  002564  2252               	addwfc	___ftadd@f2+2,f,c
 17719  002566  D000               	goto	l8462
 17720  002568                     l8462:
 17721  002568  0E00               	movlw	0
 17722  00256A  6E56               	movwf	___ftadd@sign,c
 17723  00256C  504D               	movf	___ftadd@f1,w,c
 17724  00256E  2650               	addwf	___ftadd@f2,f,c
 17725  002570  504E               	movf	___ftadd@f1+1,w,c
 17726  002572  2251               	addwfc	___ftadd@f2+1,f,c
 17727  002574  504F               	movf	___ftadd@f1+2,w,c
 17728  002576  2252               	addwfc	___ftadd@f2+2,f,c
 17729  002578  AE52               	btfss	___ftadd@f2+2,7,c
 17730  00257A  D00F               	goto	l8472
 17731  00257C  0EFF               	movlw	255
 17732  00257E  1A50               	xorwf	___ftadd@f2,f,c
 17733  002580  0EFF               	movlw	255
 17734  002582  1A51               	xorwf	___ftadd@f2+1,f,c
 17735  002584  0EFF               	movlw	255
 17736  002586  1A52               	xorwf	___ftadd@f2+2,f,c
 17737  002588  0E01               	movlw	1
 17738  00258A  2650               	addwf	___ftadd@f2,f,c
 17739  00258C  0E00               	movlw	0
 17740  00258E  2251               	addwfc	___ftadd@f2+1,f,c
 17741  002590  0E00               	movlw	0
 17742  002592  2252               	addwfc	___ftadd@f2+2,f,c
 17743  002594  0E01               	movlw	1
 17744  002596  6E56               	movwf	___ftadd@sign,c
 17745  002598  D000               	goto	l8472
 17746  00259A                     l8472:
 17747  00259A  C050  F011         	movff	___ftadd@f2,___ftpack@arg
 17748  00259E  C051  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 17749  0025A2  C052  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 17750  0025A6  C058  F014         	movff	___ftadd@exp1,___ftpack@exp
 17751  0025AA  C056  F015         	movff	___ftadd@sign,___ftpack@sign
 17752  0025AE  EC2B  F01C         	call	___ftpack	;wreg free
 17753  0025B2  C011  F04D         	movff	?___ftpack,?___ftadd
 17754  0025B6  C012  F04E         	movff	?___ftpack+1,?___ftadd+1
 17755  0025BA  C013  F04F         	movff	?___ftpack+2,?___ftadd+2
 17756  0025BE  D000               	goto	l1868
 17757  0025C0                     l1868:
 17758  0025C0  0012               	return		;funcret
 17759  0025C2                     __end_of___ftadd:
 17760                           	opt stack 0
 17761                           tblptru	equ	0xFF8
 17762                           tblptrh	equ	0xFF7
 17763                           tblptrl	equ	0xFF6
 17764                           tablat	equ	0xFF5
 17765                           prodh	equ	0xFF4
 17766                           prodl	equ	0xFF3
 17767                           intcon	equ	0xFF2
 17768                           intcon2	equ	0xFF1
 17769                           intcon3	equ	0xFF0
 17770                           postinc0	equ	0xFEE
 17771                           wreg	equ	0xFE8
 17772                           postdec1	equ	0xFE5
 17773                           plusw1	equ	0xFE3
 17774                           fsr1l	equ	0xFE1
 17775                           indf2	equ	0xFDF
 17776                           postinc2	equ	0xFDE
 17777                           postdec2	equ	0xFDD
 17778                           plusw2	equ	0xFDB
 17779                           fsr2h	equ	0xFDA
 17780                           fsr2l	equ	0xFD9
 17781                           status	equ	0xFD8
 17782                           
 17783 ;; *************** function ___ftneg *****************
 17784 ;; Defined at:
 17785 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 17786 ;; Parameters:    Size  Location     Type
 17787 ;;  f1              3   16[COMRAM] float 
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;		None
 17790 ;; Return value:  Size  Location     Type
 17791 ;;                  3   16[COMRAM] float 
 17792 ;; Registers used:
 17793 ;;		wreg, status,2, status,0
 17794 ;; Tracked objects:
 17795 ;;		On entry : 0/0
 17796 ;;		On exit  : 0/0
 17797 ;;		Unchanged: 0/0
 17798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17799 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17802 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17803 ;;Total ram usage:        3 bytes
 17804 ;; Hardware stack levels used:    1
 17805 ;; Hardware stack levels required when called:    3
 17806 ;; This function calls:
 17807 ;;		Nothing
 17808 ;; This function is called by:
 17809 ;;		_printf
 17810 ;; This function uses a non-reentrant model
 17811 ;;
 17812                           
 17813                           	psect	text77
 17814  004A68                     __ptext77:
 17815                           	opt stack 0
 17816  004A68                     ___ftneg:
 17817                           	opt stack 26
 17818                           
 17819                           ;incstack = 0
 17820  004A68  5011               	movf	___ftneg@f1,w,c
 17821  004A6A  1012               	iorwf	___ftneg@f1+1,w,c
 17822  004A6C  1013               	iorwf	___ftneg@f1+2,w,c
 17823  004A6E  B4D8               	btfsc	status,2,c
 17824  004A70  D006               	goto	l1941
 17825  004A72  0E00               	movlw	0
 17826  004A74  1A11               	xorwf	___ftneg@f1,f,c
 17827  004A76  0E00               	movlw	0
 17828  004A78  1A12               	xorwf	___ftneg@f1+1,f,c
 17829  004A7A  0E80               	movlw	128
 17830  004A7C  1A13               	xorwf	___ftneg@f1+2,f,c
 17831  004A7E                     l1941:
 17832  004A7E  C011  F011         	movff	___ftneg@f1,?___ftneg
 17833  004A82  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
 17834  004A86  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
 17835  004A8A  0012               	return		;funcret
 17836  004A8C                     __end_of___ftneg:
 17837                           	opt stack 0
 17838                           tblptru	equ	0xFF8
 17839                           tblptrh	equ	0xFF7
 17840                           tblptrl	equ	0xFF6
 17841                           tablat	equ	0xFF5
 17842                           prodh	equ	0xFF4
 17843                           prodl	equ	0xFF3
 17844                           intcon	equ	0xFF2
 17845                           intcon2	equ	0xFF1
 17846                           intcon3	equ	0xFF0
 17847                           postinc0	equ	0xFEE
 17848                           wreg	equ	0xFE8
 17849                           postdec1	equ	0xFE5
 17850                           plusw1	equ	0xFE3
 17851                           fsr1l	equ	0xFE1
 17852                           indf2	equ	0xFDF
 17853                           postinc2	equ	0xFDE
 17854                           postdec2	equ	0xFDD
 17855                           plusw2	equ	0xFDB
 17856                           fsr2h	equ	0xFDA
 17857                           fsr2l	equ	0xFD9
 17858                           status	equ	0xFD8
 17859                           
 17860 ;; *************** function ___ftge *****************
 17861 ;; Defined at:
 17862 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 17863 ;; Parameters:    Size  Location     Type
 17864 ;;  ff1             3   16[COMRAM] float 
 17865 ;;  ff2             3   19[COMRAM] float 
 17866 ;; Auto vars:     Size  Location     Type
 17867 ;;		None
 17868 ;; Return value:  Size  Location     Type
 17869 ;;		None               void
 17870 ;; Registers used:
 17871 ;;		wreg, status,2, status,0
 17872 ;; Tracked objects:
 17873 ;;		On entry : 0/0
 17874 ;;		On exit  : 0/0
 17875 ;;		Unchanged: 0/0
 17876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17877 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17879 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17880 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17881 ;;Total ram usage:        9 bytes
 17882 ;; Hardware stack levels used:    1
 17883 ;; Hardware stack levels required when called:    3
 17884 ;; This function calls:
 17885 ;;		Nothing
 17886 ;; This function is called by:
 17887 ;;		_main
 17888 ;;		_Setup_Fan_Temp
 17889 ;;		_Do_Setup_Time
 17890 ;;		_printf
 17891 ;; This function uses a non-reentrant model
 17892 ;;
 17893                           
 17894                           	psect	text78
 17895  003D0C                     __ptext78:
 17896                           	opt stack 0
 17897  003D0C                     ___ftge:
 17898                           	opt stack 26
 17899                           
 17900                           ;incstack = 0
 17901  003D0C  AE13               	btfss	___ftge@ff1+2,7,c
 17902  003D0E  D017               	goto	l8952
 17903  003D10  C011  F017         	movff	___ftge@ff1,??___ftge
 17904  003D14  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 17905  003D18  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 17906  003D1C  1E17               	comf	??___ftge,f,c
 17907  003D1E  1E18               	comf	??___ftge+1,f,c
 17908  003D20  1E19               	comf	??___ftge+2,f,c
 17909  003D22  2A17               	incf	??___ftge,f,c
 17910  003D24  0E00               	movlw	0
 17911  003D26  2218               	addwfc	??___ftge+1,f,c
 17912  003D28  2219               	addwfc	??___ftge+2,f,c
 17913  003D2A  0E00               	movlw	0
 17914  003D2C  2417               	addwf	??___ftge,w,c
 17915  003D2E  6E11               	movwf	___ftge@ff1,c
 17916  003D30  0E00               	movlw	0
 17917  003D32  2018               	addwfc	??___ftge+1,w,c
 17918  003D34  6E12               	movwf	___ftge@ff1+1,c
 17919  003D36  0E80               	movlw	128
 17920  003D38  2019               	addwfc	??___ftge+2,w,c
 17921  003D3A  6E13               	movwf	___ftge@ff1+2,c
 17922  003D3C  D000               	goto	l8952
 17923  003D3E                     l8952:
 17924  003D3E  AE16               	btfss	___ftge@ff2+2,7,c
 17925  003D40  D017               	goto	l8956
 17926  003D42  C014  F017         	movff	___ftge@ff2,??___ftge
 17927  003D46  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 17928  003D4A  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 17929  003D4E  1E17               	comf	??___ftge,f,c
 17930  003D50  1E18               	comf	??___ftge+1,f,c
 17931  003D52  1E19               	comf	??___ftge+2,f,c
 17932  003D54  2A17               	incf	??___ftge,f,c
 17933  003D56  0E00               	movlw	0
 17934  003D58  2218               	addwfc	??___ftge+1,f,c
 17935  003D5A  2219               	addwfc	??___ftge+2,f,c
 17936  003D5C  0E00               	movlw	0
 17937  003D5E  2417               	addwf	??___ftge,w,c
 17938  003D60  6E14               	movwf	___ftge@ff2,c
 17939  003D62  0E00               	movlw	0
 17940  003D64  2018               	addwfc	??___ftge+1,w,c
 17941  003D66  6E15               	movwf	___ftge@ff2+1,c
 17942  003D68  0E80               	movlw	128
 17943  003D6A  2019               	addwfc	??___ftge+2,w,c
 17944  003D6C  6E16               	movwf	___ftge@ff2+2,c
 17945  003D6E  D000               	goto	l8956
 17946  003D70                     l8956:
 17947  003D70  0E00               	movlw	0
 17948  003D72  1A11               	xorwf	___ftge@ff1,f,c
 17949  003D74  0E00               	movlw	0
 17950  003D76  1A12               	xorwf	___ftge@ff1+1,f,c
 17951  003D78  0E80               	movlw	128
 17952  003D7A  1A13               	xorwf	___ftge@ff1+2,f,c
 17953  003D7C  0E00               	movlw	0
 17954  003D7E  1A14               	xorwf	___ftge@ff2,f,c
 17955  003D80  0E00               	movlw	0
 17956  003D82  1A15               	xorwf	___ftge@ff2+1,f,c
 17957  003D84  0E80               	movlw	128
 17958  003D86  1A16               	xorwf	___ftge@ff2+2,f,c
 17959  003D88  5014               	movf	___ftge@ff2,w,c
 17960  003D8A  5C11               	subwf	___ftge@ff1,w,c
 17961  003D8C  5015               	movf	___ftge@ff2+1,w,c
 17962  003D8E  5812               	subwfb	___ftge@ff1+1,w,c
 17963  003D90  5016               	movf	___ftge@ff2+2,w,c
 17964  003D92  5813               	subwfb	___ftge@ff1+2,w,c
 17965  003D94  B0D8               	btfsc	status,0,c
 17966  003D96  D002               	goto	l8962
 17967  003D98  90D8               	bcf	status,0,c
 17968  003D9A  D002               	goto	l1925
 17969  003D9C                     l8962:
 17970  003D9C  80D8               	bsf	status,0,c
 17971  003D9E  D000               	goto	l1925
 17972  003DA0                     l1925:
 17973  003DA0  0012               	return		;funcret
 17974  003DA2                     __end_of___ftge:
 17975                           	opt stack 0
 17976                           tblptru	equ	0xFF8
 17977                           tblptrh	equ	0xFF7
 17978                           tblptrl	equ	0xFF6
 17979                           tablat	equ	0xFF5
 17980                           prodh	equ	0xFF4
 17981                           prodl	equ	0xFF3
 17982                           intcon	equ	0xFF2
 17983                           intcon2	equ	0xFF1
 17984                           intcon3	equ	0xFF0
 17985                           postinc0	equ	0xFEE
 17986                           wreg	equ	0xFE8
 17987                           postdec1	equ	0xFE5
 17988                           plusw1	equ	0xFE3
 17989                           fsr1l	equ	0xFE1
 17990                           indf2	equ	0xFDF
 17991                           postinc2	equ	0xFDE
 17992                           postdec2	equ	0xFDD
 17993                           plusw2	equ	0xFDB
 17994                           fsr2h	equ	0xFDA
 17995                           fsr2l	equ	0xFD9
 17996                           status	equ	0xFD8
 17997                           
 17998 ;; *************** function _Init_UART *****************
 17999 ;; Defined at:
 18000 ;;		line 182 in file "utils.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;		None
 18003 ;; Auto vars:     Size  Location     Type
 18004 ;;		None
 18005 ;; Return value:  Size  Location     Type
 18006 ;;		None               void
 18007 ;; Registers used:
 18008 ;;		wreg, status,2, cstack
 18009 ;; Tracked objects:
 18010 ;;		On entry : 0/0
 18011 ;;		On exit  : 0/0
 18012 ;;		Unchanged: 0/0
 18013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18018 ;;Total ram usage:        0 bytes
 18019 ;; Hardware stack levels used:    1
 18020 ;; Hardware stack levels required when called:    4
 18021 ;; This function calls:
 18022 ;;		_OpenUSART
 18023 ;; This function is called by:
 18024 ;;		_Do_Init
 18025 ;; This function uses a non-reentrant model
 18026 ;;
 18027                           
 18028                           	psect	text79
 18029  004CF2                     __ptext79:
 18030                           	opt stack 0
 18031  004CF2                     _Init_UART:
 18032                           	opt stack 25
 18033                           
 18034                           ;utils.c: 184: OpenUSART (0b01111111 & 0b10111111 &
 18035                           ;utils.c: 185: 0b11111110 & 0b11111101 & 0b11111111 &
 18036                           ;utils.c: 186: 0b11111111, 25);
 18037                           
 18038                           ;incstack = 0
 18039  004CF2  0E00               	movlw	0
 18040  004CF4  6E12               	movwf	OpenUSART@spbrg+1,c
 18041  004CF6  0E19               	movlw	25
 18042  004CF8  6E11               	movwf	OpenUSART@spbrg,c
 18043  004CFA  0E3C               	movlw	60
 18044  004CFC  ECEB  F020         	call	_OpenUSART
 18045                           
 18046                           ;utils.c: 187: OSCCON = 0x70;
 18047  004D00  0E70               	movlw	112
 18048  004D02  6ED3               	movwf	4051,c	;volatile
 18049  004D04  0012               	return		;funcret
 18050  004D06                     __end_of_Init_UART:
 18051                           	opt stack 0
 18052                           tblptru	equ	0xFF8
 18053                           tblptrh	equ	0xFF7
 18054                           tblptrl	equ	0xFF6
 18055                           tablat	equ	0xFF5
 18056                           prodh	equ	0xFF4
 18057                           prodl	equ	0xFF3
 18058                           intcon	equ	0xFF2
 18059                           intcon2	equ	0xFF1
 18060                           intcon3	equ	0xFF0
 18061                           postinc0	equ	0xFEE
 18062                           wreg	equ	0xFE8
 18063                           postdec1	equ	0xFE5
 18064                           plusw1	equ	0xFE3
 18065                           fsr1l	equ	0xFE1
 18066                           indf2	equ	0xFDF
 18067                           postinc2	equ	0xFDE
 18068                           postdec2	equ	0xFDD
 18069                           plusw2	equ	0xFDB
 18070                           fsr2h	equ	0xFDA
 18071                           fsr2l	equ	0xFD9
 18072                           status	equ	0xFD8
 18073                           
 18074 ;; *************** function _OpenUSART *****************
 18075 ;; Defined at:
 18076 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 18077 ;; Parameters:    Size  Location     Type
 18078 ;;  config          1    wreg     unsigned char 
 18079 ;;  spbrg           2   16[COMRAM] unsigned int 
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;  config          1   18[COMRAM] unsigned char 
 18082 ;; Return value:  Size  Location     Type
 18083 ;;		None               void
 18084 ;; Registers used:
 18085 ;;		wreg, status,2
 18086 ;; Tracked objects:
 18087 ;;		On entry : 0/0
 18088 ;;		On exit  : 0/0
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18091 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18094 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;Total ram usage:        3 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; Hardware stack levels required when called:    3
 18098 ;; This function calls:
 18099 ;;		Nothing
 18100 ;; This function is called by:
 18101 ;;		_Init_UART
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           	psect	text80
 18106  0041D6                     __ptext80:
 18107                           	opt stack 0
 18108  0041D6                     _OpenUSART:
 18109                           	opt stack 25
 18110                           
 18111                           ;incstack = 0
 18112                           ;OpenUSART@config stored from wreg
 18113  0041D6  6E13               	movwf	OpenUSART@config,c
 18114  0041D8  0E00               	movlw	0
 18115  0041DA  6EAC               	movwf	4012,c	;volatile
 18116  0041DC  0E00               	movlw	0
 18117  0041DE  6EAB               	movwf	4011,c	;volatile
 18118  0041E0  A013               	btfss	OpenUSART@config,0,c
 18119  0041E2  D002               	goto	l6698
 18120  0041E4  88AC               	bsf	4012,4,c	;volatile
 18121  0041E6  D000               	goto	l6698
 18122  0041E8                     l6698:
 18123  0041E8  A213               	btfss	OpenUSART@config,1,c
 18124  0041EA  D003               	goto	l6702
 18125  0041EC  8CAC               	bsf	4012,6,c	;volatile
 18126  0041EE  8CAB               	bsf	4011,6,c	;volatile
 18127  0041F0  D000               	goto	l6702
 18128  0041F2                     l6702:
 18129  0041F2  A413               	btfss	OpenUSART@config,2,c
 18130  0041F4  D002               	goto	l6706
 18131  0041F6  8EAC               	bsf	4012,7,c	;volatile
 18132  0041F8  D000               	goto	l6706
 18133  0041FA                     l6706:
 18134  0041FA  A613               	btfss	OpenUSART@config,3,c
 18135  0041FC  D002               	goto	l1490
 18136  0041FE  88AB               	bsf	4011,4,c	;volatile
 18137  004200  D002               	goto	l6710
 18138  004202                     l1490:
 18139  004202  8AAB               	bsf	4011,5,c	;volatile
 18140  004204  D000               	goto	l6710
 18141  004206                     l6710:
 18142  004206  B813               	btfsc	OpenUSART@config,4,c
 18143  004208  84AC               	bsf	4012,2,c	;volatile
 18144  00420A  989E               	bcf	3998,4,c	;volatile
 18145  00420C  AA13               	btfss	OpenUSART@config,5,c
 18146  00420E  D002               	goto	l6718
 18147  004210  86AB               	bsf	4011,3,c	;volatile
 18148  004212  D000               	goto	l6718
 18149  004214                     l6718:
 18150  004214  AC13               	btfss	OpenUSART@config,6,c
 18151  004216  D002               	goto	l1494
 18152  004218  8A9D               	bsf	3997,5,c	;volatile
 18153  00421A  D001               	goto	l1495
 18154  00421C                     l1494:
 18155  00421C  9A9D               	bcf	3997,5,c	;volatile
 18156  00421E                     l1495:
 18157  00421E  9A9E               	bcf	3998,5,c	;volatile
 18158  004220  AE13               	btfss	OpenUSART@config,7,c
 18159  004222  D002               	goto	l1496
 18160  004224  889D               	bsf	3997,4,c	;volatile
 18161  004226  D001               	goto	l1497
 18162  004228                     l1496:
 18163  004228  989D               	bcf	3997,4,c	;volatile
 18164  00422A                     l1497:
 18165  00422A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 18166  00422E  5012               	movf	OpenUSART@spbrg+1,w,c
 18167  004230  6EB0               	movwf	4016,c	;volatile
 18168  004232  8AAC               	bsf	4012,5,c	;volatile
 18169  004234  8EAB               	bsf	4011,7,c	;volatile
 18170  004236  9C94               	bcf	3988,6,c	;volatile
 18171  004238  8E94               	bsf	3988,7,c	;volatile
 18172  00423A  B8AC               	btfsc	4012,4,c	;volatile
 18173  00423C  BEAC               	btfsc	4012,7,c	;volatile
 18174  00423E  D002               	goto	l1499
 18175  004240  8C94               	bsf	3988,6,c	;volatile
 18176  004242  D000               	goto	l1499
 18177  004244                     l1499:
 18178  004244  0012               	return		;funcret
 18179  004246                     __end_of_OpenUSART:
 18180                           	opt stack 0
 18181                           tblptru	equ	0xFF8
 18182                           tblptrh	equ	0xFF7
 18183                           tblptrl	equ	0xFF6
 18184                           tablat	equ	0xFF5
 18185                           prodh	equ	0xFF4
 18186                           prodl	equ	0xFF3
 18187                           intcon	equ	0xFF2
 18188                           intcon2	equ	0xFF1
 18189                           intcon3	equ	0xFF0
 18190                           postinc0	equ	0xFEE
 18191                           wreg	equ	0xFE8
 18192                           postdec1	equ	0xFE5
 18193                           plusw1	equ	0xFE3
 18194                           fsr1l	equ	0xFE1
 18195                           indf2	equ	0xFDF
 18196                           postinc2	equ	0xFDE
 18197                           postdec2	equ	0xFDD
 18198                           plusw2	equ	0xFDB
 18199                           fsr2h	equ	0xFDA
 18200                           fsr2l	equ	0xFD9
 18201                           status	equ	0xFD8
 18202                           
 18203 ;; *************** function _Init_Interrupt *****************
 18204 ;; Defined at:
 18205 ;;		line 18 in file "Interrupt.c"
 18206 ;; Parameters:    Size  Location     Type
 18207 ;;		None
 18208 ;; Auto vars:     Size  Location     Type
 18209 ;;		None
 18210 ;; Return value:  Size  Location     Type
 18211 ;;		None               void
 18212 ;; Registers used:
 18213 ;;		wreg, status,2
 18214 ;; Tracked objects:
 18215 ;;		On entry : 0/0
 18216 ;;		On exit  : 0/0
 18217 ;;		Unchanged: 0/0
 18218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18223 ;;Total ram usage:        0 bytes
 18224 ;; Hardware stack levels used:    1
 18225 ;; Hardware stack levels required when called:    3
 18226 ;; This function calls:
 18227 ;;		Nothing
 18228 ;; This function is called by:
 18229 ;;		_Do_Init
 18230 ;; This function uses a non-reentrant model
 18231 ;;
 18232                           
 18233                           	psect	text81
 18234  004A8C                     __ptext81:
 18235                           	opt stack 0
 18236  004A8C                     _Init_Interrupt:
 18237                           	opt stack 26
 18238                           
 18239                           ;Interrupt.c: 21: INTCONbits.INT0IF = 0 ;
 18240                           
 18241                           ;incstack = 0
 18242  004A8C  92F2               	bcf	intcon,1,c	;volatile
 18243                           
 18244                           ;Interrupt.c: 22: INTCON3bits.INT1IF = 0;
 18245  004A8E  90F0               	bcf	intcon3,0,c	;volatile
 18246                           
 18247                           ;Interrupt.c: 23: INTCON3bits.INT2IF = 0;
 18248  004A90  92F0               	bcf	intcon3,1,c	;volatile
 18249                           
 18250                           ;Interrupt.c: 25: INTCONbits.INT0IE = 1;
 18251  004A92  88F2               	bsf	intcon,4,c	;volatile
 18252                           
 18253                           ;Interrupt.c: 26: INTCON3bits.INT1IE = 1;
 18254  004A94  86F0               	bsf	intcon3,3,c	;volatile
 18255                           
 18256                           ;Interrupt.c: 27: INTCON3bits.INT2IE = 1;
 18257  004A96  88F0               	bsf	intcon3,4,c	;volatile
 18258                           
 18259                           ;Interrupt.c: 29: INTCON2bits.INTEDG0 = 0;
 18260  004A98  9CF1               	bcf	intcon2,6,c	;volatile
 18261                           
 18262                           ;Interrupt.c: 30: INTCON2bits.INTEDG1 = 0;
 18263  004A9A  9AF1               	bcf	intcon2,5,c	;volatile
 18264                           
 18265                           ;Interrupt.c: 31: INTCON2bits.INTEDG2 = 0;
 18266  004A9C  98F1               	bcf	intcon2,4,c	;volatile
 18267                           
 18268                           ;Interrupt.c: 32: TMR1H = 0;
 18269  004A9E  0E00               	movlw	0
 18270  004AA0  6ECF               	movwf	4047,c	;volatile
 18271                           
 18272                           ;Interrupt.c: 33: TMR1L = 0;
 18273  004AA2  0E00               	movlw	0
 18274  004AA4  6ECE               	movwf	4046,c	;volatile
 18275                           
 18276                           ;Interrupt.c: 34: PIR1bits.TMR1IF = 0;
 18277  004AA6  909E               	bcf	3998,0,c	;volatile
 18278                           
 18279                           ;Interrupt.c: 35: PIE1bits.TMR1IE = 1;
 18280  004AA8  809D               	bsf	3997,0,c	;volatile
 18281                           
 18282                           ;Interrupt.c: 36: INTCONbits.PEIE = 1;
 18283  004AAA  8CF2               	bsf	intcon,6,c	;volatile
 18284                           
 18285                           ;Interrupt.c: 37: INTCONbits.GIE = 1;
 18286  004AAC  8EF2               	bsf	intcon,7,c	;volatile
 18287  004AAE  0012               	return		;funcret
 18288  004AB0                     __end_of_Init_Interrupt:
 18289                           	opt stack 0
 18290                           tblptru	equ	0xFF8
 18291                           tblptrh	equ	0xFF7
 18292                           tblptrl	equ	0xFF6
 18293                           tablat	equ	0xFF5
 18294                           prodh	equ	0xFF4
 18295                           prodl	equ	0xFF3
 18296                           intcon	equ	0xFF2
 18297                           intcon2	equ	0xFF1
 18298                           intcon3	equ	0xFF0
 18299                           postinc0	equ	0xFEE
 18300                           wreg	equ	0xFE8
 18301                           postdec1	equ	0xFE5
 18302                           plusw1	equ	0xFE3
 18303                           fsr1l	equ	0xFE1
 18304                           indf2	equ	0xFDF
 18305                           postinc2	equ	0xFDE
 18306                           postdec2	equ	0xFDD
 18307                           plusw2	equ	0xFDB
 18308                           fsr2h	equ	0xFDA
 18309                           fsr2l	equ	0xFD9
 18310                           status	equ	0xFD8
 18311                           
 18312 ;; *************** function _Init_ADC *****************
 18313 ;; Defined at:
 18314 ;;		line 174 in file "utils.c"
 18315 ;; Parameters:    Size  Location     Type
 18316 ;;		None
 18317 ;; Auto vars:     Size  Location     Type
 18318 ;;		None
 18319 ;; Return value:  Size  Location     Type
 18320 ;;		None               void
 18321 ;; Registers used:
 18322 ;;		wreg, status,2
 18323 ;; Tracked objects:
 18324 ;;		On entry : 0/0
 18325 ;;		On exit  : 0/0
 18326 ;;		Unchanged: 0/0
 18327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18332 ;;Total ram usage:        0 bytes
 18333 ;; Hardware stack levels used:    1
 18334 ;; Hardware stack levels required when called:    3
 18335 ;; This function calls:
 18336 ;;		Nothing
 18337 ;; This function is called by:
 18338 ;;		_Do_Init
 18339 ;; This function uses a non-reentrant model
 18340 ;;
 18341                           
 18342                           	psect	text82
 18343  004DC2                     __ptext82:
 18344                           	opt stack 0
 18345  004DC2                     _Init_ADC:
 18346                           	opt stack 26
 18347                           
 18348                           ;utils.c: 176: ADCON0 = 0x01;
 18349                           
 18350                           ;incstack = 0
 18351  004DC2  0E01               	movlw	1
 18352  004DC4  6EC2               	movwf	4034,c	;volatile
 18353                           
 18354                           ;utils.c: 177: ADCON1 = 0x0E;
 18355  004DC6  0E0E               	movlw	14
 18356  004DC8  6EC1               	movwf	4033,c	;volatile
 18357                           
 18358                           ;utils.c: 178: ADCON2 = 0xA9;
 18359  004DCA  0EA9               	movlw	169
 18360  004DCC  6EC0               	movwf	4032,c	;volatile
 18361  004DCE  0012               	return		;funcret
 18362  004DD0                     __end_of_Init_ADC:
 18363                           	opt stack 0
 18364                           tblptru	equ	0xFF8
 18365                           tblptrh	equ	0xFF7
 18366                           tblptrl	equ	0xFF6
 18367                           tablat	equ	0xFF5
 18368                           prodh	equ	0xFF4
 18369                           prodl	equ	0xFF3
 18370                           intcon	equ	0xFF2
 18371                           intcon2	equ	0xFF1
 18372                           intcon3	equ	0xFF0
 18373                           postinc0	equ	0xFEE
 18374                           wreg	equ	0xFE8
 18375                           postdec1	equ	0xFE5
 18376                           plusw1	equ	0xFE3
 18377                           fsr1l	equ	0xFE1
 18378                           indf2	equ	0xFDF
 18379                           postinc2	equ	0xFDE
 18380                           postdec2	equ	0xFDD
 18381                           plusw2	equ	0xFDB
 18382                           fsr2h	equ	0xFDA
 18383                           fsr2l	equ	0xFD9
 18384                           status	equ	0xFD8
 18385                           
 18386 ;; *************** function _I2C_Init *****************
 18387 ;; Defined at:
 18388 ;;		line 10 in file "I2C_Soft.c"
 18389 ;; Parameters:    Size  Location     Type
 18390 ;;  c               4   16[COMRAM] unsigned long 
 18391 ;; Auto vars:     Size  Location     Type
 18392 ;;		None
 18393 ;; Return value:  Size  Location     Type
 18394 ;;		None               void
 18395 ;; Registers used:
 18396 ;;		wreg, cstack
 18397 ;; Tracked objects:
 18398 ;;		On entry : 0/0
 18399 ;;		On exit  : 0/0
 18400 ;;		Unchanged: 0/0
 18401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18405 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18406 ;;Total ram usage:        4 bytes
 18407 ;; Hardware stack levels used:    1
 18408 ;; Hardware stack levels required when called:    4
 18409 ;; This function calls:
 18410 ;;		_i2cHighScl
 18411 ;;		_i2cHighSda
 18412 ;; This function is called by:
 18413 ;;		_Do_Init
 18414 ;; This function uses a non-reentrant model
 18415 ;;
 18416                           
 18417                           	psect	text83
 18418  004DF2                     __ptext83:
 18419                           	opt stack 0
 18420  004DF2                     _I2C_Init:
 18421                           	opt stack 25
 18422                           
 18423                           ;I2C_Soft.c: 12: i2cHighScl();
 18424                           
 18425                           ;incstack = 0
 18426  004DF2  ECE8  F026         	call	_i2cHighScl	;wreg free
 18427                           
 18428                           ;I2C_Soft.c: 13: i2cHighSda();
 18429  004DF6  EC0C  F027         	call	_i2cHighSda	;wreg free
 18430  004DFA  0012               	return		;funcret
 18431  004DFC                     __end_of_I2C_Init:
 18432                           	opt stack 0
 18433                           tblptru	equ	0xFF8
 18434                           tblptrh	equ	0xFF7
 18435                           tblptrl	equ	0xFF6
 18436                           tablat	equ	0xFF5
 18437                           prodh	equ	0xFF4
 18438                           prodl	equ	0xFF3
 18439                           intcon	equ	0xFF2
 18440                           intcon2	equ	0xFF1
 18441                           intcon3	equ	0xFF0
 18442                           postinc0	equ	0xFEE
 18443                           wreg	equ	0xFE8
 18444                           postdec1	equ	0xFE5
 18445                           plusw1	equ	0xFE3
 18446                           fsr1l	equ	0xFE1
 18447                           indf2	equ	0xFDF
 18448                           postinc2	equ	0xFDE
 18449                           postdec2	equ	0xFDD
 18450                           plusw2	equ	0xFDB
 18451                           fsr2h	equ	0xFDA
 18452                           fsr2l	equ	0xFD9
 18453                           status	equ	0xFD8
 18454                           
 18455 ;; *************** function _DS1621_Init *****************
 18456 ;; Defined at:
 18457 ;;		line 19 in file "I2C_Support.c"
 18458 ;; Parameters:    Size  Location     Type
 18459 ;;		None
 18460 ;; Auto vars:     Size  Location     Type
 18461 ;;  Device          1   21[COMRAM] unsigned char 
 18462 ;; Return value:  Size  Location     Type
 18463 ;;		None               void
 18464 ;; Registers used:
 18465 ;;		wreg, status,2, status,0, cstack
 18466 ;; Tracked objects:
 18467 ;;		On entry : 0/0
 18468 ;;		On exit  : 0/0
 18469 ;;		Unchanged: 0/0
 18470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18475 ;;Total ram usage:        1 bytes
 18476 ;; Hardware stack levels used:    1
 18477 ;; Hardware stack levels required when called:    6
 18478 ;; This function calls:
 18479 ;;		_I2C_Write_Cmd_Only
 18480 ;;		_I2C_Write_Cmd_Write_Data
 18481 ;; This function is called by:
 18482 ;;		_Do_Init
 18483 ;; This function uses a non-reentrant model
 18484 ;;
 18485                           
 18486                           	psect	text84
 18487  004B76                     __ptext84:
 18488                           	opt stack 0
 18489  004B76                     _DS1621_Init:
 18490                           	opt stack 23
 18491                           
 18492                           ;I2C_Support.c: 22: char Device = 0x48;
 18493                           
 18494                           ;incstack = 0
 18495  004B76  0E48               	movlw	72
 18496  004B78  6E16               	movwf	DS1621_Init@Device,c
 18497                           
 18498                           ;I2C_Support.c: 23: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
 18499  004B7A  0EAC               	movlw	172
 18500  004B7C  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 18501  004B7E  0E02               	movlw	2
 18502  004B80  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 18503  004B82  5016               	movf	DS1621_Init@Device,w,c
 18504  004B84  ECAB  F025         	call	_I2C_Write_Cmd_Write_Data
 18505                           
 18506                           ;I2C_Support.c: 24: I2C_Write_Cmd_Only(Device, 0xEE);
 18507  004B88  0EEE               	movlw	238
 18508  004B8A  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 18509  004B8C  5016               	movf	DS1621_Init@Device,w,c
 18510  004B8E  EC38  F026         	call	_I2C_Write_Cmd_Only
 18511  004B92  0012               	return		;funcret
 18512  004B94                     __end_of_DS1621_Init:
 18513                           	opt stack 0
 18514                           tblptru	equ	0xFF8
 18515                           tblptrh	equ	0xFF7
 18516                           tblptrl	equ	0xFF6
 18517                           tablat	equ	0xFF5
 18518                           prodh	equ	0xFF4
 18519                           prodl	equ	0xFF3
 18520                           intcon	equ	0xFF2
 18521                           intcon2	equ	0xFF1
 18522                           intcon3	equ	0xFF0
 18523                           postinc0	equ	0xFEE
 18524                           wreg	equ	0xFE8
 18525                           postdec1	equ	0xFE5
 18526                           plusw1	equ	0xFE3
 18527                           fsr1l	equ	0xFE1
 18528                           indf2	equ	0xFDF
 18529                           postinc2	equ	0xFDE
 18530                           postdec2	equ	0xFDD
 18531                           plusw2	equ	0xFDB
 18532                           fsr2h	equ	0xFDA
 18533                           fsr2l	equ	0xFD9
 18534                           status	equ	0xFD8
 18535                           
 18536 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 18537 ;; Defined at:
 18538 ;;		line 148 in file "I2C_Soft.c"
 18539 ;; Parameters:    Size  Location     Type
 18540 ;;  Device          1    wreg     unsigned char 
 18541 ;;  Cmd             1   18[COMRAM] unsigned char 
 18542 ;;  Data_Out        1   19[COMRAM] unsigned char 
 18543 ;; Auto vars:     Size  Location     Type
 18544 ;;  Device          1   20[COMRAM] unsigned char 
 18545 ;; Return value:  Size  Location     Type
 18546 ;;		None               void
 18547 ;; Registers used:
 18548 ;;		wreg, status,2, status,0, cstack
 18549 ;; Tracked objects:
 18550 ;;		On entry : 0/0
 18551 ;;		On exit  : 0/0
 18552 ;;		Unchanged: 0/0
 18553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18557 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;Total ram usage:        3 bytes
 18559 ;; Hardware stack levels used:    1
 18560 ;; Hardware stack levels required when called:    5
 18561 ;; This function calls:
 18562 ;;		_I2C_Start
 18563 ;;		_I2C_Stop
 18564 ;;		_I2C_Write
 18565 ;; This function is called by:
 18566 ;;		_DS1621_Init
 18567 ;; This function uses a non-reentrant model
 18568 ;;
 18569                           
 18570                           	psect	text85
 18571  004B56                     __ptext85:
 18572                           	opt stack 0
 18573  004B56                     _I2C_Write_Cmd_Write_Data:
 18574                           	opt stack 23
 18575                           
 18576                           ;incstack = 0
 18577                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 18578  004B56  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 18579                           
 18580                           ;I2C_Soft.c: 150: I2C_Start();
 18581  004B58  EC9E  F026         	call	_I2C_Start	;wreg free
 18582                           
 18583                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 18584  004B5C  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 18585  004B5E  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 18586  004B60  ECD6  F023         	call	_I2C_Write
 18587                           
 18588                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 18589  004B64  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 18590  004B66  ECD6  F023         	call	_I2C_Write
 18591                           
 18592                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 18593  004B6A  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 18594  004B6C  ECD6  F023         	call	_I2C_Write
 18595                           
 18596                           ;I2C_Soft.c: 154: I2C_Stop();
 18597  004B70  EC95  F026         	call	_I2C_Stop	;wreg free
 18598  004B74  0012               	return		;funcret
 18599  004B76                     __end_of_I2C_Write_Cmd_Write_Data:
 18600                           	opt stack 0
 18601                           tblptru	equ	0xFF8
 18602                           tblptrh	equ	0xFF7
 18603                           tblptrl	equ	0xFF6
 18604                           tablat	equ	0xFF5
 18605                           prodh	equ	0xFF4
 18606                           prodl	equ	0xFF3
 18607                           intcon	equ	0xFF2
 18608                           intcon2	equ	0xFF1
 18609                           intcon3	equ	0xFF0
 18610                           postinc0	equ	0xFEE
 18611                           wreg	equ	0xFE8
 18612                           postdec1	equ	0xFE5
 18613                           plusw1	equ	0xFE3
 18614                           fsr1l	equ	0xFE1
 18615                           indf2	equ	0xFDF
 18616                           postinc2	equ	0xFDE
 18617                           postdec2	equ	0xFDD
 18618                           plusw2	equ	0xFDB
 18619                           fsr2h	equ	0xFDA
 18620                           fsr2l	equ	0xFD9
 18621                           status	equ	0xFD8
 18622                           
 18623 ;; *************** function _I2C_Write_Cmd_Only *****************
 18624 ;; Defined at:
 18625 ;;		line 140 in file "I2C_Soft.c"
 18626 ;; Parameters:    Size  Location     Type
 18627 ;;  Device          1    wreg     unsigned char 
 18628 ;;  Cmd             1   18[COMRAM] unsigned char 
 18629 ;; Auto vars:     Size  Location     Type
 18630 ;;  Device          1   19[COMRAM] unsigned char 
 18631 ;; Return value:  Size  Location     Type
 18632 ;;		None               void
 18633 ;; Registers used:
 18634 ;;		wreg, status,2, status,0, cstack
 18635 ;; Tracked objects:
 18636 ;;		On entry : 0/0
 18637 ;;		On exit  : 0/0
 18638 ;;		Unchanged: 0/0
 18639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18640 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;Total ram usage:        2 bytes
 18645 ;; Hardware stack levels used:    1
 18646 ;; Hardware stack levels required when called:    5
 18647 ;; This function calls:
 18648 ;;		_I2C_Start
 18649 ;;		_I2C_Stop
 18650 ;;		_I2C_Write
 18651 ;; This function is called by:
 18652 ;;		_DS1621_Init
 18653 ;; This function uses a non-reentrant model
 18654 ;;
 18655                           
 18656                           	psect	text86
 18657  004C70                     __ptext86:
 18658                           	opt stack 0
 18659  004C70                     _I2C_Write_Cmd_Only:
 18660                           	opt stack 23
 18661                           
 18662                           ;incstack = 0
 18663                           ;I2C_Write_Cmd_Only@Device stored from wreg
 18664  004C70  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 18665                           
 18666                           ;I2C_Soft.c: 142: I2C_Start();
 18667  004C72  EC9E  F026         	call	_I2C_Start	;wreg free
 18668                           
 18669                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 18670  004C76  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 18671  004C78  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 18672  004C7A  ECD6  F023         	call	_I2C_Write
 18673                           
 18674                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 18675  004C7E  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 18676  004C80  ECD6  F023         	call	_I2C_Write
 18677                           
 18678                           ;I2C_Soft.c: 145: I2C_Stop();
 18679  004C84  EC95  F026         	call	_I2C_Stop	;wreg free
 18680  004C88  0012               	return		;funcret
 18681  004C8A                     __end_of_I2C_Write_Cmd_Only:
 18682                           	opt stack 0
 18683                           tblptru	equ	0xFF8
 18684                           tblptrh	equ	0xFF7
 18685                           tblptrl	equ	0xFF6
 18686                           tablat	equ	0xFF5
 18687                           prodh	equ	0xFF4
 18688                           prodl	equ	0xFF3
 18689                           intcon	equ	0xFF2
 18690                           intcon2	equ	0xFF1
 18691                           intcon3	equ	0xFF0
 18692                           postinc0	equ	0xFEE
 18693                           wreg	equ	0xFE8
 18694                           postdec1	equ	0xFE5
 18695                           plusw1	equ	0xFE3
 18696                           fsr1l	equ	0xFE1
 18697                           indf2	equ	0xFDF
 18698                           postinc2	equ	0xFDE
 18699                           postdec2	equ	0xFDD
 18700                           plusw2	equ	0xFDB
 18701                           fsr2h	equ	0xFDA
 18702                           fsr2l	equ	0xFD9
 18703                           status	equ	0xFD8
 18704                           
 18705 ;; *************** function _I2C_Write *****************
 18706 ;; Defined at:
 18707 ;;		line 37 in file "I2C_Soft.c"
 18708 ;; Parameters:    Size  Location     Type
 18709 ;;  outByte         1    wreg     unsigned char 
 18710 ;; Auto vars:     Size  Location     Type
 18711 ;;  outByte         1   16[COMRAM] unsigned char 
 18712 ;;  n               1   17[COMRAM] unsigned char 
 18713 ;; Return value:  Size  Location     Type
 18714 ;;		None               void
 18715 ;; Registers used:
 18716 ;;		wreg, status,2, status,0, cstack
 18717 ;; Tracked objects:
 18718 ;;		On entry : 0/0
 18719 ;;		On exit  : 0/0
 18720 ;;		Unchanged: 0/0
 18721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;Total ram usage:        2 bytes
 18727 ;; Hardware stack levels used:    1
 18728 ;; Hardware stack levels required when called:    4
 18729 ;; This function calls:
 18730 ;;		_i2cHighScl
 18731 ;;		_i2cHighSda
 18732 ;;		_i2cLowScl
 18733 ;;		_i2cLowSda
 18734 ;; This function is called by:
 18735 ;;		_I2C_Write_Cmd_Only
 18736 ;;		_I2C_Write_Cmd_Write_Data
 18737 ;;		_DS1621_Read_Temp
 18738 ;;		_DS3231_Read_Time
 18739 ;;		_DS3231_Write_Time
 18740 ;;		_I2C_Write_Address_Read_One_Byte
 18741 ;;		_I2C_Write_Address_Write_One_Byte
 18742 ;;		_I2C_Write_Cmd_Read_One_Byte
 18743 ;;		_DS3231_Init
 18744 ;; This function uses a non-reentrant model
 18745 ;;
 18746                           
 18747                           	psect	text87
 18748  0047AC                     __ptext87:
 18749                           	opt stack 0
 18750  0047AC                     _I2C_Write:
 18751                           	opt stack 23
 18752                           
 18753                           ;incstack = 0
 18754                           ;I2C_Write@outByte stored from wreg
 18755  0047AC  6E11               	movwf	I2C_Write@outByte,c
 18756                           
 18757                           ;I2C_Soft.c: 39: unsigned char n;
 18758                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 18759  0047AE  0E00               	movlw	0
 18760  0047B0  6E12               	movwf	I2C_Write@n,c
 18761  0047B2                     l6440:
 18762  0047B2  0E07               	movlw	7
 18763  0047B4  6412               	cpfsgt	I2C_Write@n,c
 18764  0047B6  D001               	goto	l115
 18765  0047B8  D011               	goto	l6458
 18766  0047BA                     l115:
 18767                           
 18768                           ;I2C_Soft.c: 41: {
 18769                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 18770  0047BA  AE11               	btfss	I2C_Write@outByte,7,c
 18771  0047BC  D003               	goto	l6446
 18772  0047BE  EC0C  F027         	call	_i2cHighSda	;wreg free
 18773  0047C2  D003               	goto	l6448
 18774  0047C4                     l6446:
 18775                           
 18776                           ;I2C_Soft.c: 43: else i2cLowSda();
 18777  0047C4  ECFE  F026         	call	_i2cLowSda	;wreg free
 18778  0047C8  D000               	goto	l6448
 18779  0047CA                     l6448:
 18780                           
 18781                           ;I2C_Soft.c: 44: i2cHighScl();
 18782  0047CA  ECE8  F026         	call	_i2cHighScl	;wreg free
 18783                           
 18784                           ;I2C_Soft.c: 45: i2cLowScl();
 18785  0047CE  EC08  F027         	call	_i2cLowScl	;wreg free
 18786                           
 18787                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 18788  0047D2  5011               	movf	I2C_Write@outByte,w,c
 18789  0047D4  2411               	addwf	I2C_Write@outByte,w,c
 18790  0047D6  6E11               	movwf	I2C_Write@outByte,c
 18791  0047D8  2A12               	incf	I2C_Write@n,f,c
 18792  0047DA  D7EB               	goto	l6440
 18793  0047DC                     l6458:
 18794                           
 18795                           ;I2C_Soft.c: 47: }
 18796                           ;I2C_Soft.c: 48: i2cHighSda();
 18797  0047DC  EC0C  F027         	call	_i2cHighSda	;wreg free
 18798                           
 18799                           ;I2C_Soft.c: 49: i2cHighScl();
 18800  0047E0  ECE8  F026         	call	_i2cHighScl	;wreg free
 18801                           
 18802                           ;I2C_Soft.c: 50: i2cLowScl();
 18803  0047E4  EC08  F027         	call	_i2cLowScl	;wreg free
 18804  0047E8  0012               	return		;funcret
 18805  0047EA                     __end_of_I2C_Write:
 18806                           	opt stack 0
 18807                           tblptru	equ	0xFF8
 18808                           tblptrh	equ	0xFF7
 18809                           tblptrl	equ	0xFF6
 18810                           tablat	equ	0xFF5
 18811                           prodh	equ	0xFF4
 18812                           prodl	equ	0xFF3
 18813                           intcon	equ	0xFF2
 18814                           intcon2	equ	0xFF1
 18815                           intcon3	equ	0xFF0
 18816                           postinc0	equ	0xFEE
 18817                           wreg	equ	0xFE8
 18818                           postdec1	equ	0xFE5
 18819                           plusw1	equ	0xFE3
 18820                           fsr1l	equ	0xFE1
 18821                           indf2	equ	0xFDF
 18822                           postinc2	equ	0xFDE
 18823                           postdec2	equ	0xFDD
 18824                           plusw2	equ	0xFDB
 18825                           fsr2h	equ	0xFDA
 18826                           fsr2l	equ	0xFD9
 18827                           status	equ	0xFD8
 18828                           
 18829 ;; *************** function _I2C_Stop *****************
 18830 ;; Defined at:
 18831 ;;		line 84 in file "I2C_Soft.c"
 18832 ;; Parameters:    Size  Location     Type
 18833 ;;		None
 18834 ;; Auto vars:     Size  Location     Type
 18835 ;;		None
 18836 ;; Return value:  Size  Location     Type
 18837 ;;		None               void
 18838 ;; Registers used:
 18839 ;;		wreg, cstack
 18840 ;; Tracked objects:
 18841 ;;		On entry : 0/0
 18842 ;;		On exit  : 0/0
 18843 ;;		Unchanged: 0/0
 18844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18849 ;;Total ram usage:        0 bytes
 18850 ;; Hardware stack levels used:    1
 18851 ;; Hardware stack levels required when called:    4
 18852 ;; This function calls:
 18853 ;;		_i2cHighScl
 18854 ;;		_i2cHighSda
 18855 ;;		_i2cLowScl
 18856 ;;		_i2cLowSda
 18857 ;; This function is called by:
 18858 ;;		_I2C_Write_Cmd_Only
 18859 ;;		_I2C_Write_Cmd_Write_Data
 18860 ;;		_DS1621_Read_Temp
 18861 ;;		_DS3231_Read_Time
 18862 ;;		_DS3231_Write_Time
 18863 ;;		_I2C_Write_Address_Read_One_Byte
 18864 ;;		_I2C_Write_Address_Write_One_Byte
 18865 ;;		_I2C_Write_Cmd_Read_One_Byte
 18866 ;;		_DS3231_Init
 18867 ;; This function uses a non-reentrant model
 18868 ;;
 18869                           
 18870                           	psect	text88
 18871  004D2A                     __ptext88:
 18872                           	opt stack 0
 18873  004D2A                     _I2C_Stop:
 18874                           	opt stack 23
 18875                           
 18876                           ;I2C_Soft.c: 86: i2cLowScl();
 18877                           
 18878                           ;incstack = 0
 18879  004D2A  EC08  F027         	call	_i2cLowScl	;wreg free
 18880                           
 18881                           ;I2C_Soft.c: 87: i2cLowSda();
 18882  004D2E  ECFE  F026         	call	_i2cLowSda	;wreg free
 18883                           
 18884                           ;I2C_Soft.c: 88: i2cHighScl();
 18885  004D32  ECE8  F026         	call	_i2cHighScl	;wreg free
 18886                           
 18887                           ;I2C_Soft.c: 89: i2cHighSda();
 18888  004D36  EC0C  F027         	call	_i2cHighSda	;wreg free
 18889  004D3A  0012               	return		;funcret
 18890  004D3C                     __end_of_I2C_Stop:
 18891                           	opt stack 0
 18892                           tblptru	equ	0xFF8
 18893                           tblptrh	equ	0xFF7
 18894                           tblptrl	equ	0xFF6
 18895                           tablat	equ	0xFF5
 18896                           prodh	equ	0xFF4
 18897                           prodl	equ	0xFF3
 18898                           intcon	equ	0xFF2
 18899                           intcon2	equ	0xFF1
 18900                           intcon3	equ	0xFF0
 18901                           postinc0	equ	0xFEE
 18902                           wreg	equ	0xFE8
 18903                           postdec1	equ	0xFE5
 18904                           plusw1	equ	0xFE3
 18905                           fsr1l	equ	0xFE1
 18906                           indf2	equ	0xFDF
 18907                           postinc2	equ	0xFDE
 18908                           postdec2	equ	0xFDD
 18909                           plusw2	equ	0xFDB
 18910                           fsr2h	equ	0xFDA
 18911                           fsr2l	equ	0xFD9
 18912                           status	equ	0xFD8
 18913                           
 18914 ;; *************** function _I2C_Start *****************
 18915 ;; Defined at:
 18916 ;;		line 67 in file "I2C_Soft.c"
 18917 ;; Parameters:    Size  Location     Type
 18918 ;;		None
 18919 ;; Auto vars:     Size  Location     Type
 18920 ;;		None
 18921 ;; Return value:  Size  Location     Type
 18922 ;;		None               void
 18923 ;; Registers used:
 18924 ;;		wreg, cstack
 18925 ;; Tracked objects:
 18926 ;;		On entry : 0/0
 18927 ;;		On exit  : 0/0
 18928 ;;		Unchanged: 0/0
 18929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18934 ;;Total ram usage:        0 bytes
 18935 ;; Hardware stack levels used:    1
 18936 ;; Hardware stack levels required when called:    4
 18937 ;; This function calls:
 18938 ;;		_i2cHighScl
 18939 ;;		_i2cHighSda
 18940 ;;		_i2cLowScl
 18941 ;;		_i2cLowSda
 18942 ;; This function is called by:
 18943 ;;		_I2C_Write_Cmd_Only
 18944 ;;		_I2C_Write_Cmd_Write_Data
 18945 ;;		_DS1621_Read_Temp
 18946 ;;		_DS3231_Read_Time
 18947 ;;		_DS3231_Write_Time
 18948 ;;		_I2C_Write_Address_Read_One_Byte
 18949 ;;		_I2C_Write_Address_Write_One_Byte
 18950 ;;		_I2C_Write_Cmd_Read_One_Byte
 18951 ;;		_DS3231_Init
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           	psect	text89
 18956  004D3C                     __ptext89:
 18957                           	opt stack 0
 18958  004D3C                     _I2C_Start:
 18959                           	opt stack 23
 18960                           
 18961                           ;I2C_Soft.c: 69: i2cHighSda();
 18962                           
 18963                           ;incstack = 0
 18964  004D3C  EC0C  F027         	call	_i2cHighSda	;wreg free
 18965                           
 18966                           ;I2C_Soft.c: 70: i2cHighScl();
 18967  004D40  ECE8  F026         	call	_i2cHighScl	;wreg free
 18968                           
 18969                           ;I2C_Soft.c: 71: i2cLowSda();
 18970  004D44  ECFE  F026         	call	_i2cLowSda	;wreg free
 18971                           
 18972                           ;I2C_Soft.c: 72: i2cLowScl();
 18973  004D48  EC08  F027         	call	_i2cLowScl	;wreg free
 18974  004D4C  0012               	return		;funcret
 18975  004D4E                     __end_of_I2C_Start:
 18976                           	opt stack 0
 18977                           tblptru	equ	0xFF8
 18978                           tblptrh	equ	0xFF7
 18979                           tblptrl	equ	0xFF6
 18980                           tablat	equ	0xFF5
 18981                           prodh	equ	0xFF4
 18982                           prodl	equ	0xFF3
 18983                           intcon	equ	0xFF2
 18984                           intcon2	equ	0xFF1
 18985                           intcon3	equ	0xFF0
 18986                           postinc0	equ	0xFEE
 18987                           wreg	equ	0xFE8
 18988                           postdec1	equ	0xFE5
 18989                           plusw1	equ	0xFE3
 18990                           fsr1l	equ	0xFE1
 18991                           indf2	equ	0xFDF
 18992                           postinc2	equ	0xFDE
 18993                           postdec2	equ	0xFDD
 18994                           plusw2	equ	0xFDB
 18995                           fsr2h	equ	0xFDA
 18996                           fsr2l	equ	0xFD9
 18997                           status	equ	0xFD8
 18998                           
 18999 ;; *************** function _i2cLowSda *****************
 19000 ;; Defined at:
 19001 ;;		line 98 in file "I2C_Soft.c"
 19002 ;; Parameters:    Size  Location     Type
 19003 ;;		None
 19004 ;; Auto vars:     Size  Location     Type
 19005 ;;		None
 19006 ;; Return value:  Size  Location     Type
 19007 ;;		None               void
 19008 ;; Registers used:
 19009 ;;		None
 19010 ;; Tracked objects:
 19011 ;;		On entry : 0/0
 19012 ;;		On exit  : 0/0
 19013 ;;		Unchanged: 0/0
 19014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19019 ;;Total ram usage:        0 bytes
 19020 ;; Hardware stack levels used:    1
 19021 ;; Hardware stack levels required when called:    3
 19022 ;; This function calls:
 19023 ;;		Nothing
 19024 ;; This function is called by:
 19025 ;;		_I2C_Write
 19026 ;;		_i2cAck
 19027 ;;		_I2C_Start
 19028 ;;		_I2C_ReStart
 19029 ;;		_I2C_Stop
 19030 ;; This function uses a non-reentrant model
 19031 ;;
 19032                           
 19033                           	psect	text90
 19034  004DFC                     __ptext90:
 19035                           	opt stack 0
 19036  004DFC                     _i2cLowSda:
 19037                           	opt stack 23
 19038                           
 19039                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
 19040                           
 19041                           ;incstack = 0
 19042  004DFC  9A81               	bcf	3969,5,c	;volatile
 19043                           
 19044                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
 19045  004DFE  9A93               	bcf	3987,5,c	;volatile
 19046                           
 19047                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19048  004E00  D000               	nop2		;2 cycle nop
 19049  004E02  D000               	nop2		;2 cycle nop
 19050  004E04  0012               	return		;funcret
 19051  004E06                     __end_of_i2cLowSda:
 19052                           	opt stack 0
 19053                           tblptru	equ	0xFF8
 19054                           tblptrh	equ	0xFF7
 19055                           tblptrl	equ	0xFF6
 19056                           tablat	equ	0xFF5
 19057                           prodh	equ	0xFF4
 19058                           prodl	equ	0xFF3
 19059                           intcon	equ	0xFF2
 19060                           intcon2	equ	0xFF1
 19061                           intcon3	equ	0xFF0
 19062                           postinc0	equ	0xFEE
 19063                           wreg	equ	0xFE8
 19064                           postdec1	equ	0xFE5
 19065                           plusw1	equ	0xFE3
 19066                           fsr1l	equ	0xFE1
 19067                           indf2	equ	0xFDF
 19068                           postinc2	equ	0xFDE
 19069                           postdec2	equ	0xFDD
 19070                           plusw2	equ	0xFDB
 19071                           fsr2h	equ	0xFDA
 19072                           fsr2l	equ	0xFD9
 19073                           status	equ	0xFD8
 19074                           
 19075 ;; *************** function _i2cLowScl *****************
 19076 ;; Defined at:
 19077 ;;		line 111 in file "I2C_Soft.c"
 19078 ;; Parameters:    Size  Location     Type
 19079 ;;		None
 19080 ;; Auto vars:     Size  Location     Type
 19081 ;;		None
 19082 ;; Return value:  Size  Location     Type
 19083 ;;		None               void
 19084 ;; Registers used:
 19085 ;;		None
 19086 ;; Tracked objects:
 19087 ;;		On entry : 0/0
 19088 ;;		On exit  : 0/0
 19089 ;;		Unchanged: 0/0
 19090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19095 ;;Total ram usage:        0 bytes
 19096 ;; Hardware stack levels used:    1
 19097 ;; Hardware stack levels required when called:    3
 19098 ;; This function calls:
 19099 ;;		Nothing
 19100 ;; This function is called by:
 19101 ;;		_I2C_Read
 19102 ;;		_I2C_Write
 19103 ;;		_i2cNack
 19104 ;;		_i2cAck
 19105 ;;		_I2C_Start
 19106 ;;		_I2C_ReStart
 19107 ;;		_I2C_Stop
 19108 ;; This function uses a non-reentrant model
 19109 ;;
 19110                           
 19111                           	psect	text91
 19112  004E10                     __ptext91:
 19113                           	opt stack 0
 19114  004E10                     _i2cLowScl:
 19115                           	opt stack 23
 19116                           
 19117                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 19118                           
 19119                           ;incstack = 0
 19120  004E10  9881               	bcf	3969,4,c	;volatile
 19121                           
 19122                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 19123  004E12  9893               	bcf	3987,4,c	;volatile
 19124                           
 19125                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 19126  004E14  D000               	nop2		;2 cycle nop
 19127  004E16  0012               	return		;funcret
 19128  004E18                     __end_of_i2cLowScl:
 19129                           	opt stack 0
 19130                           tblptru	equ	0xFF8
 19131                           tblptrh	equ	0xFF7
 19132                           tblptrl	equ	0xFF6
 19133                           tablat	equ	0xFF5
 19134                           prodh	equ	0xFF4
 19135                           prodl	equ	0xFF3
 19136                           intcon	equ	0xFF2
 19137                           intcon2	equ	0xFF1
 19138                           intcon3	equ	0xFF0
 19139                           postinc0	equ	0xFEE
 19140                           wreg	equ	0xFE8
 19141                           postdec1	equ	0xFE5
 19142                           plusw1	equ	0xFE3
 19143                           fsr1l	equ	0xFE1
 19144                           indf2	equ	0xFDF
 19145                           postinc2	equ	0xFDE
 19146                           postdec2	equ	0xFDD
 19147                           plusw2	equ	0xFDB
 19148                           fsr2h	equ	0xFDA
 19149                           fsr2l	equ	0xFD9
 19150                           status	equ	0xFD8
 19151                           
 19152 ;; *************** function _i2cHighSda *****************
 19153 ;; Defined at:
 19154 ;;		line 92 in file "I2C_Soft.c"
 19155 ;; Parameters:    Size  Location     Type
 19156 ;;		None
 19157 ;; Auto vars:     Size  Location     Type
 19158 ;;		None
 19159 ;; Return value:  Size  Location     Type
 19160 ;;		None               void
 19161 ;; Registers used:
 19162 ;;		None
 19163 ;; Tracked objects:
 19164 ;;		On entry : 0/0
 19165 ;;		On exit  : 0/0
 19166 ;;		Unchanged: 0/0
 19167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19172 ;;Total ram usage:        0 bytes
 19173 ;; Hardware stack levels used:    1
 19174 ;; Hardware stack levels required when called:    3
 19175 ;; This function calls:
 19176 ;;		Nothing
 19177 ;; This function is called by:
 19178 ;;		_I2C_Init
 19179 ;;		_I2C_Read
 19180 ;;		_I2C_Write
 19181 ;;		_i2cAck
 19182 ;;		_I2C_Start
 19183 ;;		_I2C_ReStart
 19184 ;;		_I2C_Stop
 19185 ;; This function uses a non-reentrant model
 19186 ;;
 19187                           
 19188                           	psect	text92
 19189  004E18                     __ptext92:
 19190                           	opt stack 0
 19191  004E18                     _i2cHighSda:
 19192                           	opt stack 23
 19193                           
 19194                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
 19195                           
 19196                           ;incstack = 0
 19197  004E18  8A93               	bsf	3987,5,c	;volatile
 19198                           
 19199                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19200  004E1A  D000               	nop2		;2 cycle nop
 19201  004E1C  D000               	nop2		;2 cycle nop
 19202  004E1E  0012               	return		;funcret
 19203  004E20                     __end_of_i2cHighSda:
 19204                           	opt stack 0
 19205                           tblptru	equ	0xFF8
 19206                           tblptrh	equ	0xFF7
 19207                           tblptrl	equ	0xFF6
 19208                           tablat	equ	0xFF5
 19209                           prodh	equ	0xFF4
 19210                           prodl	equ	0xFF3
 19211                           intcon	equ	0xFF2
 19212                           intcon2	equ	0xFF1
 19213                           intcon3	equ	0xFF0
 19214                           postinc0	equ	0xFEE
 19215                           wreg	equ	0xFE8
 19216                           postdec1	equ	0xFE5
 19217                           plusw1	equ	0xFE3
 19218                           fsr1l	equ	0xFE1
 19219                           indf2	equ	0xFDF
 19220                           postinc2	equ	0xFDE
 19221                           postdec2	equ	0xFDD
 19222                           plusw2	equ	0xFDB
 19223                           fsr2h	equ	0xFDA
 19224                           fsr2l	equ	0xFD9
 19225                           status	equ	0xFD8
 19226                           
 19227 ;; *************** function _i2cHighScl *****************
 19228 ;; Defined at:
 19229 ;;		line 105 in file "I2C_Soft.c"
 19230 ;; Parameters:    Size  Location     Type
 19231 ;;		None
 19232 ;; Auto vars:     Size  Location     Type
 19233 ;;		None
 19234 ;; Return value:  Size  Location     Type
 19235 ;;		None               void
 19236 ;; Registers used:
 19237 ;;		wreg
 19238 ;; Tracked objects:
 19239 ;;		On entry : 0/0
 19240 ;;		On exit  : 0/0
 19241 ;;		Unchanged: 0/0
 19242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19247 ;;Total ram usage:        0 bytes
 19248 ;; Hardware stack levels used:    1
 19249 ;; Hardware stack levels required when called:    3
 19250 ;; This function calls:
 19251 ;;		Nothing
 19252 ;; This function is called by:
 19253 ;;		_I2C_Init
 19254 ;;		_I2C_Read
 19255 ;;		_I2C_Write
 19256 ;;		_i2cNack
 19257 ;;		_i2cAck
 19258 ;;		_I2C_Start
 19259 ;;		_I2C_ReStart
 19260 ;;		_I2C_Stop
 19261 ;; This function uses a non-reentrant model
 19262 ;;
 19263                           
 19264                           	psect	text93
 19265  004DD0                     __ptext93:
 19266                           	opt stack 0
 19267  004DD0                     _i2cHighScl:
 19268                           	opt stack 23
 19269                           
 19270                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 19271                           
 19272                           ;incstack = 0
 19273  004DD0  8893               	bsf	3987,4,c	;volatile
 19274                           
 19275                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 19276  004DD2  0E06               	movlw	6
 19277  004DD4                     u9147:
 19278  004DD4  2EE8               	decfsz	wreg,f,c
 19279  004DD6  D7FE               	goto	u9147
 19280  004DD8  D000               	nop2		;nop
 19281  004DDA  0012               	return		;funcret
 19282  004DDC                     __end_of_i2cHighScl:
 19283                           	opt stack 0
 19284                           tblptru	equ	0xFF8
 19285                           tblptrh	equ	0xFF7
 19286                           tblptrl	equ	0xFF6
 19287                           tablat	equ	0xFF5
 19288                           prodh	equ	0xFF4
 19289                           prodl	equ	0xFF3
 19290                           intcon	equ	0xFF2
 19291                           intcon2	equ	0xFF1
 19292                           intcon3	equ	0xFF0
 19293                           postinc0	equ	0xFEE
 19294                           wreg	equ	0xFE8
 19295                           postdec1	equ	0xFE5
 19296                           plusw1	equ	0xFE3
 19297                           fsr1l	equ	0xFE1
 19298                           indf2	equ	0xFDF
 19299                           postinc2	equ	0xFDE
 19300                           postdec2	equ	0xFDD
 19301                           plusw2	equ	0xFDB
 19302                           fsr2h	equ	0xFDA
 19303                           fsr2l	equ	0xFD9
 19304                           status	equ	0xFD8
 19305                           
 19306 ;; *************** function _Do_Change_Fan_Timer_Mode_Plus *****************
 19307 ;; Defined at:
 19308 ;;		line 144 in file "Fan_Support.c"
 19309 ;; Parameters:    Size  Location     Type
 19310 ;;		None
 19311 ;; Auto vars:     Size  Location     Type
 19312 ;;		None
 19313 ;; Return value:  Size  Location     Type
 19314 ;;		None               void
 19315 ;; Registers used:
 19316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19317 ;; Tracked objects:
 19318 ;;		On entry : 0/0
 19319 ;;		On exit  : 0/0
 19320 ;;		Unchanged: 0/0
 19321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19326 ;;Total ram usage:        0 bytes
 19327 ;; Hardware stack levels used:    1
 19328 ;; Hardware stack levels required when called:    7
 19329 ;; This function calls:
 19330 ;;		_Do_Beep_Bad
 19331 ;;		_Do_Beep_Good
 19332 ;; This function is called by:
 19333 ;;		_main
 19334 ;; This function uses a non-reentrant model
 19335 ;;
 19336                           
 19337                           	psect	text94
 19338  004920                     __ptext94:
 19339                           	opt stack 0
 19340  004920                     _Do_Change_Fan_Timer_Mode_Plus:
 19341                           	opt stack 23
 19342                           
 19343                           ;Fan_Support.c: 146: if (FAN_TIMER_MODE < 3)
 19344                           
 19345                           ;incstack = 0
 19346  004920  0E03               	movlw	3
 19347  004922  6060               	cpfslt	_FAN_TIMER_MODE,c
 19348  004924  D00F               	goto	l9936
 19349                           
 19350                           ;Fan_Support.c: 147: {
 19351                           ;Fan_Support.c: 148: FAN_TIMER_MODE++;
 19352  004926  2A60               	incf	_FAN_TIMER_MODE,f,c
 19353                           
 19354                           ;Fan_Support.c: 149: FAN_TIMER_TIME= Timer_Table[FAN_TIMER_MODE];
 19355  004928  5060               	movf	_FAN_TIMER_MODE,w,c
 19356  00492A  0D01               	mullw	1
 19357  00492C  0E38               	movlw	low _Timer_Table
 19358  00492E  24F3               	addwf	prodl,w,c
 19359  004930  6ED9               	movwf	fsr2l,c
 19360  004932  0E01               	movlw	high _Timer_Table
 19361  004934  20F4               	addwfc	prodh,w,c
 19362  004936  6EDA               	movwf	fsr2h,c
 19363  004938  50DF               	movf	indf2,w,c
 19364  00493A  0100               	movlb	0	; () banked
 19365  00493C  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
 19366                           
 19367                           ; BSR set to: 0
 19368                           ;Fan_Support.c: 150: Do_Beep_Good();
 19369  00493E  ECE6  F025         	call	_Do_Beep_Good	;wreg free
 19370                           
 19371                           ;Fan_Support.c: 151: }
 19372  004942  D003               	goto	l77
 19373  004944                     l9936:
 19374                           
 19375                           ;Fan_Support.c: 152: else Do_Beep_Bad();
 19376  004944  ECF4  F025         	call	_Do_Beep_Bad	;wreg free
 19377  004948  D000               	goto	l77
 19378  00494A                     l77:
 19379  00494A  0012               	return		;funcret
 19380  00494C                     __end_of_Do_Change_Fan_Timer_Mode_Plus:
 19381                           	opt stack 0
 19382                           tblptru	equ	0xFF8
 19383                           tblptrh	equ	0xFF7
 19384                           tblptrl	equ	0xFF6
 19385                           tablat	equ	0xFF5
 19386                           prodh	equ	0xFF4
 19387                           prodl	equ	0xFF3
 19388                           intcon	equ	0xFF2
 19389                           intcon2	equ	0xFF1
 19390                           intcon3	equ	0xFF0
 19391                           postinc0	equ	0xFEE
 19392                           wreg	equ	0xFE8
 19393                           postdec1	equ	0xFE5
 19394                           plusw1	equ	0xFE3
 19395                           fsr1l	equ	0xFE1
 19396                           indf2	equ	0xFDF
 19397                           postinc2	equ	0xFDE
 19398                           postdec2	equ	0xFDD
 19399                           plusw2	equ	0xFDB
 19400                           fsr2h	equ	0xFDA
 19401                           fsr2l	equ	0xFD9
 19402                           status	equ	0xFD8
 19403                           
 19404 ;; *************** function _Do_Change_Fan_Timer_Mode_Minus *****************
 19405 ;; Defined at:
 19406 ;;		line 156 in file "Fan_Support.c"
 19407 ;; Parameters:    Size  Location     Type
 19408 ;;		None
 19409 ;; Auto vars:     Size  Location     Type
 19410 ;;		None
 19411 ;; Return value:  Size  Location     Type
 19412 ;;		None               void
 19413 ;; Registers used:
 19414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19415 ;; Tracked objects:
 19416 ;;		On entry : 0/0
 19417 ;;		On exit  : 0/0
 19418 ;;		Unchanged: 0/0
 19419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19424 ;;Total ram usage:        0 bytes
 19425 ;; Hardware stack levels used:    1
 19426 ;; Hardware stack levels required when called:    7
 19427 ;; This function calls:
 19428 ;;		_Do_Beep_Bad
 19429 ;;		_Do_Beep_Good
 19430 ;; This function is called by:
 19431 ;;		_main
 19432 ;; This function uses a non-reentrant model
 19433 ;;
 19434                           
 19435                           	psect	text95
 19436  00494C                     __ptext95:
 19437                           	opt stack 0
 19438  00494C                     _Do_Change_Fan_Timer_Mode_Minus:
 19439                           	opt stack 23
 19440                           
 19441                           ;Fan_Support.c: 158: if (FAN_TIMER_MODE == 0)
 19442                           
 19443                           ;incstack = 0
 19444  00494C  5060               	movf	_FAN_TIMER_MODE,w,c
 19445  00494E  A4D8               	btfss	status,2,c
 19446  004950  D003               	goto	l9942
 19447                           
 19448                           ;Fan_Support.c: 159: {
 19449                           ;Fan_Support.c: 160: Do_Beep_Bad();
 19450  004952  ECF4  F025         	call	_Do_Beep_Bad	;wreg free
 19451                           
 19452                           ;Fan_Support.c: 161: }
 19453  004956  D00F               	goto	l82
 19454  004958                     l9942:
 19455                           
 19456                           ;Fan_Support.c: 162: else
 19457                           ;Fan_Support.c: 163: {
 19458                           ;Fan_Support.c: 164: FAN_TIMER_MODE--;
 19459  004958  0660               	decf	_FAN_TIMER_MODE,f,c
 19460                           
 19461                           ;Fan_Support.c: 165: FAN_TIMER_TIME= Timer_Table[FAN_TIMER_MODE];
 19462  00495A  5060               	movf	_FAN_TIMER_MODE,w,c
 19463  00495C  0D01               	mullw	1
 19464  00495E  0E38               	movlw	low _Timer_Table
 19465  004960  24F3               	addwf	prodl,w,c
 19466  004962  6ED9               	movwf	fsr2l,c
 19467  004964  0E01               	movlw	high _Timer_Table
 19468  004966  20F4               	addwfc	prodh,w,c
 19469  004968  6EDA               	movwf	fsr2h,c
 19470  00496A  50DF               	movf	indf2,w,c
 19471  00496C  0100               	movlb	0	; () banked
 19472  00496E  6FC3               	movwf	_FAN_TIMER_TIME& (0+255),b
 19473                           
 19474                           ; BSR set to: 0
 19475                           ;Fan_Support.c: 166: Do_Beep_Good();
 19476  004970  ECE6  F025         	call	_Do_Beep_Good	;wreg free
 19477  004974  D000               	goto	l82
 19478  004976                     l82:
 19479  004976  0012               	return		;funcret
 19480  004978                     __end_of_Do_Change_Fan_Timer_Mode_Minus:
 19481                           	opt stack 0
 19482                           tblptru	equ	0xFF8
 19483                           tblptrh	equ	0xFF7
 19484                           tblptrl	equ	0xFF6
 19485                           tablat	equ	0xFF5
 19486                           prodh	equ	0xFF4
 19487                           prodl	equ	0xFF3
 19488                           intcon	equ	0xFF2
 19489                           intcon2	equ	0xFF1
 19490                           intcon3	equ	0xFF0
 19491                           postinc0	equ	0xFEE
 19492                           wreg	equ	0xFE8
 19493                           postdec1	equ	0xFE5
 19494                           plusw1	equ	0xFE3
 19495                           fsr1l	equ	0xFE1
 19496                           indf2	equ	0xFDF
 19497                           postinc2	equ	0xFDE
 19498                           postdec2	equ	0xFDD
 19499                           plusw2	equ	0xFDB
 19500                           fsr2h	equ	0xFDA
 19501                           fsr2l	equ	0xFD9
 19502                           status	equ	0xFD8
 19503                           
 19504 ;; *************** function _Do_Beep_Good *****************
 19505 ;; Defined at:
 19506 ;;		line 77 in file "utils.c"
 19507 ;; Parameters:    Size  Location     Type
 19508 ;;		None
 19509 ;; Auto vars:     Size  Location     Type
 19510 ;;		None
 19511 ;; Return value:  Size  Location     Type
 19512 ;;		None               void
 19513 ;; Registers used:
 19514 ;;		wreg, status,2, status,0, cstack
 19515 ;; Tracked objects:
 19516 ;;		On entry : 0/0
 19517 ;;		On exit  : 0/0
 19518 ;;		Unchanged: 0/0
 19519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19524 ;;Total ram usage:        0 bytes
 19525 ;; Hardware stack levels used:    1
 19526 ;; Hardware stack levels required when called:    6
 19527 ;; This function calls:
 19528 ;;		_Activate_Buzzer_2KHz
 19529 ;;		_Deactivate_Buzzer
 19530 ;;		_Wait_Half_Sec
 19531 ;;		_do_update_pwm
 19532 ;; This function is called by:
 19533 ;;		_Do_Change_Fan_Timer_Mode_Plus
 19534 ;;		_Do_Change_Fan_Timer_Mode_Minus
 19535 ;;		_main
 19536 ;;		_Setup_Fan_Temp
 19537 ;;		_Do_Setup_Time
 19538 ;; This function uses a non-reentrant model
 19539 ;;
 19540                           
 19541                           	psect	text96
 19542  004BCC                     __ptext96:
 19543                           	opt stack 0
 19544  004BCC                     _Do_Beep_Good:
 19545                           	opt stack 23
 19546                           
 19547                           ;utils.c: 79: PORTDbits.RD3 = 1;
 19548                           
 19549                           ;incstack = 0
 19550  004BCC  8683               	bsf	3971,3,c	;volatile
 19551                           
 19552                           ;utils.c: 80: Activate_Buzzer_2KHz();
 19553  004BCE  ECA7  F026         	call	_Activate_Buzzer_2KHz	;wreg free
 19554                           
 19555                           ;utils.c: 81: Wait_Half_Sec();
 19556  004BD2  EC10  F026         	call	_Wait_Half_Sec	;wreg free
 19557                           
 19558                           ;utils.c: 82: PORTDbits.RD3 = 0;
 19559  004BD6  9683               	bcf	3971,3,c	;volatile
 19560                           
 19561                           ;utils.c: 83: Deactivate_Buzzer();
 19562  004BD8  EC10  F027         	call	_Deactivate_Buzzer	;wreg free
 19563                           
 19564                           ;utils.c: 84: Wait_Half_Sec();
 19565  004BDC  EC10  F026         	call	_Wait_Half_Sec	;wreg free
 19566                           
 19567                           ;utils.c: 85: do_update_pwm(duty_cycle);
 19568  004BE0  5064               	movf	_duty_cycle,w,c
 19569  004BE2  ECE9  F01C         	call	_do_update_pwm
 19570  004BE6  0012               	return		;funcret
 19571  004BE8                     __end_of_Do_Beep_Good:
 19572                           	opt stack 0
 19573                           tblptru	equ	0xFF8
 19574                           tblptrh	equ	0xFF7
 19575                           tblptrl	equ	0xFF6
 19576                           tablat	equ	0xFF5
 19577                           prodh	equ	0xFF4
 19578                           prodl	equ	0xFF3
 19579                           intcon	equ	0xFF2
 19580                           intcon2	equ	0xFF1
 19581                           intcon3	equ	0xFF0
 19582                           postinc0	equ	0xFEE
 19583                           wreg	equ	0xFE8
 19584                           postdec1	equ	0xFE5
 19585                           plusw1	equ	0xFE3
 19586                           fsr1l	equ	0xFE1
 19587                           indf2	equ	0xFDF
 19588                           postinc2	equ	0xFDE
 19589                           postdec2	equ	0xFDD
 19590                           plusw2	equ	0xFDB
 19591                           fsr2h	equ	0xFDA
 19592                           fsr2l	equ	0xFD9
 19593                           status	equ	0xFD8
 19594                           
 19595 ;; *************** function _Activate_Buzzer_2KHz *****************
 19596 ;; Defined at:
 19597 ;;		line 120 in file "utils.c"
 19598 ;; Parameters:    Size  Location     Type
 19599 ;;		None
 19600 ;; Auto vars:     Size  Location     Type
 19601 ;;		None
 19602 ;; Return value:  Size  Location     Type
 19603 ;;		None               void
 19604 ;; Registers used:
 19605 ;;		wreg, status,2
 19606 ;; Tracked objects:
 19607 ;;		On entry : 0/0
 19608 ;;		On exit  : 0/0
 19609 ;;		Unchanged: 0/0
 19610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19615 ;;Total ram usage:        0 bytes
 19616 ;; Hardware stack levels used:    1
 19617 ;; Hardware stack levels required when called:    3
 19618 ;; This function calls:
 19619 ;;		Nothing
 19620 ;; This function is called by:
 19621 ;;		_Do_Beep_Good
 19622 ;; This function uses a non-reentrant model
 19623 ;;
 19624                           
 19625                           	psect	text97
 19626  004D4E                     __ptext97:
 19627                           	opt stack 0
 19628  004D4E                     _Activate_Buzzer_2KHz:
 19629                           	opt stack 25
 19630                           
 19631                           ;utils.c: 122: PR2 = 0b11111001 ;
 19632                           
 19633                           ;incstack = 0
 19634  004D4E  0EF9               	movlw	249
 19635  004D50  6ECB               	movwf	4043,c	;volatile
 19636                           
 19637                           ;utils.c: 123: T2CON = 0b00000101 ;
 19638  004D52  0E05               	movlw	5
 19639  004D54  6ECA               	movwf	4042,c	;volatile
 19640                           
 19641                           ;utils.c: 124: CCPR2L = 0b01111100 ;
 19642  004D56  0E7C               	movlw	124
 19643  004D58  6EBB               	movwf	4027,c	;volatile
 19644                           
 19645                           ;utils.c: 125: CCP2CON = 0b00111100 ;
 19646  004D5A  0E3C               	movlw	60
 19647  004D5C  6EBA               	movwf	4026,c	;volatile
 19648  004D5E  0012               	return		;funcret
 19649  004D60                     __end_of_Activate_Buzzer_2KHz:
 19650                           	opt stack 0
 19651                           tblptru	equ	0xFF8
 19652                           tblptrh	equ	0xFF7
 19653                           tblptrl	equ	0xFF6
 19654                           tablat	equ	0xFF5
 19655                           prodh	equ	0xFF4
 19656                           prodl	equ	0xFF3
 19657                           intcon	equ	0xFF2
 19658                           intcon2	equ	0xFF1
 19659                           intcon3	equ	0xFF0
 19660                           postinc0	equ	0xFEE
 19661                           wreg	equ	0xFE8
 19662                           postdec1	equ	0xFE5
 19663                           plusw1	equ	0xFE3
 19664                           fsr1l	equ	0xFE1
 19665                           indf2	equ	0xFDF
 19666                           postinc2	equ	0xFDE
 19667                           postdec2	equ	0xFDD
 19668                           plusw2	equ	0xFDB
 19669                           fsr2h	equ	0xFDA
 19670                           fsr2l	equ	0xFD9
 19671                           status	equ	0xFD8
 19672                           
 19673 ;; *************** function _Do_Beep_Bad *****************
 19674 ;; Defined at:
 19675 ;;		line 88 in file "utils.c"
 19676 ;; Parameters:    Size  Location     Type
 19677 ;;		None
 19678 ;; Auto vars:     Size  Location     Type
 19679 ;;		None
 19680 ;; Return value:  Size  Location     Type
 19681 ;;		None               void
 19682 ;; Registers used:
 19683 ;;		wreg, status,2, status,0, cstack
 19684 ;; Tracked objects:
 19685 ;;		On entry : 0/0
 19686 ;;		On exit  : 0/0
 19687 ;;		Unchanged: 0/0
 19688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19693 ;;Total ram usage:        0 bytes
 19694 ;; Hardware stack levels used:    1
 19695 ;; Hardware stack levels required when called:    6
 19696 ;; This function calls:
 19697 ;;		_Activate_Buzzer_500Hz
 19698 ;;		_Deactivate_Buzzer
 19699 ;;		_Wait_Half_Sec
 19700 ;;		_do_update_pwm
 19701 ;; This function is called by:
 19702 ;;		_Do_Change_Fan_Timer_Mode_Plus
 19703 ;;		_Do_Change_Fan_Timer_Mode_Minus
 19704 ;;		_main
 19705 ;;		_Setup_Fan_Temp
 19706 ;;		_Do_Setup_Time
 19707 ;; This function uses a non-reentrant model
 19708 ;;
 19709                           
 19710                           	psect	text98
 19711  004BE8                     __ptext98:
 19712                           	opt stack 0
 19713  004BE8                     _Do_Beep_Bad:
 19714                           	opt stack 23
 19715                           
 19716                           ;utils.c: 90: PORTDbits.RD3 = 1;
 19717                           
 19718                           ;incstack = 0
 19719  004BE8  8683               	bsf	3971,3,c	;volatile
 19720                           
 19721                           ;utils.c: 91: Activate_Buzzer_500Hz();
 19722  004BEA  ECB0  F026         	call	_Activate_Buzzer_500Hz	;wreg free
 19723                           
 19724                           ;utils.c: 92: Wait_Half_Sec();
 19725  004BEE  EC10  F026         	call	_Wait_Half_Sec	;wreg free
 19726                           
 19727                           ;utils.c: 93: PORTDbits.RD3 = 0;
 19728  004BF2  9683               	bcf	3971,3,c	;volatile
 19729                           
 19730                           ;utils.c: 94: Deactivate_Buzzer();
 19731  004BF4  EC10  F027         	call	_Deactivate_Buzzer	;wreg free
 19732                           
 19733                           ;utils.c: 95: Wait_Half_Sec();
 19734  004BF8  EC10  F026         	call	_Wait_Half_Sec	;wreg free
 19735                           
 19736                           ;utils.c: 96: do_update_pwm(duty_cycle);
 19737  004BFC  5064               	movf	_duty_cycle,w,c
 19738  004BFE  ECE9  F01C         	call	_do_update_pwm
 19739  004C02  0012               	return		;funcret
 19740  004C04                     __end_of_Do_Beep_Bad:
 19741                           	opt stack 0
 19742                           tblptru	equ	0xFF8
 19743                           tblptrh	equ	0xFF7
 19744                           tblptrl	equ	0xFF6
 19745                           tablat	equ	0xFF5
 19746                           prodh	equ	0xFF4
 19747                           prodl	equ	0xFF3
 19748                           intcon	equ	0xFF2
 19749                           intcon2	equ	0xFF1
 19750                           intcon3	equ	0xFF0
 19751                           postinc0	equ	0xFEE
 19752                           wreg	equ	0xFE8
 19753                           postdec1	equ	0xFE5
 19754                           plusw1	equ	0xFE3
 19755                           fsr1l	equ	0xFE1
 19756                           indf2	equ	0xFDF
 19757                           postinc2	equ	0xFDE
 19758                           postdec2	equ	0xFDD
 19759                           plusw2	equ	0xFDB
 19760                           fsr2h	equ	0xFDA
 19761                           fsr2l	equ	0xFD9
 19762                           status	equ	0xFD8
 19763                           
 19764 ;; *************** function _Activate_Buzzer_500Hz *****************
 19765 ;; Defined at:
 19766 ;;		line 112 in file "utils.c"
 19767 ;; Parameters:    Size  Location     Type
 19768 ;;		None
 19769 ;; Auto vars:     Size  Location     Type
 19770 ;;		None
 19771 ;; Return value:  Size  Location     Type
 19772 ;;		None               void
 19773 ;; Registers used:
 19774 ;;		wreg, status,2
 19775 ;; Tracked objects:
 19776 ;;		On entry : 0/0
 19777 ;;		On exit  : 0/0
 19778 ;;		Unchanged: 0/0
 19779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19784 ;;Total ram usage:        0 bytes
 19785 ;; Hardware stack levels used:    1
 19786 ;; Hardware stack levels required when called:    3
 19787 ;; This function calls:
 19788 ;;		Nothing
 19789 ;; This function is called by:
 19790 ;;		_Do_Beep_Bad
 19791 ;; This function uses a non-reentrant model
 19792 ;;
 19793                           
 19794                           	psect	text99
 19795  004D60                     __ptext99:
 19796                           	opt stack 0
 19797  004D60                     _Activate_Buzzer_500Hz:
 19798                           	opt stack 25
 19799                           
 19800                           ;utils.c: 114: PR2 = 0b11111001 ;
 19801                           
 19802                           ;incstack = 0
 19803  004D60  0EF9               	movlw	249
 19804  004D62  6ECB               	movwf	4043,c	;volatile
 19805                           
 19806                           ;utils.c: 115: T2CON = 0b00000111 ;
 19807  004D64  0E07               	movlw	7
 19808  004D66  6ECA               	movwf	4042,c	;volatile
 19809                           
 19810                           ;utils.c: 116: CCPR2L = 0b01111100 ;
 19811  004D68  0E7C               	movlw	124
 19812  004D6A  6EBB               	movwf	4027,c	;volatile
 19813                           
 19814                           ;utils.c: 117: CCP2CON = 0b00111100 ;
 19815  004D6C  0E3C               	movlw	60
 19816  004D6E  6EBA               	movwf	4026,c	;volatile
 19817  004D70  0012               	return		;funcret
 19818  004D72                     __end_of_Activate_Buzzer_500Hz:
 19819                           	opt stack 0
 19820                           tblptru	equ	0xFF8
 19821                           tblptrh	equ	0xFF7
 19822                           tblptrl	equ	0xFF6
 19823                           tablat	equ	0xFF5
 19824                           prodh	equ	0xFF4
 19825                           prodl	equ	0xFF3
 19826                           intcon	equ	0xFF2
 19827                           intcon2	equ	0xFF1
 19828                           intcon3	equ	0xFF0
 19829                           postinc0	equ	0xFEE
 19830                           wreg	equ	0xFE8
 19831                           postdec1	equ	0xFE5
 19832                           plusw1	equ	0xFE3
 19833                           fsr1l	equ	0xFE1
 19834                           indf2	equ	0xFDF
 19835                           postinc2	equ	0xFDE
 19836                           postdec2	equ	0xFDD
 19837                           plusw2	equ	0xFDB
 19838                           fsr2h	equ	0xFDA
 19839                           fsr2l	equ	0xFD9
 19840                           status	equ	0xFD8
 19841                           
 19842 ;; *************** function _Decrease_Duty_Cycle *****************
 19843 ;; Defined at:
 19844 ;;		line 127 in file "Fan_Support.c"
 19845 ;; Parameters:    Size  Location     Type
 19846 ;;		None
 19847 ;; Auto vars:     Size  Location     Type
 19848 ;;		None
 19849 ;; Return value:  Size  Location     Type
 19850 ;;		None               void
 19851 ;; Registers used:
 19852 ;;		wreg, status,2, status,0, cstack
 19853 ;; Tracked objects:
 19854 ;;		On entry : 0/0
 19855 ;;		On exit  : 0/0
 19856 ;;		Unchanged: 0/0
 19857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19862 ;;Total ram usage:        0 bytes
 19863 ;; Hardware stack levels used:    1
 19864 ;; Hardware stack levels required when called:    7
 19865 ;; This function calls:
 19866 ;;		_Do_Beep
 19867 ;;		_do_update_pwm
 19868 ;; This function is called by:
 19869 ;;		_main
 19870 ;; This function uses a non-reentrant model
 19871 ;;
 19872                           
 19873                           	psect	text100
 19874  004A1C                     __ptext100:
 19875                           	opt stack 0
 19876  004A1C                     _Decrease_Duty_Cycle:
 19877                           	opt stack 23
 19878                           
 19879                           ;Fan_Support.c: 131: if (duty_cycle == 0)
 19880                           
 19881                           ;incstack = 0
 19882  004A1C  5064               	movf	_duty_cycle,w,c
 19883  004A1E  A4D8               	btfss	status,2,c
 19884  004A20  D008               	goto	l9924
 19885                           
 19886                           ;Fan_Support.c: 132: {
 19887                           ;Fan_Support.c: 133: Do_Beep();
 19888  004A22  EC02  F026         	call	_Do_Beep	;wreg free
 19889                           
 19890                           ;Fan_Support.c: 134: Do_Beep();
 19891  004A26  EC02  F026         	call	_Do_Beep	;wreg free
 19892                           
 19893                           ;Fan_Support.c: 135: do_update_pwm(duty_cycle);
 19894  004A2A  5064               	movf	_duty_cycle,w,c
 19895  004A2C  ECE9  F01C         	call	_do_update_pwm
 19896                           
 19897                           ;Fan_Support.c: 136: }
 19898  004A30  D007               	goto	l72
 19899  004A32                     l9924:
 19900                           
 19901                           ;Fan_Support.c: 137: else
 19902                           ;Fan_Support.c: 138: {
 19903                           ;Fan_Support.c: 139: duty_cycle = duty_cycle - 5;
 19904  004A32  5064               	movf	_duty_cycle,w,c
 19905  004A34  0FFB               	addlw	251
 19906  004A36  6E64               	movwf	_duty_cycle,c
 19907                           
 19908                           ;Fan_Support.c: 140: do_update_pwm(duty_cycle);
 19909  004A38  5064               	movf	_duty_cycle,w,c
 19910  004A3A  ECE9  F01C         	call	_do_update_pwm
 19911  004A3E  D000               	goto	l72
 19912  004A40                     l72:
 19913  004A40  0012               	return		;funcret
 19914  004A42                     __end_of_Decrease_Duty_Cycle:
 19915                           	opt stack 0
 19916                           tblptru	equ	0xFF8
 19917                           tblptrh	equ	0xFF7
 19918                           tblptrl	equ	0xFF6
 19919                           tablat	equ	0xFF5
 19920                           prodh	equ	0xFF4
 19921                           prodl	equ	0xFF3
 19922                           intcon	equ	0xFF2
 19923                           intcon2	equ	0xFF1
 19924                           intcon3	equ	0xFF0
 19925                           postinc0	equ	0xFEE
 19926                           wreg	equ	0xFE8
 19927                           postdec1	equ	0xFE5
 19928                           plusw1	equ	0xFE3
 19929                           fsr1l	equ	0xFE1
 19930                           indf2	equ	0xFDF
 19931                           postinc2	equ	0xFDE
 19932                           postdec2	equ	0xFDD
 19933                           plusw2	equ	0xFDB
 19934                           fsr2h	equ	0xFDA
 19935                           fsr2l	equ	0xFD9
 19936                           status	equ	0xFD8
 19937                           
 19938 ;; *************** function _Do_Beep *****************
 19939 ;; Defined at:
 19940 ;;		line 66 in file "utils.c"
 19941 ;; Parameters:    Size  Location     Type
 19942 ;;		None
 19943 ;; Auto vars:     Size  Location     Type
 19944 ;;		None
 19945 ;; Return value:  Size  Location     Type
 19946 ;;		None               void
 19947 ;; Registers used:
 19948 ;;		wreg, status,2, status,0, cstack
 19949 ;; Tracked objects:
 19950 ;;		On entry : 0/0
 19951 ;;		On exit  : 0/0
 19952 ;;		Unchanged: 0/0
 19953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19958 ;;Total ram usage:        0 bytes
 19959 ;; Hardware stack levels used:    1
 19960 ;; Hardware stack levels required when called:    6
 19961 ;; This function calls:
 19962 ;;		_Activate_Buzzer
 19963 ;;		_Deactivate_Buzzer
 19964 ;;		_Wait_Half_Sec
 19965 ;;		_do_update_pwm
 19966 ;; This function is called by:
 19967 ;;		_Increase_Duty_Cycle
 19968 ;;		_Decrease_Duty_Cycle
 19969 ;; This function uses a non-reentrant model
 19970 ;;
 19971                           
 19972                           	psect	text101
 19973  004C04                     __ptext101:
 19974                           	opt stack 0
 19975  004C04                     _Do_Beep:
 19976                           	opt stack 23
 19977                           
 19978                           ;utils.c: 68: PORTDbits.RD3 = 1;
 19979                           
 19980                           ;incstack = 0
 19981  004C04  8683               	bsf	3971,3,c	;volatile
 19982                           
 19983                           ;utils.c: 69: Activate_Buzzer();
 19984  004C06  ECB9  F026         	call	_Activate_Buzzer	;wreg free
 19985                           
 19986                           ;utils.c: 70: Wait_Half_Sec();
 19987  004C0A  EC10  F026         	call	_Wait_Half_Sec	;wreg free
 19988                           
 19989                           ;utils.c: 71: PORTDbits.RD3 = 0;
 19990  004C0E  9683               	bcf	3971,3,c	;volatile
 19991                           
 19992                           ;utils.c: 72: Deactivate_Buzzer();
 19993  004C10  EC10  F027         	call	_Deactivate_Buzzer	;wreg free
 19994                           
 19995                           ;utils.c: 73: Wait_Half_Sec();
 19996  004C14  EC10  F026         	call	_Wait_Half_Sec	;wreg free
 19997                           
 19998                           ;utils.c: 74: do_update_pwm(duty_cycle);
 19999  004C18  5064               	movf	_duty_cycle,w,c
 20000  004C1A  ECE9  F01C         	call	_do_update_pwm
 20001  004C1E  0012               	return		;funcret
 20002  004C20                     __end_of_Do_Beep:
 20003                           	opt stack 0
 20004                           tblptru	equ	0xFF8
 20005                           tblptrh	equ	0xFF7
 20006                           tblptrl	equ	0xFF6
 20007                           tablat	equ	0xFF5
 20008                           prodh	equ	0xFF4
 20009                           prodl	equ	0xFF3
 20010                           intcon	equ	0xFF2
 20011                           intcon2	equ	0xFF1
 20012                           intcon3	equ	0xFF0
 20013                           postinc0	equ	0xFEE
 20014                           wreg	equ	0xFE8
 20015                           postdec1	equ	0xFE5
 20016                           plusw1	equ	0xFE3
 20017                           fsr1l	equ	0xFE1
 20018                           indf2	equ	0xFDF
 20019                           postinc2	equ	0xFDE
 20020                           postdec2	equ	0xFDD
 20021                           plusw2	equ	0xFDB
 20022                           fsr2h	equ	0xFDA
 20023                           fsr2l	equ	0xFD9
 20024                           status	equ	0xFD8
 20025                           
 20026 ;; *************** function _do_update_pwm *****************
 20027 ;; Defined at:
 20028 ;;		line 142 in file "utils.c"
 20029 ;; Parameters:    Size  Location     Type
 20030 ;;  duty_cycle      1    wreg     unsigned char 
 20031 ;; Auto vars:     Size  Location     Type
 20032 ;;  duty_cycle      1   66[COMRAM] unsigned char 
 20033 ;;  dc_f            3   63[COMRAM] float 
 20034 ;;  dc_I            2   67[COMRAM] int 
 20035 ;; Return value:  Size  Location     Type
 20036 ;;		None               void
 20037 ;; Registers used:
 20038 ;;		wreg, status,2, status,0, cstack
 20039 ;; Tracked objects:
 20040 ;;		On entry : 0/0
 20041 ;;		On exit  : 0/0
 20042 ;;		Unchanged: 0/0
 20043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20045 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20046 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20047 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20048 ;;Total ram usage:        9 bytes
 20049 ;; Hardware stack levels used:    1
 20050 ;; Hardware stack levels required when called:    5
 20051 ;; This function calls:
 20052 ;;		___ftdiv
 20053 ;;		___ftmul
 20054 ;;		___fttol
 20055 ;;		___lbtoft
 20056 ;; This function is called by:
 20057 ;;		_Monitor_Fan
 20058 ;;		_Turn_On_Fan
 20059 ;;		_Increase_Duty_Cycle
 20060 ;;		_Decrease_Duty_Cycle
 20061 ;;		_Do_Beep
 20062 ;;		_Do_Beep_Good
 20063 ;;		_Do_Beep_Bad
 20064 ;; This function uses a non-reentrant model
 20065 ;;
 20066                           
 20067                           	psect	text102
 20068  0039D2                     __ptext102:
 20069                           	opt stack 0
 20070  0039D2                     _do_update_pwm:
 20071                           	opt stack 23
 20072                           
 20073                           ;incstack = 0
 20074                           ;do_update_pwm@duty_cycle stored from wreg
 20075  0039D2  6E43               	movwf	do_update_pwm@duty_cycle,c
 20076                           
 20077                           ;utils.c: 144: float dc_f;
 20078                           ;utils.c: 145: int dc_I;
 20079                           ;utils.c: 146: PR2 = 0b00000100 ;
 20080  0039D4  0E04               	movlw	4
 20081  0039D6  6ECB               	movwf	4043,c	;volatile
 20082                           
 20083                           ;utils.c: 147: T2CON = 0b00000111 ;
 20084  0039D8  0E07               	movlw	7
 20085  0039DA  6ECA               	movwf	4042,c	;volatile
 20086                           
 20087                           ;utils.c: 148: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 20088  0039DC  0E00               	movlw	0
 20089  0039DE  6E22               	movwf	___ftmul@f2,c
 20090  0039E0  0E80               	movlw	128
 20091  0039E2  6E23               	movwf	___ftmul@f2+1,c
 20092  0039E4  0E40               	movlw	64
 20093  0039E6  6E24               	movwf	___ftmul@f2+2,c
 20094  0039E8  5043               	movf	do_update_pwm@duty_cycle,w,c
 20095  0039EA  EC21  F025         	call	___lbtoft
 20096  0039EE  C019  F01F         	movff	?___lbtoft,___ftmul@f1
 20097  0039F2  C01A  F020         	movff	?___lbtoft+1,___ftmul@f1+1
 20098  0039F6  C01B  F021         	movff	?___lbtoft+2,___ftmul@f1+2
 20099  0039FA  ECFE  F018         	call	___ftmul	;wreg free
 20100  0039FE  C01F  F02E         	movff	?___ftmul,___ftdiv@f1
 20101  003A02  C020  F02F         	movff	?___ftmul+1,___ftdiv@f1+1
 20102  003A06  C021  F030         	movff	?___ftmul+2,___ftdiv@f1+2
 20103  003A0A  0E00               	movlw	0
 20104  003A0C  6E31               	movwf	___ftdiv@f2,c
 20105  003A0E  0EA0               	movlw	160
 20106  003A10  6E32               	movwf	___ftdiv@f2+1,c
 20107  003A12  0E41               	movlw	65
 20108  003A14  6E33               	movwf	___ftdiv@f2+2,c
 20109  003A16  EC4C  F01B         	call	___ftdiv	;wreg free
 20110  003A1A  C02E  F040         	movff	?___ftdiv,do_update_pwm@dc_f
 20111  003A1E  C02F  F041         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 20112  003A22  C030  F042         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 20113                           
 20114                           ;utils.c: 149: dc_I = (int) dc_f;
 20115  003A26  C040  F02E         	movff	do_update_pwm@dc_f,___fttol@f1
 20116  003A2A  C041  F02F         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 20117  003A2E  C042  F030         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 20118  003A32  EC68  F01A         	call	___fttol	;wreg free
 20119  003A36  C02E  F044         	movff	?___fttol,do_update_pwm@dc_I
 20120  003A3A  C02F  F045         	movff	?___fttol+1,do_update_pwm@dc_I+1
 20121                           
 20122                           ;utils.c: 150: if (dc_I > duty_cycle) dc_I++;
 20123  003A3E  5043               	movf	do_update_pwm@duty_cycle,w,c
 20124  003A40  6E3D               	movwf	??_do_update_pwm& (0+255),c
 20125  003A42  6A3E               	clrf	(??_do_update_pwm+1)& (0+255),c
 20126  003A44  5044               	movf	do_update_pwm@dc_I,w,c
 20127  003A46  5C3D               	subwf	??_do_update_pwm,w,c
 20128  003A48  503E               	movf	??_do_update_pwm+1,w,c
 20129  003A4A  0A80               	xorlw	128
 20130  003A4C  6E3F               	movwf	(??_do_update_pwm+2)& (0+255),c
 20131  003A4E  5045               	movf	do_update_pwm@dc_I+1,w,c
 20132  003A50  0A80               	xorlw	128
 20133  003A52  583F               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 20134  003A54  B0D8               	btfsc	status,0,c
 20135  003A56  D003               	goto	l9478
 20136  003A58  4A44               	infsnz	do_update_pwm@dc_I,f,c
 20137  003A5A  2A45               	incf	do_update_pwm@dc_I+1,f,c
 20138  003A5C  D000               	goto	l9478
 20139  003A5E                     l9478:
 20140                           
 20141                           ;utils.c: 151: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 20142  003A5E  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 20143  003A62  0E03               	movlw	3
 20144  003A64  163D               	andwf	??_do_update_pwm,f,c
 20145  003A66  383D               	swapf	??_do_update_pwm,w,c
 20146  003A68  0BF0               	andlw	240
 20147  003A6A  090C               	iorlw	12
 20148  003A6C  6EBD               	movwf	4029,c	;volatile
 20149                           
 20150                           ;utils.c: 152: CCPR1L = (dc_I) >> 2;
 20151  003A6E  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 20152  003A72  C045  F03E         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 20153  003A76  343E               	rlcf	??_do_update_pwm+1,w,c
 20154  003A78  323E               	rrcf	??_do_update_pwm+1,f,c
 20155  003A7A  323D               	rrcf	??_do_update_pwm,f,c
 20156  003A7C  343E               	rlcf	??_do_update_pwm+1,w,c
 20157  003A7E  323E               	rrcf	??_do_update_pwm+1,f,c
 20158  003A80  323D               	rrcf	??_do_update_pwm,f,c
 20159  003A82  503D               	movf	??_do_update_pwm,w,c
 20160  003A84  6EBE               	movwf	4030,c	;volatile
 20161  003A86  0012               	return		;funcret
 20162  003A88                     __end_of_do_update_pwm:
 20163                           	opt stack 0
 20164                           tblptru	equ	0xFF8
 20165                           tblptrh	equ	0xFF7
 20166                           tblptrl	equ	0xFF6
 20167                           tablat	equ	0xFF5
 20168                           prodh	equ	0xFF4
 20169                           prodl	equ	0xFF3
 20170                           intcon	equ	0xFF2
 20171                           intcon2	equ	0xFF1
 20172                           intcon3	equ	0xFF0
 20173                           postinc0	equ	0xFEE
 20174                           wreg	equ	0xFE8
 20175                           postdec1	equ	0xFE5
 20176                           plusw1	equ	0xFE3
 20177                           fsr1l	equ	0xFE1
 20178                           indf2	equ	0xFDF
 20179                           postinc2	equ	0xFDE
 20180                           postdec2	equ	0xFDD
 20181                           plusw2	equ	0xFDB
 20182                           fsr2h	equ	0xFDA
 20183                           fsr2l	equ	0xFD9
 20184                           status	equ	0xFD8
 20185                           
 20186 ;; *************** function ___lbtoft *****************
 20187 ;; Defined at:
 20188 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 20189 ;; Parameters:    Size  Location     Type
 20190 ;;  c               1    wreg     unsigned char 
 20191 ;; Auto vars:     Size  Location     Type
 20192 ;;  c               1   27[COMRAM] unsigned char 
 20193 ;; Return value:  Size  Location     Type
 20194 ;;                  3   24[COMRAM] float 
 20195 ;; Registers used:
 20196 ;;		wreg, status,2, status,0, cstack
 20197 ;; Tracked objects:
 20198 ;;		On entry : 0/0
 20199 ;;		On exit  : 0/0
 20200 ;;		Unchanged: 0/0
 20201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20202 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20205 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20206 ;;Total ram usage:        4 bytes
 20207 ;; Hardware stack levels used:    1
 20208 ;; Hardware stack levels required when called:    4
 20209 ;; This function calls:
 20210 ;;		___ftpack
 20211 ;; This function is called by:
 20212 ;;		_do_update_pwm
 20213 ;; This function uses a non-reentrant model
 20214 ;;
 20215                           
 20216                           	psect	text103
 20217  004A42                     __ptext103:
 20218                           	opt stack 0
 20219  004A42                     ___lbtoft:
 20220                           	opt stack 23
 20221                           
 20222                           ;incstack = 0
 20223                           ;___lbtoft@c stored from wreg
 20224  004A42  6E1C               	movwf	___lbtoft@c,c
 20225  004A44  501C               	movf	___lbtoft@c,w,c
 20226  004A46  6E11               	movwf	___ftpack@arg,c
 20227  004A48  6A12               	clrf	___ftpack@arg+1,c
 20228  004A4A  6A13               	clrf	___ftpack@arg+2,c
 20229  004A4C  0E8E               	movlw	142
 20230  004A4E  6E14               	movwf	___ftpack@exp,c
 20231  004A50  0E00               	movlw	0
 20232  004A52  6E15               	movwf	___ftpack@sign,c
 20233  004A54  EC2B  F01C         	call	___ftpack	;wreg free
 20234  004A58  C011  F019         	movff	?___ftpack,?___lbtoft
 20235  004A5C  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 20236  004A60  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 20237  004A64  D000               	goto	l1993
 20238  004A66                     l1993:
 20239  004A66  0012               	return		;funcret
 20240  004A68                     __end_of___lbtoft:
 20241                           	opt stack 0
 20242                           tblptru	equ	0xFF8
 20243                           tblptrh	equ	0xFF7
 20244                           tblptrl	equ	0xFF6
 20245                           tablat	equ	0xFF5
 20246                           prodh	equ	0xFF4
 20247                           prodl	equ	0xFF3
 20248                           intcon	equ	0xFF2
 20249                           intcon2	equ	0xFF1
 20250                           intcon3	equ	0xFF0
 20251                           postinc0	equ	0xFEE
 20252                           wreg	equ	0xFE8
 20253                           postdec1	equ	0xFE5
 20254                           plusw1	equ	0xFE3
 20255                           fsr1l	equ	0xFE1
 20256                           indf2	equ	0xFDF
 20257                           postinc2	equ	0xFDE
 20258                           postdec2	equ	0xFDD
 20259                           plusw2	equ	0xFDB
 20260                           fsr2h	equ	0xFDA
 20261                           fsr2l	equ	0xFD9
 20262                           status	equ	0xFD8
 20263                           
 20264 ;; *************** function ___fttol *****************
 20265 ;; Defined at:
 20266 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 20267 ;; Parameters:    Size  Location     Type
 20268 ;;  f1              3   45[COMRAM] float 
 20269 ;; Auto vars:     Size  Location     Type
 20270 ;;  lval            4   55[COMRAM] unsigned long 
 20271 ;;  exp1            1   59[COMRAM] unsigned char 
 20272 ;;  sign1           1   54[COMRAM] unsigned char 
 20273 ;; Return value:  Size  Location     Type
 20274 ;;                  4   45[COMRAM] long 
 20275 ;; Registers used:
 20276 ;;		wreg, status,2, status,0
 20277 ;; Tracked objects:
 20278 ;;		On entry : 0/0
 20279 ;;		On exit  : 0/0
 20280 ;;		Unchanged: 0/0
 20281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20283 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20284 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20285 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20286 ;;Total ram usage:       15 bytes
 20287 ;; Hardware stack levels used:    1
 20288 ;; Hardware stack levels required when called:    3
 20289 ;; This function calls:
 20290 ;;		Nothing
 20291 ;; This function is called by:
 20292 ;;		_do_update_pwm
 20293 ;;		_Update_Screen
 20294 ;;		_printf
 20295 ;; This function uses a non-reentrant model
 20296 ;;
 20297                           
 20298                           	psect	text104
 20299  0034D0                     __ptext104:
 20300                           	opt stack 0
 20301  0034D0                     ___fttol:
 20302                           	opt stack 26
 20303                           
 20304                           ;incstack = 0
 20305  0034D0  C030  F032         	movff	___fttol@f1+2,??___fttol
 20306  0034D4  6A33               	clrf	(??___fttol+1)& (0+255),c
 20307  0034D6  6A34               	clrf	(??___fttol+2)& (0+255),c
 20308  0034D8  342F               	rlcf	___fttol@f1+1,w,c
 20309  0034DA  3632               	rlcf	??___fttol& (0+255),f,c
 20310  0034DC  E301               	bnc	u7581
 20311  0034DE  8033               	bsf	(??___fttol+1)& (0+255),0,c
 20312  0034E0                     u7581:
 20313  0034E0  5032               	movf	??___fttol,w,c
 20314  0034E2  6E3C               	movwf	___fttol@exp1,c
 20315  0034E4  503C               	movf	___fttol@exp1,w,c
 20316  0034E6  A4D8               	btfss	status,2,c
 20317  0034E8  D002               	goto	l8976
 20318  0034EA  D039               	goto	l9000
 20319  0034EC  D063               	goto	l1952
 20320  0034EE                     l8976:
 20321  0034EE  0E17               	movlw	23
 20322  0034F0  6E32               	movwf	??___fttol& (0+255),c
 20323  0034F2  C02E  F033         	movff	___fttol@f1,??___fttol+1
 20324  0034F6  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
 20325  0034FA  C030  F035         	movff	___fttol@f1+2,??___fttol+3
 20326  0034FE  2832               	incf	??___fttol,w,c
 20327  003500  6E36               	movwf	(??___fttol+4)& (0+255),c
 20328  003502  D004               	goto	u7600
 20329  003504                     u7605:
 20330  003504  90D8               	bcf	status,0,c
 20331  003506  3235               	rrcf	??___fttol+3,f,c
 20332  003508  3234               	rrcf	??___fttol+2,f,c
 20333  00350A  3233               	rrcf	??___fttol+1,f,c
 20334  00350C                     u7600:
 20335  00350C  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
 20336  00350E  D7FA               	goto	u7605
 20337  003510  5033               	movf	??___fttol+1,w,c
 20338  003512  6E37               	movwf	___fttol@sign1,c
 20339  003514  8E2F               	bsf	___fttol@f1+1,7,c
 20340  003516  0EFF               	movlw	255
 20341  003518  162E               	andwf	___fttol@f1,f,c
 20342  00351A  0EFF               	movlw	255
 20343  00351C  162F               	andwf	___fttol@f1+1,f,c
 20344  00351E  0E00               	movlw	0
 20345  003520  1630               	andwf	___fttol@f1+2,f,c
 20346  003522  502E               	movf	___fttol@f1,w,c
 20347  003524  6E38               	movwf	___fttol@lval,c
 20348  003526  502F               	movf	___fttol@f1+1,w,c
 20349  003528  6E39               	movwf	___fttol@lval+1,c
 20350  00352A  5030               	movf	___fttol@f1+2,w,c
 20351  00352C  6E3A               	movwf	___fttol@lval+2,c
 20352  00352E  6A3B               	clrf	___fttol@lval+3,c
 20353  003530  0E8E               	movlw	142
 20354  003532  5E3C               	subwf	___fttol@exp1,f,c
 20355  003534  AE3C               	btfss	___fttol@exp1,7,c
 20356  003536  D010               	goto	l8998
 20357  003538  503C               	movf	___fttol@exp1,w,c
 20358  00353A  0A80               	xorlw	128
 20359  00353C  0F8F               	addlw	143
 20360  00353E  B0D8               	btfsc	status,0,c
 20361  003540  D003               	goto	l8994
 20362  003542  D00D               	goto	l9000
 20363  003544  D037               	goto	l1952
 20364  003546  D000               	goto	l8994
 20365  003548                     l8994:
 20366  003548  90D8               	bcf	status,0,c
 20367  00354A  323B               	rrcf	___fttol@lval+3,f,c
 20368  00354C  323A               	rrcf	___fttol@lval+2,f,c
 20369  00354E  3239               	rrcf	___fttol@lval+1,f,c
 20370  003550  3238               	rrcf	___fttol@lval,f,c
 20371  003552  3E3C               	incfsz	___fttol@exp1,f,c
 20372  003554  D7F9               	goto	l8994
 20373  003556  D019               	goto	l9008
 20374  003558                     l8998:
 20375  003558  0E17               	movlw	23
 20376  00355A  643C               	cpfsgt	___fttol@exp1,c
 20377  00355C  D011               	goto	l9006
 20378  00355E                     l9000:
 20379  00355E  0E00               	movlw	0
 20380  003560  6E2E               	movwf	?___fttol,c
 20381  003562  0E00               	movlw	0
 20382  003564  6E2F               	movwf	?___fttol+1,c
 20383  003566  0E00               	movlw	0
 20384  003568  6E30               	movwf	?___fttol+2,c
 20385  00356A  0E00               	movlw	0
 20386  00356C  6E31               	movwf	?___fttol+3,c
 20387  00356E  D022               	goto	l1952
 20388  003570  D007               	goto	l9006
 20389  003572                     l9004:
 20390  003572  90D8               	bcf	status,0,c
 20391  003574  3638               	rlcf	___fttol@lval,f,c
 20392  003576  3639               	rlcf	___fttol@lval+1,f,c
 20393  003578  363A               	rlcf	___fttol@lval+2,f,c
 20394  00357A  363B               	rlcf	___fttol@lval+3,f,c
 20395  00357C  063C               	decf	___fttol@exp1,f,c
 20396  00357E  D000               	goto	l9006
 20397  003580                     l9006:
 20398  003580  503C               	movf	___fttol@exp1,w,c
 20399  003582  B4D8               	btfsc	status,2,c
 20400  003584  D002               	goto	l9008
 20401  003586  D7F5               	goto	l9004
 20402  003588  D000               	goto	l9008
 20403  00358A                     l9008:
 20404  00358A  5037               	movf	___fttol@sign1,w,c
 20405  00358C  B4D8               	btfsc	status,2,c
 20406  00358E  D009               	goto	l9012
 20407  003590  1E3B               	comf	___fttol@lval+3,f,c
 20408  003592  1E3A               	comf	___fttol@lval+2,f,c
 20409  003594  1E39               	comf	___fttol@lval+1,f,c
 20410  003596  6C38               	negf	___fttol@lval,c
 20411  003598  0E00               	movlw	0
 20412  00359A  2239               	addwfc	___fttol@lval+1,f,c
 20413  00359C  223A               	addwfc	___fttol@lval+2,f,c
 20414  00359E  223B               	addwfc	___fttol@lval+3,f,c
 20415  0035A0  D000               	goto	l9012
 20416  0035A2                     l9012:
 20417  0035A2  C038  F02E         	movff	___fttol@lval,?___fttol
 20418  0035A6  C039  F02F         	movff	___fttol@lval+1,?___fttol+1
 20419  0035AA  C03A  F030         	movff	___fttol@lval+2,?___fttol+2
 20420  0035AE  C03B  F031         	movff	___fttol@lval+3,?___fttol+3
 20421  0035B2  D000               	goto	l1952
 20422  0035B4                     l1952:
 20423  0035B4  0012               	return		;funcret
 20424  0035B6                     __end_of___fttol:
 20425                           	opt stack 0
 20426                           tblptru	equ	0xFF8
 20427                           tblptrh	equ	0xFF7
 20428                           tblptrl	equ	0xFF6
 20429                           tablat	equ	0xFF5
 20430                           prodh	equ	0xFF4
 20431                           prodl	equ	0xFF3
 20432                           intcon	equ	0xFF2
 20433                           intcon2	equ	0xFF1
 20434                           intcon3	equ	0xFF0
 20435                           postinc0	equ	0xFEE
 20436                           wreg	equ	0xFE8
 20437                           postdec1	equ	0xFE5
 20438                           plusw1	equ	0xFE3
 20439                           fsr1l	equ	0xFE1
 20440                           indf2	equ	0xFDF
 20441                           postinc2	equ	0xFDE
 20442                           postdec2	equ	0xFDD
 20443                           plusw2	equ	0xFDB
 20444                           fsr2h	equ	0xFDA
 20445                           fsr2l	equ	0xFD9
 20446                           status	equ	0xFD8
 20447                           
 20448 ;; *************** function ___ftmul *****************
 20449 ;; Defined at:
 20450 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 20451 ;; Parameters:    Size  Location     Type
 20452 ;;  f1              3   30[COMRAM] float 
 20453 ;;  f2              3   33[COMRAM] float 
 20454 ;; Auto vars:     Size  Location     Type
 20455 ;;  f3_as_produc    3   40[COMRAM] unsigned um
 20456 ;;  sign            1   44[COMRAM] unsigned char 
 20457 ;;  cntr            1   43[COMRAM] unsigned char 
 20458 ;;  exp             1   39[COMRAM] unsigned char 
 20459 ;; Return value:  Size  Location     Type
 20460 ;;                  3   30[COMRAM] float 
 20461 ;; Registers used:
 20462 ;;		wreg, status,2, status,0, cstack
 20463 ;; Tracked objects:
 20464 ;;		On entry : 0/0
 20465 ;;		On exit  : 0/0
 20466 ;;		Unchanged: 0/0
 20467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20468 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20469 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20470 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20471 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20472 ;;Total ram usage:       15 bytes
 20473 ;; Hardware stack levels used:    1
 20474 ;; Hardware stack levels required when called:    4
 20475 ;; This function calls:
 20476 ;;		___ftpack
 20477 ;; This function is called by:
 20478 ;;		_do_update_pwm
 20479 ;;		_Update_Screen
 20480 ;;		_fround
 20481 ;;		_scale
 20482 ;;		_printf
 20483 ;; This function uses a non-reentrant model
 20484 ;;
 20485                           
 20486                           	psect	text105
 20487  0031FC                     __ptext105:
 20488                           	opt stack 0
 20489  0031FC                     ___ftmul:
 20490                           	opt stack 24
 20491                           
 20492                           ;incstack = 0
 20493  0031FC  C021  F025         	movff	___ftmul@f1+2,??___ftmul
 20494  003200  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20495  003202  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20496  003204  3420               	rlcf	___ftmul@f1+1,w,c
 20497  003206  3625               	rlcf	??___ftmul& (0+255),f,c
 20498  003208  E301               	bnc	u6951
 20499  00320A  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20500  00320C                     u6951:
 20501  00320C  5025               	movf	??___ftmul,w,c
 20502  00320E  6E28               	movwf	___ftmul@exp,c
 20503  003210  5028               	movf	___ftmul@exp,w,c
 20504  003212  A4D8               	btfss	status,2,c
 20505  003214  D002               	goto	l8482
 20506  003216  D00E               	goto	l8484
 20507  003218  D06C               	goto	l1931
 20508  00321A                     l8482:
 20509  00321A  C024  F025         	movff	___ftmul@f2+2,??___ftmul
 20510  00321E  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20511  003220  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20512  003222  3423               	rlcf	___ftmul@f2+1,w,c
 20513  003224  3625               	rlcf	??___ftmul& (0+255),f,c
 20514  003226  E301               	bnc	u6971
 20515  003228  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20516  00322A                     u6971:
 20517  00322A  5025               	movf	??___ftmul,w,c
 20518  00322C  6E2D               	movwf	___ftmul@sign,c
 20519  00322E  502D               	movf	___ftmul@sign,w,c
 20520  003230  A4D8               	btfss	status,2,c
 20521  003232  D007               	goto	l8488
 20522  003234                     l8484:
 20523  003234  0E00               	movlw	0
 20524  003236  6E1F               	movwf	?___ftmul,c
 20525  003238  0E00               	movlw	0
 20526  00323A  6E20               	movwf	?___ftmul+1,c
 20527  00323C  0E00               	movlw	0
 20528  00323E  6E21               	movwf	?___ftmul+2,c
 20529  003240  D058               	goto	l1931
 20530  003242                     l8488:
 20531  003242  502D               	movf	___ftmul@sign,w,c
 20532  003244  0F7B               	addlw	123
 20533  003246  2628               	addwf	___ftmul@exp,f,c
 20534  003248  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
 20535  00324C  5024               	movf	___ftmul@f2+2,w,c
 20536  00324E  1A2D               	xorwf	___ftmul@sign,f,c
 20537  003250  0E80               	movlw	128
 20538  003252  162D               	andwf	___ftmul@sign,f,c
 20539  003254  8E20               	bsf	___ftmul@f1+1,7,c
 20540  003256  8E23               	bsf	___ftmul@f2+1,7,c
 20541  003258  0EFF               	movlw	255
 20542  00325A  1622               	andwf	___ftmul@f2,f,c
 20543  00325C  0EFF               	movlw	255
 20544  00325E  1623               	andwf	___ftmul@f2+1,f,c
 20545  003260  0E00               	movlw	0
 20546  003262  1624               	andwf	___ftmul@f2+2,f,c
 20547  003264  0E00               	movlw	0
 20548  003266  6E29               	movwf	___ftmul@f3_as_product,c
 20549  003268  0E00               	movlw	0
 20550  00326A  6E2A               	movwf	___ftmul@f3_as_product+1,c
 20551  00326C  0E00               	movlw	0
 20552  00326E  6E2B               	movwf	___ftmul@f3_as_product+2,c
 20553  003270  0E07               	movlw	7
 20554  003272  6E2C               	movwf	___ftmul@cntr,c
 20555  003274  D000               	goto	l8502
 20556  003276                     l8502:
 20557  003276  A01F               	btfss	___ftmul@f1,0,c
 20558  003278  D007               	goto	l8506
 20559  00327A  5022               	movf	___ftmul@f2,w,c
 20560  00327C  2629               	addwf	___ftmul@f3_as_product,f,c
 20561  00327E  5023               	movf	___ftmul@f2+1,w,c
 20562  003280  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20563  003282  5024               	movf	___ftmul@f2+2,w,c
 20564  003284  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20565  003286  D000               	goto	l8506
 20566  003288                     l8506:
 20567  003288  90D8               	bcf	status,0,c
 20568  00328A  3221               	rrcf	___ftmul@f1+2,f,c
 20569  00328C  3220               	rrcf	___ftmul@f1+1,f,c
 20570  00328E  321F               	rrcf	___ftmul@f1,f,c
 20571  003290  90D8               	bcf	status,0,c
 20572  003292  3622               	rlcf	___ftmul@f2,f,c
 20573  003294  3623               	rlcf	___ftmul@f2+1,f,c
 20574  003296  3624               	rlcf	___ftmul@f2+2,f,c
 20575  003298  2E2C               	decfsz	___ftmul@cntr,f,c
 20576  00329A  D7ED               	goto	l8502
 20577  00329C  D000               	goto	l8510
 20578  00329E                     l8510:
 20579  00329E  0E09               	movlw	9
 20580  0032A0  6E2C               	movwf	___ftmul@cntr,c
 20581  0032A2  D000               	goto	l8512
 20582  0032A4                     l8512:
 20583  0032A4  A01F               	btfss	___ftmul@f1,0,c
 20584  0032A6  D007               	goto	l8516
 20585  0032A8  5022               	movf	___ftmul@f2,w,c
 20586  0032AA  2629               	addwf	___ftmul@f3_as_product,f,c
 20587  0032AC  5023               	movf	___ftmul@f2+1,w,c
 20588  0032AE  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20589  0032B0  5024               	movf	___ftmul@f2+2,w,c
 20590  0032B2  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20591  0032B4  D000               	goto	l8516
 20592  0032B6                     l8516:
 20593  0032B6  90D8               	bcf	status,0,c
 20594  0032B8  3221               	rrcf	___ftmul@f1+2,f,c
 20595  0032BA  3220               	rrcf	___ftmul@f1+1,f,c
 20596  0032BC  321F               	rrcf	___ftmul@f1,f,c
 20597  0032BE  90D8               	bcf	status,0,c
 20598  0032C0  322B               	rrcf	___ftmul@f3_as_product+2,f,c
 20599  0032C2  322A               	rrcf	___ftmul@f3_as_product+1,f,c
 20600  0032C4  3229               	rrcf	___ftmul@f3_as_product,f,c
 20601  0032C6  2E2C               	decfsz	___ftmul@cntr,f,c
 20602  0032C8  D7ED               	goto	l8512
 20603  0032CA  D000               	goto	l8520
 20604  0032CC                     l8520:
 20605  0032CC  C029  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 20606  0032D0  C02A  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 20607  0032D4  C02B  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 20608  0032D8  C028  F014         	movff	___ftmul@exp,___ftpack@exp
 20609  0032DC  C02D  F015         	movff	___ftmul@sign,___ftpack@sign
 20610  0032E0  EC2B  F01C         	call	___ftpack	;wreg free
 20611  0032E4  C011  F01F         	movff	?___ftpack,?___ftmul
 20612  0032E8  C012  F020         	movff	?___ftpack+1,?___ftmul+1
 20613  0032EC  C013  F021         	movff	?___ftpack+2,?___ftmul+2
 20614  0032F0  D000               	goto	l1931
 20615  0032F2                     l1931:
 20616  0032F2  0012               	return		;funcret
 20617  0032F4                     __end_of___ftmul:
 20618                           	opt stack 0
 20619                           tblptru	equ	0xFF8
 20620                           tblptrh	equ	0xFF7
 20621                           tblptrl	equ	0xFF6
 20622                           tablat	equ	0xFF5
 20623                           prodh	equ	0xFF4
 20624                           prodl	equ	0xFF3
 20625                           intcon	equ	0xFF2
 20626                           intcon2	equ	0xFF1
 20627                           intcon3	equ	0xFF0
 20628                           postinc0	equ	0xFEE
 20629                           wreg	equ	0xFE8
 20630                           postdec1	equ	0xFE5
 20631                           plusw1	equ	0xFE3
 20632                           fsr1l	equ	0xFE1
 20633                           indf2	equ	0xFDF
 20634                           postinc2	equ	0xFDE
 20635                           postdec2	equ	0xFDD
 20636                           plusw2	equ	0xFDB
 20637                           fsr2h	equ	0xFDA
 20638                           fsr2l	equ	0xFD9
 20639                           status	equ	0xFD8
 20640                           
 20641 ;; *************** function ___ftdiv *****************
 20642 ;; Defined at:
 20643 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 20644 ;; Parameters:    Size  Location     Type
 20645 ;;  f1              3   45[COMRAM] float 
 20646 ;;  f2              3   48[COMRAM] float 
 20647 ;; Auto vars:     Size  Location     Type
 20648 ;;  f3              3   55[COMRAM] float 
 20649 ;;  sign            1   59[COMRAM] unsigned char 
 20650 ;;  exp             1   58[COMRAM] unsigned char 
 20651 ;;  cntr            1   54[COMRAM] unsigned char 
 20652 ;; Return value:  Size  Location     Type
 20653 ;;                  3   45[COMRAM] float 
 20654 ;; Registers used:
 20655 ;;		wreg, status,2, status,0, cstack
 20656 ;; Tracked objects:
 20657 ;;		On entry : 0/0
 20658 ;;		On exit  : 0/0
 20659 ;;		Unchanged: 0/0
 20660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20661 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20662 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20663 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20664 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20665 ;;Total ram usage:       15 bytes
 20666 ;; Hardware stack levels used:    1
 20667 ;; Hardware stack levels required when called:    4
 20668 ;; This function calls:
 20669 ;;		___ftpack
 20670 ;; This function is called by:
 20671 ;;		_do_update_pwm
 20672 ;;		_Read_Volt
 20673 ;; This function uses a non-reentrant model
 20674 ;;
 20675                           
 20676                           	psect	text106
 20677  003698                     __ptext106:
 20678                           	opt stack 0
 20679  003698                     ___ftdiv:
 20680                           	opt stack 23
 20681                           
 20682                           ;incstack = 0
 20683  003698  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
 20684  00369C  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20685  00369E  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20686  0036A0  342F               	rlcf	___ftdiv@f1+1,w,c
 20687  0036A2  3634               	rlcf	??___ftdiv& (0+255),f,c
 20688  0036A4  E301               	bnc	u8311
 20689  0036A6  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20690  0036A8                     u8311:
 20691  0036A8  5034               	movf	??___ftdiv,w,c
 20692  0036AA  6E3B               	movwf	___ftdiv@exp,c
 20693  0036AC  503B               	movf	___ftdiv@exp,w,c
 20694  0036AE  A4D8               	btfss	status,2,c
 20695  0036B0  D002               	goto	l9424
 20696  0036B2  D00E               	goto	l9426
 20697  0036B4  D061               	goto	l1899
 20698  0036B6                     l9424:
 20699  0036B6  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
 20700  0036BA  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20701  0036BC  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20702  0036BE  3432               	rlcf	___ftdiv@f2+1,w,c
 20703  0036C0  3634               	rlcf	??___ftdiv& (0+255),f,c
 20704  0036C2  E301               	bnc	u8331
 20705  0036C4  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20706  0036C6                     u8331:
 20707  0036C6  5034               	movf	??___ftdiv,w,c
 20708  0036C8  6E3C               	movwf	___ftdiv@sign,c
 20709  0036CA  503C               	movf	___ftdiv@sign,w,c
 20710  0036CC  A4D8               	btfss	status,2,c
 20711  0036CE  D007               	goto	l9430
 20712  0036D0                     l9426:
 20713  0036D0  0E00               	movlw	0
 20714  0036D2  6E2E               	movwf	?___ftdiv,c
 20715  0036D4  0E00               	movlw	0
 20716  0036D6  6E2F               	movwf	?___ftdiv+1,c
 20717  0036D8  0E00               	movlw	0
 20718  0036DA  6E30               	movwf	?___ftdiv+2,c
 20719  0036DC  D04D               	goto	l1899
 20720  0036DE                     l9430:
 20721  0036DE  0E00               	movlw	0
 20722  0036E0  6E38               	movwf	___ftdiv@f3,c
 20723  0036E2  0E00               	movlw	0
 20724  0036E4  6E39               	movwf	___ftdiv@f3+1,c
 20725  0036E6  0E00               	movlw	0
 20726  0036E8  6E3A               	movwf	___ftdiv@f3+2,c
 20727  0036EA  503C               	movf	___ftdiv@sign,w,c
 20728  0036EC  0F89               	addlw	137
 20729  0036EE  5E3B               	subwf	___ftdiv@exp,f,c
 20730  0036F0  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
 20731  0036F4  5033               	movf	___ftdiv@f2+2,w,c
 20732  0036F6  1A3C               	xorwf	___ftdiv@sign,f,c
 20733  0036F8  0E80               	movlw	128
 20734  0036FA  163C               	andwf	___ftdiv@sign,f,c
 20735  0036FC  8E2F               	bsf	___ftdiv@f1+1,7,c
 20736  0036FE  0EFF               	movlw	255
 20737  003700  162E               	andwf	___ftdiv@f1,f,c
 20738  003702  0EFF               	movlw	255
 20739  003704  162F               	andwf	___ftdiv@f1+1,f,c
 20740  003706  0E00               	movlw	0
 20741  003708  1630               	andwf	___ftdiv@f1+2,f,c
 20742  00370A  8E32               	bsf	___ftdiv@f2+1,7,c
 20743  00370C  0EFF               	movlw	255
 20744  00370E  1631               	andwf	___ftdiv@f2,f,c
 20745  003710  0EFF               	movlw	255
 20746  003712  1632               	andwf	___ftdiv@f2+1,f,c
 20747  003714  0E00               	movlw	0
 20748  003716  1633               	andwf	___ftdiv@f2+2,f,c
 20749  003718  0E18               	movlw	24
 20750  00371A  6E37               	movwf	___ftdiv@cntr,c
 20751  00371C  D000               	goto	l9450
 20752  00371E                     l9450:
 20753  00371E  90D8               	bcf	status,0,c
 20754  003720  3638               	rlcf	___ftdiv@f3,f,c
 20755  003722  3639               	rlcf	___ftdiv@f3+1,f,c
 20756  003724  363A               	rlcf	___ftdiv@f3+2,f,c
 20757  003726  5031               	movf	___ftdiv@f2,w,c
 20758  003728  5C2E               	subwf	___ftdiv@f1,w,c
 20759  00372A  5032               	movf	___ftdiv@f2+1,w,c
 20760  00372C  582F               	subwfb	___ftdiv@f1+1,w,c
 20761  00372E  5033               	movf	___ftdiv@f2+2,w,c
 20762  003730  5830               	subwfb	___ftdiv@f1+2,w,c
 20763  003732  A0D8               	btfss	status,0,c
 20764  003734  D007               	goto	l1902
 20765  003736  5031               	movf	___ftdiv@f2,w,c
 20766  003738  5E2E               	subwf	___ftdiv@f1,f,c
 20767  00373A  5032               	movf	___ftdiv@f2+1,w,c
 20768  00373C  5A2F               	subwfb	___ftdiv@f1+1,f,c
 20769  00373E  5033               	movf	___ftdiv@f2+2,w,c
 20770  003740  5A30               	subwfb	___ftdiv@f1+2,f,c
 20771  003742  8038               	bsf	___ftdiv@f3,0,c
 20772  003744                     l1902:
 20773  003744  90D8               	bcf	status,0,c
 20774  003746  362E               	rlcf	___ftdiv@f1,f,c
 20775  003748  362F               	rlcf	___ftdiv@f1+1,f,c
 20776  00374A  3630               	rlcf	___ftdiv@f1+2,f,c
 20777  00374C  2E37               	decfsz	___ftdiv@cntr,f,c
 20778  00374E  D7E7               	goto	l9450
 20779  003750  D000               	goto	l9460
 20780  003752                     l9460:
 20781  003752  C038  F011         	movff	___ftdiv@f3,___ftpack@arg
 20782  003756  C039  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 20783  00375A  C03A  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 20784  00375E  C03B  F014         	movff	___ftdiv@exp,___ftpack@exp
 20785  003762  C03C  F015         	movff	___ftdiv@sign,___ftpack@sign
 20786  003766  EC2B  F01C         	call	___ftpack	;wreg free
 20787  00376A  C011  F02E         	movff	?___ftpack,?___ftdiv
 20788  00376E  C012  F02F         	movff	?___ftpack+1,?___ftdiv+1
 20789  003772  C013  F030         	movff	?___ftpack+2,?___ftdiv+2
 20790  003776  D000               	goto	l1899
 20791  003778                     l1899:
 20792  003778  0012               	return		;funcret
 20793  00377A                     __end_of___ftdiv:
 20794                           	opt stack 0
 20795                           tblptru	equ	0xFF8
 20796                           tblptrh	equ	0xFF7
 20797                           tblptrl	equ	0xFF6
 20798                           tablat	equ	0xFF5
 20799                           prodh	equ	0xFF4
 20800                           prodl	equ	0xFF3
 20801                           intcon	equ	0xFF2
 20802                           intcon2	equ	0xFF1
 20803                           intcon3	equ	0xFF0
 20804                           postinc0	equ	0xFEE
 20805                           wreg	equ	0xFE8
 20806                           postdec1	equ	0xFE5
 20807                           plusw1	equ	0xFE3
 20808                           fsr1l	equ	0xFE1
 20809                           indf2	equ	0xFDF
 20810                           postinc2	equ	0xFDE
 20811                           postdec2	equ	0xFDD
 20812                           plusw2	equ	0xFDB
 20813                           fsr2h	equ	0xFDA
 20814                           fsr2l	equ	0xFD9
 20815                           status	equ	0xFD8
 20816                           
 20817 ;; *************** function ___ftpack *****************
 20818 ;; Defined at:
 20819 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 20820 ;; Parameters:    Size  Location     Type
 20821 ;;  arg             3   16[COMRAM] unsigned um
 20822 ;;  exp             1   19[COMRAM] unsigned char 
 20823 ;;  sign            1   20[COMRAM] unsigned char 
 20824 ;; Auto vars:     Size  Location     Type
 20825 ;;		None
 20826 ;; Return value:  Size  Location     Type
 20827 ;;                  3   16[COMRAM] float 
 20828 ;; Registers used:
 20829 ;;		wreg, status,2, status,0
 20830 ;; Tracked objects:
 20831 ;;		On entry : 0/0
 20832 ;;		On exit  : 0/0
 20833 ;;		Unchanged: 0/0
 20834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20835 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20837 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20838 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20839 ;;Total ram usage:        8 bytes
 20840 ;; Hardware stack levels used:    1
 20841 ;; Hardware stack levels required when called:    3
 20842 ;; This function calls:
 20843 ;;		Nothing
 20844 ;; This function is called by:
 20845 ;;		___awtoft
 20846 ;;		___ftadd
 20847 ;;		___ftdiv
 20848 ;;		___ftmul
 20849 ;;		___lbtoft
 20850 ;;		___lltoft
 20851 ;; This function uses a non-reentrant model
 20852 ;;
 20853                           
 20854                           	psect	text107
 20855  003856                     __ptext107:
 20856                           	opt stack 0
 20857  003856                     ___ftpack:
 20858                           	opt stack 24
 20859                           
 20860                           ;incstack = 0
 20861  003856  5014               	movf	___ftpack@exp,w,c
 20862  003858  B4D8               	btfsc	status,2,c
 20863  00385A  D005               	goto	l8360
 20864  00385C  5011               	movf	___ftpack@arg,w,c
 20865  00385E  1012               	iorwf	___ftpack@arg+1,w,c
 20866  003860  1013               	iorwf	___ftpack@arg+2,w,c
 20867  003862  A4D8               	btfss	status,2,c
 20868  003864  D00E               	goto	l8366
 20869  003866                     l8360:
 20870  003866  0E00               	movlw	0
 20871  003868  6E11               	movwf	?___ftpack,c
 20872  00386A  0E00               	movlw	0
 20873  00386C  6E12               	movwf	?___ftpack+1,c
 20874  00386E  0E00               	movlw	0
 20875  003870  6E13               	movwf	?___ftpack+2,c
 20876  003872  D053               	goto	l1827
 20877  003874  D006               	goto	l8366
 20878  003876                     l8364:
 20879  003876  2A14               	incf	___ftpack@exp,f,c
 20880  003878  90D8               	bcf	status,0,c
 20881  00387A  3213               	rrcf	___ftpack@arg+2,f,c
 20882  00387C  3212               	rrcf	___ftpack@arg+1,f,c
 20883  00387E  3211               	rrcf	___ftpack@arg,f,c
 20884  003880  D000               	goto	l8366
 20885  003882                     l8366:
 20886  003882  0E00               	movlw	0
 20887  003884  1411               	andwf	___ftpack@arg,w,c
 20888  003886  6E16               	movwf	??___ftpack& (0+255),c
 20889  003888  0E00               	movlw	0
 20890  00388A  1412               	andwf	___ftpack@arg+1,w,c
 20891  00388C  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20892  00388E  0EFE               	movlw	254
 20893  003890  1413               	andwf	___ftpack@arg+2,w,c
 20894  003892  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20895  003894  5016               	movf	??___ftpack,w,c
 20896  003896  1017               	iorwf	??___ftpack+1,w,c
 20897  003898  1018               	iorwf	??___ftpack+2,w,c
 20898  00389A  B4D8               	btfsc	status,2,c
 20899  00389C  D00E               	goto	l8372
 20900  00389E  D7EB               	goto	l8364
 20901  0038A0  D00C               	goto	l8372
 20902  0038A2                     l8368:
 20903  0038A2  2A14               	incf	___ftpack@exp,f,c
 20904  0038A4  0E01               	movlw	1
 20905  0038A6  2611               	addwf	___ftpack@arg,f,c
 20906  0038A8  0E00               	movlw	0
 20907  0038AA  2212               	addwfc	___ftpack@arg+1,f,c
 20908  0038AC  0E00               	movlw	0
 20909  0038AE  2213               	addwfc	___ftpack@arg+2,f,c
 20910  0038B0  90D8               	bcf	status,0,c
 20911  0038B2  3213               	rrcf	___ftpack@arg+2,f,c
 20912  0038B4  3212               	rrcf	___ftpack@arg+1,f,c
 20913  0038B6  3211               	rrcf	___ftpack@arg,f,c
 20914  0038B8  D000               	goto	l8372
 20915  0038BA                     l8372:
 20916  0038BA  0E00               	movlw	0
 20917  0038BC  1411               	andwf	___ftpack@arg,w,c
 20918  0038BE  6E16               	movwf	??___ftpack& (0+255),c
 20919  0038C0  0E00               	movlw	0
 20920  0038C2  1412               	andwf	___ftpack@arg+1,w,c
 20921  0038C4  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20922  0038C6  0EFF               	movlw	255
 20923  0038C8  1413               	andwf	___ftpack@arg+2,w,c
 20924  0038CA  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20925  0038CC  5016               	movf	??___ftpack,w,c
 20926  0038CE  1017               	iorwf	??___ftpack+1,w,c
 20927  0038D0  1018               	iorwf	??___ftpack+2,w,c
 20928  0038D2  B4D8               	btfsc	status,2,c
 20929  0038D4  D008               	goto	l8376
 20930  0038D6  D7E5               	goto	l8368
 20931  0038D8  D006               	goto	l8376
 20932  0038DA                     l8374:
 20933  0038DA  0614               	decf	___ftpack@exp,f,c
 20934  0038DC  90D8               	bcf	status,0,c
 20935  0038DE  3611               	rlcf	___ftpack@arg,f,c
 20936  0038E0  3612               	rlcf	___ftpack@arg+1,f,c
 20937  0038E2  3613               	rlcf	___ftpack@arg+2,f,c
 20938  0038E4  D000               	goto	l8376
 20939  0038E6                     l8376:
 20940  0038E6  BE12               	btfsc	___ftpack@arg+1,7,c
 20941  0038E8  D004               	goto	l1838
 20942  0038EA  0E02               	movlw	2
 20943  0038EC  6014               	cpfslt	___ftpack@exp,c
 20944  0038EE  D7F5               	goto	l8374
 20945  0038F0  D000               	goto	l1838
 20946  0038F2                     l1838:
 20947  0038F2  B014               	btfsc	___ftpack@exp,0,c
 20948  0038F4  D002               	goto	l8382
 20949  0038F6  9E12               	bcf	___ftpack@arg+1,7,c
 20950  0038F8  D000               	goto	l8382
 20951  0038FA                     l8382:
 20952  0038FA  90D8               	bcf	status,0,c
 20953  0038FC  3214               	rrcf	___ftpack@exp,f,c
 20954  0038FE  5014               	movf	___ftpack@exp,w,c
 20955  003900  1213               	iorwf	___ftpack@arg+2,f,c
 20956  003902  5015               	movf	___ftpack@sign,w,c
 20957  003904  B4D8               	btfsc	status,2,c
 20958  003906  D002               	goto	l8388
 20959  003908  8E13               	bsf	___ftpack@arg+2,7,c
 20960  00390A  D000               	goto	l8388
 20961  00390C                     l8388:
 20962  00390C  C011  F011         	movff	___ftpack@arg,?___ftpack
 20963  003910  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 20964  003914  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 20965  003918  D000               	goto	l1827
 20966  00391A                     l1827:
 20967  00391A  0012               	return		;funcret
 20968  00391C                     __end_of___ftpack:
 20969                           	opt stack 0
 20970                           tblptru	equ	0xFF8
 20971                           tblptrh	equ	0xFF7
 20972                           tblptrl	equ	0xFF6
 20973                           tablat	equ	0xFF5
 20974                           prodh	equ	0xFF4
 20975                           prodl	equ	0xFF3
 20976                           intcon	equ	0xFF2
 20977                           intcon2	equ	0xFF1
 20978                           intcon3	equ	0xFF0
 20979                           postinc0	equ	0xFEE
 20980                           wreg	equ	0xFE8
 20981                           postdec1	equ	0xFE5
 20982                           plusw1	equ	0xFE3
 20983                           fsr1l	equ	0xFE1
 20984                           indf2	equ	0xFDF
 20985                           postinc2	equ	0xFDE
 20986                           postdec2	equ	0xFDD
 20987                           plusw2	equ	0xFDB
 20988                           fsr2h	equ	0xFDA
 20989                           fsr2l	equ	0xFD9
 20990                           status	equ	0xFD8
 20991                           
 20992 ;; *************** function _Wait_Half_Sec *****************
 20993 ;; Defined at:
 20994 ;;		line 99 in file "utils.c"
 20995 ;; Parameters:    Size  Location     Type
 20996 ;;		None
 20997 ;; Auto vars:     Size  Location     Type
 20998 ;;  k               2   16[COMRAM] unsigned int 
 20999 ;; Return value:  Size  Location     Type
 21000 ;;		None               void
 21001 ;; Registers used:
 21002 ;;		wreg, status,2, status,0
 21003 ;; Tracked objects:
 21004 ;;		On entry : 0/0
 21005 ;;		On exit  : 0/0
 21006 ;;		Unchanged: 0/0
 21007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21009 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21012 ;;Total ram usage:        2 bytes
 21013 ;; Hardware stack levels used:    1
 21014 ;; Hardware stack levels required when called:    3
 21015 ;; This function calls:
 21016 ;;		Nothing
 21017 ;; This function is called by:
 21018 ;;		_Do_Beep
 21019 ;;		_Do_Beep_Good
 21020 ;;		_Do_Beep_Bad
 21021 ;; This function uses a non-reentrant model
 21022 ;;
 21023                           
 21024                           	psect	text108
 21025  004C20                     __ptext108:
 21026                           	opt stack 0
 21027  004C20                     _Wait_Half_Sec:
 21028                           	opt stack 25
 21029                           
 21030                           ;utils.c: 101: for (unsigned int k=0;k<0x8000;k++);
 21031                           
 21032                           ;incstack = 0
 21033  004C20  0E00               	movlw	0
 21034  004C22  6E12               	movwf	Wait_Half_Sec@k+1,c
 21035  004C24  0E00               	movlw	0
 21036  004C26  6E11               	movwf	Wait_Half_Sec@k,c
 21037  004C28                     l6668:
 21038  004C28  0E80               	movlw	128
 21039  004C2A  5C12               	subwf	Wait_Half_Sec@k+1,w,c
 21040  004C2C  B0D8               	btfsc	status,0,c
 21041  004C2E  D005               	goto	l468
 21042  004C30  D001               	goto	l6672
 21043  004C32  D003               	goto	l468
 21044  004C34                     l6672:
 21045  004C34  4A11               	infsnz	Wait_Half_Sec@k,f,c
 21046  004C36  2A12               	incf	Wait_Half_Sec@k+1,f,c
 21047  004C38  D7F7               	goto	l6668
 21048  004C3A                     l468:
 21049  004C3A  0012               	return		;funcret
 21050  004C3C                     __end_of_Wait_Half_Sec:
 21051                           	opt stack 0
 21052                           tblptru	equ	0xFF8
 21053                           tblptrh	equ	0xFF7
 21054                           tblptrl	equ	0xFF6
 21055                           tablat	equ	0xFF5
 21056                           prodh	equ	0xFF4
 21057                           prodl	equ	0xFF3
 21058                           intcon	equ	0xFF2
 21059                           intcon2	equ	0xFF1
 21060                           intcon3	equ	0xFF0
 21061                           postinc0	equ	0xFEE
 21062                           wreg	equ	0xFE8
 21063                           postdec1	equ	0xFE5
 21064                           plusw1	equ	0xFE3
 21065                           fsr1l	equ	0xFE1
 21066                           indf2	equ	0xFDF
 21067                           postinc2	equ	0xFDE
 21068                           postdec2	equ	0xFDD
 21069                           plusw2	equ	0xFDB
 21070                           fsr2h	equ	0xFDA
 21071                           fsr2l	equ	0xFD9
 21072                           status	equ	0xFD8
 21073                           
 21074 ;; *************** function _Deactivate_Buzzer *****************
 21075 ;; Defined at:
 21076 ;;		line 136 in file "utils.c"
 21077 ;; Parameters:    Size  Location     Type
 21078 ;;		None
 21079 ;; Auto vars:     Size  Location     Type
 21080 ;;		None
 21081 ;; Return value:  Size  Location     Type
 21082 ;;		None               void
 21083 ;; Registers used:
 21084 ;;		wreg, status,2
 21085 ;; Tracked objects:
 21086 ;;		On entry : 0/0
 21087 ;;		On exit  : 0/0
 21088 ;;		Unchanged: 0/0
 21089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21094 ;;Total ram usage:        0 bytes
 21095 ;; Hardware stack levels used:    1
 21096 ;; Hardware stack levels required when called:    3
 21097 ;; This function calls:
 21098 ;;		Nothing
 21099 ;; This function is called by:
 21100 ;;		_Do_Beep
 21101 ;;		_Do_Beep_Good
 21102 ;;		_Do_Beep_Bad
 21103 ;; This function uses a non-reentrant model
 21104 ;;
 21105                           
 21106                           	psect	text109
 21107  004E20                     __ptext109:
 21108                           	opt stack 0
 21109  004E20                     _Deactivate_Buzzer:
 21110                           	opt stack 25
 21111                           
 21112                           ;utils.c: 138: CCP2CON = 0x0;
 21113                           
 21114                           ;incstack = 0
 21115  004E20  0E00               	movlw	0
 21116  004E22  6EBA               	movwf	4026,c	;volatile
 21117                           
 21118                           ;utils.c: 139: PORTCbits.RC1 = 0;
 21119  004E24  9282               	bcf	3970,1,c	;volatile
 21120  004E26  0012               	return		;funcret
 21121  004E28                     __end_of_Deactivate_Buzzer:
 21122                           	opt stack 0
 21123                           tblptru	equ	0xFF8
 21124                           tblptrh	equ	0xFF7
 21125                           tblptrl	equ	0xFF6
 21126                           tablat	equ	0xFF5
 21127                           prodh	equ	0xFF4
 21128                           prodl	equ	0xFF3
 21129                           intcon	equ	0xFF2
 21130                           intcon2	equ	0xFF1
 21131                           intcon3	equ	0xFF0
 21132                           postinc0	equ	0xFEE
 21133                           wreg	equ	0xFE8
 21134                           postdec1	equ	0xFE5
 21135                           plusw1	equ	0xFE3
 21136                           fsr1l	equ	0xFE1
 21137                           indf2	equ	0xFDF
 21138                           postinc2	equ	0xFDE
 21139                           postdec2	equ	0xFDD
 21140                           plusw2	equ	0xFDB
 21141                           fsr2h	equ	0xFDA
 21142                           fsr2l	equ	0xFD9
 21143                           status	equ	0xFD8
 21144                           
 21145 ;; *************** function _Activate_Buzzer *****************
 21146 ;; Defined at:
 21147 ;;		line 104 in file "utils.c"
 21148 ;; Parameters:    Size  Location     Type
 21149 ;;		None
 21150 ;; Auto vars:     Size  Location     Type
 21151 ;;		None
 21152 ;; Return value:  Size  Location     Type
 21153 ;;		None               void
 21154 ;; Registers used:
 21155 ;;		wreg, status,2
 21156 ;; Tracked objects:
 21157 ;;		On entry : 0/0
 21158 ;;		On exit  : 0/0
 21159 ;;		Unchanged: 0/0
 21160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21165 ;;Total ram usage:        0 bytes
 21166 ;; Hardware stack levels used:    1
 21167 ;; Hardware stack levels required when called:    3
 21168 ;; This function calls:
 21169 ;;		Nothing
 21170 ;; This function is called by:
 21171 ;;		_Do_Beep
 21172 ;; This function uses a non-reentrant model
 21173 ;;
 21174                           
 21175                           	psect	text110
 21176  004D72                     __ptext110:
 21177                           	opt stack 0
 21178  004D72                     _Activate_Buzzer:
 21179                           	opt stack 25
 21180                           
 21181                           ;utils.c: 106: PR2 = 0b11111001 ;
 21182                           
 21183                           ;incstack = 0
 21184  004D72  0EF9               	movlw	249
 21185  004D74  6ECB               	movwf	4043,c	;volatile
 21186                           
 21187                           ;utils.c: 107: T2CON = 0b00000101 ;
 21188  004D76  0E05               	movlw	5
 21189  004D78  6ECA               	movwf	4042,c	;volatile
 21190                           
 21191                           ;utils.c: 108: CCPR2L = 0b01001010 ;
 21192  004D7A  0E4A               	movlw	74
 21193  004D7C  6EBB               	movwf	4027,c	;volatile
 21194                           
 21195                           ;utils.c: 109: CCP2CON = 0b00111100 ;
 21196  004D7E  0E3C               	movlw	60
 21197  004D80  6EBA               	movwf	4026,c	;volatile
 21198  004D82  0012               	return		;funcret
 21199  004D84                     __end_of_Activate_Buzzer:
 21200                           	opt stack 0
 21201                           tblptru	equ	0xFF8
 21202                           tblptrh	equ	0xFF7
 21203                           tblptrl	equ	0xFF6
 21204                           tablat	equ	0xFF5
 21205                           prodh	equ	0xFF4
 21206                           prodl	equ	0xFF3
 21207                           intcon	equ	0xFF2
 21208                           intcon2	equ	0xFF1
 21209                           intcon3	equ	0xFF0
 21210                           postinc0	equ	0xFEE
 21211                           wreg	equ	0xFE8
 21212                           postdec1	equ	0xFE5
 21213                           plusw1	equ	0xFE3
 21214                           fsr1l	equ	0xFE1
 21215                           indf2	equ	0xFDF
 21216                           postinc2	equ	0xFDE
 21217                           postdec2	equ	0xFDD
 21218                           plusw2	equ	0xFDB
 21219                           fsr2h	equ	0xFDA
 21220                           fsr2l	equ	0xFD9
 21221                           status	equ	0xFD8
 21222                           
 21223 ;; *************** function _chkisr *****************
 21224 ;; Defined at:
 21225 ;;		line 41 in file "Interrupt.c"
 21226 ;; Parameters:    Size  Location     Type
 21227 ;;		None
 21228 ;; Auto vars:     Size  Location     Type
 21229 ;;		None
 21230 ;; Return value:  Size  Location     Type
 21231 ;;		None               void
 21232 ;; Registers used:
 21233 ;;		wreg, status,2, status,0, cstack
 21234 ;; Tracked objects:
 21235 ;;		On entry : 0/0
 21236 ;;		On exit  : 0/0
 21237 ;;		Unchanged: 0/0
 21238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21241 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21242 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21243 ;;Total ram usage:       14 bytes
 21244 ;; Hardware stack levels used:    1
 21245 ;; Hardware stack levels required when called:    2
 21246 ;; This function calls:
 21247 ;;		_INT0_isr
 21248 ;;		_INT1_isr
 21249 ;;		_INT2_isr
 21250 ;;		_TIMER1_isr
 21251 ;; This function is called by:
 21252 ;;		Interrupt level 2
 21253 ;; This function uses a non-reentrant model
 21254 ;;
 21255                           
 21256                           	psect	intcode
 21257  000008                     __pintcode:
 21258                           	opt stack 0
 21259  000008                     _chkisr:
 21260                           	opt stack 18
 21261                           
 21262                           ;incstack = 0
 21263  000008  CFFA F003          	movff	pclath,??_chkisr
 21264  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 21265  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 21266  000014  ED19  F01F         	call	int_func,f	;refresh shadow registers
 21267                           pclatu	equ	0xFFB
 21268                           pclath	equ	0xFFA
 21269                           tblptru	equ	0xFF8
 21270                           tblptrh	equ	0xFF7
 21271                           tblptrl	equ	0xFF6
 21272                           tablat	equ	0xFF5
 21273                           prodh	equ	0xFF4
 21274                           prodl	equ	0xFF3
 21275                           intcon	equ	0xFF2
 21276                           intcon2	equ	0xFF1
 21277                           intcon3	equ	0xFF0
 21278                           postinc0	equ	0xFEE
 21279                           fsr0l	equ	0xFE9
 21280                           wreg	equ	0xFE8
 21281                           postdec1	equ	0xFE5
 21282                           plusw1	equ	0xFE3
 21283                           fsr1l	equ	0xFE1
 21284                           indf2	equ	0xFDF
 21285                           postinc2	equ	0xFDE
 21286                           postdec2	equ	0xFDD
 21287                           plusw2	equ	0xFDB
 21288                           fsr2h	equ	0xFDA
 21289                           fsr2l	equ	0xFD9
 21290                           status	equ	0xFD8
 21291                           
 21292                           	psect	intcode_body
 21293  003E32                     __pintcode_body:
 21294                           	opt stack 18
 21295  003E32                     int_func:
 21296                           	opt stack 18
 21297  003E32  0006               	pop		; remove dummy address from shadow register refresh
 21298  003E34  CFEA F006          	movff	fsr0h,??_chkisr+3
 21299  003E38  CFE1 F007          	movff	fsr1l,??_chkisr+4
 21300  003E3C  CFE2 F008          	movff	fsr1h,??_chkisr+5
 21301  003E40  CFD9 F009          	movff	fsr2l,??_chkisr+6
 21302  003E44  CFDA F00A          	movff	fsr2h,??_chkisr+7
 21303  003E48  CFF3 F00B          	movff	prodl,??_chkisr+8
 21304  003E4C  CFF4 F00C          	movff	prodh,??_chkisr+9
 21305  003E50  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 21306  003E54  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 21307  003E58  CFF8 F00F          	movff	tblptru,??_chkisr+12
 21308  003E5C  CFF5 F010          	movff	tablat,??_chkisr+13
 21309                           
 21310                           ;Interrupt.c: 43: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 21311  003E60  A09E               	btfss	3998,0,c	;volatile
 21312  003E62  D003               	goto	i2l8218
 21313  003E64  ECEE  F026         	call	_TIMER1_isr	;wreg free
 21314  003E68  D000               	goto	i2l8218
 21315  003E6A                     i2l8218:
 21316                           
 21317                           ;Interrupt.c: 44: if (INTCONbits.INT0IF == 1) INT0_isr();
 21318  003E6A  A2F2               	btfss	intcon,1,c	;volatile
 21319  003E6C  D003               	goto	i2l8222
 21320  003E6E  ECBC  F024         	call	_INT0_isr	;wreg free
 21321  003E72  D000               	goto	i2l8222
 21322  003E74                     i2l8222:
 21323                           
 21324                           ;Interrupt.c: 45: if (INTCON3bits.INT1IF == 1) INT1_isr();
 21325  003E74  A0F0               	btfss	intcon3,0,c	;volatile
 21326  003E76  D003               	goto	i2l8226
 21327  003E78  EC03  F027         	call	_INT1_isr	;wreg free
 21328  003E7C  D000               	goto	i2l8226
 21329  003E7E                     i2l8226:
 21330                           
 21331                           ;Interrupt.c: 46: if (INTCON3bits.INT2IF == 1) INT2_isr();
 21332  003E7E  A2F0               	btfss	intcon3,1,c	;volatile
 21333  003E80  D003               	goto	i2l623
 21334  003E82  EC98  F014         	call	_INT2_isr	;wreg free
 21335  003E86  D000               	goto	i2l623
 21336  003E88                     i2l623:
 21337  003E88  C010  FFF5         	movff	??_chkisr+13,tablat
 21338  003E8C  C00F  FFF8         	movff	??_chkisr+12,tblptru
 21339  003E90  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 21340  003E94  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 21341  003E98  C00C  FFF4         	movff	??_chkisr+9,prodh
 21342  003E9C  C00B  FFF3         	movff	??_chkisr+8,prodl
 21343  003EA0  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 21344  003EA4  C009  FFD9         	movff	??_chkisr+6,fsr2l
 21345  003EA8  C008  FFE2         	movff	??_chkisr+5,fsr1h
 21346  003EAC  C007  FFE1         	movff	??_chkisr+4,fsr1l
 21347  003EB0  C006  FFEA         	movff	??_chkisr+3,fsr0h
 21348  003EB4  C005  FFE9         	movff	??_chkisr+2,fsr0l
 21349  003EB8  C004  FFFB         	movff	??_chkisr+1,pclatu
 21350  003EBC  C003  FFFA         	movff	??_chkisr,pclath
 21351  003EC0  0011               	retfie		f
 21352  003EC2                     __end_of_chkisr:
 21353                           	opt stack 0
 21354                           pclatu	equ	0xFFB
 21355                           pclath	equ	0xFFA
 21356                           tblptru	equ	0xFF8
 21357                           tblptrh	equ	0xFF7
 21358                           tblptrl	equ	0xFF6
 21359                           tablat	equ	0xFF5
 21360                           prodh	equ	0xFF4
 21361                           prodl	equ	0xFF3
 21362                           intcon	equ	0xFF2
 21363                           intcon2	equ	0xFF1
 21364                           intcon3	equ	0xFF0
 21365                           postinc0	equ	0xFEE
 21366                           fsr0h	equ	0xFEA
 21367                           fsr0l	equ	0xFE9
 21368                           wreg	equ	0xFE8
 21369                           postdec1	equ	0xFE5
 21370                           plusw1	equ	0xFE3
 21371                           fsr1h	equ	0xFE2
 21372                           fsr1l	equ	0xFE1
 21373                           indf2	equ	0xFDF
 21374                           postinc2	equ	0xFDE
 21375                           postdec2	equ	0xFDD
 21376                           plusw2	equ	0xFDB
 21377                           fsr2h	equ	0xFDA
 21378                           fsr2l	equ	0xFD9
 21379                           status	equ	0xFD8
 21380                           
 21381 ;; *************** function _TIMER1_isr *****************
 21382 ;; Defined at:
 21383 ;;		line 49 in file "Interrupt.c"
 21384 ;; Parameters:    Size  Location     Type
 21385 ;;		None
 21386 ;; Auto vars:     Size  Location     Type
 21387 ;;		None
 21388 ;; Return value:  Size  Location     Type
 21389 ;;		None               void
 21390 ;; Registers used:
 21391 ;;		wreg, status,2
 21392 ;; Tracked objects:
 21393 ;;		On entry : 0/0
 21394 ;;		On exit  : 0/0
 21395 ;;		Unchanged: 0/0
 21396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21401 ;;Total ram usage:        0 bytes
 21402 ;; Hardware stack levels used:    1
 21403 ;; This function calls:
 21404 ;;		Nothing
 21405 ;; This function is called by:
 21406 ;;		_chkisr
 21407 ;; This function uses a non-reentrant model
 21408 ;;
 21409                           
 21410                           	psect	text112
 21411  004DDC                     __ptext112:
 21412                           	opt stack 0
 21413  004DDC                     _TIMER1_isr:
 21414                           	opt stack 19
 21415                           
 21416                           ;Interrupt.c: 51: Nec_state = 0;
 21417                           
 21418                           ;incstack = 0
 21419  004DDC  0E00               	movlw	0
 21420  004DDE  6E61               	movwf	_Nec_state,c
 21421                           
 21422                           ;Interrupt.c: 52: INTCON2bits.INTEDG2 = 0;
 21423  004DE0  98F1               	bcf	intcon2,4,c	;volatile
 21424                           
 21425                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 0;
 21426  004DE2  90CD               	bcf	4045,0,c	;volatile
 21427                           
 21428                           ;Interrupt.c: 54: PIR1bits.TMR1IF = 0;
 21429  004DE4  909E               	bcf	3998,0,c	;volatile
 21430  004DE6  0012               	return		;funcret
 21431  004DE8                     __end_of_TIMER1_isr:
 21432                           	opt stack 0
 21433                           pclatu	equ	0xFFB
 21434                           pclath	equ	0xFFA
 21435                           tblptru	equ	0xFF8
 21436                           tblptrh	equ	0xFF7
 21437                           tblptrl	equ	0xFF6
 21438                           tablat	equ	0xFF5
 21439                           prodh	equ	0xFF4
 21440                           prodl	equ	0xFF3
 21441                           intcon	equ	0xFF2
 21442                           intcon2	equ	0xFF1
 21443                           intcon3	equ	0xFF0
 21444                           postinc0	equ	0xFEE
 21445                           fsr0h	equ	0xFEA
 21446                           fsr0l	equ	0xFE9
 21447                           wreg	equ	0xFE8
 21448                           postdec1	equ	0xFE5
 21449                           plusw1	equ	0xFE3
 21450                           fsr1h	equ	0xFE2
 21451                           fsr1l	equ	0xFE1
 21452                           indf2	equ	0xFDF
 21453                           postinc2	equ	0xFDE
 21454                           postdec2	equ	0xFDD
 21455                           plusw2	equ	0xFDB
 21456                           fsr2h	equ	0xFDA
 21457                           fsr2l	equ	0xFD9
 21458                           status	equ	0xFD8
 21459                           
 21460 ;; *************** function _INT2_isr *****************
 21461 ;; Defined at:
 21462 ;;		line 64 in file "Interrupt.c"
 21463 ;; Parameters:    Size  Location     Type
 21464 ;;		None
 21465 ;; Auto vars:     Size  Location     Type
 21466 ;;		None
 21467 ;; Return value:  Size  Location     Type
 21468 ;;		None               void
 21469 ;; Registers used:
 21470 ;;		wreg, status,2, status,0, cstack
 21471 ;; Tracked objects:
 21472 ;;		On entry : 0/0
 21473 ;;		On exit  : 0/0
 21474 ;;		Unchanged: 0/0
 21475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21478 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21480 ;;Total ram usage:        2 bytes
 21481 ;; Hardware stack levels used:    1
 21482 ;; Hardware stack levels required when called:    1
 21483 ;; This function calls:
 21484 ;;		_force_nec_state0
 21485 ;; This function is called by:
 21486 ;;		_chkisr
 21487 ;; This function uses a non-reentrant model
 21488 ;;
 21489                           
 21490                           	psect	text113
 21491  002930                     __ptext113:
 21492                           	opt stack 0
 21493  002930                     _INT2_isr:
 21494                           	opt stack 18
 21495                           
 21496                           ;Interrupt.c: 69: INTCON3bits.INT2IF = 0;
 21497                           
 21498                           ;incstack = 0
 21499  002930  92F0               	bcf	intcon3,1,c	;volatile
 21500                           
 21501                           ;Interrupt.c: 70: if (Nec_state != 0)
 21502  002932  5061               	movf	_Nec_state,w,c
 21503  002934  B4D8               	btfsc	status,2,c
 21504  002936  D0AF               	goto	i2l7546
 21505                           
 21506                           ;Interrupt.c: 71: {
 21507                           ;Interrupt.c: 72: Time_Elapsed = (TMR1H << 8) | TMR1L;
 21508  002938  50CE               	movf	4046,w,c	;volatile
 21509  00293A  CFCF F001          	movff	4047,??_INT2_isr	;volatile
 21510  00293E  6A02               	clrf	(??_INT2_isr+1)& (0+255),c
 21511  002940  C001  F002         	movff	??_INT2_isr,??_INT2_isr+1
 21512  002944  6A01               	clrf	??_INT2_isr,c
 21513  002946  1001               	iorwf	??_INT2_isr,w,c
 21514  002948  6E5A               	movwf	_Time_Elapsed,c
 21515  00294A  5002               	movf	??_INT2_isr+1,w,c
 21516  00294C  6E5B               	movwf	_Time_Elapsed+1,c
 21517                           
 21518                           ;Interrupt.c: 73: TMR1H = 0;
 21519  00294E  0E00               	movlw	0
 21520  002950  6ECF               	movwf	4047,c	;volatile
 21521                           
 21522                           ;Interrupt.c: 74: TMR1L = 0;
 21523  002952  0E00               	movlw	0
 21524  002954  6ECE               	movwf	4046,c	;volatile
 21525                           
 21526                           ;Interrupt.c: 75: }
 21527                           ;Interrupt.c: 77: switch(Nec_state)
 21528  002956  D09F               	goto	i2l7546
 21529  002958                     i2l7460:
 21530                           
 21531                           ;Interrupt.c: 80: {
 21532                           ;Interrupt.c: 83: TMR1H = 0;
 21533  002958  0E00               	movlw	0
 21534  00295A  6ECF               	movwf	4047,c	;volatile
 21535                           
 21536                           ;Interrupt.c: 84: TMR1L = 0;
 21537  00295C  0E00               	movlw	0
 21538  00295E  6ECE               	movwf	4046,c	;volatile
 21539                           
 21540                           ;Interrupt.c: 85: PIR1bits.TMR1IF = 0;
 21541  002960  909E               	bcf	3998,0,c	;volatile
 21542                           
 21543                           ;Interrupt.c: 86: T1CON = 0x90;
 21544  002962  0E90               	movlw	144
 21545  002964  6ECD               	movwf	4045,c	;volatile
 21546                           
 21547                           ;Interrupt.c: 87: T1CONbits.TMR1ON = 1;
 21548  002966  80CD               	bsf	4045,0,c	;volatile
 21549                           
 21550                           ;Interrupt.c: 88: bit_count = 0;
 21551  002968  0E00               	movlw	0
 21552  00296A  0100               	movlb	0	; () banked
 21553  00296C  6FCD               	movwf	_bit_count& (0+255),b
 21554                           
 21555                           ;Interrupt.c: 89: Nec_code = 0;
 21556  00296E  0E00               	movlw	0
 21557  002970  0100               	movlb	0	; () banked
 21558  002972  6FB4               	movwf	_Nec_code& (0+255),b
 21559  002974  0E00               	movlw	0
 21560  002976  6FB5               	movwf	(_Nec_code+1)& (0+255),b
 21561  002978  0E00               	movlw	0
 21562  00297A  6FB6               	movwf	(_Nec_code+2)& (0+255),b
 21563  00297C  0E00               	movlw	0
 21564  00297E  6FB7               	movwf	(_Nec_code+3)& (0+255),b
 21565                           
 21566                           ;Interrupt.c: 90: Nec_state = 1;
 21567  002980  0E01               	movlw	1
 21568  002982  6E61               	movwf	_Nec_state,c
 21569                           
 21570                           ; BSR set to: 0
 21571                           ;Interrupt.c: 91: INTCON2bits.INTEDG2 = 1;
 21572  002984  88F1               	bsf	intcon2,4,c	;volatile
 21573                           
 21574                           ; BSR set to: 0
 21575                           ;Interrupt.c: 92: PORTA = Nec_state;
 21576  002986  C061  FF80         	movff	_Nec_state,3968	;volatile
 21577                           
 21578                           ; BSR set to: 0
 21579                           ;Interrupt.c: 94: return;
 21580  00298A  D096               	goto	i2l635
 21581  00298C                     i2l7472:
 21582                           
 21583                           ;Interrupt.c: 98: {
 21584                           ;Interrupt.c: 101: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
 21585  00298C  0E35               	movlw	53
 21586  00298E  5C5A               	subwf	_Time_Elapsed,w,c
 21587  002990  0E21               	movlw	33
 21588  002992  585B               	subwfb	_Time_Elapsed+1,w,c
 21589  002994  A0D8               	btfss	status,0,c
 21590  002996  D009               	goto	i2l7480
 21591  002998  0E1C               	movlw	28
 21592  00299A  5C5A               	subwf	_Time_Elapsed,w,c
 21593  00299C  0E25               	movlw	37
 21594  00299E  585B               	subwfb	_Time_Elapsed+1,w,c
 21595  0029A0  B0D8               	btfsc	status,0,c
 21596  0029A2  D003               	goto	i2l7480
 21597                           
 21598                           ;Interrupt.c: 102: {
 21599                           ;Interrupt.c: 104: Nec_state = 2;
 21600  0029A4  0E02               	movlw	2
 21601  0029A6  6E61               	movwf	_Nec_state,c
 21602  0029A8  D027               	goto	i2l7506
 21603  0029AA                     i2l7480:
 21604                           
 21605                           ;Interrupt.c: 109: else
 21606                           ;Interrupt.c: 110: {
 21607                           ;Interrupt.c: 112: force_nec_state0();
 21608  0029AA  EC14  F027         	call	_force_nec_state0	;wreg free
 21609  0029AE  D02A               	goto	i2l7510
 21610  0029B0  D029               	goto	i2l7510
 21611                           
 21612                           ;Interrupt.c: 116: return;
 21613                           
 21614                           ;Interrupt.c: 114: }
 21615                           ;Interrupt.c: 115: INTCON2bits.INTEDG2 = 0;
 21616  0029B2  D082               	goto	i2l635
 21617  0029B4                     i2l7486:
 21618                           
 21619                           ;Interrupt.c: 120: {
 21620                           ;Interrupt.c: 122: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
 21621  0029B4  0EA1               	movlw	161
 21622  0029B6  5C5A               	subwf	_Time_Elapsed,w,c
 21623  0029B8  0E0F               	movlw	15
 21624  0029BA  585B               	subwfb	_Time_Elapsed+1,w,c
 21625  0029BC  A0D8               	btfss	status,0,c
 21626  0029BE  D009               	goto	i2l7494
 21627  0029C0  0E88               	movlw	136
 21628  0029C2  5C5A               	subwf	_Time_Elapsed,w,c
 21629  0029C4  0E13               	movlw	19
 21630  0029C6  585B               	subwfb	_Time_Elapsed+1,w,c
 21631  0029C8  B0D8               	btfsc	status,0,c
 21632  0029CA  D003               	goto	i2l7494
 21633  0029CC                     
 21634                           ;Interrupt.c: 123: {
 21635                           ;Interrupt.c: 124: Nec_state = 3;
 21636  0029CC  0E03               	movlw	3
 21637  0029CE  6E61               	movwf	_Nec_state,c
 21638  0029D0  D05A               	goto	i2l7536
 21639  0029D2                     i2l7494:
 21640                           
 21641                           ;Interrupt.c: 128: else
 21642                           ;Interrupt.c: 129: {
 21643                           ;Interrupt.c: 131: force_nec_state0();
 21644  0029D2  EC14  F027         	call	_force_nec_state0	;wreg free
 21645  0029D6  D05D               	goto	i2l7540
 21646  0029D8  D05C               	goto	i2l7540
 21647                           
 21648                           ;Interrupt.c: 135: return;
 21649                           
 21650                           ;Interrupt.c: 133: }
 21651                           ;Interrupt.c: 134: INTCON2bits.INTEDG2 = 1;
 21652  0029DA  D06E               	goto	i2l635
 21653  0029DC                     i2l7500:
 21654                           
 21655                           ;Interrupt.c: 139: {
 21656                           ;Interrupt.c: 141: if(Time_Elapsed > 400 && Time_Elapsed < 700)
 21657  0029DC  0E91               	movlw	145
 21658  0029DE  5C5A               	subwf	_Time_Elapsed,w,c
 21659  0029E0  0E01               	movlw	1
 21660  0029E2  585B               	subwfb	_Time_Elapsed+1,w,c
 21661  0029E4  A0D8               	btfss	status,0,c
 21662  0029E6  D00B               	goto	i2l7508
 21663  0029E8  0EBC               	movlw	188
 21664  0029EA  5C5A               	subwf	_Time_Elapsed,w,c
 21665  0029EC  0E02               	movlw	2
 21666  0029EE  585B               	subwfb	_Time_Elapsed+1,w,c
 21667  0029F0  B0D8               	btfsc	status,0,c
 21668  0029F2  D005               	goto	i2l7508
 21669                           
 21670                           ;Interrupt.c: 142: {
 21671                           ;Interrupt.c: 143: Nec_state = 4;
 21672  0029F4  0E04               	movlw	4
 21673  0029F6  D7D7               	goto	L16
 21674  0029F8                     i2l7506:
 21675                           
 21676                           ;Interrupt.c: 144: PORTA = Nec_state;
 21677  0029F8  C061  FF80         	movff	_Nec_state,3968	;volatile
 21678                           
 21679                           ;Interrupt.c: 146: }
 21680  0029FC  D003               	goto	i2l7510
 21681  0029FE                     i2l7508:
 21682                           
 21683                           ;Interrupt.c: 147: else
 21684                           ;Interrupt.c: 148: {
 21685                           ;Interrupt.c: 150: force_nec_state0();
 21686  0029FE  EC14  F027         	call	_force_nec_state0	;wreg free
 21687  002A02  D000               	goto	i2l7510
 21688  002A04                     i2l7510:
 21689                           
 21690                           ;Interrupt.c: 152: }
 21691                           ;Interrupt.c: 153: INTCON2bits.INTEDG2 = 0;
 21692  002A04  98F1               	bcf	intcon2,4,c	;volatile
 21693                           
 21694                           ;Interrupt.c: 154: return;
 21695  002A06  D058               	goto	i2l635
 21696  002A08                     i2l7514:
 21697                           
 21698                           ;Interrupt.c: 158: {
 21699                           ;Interrupt.c: 160: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
 21700  002A08  0E91               	movlw	145
 21701  002A0A  5C5A               	subwf	_Time_Elapsed,w,c
 21702  002A0C  0E01               	movlw	1
 21703  002A0E  585B               	subwfb	_Time_Elapsed+1,w,c
 21704  002A10  A0D8               	btfss	status,0,c
 21705  002A12  D03C               	goto	i2l7538
 21706  002A14  0E08               	movlw	8
 21707  002A16  5C5A               	subwf	_Time_Elapsed,w,c
 21708  002A18  0E07               	movlw	7
 21709  002A1A  585B               	subwfb	_Time_Elapsed+1,w,c
 21710  002A1C  B0D8               	btfsc	status,0,c
 21711  002A1E  D036               	goto	i2l7538
 21712                           
 21713                           ;Interrupt.c: 161: {
 21714                           ;Interrupt.c: 162: Nec_code = Nec_code << 1;
 21715  002A20  90D8               	bcf	status,0,c
 21716  002A22  0100               	movlb	0	; () banked
 21717  002A24  35B4               	rlcf	_Nec_code& (0+255),w,b
 21718  002A26  0100               	movlb	0	; () banked
 21719  002A28  6FB4               	movwf	_Nec_code& (0+255),b
 21720  002A2A  0100               	movlb	0	; () banked
 21721  002A2C  35B5               	rlcf	(_Nec_code+1)& (0+255),w,b
 21722  002A2E  0100               	movlb	0	; () banked
 21723  002A30  6FB5               	movwf	(_Nec_code+1)& (0+255),b
 21724  002A32  0100               	movlb	0	; () banked
 21725  002A34  35B6               	rlcf	(_Nec_code+2)& (0+255),w,b
 21726  002A36  0100               	movlb	0	; () banked
 21727  002A38  6FB6               	movwf	(_Nec_code+2)& (0+255),b
 21728  002A3A  0100               	movlb	0	; () banked
 21729  002A3C  35B7               	rlcf	(_Nec_code+3)& (0+255),w,b
 21730  002A3E  0100               	movlb	0	; () banked
 21731  002A40  6FB7               	movwf	(_Nec_code+3)& (0+255),b
 21732                           
 21733                           ;Interrupt.c: 163: if (Time_Elapsed > 1000)
 21734  002A42  0EE9               	movlw	233
 21735  002A44  5C5A               	subwf	_Time_Elapsed,w,c
 21736  002A46  0E03               	movlw	3
 21737  002A48  585B               	subwfb	_Time_Elapsed+1,w,c
 21738  002A4A  A0D8               	btfss	status,0,c
 21739  002A4C  D008               	goto	i2l7522
 21740                           
 21741                           ; BSR set to: 0
 21742                           ;Interrupt.c: 164: Nec_code++;
 21743  002A4E  0E01               	movlw	1
 21744  002A50  0100               	movlb	0	; () banked
 21745  002A52  27B4               	addwf	_Nec_code& (0+255),f,b
 21746  002A54  0E00               	movlw	0
 21747  002A56  23B5               	addwfc	(_Nec_code+1)& (0+255),f,b
 21748  002A58  23B6               	addwfc	(_Nec_code+2)& (0+255),f,b
 21749  002A5A  23B7               	addwfc	(_Nec_code+3)& (0+255),f,b
 21750  002A5C  D000               	goto	i2l7522
 21751  002A5E                     i2l7522:
 21752                           
 21753                           ; BSR set to: 0
 21754                           ;Interrupt.c: 165: bit_count++;
 21755  002A5E  0100               	movlb	0	; () banked
 21756  002A60  2BCD               	incf	_bit_count& (0+255),f,b
 21757                           
 21758                           ; BSR set to: 0
 21759                           ;Interrupt.c: 166: if(bit_count > 31)
 21760  002A62  0E1F               	movlw	31
 21761  002A64  0100               	movlb	0	; () banked
 21762  002A66  65CD               	cpfsgt	_bit_count& (0+255),b
 21763  002A68  D7B1               	goto	L17
 21764                           
 21765                           ; BSR set to: 0
 21766                           ;Interrupt.c: 167: {
 21767                           ;Interrupt.c: 168: Nec_Button = Nec_code >> 8;
 21768  002A6A  C0B5  F0C9         	movff	_Nec_code+1,_Nec_Button
 21769                           
 21770                           ; BSR set to: 0
 21771                           ;Interrupt.c: 169: Nec_state = 0;
 21772  002A6E  0E00               	movlw	0
 21773  002A70  6E61               	movwf	_Nec_state,c
 21774                           
 21775                           ; BSR set to: 0
 21776                           ;Interrupt.c: 170: PORTA = Nec_state;
 21777  002A72  C061  FF80         	movff	_Nec_state,3968	;volatile
 21778                           
 21779                           ;Interrupt.c: 172: Nec_ok = 1;
 21780  002A76  0E00               	movlw	0
 21781  002A78  0100               	movlb	0	; () banked
 21782  002A7A  6FBC               	movwf	(_Nec_ok+1)& (0+255),b
 21783  002A7C  0E01               	movlw	1
 21784  002A7E  6FBB               	movwf	_Nec_ok& (0+255),b
 21785                           
 21786                           ; BSR set to: 0
 21787                           ;Interrupt.c: 174: INTCON3bits.INT2IE = 0;
 21788  002A80  98F0               	bcf	intcon3,4,c	;volatile
 21789                           
 21790                           ;Interrupt.c: 175: }
 21791  002A82  D007               	goto	i2l7540
 21792                           
 21793                           ; BSR set to: 0
 21794  002A84  D7A3               	goto	L17
 21795  002A86                     i2l7536:
 21796                           
 21797                           ; BSR set to: 0
 21798                           ;Interrupt.c: 179: PORTA = Nec_state;
 21799  002A86  C061  FF80         	movff	_Nec_state,3968	;volatile
 21800                           
 21801                           ; BSR set to: 0
 21802                           ;Interrupt.c: 181: }
 21803                           ;Interrupt.c: 182: }
 21804  002A8A  D003               	goto	i2l7540
 21805  002A8C                     i2l7538:
 21806                           
 21807                           ;Interrupt.c: 184: else
 21808                           ;Interrupt.c: 185: {
 21809                           ;Interrupt.c: 187: force_nec_state0();
 21810  002A8C  EC14  F027         	call	_force_nec_state0	;wreg free
 21811  002A90  D000               	goto	i2l7540
 21812  002A92                     i2l7540:
 21813                           
 21814                           ;Interrupt.c: 189: }
 21815                           ;Interrupt.c: 190: INTCON2bits.INTEDG2 = 1;
 21816  002A92  88F1               	bsf	intcon2,4,c	;volatile
 21817                           
 21818                           ;Interrupt.c: 192: }
 21819                           ;Interrupt.c: 193: }
 21820                           
 21821                           ;Interrupt.c: 191: return;
 21822  002A94  D011               	goto	i2l635
 21823  002A96                     i2l7546:
 21824  002A96  5061               	movf	_Nec_state,w,c
 21825                           
 21826                           ; Switch size 1, requested type "space"
 21827                           ; Number of cases is 5, Range of values is 0 to 4
 21828                           ; switch strategies available:
 21829                           ; Name         Instructions Cycles
 21830                           ; simple_byte           16     9 (average)
 21831                           ;	Chosen strategy is simple_byte
 21832  002A98  0A00               	xorlw	0	; case 0
 21833  002A9A  B4D8               	btfsc	status,2,c
 21834  002A9C  D75D               	goto	i2l7460
 21835  002A9E  0A01               	xorlw	1	; case 1
 21836  002AA0  B4D8               	btfsc	status,2,c
 21837  002AA2  D774               	goto	i2l7472
 21838  002AA4  0A03               	xorlw	3	; case 2
 21839  002AA6  B4D8               	btfsc	status,2,c
 21840  002AA8  D785               	goto	i2l7486
 21841  002AAA  0A01               	xorlw	1	; case 3
 21842  002AAC  B4D8               	btfsc	status,2,c
 21843  002AAE  D796               	goto	i2l7500
 21844  002AB0  0A07               	xorlw	7	; case 4
 21845  002AB2  B4D8               	btfsc	status,2,c
 21846  002AB4  D7A9               	goto	i2l7514
 21847  002AB6  D000               	goto	i2l635
 21848  002AB8                     i2l635:
 21849  002AB8  0012               	return		;funcret
 21850  002ABA                     __end_of_INT2_isr:
 21851                           	opt stack 0
 21852                           pclatu	equ	0xFFB
 21853                           pclath	equ	0xFFA
 21854                           tblptru	equ	0xFF8
 21855                           tblptrh	equ	0xFF7
 21856                           tblptrl	equ	0xFF6
 21857                           tablat	equ	0xFF5
 21858                           prodh	equ	0xFF4
 21859                           prodl	equ	0xFF3
 21860                           intcon	equ	0xFF2
 21861                           intcon2	equ	0xFF1
 21862                           intcon3	equ	0xFF0
 21863                           postinc0	equ	0xFEE
 21864                           fsr0h	equ	0xFEA
 21865                           fsr0l	equ	0xFE9
 21866                           wreg	equ	0xFE8
 21867                           postdec1	equ	0xFE5
 21868                           plusw1	equ	0xFE3
 21869                           fsr1h	equ	0xFE2
 21870                           fsr1l	equ	0xFE1
 21871                           indf2	equ	0xFDF
 21872                           postinc2	equ	0xFDE
 21873                           postdec2	equ	0xFDD
 21874                           plusw2	equ	0xFDB
 21875                           fsr2h	equ	0xFDA
 21876                           fsr2l	equ	0xFD9
 21877                           status	equ	0xFD8
 21878                           
 21879 ;; *************** function _force_nec_state0 *****************
 21880 ;; Defined at:
 21881 ;;		line 57 in file "Interrupt.c"
 21882 ;; Parameters:    Size  Location     Type
 21883 ;;		None
 21884 ;; Auto vars:     Size  Location     Type
 21885 ;;		None
 21886 ;; Return value:  Size  Location     Type
 21887 ;;		None               void
 21888 ;; Registers used:
 21889 ;;		wreg, status,2
 21890 ;; Tracked objects:
 21891 ;;		On entry : 0/0
 21892 ;;		On exit  : 0/0
 21893 ;;		Unchanged: 0/0
 21894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21899 ;;Total ram usage:        0 bytes
 21900 ;; Hardware stack levels used:    1
 21901 ;; This function calls:
 21902 ;;		Nothing
 21903 ;; This function is called by:
 21904 ;;		_INT2_isr
 21905 ;; This function uses a non-reentrant model
 21906 ;;
 21907                           
 21908                           	psect	text114
 21909  004E28                     __ptext114:
 21910                           	opt stack 0
 21911  004E28                     _force_nec_state0:
 21912                           	opt stack 18
 21913                           
 21914                           ;Interrupt.c: 59: Nec_state=0;
 21915                           
 21916                           ;incstack = 0
 21917  004E28  0E00               	movlw	0
 21918  004E2A  6E61               	movwf	_Nec_state,c
 21919                           
 21920                           ;Interrupt.c: 60: T1CONbits.TMR1ON = 0;
 21921  004E2C  90CD               	bcf	4045,0,c	;volatile
 21922  004E2E  0012               	return		;funcret
 21923  004E30                     __end_of_force_nec_state0:
 21924                           	opt stack 0
 21925                           pclatu	equ	0xFFB
 21926                           pclath	equ	0xFFA
 21927                           tblptru	equ	0xFF8
 21928                           tblptrh	equ	0xFF7
 21929                           tblptrl	equ	0xFF6
 21930                           tablat	equ	0xFF5
 21931                           prodh	equ	0xFF4
 21932                           prodl	equ	0xFF3
 21933                           intcon	equ	0xFF2
 21934                           intcon2	equ	0xFF1
 21935                           intcon3	equ	0xFF0
 21936                           postinc0	equ	0xFEE
 21937                           fsr0h	equ	0xFEA
 21938                           fsr0l	equ	0xFE9
 21939                           wreg	equ	0xFE8
 21940                           postdec1	equ	0xFE5
 21941                           plusw1	equ	0xFE3
 21942                           fsr1h	equ	0xFE2
 21943                           fsr1l	equ	0xFE1
 21944                           indf2	equ	0xFDF
 21945                           postinc2	equ	0xFDE
 21946                           postdec2	equ	0xFDD
 21947                           plusw2	equ	0xFDB
 21948                           fsr2h	equ	0xFDA
 21949                           fsr2l	equ	0xFD9
 21950                           status	equ	0xFD8
 21951                           
 21952 ;; *************** function _INT1_isr *****************
 21953 ;; Defined at:
 21954 ;;		line 196 in file "Interrupt.c"
 21955 ;; Parameters:    Size  Location     Type
 21956 ;;		None
 21957 ;; Auto vars:     Size  Location     Type
 21958 ;;		None
 21959 ;; Return value:  Size  Location     Type
 21960 ;;		None               void
 21961 ;; Registers used:
 21962 ;;		wreg, status,2
 21963 ;; Tracked objects:
 21964 ;;		On entry : 0/0
 21965 ;;		On exit  : 0/0
 21966 ;;		Unchanged: 0/0
 21967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;Total ram usage:        0 bytes
 21973 ;; Hardware stack levels used:    1
 21974 ;; This function calls:
 21975 ;;		Nothing
 21976 ;; This function is called by:
 21977 ;;		_chkisr
 21978 ;; This function uses a non-reentrant model
 21979 ;;
 21980                           
 21981                           	psect	text115
 21982  004E06                     __ptext115:
 21983                           	opt stack 0
 21984  004E06                     _INT1_isr:
 21985                           	opt stack 19
 21986                           
 21987                           ;Interrupt.c: 198: INTCON3bits.INT1IF == 0;
 21988                           
 21989                           ;incstack = 0
 21990  004E06  50F0               	movf	intcon3,w,c	;volatile
 21991                           
 21992                           ;Interrupt.c: 199: INT1_flag = 1;
 21993  004E08  0E01               	movlw	1
 21994  004E0A  0100               	movlb	0	; () banked
 21995  004E0C  6FC5               	movwf	_INT1_flag& (0+255),b
 21996                           
 21997                           ; BSR set to: 0
 21998  004E0E  0012               	return		;funcret
 21999  004E10                     __end_of_INT1_isr:
 22000                           	opt stack 0
 22001                           pclatu	equ	0xFFB
 22002                           pclath	equ	0xFFA
 22003                           tblptru	equ	0xFF8
 22004                           tblptrh	equ	0xFF7
 22005                           tblptrl	equ	0xFF6
 22006                           tablat	equ	0xFF5
 22007                           prodh	equ	0xFF4
 22008                           prodl	equ	0xFF3
 22009                           intcon	equ	0xFF2
 22010                           intcon2	equ	0xFF1
 22011                           intcon3	equ	0xFF0
 22012                           postinc0	equ	0xFEE
 22013                           fsr0h	equ	0xFEA
 22014                           fsr0l	equ	0xFE9
 22015                           wreg	equ	0xFE8
 22016                           postdec1	equ	0xFE5
 22017                           plusw1	equ	0xFE3
 22018                           fsr1h	equ	0xFE2
 22019                           fsr1l	equ	0xFE1
 22020                           indf2	equ	0xFDF
 22021                           postinc2	equ	0xFDE
 22022                           postdec2	equ	0xFDD
 22023                           plusw2	equ	0xFDB
 22024                           fsr2h	equ	0xFDA
 22025                           fsr2l	equ	0xFD9
 22026                           status	equ	0xFD8
 22027                           
 22028 ;; *************** function _INT0_isr *****************
 22029 ;; Defined at:
 22030 ;;		line 203 in file "Interrupt.c"
 22031 ;; Parameters:    Size  Location     Type
 22032 ;;		None
 22033 ;; Auto vars:     Size  Location     Type
 22034 ;;  k               2    0[COMRAM] int 
 22035 ;; Return value:  Size  Location     Type
 22036 ;;		None               void
 22037 ;; Registers used:
 22038 ;;		wreg, status,2, status,0
 22039 ;; Tracked objects:
 22040 ;;		On entry : 0/0
 22041 ;;		On exit  : 0/0
 22042 ;;		Unchanged: 0/0
 22043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22047 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22048 ;;Total ram usage:        2 bytes
 22049 ;; Hardware stack levels used:    1
 22050 ;; This function calls:
 22051 ;;		Nothing
 22052 ;; This function is called by:
 22053 ;;		_chkisr
 22054 ;; This function uses a non-reentrant model
 22055 ;;
 22056                           
 22057                           	psect	text116
 22058  004978                     __ptext116:
 22059                           	opt stack 0
 22060  004978                     _INT0_isr:
 22061                           	opt stack 19
 22062                           
 22063                           ;Interrupt.c: 205: int k;
 22064                           ;Interrupt.c: 206: for (k=0; k<20000;k++);
 22065                           
 22066                           ; BSR set to: 0
 22067                           ;incstack = 0
 22068  004978  0E00               	movlw	0
 22069  00497A  6E02               	movwf	INT0_isr@k+1,c
 22070  00497C  0E00               	movlw	0
 22071  00497E  6E01               	movwf	INT0_isr@k,c
 22072  004980                     i2l7436:
 22073  004980  BE02               	btfsc	INT0_isr@k+1,7,c
 22074  004982  D008               	goto	i2l7440
 22075  004984  0E20               	movlw	32
 22076  004986  5C01               	subwf	INT0_isr@k,w,c
 22077  004988  0E4E               	movlw	78
 22078  00498A  5802               	subwfb	INT0_isr@k+1,w,c
 22079  00498C  B0D8               	btfsc	status,0,c
 22080  00498E  D005               	goto	i2l658
 22081  004990  D001               	goto	i2l7440
 22082  004992  D003               	goto	i2l658
 22083  004994                     i2l7440:
 22084  004994  4A01               	infsnz	INT0_isr@k,f,c
 22085  004996  2A02               	incf	INT0_isr@k+1,f,c
 22086  004998  D7F3               	goto	i2l7436
 22087  00499A                     i2l658:
 22088                           
 22089                           ;Interrupt.c: 207: INTCONbits.INT0IF = 0;
 22090  00499A  92F2               	bcf	intcon,1,c	;volatile
 22091                           
 22092                           ;Interrupt.c: 208: INT0_flag = 1;
 22093  00499C  0E01               	movlw	1
 22094  00499E  0100               	movlb	0	; () banked
 22095  0049A0  6FC4               	movwf	_INT0_flag& (0+255),b
 22096                           
 22097                           ; BSR set to: 0
 22098  0049A2  0012               	return		;funcret
 22099  0049A4                     __end_of_INT0_isr:
 22100                           	opt stack 0
 22101                           pclatu	equ	0xFFB
 22102                           pclath	equ	0xFFA
 22103                           tblptru	equ	0xFF8
 22104                           tblptrh	equ	0xFF7
 22105                           tblptrl	equ	0xFF6
 22106                           tablat	equ	0xFF5
 22107                           prodh	equ	0xFF4
 22108                           prodl	equ	0xFF3
 22109                           intcon	equ	0xFF2
 22110                           intcon2	equ	0xFF1
 22111                           intcon3	equ	0xFF0
 22112                           postinc0	equ	0xFEE
 22113                           fsr0h	equ	0xFEA
 22114                           fsr0l	equ	0xFE9
 22115                           wreg	equ	0xFE8
 22116                           postdec1	equ	0xFE5
 22117                           plusw1	equ	0xFE3
 22118                           fsr1h	equ	0xFE2
 22119                           fsr1l	equ	0xFE1
 22120                           indf2	equ	0xFDF
 22121                           postinc2	equ	0xFDE
 22122                           postdec2	equ	0xFDD
 22123                           plusw2	equ	0xFDB
 22124                           fsr2h	equ	0xFDA
 22125                           fsr2l	equ	0xFD9
 22126                           status	equ	0xFD8
 22127                           pclatu	equ	0xFFB
 22128                           pclath	equ	0xFFA
 22129                           tblptru	equ	0xFF8
 22130                           tblptrh	equ	0xFF7
 22131                           tblptrl	equ	0xFF6
 22132                           tablat	equ	0xFF5
 22133                           prodh	equ	0xFF4
 22134                           prodl	equ	0xFF3
 22135                           intcon	equ	0xFF2
 22136                           intcon2	equ	0xFF1
 22137                           intcon3	equ	0xFF0
 22138                           postinc0	equ	0xFEE
 22139                           fsr0h	equ	0xFEA
 22140                           fsr0l	equ	0xFE9
 22141                           wreg	equ	0xFE8
 22142                           postdec1	equ	0xFE5
 22143                           plusw1	equ	0xFE3
 22144                           fsr1h	equ	0xFE2
 22145                           fsr1l	equ	0xFE1
 22146                           indf2	equ	0xFDF
 22147                           postinc2	equ	0xFDE
 22148                           postdec2	equ	0xFDD
 22149                           plusw2	equ	0xFDB
 22150                           fsr2h	equ	0xFDA
 22151                           fsr2l	equ	0xFD9
 22152                           status	equ	0xFD8
 22153                           
 22154                           	psect	rparam
 22155  0000                     pclatu	equ	0xFFB
 22156                           pclath	equ	0xFFA
 22157                           tblptru	equ	0xFF8
 22158                           tblptrh	equ	0xFF7
 22159                           tblptrl	equ	0xFF6
 22160                           tablat	equ	0xFF5
 22161                           prodh	equ	0xFF4
 22162                           prodl	equ	0xFF3
 22163                           intcon	equ	0xFF2
 22164                           intcon2	equ	0xFF1
 22165                           intcon3	equ	0xFF0
 22166                           postinc0	equ	0xFEE
 22167                           fsr0h	equ	0xFEA
 22168                           fsr0l	equ	0xFE9
 22169                           wreg	equ	0xFE8
 22170                           postdec1	equ	0xFE5
 22171                           plusw1	equ	0xFE3
 22172                           fsr1h	equ	0xFE2
 22173                           fsr1l	equ	0xFE1
 22174                           indf2	equ	0xFDF
 22175                           postinc2	equ	0xFDE
 22176                           postdec2	equ	0xFDD
 22177                           plusw2	equ	0xFDB
 22178                           fsr2h	equ	0xFDA
 22179                           fsr2l	equ	0xFD9
 22180                           status	equ	0xFD8


Data Sizes:
    Strings     460
    Constant    625
    Data        174
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     107
    BANK0           128     52     124
    BANK1           256     23     163
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_46(CODE[5]), STR_45(CODE[5]), STR_44(CODE[12]), STR_39(CODE[15]), 
		 -> STR_38(CODE[12]), STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[5]), 
		 -> STR_30(CODE[5]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[11]), STR_24(CODE[4]), STR_23(CODE[5]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[5]), STR_19(CODE[12]), 
		 -> STR_18(CODE[11]), STR_17(CODE[11]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[2]), STR_13(CODE[3]), STR_12(CODE[13]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_43(CODE[29]), STR_42(CODE[20]), STR_41(CODE[21]), STR_40(CODE[30]), 
		 -> STR_37(CODE[29]), STR_36(CODE[20]), STR_35(CODE[20]), STR_34(CODE[30]), 
		 -> STR_11(CODE[33]), STR_10(CODE[27]), STR_9(CODE[34]), STR_8(CODE[22]), 
		 -> STR_7(CODE[29]), STR_6(CODE[20]), STR_5(CODE[21]), STR_4(CODE[30]), 
		 -> STR_3(CODE[22]), STR_2(CODE[19]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Fan_Mode_Txt(BANK1[5]), Fan_Timer_Mode_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 23
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_fan_set_text(BANK1[5]), 
		 -> RPM_Txt(BANK1[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> Fan_Mode_Txt(BANK1[5]), Fan_Set_Temp_Txt(BANK0[4]), Fan_Timer_Txt(BANK0[4]), Fan_Timer_Mode_Txt(BANK0[4]), 
		 -> date_Txt(BANK1[9]), time_Txt(BANK1[9]), tempF_Txt(BANK0[5]), tempC_Txt(BANK0[4]), 
		 -> Timing_Txt(BANK1[23]), 


Critical Paths under _main in COMRAM

    _main->_check_for_button_input
    _Update_Screen->_drawtext
    _Setup_Fan_Temp->_check_for_button_input
    _Initialize_Setup_Fan_Screen->_drawtext
    _Increase_Fan_Temp->_Update_Setup_Fan_Screen
    _Decrease_Fan_Temp->_Update_Setup_Fan_Screen
    _Update_Setup_Fan_Screen->_drawtext
    _Increase_Duty_Cycle->_do_update_pwm
    _Do_Setup_Time->_check_for_button_input
    _get_RPM->___awdiv
    _Set_D2_RGB->___awdiv
    _Set_D1_RGB->___awdiv
    _Read_Volt->___ftdiv
    ___awtoft->___ftpack
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Do_Save_New_Time->_DS3231_Write_Time
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _Update_Setup_Time_Screen->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _DS1621_Read_Temp->_I2C_Read
    _printf->___ftadd
    _scale->___awmod
    _fround->___awmod
    ___awmod->___fttol
    ___awdiv->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _Decrease_Duty_Cycle->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___awdiv
    ___ftdiv->___ftmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr
    _chkisr->_INT2_isr

Critical Paths under _main in BANK0

    _main->_printf
    _Turn_On_Fan->_printf
    _Setup_Fan_Temp->_printf
    _Do_Setup_Time->_printf
    _check_for_button_input->_printf
    _Turn_Off_Fan->_printf
    _printf->___ftsub

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_check_for_button_input
    _Setup_Fan_Temp->_check_for_button_input
    _Do_Setup_Time->_check_for_button_input

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1810469
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                _Decrease_Duty_Cycle
                        _Do_Beep_Bad
                       _Do_Beep_Good
     _Do_Change_Fan_Timer_Mode_Minus
      _Do_Change_Fan_Timer_Mode_Plus
                            _Do_Init
                      _Do_Setup_Time
                _Increase_Duty_Cycle
                  _Initialize_Screen
                        _Monitor_Fan
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
                     _Setup_Fan_Temp
                         _Toggle_Fan
                       _Turn_Off_Fan
                      _Update_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        6     6      0   49444
                                             73 COMRAM     6     6      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0  156394
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   83784
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Setup_Fan_Temp                                       0     0      0  428477
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _Decrease_Fan_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
               _Do_Save_New_Fan_Temp
                  _Increase_Fan_Temp
        _Initialize_Setup_Fan_Screen
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
            _Update_Setup_Fan_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Fan_Screen                          0     0      0   48935
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Fan_Temp                                    0     0      0   40646
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Fan_Temp                                 0     0      0   49230
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Fan_Temp                                    0     0      0   40646
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Fan_Screen                              3     3      0   40646
                                             73 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Increase_Duty_Cycle                                  0     0      0   22394
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  599043
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
                        _Monitor_Fan
                          _Read_Volt
                         _Set_D1_RGB
                         _Set_D2_RGB
           _Update_Setup_Time_Screen
                            ___awdiv
                             ___ftge
                             ___wmul
                          _bcd_2_dec
             _check_for_button_input
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    9161
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                              24    24      0   72780
                                             88 COMRAM     1     1      0
                                              0 BANK1     23    23      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Set_D2_RGB                                           4     2      2    5973
                                             30 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Set_D1_RGB                                           4     4      0    5744
                                             30 COMRAM     4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Read_Volt                                            9     6      3    8948
                                             60 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (3) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2386
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Monitor_Fan                                          0     0      0   84092
                       _Turn_Off_Fan
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                      10     6      4     308
                                             16 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   57703
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   40544
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0    9100
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0    9100
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0    9122
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0    9122
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   49230
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   59723
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _Initialize_Screen                                    0     0      0   48935
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    2937
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    1766
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    1585
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    9404
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    4612
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    4612
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    4522
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             4     2      2    4522
                                             22 COMRAM     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0   10493
                                             73 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2   10334
                                             66 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     3     3      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   40544
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   40544
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   30306
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   17426
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    8768
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    2442
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3367
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3     814
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      23
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   73432
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                          _Init_UART
                       _Turn_Off_Fan
 ---------------------------------------------------------------------------------
 (1) _Turn_Off_Fan                                         0     0      0   72610
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   72610
                                              6 BANK0     46    32     14
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   19393
                                             66 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   19114
                                             66 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3482
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    4593
                                             60 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    5645
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             16 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             16 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2355
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4079
                                              0 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3763
                                             76 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     978
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Change_Fan_Timer_Mode_Plus                        0     0      0   22440
                        _Do_Beep_Bad
                       _Do_Beep_Good
 ---------------------------------------------------------------------------------
 (1) _Do_Change_Fan_Timer_Mode_Minus                       0     0      0   22440
                        _Do_Beep_Bad
                       _Do_Beep_Good
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   11220
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   11220
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Decrease_Duty_Cycle                                  0     0      0   22394
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0   11220
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _Wait_Half_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0   11174
                                             60 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2219
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     826
                                             45 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4976
                                             30 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2958
                                             45 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2188
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_Half_Sec                                        2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0      46
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Duty_Cycle
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_Half_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_Half_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Change_Fan_Timer_Mode_Minus
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Do_Change_Fan_Timer_Mode_Plus
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Init_UART
       _OpenUSART
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Time
     _DS1621_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Monitor_Fan
       _Turn_Off_Fan
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _get_duty_cycle
     _Read_Volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
     _Set_D1_RGB
       ___awdiv
         ___wmul (ARG)
     _Set_D2_RGB
       ___awdiv
         ___wmul (ARG)
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     ___awdiv
       ___wmul (ARG)
     ___ftge
     ___wmul
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _get_RPM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Increase_Duty_Cycle
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Fan
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   _Set_D1_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_D2_RGB
     ___awdiv
       ___wmul (ARG)
   _Setup_Fan_Temp
     _DS1621_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_Half_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Fan_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Fan_Temp
       _Update_Setup_Fan_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Fan_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Read_Volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
     _Set_D1_RGB
       ___awdiv
         ___wmul (ARG)
     _Set_D2_RGB
       ___awdiv
         ___wmul (ARG)
     _Update_Setup_Fan_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     ___awdiv
       ___wmul (ARG)
     ___ftge
     ___wmul
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _get_RPM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Turn_Off_Fan
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___ftge
   ___wmul
   _check_for_button_input
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___awdiv
       ___wmul (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
     _isdigit
     _putch
     _scale
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)

 _chkisr (ROOT)
   _INT0_isr
   _INT1_isr
   _INT2_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     17      A3       7       63.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     34      7C       5       96.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      6B       1       84.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18A      34        0.0%
DATA                 0      0     18A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 26 18:43:58 2024

                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                            l40 3E30  
                                          l50 46F0                                            l47 4586  
                                          l55 4C9E                                            l72 4A40  
                                          l82 4976                                            l67 48C2  
                                          l77 494A                                  ___awdiv@sign 001C  
                        __size_of_Turn_On_Fan 0022                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 004A                                  ___ftadd@exp1 0058  
                                ___ftadd@exp2 0057                                  ___ftadd@sign 0056  
                                         l112 46B2                                           l115 47BA  
                                         l311 3854                                           l208 4CEC  
                                         l312 37C0                                           l314 3830  
                                         l315 3852                                           l252 48F2  
                                         l505 4DB8                                           l258 4060  
                                         l274 2D92                                           l283 2CE8  
                                         l451 49CC                                           l276 2C6C  
                                         l454 448E                                           l198 4766  
                                         l446 3B34                                           l560 4860  
                                         l490 42B2                                           l468 4C3A  
                                         l493 49FA                                           l496 4A1A  
                                         l960 1ADC                                           _FAN 00C1  
                                         l979 135C                                           _PR2 000FCB  
                                         _day 0063                             _Deactivate_Buzzer 4E20  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 00CF                                           _nbr 00BD  
                                         _rpm 005C                         __size_of_Turn_Off_Fan 001C  
                                         _rps 00BF                                           _txt 005E  
                                ___awmod@sign 0042                                           prod 000FF3  
                                         wreg 000FE8                                 _Increase_Time 3B36  
                          ?_Deactivate_Buzzer 0001               Update_Setup_Fan_Screen@dc_char1 004A  
             Update_Setup_Fan_Screen@dc_char2 004B               Update_Setup_Fan_Screen@dc_char3 004C  
                                  _Fan_SW_Txt 00E8        Update_Setup_Screen_Cursor_Forward@xinc 0030  
      Update_Setup_Screen_Cursor_Forward@yinc 002F                               ??_fillRectangle 001D  
                                __CFG_LVP$OFF 000000                       _TFT_GreenTab_Initialize 48F4  
                                ___ftdiv@cntr 0037                                  ___ftdiv@sign 003C  
                                __CFG_WDT$OFF 000000                                          l1102 34CE  
                              drawFastVLine@h 0019                                          l2006 41C4  
                                        l2102 47AA                                          l1313 277A  
                                        l2026 43DA                                          l1324 292E  
                                        l1502 49F4                                          l1423 071A  
                                        l1355 173C                                          l1348 1FDC  
                              drawFastVLine@x 0022                                drawFastVLine@y 0018  
                                        l1384 08A4                                          l1720 4824  
                                        l1490 4202                                          l1466 0C5E  
                                        l1299 2ED0                                          l1708 4164  
                                        l1902 3744                                          l1494 421C  
                                        l1910 3080                                          l1495 421E  
                                        l1496 4228                                          l1497 422A  
                                        l1827 391A                                          l1931 32F2  
                                        l1499 4244                                          l1907 30F0  
                                        l1916 30E0                                          l1925 3DA0  
                                        l1941 4A7E                                          l1909 3058  
                                        l1838 38F2                                          l1871 246C  
                                        l1695 3D0A                                          l1952 35B4  
                                        l1882 252E                                          l1786 31FA  
                                        l5306 4048                                          l1891 254A  
                                        l1867 2442                                          l1795 31EA  
                                        l1868 25C0                                          l1948 45D6  
                                        l5308 4056                                          l1967 4B14  
                                        l7200 4B2C                                          l1993 4A66  
                                        l6410 4676                                          l1899 3778  
                                        l1996 3FC8                                          l6420 468C  
                                        l5380 48D4                                          l5292 3FEA  
                                        l6422 4694                                          l6414 467E  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l9000 355E  
                                        l6440 47B2                                          l6432 46A8  
                                        l5296 4022                                          l5392 4648  
                                        l7208 4B4C                                          l6434 46AE  
                                        l9012 35A2                                          l9004 3572  
                                        l6428 469C                                          l5388 462C  
                                        l9006 3580                                          l6446 47C4  
                                        l6710 4206                                          l6702 41F2  
                                        l9022 3F70                                          l6622 3E26  
                                        l9008 358A                                          l6448 47CA  
                                        l9024 3F7E                                          l9112 01C2  
                                        l5752 4778                                          l6458 47DC  
                                        l6706 41FA                                          l9034 3FB8  
                                        l9026 3F86                                          l9050 41B4  
                                        l9042 4178                                          l9210 0612  
                                        l9202 05D4                                          l5754 477E  
                                        l5770 37F8                                          l6554 486C  
                                        l6618 3E08                                          l8420 247A  
                                        l9044 4186                                          l9300 09C6  
                                        l9204 05EE                                          l9220 06C8  
                                        l9140 0302                                          l5764 378A  
                                        l6556 4876                                          l8510 329E  
                                        l8502 3276                                          l6718 4214  
                                        l8414 2450                                          l9046 418E  
                                        l9302 09DA                                          l9222 06D8  
                                        l9214 063A                                          l9142 0318  
                                        l9070 0042                                          l5790 383E  
                                        l5782 3826                                          l6902 27FA  
                                        l7198 4B26                                          l6672 4C34  
                                        l8360 3866                                          l8520 32CC  
                                        l8512 32A4                                          l9056 4382  
                                        l8600 415A                                          l9320 0A82  
                                        l9312 0A48                                          l9232 0720  
                                        l9208 05FE                                          l9152 03A6  
                                        l9144 034A                                          l9136 02DA  
                                        l9128 0272                                          l9072 0058  
                                        l6912 28CA                                          l8506 3288  
                                        l8442 24D2                                          l8426 2486  
                                        l9058 4390                                          l9322 0A8E  
                                        l9314 0A54                                          l9250 0884  
                                        l9242 0798                                          l9226 06E8  
                                        l9170 04C6                                          l9162 041C  
                                        l9146 0360                                          l9090 0118  
                                        l9082 009C                                          l9066 002C  
                                        l5786 3834                                          l6906 2850  
                                        l6668 4C28                                          l8372 38BA  
                                        l8364 3876                                          l8516 32B6  
                                        l8444 24DE                                          l8436 24AE  
                                        l8532 3C8C                                          l9340 0B90  
                                        l9332 0AD6                                          l9308 0A10  
                                        l9228 06FC                                          l9180 0514  
                                        l9172 04CC                                          l9164 044A  
                                        l9156 03CC                                          l9092 011E  
                                        l9076 0066                                          l5796 384E  
                                        l6908 288A                                          l8382 38FA  
                                        l8374 38DA                                          l8366 3882  
                                        l9430 36DE                                          l8462 2568  
                                        l8454 2516                                          l8446 24EA  
                                        l9350 0C22                                          l9326 0AAC  
                                        l9270 091A                                          l9254 0894  
                                        l9238 0746                                          l9158 03D8  
                                        l9166 045E                                          l9078 007C  
                                        l8702 2C5A                                          l6870 25CE  
                                        l6918 2906                                          l8376 38E6  
                                        l8368 38A2                                          l9424 36B6  
                                        l8472 259A                                          l8456 2522  
                                        l8448 24F2                                          l8544 3CB4  
                                        l8560 3CF0                                          l9328 0AB8  
                                        l9336 0AFE                                          l9280 0968  
                                        l9272 0920                                          l9248 0874  
                                        l9192 0596                                          l9184 051A  
                                        l9176 04DA                                          l9096 012A  
                                        l9352 0C3C                                          l8720 2CE0  
                                        l8712 2C78                                          l6880 269C  
                                        l9450 371E                                          l9426 36D0  
                                        l8482 321A                                          l6698 41E8  
                                        l8546 3CBE                                          l8538 3C9E  
                                        l8802 1666                                          l9338 0B10  
                                        l9346 0C04                                          l9290 0984  
                                        l9266 08F0                                          l9098 0166  
                                        l8730 2D32                                          l8706 2C68  
                                        l6874 262A                                          l9610 4574  
                                        l8388 390C                                          l9460 3752  
                                        l8484 3234                                          l8564 3D00  
                                        l8556 3CE4                                          l8548 3CC6  
                                        l8580 4108                                          l8820 4B0C  
                                        l9348 0C18                                          l9284 0970  
                                        l9276 092E                                          l9188 056C  
                                        l8716 2CA8                                          l8708 2C70  
                                        l9380 3626                                          l6884 26D8  
                                        l6876 2660                                          l6892 2752  
                                        l9604 4560                                          l9700 3B2C  
                                        l8830 3000                                          l9294 09BE  
                                        l9286 0976                                          l9198 05C4  
                                        l8718 2CDC                                          l9526 175E  
                                        l6886 2712                                          l8488 3242  
                                        l8592 413E                                          l8584 4116  
                                        l8576 40FA                                          l8808 1718  
                                        l8736 2D5E                                          l8728 2D0A  
                                        l8744 2D8E                                          l9392 3684  
                                        l9384 3640                                          l9368 35DE  
                                        l6896 2788                                          l9704 3B30  
                                        l8930 31BC                                          l8914 3188  
                                        l8906 3156                                          l8586 4120  
                                        l8770 1F9C                                          l8762 1ED8  
                                        l8738 2D86                                          l9394 368A  
                                        l6898 27BE                                          l8932 31C2  
                                        l8836 301E                                          l8588 4128  
                                        l8596 414A                                          l9900 3BAC  
                                        l9724 460E                                          l9732 4520  
                                        l9478 3A5E                                          l8926 31AC  
                                        l8918 3198                                          l8870 30B2  
                                        l8790 1532                                          l9830 394A  
                                        l9822 392E                                          l9902 3BD6  
                                        l8952 3D3E                                          l8944 45AC  
                                        l8936 31D6                                          l8872 30B8  
                                        l8784 148A                                          l9840 3970  
                                        l9824 3934                                          l9568 1AA0  
                                        l9736 4532                                          l9680 3ADC  
                                        l9744 3406                                          l8962 3D9C  
                                        l8938 31E4                                          l8866 30A2  
                                        l8858 308E                                          l8794 1542  
                                        l8698 2C4E                                          l9842 3976  
                                        l9834 395A                                          l9818 391E  
                                        l9690 3B10                                          l9770 4C50  
                                        l9924 4A32                                          l8956 3D70  
                                        l8892 3112                                          l8876 30CC  
                                        l9852 399C                                          l9836 3960  
                                        l9828 3944                                          l9596 4800  
                                        l9676 3AC2                                          l9916 48B4  
                                        l9908 4C98                                          l9942 4958  
                                        l8886 3102                                          l8878 30DA  
                                        l9846 3986                                          l9862 3B38  
                                        l9686 3B06                                          STR_1 FF34  
                                        l8976 34EE                                          l9936 4944  
                                        l9848 398C                                          l9856 39A2  
                                        l9880 3B72                                          STR_2 FF48  
                                        STR_3 FEE1                                          l8994 3548  
                                        l9858 39CC                                          l9874 3B5C  
                                        l9786 2DB4                                          l9778 4C6A  
                                        STR_4 FE75                                          STR_5 FEF7  
                                        l9892 3B9E                                          l9868 3B4E  
                                        STR_6 FF20                                          STR_7 FE93  
                                        l8998 3558                                          l9886 3B88  
                                        STR_8 FECB                                          STR_9 FE32  
                                        l9994 0CC6                                          u4060 37B8  
                                        u4070 37EE                ?_Do_Change_Fan_Timer_Mode_Plus 0001  
                                        u3360 4018                                  printf@tmpval 00A2  
                                        u5300 3DFE                                          u8010 0712  
                                        u7230 2D40                                          u8311 36A8  
                                        u7600 350C                  __end_of_Activate_Buzzer_2KHz 4D60  
                                        u8331 36C6                                          u7371 2FF2  
                                        u8260 360A                                          u8500 4516  
                                        u7605 3504                                          u6741 240E  
                                        u6751 2422                                          u7391 3010  
                                        u8431 3A92                                          u9147 4DD4  
                                        u7581 34E0                                          _RBPU 007F8F  
                                        u6951 320C                                          u8490 4604  
                                        u6971 322A                                          u7790 0208  
                                        u7795 01FC                                          _TRMT 007D61  
                             Set_D1_RGB@range 0021                           ??_Deactivate_Buzzer 0011  
                                        _main 1ADE                                          _font FBC1  
     Update_Setup_Screen_Cursor_Backward@xinc 0030                                  ___ftpack@arg 0011  
     Update_Setup_Screen_Cursor_Backward@yinc 002F                                          _hour 0065  
                                ___ftpack@exp 0014                              __end_of_I2C_Init 4DFC  
                            __end_of_I2C_Read 46B4                                          _year 006B  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                              ??_get_full_ADC 0013                                          fsr0l 000FE9  
                                        fsr2h 000FDA                                          fsr1l 000FE1  
                                        indf2 000FDF                                          fsr2l 000FD9  
                                        _wrap 00DE                                          _volt 00B8  
                            __end_of_I2C_Stop 4D3C                                          pclat 000FFA  
                          __size_of_LCD_Reset 0012                                          prodh 000FF4  
                                        prodl 000FF3                               __end_of_Do_Beep 4C20  
                                        start 0018                   __size_of_I2C_Write_Cmd_Only 001A  
                             __end_of_Do_Init 4438                                   _Do_Beep_Bad 4BE8  
                             ??_drawFastVLine 001C                               Set_D2_RGB@range 0021  
                                ___ftmul@cntr 002C                               __end_of_i2cNack 4DF2  
                                ___param_bank 000010                                  ___ftmul@sign 002D  
     Update_Setup_Screen_Cursor_Forward@field 002E                                  ___fttol@exp1 003C  
                       __size_of_Do_Beep_Good 001C                                  _Turn_Off_Fan 4BB0  
                                ___fttol@lval 0038                                   ?_TIMER1_isr 0001  
                            __end_of_INT0_isr 49A4                              __end_of_INT1_isr 4E10  
                                       l10000 0D0A                                         l10020 0E06  
                                       l10012 0D90                                         l10200 21D6  
                            __end_of_INT2_isr 2ABA                                         l10212 2206  
                                       l10204 21E6                                         l10052 0EB6  
                                       l10060 0EF2                                         l10214 220C  
                                       l10150 2034                                         l10208 21F6  
                                       l10216 2212                                         l10056 0ED4  
                                       l10048 0E9A                                         l10162 208C  
                                       l10226 2230                                         l10082 0FE0  
                                       l10180 2188                                         l10084 0FF6  
                                       l10076 0FAC                                         l10500 1CA8  
                                       l10238 2288                                         l10254 2380  
                                       l10078 0FC2                                         l10192 21B6  
                                       l10280 23E8                                         l10272 23C8  
                                       l10504 1CB2                                         l10520 1D1C  
                                       l10282 23EE                                         l10514 1CD6  
                                       l10506 1CBC                                         l10196 21C6  
                                       l10276 23D8                                         l10268 23B8  
                                       l10284 23F4                                         l10524 1D2C  
                                       l10516 1CDE                                         l10508 1CC6  
                                       l10444 1AF4                                         l10518 1CE4  
                                       l10456 1B4C                                         l10538 1D76  
                                       l10492 1C94                                         l10484 1C80  
                                       l10476 1C4C                                         l10496 1C9E  
                                       l10488 1C8A                __size_of_Activate_Buzzer_500Hz 0012  
                   __end_of_Deactivate_Buzzer 4E28                               ??_do_update_pwm 003D  
                             drawFastVLine@hi 0020                               drawFastVLine@lo 0021  
                              Read_Volt@nStep 0044                 __end_of_Activate_Buzzer_500Hz 4D72  
                                       ?_main 0001                               __end_of___awdiv 3D0C  
                             __end_of___ftadd 25C2                                         STR_10 FEB0  
                                       STR_11 FE54                                         STR_20 FFBD  
                                       STR_12 FF7B                                         STR_21 FFFB  
                                       STR_13 FFF5                                         STR_14 FF1E  
                                       STR_22 FFF8                                         STR_30 FFCD  
                                       STR_15 FFC8                                         STR_23 FFDC  
                                       STR_31 FFD2                                         STR_40 FE75  
                                       STR_24 FFF1                                         STR_32 FFE1  
                                       STR_16 FFD7                                         STR_41 FEF7  
                                       STR_33 FFB3                                         STR_17 FFB7  
                                       STR_25 FFAC                                         STR_26 FFB3  
                                       STR_42 FF20                                         STR_34 FE75  
                                       STR_18 FFC2                                         STR_43 FE93  
                                       STR_27 FFE5                                         STR_19 FFA0  
                                       STR_35 FF0C                                         STR_36 FF20  
                                       STR_28 FFE9                                         STR_44 FF88  
                             __end_of___awmod 4166                                         STR_37 FE93  
                                       STR_45 FFC8                                         STR_29 FFED  
                                       STR_46 FFD7                                         STR_38 FF94  
                                       STR_39 FF6C                                         STR_47 FF5B  
                             __end_of___ftdiv 377A                               __end_of___ftneg 4A8C  
                             __end_of___lldiv 3FDA                               __end_of___ftmul 32F4  
                                       _T0CON 000FD5                               ___awdiv@divisor 0019  
                                       _T1CON 000FCD                               __end_of___llmod 41D6  
                             __end_of___ftsub 45D8                               __end_of___fttol 35B6  
                                       _T2CON 000FCA              ??_Do_Change_Fan_Timer_Mode_Minus 0046  
             ?_Do_Change_Fan_Timer_Mode_Minus 0001                                         _T3CON 000FB1  
                                       i2l623 3E88                                         i2l635 2AB8  
                                       i2l658 499A                               ___awdiv@counter 001B  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTA 000F80  
                                       _PORTD 000F83                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                       __end_of_Wait_Half_Sec 4C3C                                         _TXREG 000FAD  
                                       _TXSTA 000FAC                               __end_of_get_RPM 46F2  
                                       _Rcmd1 2ED2                                         _Rcmd3 32F4  
                                ___lltoft@exp 0021      Update_Setup_Screen_Cursor_Backward@field 002E  
                                  _Nec_Button 00C9                 __size_of_Do_Save_New_Fan_Temp 0014  
                                  _i2cHighSda 4E18                                    _i2cHighScl 4DD0  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                               ___awtoft@sign 001C                               __end_of_dpowers FDC4  
                                       _font2 FCC0              __size_of_Update_Setup_Fan_Screen 0082  
                                       _found 00D0                                         _scale 135E  
                             __end_of_isdigit 4B16                                         _tempC 0069  
                                       _tempF 006A                                         _month 0067  
                               ___ftpack@sign 0015                                         _putch 4DB4  
                           __end_of_I2C_Start 4D4E                             __end_of_I2C_Write 47EA  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                                       plusw1 000FE3                                         plusw2 000FDB  
                                       status 000FD8                             ?_DS1621_Read_Temp 0014  
                                _Do_Beep_Good 4BCC               __size_of_check_for_button_input 00AE  
                       __end_of_Go_Next_Field 4B56                               write_data@data_ 0013  
                          ??_DS1621_Read_Temp 0016                         _Select_Fan_Temp_Field 00CA  
                             __initialization 431A                                  __end_of_main 1D9A  
                                __end_of_font FCC0                   __end_of_Decrease_Duty_Cycle 4A42  
                            __end_of_Init_ADC 4DD0                              get_duty_cycle@dc 0019  
                            __end_of_Rcmd2red 4730                                        ??_main 005A  
                               ___fttol@sign1 0037                             _Decrease_Fan_Temp 4C56  
                                  _Set_D1_RGB 45D8                                 __activetblptr 000002  
                                  _Set_D2_RGB 44E6                             ?_DS3231_Read_Time 0001  
                           __end_of_LCD_Reset 4D18                          __size_of__tdiv_to_l_ 0110  
                       __end_of_Go_Prev_Field 4B36                     ??_TFT_GreenTab_Initialize 001B  
                          ?_Decrease_Fan_Temp 0001                                  _Fan_Mode_Txt 017D  
                  ??_Update_Setup_Time_Screen 004A                                _Init_Interrupt 4A8C  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                                     I2C_Init@c 0011  
                                   I2C_Read@n 0012                                        _ADCON0 000FC2  
                                      _ADCON1 000FC1                                        _ADCON2 000FC0  
                         DS1621_Read_Temp@Cmd 0016                              ___llmod@dividend 001E  
                                      ?_scale 0043                                        _ADRESH 000FC4  
                                      _ADRESL 000FC3                                        _CCPR1L 000FBE  
                                      _CCPR2L 000FBB                              ___awdiv@dividend 0017  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 4826                                        ?_putch 0001  
                            __end_of___ftpack 391C                              __end_of___lbtoft 4A68  
                         ??_Decrease_Fan_Temp 004D                                     ??_Do_Beep 0046  
                            __end_of___lltoft 43DC                                 ??_Monitor_Fan 0059  
                                      _DC_Txt 00E4                                     ??_Do_Init 0059  
                                      i2l7500 29DC                                        i2l7510 2A04  
                                      i2l8222 3E74                                        i2l7440 4994  
                                      i2l7522 2A5E                                        i2l7514 2A08  
                                      i2l7506 29F8                                        i2l8226 3E7E  
                                      i2l8218 3E6A                                        i2l7436 4980  
                                      i2l7540 2A92                                        i2l7508 29FE  
                                      i2l7460 2958                                        i2l7536 2A86  
                                      i2l7480 29AA                                        i2l7472 298C  
                                      i2l7538 2A8C                                        i2l7546 2A96  
                                      i2l7494 29D2                                        i2l7486 29B4  
                                      _OSCCON 000FD3                            __size_of_Init_UART 0014  
                         __size_of_TIMER1_isr 000C                                        _SPBRGH 000FB0  
                                      _SSPBUF 000FC9                                     ??_i2cNack 0011  
                            _force_nec_state0 4E28                            __size_of_Read_Volt 006E  
                            __end_of_delay_ms 476E                                        _i2cAck 4D18  
                                      _Nec_ok 00BB                              __end_of_fillRect 466C  
                            __end_of_drawChar 2D94                              __end_of__powers_ FE12  
                          __size_of_OpenUSART 0070                                        ___ftge 3D0C  
                              _FAN_TIMER_MODE 0060                                _FAN_TIMER_TIME 00C3  
         __end_of_Initialize_Setup_Fan_Screen 34D0                   _Initialize_Setup_Fan_Screen 33E6  
                    __size_of_Activate_Buzzer 0012                                        ___wmul 49CE  
                                   ??___awdiv 001B                              __end_of_drawtext 3698  
                                   ??___ftadd 0053                                     ??___awmod 0041  
                                   ??___ftdiv 0034                             _In_Fan_Temp_Setup 00C7  
                                   ??___ftneg 0014                                     ??___lldiv 0019  
                                   ??___ftmul 0025                                     ??___llmod 0026  
                                   ??___ftsub 0059                                     ??___fttol 0032  
                                      _chkisr 0008                                        _buffer 0100  
                   __end_of_Decrease_Fan_Temp 4C70                                        _fround 1D9A  
                                      clear_0 4320                                        clear_1 432C  
                            ___awdiv@quotient 001D                                        _minute 0066  
                                      _second 0068                               ___awmod@divisor 003F  
                                  _Timing_Txt 013C                          _Activate_Buzzer_2KHz 4D4E  
                                   ??_get_RPM 0021                    __size_of_Deactivate_Buzzer 0008  
                             ___awmod@counter 0041                                        _printf 001C  
                                drawtext@size 0040                               ??_Increase_Time 004A  
                                      _strcpy 4862                                        _strlen 476E  
                       ___ftmul@f3_as_product 0029                        __end_of_Init_Interrupt 4AB0  
                                  _Toggle_Fan 4C8A                          __end_of_get_full_ADC 4A1C  
                      _check_for_button_input 3A88                              _Do_Save_New_Time 4CCA  
                                   ??_isdigit 0011                                     ?_I2C_Init 0011  
                                   ?_I2C_Read 0001                       __size_of_Setup_Fan_Temp 01E2  
                      get_duty_cycle@set_temp 0013                                     ?_I2C_Stop 0001  
                                __mediumconst FBC0                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 4B76                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                            __end_of_spiwrite 4CF2                      __size_of_Exit_Time_Setup 0010  
                          __size_of_bcd_2_dec 002A                                    __accesstop 0080  
                     __end_of__initialization 4372                              ??_get_duty_cycle 0015  
                          __size_of_dec_2_bcd 0058                                    ___ftadd@f1 004D  
                                  ___ftadd@f2 0050                                    ___ftge@ff1 0011  
                                  ___ftge@ff2 0014                                     ?_INT0_isr 0001  
                                   ?_INT1_isr 0001                                     ?_INT2_isr 0001  
                               ___rparam_used 000001                                    ___ftdiv@f1 002E  
                                  ___ftdiv@f2 0031                                    ___ftdiv@f3 0038  
                                  ___ftneg@f1 0011                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           __end_of_Monitor_Fan 4588  
                                  ___ftmul@f1 001F                                    ___ftmul@f2 0022  
                                  ___ftsub@f1 0080                                    ___ftsub@f2 0083  
                                  ___fttol@f1 002E                                 __end_of_Rcmd1 2FE2  
                               __end_of_Rcmd3 33E6                                __pcstackCOMRAM 0001  
                                __pidataBANK0 4AB0                                  __pidataBANK1 3EC2  
                                  ___lltoft@c 0019                                 __end_of_font2 FD9C  
                           __end_of_i2cLowSda 4E06                             __end_of_i2cLowScl 4E18  
                               __end_of_scale 173E                                 __end_of_putch 4DC2  
                       ?_Activate_Buzzer_2KHz 0001                                     INT0_isr@k 0001  
                           __end_of_Init_UART 4D06                                drawPixel@color 0019  
                                dec_2_bcd@bcd 0047                                  dec_2_bcd@dec 0049  
                      __size_of_Decrease_Time 00B6                                   ?_Set_D1_RGB 0001  
                                 ?_Set_D2_RGB 001F                            _setup_fan_set_temp 00D4  
                          _setup_fan_set_text 0187                               ?_Init_Interrupt 0001  
                      __size_of_write_command 0010                                    __div_to_l_ 30F2  
                           __end_of_Read_Volt 42B4                                    ??_I2C_Init 0015  
                                  ??_I2C_Read 0011                                    ??_I2C_Stop 0011  
                                     ??_Rcmd1 001B                                       ??_Rcmd3 001B  
                     _Update_Setup_Fan_Screen 4062                            __size_of_drawPixel 0030  
                           __end_of_OpenUSART 4246                               __div_to_l_@exp1 001C  
                             __div_to_l_@cntr 001B                   __end_of_Increase_Duty_Cycle 48C4  
                                     ??_scale 0046                          Read_Volt@ADC_Channel 0043  
                             __div_to_l_@quot 0017                                       ??_putch 0011  
                                  __pbssBANK0 00B4                                     ?_Init_ADC 0001  
        __end_of_Initialize_Setup_Time_Screen 2ED2         __size_of_Initialize_Setup_Time_Screen 013E  
                _Initialize_Setup_Time_Screen 2D94                                 ??_DS1621_Init 0016  
                                   ?_Rcmd2red 0001                               spiwrite@spidata 0012  
                                  ??_INT0_isr 0001                                    ??_INT1_isr 0001  
                                  ??_INT2_isr 0001                                 __div_to_l_@f1 0011  
                               __div_to_l_@f2 0014                                  _fan_set_temp 00DC  
                                     ?_i2cAck 0001                                  ?_Do_Beep_Bad 0001  
                               ??_Turn_On_Fan 0059                                I2C_Read@inByte 0013  
                                     ?___ftge 0011                                       ?___wmul 0011  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                                     ?_chkisr 0001                        __size_of_setAddrWindow 0056  
                           __end_of_bcd_2_dec 49CE                                       _CCP1CON 000FBD  
            I2C_Write_Cmd_Write_Data@Data_Out 0014                                       _CCP2CON 000FBA  
                      __size_of_Do_Setup_Time 023E                                  ??_TIMER1_isr 0001  
                  __size_of_Decrease_Fan_Temp 001A                                       ?_fround 0043  
                               ??_I2C_ReStart 0011                                     ?___awtoft 0019  
                                   ?___ftpack 0011                                     ?___lbtoft 0019  
                                     _FANMODE 00C2                                    I2C_Write@n 0012  
                                     ?_printf 0086                                     ?___lltoft 0019  
                                     ?_strcpy 0011                                       ?_strlen 0011  
                           __end_of_dec_2_bcd 4490                                   ?_Toggle_Fan 0001  
                           ??_Activate_Buzzer 0011                                 _Fan_Timer_Txt 00F4  
                                  _fillScreen 4B94                         __end_of_Update_Screen 135E  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                                     _SSPSTAT 000FC7                                       _RPM_Txt 0182  
                       __end_of_fillRectangle 3856                                       _Do_Beep 4C04  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 43DC                                   _Monitor_Fan 4538  
                    _I2C_Write_Cmd_Write_Data 4B56                    __end_of_I2C_Write_Cmd_Only 4C8A  
                                  ??_Rcmd2red 0014                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 391C                       get_duty_cycle@diff_temp 0017  
                                     _i2cNack 4DE8                            __end_of_TIMER1_isr 4DE8  
                          _Fan_Timer_Mode_Txt 00F0                 ?_Initialize_Setup_Time_Screen 0001  
                               _write_command 4DA4                                     _I2C_Start 4D3C  
                                   _I2C_Write 47AC                             ??_Exit_Time_Setup 004A  
                         __size_of_Set_D1_RGB 004A                           __size_of_Set_D2_RGB 0052  
                             __size_of_i2cAck 0012                             __end_of__npowers_ FDEB  
                                     __Hparam 0000                                    _scale$2977 0046  
                __end_of_Do_Save_New_Fan_Temp 4CCA                                       __Lparam 0000  
                         __end_of_DS1621_Init 4B94                             __end_of_drawPixel 48F4  
                       __end_of_drawFastVLine 4062                               __size_of___ftge 0096  
                                     ___awdiv 3C76                                       ___ftadd 23FE  
                                     ___awmod 40E4                                       ___ftdiv 3698  
                                     ___ftneg 4A68                                    _light_flag 00D1  
                                     ___lldiv 3F4E                               __size_of___wmul 0028  
                      ??_Activate_Buzzer_2KHz 0011                                       ___ftmul 31FC  
                                     ___llmod 4166                                       ___ftsub 4588  
                                     ___fttol 34D0                         __size_of_get_full_ADC 0026  
                             __size_of_chkisr 3EBA                                     ?_spiwrite 0001  
                                     __pcinit 431A                                    ??___awtoft 001C  
                                  ??___ftpack 0016                                    ??___lbtoft 001C  
                             __size_of_fround 0244                                       __ramtop 1000  
                                     _get_RPM 46B4                                    ??___lltoft 001D  
                                     __ptext0 1ADE                                       __ptext1 0C60  
                                     __ptext2 4C8A                                       __ptext3 4AD2  
                                     __ptext4 221C                                       __ptext5 33E6  
                   __size_of_DS1621_Read_Temp 003C                                       __ptext6 4C3C  
                                     __ptext7 4CB6                                       __ptext8 4C56  
                                     __ptext9 4062                               __size_of_printf 0C44  
                                 _Timer_Table 0138                           __end_of_Turn_On_Fan 4AF4  
                                   _T0CONbits 000FD5                               __size_of_strcpy 0032  
                             __size_of_strlen 003E                             __end_of_hexpowers FE32  
                    __end_of_force_nec_state0 4E30                                     _T1CONbits 000FCD  
                                 ?__div_to_l_ 0011                     ??_Update_Setup_Fan_Screen 004A  
                                     _dpowers FD9C                         __end_of_do_update_pwm 3A88  
                              _Setup_Fan_Temp 221C                                       _isdigit 4AF4  
                       _Activate_Buzzer_500Hz 4D60                              ___awmod@dividend 003D  
                                  _duty_cycle 0064                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 4CB6                                 drawtext@_text 003A  
                               drawtext@color 003C                                    ??_fillRect 0028  
                                  ??_drawChar 0035                                     _LCD_Reset 4D06  
                           _DS3231_Write_Time 3BDC                                 _setAddrWindow 4490  
                              __pintcode_body 3E32                                    delay_ms@ms 0017  
                        end_of_initialization 4372                                 _Do_Setup_Time 1FDE  
                                   _INT0_flag 00C4                                     _INT1_flag 00C5  
                                   _INT2_flag 00C6                                    ??_drawtext 0041  
                           _Increase_Fan_Temp 4C3C                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                                ?_write_command 0001  
                               __Lmediumconst FBC0                     __size_of_DS3231_Read_Time 0066  
                                     int_func 3E32                            ?_Increase_Fan_Temp 0001  
                     DS3231_Read_Time@Address 0014                      DS3231_Write_Time@Address 004B  
                                  ?_I2C_Start 0001                                    ?_I2C_Write 0001  
                                  get_RPM@RPS 0021                      __end_of_Do_Save_New_Time 4CDE  
                                _get_full_ADC 49F6                           __size_of_Toggle_Fan 0016  
                             ___lldiv@divisor 0015                           ??_DS3231_Write_Time 004A  
                             ___lldiv@counter 001D                       check_for_button_input@j 01A1  
                                  _tempSecond 00DD                        __size_of_Wait_Half_Sec 001C  
                                   _RCSTAbits 000FAB                                       printf@c 00B3  
                                     printf@f 0086                           ??_Increase_Fan_Temp 004D  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                              __tdiv_to_l_@f1 0011                                __tdiv_to_l_@f2 0014  
                                  ??_spiwrite 0011                       ?_check_for_button_input 0001  
                                     strlen@s 0011                                 ??__tdiv_to_l_ 0017  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                        __end_of_Setup_Fan_Temp 23FE  
                            drawtext@cursor_x 0049                              drawtext@cursor_y 0048  
                                   _PORTBbits 000F81                                     _PORTCbits 000F82  
                                   _PORTDbits 000F83                              I2C_Write@outByte 0011  
                                  _setup_date 015C                                   ?_fillScreen 0024  
                __size_of_Decrease_Duty_Cycle 0026                                    _setup_hour 00D5  
                                  _setup_time 0165                                    _setup_year 00D9  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 3C76  
                                   _TRISBbits 000F93                                     _TRISCbits 000F94  
        __size_of_Initialize_Setup_Fan_Screen 00EA                        __size_of_Go_Next_Field 0020  
                                ??_i2cHighSda 0011                                  ??_i2cHighScl 0011  
                           __size_of_I2C_Init 000A                             __size_of_I2C_Read 0048  
                   __end_of_Increase_Fan_Temp 4C56                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 0014                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                              drawtext@textsize 0044  
                                   _SYSTEM_ON 0062                                    drawPixel@x 001B  
                                  drawPixel@y 0018                                   _DS1621_Init 4B76  
                                 ___ftdiv@exp 003B                                   printf@width 00A6  
                                   _TXSTAbits 000FAC             __size_of_Update_Setup_Time_Screen 0184  
                          get_full_ADC@result 0015                           __size_of__div_to_l_ 010A  
                   ?_Update_Setup_Time_Screen 0001                             __size_of_INT0_isr 002C  
                           __size_of_INT1_isr 000A                             __size_of_INT2_isr 018A  
                              __end_of_i2cAck 4D2A                                   ___ftmul@exp 0028  
                      __size_of_Go_Prev_Field 0020                ??_Initialize_Setup_Time_Screen 004A  
                        __size_of_Do_Beep_Bad 001C                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 4AD2                __end_of_check_for_button_input 3B36  
                            ??_Init_Interrupt 0011                            __end_of_i2cHighSda 4E20  
                              __end_of___ftge 3DA2                            __end_of_i2cHighScl 4DDC  
                               Read_Volt@volt 0040                                __end_of___wmul 49F6  
                               delay_ms@count 0019                                    _write_data 4D94  
                              __end_of_chkisr 3EC2                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 4CA0                               ?_Setup_Fan_Temp 0001  
                                  drawtext@bg 003E                                __end_of_fround 1FDE  
                                ??_Set_D1_RGB 001F                                  ??_Set_D2_RGB 0021  
                      ?_Activate_Buzzer_500Hz 0001                                     _i2cLowSda 4DFC  
                                   _i2cLowScl 4E10                                __end_of_printf 0C60  
                       __end_of_Increase_Time 3BDC                                __end_of_strcpy 4894  
                              __end_of_strlen 47AC                                     _Nec_state 0061  
                         start_initialization 431A                                     _Init_UART 4CF2  
                               _Wait_Half_Sec 4C20                           __end_of__tdiv_to_l_ 30F2  
                        _Do_Save_New_Fan_Temp 4CB6                        Update_Screen@neg_tempC 004C  
                      Update_Screen@neg_tempF 004E                                     _Read_Volt 4246  
                             ??_Decrease_Time 004A                            get_duty_cycle@temp 0011  
                             ??_write_command 0013                          Set_D1_RGB@duty_cycle 0020  
                                   _OpenUSART 41D6                               ___llmod@divisor 0022  
                            __CFG_OSC$INTIO67 000000                                   ??_I2C_Start 0011  
                           __size_of_Init_ADC 000E                               ___llmod@counter 0026  
                                 ??_I2C_Write 0011                                      ??_i2cAck 0011  
                           __size_of_Rcmd2red 003E                           __size_of_fillScreen 001C  
                          __end_of_Set_D1_RGB 4622                            __end_of_Set_D2_RGB 4538  
                               _Go_Next_Field 4B36                               _Activate_Buzzer 4D72  
                                    ??___ftge 0017                                      ??___wmul 0015  
                               ?_Turn_Off_Fan 0001                                      ??_chkisr 0003  
                                 __pdataBANK0 00DA                                   __pdataBANK1 0100  
                                    ??_fround 0046                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 0094  
                            _DS1621_Read_Temp 4826                                      ??_strcpy 0015  
                                    ??_strlen 0013                                  ??_Toggle_Fan 0059  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                                   _bcd_2_dec 49A4                                    fround@prec 004C  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                                ?_Wait_Half_Sec 0001  
                           __size_of___lltoft 0060                                   __pbssCOMRAM 005A  
                  ??_I2C_Write_Cmd_Write_Data 0015                    __size_of_DS3231_Write_Time 009A  
                                  ?_Init_UART 0001                               ??_setAddrWindow 0017  
                               __pcstackBANK0 0080                                 __pcstackBANK1 018C  
                               _Go_Prev_Field 4B16                               ??_Do_Setup_Time 005A  
                       ?_Do_Save_New_Fan_Temp 0001                                     _dec_2_bcd 4438  
                             _Exit_Time_Setup 4D84                                    ?_Read_Volt 003D  
                  __size_of_Increase_Fan_Temp 001A                                   ??_LCD_Reset 001B  
                                _isdigit$2600 0012                             __size_of_delay_ms 003E  
                                    ?_Do_Beep 0001                                      ?_Do_Init 0001  
                                ?_Monitor_Fan 0001                             __size_of_fillRect 004A  
                           __size_of_drawChar 0156                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 42B4                                      ?_i2cNack 0001  
                           __size_of_drawtext 00E2                                 ?_Do_Beep_Good 0001  
 __end_of_Update_Setup_Screen_Cursor_Backward 2930  __size_of_Update_Setup_Screen_Cursor_Backward 01B4  
       ??_Update_Setup_Screen_Cursor_Backward 002E          ?_Update_Setup_Screen_Cursor_Backward 0001  
         _Update_Setup_Screen_Cursor_Backward 277C                  __size_of_Increase_Duty_Cycle 0030  
                              ?_Go_Next_Field 0001                            __end_of_Toggle_Fan 4CA0  
                                 I2C_Read@ack 0011                                     _bit_count 00CD  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 4920  
                              ??_Turn_Off_Fan 0059                                 __pmediumconst FBC0  
                                    ?___awdiv 0017                                     __ptext100 4A1C  
                                   __ptext101 4C04                                     __ptext110 4D72  
                                   __ptext102 39D2                                     __ptext103 4A42  
                                   __ptext112 4DDC                                     __ptext104 34D0  
                                   __ptext113 2930                                     __ptext105 31FC  
                                   __ptext114 4E28                                     __ptext106 3698  
                                   __ptext115 4E06                                     __ptext107 3856  
                                   __ptext116 4978                                     __ptext108 4C20  
                                   __ptext109 4E20                                      ?___ftadd 004D  
                                    ?___awmod 003D                                      ?___ftdiv 002E  
                                    ?___ftneg 0011                                      ?___lldiv 0011  
                                    ?___ftmul 001F                                      ?___llmod 001E  
                                    ?___ftsub 0080                                     __npowers_ FDC4  
                                    ?___fttol 002E                       __size_of_get_duty_cycle 0090  
                                   __tft_type 00CC                            _I2C_Write_Cmd_Only 4C70  
                          drawFastVLine@color 001A                                   ?_write_data 0001  
                                   _drawPixel 48C4                                      ?_get_RPM 001F  
                                 __tdiv_to_l_ 2FE2                             __size_of_spiwrite 0014  
                                ??__div_to_l_ 0017                                    ?_bcd_2_dec 0001  
                         ?_I2C_Write_Cmd_Only 0013                             ?_force_nec_state0 0001  
                                    ?_isdigit 0001                                      _I2C_Init 4DF2  
                                    _I2C_Read 466C                                ?_Go_Prev_Field 0001  
                                    _I2C_Stop 4D2A                             _Initialize_Screen 173E  
                              __size_of_Rcmd1 0110                                __size_of_Rcmd3 00F2  
                                  ?_dec_2_bcd 0043                            ??_force_nec_state0 0001  
                    I2C_Write_Cmd_Only@Device 0014                                     _hexpowers FE12  
                          ?_Initialize_Screen 0001                                __size_of_scale 03E0  
                              __size_of_putch 000E                       __end_of_Activate_Buzzer 4D84  
                              ___wmul@product 0015                                ??_Do_Beep_Good 0046  
                         ??_Initialize_Screen 004A                                  _Select_Field 00CB  
                                    _INT0_isr 4978                                      _INT1_isr 4E06  
                                    _INT2_isr 2930                           _Decrease_Duty_Cycle 4A1C  
                        ??_I2C_Write_Cmd_Only 0014                                      _PIE1bits 000F9D  
                                   _tempC_Txt 00F8                                     _tempF_Txt 00DF  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 06FE  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 004A  
                                    _PIR1bits 000F9E                            __end_of__div_to_l_ 31FC  
                               _In_Time_Setup 00C8                            ??_Do_Save_New_Time 004C  
                            _Fan_Set_Temp_Txt 00EC                  ?_Initialize_Setup_Fan_Screen 0001  
                                   _setup_day 00D3                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                                     drawChar@c 002F  
                                   drawChar@i 0038                                     drawChar@j 0037  
                                   drawChar@x 0036                                     drawChar@y 002E  
               __size_of_Activate_Buzzer_2KHz 0012               ??_Do_Change_Fan_Timer_Mode_Plus 0046  
                                  ?_drawPixel 0018                        __size_of_fillRectangle 00DC  
                                  _ADCON0bits 000FC2                               ??_Wait_Half_Sec 0011  
                     __end_of_Exit_Time_Setup 4D94                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 1ADE                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                          ?_Decrease_Duty_Cycle 0001  
                                ??_fillScreen 0026                                    printf@flag 00AE  
                                  printf@fval 00B0                                    printf@prec 00A0  
                      ??_Do_Save_New_Fan_Temp 004A                                   ??_Init_UART 0014  
                               Set_D2_RGB@rpm 001F              __end_of_Update_Setup_Time_Screen 2C3E  
                                 ??_Read_Volt 0040                                   _INTCON2bits 000FF1  
                                 _INTCON3bits 000FF0                                     copy_data0 4346  
                                   copy_data1 4366                                     drawtext@i 0046  
                      __size_of_drawFastVLine 0088                                     drawtext@x 0043  
                                   drawtext@y 0039                                      _Nec_code 00B4  
                                    _Init_ADC 4DC2                             write_command@cmd_ 0013  
                                 ??_OpenUSART 0013                              __size_of_Do_Beep 001C  
                                ?_DS1621_Init 0001                                      _Rcmd2red 46F2  
                            __size_of_Do_Init 005C                           __size_of_write_data 0010  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
                                _Time_Elapsed 005A                              __size_of_i2cNack 000A  
                               _RTC_ALARM_Txt 00DA        __end_of_Do_Change_Fan_Timer_Mode_Minus 4978  
     __size_of_Do_Change_Fan_Timer_Mode_Minus 002C                _Do_Change_Fan_Timer_Mode_Minus 494C  
                                    __Hrparam 0000                        __size_of_do_update_pwm 00B6  
                              Wait_Half_Sec@k 0011                            __end_of_fillScreen 4BB0  
                                    __Lrparam 0000                              ??_Setup_Fan_Temp 005A  
                                ?_Turn_On_Fan 0001                       ??_Activate_Buzzer_500Hz 0011  
                            __size_of___awdiv 0096                              __size_of___ftadd 01C4  
                    ?_Update_Setup_Fan_Screen 0001                              __size_of___awmod 0082  
                            __size_of___ftdiv 00E2                              __size_of___ftneg 0024  
                            __size_of___lldiv 008C                              __size_of___ftmul 00F8  
                            __size_of___llmod 0070                              __size_of___ftsub 0050  
                            __size_of___fttol 00E6                                      _Volt_Txt 0177  
               ??_Initialize_Setup_Fan_Screen 004A                                      ___awtoft 47EA  
                                    ___ftpack 3856                                      ___lbtoft 4A42  
                                ?_I2C_ReStart 0001                                   _fround$2975 0049  
                                 _fround$2976 0046                                      ___lltoft 437C  
                       ??_Decrease_Duty_Cycle 0046                               ??_Go_Prev_Field 0031  
                            __size_of_get_RPM 003E                                   ??_bcd_2_dec 0011  
                               _Update_Screen 0C60                                      _date_Txt 0153  
                            __size_of_isdigit 0022                                      _delay_ms 4730  
                                 ??_dec_2_bcd 0045                                      __ptext10 4894  
                                    __ptext11 1FDE                                      __ptext20 4538  
                                    __ptext12 46B4                                      __ptext21 3DA2  
                                    __ptext13 3A88                                      __ptext30 173E  
                                    __ptext22 2D94                                      __ptext14 49A4  
                                    __ptext31 4862                                      __ptext23 3B36  
                                    __ptext15 44E6                                      __ptext40 3BDC  
                                    __ptext32 4B94                                      __ptext24 4B16  
                                    __ptext16 45D8                                      __ptext41 4438  
                                    __ptext33 377A                                      __ptext25 277C  
                                    __ptext17 4246                                      __ptext50 48C4  
                                    __ptext42 42B4                                      __ptext34 48F4  
                                    __ptext26 4B36                                      __ptext18 49F6  
                                    __ptext51 4490                                      __ptext43 391C  
                                    __ptext35 32F4                                      __ptext27 25C2  
                                    __ptext19 47EA                                      __ptext60 43DC  
                                    __ptext52 4D94                                      __ptext44 2ABA  
                                    __ptext36 46F2                                      __ptext28 4D84  
                                    __ptext61 4BB0                                      __ptext53 4DA4  
                                    __ptext45 35B6                                      __ptext37 2ED2  
                                    __ptext29 4CCA                                      __ptext70 2FE2  
                                    __ptext62 001C                                      __ptext54 4CDE  
                                    __ptext46 476E                                      __ptext38 4D06  
                                    __ptext71 30F2                                      __ptext63 135E  
                                    __ptext55 4826                                      __ptext47 2C3E  
                                    __ptext39 4730                                      __ptext80 41D6  
                                    __ptext72 437C                                      __ptext64 4DB4  
                                    __ptext56 466C                                      __ptext48 4622  
                                    __ptext81 4A8C                                      __ptext73 4166  
                                    __ptext65 4AF4                                      __ptext57 4DE8  
                                    __ptext49 3FDA                                      __ptext90 4DFC  
                                    __ptext82 4DC2                                      __ptext74 3F4E  
                                    __ptext66 1D9A                                      __ptext58 4D18  
                                    __ptext91 4E10                                      __ptext83 4DF2  
                                    __ptext75 4588                                      __ptext67 49CE  
                                    __ptext59 4CA0                                      __ptext92 4E18  
                                    __ptext84 4B76                                      __ptext76 23FE  
                                    __ptext68 40E4                                      __ptext93 4DD0  
                                    __ptext85 4B56                                      __ptext77 4A68  
                                    __ptext69 3C76                                      __ptext94 4920  
                                    __ptext86 4C70                                      __ptext78 3D0C  
                                    __ptext95 494C                                      __ptext87 47AC  
                                    __ptext79 4CF2                                      __ptext96 4BCC  
                                    __ptext88 4D2A                                      __ptext97 4D4E  
                                    __ptext89 4D3C                                      __ptext98 4BE8  
                                    __ptext99 4D60                                      _fillRect 4622  
                                    _drawChar 2C3E                                      __powers_ FDEB  
                        __end_of_Turn_Off_Fan 4BCC              __size_of_TFT_GreenTab_Initialize 002C  
  __end_of_Update_Setup_Screen_Cursor_Forward 277C   __size_of_Update_Setup_Screen_Cursor_Forward 01BA  
        ??_Update_Setup_Screen_Cursor_Forward 002E           ?_Update_Setup_Screen_Cursor_Forward 0001  
          _Update_Setup_Screen_Cursor_Forward 25C2                                      _colstart 00CE  
                                    _drawtext 35B6                                    strcpy@from 0013  
                               _fillRectangle 377A                      __end_of_DS1621_Read_Temp 4862  
                            ?_Activate_Buzzer 0001                                 __size_of_main 02BC  
                        __size_of_Monitor_Fan 0050                                 ??_Do_Beep_Bad 0046  
                                    _time_Txt 016E                               fillRectangle@hi 0021  
                             fillRectangle@lo 0022                                _get_duty_cycle 3DA2  
                               _drawFastVLine 3FDA                                     printf@idx 009D  
                                   printf@exp 00A8                                      _spiwrite 4CDE  
                                   printf@val 00AA                                   ??_drawPixel 001B  
                                    _rowstart 00D2                      __end_of_DS3231_Read_Time 431A  
                  __size_of_Initialize_Screen 03A0                              ?_Exit_Time_Setup 0001  
                        __end_of_Do_Beep_Good 4BE8                           _Increase_Duty_Cycle 4894  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
                               _do_update_pwm 39D2         __end_of_Do_Change_Fan_Timer_Mode_Plus 494C  
      __size_of_Do_Change_Fan_Timer_Mode_Plus 002C                 _Do_Change_Fan_Timer_Mode_Plus 4920  
                              OpenUSART@spbrg 0011                                      isdigit@c 0013  
                                    scale@scl 0049                                     spiwrite@x 0011  
                                    intlevel2 0000                                ?_fillRectangle 0018  
                            __tdiv_to_l_@exp1 001F                              __tdiv_to_l_@cntr 001E  
                            __tdiv_to_l_@quot 001A                  check_for_button_input@array1 018C  
                       __end_of_Decrease_Time 39D2                      _Update_Setup_Time_Screen 2ABA  
                       __end_of_write_command 4DB4                              ___lldiv@dividend 0011  
                        ?_Increase_Duty_Cycle 0001                               fillScreen@color 0024  
                     do_update_pwm@duty_cycle 0043                        __end_of_get_duty_cycle 3E32  
                      __size_of_Increase_Time 00A6               __end_of_Update_Setup_Fan_Screen 40E4  
                              fillRectangle@h 001A                                fillRectangle@w 0019  
                              fillRectangle@x 0023                                fillRectangle@y 0018  
                 check_for_button_input@F4236 0123                                ?_drawFastVLine 0018  
                                    printf@ap 009E                           __end_of_Do_Beep_Bad 4C04  
                                ??_write_data 0013                                    _TIMER1_isr 4DDC  
                               fillRect@color 0026                                  ?__tdiv_to_l_ 0011  
                                 _printf$2978 009A                                ?_do_update_pwm 0001  
                            ___lldiv@quotient 0019                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                                  _setup_minute 00D6  
                                _setup_second 00D8                       __size_of_Init_Interrupt 0024  
                       __end_of_setAddrWindow 44E6                         __end_of_Do_Setup_Time 221C  
                          fillRectangle@color 001B                             do_update_pwm@dc_I 0044  
                           do_update_pwm@dc_f 0040                                 drawChar@color 0030  
                                 _setup_month 00D7                         ??_Increase_Duty_Cycle 0046  
                          __end_of_write_data 4DA4                     __size_of_force_nec_state0 0008  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 0059                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                               ?_get_duty_cycle 0011  
