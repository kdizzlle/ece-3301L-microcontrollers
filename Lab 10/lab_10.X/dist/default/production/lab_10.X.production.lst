

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 31 18:14:45 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	idataCOMRAM
    63  001470                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _array1
    67  001470  A2                 	db	162
    68  001471  62                 	db	98
    69  001472  E2                 	db	226
    70  001473  22                 	db	34
    71  001474  02                 	db	2
    72  001475  C2                 	db	194
    73  001476  E0                 	db	224
    74  001477  A8                 	db	168
    75  001478  90                 	db	144
    76  001479  68                 	db	104
    77  00147A  98                 	db	152
    78  00147B  B0                 	db	176
    79  00147C  30                 	db	48
    80  00147D  18                 	db	24
    81  00147E  7A                 	db	122
    82  00147F  10                 	db	16
    83  001480  38                 	db	56
    84  001481  5A                 	db	90
    85  001482  42                 	db	66
    86  001483  4A                 	db	74
    87  001484  52                 	db	82
    88                           
    89                           ;initializer for _wrap
    90  001485  01                 	db	1
    91                           
    92                           ;initializer for _Timing_Txt
    93  001486  53                 	db	83
    94  001487  50                 	db	80
    95  001488  32                 	db	50
    96  001489  34                 	db	52
    97  00148A  2F                 	db	47
    98  00148B  33                 	db	51
    99  00148C  2F                 	db	47
   100  00148D  30                 	db	48
   101  00148E  31                 	db	49
   102  00148F  00                 	db	0
   103                           
   104                           	psect	idataBANK0
   105  0013F4                     __pidataBANK0:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _color
   109  0013F4  F800               	dw	63488
   110  0013F6  F800               	dw	63488
   111  0013F8  F800               	dw	63488
   112  0013FA  001F               	dw	31
   113  0013FC  001F               	dw	31
   114  0013FE  07E0               	dw	2016
   115  001400  001F               	dw	31
   116  001402  001F               	dw	31
   117  001404  F81F               	dw	63519
   118  001406  0000               	dw	0
   119  001408  0000               	dw	0
   120  00140A  0000               	dw	0
   121  00140C  0000               	dw	0
   122  00140E  0000               	dw	0
   123  001410  0000               	dw	0
   124  001412  0000               	dw	0
   125  001414  0000               	dw	0
   126  001416  0000               	dw	0
   127  001418  0000               	dw	0
   128  00141A  0000               	dw	0
   129  00141C  0000               	dw	0
   130                           
   131                           	psect	idataBANK1
   132  00118C                     __pidataBANK1:
   133                           	opt stack 0
   134                           
   135                           ;initializer for _txt1
   136  00118C  43                 	db	67
   137  00118D  48                 	db	72
   138  00118E  2D                 	db	45
   139  00118F  00                 	db	0
   140  001190  43                 	db	67
   141  001191  48                 	db	72
   142  001192  00                 	db	0
   143  001193  00                 	db	0
   144  001194  43                 	db	67
   145  001195  48                 	db	72
   146  001196  2B                 	db	43
   147  001197  00                 	db	0
   148  001198  42                 	db	66
   149  001199  57                 	db	87
   150  00119A  44                 	db	68
   151  00119B  00                 	db	0
   152  00119C  46                 	db	70
   153  00119D  57                 	db	87
   154  00119E  44                 	db	68
   155  00119F  00                 	db	0
   156  0011A0  50                 	db	80
   157  0011A1  4C                 	db	76
   158  0011A2  59                 	db	89
   159  0011A3  00                 	db	0
   160  0011A4  56                 	db	86
   161  0011A5  4C                 	db	76
   162  0011A6  2D                 	db	45
   163  0011A7  00                 	db	0
   164  0011A8  56                 	db	86
   165  0011A9  4C                 	db	76
   166  0011AA  2B                 	db	43
   167  0011AB  00                 	db	0
   168  0011AC  45                 	db	69
   169  0011AD  51                 	db	81
   170  0011AE  20                 	db	32
   171  0011AF  00                 	db	0
   172  0011B0  20                 	db	32
   173  0011B1  30                 	db	48
   174  0011B2  20                 	db	32
   175  0011B3  00                 	db	0
   176  0011B4  31                 	db	49
   177  0011B5  30                 	db	48
   178  0011B6  30                 	db	48
   179  0011B7  00                 	db	0
   180  0011B8  32                 	db	50
   181  0011B9  30                 	db	48
   182  0011BA  30                 	db	48
   183  0011BB  00                 	db	0
   184  0011BC  20                 	db	32
   185  0011BD  31                 	db	49
   186  0011BE  20                 	db	32
   187  0011BF  00                 	db	0
   188  0011C0  20                 	db	32
   189  0011C1  32                 	db	50
   190  0011C2  20                 	db	32
   191  0011C3  00                 	db	0
   192  0011C4  20                 	db	32
   193  0011C5  33                 	db	51
   194  0011C6  20                 	db	32
   195  0011C7  00                 	db	0
   196  0011C8  20                 	db	32
   197  0011C9  34                 	db	52
   198  0011CA  20                 	db	32
   199  0011CB  00                 	db	0
   200  0011CC  20                 	db	32
   201  0011CD  35                 	db	53
   202  0011CE  20                 	db	32
   203  0011CF  00                 	db	0
   204  0011D0  20                 	db	32
   205  0011D1  36                 	db	54
   206  0011D2  20                 	db	32
   207  0011D3  00                 	db	0
   208  0011D4  20                 	db	32
   209  0011D5  37                 	db	55
   210  0011D6  20                 	db	32
   211  0011D7  00                 	db	0
   212  0011D8  20                 	db	32
   213  0011D9  38                 	db	56
   214  0011DA  20                 	db	32
   215  0011DB  00                 	db	0
   216  0011DC  20                 	db	32
   217  0011DD  39                 	db	57
   218  0011DE  20                 	db	32
   219  0011DF  00                 	db	0
   220                           
   221                           	psect	mediumconst
   222  00FDCE                     __pmediumconst:
   223                           	opt stack 0
   224  00FDCE  00                 	db	0
   225  00FDCF                     _font:
   226                           	opt stack 0
   227  00FDCF  00                 	db	0
   228  00FDD0  00                 	db	0
   229  00FDD1  00                 	db	0
   230  00FDD2  00                 	db	0
   231  00FDD3  00                 	db	0
   232  00FDD4  00                 	db	0
   233  00FDD5  00                 	db	0
   234  00FDD6  5F                 	db	95
   235  00FDD7  00                 	db	0
   236  00FDD8  00                 	db	0
   237  00FDD9  00                 	db	0
   238  00FDDA  07                 	db	7
   239  00FDDB  00                 	db	0
   240  00FDDC  07                 	db	7
   241  00FDDD  00                 	db	0
   242  00FDDE  14                 	db	20
   243  00FDDF  7F                 	db	127
   244  00FDE0  14                 	db	20
   245  00FDE1  7F                 	db	127
   246  00FDE2  14                 	db	20
   247  00FDE3  24                 	db	36
   248  00FDE4  2A                 	db	42
   249  00FDE5  7F                 	db	127
   250  00FDE6  2A                 	db	42
   251  00FDE7  12                 	db	18
   252  00FDE8  23                 	db	35
   253  00FDE9  13                 	db	19
   254  00FDEA  08                 	db	8
   255  00FDEB  64                 	db	100
   256  00FDEC  62                 	db	98
   257  00FDED  36                 	db	54
   258  00FDEE  49                 	db	73
   259  00FDEF  56                 	db	86
   260  00FDF0  20                 	db	32
   261  00FDF1  50                 	db	80
   262  00FDF2  00                 	db	0
   263  00FDF3  08                 	db	8
   264  00FDF4  07                 	db	7
   265  00FDF5  03                 	db	3
   266  00FDF6  00                 	db	0
   267  00FDF7  00                 	db	0
   268  00FDF8  1C                 	db	28
   269  00FDF9  22                 	db	34
   270  00FDFA  41                 	db	65
   271  00FDFB  00                 	db	0
   272  00FDFC  00                 	db	0
   273  00FDFD  41                 	db	65
   274  00FDFE  22                 	db	34
   275  00FDFF  1C                 	db	28
   276  00FE00  00                 	db	0
   277  00FE01  2A                 	db	42
   278  00FE02  1C                 	db	28
   279  00FE03  7F                 	db	127
   280  00FE04  1C                 	db	28
   281  00FE05  2A                 	db	42
   282  00FE06  08                 	db	8
   283  00FE07  08                 	db	8
   284  00FE08  3E                 	db	62
   285  00FE09  08                 	db	8
   286  00FE0A  08                 	db	8
   287  00FE0B  00                 	db	0
   288  00FE0C  80                 	db	128
   289  00FE0D  70                 	db	112
   290  00FE0E  30                 	db	48
   291  00FE0F  00                 	db	0
   292  00FE10  08                 	db	8
   293  00FE11  08                 	db	8
   294  00FE12  08                 	db	8
   295  00FE13  08                 	db	8
   296  00FE14  08                 	db	8
   297  00FE15  00                 	db	0
   298  00FE16  00                 	db	0
   299  00FE17  60                 	db	96
   300  00FE18  60                 	db	96
   301  00FE19  00                 	db	0
   302  00FE1A  20                 	db	32
   303  00FE1B  10                 	db	16
   304  00FE1C  08                 	db	8
   305  00FE1D  04                 	db	4
   306  00FE1E  02                 	db	2
   307  00FE1F  3E                 	db	62
   308  00FE20  51                 	db	81
   309  00FE21  49                 	db	73
   310  00FE22  45                 	db	69
   311  00FE23  3E                 	db	62
   312  00FE24  00                 	db	0
   313  00FE25  42                 	db	66
   314  00FE26  7F                 	db	127
   315  00FE27  40                 	db	64
   316  00FE28  00                 	db	0
   317  00FE29  72                 	db	114
   318  00FE2A  49                 	db	73
   319  00FE2B  49                 	db	73
   320  00FE2C  49                 	db	73
   321  00FE2D  46                 	db	70
   322  00FE2E  21                 	db	33
   323  00FE2F  41                 	db	65
   324  00FE30  49                 	db	73
   325  00FE31  4D                 	db	77
   326  00FE32  33                 	db	51
   327  00FE33  18                 	db	24
   328  00FE34  14                 	db	20
   329  00FE35  12                 	db	18
   330  00FE36  7F                 	db	127
   331  00FE37  10                 	db	16
   332  00FE38  27                 	db	39
   333  00FE39  45                 	db	69
   334  00FE3A  45                 	db	69
   335  00FE3B  45                 	db	69
   336  00FE3C  39                 	db	57
   337  00FE3D  3C                 	db	60
   338  00FE3E  4A                 	db	74
   339  00FE3F  49                 	db	73
   340  00FE40  49                 	db	73
   341  00FE41  31                 	db	49
   342  00FE42  41                 	db	65
   343  00FE43  21                 	db	33
   344  00FE44  11                 	db	17
   345  00FE45  09                 	db	9
   346  00FE46  07                 	db	7
   347  00FE47  36                 	db	54
   348  00FE48  49                 	db	73
   349  00FE49  49                 	db	73
   350  00FE4A  49                 	db	73
   351  00FE4B  36                 	db	54
   352  00FE4C  46                 	db	70
   353  00FE4D  49                 	db	73
   354  00FE4E  49                 	db	73
   355  00FE4F  29                 	db	41
   356  00FE50  1E                 	db	30
   357  00FE51  00                 	db	0
   358  00FE52  00                 	db	0
   359  00FE53  14                 	db	20
   360  00FE54  00                 	db	0
   361  00FE55  00                 	db	0
   362  00FE56  00                 	db	0
   363  00FE57  40                 	db	64
   364  00FE58  34                 	db	52
   365  00FE59  00                 	db	0
   366  00FE5A  00                 	db	0
   367  00FE5B  00                 	db	0
   368  00FE5C  08                 	db	8
   369  00FE5D  14                 	db	20
   370  00FE5E  22                 	db	34
   371  00FE5F  41                 	db	65
   372  00FE60  14                 	db	20
   373  00FE61  14                 	db	20
   374  00FE62  14                 	db	20
   375  00FE63  14                 	db	20
   376  00FE64  14                 	db	20
   377  00FE65  00                 	db	0
   378  00FE66  41                 	db	65
   379  00FE67  22                 	db	34
   380  00FE68  14                 	db	20
   381  00FE69  08                 	db	8
   382  00FE6A  02                 	db	2
   383  00FE6B  01                 	db	1
   384  00FE6C  59                 	db	89
   385  00FE6D  09                 	db	9
   386  00FE6E  06                 	db	6
   387  00FE6F  3E                 	db	62
   388  00FE70  41                 	db	65
   389  00FE71  5D                 	db	93
   390  00FE72  59                 	db	89
   391  00FE73  4E                 	db	78
   392  00FE74  7C                 	db	124
   393  00FE75  12                 	db	18
   394  00FE76  11                 	db	17
   395  00FE77  12                 	db	18
   396  00FE78  7C                 	db	124
   397  00FE79  7F                 	db	127
   398  00FE7A  49                 	db	73
   399  00FE7B  49                 	db	73
   400  00FE7C  49                 	db	73
   401  00FE7D  36                 	db	54
   402  00FE7E  3E                 	db	62
   403  00FE7F  41                 	db	65
   404  00FE80  41                 	db	65
   405  00FE81  41                 	db	65
   406  00FE82  22                 	db	34
   407  00FE83  7F                 	db	127
   408  00FE84  41                 	db	65
   409  00FE85  41                 	db	65
   410  00FE86  41                 	db	65
   411  00FE87  3E                 	db	62
   412  00FE88  7F                 	db	127
   413  00FE89  49                 	db	73
   414  00FE8A  49                 	db	73
   415  00FE8B  49                 	db	73
   416  00FE8C  41                 	db	65
   417  00FE8D  7F                 	db	127
   418  00FE8E  09                 	db	9
   419  00FE8F  09                 	db	9
   420  00FE90  09                 	db	9
   421  00FE91  01                 	db	1
   422  00FE92  3E                 	db	62
   423  00FE93  41                 	db	65
   424  00FE94  41                 	db	65
   425  00FE95  51                 	db	81
   426  00FE96  73                 	db	115
   427  00FE97  7F                 	db	127
   428  00FE98  08                 	db	8
   429  00FE99  08                 	db	8
   430  00FE9A  08                 	db	8
   431  00FE9B  7F                 	db	127
   432  00FE9C  00                 	db	0
   433  00FE9D  41                 	db	65
   434  00FE9E  7F                 	db	127
   435  00FE9F  41                 	db	65
   436  00FEA0  00                 	db	0
   437  00FEA1  20                 	db	32
   438  00FEA2  40                 	db	64
   439  00FEA3  41                 	db	65
   440  00FEA4  3F                 	db	63
   441  00FEA5  01                 	db	1
   442  00FEA6  7F                 	db	127
   443  00FEA7  08                 	db	8
   444  00FEA8  14                 	db	20
   445  00FEA9  22                 	db	34
   446  00FEAA  41                 	db	65
   447  00FEAB  7F                 	db	127
   448  00FEAC  40                 	db	64
   449  00FEAD  40                 	db	64
   450  00FEAE  40                 	db	64
   451  00FEAF  40                 	db	64
   452  00FEB0  7F                 	db	127
   453  00FEB1  02                 	db	2
   454  00FEB2  1C                 	db	28
   455  00FEB3  02                 	db	2
   456  00FEB4  7F                 	db	127
   457  00FEB5  7F                 	db	127
   458  00FEB6  04                 	db	4
   459  00FEB7  08                 	db	8
   460  00FEB8  10                 	db	16
   461  00FEB9  7F                 	db	127
   462  00FEBA  3E                 	db	62
   463  00FEBB  41                 	db	65
   464  00FEBC  41                 	db	65
   465  00FEBD  41                 	db	65
   466  00FEBE  3E                 	db	62
   467  00FEBF  7F                 	db	127
   468  00FEC0  09                 	db	9
   469  00FEC1  09                 	db	9
   470  00FEC2  09                 	db	9
   471  00FEC3  06                 	db	6
   472  00FEC4  3E                 	db	62
   473  00FEC5  41                 	db	65
   474  00FEC6  51                 	db	81
   475  00FEC7  21                 	db	33
   476  00FEC8  5E                 	db	94
   477  00FEC9  7F                 	db	127
   478  00FECA  09                 	db	9
   479  00FECB  19                 	db	25
   480  00FECC  29                 	db	41
   481  00FECD  46                 	db	70
   482  00FECE                     __end_of_font:
   483                           	opt stack 0
   484  00FECE                     _font2:
   485                           	opt stack 0
   486  00FECE  26                 	db	38
   487  00FECF  49                 	db	73
   488  00FED0  49                 	db	73
   489  00FED1  49                 	db	73
   490  00FED2  32                 	db	50
   491  00FED3  03                 	db	3
   492  00FED4  01                 	db	1
   493  00FED5  7F                 	db	127
   494  00FED6  01                 	db	1
   495  00FED7  03                 	db	3
   496  00FED8  3F                 	db	63
   497  00FED9  40                 	db	64
   498  00FEDA  40                 	db	64
   499  00FEDB  40                 	db	64
   500  00FEDC  3F                 	db	63
   501  00FEDD  1F                 	db	31
   502  00FEDE  20                 	db	32
   503  00FEDF  40                 	db	64
   504  00FEE0  20                 	db	32
   505  00FEE1  1F                 	db	31
   506  00FEE2  3F                 	db	63
   507  00FEE3  40                 	db	64
   508  00FEE4  38                 	db	56
   509  00FEE5  40                 	db	64
   510  00FEE6  3F                 	db	63
   511  00FEE7  63                 	db	99
   512  00FEE8  14                 	db	20
   513  00FEE9  08                 	db	8
   514  00FEEA  14                 	db	20
   515  00FEEB  63                 	db	99
   516  00FEEC  03                 	db	3
   517  00FEED  04                 	db	4
   518  00FEEE  78                 	db	120
   519  00FEEF  04                 	db	4
   520  00FEF0  03                 	db	3
   521  00FEF1  61                 	db	97
   522  00FEF2  59                 	db	89
   523  00FEF3  49                 	db	73
   524  00FEF4  4D                 	db	77
   525  00FEF5  43                 	db	67
   526  00FEF6  00                 	db	0
   527  00FEF7  7F                 	db	127
   528  00FEF8  41                 	db	65
   529  00FEF9  41                 	db	65
   530  00FEFA  41                 	db	65
   531  00FEFB  02                 	db	2
   532  00FEFC  04                 	db	4
   533  00FEFD  08                 	db	8
   534  00FEFE  10                 	db	16
   535  00FEFF  20                 	db	32
   536  00FF00  00                 	db	0
   537  00FF01  41                 	db	65
   538  00FF02  41                 	db	65
   539  00FF03  41                 	db	65
   540  00FF04  7F                 	db	127
   541  00FF05  04                 	db	4
   542  00FF06  02                 	db	2
   543  00FF07  01                 	db	1
   544  00FF08  02                 	db	2
   545  00FF09  04                 	db	4
   546  00FF0A  40                 	db	64
   547  00FF0B  40                 	db	64
   548  00FF0C  40                 	db	64
   549  00FF0D  40                 	db	64
   550  00FF0E  40                 	db	64
   551  00FF0F  00                 	db	0
   552  00FF10  03                 	db	3
   553  00FF11  07                 	db	7
   554  00FF12  08                 	db	8
   555  00FF13  00                 	db	0
   556  00FF14  20                 	db	32
   557  00FF15  54                 	db	84
   558  00FF16  54                 	db	84
   559  00FF17  78                 	db	120
   560  00FF18  40                 	db	64
   561  00FF19  7F                 	db	127
   562  00FF1A  28                 	db	40
   563  00FF1B  44                 	db	68
   564  00FF1C  44                 	db	68
   565  00FF1D  38                 	db	56
   566  00FF1E  38                 	db	56
   567  00FF1F  44                 	db	68
   568  00FF20  44                 	db	68
   569  00FF21  44                 	db	68
   570  00FF22  28                 	db	40
   571  00FF23  38                 	db	56
   572  00FF24  44                 	db	68
   573  00FF25  44                 	db	68
   574  00FF26  28                 	db	40
   575  00FF27  7F                 	db	127
   576  00FF28  38                 	db	56
   577  00FF29  54                 	db	84
   578  00FF2A  54                 	db	84
   579  00FF2B  54                 	db	84
   580  00FF2C  18                 	db	24
   581  00FF2D  00                 	db	0
   582  00FF2E  08                 	db	8
   583  00FF2F  7E                 	db	126
   584  00FF30  09                 	db	9
   585  00FF31  02                 	db	2
   586  00FF32  18                 	db	24
   587  00FF33  A4                 	db	164
   588  00FF34  A4                 	db	164
   589  00FF35  9C                 	db	156
   590  00FF36  78                 	db	120
   591  00FF37  7F                 	db	127
   592  00FF38  08                 	db	8
   593  00FF39  04                 	db	4
   594  00FF3A  04                 	db	4
   595  00FF3B  78                 	db	120
   596  00FF3C  00                 	db	0
   597  00FF3D  44                 	db	68
   598  00FF3E  7D                 	db	125
   599  00FF3F  40                 	db	64
   600  00FF40  00                 	db	0
   601  00FF41  20                 	db	32
   602  00FF42  40                 	db	64
   603  00FF43  40                 	db	64
   604  00FF44  3D                 	db	61
   605  00FF45  00                 	db	0
   606  00FF46  7F                 	db	127
   607  00FF47  10                 	db	16
   608  00FF48  28                 	db	40
   609  00FF49  44                 	db	68
   610  00FF4A  00                 	db	0
   611  00FF4B  00                 	db	0
   612  00FF4C  41                 	db	65
   613  00FF4D  7F                 	db	127
   614  00FF4E  40                 	db	64
   615  00FF4F  00                 	db	0
   616  00FF50  7C                 	db	124
   617  00FF51  04                 	db	4
   618  00FF52  78                 	db	120
   619  00FF53  04                 	db	4
   620  00FF54  78                 	db	120
   621  00FF55  7C                 	db	124
   622  00FF56  08                 	db	8
   623  00FF57  04                 	db	4
   624  00FF58  04                 	db	4
   625  00FF59  78                 	db	120
   626  00FF5A  38                 	db	56
   627  00FF5B  44                 	db	68
   628  00FF5C  44                 	db	68
   629  00FF5D  44                 	db	68
   630  00FF5E  38                 	db	56
   631  00FF5F  FC                 	db	252
   632  00FF60  18                 	db	24
   633  00FF61  24                 	db	36
   634  00FF62  24                 	db	36
   635  00FF63  18                 	db	24
   636  00FF64  18                 	db	24
   637  00FF65  24                 	db	36
   638  00FF66  24                 	db	36
   639  00FF67  18                 	db	24
   640  00FF68  FC                 	db	252
   641  00FF69  7C                 	db	124
   642  00FF6A  08                 	db	8
   643  00FF6B  04                 	db	4
   644  00FF6C  04                 	db	4
   645  00FF6D  08                 	db	8
   646  00FF6E  48                 	db	72
   647  00FF6F  54                 	db	84
   648  00FF70  54                 	db	84
   649  00FF71  54                 	db	84
   650  00FF72  24                 	db	36
   651  00FF73  04                 	db	4
   652  00FF74  04                 	db	4
   653  00FF75  3F                 	db	63
   654  00FF76  44                 	db	68
   655  00FF77  24                 	db	36
   656  00FF78  3C                 	db	60
   657  00FF79  40                 	db	64
   658  00FF7A  40                 	db	64
   659  00FF7B  20                 	db	32
   660  00FF7C  7C                 	db	124
   661  00FF7D  1C                 	db	28
   662  00FF7E  20                 	db	32
   663  00FF7F  40                 	db	64
   664  00FF80  20                 	db	32
   665  00FF81  1C                 	db	28
   666  00FF82  3C                 	db	60
   667  00FF83  40                 	db	64
   668  00FF84  30                 	db	48
   669  00FF85  40                 	db	64
   670  00FF86  3C                 	db	60
   671  00FF87  44                 	db	68
   672  00FF88  28                 	db	40
   673  00FF89  10                 	db	16
   674  00FF8A  28                 	db	40
   675  00FF8B  44                 	db	68
   676  00FF8C  4C                 	db	76
   677  00FF8D  90                 	db	144
   678  00FF8E  90                 	db	144
   679  00FF8F  90                 	db	144
   680  00FF90  7C                 	db	124
   681  00FF91  44                 	db	68
   682  00FF92  64                 	db	100
   683  00FF93  54                 	db	84
   684  00FF94  4C                 	db	76
   685  00FF95  44                 	db	68
   686  00FF96  00                 	db	0
   687  00FF97  08                 	db	8
   688  00FF98  36                 	db	54
   689  00FF99  41                 	db	65
   690  00FF9A  00                 	db	0
   691  00FF9B  00                 	db	0
   692  00FF9C  00                 	db	0
   693  00FF9D  77                 	db	119
   694  00FF9E  00                 	db	0
   695  00FF9F  00                 	db	0
   696  00FFA0  00                 	db	0
   697  00FFA1  41                 	db	65
   698  00FFA2  36                 	db	54
   699  00FFA3  08                 	db	8
   700  00FFA4  00                 	db	0
   701  00FFA5  02                 	db	2
   702  00FFA6  01                 	db	1
   703  00FFA7  02                 	db	2
   704  00FFA8  04                 	db	4
   705  00FFA9  02                 	db	2
   706  00FFAA                     __end_of_font2:
   707                           	opt stack 0
   708  00FFAA                     _dpowers:
   709                           	opt stack 0
   710  00FFAA  0001               	dw	1
   711  00FFAC  000A               	dw	10
   712  00FFAE  0064               	dw	100
   713  00FFB0  03E8               	dw	1000
   714  00FFB2  2710               	dw	10000
   715  00FFB4                     __end_of_dpowers:
   716                           	opt stack 0
   717  00FFB4                     _hexpowers:
   718                           	opt stack 0
   719  00FFB4  0001               	dw	1
   720  00FFB6  0010               	dw	16
   721  00FFB8  0100               	dw	256
   722  00FFBA  1000               	dw	4096
   723  00FFBC                     __end_of_hexpowers:
   724                           	opt stack 0
   725  0000                     _ADCON0	set	4034
   726  0000                     _ADCON0bits	set	4034
   727  0000                     _ADCON1	set	4033
   728  0000                     _ADCON2	set	4032
   729  0000                     _ADRESH	set	4036
   730  0000                     _ADRESL	set	4035
   731  0000                     _CCP2CON	set	4026
   732  0000                     _CCPR2L	set	4027
   733  0000                     _INTCON2bits	set	4081
   734  0000                     _INTCON3bits	set	4080
   735  0000                     _INTCONbits	set	4082
   736  0000                     _OSCCON	set	4051
   737  0000                     _PIE1bits	set	3997
   738  0000                     _PIR1bits	set	3998
   739  0000                     _PIR2bits	set	4001
   740  0000                     _PORTA	set	3968
   741  0000                     _PORTCbits	set	3970
   742  0000                     _PORTDbits	set	3971
   743  0000                     _PORTEbits	set	3972
   744  0000                     _PR2	set	4043
   745  0000                     _RCSTA	set	4011
   746  0000                     _RCSTAbits	set	4011
   747  0000                     _SPBRG	set	4015
   748  0000                     _SPBRGH	set	4016
   749  0000                     _SSPBUF	set	4041
   750  0000                     _SSPCON1	set	4038
   751  0000                     _SSPSTAT	set	4039
   752  0000                     _SSPSTATbits	set	4039
   753  0000                     _T0CON	set	4053
   754  0000                     _T0CONbits	set	4053
   755  0000                     _T1CON	set	4045
   756  0000                     _T1CONbits	set	4045
   757  0000                     _T2CON	set	4042
   758  0000                     _T3CON	set	4017
   759  0000                     _T3CONbits	set	4017
   760  0000                     _TMR0H	set	4055
   761  0000                     _TMR0L	set	4054
   762  0000                     _TMR1H	set	4047
   763  0000                     _TMR1L	set	4046
   764  0000                     _TRISA	set	3986
   765  0000                     _TRISB	set	3987
   766  0000                     _TRISC	set	3988
   767  0000                     _TRISCbits	set	3988
   768  0000                     _TRISD	set	3989
   769  0000                     _TRISE	set	3990
   770  0000                     _TXREG	set	4013
   771  0000                     _TXSTA	set	4012
   772  0000                     _TXSTAbits	set	4012
   773  0000                     _TRMT	set	32097
   774  0000                     _nRBPU	set	32655
   775  00FFBC                     STR_2:
   776  00FFBC  4B                 	db	75	;'K'
   777  00FFBD  65                 	db	101	;'e'
   778  00FFBE  79                 	db	121	;'y'
   779  00FFBF  20                 	db	32
   780  00FFC0  4C                 	db	76	;'L'
   781  00FFC1  6F                 	db	111	;'o'
   782  00FFC2  63                 	db	99	;'c'
   783  00FFC3  61                 	db	97	;'a'
   784  00FFC4  74                 	db	116	;'t'
   785  00FFC5  69                 	db	105	;'i'
   786  00FFC6  6F                 	db	111	;'o'
   787  00FFC7  6E                 	db	110	;'n'
   788  00FFC8  20                 	db	32
   789  00FFC9  3D                 	db	61	;'='
   790  00FFCA  20                 	db	32
   791  00FFCB  25                 	db	37
   792  00FFCC  64                 	db	100	;'d'
   793  00FFCD  20                 	db	32
   794  00FFCE  0D                 	db	13
   795  00FFCF  0A                 	db	10
   796  00FFD0  0A                 	db	10
   797  00FFD1  00                 	db	0
   798  00FFD2                     STR_1:
   799  00FFD2  4E                 	db	78	;'N'
   800  00FFD3  45                 	db	69	;'E'
   801  00FFD4  43                 	db	67	;'C'
   802  00FFD5  5F                 	db	95	;'_'
   803  00FFD6  42                 	db	66	;'B'
   804  00FFD7  75                 	db	117	;'u'
   805  00FFD8  74                 	db	116	;'t'
   806  00FFD9  74                 	db	116	;'t'
   807  00FFDA  6F                 	db	111	;'o'
   808  00FFDB  6E                 	db	110	;'n'
   809  00FFDC  20                 	db	32
   810  00FFDD  3D                 	db	61	;'='
   811  00FFDE  20                 	db	32
   812  00FFDF  25                 	db	37
   813  00FFE0  78                 	db	120	;'x'
   814  00FFE1  20                 	db	32
   815  00FFE2  0D                 	db	13
   816  00FFE3  0A                 	db	10
   817  00FFE4  00                 	db	0
   818  00FFE5                     STR_4:
   819  00FFE5  30                 	db	48	;'0'
   820  00FFE6  31                 	db	49	;'1'
   821  00FFE7  32                 	db	50	;'2'
   822  00FFE8  33                 	db	51	;'3'
   823  00FFE9  34                 	db	52	;'4'
   824  00FFEA  35                 	db	53	;'5'
   825  00FFEB  36                 	db	54	;'6'
   826  00FFEC  37                 	db	55	;'7'
   827  00FFED  38                 	db	56	;'8'
   828  00FFEE  39                 	db	57	;'9'
   829  00FFEF  61                 	db	97	;'a'
   830  00FFF0  62                 	db	98	;'b'
   831  00FFF1  63                 	db	99	;'c'
   832  00FFF2  64                 	db	100	;'d'
   833  00FFF3  65                 	db	101	;'e'
   834  00FFF4  66                 	db	102	;'f'
   835  00FFF5  00                 	db	0
   836  00FFF6                     STR_3:
   837  00FFF6  4C                 	db	76	;'L'
   838  00FFF7  41                 	db	65	;'A'
   839  00FFF8  42                 	db	66	;'B'
   840  00FFF9  20                 	db	32
   841  00FFFA  31                 	db	49	;'1'
   842  00FFFB  30                 	db	48	;'0'
   843  00FFFC  20                 	db	32
   844  00FFFD  00                 	db	0
   845                           
   846                           ; #config settings
   847  00FFFE  00                 	db	0	; dummy byte at the end
   848  0000                     
   849                           	psect	cinit
   850  000F68                     __pcinit:
   851                           	opt stack 0
   852  000F68                     start_initialization:
   853                           	opt stack 0
   854  000F68                     __initialization:
   855                           	opt stack 0
   856                           
   857                           ; Clear objects allocated to BANK0 (31 bytes)
   858  000F68  EE00  F0AA         	lfsr	0,__pbssBANK0
   859  000F6C  0E1F               	movlw	31
   860  000F6E                     clear_0:
   861  000F6E  6AEE               	clrf	postinc0,c
   862  000F70  06E8               	decf	wreg,f,c
   863  000F72  E1FD               	bnz	clear_0
   864                           
   865                           ; Clear objects allocated to COMRAM (18 bytes)
   866  000F74  EE00  F05D         	lfsr	0,__pbssCOMRAM
   867  000F78  0E12               	movlw	18
   868  000F7A                     clear_1:
   869  000F7A  6AEE               	clrf	postinc0,c
   870  000F7C  06E8               	decf	wreg,f,c
   871  000F7E  E1FD               	bnz	clear_1
   872                           
   873                           ; Initialize objects allocated to BANK1 (84 bytes)
   874                           ; load TBLPTR registers with __pidataBANK1
   875  000F80  0E8C               	movlw	low __pidataBANK1
   876  000F82  6EF6               	movwf	tblptrl,c
   877  000F84  0E11               	movlw	high __pidataBANK1
   878  000F86  6EF7               	movwf	tblptrh,c
   879  000F88  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   880  000F8A  6EF8               	movwf	tblptru,c
   881  000F8C  EE01  F000         	lfsr	0,__pdataBANK1
   882  000F90  EE10 F054          	lfsr	1,84
   883  000F94                     copy_data0:
   884  000F94  0009               	tblrd		*+
   885  000F96  CFF5 FFEE          	movff	tablat,postinc0
   886  000F9A  50E5               	movf	postdec1,w,c
   887  000F9C  50E1               	movf	fsr1l,w,c
   888  000F9E  E1FA               	bnz	copy_data0
   889                           
   890                           ; Initialize objects allocated to BANK0 (42 bytes)
   891                           ; load TBLPTR registers with __pidataBANK0
   892  000FA0  0EF4               	movlw	low __pidataBANK0
   893  000FA2  6EF6               	movwf	tblptrl,c
   894  000FA4  0E13               	movlw	high __pidataBANK0
   895  000FA6  6EF7               	movwf	tblptrh,c
   896  000FA8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   897  000FAA  6EF8               	movwf	tblptru,c
   898  000FAC  EE00  F080         	lfsr	0,__pdataBANK0
   899  000FB0  EE10 F02A          	lfsr	1,42
   900  000FB4                     copy_data1:
   901  000FB4  0009               	tblrd		*+
   902  000FB6  CFF5 FFEE          	movff	tablat,postinc0
   903  000FBA  50E5               	movf	postdec1,w,c
   904  000FBC  50E1               	movf	fsr1l,w,c
   905  000FBE  E1FA               	bnz	copy_data1
   906                           
   907                           ; Initialize objects allocated to COMRAM (32 bytes)
   908                           ; load TBLPTR registers with __pidataCOMRAM
   909  000FC0  0E70               	movlw	low __pidataCOMRAM
   910  000FC2  6EF6               	movwf	tblptrl,c
   911  000FC4  0E14               	movlw	high __pidataCOMRAM
   912  000FC6  6EF7               	movwf	tblptrh,c
   913  000FC8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   914  000FCA  6EF8               	movwf	tblptru,c
   915  000FCC  EE00  F03D         	lfsr	0,__pdataCOMRAM
   916  000FD0  EE10 F020          	lfsr	1,32
   917  000FD4                     copy_data2:
   918  000FD4  0009               	tblrd		*+
   919  000FD6  CFF5 FFEE          	movff	tablat,postinc0
   920  000FDA  50E5               	movf	postdec1,w,c
   921  000FDC  50E1               	movf	fsr1l,w,c
   922  000FDE  E1FA               	bnz	copy_data2
   923  000FE0                     end_of_initialization:
   924                           	opt stack 0
   925  000FE0                     __end_of__initialization:
   926                           	opt stack 0
   927  000FE0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   928  000FE2  6EF8               	movwf	tblptru,c
   929  000FE4  0100               	movlb	0
   930  000FE6  EF0E  F000         	goto	_main	;jump to C main() function
   931                           tblptru	equ	0xFF8
   932                           tblptrh	equ	0xFF7
   933                           tblptrl	equ	0xFF6
   934                           tablat	equ	0xFF5
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           postdec1	equ	0xFE5
   938                           fsr1l	equ	0xFE1
   939                           
   940                           	psect	bssCOMRAM
   941  00005D                     __pbssCOMRAM:
   942                           	opt stack 0
   943  00005D                     _Nec_code:
   944                           	opt stack 0
   945  00005D                     	ds	4
   946  000061                     _Nec_OK:
   947                           	opt stack 0
   948  000061                     	ds	2
   949  000063                     _Time_Elapsed:
   950                           	opt stack 0
   951  000063                     	ds	2
   952  000065                     _nbr:
   953                           	opt stack 0
   954  000065                     	ds	2
   955  000067                     _txt:
   956                           	opt stack 0
   957  000067                     	ds	2
   958  000069                     _Nec_Button:
   959                           	opt stack 0
   960  000069                     	ds	1
   961  00006A                     _Nec_State:
   962                           	opt stack 0
   963  00006A                     	ds	1
   964  00006B                     __tft_type:
   965                           	opt stack 0
   966  00006B                     	ds	1
   967  00006C                     _bit_count:
   968                           	opt stack 0
   969  00006C                     	ds	1
   970  00006D                     _colstart:
   971                           	opt stack 0
   972  00006D                     	ds	1
   973  00006E                     _rowstart:
   974                           	opt stack 0
   975  00006E                     	ds	1
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           postinc0	equ	0xFEE
   981                           wreg	equ	0xFE8
   982                           postdec1	equ	0xFE5
   983                           fsr1l	equ	0xFE1
   984                           
   985                           	psect	dataCOMRAM
   986  00003D                     __pdataCOMRAM:
   987                           	opt stack 0
   988  00003D                     _array1:
   989                           	opt stack 0
   990  00003D                     	ds	21
   991  000052                     _wrap:
   992                           	opt stack 0
   993  000052                     	ds	1
   994  000053                     _Timing_Txt:
   995                           	opt stack 0
   996  000053                     	ds	10
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006                           	psect	bssBANK0
  1007  0000AA                     __pbssBANK0:
  1008                           	opt stack 0
  1009  0000AA                     _buffer:
  1010                           	opt stack 0
  1011  0000AA                     	ds	31
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           postdec1	equ	0xFE5
  1019                           fsr1l	equ	0xFE1
  1020                           
  1021                           	psect	dataBANK0
  1022  000080                     __pdataBANK0:
  1023                           	opt stack 0
  1024  000080                     _color:
  1025                           	opt stack 0
  1026  000080                     	ds	42
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           postdec1	equ	0xFE5
  1034                           fsr1l	equ	0xFE1
  1035                           
  1036                           	psect	dataBANK1
  1037  000100                     __pdataBANK1:
  1038                           	opt stack 0
  1039  000100                     _txt1:
  1040                           	opt stack 0
  1041  000100                     	ds	84
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           
  1051                           	psect	cstackBANK0
  1052  0000C9                     __pcstackBANK0:
  1053                           	opt stack 0
  1054  0000C9                     drawtext@y:
  1055                           	opt stack 0
  1056  0000C9                     fillCircle@x0:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x0
  1060  0000C9                     	ds	1
  1061  0000CA                     drawtext@_text:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x1
  1065  0000CA                     	ds	1
  1066  0000CB                     fillCircle@y0:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x2
  1070  0000CB                     	ds	1
  1071  0000CC                     drawtext@color:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x3
  1075  0000CC                     	ds	1
  1076  0000CD                     fillCircle@r:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x4
  1080  0000CD                     	ds	1
  1081  0000CE                     drawtext@bg:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x5
  1085  0000CE                     	ds	1
  1086  0000CF                     fillCircle@color:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x6
  1090  0000CF                     	ds	1
  1091  0000D0                     drawtext@size:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x7
  1095  0000D0                     	ds	1
  1096  0000D1                     drawtext@x:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x8
  1100  0000D1                     	ds	1
  1101  0000D2                     drawtext@textsize:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x9
  1105  0000D2                     	ds	2
  1106  0000D4                     drawtext@i:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0xB
  1110  0000D4                     	ds	2
  1111  0000D6                     drawtext@cursor_y:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0xD
  1115  0000D6                     	ds	1
  1116  0000D7                     drawtext@cursor_x:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0xE
  1120  0000D7                     	ds	1
  1121  0000D8                     main@i:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0xF
  1125  0000D8                     	ds	1
  1126  0000D9                     main@found:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x10
  1130  0000D9                     	ds	1
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postdec1	equ	0xFE5
  1138                           fsr1l	equ	0xFE1
  1139                           
  1140                           	psect	cstackCOMRAM
  1141  000001                     __pcstackCOMRAM:
  1142                           	opt stack 0
  1143  000001                     ??_INTx_isr:
  1144  000001                     
  1145                           ; 0 bytes @ 0x0
  1146  000001                     	ds	2
  1147  000003                     ??_chkisr:
  1148                           
  1149                           ; 0 bytes @ 0x2
  1150  000003                     	ds	14
  1151  000011                     ?_strlen:
  1152                           	opt stack 0
  1153  000011                     ?___wmul:
  1154                           	opt stack 0
  1155  000011                     ?___lwdiv:
  1156                           	opt stack 0
  1157  000011                     spiwrite@x:
  1158                           	opt stack 0
  1159  000011                     putch@c:
  1160                           	opt stack 0
  1161  000011                     OpenUSART@spbrg:
  1162                           	opt stack 0
  1163  000011                     ___wmul@multiplier:
  1164                           	opt stack 0
  1165  000011                     ___lwdiv@dividend:
  1166                           	opt stack 0
  1167  000011                     strcpy@to:
  1168                           	opt stack 0
  1169  000011                     strlen@s:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x10
  1173  000011                     	ds	1
  1174  000012                     spiwrite@spidata:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x11
  1178  000012                     	ds	1
  1179  000013                     ??_strlen:
  1180  000013                     write_command@cmd_:
  1181                           	opt stack 0
  1182  000013                     write_data@data_:
  1183                           	opt stack 0
  1184  000013                     OpenUSART@config:
  1185                           	opt stack 0
  1186  000013                     ___wmul@multiplicand:
  1187                           	opt stack 0
  1188  000013                     ___lwdiv@divisor:
  1189                           	opt stack 0
  1190  000013                     strcpy@from:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x12
  1194  000013                     	ds	1
  1195  000014                     setAddrWindow@y0:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x13
  1199  000014                     	ds	1
  1200  000015                     setAddrWindow@x1:
  1201                           	opt stack 0
  1202  000015                     ___lwdiv@counter:
  1203                           	opt stack 0
  1204  000015                     ___wmul@product:
  1205                           	opt stack 0
  1206  000015                     strcpy@cp:
  1207                           	opt stack 0
  1208  000015                     strlen@cp:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x14
  1212  000015                     	ds	1
  1213  000016                     setAddrWindow@y1:
  1214                           	opt stack 0
  1215  000016                     ___lwdiv@quotient:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x15
  1219  000016                     	ds	1
  1220  000017                     setAddrWindow@x0:
  1221                           	opt stack 0
  1222  000017                     delay_ms@ms:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x16
  1226  000017                     	ds	1
  1227  000018                     ?___lwmod:
  1228                           	opt stack 0
  1229  000018                     drawPixel@y:
  1230                           	opt stack 0
  1231  000018                     drawFastVLine@y:
  1232                           	opt stack 0
  1233  000018                     fillRectangle@y:
  1234                           	opt stack 0
  1235  000018                     ___lwmod@dividend:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x17
  1239  000018                     	ds	1
  1240  000019                     ??_delay_ms:
  1241  000019                     drawFastVLine@h:
  1242                           	opt stack 0
  1243  000019                     fillRectangle@w:
  1244                           	opt stack 0
  1245  000019                     drawPixel@color:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x18
  1249  000019                     	ds	1
  1250  00001A                     fillRectangle@h:
  1251                           	opt stack 0
  1252  00001A                     drawFastVLine@color:
  1253                           	opt stack 0
  1254  00001A                     ___lwmod@divisor:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x19
  1258  00001A                     	ds	1
  1259  00001B                     drawPixel@x:
  1260                           	opt stack 0
  1261  00001B                     delay_ms@count:
  1262                           	opt stack 0
  1263  00001B                     fillRectangle@color:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x1A
  1267  00001B                     	ds	1
  1268  00001C                     ??_drawFastVLine:
  1269  00001C                     ___lwmod@counter:
  1270                           	opt stack 0
  1271  00001C                     drawCircle@x0:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x1B
  1275  00001C                     	ds	1
  1276  00001D                     ??_fillRectangle:
  1277  00001D                     ?_printf:
  1278                           	opt stack 0
  1279  00001D                     printf@f:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x1C
  1283  00001D                     	ds	1
  1284  00001E                     drawCircle@y0:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x1D
  1288  00001E                     	ds	2
  1289  000020                     drawFastVLine@hi:
  1290                           	opt stack 0
  1291  000020                     drawCircle@r:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x1F
  1295  000020                     	ds	1
  1296  000021                     ??_printf:
  1297  000021                     drawFastVLine@lo:
  1298                           	opt stack 0
  1299  000021                     fillRectangle@hi:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x20
  1303  000021                     	ds	1
  1304  000022                     drawFastVLine@x:
  1305                           	opt stack 0
  1306  000022                     fillRectangle@lo:
  1307                           	opt stack 0
  1308  000022                     printf@idx:
  1309                           	opt stack 0
  1310  000022                     drawCircle@color:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x21
  1314  000022                     	ds	1
  1315  000023                     fillRect@y:
  1316                           	opt stack 0
  1317  000023                     fillRectangle@x:
  1318                           	opt stack 0
  1319  000023                     fillCircleHelper@x0:
  1320                           	opt stack 0
  1321  000023                     printf@ap:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x22
  1325  000023                     	ds	1
  1326  000024                     ??_drawCircle:
  1327  000024                     fillRect@w:
  1328                           	opt stack 0
  1329  000024                     fillScreen@color:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x23
  1333  000024                     	ds	1
  1334  000025                     fillRect@h:
  1335                           	opt stack 0
  1336  000025                     printf@prec:
  1337                           	opt stack 0
  1338  000025                     fillCircleHelper@y0:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x24
  1342  000025                     	ds	1
  1343  000026                     printf@flag:
  1344                           	opt stack 0
  1345  000026                     fillRect@color:
  1346                           	opt stack 0
  1347  000026                     drawCircle@ddF_x:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x25
  1351  000026                     	ds	1
  1352  000027                     fillCircleHelper@r:
  1353                           	opt stack 0
  1354  000027                     printf@val:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x26
  1358  000027                     	ds	1
  1359  000028                     ??_fillRect:
  1360  000028                     drawCircle@ddF_y:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x27
  1364  000028                     	ds	1
  1365  000029                     printf@c:
  1366                           	opt stack 0
  1367  000029                     fillCircleHelper@cornername:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x28
  1371  000029                     	ds	1
  1372  00002A                     drawCircle@f:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x29
  1376  00002A                     	ds	1
  1377  00002B                     fillRect@x:
  1378                           	opt stack 0
  1379  00002B                     fillCircleHelper@delta:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x2A
  1383  00002B                     	ds	1
  1384  00002C                     fillRect@i:
  1385                           	opt stack 0
  1386  00002C                     drawCircle@x:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x2B
  1390  00002C                     	ds	1
  1391  00002D                     fillCircleHelper@color:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x2C
  1395  00002D                     	ds	1
  1396  00002E                     drawChar@y:
  1397                           	opt stack 0
  1398  00002E                     drawCircle@y:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x2D
  1402  00002E                     	ds	1
  1403  00002F                     ??_fillCircleHelper:
  1404  00002F                     drawChar@c:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x2E
  1408  00002F                     	ds	1
  1409  000030                     drawChar@color:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x2F
  1413  000030                     	ds	1
  1414  000031                     fillCircleHelper@ddF_x:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x30
  1418  000031                     	ds	1
  1419  000032                     drawChar@bg:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x31
  1423  000032                     	ds	1
  1424  000033                     fillCircleHelper@ddF_y:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x32
  1428  000033                     	ds	1
  1429  000034                     drawChar@size:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x33
  1433  000034                     	ds	1
  1434  000035                     drawChar@line:
  1435                           	opt stack 0
  1436  000035                     fillCircleHelper@f:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x34
  1440  000035                     	ds	1
  1441  000036                     drawChar@x:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x35
  1445  000036                     	ds	1
  1446  000037                     drawChar@j:
  1447                           	opt stack 0
  1448  000037                     fillCircleHelper@x:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x36
  1452  000037                     	ds	1
  1453  000038                     drawChar@i:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x37
  1457  000038                     	ds	1
  1458  000039                     ??_drawtext:
  1459  000039                     fillCircleHelper@y:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x38
  1463  000039                     	ds	2
  1464  00003B                     
  1465                           ; 0 bytes @ 0x3A
  1466  00003B                     	ds	2
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           
  1476 ;;
  1477 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1478 ;;
  1479 ;; *************** function _main *****************
  1480 ;; Defined at:
  1481 ;;		line 37 in file "../Lab10_S3_Sample/Lab10_S3_sample.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  i               1   15[BANK0 ] unsigned char 
  1486 ;;  found           1   16[BANK0 ] unsigned char 
  1487 ;; Return value:  Size  Location     Type
  1488 ;;		None               void
  1489 ;; Registers used:
  1490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1491 ;; Tracked objects:
  1492 ;;		On entry : 0/0
  1493 ;;		On exit  : 0/0
  1494 ;;		Unchanged: 0/0
  1495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1499 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1500 ;;Total ram usage:        4 bytes
  1501 ;; Hardware stack levels required when called:   11
  1502 ;; This function calls:
  1503 ;;		_Activate_Buzzer
  1504 ;;		_Deactivate_Buzzer
  1505 ;;		_Enable_INT_Interrupt
  1506 ;;		_Init_Interrupt
  1507 ;;		_Init_UART
  1508 ;;		_Initialize_LCD_Screen
  1509 ;;		_Wait_One_Sec
  1510 ;;		_drawCircle
  1511 ;;		_drawtext
  1512 ;;		_fillCircle
  1513 ;;		_printf
  1514 ;; This function is called by:
  1515 ;;		Startup code after reset
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text0
  1520  00001C                     __ptext0:
  1521                           	opt stack 0
  1522  00001C                     _main:
  1523                           	opt stack 20
  1524                           
  1525                           ;Lab10_S3_sample.c: 39: Init_UART();
  1526                           
  1527                           ;incstack = 0
  1528  00001C  EC79  F00A         	call	_Init_UART	;wreg free
  1529                           
  1530                           ;Lab10_S3_sample.c: 40: OSCCON = 0x70;
  1531  000020  0E70               	movlw	112
  1532  000022  6ED3               	movwf	4051,c	;volatile
  1533                           
  1534                           ;Lab10_S3_sample.c: 41: nRBPU = 0;
  1535  000024  9EF1               	bcf	intcon2,7,c	;volatile
  1536                           
  1537                           ;Lab10_S3_sample.c: 42: TRISB = 0x04;
  1538  000026  0E04               	movlw	4
  1539  000028  6E93               	movwf	3987,c	;volatile
  1540                           
  1541                           ;Lab10_S3_sample.c: 43: TRISC = 0x00;
  1542  00002A  0E00               	movlw	0
  1543  00002C  6E94               	movwf	3988,c	;volatile
  1544                           
  1545                           ;Lab10_S3_sample.c: 44: TRISD = 0x00;
  1546  00002E  0E00               	movlw	0
  1547  000030  6E95               	movwf	3989,c	;volatile
  1548                           
  1549                           ;Lab10_S3_sample.c: 45: ADCON1 = 0x0F;
  1550  000032  0E0F               	movlw	15
  1551  000034  6EC1               	movwf	4033,c	;volatile
  1552                           
  1553                           ;Lab10_S3_sample.c: 46: TRISA = 0x00;
  1554  000036  0E00               	movlw	0
  1555  000038  6E92               	movwf	3986,c	;volatile
  1556                           
  1557                           ;Lab10_S3_sample.c: 47: TRISE = 0x00;
  1558  00003A  0E00               	movlw	0
  1559  00003C  6E96               	movwf	3990,c	;volatile
  1560                           
  1561                           ;Lab10_S3_sample.c: 49: Initialize_LCD_Screen();
  1562  00003E  EC16  F007         	call	_Initialize_LCD_Screen	;wreg free
  1563                           
  1564                           ;Lab10_S3_sample.c: 50: Init_Interrupt();
  1565  000042  EC63  F00A         	call	_Init_Interrupt	;wreg free
  1566                           
  1567                           ;Lab10_S3_sample.c: 52: Nec_code = 0x0;
  1568  000046  0E00               	movlw	0
  1569  000048  6E5D               	movwf	_Nec_code,c
  1570  00004A  0E00               	movlw	0
  1571  00004C  6E5E               	movwf	_Nec_code+1,c
  1572  00004E  0E00               	movlw	0
  1573  000050  6E5F               	movwf	_Nec_code+2,c
  1574  000052  0E00               	movlw	0
  1575  000054  6E60               	movwf	_Nec_code+3,c
  1576  000056  D000               	goto	l4058
  1577  000058                     l4058:
  1578                           
  1579                           ;Lab10_S3_sample.c: 56: {
  1580                           ;Lab10_S3_sample.c: 57: Deactivate_Buzzer();
  1581  000058  ECB7  F00A         	call	_Deactivate_Buzzer	;wreg free
  1582                           
  1583                           ;Lab10_S3_sample.c: 59: if (Nec_OK == 1)
  1584  00005C  0461               	decf	_Nec_OK,w,c
  1585  00005E  1062               	iorwf	_Nec_OK+1,w,c
  1586  000060  A4D8               	btfss	status,2,c
  1587  000062  D7FA               	goto	l4058
  1588                           
  1589                           ;Lab10_S3_sample.c: 60: {
  1590                           ;Lab10_S3_sample.c: 61: Nec_OK = 0;
  1591  000064  0E00               	movlw	0
  1592  000066  6E62               	movwf	_Nec_OK+1,c
  1593  000068  0E00               	movlw	0
  1594  00006A  6E61               	movwf	_Nec_OK,c
  1595                           
  1596                           ;Lab10_S3_sample.c: 62: Enable_INT_Interrupt();
  1597  00006C  ECBF  F00A         	call	_Enable_INT_Interrupt	;wreg free
  1598                           
  1599                           ;Lab10_S3_sample.c: 63: printf ("NEC_Button = %x \r\n", Nec_Button);
  1600  000070  0ED2               	movlw	low STR_1
  1601  000072  6E1D               	movwf	printf@f,c
  1602  000074  0EFF               	movlw	high STR_1
  1603  000076  6E1E               	movwf	printf@f+1,c
  1604  000078  C069  F01F         	movff	_Nec_Button,?_printf+2
  1605  00007C  6A20               	clrf	?_printf+3,c
  1606  00007E  EC3D  F001         	call	_printf	;wreg free
  1607                           
  1608                           ;Lab10_S3_sample.c: 65: found = 0xff;
  1609  000082  0100               	movlb	0	; () banked
  1610  000084  69D9               	setf	main@found& (0+255),b
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;Lab10_S3_sample.c: 68: for (char i=0; i<21; i++)
  1614  000086  0E00               	movlw	0
  1615  000088  0100               	movlb	0	; () banked
  1616  00008A  6FD8               	movwf	main@i& (0+255),b
  1617  00008C                     l4072:
  1618                           
  1619                           ; BSR set to: 0
  1620  00008C  0E14               	movlw	20
  1621  00008E  0100               	movlb	0	; () banked
  1622  000090  65D8               	cpfsgt	main@i& (0+255),b
  1623  000092  D001               	goto	l4076
  1624                           
  1625                           ; BSR set to: 0
  1626  000094  D013               	goto	l4084
  1627  000096                     l4076:
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;Lab10_S3_sample.c: 69: {
  1631                           ;Lab10_S3_sample.c: 70: if (Nec_Button == array1[i])
  1632  000096  0100               	movlb	0	; () banked
  1633  000098  51D8               	movf	main@i& (0+255),w,b
  1634  00009A  0D01               	mullw	1
  1635  00009C  0E3D               	movlw	low _array1
  1636  00009E  24F3               	addwf	prodl,w,c
  1637  0000A0  6ED9               	movwf	fsr2l,c
  1638  0000A2  0E00               	movlw	high _array1
  1639  0000A4  20F4               	addwfc	prodh,w,c
  1640  0000A6  6EDA               	movwf	fsr2h,c
  1641  0000A8  5069               	movf	_Nec_Button,w,c
  1642  0000AA  18DE               	xorwf	postinc2,w,c
  1643  0000AC  A4D8               	btfss	status,2,c
  1644  0000AE  D003               	goto	l4080
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;Lab10_S3_sample.c: 71: {
  1648                           ;Lab10_S3_sample.c: 72: found = i;
  1649  0000B0  C0D8  F0D9         	movff	main@i,main@found
  1650  0000B4  D000               	goto	l4080
  1651  0000B6                     l4080:
  1652                           
  1653                           ; BSR set to: 0
  1654  0000B6  0100               	movlb	0	; () banked
  1655  0000B8  2BD8               	incf	main@i& (0+255),f,b
  1656  0000BA  D7E8               	goto	l4072
  1657  0000BC                     l4084:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;Lab10_S3_sample.c: 74: }
  1661                           ;Lab10_S3_sample.c: 75: }
  1662                           ;Lab10_S3_sample.c: 77: if (found != 0xff)
  1663  0000BC  0100               	movlb	0	; () banked
  1664  0000BE  29D9               	incf	main@found& (0+255),w,b
  1665  0000C0  B4D8               	btfsc	status,2,c
  1666  0000C2  D7CA               	goto	l4058
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;Lab10_S3_sample.c: 78: {
  1670                           ;Lab10_S3_sample.c: 79: printf ("Key Location = %d \r\n\n", found);
  1671  0000C4  0EBC               	movlw	low STR_2
  1672  0000C6  6E1D               	movwf	printf@f,c
  1673  0000C8  0EFF               	movlw	high STR_2
  1674  0000CA  6E1E               	movwf	printf@f+1,c
  1675  0000CC  C0D9  F01F         	movff	main@found,?_printf+2
  1676  0000D0  6A20               	clrf	?_printf+3,c
  1677  0000D2  EC3D  F001         	call	_printf	;wreg free
  1678                           
  1679                           ;Lab10_S3_sample.c: 80: fillCircle(60, 80, 20, color[found]);
  1680  0000D6  0E00               	movlw	0
  1681  0000D8  0100               	movlb	0	; () banked
  1682  0000DA  6FCA               	movwf	(fillCircle@x0+1)& (0+255),b
  1683  0000DC  0E3C               	movlw	60
  1684  0000DE  6FC9               	movwf	fillCircle@x0& (0+255),b
  1685  0000E0  0E00               	movlw	0
  1686  0000E2  0100               	movlb	0	; () banked
  1687  0000E4  6FCC               	movwf	(fillCircle@y0+1)& (0+255),b
  1688  0000E6  0E50               	movlw	80
  1689  0000E8  6FCB               	movwf	fillCircle@y0& (0+255),b
  1690  0000EA  0E00               	movlw	0
  1691  0000EC  0100               	movlb	0	; () banked
  1692  0000EE  6FCE               	movwf	(fillCircle@r+1)& (0+255),b
  1693  0000F0  0E14               	movlw	20
  1694  0000F2  6FCD               	movwf	fillCircle@r& (0+255),b
  1695  0000F4  0100               	movlb	0	; () banked
  1696  0000F6  51D9               	movf	main@found& (0+255),w,b
  1697  0000F8  0D02               	mullw	2
  1698  0000FA  0E80               	movlw	low _color
  1699  0000FC  24F3               	addwf	prodl,w,c
  1700  0000FE  6ED9               	movwf	fsr2l,c
  1701  000100  0E00               	movlw	high _color
  1702  000102  20F4               	addwfc	prodh,w,c
  1703  000104  6EDA               	movwf	fsr2h,c
  1704  000106  CFDE F0CF          	movff	postinc2,fillCircle@color
  1705  00010A  CFDD F0D0          	movff	postdec2,fillCircle@color+1
  1706  00010E  EC99  F008         	call	_fillCircle	;wreg free
  1707                           
  1708                           ;Lab10_S3_sample.c: 81: drawCircle(60, 80, 20, 0xFFFF);
  1709  000112  0E00               	movlw	0
  1710  000114  6E1D               	movwf	drawCircle@x0+1,c
  1711  000116  0E3C               	movlw	60
  1712  000118  6E1C               	movwf	drawCircle@x0,c
  1713  00011A  0E00               	movlw	0
  1714  00011C  6E1F               	movwf	drawCircle@y0+1,c
  1715  00011E  0E50               	movlw	80
  1716  000120  6E1E               	movwf	drawCircle@y0,c
  1717  000122  0E00               	movlw	0
  1718  000124  6E21               	movwf	drawCircle@r+1,c
  1719  000126  0E14               	movlw	20
  1720  000128  6E20               	movwf	drawCircle@r,c
  1721  00012A  0EFF               	movlw	255
  1722  00012C  6E23               	movwf	drawCircle@color+1,c
  1723  00012E  6822               	setf	drawCircle@color,c
  1724  000130  EC46  F002         	call	_drawCircle	;wreg free
  1725                           
  1726                           ;Lab10_S3_sample.c: 82: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1727  000134  0E4D               	movlw	77
  1728  000136  0100               	movlb	0	; () banked
  1729  000138  6FC9               	movwf	drawtext@y& (0+255),b
  1730  00013A  0100               	movlb	0	; () banked
  1731  00013C  51D9               	movf	main@found& (0+255),w,b
  1732  00013E  0D04               	mullw	4
  1733  000140  0E00               	movlw	low _txt1
  1734  000142  24F3               	addwf	prodl,w,c
  1735  000144  0100               	movlb	0	; () banked
  1736  000146  6FCA               	movwf	drawtext@_text& (0+255),b
  1737  000148  0E01               	movlw	high _txt1
  1738  00014A  20F4               	addwfc	prodh,w,c
  1739  00014C  0100               	movlb	0	; () banked
  1740  00014E  6FCB               	movwf	(drawtext@_text+1)& (0+255),b
  1741  000150  0EFF               	movlw	255
  1742  000152  0100               	movlb	0	; () banked
  1743  000154  6FCD               	movwf	(drawtext@color+1)& (0+255),b
  1744  000156  69CC               	setf	drawtext@color& (0+255),b
  1745  000158  0E00               	movlw	0
  1746  00015A  0100               	movlb	0	; () banked
  1747  00015C  6FCF               	movwf	(drawtext@bg+1)& (0+255),b
  1748  00015E  0E00               	movlw	0
  1749  000160  6FCE               	movwf	drawtext@bg& (0+255),b
  1750  000162  0E01               	movlw	1
  1751  000164  0100               	movlb	0	; () banked
  1752  000166  6FD0               	movwf	drawtext@size& (0+255),b
  1753  000168  0E34               	movlw	52
  1754  00016A  EC1B  F005         	call	_drawtext
  1755                           
  1756                           ;Lab10_S3_sample.c: 85: if(color[found] == 0xF800)
  1757  00016E  0100               	movlb	0	; () banked
  1758  000170  51D9               	movf	main@found& (0+255),w,b
  1759  000172  0D02               	mullw	2
  1760  000174  0E80               	movlw	low _color
  1761  000176  24F3               	addwf	prodl,w,c
  1762  000178  6ED9               	movwf	fsr2l,c
  1763  00017A  0E00               	movlw	high _color
  1764  00017C  20F4               	addwfc	prodh,w,c
  1765  00017E  6EDA               	movwf	fsr2h,c
  1766  000180  50DE               	movf	postinc2,w,c
  1767  000182  E10E               	bnz	l4098
  1768  000184  0EF8               	movlw	248
  1769  000186  18DE               	xorwf	postinc2,w,c
  1770  000188  A4D8               	btfss	status,2,c
  1771  00018A  D00A               	goto	l4098
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;Lab10_S3_sample.c: 86: {
  1775                           ;Lab10_S3_sample.c: 89: PORTDbits.RD1 = 0;
  1776  00018C  9283               	bcf	3971,1,c	;volatile
  1777                           
  1778                           ;Lab10_S3_sample.c: 90: PORTDbits.RD2 = 0;
  1779  00018E  9483               	bcf	3971,2,c	;volatile
  1780                           
  1781                           ;Lab10_S3_sample.c: 91: PORTDbits.RD3 = 0;
  1782  000190  9683               	bcf	3971,3,c	;volatile
  1783                           
  1784                           ;Lab10_S3_sample.c: 93: PORTEbits.RE0 = 0;
  1785  000192  9084               	bcf	3972,0,c	;volatile
  1786                           
  1787                           ;Lab10_S3_sample.c: 94: PORTEbits.RE1 = 0;
  1788  000194  9284               	bcf	3972,1,c	;volatile
  1789                           
  1790                           ;Lab10_S3_sample.c: 95: PORTEbits.RE2 = 0;
  1791  000196  9484               	bcf	3972,2,c	;volatile
  1792                           
  1793                           ;Lab10_S3_sample.c: 97: PORTDbits.RD4 = 1;
  1794  000198  8883               	bsf	3971,4,c	;volatile
  1795                           
  1796                           ;Lab10_S3_sample.c: 98: PORTDbits.RD5 = 0;
  1797  00019A  9A83               	bcf	3971,5,c	;volatile
  1798                           
  1799                           ;Lab10_S3_sample.c: 99: PORTDbits.RD6 = 0;
  1800  00019C  9C83               	bcf	3971,6,c	;volatile
  1801  00019E  D000               	goto	l4098
  1802  0001A0                     l4098:
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;Lab10_S3_sample.c: 100: }
  1806                           ;Lab10_S3_sample.c: 101: if(color[found] == 0x001F)
  1807  0001A0  0100               	movlb	0	; () banked
  1808  0001A2  51D9               	movf	main@found& (0+255),w,b
  1809  0001A4  0D02               	mullw	2
  1810  0001A6  0E80               	movlw	low _color
  1811  0001A8  24F3               	addwf	prodl,w,c
  1812  0001AA  6ED9               	movwf	fsr2l,c
  1813  0001AC  0E00               	movlw	high _color
  1814  0001AE  20F4               	addwfc	prodh,w,c
  1815  0001B0  6EDA               	movwf	fsr2h,c
  1816  0001B2  0E1F               	movlw	31
  1817  0001B4  18DE               	xorwf	postinc2,w,c
  1818  0001B6  10DE               	iorwf	postinc2,w,c
  1819  0001B8  A4D8               	btfss	status,2,c
  1820  0001BA  D00A               	goto	l4102
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;Lab10_S3_sample.c: 102: {
  1824                           ;Lab10_S3_sample.c: 105: PORTDbits.RD1 = 0;
  1825  0001BC  9283               	bcf	3971,1,c	;volatile
  1826                           
  1827                           ;Lab10_S3_sample.c: 106: PORTDbits.RD2 = 0;
  1828  0001BE  9483               	bcf	3971,2,c	;volatile
  1829                           
  1830                           ;Lab10_S3_sample.c: 107: PORTDbits.RD3 = 0;
  1831  0001C0  9683               	bcf	3971,3,c	;volatile
  1832                           
  1833                           ;Lab10_S3_sample.c: 109: PORTEbits.RE0 = 0;
  1834  0001C2  9084               	bcf	3972,0,c	;volatile
  1835                           
  1836                           ;Lab10_S3_sample.c: 110: PORTEbits.RE1 = 0;
  1837  0001C4  9284               	bcf	3972,1,c	;volatile
  1838                           
  1839                           ;Lab10_S3_sample.c: 111: PORTEbits.RE2 = 1;
  1840  0001C6  8484               	bsf	3972,2,c	;volatile
  1841                           
  1842                           ;Lab10_S3_sample.c: 113: PORTDbits.RD4 = 0;
  1843  0001C8  9883               	bcf	3971,4,c	;volatile
  1844                           
  1845                           ;Lab10_S3_sample.c: 114: PORTDbits.RD5 = 0;
  1846  0001CA  9A83               	bcf	3971,5,c	;volatile
  1847                           
  1848                           ;Lab10_S3_sample.c: 115: PORTDbits.RD6 = 0;
  1849  0001CC  9C83               	bcf	3971,6,c	;volatile
  1850  0001CE  D000               	goto	l4102
  1851  0001D0                     l4102:
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;Lab10_S3_sample.c: 116: }
  1855                           ;Lab10_S3_sample.c: 117: if(color[found] == 0x07E0)
  1856  0001D0  0100               	movlb	0	; () banked
  1857  0001D2  51D9               	movf	main@found& (0+255),w,b
  1858  0001D4  0D02               	mullw	2
  1859  0001D6  0E80               	movlw	low _color
  1860  0001D8  24F3               	addwf	prodl,w,c
  1861  0001DA  6ED9               	movwf	fsr2l,c
  1862  0001DC  0E00               	movlw	high _color
  1863  0001DE  20F4               	addwfc	prodh,w,c
  1864  0001E0  6EDA               	movwf	fsr2h,c
  1865  0001E2  0EE0               	movlw	224
  1866  0001E4  18DE               	xorwf	postinc2,w,c
  1867  0001E6  E10E               	bnz	l4106
  1868  0001E8  0E07               	movlw	7
  1869  0001EA  18DE               	xorwf	postinc2,w,c
  1870  0001EC  A4D8               	btfss	status,2,c
  1871  0001EE  D00A               	goto	l4106
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;Lab10_S3_sample.c: 118: {
  1875                           ;Lab10_S3_sample.c: 121: PORTDbits.RD1 = 0;
  1876  0001F0  9283               	bcf	3971,1,c	;volatile
  1877                           
  1878                           ;Lab10_S3_sample.c: 122: PORTDbits.RD2 = 0;
  1879  0001F2  9483               	bcf	3971,2,c	;volatile
  1880                           
  1881                           ;Lab10_S3_sample.c: 123: PORTDbits.RD3 = 0;
  1882  0001F4  9683               	bcf	3971,3,c	;volatile
  1883                           
  1884                           ;Lab10_S3_sample.c: 125: PORTEbits.RE0 = 0;
  1885  0001F6  9084               	bcf	3972,0,c	;volatile
  1886                           
  1887                           ;Lab10_S3_sample.c: 126: PORTEbits.RE1 = 1;
  1888  0001F8  8284               	bsf	3972,1,c	;volatile
  1889                           
  1890                           ;Lab10_S3_sample.c: 127: PORTEbits.RE2 = 0;
  1891  0001FA  9484               	bcf	3972,2,c	;volatile
  1892                           
  1893                           ;Lab10_S3_sample.c: 129: PORTDbits.RD4 = 0;
  1894  0001FC  9883               	bcf	3971,4,c	;volatile
  1895                           
  1896                           ;Lab10_S3_sample.c: 130: PORTDbits.RD5 = 0;
  1897  0001FE  9A83               	bcf	3971,5,c	;volatile
  1898                           
  1899                           ;Lab10_S3_sample.c: 131: PORTDbits.RD6 = 0;
  1900  000200  9C83               	bcf	3971,6,c	;volatile
  1901  000202  D000               	goto	l4106
  1902  000204                     l4106:
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;Lab10_S3_sample.c: 132: }
  1906                           ;Lab10_S3_sample.c: 133: if(color[found] == 0xF81F)
  1907  000204  0100               	movlb	0	; () banked
  1908  000206  51D9               	movf	main@found& (0+255),w,b
  1909  000208  0D02               	mullw	2
  1910  00020A  0E80               	movlw	low _color
  1911  00020C  24F3               	addwf	prodl,w,c
  1912  00020E  6ED9               	movwf	fsr2l,c
  1913  000210  0E00               	movlw	high _color
  1914  000212  20F4               	addwfc	prodh,w,c
  1915  000214  6EDA               	movwf	fsr2h,c
  1916  000216  0E1F               	movlw	31
  1917  000218  18DE               	xorwf	postinc2,w,c
  1918  00021A  E10E               	bnz	l4110
  1919  00021C  0EF8               	movlw	248
  1920  00021E  18DE               	xorwf	postinc2,w,c
  1921  000220  A4D8               	btfss	status,2,c
  1922  000222  D00A               	goto	l4110
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;Lab10_S3_sample.c: 134: {
  1926                           ;Lab10_S3_sample.c: 137: PORTDbits.RD1 = 0;
  1927  000224  9283               	bcf	3971,1,c	;volatile
  1928                           
  1929                           ;Lab10_S3_sample.c: 138: PORTDbits.RD2 = 0;
  1930  000226  9483               	bcf	3971,2,c	;volatile
  1931                           
  1932                           ;Lab10_S3_sample.c: 139: PORTDbits.RD3 = 0;
  1933  000228  9683               	bcf	3971,3,c	;volatile
  1934                           
  1935                           ;Lab10_S3_sample.c: 141: PORTEbits.RE0 = 1;
  1936  00022A  8084               	bsf	3972,0,c	;volatile
  1937                           
  1938                           ;Lab10_S3_sample.c: 142: PORTEbits.RE1 = 0;
  1939  00022C  9284               	bcf	3972,1,c	;volatile
  1940                           
  1941                           ;Lab10_S3_sample.c: 143: PORTEbits.RE2 = 1;
  1942  00022E  8484               	bsf	3972,2,c	;volatile
  1943                           
  1944                           ;Lab10_S3_sample.c: 145: PORTDbits.RD4 = 0;
  1945  000230  9883               	bcf	3971,4,c	;volatile
  1946                           
  1947                           ;Lab10_S3_sample.c: 146: PORTDbits.RD5 = 0;
  1948  000232  9A83               	bcf	3971,5,c	;volatile
  1949                           
  1950                           ;Lab10_S3_sample.c: 147: PORTDbits.RD6 = 0;
  1951  000234  9C83               	bcf	3971,6,c	;volatile
  1952  000236  D000               	goto	l4110
  1953  000238                     l4110:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;Lab10_S3_sample.c: 148: }
  1957                           ;Lab10_S3_sample.c: 149: if(color[found] == 0x0000)
  1958  000238  0100               	movlb	0	; () banked
  1959  00023A  51D9               	movf	main@found& (0+255),w,b
  1960  00023C  0D02               	mullw	2
  1961  00023E  0E80               	movlw	low _color
  1962  000240  24F3               	addwf	prodl,w,c
  1963  000242  6ED9               	movwf	fsr2l,c
  1964  000244  0E00               	movlw	high _color
  1965  000246  20F4               	addwfc	prodh,w,c
  1966  000248  6EDA               	movwf	fsr2h,c
  1967  00024A  50DE               	movf	postinc2,w,c
  1968  00024C  10DE               	iorwf	postinc2,w,c
  1969  00024E  A4D8               	btfss	status,2,c
  1970  000250  D009               	goto	l144
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;Lab10_S3_sample.c: 150: {
  1974                           ;Lab10_S3_sample.c: 153: PORTDbits.RD1 = 1;
  1975  000252  8283               	bsf	3971,1,c	;volatile
  1976                           
  1977                           ;Lab10_S3_sample.c: 154: PORTDbits.RD2 = 1;
  1978  000254  8483               	bsf	3971,2,c	;volatile
  1979                           
  1980                           ;Lab10_S3_sample.c: 155: PORTDbits.RD3 = 1;
  1981  000256  8683               	bsf	3971,3,c	;volatile
  1982                           
  1983                           ;Lab10_S3_sample.c: 157: PORTEbits.RE0 = 0;
  1984  000258  9084               	bcf	3972,0,c	;volatile
  1985                           
  1986                           ;Lab10_S3_sample.c: 158: PORTEbits.RE1 = 0;
  1987  00025A  9284               	bcf	3972,1,c	;volatile
  1988                           
  1989                           ;Lab10_S3_sample.c: 159: PORTEbits.RE2 = 0;
  1990  00025C  9484               	bcf	3972,2,c	;volatile
  1991                           
  1992                           ;Lab10_S3_sample.c: 161: PORTDbits.RD4 = 0;
  1993  00025E  9883               	bcf	3971,4,c	;volatile
  1994                           
  1995                           ;Lab10_S3_sample.c: 162: PORTDbits.RD5 = 0;
  1996  000260  9A83               	bcf	3971,5,c	;volatile
  1997                           
  1998                           ;Lab10_S3_sample.c: 163: PORTDbits.RD6 = 0;
  1999  000262  9C83               	bcf	3971,6,c	;volatile
  2000  000264                     l144:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;Lab10_S3_sample.c: 164: }
  2004                           ;Lab10_S3_sample.c: 167: PORTCbits.RC0 = 1;
  2005  000264  8082               	bsf	3970,0,c	;volatile
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;Lab10_S3_sample.c: 168: Activate_Buzzer();
  2009  000266  EC8C  F00A         	call	_Activate_Buzzer	;wreg free
  2010                           
  2011                           ;Lab10_S3_sample.c: 169: Wait_One_Sec();
  2012  00026A  ECB2  F00A         	call	_Wait_One_Sec	;wreg free
  2013                           
  2014                           ;Lab10_S3_sample.c: 170: Deactivate_Buzzer();
  2015  00026E  ECB7  F00A         	call	_Deactivate_Buzzer	;wreg free
  2016                           
  2017                           ;Lab10_S3_sample.c: 171: PORTCbits.RC0 = 0;
  2018  000272  9082               	bcf	3970,0,c	;volatile
  2019  000274  D6F1               	goto	l4058
  2020  000276  EF0C  F000         	goto	start
  2021  00027A                     __end_of_main:
  2022                           	opt stack 0
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           intcon2	equ	0xFF1
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postdec1	equ	0xFE5
  2033                           fsr1l	equ	0xFE1
  2034                           postinc2	equ	0xFDE
  2035                           postdec2	equ	0xFDD
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _printf *****************
  2041 ;; Defined at:
  2042 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2045 ;;		 -> STR_2(22), STR_1(19), 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  idx             1   33[COMRAM] unsigned char 
  2048 ;;  tmpval          4    0        struct .
  2049 ;;  cp              3    0        PTR const unsigned char 
  2050 ;;  val             2   38[COMRAM] unsigned int 
  2051 ;;  ap              2   34[COMRAM] PTR void [1]
  2052 ;;		 -> ?_printf(2), 
  2053 ;;  len             2    0        unsigned int 
  2054 ;;  c               1   40[COMRAM] char 
  2055 ;;  flag            1   37[COMRAM] unsigned char 
  2056 ;;  prec            1   36[COMRAM] char 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  2   28[COMRAM] int 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;Total ram usage:       13 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    4
  2073 ;; This function calls:
  2074 ;;		___lwdiv
  2075 ;;		___lwmod
  2076 ;;		_putch
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text1
  2083  00027A                     __ptext1:
  2084                           	opt stack 0
  2085  00027A                     _printf:
  2086                           	opt stack 26
  2087                           
  2088                           ;doprnt.c: 466: va_list ap;
  2089                           ;doprnt.c: 499: signed char c;
  2090                           ;doprnt.c: 506: signed char prec;
  2091                           ;doprnt.c: 508: unsigned char flag;
  2092                           ;doprnt.c: 523: union {
  2093                           ;doprnt.c: 524: unsigned long vd;
  2094                           ;doprnt.c: 525: double integ;
  2095                           ;doprnt.c: 526: } tmpval;
  2096                           ;doprnt.c: 528: unsigned int val;
  2097                           ;doprnt.c: 529: unsigned len;
  2098                           ;doprnt.c: 530: const char * cp;
  2099                           ;doprnt.c: 533: *ap = __va_start();
  2100                           
  2101                           ;incstack = 0
  2102  00027A  0E1F               	movlw	low (?_printf+2)
  2103  00027C  6E23               	movwf	printf@ap,c
  2104  00027E  0E00               	movlw	high (?_printf+2)
  2105  000280  6E24               	movwf	printf@ap+1,c
  2106                           
  2107                           ;doprnt.c: 536: while(c = *f++) {
  2108  000282  D0F5               	goto	l3954
  2109  000284                     l3876:
  2110                           
  2111                           ;doprnt.c: 538: if(c != '%')
  2112  000284  0E25               	movlw	37
  2113  000286  1829               	xorwf	printf@c,w,c
  2114  000288  B4D8               	btfsc	status,2,c
  2115  00028A  D004               	goto	l3880
  2116                           
  2117                           ;doprnt.c: 540: {
  2118                           ;doprnt.c: 541: (putch(c) );
  2119  00028C  5029               	movf	printf@c,w,c
  2120  00028E  ECA5  F00A         	call	_putch
  2121                           
  2122                           ;doprnt.c: 542: continue;
  2123  000292  D0ED               	goto	l3954
  2124  000294                     l3880:
  2125                           
  2126                           ;doprnt.c: 543: }
  2127                           ;doprnt.c: 548: flag = 0;
  2128  000294  0E00               	movlw	0
  2129  000296  6E26               	movwf	printf@flag,c
  2130                           
  2131                           ;doprnt.c: 635: switch(c = *f++) {
  2132  000298  D006               	goto	l3886
  2133                           
  2134                           ;doprnt.c: 638: goto alldone;
  2135                           
  2136                           ;doprnt.c: 637: case 0:
  2137  00029A  D0F7               	goto	l549
  2138                           
  2139                           ;doprnt.c: 698: case 'i':
  2140                           ;doprnt.c: 699: break;
  2141                           
  2142                           ;doprnt.c: 697: case 'd':
  2143  00029C  D01B               	goto	l524
  2144  00029E                     l3882:
  2145                           
  2146                           ;doprnt.c: 721: flag |= 0x80;
  2147  00029E  8E26               	bsf	printf@flag,7,c
  2148                           
  2149                           ;doprnt.c: 723: break;
  2150  0002A0  D019               	goto	l524
  2151                           
  2152                           ;doprnt.c: 813: continue;
  2153                           
  2154                           ;doprnt.c: 802: default:
  2155  0002A2  D0E5               	goto	l3954
  2156                           
  2157                           ;doprnt.c: 822: }
  2158  0002A4  D017               	goto	l524
  2159  0002A6                     l3886:
  2160  0002A6  C01D  FFF6         	movff	printf@f,tblptrl
  2161  0002AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2162  0002AE  4A1D               	infsnz	printf@f,f,c
  2163  0002B0  2A1E               	incf	printf@f+1,f,c
  2164  0002B2                     	if	0	;tblptru may be non-zero
  2165  0002B2                     	endif
  2166  0002B2                     	if	0	;tblptru may be non-zero
  2167  0002B2                     	endif
  2168  0002B2  0008               	tblrd		*
  2169  0002B4  CFF5 F029          	movff	tablat,printf@c
  2170  0002B8  5029               	movf	printf@c,w,c
  2171                           
  2172                           ; Switch size 1, requested type "space"
  2173                           ; Number of cases is 4, Range of values is 0 to 120
  2174                           ; switch strategies available:
  2175                           ; Name         Instructions Cycles
  2176                           ; simple_byte           13     7 (average)
  2177                           ;	Chosen strategy is simple_byte
  2178  0002BA  0A00               	xorlw	0	; case 0
  2179  0002BC  B4D8               	btfsc	status,2,c
  2180  0002BE  D0E5               	goto	l549
  2181  0002C0  0A64               	xorlw	100	; case 100
  2182  0002C2  B4D8               	btfsc	status,2,c
  2183  0002C4  D007               	goto	l524
  2184  0002C6  0A0D               	xorlw	13	; case 105
  2185  0002C8  B4D8               	btfsc	status,2,c
  2186  0002CA  D004               	goto	l524
  2187  0002CC  0A11               	xorlw	17	; case 120
  2188  0002CE  B4D8               	btfsc	status,2,c
  2189  0002D0  D7E6               	goto	l3882
  2190  0002D2  D0CD               	goto	l3954
  2191  0002D4                     l524:
  2192                           
  2193                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2194  0002D4  BE26               	btfsc	printf@flag,7,c
  2195  0002D6  D015               	goto	l3898
  2196                           
  2197                           ;doprnt.c: 1253: {
  2198                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2199  0002D8  C023  FFD9         	movff	printf@ap,fsr2l
  2200  0002DC  C024  FFDA         	movff	printf@ap+1,fsr2h
  2201  0002E0  CFDE F027          	movff	postinc2,printf@val
  2202  0002E4  CFDD F028          	movff	postdec2,printf@val+1
  2203  0002E8  0E02               	movlw	2
  2204  0002EA  2623               	addwf	printf@ap,f,c
  2205  0002EC  0E00               	movlw	0
  2206  0002EE  2224               	addwfc	printf@ap+1,f,c
  2207                           
  2208                           ;doprnt.c: 1261: if((int)val < 0) {
  2209  0002F0  AE28               	btfss	printf@val+1,7,c
  2210  0002F2  D04E               	goto	l3932
  2211                           
  2212                           ;doprnt.c: 1262: flag |= 0x03;
  2213  0002F4  0E03               	movlw	3
  2214  0002F6  1226               	iorwf	printf@flag,f,c
  2215                           
  2216                           ;doprnt.c: 1263: val = -val;
  2217  0002F8  6C27               	negf	printf@val,c
  2218  0002FA  1E28               	comf	printf@val+1,f,c
  2219  0002FC  B0D8               	btfsc	status,0,c
  2220  0002FE  2A28               	incf	printf@val+1,f,c
  2221                           
  2222                           ;doprnt.c: 1264: }
  2223                           ;doprnt.c: 1266: }
  2224  000300  D047               	goto	l3932
  2225  000302                     l3898:
  2226                           
  2227                           ;doprnt.c: 1268: else
  2228                           ;doprnt.c: 1273: {
  2229                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2230  000302  C023  FFD9         	movff	printf@ap,fsr2l
  2231  000306  C024  FFDA         	movff	printf@ap+1,fsr2h
  2232  00030A  CFDE F027          	movff	postinc2,printf@val
  2233  00030E  CFDD F028          	movff	postdec2,printf@val+1
  2234  000312  0E02               	movlw	2
  2235  000314  2623               	addwf	printf@ap,f,c
  2236  000316  0E00               	movlw	0
  2237  000318  2224               	addwfc	printf@ap+1,f,c
  2238                           
  2239                           ;doprnt.c: 1287: }
  2240                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2241  00031A  D03A               	goto	l3932
  2242  00031C                     l3902:
  2243                           
  2244                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2245  00031C  0E01               	movlw	1
  2246  00031E  6E29               	movwf	printf@c,c
  2247  000320                     l3904:
  2248  000320  0E05               	movlw	5
  2249  000322  1829               	xorwf	printf@c,w,c
  2250  000324  B4D8               	btfsc	status,2,c
  2251  000326  D03D               	goto	l3934
  2252  000328  D001               	goto	l3908
  2253  00032A  D03B               	goto	l3934
  2254  00032C                     l3908:
  2255                           
  2256                           ;doprnt.c: 1306: if(val < dpowers[c])
  2257  00032C  5029               	movf	printf@c,w,c
  2258  00032E  0D02               	mullw	2
  2259  000330  0EAA               	movlw	low _dpowers
  2260  000332  24F3               	addwf	prodl,w,c
  2261  000334  6EF6               	movwf	tblptrl,c
  2262  000336  0EFF               	movlw	high _dpowers
  2263  000338  20F4               	addwfc	prodh,w,c
  2264  00033A  6EF7               	movwf	tblptrh,c
  2265  00033C                     	if	0	;There are less than 3 active tblptr bytes
  2266  00033C                     	endif
  2267  00033C  0009               	tblrd		*+
  2268  00033E  50F5               	movf	tablat,w,c
  2269  000340  5C27               	subwf	printf@val,w,c
  2270  000342  0009               	tblrd		*+
  2271  000344  50F5               	movf	tablat,w,c
  2272  000346  5828               	subwfb	printf@val+1,w,c
  2273  000348  A0D8               	btfss	status,0,c
  2274  00034A  D02B               	goto	l3934
  2275  00034C  D001               	goto	l3912
  2276                           
  2277                           ;doprnt.c: 1307: break;
  2278  00034E  D029               	goto	l3934
  2279  000350                     l3912:
  2280  000350  2A29               	incf	printf@c,f,c
  2281  000352  D7E6               	goto	l3904
  2282                           
  2283                           ;doprnt.c: 1309: break;
  2284  000354  D026               	goto	l3934
  2285  000356                     l3916:
  2286                           
  2287                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2288  000356  0E01               	movlw	1
  2289  000358  6E29               	movwf	printf@c,c
  2290  00035A                     l3918:
  2291  00035A  0E04               	movlw	4
  2292  00035C  1829               	xorwf	printf@c,w,c
  2293  00035E  B4D8               	btfsc	status,2,c
  2294  000360  D020               	goto	l3934
  2295  000362  D001               	goto	l3922
  2296  000364  D01E               	goto	l3934
  2297  000366                     l3922:
  2298                           
  2299                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2300  000366  5029               	movf	printf@c,w,c
  2301  000368  0D02               	mullw	2
  2302  00036A  0EB4               	movlw	low _hexpowers
  2303  00036C  24F3               	addwf	prodl,w,c
  2304  00036E  6EF6               	movwf	tblptrl,c
  2305  000370  0EFF               	movlw	high _hexpowers
  2306  000372  20F4               	addwfc	prodh,w,c
  2307  000374  6EF7               	movwf	tblptrh,c
  2308  000376                     	if	0	;There are less than 3 active tblptr bytes
  2309  000376                     	endif
  2310  000376  0009               	tblrd		*+
  2311  000378  50F5               	movf	tablat,w,c
  2312  00037A  5C27               	subwf	printf@val,w,c
  2313  00037C  0009               	tblrd		*+
  2314  00037E  50F5               	movf	tablat,w,c
  2315  000380  5828               	subwfb	printf@val+1,w,c
  2316  000382  A0D8               	btfss	status,0,c
  2317  000384  D00E               	goto	l3934
  2318  000386  D001               	goto	l3926
  2319                           
  2320                           ;doprnt.c: 1318: break;
  2321  000388  D00C               	goto	l3934
  2322  00038A                     l3926:
  2323  00038A  2A29               	incf	printf@c,f,c
  2324  00038C  D7E6               	goto	l3918
  2325                           
  2326                           ;doprnt.c: 1336: }
  2327                           
  2328                           ;doprnt.c: 1320: break;
  2329  00038E  D009               	goto	l3934
  2330  000390                     l3932:
  2331  000390  5026               	movf	printf@flag,w,c
  2332  000392  0B80               	andlw	128
  2333                           
  2334                           ; Switch size 1, requested type "space"
  2335                           ; Number of cases is 2, Range of values is 0 to 128
  2336                           ; switch strategies available:
  2337                           ; Name         Instructions Cycles
  2338                           ; simple_byte            7     4 (average)
  2339                           ;	Chosen strategy is simple_byte
  2340  000394  0A00               	xorlw	0	; case 0
  2341  000396  B4D8               	btfsc	status,2,c
  2342  000398  D7C1               	goto	l3902
  2343  00039A  0A80               	xorlw	128	; case 128
  2344  00039C  B4D8               	btfsc	status,2,c
  2345  00039E  D7DB               	goto	l3916
  2346  0003A0  D000               	goto	l3934
  2347  0003A2                     l3934:
  2348                           
  2349                           ;doprnt.c: 1422: {
  2350                           ;doprnt.c: 1438: if(flag & 0x03)
  2351  0003A2  C026  F021         	movff	printf@flag,??_printf
  2352  0003A6  0E03               	movlw	3
  2353  0003A8  1621               	andwf	??_printf,f,c
  2354  0003AA  B4D8               	btfsc	status,2,c
  2355  0003AC  D004               	goto	l3938
  2356                           
  2357                           ;doprnt.c: 1439: (putch('-') );
  2358  0003AE  0E2D               	movlw	45
  2359  0003B0  ECA5  F00A         	call	_putch
  2360  0003B4  D000               	goto	l3938
  2361  0003B6                     l3938:
  2362                           
  2363                           ;doprnt.c: 1469: }
  2364                           ;doprnt.c: 1472: prec = c;
  2365  0003B6  C029  F025         	movff	printf@c,printf@prec
  2366                           
  2367                           ;doprnt.c: 1474: while(prec--) {
  2368  0003BA  D053               	goto	l3952
  2369                           
  2370                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2371  0003BC  D045               	goto	l3948
  2372  0003BE                     l3940:
  2373                           
  2374                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2375  0003BE  5025               	movf	printf@prec,w,c
  2376  0003C0  0D02               	mullw	2
  2377  0003C2  0EAA               	movlw	low _dpowers
  2378  0003C4  24F3               	addwf	prodl,w,c
  2379  0003C6  6EF6               	movwf	tblptrl,c
  2380  0003C8  0EFF               	movlw	high _dpowers
  2381  0003CA  20F4               	addwfc	prodh,w,c
  2382  0003CC  6EF7               	movwf	tblptrh,c
  2383  0003CE                     	if	0	;There are less than 3 active tblptr bytes
  2384  0003CE                     	endif
  2385  0003CE  0009               	tblrd		*+
  2386  0003D0  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2387  0003D4  000A               	tblrd		*-
  2388  0003D6  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2389  0003DA  C027  F011         	movff	printf@val,___lwdiv@dividend
  2390  0003DE  C028  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2391  0003E2  EC6B  F008         	call	___lwdiv	;wreg free
  2392  0003E6  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2393  0003EA  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2394  0003EE  0E00               	movlw	0
  2395  0003F0  6E1B               	movwf	___lwmod@divisor+1,c
  2396  0003F2  0E0A               	movlw	10
  2397  0003F4  6E1A               	movwf	___lwmod@divisor,c
  2398  0003F6  EC40  F009         	call	___lwmod	;wreg free
  2399  0003FA  5018               	movf	?___lwmod,w,c
  2400  0003FC  0F30               	addlw	48
  2401  0003FE  6E29               	movwf	printf@c,c
  2402                           
  2403                           ;doprnt.c: 1491: break;
  2404  000400  D02C               	goto	l3950
  2405  000402                     l3942:
  2406                           
  2407                           ;doprnt.c: 1499: {
  2408                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2409  000402  C027  F011         	movff	printf@val,___lwdiv@dividend
  2410  000406  C028  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2411  00040A  5025               	movf	printf@prec,w,c
  2412  00040C  0D02               	mullw	2
  2413  00040E  0EB4               	movlw	low _hexpowers
  2414  000410  24F3               	addwf	prodl,w,c
  2415  000412  6EF6               	movwf	tblptrl,c
  2416  000414  0EFF               	movlw	high _hexpowers
  2417  000416  20F4               	addwfc	prodh,w,c
  2418  000418  6EF7               	movwf	tblptrh,c
  2419  00041A                     	if	0	;There are less than 3 active tblptr bytes
  2420  00041A                     	endif
  2421  00041A  0009               	tblrd		*+
  2422  00041C  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2423  000420  000A               	tblrd		*-
  2424  000422  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2425  000426  EC6B  F008         	call	___lwdiv	;wreg free
  2426  00042A  5011               	movf	?___lwdiv,w,c
  2427  00042C  0B0F               	andlw	15
  2428  00042E  6E22               	movwf	printf@idx,c
  2429                           
  2430                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2431  000430  5022               	movf	printf@idx,w,c
  2432  000432  0D01               	mullw	1
  2433  000434  0EE5               	movlw	low STR_4
  2434  000436  24F3               	addwf	prodl,w,c
  2435  000438  6EF6               	movwf	tblptrl,c
  2436  00043A  0EFF               	movlw	high STR_4
  2437  00043C  20F4               	addwfc	prodh,w,c
  2438  00043E  6EF7               	movwf	tblptrh,c
  2439  000440                     	if	0	;There are less than 3 active tblptr bytes
  2440  000440                     	endif
  2441  000440  0008               	tblrd		*
  2442  000442  CFF5 F029          	movff	tablat,printf@c
  2443                           
  2444                           ;doprnt.c: 1523: }
  2445                           
  2446                           ;doprnt.c: 1508: }
  2447                           ;doprnt.c: 1510: break;
  2448  000446  D009               	goto	l3950
  2449  000448                     l3948:
  2450  000448  5026               	movf	printf@flag,w,c
  2451  00044A  0B80               	andlw	128
  2452                           
  2453                           ; Switch size 1, requested type "space"
  2454                           ; Number of cases is 2, Range of values is 0 to 128
  2455                           ; switch strategies available:
  2456                           ; Name         Instructions Cycles
  2457                           ; simple_byte            7     4 (average)
  2458                           ;	Chosen strategy is simple_byte
  2459  00044C  0A00               	xorlw	0	; case 0
  2460  00044E  B4D8               	btfsc	status,2,c
  2461  000450  D7B6               	goto	l3940
  2462  000452  0A80               	xorlw	128	; case 128
  2463  000454  B4D8               	btfsc	status,2,c
  2464  000456  D7D5               	goto	l3942
  2465  000458  D000               	goto	l3950
  2466  00045A                     l3950:
  2467                           
  2468                           ;doprnt.c: 1524: (putch(c) );
  2469  00045A  5029               	movf	printf@c,w,c
  2470  00045C  ECA5  F00A         	call	_putch
  2471  000460  D000               	goto	l3952
  2472  000462                     l3952:
  2473  000462  0625               	decf	printf@prec,f,c
  2474  000464  2825               	incf	printf@prec,w,c
  2475  000466  B4D8               	btfsc	status,2,c
  2476  000468  D002               	goto	l3954
  2477  00046A  D7EE               	goto	l3948
  2478  00046C  D000               	goto	l3954
  2479  00046E                     l3954:
  2480  00046E  C01D  FFF6         	movff	printf@f,tblptrl
  2481  000472  C01E  FFF7         	movff	printf@f+1,tblptrh
  2482  000476  4A1D               	infsnz	printf@f,f,c
  2483  000478  2A1E               	incf	printf@f+1,f,c
  2484  00047A                     	if	0	;tblptru may be non-zero
  2485  00047A                     	endif
  2486  00047A                     	if	0	;tblptru may be non-zero
  2487  00047A                     	endif
  2488  00047A  0008               	tblrd		*
  2489  00047C  CFF5 F029          	movff	tablat,printf@c
  2490  000480  5029               	movf	printf@c,w,c
  2491  000482  B4D8               	btfsc	status,2,c
  2492  000484  D002               	goto	l549
  2493  000486  D6FE               	goto	l3876
  2494  000488  D000               	goto	l549
  2495  00048A                     l549:
  2496  00048A  0012               	return		;funcret
  2497  00048C                     __end_of_printf:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           tblptrh	equ	0xFF7
  2501                           tblptrl	equ	0xFF6
  2502                           tablat	equ	0xFF5
  2503                           prodh	equ	0xFF4
  2504                           prodl	equ	0xFF3
  2505                           intcon2	equ	0xFF1
  2506                           postinc0	equ	0xFEE
  2507                           wreg	equ	0xFE8
  2508                           postdec1	equ	0xFE5
  2509                           fsr1l	equ	0xFE1
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           fsr2h	equ	0xFDA
  2513                           fsr2l	equ	0xFD9
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function _putch *****************
  2517 ;; Defined at:
  2518 ;;		line 32 in file "../Lab10_S3_Sample/utils.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  c               1    wreg     unsigned char 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  c               1   16[COMRAM] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;		None               void
  2525 ;; Registers used:
  2526 ;;		wreg
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;Total ram usage:        1 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    3
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_printf
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text2
  2547  00154A                     __ptext2:
  2548                           	opt stack 0
  2549  00154A                     _putch:
  2550                           	opt stack 26
  2551                           
  2552                           ;incstack = 0
  2553                           ;putch@c stored from wreg
  2554  00154A  6E11               	movwf	putch@c,c
  2555                           
  2556                           ;utils.c: 34: while (!TRMT);
  2557  00154C  D000               	goto	l438
  2558  00154E                     l438:
  2559  00154E  A2AC               	btfss	4012,1,c	;volatile
  2560  001550  D7FE               	goto	l438
  2561                           
  2562                           ;utils.c: 35: TXREG = c;
  2563  001552  C011  FFAD         	movff	putch@c,4013	;volatile
  2564  001556  0012               	return		;funcret
  2565  001558                     __end_of_putch:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           intcon2	equ	0xFF1
  2574                           postinc0	equ	0xFEE
  2575                           wreg	equ	0xFE8
  2576                           postdec1	equ	0xFE5
  2577                           fsr1l	equ	0xFE1
  2578                           postinc2	equ	0xFDE
  2579                           postdec2	equ	0xFDD
  2580                           fsr2h	equ	0xFDA
  2581                           fsr2l	equ	0xFD9
  2582                           status	equ	0xFD8
  2583                           
  2584 ;; *************** function ___lwmod *****************
  2585 ;; Defined at:
  2586 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;  dividend        2   23[COMRAM] unsigned int 
  2589 ;;  divisor         2   25[COMRAM] unsigned int 
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;  counter         1   27[COMRAM] unsigned char 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  2   23[COMRAM] unsigned int 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2, status,0
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;Total ram usage:        5 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    3
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_printf
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text3
  2616  001280                     __ptext3:
  2617                           	opt stack 0
  2618  001280                     ___lwmod:
  2619                           	opt stack 26
  2620                           
  2621                           ;incstack = 0
  2622  001280  501A               	movf	___lwmod@divisor,w,c
  2623  001282  101B               	iorwf	___lwmod@divisor+1,w,c
  2624  001284  B4D8               	btfsc	status,2,c
  2625  001286  D01D               	goto	l1113
  2626  001288  0E01               	movlw	1
  2627  00128A  6E1C               	movwf	___lwmod@counter,c
  2628  00128C  D005               	goto	l3826
  2629  00128E                     l3824:
  2630  00128E  90D8               	bcf	status,0,c
  2631  001290  361A               	rlcf	___lwmod@divisor,f,c
  2632  001292  361B               	rlcf	___lwmod@divisor+1,f,c
  2633  001294  2A1C               	incf	___lwmod@counter,f,c
  2634  001296  D000               	goto	l3826
  2635  001298                     l3826:
  2636  001298  BE1B               	btfsc	___lwmod@divisor+1,7,c
  2637  00129A  D002               	goto	l3828
  2638  00129C  D7F8               	goto	l3824
  2639  00129E  D000               	goto	l3828
  2640  0012A0                     l3828:
  2641  0012A0  501A               	movf	___lwmod@divisor,w,c
  2642  0012A2  5C18               	subwf	___lwmod@dividend,w,c
  2643  0012A4  501B               	movf	___lwmod@divisor+1,w,c
  2644  0012A6  5819               	subwfb	___lwmod@dividend+1,w,c
  2645  0012A8  A0D8               	btfss	status,0,c
  2646  0012AA  D005               	goto	l3832
  2647  0012AC  501A               	movf	___lwmod@divisor,w,c
  2648  0012AE  5E18               	subwf	___lwmod@dividend,f,c
  2649  0012B0  501B               	movf	___lwmod@divisor+1,w,c
  2650  0012B2  5A19               	subwfb	___lwmod@dividend+1,f,c
  2651  0012B4  D000               	goto	l3832
  2652  0012B6                     l3832:
  2653  0012B6  90D8               	bcf	status,0,c
  2654  0012B8  321B               	rrcf	___lwmod@divisor+1,f,c
  2655  0012BA  321A               	rrcf	___lwmod@divisor,f,c
  2656  0012BC  2E1C               	decfsz	___lwmod@counter,f,c
  2657  0012BE  D7F0               	goto	l3828
  2658  0012C0  D000               	goto	l1113
  2659  0012C2                     l1113:
  2660  0012C2  C018  F018         	movff	___lwmod@dividend,?___lwmod
  2661  0012C6  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  2662  0012CA  0012               	return		;funcret
  2663  0012CC                     __end_of___lwmod:
  2664                           	opt stack 0
  2665                           tblptru	equ	0xFF8
  2666                           tblptrh	equ	0xFF7
  2667                           tblptrl	equ	0xFF6
  2668                           tablat	equ	0xFF5
  2669                           prodh	equ	0xFF4
  2670                           prodl	equ	0xFF3
  2671                           intcon2	equ	0xFF1
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           postdec1	equ	0xFE5
  2675                           fsr1l	equ	0xFE1
  2676                           postinc2	equ	0xFDE
  2677                           postdec2	equ	0xFDD
  2678                           fsr2h	equ	0xFDA
  2679                           fsr2l	equ	0xFD9
  2680                           status	equ	0xFD8
  2681                           
  2682 ;; *************** function ___lwdiv *****************
  2683 ;; Defined at:
  2684 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  dividend        2   16[COMRAM] unsigned int 
  2687 ;;  divisor         2   18[COMRAM] unsigned int 
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;  quotient        2   21[COMRAM] unsigned int 
  2690 ;;  counter         1   20[COMRAM] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  2   16[COMRAM] unsigned int 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, status,0
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;Total ram usage:        7 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    3
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_printf
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text4
  2715  0010D6                     __ptext4:
  2716                           	opt stack 0
  2717  0010D6                     ___lwdiv:
  2718                           	opt stack 26
  2719                           
  2720                           ;incstack = 0
  2721  0010D6  0E00               	movlw	0
  2722  0010D8  6E17               	movwf	___lwdiv@quotient+1,c
  2723  0010DA  0E00               	movlw	0
  2724  0010DC  6E16               	movwf	___lwdiv@quotient,c
  2725  0010DE  5013               	movf	___lwdiv@divisor,w,c
  2726  0010E0  1014               	iorwf	___lwdiv@divisor+1,w,c
  2727  0010E2  B4D8               	btfsc	status,2,c
  2728  0010E4  D021               	goto	l1103
  2729  0010E6  0E01               	movlw	1
  2730  0010E8  6E15               	movwf	___lwdiv@counter,c
  2731  0010EA  D005               	goto	l3806
  2732  0010EC                     l3804:
  2733  0010EC  90D8               	bcf	status,0,c
  2734  0010EE  3613               	rlcf	___lwdiv@divisor,f,c
  2735  0010F0  3614               	rlcf	___lwdiv@divisor+1,f,c
  2736  0010F2  2A15               	incf	___lwdiv@counter,f,c
  2737  0010F4  D000               	goto	l3806
  2738  0010F6                     l3806:
  2739  0010F6  BE14               	btfsc	___lwdiv@divisor+1,7,c
  2740  0010F8  D002               	goto	l3808
  2741  0010FA  D7F8               	goto	l3804
  2742  0010FC  D000               	goto	l3808
  2743  0010FE                     l3808:
  2744  0010FE  90D8               	bcf	status,0,c
  2745  001100  3616               	rlcf	___lwdiv@quotient,f,c
  2746  001102  3617               	rlcf	___lwdiv@quotient+1,f,c
  2747  001104  5013               	movf	___lwdiv@divisor,w,c
  2748  001106  5C11               	subwf	___lwdiv@dividend,w,c
  2749  001108  5014               	movf	___lwdiv@divisor+1,w,c
  2750  00110A  5812               	subwfb	___lwdiv@dividend+1,w,c
  2751  00110C  A0D8               	btfss	status,0,c
  2752  00110E  D006               	goto	l3816
  2753  001110  5013               	movf	___lwdiv@divisor,w,c
  2754  001112  5E11               	subwf	___lwdiv@dividend,f,c
  2755  001114  5014               	movf	___lwdiv@divisor+1,w,c
  2756  001116  5A12               	subwfb	___lwdiv@dividend+1,f,c
  2757  001118  8016               	bsf	___lwdiv@quotient,0,c
  2758  00111A  D000               	goto	l3816
  2759  00111C                     l3816:
  2760  00111C  90D8               	bcf	status,0,c
  2761  00111E  3214               	rrcf	___lwdiv@divisor+1,f,c
  2762  001120  3213               	rrcf	___lwdiv@divisor,f,c
  2763  001122  2E15               	decfsz	___lwdiv@counter,f,c
  2764  001124  D7EC               	goto	l3808
  2765  001126  D000               	goto	l1103
  2766  001128                     l1103:
  2767  001128  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  2768  00112C  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2769  001130  0012               	return		;funcret
  2770  001132                     __end_of___lwdiv:
  2771                           	opt stack 0
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon2	equ	0xFF1
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           postdec1	equ	0xFE5
  2782                           fsr1l	equ	0xFE1
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _fillCircle *****************
  2790 ;; Defined at:
  2791 ;;		line 561 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  x0              2    0[BANK0 ] int 
  2794 ;;  y0              2    2[BANK0 ] int 
  2795 ;;  r               2    4[BANK0 ] int 
  2796 ;;  color           2    6[BANK0 ] unsigned int 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;		None               void
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2808 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;Total ram usage:        8 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    8
  2815 ;; This function calls:
  2816 ;;		_drawFastVLine
  2817 ;;		_fillCircleHelper
  2818 ;; This function is called by:
  2819 ;;		_main
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text5
  2824  001132                     __ptext5:
  2825                           	opt stack 0
  2826  001132                     _fillCircle:
  2827                           	opt stack 22
  2828                           
  2829                           ;ST7735_TFT.c: 563: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  2830                           
  2831                           ;incstack = 0
  2832  001132  0100               	movlb	0	; () banked
  2833  001134  51CD               	movf	fillCircle@r& (0+255),w,b
  2834  001136  0800               	sublw	0
  2835  001138  0100               	movlb	0	; () banked
  2836  00113A  25CB               	addwf	fillCircle@y0& (0+255),w,b
  2837  00113C  6E18               	movwf	drawFastVLine@y,c
  2838  00113E  80D8               	bsf	status,0,c
  2839  001140  0100               	movlb	0	; () banked
  2840  001142  35CD               	rlcf	fillCircle@r& (0+255),w,b
  2841  001144  6E19               	movwf	drawFastVLine@h,c
  2842  001146  C0CF  F01A         	movff	fillCircle@color,drawFastVLine@color
  2843  00114A  C0D0  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  2844  00114E  0100               	movlb	0	; () banked
  2845  001150  51C9               	movf	fillCircle@x0& (0+255),w,b
  2846  001152  EC70  F007         	call	_drawFastVLine
  2847                           
  2848                           ;ST7735_TFT.c: 564: fillCircleHelper(x0, y0, r, 3, 0, color);
  2849  001156  C0C9  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  2850  00115A  C0CA  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  2851  00115E  C0CB  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  2852  001162  C0CC  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  2853  001166  C0CD  F027         	movff	fillCircle@r,fillCircleHelper@r
  2854  00116A  C0CE  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  2855  00116E  0E00               	movlw	0
  2856  001170  6E2A               	movwf	fillCircleHelper@cornername+1,c
  2857  001172  0E03               	movlw	3
  2858  001174  6E29               	movwf	fillCircleHelper@cornername,c
  2859  001176  0E00               	movlw	0
  2860  001178  6E2C               	movwf	fillCircleHelper@delta+1,c
  2861  00117A  0E00               	movlw	0
  2862  00117C  6E2B               	movwf	fillCircleHelper@delta,c
  2863  00117E  C0CF  F02D         	movff	fillCircle@color,fillCircleHelper@color
  2864  001182  C0D0  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  2865  001186  EC7F  F004         	call	_fillCircleHelper	;wreg free
  2866  00118A  0012               	return		;funcret
  2867  00118C                     __end_of_fillCircle:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           intcon2	equ	0xFF1
  2876                           postinc0	equ	0xFEE
  2877                           wreg	equ	0xFE8
  2878                           postdec1	equ	0xFE5
  2879                           fsr1l	equ	0xFE1
  2880                           postinc2	equ	0xFDE
  2881                           postdec2	equ	0xFDD
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _fillCircleHelper *****************
  2887 ;; Defined at:
  2888 ;;		line 536 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  x0              2   34[COMRAM] int 
  2891 ;;  y0              2   36[COMRAM] int 
  2892 ;;  r               2   38[COMRAM] int 
  2893 ;;  cornername      2   40[COMRAM] unsigned int 
  2894 ;;  delta           2   42[COMRAM] int 
  2895 ;;  color           2   44[COMRAM] unsigned int 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  y               2   56[COMRAM] int 
  2898 ;;  x               2   54[COMRAM] int 
  2899 ;;  f               2   52[COMRAM] int 
  2900 ;;  ddF_y           2   50[COMRAM] int 
  2901 ;;  ddF_x           2   48[COMRAM] int 
  2902 ;; Return value:  Size  Location     Type
  2903 ;;		None               void
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, status,0, cstack
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2911 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;Total ram usage:       24 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; Hardware stack levels required when called:    7
  2918 ;; This function calls:
  2919 ;;		_drawFastVLine
  2920 ;; This function is called by:
  2921 ;;		_fillCircle
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text6
  2926  0008FE                     __ptext6:
  2927                           	opt stack 0
  2928  0008FE                     _fillCircleHelper:
  2929                           	opt stack 22
  2930                           
  2931                           ;ST7735_TFT.c: 538: signed int f, ddF_x, ddF_y, x, y;
  2932                           ;ST7735_TFT.c: 539: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  2933                           
  2934                           ;incstack = 0
  2935  0008FE  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2936  000902  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  2937  000906  1E2F               	comf	??_fillCircleHelper,f,c
  2938  000908  1E30               	comf	??_fillCircleHelper+1,f,c
  2939  00090A  4A2F               	infsnz	??_fillCircleHelper,f,c
  2940  00090C  2A30               	incf	??_fillCircleHelper+1,f,c
  2941  00090E  0E01               	movlw	1
  2942  000910  242F               	addwf	??_fillCircleHelper,w,c
  2943  000912  6E35               	movwf	fillCircleHelper@f,c
  2944  000914  0E00               	movlw	0
  2945  000916  2030               	addwfc	??_fillCircleHelper+1,w,c
  2946  000918  6E36               	movwf	fillCircleHelper@f+1,c
  2947  00091A  0E00               	movlw	0
  2948  00091C  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  2949  00091E  0E01               	movlw	1
  2950  000920  6E31               	movwf	fillCircleHelper@ddF_x,c
  2951  000922  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2952  000926  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  2953  00092A  90D8               	bcf	status,0,c
  2954  00092C  362F               	rlcf	??_fillCircleHelper,f,c
  2955  00092E  3630               	rlcf	??_fillCircleHelper+1,f,c
  2956  000930  1E2F               	comf	??_fillCircleHelper,f,c
  2957  000932  1E30               	comf	??_fillCircleHelper+1,f,c
  2958  000934  4A2F               	infsnz	??_fillCircleHelper,f,c
  2959  000936  2A30               	incf	??_fillCircleHelper+1,f,c
  2960  000938  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  2961  00093C  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  2962  000940  0E00               	movlw	0
  2963  000942  6E38               	movwf	fillCircleHelper@x+1,c
  2964  000944  0E00               	movlw	0
  2965  000946  6E37               	movwf	fillCircleHelper@x,c
  2966  000948  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  2967  00094C  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  2968                           
  2969                           ;ST7735_TFT.c: 540: while (x<y) {
  2970  000950  D067               	goto	l3736
  2971  000952                     l3716:
  2972                           
  2973                           ;ST7735_TFT.c: 541: if (f >= 0) {
  2974  000952  BE36               	btfsc	fillCircleHelper@f+1,7,c
  2975  000954  D00B               	goto	l349
  2976                           
  2977                           ;ST7735_TFT.c: 542: y--;
  2978  000956  0639               	decf	fillCircleHelper@y,f,c
  2979  000958  A0D8               	btfss	status,0,c
  2980  00095A  063A               	decf	fillCircleHelper@y+1,f,c
  2981                           
  2982                           ;ST7735_TFT.c: 543: ddF_y += 2;
  2983  00095C  0E02               	movlw	2
  2984  00095E  2633               	addwf	fillCircleHelper@ddF_y,f,c
  2985  000960  0E00               	movlw	0
  2986  000962  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  2987                           
  2988                           ;ST7735_TFT.c: 544: f += ddF_y;
  2989  000964  5033               	movf	fillCircleHelper@ddF_y,w,c
  2990  000966  2635               	addwf	fillCircleHelper@f,f,c
  2991  000968  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  2992  00096A  2236               	addwfc	fillCircleHelper@f+1,f,c
  2993  00096C                     l349:
  2994                           
  2995                           ;ST7735_TFT.c: 545: }
  2996                           ;ST7735_TFT.c: 546: x++;
  2997  00096C  4A37               	infsnz	fillCircleHelper@x,f,c
  2998  00096E  2A38               	incf	fillCircleHelper@x+1,f,c
  2999                           
  3000                           ;ST7735_TFT.c: 547: ddF_x += 2;
  3001  000970  0E02               	movlw	2
  3002  000972  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3003  000974  0E00               	movlw	0
  3004  000976  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3005                           
  3006                           ;ST7735_TFT.c: 548: f += ddF_x;
  3007  000978  5031               	movf	fillCircleHelper@ddF_x,w,c
  3008  00097A  2635               	addwf	fillCircleHelper@f,f,c
  3009  00097C  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3010  00097E  2236               	addwfc	fillCircleHelper@f+1,f,c
  3011                           
  3012                           ;ST7735_TFT.c: 550: if (cornername & 0x1) {
  3013  000980  A029               	btfss	fillCircleHelper@cornername,0,c
  3014  000982  D025               	goto	l3732
  3015                           
  3016                           ;ST7735_TFT.c: 551: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3017  000984  5039               	movf	fillCircleHelper@y,w,c
  3018  000986  0800               	sublw	0
  3019  000988  2425               	addwf	fillCircleHelper@y0,w,c
  3020  00098A  6E18               	movwf	drawFastVLine@y,c
  3021  00098C  5039               	movf	fillCircleHelper@y,w,c
  3022  00098E  2439               	addwf	fillCircleHelper@y,w,c
  3023  000990  242B               	addwf	fillCircleHelper@delta,w,c
  3024  000992  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3025  000994  282F               	incf	??_fillCircleHelper,w,c
  3026  000996  6E19               	movwf	drawFastVLine@h,c
  3027  000998  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3028  00099C  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3029  0009A0  5023               	movf	fillCircleHelper@x0,w,c
  3030  0009A2  2437               	addwf	fillCircleHelper@x,w,c
  3031  0009A4  EC70  F007         	call	_drawFastVLine
  3032                           
  3033                           ;ST7735_TFT.c: 552: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3034  0009A8  5037               	movf	fillCircleHelper@x,w,c
  3035  0009AA  0800               	sublw	0
  3036  0009AC  2425               	addwf	fillCircleHelper@y0,w,c
  3037  0009AE  6E18               	movwf	drawFastVLine@y,c
  3038  0009B0  5037               	movf	fillCircleHelper@x,w,c
  3039  0009B2  2437               	addwf	fillCircleHelper@x,w,c
  3040  0009B4  242B               	addwf	fillCircleHelper@delta,w,c
  3041  0009B6  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3042  0009B8  282F               	incf	??_fillCircleHelper,w,c
  3043  0009BA  6E19               	movwf	drawFastVLine@h,c
  3044  0009BC  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3045  0009C0  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3046  0009C4  5023               	movf	fillCircleHelper@x0,w,c
  3047  0009C6  2439               	addwf	fillCircleHelper@y,w,c
  3048  0009C8  EC70  F007         	call	_drawFastVLine
  3049  0009CC  D000               	goto	l3732
  3050  0009CE                     l3732:
  3051                           
  3052                           ;ST7735_TFT.c: 553: }
  3053                           ;ST7735_TFT.c: 554: if (cornername & 0x2) {
  3054  0009CE  A229               	btfss	fillCircleHelper@cornername,1,c
  3055  0009D0  D027               	goto	l3736
  3056                           
  3057                           ;ST7735_TFT.c: 555: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3058  0009D2  5039               	movf	fillCircleHelper@y,w,c
  3059  0009D4  0800               	sublw	0
  3060  0009D6  2425               	addwf	fillCircleHelper@y0,w,c
  3061  0009D8  6E18               	movwf	drawFastVLine@y,c
  3062  0009DA  5039               	movf	fillCircleHelper@y,w,c
  3063  0009DC  2439               	addwf	fillCircleHelper@y,w,c
  3064  0009DE  242B               	addwf	fillCircleHelper@delta,w,c
  3065  0009E0  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3066  0009E2  282F               	incf	??_fillCircleHelper,w,c
  3067  0009E4  6E19               	movwf	drawFastVLine@h,c
  3068  0009E6  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3069  0009EA  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3070  0009EE  5037               	movf	fillCircleHelper@x,w,c
  3071  0009F0  0800               	sublw	0
  3072  0009F2  2423               	addwf	fillCircleHelper@x0,w,c
  3073  0009F4  EC70  F007         	call	_drawFastVLine
  3074                           
  3075                           ;ST7735_TFT.c: 556: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3076  0009F8  5037               	movf	fillCircleHelper@x,w,c
  3077  0009FA  0800               	sublw	0
  3078  0009FC  2425               	addwf	fillCircleHelper@y0,w,c
  3079  0009FE  6E18               	movwf	drawFastVLine@y,c
  3080  000A00  5037               	movf	fillCircleHelper@x,w,c
  3081  000A02  2437               	addwf	fillCircleHelper@x,w,c
  3082  000A04  242B               	addwf	fillCircleHelper@delta,w,c
  3083  000A06  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3084  000A08  282F               	incf	??_fillCircleHelper,w,c
  3085  000A0A  6E19               	movwf	drawFastVLine@h,c
  3086  000A0C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3087  000A10  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3088  000A14  5039               	movf	fillCircleHelper@y,w,c
  3089  000A16  0800               	sublw	0
  3090  000A18  2423               	addwf	fillCircleHelper@x0,w,c
  3091  000A1A  EC70  F007         	call	_drawFastVLine
  3092  000A1E  D000               	goto	l3736
  3093  000A20                     l3736:
  3094  000A20  5039               	movf	fillCircleHelper@y,w,c
  3095  000A22  5C37               	subwf	fillCircleHelper@x,w,c
  3096  000A24  5038               	movf	fillCircleHelper@x+1,w,c
  3097  000A26  0A80               	xorlw	128
  3098  000A28  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3099  000A2A  503A               	movf	fillCircleHelper@y+1,w,c
  3100  000A2C  0A80               	xorlw	128
  3101  000A2E  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3102  000A30  A0D8               	btfss	status,0,c
  3103  000A32  D78F               	goto	l3716
  3104  000A34  0012               	return		;funcret
  3105  000A36                     __end_of_fillCircleHelper:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           intcon2	equ	0xFF1
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           postdec1	equ	0xFE5
  3117                           fsr1l	equ	0xFE1
  3118                           postinc2	equ	0xFDE
  3119                           postdec2	equ	0xFDD
  3120                           fsr2h	equ	0xFDA
  3121                           fsr2l	equ	0xFD9
  3122                           status	equ	0xFD8
  3123                           
  3124 ;; *************** function _drawCircle *****************
  3125 ;; Defined at:
  3126 ;;		line 475 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  x0              2   27[COMRAM] int 
  3129 ;;  y0              2   29[COMRAM] int 
  3130 ;;  r               2   31[COMRAM] int 
  3131 ;;  color           2   33[COMRAM] unsigned int 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  y               2   45[COMRAM] int 
  3134 ;;  x               2   43[COMRAM] int 
  3135 ;;  f               2   41[COMRAM] int 
  3136 ;;  ddF_y           2   39[COMRAM] int 
  3137 ;;  ddF_x           2   37[COMRAM] int 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;		None               void
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3147 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;Total ram usage:       20 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    7
  3154 ;; This function calls:
  3155 ;;		_drawPixel
  3156 ;; This function is called by:
  3157 ;;		_main
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text7
  3162  00048C                     __ptext7:
  3163                           	opt stack 0
  3164  00048C                     _drawCircle:
  3165                           	opt stack 23
  3166                           
  3167                           ;ST7735_TFT.c: 477: signed int f, ddF_x, ddF_y, x, y;
  3168                           ;ST7735_TFT.c: 478: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3169                           
  3170                           ;incstack = 0
  3171  00048C  C020  F024         	movff	drawCircle@r,??_drawCircle
  3172  000490  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3173  000494  1E24               	comf	??_drawCircle,f,c
  3174  000496  1E25               	comf	??_drawCircle+1,f,c
  3175  000498  4A24               	infsnz	??_drawCircle,f,c
  3176  00049A  2A25               	incf	??_drawCircle+1,f,c
  3177  00049C  0E01               	movlw	1
  3178  00049E  2424               	addwf	??_drawCircle,w,c
  3179  0004A0  6E2A               	movwf	drawCircle@f,c
  3180  0004A2  0E00               	movlw	0
  3181  0004A4  2025               	addwfc	??_drawCircle+1,w,c
  3182  0004A6  6E2B               	movwf	drawCircle@f+1,c
  3183  0004A8  0E00               	movlw	0
  3184  0004AA  6E27               	movwf	drawCircle@ddF_x+1,c
  3185  0004AC  0E01               	movlw	1
  3186  0004AE  6E26               	movwf	drawCircle@ddF_x,c
  3187  0004B0  C020  F024         	movff	drawCircle@r,??_drawCircle
  3188  0004B4  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3189  0004B8  90D8               	bcf	status,0,c
  3190  0004BA  3624               	rlcf	??_drawCircle,f,c
  3191  0004BC  3625               	rlcf	??_drawCircle+1,f,c
  3192  0004BE  1E24               	comf	??_drawCircle,f,c
  3193  0004C0  1E25               	comf	??_drawCircle+1,f,c
  3194  0004C2  4A24               	infsnz	??_drawCircle,f,c
  3195  0004C4  2A25               	incf	??_drawCircle+1,f,c
  3196  0004C6  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3197  0004CA  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3198  0004CE  0E00               	movlw	0
  3199  0004D0  6E2D               	movwf	drawCircle@x+1,c
  3200  0004D2  0E00               	movlw	0
  3201  0004D4  6E2C               	movwf	drawCircle@x,c
  3202  0004D6  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3203  0004DA  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3204                           
  3205                           ;ST7735_TFT.c: 479: drawPixel(x0 , y0 + r, color);
  3206  0004DE  501E               	movf	drawCircle@y0,w,c
  3207  0004E0  2420               	addwf	drawCircle@r,w,c
  3208  0004E2  6E18               	movwf	drawPixel@y,c
  3209  0004E4  C022  F019         	movff	drawCircle@color,drawPixel@color
  3210  0004E8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3211  0004EC  501C               	movf	drawCircle@x0,w,c
  3212  0004EE  ECE2  F009         	call	_drawPixel
  3213                           
  3214                           ;ST7735_TFT.c: 480: drawPixel(x0 , y0 - r, color);
  3215  0004F2  5020               	movf	drawCircle@r,w,c
  3216  0004F4  0800               	sublw	0
  3217  0004F6  241E               	addwf	drawCircle@y0,w,c
  3218  0004F8  6E18               	movwf	drawPixel@y,c
  3219  0004FA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3220  0004FE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3221  000502  501C               	movf	drawCircle@x0,w,c
  3222  000504  ECE2  F009         	call	_drawPixel
  3223                           
  3224                           ;ST7735_TFT.c: 481: drawPixel(x0+r, y0 , color);
  3225  000508  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3226  00050C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3227  000510  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3228  000514  501C               	movf	drawCircle@x0,w,c
  3229  000516  2420               	addwf	drawCircle@r,w,c
  3230  000518  ECE2  F009         	call	_drawPixel
  3231                           
  3232                           ;ST7735_TFT.c: 482: drawPixel(x0-r, y0 , color);
  3233  00051C  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3234  000520  C022  F019         	movff	drawCircle@color,drawPixel@color
  3235  000524  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3236  000528  5020               	movf	drawCircle@r,w,c
  3237  00052A  0800               	sublw	0
  3238  00052C  241C               	addwf	drawCircle@x0,w,c
  3239  00052E  ECE2  F009         	call	_drawPixel
  3240                           
  3241                           ;ST7735_TFT.c: 483: while (x < y) {
  3242  000532  D078               	goto	l4004
  3243  000534                     l3976:
  3244                           
  3245                           ;ST7735_TFT.c: 484: if (f >= 0) {
  3246  000534  BE2B               	btfsc	drawCircle@f+1,7,c
  3247  000536  D00B               	goto	l331
  3248                           
  3249                           ;ST7735_TFT.c: 485: y--;
  3250  000538  062E               	decf	drawCircle@y,f,c
  3251  00053A  A0D8               	btfss	status,0,c
  3252  00053C  062F               	decf	drawCircle@y+1,f,c
  3253                           
  3254                           ;ST7735_TFT.c: 486: ddF_y += 2;
  3255  00053E  0E02               	movlw	2
  3256  000540  2628               	addwf	drawCircle@ddF_y,f,c
  3257  000542  0E00               	movlw	0
  3258  000544  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3259                           
  3260                           ;ST7735_TFT.c: 487: f += ddF_y;
  3261  000546  5028               	movf	drawCircle@ddF_y,w,c
  3262  000548  262A               	addwf	drawCircle@f,f,c
  3263  00054A  5029               	movf	drawCircle@ddF_y+1,w,c
  3264  00054C  222B               	addwfc	drawCircle@f+1,f,c
  3265  00054E                     l331:
  3266                           
  3267                           ;ST7735_TFT.c: 488: }
  3268                           ;ST7735_TFT.c: 489: x++;
  3269  00054E  4A2C               	infsnz	drawCircle@x,f,c
  3270  000550  2A2D               	incf	drawCircle@x+1,f,c
  3271                           
  3272                           ;ST7735_TFT.c: 490: ddF_x += 2;
  3273  000552  0E02               	movlw	2
  3274  000554  2626               	addwf	drawCircle@ddF_x,f,c
  3275  000556  0E00               	movlw	0
  3276  000558  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3277                           
  3278                           ;ST7735_TFT.c: 491: f += ddF_x;
  3279  00055A  5026               	movf	drawCircle@ddF_x,w,c
  3280  00055C  262A               	addwf	drawCircle@f,f,c
  3281  00055E  5027               	movf	drawCircle@ddF_x+1,w,c
  3282  000560  222B               	addwfc	drawCircle@f+1,f,c
  3283                           
  3284                           ;ST7735_TFT.c: 492: drawPixel(x0 + x, y0 + y, color);
  3285  000562  501E               	movf	drawCircle@y0,w,c
  3286  000564  242E               	addwf	drawCircle@y,w,c
  3287  000566  6E18               	movwf	drawPixel@y,c
  3288  000568  C022  F019         	movff	drawCircle@color,drawPixel@color
  3289  00056C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3290  000570  501C               	movf	drawCircle@x0,w,c
  3291  000572  242C               	addwf	drawCircle@x,w,c
  3292  000574  ECE2  F009         	call	_drawPixel
  3293                           
  3294                           ;ST7735_TFT.c: 493: drawPixel(x0 - x, y0 + y, color);
  3295  000578  501E               	movf	drawCircle@y0,w,c
  3296  00057A  242E               	addwf	drawCircle@y,w,c
  3297  00057C  6E18               	movwf	drawPixel@y,c
  3298  00057E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3299  000582  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3300  000586  502C               	movf	drawCircle@x,w,c
  3301  000588  0800               	sublw	0
  3302  00058A  241C               	addwf	drawCircle@x0,w,c
  3303  00058C  ECE2  F009         	call	_drawPixel
  3304                           
  3305                           ;ST7735_TFT.c: 494: drawPixel(x0 + x, y0 - y, color);
  3306  000590  502E               	movf	drawCircle@y,w,c
  3307  000592  0800               	sublw	0
  3308  000594  241E               	addwf	drawCircle@y0,w,c
  3309  000596  6E18               	movwf	drawPixel@y,c
  3310  000598  C022  F019         	movff	drawCircle@color,drawPixel@color
  3311  00059C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3312  0005A0  501C               	movf	drawCircle@x0,w,c
  3313  0005A2  242C               	addwf	drawCircle@x,w,c
  3314  0005A4  ECE2  F009         	call	_drawPixel
  3315                           
  3316                           ;ST7735_TFT.c: 495: drawPixel(x0 - x, y0 - y, color);
  3317  0005A8  502E               	movf	drawCircle@y,w,c
  3318  0005AA  0800               	sublw	0
  3319  0005AC  241E               	addwf	drawCircle@y0,w,c
  3320  0005AE  6E18               	movwf	drawPixel@y,c
  3321  0005B0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3322  0005B4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3323  0005B8  502C               	movf	drawCircle@x,w,c
  3324  0005BA  0800               	sublw	0
  3325  0005BC  241C               	addwf	drawCircle@x0,w,c
  3326  0005BE  ECE2  F009         	call	_drawPixel
  3327                           
  3328                           ;ST7735_TFT.c: 496: drawPixel(x0 + y, y0 + x, color);
  3329  0005C2  501E               	movf	drawCircle@y0,w,c
  3330  0005C4  242C               	addwf	drawCircle@x,w,c
  3331  0005C6  6E18               	movwf	drawPixel@y,c
  3332  0005C8  C022  F019         	movff	drawCircle@color,drawPixel@color
  3333  0005CC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3334  0005D0  501C               	movf	drawCircle@x0,w,c
  3335  0005D2  242E               	addwf	drawCircle@y,w,c
  3336  0005D4  ECE2  F009         	call	_drawPixel
  3337                           
  3338                           ;ST7735_TFT.c: 497: drawPixel(x0 - y, y0 + x, color);
  3339  0005D8  501E               	movf	drawCircle@y0,w,c
  3340  0005DA  242C               	addwf	drawCircle@x,w,c
  3341  0005DC  6E18               	movwf	drawPixel@y,c
  3342  0005DE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3343  0005E2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3344  0005E6  502E               	movf	drawCircle@y,w,c
  3345  0005E8  0800               	sublw	0
  3346  0005EA  241C               	addwf	drawCircle@x0,w,c
  3347  0005EC  ECE2  F009         	call	_drawPixel
  3348                           
  3349                           ;ST7735_TFT.c: 498: drawPixel(x0 + y, y0 - x, color);
  3350  0005F0  502C               	movf	drawCircle@x,w,c
  3351  0005F2  0800               	sublw	0
  3352  0005F4  241E               	addwf	drawCircle@y0,w,c
  3353  0005F6  6E18               	movwf	drawPixel@y,c
  3354  0005F8  C022  F019         	movff	drawCircle@color,drawPixel@color
  3355  0005FC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3356  000600  501C               	movf	drawCircle@x0,w,c
  3357  000602  242E               	addwf	drawCircle@y,w,c
  3358  000604  ECE2  F009         	call	_drawPixel
  3359                           
  3360                           ;ST7735_TFT.c: 499: drawPixel(x0 - y, y0 - x, color);
  3361  000608  502C               	movf	drawCircle@x,w,c
  3362  00060A  0800               	sublw	0
  3363  00060C  241E               	addwf	drawCircle@y0,w,c
  3364  00060E  6E18               	movwf	drawPixel@y,c
  3365  000610  C022  F019         	movff	drawCircle@color,drawPixel@color
  3366  000614  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3367  000618  502E               	movf	drawCircle@y,w,c
  3368  00061A  0800               	sublw	0
  3369  00061C  241C               	addwf	drawCircle@x0,w,c
  3370  00061E  ECE2  F009         	call	_drawPixel
  3371  000622  D000               	goto	l4004
  3372  000624                     l4004:
  3373  000624  502E               	movf	drawCircle@y,w,c
  3374  000626  5C2C               	subwf	drawCircle@x,w,c
  3375  000628  502D               	movf	drawCircle@x+1,w,c
  3376  00062A  0A80               	xorlw	128
  3377  00062C  6E24               	movwf	??_drawCircle& (0+255),c
  3378  00062E  502F               	movf	drawCircle@y+1,w,c
  3379  000630  0A80               	xorlw	128
  3380  000632  5824               	subwfb	??_drawCircle& (0+255),w,c
  3381  000634  A0D8               	btfss	status,0,c
  3382  000636  D77E               	goto	l3976
  3383  000638  0012               	return		;funcret
  3384  00063A                     __end_of_drawCircle:
  3385                           	opt stack 0
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           intcon2	equ	0xFF1
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postdec1	equ	0xFE5
  3396                           fsr1l	equ	0xFE1
  3397                           postinc2	equ	0xFDE
  3398                           postdec2	equ	0xFDD
  3399                           fsr2h	equ	0xFDA
  3400                           fsr2l	equ	0xFD9
  3401                           status	equ	0xFD8
  3402                           
  3403 ;; *************** function _Wait_One_Sec *****************
  3404 ;; Defined at:
  3405 ;;		line 38 in file "../Lab10_S3_Sample/utils.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;		None               void
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;Total ram usage:        0 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    4
  3426 ;; This function calls:
  3427 ;;		_Wait_Half_Second
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;;		_Do_Beep
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text8
  3435  001564                     __ptext8:
  3436                           	opt stack 0
  3437  001564                     _Wait_One_Sec:
  3438                           	opt stack 26
  3439                           
  3440                           ;utils.c: 40: Wait_Half_Second();
  3441                           
  3442                           ;incstack = 0
  3443  001564  EC56  F00A         	call	_Wait_Half_Second	;wreg free
  3444                           
  3445                           ;utils.c: 41: Wait_Half_Second();
  3446  001568  EC56  F00A         	call	_Wait_Half_Second	;wreg free
  3447  00156C  0012               	return		;funcret
  3448  00156E                     __end_of_Wait_One_Sec:
  3449                           	opt stack 0
  3450                           tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodh	equ	0xFF4
  3455                           prodl	equ	0xFF3
  3456                           intcon2	equ	0xFF1
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           fsr1l	equ	0xFE1
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _Wait_Half_Second *****************
  3468 ;; Defined at:
  3469 ;;		line 96 in file "../Lab10_S3_Sample/utils.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;		None               void
  3476 ;; Registers used:
  3477 ;;		wreg, status,2
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;Total ram usage:        0 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    3
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		_Wait_One_Sec
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text9
  3498  0014AC                     __ptext9:
  3499                           	opt stack 0
  3500  0014AC                     _Wait_Half_Second:
  3501                           	opt stack 26
  3502                           
  3503                           ;utils.c: 98: T0CON = 0x03;
  3504                           
  3505                           ;incstack = 0
  3506  0014AC  0E03               	movlw	3
  3507  0014AE  6ED5               	movwf	4053,c	;volatile
  3508                           
  3509                           ;utils.c: 99: TMR0L = 0xDB;
  3510  0014B0  0EDB               	movlw	219
  3511  0014B2  6ED6               	movwf	4054,c	;volatile
  3512                           
  3513                           ;utils.c: 100: TMR0H = 0x0B;
  3514  0014B4  0E0B               	movlw	11
  3515  0014B6  6ED7               	movwf	4055,c	;volatile
  3516                           
  3517                           ;utils.c: 101: INTCONbits.TMR0IF = 0;
  3518  0014B8  94F2               	bcf	intcon,2,c	;volatile
  3519                           
  3520                           ;utils.c: 102: T0CONbits.TMR0ON = 1;
  3521  0014BA  8ED5               	bsf	4053,7,c	;volatile
  3522                           
  3523                           ;utils.c: 103: while (INTCONbits.TMR0IF == 0);
  3524  0014BC  D000               	goto	l471
  3525  0014BE                     l471:
  3526  0014BE  A4F2               	btfss	intcon,2,c	;volatile
  3527  0014C0  D7FE               	goto	l471
  3528                           
  3529                           ;utils.c: 104: T0CONbits.TMR0ON = 0;
  3530  0014C2  9ED5               	bcf	4053,7,c	;volatile
  3531  0014C4  0012               	return		;funcret
  3532  0014C6                     __end_of_Wait_Half_Second:
  3533                           	opt stack 0
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           intcon2	equ	0xFF1
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           postdec1	equ	0xFE5
  3545                           fsr1l	equ	0xFE1
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _Initialize_LCD_Screen *****************
  3553 ;; Defined at:
  3554 ;;		line 22 in file "../Lab10_S3_Sample/Main_Screen.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;		None               void
  3561 ;; Registers used:
  3562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;Total ram usage:        0 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:   10
  3575 ;; This function calls:
  3576 ;;		_LCD_Reset
  3577 ;;		_TFT_GreenTab_Initialize
  3578 ;;		_drawtext
  3579 ;;		_fillScreen
  3580 ;;		_strcpy
  3581 ;; This function is called by:
  3582 ;;		_main
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text10
  3587  000E2C                     __ptext10:
  3588                           	opt stack 0
  3589  000E2C                     _Initialize_LCD_Screen:
  3590                           	opt stack 20
  3591                           
  3592                           ;Main_Screen.c: 24: LCD_Reset();
  3593                           
  3594                           ;incstack = 0
  3595  000E2C  EC83  F00A         	call	_LCD_Reset	;wreg free
  3596                           
  3597                           ;Main_Screen.c: 25: TFT_GreenTab_Initialize();
  3598  000E30  EC0F  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  3599                           
  3600                           ;Main_Screen.c: 26: fillScreen(0x0000);
  3601  000E34  0E00               	movlw	0
  3602  000E36  6E25               	movwf	fillScreen@color+1,c
  3603  000E38  0E00               	movlw	0
  3604  000E3A  6E24               	movwf	fillScreen@color,c
  3605  000E3C  EC48  F00A         	call	_fillScreen	;wreg free
  3606                           
  3607                           ;Main_Screen.c: 29: txt = buffer;
  3608  000E40  0EAA               	movlw	low _buffer
  3609  000E42  6E67               	movwf	_txt,c
  3610  000E44  0E00               	movlw	high _buffer
  3611  000E46  6E68               	movwf	_txt+1,c
  3612                           
  3613                           ;Main_Screen.c: 31: strcpy(txt, "LAB 10 ");
  3614  000E48  C067  F011         	movff	_txt,strcpy@to
  3615  000E4C  C068  F012         	movff	_txt+1,strcpy@to+1
  3616  000E50  0EF6               	movlw	low STR_3
  3617  000E52  6E13               	movwf	strcpy@from,c
  3618  000E54  0EFF               	movlw	high STR_3
  3619  000E56  6E14               	movwf	strcpy@from+1,c
  3620  000E58  ECC9  F009         	call	_strcpy	;wreg free
  3621                           
  3622                           ;Main_Screen.c: 32: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  3623  000E5C  0E02               	movlw	2
  3624  000E5E  0100               	movlb	0	; () banked
  3625  000E60  6FC9               	movwf	drawtext@y& (0+255),b
  3626  000E62  C067  F0CA         	movff	_txt,drawtext@_text
  3627  000E66  C068  F0CB         	movff	_txt+1,drawtext@_text+1
  3628  000E6A  0EFF               	movlw	255
  3629  000E6C  0100               	movlb	0	; () banked
  3630  000E6E  6FCD               	movwf	(drawtext@color+1)& (0+255),b
  3631  000E70  69CC               	setf	drawtext@color& (0+255),b
  3632  000E72  0E00               	movlw	0
  3633  000E74  0100               	movlb	0	; () banked
  3634  000E76  6FCF               	movwf	(drawtext@bg+1)& (0+255),b
  3635  000E78  0E00               	movlw	0
  3636  000E7A  6FCE               	movwf	drawtext@bg& (0+255),b
  3637  000E7C  0E01               	movlw	1
  3638  000E7E  0100               	movlb	0	; () banked
  3639  000E80  6FD0               	movwf	drawtext@size& (0+255),b
  3640  000E82  0E32               	movlw	50
  3641  000E84  EC1B  F005         	call	_drawtext
  3642                           
  3643                           ;Main_Screen.c: 34: if (1 == 0)
  3644  000E88  D004               	goto	l3866
  3645                           
  3646                           ;Main_Screen.c: 35: {
  3647                           ;Main_Screen.c: 36: Timing_Txt[0] = 'S';
  3648  000E8A  0E53               	movlw	83
  3649  000E8C  6E53               	movwf	_Timing_Txt,c
  3650                           
  3651                           ;Main_Screen.c: 37: Timing_Txt[1] = 'P';
  3652  000E8E  0E50               	movlw	80
  3653  000E90  D003               	goto	L1
  3654  000E92                     l3866:
  3655                           
  3656                           ;Main_Screen.c: 39: else
  3657                           ;Main_Screen.c: 40: {
  3658                           ;Main_Screen.c: 41: Timing_Txt[0] = 'F';
  3659  000E92  0E46               	movlw	70
  3660  000E94  6E53               	movwf	_Timing_Txt,c
  3661                           
  3662                           ;Main_Screen.c: 42: Timing_Txt[1] = 'A';
  3663  000E96  0E41               	movlw	65
  3664  000E98                     L1:
  3665  000E98  6E54               	movwf	_Timing_Txt+1,c
  3666                           
  3667                           ;Main_Screen.c: 43: }
  3668                           ;Main_Screen.c: 44: Timing_Txt[2] = 24/10 + '0';
  3669  000E9A  0E32               	movlw	50
  3670  000E9C  6E55               	movwf	_Timing_Txt+2,c
  3671                           
  3672                           ;Main_Screen.c: 45: Timing_Txt[3] = 24%10 + '0';
  3673  000E9E  0E34               	movlw	52
  3674  000EA0  6E56               	movwf	_Timing_Txt+3,c
  3675                           
  3676                           ;Main_Screen.c: 46: Timing_Txt[5] = 3%10 + '0';
  3677  000EA2  0E33               	movlw	51
  3678  000EA4  6E58               	movwf	_Timing_Txt+5,c
  3679                           
  3680                           ;Main_Screen.c: 47: Timing_Txt[7] = 13/10 + '0';
  3681  000EA6  0E31               	movlw	49
  3682  000EA8  6E5A               	movwf	_Timing_Txt+7,c
  3683                           
  3684                           ;Main_Screen.c: 48: Timing_Txt[8] = 13%10 + '0';
  3685  000EAA  0E33               	movlw	51
  3686  000EAC  6E5B               	movwf	_Timing_Txt+8,c
  3687                           
  3688                           ;Main_Screen.c: 49: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  3689  000EAE  0E96               	movlw	150
  3690  000EB0  0100               	movlb	0	; () banked
  3691  000EB2  6FC9               	movwf	drawtext@y& (0+255),b
  3692  000EB4  0E53               	movlw	low _Timing_Txt
  3693  000EB6  0100               	movlb	0	; () banked
  3694  000EB8  6FCA               	movwf	drawtext@_text& (0+255),b
  3695  000EBA  0E00               	movlw	high _Timing_Txt
  3696  000EBC  0100               	movlb	0	; () banked
  3697  000EBE  6FCB               	movwf	(drawtext@_text+1)& (0+255),b
  3698  000EC0  0EFF               	movlw	255
  3699  000EC2  0100               	movlb	0	; () banked
  3700  000EC4  6FCD               	movwf	(drawtext@color+1)& (0+255),b
  3701  000EC6  69CC               	setf	drawtext@color& (0+255),b
  3702  000EC8  0E00               	movlw	0
  3703  000ECA  0100               	movlb	0	; () banked
  3704  000ECC  6FCF               	movwf	(drawtext@bg+1)& (0+255),b
  3705  000ECE  0E00               	movlw	0
  3706  000ED0  6FCE               	movwf	drawtext@bg& (0+255),b
  3707  000ED2  0E01               	movlw	1
  3708  000ED4  0100               	movlb	0	; () banked
  3709  000ED6  6FD0               	movwf	drawtext@size& (0+255),b
  3710  000ED8  0E01               	movlw	1
  3711  000EDA  EC1B  F005         	call	_drawtext
  3712  000EDE  0012               	return		;funcret
  3713  000EE0                     __end_of_Initialize_LCD_Screen:
  3714                           	opt stack 0
  3715                           tblptru	equ	0xFF8
  3716                           tblptrh	equ	0xFF7
  3717                           tblptrl	equ	0xFF6
  3718                           tablat	equ	0xFF5
  3719                           prodh	equ	0xFF4
  3720                           prodl	equ	0xFF3
  3721                           intcon	equ	0xFF2
  3722                           intcon2	equ	0xFF1
  3723                           postinc0	equ	0xFEE
  3724                           wreg	equ	0xFE8
  3725                           postdec1	equ	0xFE5
  3726                           fsr1l	equ	0xFE1
  3727                           postinc2	equ	0xFDE
  3728                           postdec2	equ	0xFDD
  3729                           fsr2h	equ	0xFDA
  3730                           fsr2l	equ	0xFD9
  3731                           status	equ	0xFD8
  3732                           
  3733 ;; *************** function _strcpy *****************
  3734 ;; Defined at:
  3735 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;  to              2   16[COMRAM] PTR unsigned char 
  3738 ;;		 -> NULL(0), buffer(31), 
  3739 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3740 ;;		 -> STR_3(8), 
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3743 ;;		 -> NULL(0), buffer(31), 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  2   16[COMRAM] PTR unsigned char 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;Total ram usage:        6 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    3
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_Initialize_LCD_Screen
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           	psect	text11
  3768  001392                     __ptext11:
  3769                           	opt stack 0
  3770  001392                     _strcpy:
  3771                           	opt stack 26
  3772                           
  3773                           ;incstack = 0
  3774  001392  C011  F015         	movff	strcpy@to,strcpy@cp
  3775  001396  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3776  00139A  D005               	goto	l3704
  3777  00139C                     l3702:
  3778  00139C  4A15               	infsnz	strcpy@cp,f,c
  3779  00139E  2A16               	incf	strcpy@cp+1,f,c
  3780  0013A0  4A13               	infsnz	strcpy@from,f,c
  3781  0013A2  2A14               	incf	strcpy@from+1,f,c
  3782  0013A4  D000               	goto	l3704
  3783  0013A6                     l3704:
  3784  0013A6  C013  FFF6         	movff	strcpy@from,tblptrl
  3785  0013AA  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3786  0013AE                     	if	0	;tblptru may be non-zero
  3787  0013AE                     	endif
  3788  0013AE                     	if	0	;tblptru may be non-zero
  3789  0013AE                     	endif
  3790  0013AE  C015  FFD9         	movff	strcpy@cp,fsr2l
  3791  0013B2  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3792  0013B6  0008               	tblrd		*
  3793  0013B8  CFF5 FFDF          	movff	tablat,indf2
  3794  0013BC  50DF               	movf	indf2,w,c
  3795  0013BE  A4D8               	btfss	status,2,c
  3796  0013C0  D7ED               	goto	l3702
  3797                           
  3798                           ;	Return value of _strcpy is never used
  3799  0013C2  0012               	return		;funcret
  3800  0013C4                     __end_of_strcpy:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           intcon	equ	0xFF2
  3809                           intcon2	equ	0xFF1
  3810                           postinc0	equ	0xFEE
  3811                           wreg	equ	0xFE8
  3812                           postdec1	equ	0xFE5
  3813                           fsr1l	equ	0xFE1
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821 ;; *************** function _fillScreen *****************
  3822 ;; Defined at:
  3823 ;;		line 566 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  color           2   35[COMRAM] unsigned int 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;		None
  3828 ;; Return value:  Size  Location     Type
  3829 ;;		None               void
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0, cstack
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3837 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;Total ram usage:        2 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    7
  3844 ;; This function calls:
  3845 ;;		_fillRectangle
  3846 ;; This function is called by:
  3847 ;;		_Initialize_LCD_Screen
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text12
  3852  001490                     __ptext12:
  3853                           	opt stack 0
  3854  001490                     _fillScreen:
  3855                           	opt stack 22
  3856                           
  3857                           ;ST7735_TFT.c: 568: fillRectangle(0, 0, 128, 160, color);
  3858                           
  3859                           ;incstack = 0
  3860  001490  0E00               	movlw	0
  3861  001492  6E18               	movwf	fillRectangle@y,c
  3862  001494  0E80               	movlw	128
  3863  001496  6E19               	movwf	fillRectangle@w,c
  3864  001498  0EA0               	movlw	160
  3865  00149A  6E1A               	movwf	fillRectangle@h,c
  3866  00149C  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  3867  0014A0  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  3868  0014A4  0E00               	movlw	0
  3869  0014A6  ECA8  F006         	call	_fillRectangle
  3870  0014AA  0012               	return		;funcret
  3871  0014AC                     __end_of_fillScreen:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           prodh	equ	0xFF4
  3878                           prodl	equ	0xFF3
  3879                           intcon	equ	0xFF2
  3880                           intcon2	equ	0xFF1
  3881                           postinc0	equ	0xFEE
  3882                           wreg	equ	0xFE8
  3883                           postdec1	equ	0xFE5
  3884                           fsr1l	equ	0xFE1
  3885                           indf2	equ	0xFDF
  3886                           postinc2	equ	0xFDE
  3887                           postdec2	equ	0xFDD
  3888                           fsr2h	equ	0xFDA
  3889                           fsr2l	equ	0xFD9
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function _fillRectangle *****************
  3893 ;; Defined at:
  3894 ;;		line 450 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;  x               1    wreg     unsigned char 
  3897 ;;  y               1   23[COMRAM] unsigned char 
  3898 ;;  w               1   24[COMRAM] unsigned char 
  3899 ;;  h               1   25[COMRAM] unsigned char 
  3900 ;;  color           2   26[COMRAM] unsigned int 
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;  x               1   34[COMRAM] unsigned char 
  3903 ;;  lo              1   33[COMRAM] unsigned char 
  3904 ;;  hi              1   32[COMRAM] unsigned char 
  3905 ;; Return value:  Size  Location     Type
  3906 ;;		None               void
  3907 ;; Registers used:
  3908 ;;		wreg, status,2, status,0, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3914 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;Total ram usage:       12 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    6
  3921 ;; This function calls:
  3922 ;;		_setAddrWindow
  3923 ;;		_spiwrite
  3924 ;; This function is called by:
  3925 ;;		_fillScreen
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text13
  3930  000D50                     __ptext13:
  3931                           	opt stack 0
  3932  000D50                     _fillRectangle:
  3933                           	opt stack 22
  3934                           
  3935                           ;incstack = 0
  3936                           ;fillRectangle@x stored from wreg
  3937  000D50  6E23               	movwf	fillRectangle@x,c
  3938                           
  3939                           ;ST7735_TFT.c: 452: unsigned char hi, lo;
  3940                           ;ST7735_TFT.c: 453: if((x >= 128) || (y >= 160))
  3941  000D52  0E80               	movlw	128
  3942  000D54  6023               	cpfslt	fillRectangle@x,c
  3943  000D56  D069               	goto	l320
  3944  000D58  0E9F               	movlw	159
  3945  000D5A  6418               	cpfsgt	fillRectangle@y,c
  3946  000D5C  D001               	goto	l3604
  3947                           
  3948                           ;ST7735_TFT.c: 454: return;
  3949  000D5E  D065               	goto	l320
  3950  000D60                     l3604:
  3951                           
  3952                           ;ST7735_TFT.c: 455: if((x + w - 1) >= 128)
  3953  000D60  0EFF               	movlw	255
  3954  000D62  6E1D               	movwf	??_fillRectangle& (0+255),c
  3955  000D64  0EFF               	movlw	255
  3956  000D66  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3957  000D68  5019               	movf	fillRectangle@w,w,c
  3958  000D6A  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  3959  000D6E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3960  000D70  261F               	addwf	??_fillRectangle+2,f,c
  3961  000D72  0E00               	movlw	0
  3962  000D74  2220               	addwfc	??_fillRectangle+3,f,c
  3963  000D76  501D               	movf	??_fillRectangle,w,c
  3964  000D78  261F               	addwf	??_fillRectangle+2,f,c
  3965  000D7A  501E               	movf	??_fillRectangle+1,w,c
  3966  000D7C  2220               	addwfc	??_fillRectangle+3,f,c
  3967  000D7E  BE20               	btfsc	??_fillRectangle+3,7,c
  3968  000D80  D00A               	goto	l321
  3969  000D82  5020               	movf	??_fillRectangle+3,w,c
  3970  000D84  E104               	bnz	u2470
  3971  000D86  0E80               	movlw	128
  3972  000D88  5C1F               	subwf	??_fillRectangle+2,w,c
  3973  000D8A  A0D8               	btfss	status,0,c
  3974  000D8C  D004               	goto	l321
  3975  000D8E                     u2470:
  3976                           
  3977                           ;ST7735_TFT.c: 456: w = 128 - x;
  3978  000D8E  5023               	movf	fillRectangle@x,w,c
  3979  000D90  0800               	sublw	0
  3980  000D92  0F80               	addlw	128
  3981  000D94  6E19               	movwf	fillRectangle@w,c
  3982  000D96                     l321:
  3983                           
  3984                           ;ST7735_TFT.c: 457: if((y + h - 1) >= 160)
  3985  000D96  0EFF               	movlw	255
  3986  000D98  6E1D               	movwf	??_fillRectangle& (0+255),c
  3987  000D9A  0EFF               	movlw	255
  3988  000D9C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3989  000D9E  501A               	movf	fillRectangle@h,w,c
  3990  000DA0  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  3991  000DA4  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3992  000DA6  261F               	addwf	??_fillRectangle+2,f,c
  3993  000DA8  0E00               	movlw	0
  3994  000DAA  2220               	addwfc	??_fillRectangle+3,f,c
  3995  000DAC  501D               	movf	??_fillRectangle,w,c
  3996  000DAE  261F               	addwf	??_fillRectangle+2,f,c
  3997  000DB0  501E               	movf	??_fillRectangle+1,w,c
  3998  000DB2  2220               	addwfc	??_fillRectangle+3,f,c
  3999  000DB4  BE20               	btfsc	??_fillRectangle+3,7,c
  4000  000DB6  D00B               	goto	l3610
  4001  000DB8  5020               	movf	??_fillRectangle+3,w,c
  4002  000DBA  E104               	bnz	u2480
  4003  000DBC  0EA0               	movlw	160
  4004  000DBE  5C1F               	subwf	??_fillRectangle+2,w,c
  4005  000DC0  A0D8               	btfss	status,0,c
  4006  000DC2  D005               	goto	l3610
  4007  000DC4                     u2480:
  4008                           
  4009                           ;ST7735_TFT.c: 458: h = 160 - y;
  4010  000DC4  5018               	movf	fillRectangle@y,w,c
  4011  000DC6  0800               	sublw	0
  4012  000DC8  0FA0               	addlw	160
  4013  000DCA  6E1A               	movwf	fillRectangle@h,c
  4014  000DCC  D000               	goto	l3610
  4015  000DCE                     l3610:
  4016                           
  4017                           ;ST7735_TFT.c: 459: setAddrWindow(x, y, x+w-1, y+h-1);
  4018  000DCE  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4019  000DD2  5023               	movf	fillRectangle@x,w,c
  4020  000DD4  2419               	addwf	fillRectangle@w,w,c
  4021  000DD6  6E1D               	movwf	??_fillRectangle& (0+255),c
  4022  000DD8  041D               	decf	??_fillRectangle,w,c
  4023  000DDA  6E15               	movwf	setAddrWindow@x1,c
  4024  000DDC  5018               	movf	fillRectangle@y,w,c
  4025  000DDE  241A               	addwf	fillRectangle@h,w,c
  4026  000DE0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4027  000DE2  041E               	decf	??_fillRectangle+1,w,c
  4028  000DE4  6E16               	movwf	setAddrWindow@y1,c
  4029  000DE6  5023               	movf	fillRectangle@x,w,c
  4030  000DE8  EC19  F009         	call	_setAddrWindow
  4031                           
  4032                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  4033  000DEC  501C               	movf	fillRectangle@color+1,w,c
  4034  000DEE  6E21               	movwf	fillRectangle@hi,c
  4035  000DF0  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4036                           
  4037                           ;ST7735_TFT.c: 461: PORTCbits.RC2 = 1;
  4038  000DF4  8482               	bsf	3970,2,c	;volatile
  4039                           
  4040                           ;ST7735_TFT.c: 462: PORTCbits.RC4 = 0;
  4041  000DF6  9882               	bcf	3970,4,c	;volatile
  4042                           
  4043                           ;ST7735_TFT.c: 464: for(y=h; y>0; y--) {
  4044  000DF8  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4045  000DFC                     l3622:
  4046  000DFC  5018               	movf	fillRectangle@y,w,c
  4047  000DFE  B4D8               	btfsc	status,2,c
  4048  000E00  D013               	goto	l324
  4049  000E02  D001               	goto	l323
  4050  000E04  D011               	goto	l324
  4051  000E06                     l323:
  4052                           
  4053                           ;ST7735_TFT.c: 465: for(x = w; x > 0; x--) {
  4054  000E06  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4055  000E0A                     l3626:
  4056  000E0A  5023               	movf	fillRectangle@x,w,c
  4057  000E0C  B4D8               	btfsc	status,2,c
  4058  000E0E  D00A               	goto	l3636
  4059  000E10  D001               	goto	l3630
  4060  000E12  D008               	goto	l3636
  4061  000E14                     l3630:
  4062                           
  4063                           ;ST7735_TFT.c: 466: spiwrite(hi);
  4064  000E14  5021               	movf	fillRectangle@hi,w,c
  4065  000E16  EC6F  F00A         	call	_spiwrite
  4066                           
  4067                           ;ST7735_TFT.c: 467: spiwrite(lo);
  4068  000E1A  5022               	movf	fillRectangle@lo,w,c
  4069  000E1C  EC6F  F00A         	call	_spiwrite
  4070  000E20  0623               	decf	fillRectangle@x,f,c
  4071  000E22  D7F3               	goto	l3626
  4072  000E24                     l3636:
  4073  000E24  0618               	decf	fillRectangle@y,f,c
  4074  000E26  D7EA               	goto	l3622
  4075  000E28                     l324:
  4076                           
  4077                           ;ST7735_TFT.c: 468: }
  4078                           ;ST7735_TFT.c: 469: }
  4079                           ;ST7735_TFT.c: 470: PORTCbits.RC4 = 1;
  4080  000E28  8882               	bsf	3970,4,c	;volatile
  4081  000E2A                     l320:
  4082  000E2A  0012               	return		;funcret
  4083  000E2C                     __end_of_fillRectangle:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           intcon	equ	0xFF2
  4092                           intcon2	equ	0xFF1
  4093                           postinc0	equ	0xFEE
  4094                           wreg	equ	0xFE8
  4095                           postdec1	equ	0xFE5
  4096                           fsr1l	equ	0xFE1
  4097                           indf2	equ	0xFDF
  4098                           postinc2	equ	0xFDE
  4099                           postdec2	equ	0xFDD
  4100                           fsr2h	equ	0xFDA
  4101                           fsr2l	equ	0xFD9
  4102                           status	equ	0xFD8
  4103                           
  4104 ;; *************** function _drawtext *****************
  4105 ;; Defined at:
  4106 ;;		line 421 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  x               1    wreg     unsigned char 
  4109 ;;  y               1    0[BANK0 ] unsigned char 
  4110 ;;  _text           2    1[BANK0 ] PTR unsigned char 
  4111 ;;		 -> NULL(0), Timing_Txt(10), buffer(31), txt1(84), 
  4112 ;;  color           2    3[BANK0 ] unsigned int 
  4113 ;;  bg              2    5[BANK0 ] unsigned int 
  4114 ;;  size            1    7[BANK0 ] unsigned char 
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  x               1    8[BANK0 ] unsigned char 
  4117 ;;  i               2   11[BANK0 ] unsigned int 
  4118 ;;  textsize        2    9[BANK0 ] unsigned int 
  4119 ;;  cursor_x        1   14[BANK0 ] unsigned char 
  4120 ;;  cursor_y        1   13[BANK0 ] unsigned char 
  4121 ;; Return value:  Size  Location     Type
  4122 ;;		None               void
  4123 ;; Registers used:
  4124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4130 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;Total ram usage:       17 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    9
  4137 ;; This function calls:
  4138 ;;		_drawChar
  4139 ;;		_strlen
  4140 ;; This function is called by:
  4141 ;;		_main
  4142 ;;		_Initialize_LCD_Screen
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text14
  4147  000A36                     __ptext14:
  4148                           	opt stack 0
  4149  000A36                     _drawtext:
  4150                           	opt stack 21
  4151                           
  4152                           ;incstack = 0
  4153                           ;drawtext@x stored from wreg
  4154  000A36  0100               	movlb	0	; () banked
  4155  000A38  6FD1               	movwf	drawtext@x& (0+255),b
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;ST7735_TFT.c: 423: unsigned char cursor_x, cursor_y;
  4159                           ;ST7735_TFT.c: 424: unsigned int textsize, i;
  4160                           ;ST7735_TFT.c: 425: cursor_x = x, cursor_y = y;
  4161  000A3A  C0D1  F0D7         	movff	drawtext@x,drawtext@cursor_x
  4162                           
  4163                           ; BSR set to: 0
  4164  000A3E  C0C9  F0D6         	movff	drawtext@y,drawtext@cursor_y
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;ST7735_TFT.c: 426: textsize = strlen(_text);
  4168  000A42  C0CA  F011         	movff	drawtext@_text,strlen@s
  4169  000A46  C0CB  F012         	movff	drawtext@_text+1,strlen@s+1
  4170  000A4A  EC8B  F009         	call	_strlen	;wreg free
  4171  000A4E  C011  F0D2         	movff	?_strlen,drawtext@textsize
  4172  000A52  C012  F0D3         	movff	?_strlen+1,drawtext@textsize+1
  4173                           
  4174                           ;ST7735_TFT.c: 427: for(i = 0; i < textsize; i++){
  4175  000A56  0E00               	movlw	0
  4176  000A58  0100               	movlb	0	; () banked
  4177  000A5A  6FD5               	movwf	(drawtext@i+1)& (0+255),b
  4178  000A5C  0E00               	movlw	0
  4179  000A5E  6FD4               	movwf	drawtext@i& (0+255),b
  4180  000A60  D06B               	goto	l3674
  4181  000A62                     l3648:
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;ST7735_TFT.c: 428: if(wrap && ((cursor_x + size * 5) > 128)){
  4185  000A62  5052               	movf	_wrap,w,c
  4186  000A64  B4D8               	btfsc	status,2,c
  4187  000A66  D038               	goto	l3664
  4188                           
  4189                           ; BSR set to: 0
  4190  000A68  0100               	movlb	0	; () banked
  4191  000A6A  51D0               	movf	drawtext@size& (0+255),w,b
  4192  000A6C  0D05               	mullw	5
  4193  000A6E  0100               	movlb	0	; () banked
  4194  000A70  51D7               	movf	drawtext@cursor_x& (0+255),w,b
  4195  000A72  6E39               	movwf	??_drawtext& (0+255),c
  4196  000A74  6A3A               	clrf	(??_drawtext+1)& (0+255),c
  4197  000A76  50F3               	movf	prodl,w,c
  4198  000A78  2639               	addwf	??_drawtext,f,c
  4199  000A7A  50F4               	movf	prodh,w,c
  4200  000A7C  223A               	addwfc	??_drawtext+1,f,c
  4201  000A7E  BE3A               	btfsc	??_drawtext+1,7,c
  4202  000A80  D02B               	goto	l3664
  4203  000A82  503A               	movf	??_drawtext+1,w,c
  4204  000A84  E104               	bnz	u2540
  4205  000A86  0E81               	movlw	129
  4206  000A88  5C39               	subwf	??_drawtext,w,c
  4207  000A8A  A0D8               	btfss	status,0,c
  4208  000A8C  D025               	goto	l3664
  4209  000A8E                     u2540:
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;ST7735_TFT.c: 429: cursor_x = 0;
  4213  000A8E  0E00               	movlw	0
  4214  000A90  0100               	movlb	0	; () banked
  4215  000A92  6FD7               	movwf	drawtext@cursor_x& (0+255),b
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;ST7735_TFT.c: 430: cursor_y = cursor_y + size * 7 + 3 ;
  4219  000A94  0100               	movlb	0	; () banked
  4220  000A96  51D0               	movf	drawtext@size& (0+255),w,b
  4221  000A98  0D07               	mullw	7
  4222  000A9A  50F3               	movf	prodl,w,c
  4223  000A9C  0100               	movlb	0	; () banked
  4224  000A9E  25D6               	addwf	drawtext@cursor_y& (0+255),w,b
  4225  000AA0  0F03               	addlw	3
  4226  000AA2  0100               	movlb	0	; () banked
  4227  000AA4  6FD6               	movwf	drawtext@cursor_y& (0+255),b
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;ST7735_TFT.c: 431: if(cursor_y > 160) cursor_y = 160;
  4231  000AA6  0EA0               	movlw	160
  4232  000AA8  0100               	movlb	0	; () banked
  4233  000AAA  65D6               	cpfsgt	drawtext@cursor_y& (0+255),b
  4234  000AAC  D004               	goto	l3660
  4235                           
  4236                           ; BSR set to: 0
  4237  000AAE  0EA0               	movlw	160
  4238  000AB0  0100               	movlb	0	; () banked
  4239  000AB2  6FD6               	movwf	drawtext@cursor_y& (0+255),b
  4240  000AB4  D000               	goto	l3660
  4241  000AB6                     l3660:
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;ST7735_TFT.c: 432: if(_text[i] == 0x20) goto _skip; }
  4245  000AB6  0100               	movlb	0	; () banked
  4246  000AB8  51D4               	movf	drawtext@i& (0+255),w,b
  4247  000ABA  0100               	movlb	0	; () banked
  4248  000ABC  25CA               	addwf	drawtext@_text& (0+255),w,b
  4249  000ABE  6ED9               	movwf	fsr2l,c
  4250  000AC0  0100               	movlb	0	; () banked
  4251  000AC2  51D5               	movf	(drawtext@i+1)& (0+255),w,b
  4252  000AC4  0100               	movlb	0	; () banked
  4253  000AC6  21CB               	addwfc	(drawtext@_text+1)& (0+255),w,b
  4254  000AC8  6EDA               	movwf	fsr2h,c
  4255  000ACA  0E20               	movlw	32
  4256  000ACC  18DE               	xorwf	postinc2,w,c
  4257  000ACE  B4D8               	btfsc	status,2,c
  4258  000AD0  D02F               	goto	l3672
  4259  000AD2  D002               	goto	l3664
  4260                           
  4261                           ; BSR set to: 0
  4262  000AD4  D02D               	goto	l3672
  4263                           
  4264                           ; BSR set to: 0
  4265  000AD6  D000               	goto	l3664
  4266  000AD8                     l3664:
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;ST7735_TFT.c: 433: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4270  000AD8  C0D6  F02E         	movff	drawtext@cursor_y,drawChar@y
  4271  000ADC  0100               	movlb	0	; () banked
  4272  000ADE  51D4               	movf	drawtext@i& (0+255),w,b
  4273  000AE0  0100               	movlb	0	; () banked
  4274  000AE2  25CA               	addwf	drawtext@_text& (0+255),w,b
  4275  000AE4  6ED9               	movwf	fsr2l,c
  4276  000AE6  0100               	movlb	0	; () banked
  4277  000AE8  51D5               	movf	(drawtext@i+1)& (0+255),w,b
  4278  000AEA  0100               	movlb	0	; () banked
  4279  000AEC  21CB               	addwfc	(drawtext@_text+1)& (0+255),w,b
  4280  000AEE  6EDA               	movwf	fsr2h,c
  4281  000AF0  50DF               	movf	indf2,w,c
  4282  000AF2  6E2F               	movwf	drawChar@c,c
  4283  000AF4  C0CC  F030         	movff	drawtext@color,drawChar@color
  4284  000AF8  C0CD  F031         	movff	drawtext@color+1,drawChar@color+1
  4285  000AFC  C0CE  F032         	movff	drawtext@bg,drawChar@bg
  4286  000B00  C0CF  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4287  000B04  C0D0  F034         	movff	drawtext@size,drawChar@size
  4288  000B08  0100               	movlb	0	; () banked
  4289  000B0A  51D7               	movf	drawtext@cursor_x& (0+255),w,b
  4290  000B0C  ECD4  F003         	call	_drawChar
  4291                           
  4292                           ;ST7735_TFT.c: 434: cursor_x = cursor_x + size * 6;
  4293  000B10  0100               	movlb	0	; () banked
  4294  000B12  51D0               	movf	drawtext@size& (0+255),w,b
  4295  000B14  0D06               	mullw	6
  4296  000B16  50F3               	movf	prodl,w,c
  4297  000B18  0100               	movlb	0	; () banked
  4298  000B1A  25D7               	addwf	drawtext@cursor_x& (0+255),w,b
  4299  000B1C  0100               	movlb	0	; () banked
  4300  000B1E  6FD7               	movwf	drawtext@cursor_x& (0+255),b
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;ST7735_TFT.c: 435: if(cursor_x > 128) cursor_x = 128;
  4304  000B20  0E80               	movlw	128
  4305  000B22  0100               	movlb	0	; () banked
  4306  000B24  65D7               	cpfsgt	drawtext@cursor_x& (0+255),b
  4307  000B26  D004               	goto	l3672
  4308                           
  4309                           ; BSR set to: 0
  4310  000B28  0E80               	movlw	128
  4311  000B2A  0100               	movlb	0	; () banked
  4312  000B2C  6FD7               	movwf	drawtext@cursor_x& (0+255),b
  4313                           
  4314                           ; BSR set to: 0
  4315  000B2E  D000               	goto	l3672
  4316  000B30                     l3672:
  4317                           
  4318                           ; BSR set to: 0
  4319  000B30  0100               	movlb	0	; () banked
  4320  000B32  4BD4               	infsnz	drawtext@i& (0+255),f,b
  4321  000B34  2BD5               	incf	(drawtext@i+1)& (0+255),f,b
  4322  000B36  D000               	goto	l3674
  4323  000B38                     l3674:
  4324                           
  4325                           ; BSR set to: 0
  4326  000B38  0100               	movlb	0	; () banked
  4327  000B3A  51D2               	movf	drawtext@textsize& (0+255),w,b
  4328  000B3C  0100               	movlb	0	; () banked
  4329  000B3E  5DD4               	subwf	drawtext@i& (0+255),w,b
  4330  000B40  0100               	movlb	0	; () banked
  4331  000B42  51D3               	movf	(drawtext@textsize+1)& (0+255),w,b
  4332  000B44  0100               	movlb	0	; () banked
  4333  000B46  59D5               	subwfb	(drawtext@i+1)& (0+255),w,b
  4334  000B48  A0D8               	btfss	status,0,c
  4335  000B4A  D78B               	goto	l3648
  4336                           
  4337                           ; BSR set to: 0
  4338                           
  4339                           ; BSR set to: 0
  4340  000B4C  0012               	return		;funcret
  4341  000B4E                     __end_of_drawtext:
  4342                           	opt stack 0
  4343                           tblptru	equ	0xFF8
  4344                           tblptrh	equ	0xFF7
  4345                           tblptrl	equ	0xFF6
  4346                           tablat	equ	0xFF5
  4347                           prodh	equ	0xFF4
  4348                           prodl	equ	0xFF3
  4349                           intcon	equ	0xFF2
  4350                           intcon2	equ	0xFF1
  4351                           postinc0	equ	0xFEE
  4352                           wreg	equ	0xFE8
  4353                           postdec1	equ	0xFE5
  4354                           fsr1l	equ	0xFE1
  4355                           indf2	equ	0xFDF
  4356                           postinc2	equ	0xFDE
  4357                           postdec2	equ	0xFDD
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function _strlen *****************
  4363 ;; Defined at:
  4364 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4367 ;;		 -> NULL(0), Timing_Txt(10), buffer(31), txt1(84), 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4370 ;;		 -> NULL(0), Timing_Txt(10), buffer(31), txt1(84), 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  2   16[COMRAM] unsigned int 
  4373 ;; Registers used:
  4374 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;Total ram usage:        6 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    3
  4387 ;; This function calls:
  4388 ;;		Nothing
  4389 ;; This function is called by:
  4390 ;;		_drawtext
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           	psect	text15
  4395  001316                     __ptext15:
  4396                           	opt stack 0
  4397  001316                     _strlen:
  4398                           	opt stack 26
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;incstack = 0
  4402  001316  C011  F015         	movff	strlen@s,strlen@cp
  4403  00131A  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4404  00131E  D003               	goto	l3594
  4405  001320                     l3592:
  4406  001320  4A15               	infsnz	strlen@cp,f,c
  4407  001322  2A16               	incf	strlen@cp+1,f,c
  4408  001324  D000               	goto	l3594
  4409  001326                     l3594:
  4410  001326  C015  FFD9         	movff	strlen@cp,fsr2l
  4411  00132A  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4412  00132E  50DF               	movf	indf2,w,c
  4413  001330  A4D8               	btfss	status,2,c
  4414  001332  D7F6               	goto	l3592
  4415  001334  C011  F013         	movff	strlen@s,??_strlen
  4416  001338  C012  F014         	movff	strlen@s+1,??_strlen+1
  4417  00133C  1E13               	comf	??_strlen,f,c
  4418  00133E  1E14               	comf	??_strlen+1,f,c
  4419  001340  4A13               	infsnz	??_strlen,f,c
  4420  001342  2A14               	incf	??_strlen+1,f,c
  4421  001344  5015               	movf	strlen@cp,w,c
  4422  001346  2413               	addwf	??_strlen,w,c
  4423  001348  6E11               	movwf	?_strlen,c
  4424  00134A  5016               	movf	strlen@cp+1,w,c
  4425  00134C  2014               	addwfc	??_strlen+1,w,c
  4426  00134E  6E12               	movwf	?_strlen+1,c
  4427  001350  D000               	goto	l1142
  4428  001352                     l1142:
  4429  001352  0012               	return		;funcret
  4430  001354                     __end_of_strlen:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           intcon2	equ	0xFF1
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postdec1	equ	0xFE5
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           postinc2	equ	0xFDE
  4446                           postdec2	equ	0xFDD
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _drawChar *****************
  4452 ;; Defined at:
  4453 ;;		line 394 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  x               1    wreg     unsigned char 
  4456 ;;  y               1   45[COMRAM] unsigned char 
  4457 ;;  c               1   46[COMRAM] unsigned char 
  4458 ;;  color           2   47[COMRAM] unsigned int 
  4459 ;;  bg              2   49[COMRAM] unsigned int 
  4460 ;;  size            1   51[COMRAM] unsigned char 
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  x               1   53[COMRAM] unsigned char 
  4463 ;;  line            1   52[COMRAM] unsigned char 
  4464 ;;  i               1   55[COMRAM] unsigned char 
  4465 ;;  j               1   54[COMRAM] unsigned char 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;		None               void
  4468 ;; Registers used:
  4469 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4475 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;Total ram usage:       11 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    8
  4482 ;; This function calls:
  4483 ;;		___wmul
  4484 ;;		_drawPixel
  4485 ;;		_fillRect
  4486 ;; This function is called by:
  4487 ;;		_drawtext
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text16
  4492  0007A8                     __ptext16:
  4493                           	opt stack 0
  4494  0007A8                     _drawChar:
  4495                           	opt stack 21
  4496                           
  4497                           ;incstack = 0
  4498                           ;drawChar@x stored from wreg
  4499  0007A8  6E36               	movwf	drawChar@x,c
  4500                           
  4501                           ;ST7735_TFT.c: 396: char i, j;
  4502                           ;ST7735_TFT.c: 397: if((x >= 128) || (y >= 160))
  4503  0007AA  0E80               	movlw	128
  4504  0007AC  6036               	cpfslt	drawChar@x,c
  4505  0007AE  D0A6               	goto	l283
  4506  0007B0  0E9F               	movlw	159
  4507  0007B2  642E               	cpfsgt	drawChar@y,c
  4508  0007B4  D001               	goto	l3540
  4509                           
  4510                           ;ST7735_TFT.c: 398: return;
  4511  0007B6  D0A2               	goto	l283
  4512  0007B8                     l3540:
  4513                           
  4514                           ;ST7735_TFT.c: 399: if(size < 1) size = 1;
  4515  0007B8  5034               	movf	drawChar@size,w,c
  4516  0007BA  A4D8               	btfss	status,2,c
  4517  0007BC  D003               	goto	l3544
  4518  0007BE  0E01               	movlw	1
  4519  0007C0  6E34               	movwf	drawChar@size,c
  4520  0007C2  D000               	goto	l3544
  4521  0007C4                     l3544:
  4522                           
  4523                           ;ST7735_TFT.c: 400: if((c < ' ') || (c > '~'))
  4524  0007C4  0E1F               	movlw	31
  4525  0007C6  642F               	cpfsgt	drawChar@c,c
  4526  0007C8  D004               	goto	l3548
  4527  0007CA  0E7E               	movlw	126
  4528  0007CC  642F               	cpfsgt	drawChar@c,c
  4529  0007CE  D003               	goto	l285
  4530  0007D0  D000               	goto	l3548
  4531  0007D2                     l3548:
  4532                           
  4533                           ;ST7735_TFT.c: 401: c = '?';
  4534  0007D2  0E3F               	movlw	63
  4535  0007D4  6E2F               	movwf	drawChar@c,c
  4536  0007D6                     l285:
  4537                           
  4538                           ;ST7735_TFT.c: 402: for(i=0; i<5; i++ ) {
  4539  0007D6  0E00               	movlw	0
  4540  0007D8  6E38               	movwf	drawChar@i,c
  4541  0007DA                     l3550:
  4542  0007DA  0E04               	movlw	4
  4543  0007DC  6438               	cpfsgt	drawChar@i,c
  4544  0007DE  D001               	goto	l3554
  4545  0007E0  D08D               	goto	l283
  4546  0007E2                     l3554:
  4547                           
  4548                           ;ST7735_TFT.c: 403: unsigned char line;
  4549                           ;ST7735_TFT.c: 404: if(c < 'S')
  4550  0007E2  0E53               	movlw	83
  4551  0007E4  602F               	cpfslt	drawChar@c,c
  4552  0007E6  D015               	goto	l3558
  4553                           
  4554                           ;ST7735_TFT.c: 405: line = font[(c - 32)*5 + i];
  4555  0007E8  0EE0               	movlw	224
  4556  0007EA  242F               	addwf	drawChar@c,w,c
  4557  0007EC  6E11               	movwf	___wmul@multiplier,c
  4558  0007EE  6A12               	clrf	___wmul@multiplier+1,c
  4559  0007F0  0EFF               	movlw	255
  4560  0007F2  2212               	addwfc	___wmul@multiplier+1,f,c
  4561  0007F4  0E00               	movlw	0
  4562  0007F6  6E14               	movwf	___wmul@multiplicand+1,c
  4563  0007F8  0E05               	movlw	5
  4564  0007FA  6E13               	movwf	___wmul@multiplicand,c
  4565  0007FC  EC24  F00A         	call	___wmul	;wreg free
  4566  000800  5038               	movf	drawChar@i,w,c
  4567  000802  2611               	addwf	?___wmul,f,c
  4568  000804  0E00               	movlw	0
  4569  000806  2212               	addwfc	?___wmul+1,f,c
  4570  000808  0ECF               	movlw	low _font
  4571  00080A  2411               	addwf	?___wmul,w,c
  4572  00080C  6EF6               	movwf	tblptrl,c
  4573  00080E  0EFD               	movlw	high _font
  4574  000810  D014               	goto	L2
  4575  000812                     l3558:
  4576                           
  4577                           ;ST7735_TFT.c: 406: else
  4578                           ;ST7735_TFT.c: 407: line = font2[(c - 'S')*5 + i];
  4579  000812  0EAD               	movlw	173
  4580  000814  242F               	addwf	drawChar@c,w,c
  4581  000816  6E11               	movwf	___wmul@multiplier,c
  4582  000818  6A12               	clrf	___wmul@multiplier+1,c
  4583  00081A  0EFF               	movlw	255
  4584  00081C  2212               	addwfc	___wmul@multiplier+1,f,c
  4585  00081E  0E00               	movlw	0
  4586  000820  6E14               	movwf	___wmul@multiplicand+1,c
  4587  000822  0E05               	movlw	5
  4588  000824  6E13               	movwf	___wmul@multiplicand,c
  4589  000826  EC24  F00A         	call	___wmul	;wreg free
  4590  00082A  5038               	movf	drawChar@i,w,c
  4591  00082C  2611               	addwf	?___wmul,f,c
  4592  00082E  0E00               	movlw	0
  4593  000830  2212               	addwfc	?___wmul+1,f,c
  4594  000832  0ECE               	movlw	low _font2
  4595  000834  2411               	addwf	?___wmul,w,c
  4596  000836  6EF6               	movwf	tblptrl,c
  4597  000838  0EFE               	movlw	high _font2
  4598  00083A                     L2:
  4599  00083A  2012               	addwfc	?___wmul+1,w,c
  4600  00083C  6EF7               	movwf	tblptrh,c
  4601  00083E                     	if	0	;There are less than 3 active tblptr bytes
  4602  00083E                     	endif
  4603  00083E  0008               	tblrd		*
  4604  000840  CFF5 F035          	movff	tablat,drawChar@line
  4605  000844  D000               	goto	l3560
  4606  000846                     l3560:
  4607                           
  4608                           ;ST7735_TFT.c: 408: for(j=0; j<7; j++, line >>= 1) {
  4609  000846  0E00               	movlw	0
  4610  000848  6E37               	movwf	drawChar@j,c
  4611  00084A                     l3562:
  4612  00084A  0E06               	movlw	6
  4613  00084C  6437               	cpfsgt	drawChar@j,c
  4614  00084E  D001               	goto	l292
  4615  000850  D053               	goto	l3586
  4616  000852                     l292:
  4617                           
  4618                           ;ST7735_TFT.c: 409: if(line & 0x01) {
  4619  000852  A035               	btfss	drawChar@line,0,c
  4620  000854  D023               	goto	l3572
  4621                           
  4622                           ;ST7735_TFT.c: 410: if(size == 1) drawPixel(x+i, y+j, color);
  4623  000856  0434               	decf	drawChar@size,w,c
  4624  000858  A4D8               	btfss	status,2,c
  4625  00085A  D00C               	goto	l3570
  4626  00085C  502E               	movf	drawChar@y,w,c
  4627  00085E  2437               	addwf	drawChar@j,w,c
  4628  000860  6E18               	movwf	drawPixel@y,c
  4629  000862  C030  F019         	movff	drawChar@color,drawPixel@color
  4630  000866  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  4631  00086A  5036               	movf	drawChar@x,w,c
  4632  00086C  2438               	addwf	drawChar@i,w,c
  4633  00086E  ECE2  F009         	call	_drawPixel
  4634  000872  D03E               	goto	l3580
  4635  000874                     l3570:
  4636                           
  4637                           ;ST7735_TFT.c: 411: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4638  000874  5037               	movf	drawChar@j,w,c
  4639  000876  0234               	mulwf	drawChar@size,c
  4640  000878  50F3               	movf	prodl,w,c
  4641  00087A  242E               	addwf	drawChar@y,w,c
  4642  00087C  6E23               	movwf	fillRect@y,c
  4643  00087E  C034  F024         	movff	drawChar@size,fillRect@w
  4644  000882  C034  F025         	movff	drawChar@size,fillRect@h
  4645  000886  C030  F026         	movff	drawChar@color,fillRect@color
  4646  00088A  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  4647  00088E  5038               	movf	drawChar@i,w,c
  4648  000890  0234               	mulwf	drawChar@size,c
  4649  000892  50F3               	movf	prodl,w,c
  4650  000894  2436               	addwf	drawChar@x,w,c
  4651  000896  EC66  F009         	call	_fillRect
  4652                           
  4653                           ;ST7735_TFT.c: 412: }
  4654  00089A  D02A               	goto	l3580
  4655  00089C                     l3572:
  4656                           
  4657                           ;ST7735_TFT.c: 413: else if(bg != color) {
  4658  00089C  5030               	movf	drawChar@color,w,c
  4659  00089E  1832               	xorwf	drawChar@bg,w,c
  4660  0008A0  E104               	bnz	u2400
  4661  0008A2  5031               	movf	drawChar@color+1,w,c
  4662  0008A4  1833               	xorwf	drawChar@bg+1,w,c
  4663  0008A6  B4D8               	btfsc	status,2,c
  4664  0008A8  D023               	goto	l3580
  4665  0008AA                     u2400:
  4666                           
  4667                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, bg);
  4668  0008AA  0434               	decf	drawChar@size,w,c
  4669  0008AC  A4D8               	btfss	status,2,c
  4670  0008AE  D00C               	goto	l3578
  4671  0008B0  502E               	movf	drawChar@y,w,c
  4672  0008B2  2437               	addwf	drawChar@j,w,c
  4673  0008B4  6E18               	movwf	drawPixel@y,c
  4674  0008B6  C032  F019         	movff	drawChar@bg,drawPixel@color
  4675  0008BA  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4676  0008BE  5036               	movf	drawChar@x,w,c
  4677  0008C0  2438               	addwf	drawChar@i,w,c
  4678  0008C2  ECE2  F009         	call	_drawPixel
  4679  0008C6  D014               	goto	l3580
  4680  0008C8                     l3578:
  4681                           
  4682                           ;ST7735_TFT.c: 415: else fillRect(x+i*size, y+j*size, size, size, bg);
  4683  0008C8  5037               	movf	drawChar@j,w,c
  4684  0008CA  0234               	mulwf	drawChar@size,c
  4685  0008CC  50F3               	movf	prodl,w,c
  4686  0008CE  242E               	addwf	drawChar@y,w,c
  4687  0008D0  6E23               	movwf	fillRect@y,c
  4688  0008D2  C034  F024         	movff	drawChar@size,fillRect@w
  4689  0008D6  C034  F025         	movff	drawChar@size,fillRect@h
  4690  0008DA  C032  F026         	movff	drawChar@bg,fillRect@color
  4691  0008DE  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4692  0008E2  5038               	movf	drawChar@i,w,c
  4693  0008E4  0234               	mulwf	drawChar@size,c
  4694  0008E6  50F3               	movf	prodl,w,c
  4695  0008E8  2436               	addwf	drawChar@x,w,c
  4696  0008EA  EC66  F009         	call	_fillRect
  4697  0008EE  D000               	goto	l3580
  4698  0008F0                     l3580:
  4699  0008F0  2A37               	incf	drawChar@j,f,c
  4700  0008F2  90D8               	bcf	status,0,c
  4701  0008F4  3235               	rrcf	drawChar@line,f,c
  4702  0008F6  D7A9               	goto	l3562
  4703  0008F8                     l3586:
  4704  0008F8  2A38               	incf	drawChar@i,f,c
  4705  0008FA  D76F               	goto	l3550
  4706  0008FC                     l283:
  4707  0008FC  0012               	return		;funcret
  4708  0008FE                     __end_of_drawChar:
  4709                           	opt stack 0
  4710                           tblptru	equ	0xFF8
  4711                           tblptrh	equ	0xFF7
  4712                           tblptrl	equ	0xFF6
  4713                           tablat	equ	0xFF5
  4714                           prodh	equ	0xFF4
  4715                           prodl	equ	0xFF3
  4716                           intcon	equ	0xFF2
  4717                           intcon2	equ	0xFF1
  4718                           postinc0	equ	0xFEE
  4719                           wreg	equ	0xFE8
  4720                           postdec1	equ	0xFE5
  4721                           fsr1l	equ	0xFE1
  4722                           indf2	equ	0xFDF
  4723                           postinc2	equ	0xFDE
  4724                           postdec2	equ	0xFDD
  4725                           fsr2h	equ	0xFDA
  4726                           fsr2l	equ	0xFD9
  4727                           status	equ	0xFD8
  4728                           
  4729 ;; *************** function _fillRect *****************
  4730 ;; Defined at:
  4731 ;;		line 384 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  x               1    wreg     unsigned char 
  4734 ;;  y               1   34[COMRAM] unsigned char 
  4735 ;;  w               1   35[COMRAM] unsigned char 
  4736 ;;  h               1   36[COMRAM] unsigned char 
  4737 ;;  color           2   37[COMRAM] unsigned int 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  x               1   42[COMRAM] unsigned char 
  4740 ;;  i               2   43[COMRAM] int 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;		None               void
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0, cstack
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4750 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;Total ram usage:       11 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    7
  4757 ;; This function calls:
  4758 ;;		_drawFastVLine
  4759 ;; This function is called by:
  4760 ;;		_drawChar
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text17
  4765  0012CC                     __ptext17:
  4766                           	opt stack 0
  4767  0012CC                     _fillRect:
  4768                           	opt stack 21
  4769                           
  4770                           ;incstack = 0
  4771                           ;fillRect@x stored from wreg
  4772  0012CC  6E2B               	movwf	fillRect@x,c
  4773                           
  4774                           ;ST7735_TFT.c: 386: signed int i;
  4775                           ;ST7735_TFT.c: 388: for (i = x; i < x + w; i++)
  4776  0012CE  C02B  F02C         	movff	fillRect@x,fillRect@i
  4777  0012D2  6A2D               	clrf	fillRect@i+1,c
  4778  0012D4  D00E               	goto	l3442
  4779  0012D6                     l3438:
  4780                           
  4781                           ;ST7735_TFT.c: 389: {
  4782                           ;ST7735_TFT.c: 390: drawFastVLine(i, y, h, color);
  4783  0012D6  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4784  0012DA  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4785  0012DE  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4786  0012E2  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4787  0012E6  502C               	movf	fillRect@i,w,c
  4788  0012E8  EC70  F007         	call	_drawFastVLine
  4789  0012EC  4A2C               	infsnz	fillRect@i,f,c
  4790  0012EE  2A2D               	incf	fillRect@i+1,f,c
  4791  0012F0  D000               	goto	l3442
  4792  0012F2                     l3442:
  4793  0012F2  5024               	movf	fillRect@w,w,c
  4794  0012F4  C02B  F028         	movff	fillRect@x,??_fillRect
  4795  0012F8  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4796  0012FA  2628               	addwf	??_fillRect,f,c
  4797  0012FC  0E00               	movlw	0
  4798  0012FE  2229               	addwfc	??_fillRect+1,f,c
  4799  001300  5028               	movf	??_fillRect,w,c
  4800  001302  5C2C               	subwf	fillRect@i,w,c
  4801  001304  502D               	movf	fillRect@i+1,w,c
  4802  001306  0A80               	xorlw	128
  4803  001308  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4804  00130A  5029               	movf	??_fillRect+1,w,c
  4805  00130C  0A80               	xorlw	128
  4806  00130E  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4807  001310  A0D8               	btfss	status,0,c
  4808  001312  D7E1               	goto	l3438
  4809  001314  0012               	return		;funcret
  4810  001316                     __end_of_fillRect:
  4811                           	opt stack 0
  4812                           tblptru	equ	0xFF8
  4813                           tblptrh	equ	0xFF7
  4814                           tblptrl	equ	0xFF6
  4815                           tablat	equ	0xFF5
  4816                           prodh	equ	0xFF4
  4817                           prodl	equ	0xFF3
  4818                           intcon	equ	0xFF2
  4819                           intcon2	equ	0xFF1
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _drawFastVLine *****************
  4832 ;; Defined at:
  4833 ;;		line 363 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  x               1    wreg     unsigned char 
  4836 ;;  y               1   23[COMRAM] unsigned char 
  4837 ;;  h               1   24[COMRAM] unsigned char 
  4838 ;;  color           2   25[COMRAM] unsigned int 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  x               1   33[COMRAM] unsigned char 
  4841 ;;  lo              1   32[COMRAM] unsigned char 
  4842 ;;  hi              1   31[COMRAM] unsigned char 
  4843 ;; Return value:  Size  Location     Type
  4844 ;;		None               void
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4852 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;Total ram usage:       11 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    6
  4859 ;; This function calls:
  4860 ;;		_setAddrWindow
  4861 ;;		_spiwrite
  4862 ;; This function is called by:
  4863 ;;		_fillRect
  4864 ;;		_fillCircleHelper
  4865 ;;		_fillCircle
  4866 ;;		_drawRect
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text18
  4871  000EE0                     __ptext18:
  4872                           	opt stack 0
  4873  000EE0                     _drawFastVLine:
  4874                           	opt stack 22
  4875                           
  4876                           ;incstack = 0
  4877                           ;drawFastVLine@x stored from wreg
  4878  000EE0  6E22               	movwf	drawFastVLine@x,c
  4879                           
  4880                           ;ST7735_TFT.c: 365: unsigned char hi, lo;
  4881                           ;ST7735_TFT.c: 366: if((x >= 128) || (y >= 160))
  4882  000EE2  0E80               	movlw	128
  4883  000EE4  6022               	cpfslt	drawFastVLine@x,c
  4884  000EE6  D03F               	goto	l267
  4885  000EE8  0E9F               	movlw	159
  4886  000EEA  6418               	cpfsgt	drawFastVLine@y,c
  4887  000EEC  D001               	goto	l3388
  4888                           
  4889                           ;ST7735_TFT.c: 367: return;
  4890  000EEE  D03B               	goto	l267
  4891  000EF0                     l3388:
  4892                           
  4893                           ;ST7735_TFT.c: 368: if((y + h - 1) >= 160)
  4894  000EF0  0EFF               	movlw	255
  4895  000EF2  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4896  000EF4  0EFF               	movlw	255
  4897  000EF6  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4898  000EF8  5019               	movf	drawFastVLine@h,w,c
  4899  000EFA  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4900  000EFE  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4901  000F00  261E               	addwf	??_drawFastVLine+2,f,c
  4902  000F02  0E00               	movlw	0
  4903  000F04  221F               	addwfc	??_drawFastVLine+3,f,c
  4904  000F06  501C               	movf	??_drawFastVLine,w,c
  4905  000F08  261E               	addwf	??_drawFastVLine+2,f,c
  4906  000F0A  501D               	movf	??_drawFastVLine+1,w,c
  4907  000F0C  221F               	addwfc	??_drawFastVLine+3,f,c
  4908  000F0E  BE1F               	btfsc	??_drawFastVLine+3,7,c
  4909  000F10  D00B               	goto	l3392
  4910  000F12  501F               	movf	??_drawFastVLine+3,w,c
  4911  000F14  E104               	bnz	u2240
  4912  000F16  0EA0               	movlw	160
  4913  000F18  5C1E               	subwf	??_drawFastVLine+2,w,c
  4914  000F1A  A0D8               	btfss	status,0,c
  4915  000F1C  D005               	goto	l3392
  4916  000F1E                     u2240:
  4917                           
  4918                           ;ST7735_TFT.c: 369: h = 160 - y;
  4919  000F1E  5018               	movf	drawFastVLine@y,w,c
  4920  000F20  0800               	sublw	0
  4921  000F22  0FA0               	addlw	160
  4922  000F24  6E19               	movwf	drawFastVLine@h,c
  4923  000F26  D000               	goto	l3392
  4924  000F28                     l3392:
  4925                           
  4926                           ;ST7735_TFT.c: 370: hi = color >> 8; lo = color;
  4927  000F28  501B               	movf	drawFastVLine@color+1,w,c
  4928  000F2A  6E20               	movwf	drawFastVLine@hi,c
  4929  000F2C  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  4930                           
  4931                           ;ST7735_TFT.c: 371: setAddrWindow(x, y, x, y + h - 1);
  4932  000F30  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  4933  000F34  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  4934  000F38  5018               	movf	drawFastVLine@y,w,c
  4935  000F3A  2419               	addwf	drawFastVLine@h,w,c
  4936  000F3C  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4937  000F3E  041C               	decf	??_drawFastVLine,w,c
  4938  000F40  6E16               	movwf	setAddrWindow@y1,c
  4939  000F42  5022               	movf	drawFastVLine@x,w,c
  4940  000F44  EC19  F009         	call	_setAddrWindow
  4941                           
  4942                           ;ST7735_TFT.c: 372: PORTCbits.RC2 = 1;
  4943  000F48  8482               	bsf	3970,2,c	;volatile
  4944                           
  4945                           ;ST7735_TFT.c: 373: PORTCbits.RC4 = 0;
  4946  000F4A  9882               	bcf	3970,4,c	;volatile
  4947                           
  4948                           ;ST7735_TFT.c: 375: while (h--) {
  4949  000F4C  D007               	goto	l3404
  4950  000F4E                     l3402:
  4951                           
  4952                           ;ST7735_TFT.c: 376: spiwrite(hi);
  4953  000F4E  5020               	movf	drawFastVLine@hi,w,c
  4954  000F50  EC6F  F00A         	call	_spiwrite
  4955                           
  4956                           ;ST7735_TFT.c: 377: spiwrite(lo);
  4957  000F54  5021               	movf	drawFastVLine@lo,w,c
  4958  000F56  EC6F  F00A         	call	_spiwrite
  4959  000F5A  D000               	goto	l3404
  4960  000F5C                     l3404:
  4961  000F5C  0619               	decf	drawFastVLine@h,f,c
  4962  000F5E  2819               	incf	drawFastVLine@h,w,c
  4963  000F60  A4D8               	btfss	status,2,c
  4964  000F62  D7F5               	goto	l3402
  4965                           
  4966                           ;ST7735_TFT.c: 378: }
  4967                           ;ST7735_TFT.c: 379: PORTCbits.RC4 = 1;
  4968  000F64  8882               	bsf	3970,4,c	;volatile
  4969  000F66                     l267:
  4970  000F66  0012               	return		;funcret
  4971  000F68                     __end_of_drawFastVLine:
  4972                           	opt stack 0
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           intcon2	equ	0xFF1
  4981                           postinc0	equ	0xFEE
  4982                           wreg	equ	0xFE8
  4983                           postdec1	equ	0xFE5
  4984                           fsr1l	equ	0xFE1
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function _drawPixel *****************
  4993 ;; Defined at:
  4994 ;;		line 354 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  x               1    wreg     unsigned char 
  4997 ;;  y               1   23[COMRAM] unsigned char 
  4998 ;;  color           2   24[COMRAM] unsigned int 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;  x               1   26[COMRAM] unsigned char 
  5001 ;; Return value:  Size  Location     Type
  5002 ;;		None               void
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5010 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;Total ram usage:        4 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    6
  5017 ;; This function calls:
  5018 ;;		_setAddrWindow
  5019 ;;		_write_data
  5020 ;; This function is called by:
  5021 ;;		_drawChar
  5022 ;;		_drawCircle
  5023 ;;		_drawCircleHelper
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text19
  5028  0013C4                     __ptext19:
  5029                           	opt stack 0
  5030  0013C4                     _drawPixel:
  5031                           	opt stack 22
  5032                           
  5033                           ;incstack = 0
  5034                           ;drawPixel@x stored from wreg
  5035  0013C4  6E1B               	movwf	drawPixel@x,c
  5036                           
  5037                           ;ST7735_TFT.c: 356: if((x >= 128) || (y >= 160))
  5038  0013C6  0E80               	movlw	128
  5039  0013C8  601B               	cpfslt	drawPixel@x,c
  5040  0013CA  D013               	goto	l261
  5041  0013CC  0E9F               	movlw	159
  5042  0013CE  6418               	cpfsgt	drawPixel@y,c
  5043  0013D0  D001               	goto	l3430
  5044                           
  5045                           ;ST7735_TFT.c: 357: return;
  5046  0013D2  D00F               	goto	l261
  5047  0013D4                     l3430:
  5048                           
  5049                           ;ST7735_TFT.c: 358: setAddrWindow(x,y,x+1,y+1);
  5050  0013D4  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5051  0013D8  281B               	incf	drawPixel@x,w,c
  5052  0013DA  6E15               	movwf	setAddrWindow@x1,c
  5053  0013DC  2818               	incf	drawPixel@y,w,c
  5054  0013DE  6E16               	movwf	setAddrWindow@y1,c
  5055  0013E0  501B               	movf	drawPixel@x,w,c
  5056  0013E2  EC19  F009         	call	_setAddrWindow
  5057                           
  5058                           ;ST7735_TFT.c: 359: write_data(color >> 8);
  5059  0013E6  501A               	movf	drawPixel@color+1,w,c
  5060  0013E8  EC95  F00A         	call	_write_data
  5061                           
  5062                           ;ST7735_TFT.c: 360: write_data(color & 0xFF);
  5063  0013EC  5019               	movf	drawPixel@color,w,c
  5064  0013EE  EC95  F00A         	call	_write_data
  5065  0013F2                     l261:
  5066  0013F2  0012               	return		;funcret
  5067  0013F4                     __end_of_drawPixel:
  5068                           	opt stack 0
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon	equ	0xFF2
  5076                           intcon2	equ	0xFF1
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           postdec1	equ	0xFE5
  5080                           fsr1l	equ	0xFE1
  5081                           indf2	equ	0xFDF
  5082                           postinc2	equ	0xFDE
  5083                           postdec2	equ	0xFDD
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _setAddrWindow *****************
  5089 ;; Defined at:
  5090 ;;		line 339 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  x0              1    wreg     unsigned char 
  5093 ;;  y0              1   19[COMRAM] unsigned char 
  5094 ;;  x1              1   20[COMRAM] unsigned char 
  5095 ;;  y1              1   21[COMRAM] unsigned char 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  x0              1   22[COMRAM] unsigned char 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;		None               void
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        4 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:    5
  5114 ;; This function calls:
  5115 ;;		_write_command
  5116 ;;		_write_data
  5117 ;; This function is called by:
  5118 ;;		_drawPixel
  5119 ;;		_drawFastVLine
  5120 ;;		_fillRectangle
  5121 ;;		_drawFastHLine
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text20
  5126  001232                     __ptext20:
  5127                           	opt stack 0
  5128  001232                     _setAddrWindow:
  5129                           	opt stack 22
  5130                           
  5131                           ;incstack = 0
  5132                           ;setAddrWindow@x0 stored from wreg
  5133  001232  6E17               	movwf	setAddrWindow@x0,c
  5134                           
  5135                           ;ST7735_TFT.c: 341: write_command(0x2A);
  5136  001234  0E2A               	movlw	42
  5137  001236  EC9D  F00A         	call	_write_command
  5138                           
  5139                           ;ST7735_TFT.c: 342: write_data(0);
  5140  00123A  0E00               	movlw	0
  5141  00123C  EC95  F00A         	call	_write_data
  5142                           
  5143                           ;ST7735_TFT.c: 343: write_data(x0 + colstart);
  5144  001240  5017               	movf	setAddrWindow@x0,w,c
  5145  001242  246D               	addwf	_colstart,w,c
  5146  001244  EC95  F00A         	call	_write_data
  5147                           
  5148                           ;ST7735_TFT.c: 344: write_data(0);
  5149  001248  0E00               	movlw	0
  5150  00124A  EC95  F00A         	call	_write_data
  5151                           
  5152                           ;ST7735_TFT.c: 345: write_data(x1 + colstart);
  5153  00124E  5015               	movf	setAddrWindow@x1,w,c
  5154  001250  246D               	addwf	_colstart,w,c
  5155  001252  EC95  F00A         	call	_write_data
  5156                           
  5157                           ;ST7735_TFT.c: 346: write_command(0x2B);
  5158  001256  0E2B               	movlw	43
  5159  001258  EC9D  F00A         	call	_write_command
  5160                           
  5161                           ;ST7735_TFT.c: 347: write_data(0);
  5162  00125C  0E00               	movlw	0
  5163  00125E  EC95  F00A         	call	_write_data
  5164                           
  5165                           ;ST7735_TFT.c: 348: write_data(y0 + rowstart);
  5166  001262  5014               	movf	setAddrWindow@y0,w,c
  5167  001264  246E               	addwf	_rowstart,w,c
  5168  001266  EC95  F00A         	call	_write_data
  5169                           
  5170                           ;ST7735_TFT.c: 349: write_data(0);
  5171  00126A  0E00               	movlw	0
  5172  00126C  EC95  F00A         	call	_write_data
  5173                           
  5174                           ;ST7735_TFT.c: 350: write_data(y1 + rowstart);
  5175  001270  5016               	movf	setAddrWindow@y1,w,c
  5176  001272  246E               	addwf	_rowstart,w,c
  5177  001274  EC95  F00A         	call	_write_data
  5178                           
  5179                           ;ST7735_TFT.c: 351: write_command(0x2C);
  5180  001278  0E2C               	movlw	44
  5181  00127A  EC9D  F00A         	call	_write_command
  5182  00127E  0012               	return		;funcret
  5183  001280                     __end_of_setAddrWindow:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           intcon	equ	0xFF2
  5192                           intcon2	equ	0xFF1
  5193                           postinc0	equ	0xFEE
  5194                           wreg	equ	0xFE8
  5195                           postdec1	equ	0xFE5
  5196                           fsr1l	equ	0xFE1
  5197                           indf2	equ	0xFDF
  5198                           postinc2	equ	0xFDE
  5199                           postdec2	equ	0xFDD
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _TFT_GreenTab_Initialize *****************
  5205 ;; Defined at:
  5206 ;;		line 591 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;		None
  5211 ;; Return value:  Size  Location     Type
  5212 ;;		None               void
  5213 ;; Registers used:
  5214 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : 0/0
  5217 ;;		On exit  : 0/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;Total ram usage:        0 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    6
  5227 ;; This function calls:
  5228 ;;		_Rcmd1
  5229 ;;		_Rcmd2red
  5230 ;;		_Rcmd3
  5231 ;;		_write_command
  5232 ;;		_write_data
  5233 ;; This function is called by:
  5234 ;;		_Initialize_LCD_Screen
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text21
  5239  00141E                     __ptext21:
  5240                           	opt stack 0
  5241  00141E                     _TFT_GreenTab_Initialize:
  5242                           	opt stack 23
  5243                           
  5244                           ;ST7735_TFT.c: 593: PORTCbits.RC4 = 1;
  5245                           
  5246                           ;incstack = 0
  5247  00141E  8882               	bsf	3970,4,c	;volatile
  5248                           
  5249                           ;ST7735_TFT.c: 594: PORTCbits.RC2 = 0;
  5250  001420  9482               	bcf	3970,2,c	;volatile
  5251                           
  5252                           ;ST7735_TFT.c: 596: SSPSTAT=0x80;
  5253  001422  0E80               	movlw	128
  5254  001424  6EC7               	movwf	4039,c	;volatile
  5255                           
  5256                           ;ST7735_TFT.c: 597: SSPCON1=0x30;
  5257  001426  0E30               	movlw	48
  5258  001428  6EC6               	movwf	4038,c	;volatile
  5259                           
  5260                           ;ST7735_TFT.c: 600: Rcmd1();
  5261  00142A  ECA7  F005         	call	_Rcmd1	;wreg free
  5262                           
  5263                           ;ST7735_TFT.c: 601: Rcmd2red();
  5264  00142E  ECAA  F009         	call	_Rcmd2red	;wreg free
  5265                           
  5266                           ;ST7735_TFT.c: 602: Rcmd3();
  5267  001432  EC2F  F006         	call	_Rcmd3	;wreg free
  5268                           
  5269                           ;ST7735_TFT.c: 603: write_command(0x36);
  5270  001436  0E36               	movlw	54
  5271  001438  EC9D  F00A         	call	_write_command
  5272                           
  5273                           ;ST7735_TFT.c: 604: write_data(0xC0);
  5274  00143C  0EC0               	movlw	192
  5275  00143E  EC95  F00A         	call	_write_data
  5276                           
  5277                           ;ST7735_TFT.c: 605: _tft_type = 1;
  5278  001442  0E01               	movlw	1
  5279  001444  6E6B               	movwf	__tft_type,c
  5280  001446  0012               	return		;funcret
  5281  001448                     __end_of_TFT_GreenTab_Initialize:
  5282                           	opt stack 0
  5283                           tblptru	equ	0xFF8
  5284                           tblptrh	equ	0xFF7
  5285                           tblptrl	equ	0xFF6
  5286                           tablat	equ	0xFF5
  5287                           prodh	equ	0xFF4
  5288                           prodl	equ	0xFF3
  5289                           intcon	equ	0xFF2
  5290                           intcon2	equ	0xFF1
  5291                           postinc0	equ	0xFEE
  5292                           wreg	equ	0xFE8
  5293                           postdec1	equ	0xFE5
  5294                           fsr1l	equ	0xFE1
  5295                           indf2	equ	0xFDF
  5296                           postinc2	equ	0xFDE
  5297                           postdec2	equ	0xFDD
  5298                           fsr2h	equ	0xFDA
  5299                           fsr2l	equ	0xFD9
  5300                           status	equ	0xFD8
  5301                           
  5302 ;; *************** function _Rcmd3 *****************
  5303 ;; Defined at:
  5304 ;;		line 285 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;		None
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;		None               void
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;Total ram usage:        0 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    5
  5325 ;; This function calls:
  5326 ;;		_delay_ms
  5327 ;;		_write_command
  5328 ;;		_write_data
  5329 ;; This function is called by:
  5330 ;;		_TFT_GreenTab_Initialize
  5331 ;;		_TFT_BlackTab_Initialize
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text22
  5336  000C5E                     __ptext22:
  5337                           	opt stack 0
  5338  000C5E                     _Rcmd3:
  5339                           	opt stack 23
  5340                           
  5341                           ;ST7735_TFT.c: 287: write_command(0xE0);
  5342                           
  5343                           ;incstack = 0
  5344  000C5E  0EE0               	movlw	224
  5345  000C60  EC9D  F00A         	call	_write_command
  5346                           
  5347                           ;ST7735_TFT.c: 288: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5348  000C64  0E02               	movlw	2
  5349  000C66  EC95  F00A         	call	_write_data
  5350  000C6A  0E1C               	movlw	28
  5351  000C6C  EC95  F00A         	call	_write_data
  5352  000C70  0E07               	movlw	7
  5353  000C72  EC95  F00A         	call	_write_data
  5354  000C76  0E12               	movlw	18
  5355  000C78  EC95  F00A         	call	_write_data
  5356                           
  5357                           ;ST7735_TFT.c: 289: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5358  000C7C  0E37               	movlw	55
  5359  000C7E  EC95  F00A         	call	_write_data
  5360  000C82  0E32               	movlw	50
  5361  000C84  EC95  F00A         	call	_write_data
  5362  000C88  0E29               	movlw	41
  5363  000C8A  EC95  F00A         	call	_write_data
  5364  000C8E  0E2D               	movlw	45
  5365  000C90  EC95  F00A         	call	_write_data
  5366                           
  5367                           ;ST7735_TFT.c: 290: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5368  000C94  0E29               	movlw	41
  5369  000C96  EC95  F00A         	call	_write_data
  5370  000C9A  0E25               	movlw	37
  5371  000C9C  EC95  F00A         	call	_write_data
  5372  000CA0  0E2B               	movlw	43
  5373  000CA2  EC95  F00A         	call	_write_data
  5374  000CA6  0E39               	movlw	57
  5375  000CA8  EC95  F00A         	call	_write_data
  5376                           
  5377                           ;ST7735_TFT.c: 291: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5378  000CAC  0E00               	movlw	0
  5379  000CAE  EC95  F00A         	call	_write_data
  5380  000CB2  0E01               	movlw	1
  5381  000CB4  EC95  F00A         	call	_write_data
  5382  000CB8  0E03               	movlw	3
  5383  000CBA  EC95  F00A         	call	_write_data
  5384  000CBE  0E10               	movlw	16
  5385  000CC0  EC95  F00A         	call	_write_data
  5386                           
  5387                           ;ST7735_TFT.c: 292: write_command(0xE1);
  5388  000CC4  0EE1               	movlw	225
  5389  000CC6  EC9D  F00A         	call	_write_command
  5390                           
  5391                           ;ST7735_TFT.c: 293: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5392  000CCA  0E03               	movlw	3
  5393  000CCC  EC95  F00A         	call	_write_data
  5394  000CD0  0E1D               	movlw	29
  5395  000CD2  EC95  F00A         	call	_write_data
  5396  000CD6  0E07               	movlw	7
  5397  000CD8  EC95  F00A         	call	_write_data
  5398  000CDC  0E06               	movlw	6
  5399  000CDE  EC95  F00A         	call	_write_data
  5400                           
  5401                           ;ST7735_TFT.c: 294: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5402  000CE2  0E2E               	movlw	46
  5403  000CE4  EC95  F00A         	call	_write_data
  5404  000CE8  0E2C               	movlw	44
  5405  000CEA  EC95  F00A         	call	_write_data
  5406  000CEE  0E29               	movlw	41
  5407  000CF0  EC95  F00A         	call	_write_data
  5408  000CF4  0E2D               	movlw	45
  5409  000CF6  EC95  F00A         	call	_write_data
  5410                           
  5411                           ;ST7735_TFT.c: 295: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5412  000CFA  0E2E               	movlw	46
  5413  000CFC  EC95  F00A         	call	_write_data
  5414  000D00  0E2E               	movlw	46
  5415  000D02  EC95  F00A         	call	_write_data
  5416  000D06  0E37               	movlw	55
  5417  000D08  EC95  F00A         	call	_write_data
  5418  000D0C  0E3F               	movlw	63
  5419  000D0E  EC95  F00A         	call	_write_data
  5420                           
  5421                           ;ST7735_TFT.c: 296: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5422  000D12  0E00               	movlw	0
  5423  000D14  EC95  F00A         	call	_write_data
  5424  000D18  0E00               	movlw	0
  5425  000D1A  EC95  F00A         	call	_write_data
  5426  000D1E  0E02               	movlw	2
  5427  000D20  EC95  F00A         	call	_write_data
  5428  000D24  0E10               	movlw	16
  5429  000D26  EC95  F00A         	call	_write_data
  5430                           
  5431                           ;ST7735_TFT.c: 297: write_command(0x13);
  5432  000D2A  0E13               	movlw	19
  5433  000D2C  EC9D  F00A         	call	_write_command
  5434                           
  5435                           ;ST7735_TFT.c: 298: delay_ms(10);
  5436  000D30  0E00               	movlw	0
  5437  000D32  6E18               	movwf	delay_ms@ms+1,c
  5438  000D34  0E0A               	movlw	10
  5439  000D36  6E17               	movwf	delay_ms@ms,c
  5440  000D38  ECF0  F008         	call	_delay_ms	;wreg free
  5441                           
  5442                           ;ST7735_TFT.c: 299: write_command(0x29);
  5443  000D3C  0E29               	movlw	41
  5444  000D3E  EC9D  F00A         	call	_write_command
  5445                           
  5446                           ;ST7735_TFT.c: 300: delay_ms(100);
  5447  000D42  0E00               	movlw	0
  5448  000D44  6E18               	movwf	delay_ms@ms+1,c
  5449  000D46  0E64               	movlw	100
  5450  000D48  6E17               	movwf	delay_ms@ms,c
  5451  000D4A  ECF0  F008         	call	_delay_ms	;wreg free
  5452  000D4E  0012               	return		;funcret
  5453  000D50                     __end_of_Rcmd3:
  5454                           	opt stack 0
  5455                           tblptru	equ	0xFF8
  5456                           tblptrh	equ	0xFF7
  5457                           tblptrl	equ	0xFF6
  5458                           tablat	equ	0xFF5
  5459                           prodh	equ	0xFF4
  5460                           prodl	equ	0xFF3
  5461                           intcon	equ	0xFF2
  5462                           intcon2	equ	0xFF1
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           postdec1	equ	0xFE5
  5466                           fsr1l	equ	0xFE1
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _Rcmd2red *****************
  5475 ;; Defined at:
  5476 ;;		line 275 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;		None               void
  5483 ;; Registers used:
  5484 ;;		wreg, status,2, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;Total ram usage:        0 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    5
  5497 ;; This function calls:
  5498 ;;		_write_command
  5499 ;;		_write_data
  5500 ;; This function is called by:
  5501 ;;		_TFT_GreenTab_Initialize
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text23
  5506  001354                     __ptext23:
  5507                           	opt stack 0
  5508  001354                     _Rcmd2red:
  5509                           	opt stack 23
  5510                           
  5511                           ;ST7735_TFT.c: 277: write_command(0x2A);
  5512                           
  5513                           ;incstack = 0
  5514  001354  0E2A               	movlw	42
  5515  001356  EC9D  F00A         	call	_write_command
  5516                           
  5517                           ;ST7735_TFT.c: 278: write_data(0x00); write_data(0x00);
  5518  00135A  0E00               	movlw	0
  5519  00135C  EC95  F00A         	call	_write_data
  5520  001360  0E00               	movlw	0
  5521  001362  EC95  F00A         	call	_write_data
  5522                           
  5523                           ;ST7735_TFT.c: 279: write_data(0x00); write_data(0x7F);
  5524  001366  0E00               	movlw	0
  5525  001368  EC95  F00A         	call	_write_data
  5526  00136C  0E7F               	movlw	127
  5527  00136E  EC95  F00A         	call	_write_data
  5528                           
  5529                           ;ST7735_TFT.c: 280: write_command(0x2B);
  5530  001372  0E2B               	movlw	43
  5531  001374  EC9D  F00A         	call	_write_command
  5532                           
  5533                           ;ST7735_TFT.c: 281: write_data(0x00); write_data(0x00);
  5534  001378  0E00               	movlw	0
  5535  00137A  EC95  F00A         	call	_write_data
  5536  00137E  0E00               	movlw	0
  5537  001380  EC95  F00A         	call	_write_data
  5538                           
  5539                           ;ST7735_TFT.c: 282: write_data(0x00); write_data(0x9F);
  5540  001384  0E00               	movlw	0
  5541  001386  EC95  F00A         	call	_write_data
  5542  00138A  0E9F               	movlw	159
  5543  00138C  EC95  F00A         	call	_write_data
  5544  001390  0012               	return		;funcret
  5545  001392                     __end_of_Rcmd2red:
  5546                           	opt stack 0
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           intcon	equ	0xFF2
  5554                           intcon2	equ	0xFF1
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           postdec1	equ	0xFE5
  5558                           fsr1l	equ	0xFE1
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function _Rcmd1 *****************
  5567 ;; Defined at:
  5568 ;;		line 228 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;		None
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;		None
  5573 ;; Return value:  Size  Location     Type
  5574 ;;		None               void
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;Total ram usage:        0 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    5
  5589 ;; This function calls:
  5590 ;;		_delay_ms
  5591 ;;		_write_command
  5592 ;;		_write_data
  5593 ;; This function is called by:
  5594 ;;		_TFT_GreenTab_Initialize
  5595 ;;		_TFT_BlackTab_Initialize
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text24
  5600  000B4E                     __ptext24:
  5601                           	opt stack 0
  5602  000B4E                     _Rcmd1:
  5603                           	opt stack 23
  5604                           
  5605                           ;ST7735_TFT.c: 230: write_command(0x01);
  5606                           
  5607                           ;incstack = 0
  5608  000B4E  0E01               	movlw	1
  5609  000B50  EC9D  F00A         	call	_write_command
  5610                           
  5611                           ;ST7735_TFT.c: 231: delay_ms(150);
  5612  000B54  0E00               	movlw	0
  5613  000B56  6E18               	movwf	delay_ms@ms+1,c
  5614  000B58  0E96               	movlw	150
  5615  000B5A  6E17               	movwf	delay_ms@ms,c
  5616  000B5C  ECF0  F008         	call	_delay_ms	;wreg free
  5617                           
  5618                           ;ST7735_TFT.c: 232: write_command(0x11);
  5619  000B60  0E11               	movlw	17
  5620  000B62  EC9D  F00A         	call	_write_command
  5621                           
  5622                           ;ST7735_TFT.c: 233: delay_ms(500);
  5623  000B66  0E01               	movlw	1
  5624  000B68  6E18               	movwf	delay_ms@ms+1,c
  5625  000B6A  0EF4               	movlw	244
  5626  000B6C  6E17               	movwf	delay_ms@ms,c
  5627  000B6E  ECF0  F008         	call	_delay_ms	;wreg free
  5628                           
  5629                           ;ST7735_TFT.c: 234: write_command(0xB1);
  5630  000B72  0EB1               	movlw	177
  5631  000B74  EC9D  F00A         	call	_write_command
  5632                           
  5633                           ;ST7735_TFT.c: 235: write_data(0x01);
  5634  000B78  0E01               	movlw	1
  5635  000B7A  EC95  F00A         	call	_write_data
  5636                           
  5637                           ;ST7735_TFT.c: 236: write_data(0x2C);
  5638  000B7E  0E2C               	movlw	44
  5639  000B80  EC95  F00A         	call	_write_data
  5640                           
  5641                           ;ST7735_TFT.c: 237: write_data(0x2D);
  5642  000B84  0E2D               	movlw	45
  5643  000B86  EC95  F00A         	call	_write_data
  5644                           
  5645                           ;ST7735_TFT.c: 238: write_command(0xB2);
  5646  000B8A  0EB2               	movlw	178
  5647  000B8C  EC9D  F00A         	call	_write_command
  5648                           
  5649                           ;ST7735_TFT.c: 239: write_data(0x01);
  5650  000B90  0E01               	movlw	1
  5651  000B92  EC95  F00A         	call	_write_data
  5652                           
  5653                           ;ST7735_TFT.c: 240: write_data(0x2C);
  5654  000B96  0E2C               	movlw	44
  5655  000B98  EC95  F00A         	call	_write_data
  5656                           
  5657                           ;ST7735_TFT.c: 241: write_data(0x2D);
  5658  000B9C  0E2D               	movlw	45
  5659  000B9E  EC95  F00A         	call	_write_data
  5660                           
  5661                           ;ST7735_TFT.c: 242: write_command(0xB3);
  5662  000BA2  0EB3               	movlw	179
  5663  000BA4  EC9D  F00A         	call	_write_command
  5664                           
  5665                           ;ST7735_TFT.c: 243: write_data(0x01);
  5666  000BA8  0E01               	movlw	1
  5667  000BAA  EC95  F00A         	call	_write_data
  5668                           
  5669                           ;ST7735_TFT.c: 244: write_data(0x2C);
  5670  000BAE  0E2C               	movlw	44
  5671  000BB0  EC95  F00A         	call	_write_data
  5672                           
  5673                           ;ST7735_TFT.c: 245: write_data(0x2D);
  5674  000BB4  0E2D               	movlw	45
  5675  000BB6  EC95  F00A         	call	_write_data
  5676                           
  5677                           ;ST7735_TFT.c: 246: write_data(0x01);
  5678  000BBA  0E01               	movlw	1
  5679  000BBC  EC95  F00A         	call	_write_data
  5680                           
  5681                           ;ST7735_TFT.c: 247: write_data(0x2C);
  5682  000BC0  0E2C               	movlw	44
  5683  000BC2  EC95  F00A         	call	_write_data
  5684                           
  5685                           ;ST7735_TFT.c: 248: write_data(0x2D);
  5686  000BC6  0E2D               	movlw	45
  5687  000BC8  EC95  F00A         	call	_write_data
  5688                           
  5689                           ;ST7735_TFT.c: 249: write_command(0xB4);
  5690  000BCC  0EB4               	movlw	180
  5691  000BCE  EC9D  F00A         	call	_write_command
  5692                           
  5693                           ;ST7735_TFT.c: 250: write_data(0x07);
  5694  000BD2  0E07               	movlw	7
  5695  000BD4  EC95  F00A         	call	_write_data
  5696                           
  5697                           ;ST7735_TFT.c: 251: write_command(0xC0);
  5698  000BD8  0EC0               	movlw	192
  5699  000BDA  EC9D  F00A         	call	_write_command
  5700                           
  5701                           ;ST7735_TFT.c: 252: write_data(0xA2);
  5702  000BDE  0EA2               	movlw	162
  5703  000BE0  EC95  F00A         	call	_write_data
  5704                           
  5705                           ;ST7735_TFT.c: 253: write_data(0x02);
  5706  000BE4  0E02               	movlw	2
  5707  000BE6  EC95  F00A         	call	_write_data
  5708                           
  5709                           ;ST7735_TFT.c: 254: write_data(0x84);
  5710  000BEA  0E84               	movlw	132
  5711  000BEC  EC95  F00A         	call	_write_data
  5712                           
  5713                           ;ST7735_TFT.c: 255: write_command(0xC1);
  5714  000BF0  0EC1               	movlw	193
  5715  000BF2  EC9D  F00A         	call	_write_command
  5716                           
  5717                           ;ST7735_TFT.c: 256: write_data(0xC5);
  5718  000BF6  0EC5               	movlw	197
  5719  000BF8  EC95  F00A         	call	_write_data
  5720                           
  5721                           ;ST7735_TFT.c: 257: write_command(0xC2);
  5722  000BFC  0EC2               	movlw	194
  5723  000BFE  EC9D  F00A         	call	_write_command
  5724                           
  5725                           ;ST7735_TFT.c: 258: write_data(0x0A);
  5726  000C02  0E0A               	movlw	10
  5727  000C04  EC95  F00A         	call	_write_data
  5728                           
  5729                           ;ST7735_TFT.c: 259: write_data(0x00);
  5730  000C08  0E00               	movlw	0
  5731  000C0A  EC95  F00A         	call	_write_data
  5732                           
  5733                           ;ST7735_TFT.c: 260: write_command(0xC3);
  5734  000C0E  0EC3               	movlw	195
  5735  000C10  EC9D  F00A         	call	_write_command
  5736                           
  5737                           ;ST7735_TFT.c: 261: write_data(0x8A);
  5738  000C14  0E8A               	movlw	138
  5739  000C16  EC95  F00A         	call	_write_data
  5740                           
  5741                           ;ST7735_TFT.c: 262: write_data(0x2A);
  5742  000C1A  0E2A               	movlw	42
  5743  000C1C  EC95  F00A         	call	_write_data
  5744                           
  5745                           ;ST7735_TFT.c: 263: write_command(0xC4);
  5746  000C20  0EC4               	movlw	196
  5747  000C22  EC9D  F00A         	call	_write_command
  5748                           
  5749                           ;ST7735_TFT.c: 264: write_data(0x8A);
  5750  000C26  0E8A               	movlw	138
  5751  000C28  EC95  F00A         	call	_write_data
  5752                           
  5753                           ;ST7735_TFT.c: 265: write_data(0xEE);
  5754  000C2C  0EEE               	movlw	238
  5755  000C2E  EC95  F00A         	call	_write_data
  5756                           
  5757                           ;ST7735_TFT.c: 266: write_command(0xC5);
  5758  000C32  0EC5               	movlw	197
  5759  000C34  EC9D  F00A         	call	_write_command
  5760                           
  5761                           ;ST7735_TFT.c: 267: write_data(0x0E);
  5762  000C38  0E0E               	movlw	14
  5763  000C3A  EC95  F00A         	call	_write_data
  5764                           
  5765                           ;ST7735_TFT.c: 268: write_command(0x20);
  5766  000C3E  0E20               	movlw	32
  5767  000C40  EC9D  F00A         	call	_write_command
  5768                           
  5769                           ;ST7735_TFT.c: 269: write_command(0x36);
  5770  000C44  0E36               	movlw	54
  5771  000C46  EC9D  F00A         	call	_write_command
  5772                           
  5773                           ;ST7735_TFT.c: 270: write_data(0xC8);
  5774  000C4A  0EC8               	movlw	200
  5775  000C4C  EC95  F00A         	call	_write_data
  5776                           
  5777                           ;ST7735_TFT.c: 271: write_command(0x3A);
  5778  000C50  0E3A               	movlw	58
  5779  000C52  EC9D  F00A         	call	_write_command
  5780                           
  5781                           ;ST7735_TFT.c: 272: write_data(0x05);
  5782  000C56  0E05               	movlw	5
  5783  000C58  EC95  F00A         	call	_write_data
  5784  000C5C  0012               	return		;funcret
  5785  000C5E                     __end_of_Rcmd1:
  5786                           	opt stack 0
  5787                           tblptru	equ	0xFF8
  5788                           tblptrh	equ	0xFF7
  5789                           tblptrl	equ	0xFF6
  5790                           tablat	equ	0xFF5
  5791                           prodh	equ	0xFF4
  5792                           prodl	equ	0xFF3
  5793                           intcon	equ	0xFF2
  5794                           intcon2	equ	0xFF1
  5795                           postinc0	equ	0xFEE
  5796                           wreg	equ	0xFE8
  5797                           postdec1	equ	0xFE5
  5798                           fsr1l	equ	0xFE1
  5799                           indf2	equ	0xFDF
  5800                           postinc2	equ	0xFDE
  5801                           postdec2	equ	0xFDD
  5802                           fsr2h	equ	0xFDA
  5803                           fsr2l	equ	0xFD9
  5804                           status	equ	0xFD8
  5805                           
  5806 ;; *************** function _write_data *****************
  5807 ;; Defined at:
  5808 ;;		line 156 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  data_           1    wreg     unsigned char 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  data_           1   18[COMRAM] unsigned char 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;		None               void
  5815 ;; Registers used:
  5816 ;;		wreg, status,2, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;Total ram usage:        1 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    4
  5829 ;; This function calls:
  5830 ;;		_spiwrite
  5831 ;; This function is called by:
  5832 ;;		_Rcmd1
  5833 ;;		_Rcmd2red
  5834 ;;		_Rcmd3
  5835 ;;		_setAddrWindow
  5836 ;;		_drawPixel
  5837 ;;		_TFT_GreenTab_Initialize
  5838 ;;		_Bcmd
  5839 ;;		_setScrollDefinition
  5840 ;;		_Rcmd2green
  5841 ;;		_VerticalScroll
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text25
  5846  00152A                     __ptext25:
  5847                           	opt stack 0
  5848  00152A                     _write_data:
  5849                           	opt stack 22
  5850                           
  5851                           ;incstack = 0
  5852                           ;write_data@data_ stored from wreg
  5853  00152A  6E13               	movwf	write_data@data_,c
  5854                           
  5855                           ;ST7735_TFT.c: 158: PORTCbits.RC4 = 0;
  5856  00152C  9882               	bcf	3970,4,c	;volatile
  5857                           
  5858                           ;ST7735_TFT.c: 159: PORTCbits.RC2 = 1;
  5859  00152E  8482               	bsf	3970,2,c	;volatile
  5860                           
  5861                           ;ST7735_TFT.c: 160: spiwrite(data_);
  5862  001530  5013               	movf	write_data@data_,w,c
  5863  001532  EC6F  F00A         	call	_spiwrite
  5864                           
  5865                           ;ST7735_TFT.c: 161: PORTCbits.RC4 = 1;
  5866  001536  8882               	bsf	3970,4,c	;volatile
  5867  001538  0012               	return		;funcret
  5868  00153A                     __end_of_write_data:
  5869                           	opt stack 0
  5870                           tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           intcon	equ	0xFF2
  5877                           intcon2	equ	0xFF1
  5878                           postinc0	equ	0xFEE
  5879                           wreg	equ	0xFE8
  5880                           postdec1	equ	0xFE5
  5881                           fsr1l	equ	0xFE1
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           postdec2	equ	0xFDD
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8
  5888                           
  5889 ;; *************** function _write_command *****************
  5890 ;; Defined at:
  5891 ;;		line 145 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  cmd_            1    wreg     unsigned char 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  cmd_            1   18[COMRAM] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;		None               void
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;Total ram usage:        1 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    4
  5912 ;; This function calls:
  5913 ;;		_spiwrite
  5914 ;; This function is called by:
  5915 ;;		_Rcmd1
  5916 ;;		_Rcmd2red
  5917 ;;		_Rcmd3
  5918 ;;		_setAddrWindow
  5919 ;;		_TFT_GreenTab_Initialize
  5920 ;;		_Bcmd
  5921 ;;		_setScrollDefinition
  5922 ;;		_Rcmd2green
  5923 ;;		_VerticalScroll
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text26
  5928  00153A                     __ptext26:
  5929                           	opt stack 0
  5930  00153A                     _write_command:
  5931                           	opt stack 22
  5932                           
  5933                           ;incstack = 0
  5934                           ;write_command@cmd_ stored from wreg
  5935  00153A  6E13               	movwf	write_command@cmd_,c
  5936                           
  5937                           ;ST7735_TFT.c: 147: PORTCbits.RC4 = 0;
  5938  00153C  9882               	bcf	3970,4,c	;volatile
  5939                           
  5940                           ;ST7735_TFT.c: 149: PORTCbits.RC2 = 0;
  5941  00153E  9482               	bcf	3970,2,c	;volatile
  5942                           
  5943                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
  5944  001540  5013               	movf	write_command@cmd_,w,c
  5945  001542  EC6F  F00A         	call	_spiwrite
  5946                           
  5947                           ;ST7735_TFT.c: 152: PORTCbits.RC4 = 1;
  5948  001546  8882               	bsf	3970,4,c	;volatile
  5949  001548  0012               	return		;funcret
  5950  00154A                     __end_of_write_command:
  5951                           	opt stack 0
  5952                           tblptru	equ	0xFF8
  5953                           tblptrh	equ	0xFF7
  5954                           tblptrl	equ	0xFF6
  5955                           tablat	equ	0xFF5
  5956                           prodh	equ	0xFF4
  5957                           prodl	equ	0xFF3
  5958                           intcon	equ	0xFF2
  5959                           intcon2	equ	0xFF1
  5960                           postinc0	equ	0xFEE
  5961                           wreg	equ	0xFE8
  5962                           postdec1	equ	0xFE5
  5963                           fsr1l	equ	0xFE1
  5964                           indf2	equ	0xFDF
  5965                           postinc2	equ	0xFDE
  5966                           postdec2	equ	0xFDD
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function _spiwrite *****************
  5972 ;; Defined at:
  5973 ;;		line 136 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  spidata         1    wreg     unsigned char 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  spidata         1   17[COMRAM] unsigned char 
  5978 ;;  x               1   16[COMRAM] unsigned char 
  5979 ;; Return value:  Size  Location     Type
  5980 ;;		None               void
  5981 ;; Registers used:
  5982 ;;		wreg
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;Total ram usage:        2 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    3
  5995 ;; This function calls:
  5996 ;;		Nothing
  5997 ;; This function is called by:
  5998 ;;		_write_command
  5999 ;;		_write_data
  6000 ;;		_drawFastVLine
  6001 ;;		_fillRectangle
  6002 ;;		_drawFastHLine
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text27
  6007  0014DE                     __ptext27:
  6008                           	opt stack 0
  6009  0014DE                     _spiwrite:
  6010                           	opt stack 24
  6011                           
  6012                           ;incstack = 0
  6013                           ;spiwrite@spidata stored from wreg
  6014  0014DE  6E12               	movwf	spiwrite@spidata,c
  6015                           
  6016                           ;ST7735_TFT.c: 138: char x;
  6017                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
  6018  0014E0  969E               	bcf	3998,3,c	;volatile
  6019                           
  6020                           ;ST7735_TFT.c: 140: x = SSPBUF;
  6021  0014E2  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6022                           
  6023                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
  6024  0014E6  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6025                           
  6026                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
  6027  0014EA  D000               	goto	l217
  6028  0014EC                     l217:
  6029  0014EC  A0C7               	btfss	4039,0,c	;volatile
  6030  0014EE  D7FE               	goto	l217
  6031  0014F0  0012               	return		;funcret
  6032  0014F2                     __end_of_spiwrite:
  6033                           	opt stack 0
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           intcon	equ	0xFF2
  6041                           intcon2	equ	0xFF1
  6042                           postinc0	equ	0xFEE
  6043                           wreg	equ	0xFE8
  6044                           postdec1	equ	0xFE5
  6045                           fsr1l	equ	0xFE1
  6046                           indf2	equ	0xFDF
  6047                           postinc2	equ	0xFDE
  6048                           postdec2	equ	0xFDD
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function _LCD_Reset *****************
  6054 ;; Defined at:
  6055 ;;		line 164 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;		None
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;		None
  6060 ;; Return value:  Size  Location     Type
  6061 ;;		None               void
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;Total ram usage:        0 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    5
  6076 ;; This function calls:
  6077 ;;		_delay_ms
  6078 ;; This function is called by:
  6079 ;;		_Initialize_LCD_Screen
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text28
  6084  001506                     __ptext28:
  6085                           	opt stack 0
  6086  001506                     _LCD_Reset:
  6087                           	opt stack 24
  6088                           
  6089                           ;ST7735_TFT.c: 166: PORTDbits.RD0 = 0;
  6090                           
  6091                           ;incstack = 0
  6092  001506  9083               	bcf	3971,0,c	;volatile
  6093                           
  6094                           ;ST7735_TFT.c: 167: delay_ms(100);
  6095  001508  0E00               	movlw	0
  6096  00150A  6E18               	movwf	delay_ms@ms+1,c
  6097  00150C  0E64               	movlw	100
  6098  00150E  6E17               	movwf	delay_ms@ms,c
  6099  001510  ECF0  F008         	call	_delay_ms	;wreg free
  6100                           
  6101                           ;ST7735_TFT.c: 168: PORTDbits.RD0 = 1;
  6102  001514  8083               	bsf	3971,0,c	;volatile
  6103  001516  0012               	return		;funcret
  6104  001518                     __end_of_LCD_Reset:
  6105                           	opt stack 0
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           intcon	equ	0xFF2
  6113                           intcon2	equ	0xFF1
  6114                           postinc0	equ	0xFEE
  6115                           wreg	equ	0xFE8
  6116                           postdec1	equ	0xFE5
  6117                           fsr1l	equ	0xFE1
  6118                           indf2	equ	0xFDF
  6119                           postinc2	equ	0xFDE
  6120                           postdec2	equ	0xFDD
  6121                           fsr2h	equ	0xFDA
  6122                           fsr2l	equ	0xFD9
  6123                           status	equ	0xFD8
  6124                           
  6125 ;; *************** function _delay_ms *****************
  6126 ;; Defined at:
  6127 ;;		line 11 in file "../Lab10_S3_Sample/ST7735_TFT.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;  ms              2   22[COMRAM] int 
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;  count           2   26[COMRAM] int 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;		None               void
  6134 ;; Registers used:
  6135 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6141 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6142 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;Total ram usage:        6 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    4
  6148 ;; This function calls:
  6149 ;;		___wmul
  6150 ;; This function is called by:
  6151 ;;		_LCD_Reset
  6152 ;;		_Rcmd1
  6153 ;;		_Rcmd3
  6154 ;;		_Bcmd
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           	psect	text29
  6159  0011E0                     __ptext29:
  6160                           	opt stack 0
  6161  0011E0                     _delay_ms:
  6162                           	opt stack 23
  6163                           
  6164                           ;ST7735_TFT.c: 17: int count;
  6165                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  6166                           
  6167                           ;incstack = 0
  6168  0011E0  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6169  0011E4  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6170  0011E8  0E00               	movlw	0
  6171  0011EA  6E14               	movwf	___wmul@multiplicand+1,c
  6172  0011EC  0EFA               	movlw	250
  6173  0011EE  6E13               	movwf	___wmul@multiplicand,c
  6174  0011F0  EC24  F00A         	call	___wmul	;wreg free
  6175  0011F4  C011  F01B         	movff	?___wmul,delay_ms@count
  6176  0011F8  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6177                           
  6178                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  6179  0011FC  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6180  001200  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6181  001204  1E19               	comf	??_delay_ms,f,c
  6182  001206  1E1A               	comf	??_delay_ms+1,f,c
  6183  001208  4A19               	infsnz	??_delay_ms,f,c
  6184  00120A  2A1A               	incf	??_delay_ms+1,f,c
  6185  00120C  0EFF               	movlw	255
  6186  00120E  2419               	addwf	??_delay_ms,w,c
  6187  001210  6E1B               	movwf	delay_ms@count,c
  6188  001212  0EFF               	movlw	255
  6189  001214  201A               	addwfc	??_delay_ms+1,w,c
  6190  001216  6E1C               	movwf	delay_ms@count+1,c
  6191                           
  6192                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  6193  001218  0EB8               	movlw	184
  6194  00121A  6EB1               	movwf	4017,c	;volatile
  6195                           
  6196                           ;ST7735_TFT.c: 23: TMR0L = count & 0x00ff;
  6197  00121C  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  6198                           
  6199                           ;ST7735_TFT.c: 24: TMR0H = count >> 8;
  6200  001220  501C               	movf	delay_ms@count+1,w,c
  6201  001222  6ED7               	movwf	4055,c	;volatile
  6202                           
  6203                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  6204  001224  92A1               	bcf	4001,1,c	;volatile
  6205                           
  6206                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  6207  001226  80B1               	bsf	4017,0,c	;volatile
  6208                           
  6209                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  6210  001228  D000               	goto	l207
  6211  00122A                     l207:
  6212  00122A  A2A1               	btfss	4001,1,c	;volatile
  6213  00122C  D7FE               	goto	l207
  6214                           
  6215                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  6216  00122E  90B1               	bcf	4017,0,c	;volatile
  6217  001230  0012               	return		;funcret
  6218  001232                     __end_of_delay_ms:
  6219                           	opt stack 0
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           intcon2	equ	0xFF1
  6228                           postinc0	equ	0xFEE
  6229                           wreg	equ	0xFE8
  6230                           postdec1	equ	0xFE5
  6231                           fsr1l	equ	0xFE1
  6232                           indf2	equ	0xFDF
  6233                           postinc2	equ	0xFDE
  6234                           postdec2	equ	0xFDD
  6235                           fsr2h	equ	0xFDA
  6236                           fsr2l	equ	0xFD9
  6237                           status	equ	0xFD8
  6238                           
  6239 ;; *************** function ___wmul *****************
  6240 ;; Defined at:
  6241 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;  multiplier      2   16[COMRAM] unsigned int 
  6244 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  product         2   20[COMRAM] unsigned int 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  2   16[COMRAM] unsigned int 
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0, prodl, prodh
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6256 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6259 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;Total ram usage:        6 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    3
  6263 ;; This function calls:
  6264 ;;		Nothing
  6265 ;; This function is called by:
  6266 ;;		_delay_ms
  6267 ;;		_drawChar
  6268 ;;		_Read_Volt
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text30
  6273  001448                     __ptext30:
  6274                           	opt stack 0
  6275  001448                     ___wmul:
  6276                           	opt stack 25
  6277                           
  6278                           ;incstack = 0
  6279  001448  5011               	movf	___wmul@multiplier,w,c
  6280  00144A  0213               	mulwf	___wmul@multiplicand,c
  6281  00144C  CFF3 F015          	movff	prodl,___wmul@product
  6282  001450  CFF4 F016          	movff	prodh,___wmul@product+1
  6283  001454  5011               	movf	___wmul@multiplier,w,c
  6284  001456  0214               	mulwf	___wmul@multiplicand+1,c
  6285  001458  50F3               	movf	prodl,w,c
  6286  00145A  2616               	addwf	___wmul@product+1,f,c
  6287  00145C  5012               	movf	___wmul@multiplier+1,w,c
  6288  00145E  0213               	mulwf	___wmul@multiplicand,c
  6289  001460  50F3               	movf	prodl,w,c
  6290  001462  2616               	addwf	___wmul@product+1,f,c
  6291  001464  C015  F011         	movff	___wmul@product,?___wmul
  6292  001468  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6293  00146C  D000               	goto	l585
  6294  00146E                     l585:
  6295  00146E  0012               	return		;funcret
  6296  001470                     __end_of___wmul:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           intcon	equ	0xFF2
  6305                           intcon2	equ	0xFF1
  6306                           postinc0	equ	0xFEE
  6307                           wreg	equ	0xFE8
  6308                           postdec1	equ	0xFE5
  6309                           fsr1l	equ	0xFE1
  6310                           indf2	equ	0xFDF
  6311                           postinc2	equ	0xFDE
  6312                           postdec2	equ	0xFDD
  6313                           fsr2h	equ	0xFDA
  6314                           fsr2l	equ	0xFD9
  6315                           status	equ	0xFD8
  6316                           
  6317 ;; *************** function _Init_UART *****************
  6318 ;; Defined at:
  6319 ;;		line 24 in file "../Lab10_S3_Sample/utils.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;		None               void
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;Total ram usage:        0 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    4
  6340 ;; This function calls:
  6341 ;;		_OpenUSART
  6342 ;; This function is called by:
  6343 ;;		_main
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text31
  6348  0014F2                     __ptext31:
  6349                           	opt stack 0
  6350  0014F2                     _Init_UART:
  6351                           	opt stack 26
  6352                           
  6353                           ;utils.c: 26: OpenUSART (0b01111111 & 0b10111111 &
  6354                           ;utils.c: 27: 0b11111110 & 0b11111101 & 0b11111111 &
  6355                           ;utils.c: 28: 0b11111111, 25);
  6356                           
  6357                           ;incstack = 0
  6358  0014F2  0E00               	movlw	0
  6359  0014F4  6E12               	movwf	OpenUSART@spbrg+1,c
  6360  0014F6  0E19               	movlw	25
  6361  0014F8  6E11               	movwf	OpenUSART@spbrg,c
  6362  0014FA  0E3C               	movlw	60
  6363  0014FC  EC33  F008         	call	_OpenUSART
  6364                           
  6365                           ;utils.c: 29: OSCCON = 0x70;
  6366  001500  0E70               	movlw	112
  6367  001502  6ED3               	movwf	4051,c	;volatile
  6368  001504  0012               	return		;funcret
  6369  001506                     __end_of_Init_UART:
  6370                           	opt stack 0
  6371                           tblptru	equ	0xFF8
  6372                           tblptrh	equ	0xFF7
  6373                           tblptrl	equ	0xFF6
  6374                           tablat	equ	0xFF5
  6375                           prodh	equ	0xFF4
  6376                           prodl	equ	0xFF3
  6377                           intcon	equ	0xFF2
  6378                           intcon2	equ	0xFF1
  6379                           postinc0	equ	0xFEE
  6380                           wreg	equ	0xFE8
  6381                           postdec1	equ	0xFE5
  6382                           fsr1l	equ	0xFE1
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _OpenUSART *****************
  6391 ;; Defined at:
  6392 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  config          1    wreg     unsigned char 
  6395 ;;  spbrg           2   16[COMRAM] unsigned int 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  config          1   18[COMRAM] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;		None               void
  6400 ;; Registers used:
  6401 ;;		wreg, status,2
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;Total ram usage:        3 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    3
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		_Init_UART
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text32
  6422  001066                     __ptext32:
  6423                           	opt stack 0
  6424  001066                     _OpenUSART:
  6425                           	opt stack 26
  6426                           
  6427                           ;incstack = 0
  6428                           ;OpenUSART@config stored from wreg
  6429  001066  6E13               	movwf	OpenUSART@config,c
  6430  001068  0E00               	movlw	0
  6431  00106A  6EAC               	movwf	4012,c	;volatile
  6432  00106C  0E00               	movlw	0
  6433  00106E  6EAB               	movwf	4011,c	;volatile
  6434  001070  A013               	btfss	OpenUSART@config,0,c
  6435  001072  D002               	goto	l3744
  6436  001074  88AC               	bsf	4012,4,c	;volatile
  6437  001076  D000               	goto	l3744
  6438  001078                     l3744:
  6439  001078  A213               	btfss	OpenUSART@config,1,c
  6440  00107A  D003               	goto	l3748
  6441  00107C  8CAC               	bsf	4012,6,c	;volatile
  6442  00107E  8CAB               	bsf	4011,6,c	;volatile
  6443  001080  D000               	goto	l3748
  6444  001082                     l3748:
  6445  001082  A413               	btfss	OpenUSART@config,2,c
  6446  001084  D002               	goto	l3752
  6447  001086  8EAC               	bsf	4012,7,c	;volatile
  6448  001088  D000               	goto	l3752
  6449  00108A                     l3752:
  6450  00108A  A613               	btfss	OpenUSART@config,3,c
  6451  00108C  D002               	goto	l573
  6452  00108E  88AB               	bsf	4011,4,c	;volatile
  6453  001090  D002               	goto	l3756
  6454  001092                     l573:
  6455  001092  8AAB               	bsf	4011,5,c	;volatile
  6456  001094  D000               	goto	l3756
  6457  001096                     l3756:
  6458  001096  B813               	btfsc	OpenUSART@config,4,c
  6459  001098  84AC               	bsf	4012,2,c	;volatile
  6460  00109A  989E               	bcf	3998,4,c	;volatile
  6461  00109C  AA13               	btfss	OpenUSART@config,5,c
  6462  00109E  D002               	goto	l3764
  6463  0010A0  86AB               	bsf	4011,3,c	;volatile
  6464  0010A2  D000               	goto	l3764
  6465  0010A4                     l3764:
  6466  0010A4  AC13               	btfss	OpenUSART@config,6,c
  6467  0010A6  D002               	goto	l577
  6468  0010A8  8A9D               	bsf	3997,5,c	;volatile
  6469  0010AA  D001               	goto	l578
  6470  0010AC                     l577:
  6471  0010AC  9A9D               	bcf	3997,5,c	;volatile
  6472  0010AE                     l578:
  6473  0010AE  9A9E               	bcf	3998,5,c	;volatile
  6474  0010B0  AE13               	btfss	OpenUSART@config,7,c
  6475  0010B2  D002               	goto	l579
  6476  0010B4  889D               	bsf	3997,4,c	;volatile
  6477  0010B6  D001               	goto	l580
  6478  0010B8                     l579:
  6479  0010B8  989D               	bcf	3997,4,c	;volatile
  6480  0010BA                     l580:
  6481  0010BA  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  6482  0010BE  5012               	movf	OpenUSART@spbrg+1,w,c
  6483  0010C0  6EB0               	movwf	4016,c	;volatile
  6484  0010C2  8AAC               	bsf	4012,5,c	;volatile
  6485  0010C4  8EAB               	bsf	4011,7,c	;volatile
  6486  0010C6  9C94               	bcf	3988,6,c	;volatile
  6487  0010C8  8E94               	bsf	3988,7,c	;volatile
  6488  0010CA  B8AC               	btfsc	4012,4,c	;volatile
  6489  0010CC  BEAC               	btfsc	4012,7,c	;volatile
  6490  0010CE  D002               	goto	l582
  6491  0010D0  8C94               	bsf	3988,6,c	;volatile
  6492  0010D2  D000               	goto	l582
  6493  0010D4                     l582:
  6494  0010D4  0012               	return		;funcret
  6495  0010D6                     __end_of_OpenUSART:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           intcon2	equ	0xFF1
  6505                           postinc0	equ	0xFEE
  6506                           wreg	equ	0xFE8
  6507                           postdec1	equ	0xFE5
  6508                           fsr1l	equ	0xFE1
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _Init_Interrupt *****************
  6517 ;; Defined at:
  6518 ;;		line 16 in file "../Lab10_S3_Sample/Interrupt.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;		None
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;		None
  6523 ;; Return value:  Size  Location     Type
  6524 ;;		None               void
  6525 ;; Registers used:
  6526 ;;		wreg, status,2
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;Total ram usage:        0 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    3
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_main
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           	psect	text33
  6547  0014C6                     __ptext33:
  6548                           	opt stack 0
  6549  0014C6                     _Init_Interrupt:
  6550                           	opt stack 27
  6551                           
  6552                           ;Interrupt.c: 18: INTCON3bits.INT2IF = 0;
  6553                           
  6554                           ;incstack = 0
  6555  0014C6  92F0               	bcf	intcon3,1,c	;volatile
  6556                           
  6557                           ;Interrupt.c: 19: INTCON2bits.INTEDG2 = 0;
  6558  0014C8  98F1               	bcf	intcon2,4,c	;volatile
  6559                           
  6560                           ;Interrupt.c: 20: INTCON3bits.INT2IE = 1;
  6561  0014CA  88F0               	bsf	intcon3,4,c	;volatile
  6562                           
  6563                           ;Interrupt.c: 22: TMR1H = 0;
  6564  0014CC  0E00               	movlw	0
  6565  0014CE  6ECF               	movwf	4047,c	;volatile
  6566                           
  6567                           ;Interrupt.c: 23: TMR1L = 0;
  6568  0014D0  0E00               	movlw	0
  6569  0014D2  6ECE               	movwf	4046,c	;volatile
  6570                           
  6571                           ;Interrupt.c: 24: PIR1bits.TMR1IF = 0;
  6572  0014D4  909E               	bcf	3998,0,c	;volatile
  6573                           
  6574                           ;Interrupt.c: 25: PIE1bits.TMR1IE = 1;
  6575  0014D6  809D               	bsf	3997,0,c	;volatile
  6576                           
  6577                           ;Interrupt.c: 26: INTCONbits.PEIE = 1;
  6578  0014D8  8CF2               	bsf	intcon,6,c	;volatile
  6579                           
  6580                           ;Interrupt.c: 27: INTCONbits.GIE = 1;
  6581  0014DA  8EF2               	bsf	intcon,7,c	;volatile
  6582  0014DC  0012               	return		;funcret
  6583  0014DE                     __end_of_Init_Interrupt:
  6584                           	opt stack 0
  6585                           tblptru	equ	0xFF8
  6586                           tblptrh	equ	0xFF7
  6587                           tblptrl	equ	0xFF6
  6588                           tablat	equ	0xFF5
  6589                           prodh	equ	0xFF4
  6590                           prodl	equ	0xFF3
  6591                           intcon	equ	0xFF2
  6592                           intcon2	equ	0xFF1
  6593                           intcon3	equ	0xFF0
  6594                           postinc0	equ	0xFEE
  6595                           wreg	equ	0xFE8
  6596                           postdec1	equ	0xFE5
  6597                           fsr1l	equ	0xFE1
  6598                           indf2	equ	0xFDF
  6599                           postinc2	equ	0xFDE
  6600                           postdec2	equ	0xFDD
  6601                           fsr2h	equ	0xFDA
  6602                           fsr2l	equ	0xFD9
  6603                           status	equ	0xFD8
  6604                           
  6605 ;; *************** function _Enable_INT_Interrupt *****************
  6606 ;; Defined at:
  6607 ;;		line 30 in file "../Lab10_S3_Sample/Interrupt.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;		None               void
  6614 ;; Registers used:
  6615 ;;		None
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;Total ram usage:        0 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    3
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_main
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text34
  6636  00157E                     __ptext34:
  6637                           	opt stack 0
  6638  00157E                     _Enable_INT_Interrupt:
  6639                           	opt stack 27
  6640                           
  6641                           ;Interrupt.c: 32: INTCON3bits.INT2IE = 1;
  6642                           
  6643                           ;incstack = 0
  6644  00157E  88F0               	bsf	intcon3,4,c	;volatile
  6645                           
  6646                           ;Interrupt.c: 33: INTCON2bits.INTEDG2 = 0;
  6647  001580  98F1               	bcf	intcon2,4,c	;volatile
  6648  001582  0012               	return		;funcret
  6649  001584                     __end_of_Enable_INT_Interrupt:
  6650                           	opt stack 0
  6651                           tblptru	equ	0xFF8
  6652                           tblptrh	equ	0xFF7
  6653                           tblptrl	equ	0xFF6
  6654                           tablat	equ	0xFF5
  6655                           prodh	equ	0xFF4
  6656                           prodl	equ	0xFF3
  6657                           intcon	equ	0xFF2
  6658                           intcon2	equ	0xFF1
  6659                           intcon3	equ	0xFF0
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           postdec1	equ	0xFE5
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function _Deactivate_Buzzer *****************
  6672 ;; Defined at:
  6673 ;;		line 89 in file "../Lab10_S3_Sample/utils.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;		None
  6678 ;; Return value:  Size  Location     Type
  6679 ;;		None               void
  6680 ;; Registers used:
  6681 ;;		wreg, status,2
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;Total ram usage:        0 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    3
  6694 ;; This function calls:
  6695 ;;		Nothing
  6696 ;; This function is called by:
  6697 ;;		_main
  6698 ;;		_Do_Beep
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text35
  6703  00156E                     __ptext35:
  6704                           	opt stack 0
  6705  00156E                     _Deactivate_Buzzer:
  6706                           	opt stack 27
  6707                           
  6708                           ;utils.c: 91: CCP2CON = 0x0;
  6709                           
  6710                           ;incstack = 0
  6711  00156E  0E00               	movlw	0
  6712  001570  6EBA               	movwf	4026,c	;volatile
  6713                           
  6714                           ;utils.c: 92: PORTCbits.RC1 = 0;
  6715  001572  9282               	bcf	3970,1,c	;volatile
  6716  001574  0012               	return		;funcret
  6717  001576                     __end_of_Deactivate_Buzzer:
  6718                           	opt stack 0
  6719                           tblptru	equ	0xFF8
  6720                           tblptrh	equ	0xFF7
  6721                           tblptrl	equ	0xFF6
  6722                           tablat	equ	0xFF5
  6723                           prodh	equ	0xFF4
  6724                           prodl	equ	0xFF3
  6725                           intcon	equ	0xFF2
  6726                           intcon2	equ	0xFF1
  6727                           intcon3	equ	0xFF0
  6728                           postinc0	equ	0xFEE
  6729                           wreg	equ	0xFE8
  6730                           postdec1	equ	0xFE5
  6731                           fsr1l	equ	0xFE1
  6732                           indf2	equ	0xFDF
  6733                           postinc2	equ	0xFDE
  6734                           postdec2	equ	0xFDD
  6735                           fsr2h	equ	0xFDA
  6736                           fsr2l	equ	0xFD9
  6737                           status	equ	0xFD8
  6738                           
  6739 ;; *************** function _Activate_Buzzer *****************
  6740 ;; Defined at:
  6741 ;;		line 66 in file "../Lab10_S3_Sample/utils.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;		None
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;		None
  6746 ;; Return value:  Size  Location     Type
  6747 ;;		None               void
  6748 ;; Registers used:
  6749 ;;		wreg, status,2
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;Total ram usage:        0 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    3
  6762 ;; This function calls:
  6763 ;;		Nothing
  6764 ;; This function is called by:
  6765 ;;		_main
  6766 ;;		_Do_Beep
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text36
  6771  001518                     __ptext36:
  6772                           	opt stack 0
  6773  001518                     _Activate_Buzzer:
  6774                           	opt stack 27
  6775                           
  6776                           ;utils.c: 68: PR2 = 0b11111001 ;
  6777                           
  6778                           ;incstack = 0
  6779  001518  0EF9               	movlw	249
  6780  00151A  6ECB               	movwf	4043,c	;volatile
  6781                           
  6782                           ;utils.c: 69: T2CON = 0b00000101 ;
  6783  00151C  0E05               	movlw	5
  6784  00151E  6ECA               	movwf	4042,c	;volatile
  6785                           
  6786                           ;utils.c: 70: CCPR2L = 0b01001010 ;
  6787  001520  0E4A               	movlw	74
  6788  001522  6EBB               	movwf	4027,c	;volatile
  6789                           
  6790                           ;utils.c: 71: CCP2CON = 0b00111100 ;
  6791  001524  0E3C               	movlw	60
  6792  001526  6EBA               	movwf	4026,c	;volatile
  6793  001528  0012               	return		;funcret
  6794  00152A                     __end_of_Activate_Buzzer:
  6795                           	opt stack 0
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon	equ	0xFF2
  6803                           intcon2	equ	0xFF1
  6804                           intcon3	equ	0xFF0
  6805                           postinc0	equ	0xFEE
  6806                           wreg	equ	0xFE8
  6807                           postdec1	equ	0xFE5
  6808                           fsr1l	equ	0xFE1
  6809                           indf2	equ	0xFDF
  6810                           postinc2	equ	0xFDE
  6811                           postdec2	equ	0xFDD
  6812                           fsr2h	equ	0xFDA
  6813                           fsr2l	equ	0xFD9
  6814                           status	equ	0xFD8
  6815                           
  6816 ;; *************** function _chkisr *****************
  6817 ;; Defined at:
  6818 ;;		line 36 in file "../Lab10_S3_Sample/Interrupt.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		wreg, status,2, status,0, cstack
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;Total ram usage:       14 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    2
  6839 ;; This function calls:
  6840 ;;		_INTx_isr
  6841 ;;		_TIMER1_isr
  6842 ;; This function is called by:
  6843 ;;		Interrupt level 2
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	intcode
  6848  000008                     __pintcode:
  6849                           	opt stack 0
  6850  000008                     _chkisr:
  6851                           	opt stack 20
  6852                           
  6853                           ;incstack = 0
  6854  000008  CFFA F003          	movff	pclath,??_chkisr
  6855  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6856  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6857  000014  EDF5  F007         	call	int_func,f	;refresh shadow registers
  6858                           pclatu	equ	0xFFB
  6859                           pclath	equ	0xFFA
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           prodh	equ	0xFF4
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           intcon2	equ	0xFF1
  6868                           intcon3	equ	0xFF0
  6869                           postinc0	equ	0xFEE
  6870                           fsr0l	equ	0xFE9
  6871                           wreg	equ	0xFE8
  6872                           postdec1	equ	0xFE5
  6873                           fsr1l	equ	0xFE1
  6874                           indf2	equ	0xFDF
  6875                           postinc2	equ	0xFDE
  6876                           postdec2	equ	0xFDD
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           
  6881                           	psect	intcode_body
  6882  000FEA                     __pintcode_body:
  6883                           	opt stack 20
  6884  000FEA                     int_func:
  6885                           	opt stack 20
  6886  000FEA  0006               	pop		; remove dummy address from shadow register refresh
  6887  000FEC  CFEA F006          	movff	fsr0h,??_chkisr+3
  6888  000FF0  CFE1 F007          	movff	fsr1l,??_chkisr+4
  6889  000FF4  CFE2 F008          	movff	fsr1h,??_chkisr+5
  6890  000FF8  CFD9 F009          	movff	fsr2l,??_chkisr+6
  6891  000FFC  CFDA F00A          	movff	fsr2h,??_chkisr+7
  6892  001000  CFF3 F00B          	movff	prodl,??_chkisr+8
  6893  001004  CFF4 F00C          	movff	prodh,??_chkisr+9
  6894  001008  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  6895  00100C  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  6896  001010  CFF8 F00F          	movff	tblptru,??_chkisr+12
  6897  001014  CFF5 F010          	movff	tablat,??_chkisr+13
  6898                           
  6899                           ;Interrupt.c: 38: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  6900  001018  A09E               	btfss	3998,0,c	;volatile
  6901  00101A  D003               	goto	i2l1978
  6902  00101C  ECAC  F00A         	call	_TIMER1_isr	;wreg free
  6903  001020  D000               	goto	i2l1978
  6904  001022                     i2l1978:
  6905                           
  6906                           ;Interrupt.c: 39: if (INTCON3bits.INT2IF == 1) INTx_isr();
  6907  001022  A2F0               	btfss	intcon3,1,c	;volatile
  6908  001024  D003               	goto	i2l47
  6909  001026  EC1D  F003         	call	_INTx_isr	;wreg free
  6910  00102A  D000               	goto	i2l47
  6911  00102C                     i2l47:
  6912  00102C  C010  FFF5         	movff	??_chkisr+13,tablat
  6913  001030  C00F  FFF8         	movff	??_chkisr+12,tblptru
  6914  001034  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  6915  001038  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  6916  00103C  C00C  FFF4         	movff	??_chkisr+9,prodh
  6917  001040  C00B  FFF3         	movff	??_chkisr+8,prodl
  6918  001044  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  6919  001048  C009  FFD9         	movff	??_chkisr+6,fsr2l
  6920  00104C  C008  FFE2         	movff	??_chkisr+5,fsr1h
  6921  001050  C007  FFE1         	movff	??_chkisr+4,fsr1l
  6922  001054  C006  FFEA         	movff	??_chkisr+3,fsr0h
  6923  001058  C005  FFE9         	movff	??_chkisr+2,fsr0l
  6924  00105C  C004  FFFB         	movff	??_chkisr+1,pclatu
  6925  001060  C003  FFFA         	movff	??_chkisr,pclath
  6926  001064  0011               	retfie		f
  6927  001066                     __end_of_chkisr:
  6928                           	opt stack 0
  6929                           pclatu	equ	0xFFB
  6930                           pclath	equ	0xFFA
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           intcon	equ	0xFF2
  6938                           intcon2	equ	0xFF1
  6939                           intcon3	equ	0xFF0
  6940                           postinc0	equ	0xFEE
  6941                           fsr0h	equ	0xFEA
  6942                           fsr0l	equ	0xFE9
  6943                           wreg	equ	0xFE8
  6944                           postdec1	equ	0xFE5
  6945                           fsr1h	equ	0xFE2
  6946                           fsr1l	equ	0xFE1
  6947                           indf2	equ	0xFDF
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954 ;; *************** function _TIMER1_isr *****************
  6955 ;; Defined at:
  6956 ;;		line 42 in file "../Lab10_S3_Sample/Interrupt.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;		None               void
  6963 ;; Registers used:
  6964 ;;		wreg, status,2
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;Total ram usage:        0 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; This function calls:
  6977 ;;		Nothing
  6978 ;; This function is called by:
  6979 ;;		_chkisr
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           	psect	text38
  6984  001558                     __ptext38:
  6985                           	opt stack 0
  6986  001558                     _TIMER1_isr:
  6987                           	opt stack 21
  6988                           
  6989                           ;Interrupt.c: 44: Nec_State = 0;
  6990                           
  6991                           ;incstack = 0
  6992  001558  0E00               	movlw	0
  6993  00155A  6E6A               	movwf	_Nec_State,c
  6994                           
  6995                           ;Interrupt.c: 45: INTCON2bits.INTEDG2 = 0;
  6996  00155C  98F1               	bcf	intcon2,4,c	;volatile
  6997                           
  6998                           ;Interrupt.c: 46: T1CONbits.TMR1ON = 0;
  6999  00155E  90CD               	bcf	4045,0,c	;volatile
  7000                           
  7001                           ;Interrupt.c: 47: PIR1bits.TMR1IF = 0;
  7002  001560  909E               	bcf	3998,0,c	;volatile
  7003  001562  0012               	return		;funcret
  7004  001564                     __end_of_TIMER1_isr:
  7005                           	opt stack 0
  7006                           pclatu	equ	0xFFB
  7007                           pclath	equ	0xFFA
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           intcon	equ	0xFF2
  7015                           intcon2	equ	0xFF1
  7016                           intcon3	equ	0xFF0
  7017                           postinc0	equ	0xFEE
  7018                           fsr0h	equ	0xFEA
  7019                           fsr0l	equ	0xFE9
  7020                           wreg	equ	0xFE8
  7021                           postdec1	equ	0xFE5
  7022                           fsr1h	equ	0xFE2
  7023                           fsr1l	equ	0xFE1
  7024                           indf2	equ	0xFDF
  7025                           postinc2	equ	0xFDE
  7026                           postdec2	equ	0xFDD
  7027                           fsr2h	equ	0xFDA
  7028                           fsr2l	equ	0xFD9
  7029                           status	equ	0xFD8
  7030                           
  7031 ;; *************** function _INTx_isr *****************
  7032 ;; Defined at:
  7033 ;;		line 56 in file "../Lab10_S3_Sample/Interrupt.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;		None
  7036 ;; Auto vars:     Size  Location     Type
  7037 ;;		None
  7038 ;; Return value:  Size  Location     Type
  7039 ;;		None               void
  7040 ;; Registers used:
  7041 ;;		wreg, status,2, status,0, cstack
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;Total ram usage:        2 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; Hardware stack levels required when called:    1
  7054 ;; This function calls:
  7055 ;;		_Reset_Nec_State
  7056 ;; This function is called by:
  7057 ;;		_chkisr
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           	psect	text39
  7062  00063A                     __ptext39:
  7063                           	opt stack 0
  7064  00063A                     _INTx_isr:
  7065                           	opt stack 20
  7066                           
  7067                           ;Interrupt.c: 58: INTCON3bits.INT2IF = 0;
  7068                           
  7069                           ;incstack = 0
  7070  00063A  92F0               	bcf	intcon3,1,c	;volatile
  7071                           
  7072                           ;Interrupt.c: 59: if (Nec_State != 0)
  7073  00063C  506A               	movf	_Nec_State,w,c
  7074  00063E  B4D8               	btfsc	status,2,c
  7075  000640  D0A1               	goto	i2l1788
  7076                           
  7077                           ;Interrupt.c: 60: {
  7078                           ;Interrupt.c: 61: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7079  000642  50CE               	movf	4046,w,c	;volatile
  7080  000644  CFCF F001          	movff	4047,??_INTx_isr	;volatile
  7081  000648  6A02               	clrf	(??_INTx_isr+1)& (0+255),c
  7082  00064A  C001  F002         	movff	??_INTx_isr,??_INTx_isr+1
  7083  00064E  6A01               	clrf	??_INTx_isr,c
  7084  000650  1001               	iorwf	??_INTx_isr,w,c
  7085  000652  6E63               	movwf	_Time_Elapsed,c
  7086  000654  5002               	movf	??_INTx_isr+1,w,c
  7087  000656  6E64               	movwf	_Time_Elapsed+1,c
  7088                           
  7089                           ;Interrupt.c: 62: TMR1H = 0;
  7090  000658  0E00               	movlw	0
  7091  00065A  6ECF               	movwf	4047,c	;volatile
  7092                           
  7093                           ;Interrupt.c: 63: TMR1L = 0;
  7094  00065C  0E00               	movlw	0
  7095  00065E  6ECE               	movwf	4046,c	;volatile
  7096                           
  7097                           ;Interrupt.c: 64: }
  7098                           ;Interrupt.c: 66: switch(Nec_State)
  7099  000660  D091               	goto	i2l1788
  7100  000662                     i2l1702:
  7101                           
  7102                           ;Interrupt.c: 69: {
  7103                           ;Interrupt.c: 72: TMR1H = 0;
  7104  000662  0E00               	movlw	0
  7105  000664  6ECF               	movwf	4047,c	;volatile
  7106                           
  7107                           ;Interrupt.c: 73: TMR1L = 0;
  7108  000666  0E00               	movlw	0
  7109  000668  6ECE               	movwf	4046,c	;volatile
  7110                           
  7111                           ;Interrupt.c: 74: PIR1bits.TMR1IF = 0;
  7112  00066A  909E               	bcf	3998,0,c	;volatile
  7113                           
  7114                           ;Interrupt.c: 75: T1CON = 0x90;
  7115  00066C  0E90               	movlw	144
  7116  00066E  6ECD               	movwf	4045,c	;volatile
  7117                           
  7118                           ;Interrupt.c: 76: T1CONbits.TMR1ON = 1;
  7119  000670  80CD               	bsf	4045,0,c	;volatile
  7120                           
  7121                           ;Interrupt.c: 77: bit_count = 0;
  7122  000672  0E00               	movlw	0
  7123  000674  6E6C               	movwf	_bit_count,c
  7124                           
  7125                           ;Interrupt.c: 78: Nec_code = 0;
  7126  000676  0E00               	movlw	0
  7127  000678  6E5D               	movwf	_Nec_code,c
  7128  00067A  0E00               	movlw	0
  7129  00067C  6E5E               	movwf	_Nec_code+1,c
  7130  00067E  0E00               	movlw	0
  7131  000680  6E5F               	movwf	_Nec_code+2,c
  7132  000682  0E00               	movlw	0
  7133  000684  6E60               	movwf	_Nec_code+3,c
  7134                           
  7135                           ;Interrupt.c: 79: Nec_State = 1;
  7136  000686  0E01               	movlw	1
  7137  000688  6E6A               	movwf	_Nec_State,c
  7138                           
  7139                           ;Interrupt.c: 80: INTCON2bits.INTEDG2 = 1;
  7140  00068A  88F1               	bsf	intcon2,4,c	;volatile
  7141                           
  7142                           ;Interrupt.c: 81: PORTA = Nec_State;
  7143  00068C  C06A  FF80         	movff	_Nec_State,3968	;volatile
  7144                           
  7145                           ;Interrupt.c: 83: return;
  7146  000690  D08A               	goto	i2l59
  7147  000692                     i2l1714:
  7148                           
  7149                           ;Interrupt.c: 87: {
  7150                           ;Interrupt.c: 90: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
  7151  000692  0E35               	movlw	53
  7152  000694  5C63               	subwf	_Time_Elapsed,w,c
  7153  000696  0E21               	movlw	33
  7154  000698  5864               	subwfb	_Time_Elapsed+1,w,c
  7155  00069A  A0D8               	btfss	status,0,c
  7156  00069C  D009               	goto	i2l1722
  7157  00069E  0E1C               	movlw	28
  7158  0006A0  5C63               	subwf	_Time_Elapsed,w,c
  7159  0006A2  0E25               	movlw	37
  7160  0006A4  5864               	subwfb	_Time_Elapsed+1,w,c
  7161  0006A6  B0D8               	btfsc	status,0,c
  7162  0006A8  D003               	goto	i2l1722
  7163                           
  7164                           ;Interrupt.c: 91: {
  7165                           ;Interrupt.c: 93: Nec_State = 2;
  7166  0006AA  0E02               	movlw	2
  7167  0006AC  6E6A               	movwf	_Nec_State,c
  7168  0006AE  D027               	goto	i2l1748
  7169  0006B0                     i2l1722:
  7170                           
  7171                           ;Interrupt.c: 98: else
  7172                           ;Interrupt.c: 99: {
  7173                           ;Interrupt.c: 101: Reset_Nec_State();
  7174  0006B0  ECBB  F00A         	call	_Reset_Nec_State	;wreg free
  7175  0006B4  D02A               	goto	i2l1752
  7176  0006B6  D029               	goto	i2l1752
  7177                           
  7178                           ;Interrupt.c: 105: return;
  7179                           
  7180                           ;Interrupt.c: 103: }
  7181                           ;Interrupt.c: 104: INTCON2bits.INTEDG2 = 0;
  7182  0006B8  D076               	goto	i2l59
  7183  0006BA                     i2l1728:
  7184                           
  7185                           ;Interrupt.c: 109: {
  7186                           ;Interrupt.c: 111: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
  7187  0006BA  0EA1               	movlw	161
  7188  0006BC  5C63               	subwf	_Time_Elapsed,w,c
  7189  0006BE  0E0F               	movlw	15
  7190  0006C0  5864               	subwfb	_Time_Elapsed+1,w,c
  7191  0006C2  A0D8               	btfss	status,0,c
  7192  0006C4  D009               	goto	i2l1736
  7193  0006C6  0E88               	movlw	136
  7194  0006C8  5C63               	subwf	_Time_Elapsed,w,c
  7195  0006CA  0E13               	movlw	19
  7196  0006CC  5864               	subwfb	_Time_Elapsed+1,w,c
  7197  0006CE  B0D8               	btfsc	status,0,c
  7198  0006D0  D003               	goto	i2l1736
  7199  0006D2                     
  7200                           ;Interrupt.c: 112: {
  7201                           ;Interrupt.c: 113: Nec_State = 3;
  7202  0006D2  0E03               	movlw	3
  7203  0006D4  6E6A               	movwf	_Nec_State,c
  7204  0006D6  D04E               	goto	i2l1778
  7205  0006D8                     i2l1736:
  7206                           
  7207                           ;Interrupt.c: 117: else
  7208                           ;Interrupt.c: 118: {
  7209                           ;Interrupt.c: 120: Reset_Nec_State();
  7210  0006D8  ECBB  F00A         	call	_Reset_Nec_State	;wreg free
  7211  0006DC  D051               	goto	i2l1782
  7212  0006DE  D050               	goto	i2l1782
  7213                           
  7214                           ;Interrupt.c: 124: return;
  7215                           
  7216                           ;Interrupt.c: 122: }
  7217                           ;Interrupt.c: 123: INTCON2bits.INTEDG2 = 1;
  7218  0006E0  D062               	goto	i2l59
  7219  0006E2                     i2l1742:
  7220                           
  7221                           ;Interrupt.c: 128: {
  7222                           ;Interrupt.c: 130: if(Time_Elapsed > 400 && Time_Elapsed < 700)
  7223  0006E2  0E91               	movlw	145
  7224  0006E4  5C63               	subwf	_Time_Elapsed,w,c
  7225  0006E6  0E01               	movlw	1
  7226  0006E8  5864               	subwfb	_Time_Elapsed+1,w,c
  7227  0006EA  A0D8               	btfss	status,0,c
  7228  0006EC  D00B               	goto	i2l1750
  7229  0006EE  0EBC               	movlw	188
  7230  0006F0  5C63               	subwf	_Time_Elapsed,w,c
  7231  0006F2  0E02               	movlw	2
  7232  0006F4  5864               	subwfb	_Time_Elapsed+1,w,c
  7233  0006F6  B0D8               	btfsc	status,0,c
  7234  0006F8  D005               	goto	i2l1750
  7235                           
  7236                           ;Interrupt.c: 131: {
  7237                           ;Interrupt.c: 132: Nec_State = 4;
  7238  0006FA  0E04               	movlw	4
  7239  0006FC  D7D7               	goto	L3
  7240  0006FE                     i2l1748:
  7241                           
  7242                           ;Interrupt.c: 133: PORTA = Nec_State;
  7243  0006FE  C06A  FF80         	movff	_Nec_State,3968	;volatile
  7244                           
  7245                           ;Interrupt.c: 135: }
  7246  000702  D003               	goto	i2l1752
  7247  000704                     i2l1750:
  7248                           
  7249                           ;Interrupt.c: 136: else
  7250                           ;Interrupt.c: 137: {
  7251                           ;Interrupt.c: 139: Reset_Nec_State();
  7252  000704  ECBB  F00A         	call	_Reset_Nec_State	;wreg free
  7253  000708  D000               	goto	i2l1752
  7254  00070A                     i2l1752:
  7255                           
  7256                           ;Interrupt.c: 141: }
  7257                           ;Interrupt.c: 142: INTCON2bits.INTEDG2 = 0;
  7258  00070A  98F1               	bcf	intcon2,4,c	;volatile
  7259                           
  7260                           ;Interrupt.c: 143: return;
  7261  00070C  D04C               	goto	i2l59
  7262  00070E                     i2l1756:
  7263                           
  7264                           ;Interrupt.c: 147: {
  7265                           ;Interrupt.c: 149: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  7266  00070E  0E91               	movlw	145
  7267  000710  5C63               	subwf	_Time_Elapsed,w,c
  7268  000712  0E01               	movlw	1
  7269  000714  5864               	subwfb	_Time_Elapsed+1,w,c
  7270  000716  A0D8               	btfss	status,0,c
  7271  000718  D030               	goto	i2l1780
  7272  00071A  0E08               	movlw	8
  7273  00071C  5C63               	subwf	_Time_Elapsed,w,c
  7274  00071E  0E07               	movlw	7
  7275  000720  5864               	subwfb	_Time_Elapsed+1,w,c
  7276  000722  B0D8               	btfsc	status,0,c
  7277  000724  D02A               	goto	i2l1780
  7278                           
  7279                           ;Interrupt.c: 150: {
  7280                           ;Interrupt.c: 151: Nec_code = Nec_code << 1;
  7281  000726  90D8               	bcf	status,0,c
  7282  000728  345D               	rlcf	_Nec_code,w,c
  7283  00072A  6E5D               	movwf	_Nec_code,c
  7284  00072C  345E               	rlcf	_Nec_code+1,w,c
  7285  00072E  6E5E               	movwf	_Nec_code+1,c
  7286  000730  345F               	rlcf	_Nec_code+2,w,c
  7287  000732  6E5F               	movwf	_Nec_code+2,c
  7288  000734  3460               	rlcf	_Nec_code+3,w,c
  7289  000736  6E60               	movwf	_Nec_code+3,c
  7290                           
  7291                           ;Interrupt.c: 152: if (Time_Elapsed > 1000)
  7292  000738  0EE9               	movlw	233
  7293  00073A  5C63               	subwf	_Time_Elapsed,w,c
  7294  00073C  0E03               	movlw	3
  7295  00073E  5864               	subwfb	_Time_Elapsed+1,w,c
  7296  000740  A0D8               	btfss	status,0,c
  7297  000742  D007               	goto	i2l1764
  7298                           
  7299                           ;Interrupt.c: 153: Nec_code++;
  7300  000744  0E01               	movlw	1
  7301  000746  265D               	addwf	_Nec_code,f,c
  7302  000748  0E00               	movlw	0
  7303  00074A  225E               	addwfc	_Nec_code+1,f,c
  7304  00074C  225F               	addwfc	_Nec_code+2,f,c
  7305  00074E  2260               	addwfc	_Nec_code+3,f,c
  7306  000750  D000               	goto	i2l1764
  7307  000752                     i2l1764:
  7308                           
  7309                           ;Interrupt.c: 154: bit_count++;
  7310  000752  2A6C               	incf	_bit_count,f,c
  7311                           
  7312                           ;Interrupt.c: 155: if(bit_count > 31)
  7313  000754  0E1F               	movlw	31
  7314  000756  646C               	cpfsgt	_bit_count,c
  7315  000758  D7BC               	goto	L4
  7316                           
  7317                           ;Interrupt.c: 156: {
  7318                           ;Interrupt.c: 157: Nec_Button = Nec_code >> 8;
  7319  00075A  C05E  F069         	movff	_Nec_code+1,_Nec_Button
  7320                           
  7321                           ;Interrupt.c: 158: Nec_State = 0;
  7322  00075E  0E00               	movlw	0
  7323  000760  6E6A               	movwf	_Nec_State,c
  7324                           
  7325                           ;Interrupt.c: 159: PORTA = Nec_State;
  7326  000762  C06A  FF80         	movff	_Nec_State,3968	;volatile
  7327                           
  7328                           ;Interrupt.c: 161: Nec_OK = 1;
  7329  000766  0E00               	movlw	0
  7330  000768  6E62               	movwf	_Nec_OK+1,c
  7331  00076A  0E01               	movlw	1
  7332  00076C  6E61               	movwf	_Nec_OK,c
  7333                           
  7334                           ;Interrupt.c: 163: INTCON3bits.INT2IE = 0;
  7335  00076E  98F0               	bcf	intcon3,4,c	;volatile
  7336                           
  7337                           ;Interrupt.c: 164: }
  7338  000770  D007               	goto	i2l1782
  7339  000772  D7AF               	goto	L4
  7340  000774                     i2l1778:
  7341                           
  7342                           ;Interrupt.c: 168: PORTA = Nec_State;
  7343  000774  C06A  FF80         	movff	_Nec_State,3968	;volatile
  7344                           
  7345                           ;Interrupt.c: 170: }
  7346                           ;Interrupt.c: 171: }
  7347  000778  D003               	goto	i2l1782
  7348  00077A                     i2l1780:
  7349                           
  7350                           ;Interrupt.c: 173: else
  7351                           ;Interrupt.c: 174: {
  7352                           ;Interrupt.c: 176: Reset_Nec_State();
  7353  00077A  ECBB  F00A         	call	_Reset_Nec_State	;wreg free
  7354  00077E  D000               	goto	i2l1782
  7355  000780                     i2l1782:
  7356                           
  7357                           ;Interrupt.c: 178: }
  7358                           ;Interrupt.c: 179: INTCON2bits.INTEDG2 = 1;
  7359  000780  88F1               	bsf	intcon2,4,c	;volatile
  7360                           
  7361                           ;Interrupt.c: 181: }
  7362                           ;Interrupt.c: 182: }
  7363                           
  7364                           ;Interrupt.c: 180: return;
  7365  000782  D011               	goto	i2l59
  7366  000784                     i2l1788:
  7367  000784  506A               	movf	_Nec_State,w,c
  7368                           
  7369                           ; Switch size 1, requested type "space"
  7370                           ; Number of cases is 5, Range of values is 0 to 4
  7371                           ; switch strategies available:
  7372                           ; Name         Instructions Cycles
  7373                           ; simple_byte           16     9 (average)
  7374                           ;	Chosen strategy is simple_byte
  7375  000786  0A00               	xorlw	0	; case 0
  7376  000788  B4D8               	btfsc	status,2,c
  7377  00078A  D76B               	goto	i2l1702
  7378  00078C  0A01               	xorlw	1	; case 1
  7379  00078E  B4D8               	btfsc	status,2,c
  7380  000790  D780               	goto	i2l1714
  7381  000792  0A03               	xorlw	3	; case 2
  7382  000794  B4D8               	btfsc	status,2,c
  7383  000796  D791               	goto	i2l1728
  7384  000798  0A01               	xorlw	1	; case 3
  7385  00079A  B4D8               	btfsc	status,2,c
  7386  00079C  D7A2               	goto	i2l1742
  7387  00079E  0A07               	xorlw	7	; case 4
  7388  0007A0  B4D8               	btfsc	status,2,c
  7389  0007A2  D7B5               	goto	i2l1756
  7390  0007A4  D000               	goto	i2l59
  7391  0007A6                     i2l59:
  7392  0007A6  0012               	return		;funcret
  7393  0007A8                     __end_of_INTx_isr:
  7394                           	opt stack 0
  7395                           pclatu	equ	0xFFB
  7396                           pclath	equ	0xFFA
  7397                           tblptru	equ	0xFF8
  7398                           tblptrh	equ	0xFF7
  7399                           tblptrl	equ	0xFF6
  7400                           tablat	equ	0xFF5
  7401                           prodh	equ	0xFF4
  7402                           prodl	equ	0xFF3
  7403                           intcon	equ	0xFF2
  7404                           intcon2	equ	0xFF1
  7405                           intcon3	equ	0xFF0
  7406                           postinc0	equ	0xFEE
  7407                           fsr0h	equ	0xFEA
  7408                           fsr0l	equ	0xFE9
  7409                           wreg	equ	0xFE8
  7410                           postdec1	equ	0xFE5
  7411                           fsr1h	equ	0xFE2
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           postdec2	equ	0xFDD
  7416                           fsr2h	equ	0xFDA
  7417                           fsr2l	equ	0xFD9
  7418                           status	equ	0xFD8
  7419                           
  7420 ;; *************** function _Reset_Nec_State *****************
  7421 ;; Defined at:
  7422 ;;		line 50 in file "../Lab10_S3_Sample/Interrupt.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;		None
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;		None               void
  7429 ;; Registers used:
  7430 ;;		wreg, status,2
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;Total ram usage:        0 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; This function calls:
  7443 ;;		Nothing
  7444 ;; This function is called by:
  7445 ;;		_INTx_isr
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           	psect	text40
  7450  001576                     __ptext40:
  7451                           	opt stack 0
  7452  001576                     _Reset_Nec_State:
  7453                           	opt stack 20
  7454                           
  7455                           ;Interrupt.c: 52: Nec_State = 0;
  7456                           
  7457                           ;incstack = 0
  7458  001576  0E00               	movlw	0
  7459  001578  6E6A               	movwf	_Nec_State,c
  7460                           
  7461                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 0;
  7462  00157A  90CD               	bcf	4045,0,c	;volatile
  7463  00157C  0012               	return		;funcret
  7464  00157E                     __end_of_Reset_Nec_State:
  7465                           	opt stack 0
  7466                           pclatu	equ	0xFFB
  7467                           pclath	equ	0xFFA
  7468                           tblptru	equ	0xFF8
  7469                           tblptrh	equ	0xFF7
  7470                           tblptrl	equ	0xFF6
  7471                           tablat	equ	0xFF5
  7472                           prodh	equ	0xFF4
  7473                           prodl	equ	0xFF3
  7474                           intcon	equ	0xFF2
  7475                           intcon2	equ	0xFF1
  7476                           intcon3	equ	0xFF0
  7477                           postinc0	equ	0xFEE
  7478                           fsr0h	equ	0xFEA
  7479                           fsr0l	equ	0xFE9
  7480                           wreg	equ	0xFE8
  7481                           postdec1	equ	0xFE5
  7482                           fsr1h	equ	0xFE2
  7483                           fsr1l	equ	0xFE1
  7484                           indf2	equ	0xFDF
  7485                           postinc2	equ	0xFDE
  7486                           postdec2	equ	0xFDD
  7487                           fsr2h	equ	0xFDA
  7488                           fsr2l	equ	0xFD9
  7489                           status	equ	0xFD8
  7490                           pclatu	equ	0xFFB
  7491                           pclath	equ	0xFFA
  7492                           tblptru	equ	0xFF8
  7493                           tblptrh	equ	0xFF7
  7494                           tblptrl	equ	0xFF6
  7495                           tablat	equ	0xFF5
  7496                           prodh	equ	0xFF4
  7497                           prodl	equ	0xFF3
  7498                           intcon	equ	0xFF2
  7499                           intcon2	equ	0xFF1
  7500                           intcon3	equ	0xFF0
  7501                           postinc0	equ	0xFEE
  7502                           fsr0h	equ	0xFEA
  7503                           fsr0l	equ	0xFE9
  7504                           wreg	equ	0xFE8
  7505                           postdec1	equ	0xFE5
  7506                           fsr1h	equ	0xFE2
  7507                           fsr1l	equ	0xFE1
  7508                           indf2	equ	0xFDF
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515                           	psect	rparam
  7516  0000                     pclatu	equ	0xFFB
  7517                           pclath	equ	0xFFA
  7518                           tblptru	equ	0xFF8
  7519                           tblptrh	equ	0xFF7
  7520                           tblptrl	equ	0xFF6
  7521                           tablat	equ	0xFF5
  7522                           prodh	equ	0xFF4
  7523                           prodl	equ	0xFF3
  7524                           intcon	equ	0xFF2
  7525                           intcon2	equ	0xFF1
  7526                           intcon3	equ	0xFF0
  7527                           postinc0	equ	0xFEE
  7528                           fsr0h	equ	0xFEA
  7529                           fsr0l	equ	0xFE9
  7530                           wreg	equ	0xFE8
  7531                           postdec1	equ	0xFE5
  7532                           fsr1h	equ	0xFE2
  7533                           fsr1l	equ	0xFE1
  7534                           indf2	equ	0xFDF
  7535                           postinc2	equ	0xFDE
  7536                           postdec2	equ	0xFDD
  7537                           fsr2h	equ	0xFDA
  7538                           fsr2l	equ	0xFD9
  7539                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    493
    Data        158
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     60     110
    BANK0           128     17      90
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), Timing_Txt(COMRAM[10]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), Timing_Txt(COMRAM[10]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[22]), STR_1(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), Timing_Txt(COMRAM[10]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _printf->___lwmod
    ___lwmod->___lwdiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_LCD_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART

Critical Paths under _chkisr in COMRAM

    _chkisr->_INTx_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_LCD_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   50946
                                             58 COMRAM     2     2      0
                                             15 BANK0      2     2      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
               _Enable_INT_Interrupt
                     _Init_Interrupt
                          _Init_UART
              _Initialize_LCD_Screen
                       _Wait_One_Sec
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    18      4    1949
                                             28 COMRAM    13     9      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                              0 BANK0      8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         0     0      0       0
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (2) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   20853
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     239
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM     2     2      0
                                              0 BANK0     15     7      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Enable_INT_Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INTx_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INTx_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                    _Reset_Nec_State
 ---------------------------------------------------------------------------------
 (11) _Reset_Nec_State                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Enable_INT_Interrupt
   _Init_Interrupt
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_One_Sec
     _Wait_Half_Second
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 _chkisr (ROOT)
   _INTx_isr
     _Reset_Nec_State
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      5A       5       70.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3C      6E       1       86.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11C      34        0.0%
DATA                 0      0     11C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 31 18:14:45 2024

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                     _SSPSTATbits 000FC7                      drawCircle@x0 001C  
                    drawCircle@y0 001E               ___wmul@multiplicand 0013  
                             l207 122A                               l320 0E2A  
                             l144 0264                               l217 14EC  
                             l321 0D96                               l323 0E06  
                             l331 054E                               l324 0E28  
                             l261 13F2                               l267 0F66  
                             l283 08FC                               l292 0852  
                             l524 02D4                               l285 07D6  
                             l349 096C                               l438 154E  
                             l471 14BE                               l580 10BA  
                             l573 1092                               l549 048A  
                             l582 10D4                               l577 10AC  
                             l585 146E                               l578 10AE  
                             l579 10B8                 ?_Wait_Half_Second 0001  
                             _PR2 000FCB                 _Deactivate_Buzzer 156E  
                             _nbr 0065                               _txt 0067  
                             prod 000FF3                               wreg 000FE8  
              ??_Wait_Half_Second 0011                ?_Deactivate_Buzzer 0001  
                 ??_fillRectangle 001D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize 141E                      __CFG_WDT$OFF 000000  
                            l1103 1128                              l1113 12C2  
                  drawFastVLine@h 0019                              l1142 1352  
                            l4004 0624                    drawFastVLine@x 0022  
                  drawFastVLine@y 0018                              l4110 0238  
                            l4102 01D0                              l3402 0F4E  
                            l4106 0204                              l3404 0F5C  
                            l3430 13D4                              l4080 00B6  
                            l4072 008C                              l3442 12F2  
                            l3610 0DCE                              l4058 0058  
                            l3540 07B8                              l3604 0D60  
                            l4084 00BC                              l4076 0096  
                            l3438 12D6                              l3550 07DA  
                            l3630 0E14                              l3622 0DFC  
                            l3702 139C                              l3392 0F28  
                            l3560 0846                              l3544 07C4  
                            l3704 13A6                              l3570 0874  
                            l3562 084A                              l3554 07E2  
                            l3626 0E0A                              l4098 01A0  
                            l3388 0EF0                              l3580 08F0  
                            l3572 089C                              l3548 07D2  
                            l3660 0AB6                              l3636 0E24  
                            l3732 09CE                              l3716 0952  
                            l3804 10EC                              l3558 0812  
                            l3806 10F6                              l3902 031C  
                            l3752 108A                              l3744 1078  
                            l3592 1320                              l3672 0B30  
                            l3664 0AD8                              l3648 0A62  
                            l3736 0A20                              l3816 111C  
                            l3808 10FE                              l3832 12B6  
                            l3824 128E                              l3912 0350  
                            l3904 0320                              l3578 08C8  
                            l3586 08F8                              l3594 1326  
                            l3674 0B38                              l3826 1298  
                            l3922 0366                              l3764 10A4  
                            l3756 1096                              l3748 1082  
                            l3828 12A0                              l3940 03BE  
                            l3916 0356                              l3908 032C  
                            l3932 0390                              l3942 0402  
                            l3950 045A                              l3926 038A  
                            l3918 035A                              l3934 03A2  
                            l3952 0462                              l3880 0294  
                            l3866 0E92                              l3938 03B6  
                            l3882 029E                              l3954 046E  
                            l3948 0448                              l3876 0284  
                            l3886 02A6                              l3976 0534  
                            l3898 0302                              STR_1 FFD2  
                            STR_2 FFBC                              STR_3 FFF6  
                            STR_4 FFE5                              u2240 0F1E  
                            u2400 08AA                              u2540 0A8E  
                            u2470 0D8E                              u2480 0DC4  
                            i2l47 102C                              i2l59 07A6  
                            _TRMT 007D61               ??_Deactivate_Buzzer 0011  
                            _main 001C                              _font FDCF  
                            fsr0h 000FEA                              _txt1 0100  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 0052                              pclat 000FFA  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
            _Enable_INT_Interrupt 157E                   ??_drawFastVLine 001C  
                    ___param_bank 000010                   _Reset_Nec_State 1576  
                     ?_TIMER1_isr 0001         __end_of_Deactivate_Buzzer 1576  
                 drawFastVLine@hi 0020                   drawFastVLine@lo 0021  
                           ?_main 0001                   drawCircle@ddF_x 0026  
                 drawCircle@ddF_y 0028                             _T0CON 000FD5  
                           _T1CON 000FCD                             _T2CON 000FCA  
                           _T3CON 000FB1                   __end_of___lwdiv 1132  
                 __end_of___lwmod 12CC                   drawCircle@color 0022  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR1H 000FCF                             _TMR0L 000FD6  
                           _TMR1L 000FCE                             _SPBRG 000FAF  
                           _PORTA 000F80                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Rcmd1 0B4E                             _Rcmd3 0C5E  
                           _nRBPU 007F8F                        _Nec_Button 0069  
                __end_of_INTx_isr 07A8                   __end_of_dpowers FFB4  
                           _color 0080                             _font2 FECE  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
           fillCircleHelper@delta 002B                             _putch 154A  
           fillCircleHelper@color 002D                             main@i 00D8  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8             ?_Enable_INT_Interrupt 0001  
                 write_data@data_ 0013                   __initialization 0F68  
                    __end_of_main 027A                      __end_of_font FECE  
                __end_of_Rcmd2red 1392                            ??_main 003B  
                   __activetblptr 000002                 __end_of_LCD_Reset 1518  
       ??_TFT_GreenTab_Initialize 001D                    _Init_Interrupt 14C6  
                          ?_Rcmd1 0001                            ?_Rcmd3 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _CCPR2L 000FBB  
                          ?_putch 0001                            i2l1702 0662  
                          i2l1722 06B0                            i2l1714 0692  
                          i2l1750 0704                            i2l1742 06E2  
                          i2l1752 070A                            i2l1736 06D8  
                          i2l1728 06BA                            i2l1764 0752  
                          i2l1780 077A                            i2l1756 070E  
                          i2l1748 06FE                            i2l1782 0780  
                          i2l1778 0774                            i2l1788 0784  
                          i2l1978 1022                            _OSCCON 000FD3  
              __size_of_Init_UART 0014               __size_of_TIMER1_isr 000C  
                          _SPBRGH 000FB0           __end_of_Reset_Nec_State 157E  
                          _SSPBUF 000FC9                  __end_of_delay_ms 1232  
                          _Nec_OK 0061                  __end_of_fillRect 1316  
                __end_of_drawChar 08FE                __size_of_OpenUSART 0070  
        __size_of_Activate_Buzzer 0012                            ___wmul 1448  
       __size_of_fillCircleHelper 0138                  __end_of_drawtext 0B4E  
                          _chkisr 0008                         ??___lwdiv 0015  
                          _array1 003D                         ??___lwmod 001C  
                          _buffer 00AA                            clear_0 0F6E  
                          clear_1 0F7A                        _Timing_Txt 0053  
      __size_of_Deactivate_Buzzer 0008                            _printf 027A  
                    drawtext@size 00D0                            _strcpy 1392  
                          _strlen 1316            __end_of_Init_Interrupt 14DE  
         ??_Initialize_LCD_Screen 003B                      __pdataCOMRAM 003D  
                    __mediumconst FDCE                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0011                  __end_of_spiwrite 14F2  
                      __accesstop 0080           __end_of__initialization 0FE0  
          ??_Enable_INT_Interrupt 0011                     ___rparam_used 000001  
                   __end_of_Rcmd1 0C5E                     __end_of_Rcmd3 0D50  
                  __pcstackCOMRAM 0001                      __pidataBANK0 13F4  
                    __pidataBANK1 118C                         ?_INTx_isr 0001  
                   __end_of_font2 FFAA                     __end_of_putch 1558  
               __end_of_Init_UART 1506                    drawPixel@color 0019  
                 ?_Init_Interrupt 0001            __size_of_write_command 0010  
      fillCircleHelper@cornername 0029                           ??_Rcmd1 001D  
                         ??_Rcmd3 001D                __size_of_drawPixel 0030  
               __end_of_OpenUSART 10D6                           ??_putch 0011  
                      __pbssBANK0 00AA                         ?_Rcmd2red 0001  
       __size_of_Wait_Half_Second 001A                   spiwrite@spidata 0012  
                ?_Reset_Nec_State 0001                     ?_Wait_One_Sec 0001  
                         ?___wmul 0011                        ??_INTx_isr 0001  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                      ??_TIMER1_isr 0001  
                      _fillCircle 1132                           ?_printf 001D  
                         ?_strcpy 0011                           ?_strlen 0011  
               ??_Activate_Buzzer 0011                        _fillScreen 1490  
                      _drawCircle 048C                         ?_delay_ms 0017  
                       ?_fillRect 0023                         ?_drawChar 002E  
                         _SSPCON1 000FC6                           _SSPSTAT 000FC7  
           __end_of_fillRectangle 0E2C                         ?_drawtext 00C9  
                      ??_Rcmd2red 0014                    ??_Wait_One_Sec 0011  
              __end_of_TIMER1_isr 1564                     _write_command 153A  
                         __Hparam 0000                           __Lparam 0000  
               __end_of_drawPixel 13F4             __end_of_drawFastVLine 0F68  
                _fillCircleHelper 08FE                   __size_of___wmul 0028  
                         ___lwdiv 10D6                           ___lwmod 1280  
                 __size_of_chkisr 105E                         ?_spiwrite 0001  
                         __pcinit 0F68                           __ramtop 1000  
                         __ptext0 001C                           __ptext1 027A  
                         __ptext2 154A                           __ptext3 1280  
                         __ptext4 10D6                           __ptext5 1132  
                         __ptext6 08FE                           __ptext7 048C  
                         __ptext8 1564                           __ptext9 14AC  
                 __size_of_printf 0212                         _T0CONbits 000FD5  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
               __end_of_hexpowers FFBC                         _T1CONbits 000FCD  
                         _dpowers FFAA                         _T3CONbits 000FB1  
                      ??_delay_ms 0019                     drawtext@_text 00CA  
                   drawtext@color 00CC                        ??_fillRect 0028  
                      ??_drawChar 0035                         _LCD_Reset 1506  
                   _setAddrWindow 1232                    __pintcode_body 0FEA  
                      delay_ms@ms 0017              end_of_initialization 0FE0  
                      ??_drawtext 0039                    ?_write_command 0001  
                   __Lmediumconst FDCE                           int_func 0FEA  
                       _RCSTAbits 000FAB                           printf@c 0029  
                         printf@f 001D                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                        ??_spiwrite 0011  
                         strlen@s 0011                   fillCircle@color 00CF  
                     ?_fillCircle 00C9                  drawtext@cursor_x 00D7  
                drawtext@cursor_y 00D6                         _PORTCbits 000F82  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
                     ?_fillScreen 0024                       ?_drawCircle 001C  
  __size_of_Initialize_LCD_Screen 00B4                        drawChar@bg 0032  
   __end_of_Initialize_LCD_Screen 0EE0                         _TRISCbits 000F94  
                  ?_setAddrWindow 0014                        ?_LCD_Reset 0001  
                drawtext@textsize 00D2                        drawPixel@x 001B  
                      drawPixel@y 0018                  _Wait_Half_Second 14AC  
                       _TXSTAbits 000FAC                  ??_Init_Interrupt 0011  
                  __end_of___wmul 1470                     delay_ms@count 001B  
                      _write_data 152A                     __pidataCOMRAM 1470  
                  __end_of_chkisr 1066          ?_TFT_GreenTab_Initialize 0001  
               __size_of_INTx_isr 016E                         _Nec_State 006A  
                      drawtext@bg 00CE              __end_of_Wait_One_Sec 156E  
                  __end_of_printf 048C                    __end_of_strcpy 13C4  
                  __end_of_strlen 1354               start_initialization 0F68  
                       _Init_UART 14F2                   ??_write_command 0013  
                       _OpenUSART 1066               __size_of_fillCircle 005A  
                __CFG_OSC$INTIO67 000000                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
   __size_of_Enable_INT_Interrupt 0006                   _Activate_Buzzer 1518  
                        ??___wmul 0015                          ??_chkisr 0003  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                 setAddrWindow@x0 0017                   setAddrWindow@x1 0015  
                 setAddrWindow@y0 0014                   setAddrWindow@y1 0016  
                        ??_printf 0021                          ??_strcpy 0015  
                        ??_strlen 0013                       __pbssCOMRAM 005D  
                      ?_Init_UART 0001                   ??_setAddrWindow 0017  
                   __pcstackBANK0 00C9                       ??_LCD_Reset 001D  
        __end_of_fillCircleHelper 0A36                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0011                 __size_of_drawtext 0118  
                ___lwdiv@dividend 0011                         _bit_count 006C  
                       __pintcode 0008   __end_of_TFT_GreenTab_Initialize 1448  
                   __pmediumconst FDCE          __size_of_Reset_Nec_State 0008  
                       __tft_type 006B                          ?___lwdiv 0011  
                        ?___lwmod 0018                drawFastVLine@color 001A  
                     ?_write_data 0001                         _drawPixel 13C4  
               __size_of_spiwrite 0014                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _hexpowers FFB4  
                ___lwdiv@quotient 0016                    __size_of_putch 000E  
         __end_of_Activate_Buzzer 152A                    ___wmul@product 0015  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                          _INTx_isr 063A  
           __size_of_Wait_One_Sec 000A                         fillRect@h 0025  
                       fillRect@i 002C                         fillRect@w 0024  
                       fillRect@x 002B                         fillRect@y 0023  
                       drawChar@c 002F                         drawChar@i 0038  
                       drawChar@j 0037                      ??_fillCircle 003B  
                       drawChar@x 0036                         drawChar@y 002E  
                      ?_drawPixel 0018            __size_of_fillRectangle 00DC  
                      _ADCON0bits 000FC2          __end_of_Wait_Half_Second 14C6  
               ___wmul@multiplier 0011                      ??_fillScreen 0026  
                    ??_drawCircle 0024                        printf@flag 0026  
                      printf@prec 0025                         main@found 00D9  
                     ??_Init_UART 0014                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                         copy_data0 0F94  
                       copy_data1 0FB4                         copy_data2 0FD4  
                       drawtext@i 00D4            __size_of_drawFastVLine 0088  
                       drawtext@x 00D1                         drawtext@y 00C9  
                        _Nec_code 005D                 write_command@cmd_ 0013  
                     ??_OpenUSART 0013                          _Rcmd2red 1354  
             __size_of_write_data 0010                   OpenUSART@config 0013  
                    _Time_Elapsed 0063                __end_of_fillCircle 118C  
                    _Wait_One_Sec 1564                          __Hrparam 0000  
              __end_of_fillScreen 14AC                          __Lrparam 0000  
              __end_of_drawCircle 063A                  __size_of___lwdiv 005C  
                __size_of___lwmod 004C                 ??_Reset_Nec_State 0001  
                        _delay_ms 11E0                   ___lwdiv@divisor 0013  
                 ___lwdiv@counter 0015                          __ptext10 0E2C  
                        __ptext11 1392                          __ptext20 1232  
                        __ptext12 1490                          __ptext21 141E  
                        __ptext13 0D50                          __ptext30 1448  
                        __ptext22 0C5E                          __ptext14 0A36  
                        __ptext31 14F2                          __ptext23 1354  
                        __ptext15 1316                          __ptext40 1576  
                        __ptext32 1066                          __ptext24 0B4E  
                        __ptext16 07A8                          __ptext33 14C6  
                        __ptext25 152A                          __ptext17 12CC  
                        __ptext34 157E                          __ptext26 153A  
                        __ptext18 0EE0                          __ptext35 156E  
                        __ptext27 14DE                          __ptext19 13C4  
                        __ptext36 1518                          __ptext28 1506  
                        __ptext29 11E0                          __ptext38 1558  
                        __ptext39 063A                          _fillRect 12CC  
                        _drawChar 07A8             _Initialize_LCD_Screen 0E2C  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 006D  
                        _drawtext 0A36                        strcpy@from 0013  
                   _fillRectangle 0D50                  ?_Activate_Buzzer 0001  
                   __size_of_main 025E                   fillRectangle@hi 0021  
                 fillRectangle@lo 0022                     _drawFastVLine 0EE0  
                       printf@idx 0022                          _spiwrite 14DE  
                       printf@val 0027                       ??_drawPixel 001B  
                        _rowstart 006E                fillCircleHelper@x0 0023  
              fillCircleHelper@y0 0025      __end_of_Enable_INT_Interrupt 1584  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 0011  
               ?_fillCircleHelper 0023                         spiwrite@x 0011  
                        intlevel2 0000                    ?_fillRectangle 0018  
              ??_fillCircleHelper 002F                  ___lwmod@dividend 0018  
           __end_of_write_command 154A                   fillScreen@color 0024  
                    fillCircle@x0 00C9                      fillCircle@y0 00CB  
                  fillRectangle@h 001A                    fillRectangle@w 0019  
                  fillRectangle@x 0023                    fillRectangle@y 0018  
                  ?_drawFastVLine 0018                          printf@ap 0023  
               fillCircleHelper@f 0035                 fillCircleHelper@r 0027  
               fillCircleHelper@x 0037                 fillCircleHelper@y 0039  
                    ??_write_data 0013                        _TIMER1_isr 1558  
                   fillRect@color 0026                   ___lwmod@divisor 001A  
                        strcpy@cp 0015                          strlen@cp 0015  
                        strcpy@to 0011                   ___lwmod@counter 001C  
         __size_of_Init_Interrupt 0018            ?_Initialize_LCD_Screen 0001  
                     fillCircle@r 00CD             __end_of_setAddrWindow 1280  
              fillRectangle@color 001B                     drawChar@color 0030  
              __end_of_write_data 153A                      drawChar@line 0035  
                    drawChar@size 0034  
